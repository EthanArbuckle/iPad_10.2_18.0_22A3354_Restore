uint64_t StockChartResult.stockChart.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_22CB4DCF4(v1, a1, type metadata accessor for StockChart);
}

uint64_t StockChartResult.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for StockChartResult();
  return sub_22CB4DCF4(v1 + *(int *)(v3 + 20), a1, type metadata accessor for DataSource);
}

uint64_t type metadata accessor for StockChartResult()
{
  uint64_t result;

  result = qword_255C34D90;
  if (!qword_255C34D90)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_22CB4DCF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for StockChartResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v46)(char *, char *, uint64_t);
  char *__dst;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = (int *)type metadata accessor for StockChart(0);
    v9 = v8[5];
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_22CB9C544();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    sub_22CB4E03C();
    v13(&v10[*(int *)(v14 + 36)], &v11[*(int *)(v14 + 36)], v12);
    v15 = v8[6];
    v16 = (char *)v7 + v15;
    v17 = (char *)a2 + v15;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = v8[7];
    v19 = (char *)v7 + v18;
    v20 = (char *)a2 + v18;
    v21 = sub_22CB9C664();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v22 = *(int *)(a3 + 20);
    v23 = (uint64_t *)((char *)v7 + v22);
    v24 = (char *)a2 + v22;
    v25 = *(uint64_t *)((char *)a2 + v22 + 8);
    *v23 = *(uint64_t *)((char *)a2 + v22);
    v23[1] = v25;
    v26 = type metadata accessor for DataSource(0);
    v27 = *(int *)(v26 + 20);
    v28 = (char *)v23 + v27;
    v29 = &v24[v27];
    v30 = type metadata accessor for DataSource.Logo(0);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    if (v32(v29, 1, v30))
    {
      sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v34 = sub_22CB9C4F0();
      v35 = *(_QWORD *)(v34 - 8);
      v46 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
      v46(v28, v29, v34);
      v36 = *(int *)(v30 + 20);
      __dst = &v28[v36];
      v37 = &v29[v36];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v37, 1, v34))
      {
        sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(__dst, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        v46(__dst, v37, v34);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v34);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v39 = *(int *)(v26 + 24);
    v40 = (char *)v23 + v39;
    v41 = &v24[v39];
    v42 = sub_22CB9C4F0();
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
  }
  return v7;
}

void sub_22CB4E03C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255C34D78)
  {
    sub_22CB9C544();
    sub_22CB4E09C();
    v0 = sub_22CB9D000();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255C34D78);
  }
}

unint64_t sub_22CB4E09C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255C34D80;
  if (!qword_255C34D80)
  {
    v1 = sub_22CB9C544();
    result = MEMORY[0x22E303264](MEMORY[0x24BDCE948], v1);
    atomic_store(result, (unint64_t *)&qword_255C34D80);
  }
  return result;
}

void sub_22CB4E0E4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_22CB9D1F8();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t destroy for StockChartResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = type metadata accessor for StockChart(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = sub_22CB9C544();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  sub_22CB4E03C();
  v7(v5 + *(int *)(v8 + 36), v6);
  v9 = a1 + *(int *)(v4 + 28);
  v10 = sub_22CB9C664();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v12 = type metadata accessor for DataSource(0);
  v13 = v11 + *(int *)(v12 + 20);
  v14 = type metadata accessor for DataSource.Logo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v15 = sub_22CB9C4F0();
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v17(v13, v15);
    v18 = v13 + *(int *)(v14 + 20);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v18, 1, v15))
      v17(v18, v15);
  }
  v19 = v11 + *(int *)(v12 + 24);
  v20 = sub_22CB9C4F0();
  v21 = *(_QWORD *)(v20 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  return result;
}

_QWORD *initializeWithCopy for StockChartResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v44)(char *, char *, uint64_t);
  char *__dst;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for StockChart(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_22CB9C544();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  sub_22CB4E03C();
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  v13 = v6[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = v6[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = sub_22CB9C664();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = *(int *)(a3 + 20);
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)((char *)a2 + v20 + 8);
  *v21 = *(_QWORD *)((char *)a2 + v20);
  v21[1] = v23;
  v24 = type metadata accessor for DataSource(0);
  v25 = *(int *)(v24 + 20);
  v26 = (char *)v21 + v25;
  v27 = &v22[v25];
  v28 = type metadata accessor for DataSource.Logo(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  swift_bridgeObjectRetain();
  if (v30(v27, 1, v28))
  {
    sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = sub_22CB9C4F0();
    v33 = *(_QWORD *)(v32 - 8);
    v44 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
    v44(v26, v27, v32);
    v34 = *(int *)(v28 + 20);
    __dst = &v26[v34];
    v35 = &v27[v34];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v35, 1, v32))
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(__dst, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v44(__dst, v35, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  v37 = *(int *)(v24 + 24);
  v38 = (char *)v21 + v37;
  v39 = &v22[v37];
  v40 = sub_22CB9C4F0();
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  return a1;
}

_QWORD *assignWithCopy for StockChartResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  char *__dst;
  uint64_t v60;
  uint64_t v61;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for StockChart(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_22CB9C544();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24);
  v11(v8, v9, v10);
  sub_22CB4E03C();
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  v13 = v6[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = v15[8];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v16;
  v17 = v6[7];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = sub_22CB9C664();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  v21 = *(int *)(a3 + 20);
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (char *)a2 + v21;
  *v22 = *(_QWORD *)((char *)a2 + v21);
  v22[1] = *(_QWORD *)((char *)a2 + v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = type metadata accessor for DataSource(0);
  v25 = *(int *)(v24 + 20);
  v26 = (char *)v22 + v25;
  v27 = &v23[v25];
  v28 = type metadata accessor for DataSource.Logo(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  LODWORD(v9) = v30(v26, 1, v28);
  v31 = v30(v27, 1, v28);
  if (!(_DWORD)v9)
  {
    if (v31)
    {
      sub_22CB4E9F8((uint64_t)v26);
      goto LABEL_7;
    }
    v61 = v24;
    v39 = sub_22CB9C4F0();
    v40 = *(_QWORD *)(v39 - 8);
    v41 = *(void (**)(char *, char *, uint64_t))(v40 + 24);
    v41(v26, v27, v39);
    v42 = *(int *)(v28 + 20);
    v43 = &v26[v42];
    v44 = &v27[v42];
    v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
    v46 = v45(v43, 1, v39);
    v47 = v45(v44, 1, v39);
    if (v46)
    {
      if (!v47)
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v43, v44, v39);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v43, 0, 1, v39);
LABEL_16:
        v24 = v61;
        goto LABEL_17;
      }
    }
    else
    {
      if (!v47)
      {
        v41(v43, v44, v39);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v39);
    }
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_16;
  }
  if (v31)
  {
LABEL_7:
    sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_17;
  }
  v60 = v24;
  v32 = sub_22CB9C4F0();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
  v34(v26, v27, v32);
  v35 = *(int *)(v28 + 20);
  __dst = &v26[v35];
  v36 = &v27[v35];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v36, 1, v32))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v34(__dst, v36, v32);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
  }
  v24 = v60;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
LABEL_17:
  v49 = *(int *)(v24 + 24);
  v50 = (char *)v22 + v49;
  v51 = &v23[v49];
  v52 = sub_22CB9C4F0();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v50, 1, v52);
  v56 = v54(v51, 1, v52);
  if (!v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 24))(v50, v51, v52);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
    goto LABEL_22;
  }
  if (v56)
  {
LABEL_22:
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v50, v51, v52);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
  return a1;
}

uint64_t sub_22CB4E9F8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DataSource.Logo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *initializeWithTake for StockChartResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v42)(char *, char *, uint64_t);
  char *__dst;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for StockChart(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_22CB9C544();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  sub_22CB4E03C();
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  v13 = v6[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = v6[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = sub_22CB9C664();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  v20 = *(int *)(a3 + 20);
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  *(_OWORD *)((char *)a1 + v20) = *(_OWORD *)((char *)a2 + v20);
  v23 = type metadata accessor for DataSource(0);
  v24 = *(int *)(v23 + 20);
  v25 = &v21[v24];
  v26 = &v22[v24];
  v27 = type metadata accessor for DataSource.Logo(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v30 = sub_22CB9C4F0();
    v31 = *(_QWORD *)(v30 - 8);
    v42 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v42(v25, v26, v30);
    v32 = *(int *)(v27 + 20);
    __dst = &v25[v32];
    v33 = &v26[v32];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v33, 1, v30))
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v42(__dst, v33, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v35 = *(int *)(v23 + 24);
  v36 = &v21[v35];
  v37 = &v22[v35];
  v38 = sub_22CB9C4F0();
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  return a1;
}

_QWORD *assignWithTake for StockChartResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  char *__dst;
  uint64_t v60;
  uint64_t v61;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for StockChart(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_22CB9C544();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  sub_22CB4E03C();
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  v13 = v6[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = v6[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = sub_22CB9C664();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  v20 = *(int *)(a3 + 20);
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)((char *)a2 + v20 + 8);
  *v21 = *(_QWORD *)((char *)a2 + v20);
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v24 = type metadata accessor for DataSource(0);
  v25 = *(int *)(v24 + 20);
  v26 = (char *)v21 + v25;
  v27 = &v22[v25];
  v28 = type metadata accessor for DataSource.Logo(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  LODWORD(v9) = v30(v26, 1, v28);
  v31 = v30(v27, 1, v28);
  if (!(_DWORD)v9)
  {
    if (v31)
    {
      sub_22CB4E9F8((uint64_t)v26);
      goto LABEL_7;
    }
    v61 = v24;
    v39 = sub_22CB9C4F0();
    v40 = *(_QWORD *)(v39 - 8);
    v41 = *(void (**)(char *, char *, uint64_t))(v40 + 40);
    v41(v26, v27, v39);
    v42 = *(int *)(v28 + 20);
    v43 = &v26[v42];
    v44 = &v27[v42];
    v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
    v46 = v45(v43, 1, v39);
    v47 = v45(v44, 1, v39);
    if (v46)
    {
      if (!v47)
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v43, v44, v39);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v43, 0, 1, v39);
LABEL_16:
        v24 = v61;
        goto LABEL_17;
      }
    }
    else
    {
      if (!v47)
      {
        v41(v43, v44, v39);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v39);
    }
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_16;
  }
  if (v31)
  {
LABEL_7:
    sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_17;
  }
  v60 = v24;
  v32 = sub_22CB9C4F0();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
  v34(v26, v27, v32);
  v35 = *(int *)(v28 + 20);
  __dst = &v26[v35];
  v36 = &v27[v35];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v36, 1, v32))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v34(__dst, v36, v32);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
  }
  v24 = v60;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
LABEL_17:
  v49 = *(int *)(v24 + 24);
  v50 = (char *)v21 + v49;
  v51 = &v22[v49];
  v52 = sub_22CB9C4F0();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v50, 1, v52);
  v56 = v54(v51, 1, v52);
  if (!v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v50, v51, v52);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
    goto LABEL_22;
  }
  if (v56)
  {
LABEL_22:
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v50, v51, v52);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
  return a1;
}

uint64_t getEnumTagSinglePayload for StockChartResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB4F144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for StockChart(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for DataSource(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for StockChartResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB4F1C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for StockChart(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for DataSource(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_22CB4F240()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for StockChart(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for DataSource(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_253F839E8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_253F839E8);
  }
}

uint64_t sub_22CB4F318@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];
  uint64_t v7;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB50858(0, &qword_253F83548);
  result = sub_22CB9CD0C();
  if (v7)
  {
    v4 = type metadata accessor for FeatureAvailability();
    swift_allocObject();
    v5 = sub_22CB93CA0((uint64_t)v6);
    a2[3] = v4;
    result = sub_22CB50668((unint64_t *)&unk_255C34E70, (uint64_t (*)(uint64_t))type metadata accessor for FeatureAvailability, (uint64_t)&unk_22CBA1294);
    a2[4] = result;
    *a2 = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_22CB4F3E4(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  sub_22CB9CCD0();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BEB4348];
  MEMORY[0x24BDAC7A8]();
  sub_22CB505B0(a1, (uint64_t)&v27);
  v3 = swift_allocObject();
  sub_22CB50598(&v27, v3 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v27 = MEMORY[0x24BEE4AF8];
  sub_22CB50668(&qword_253F83568, v2, MEMORY[0x24BEB4358]);
  sub_22CB506A8();
  sub_22CB50668(&qword_253F836F8, (uint64_t (*)(uint64_t))sub_22CB506A8, MEMORY[0x24BEE12C8]);
  sub_22CB9D240();
  sub_22CB506FC(0, &qword_253F83600, &qword_253F83548);
  swift_allocObject();
  v26 = sub_22CB9CDF0();
  sub_22CB505B0(a1, (uint64_t)&v27);
  v5 = swift_allocObject();
  sub_22CB50598(&v27, v5 + 16);
  *(_QWORD *)&v27 = v4;
  sub_22CB9D240();
  sub_22CB506FC(0, &qword_253F835F8, &qword_253F83540);
  swift_allocObject();
  v25 = sub_22CB9CDF0();
  sub_22CB505B0(a1, (uint64_t)&v27);
  v6 = swift_allocObject();
  sub_22CB50598(&v27, v6 + 16);
  *(_QWORD *)&v27 = v4;
  sub_22CB9D240();
  sub_22CB506FC(0, (unint64_t *)&unk_253F83608, &qword_253F83550);
  swift_allocObject();
  v24 = sub_22CB9CDF0();
  sub_22CB505B0(a1, (uint64_t)&v27);
  v7 = swift_allocObject();
  sub_22CB50598(&v27, v7 + 16);
  *(_QWORD *)&v27 = v4;
  sub_22CB9D240();
  sub_22CB506FC(0, (unint64_t *)&unk_253F835B8, (unint64_t *)&unk_253F83500);
  swift_allocObject();
  v23 = sub_22CB9CDF0();
  sub_22CB505B0(a1, (uint64_t)&v27);
  v8 = swift_allocObject();
  sub_22CB50598(&v27, v8 + 16);
  *(_QWORD *)&v27 = v4;
  sub_22CB9D240();
  sub_22CB506FC(0, (unint64_t *)&unk_253F835E8, &qword_253F83530);
  swift_allocObject();
  v22 = sub_22CB9CDF0();
  sub_22CB505B0(a1, (uint64_t)&v27);
  v9 = swift_allocObject();
  sub_22CB50598(&v27, v9 + 16);
  *(_QWORD *)&v27 = v4;
  sub_22CB9D240();
  sub_22CB506FC(0, (unint64_t *)&unk_253F835A8, (unint64_t *)&unk_253F834F0);
  swift_allocObject();
  v21 = sub_22CB9CDF0();
  sub_22CB505B0(a1, (uint64_t)&v27);
  v10 = swift_allocObject();
  sub_22CB50598(&v27, v10 + 16);
  *(_QWORD *)&v27 = v4;
  sub_22CB9D240();
  sub_22CB506FC(0, (unint64_t *)&unk_253F835D8, &qword_253F83520);
  swift_allocObject();
  v20 = sub_22CB9CDF0();
  sub_22CB505B0(a1, (uint64_t)&v27);
  v11 = swift_allocObject();
  sub_22CB50598(&v27, v11 + 16);
  *(_QWORD *)&v27 = v4;
  sub_22CB9D240();
  sub_22CB506FC(0, (unint64_t *)&unk_253F83598, (unint64_t *)&unk_253F834E0);
  swift_allocObject();
  v19 = (char *)sub_22CB9CDF0();
  sub_22CB505B0(a1, (uint64_t)&v27);
  v12 = swift_allocObject();
  sub_22CB50598(&v27, v12 + 16);
  *(_QWORD *)&v27 = v4;
  sub_22CB9D240();
  sub_22CB506FC(0, (unint64_t *)&unk_253F835C8, (unint64_t *)&unk_253F83510);
  swift_allocObject();
  v13 = sub_22CB9CDF0();
  sub_22CB505B0(a1, (uint64_t)&v27);
  v14 = swift_allocObject();
  sub_22CB50598(&v27, v14 + 16);
  *(_QWORD *)&v27 = v4;
  sub_22CB9D240();
  sub_22CB506FC(0, &qword_253F83620, &qword_253F836C0);
  swift_allocObject();
  v15 = sub_22CB9CDF0();
  sub_22CB505B0(a1, (uint64_t)&v27);
  v16 = swift_allocObject();
  sub_22CB50598(&v27, v16 + 16);
  *(_QWORD *)&v27 = v4;
  sub_22CB9D240();
  sub_22CB506FC(0, &qword_253F83618, &qword_253F836B8);
  swift_allocObject();
  v17 = sub_22CB9CDF0();
  type metadata accessor for StockService(0);
  v28 = 0;
  v27 = 0uLL;
  swift_allocObject();
  return sub_22CB5358C((uint64_t *)&v27, v26, v25, v24, v23, v22, v21, v20, v19, v13, v15, v17);
}

uint64_t sub_22CB4FBE8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v4;
  uint64_t v5;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB50858(0, &qword_253F83540);
  sub_22CB9C958();
  sub_22CB9CCF4();
  result = swift_bridgeObjectRelease();
  if (v5)
    return sub_22CB50598(&v4, a2);
  __break(1u);
  return result;
}

uint64_t sub_22CB4FC98@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(_BYTE *, uint64_t)@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;
  _BYTE v8[24];
  uint64_t v9;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB50858(0, a2);
  result = sub_22CB9CD0C();
  if (v9)
    return a3(v8, a4);
  __break(1u);
  return result;
}

uint64_t sub_22CB4FD34@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB50858(0, (unint64_t *)&unk_253F834E0);
  result = sub_22CB9CD0C();
  if (v4)
  {
    *a2 = v4;
    a2[1] = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_22CB4FDB4(_QWORD *a1)
{
  uint64_t result;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for StockService(0);
  result = sub_22CB9CD00();
  if (!result)
    __break(1u);
  return result;
}

uint64_t sub_22CB4FE04@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  char v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _UNKNOWN **v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  sub_22CB9CC88();
  sub_22CB9CC70();
  sub_22CB9CC34();
  v4 = sub_22CB9CC7C();
  swift_release();
  swift_release();
  if ((v4 & 1) != 0)
  {
    if (qword_253F839E0 != -1)
      swift_once();
    v5 = sub_22CB9CEEC();
    __swift_project_value_buffer(v5, (uint64_t)qword_253F86EA8);
    v6 = sub_22CB9CED4();
    v7 = sub_22CB9D1A4();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_22CB4C000, v6, v7, "Registering StocksKitService: XPC Service", v8, 2u);
      MEMORY[0x22E303318](v8, -1, -1);
    }

    v9 = type metadata accessor for StocksKitServiceProxy();
    result = swift_allocObject();
    v11 = result;
    v12 = &off_24F75D570;
    goto LABEL_14;
  }
  if (qword_253F839E0 != -1)
    swift_once();
  v13 = sub_22CB9CEEC();
  __swift_project_value_buffer(v13, (uint64_t)qword_253F86EA8);
  v14 = sub_22CB9CED4();
  v15 = sub_22CB9D1A4();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_22CB4C000, v14, v15, "Registering StocksKitService: In-Process", v16, 2u);
    MEMORY[0x22E303318](v16, -1, -1);
  }

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB50858(0, &qword_253F83548);
  result = sub_22CB9CD0C();
  if (v20)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_22CB50858(0, (unint64_t *)&unk_253F83510);
    result = sub_22CB9CD0C();
    if (v18)
    {
      v9 = type metadata accessor for InProcessStockService();
      v11 = swift_allocObject();
      sub_22CB50598(&v19, v11 + 16);
      result = sub_22CB50598(&v17, v11 + 56);
      v12 = &protocol witness table for InProcessStockService;
LABEL_14:
      a2[3] = v9;
      a2[4] = (uint64_t)v12;
      *a2 = v11;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_22CB500D0@<X0>(_QWORD *a1@<X8>)
{
  objc_class *v2;
  id v3;
  uint64_t result;

  v2 = (objc_class *)type metadata accessor for IdentificationService();
  v3 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  a1[3] = v2;
  result = sub_22CB50668((unint64_t *)&qword_255C34E60, (uint64_t (*)(uint64_t))type metadata accessor for IdentificationService, (uint64_t)&unk_22CBA02D0);
  a1[4] = result;
  *a1 = v3;
  return result;
}

id sub_22CB50140()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NoopAppActivityMonitor()), sel_init);
}

void sub_22CB50164(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for BundleReader;
  *(_QWORD *)(a1 + 32) = &off_24F75DF90;
}

uint64_t sub_22CB5017C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ServiceAssembly()
{
  return objc_opt_self();
}

uint64_t sub_22CB501B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void (*v5)(char *, uint64_t, uint64_t);
  void (*v6)(char *, uint64_t);
  uint64_t v8;

  v0 = sub_22CB9CE08();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8]();
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB9CD48();
  sub_22CB50858(0, &qword_253F83528);
  sub_22CB9CD9C();
  swift_release();
  v4 = *MEMORY[0x24BEB4660];
  v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v5(v3, v4, v0);
  sub_22CB9CCB8();
  swift_release();
  swift_release();
  v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  sub_22CB9CD48();
  type metadata accessor for StockService(0);
  sub_22CB9CD90();
  swift_release();
  swift_release();
  sub_22CB9CD48();
  sub_22CB9CD90();
  swift_release();
  v5(v3, v4, v0);
  sub_22CB9CCB8();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_22CB9CD48();
  sub_22CB50858(0, &qword_253F836C0);
  sub_22CB9CD9C();
  swift_release();
  v5(v3, v4, v0);
  sub_22CB9CCB8();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_22CB9CD48();
  sub_22CB50858(0, &qword_253F83538);
  sub_22CB9CD9C();
  swift_release();
  v5(v3, v4, v0);
  sub_22CB9CCB8();
  swift_release();
  swift_release();
  v6(v3, v0);
  sub_22CB9CD48();
  sub_22CB50508();
  sub_22CB9CD90();
  swift_release();
  swift_release();
  sub_22CB9CD48();
  sub_22CB50858(0, &qword_253F836B8);
  sub_22CB9CD9C();
  swift_release();
  return swift_release();
}

unint64_t sub_22CB50508()
{
  unint64_t result;

  result = qword_253F83710;
  if (!qword_253F83710)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_253F83710);
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_22CB50598(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_22CB505B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_22CB505F4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_22CB50638@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_22CB4FC98((_QWORD *)(v1 + 16), &qword_253F83548, (uint64_t (*)(_BYTE *, uint64_t))sub_22CB50598, a1);
}

uint64_t sub_22CB50668(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x22E303264](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_22CB506A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_253F836F0)
  {
    sub_22CB9CCD0();
    v0 = sub_22CB9D0CC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_253F836F0);
  }
}

void sub_22CB506FC(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_22CB50858(255, a3);
    v4 = sub_22CB9CDFC();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_22CB50758@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_22CB4FBE8((_QWORD *)(v1 + 16), a1);
}

uint64_t sub_22CB50760@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_22CB4FC98((_QWORD *)(v1 + 16), &qword_253F83550, (uint64_t (*)(_BYTE *, uint64_t))sub_22CB50598, a1);
}

uint64_t sub_22CB50790@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_22CB4FC98((_QWORD *)(v1 + 16), (unint64_t *)&unk_253F83500, (uint64_t (*)(_BYTE *, uint64_t))sub_22CB50598, a1);
}

uint64_t sub_22CB507C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_22CB4FC98((_QWORD *)(v1 + 16), &qword_253F83530, (uint64_t (*)(_BYTE *, uint64_t))sub_22CB50598, a1);
}

uint64_t sub_22CB507F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_22CB4FC98((_QWORD *)(v1 + 16), (unint64_t *)&unk_253F834F0, (uint64_t (*)(_BYTE *, uint64_t))sub_22CB50598, a1);
}

uint64_t sub_22CB50820@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_22CB4FC98((_QWORD *)(v1 + 16), &qword_253F83520, (uint64_t (*)(_BYTE *, uint64_t))sub_22CB50598, a1);
}

uint64_t sub_22CB50850@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_22CB4FD34((_QWORD *)(v1 + 16), a1);
}

uint64_t sub_22CB50858(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_22CB508A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_22CB4FC98((_QWORD *)(v1 + 16), (unint64_t *)&unk_253F83510, (uint64_t (*)(_BYTE *, uint64_t))sub_22CB50598, a1);
}

uint64_t sub_22CB508D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_22CB4FC98((_QWORD *)(v1 + 16), &qword_253F836C0, (uint64_t (*)(_BYTE *, uint64_t))sub_22CB50598, a1);
}

uint64_t sub_22CB50904@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_22CB4FC98((_QWORD *)(v1 + 16), &qword_253F836B8, (uint64_t (*)(_BYTE *, uint64_t))sub_22CB50598, a1);
}

void *sub_22CB5095C()
{
  void *result;
  _QWORD v1[4];

  if (qword_253F83648 != -1)
    swift_once();
  sub_22CB64B20((uint64_t)v1);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  type metadata accessor for StockService(0);
  result = (void *)sub_22CB9CCE8();
  if (result)
  {
    off_253F83688 = result;
    return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static StockService.shared.getter()
{
  if (qword_253F83690 != -1)
    swift_once();
  return swift_retain();
}

unint64_t StockService.Configuration.description.getter()
{
  uint64_t v0;
  unint64_t v1;

  v1 = 0xD000000000000015;
  if (*(_QWORD *)(v0 + 8))
  {
    sub_22CB9D27C();
    sub_22CB9D054();
    sub_22CB9D054();
    sub_22CB9D054();
    sub_22CB9D168();
    return 0;
  }
  return v1;
}

unint64_t StockService.NetworkSession.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v1 = v0;
  v2 = 0xD00000000000001ALL;
  v3 = sub_22CB9C544();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4DCF4(v1, (uint64_t)v8, v9);
  sub_22CB50D2C();
  v11 = v10;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, &v8[*(int *)(v11 + 48)], v3);
    v13[0] = 0;
    v13[1] = 0xE000000000000000;
    sub_22CB9D27C();
    sub_22CB9D054();
    sub_22CB9D054();
    swift_bridgeObjectRelease();
    sub_22CB9D054();
    sub_22CB9D168();
    sub_22CB9D054();
    sub_22CB9C52C();
    sub_22CB9D054();
    swift_bridgeObjectRelease();
    v2 = v13[0];
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v2;
}

uint64_t type metadata accessor for StockService.NetworkSession(uint64_t a1)
{
  return sub_22CB60CD0(a1, (uint64_t *)&unk_253F83668);
}

void sub_22CB50D2C()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_253F836E8)
  {
    sub_22CB9C544();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_253F836E8);
  }
}

unint64_t StockService.CachePolicy.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;

  v1 = sub_22CB9C64C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22CB9D5AC();
  v40 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_22CB9D594();
  v38 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_22CB9D600();
  v37 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_22CB9D60C();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v19 = (char *)&v28 - v18;
  v21 = *v0;
  v20 = v0[1];
  if (*((_BYTE *)v0 + 16))
  {
    if (*((_BYTE *)v0 + 16) != 1)
      __asm { BR              X9 }
    v42 = 0;
    v43 = 0xE000000000000000;
    v34 = v16;
    v35 = v21;
    v36 = v20;
    v33 = v17;
    sub_22CB9D27C();
    swift_bridgeObjectRelease();
    v42 = 0xD000000000000012;
    v43 = 0x800000022CBA1DD0;
    sub_22CB5F9BC(0, &qword_255C34E80, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    sub_22CB9D5DC();
    v31 = v2;
    v32 = v1;
    v29 = v5;
    v30 = v4;
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_22CB9DCC0;
    sub_22CB9D5B8();
    sub_22CB9D5C4();
    sub_22CB9D5D0();
    sub_22CB5F474(v22);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_22CB9D5F4();
    sub_22CB9D588();
    sub_22CB9D5A0();
    sub_22CB9C4CC();
  }
  else
  {
    v42 = 0;
    v43 = 0xE000000000000000;
    v34 = v16;
    v35 = v21;
    v36 = v20;
    v33 = v17;
    sub_22CB9D27C();
    swift_bridgeObjectRelease();
    v42 = 0xD000000000000011;
    v43 = 0x800000022CBA1DF0;
    sub_22CB5F9BC(0, &qword_255C34E80, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    sub_22CB9D5DC();
    v29 = v5;
    v30 = v4;
    v31 = v2;
    v32 = v1;
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_22CB9DCC0;
    sub_22CB9D5B8();
    sub_22CB9D5C4();
    sub_22CB9D5D0();
    sub_22CB5F474(v23);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_22CB9D5F4();
    sub_22CB9D588();
    sub_22CB9D5A0();
    sub_22CB9C4CC();
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v29);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v41);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v39);
  v24 = v30;
  sub_22CB9C580();
  sub_22CB9D5E8();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v24, v32);
  v25 = v34;
  v26 = *(void (**)(char *, uint64_t))(v33 + 8);
  v26(v15, v34);
  sub_22CB50668(&qword_255C34E88, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0AF0], MEMORY[0x24BDD0AE8]);
  sub_22CB9D624();
  v26(v19, v25);
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  return v42;
}

uint64_t sub_22CB51344@<X0>(char a1@<W1>, double *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;

  if ((a1 & 1) != 0)
  {
    v4 = (unsigned int *)MEMORY[0x24BEB4308];
  }
  else if (*(_BYTE *)(v2 + 16))
  {
    if (*(_BYTE *)(v2 + 16) != 1)
      __asm { BR              X10 }
    *a2 = (double)sub_22CB9D630();
    v4 = (unsigned int *)MEMORY[0x24BEB4330];
  }
  else
  {
    *a2 = (double)sub_22CB9D630();
    v4 = (unsigned int *)MEMORY[0x24BEB4328];
  }
  v5 = *v4;
  v6 = sub_22CB9CCC4();
  return (*(uint64_t (**)(double *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(a2, v5, v6);
}

uint64_t sub_22CB51470()
{
  return 0;
}

uint64_t sub_22CB5147C()
{
  return 0;
}

void sub_22CB51488(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_22CB51494()
{
  sub_22CB5F7EC();
  return sub_22CB9D654();
}

uint64_t sub_22CB514BC()
{
  sub_22CB5F7EC();
  return sub_22CB9D660();
}

uint64_t sub_22CB514E4()
{
  return 1;
}

uint64_t sub_22CB514F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22CB51528 + 4 * byte_22CB9DD08[a1]))(0x746C7561666564, 0xE700000000000000);
}

uint64_t sub_22CB51528()
{
  return 0x6E4F646568636163;
}

unint64_t sub_22CB51544()
{
  return 0xD000000000000010;
}

uint64_t sub_22CB51560()
{
  return 0x614365726F6E6769;
}

unint64_t sub_22CB51590()
{
  return 0xD000000000000011;
}

uint64_t sub_22CB515B0()
{
  return 12383;
}

uint64_t sub_22CB515C0()
{
  sub_22CB5F7A8();
  return sub_22CB9D654();
}

uint64_t sub_22CB515E8()
{
  sub_22CB5F7A8();
  return sub_22CB9D660();
}

BOOL sub_22CB51610(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_22CB51624()
{
  sub_22CB9D534();
  sub_22CB9D540();
  return sub_22CB9D558();
}

uint64_t sub_22CB51668()
{
  return sub_22CB9D540();
}

uint64_t sub_22CB51690()
{
  sub_22CB9D534();
  sub_22CB9D540();
  return sub_22CB9D558();
}

uint64_t sub_22CB516D0()
{
  unsigned __int8 *v0;

  return sub_22CB514F4(*v0);
}

uint64_t sub_22CB516D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB5FB94(a1, a2);
  *a3 = result;
  return result;
}

void sub_22CB516FC(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_22CB51708()
{
  sub_22CB5F874();
  return sub_22CB9D654();
}

uint64_t sub_22CB51730()
{
  sub_22CB5F874();
  return sub_22CB9D660();
}

uint64_t sub_22CB51758()
{
  sub_22CB5F830();
  return sub_22CB9D654();
}

uint64_t sub_22CB51780()
{
  sub_22CB5F830();
  return sub_22CB9D660();
}

uint64_t sub_22CB517A8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_22CB517D4()
{
  sub_22CB5F764();
  return sub_22CB9D654();
}

uint64_t sub_22CB517FC()
{
  sub_22CB5F764();
  return sub_22CB9D660();
}

uint64_t sub_22CB51824()
{
  sub_22CB5F720();
  return sub_22CB9D654();
}

uint64_t sub_22CB5184C()
{
  sub_22CB5F720();
  return sub_22CB9D660();
}

uint64_t sub_22CB51874()
{
  sub_22CB9D534();
  sub_22CB9D540();
  return sub_22CB9D558();
}

uint64_t sub_22CB518B4()
{
  return sub_22CB9D540();
}

uint64_t sub_22CB518D8()
{
  sub_22CB9D534();
  sub_22CB9D540();
  return sub_22CB9D558();
}

uint64_t sub_22CB51914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_22CB9D4BC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_22CB51990()
{
  sub_22CB5F6DC();
  return sub_22CB9D654();
}

uint64_t sub_22CB519B8()
{
  sub_22CB5F6DC();
  return sub_22CB9D660();
}

uint64_t StockService.CachePolicy.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD v28[12];
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  sub_22CB5F8B8(0, &qword_253F83788, (uint64_t (*)(void))sub_22CB5F6DC, (uint64_t)&type metadata for StockService.CachePolicy.PreferCacheMaxAgeCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v32 = *(_QWORD *)(v4 - 8);
  v33 = v4;
  MEMORY[0x24BDAC7A8]();
  v31 = (char *)v28 - v5;
  sub_22CB5F8B8(0, &qword_253F83780, (uint64_t (*)(void))sub_22CB5F720, (uint64_t)&type metadata for StockService.CachePolicy.PreferCacheCodingKeys, v3);
  v28[10] = *(_QWORD *)(v6 - 8);
  v28[11] = v6;
  MEMORY[0x24BDAC7A8]();
  v28[9] = (char *)v28 - v7;
  sub_22CB5F8B8(0, &qword_253F83778, (uint64_t (*)(void))sub_22CB5F764, (uint64_t)&type metadata for StockService.CachePolicy.IgnoreCacheCodingKeys, v3);
  v28[7] = *(_QWORD *)(v8 - 8);
  v28[8] = v8;
  MEMORY[0x24BDAC7A8]();
  v28[6] = (char *)v28 - v9;
  sub_22CB5F8B8(0, &qword_253F837A8, (uint64_t (*)(void))sub_22CB5F7A8, (uint64_t)&type metadata for StockService.CachePolicy.CachedOnlyMaxAgeCodingKeys, v3);
  v30 = v10;
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8]();
  v29 = (char *)v28 - v12;
  sub_22CB5F8B8(0, &qword_253F837A0, (uint64_t (*)(void))sub_22CB5F7EC, (uint64_t)&type metadata for StockService.CachePolicy.CachedOnlyCodingKeys, v3);
  v28[4] = *(_QWORD *)(v13 - 8);
  v28[5] = v13;
  MEMORY[0x24BDAC7A8]();
  v28[3] = (char *)v28 - v14;
  sub_22CB5F8B8(0, &qword_253F83798, (uint64_t (*)(void))sub_22CB5F830, (uint64_t)&type metadata for StockService.CachePolicy.DefaultCodingKeys, v3);
  v28[2] = v15;
  v28[1] = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8]();
  sub_22CB5F8B8(0, &qword_253F83790, (uint64_t (*)(void))sub_22CB5F874, (uint64_t)&type metadata for StockService.CachePolicy.CodingKeys, v3);
  v36 = v16;
  v39 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8]();
  v18 = (char *)v28 - v17;
  v19 = *v1;
  v34 = v1[1];
  v35 = v19;
  v20 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB5F874();
  sub_22CB9D57C();
  if (v20)
  {
    if (v20 != 1)
      __asm { BR              X9 }
    LOBYTE(v37) = 5;
    sub_22CB5F6DC();
    v21 = v31;
    v22 = v36;
    v23 = v18;
    sub_22CB9D42C();
    v24 = v33;
    v37 = v35;
    v38 = v34;
    sub_22CB9D480();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v21, v24);
  }
  else
  {
    LOBYTE(v37) = 2;
    sub_22CB5F7A8();
    v25 = v29;
    v22 = v36;
    v23 = v18;
    sub_22CB9D42C();
    v37 = v35;
    v38 = v34;
    v26 = v30;
    sub_22CB9D480();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v25, v26);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v23, v22);
}

uint64_t StockService.CachePolicy.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  _QWORD v31[20];
  char *v32;
  _QWORD *v33;
  uint64_t v34;

  v31[15] = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  sub_22CB5F8B8(0, &qword_253F83948, (uint64_t (*)(void))sub_22CB5F6DC, (uint64_t)&type metadata for StockService.CachePolicy.PreferCacheMaxAgeCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v31[12] = v4;
  v31[19] = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v31[18] = (char *)v31 - v5;
  sub_22CB5F8B8(0, &qword_253F83940, (uint64_t (*)(void))sub_22CB5F720, (uint64_t)&type metadata for StockService.CachePolicy.PreferCacheCodingKeys, v3);
  v31[10] = *(_QWORD *)(v6 - 8);
  v31[11] = v6;
  MEMORY[0x24BDAC7A8]();
  v31[17] = (char *)v31 - v7;
  sub_22CB5F8B8(0, &qword_253F83938, (uint64_t (*)(void))sub_22CB5F764, (uint64_t)&type metadata for StockService.CachePolicy.IgnoreCacheCodingKeys, v3);
  v31[8] = v8;
  v31[6] = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8]();
  v31[14] = (char *)v31 - v9;
  sub_22CB5F8B8(0, &qword_253F83968, (uint64_t (*)(void))sub_22CB5F7A8, (uint64_t)&type metadata for StockService.CachePolicy.CachedOnlyMaxAgeCodingKeys, v3);
  v31[9] = v10;
  v31[7] = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8]();
  v31[16] = (char *)v31 - v11;
  sub_22CB5F8B8(0, &qword_253F83960, (uint64_t (*)(void))sub_22CB5F7EC, (uint64_t)&type metadata for StockService.CachePolicy.CachedOnlyCodingKeys, v3);
  v31[4] = *(_QWORD *)(v12 - 8);
  v31[5] = v12;
  MEMORY[0x24BDAC7A8]();
  v31[13] = (char *)v31 - v13;
  sub_22CB5F8B8(0, &qword_253F83958, (uint64_t (*)(void))sub_22CB5F830, (uint64_t)&type metadata for StockService.CachePolicy.DefaultCodingKeys, v3);
  v31[3] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8]();
  v17 = (char *)v31 - v16;
  sub_22CB5F8B8(0, &qword_253F83950, (uint64_t (*)(void))sub_22CB5F874, (uint64_t)&type metadata for StockService.CachePolicy.CodingKeys, v3);
  v19 = v18;
  v20 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8]();
  v22 = (char *)v31 - v21;
  v23 = a1[3];
  v33 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v23);
  sub_22CB5F874();
  v32 = v22;
  v24 = v34;
  sub_22CB9D570();
  if (!v24)
  {
    v31[2] = v17;
    v31[1] = v15;
    v34 = v20;
    v25 = sub_22CB9D414();
    if (*(_QWORD *)(v25 + 16) == 1)
    {
      v31[0] = v19;
      __asm { BR              X10 }
    }
    v26 = sub_22CB9D2B8();
    swift_allocError();
    v28 = v27;
    sub_22CB5F914();
    *v28 = &type metadata for StockService.CachePolicy;
    v29 = v32;
    sub_22CB9D3B4();
    sub_22CB9D2A0();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, *MEMORY[0x24BEE26D0], v26);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v19);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
}

uint64_t sub_22CB52760@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return StockService.CachePolicy.init(from:)(a1, a2);
}

uint64_t sub_22CB52774(_QWORD *a1)
{
  return StockService.CachePolicy.encode(to:)(a1);
}

id sub_22CB52798()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = *(void **)(v0 + 152);
  if (v1)
  {
    v2 = *(id *)(v0 + 152);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1710]), sel_init);
    v4 = (void *)sub_22CB9D018();
    objc_msgSend(v3, sel_setName_, v4);

    objc_msgSend(v3, sel_setMaxConcurrentOperationCount_, 1);
    v5 = *(void **)(v0 + 152);
    *(_QWORD *)(v0 + 152) = v3;
    v2 = v3;

    v1 = 0;
  }
  v6 = v1;
  return v2;
}

uint64_t StockService.__allocating_init(configuration:)(uint64_t *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  StockService.init(configuration:)(a1);
  return v2;
}

_QWORD *StockService.init(configuration:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v43[4];
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  __int128 v53[2];
  uint64_t v54;
  unint64_t v55;

  v51 = sub_22CB9CCD0();
  MEMORY[0x24BDAC7A8]();
  v52 = (char *)v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_22CB9D1C8();
  v44 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB9D1B0();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8]();
  sub_22CB9CFC4();
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v48 = a1[1];
  v49 = a1[2];
  v50 = v9;
  *(_QWORD *)(v1 + 40) = objc_msgSend(objc_allocWithZone((Class)sub_22CB9CDD8()), sel_init);
  v45 = sub_22CB62544(0, &qword_253F83FB8);
  sub_22CB9CFB8();
  v54 = MEMORY[0x24BEE4AF8];
  v43[3] = sub_22CB50668(&qword_253F83FB0, v6, MEMORY[0x24BEE5698]);
  sub_22CB5F9BC(0, &qword_253F83FA0, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  v43[2] = v10;
  sub_22CB62AD8(&qword_253F83FA8, &qword_253F83FA0, v6);
  sub_22CB9D240();
  v11 = *MEMORY[0x24BEE5750];
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 104);
  v13 = v47;
  v12(v5, v11, v47);
  v43[1] = v8;
  v14 = sub_22CB9D1EC();
  v15 = v46;
  v46[6] = v14;
  sub_22CB9CFAC();
  v54 = MEMORY[0x24BEE4AF8];
  sub_22CB9D240();
  v12(v5, v11, v13);
  v15[7] = sub_22CB9D1EC();
  v15[19] = 0;
  v16 = (char *)v15 + OBJC_IVAR____TtC9StocksKit12StockService____lazy_storage___networkProxy;
  v17 = sub_22CB9CCDC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  if (qword_253F839E0 != -1)
    swift_once();
  v18 = sub_22CB9CEEC();
  __swift_project_value_buffer(v18, (uint64_t)qword_253F86EA8);
  v19 = v48;
  swift_bridgeObjectRetain_n();
  v20 = sub_22CB9CED4();
  v21 = sub_22CB9D1A4();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    *(_QWORD *)&v53[0] = v23;
    *(_DWORD *)v22 = 136315138;
    v25 = v49;
    v24 = v50;
    if (v19)
    {
      v54 = 0;
      v55 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      sub_22CB9D27C();
      sub_22CB9D054();
      sub_22CB9D054();
      sub_22CB9D054();
      sub_22CB9D168();
      swift_bridgeObjectRelease();
      v26 = v54;
      v27 = v55;
    }
    else
    {
      v27 = 0x800000022CBA1D40;
      v26 = 0xD000000000000015;
    }
    v54 = sub_22CB5DFE8(v26, v27, (uint64_t *)v53);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CB4C000, v20, v21, "Creating stocks service with configuration: %s", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v23, -1, -1);
    MEMORY[0x22E303318](v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    v25 = v49;
    v24 = v50;
  }
  v15[2] = v24;
  v15[3] = v19;
  v15[4] = v25;
  if (qword_253F83648 != -1)
    swift_once();
  sub_22CB64B20((uint64_t)&v54);
  sub_22CB505B0((uint64_t)&v54, (uint64_t)v53);
  v28 = swift_allocObject();
  sub_22CB50598(v53, v28 + 16);
  v29 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v53[0] = MEMORY[0x24BEE4AF8];
  v30 = (uint64_t (*)(uint64_t))MEMORY[0x24BEB4348];
  sub_22CB50668(&qword_253F83568, (uint64_t (*)(uint64_t))MEMORY[0x24BEB4348], MEMORY[0x24BEB4358]);
  sub_22CB5F9BC(0, (unint64_t *)&qword_253F836F0, v30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_22CB62AD8(&qword_253F836F8, (unint64_t *)&qword_253F836F0, v30);
  sub_22CB9D240();
  sub_22CB506FC(0, &qword_253F83600, &qword_253F83548);
  swift_allocObject();
  v15[8] = sub_22CB9CDF0();
  sub_22CB505B0((uint64_t)&v54, (uint64_t)v53);
  v31 = swift_allocObject();
  sub_22CB50598(v53, v31 + 16);
  *(_QWORD *)&v53[0] = v29;
  sub_22CB9D240();
  sub_22CB506FC(0, &qword_253F835F8, &qword_253F83540);
  swift_allocObject();
  v15[9] = sub_22CB9CDF0();
  sub_22CB505B0((uint64_t)&v54, (uint64_t)v53);
  v32 = swift_allocObject();
  sub_22CB50598(v53, v32 + 16);
  *(_QWORD *)&v53[0] = v29;
  sub_22CB9D240();
  sub_22CB506FC(0, (unint64_t *)&unk_253F83608, &qword_253F83550);
  swift_allocObject();
  v15[10] = sub_22CB9CDF0();
  sub_22CB505B0((uint64_t)&v54, (uint64_t)v53);
  v33 = swift_allocObject();
  sub_22CB50598(v53, v33 + 16);
  *(_QWORD *)&v53[0] = v29;
  sub_22CB9D240();
  sub_22CB506FC(0, (unint64_t *)&unk_253F835B8, (unint64_t *)&unk_253F83500);
  swift_allocObject();
  v15[11] = sub_22CB9CDF0();
  sub_22CB505B0((uint64_t)&v54, (uint64_t)v53);
  v34 = swift_allocObject();
  sub_22CB50598(v53, v34 + 16);
  *(_QWORD *)&v53[0] = v29;
  sub_22CB9D240();
  sub_22CB506FC(0, (unint64_t *)&unk_253F835E8, &qword_253F83530);
  swift_allocObject();
  v15[12] = sub_22CB9CDF0();
  sub_22CB505B0((uint64_t)&v54, (uint64_t)v53);
  v35 = swift_allocObject();
  sub_22CB50598(v53, v35 + 16);
  *(_QWORD *)&v53[0] = v29;
  sub_22CB9D240();
  sub_22CB506FC(0, (unint64_t *)&unk_253F835A8, (unint64_t *)&unk_253F834F0);
  swift_allocObject();
  v15[13] = sub_22CB9CDF0();
  sub_22CB505B0((uint64_t)&v54, (uint64_t)v53);
  v36 = swift_allocObject();
  sub_22CB50598(v53, v36 + 16);
  *(_QWORD *)&v53[0] = v29;
  sub_22CB9D240();
  sub_22CB506FC(0, (unint64_t *)&unk_253F835D8, &qword_253F83520);
  swift_allocObject();
  v15[14] = sub_22CB9CDF0();
  sub_22CB505B0((uint64_t)&v54, (uint64_t)v53);
  v37 = swift_allocObject();
  sub_22CB50598(v53, v37 + 16);
  *(_QWORD *)&v53[0] = v29;
  sub_22CB9D240();
  sub_22CB506FC(0, (unint64_t *)&unk_253F83598, (unint64_t *)&unk_253F834E0);
  swift_allocObject();
  v15[15] = sub_22CB9CDF0();
  sub_22CB505B0((uint64_t)&v54, (uint64_t)v53);
  v38 = swift_allocObject();
  sub_22CB50598(v53, v38 + 16);
  *(_QWORD *)&v53[0] = v29;
  sub_22CB9D240();
  sub_22CB506FC(0, (unint64_t *)&unk_253F835C8, (unint64_t *)&unk_253F83510);
  swift_allocObject();
  v15[16] = sub_22CB9CDF0();
  sub_22CB505B0((uint64_t)&v54, (uint64_t)v53);
  v39 = swift_allocObject();
  sub_22CB50598(v53, v39 + 16);
  *(_QWORD *)&v53[0] = v29;
  sub_22CB9D240();
  sub_22CB506FC(0, &qword_253F83620, &qword_253F836C0);
  swift_allocObject();
  v15[17] = sub_22CB9CDF0();
  sub_22CB505B0((uint64_t)&v54, (uint64_t)v53);
  v40 = swift_allocObject();
  sub_22CB50598(v53, v40 + 16);
  *(_QWORD *)&v53[0] = v29;
  sub_22CB9D240();
  sub_22CB506FC(0, &qword_253F83618, &qword_253F836B8);
  swift_allocObject();
  v41 = sub_22CB9CDF0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
  v15[18] = v41;
  return v15;
}

_QWORD *sub_22CB5358C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v13 = v12;
  v61 = a7;
  v62 = a8;
  v59 = a5;
  v60 = a6;
  v57 = a3;
  v58 = a4;
  v56 = a2;
  v15 = sub_22CB9D1C8();
  v16 = *(_QWORD *)(v15 - 8);
  v48 = (uint8_t *)v15;
  MEMORY[0x24BDAC7A8]();
  v52 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB9D1B0();
  v18 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8]();
  sub_22CB9CFC4();
  MEMORY[0x24BDAC7A8]();
  v19 = *a1;
  v53 = a1[1];
  v54 = a1[2];
  v55 = v19;
  v13[5] = objc_msgSend(objc_allocWithZone((Class)sub_22CB9CDD8()), sel_init);
  v51 = sub_22CB62544(0, &qword_253F83FB8);
  sub_22CB9CFB8();
  v63 = MEMORY[0x24BEE4AF8];
  v50 = sub_22CB50668(&qword_253F83FB0, v18, MEMORY[0x24BEE5698]);
  sub_22CB5F9BC(0, &qword_253F83FA0, v18, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  v49 = v20;
  sub_22CB62AD8(&qword_253F83FA8, &qword_253F83FA0, v18);
  sub_22CB9D240();
  v21 = *MEMORY[0x24BEE5750];
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 104);
  v23 = v52;
  v22(v52, v21, v15);
  v13[6] = sub_22CB9D1EC();
  sub_22CB9CFAC();
  v63 = MEMORY[0x24BEE4AF8];
  sub_22CB9D240();
  v22(v23, v21, (uint64_t)v48);
  v13[7] = sub_22CB9D1EC();
  v13[19] = 0;
  v24 = (char *)v13 + OBJC_IVAR____TtC9StocksKit12StockService____lazy_storage___networkProxy;
  v25 = sub_22CB9CCDC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  if (qword_253F839E0 != -1)
    swift_once();
  v27 = a11;
  v26 = a12;
  v28 = a10;
  v52 = a9;
  v29 = sub_22CB9CEEC();
  __swift_project_value_buffer(v29, (uint64_t)qword_253F86EA8);
  v30 = v53;
  swift_bridgeObjectRetain_n();
  v31 = sub_22CB9CED4();
  v32 = sub_22CB9D1A4();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = swift_slowAlloc();
    v51 = a12;
    v34 = (uint8_t *)v33;
    v35 = swift_slowAlloc();
    v50 = a11;
    v36 = v35;
    v49 = a10;
    *(_DWORD *)v34 = 136315138;
    v48 = v34 + 4;
    v37 = v54;
    v38 = v55;
    v63 = v55;
    v64 = v30;
    v65 = v54;
    v66 = v35;
    v39 = StockService.Configuration.description.getter();
    v63 = sub_22CB5DFE8(v39, v40, &v66);
    v28 = v49;
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CB4C000, v31, v32, "Creating stocks service with configuration: %s", v34, 0xCu);
    swift_arrayDestroy();
    v41 = v36;
    v27 = v50;
    MEMORY[0x22E303318](v41, -1, -1);
    v42 = v34;
    v26 = v51;
    MEMORY[0x22E303318](v42, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    v37 = v54;
    v38 = v55;
  }
  v13[2] = v38;
  v13[3] = v30;
  v13[4] = v37;
  v43 = v57;
  v13[8] = v56;
  v13[9] = v43;
  v44 = v59;
  v13[10] = v58;
  v13[11] = v44;
  v45 = v61;
  v13[12] = v60;
  v13[13] = v45;
  v46 = v52;
  v13[14] = v62;
  v13[15] = v46;
  v13[16] = v28;
  v13[17] = v27;
  v13[18] = v26;
  return v13;
}

uint64_t StockService.fetch(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_22CB53A7C()
{
  uint64_t v0;
  int8x16_t *v1;
  _QWORD *v2;

  v1 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v1[2].i64[0] = 0x4000000000000000;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_22CB53B14;
  return sub_22CB9CD54();
}

uint64_t sub_22CB53B14()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_22CB53B88()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t StockService.fetch(_:in:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[3] = a2;
  v4[4] = v3;
  v4[2] = a1;
  v4[5] = *a3;
  return swift_task_switch();
}

uint64_t sub_22CB53BE0()
{
  uint64_t v0;
  uint64_t v1;
  int8x16_t *v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  v2[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v2[2].i64[0] = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_22CB53C78;
  return sub_22CB9CD54();
}

uint64_t sub_22CB53C78()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_22CB53CEC()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB53D20(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(double *)(v4 + 88) = a4;
  *(_QWORD *)(v4 + 72) = a2;
  *(_QWORD *)(v4 + 80) = a3;
  *(_QWORD *)(v4 + 64) = a1;
  sub_22CB5F9BC(0, (unint64_t *)&qword_253F83998, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  *(_QWORD *)(v4 + 96) = swift_task_alloc();
  v5 = sub_22CB9C4F0();
  *(_QWORD *)(v4 + 104) = v5;
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 120) = swift_task_alloc();
  v6 = sub_22CB9C988();
  *(_QWORD *)(v4 + 128) = v6;
  *(_QWORD *)(v4 + 136) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 144) = swift_task_alloc();
  v7 = sub_22CB9C9C4();
  *(_QWORD *)(v4 + 152) = v7;
  *(_QWORD *)(v4 + 160) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 168) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_22CB53E10()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if (qword_253F839E0 != -1)
    swift_once();
  v1 = sub_22CB9CEEC();
  v0[22] = __swift_project_value_buffer(v1, (uint64_t)qword_253F86EA8);
  v2 = sub_22CB9CED4();
  v3 = sub_22CB9D1A4();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_22CB4C000, v2, v3, "Fetch logo started", v4, 2u);
    MEMORY[0x22E303318](v4, -1, -1);
  }
  v6 = v0[14];
  v5 = v0[15];
  v8 = v0[12];
  v7 = v0[13];
  v9 = v0[10];

  sub_22CB9CDE4();
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v9, v7);
  v10 = type metadata accessor for DataSource.Logo(0);
  sub_22CB62C38(v9 + *(int *)(v10 + 20), v8);
  sub_22CB9C97C();
  v11 = (_QWORD *)swift_task_alloc();
  v0[23] = v11;
  *v11 = v0;
  v11[1] = sub_22CB53FB4;
  return sub_22CB9CA24();
}

uint64_t sub_22CB53FB4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[17] + 8))(v2[18], v2[16]);
  return swift_task_switch();
}

uint64_t sub_22CB54028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v1 = sub_22CB9C9AC();
  v16 = v2;
  v17 = v1;
  v15 = sub_22CB9C9A0();
  v4 = v3;
  sub_22CB9C9B8();
  v6 = v5;
  v7 = sub_22CB9CED4();
  v8 = sub_22CB9D1A4();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_22CB4C000, v7, v8, "Fetch logo succeeded", v9, 2u);
    MEMORY[0x22E303318](v9, -1, -1);
  }
  v10 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 168);
  v12 = *(_QWORD *)(v0 + 152);
  v13 = *(uint64_t **)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  *v13 = v17;
  v13[1] = v16;
  v13[2] = v15;
  v13[3] = v4;
  v13[4] = v6;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB54170()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 192);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v2 = v1;
  v3 = v1;
  v4 = sub_22CB9CED4();
  v5 = sub_22CB9D1A4();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 192);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v7 = 138543362;
    v9 = v6;
    v10 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 56) = v10;
    sub_22CB9D204();
    *v8 = v10;

    _os_log_impl(&dword_22CB4C000, v4, v5, "Fetch logo failed: %{public}@", v7, 0xCu);
    sub_22CB624E0();
    swift_arrayDestroy();
    MEMORY[0x22E303318](v8, -1, -1);
    MEMORY[0x22E303318](v7, -1, -1);
  }
  else
  {
    v11 = *(void **)(v0 + 192);

  }
  v12 = *(_QWORD *)(v0 + 192);

  sub_22CB62290();
  swift_allocError();
  *(_QWORD *)v13 = v12;
  *(_QWORD *)(v13 + 8) = 0;
  *(_BYTE *)(v13 + 16) = 1;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t StockService.searchStocks(for:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v29 = a4;
  v30 = a3;
  v7 = *v4;
  v8 = sub_22CB9C568();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB9C55C();
  v12 = sub_22CB9C550();
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (qword_253F839E0 != -1)
    swift_once();
  v15 = sub_22CB9CEEC();
  __swift_project_value_buffer(v15, (uint64_t)qword_253F86EA8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v16 = sub_22CB9CED4();
  v17 = sub_22CB9D1A4();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v28[0] = swift_slowAlloc();
    v28[1] = v7;
    v32 = v28[0];
    *(_DWORD *)v18 = 136315394;
    swift_bridgeObjectRetain();
    v31 = sub_22CB5DFE8(v12, v14, &v32);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain();
    v31 = sub_22CB5DFE8(a1, a2, &v32);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22CB4C000, v16, v17, "Stocks search started for requestID: %s, query: %s", (uint8_t *)v18, 0x16u);
    v19 = v28[0];
    swift_arrayDestroy();
    MEMORY[0x22E303318](v19, -1, -1);
    MEMORY[0x22E303318](v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v12;
  *(_QWORD *)(v20 + 24) = v14;
  sub_22CB9C85C();
  swift_bridgeObjectRetain();
  sub_22CB9CE8C();
  swift_release();
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v12;
  v21[3] = v14;
  v21[4] = a1;
  v21[5] = a2;
  sub_22CB5F9BC(0, &qword_255C34EC8, (uint64_t (*)(uint64_t))MEMORY[0x24BEB1BE0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_22CB9CE38();
  swift_release();
  swift_release();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v12;
  *(_QWORD *)(v22 + 24) = v14;
  type metadata accessor for StockSearchResult();
  swift_bridgeObjectRetain();
  sub_22CB9CE38();
  swift_release();
  swift_release();
  v23 = swift_allocObject();
  v25 = v29;
  v24 = v30;
  *(_QWORD *)(v23 + 16) = v30;
  *(_QWORD *)(v23 + 24) = v25;
  swift_retain();
  sub_22CB9CE44();
  swift_release();
  swift_release();
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v12;
  v26[3] = v14;
  v26[4] = v24;
  v26[5] = v25;
  swift_retain();
  sub_22CB9CE50();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_22CB547D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[7];

  if (qword_253F839E0 != -1)
    swift_once();
  v6 = sub_22CB9CEEC();
  __swift_project_value_buffer(v6, (uint64_t)qword_253F86EA8);
  swift_bridgeObjectRetain_n();
  v7 = sub_22CB9CED4();
  v8 = sub_22CB9D1A4();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v13[0] = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    v13[6] = sub_22CB5DFE8(a3, a4, v13);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22CB4C000, v7, v8, "Firing stock search for requestID: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v10, -1, -1);
    MEMORY[0x22E303318](v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_22CB9CDE4();
  __swift_project_boxed_opaque_existential_1(v13, v13[3]);
  v11 = sub_22CB9C8BC();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  return v11;
}

uint64_t sub_22CB549F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  v6 = sub_22CB9CC1C();
  v5[14] = v6;
  v5[15] = *(_QWORD *)(v6 - 8);
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  v7 = sub_22CB9CBF8();
  v5[18] = v7;
  v5[19] = *(_QWORD *)(v7 - 8);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_22CB5F9BC(0, (unint64_t *)&qword_253F83998, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5[22] = swift_task_alloc();
  sub_22CB5F9BC(0, &qword_253F83800, (uint64_t (*)(uint64_t))MEMORY[0x24BEB1988], v8);
  v5[23] = swift_task_alloc();
  sub_22CB5F9BC(0, &qword_253F83E70, type metadata accessor for DataSource.Logo, v8);
  v5[24] = swift_task_alloc();
  v9 = sub_22CB9C928();
  v5[25] = v9;
  v5[26] = *(_QWORD *)(v9 - 8);
  v5[27] = swift_task_alloc();
  v5[28] = type metadata accessor for DataSource(0);
  v5[29] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_22CB54B90()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  _QWORD *v71;
  int v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  if (qword_253F839E0 != -1)
    swift_once();
  v1 = sub_22CB9CEEC();
  __swift_project_value_buffer(v1, (uint64_t)qword_253F86EA8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v2 = sub_22CB9CED4();
  v3 = sub_22CB9D1A4();
  if (os_log_type_enabled(v2, v3))
  {
    v90 = v0[18];
    v4 = v0[11];
    v5 = v0[10];
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v93 = v7;
    *(_DWORD *)v6 = 136315394;
    swift_bridgeObjectRetain();
    v0[7] = sub_22CB5DFE8(v5, v4, &v93);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2080;
    v8 = swift_bridgeObjectRetain();
    v9 = MEMORY[0x22E302910](v8, v90);
    v11 = v10;
    swift_bridgeObjectRelease();
    v0[8] = sub_22CB5DFE8(v9, v11, &v93);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22CB4C000, v2, v3, "Stock search success for requestID: %s, result: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v7, -1, -1);
    MEMORY[0x22E303318](v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  v12 = v0;
  v13 = v0[12];
  v14 = *(_QWORD *)(v13 + 16);
  v15 = MEMORY[0x24BEE4AF8];
  if (v14)
  {
    v16 = v0[19];
    v17 = v0[15];
    v92 = MEMORY[0x24BEE4AF8];
    sub_22CB85300(0, v14, 0);
    v18 = v13 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v74 = *(_QWORD *)(v16 + 72);
    v76 = v16;
    v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
    v72 = *MEMORY[0x24BEB1C48];
    v69 = *MEMORY[0x24BEB1C20];
    v70 = *MEMORY[0x24BEB1C50];
    v67 = *MEMORY[0x24BEB1C28];
    v68 = *MEMORY[0x24BEB1C38];
    v65 = *MEMORY[0x24BEB1C30];
    v66 = *MEMORY[0x24BEB1C40];
    v64 = *MEMORY[0x24BEB1C18];
    v75 = v17;
    v71 = v12;
    do
    {
      v87 = v14;
      v19 = v12[20];
      v20 = v12[21];
      v22 = v12[17];
      v21 = v12[18];
      v23 = v12[16];
      v24 = v12[14];
      v73(v20, v18, v21);
      v73(v19, v20, v21);
      v25 = sub_22CB9CBD4();
      v91 = v26;
      v27 = sub_22CB9CBBC();
      v84 = v28;
      v85 = v27;
      v29 = sub_22CB9CBE0();
      v88 = v30;
      v89 = v29;
      sub_22CB9CBC8();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v23, v22, v24);
      v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 88))(v23, v24);
      if (v31 == v72)
      {
        (*(void (**)(_QWORD, _QWORD))(v17 + 8))(v12[17], v12[14]);
        v78 = 0;
      }
      else
      {
        v32 = v31;
        if (v31 == v70)
        {
          (*(void (**)(_QWORD, _QWORD))(v17 + 8))(v12[17], v12[14]);
          v78 = 1;
        }
        else if (v31 == v69)
        {
          (*(void (**)(_QWORD, _QWORD))(v17 + 8))(v12[17], v12[14]);
          v78 = 2;
        }
        else if (v31 == v68)
        {
          (*(void (**)(_QWORD, _QWORD))(v17 + 8))(v12[17], v12[14]);
          v78 = 3;
        }
        else if (v31 == v67)
        {
          (*(void (**)(_QWORD, _QWORD))(v17 + 8))(v12[17], v12[14]);
          v78 = 4;
        }
        else if (v31 == v66)
        {
          (*(void (**)(_QWORD, _QWORD))(v17 + 8))(v12[17], v12[14]);
          v78 = 5;
        }
        else
        {
          v33 = v12[17];
          v34 = v12[14];
          if (v32 == v65)
          {
            (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v33, v34);
            v78 = 6;
          }
          else
          {
            v35 = v12;
            v36 = v25;
            v37 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
            v37(v33, v34);
            if (v32 == v64)
            {
              v78 = 7;
            }
            else
            {
              v37(v35[16], v35[14]);
              v78 = 0;
            }
            v25 = v36;
            v12 = v35;
          }
        }
      }
      v39 = v12[20];
      v38 = v12[21];
      v40 = v12[18];
      v41 = sub_22CB9CBEC();
      v43 = v42;
      v44 = sub_22CB9CBB0();
      v80 = v45;
      v82 = v44;
      v93 = v89;
      v94 = v88;
      swift_bridgeObjectRetain();
      sub_22CB9D054();
      v46 = v25;
      sub_22CB9D054();
      v48 = v93;
      v47 = v94;
      swift_bridgeObjectRetain();
      v49 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
      v49(v39, v40);
      v49(v38, v40);
      v15 = v92;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22CB85300(0, *(_QWORD *)(v92 + 16) + 1, 1);
        v15 = v92;
      }
      v51 = *(_QWORD *)(v15 + 16);
      v50 = *(_QWORD *)(v15 + 24);
      if (v51 >= v50 >> 1)
      {
        sub_22CB85300(v50 > 1, v51 + 1, 1);
        v15 = v92;
      }
      *(_QWORD *)(v15 + 16) = v51 + 1;
      v52 = v15 + 120 * v51;
      *(_QWORD *)(v52 + 32) = v48;
      *(_QWORD *)(v52 + 40) = v47;
      *(_QWORD *)(v52 + 48) = v46;
      *(_QWORD *)(v52 + 56) = v91;
      *(_QWORD *)(v52 + 64) = v85;
      *(_QWORD *)(v52 + 72) = v84;
      *(_QWORD *)(v52 + 80) = v89;
      *(_QWORD *)(v52 + 88) = v88;
      *(_BYTE *)(v52 + 96) = v78;
      *(_QWORD *)(v52 + 104) = v41;
      *(_QWORD *)(v52 + 112) = v43;
      *(_QWORD *)(v52 + 120) = v41;
      *(_QWORD *)(v52 + 128) = v43;
      v17 = v75;
      v18 += v74;
      *(_QWORD *)(v52 + 136) = v82;
      *(_QWORD *)(v52 + 144) = v80;
      v14 = v87 - 1;
      v12 = v71;
    }
    while (v87 != 1);
  }
  v53 = v12 + 2;
  v54 = v12;
  v55 = (uint64_t *)v12[29];
  v56 = v54[27];
  v57 = v54[24];
  v81 = v54[25];
  v83 = v54[28];
  v58 = v54[23];
  v77 = v54[22];
  v79 = v54[26];
  v86 = (_QWORD *)v54[9];
  sub_22CB9CDE4();
  __swift_project_boxed_opaque_existential_1(v53, v54[5]);
  sub_22CB9C9E8();
  v59 = sub_22CB9C910();
  v61 = v60;
  sub_22CB9C904();
  sub_22CB67BD8(v58, v57);
  sub_22CB9C91C();
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v56, v81);
  *v55 = v59;
  v55[1] = v61;
  sub_22CB6275C(v57, (uint64_t)v55 + *(int *)(v83 + 20), &qword_253F83E70, type metadata accessor for DataSource.Logo);
  sub_22CB6275C(v77, (uint64_t)v55 + *(int *)(v83 + 24), (unint64_t *)&qword_253F83998, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  *v86 = v15;
  v62 = type metadata accessor for StockSearchResult();
  sub_22CB6291C((uint64_t)v55, (uint64_t)v86 + *(int *)(v62 + 20), type metadata accessor for DataSource);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v54[1])();
}

uint64_t StockService.fetchStocks(for:cachePolicy:networkSession:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  os_log_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;

  v67 = a4;
  v68 = a5;
  v71 = *v5;
  v8 = type metadata accessor for StockService.NetworkSession(0);
  v63 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v64 = v10;
  v65 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v58 - v11;
  v13 = sub_22CB9C568();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)a2;
  v70 = *(_QWORD *)(a2 + 8);
  v69 = *(unsigned __int8 *)(a2 + 16);
  sub_22CB9C55C();
  v18 = sub_22CB9C550();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (qword_253F839E0 != -1)
    swift_once();
  v21 = sub_22CB9CEEC();
  __swift_project_value_buffer(v21, (uint64_t)qword_253F86EA8);
  sub_22CB4DCF4(a3, (uint64_t)v12, type metadata accessor for StockService.NetworkSession);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v22 = sub_22CB9CED4();
  v23 = sub_22CB9D1A4();
  v24 = v23;
  v25 = os_log_type_enabled(v22, v23);
  v62 = v17;
  if (v25)
  {
    v26 = swift_slowAlloc();
    v60 = swift_slowAlloc();
    v75 = v60;
    *(_DWORD *)v26 = 136315906;
    v59 = v24;
    swift_bridgeObjectRetain();
    v72 = sub_22CB5DFE8(v18, v20, &v75);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2080;
    v27 = swift_bridgeObjectRetain();
    v28 = MEMORY[0x22E302910](v27, MEMORY[0x24BEE0D00]);
    v58 = v22;
    v29 = v17;
    v30 = a3;
    v31 = v28;
    v61 = v18;
    v32 = v20;
    v34 = v33;
    swift_bridgeObjectRelease();
    v35 = v31;
    a3 = v30;
    v72 = sub_22CB5DFE8(v35, v34, &v75);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2080;
    v72 = v29;
    v73 = v70;
    v74 = v69;
    v36 = StockService.CachePolicy.description.getter();
    v72 = sub_22CB5DFE8(v36, v37, &v75);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 32) = 2080;
    v38 = StockService.NetworkSession.description.getter();
    v72 = sub_22CB5DFE8(v38, v39, &v75);
    v20 = v32;
    v18 = v61;
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    sub_22CB6257C((uint64_t)v12, type metadata accessor for StockService.NetworkSession);
    v40 = v58;
    _os_log_impl(&dword_22CB4C000, v58, (os_log_type_t)v59, "Stock metadata fetch started for requestID: %s, symbols: %s, cachePolicy: %s, networkSession: %s", (uint8_t *)v26, 0x2Au);
    v41 = v60;
    swift_arrayDestroy();
    MEMORY[0x22E303318](v41, -1, -1);
    MEMORY[0x22E303318](v26, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_22CB6257C((uint64_t)v12, type metadata accessor for StockService.NetworkSession);

  }
  v42 = swift_bridgeObjectRetain();
  v61 = sub_22CB60168(v42);
  swift_bridgeObjectRelease();
  v60 = *(_QWORD *)(v66 + 48);
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = v18;
  *(_QWORD *)(v43 + 24) = v20;
  sub_22CB9C85C();
  swift_bridgeObjectRetain();
  sub_22CB9CE8C();
  swift_release();
  v44 = v65;
  sub_22CB4DCF4(a3, v65, type metadata accessor for StockService.NetworkSession);
  v45 = v20;
  v46 = (*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
  v47 = (v64 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = swift_allocObject();
  *(_QWORD *)(v48 + 16) = v18;
  *(_QWORD *)(v48 + 24) = v45;
  sub_22CB6291C(v44, v48 + v46, type metadata accessor for StockService.NetworkSession);
  v49 = v62;
  *(_QWORD *)(v48 + v47) = v61;
  v50 = v48 + ((v47 + 15) & 0xFFFFFFFFFFFFFFF8);
  v51 = v70;
  *(_QWORD *)v50 = v49;
  *(_QWORD *)(v50 + 8) = v51;
  *(_BYTE *)(v50 + 16) = v69;
  sub_22CB628B4(0, &qword_255C34ED0, (uint64_t (*)(uint64_t))MEMORY[0x24BEB1BE0], MEMORY[0x24BEE0460]);
  swift_bridgeObjectRetain();
  sub_22CB9CE38();
  swift_release();
  swift_release();
  v52 = swift_allocObject();
  *(_QWORD *)(v52 + 16) = v18;
  *(_QWORD *)(v52 + 24) = v45;
  type metadata accessor for StockResult();
  swift_bridgeObjectRetain();
  sub_22CB9CE38();
  swift_release();
  swift_release();
  v53 = swift_allocObject();
  v55 = v67;
  v54 = v68;
  *(_QWORD *)(v53 + 16) = v67;
  *(_QWORD *)(v53 + 24) = v54;
  swift_retain();
  sub_22CB9CE44();
  swift_release();
  swift_release();
  v56 = (_QWORD *)swift_allocObject();
  v56[2] = v18;
  v56[3] = v45;
  v56[4] = v55;
  v56[5] = v54;
  swift_retain();
  sub_22CB9CE50();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_22CB559D4(uint64_t a1, uint64_t a2, unint64_t a3, const char *a4)
{
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (qword_253F839E0 != -1)
    swift_once();
  v7 = sub_22CB9CEEC();
  __swift_project_value_buffer(v7, (uint64_t)qword_253F86EA8);
  swift_bridgeObjectRetain_n();
  v8 = sub_22CB9CED4();
  v9 = sub_22CB9D1A4();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v16[0] = v11;
    *(_DWORD *)v10 = 136315138;
    swift_bridgeObjectRetain();
    v19 = sub_22CB5DFE8(a2, a3, v16);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22CB4C000, v8, v9, a4, v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v11, -1, -1);
    MEMORY[0x22E303318](v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_22CB9CDE4();
  v12 = v17;
  v13 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  v14 = sub_22CB71C8C(v12, v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v14;
}

uint64_t sub_22CB55BD8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  double *v47;
  uint64_t (*v48)(uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  double *v65;
  double *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82[3];
  double *v83;
  uint64_t v84;
  uint64_t v85;

  v67 = a8;
  v68 = a7;
  v85 = sub_22CB9C544();
  v70 = *(_QWORD *)(v85 - 8);
  v13 = MEMORY[0x24BDAC7A8](v85);
  v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v78 = (char *)&v61 - v16;
  v77 = sub_22CB9CD3C();
  v75 = *(_QWORD *)(v77 - 8);
  MEMORY[0x24BDAC7A8](v77);
  v74 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_22CB9CCC4();
  v73 = *(_QWORD *)(v76 - 8);
  v18 = MEMORY[0x24BDAC7A8](v76);
  v66 = (double *)((char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v18);
  v65 = (double *)((char *)&v61 - v20);
  v21 = type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8](v21);
  v69 = (uint64_t)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_22CB9CCDC();
  v71 = *(_QWORD *)(v23 - 8);
  v72 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (uint64_t *)((char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_253F839E0 != -1)
    swift_once();
  v26 = sub_22CB9CEEC();
  __swift_project_value_buffer(v26, (uint64_t)qword_253F86EA8);
  swift_bridgeObjectRetain_n();
  v27 = sub_22CB9CED4();
  v28 = sub_22CB9D1A4();
  if (os_log_type_enabled(v27, v28))
  {
    v63 = v15;
    v29 = swift_slowAlloc();
    v64 = a6;
    v30 = (uint8_t *)v29;
    v31 = a3;
    v32 = swift_slowAlloc();
    v82[0] = v32;
    v62 = a5;
    *(_DWORD *)v30 = 136315138;
    swift_bridgeObjectRetain();
    v79 = sub_22CB5DFE8(v31, a4, v82);
    v15 = v63;
    a5 = v62;
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22CB4C000, v27, v28, "Firing stock metadata fetch for requestID: %s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v32, -1, -1);
    MEMORY[0x22E303318](v30, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_22CB5638C(a5, v25);
  v33 = v69;
  sub_22CB4DCF4(a5, v69, type metadata accessor for StockService.NetworkSession);
  sub_22CB50D2C();
  v34 = (uint64_t)v25;
  v36 = v35;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v33, 1, v35) == 1)
  {
    v69 = v34;
    sub_22CB9CDE4();
    v64 = (_QWORD *)v84;
    v66 = v83;
    v63 = (char *)__swift_project_boxed_opaque_existential_1(v82, (uint64_t)v83);
    v37 = swift_bridgeObjectRetain();
    sub_22CB5F188(v37);
    swift_bridgeObjectRelease();
    if (a9)
    {
      if (a9 == 1)
      {
        v38 = (double)sub_22CB9D630();
        v39 = v65;
        *v65 = v38;
        v40 = (unsigned int *)MEMORY[0x24BEB4330];
      }
      else
      {
        v40 = (unsigned int *)qword_24F75FDA0[v68];
        v39 = v65;
      }
    }
    else
    {
      v52 = (double)sub_22CB9D630();
      v39 = v65;
      *v65 = v52;
      v40 = (unsigned int *)MEMORY[0x24BEB4328];
    }
    v53 = v73;
    v54 = v76;
    (*(void (**)(double *, _QWORD, uint64_t))(v73 + 104))(v39, *v40, v76);
    v79 = MEMORY[0x24BEE4AF8];
    v55 = (uint64_t (*)(uint64_t))MEMORY[0x24BEB4408];
    sub_22CB50668(&qword_255C34FF0, (uint64_t (*)(uint64_t))MEMORY[0x24BEB4408], MEMORY[0x24BEB4410]);
    sub_22CB5F9BC(0, &qword_255C34FF8, v55, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_22CB62AD8(&qword_255C35000, &qword_255C34FF8, v55);
    v56 = v74;
    v57 = v77;
    sub_22CB9D240();
    v58 = v78;
    sub_22CB9C538();
    v59 = v69;
    v51 = sub_22CB9C9DC();
    swift_release();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v58, v85);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v56, v57);
    (*(void (**)(double *, uint64_t))(v53 + 8))(v39, v54);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v59, v72);
  }
  else
  {
    swift_bridgeObjectRelease();
    v41 = v33 + *(int *)(v36 + 48);
    v42 = v70;
    v43 = v78;
    v44 = v85;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v78, v41, v85);
    sub_22CB9CDE4();
    v65 = v83;
    v69 = v84;
    v64 = __swift_project_boxed_opaque_existential_1(v82, (uint64_t)v83);
    v45 = swift_bridgeObjectRetain();
    sub_22CB5F188(v45);
    swift_bridgeObjectRelease();
    v79 = v68;
    v80 = v67;
    v81 = a9;
    sub_22CB9C538();
    v46 = sub_22CB9C508();
    v70 = *(_QWORD *)(v42 + 8);
    ((void (*)(char *, uint64_t))v70)(v15, v44);
    v47 = v66;
    sub_22CB51344(v46 & 1, v66);
    v79 = MEMORY[0x24BEE4AF8];
    v48 = (uint64_t (*)(uint64_t))MEMORY[0x24BEB4408];
    sub_22CB50668(&qword_255C34FF0, (uint64_t (*)(uint64_t))MEMORY[0x24BEB4408], MEMORY[0x24BEB4410]);
    sub_22CB5F9BC(0, &qword_255C34FF8, v48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_22CB62AD8(&qword_255C35000, &qword_255C34FF8, v48);
    v49 = v74;
    v50 = v77;
    sub_22CB9D240();
    v51 = sub_22CB9C9DC();
    swift_release();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v49, v50);
    (*(void (**)(double *, uint64_t))(v73 + 8))(v47, v76);
    ((void (*)(char *, uint64_t))v70)(v43, v85);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v34, v72);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
  return v51;
}

uint64_t sub_22CB5638C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  double v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];

  v5 = type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4DCF4(a1, (uint64_t)v7, v8);
  sub_22CB50D2C();
  v10 = v9;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) == 1)
  {
    v11 = *MEMORY[0x24BEB4370];
    v12 = sub_22CB9CCDC();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
  }
  else
  {
    v14 = &v7[*(int *)(v10 + 48)];
    v15 = *(double *)&v7[*(int *)(v10 + 64)];
    v16 = (void *)objc_opt_self();
    v17 = (void *)sub_22CB9D018();
    swift_bridgeObjectRelease();
    v18 = objc_msgSend(v16, sel_backgroundSessionConfigurationWithIdentifier_, v17);

    objc_msgSend(v18, sel_setTimeoutIntervalForResource_, v15);
    v19 = *(void **)(v2 + 40);
    v20 = v18;
    v21 = v19;
    v22 = sub_22CB52798();
    v23 = objc_msgSend((id)objc_opt_self(), sel_sessionWithConfiguration_delegate_delegateQueue_, v20, v21, v22);

    v30[4] = sub_22CB62544(0, &qword_255C34F40);
    v30[5] = MEMORY[0x24BEB4778];
    v30[1] = v23;
    sub_22CB9CDC0();
    swift_allocObject();
    v24 = v21;
    v25 = v23;
    v26 = sub_22CB9CDB4();

    *a2 = v26;
    v27 = *MEMORY[0x24BEB4368];
    v28 = sub_22CB9CCDC();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(a2, v27, v28);
    v29 = sub_22CB9C544();
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v14, v29);
  }
}

uint64_t sub_22CB565F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_22CB5F9BC(0, (unint64_t *)&qword_253F83998, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5[14] = swift_task_alloc();
  sub_22CB5F9BC(0, &qword_253F83800, (uint64_t (*)(uint64_t))MEMORY[0x24BEB1988], v6);
  v5[15] = swift_task_alloc();
  sub_22CB5F9BC(0, &qword_253F83E70, type metadata accessor for DataSource.Logo, v6);
  v5[16] = swift_task_alloc();
  v7 = sub_22CB9C928();
  v5[17] = v7;
  v5[18] = *(_QWORD *)(v7 - 8);
  v5[19] = swift_task_alloc();
  v5[20] = type metadata accessor for DataSource(0);
  v5[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_22CB56728()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27[2];

  if (qword_253F839E0 != -1)
    swift_once();
  v1 = sub_22CB9CEEC();
  __swift_project_value_buffer(v1, (uint64_t)qword_253F86EA8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v2 = sub_22CB9CED4();
  v3 = sub_22CB9D1A4();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 88);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 80);
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v27[0] = v8;
    *(_DWORD *)v7 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 56) = sub_22CB5DFE8(v6, v5, v27);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    sub_22CB9CBF8();
    swift_bridgeObjectRetain();
    v9 = sub_22CB9CFD0();
    v11 = v10;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 64) = sub_22CB5DFE8(v9, v11, v27);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22CB4C000, v2, v3, "Stock metadata fetch success for requestID: %s, result: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v8, -1, -1);
    MEMORY[0x22E303318](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  v12 = *(uint64_t **)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 152);
  v22 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 136);
  v24 = *(_QWORD *)(v0 + 160);
  v16 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 120);
  v26 = *(uint64_t **)(v0 + 72);
  v25 = sub_22CB5E640(*(_QWORD *)(v0 + 96));
  sub_22CB9CDE4();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  sub_22CB9C9E8();
  v17 = sub_22CB9C910();
  v19 = v18;
  sub_22CB9C904();
  sub_22CB67BD8(v15, v14);
  sub_22CB9C91C();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v13, v23);
  *v12 = v17;
  v12[1] = v19;
  sub_22CB6275C(v14, (uint64_t)v12 + *(int *)(v24 + 20), &qword_253F83E70, type metadata accessor for DataSource.Logo);
  sub_22CB6275C(v16, (uint64_t)v12 + *(int *)(v24 + 24), (unint64_t *)&qword_253F83998, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  *v26 = v25;
  v20 = type metadata accessor for StockResult();
  sub_22CB6291C((uint64_t)v12, (uint64_t)v26 + *(int *)(v20 + 20), type metadata accessor for DataSource);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB56AC0(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  sub_22CB62B20(0, a5, a6);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v14 - v11;
  sub_22CB4DCF4(a1, (uint64_t)&v14 - v11, (uint64_t (*)(_QWORD))a6);
  swift_storeEnumTagMultiPayload();
  a3(v12);
  return sub_22CB625B8((uint64_t)v12, a5, a6);
}

uint64_t StockService.fetchStocks(for:cachePolicy:earliestBeginDate:completion:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_22CB59508(a1, a2, a3, a4, a5, (uint64_t)&unk_24F75F7E8, (uint64_t)sub_22CB602E0, (uint64_t)&unk_24F75F810, (uint64_t)sub_22CB602F0);
}

uint64_t sub_22CB56BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  void *v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v4 = sub_22CB9CFA0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_22CB9CFC4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8]();
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
  {
    sub_22CB9D120();
    MEMORY[0x24BDAC7A8]();
    *(&v17 - 2) = a1;
    *(&v17 - 1) = a2;
    return sub_22CB5DCAC((void (*)(void))sub_22CB62980, (uint64_t)(&v17 - 4));
  }
  else
  {
    sub_22CB62544(0, &qword_253F83FB8);
    v18 = v5;
    v17 = sub_22CB9D1D4();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = a1;
    *(_QWORD *)(v13 + 24) = a2;
    aBlock[4] = sub_22CB62960;
    aBlock[5] = v13;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_22CB5DEA4;
    aBlock[3] = &block_descriptor;
    v14 = _Block_copy(aBlock);
    swift_retain();
    sub_22CB9CFAC();
    v19 = MEMORY[0x24BEE4AF8];
    v15 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
    sub_22CB50668(&qword_253F83810, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    sub_22CB5F9BC(0, &qword_253F838C0, v15, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_22CB62AD8(&qword_253F838C8, &qword_253F838C0, v15);
    sub_22CB9D240();
    v16 = (void *)v17;
    MEMORY[0x22E302A30](0, v11, v7, v14);
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return swift_release();
  }
}

uint64_t StockService.fetchQuotes(for:cachePolicy:networkSession:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  os_log_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;

  v67 = a4;
  v68 = a5;
  v71 = *v5;
  v8 = type metadata accessor for StockService.NetworkSession(0);
  v63 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v64 = v10;
  v65 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v58 - v11;
  v13 = sub_22CB9C568();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)a2;
  v70 = *(_QWORD *)(a2 + 8);
  v69 = *(unsigned __int8 *)(a2 + 16);
  sub_22CB9C55C();
  v18 = sub_22CB9C550();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (qword_253F839E0 != -1)
    swift_once();
  v21 = sub_22CB9CEEC();
  __swift_project_value_buffer(v21, (uint64_t)qword_253F86EA8);
  sub_22CB4DCF4(a3, (uint64_t)v12, type metadata accessor for StockService.NetworkSession);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v22 = sub_22CB9CED4();
  v23 = sub_22CB9D1A4();
  v24 = v23;
  v25 = os_log_type_enabled(v22, v23);
  v62 = v17;
  if (v25)
  {
    v26 = swift_slowAlloc();
    v60 = swift_slowAlloc();
    v75 = v60;
    *(_DWORD *)v26 = 136315906;
    v59 = v24;
    swift_bridgeObjectRetain();
    v72 = sub_22CB5DFE8(v18, v20, &v75);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2080;
    v27 = swift_bridgeObjectRetain();
    v28 = MEMORY[0x22E302910](v27, MEMORY[0x24BEE0D00]);
    v58 = v22;
    v29 = v17;
    v30 = a3;
    v31 = v28;
    v61 = v18;
    v32 = v20;
    v34 = v33;
    swift_bridgeObjectRelease();
    v35 = v31;
    a3 = v30;
    v72 = sub_22CB5DFE8(v35, v34, &v75);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2080;
    v72 = v29;
    v73 = v70;
    v74 = v69;
    v36 = StockService.CachePolicy.description.getter();
    v72 = sub_22CB5DFE8(v36, v37, &v75);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 32) = 2080;
    v38 = StockService.NetworkSession.description.getter();
    v72 = sub_22CB5DFE8(v38, v39, &v75);
    v20 = v32;
    v18 = v61;
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    sub_22CB6257C((uint64_t)v12, type metadata accessor for StockService.NetworkSession);
    v40 = v58;
    _os_log_impl(&dword_22CB4C000, v58, (os_log_type_t)v59, "Quote fetch started for requestID: %s, symbols: %s, cachePolicy: %s, networkSession: %s", (uint8_t *)v26, 0x2Au);
    v41 = v60;
    swift_arrayDestroy();
    MEMORY[0x22E303318](v41, -1, -1);
    MEMORY[0x22E303318](v26, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_22CB6257C((uint64_t)v12, type metadata accessor for StockService.NetworkSession);

  }
  v42 = swift_bridgeObjectRetain();
  v61 = sub_22CB60168(v42);
  swift_bridgeObjectRelease();
  v60 = *(_QWORD *)(v66 + 48);
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = v18;
  *(_QWORD *)(v43 + 24) = v20;
  sub_22CB9C85C();
  swift_bridgeObjectRetain();
  sub_22CB9CE8C();
  swift_release();
  v44 = v65;
  sub_22CB4DCF4(a3, v65, type metadata accessor for StockService.NetworkSession);
  v45 = v20;
  v46 = (*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
  v47 = (v64 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = swift_allocObject();
  *(_QWORD *)(v48 + 16) = v18;
  *(_QWORD *)(v48 + 24) = v45;
  sub_22CB6291C(v44, v48 + v46, type metadata accessor for StockService.NetworkSession);
  v49 = v62;
  *(_QWORD *)(v48 + v47) = v61;
  v50 = v48 + ((v47 + 15) & 0xFFFFFFFFFFFFFFF8);
  v51 = v70;
  *(_QWORD *)v50 = v49;
  *(_QWORD *)(v50 + 8) = v51;
  *(_BYTE *)(v50 + 16) = v69;
  sub_22CB628B4(0, &qword_255C34ED8, (uint64_t (*)(uint64_t))MEMORY[0x24BEB1BA0], MEMORY[0x24BEE0460]);
  swift_bridgeObjectRetain();
  sub_22CB9CE38();
  swift_release();
  swift_release();
  v52 = swift_allocObject();
  *(_QWORD *)(v52 + 16) = v18;
  *(_QWORD *)(v52 + 24) = v45;
  type metadata accessor for QuoteResult();
  swift_bridgeObjectRetain();
  sub_22CB9CE38();
  swift_release();
  swift_release();
  v53 = swift_allocObject();
  v55 = v67;
  v54 = v68;
  *(_QWORD *)(v53 + 16) = v67;
  *(_QWORD *)(v53 + 24) = v54;
  swift_retain();
  sub_22CB9CE44();
  swift_release();
  swift_release();
  v56 = (_QWORD *)swift_allocObject();
  v56[2] = v18;
  v56[3] = v45;
  v56[4] = v55;
  v56[5] = v54;
  swift_retain();
  sub_22CB9CE50();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_22CB574F8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  void (*v44)(char *, uint64_t);
  unsigned int *v45;
  unsigned int *v46;
  uint64_t v47;
  double *v48;
  double *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  char *v56;
  uint64_t *v57;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  double *v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[3];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v63 = a3;
  v64 = a8;
  v66 = a7;
  v75 = sub_22CB9C544();
  v70 = *(_QWORD *)(v75 - 8);
  v12 = MEMORY[0x24BDAC7A8](v75);
  v67 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v68 = (char *)&v59 - v14;
  v15 = sub_22CB9CCC4();
  v73 = *(_QWORD *)(v15 - 8);
  v74 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v65 = (double *)((char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16);
  v19 = (double *)((char *)&v59 - v18);
  v20 = type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_22CB9CCDC();
  v71 = *(_QWORD *)(v23 - 8);
  v72 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (uint64_t *)((char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_253F839E0 != -1)
    swift_once();
  v26 = sub_22CB9CEEC();
  __swift_project_value_buffer(v26, (uint64_t)qword_253F86EA8);
  swift_bridgeObjectRetain_n();
  v27 = sub_22CB9CED4();
  v28 = sub_22CB9D1A4();
  v29 = os_log_type_enabled(v27, v28);
  v69 = v25;
  if (v29)
  {
    v30 = swift_slowAlloc();
    v62 = v19;
    v31 = (uint8_t *)v30;
    v32 = swift_slowAlloc();
    v61 = a6;
    v33 = v32;
    v76[0] = v32;
    v60 = v22;
    *(_DWORD *)v31 = 136315138;
    swift_bridgeObjectRetain();
    v79 = sub_22CB5DFE8(v63, a4, v76);
    v25 = v69;
    v22 = v60;
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22CB4C000, v27, v28, "Firing quote fetch for requestID: %s", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v33, -1, -1);
    v34 = v31;
    v19 = v62;
    MEMORY[0x22E303318](v34, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_22CB5638C(a5, v25);
  sub_22CB4DCF4(a5, (uint64_t)v22, type metadata accessor for StockService.NetworkSession);
  sub_22CB50D2C();
  v36 = v35;
  v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v22, 1, v35);
  v38 = v75;
  if (v37 == 1)
  {
    sub_22CB9CDE4();
    v67 = (char *)v78;
    __swift_project_boxed_opaque_existential_1(v76, v77);
    v39 = swift_bridgeObjectRetain();
    sub_22CB5F188(v39);
    swift_bridgeObjectRelease();
    if (a9)
    {
      if (a9 != 1)
        __asm { BR              X10 }
      *v19 = (double)sub_22CB9D630();
      v46 = (unsigned int *)MEMORY[0x24BEB4330];
    }
    else
    {
      *v19 = (double)sub_22CB9D630();
      v46 = (unsigned int *)MEMORY[0x24BEB4328];
    }
    v47 = v73;
    v48 = v19;
    v49 = v19;
    v50 = v74;
    (*(void (**)(double *, _QWORD, uint64_t))(v73 + 104))(v48, *v46, v74);
    v51 = v68;
    sub_22CB9C538();
    v52 = sub_22CB9C8B0();
    swift_release();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v51, v38);
    (*(void (**)(double *, uint64_t))(v47 + 8))(v49, v50);
    (*(void (**)(uint64_t *, uint64_t))(v71 + 8))(v25, v72);
  }
  else
  {
    swift_bridgeObjectRelease();
    v40 = v70;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, &v22[*(int *)(v36 + 48)], v38);
    sub_22CB9CDE4();
    v63 = v78;
    __swift_project_boxed_opaque_existential_1(v76, v77);
    v41 = swift_bridgeObjectRetain();
    sub_22CB5F188(v41);
    swift_bridgeObjectRelease();
    v42 = v68;
    sub_22CB9C538();
    v43 = sub_22CB9C508();
    v44 = *(void (**)(char *, uint64_t))(v40 + 8);
    v44(v42, v38);
    if ((v43 & 1) != 0)
    {
      v45 = (unsigned int *)MEMORY[0x24BEB4308];
    }
    else if (a9)
    {
      if (a9 != 1)
        __asm { BR              X10 }
      *v65 = (double)sub_22CB9D630();
      v45 = (unsigned int *)MEMORY[0x24BEB4330];
    }
    else
    {
      *v65 = (double)sub_22CB9D630();
      v45 = (unsigned int *)MEMORY[0x24BEB4328];
    }
    v54 = v73;
    v53 = v74;
    v55 = v65;
    (*(void (**)(double *, _QWORD, uint64_t))(v73 + 104))(v65, *v45, v74);
    v56 = v67;
    v57 = v69;
    v52 = sub_22CB9C8B0();
    swift_release();
    (*(void (**)(double *, uint64_t))(v54 + 8))(v55, v53);
    v44(v56, v75);
    (*(void (**)(uint64_t *, uint64_t))(v71 + 8))(v57, v72);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
  return v52;
}

uint64_t sub_22CB57B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_22CB5F9BC(0, (unint64_t *)&qword_253F83998, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5[14] = swift_task_alloc();
  sub_22CB5F9BC(0, &qword_253F83800, (uint64_t (*)(uint64_t))MEMORY[0x24BEB1988], v6);
  v5[15] = swift_task_alloc();
  sub_22CB5F9BC(0, &qword_253F83E70, type metadata accessor for DataSource.Logo, v6);
  v5[16] = swift_task_alloc();
  v7 = sub_22CB9C928();
  v5[17] = v7;
  v5[18] = *(_QWORD *)(v7 - 8);
  v5[19] = swift_task_alloc();
  v5[20] = type metadata accessor for DataSource(0);
  v5[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_22CB57CB0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27[2];

  if (qword_253F839E0 != -1)
    swift_once();
  v1 = sub_22CB9CEEC();
  __swift_project_value_buffer(v1, (uint64_t)qword_253F86EA8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v2 = sub_22CB9CED4();
  v3 = sub_22CB9D1A4();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 88);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 80);
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v27[0] = v8;
    *(_DWORD *)v7 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 56) = sub_22CB5DFE8(v6, v5, v27);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    sub_22CB9CBA4();
    swift_bridgeObjectRetain();
    v9 = sub_22CB9CFD0();
    v11 = v10;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 64) = sub_22CB5DFE8(v9, v11, v27);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22CB4C000, v2, v3, "Quote fetch success for requestID: %s, result: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v8, -1, -1);
    MEMORY[0x22E303318](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  v12 = *(uint64_t **)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 152);
  v22 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 136);
  v24 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 112);
  v16 = *(_QWORD *)(v0 + 120);
  v26 = *(uint64_t **)(v0 + 72);
  v25 = sub_22CB5ED10(*(_QWORD *)(v0 + 96), (uint64_t (*)(_QWORD))type metadata accessor for Quote, (uint64_t (*)(_QWORD))MEMORY[0x24BEB1BA0], &qword_255C34FC8, (void (*)(char *))sub_22CB6B124);
  sub_22CB9CDE4();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  sub_22CB9C9E8();
  v17 = sub_22CB9C910();
  v19 = v18;
  sub_22CB9C904();
  sub_22CB67BD8(v16, v14);
  sub_22CB9C91C();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v13, v23);
  *v12 = v17;
  v12[1] = v19;
  sub_22CB6275C(v14, (uint64_t)v12 + *(int *)(v24 + 20), &qword_253F83E70, type metadata accessor for DataSource.Logo);
  sub_22CB6275C(v15, (uint64_t)v12 + *(int *)(v24 + 24), (unint64_t *)&qword_253F83998, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  *v26 = v25;
  v20 = type metadata accessor for QuoteResult();
  sub_22CB6291C((uint64_t)v12, (uint64_t)v26 + *(int *)(v20 + 20), type metadata accessor for DataSource);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t StockService.fetchQuotes(for:cachePolicy:earliestBeginDate:completion:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_22CB59508(a1, a2, a3, a4, a5, (uint64_t)&unk_24F75F900, (uint64_t)sub_22CB60548, (uint64_t)&unk_24F75F928, (uint64_t)sub_22CB60558);
}

uint64_t sub_22CB580A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t, _QWORD *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD *, _QWORD *, uint64_t, uint64_t);
  uint64_t v29;
  _QWORD v30[2];
  char v31;

  v26 = a7;
  v27 = a4;
  v28 = a10;
  v29 = a8;
  v15 = type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t *)((char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_22CB50D2C();
  v19 = v18;
  v20 = (char *)v17 + *(int *)(v18 + 48);
  v21 = *(int *)(v18 + 64);
  *v17 = a1;
  v17[1] = a2;
  v22 = sub_22CB9C544();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, a3, v22);
  *(_QWORD *)((char *)v17 + v21) = 0x40AC200000000000;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 0, 1, v19);
  v23 = qword_253F83690;
  swift_bridgeObjectRetain();
  if (v23 != -1)
    swift_once();
  v30[0] = a5;
  v30[1] = a6;
  v31 = v26;
  v28(v27, v30, v17, v29, a9);
  return sub_22CB6257C((uint64_t)v17, type metadata accessor for StockService.NetworkSession);
}

uint64_t StockService.fetchQuoteDetails(for:cachePolicy:networkSession:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  os_log_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;

  v67 = a4;
  v68 = a5;
  v71 = *v5;
  v8 = type metadata accessor for StockService.NetworkSession(0);
  v63 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v64 = v10;
  v65 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v58 - v11;
  v13 = sub_22CB9C568();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)a2;
  v70 = *(_QWORD *)(a2 + 8);
  v69 = *(unsigned __int8 *)(a2 + 16);
  sub_22CB9C55C();
  v18 = sub_22CB9C550();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (qword_253F839E0 != -1)
    swift_once();
  v21 = sub_22CB9CEEC();
  __swift_project_value_buffer(v21, (uint64_t)qword_253F86EA8);
  sub_22CB4DCF4(a3, (uint64_t)v12, type metadata accessor for StockService.NetworkSession);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v22 = sub_22CB9CED4();
  v23 = sub_22CB9D1A4();
  v24 = v23;
  v25 = os_log_type_enabled(v22, v23);
  v62 = v17;
  if (v25)
  {
    v26 = swift_slowAlloc();
    v60 = swift_slowAlloc();
    v75 = v60;
    *(_DWORD *)v26 = 136315906;
    v59 = v24;
    swift_bridgeObjectRetain();
    v72 = sub_22CB5DFE8(v18, v20, &v75);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2080;
    v27 = swift_bridgeObjectRetain();
    v28 = MEMORY[0x22E302910](v27, MEMORY[0x24BEE0D00]);
    v58 = v22;
    v29 = v17;
    v30 = a3;
    v31 = v28;
    v61 = v18;
    v32 = v20;
    v34 = v33;
    swift_bridgeObjectRelease();
    v35 = v31;
    a3 = v30;
    v72 = sub_22CB5DFE8(v35, v34, &v75);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2080;
    v72 = v29;
    v73 = v70;
    v74 = v69;
    v36 = StockService.CachePolicy.description.getter();
    v72 = sub_22CB5DFE8(v36, v37, &v75);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 32) = 2080;
    v38 = StockService.NetworkSession.description.getter();
    v72 = sub_22CB5DFE8(v38, v39, &v75);
    v20 = v32;
    v18 = v61;
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    sub_22CB6257C((uint64_t)v12, type metadata accessor for StockService.NetworkSession);
    v40 = v58;
    _os_log_impl(&dword_22CB4C000, v58, (os_log_type_t)v59, "Quote detail fetch started for requestID: %s, symbols: %s, cachePolicy: %s, networkSession: %s", (uint8_t *)v26, 0x2Au);
    v41 = v60;
    swift_arrayDestroy();
    MEMORY[0x22E303318](v41, -1, -1);
    MEMORY[0x22E303318](v26, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    sub_22CB6257C((uint64_t)v12, type metadata accessor for StockService.NetworkSession);

  }
  v42 = swift_bridgeObjectRetain();
  v61 = sub_22CB60168(v42);
  swift_bridgeObjectRelease();
  v60 = *(_QWORD *)(v66 + 48);
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = v18;
  *(_QWORD *)(v43 + 24) = v20;
  sub_22CB9C85C();
  swift_bridgeObjectRetain();
  sub_22CB9CE8C();
  swift_release();
  v44 = v65;
  sub_22CB4DCF4(a3, v65, type metadata accessor for StockService.NetworkSession);
  v45 = v20;
  v46 = (*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
  v47 = (v64 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = swift_allocObject();
  *(_QWORD *)(v48 + 16) = v18;
  *(_QWORD *)(v48 + 24) = v45;
  sub_22CB6291C(v44, v48 + v46, type metadata accessor for StockService.NetworkSession);
  v49 = v62;
  *(_QWORD *)(v48 + v47) = v61;
  v50 = v48 + ((v47 + 15) & 0xFFFFFFFFFFFFFFF8);
  v51 = v70;
  *(_QWORD *)v50 = v49;
  *(_QWORD *)(v50 + 8) = v51;
  *(_BYTE *)(v50 + 16) = v69;
  sub_22CB628B4(0, &qword_255C34EE0, (uint64_t (*)(uint64_t))MEMORY[0x24BEB1550], MEMORY[0x24BEE0460]);
  swift_bridgeObjectRetain();
  sub_22CB9CE38();
  swift_release();
  swift_release();
  v52 = swift_allocObject();
  *(_QWORD *)(v52 + 16) = v18;
  *(_QWORD *)(v52 + 24) = v45;
  type metadata accessor for QuoteDetailResult();
  swift_bridgeObjectRetain();
  sub_22CB9CE38();
  swift_release();
  swift_release();
  v53 = swift_allocObject();
  v55 = v67;
  v54 = v68;
  *(_QWORD *)(v53 + 16) = v67;
  *(_QWORD *)(v53 + 24) = v54;
  swift_retain();
  sub_22CB9CE44();
  swift_release();
  swift_release();
  v56 = (_QWORD *)swift_allocObject();
  v56[2] = v18;
  v56[3] = v45;
  v56[4] = v55;
  v56[5] = v54;
  swift_retain();
  sub_22CB9CE50();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_22CB588A8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  void (*v44)(char *, uint64_t);
  unsigned int *v45;
  unsigned int *v46;
  uint64_t v47;
  double *v48;
  double *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  char *v56;
  uint64_t *v57;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  double *v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[3];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v63 = a3;
  v64 = a8;
  v66 = a7;
  v75 = sub_22CB9C544();
  v70 = *(_QWORD *)(v75 - 8);
  v12 = MEMORY[0x24BDAC7A8](v75);
  v67 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v68 = (char *)&v59 - v14;
  v15 = sub_22CB9CCC4();
  v73 = *(_QWORD *)(v15 - 8);
  v74 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v65 = (double *)((char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16);
  v19 = (double *)((char *)&v59 - v18);
  v20 = type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_22CB9CCDC();
  v71 = *(_QWORD *)(v23 - 8);
  v72 = v23;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (uint64_t *)((char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_253F839E0 != -1)
    swift_once();
  v26 = sub_22CB9CEEC();
  __swift_project_value_buffer(v26, (uint64_t)qword_253F86EA8);
  swift_bridgeObjectRetain_n();
  v27 = sub_22CB9CED4();
  v28 = sub_22CB9D1A4();
  v29 = os_log_type_enabled(v27, v28);
  v69 = v25;
  if (v29)
  {
    v30 = swift_slowAlloc();
    v62 = v19;
    v31 = (uint8_t *)v30;
    v32 = swift_slowAlloc();
    v61 = a6;
    v33 = v32;
    v76[0] = v32;
    v60 = v22;
    *(_DWORD *)v31 = 136315138;
    swift_bridgeObjectRetain();
    v79 = sub_22CB5DFE8(v63, a4, v76);
    v25 = v69;
    v22 = v60;
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22CB4C000, v27, v28, "Firing quote detail fetch for requestID: %s", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v33, -1, -1);
    v34 = v31;
    v19 = v62;
    MEMORY[0x22E303318](v34, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_22CB5638C(a5, v25);
  sub_22CB4DCF4(a5, (uint64_t)v22, type metadata accessor for StockService.NetworkSession);
  sub_22CB50D2C();
  v36 = v35;
  v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v22, 1, v35);
  v38 = v75;
  if (v37 == 1)
  {
    sub_22CB9CDE4();
    v67 = (char *)v78;
    __swift_project_boxed_opaque_existential_1(v76, v77);
    v39 = swift_bridgeObjectRetain();
    sub_22CB5F188(v39);
    swift_bridgeObjectRelease();
    if (a9)
    {
      if (a9 != 1)
        __asm { BR              X10 }
      *v19 = (double)sub_22CB9D630();
      v46 = (unsigned int *)MEMORY[0x24BEB4330];
    }
    else
    {
      *v19 = (double)sub_22CB9D630();
      v46 = (unsigned int *)MEMORY[0x24BEB4328];
    }
    v47 = v73;
    v48 = v19;
    v49 = v19;
    v50 = v74;
    (*(void (**)(double *, _QWORD, uint64_t))(v73 + 104))(v48, *v46, v74);
    v51 = v68;
    sub_22CB9C538();
    v52 = sub_22CB9C934();
    swift_release();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v51, v38);
    (*(void (**)(double *, uint64_t))(v47 + 8))(v49, v50);
    (*(void (**)(uint64_t *, uint64_t))(v71 + 8))(v25, v72);
  }
  else
  {
    swift_bridgeObjectRelease();
    v40 = v70;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, &v22[*(int *)(v36 + 48)], v38);
    sub_22CB9CDE4();
    v63 = v78;
    __swift_project_boxed_opaque_existential_1(v76, v77);
    v41 = swift_bridgeObjectRetain();
    sub_22CB5F188(v41);
    swift_bridgeObjectRelease();
    v42 = v68;
    sub_22CB9C538();
    v43 = sub_22CB9C508();
    v44 = *(void (**)(char *, uint64_t))(v40 + 8);
    v44(v42, v38);
    if ((v43 & 1) != 0)
    {
      v45 = (unsigned int *)MEMORY[0x24BEB4308];
    }
    else if (a9)
    {
      if (a9 != 1)
        __asm { BR              X10 }
      *v65 = (double)sub_22CB9D630();
      v45 = (unsigned int *)MEMORY[0x24BEB4330];
    }
    else
    {
      *v65 = (double)sub_22CB9D630();
      v45 = (unsigned int *)MEMORY[0x24BEB4328];
    }
    v54 = v73;
    v53 = v74;
    v55 = v65;
    (*(void (**)(double *, _QWORD, uint64_t))(v73 + 104))(v65, *v45, v74);
    v56 = v67;
    v57 = v69;
    v52 = sub_22CB9C934();
    swift_release();
    (*(void (**)(double *, uint64_t))(v54 + 8))(v55, v53);
    v44(v56, v75);
    (*(void (**)(uint64_t *, uint64_t))(v71 + 8))(v57, v72);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
  return v52;
}

uint64_t sub_22CB58F30(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v9;
  _QWORD *v10;

  v9 = *a1;
  sub_22CB5F9BC(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEB46D8]);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = v9;
  v10[5] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_22CB9CE2C();
}

uint64_t sub_22CB58FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_22CB5F9BC(0, (unint64_t *)&qword_253F83998, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5[14] = swift_task_alloc();
  sub_22CB5F9BC(0, &qword_253F83800, (uint64_t (*)(uint64_t))MEMORY[0x24BEB1988], v6);
  v5[15] = swift_task_alloc();
  sub_22CB5F9BC(0, &qword_253F83E70, type metadata accessor for DataSource.Logo, v6);
  v5[16] = swift_task_alloc();
  v7 = sub_22CB9C928();
  v5[17] = v7;
  v5[18] = *(_QWORD *)(v7 - 8);
  v5[19] = swift_task_alloc();
  v5[20] = type metadata accessor for DataSource(0);
  v5[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_22CB59110()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27[2];

  if (qword_253F839E0 != -1)
    swift_once();
  v1 = sub_22CB9CEEC();
  __swift_project_value_buffer(v1, (uint64_t)qword_253F86EA8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v2 = sub_22CB9CED4();
  v3 = sub_22CB9D1A4();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 88);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 80);
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v27[0] = v8;
    *(_DWORD *)v7 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 56) = sub_22CB5DFE8(v6, v5, v27);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    sub_22CB9C814();
    swift_bridgeObjectRetain();
    v9 = sub_22CB9CFD0();
    v11 = v10;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 64) = sub_22CB5DFE8(v9, v11, v27);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22CB4C000, v2, v3, "Quote detail fetch success for requestID: %s, result: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v8, -1, -1);
    MEMORY[0x22E303318](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  v12 = *(uint64_t **)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 152);
  v22 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 136);
  v24 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 112);
  v16 = *(_QWORD *)(v0 + 120);
  v26 = *(uint64_t **)(v0 + 72);
  v25 = sub_22CB5ED10(*(_QWORD *)(v0 + 96), (uint64_t (*)(_QWORD))type metadata accessor for QuoteDetail, (uint64_t (*)(_QWORD))MEMORY[0x24BEB1550], &qword_255C34FA0, (void (*)(char *))sub_22CB8AADC);
  sub_22CB9CDE4();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  sub_22CB9C9E8();
  v17 = sub_22CB9C910();
  v19 = v18;
  sub_22CB9C904();
  sub_22CB67BD8(v16, v14);
  sub_22CB9C91C();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v13, v23);
  *v12 = v17;
  v12[1] = v19;
  sub_22CB6275C(v14, (uint64_t)v12 + *(int *)(v24 + 20), &qword_253F83E70, type metadata accessor for DataSource.Logo);
  sub_22CB6275C(v15, (uint64_t)v12 + *(int *)(v24 + 24), (unint64_t *)&qword_253F83998, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  *v26 = v25;
  v20 = type metadata accessor for QuoteDetailResult();
  sub_22CB6291C((uint64_t)v12, (uint64_t)v26 + *(int *)(v20 + 20), type metadata accessor for DataSource);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t StockService.fetchQuoteDetails(for:cachePolicy:earliestBeginDate:completion:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_22CB59508(a1, a2, a3, a4, a5, (uint64_t)&unk_24F75FA18, (uint64_t)sub_22CB606B8, (uint64_t)&unk_24F75FA40, (uint64_t)sub_22CB606C8);
}

uint64_t sub_22CB59508(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;

  v32 = a6;
  v36 = a4;
  v30 = a8;
  v31 = a9;
  v15 = sub_22CB9C544();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x24BDAC7A8]();
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a2[1];
  v33 = *a2;
  v34 = v19;
  v35 = *((unsigned __int8 *)a2 + 16);
  v20 = *(_QWORD *)(v9 + 24);
  if (v20)
  {
    v30 = *(_QWORD *)(v9 + 16);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v15);
    v21 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    v22 = (v17 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v29 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    v31 = a7;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v30;
    *(_QWORD *)(v23 + 24) = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v23 + v21, v18, v15);
    *(_QWORD *)(v23 + v22) = a1;
    v24 = v23 + v29;
    v25 = v34;
    *(_QWORD *)v24 = v33;
    *(_QWORD *)(v24 + 8) = v25;
    *(_BYTE *)(v24 + 16) = v35;
    v26 = (_QWORD *)(v23 + ((v22 + 39) & 0xFFFFFFFFFFFFFFF8));
    *v26 = v36;
    v26[1] = a5;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v23 = swift_allocObject();
    v28 = v33;
    *(_QWORD *)(v23 + 16) = a1;
    *(_QWORD *)(v23 + 24) = v28;
    *(_QWORD *)(v23 + 32) = v34;
    *(_BYTE *)(v23 + 40) = v35;
    *(_QWORD *)(v23 + 48) = v36;
    *(_QWORD *)(v23 + 56) = a5;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  sub_22CB56BC4(v31, v23);
  return swift_release();
}

uint64_t sub_22CB59708(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, _QWORD *, char *, uint64_t, uint64_t))
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v20[2];
  char v21;

  v14 = type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v20[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_253F83690 != -1)
    swift_once();
  v20[0] = a2;
  v20[1] = a3;
  v21 = a4;
  sub_22CB50D2C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  a7(a1, v20, v16, a5, a6);
  return sub_22CB6257C((uint64_t)v16, type metadata accessor for StockService.NetworkSession);
}

uint64_t StockService.fetchStockChart(for:range:cachePolicy:networkSession:completion:)(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _DWORD v48[4];
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[2];

  v57 = a6;
  v58 = a7;
  v63 = a1;
  v56 = *v7;
  v12 = type metadata accessor for StockService.NetworkSession(0);
  v52 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v55 = (uint64_t)v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v48 - v15;
  v17 = sub_22CB9C568();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = *a3;
  v21 = *a4;
  v61 = a4[1];
  v62 = v21;
  v60 = *((unsigned __int8 *)a4 + 16);
  sub_22CB9C55C();
  v22 = sub_22CB9C550();
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (qword_253F839E0 != -1)
    swift_once();
  v25 = sub_22CB9CEEC();
  __swift_project_value_buffer(v25, (uint64_t)qword_253F86EA8);
  sub_22CB4DCF4(a5, (uint64_t)v16, type metadata accessor for StockService.NetworkSession);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v26 = sub_22CB9CED4();
  v27 = sub_22CB9D1A4();
  if (os_log_type_enabled(v26, (os_log_type_t)v27))
  {
    v48[3] = v27;
    v49 = a5;
    v28 = swift_slowAlloc();
    v65[0] = swift_slowAlloc();
    *(_DWORD *)v28 = 136316162;
    swift_bridgeObjectRetain();
    v64 = sub_22CB5DFE8(v22, v24, v65);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 12) = 2080;
    swift_bridgeObjectRetain();
    v64 = sub_22CB5DFE8(v63, a2, v65);
    sub_22CB9D204();
    v51 = a2;
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 22) = 2080;
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  sub_22CB6257C((uint64_t)v16, type metadata accessor for StockService.NetworkSession);

  v51 = *(_QWORD *)(v54 + 48);
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v22;
  *(_QWORD *)(v29 + 24) = v24;
  sub_22CB9C85C();
  swift_bridgeObjectRetain();
  sub_22CB9CE8C();
  swift_release();
  v30 = v55;
  sub_22CB4DCF4(a5, v55, type metadata accessor for StockService.NetworkSession);
  v31 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  v32 = (v31 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v31 + v53 + 31) & 0xFFFFFFFFFFFFFFF8;
  v34 = swift_allocObject();
  v35 = v22;
  v50 = v22;
  v36 = v34;
  *(_QWORD *)(v34 + 16) = v35;
  *(_QWORD *)(v34 + 24) = v24;
  sub_22CB6291C(v30, v34 + v31, type metadata accessor for StockService.NetworkSession);
  v37 = v36 + v32;
  v38 = v63;
  *(_QWORD *)v37 = v63;
  *(_QWORD *)(v37 + 8) = a2;
  *(_BYTE *)(v37 + 16) = v59;
  v39 = v36 + v33;
  v40 = v61;
  *(_QWORD *)v39 = v62;
  *(_QWORD *)(v39 + 8) = v40;
  *(_BYTE *)(v39 + 16) = v60;
  sub_22CB9CACC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_22CB9CE38();
  swift_release();
  swift_release();
  v41 = (_QWORD *)swift_allocObject();
  v42 = v50;
  v41[2] = v50;
  v41[3] = v24;
  v41[4] = v38;
  v41[5] = a2;
  type metadata accessor for StockChartResult();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_22CB9CE38();
  swift_release();
  swift_release();
  v43 = swift_allocObject();
  v45 = v57;
  v44 = v58;
  *(_QWORD *)(v43 + 16) = v57;
  *(_QWORD *)(v43 + 24) = v44;
  swift_retain();
  sub_22CB9CE44();
  swift_release();
  swift_release();
  v46 = (_QWORD *)swift_allocObject();
  v46[2] = v42;
  v46[3] = v24;
  v46[4] = v45;
  v46[5] = v44;
  swift_retain();
  sub_22CB9CE50();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_22CB59FE8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void (*v48)(char *, uint64_t);
  unsigned int *v49;
  unsigned int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  double *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v62;
  double *v63;
  uint64_t v64;
  uint64_t v65;
  double *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84[5];

  v69 = a2;
  v70 = a8;
  v77 = a6;
  v78 = a7;
  v68 = a5;
  v81 = sub_22CB9C544();
  v74 = *(_QWORD *)(v81 - 8);
  v13 = MEMORY[0x24BDAC7A8](v81);
  v73 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v62 - v15;
  v17 = sub_22CB9CCC4();
  v79 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v66 = (double *)((char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v18);
  v21 = (double *)((char *)&v62 - v20);
  v22 = sub_22CB9C6A0();
  v82 = *(_QWORD *)(v22 - 8);
  v83 = v22;
  v23 = MEMORY[0x24BDAC7A8](v22);
  v72 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v71 = (char *)&v62 - v25;
  v26 = type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v62 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_22CB9CCDC();
  v75 = *(_QWORD *)(v29 - 8);
  v76 = v29;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (uint64_t *)((char *)&v62 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_253F839E0 != -1)
    swift_once();
  v65 = a10;
  v67 = a9;
  v32 = sub_22CB9CEEC();
  __swift_project_value_buffer(v32, (uint64_t)qword_253F86EA8);
  swift_bridgeObjectRetain_n();
  v33 = sub_22CB9CED4();
  v34 = sub_22CB9D1A4();
  v35 = os_log_type_enabled(v33, v34);
  v80 = v31;
  if (v35)
  {
    v63 = v21;
    v36 = (uint8_t *)swift_slowAlloc();
    v37 = swift_slowAlloc();
    v64 = v17;
    v38 = v37;
    v84[0] = v37;
    *(_DWORD *)v36 = 136315138;
    swift_bridgeObjectRetain();
    v84[4] = sub_22CB5DFE8(a3, a4, v84);
    v21 = v63;
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22CB4C000, v33, v34, "Firing chart fetch for requestID: %s", v36, 0xCu);
    swift_arrayDestroy();
    v39 = v38;
    v17 = v64;
    MEMORY[0x22E303318](v39, -1, -1);
    v40 = v36;
    v31 = v80;
    MEMORY[0x22E303318](v40, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v41 = v31;
  v42 = v68;
  sub_22CB5638C(v68, v41);
  sub_22CB4DCF4(v42, (uint64_t)v28, type metadata accessor for StockService.NetworkSession);
  sub_22CB50D2C();
  v44 = v43;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v28, 1, v43) == 1)
  {
    sub_22CB9CDE4();
    (*(void (**)(char *, _QWORD, uint64_t))(v82 + 104))(v71, **((unsigned int **)&unk_24F75FDC0 + (char)v70), v83);
    if (a11)
    {
      if (a11 != 1)
        __asm { BR              X10 }
      *v21 = (double)sub_22CB9D630();
      v50 = (unsigned int *)MEMORY[0x24BEB4330];
    }
    else
    {
      *v21 = (double)sub_22CB9D630();
      v50 = (unsigned int *)MEMORY[0x24BEB4328];
    }
    v51 = v79;
    (*(void (**)(double *, _QWORD, uint64_t))(v79 + 104))(v21, *v50, v17);
    swift_getObjectType();
    sub_22CB9C538();
    v52 = v71;
    v53 = v16;
    v54 = v80;
    v55 = sub_22CB9C868();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v53, v81);
    (*(void (**)(double *, uint64_t))(v51 + 8))(v21, v17);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v52, v83);
  }
  else
  {
    swift_bridgeObjectRelease();
    v45 = v74;
    v46 = v81;
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v73, &v28[*(int *)(v44 + 48)], v81);
    sub_22CB9CDE4();
    v71 = (char *)v84[1];
    (*(void (**)(char *, _QWORD, uint64_t))(v82 + 104))(v72, **((unsigned int **)&unk_24F75FDC0 + (char)v70), v83);
    sub_22CB9C538();
    v47 = sub_22CB9C508();
    v48 = *(void (**)(char *, uint64_t))(v45 + 8);
    v48(v16, v46);
    if ((v47 & 1) != 0)
    {
      v49 = (unsigned int *)MEMORY[0x24BEB4308];
    }
    else if (a11)
    {
      if (a11 != 1)
        __asm { BR              X10 }
      *v66 = (double)sub_22CB9D630();
      v49 = (unsigned int *)MEMORY[0x24BEB4330];
    }
    else
    {
      *v66 = (double)sub_22CB9D630();
      v49 = (unsigned int *)MEMORY[0x24BEB4328];
    }
    v56 = v79;
    v57 = v66;
    v58 = v17;
    (*(void (**)(double *, _QWORD, uint64_t))(v79 + 104))(v66, *v49, v17);
    swift_getObjectType();
    v60 = v72;
    v59 = v73;
    v54 = v80;
    v55 = sub_22CB9C868();
    swift_unknownObjectRelease();
    (*(void (**)(double *, uint64_t))(v56 + 8))(v57, v58);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v60, v83);
    v48(v59, v81);
  }
  (*(void (**)(uint64_t *, uint64_t))(v75 + 8))(v54, v76);
  return v55;
}

uint64_t sub_22CB5A708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a2;
  v23 = a5;
  v21 = a3;
  v9 = sub_22CB9CACC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB5F9BC(0, &qword_255C34F68, (uint64_t (*)(uint64_t))type metadata accessor for StockChartResult, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEB46D8]);
  v20 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = (v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v21;
  *(_QWORD *)(v16 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v16 + v14, v12, v9);
  v17 = (_QWORD *)(v16 + v15);
  v18 = v22;
  *v17 = v23;
  v17[1] = a6;
  *(_QWORD *)(v16 + ((v15 + 23) & 0xFFFFFFFFFFFFFFF8)) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_22CB9CE2C();
}

uint64_t sub_22CB5A864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7[15] = a6;
  v7[16] = a7;
  v7[13] = a4;
  v7[14] = a5;
  v7[11] = a2;
  v7[12] = a3;
  v7[10] = a1;
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_22CB5F9BC(0, (unint64_t *)&qword_253F83998, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v7[17] = swift_task_alloc();
  sub_22CB5F9BC(0, &qword_253F83800, (uint64_t (*)(uint64_t))MEMORY[0x24BEB1988], v8);
  v7[18] = swift_task_alloc();
  sub_22CB5F9BC(0, &qword_253F83E70, type metadata accessor for DataSource.Logo, v8);
  v7[19] = swift_task_alloc();
  v9 = sub_22CB9C928();
  v7[20] = v9;
  v7[21] = *(_QWORD *)(v9 - 8);
  v7[22] = swift_task_alloc();
  v7[23] = type metadata accessor for DataSource(0);
  v7[24] = swift_task_alloc();
  v10 = sub_22CB9C664();
  v7[25] = v10;
  v7[26] = *(_QWORD *)(v10 - 8);
  v7[27] = swift_task_alloc();
  v7[28] = type metadata accessor for StockChart(0);
  v7[29] = swift_task_alloc();
  v7[30] = swift_task_alloc();
  v11 = sub_22CB9CACC();
  v7[31] = v11;
  v7[32] = *(_QWORD *)(v11 - 8);
  v7[33] = swift_task_alloc();
  v7[34] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_22CB5AA2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54[2];

  if (qword_253F839E0 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = sub_22CB9CEEC();
  __swift_project_value_buffer(v5, (uint64_t)qword_253F86EA8);
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v52(v1, v4, v2);
  swift_bridgeObjectRetain_n();
  v6 = sub_22CB9CED4();
  v7 = sub_22CB9D1A4();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 272);
  v10 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 256);
  v12 = *(_QWORD *)(v0 + 96);
  if (v8)
  {
    v13 = *(_QWORD *)(v0 + 88);
    v53 = *(_QWORD *)(v0 + 256);
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v54[0] = v15;
    *(_DWORD *)v14 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = sub_22CB5DFE8(v13, v12, v54);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2080;
    v16 = sub_22CB9CAB4();
    v17 = sub_22CB9CAA8();
    v18 = MEMORY[0x22E302910](v16, v17);
    v20 = v19;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 72) = sub_22CB5DFE8(v18, v20, v54);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    v50 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v50(v9, v10);
    _os_log_impl(&dword_22CB4C000, v6, v7, "Chart fetch success for requestID: %s, result: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v15, -1, -1);
    MEMORY[0x22E303318](v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    v50 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v50(v9, v10);
  }

  v21 = *(_QWORD *)(v0 + 264);
  v22 = *(_QWORD *)(v0 + 240);
  v38 = *(_QWORD *)(v0 + 248);
  v39 = v22;
  v23 = *(_QWORD *)(v0 + 224);
  v24 = *(uint64_t **)(v0 + 232);
  v25 = *(_QWORD *)(v0 + 216);
  v40 = *(_QWORD *)(v0 + 208);
  v41 = *(_QWORD *)(v0 + 200);
  v48 = *(uint64_t **)(v0 + 192);
  v49 = *(_QWORD *)(v0 + 184);
  v46 = *(_QWORD *)(v0 + 168);
  v47 = *(_QWORD *)(v0 + 160);
  v42 = *(_QWORD *)(v0 + 176);
  v43 = *(_QWORD *)(v0 + 144);
  v44 = *(_QWORD *)(v0 + 152);
  v45 = *(_QWORD *)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 120);
  v27 = *(_QWORD *)(v0 + 112);
  v51 = *(_QWORD *)(v0 + 80);
  ((void (*)(uint64_t, _QWORD))v52)(v21, *(_QWORD *)(v0 + 104));
  swift_bridgeObjectRetain();
  v28 = sub_22CB9CAB4();
  swift_bridgeObjectRetain();
  v29 = sub_22CB5FE38(v28, v27, v26);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  *v24 = v29;
  sub_22CB9CAC0();
  v30 = sub_22CB9CA48();
  v31 = (char *)v24 + *(int *)(v23 + 24);
  *(_QWORD *)v31 = v30;
  v31[8] = v32 & 1;
  sub_22CB9CA54();
  v50(v21, v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))((char *)v24 + *(int *)(v23 + 28), v25, v41);
  sub_22CB6291C((uint64_t)v24, v22, type metadata accessor for StockChart);
  sub_22CB9CDE4();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  sub_22CB9C9E8();
  v33 = sub_22CB9C910();
  v35 = v34;
  sub_22CB9C904();
  sub_22CB67BD8(v43, v44);
  sub_22CB9C91C();
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v42, v47);
  *v48 = v33;
  v48[1] = v35;
  sub_22CB6275C(v44, (uint64_t)v48 + *(int *)(v49 + 20), &qword_253F83E70, type metadata accessor for DataSource.Logo);
  sub_22CB6275C(v45, (uint64_t)v48 + *(int *)(v49 + 24), (unint64_t *)&qword_253F83998, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  sub_22CB6291C(v39, v51, type metadata accessor for StockChart);
  v36 = type metadata accessor for StockChartResult();
  sub_22CB6291C((uint64_t)v48, v51 + *(int *)(v36 + 20), type metadata accessor for DataSource);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB5AF4C(void *a1, uint64_t a2, unint64_t a3, void (*a4)(char *), uint64_t a5, unint64_t *a6, void (*a7)(uint64_t), const char *a8)
{
  void (*v8)(uint64_t);
  unint64_t *v9;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v31;
  unint64_t *v32;
  void (*v33)(uint64_t);
  const char *v34;
  uint64_t v35;
  void (*v36)(char *);
  uint64_t v37;
  uint64_t v38;

  v34 = a8;
  v35 = a5;
  v8 = a7;
  v9 = a6;
  v36 = a4;
  sub_22CB62B20(0, a6, a7);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v31 - v14;
  if (qword_253F839E0 != -1)
    swift_once();
  v16 = sub_22CB9CEEC();
  __swift_project_value_buffer(v16, (uint64_t)qword_253F86EA8);
  swift_bridgeObjectRetain();
  v17 = a1;
  swift_bridgeObjectRetain();
  v18 = a1;
  v19 = sub_22CB9CED4();
  v20 = sub_22CB9D198();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v32 = v9;
    v22 = v21;
    v23 = swift_slowAlloc();
    v33 = v8;
    v24 = v23;
    v38 = v23;
    *(_DWORD *)v22 = 136315394;
    swift_bridgeObjectRetain();
    v37 = sub_22CB5DFE8(a2, a3, &v38);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 2080;
    swift_getErrorValue();
    v25 = sub_22CB9D4F8();
    v37 = sub_22CB5DFE8(v25, v26, &v38);
    sub_22CB9D204();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_22CB4C000, v19, v20, v34, (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    v27 = v24;
    v8 = v33;
    MEMORY[0x22E303318](v27, -1, -1);
    v28 = v22;
    v9 = v32;
    MEMORY[0x22E303318](v28, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();

  }
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 1;
  swift_storeEnumTagMultiPayload();
  v29 = a1;
  v36(v15);
  return sub_22CB625B8((uint64_t)v15, v9, v8);
}

uint64_t StockService.fetchStockChart(for:range:cachePolicy:earliestBeginDate:completion:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a1;
  v35 = a6;
  v13 = sub_22CB9C544();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v13);
  v31 = *a3;
  v16 = a4[1];
  v32 = *a4;
  v33 = v16;
  v17 = *((unsigned __int8 *)a4 + 16);
  v18 = *(_QWORD *)(v7 + 24);
  if (v18)
  {
    v30 = *(_QWORD *)(v7 + 16);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v13);
    v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v28 = (v19 + v15 + 31) & 0xFFFFFFFFFFFFFFF8;
    v29 = v17;
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = v30;
    *(_QWORD *)(v20 + 24) = v18;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v20 + v19, (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
    v21 = v20 + ((v19 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)v21 = v34;
    *(_QWORD *)(v21 + 8) = a2;
    *(_BYTE *)(v21 + 16) = v31;
    v22 = v20 + v28;
    v23 = v33;
    *(_QWORD *)v22 = v32;
    *(_QWORD *)(v22 + 8) = v23;
    *(_BYTE *)(v22 + 16) = v29;
    v24 = (_QWORD *)(v20 + ((v19 + v15 + 55) & 0xFFFFFFFFFFFFFFF8));
    *v24 = v35;
    v24[1] = a7;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_22CB56BC4((uint64_t)sub_22CB609D8, v20);
    return swift_release();
  }
  else
  {
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v34;
    *(_QWORD *)(v26 + 24) = a2;
    *(_BYTE *)(v26 + 32) = v31;
    v27 = v33;
    *(_QWORD *)(v26 + 40) = v32;
    *(_QWORD *)(v26 + 48) = v27;
    *(_BYTE *)(v26 + 56) = v17;
    *(_QWORD *)(v26 + 64) = v35;
    *(_QWORD *)(v26 + 72) = a7;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_22CB56BC4((uint64_t)sub_22CB60A88, v26);
    return swift_release();
  }
}

uint64_t sub_22CB5B42C(uint64_t a1, unint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v22[2];
  char v23;
  unsigned __int8 v24;

  v16 = type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v22[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_253F83690 != -1)
    swift_once();
  v24 = a3;
  v22[0] = a4;
  v22[1] = a5;
  v23 = a6;
  sub_22CB50D2C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  StockService.fetchStockChart(for:range:cachePolicy:networkSession:completion:)(a1, a2, &v24, v22, (uint64_t)v18, a7, a8);
  return sub_22CB6257C((uint64_t)v18, type metadata accessor for StockService.NetworkSession);
}

uint64_t sub_22CB5B550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31[2];
  char v32;
  unsigned __int8 v33;

  v29 = a4;
  v30 = a5;
  v27 = a8;
  v28 = a11;
  v26 = a10;
  v16 = type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (uint64_t *)((char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_22CB50D2C();
  v20 = v19;
  v21 = (char *)v18 + *(int *)(v19 + 48);
  v22 = *(int *)(v19 + 64);
  *v18 = a1;
  v18[1] = a2;
  v23 = sub_22CB9C544();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, a3, v23);
  *(_QWORD *)((char *)v18 + v22) = 0x40AC200000000000;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
  v24 = qword_253F83690;
  swift_bridgeObjectRetain();
  if (v24 != -1)
    swift_once();
  v33 = a6;
  v31[0] = a7;
  v31[1] = v27;
  v32 = a9;
  StockService.fetchStockChart(for:range:cachePolicy:networkSession:completion:)(v29, v30, &v33, v31, (uint64_t)v18, v26, v28);
  return sub_22CB6257C((uint64_t)v18, type metadata accessor for StockService.NetworkSession);
}

uint64_t StockService.fetchCurrencyConversions(cachePolicy:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);

  *(_BYTE *)(v6 + 120) = a5;
  *(_QWORD *)(v6 + 32) = a4;
  *(_QWORD *)(v6 + 40) = v5;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a3;
  v8 = sub_22CB9D324();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8];
  *(_QWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 56) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 64) = swift_task_alloc();
  sub_22CB5F9BC(0, &qword_255C34EF0, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  *(_QWORD *)(v6 + 72) = swift_task_alloc();
  *(_OWORD *)(v6 + 80) = *(_OWORD *)a2;
  *(_BYTE *)(v6 + 121) = *(_BYTE *)(a2 + 16);
  return swift_task_switch();
}

uint64_t sub_22CB5B77C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if ((*(_BYTE *)(v0 + 120) & 1) != 0)
  {
    v7 = 1;
    v6 = 1;
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 64);
    v2 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 56);
    v5 = *(_QWORD *)(v0 + 24);
    v4 = *(_QWORD *)(v0 + 32);
    sub_22CB9D30C();
    MEMORY[0x22E302B8C](v5, v4);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    v6 = 0;
    v7 = *(_BYTE *)(v0 + 120) & 1;
  }
  v8 = *(_BYTE *)(v0 + 121);
  v10 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 32);
  v12 = *(_QWORD *)(v0 + 40);
  v14 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 56))(v11, v6, 1, *(_QWORD *)(v0 + 48));
  v15 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v15;
  *(_QWORD *)(v15 + 16) = v11;
  *(_QWORD *)(v15 + 24) = v10;
  *(_QWORD *)(v15 + 32) = v9;
  *(_BYTE *)(v15 + 40) = v8;
  *(_QWORD *)(v15 + 48) = v14;
  *(_QWORD *)(v15 + 56) = v13;
  *(_BYTE *)(v15 + 64) = v7;
  *(_QWORD *)(v15 + 72) = v12;
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v16;
  type metadata accessor for CurrencyConversionsResult();
  *v16 = v0;
  v16[1] = sub_22CB5B8BC;
  return sub_22CB9CD54();
}

uint64_t sub_22CB5B8BC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_22CB5B928()
{
  uint64_t v0;

  sub_22CB60B48(*(_QWORD *)(v0 + 72), &qword_255C34EF0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8]);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB5B980()
{
  uint64_t v0;

  sub_22CB60B48(*(_QWORD *)(v0 + 72), &qword_255C34EF0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8]);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB5B9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  *(_QWORD *)(v8 + 160) = a7;
  *(_QWORD *)(v8 + 168) = v12;
  *(_BYTE *)(v8 + 74) = a8;
  *(_QWORD *)(v8 + 144) = a4;
  *(_QWORD *)(v8 + 152) = a6;
  *(_BYTE *)(v8 + 73) = a5;
  *(_QWORD *)(v8 + 128) = a2;
  *(_QWORD *)(v8 + 136) = a3;
  *(_QWORD *)(v8 + 120) = a1;
  v9 = sub_22CB9CD84();
  *(_QWORD *)(v8 + 176) = v9;
  *(_QWORD *)(v8 + 184) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 192) = swift_task_alloc();
  *(_QWORD *)(v8 + 200) = swift_task_alloc();
  *(_QWORD *)(v8 + 208) = swift_task_alloc();
  v10 = sub_22CB9D330();
  *(_QWORD *)(v8 + 216) = v10;
  *(_QWORD *)(v8 + 224) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 232) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_22CB5BA94()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_BYTE *)(v0 + 74);
  v3 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_BYTE *)(v0 + 73);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 136);
  sub_22CB9D4EC();
  v9 = swift_task_alloc();
  *(_QWORD *)(v0 + 240) = v9;
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = v6;
  *(_BYTE *)(v9 + 32) = v4;
  *(_QWORD *)(v9 + 40) = v5;
  *(_QWORD *)(v9 + 48) = v3;
  *(_BYTE *)(v9 + 56) = v1 & 1;
  *(_QWORD *)(v9 + 64) = v2;
  *(_QWORD *)(v9 + 72) = v8;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 248) = v10;
  type metadata accessor for CurrencyConversionsResult();
  sub_22CB50668(&qword_253F83728, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6E10], MEMORY[0x24BEE6E20]);
  *v10 = v0;
  v10[1] = sub_22CB5BB8C;
  return sub_22CB9CD60();
}

uint64_t sub_22CB5BB8C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 256) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[28] + 8))(v2[29], v2[27]);
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_22CB5BC10()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB5BC6C()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  id v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  char v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  void *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;

  v1 = *(void **)(v0 + 256);
  *(_QWORD *)(v0 + 88) = v1;
  v2 = (_QWORD *)(v0 + 80);
  v3 = v1;
  sub_22CB50858(0, (unint64_t *)&qword_253F839F0);
  v4 = swift_dynamicCast();
  v5 = *(void **)(v0 + 256);
  if ((v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(v0 + 208);
    v8 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 192);
    v9 = *(_QWORD *)(v0 + 176);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v6, v7, v9);
    if (qword_253F839E0 != -1)
      swift_once();
    v11 = *(_QWORD *)(v0 + 200);
    v10 = *(_QWORD *)(v0 + 208);
    v12 = *(_QWORD *)(v0 + 176);
    v13 = *(_QWORD *)(v0 + 184);
    v14 = sub_22CB9CEEC();
    __swift_project_value_buffer(v14, (uint64_t)qword_253F86EA8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v10, v12);
    v15 = sub_22CB9CED4();
    v16 = sub_22CB9D198();
    v17 = os_log_type_enabled(v15, v16);
    v18 = *(_QWORD *)(v0 + 200);
    v19 = *(_QWORD *)(v0 + 184);
    if (v17)
    {
      v48 = *(_QWORD *)(v0 + 176);
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v50 = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = sub_22CB9CD78();
      *(_QWORD *)(v0 + 112) = sub_22CB5DFE8(v22, v23, &v50);
      sub_22CB9D204();
      v2 = (_QWORD *)(v0 + 80);
      swift_bridgeObjectRelease();
      v24 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v24(v18, v48);
      _os_log_impl(&dword_22CB4C000, v15, v16, "Currencies fetch timed out before it could complete: %s.", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E303318](v21, -1, -1);
      MEMORY[0x22E303318](v20, -1, -1);
    }
    else
    {
      v24 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v24(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 176));
    }

    v25 = *(_QWORD *)(v0 + 208);
    v26 = *(_QWORD *)(v0 + 176);
    sub_22CB62290();
    v5 = (void *)swift_allocError();
    *(_QWORD *)v27 = 0;
    *(_QWORD *)(v27 + 8) = 0;
    *(_BYTE *)(v27 + 16) = 2;
    swift_willThrow();
    v24(v25, v26);
  }

  *v2 = v5;
  v28 = v5;
  if (!swift_dynamicCast())
    goto LABEL_20;

  v30 = *(void **)(v0 + 56);
  v29 = *(void **)(v0 + 64);
  v31 = *(_BYTE *)(v0 + 72);
  if (qword_253F839E0 != -1)
    swift_once();
  v32 = sub_22CB9CEEC();
  __swift_project_value_buffer(v32, (uint64_t)qword_253F86EA8);
  sub_22CB617D8(v30, v29, v31);
  sub_22CB617D8(v30, v29, v31);
  v33 = sub_22CB9CED4();
  v34 = sub_22CB9D1A4();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    v49 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v35 = 138543362;
    sub_22CB62290();
    swift_allocError();
    v36 = v29;
    v37 = v31;
    *(_QWORD *)v38 = v30;
    *(_QWORD *)(v38 + 8) = v36;
    *(_BYTE *)(v38 + 16) = v31;
    sub_22CB617D8(v30, v36, v31);
    v39 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 104) = v39;
    sub_22CB9D204();
    *v49 = v39;
    v31 = v37;
    v29 = v36;
    sub_22CB61808(v30, v36, v31);
    sub_22CB61808(v30, v36, v31);
    _os_log_impl(&dword_22CB4C000, v33, v34, "Currencies fetch failed with error: %{public}@", v35, 0xCu);
    sub_22CB624E0();
    swift_arrayDestroy();
    MEMORY[0x22E303318](v49, -1, -1);
    MEMORY[0x22E303318](v35, -1, -1);
  }
  else
  {
    sub_22CB61808(v30, v29, v31);
    sub_22CB61808(v30, v29, v31);
  }
  v40 = *(unsigned __int8 *)(v0 + 73);

  if (v40 >= 2 && !(*(_QWORD *)(v0 + 136) ^ 2 | *(_QWORD *)(v0 + 144)))
  {
    sub_22CB62290();
    swift_allocError();
    *(_QWORD *)v41 = v30;
    *(_QWORD *)(v41 + 8) = v29;
    *(_BYTE *)(v41 + 16) = v31;
    swift_willThrow();
LABEL_20:

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v46 = *(uint64_t (**)(void))(v0 + 8);
    return v46();
  }
  v42 = sub_22CB9CED4();
  v43 = sub_22CB9D1A4();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v44 = 0;
    _os_log_impl(&dword_22CB4C000, v42, v43, "Returning bundled static data.", v44, 2u);
    MEMORY[0x22E303318](v44, -1, -1);
  }
  v45 = *(_QWORD *)(v0 + 120);

  sub_22CB9CDE4();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  sub_22CB644B4(v45);
  sub_22CB61808(v30, v29, v31);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v46 = *(uint64_t (**)(void))(v0 + 8);
  return v46();
}

uint64_t sub_22CB5C46C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  *(_QWORD *)(v8 + 176) = a8;
  *(_QWORD *)(v8 + 184) = v11;
  *(_BYTE *)(v8 + 74) = a7;
  *(_QWORD *)(v8 + 160) = a5;
  *(_QWORD *)(v8 + 168) = a6;
  *(_BYTE *)(v8 + 73) = a4;
  *(_QWORD *)(v8 + 144) = a2;
  *(_QWORD *)(v8 + 152) = a3;
  *(_QWORD *)(v8 + 136) = a1;
  v9 = sub_22CB9D108();
  *(_QWORD *)(v8 + 192) = v9;
  *(_QWORD *)(v8 + 200) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 208) = swift_task_alloc();
  *(_QWORD *)(v8 + 216) = swift_task_alloc();
  *(_QWORD *)(v8 + 224) = type metadata accessor for CurrencyConversionsResult();
  *(_QWORD *)(v8 + 232) = swift_task_alloc();
  *(_QWORD *)(v8 + 240) = swift_task_alloc();
  *(_QWORD *)(v8 + 248) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_22CB5C534()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v21;
  uint64_t (*v22)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v23[3];
  char v24;

  if (qword_253F839E0 != -1)
    swift_once();
  v1 = sub_22CB9CEEC();
  *(_QWORD *)(v0 + 256) = __swift_project_value_buffer(v1, (uint64_t)qword_253F86EA8);
  v2 = sub_22CB9CED4();
  v3 = sub_22CB9D1A4();
  if (os_log_type_enabled(v2, v3))
  {
    v21 = *(_BYTE *)(v0 + 74);
    v4 = *(_BYTE *)(v0 + 73);
    v5 = *(_QWORD *)(v0 + 144);
    v6 = *(_QWORD *)(v0 + 152);
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v23[0] = v8;
    v23[1] = v5;
    *(_DWORD *)v7 = 136315394;
    v23[2] = v6;
    v24 = v4;
    v9 = StockService.CachePolicy.description.getter();
    *(_QWORD *)(v0 + 120) = sub_22CB5DFE8(v9, v10, v23);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    if ((v21 & 1) != 0)
    {
      v13 = 0xE400000000000000;
      v11 = 1701736302;
    }
    else
    {
      v11 = sub_22CB9D618();
      v13 = v12;
    }
    *(_QWORD *)(v0 + 128) = sub_22CB5DFE8(v11, v13, v23);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CB4C000, v2, v3, "Currencies fetch started, cachePolicy: %s, timeout: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v8, -1, -1);
    MEMORY[0x22E303318](v7, -1, -1);
  }

  v14 = *(_BYTE *)(v0 + 73);
  v16 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 152);
  sub_22CB9CDE4();
  v17 = *(_QWORD *)(v0 + 40);
  v18 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v17);
  *(_QWORD *)(v0 + 56) = v16;
  *(_QWORD *)(v0 + 64) = v15;
  *(_BYTE *)(v0 + 72) = v14;
  v22 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(**(int **)(v18 + 8) + *(_QWORD *)(v18 + 8));
  v19 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 264) = v19;
  *v19 = v0;
  v19[1] = sub_22CB5C7B0;
  return v22(*(_QWORD *)(v0 + 136), v0 + 56, *(_QWORD *)(v0 + 184), v17, v18);
}

uint64_t sub_22CB5C7B0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_22CB5C814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *log;
  uint64_t v21;
  os_log_type_t type;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 136);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  sub_22CB4DCF4(v4, v1, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
  sub_22CB4DCF4(v4, v2, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
  sub_22CB4DCF4(v4, v3, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
  v5 = sub_22CB9CED4();
  v6 = sub_22CB9D1A4();
  if (os_log_type_enabled(v5, v6))
  {
    type = v6;
    log = v5;
    v7 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 248);
    v9 = *(_QWORD *)(v0 + 224);
    v21 = *(_QWORD *)(v0 + 232);
    v10 = swift_slowAlloc();
    v23 = swift_slowAlloc();
    v24 = v23;
    *(_DWORD *)v10 = 134349570;
    v11 = *(_QWORD *)(*(_QWORD *)v8 + 16);
    sub_22CB6257C(v8, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
    *(_QWORD *)(v0 + 96) = v11;
    sub_22CB9D204();
    *(_WORD *)(v10 + 12) = 2082;
    v12 = (uint64_t *)(v7 + *(int *)(v9 + 20));
    v13 = *v12;
    v14 = v12[1];
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 104) = sub_22CB5DFE8(v13, v14, &v24);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    sub_22CB6257C(v7, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
    *(_WORD *)(v10 + 22) = 2082;
    sub_22CB9C544();
    sub_22CB50668((unint64_t *)&qword_253F837E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
    v15 = sub_22CB9D498();
    *(_QWORD *)(v0 + 112) = sub_22CB5DFE8(v15, v16, &v24);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    sub_22CB6257C(v21, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
    v5 = log;
    _os_log_impl(&dword_22CB4C000, log, type, "Currencies fetch succeeded, conversions: %{public}ld, source: %{public}s, createdAt: %{public}s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v23, -1, -1);
    MEMORY[0x22E303318](v10, -1, -1);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 240);
    v18 = *(_QWORD *)(v0 + 232);
    sub_22CB6257C(*(_QWORD *)(v0 + 248), (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
    sub_22CB6257C(v17, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
    sub_22CB6257C(v18, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB5CAFC()
{
  uint64_t v0;
  void *v1;
  id v2;
  int v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  void *v21;
  uint8_t *v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(void **)(v0 + 272);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  *(_QWORD *)(v0 + 80) = v1;
  v2 = v1;
  sub_22CB50858(0, (unint64_t *)&qword_253F839F0);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 272);
  if (v3)
  {
    v6 = *(_QWORD *)(v0 + 208);
    v5 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 192);
    v8 = *(_QWORD *)(v0 + 200);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v5, v6, v7);
    v9 = sub_22CB9CED4();
    v10 = sub_22CB9D198();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_22CB4C000, v9, v10, "Currencies fetch for was cancelled before it could complete.", v11, 2u);
      MEMORY[0x22E303318](v11, -1, -1);
    }
    v12 = *(_QWORD *)(v0 + 216);
    v13 = *(_QWORD *)(v0 + 192);
    v14 = *(_QWORD *)(v0 + 200);

    sub_22CB50668(&qword_255C34F58, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, v12, v13);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);

  }
  else
  {

    v16 = v4;
    v17 = v4;
    v18 = sub_22CB9CED4();
    v19 = sub_22CB9D198();
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(void **)(v0 + 272);
    if (v20)
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v22 = 138543362;
      v24 = v21;
      v25 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 88) = v25;
      sub_22CB9D204();
      *v23 = v25;

      _os_log_impl(&dword_22CB4C000, v18, v19, "Currencies fetch failed, error: %{public}@", v22, 0xCu);
      sub_22CB624E0();
      swift_arrayDestroy();
      MEMORY[0x22E303318](v23, -1, -1);
      MEMORY[0x22E303318](v22, -1, -1);
    }
    else
    {

    }
    v26 = *(_QWORD *)(v0 + 272);

    sub_22CB62290();
    swift_allocError();
    *(_QWORD *)v27 = v26;
    *(_QWORD *)(v27 + 8) = 0;
    *(_BYTE *)(v27 + 16) = 1;
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t StockService.fetchCurrencyConversions(cachePolicy:timeout:networkSession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a3;
  v7 = sub_22CB9D324();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8];
  *(_QWORD *)(v5 + 48) = v7;
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 64) = swift_task_alloc();
  sub_22CB5F9BC(0, &qword_255C34EF0, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  *(_QWORD *)(v5 + 72) = swift_task_alloc();
  *(_OWORD *)(v5 + 80) = *(_OWORD *)a2;
  *(_BYTE *)(v5 + 120) = *(_BYTE *)(a2 + 16);
  return swift_task_switch();
}

uint64_t sub_22CB5CEF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v13;

  v13 = *(_BYTE *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v0 + 24);
  if ((sub_22CB9D63C() & 1) != 0)
  {
    v9 = 0x158E460913D00000;
    v7 = 1;
  }
  sub_22CB9D30C();
  MEMORY[0x22E302B8C](v9, v7);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v3, 0, 1, v5);
  v10 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v10;
  *(_QWORD *)(v10 + 16) = v3;
  *(_QWORD *)(v10 + 24) = v2;
  *(_QWORD *)(v10 + 32) = v1;
  *(_BYTE *)(v10 + 40) = v13;
  *(_QWORD *)(v10 + 48) = v9;
  *(_QWORD *)(v10 + 56) = v7;
  *(_BYTE *)(v10 + 64) = 0;
  *(_QWORD *)(v10 + 72) = v8;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v11;
  type metadata accessor for CurrencyConversionsResult();
  *v11 = v0;
  v11[1] = sub_22CB5B8BC;
  return sub_22CB9CD54();
}

id *StockService.deinit()
{
  id *v0;

  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  sub_22CB60B48((uint64_t)v0 + OBJC_IVAR____TtC9StocksKit12StockService____lazy_storage___networkProxy, &qword_253F83578, (uint64_t (*)(uint64_t))MEMORY[0x24BEB4378]);
  return v0;
}

uint64_t StockService.__deallocating_deinit()
{
  StockService.deinit();
  return swift_deallocClassInstance();
}

uint64_t StockService.observeFetchSessionDidFinish(keepAliveObject:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)swift_allocObject();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  swift_unknownObjectRetain();
  swift_retain();
  sub_22CB56BC4((uint64_t)sub_22CB60BB8, (uint64_t)v6);
  return swift_release();
}

uint64_t sub_22CB5D190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (qword_253F83690 != -1)
    swift_once();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  if (!a1)
    swift_unknownObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  sub_22CB9CDCC();
  swift_release();
  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall StockService.reestablishBackgroundSession()()
{
  sub_22CB56BC4((uint64_t)sub_22CB5D268, 0);
}

uint64_t sub_22CB5D268()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v0 = type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (uint64_t *)((char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = sub_22CB9CCDC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_253F83690 != -1)
    swift_once();
  sub_22CB50D2C();
  v8 = v7;
  v9 = *(int *)(v7 + 64);
  *v2 = 0xD000000000000024;
  v2[1] = 0x800000022CBA2190;
  sub_22CB9C538();
  *(_QWORD *)((char *)v2 + v9) = 0x40AC200000000000;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v2, 0, 1, v8);
  sub_22CB5638C((uint64_t)v2, v6);
  sub_22CB6257C((uint64_t)v2, type metadata accessor for StockService.NetworkSession);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Void __swiftcall StockService.reestablishBackgroundSession(identifier:)(Swift::String identifier)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  object = identifier._object;
  countAndFlagsBits = identifier._countAndFlagsBits;
  v3 = type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_22CB9CCDC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_22CB50D2C();
  v11 = v10;
  v12 = *(int *)(v10 + 64);
  *v5 = countAndFlagsBits;
  v5[1] = (uint64_t)object;
  swift_bridgeObjectRetain();
  sub_22CB9C538();
  *(uint64_t *)((char *)v5 + v12) = 0x40AC200000000000;
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v5, 0, 1, v11);
  sub_22CB5638C((uint64_t)v5, v9);
  sub_22CB6257C((uint64_t)v5, type metadata accessor for StockService.NetworkSession);
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t static StockService.defaultWatchlistForCurrentLocale.getter()
{
  id v0;
  id v1;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultsForCurrentCountry);
  v1 = objc_msgSend(v0, sel_defaultSymbols);

  v2 = sub_22CB9D090();
  return v2;
}

uint64_t static StockService.defaultWatchlistForCarrierBundle.getter()
{
  id v0;
  id v1;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultsForCurrentCountry);
  v1 = objc_msgSend(v0, sel_defaultSymbols);

  v2 = sub_22CB9D090();
  return v2;
}

uint64_t StockService.fetchDefaultWatchlist(cachePolicy:networkSession:completion:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  char v16;

  v7 = *a1;
  v8 = a1[1];
  v9 = *((_BYTE *)a1 + 16);
  v10 = objc_msgSend((id)objc_opt_self(), sel_defaultsForCurrentCountry);
  v11 = objc_msgSend(v10, sel_defaultSymbols);

  v12 = sub_22CB9D090();
  v15[0] = v7;
  v15[1] = v8;
  v16 = v9;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a3;
  *(_QWORD *)(v13 + 24) = a4;
  swift_retain();
  StockService.fetchStocks(for:cachePolicy:networkSession:completion:)(v12, (uint64_t)v15, a2, (uint64_t)sub_22CB60BC4, v13);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t StockService.fetchDefaultWatchlist(cachePolicy:earliestBeginDate:completion:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a3;
  v22 = a4;
  v20 = *v4;
  v7 = sub_22CB9C544();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v11 = a1[1];
  LOBYTE(a1) = *((_BYTE *)a1 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  v13 = (*(unsigned __int8 *)(v8 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v14 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v12;
  *(_QWORD *)(v15 + 24) = v11;
  *(_BYTE *)(v15 + 32) = (_BYTE)a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15 + v13, v10, v7);
  v16 = (_QWORD *)(v15 + v14);
  v17 = v22;
  *v16 = v21;
  v16[1] = v17;
  *(_QWORD *)(v15 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8)) = v20;
  swift_retain();
  sub_22CB56BC4((uint64_t)sub_22CB60C5C, v15);
  return swift_release();
}

uint64_t sub_22CB5D80C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (**v28)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v35 = a4;
  v38 = a3;
  v39 = a1;
  v40 = a2;
  v37 = sub_22CB9C544();
  v34 = *(_QWORD *)(v37 - 8);
  v8 = *(_QWORD *)(v34 + 64);
  MEMORY[0x24BDAC7A8](v37);
  v36 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_253F83690 != -1)
    swift_once();
  v9 = off_253F83688;
  v10 = (void *)objc_opt_self();
  v11 = objc_msgSend(v10, sel_defaultsForCurrentCountry);
  v12 = objc_msgSend(v11, sel_defaultSymbols);

  v13 = sub_22CB9D090();
  v14 = objc_msgSend(v10, sel_defaultsForCurrentCountry);
  v15 = objc_msgSend(v14, sel_defaultSymbols);

  v16 = sub_22CB9D090();
  v41 = v13;
  sub_22CB5F038(v16);
  v17 = v41;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a5;
  *(_QWORD *)(v18 + 24) = a6;
  v19 = v9[3];
  if (v19)
  {
    v32 = v9[2];
    v33 = v17;
    v20 = v34;
    v22 = v36;
    v21 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v36, v35, v37);
    v23 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    v24 = (v8 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    v35 = a6;
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = v32;
    *(_QWORD *)(v25 + 24) = v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(v25 + v23, v22, v21);
    *(_QWORD *)(v25 + v24) = v33;
    v26 = v25 + ((v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    v27 = v40;
    *(_QWORD *)v26 = v39;
    *(_QWORD *)(v26 + 8) = v27;
    *(_BYTE *)(v26 + 16) = v38;
    v28 = (void (**)(uint64_t))(v25 + ((v24 + 39) & 0xFFFFFFFFFFFFFFF8));
    *v28 = sub_22CB62E1C;
    v28[1] = (void (*)(uint64_t))v18;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_22CB56BC4((uint64_t)sub_22CB602E0, v25);
  }
  else
  {
    v30 = swift_allocObject();
    v31 = v39;
    *(_QWORD *)(v30 + 16) = v17;
    *(_QWORD *)(v30 + 24) = v31;
    *(_QWORD *)(v30 + 32) = v40;
    *(_BYTE *)(v30 + 40) = v38;
    *(_QWORD *)(v30 + 48) = sub_22CB62E1C;
    *(_QWORD *)(v30 + 56) = v18;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_22CB56BC4((uint64_t)sub_22CB602F0, v30);
  }
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_22CB5DB3C(uint64_t a1, void (*a2)(void **))
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  char v13;
  uint64_t v14;
  void *v15;
  void *v16;
  __int16 v17;

  v4 = type metadata accessor for StockResult();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (void **)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_22CB62B20(0, &qword_255C34F30, v7);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - v9;
  sub_22CB622D4(a1, (uint64_t)&v14 - v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = *(void **)v10;
    v12 = (void *)*((_QWORD *)v10 + 1);
    v13 = v10[16];
    v15 = v11;
    v16 = v12;
    LOBYTE(v17) = v13;
    HIBYTE(v17) = 1;
    sub_22CB617D8(v11, v12, v13);
    a2(&v15);
    sub_22CB61808(v11, v12, v13);
    sub_22CB61808(v11, v12, v13);
  }
  else
  {
    sub_22CB6291C((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for StockResult);
    v15 = *v6;
    v16 = 0;
    v17 = 0;
    swift_bridgeObjectRetain();
    a2(&v15);
    swift_bridgeObjectRelease();
    sub_22CB6257C((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for StockResult);
  }
}

uint64_t sub_22CB5DCAC(void (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  char isEscapingClosureAtFileLocation;

  sub_22CB9D114();
  swift_release();
  swift_task_getMainExecutor();
  if ((swift_task_isCurrentExecutor() & 1) == 0)
    goto LABEL_6;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  a1();
  if (v2)
    return swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_6:
    sub_22CB9D27C();
    sub_22CB9D054();
    sub_22CB9D66C();
    sub_22CB9D054();
    swift_bridgeObjectRelease();
    sub_22CB9D054();
    result = sub_22CB9D348();
    __break(1u);
  }
  return result;
}

uint64_t sub_22CB5DE38(uint64_t a1, uint64_t a2)
{
  _QWORD v5[6];

  sub_22CB9D120();
  v5[2] = a1;
  v5[3] = a2;
  return sub_22CB5DCAC((void (*)(void))sub_22CB62E08, (uint64_t)v5);
}

uint64_t sub_22CB5DEA4(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

_QWORD *sub_22CB5DED0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_22CB62CD0(0, &qword_255C34F38);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_22CB62328(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_22CB5DFE8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_22CB5E0B8(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_22CB62C94((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_22CB62C94((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_22CB5E0B8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_22CB9D210();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_22CB5E270(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_22CB9D2D0();
  if (!v8)
  {
    sub_22CB9D33C();
    __break(1u);
LABEL_17:
    result = sub_22CB9D390();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_22CB5E270(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_22CB5E304(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_22CB5E4E8(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_22CB5E4E8(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_22CB5E304(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_22CB5E478(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_22CB9D288();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_22CB9D33C();
      __break(1u);
LABEL_10:
      v2 = sub_22CB9D060();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_22CB9D390();
    __break(1u);
LABEL_14:
    result = sub_22CB9D33C();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_22CB5E478(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_22CB62CD0(0, qword_253F83FD0);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_22CB5E4E8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_22CB62CD0(0, qword_253F83FD0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_22CB9D390();
  __break(1u);
  return result;
}

uint64_t sub_22CB5E640(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  int64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  int64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v2 = sub_22CB9CC1C();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v88 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v72 - v6;
  v107 = sub_22CB9CBF8();
  v102 = *(_QWORD **)(v107 - 8);
  v8 = MEMORY[0x24BDAC7A8](v107);
  v104 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v103 = (char *)&v72 - v10;
  sub_22CB62A74();
  result = sub_22CB9D360();
  v12 = 0;
  v87 = a1;
  v13 = *(_QWORD *)(a1 + 64);
  v79 = a1 + 64;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v80 = (unint64_t)(v14 + 63) >> 6;
  v85 = *MEMORY[0x24BEB1C48];
  v78 = *MEMORY[0x24BEB1C50];
  v77 = *MEMORY[0x24BEB1C20];
  v76 = *MEMORY[0x24BEB1C38];
  v75 = *MEMORY[0x24BEB1C28];
  v74 = *MEMORY[0x24BEB1C40];
  v73 = *MEMORY[0x24BEB1C30];
  v72 = *MEMORY[0x24BEB1C18];
  v84 = result + 64;
  v83 = v2;
  v82 = v3;
  v81 = v7;
  v86 = result;
  if (!v16)
    goto LABEL_5;
LABEL_4:
  v89 = (v16 - 1) & v16;
  v90 = v12;
  for (i = __clz(__rbit64(v16)) | (v12 << 6); ; i = __clz(__rbit64(v19)) + (v20 << 6))
  {
    v22 = *(_QWORD *)(v87 + 56);
    v23 = (uint64_t *)(*(_QWORD *)(v87 + 48) + 16 * i);
    v24 = v23[1];
    v100 = *v23;
    v25 = v103;
    v26 = (void (*)(char *, unint64_t, uint64_t))v102[2];
    v27 = v107;
    v26(v103, v22 + v102[9] * i, v107);
    v26(v104, (unint64_t)v25, v27);
    v101 = v24;
    swift_bridgeObjectRetain();
    v28 = sub_22CB9CBD4();
    v30 = v29;
    v31 = sub_22CB9CBBC();
    v98 = v32;
    v99 = v31;
    v97 = sub_22CB9CBE0();
    v95 = v33;
    sub_22CB9CBC8();
    v34 = v88;
    v35 = v2;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v88, v7, v2);
    v36 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v34, v2);
    v96 = i;
    if (v36 == v85)
    {
      v37 = v3;
      v38 = v30;
      v39 = v28;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v35);
LABEL_21:
      v91 = 0;
      goto LABEL_37;
    }
    v40 = v36;
    if (v36 == v78)
    {
      v41 = v3;
      v38 = v30;
      v39 = v28;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v7, v35);
      v42 = 1;
    }
    else if (v36 == v77)
    {
      v43 = v3;
      v38 = v30;
      v39 = v28;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v35);
      v42 = 2;
    }
    else if (v36 == v76)
    {
      v44 = v3;
      v38 = v30;
      v39 = v28;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v35);
      v42 = 3;
    }
    else if (v36 == v75)
    {
      v45 = v3;
      v38 = v30;
      v39 = v28;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v35);
      v42 = 4;
    }
    else if (v36 == v74)
    {
      v46 = v3;
      v38 = v30;
      v39 = v28;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v7, v35);
      v42 = 5;
    }
    else if (v36 == v73)
    {
      v47 = v3;
      v38 = v30;
      v39 = v28;
      (*(void (**)(char *, uint64_t))(v47 + 8))(v7, v35);
      v42 = 6;
    }
    else
    {
      v48 = *(void (**)(char *, uint64_t))(v3 + 8);
      v48(v7, v2);
      v38 = v30;
      v39 = v28;
      if (v40 != v72)
      {
        v48(v88, v35);
        goto LABEL_21;
      }
      v42 = 7;
    }
    v91 = v42;
LABEL_37:
    v49 = v104;
    v94 = sub_22CB9CBEC();
    v51 = v50;
    v52 = sub_22CB9CBB0();
    v92 = v53;
    v93 = v52;
    v54 = v97;
    v55 = v95;
    v105 = v97;
    v106 = v95;
    swift_bridgeObjectRetain();
    sub_22CB9D054();
    v56 = v39;
    sub_22CB9D054();
    v57 = v105;
    v58 = v106;
    swift_bridgeObjectRetain();
    v59 = (void (*)(char *, uint64_t))v102[1];
    v60 = v49;
    v61 = v107;
    v59(v60, v107);
    v59(v103, v61);
    v62 = v96;
    *(_QWORD *)(v84 + ((v96 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v96;
    result = v86;
    v63 = (_QWORD *)(*(_QWORD *)(v86 + 48) + 16 * v62);
    v64 = v101;
    *v63 = v100;
    v63[1] = v64;
    v65 = *(_QWORD *)(result + 56) + 120 * v62;
    *(_QWORD *)v65 = v57;
    *(_QWORD *)(v65 + 8) = v58;
    *(_QWORD *)(v65 + 16) = v56;
    *(_QWORD *)(v65 + 24) = v38;
    v66 = v98;
    *(_QWORD *)(v65 + 32) = v99;
    *(_QWORD *)(v65 + 40) = v66;
    *(_QWORD *)(v65 + 48) = v54;
    *(_QWORD *)(v65 + 56) = v55;
    *(_BYTE *)(v65 + 64) = v91;
    v67 = v94;
    *(_QWORD *)(v65 + 72) = v94;
    *(_QWORD *)(v65 + 80) = v51;
    *(_QWORD *)(v65 + 88) = v67;
    *(_QWORD *)(v65 + 96) = v51;
    v68 = v92;
    *(_QWORD *)(v65 + 104) = v93;
    *(_QWORD *)(v65 + 112) = v68;
    v69 = *(_QWORD *)(result + 16);
    v70 = __OFADD__(v69, 1);
    v71 = v69 + 1;
    if (v70)
    {
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    *(_QWORD *)(result + 16) = v71;
    v2 = v83;
    v3 = v82;
    v7 = v81;
    v16 = v89;
    v12 = v90;
    if (v89)
      goto LABEL_4;
LABEL_5:
    v18 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_43;
    if (v18 >= v80)
      return result;
    v19 = *(_QWORD *)(v79 + 8 * v18);
    v20 = v12 + 1;
    if (!v19)
    {
      v20 = v12 + 2;
      if (v12 + 2 >= v80)
        return result;
      v19 = *(_QWORD *)(v79 + 8 * v20);
      if (!v19)
      {
        v20 = v12 + 3;
        if (v12 + 3 >= v80)
          return result;
        v19 = *(_QWORD *)(v79 + 8 * v20);
        if (!v19)
          break;
      }
    }
LABEL_18:
    v89 = (v19 - 1) & v19;
    v90 = v20;
  }
  v21 = v12 + 4;
  if (v12 + 4 >= v80)
    return result;
  v19 = *(_QWORD *)(v79 + 8 * v21);
  if (v19)
  {
    v20 = v12 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v20 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v20 >= v80)
      return result;
    v19 = *(_QWORD *)(v79 + 8 * v20);
    ++v21;
    if (v19)
      goto LABEL_18;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_22CB5ED10(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), unint64_t *a4, void (*a5)(char *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t i;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(_QWORD);
  void (*v56)(char *);
  int64_t v57;
  uint64_t v58;

  v56 = a5;
  v9 = a2(0);
  v53 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v52 = (char *)&v43 - v10;
  v11 = a3(0);
  v50 = *(_QWORD *)(v11 - 8);
  v51 = v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v49 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v48 = (char *)&v43 - v14;
  v55 = a2;
  sub_22CB628B4(0, a4, a2, (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE30A0]);
  result = sub_22CB9D360();
  v16 = (_QWORD *)result;
  v17 = 0;
  v54 = a1;
  v20 = *(_QWORD *)(a1 + 64);
  v19 = a1 + 64;
  v18 = v20;
  v21 = 1 << *(_BYTE *)(v19 - 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v18;
  v44 = v19;
  v45 = (unint64_t)(v21 + 63) >> 6;
  v46 = result + 64;
  v47 = (_QWORD *)result;
  v24 = v50;
  v25 = v51;
  v26 = v48;
  if ((v22 & v18) == 0)
    goto LABEL_5;
LABEL_4:
  v27 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  v57 = v17;
  for (i = v27 | (v17 << 6); ; i = __clz(__rbit64(v30)) + (v31 << 6))
  {
    v33 = *(_QWORD *)(v54 + 56);
    v34 = (uint64_t *)(*(_QWORD *)(v54 + 48) + 16 * i);
    v35 = v34[1];
    v58 = *v34;
    v36 = *(void (**)(char *, unint64_t, uint64_t))(v24 + 16);
    v36(v26, v33 + *(_QWORD *)(v24 + 72) * i, v25);
    v37 = v49;
    v36(v49, (unint64_t)v26, v25);
    swift_bridgeObjectRetain();
    v38 = (uint64_t)v52;
    v56(v37);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v25);
    v16 = v47;
    *(_QWORD *)(v46 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v39 = (_QWORD *)(v16[6] + 16 * i);
    *v39 = v58;
    v39[1] = v35;
    result = sub_22CB6291C(v38, v16[7] + *(_QWORD *)(v53 + 72) * i, v55);
    v40 = v16[2];
    v41 = __OFADD__(v40, 1);
    v42 = v40 + 1;
    if (v41)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v16[2] = v42;
    v17 = v57;
    if (v23)
      goto LABEL_4;
LABEL_5:
    v29 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_24;
    if (v29 >= v45)
      return (uint64_t)v16;
    v30 = *(_QWORD *)(v44 + 8 * v29);
    v31 = v17 + 1;
    if (!v30)
    {
      v31 = v17 + 2;
      if (v17 + 2 >= v45)
        return (uint64_t)v16;
      v30 = *(_QWORD *)(v44 + 8 * v31);
      if (!v30)
      {
        v31 = v17 + 3;
        if (v17 + 3 >= v45)
          return (uint64_t)v16;
        v30 = *(_QWORD *)(v44 + 8 * v31);
        if (!v30)
          break;
      }
    }
LABEL_18:
    v23 = (v30 - 1) & v30;
    v57 = v31;
  }
  v32 = v17 + 4;
  if (v17 + 4 >= v45)
    return (uint64_t)v16;
  v30 = *(_QWORD *)(v44 + 8 * v32);
  if (v30)
  {
    v31 = v17 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v31 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v31 >= v45)
      return (uint64_t)v16;
    v30 = *(_QWORD *)(v44 + 8 * v31);
    ++v32;
    if (v30)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_22CB5F038(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_22CB5DED0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_22CB9D390();
  __break(1u);
  return result;
}

_QWORD *sub_22CB5F188(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_22CB62CD0(0, &qword_255C34F38);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_22CB5F278((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_22CB62830();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_22CB5F278(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_22CB5F474(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;

  v2 = sub_22CB9D5DC();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v28 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_22CB62D14();
    v10 = sub_22CB9D264();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v29 = v9;
    v30 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v33 = v10 + 56;
    v32(v8, v30, v2);
    while (1)
    {
      sub_22CB50668(&qword_255C35030, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50], MEMORY[0x24BDD0A60]);
      v14 = sub_22CB9CFDC();
      v15 = -1 << *(_BYTE *)(v10 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      v18 = *(_QWORD *)(v33 + 8 * (v16 >> 6));
      v19 = 1 << v16;
      if (((1 << v16) & v18) != 0)
      {
        v31 = v11;
        v20 = ~v15;
        do
        {
          v32(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_22CB50668(&qword_255C35038, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50], MEMORY[0x24BDD0A68]);
          v21 = sub_22CB9D00C();
          v22 = v3;
          v23 = *(void (**)(char *, uint64_t))(v3 + 8);
          v23(v6, v2);
          if ((v21 & 1) != 0)
          {
            v23(v8, v2);
            v3 = v22;
            v9 = v29;
            v11 = v31;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v20;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v33 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v22;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v29;
        v11 = v31;
      }
      *(_QWORD *)(v33 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v25 = *(_QWORD *)(v10 + 16);
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        break;
      *(_QWORD *)(v10 + 16) = v27;
LABEL_4:
      if (++v11 == v9)
        return v10;
      v32(v8, v30 + v13 * v11, v2);
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

unint64_t sub_22CB5F6DC()
{
  unint64_t result;

  result = qword_253F83EB8;
  if (!qword_253F83EB8)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E5D4, &type metadata for StockService.CachePolicy.PreferCacheMaxAgeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83EB8);
  }
  return result;
}

unint64_t sub_22CB5F720()
{
  unint64_t result;

  result = qword_253F83EA0;
  if (!qword_253F83EA0)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E584, &type metadata for StockService.CachePolicy.PreferCacheCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83EA0);
  }
  return result;
}

unint64_t sub_22CB5F764()
{
  unint64_t result;

  result = qword_253F83E88;
  if (!qword_253F83E88)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E534, &type metadata for StockService.CachePolicy.IgnoreCacheCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83E88);
  }
  return result;
}

unint64_t sub_22CB5F7A8()
{
  unint64_t result;

  result = qword_253F83F18;
  if (!qword_253F83F18)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E4E4, &type metadata for StockService.CachePolicy.CachedOnlyMaxAgeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83F18);
  }
  return result;
}

unint64_t sub_22CB5F7EC()
{
  unint64_t result;

  result = qword_253F83F00;
  if (!qword_253F83F00)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E494, &type metadata for StockService.CachePolicy.CachedOnlyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83F00);
  }
  return result;
}

unint64_t sub_22CB5F830()
{
  unint64_t result;

  result = qword_253F83EE8;
  if (!qword_253F83EE8)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E444, &type metadata for StockService.CachePolicy.DefaultCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83EE8);
  }
  return result;
}

unint64_t sub_22CB5F874()
{
  unint64_t result;

  result = qword_253F83ED0;
  if (!qword_253F83ED0)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E3F4, &type metadata for StockService.CachePolicy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83ED0);
  }
  return result;
}

void sub_22CB5F8B8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

void sub_22CB5F914()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_255C34E90)
  {
    sub_22CB5F980();
    sub_22CB9D2AC();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_255C34E90);
  }
}

unint64_t sub_22CB5F980()
{
  unint64_t result;

  result = qword_255C34E98;
  if (!qword_255C34E98)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_255C34E98);
  }
  return result;
}

void sub_22CB5F9BC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_22CB5FA14()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_22CB5FA38(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD *v7;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_22CB62D98;
  return sub_22CB53D20(a1, v4, v5, v6);
}

uint64_t sub_22CB5FAAC(uint64_t a1)
{
  uint64_t v1;

  return sub_22CB559D4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), "Fetching app config for stock search for requestID: %s");
}

uint64_t sub_22CB5FACC()
{
  return objectdestroy_42Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_22CB5FAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22CB547D0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_22CB5FAF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22CB58F30(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), &qword_255C35010, (uint64_t (*)(uint64_t))type metadata accessor for StockSearchResult);
}

uint64_t sub_22CB5FB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22CB56AC0(a1, a2, *(void (**)(char *))(v2 + 16), *(_QWORD *)(v2 + 24), &qword_255C35008, (void (*)(uint64_t))type metadata accessor for StockSearchResult);
}

uint64_t sub_22CB5FB54()
{
  return objectdestroy_42Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_22CB5FB60(void *a1)
{
  uint64_t v1;

  return sub_22CB5AF4C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(char *))(v1 + 32), *(_QWORD *)(v1 + 40), &qword_255C35008, (void (*)(uint64_t))type metadata accessor for StockSearchResult, "Stock search failed for requestID: %s, error: %s");
}

uint64_t sub_22CB5FB94(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746C7561666564 && a2 == 0xE700000000000000;
  if (v2 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E4F646568636163 && a2 == 0xEA0000000000796CLL || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000022CBA2080 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x614365726F6E6769 && a2 == 0xEB00000000656863 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6143726566657270 && a2 == 0xEB00000000656863 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000022CBA20A0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_22CB5FE38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD v40[2];
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  int *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v48 = a2;
  v49 = a3;
  v5 = sub_22CB9C544();
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v45 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_22CB9CAA8();
  v7 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for StockChart.Entry(0);
  v43 = *(_QWORD *)(v10 - 8);
  v44 = (int *)v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (_QWORD *)((char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(_QWORD *)(a1 + 16);
  v14 = MEMORY[0x24BEE4AF8];
  if (v13)
  {
    v40[1] = v3;
    v53 = MEMORY[0x24BEE4AF8];
    sub_22CB85374(0, v13, 0);
    v15 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v16 = *(_QWORD *)(v7 + 72);
    v41 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v42 = v16;
    v17 = v45;
    do
    {
      v41(v9, v15, v50);
      v51 = v48;
      v52 = v49;
      swift_bridgeObjectRetain();
      sub_22CB9D054();
      sub_22CB9CA60();
      sub_22CB50668((unint64_t *)&qword_253F837E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
      v18 = v47;
      sub_22CB9D498();
      sub_22CB9D054();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v17, v18);
      v19 = v52;
      *v12 = v51;
      v12[1] = v19;
      v20 = v44;
      sub_22CB9CA60();
      v21 = sub_22CB9CA84();
      v22 = (char *)v12 + v20[6];
      *(_QWORD *)v22 = v21;
      v22[8] = v23 & 1;
      v24 = sub_22CB9CA90();
      v25 = (char *)v12 + v20[7];
      *(_QWORD *)v25 = v24;
      v25[8] = v26 & 1;
      v27 = sub_22CB9CA78();
      v28 = (char *)v12 + v20[8];
      *(_QWORD *)v28 = v27;
      v28[8] = v29 & 1;
      v30 = sub_22CB9CA6C();
      v31 = (char *)v12 + v20[9];
      *(_QWORD *)v31 = v30;
      v31[8] = v32 & 1;
      v33 = sub_22CB9CA9C();
      v35 = v34;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v50);
      v36 = (char *)v12 + v20[10];
      *(_QWORD *)v36 = v33;
      v36[8] = v35 & 1;
      v14 = v53;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22CB85374(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v53;
      }
      v38 = *(_QWORD *)(v14 + 16);
      v37 = *(_QWORD *)(v14 + 24);
      if (v38 >= v37 >> 1)
      {
        sub_22CB85374(v37 > 1, v38 + 1, 1);
        v14 = v53;
      }
      *(_QWORD *)(v14 + 16) = v38 + 1;
      sub_22CB6291C((uint64_t)v12, v14+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(_QWORD *)(v43 + 72) * v38, type metadata accessor for StockChart.Entry);
      v15 += v42;
      --v13;
    }
    while (v13);
  }
  return v14;
}

uint64_t sub_22CB60168(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_22CB9D174();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_22CB85A4C(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_22CB601FC(uint64_t a1)
{
  uint64_t v1;

  return sub_22CB559D4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), "Fetching app config for stock metadata fetch for requestID: %s");
}

uint64_t sub_22CB60220(uint64_t a1, uint64_t a2)
{
  return sub_22CB60410(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD, char))sub_22CB55BD8);
}

uint64_t sub_22CB6023C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22CB58F30(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), &qword_255C34FD0, (uint64_t (*)(uint64_t))type metadata accessor for StockResult);
}

uint64_t sub_22CB60274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22CB56AC0(a1, a2, *(void (**)(char *))(v2 + 16), *(_QWORD *)(v2 + 24), &qword_255C34F30, (void (*)(uint64_t))type metadata accessor for StockResult);
}

uint64_t sub_22CB6029C()
{
  return objectdestroy_42Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_22CB602A8(void *a1)
{
  uint64_t v1;

  return sub_22CB5AF4C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(char *))(v1 + 32), *(_QWORD *)(v1 + 40), &qword_255C34F30, (void (*)(uint64_t))type metadata accessor for StockResult, "Stock metadata fetch failed for requestID: %s, error: %s");
}

uint64_t sub_22CB602E0()
{
  return sub_22CB621DC((void (*)(uint64_t, _QWORD *, _QWORD *, uint64_t, uint64_t))StockService.fetchStocks(for:cachePolicy:networkSession:completion:));
}

uint64_t sub_22CB602F0()
{
  return sub_22CB60564((void (*)(uint64_t, _QWORD *, char *, uint64_t, uint64_t))StockService.fetchStocks(for:cachePolicy:networkSession:completion:));
}

uint64_t sub_22CB602FC(uint64_t a1)
{
  uint64_t v1;

  return sub_22CB559D4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), "Fetching app config for quote fetch for requestID: %s");
}

uint64_t objectdestroy_57Tm()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for StockService.NetworkSession(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_bridgeObjectRelease();
  sub_22CB50D2C();
  v4 = v3;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v0 + v2, 1, v3))
  {
    swift_bridgeObjectRelease();
    v5 = v0 + v2 + *(int *)(v4 + 48);
    v6 = sub_22CB9C544();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_22CB603F4(uint64_t a1, uint64_t a2)
{
  return sub_22CB60410(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD, char))sub_22CB574F8);
}

uint64_t sub_22CB60410(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD, char))
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v12;

  v7 = *(_QWORD *)(type metadata accessor for StockService.NetworkSession(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_BYTE *)(v3 + v10 + 16);
  return a3(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), v3 + v8, *(_QWORD *)(v3 + v9), *(_QWORD *)(v3 + v10), *(_QWORD *)(v3 + v10 + 8), v12);
}

uint64_t sub_22CB604A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22CB58F30(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), &qword_255C34FB0, (uint64_t (*)(uint64_t))type metadata accessor for QuoteResult);
}

uint64_t sub_22CB604DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22CB56AC0(a1, a2, *(void (**)(char *))(v2 + 16), *(_QWORD *)(v2 + 24), &qword_255C34FA8, (void (*)(uint64_t))type metadata accessor for QuoteResult);
}

uint64_t sub_22CB60504()
{
  return objectdestroy_42Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_22CB60510(void *a1)
{
  uint64_t v1;

  return sub_22CB5AF4C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(char *))(v1 + 32), *(_QWORD *)(v1 + 40), &qword_255C34FA8, (void (*)(uint64_t))type metadata accessor for QuoteResult, "Quote fetch failed for requestID: %s, error: %s");
}

uint64_t sub_22CB60548()
{
  return sub_22CB621DC((void (*)(uint64_t, _QWORD *, _QWORD *, uint64_t, uint64_t))StockService.fetchQuotes(for:cachePolicy:networkSession:completion:));
}

uint64_t sub_22CB60558()
{
  return sub_22CB60564((void (*)(uint64_t, _QWORD *, char *, uint64_t, uint64_t))StockService.fetchQuotes(for:cachePolicy:networkSession:completion:));
}

uint64_t sub_22CB60564(void (*a1)(uint64_t, _QWORD *, char *, uint64_t, uint64_t))
{
  uint64_t v1;

  return sub_22CB59708(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), a1);
}

uint64_t sub_22CB6058C(uint64_t a1)
{
  uint64_t v1;

  return sub_22CB559D4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), "Fetching app config for quote detail fetch for requestID: %s");
}

uint64_t sub_22CB605B0(uint64_t a1, uint64_t a2)
{
  return sub_22CB60410(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD, char))sub_22CB588A8);
}

uint64_t sub_22CB605CC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_22CB605F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22CB58F30(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), &qword_255C34F88, (uint64_t (*)(uint64_t))type metadata accessor for QuoteDetailResult);
}

uint64_t sub_22CB60628()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_22CB6064C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22CB56AC0(a1, a2, *(void (**)(char *))(v2 + 16), *(_QWORD *)(v2 + 24), &qword_255C34F80, (void (*)(uint64_t))type metadata accessor for QuoteDetailResult);
}

uint64_t sub_22CB60674()
{
  return objectdestroy_42Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_22CB60680(void *a1)
{
  uint64_t v1;

  return sub_22CB5AF4C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(char *))(v1 + 32), *(_QWORD *)(v1 + 40), &qword_255C34F80, (void (*)(uint64_t))type metadata accessor for QuoteDetailResult, "Quote detail fetch failed for requestID: %s, error: %s");
}

uint64_t sub_22CB606B8()
{
  return sub_22CB621DC((void (*)(uint64_t, _QWORD *, _QWORD *, uint64_t, uint64_t))StockService.fetchQuoteDetails(for:cachePolicy:networkSession:completion:));
}

uint64_t sub_22CB606C8()
{
  return sub_22CB60564((void (*)(uint64_t, _QWORD *, char *, uint64_t, uint64_t))StockService.fetchQuoteDetails(for:cachePolicy:networkSession:completion:));
}

uint64_t sub_22CB606D4(uint64_t a1)
{
  uint64_t v1;

  return sub_22CB559D4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), "Fetching app config for chart fetch for requestID: %s");
}

uint64_t sub_22CB606F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StockService.NetworkSession(0) - 8) + 80);
  swift_bridgeObjectRelease();
  v2 = v0 + ((v1 + 32) & ~v1);
  sub_22CB50D2C();
  v4 = v3;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3))
  {
    swift_bridgeObjectRelease();
    v5 = v2 + *(int *)(v4 + 48);
    v6 = sub_22CB9C544();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_22CB607CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for StockService.NetworkSession(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v6 + *(_QWORD *)(v5 + 64);
  return sub_22CB59FE8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v6, *(_QWORD *)(v2 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(v2 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(v2 + ((v7 + 31) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v7 + 31) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(v2 + ((v7 + 31) & 0xFFFFFFFFFFFFFFF8) + 16));
}

uint64_t sub_22CB60868()
{
  return objectdestroy_42Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_22CB60874(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_22CB5A708(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_22CB60890(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_22CB56AC0(a1, a2, *(void (**)(char *))(v2 + 16), *(_QWORD *)(v2 + 24), &qword_255C34F60, (void (*)(uint64_t))type metadata accessor for StockChartResult);
}

uint64_t sub_22CB608B8()
{
  return objectdestroy_42Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t objectdestroy_42Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  a1(*(_QWORD *)(v1 + 40));
  return swift_deallocObject();
}

uint64_t sub_22CB608FC(void *a1)
{
  uint64_t v1;

  return sub_22CB5AF4C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(char *))(v1 + 32), *(_QWORD *)(v1 + 40), &qword_255C34F60, (void (*)(uint64_t))type metadata accessor for StockChartResult, "Chart fetch failed for requestID: %s, error: %s");
}

uint64_t sub_22CB60930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_22CB9C544();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_22CB609D8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(sub_22CB9C544() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v2 + *(_QWORD *)(v1 + 64);
  v4 = (v3 + 31) & 0xFFFFFFFFFFFFFFF8;
  return sub_22CB5B550(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + v2, *(_QWORD *)(v0 + ((v3 + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(v0 + ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8), *(_BYTE *)(v0 + v4 + 16), *(_QWORD *)(v0 + ((v3 + 55) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 55) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_22CB60A5C()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_22CB60A88()
{
  uint64_t v0;

  return sub_22CB5B42C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_22CB60AA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_BYTE *)(v1 + 64);
  v10 = *(_BYTE *)(v1 + 40);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_22CB62D98;
  return sub_22CB5B9D8(a1, v4, v5, v6, v10, v7, v8, v9);
}

uint64_t sub_22CB60B48(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_22CB5F9BC(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_22CB60B8C()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_22CB60BB8()
{
  uint64_t *v0;

  return sub_22CB5D190(v0[2], v0[3], v0[4]);
}

void sub_22CB60BC4(uint64_t a1)
{
  uint64_t v1;

  sub_22CB5DB3C(a1, *(void (**)(void **))(v1 + 16));
}

uint64_t sub_22CB60BDC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_22CB9C544();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_22CB60C5C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(sub_22CB9C544() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_22CB5D80C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), v0 + v2, *v3, v3[1]);
}

uint64_t sub_22CB60CB4()
{
  return type metadata accessor for StockService(0);
}

uint64_t type metadata accessor for StockService(uint64_t a1)
{
  return sub_22CB60CD0(a1, (uint64_t *)&unk_253F83698);
}

uint64_t sub_22CB60CD0(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

void sub_22CB60D04()
{
  unint64_t v0;

  sub_22CB5F9BC(319, &qword_253F83578, (uint64_t (*)(uint64_t))MEMORY[0x24BEB4378], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for StockService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StockService.__allocating_init(configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t destroy for StockService.Configuration()
{
  return swift_bridgeObjectRelease();
}

_QWORD *_s9StocksKit12StockServiceC13ConfigurationOwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for StockService.Configuration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for StockService.Configuration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for StockService.Configuration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StockService.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_22CB60F6C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_22CB60F88(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[1] = 0;
    result[2] = 0;
    *result = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for StockService.Configuration()
{
  return &type metadata for StockService.Configuration;
}

uint64_t *initializeBufferWithCopyOfBuffer for StockService.NetworkSession(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    sub_22CB50D2C();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = *(int *)(v8 + 48);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = sub_22CB9C544();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v13, v14, v15);
      *(uint64_t *)((char *)a1 + *(int *)(v8 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 64));
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
  }
  return a1;
}

uint64_t destroy for StockService.NetworkSession(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  sub_22CB50D2C();
  v3 = v2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v5 = a1 + *(int *)(v3 + 48);
    v6 = sub_22CB9C544();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  return result;
}

_QWORD *initializeWithCopy for StockService.NetworkSession(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);

  sub_22CB50D2C();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = *(int *)(v7 + 48);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_22CB9C544();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    *(_QWORD *)((char *)a1 + *(int *)(v7 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 64));
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithCopy for StockService.NetworkSession(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  sub_22CB50D2C();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 1, v6);
  v11 = v9(a2, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v18 = *(int *)(v7 + 48);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = sub_22CB9C544();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
      *(_QWORD *)((char *)a1 + *(int *)(v7 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 64));
      return a1;
    }
    sub_22CB6257C((uint64_t)a1, (uint64_t (*)(_QWORD))sub_22CB50D2C);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  v12 = *(int *)(v7 + 48);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_22CB9C544();
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  swift_bridgeObjectRetain();
  v16(v13, v14, v15);
  *(_QWORD *)((char *)a1 + *(int *)(v7 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 64));
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  return a1;
}

_OWORD *initializeWithTake for StockService.NetworkSession(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  sub_22CB50D2C();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v9 = *(int *)(v7 + 48);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_22CB9C544();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    *(_QWORD *)((char *)a1 + *(int *)(v7 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 64));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for StockService.NetworkSession(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  sub_22CB50D2C();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 1, v6);
  v11 = v9(a2, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      swift_bridgeObjectRelease();
      v18 = *(int *)(v7 + 48);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = sub_22CB9C544();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
      *(_QWORD *)((char *)a1 + *(int *)(v7 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 64));
      return a1;
    }
    sub_22CB6257C((uint64_t)a1, (uint64_t (*)(_QWORD))sub_22CB50D2C);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v12 = *(int *)(v7 + 48);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_22CB9C544();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  *(_QWORD *)((char *)a1 + *(int *)(v7 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v7 + 64));
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for StockService.NetworkSession()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB615D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  sub_22CB50D2C();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StockService.NetworkSession()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB61630(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  sub_22CB50D2C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_22CB61680(uint64_t a1)
{
  uint64_t v2;

  sub_22CB50D2C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_22CB616B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_22CB50D2C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t sub_22CB616F8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_22CB9C544();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_22CB61794(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_22CB617AC(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for StockService.CachePolicy()
{
  return &type metadata for StockService.CachePolicy;
}

id sub_22CB617D8(id result, id a2, char a3)
{
  if (a3 == 1)
    return result;
  if (!a3)
    return (id)swift_bridgeObjectRetain();
  return result;
}

void destroy for StockService.Errors(uint64_t a1)
{
  sub_22CB61808(*(void **)a1, *(id *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_22CB61808(void *a1, id a2, char a3)
{
  if (a3 == 1)
  {

  }
  else if (!a3)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t _s9StocksKit12StockServiceC6ErrorsOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_22CB617D8(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for StockService.Errors(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_22CB617D8(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_22CB61808(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for StockService.Errors(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_22CB61808(v4, v5, v6);
  return a1;
}

uint64_t _s9StocksKit12StockServiceC11CachePolicyOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s9StocksKit12StockServiceC11CachePolicyOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for StockService.Errors()
{
  return &type metadata for StockService.Errors;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for StockService.CachePolicy.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StockService.CachePolicy.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_22CB61A8C + 4 * byte_22CB9DD40[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_22CB61AC0 + 4 * byte_22CB9DD3B[v4]))();
}

uint64_t sub_22CB61AC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB61AC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB61AD0);
  return result;
}

uint64_t sub_22CB61ADC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB61AE4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_22CB61AE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB61AF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB61AFC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_22CB61B04(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for StockService.CachePolicy.CodingKeys()
{
  return &type metadata for StockService.CachePolicy.CodingKeys;
}

ValueMetadata *type metadata accessor for StockService.CachePolicy.DefaultCodingKeys()
{
  return &type metadata for StockService.CachePolicy.DefaultCodingKeys;
}

ValueMetadata *type metadata accessor for StockService.CachePolicy.CachedOnlyCodingKeys()
{
  return &type metadata for StockService.CachePolicy.CachedOnlyCodingKeys;
}

uint64_t sub_22CB61B48()
{
  return 0;
}

ValueMetadata *type metadata accessor for StockService.CachePolicy.CachedOnlyMaxAgeCodingKeys()
{
  return &type metadata for StockService.CachePolicy.CachedOnlyMaxAgeCodingKeys;
}

ValueMetadata *type metadata accessor for StockService.CachePolicy.IgnoreCacheCodingKeys()
{
  return &type metadata for StockService.CachePolicy.IgnoreCacheCodingKeys;
}

ValueMetadata *type metadata accessor for StockService.CachePolicy.PreferCacheCodingKeys()
{
  return &type metadata for StockService.CachePolicy.PreferCacheCodingKeys;
}

uint64_t getEnumTagSinglePayload for BundleJSONDecoderError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s9StocksKit12StockServiceC11CachePolicyO26CachedOnlyMaxAgeCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22CB61C10 + 4 * byte_22CB9DD45[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22CB61C30 + 4 * byte_22CB9DD4A[v4]))();
}

_BYTE *sub_22CB61C10(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22CB61C30(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22CB61C38(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22CB61C40(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22CB61C48(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22CB61C50(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StockService.CachePolicy.PreferCacheMaxAgeCodingKeys()
{
  return &type metadata for StockService.CachePolicy.PreferCacheMaxAgeCodingKeys;
}

unint64_t sub_22CB61C70()
{
  unint64_t result;

  result = qword_255C34F18;
  if (!qword_255C34F18)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E11C, &type metadata for StockService.CachePolicy.PreferCacheMaxAgeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C34F18);
  }
  return result;
}

unint64_t sub_22CB61CB8()
{
  unint64_t result;

  result = qword_255C34F20;
  if (!qword_255C34F20)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E274, &type metadata for StockService.CachePolicy.CachedOnlyMaxAgeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C34F20);
  }
  return result;
}

unint64_t sub_22CB61D00()
{
  unint64_t result;

  result = qword_255C34F28;
  if (!qword_255C34F28)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E3CC, &type metadata for StockService.CachePolicy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C34F28);
  }
  return result;
}

unint64_t sub_22CB61D48()
{
  unint64_t result;

  result = qword_253F83EE0;
  if (!qword_253F83EE0)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E33C, &type metadata for StockService.CachePolicy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83EE0);
  }
  return result;
}

unint64_t sub_22CB61D90()
{
  unint64_t result;

  result = qword_253F83ED8;
  if (!qword_253F83ED8)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E364, &type metadata for StockService.CachePolicy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83ED8);
  }
  return result;
}

unint64_t sub_22CB61DD8()
{
  unint64_t result;

  result = qword_253F83EF8;
  if (!qword_253F83EF8)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E2EC, &type metadata for StockService.CachePolicy.DefaultCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83EF8);
  }
  return result;
}

unint64_t sub_22CB61E20()
{
  unint64_t result;

  result = qword_253F83EF0;
  if (!qword_253F83EF0)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E314, &type metadata for StockService.CachePolicy.DefaultCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83EF0);
  }
  return result;
}

unint64_t sub_22CB61E68()
{
  unint64_t result;

  result = qword_253F83F10;
  if (!qword_253F83F10)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E29C, &type metadata for StockService.CachePolicy.CachedOnlyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83F10);
  }
  return result;
}

unint64_t sub_22CB61EB0()
{
  unint64_t result;

  result = qword_253F83F08;
  if (!qword_253F83F08)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E2C4, &type metadata for StockService.CachePolicy.CachedOnlyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83F08);
  }
  return result;
}

unint64_t sub_22CB61EF8()
{
  unint64_t result;

  result = qword_253F83F28;
  if (!qword_253F83F28)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E1E4, &type metadata for StockService.CachePolicy.CachedOnlyMaxAgeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83F28);
  }
  return result;
}

unint64_t sub_22CB61F40()
{
  unint64_t result;

  result = qword_253F83F20;
  if (!qword_253F83F20)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E20C, &type metadata for StockService.CachePolicy.CachedOnlyMaxAgeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83F20);
  }
  return result;
}

unint64_t sub_22CB61F88()
{
  unint64_t result;

  result = qword_253F83E98;
  if (!qword_253F83E98)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E194, &type metadata for StockService.CachePolicy.IgnoreCacheCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83E98);
  }
  return result;
}

unint64_t sub_22CB61FD0()
{
  unint64_t result;

  result = qword_253F83E90;
  if (!qword_253F83E90)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E1BC, &type metadata for StockService.CachePolicy.IgnoreCacheCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83E90);
  }
  return result;
}

unint64_t sub_22CB62018()
{
  unint64_t result;

  result = qword_253F83EB0;
  if (!qword_253F83EB0)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E144, &type metadata for StockService.CachePolicy.PreferCacheCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83EB0);
  }
  return result;
}

unint64_t sub_22CB62060()
{
  unint64_t result;

  result = qword_253F83EA8;
  if (!qword_253F83EA8)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E16C, &type metadata for StockService.CachePolicy.PreferCacheCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83EA8);
  }
  return result;
}

unint64_t sub_22CB620A8()
{
  unint64_t result;

  result = qword_253F83EC8;
  if (!qword_253F83EC8)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E08C, &type metadata for StockService.CachePolicy.PreferCacheMaxAgeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83EC8);
  }
  return result;
}

unint64_t sub_22CB620F0()
{
  unint64_t result;

  result = qword_253F83EC0;
  if (!qword_253F83EC0)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E0B4, &type metadata for StockService.CachePolicy.PreferCacheMaxAgeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83EC0);
  }
  return result;
}

uint64_t objectdestroy_69Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_22CB9C544();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_22CB621DC(void (*a1)(uint64_t, _QWORD *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(sub_22CB9C544() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_22CB580A8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(v1 + ((v5 + 39) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 39) & 0xFFFFFFFFFFFFFFF8) + 8), a1);
}

uint64_t objectdestroy_72Tm()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_22CB62290()
{
  unint64_t result;

  result = qword_253F83680;
  if (!qword_253F83680)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for StockService.Errors, &type metadata for StockService.Errors);
    atomic_store(result, (unint64_t *)&qword_253F83680);
  }
  return result;
}

uint64_t sub_22CB622D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_22CB62B20(0, &qword_255C34F30, (void (*)(uint64_t))type metadata accessor for StockResult);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22CB62328(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_22CB9D390();
  __break(1u);
  return result;
}

uint64_t sub_22CB6241C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_22CB6243C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_BYTE *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v10 = *(_BYTE *)(v1 + 32);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_22CB62D98;
  return sub_22CB5C46C(a1, v4, v5, v10, v6, v7, v8, v9);
}

void sub_22CB624E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_253F83FC8)
  {
    sub_22CB62544(255, (unint64_t *)&qword_253F83FC0);
    v0 = sub_22CB9D1F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_253F83FC8);
  }
}

uint64_t sub_22CB62544(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_22CB6257C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_22CB625B8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_22CB62B20(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_22CB625F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_22CB9CACC();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_22CB62698(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(sub_22CB9CACC() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v10 = v1 + v5;
  v11 = (uint64_t *)(v1 + v6);
  v12 = *v11;
  v13 = v11[1];
  v14 = *(_QWORD *)(v1 + v7);
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_22CB62D98;
  return sub_22CB5A864(a1, v8, v9, v10, v12, v13, v14);
}

uint64_t sub_22CB6275C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_22CB5F9BC(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_22CB627B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_22CB62D98;
  return sub_22CB58FE0(a1, v4, v5, v7, v6);
}

uint64_t sub_22CB62830()
{
  return swift_release();
}

uint64_t sub_22CB6283C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_22CB62D98;
  return sub_22CB57B80(a1, v4, v5, v7, v6);
}

void sub_22CB628B4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, _QWORD, uint64_t, _QWORD))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, MEMORY[0x24BEE0D00], v7, MEMORY[0x24BEE0D10]);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_22CB6291C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_22CB62960()
{
  uint64_t v0;

  return sub_22CB5DE38(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_22CB62980()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_22CB629A0()
{
  return swift_deallocObject();
}

uint64_t sub_22CB629B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_22CB62A2C;
  return sub_22CB565F8(a1, v4, v5, v7, v6);
}

uint64_t sub_22CB62A2C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_22CB62A74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255C34FE8)
  {
    v0 = sub_22CB9D384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255C34FE8);
  }
}

uint64_t sub_22CB62AD8(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_22CB5F9BC(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x22E303264](MEMORY[0x24BEE12C8], v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_22CB62B20(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    sub_22CB62290();
    v4 = sub_22CB9D564();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t objectdestroy_179Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_22CB62BC0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_22CB62D98;
  return sub_22CB549F0(a1, v4, v5, v7, v6);
}

uint64_t sub_22CB62C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_22CB5F9BC(0, (unint64_t *)&qword_253F83998, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22CB62C94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_22CB62CD0(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_22CB9D4A4();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_22CB62D14()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255C35028)
  {
    sub_22CB9D5DC();
    sub_22CB50668(&qword_255C35030, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50], MEMORY[0x24BDD0A60]);
    v0 = sub_22CB9D270();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255C35028);
  }
}

uint64_t sub_22CB62E08()
{
  return sub_22CB62980();
}

uint64_t QuoteResult.quotes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t QuoteResult.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for QuoteResult() + 20);
  return sub_22CB62E94(v3, a1);
}

uint64_t type metadata accessor for QuoteResult()
{
  uint64_t result;

  result = qword_255C35040;
  if (!qword_255C35040)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_22CB62E94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DataSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for QuoteResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (char *)a2 + v6;
    v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    *v7 = *(uint64_t *)((char *)a2 + v6);
    v7[1] = v9;
    v31 = type metadata accessor for DataSource(0);
    v10 = *(int *)(v31 + 20);
    v11 = (char *)v7 + v10;
    v12 = &v8[v10];
    v13 = type metadata accessor for DataSource.Logo(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v17 = sub_22CB9C4F0();
      v18 = *(_QWORD *)(v17 - 8);
      v30 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      v30(v11, v12, v17);
      v19 = *(int *)(v13 + 20);
      v20 = &v11[v19];
      v21 = &v12[v19];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v21, 1, v17))
      {
        sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v30(v20, v21, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v17);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v23 = *(int *)(v31 + 24);
    v24 = (char *)v7 + v23;
    v25 = &v8[v23];
    v26 = sub_22CB9C4F0();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
  }
  return v5;
}

uint64_t destroy for QuoteResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for DataSource(0);
  v6 = v4 + *(int *)(v5 + 20);
  v7 = type metadata accessor for DataSource.Logo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = sub_22CB9C4F0();
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v10(v6, v8);
    v11 = v6 + *(int *)(v7 + 20);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
      v10(v11, v8);
  }
  v12 = v4 + *(int *)(v5 + 24);
  v13 = sub_22CB9C4F0();
  v14 = *(_QWORD *)(v13 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  return result;
}

_QWORD *initializeWithCopy for QuoteResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v28)(char *, char *, uint64_t);

  *a1 = *a2;
  v3 = *(int *)(a3 + 20);
  v4 = (_QWORD *)((char *)a1 + v3);
  v5 = (char *)a2 + v3;
  v6 = *(_QWORD *)((char *)a2 + v3 + 8);
  *v4 = *(_QWORD *)((char *)a2 + v3);
  v4[1] = v6;
  v7 = type metadata accessor for DataSource(0);
  v8 = *(int *)(v7 + 20);
  v9 = (char *)v4 + v8;
  v10 = &v5[v8];
  v11 = type metadata accessor for DataSource.Logo(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = sub_22CB9C4F0();
    v16 = *(_QWORD *)(v15 - 8);
    v28 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v28(v9, v10, v15);
    v17 = *(int *)(v11 + 20);
    v18 = &v9[v17];
    v19 = &v10[v17];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v19, 1, v15))
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v28(v18, v19, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v15);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v21 = *(int *)(v7 + 24);
  v22 = (char *)v4 + v21;
  v23 = &v5[v21];
  v24 = sub_22CB9C4F0();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

_QWORD *assignWithCopy for QuoteResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  char *__dst;
  uint64_t v46;
  uint64_t v47;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (char *)a2 + v6;
  *v7 = *(_QWORD *)((char *)a2 + v6);
  v7[1] = *(_QWORD *)((char *)a2 + v6 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for DataSource(0);
  v10 = *(int *)(v9 + 20);
  v11 = (char *)v7 + v10;
  v12 = &v8[v10];
  v13 = type metadata accessor for DataSource.Logo(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (v17)
    {
      sub_22CB4E9F8((uint64_t)v11);
      goto LABEL_7;
    }
    v47 = v9;
    v25 = sub_22CB9C4F0();
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(void (**)(char *, char *, uint64_t))(v26 + 24);
    v27(v11, v12, v25);
    v28 = *(int *)(v13 + 20);
    v29 = &v11[v28];
    v30 = &v12[v28];
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
    v32 = v31(v29, 1, v25);
    v33 = v31(v30, 1, v25);
    if (v32)
    {
      if (!v33)
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v29, v30, v25);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v29, 0, 1, v25);
LABEL_16:
        v9 = v47;
        goto LABEL_17;
      }
    }
    else
    {
      if (!v33)
      {
        v27(v29, v30, v25);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v25);
    }
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_16;
  }
  if (v17)
  {
LABEL_7:
    sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_17;
  }
  v46 = v9;
  v18 = sub_22CB9C4F0();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v20(v11, v12, v18);
  v21 = *(int *)(v13 + 20);
  __dst = &v11[v21];
  v22 = &v12[v21];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v22, 1, v18))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v20(__dst, v22, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
  }
  v9 = v46;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_17:
  v35 = *(int *)(v9 + 24);
  v36 = (char *)v7 + v35;
  v37 = &v8[v35];
  v38 = sub_22CB9C4F0();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (!v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 24))(v36, v37, v38);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v36, v38);
    goto LABEL_22;
  }
  if (v42)
  {
LABEL_22:
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  return a1;
}

_QWORD *initializeWithTake for QuoteResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(char *, char *, uint64_t);
  char *__dst;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_OWORD *)((char *)a1 + v4) = *(_OWORD *)((char *)a2 + v4);
  v7 = type metadata accessor for DataSource(0);
  v8 = *(int *)(v7 + 20);
  v9 = &v5[v8];
  v10 = &v6[v8];
  v11 = type metadata accessor for DataSource.Logo(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = sub_22CB9C4F0();
    v15 = *(_QWORD *)(v14 - 8);
    v26 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v26(v9, v10, v14);
    v16 = *(int *)(v11 + 20);
    __dst = &v9[v16];
    v17 = &v10[v16];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v17, 1, v14))
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v26(__dst, v17, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v19 = *(int *)(v7 + 24);
  v20 = &v5[v19];
  v21 = &v6[v19];
  v22 = sub_22CB9C4F0();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

_QWORD *assignWithTake for QuoteResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  char *__dst;
  uint64_t v47;
  uint64_t v48;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (char *)a2 + v6;
  v9 = *(_QWORD *)((char *)a2 + v6 + 8);
  *v7 = *(_QWORD *)((char *)a2 + v6);
  v7[1] = v9;
  swift_bridgeObjectRelease();
  v10 = type metadata accessor for DataSource(0);
  v11 = *(int *)(v10 + 20);
  v12 = (char *)v7 + v11;
  v13 = &v8[v11];
  v14 = type metadata accessor for DataSource.Logo(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (v18)
    {
      sub_22CB4E9F8((uint64_t)v12);
      goto LABEL_7;
    }
    v48 = v10;
    v26 = sub_22CB9C4F0();
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(void (**)(char *, char *, uint64_t))(v27 + 40);
    v28(v12, v13, v26);
    v29 = *(int *)(v14 + 20);
    v30 = &v12[v29];
    v31 = &v13[v29];
    v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
    v33 = v32(v30, 1, v26);
    v34 = v32(v31, 1, v26);
    if (v33)
    {
      if (!v34)
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v30, v31, v26);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v30, 0, 1, v26);
LABEL_16:
        v10 = v48;
        goto LABEL_17;
      }
    }
    else
    {
      if (!v34)
      {
        v28(v30, v31, v26);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v26);
    }
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_16;
  }
  if (v18)
  {
LABEL_7:
    sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_17;
  }
  v47 = v10;
  v19 = sub_22CB9C4F0();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v21(v12, v13, v19);
  v22 = *(int *)(v14 + 20);
  __dst = &v12[v22];
  v23 = &v13[v22];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v23, 1, v19))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v21(__dst, v23, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
  }
  v10 = v47;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_17:
  v36 = *(int *)(v10 + 24);
  v37 = (char *)v7 + v36;
  v38 = &v8[v36];
  v39 = sub_22CB9C4F0();
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  v42 = v41(v37, 1, v39);
  v43 = v41(v38, 1, v39);
  if (!v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 40))(v37, v38, v39);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v40 + 8))(v37, v39);
    goto LABEL_22;
  }
  if (v43)
  {
LABEL_22:
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v37, v38, v39);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuoteResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB63E10(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DataSource(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for QuoteResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_22CB63E98(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DataSource(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_22CB63F0C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DataSource(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ChartRange.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22CB63FB0 + 4 * a3[*v0]))(0x796144656E6FLL, 0xE600000000000000);
}

uint64_t sub_22CB63FB0()
{
  return 0x6B656557656E6FLL;
}

uint64_t sub_22CB63FC8()
{
  return 0x68746E6F4D656E6FLL;
}

uint64_t sub_22CB63FE0()
{
  return 0x6E6F4D6565726874;
}

uint64_t sub_22CB64000()
{
  return 0x68746E6F4D786973;
}

void *static ChartRange.defaultCases.getter()
{
  return &unk_24F75D880;
}

StocksKit::ChartRange_optional __swiftcall ChartRange.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  StocksKit::ChartRange_optional result;
  char v5;

  v2 = v1;
  v3 = sub_22CB9D39C();
  result.value = swift_bridgeObjectRelease();
  v5 = 11;
  if (v3 < 0xB)
    v5 = v3;
  *v2 = v5;
  return result;
}

void sub_22CB64100(char *a1)
{
  sub_22CB72754(*a1);
}

uint64_t sub_22CB6410C()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_22CB9D534();
  sub_22CB88E14((uint64_t)v3, v1);
  return sub_22CB9D558();
}

void sub_22CB64150(uint64_t a1)
{
  char *v1;

  sub_22CB88E14(a1, *v1);
}

uint64_t sub_22CB64158()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_22CB9D534();
  sub_22CB88E14((uint64_t)v3, v1);
  return sub_22CB9D558();
}

StocksKit::ChartRange_optional sub_22CB64198(Swift::String *a1)
{
  return ChartRange.init(rawValue:)(*a1);
}

uint64_t sub_22CB641A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ChartRange.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t ChartRange.id.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22CB641F4 + 4 * byte_22CB9E687[*v0]))(0x796144656E6FLL, 0xE600000000000000);
}

uint64_t sub_22CB641F4()
{
  return 0x6B656557656E6FLL;
}

uint64_t sub_22CB6420C()
{
  return 0x68746E6F4D656E6FLL;
}

uint64_t sub_22CB64224()
{
  return 0x6E6F4D6565726874;
}

uint64_t sub_22CB64244()
{
  return 0x68746E6F4D786973;
}

unint64_t sub_22CB642E4()
{
  unint64_t result;

  result = qword_255C35050;
  if (!qword_255C35050)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for ChartRange, &type metadata for ChartRange);
    atomic_store(result, (unint64_t *)&qword_255C35050);
  }
  return result;
}

uint64_t sub_22CB64328()
{
  return MEMORY[0x24BEE0D10];
}

uint64_t sub_22CB64334@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ChartRange.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ChartRange(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ChartRange(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_22CB64434 + 4 * byte_22CB9E697[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_22CB64468 + 4 * byte_22CB9E692[v4]))();
}

uint64_t sub_22CB64468(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB64470(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB64478);
  return result;
}

uint64_t sub_22CB64484(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB6448CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_22CB64490(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB64498(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ChartRange()
{
  return &type metadata for ChartRange;
}

uint64_t sub_22CB644B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t ObjCClassFromMetadata;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[3];
  char *v29;
  uint64_t v30;

  v28[2] = a1;
  sub_22CB64838();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22CB9C4F0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v28 - v9;
  if (qword_253F839E0 != -1)
    swift_once();
  v29 = v10;
  v11 = sub_22CB9CEEC();
  __swift_project_value_buffer(v11, (uint64_t)qword_253F86EA8);
  v12 = sub_22CB9CED4();
  v13 = sub_22CB9D1A4();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_22CB4C000, v12, v13, "Reading bundled currency conversion data", v14, 2u);
    MEMORY[0x22E303318](v14, -1, -1);
  }

  type metadata accessor for StockService(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v16 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v28[1] = type metadata accessor for CurrencyConversionsResult();
  sub_22CB9CCAC();
  swift_allocObject();
  sub_22CB9CCA0();
  v17 = (void *)sub_22CB9D018();
  v18 = (void *)sub_22CB9D018();
  v19 = objc_msgSend(v16, sel_URLForResource_withExtension_, v17, v18);

  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    goto LABEL_10;
  }
  sub_22CB9C4E4();

  v20 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v20(v3, v8, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
LABEL_10:
    sub_22CB6488C((uint64_t)v3);
    sub_22CB648C8();
    swift_allocError();
    swift_willThrow();
    goto LABEL_11;
  }
  v21 = v29;
  v20(v29, v3, v4);
  v22 = v30;
  v23 = sub_22CB9C4FC();
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v21, v4);
  }
  else
  {
    v26 = v23;
    v27 = v24;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v21, v4);
    sub_22CB6490C();
    sub_22CB9CC94();
    sub_22CB64954(v26, v27);
  }
LABEL_11:

  return swift_release();
}

void sub_22CB64838()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_253F83998)
  {
    sub_22CB9C4F0();
    v0 = sub_22CB9D1F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_253F83998);
  }
}

uint64_t sub_22CB6488C(uint64_t a1)
{
  uint64_t v2;

  sub_22CB64838();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_22CB648C8()
{
  unint64_t result;

  result = qword_255C35058;
  if (!qword_255C35058)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E87C, &type metadata for BundleJSONDecoderError);
    atomic_store(result, (unint64_t *)&qword_255C35058);
  }
  return result;
}

unint64_t sub_22CB6490C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_253F83F68;
  if (!qword_253F83F68)
  {
    v1 = type metadata accessor for CurrencyConversionsResult();
    result = MEMORY[0x22E303264](&protocol conformance descriptor for CurrencyConversionsResult, v1);
    atomic_store(result, (unint64_t *)&qword_253F83F68);
  }
  return result;
}

uint64_t sub_22CB64954(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t storeEnumTagSinglePayload for BundleJSONDecoderError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22CB649D8 + 4 * byte_22CB9E7C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22CB649F8 + 4 * byte_22CB9E7C5[v4]))();
}

_BYTE *sub_22CB649D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22CB649F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22CB64A00(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22CB64A08(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22CB64A10(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22CB64A18(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BundleJSONDecoderError()
{
  return &type metadata for BundleJSONDecoderError;
}

ValueMetadata *type metadata accessor for BundleReader()
{
  return &type metadata for BundleReader;
}

unint64_t sub_22CB64A48()
{
  unint64_t result;

  result = qword_255C35060;
  if (!qword_255C35060)
  {
    result = MEMORY[0x22E303264](&unk_22CB9E854, &type metadata for BundleJSONDecoderError);
    atomic_store(result, (unint64_t *)&qword_255C35060);
  }
  return result;
}

id sub_22CB64AD0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NoopAppActivityMonitor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for NoopAppActivityMonitor()
{
  return objc_opt_self();
}

uint64_t sub_22CB64B20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v4;
  uint64_t v5;

  swift_beginAccess();
  sub_22CB64FB8(v1 + 24, (uint64_t)&v4);
  if (v5)
    return sub_22CB50598(&v4, a1);
  sub_22CB64F5C((uint64_t)&v4);
  sub_22CB9CEBC();
  sub_22CB505B0(a1, (uint64_t)&v4);
  swift_beginAccess();
  sub_22CB6501C((uint64_t)&v4, v1 + 24);
  return swift_endAccess();
}

uint64_t sub_22CB64BD0()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for StocksKitModule();
  v0 = swift_allocObject();
  result = sub_22CB64C08();
  qword_253F86EA0 = v0;
  return result;
}

uint64_t sub_22CB64C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  objc_class *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = sub_22CB9CEA4();
  v24 = *(_QWORD *)(v2 - 8);
  v25 = v2;
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22CB9CD18();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (_QWORD *)((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598];
  sub_22CB65080(0, &qword_253F837B8, &qword_253F83590, MEMORY[0x24BEB44E0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  v10 = swift_allocObject();
  v23 = xmmword_22CB9E8F0;
  *(_OWORD *)(v10 + 16) = xmmword_22CB9E8F0;
  v11 = sub_22CB9CC10();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BEB1C00];
  swift_allocObject();
  v13 = sub_22CB9CC04();
  *(_QWORD *)(v10 + 56) = v11;
  *(_QWORD *)(v10 + 64) = sub_22CB50668((unint64_t *)&unk_253F83558, v12, MEMORY[0x24BEB1BF0]);
  *(_QWORD *)(v10 + 32) = v13;
  v14 = (objc_class *)sub_22CB9CD6C();
  v15 = objc_msgSend(objc_allocWithZone(v14), sel_init);
  v16 = MEMORY[0x24BEB44C0];
  *(_QWORD *)(v10 + 96) = v14;
  *(_QWORD *)(v10 + 104) = v16;
  *(_QWORD *)(v10 + 72) = v15;
  sub_22CB65080(0, &qword_253F837B0, &qword_253F83570, MEMORY[0x24BEB4360], v9);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = v23;
  v18 = type metadata accessor for ServiceAssembly();
  v19 = swift_allocObject();
  *(_QWORD *)(v17 + 56) = v18;
  *(_QWORD *)(v17 + 64) = sub_22CB50668(&qword_253F836B0, (uint64_t (*)(uint64_t))type metadata accessor for ServiceAssembly, (uint64_t)&unk_22CB9DC94);
  *(_QWORD *)(v17 + 32) = v19;
  v20 = type metadata accessor for ManagerAssembly();
  v21 = swift_allocObject();
  *(_QWORD *)(v17 + 96) = v20;
  *(_QWORD *)(v17 + 104) = sub_22CB50668(&qword_253F836A8, (uint64_t (*)(uint64_t))type metadata accessor for ManagerAssembly, (uint64_t)&unk_22CBA0384);
  *(_QWORD *)(v17 + 72) = v21;
  sub_22CB9CD30();
  swift_allocObject();
  sub_22CB9CD24();
  *v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1788]), sel_init);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEB43E0], v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v4, *MEMORY[0x24BEB4730], v25);
  sub_22CB9CEC8();
  swift_allocObject();
  *(_QWORD *)(v1 + 16) = sub_22CB9CEB0();
  return v1;
}

uint64_t sub_22CB64F10()
{
  uint64_t v0;

  swift_release();
  sub_22CB64F5C(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for StocksKitModule()
{
  return objc_opt_self();
}

uint64_t sub_22CB64F5C(uint64_t a1)
{
  uint64_t v2;

  sub_22CB65080(0, &qword_253F83588, &qword_253F83580, MEMORY[0x24BEB4388], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22CB64FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_22CB65080(0, &qword_253F83588, &qword_253F83580, MEMORY[0x24BEB4388], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22CB6501C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_22CB65080(0, &qword_253F83588, &qword_253F83580, MEMORY[0x24BEB4388], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_22CB65080(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_22CB650E0(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_22CB650E0(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t WatchlistResult.stocks.getter()
{
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for WatchlistResult()
{
  return &type metadata for WatchlistResult;
}

uint64_t sub_22CB65144@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

StocksKit::PriceFormatter::Options __swiftcall PriceFormatter.Options.init(rawValue:)(StocksKit::PriceFormatter::Options rawValue)
{
  StocksKit::PriceFormatter::Options *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static PriceFormatter.Options.capTwoFractionDigits.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static PriceFormatter.Options.showCurrencySymbol.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t PriceFormatter.Options.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

_QWORD *sub_22CB651C0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_22CB651CC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_22CB651D4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_22CB651E8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_22CB651FC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_22CB65210(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_22CB65240@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_22CB6526C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_22CB65290(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_22CB652A4(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_22CB652B8(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_22CB652CC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_22CB652E0(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_22CB652F4(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_22CB65308(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_22CB6531C()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_22CB6532C()
{
  return sub_22CB9D234();
}

_QWORD *sub_22CB65344(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *sub_22CB65358@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_22CB65368(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_22CB65374(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

id sub_22CB6538C(uint64_t a1)
{
  return sub_22CB653DC(a1, 2, &qword_255C3A260);
}

id sub_22CB6539C(uint64_t a1)
{
  return sub_22CB653DC(a1, 3, &qword_255C3A268);
}

id sub_22CB653AC()
{
  id result;

  result = sub_22CB654B0(3);
  qword_255C3A270 = (uint64_t)result;
  return result;
}

id sub_22CB653CC(uint64_t a1)
{
  return sub_22CB653DC(a1, 0, &qword_255C3A278);
}

id sub_22CB653DC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  id result;

  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16F0]), sel_init);
  objc_msgSend(v5, sel_setNumberStyle_, 1);
  objc_msgSend(v5, sel_setMinimumFractionDigits_, a2);
  objc_msgSend(v5, sel_setMaximumFractionDigits_, a2);
  result = objc_msgSend(v5, sel_setMinimumIntegerDigits_, 1);
  *a3 = v5;
  return result;
}

id sub_22CB65470()
{
  id result;

  result = sub_22CB654B0(2);
  qword_255C3A280 = (uint64_t)result;
  return result;
}

id sub_22CB65490()
{
  id result;

  result = sub_22CB654B0(0);
  qword_255C3A288 = (uint64_t)result;
  return result;
}

id sub_22CB654B0(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16F0]), sel_init);
  objc_msgSend(v2, sel_setNumberStyle_, 1);
  objc_msgSend(v2, sel_setMinimumFractionDigits_, a1);
  objc_msgSend(v2, sel_setMaximumFractionDigits_, a1);
  objc_msgSend(v2, sel_setMinimumIntegerDigits_, 1);
  v3 = (void *)sub_22CB9D018();
  objc_msgSend(v2, sel_setPositivePrefix_, v3);

  v4 = (void *)sub_22CB9D018();
  objc_msgSend(v2, sel_setNegativePrefix_, v4);

  return v2;
}

uint64_t PriceFormatter.format(price:style:options:)(uint64_t a1, _QWORD *a2, double a3)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;

  v4 = (id)sub_22CB656AC(*a2, *(_QWORD *)a1, *(_BYTE *)(a1 + 8), a3);
  objc_msgSend(v4, sel_setNumberStyle_, 1);
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, a3);
  v6 = objc_msgSend(v4, sel_stringFromNumber_, v5);

  if (v6)
  {
    v7 = sub_22CB9D024();

  }
  else
  {

    return 0;
  }
  return v7;
}

id PriceFormatter.format(price:currencyCode:style:options:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, double a5)
{
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v5 = *a3;
  v6 = *((_BYTE *)a3 + 8);
  v8 = *a4;
  v9 = v5;
  v10 = v6;
  return sub_22CB65974(a1, a2, (uint64_t)&v9, &v8, a5);
}

uint64_t PriceFormatter.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PriceFormatter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_22CB656AC(char a1, uint64_t a2, char a3, double a4)
{
  double v5;
  double v9;
  uint64_t *v10;
  double v11;

  v5 = fabs(a4);
  if (a4 != 0.0 && v5 < 5.0 && (a1 & 1) == 0)
  {
    if (a3)
    {
      if (qword_255C34D48 != -1)
        swift_once();
      v10 = &qword_255C3A268;
    }
    else
    {
      if (qword_255C34D50 != -1)
        swift_once();
      v10 = &qword_255C3A270;
    }
  }
  else
  {
    if (a3)
    {
      if (a3 != 1)
      {
        if (!a2)
          goto LABEL_18;
        goto LABEL_40;
      }
      if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) != 0)
      {
        if (v5 > -9.22337204e18)
        {
          if (v5 < 9.22337204e18)
          {
            if ((uint64_t)v5 < 1)
            {
LABEL_18:
              if (qword_255C34D40 != -1)
                swift_once();
              v10 = &qword_255C3A260;
              return *v10;
            }
            v9 = log10(v5);
            if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) != 0)
            {
              if (v9 > -9.22337204e18)
              {
                if (v9 < 9.22337204e18)
                {
                  if ((uint64_t)v9 < a2)
                    goto LABEL_18;
LABEL_40:
                  if (qword_255C34D58 == -1)
                  {
LABEL_41:
                    v10 = &qword_255C3A278;
                    return *v10;
                  }
LABEL_51:
                  swift_once();
                  goto LABEL_41;
                }
                goto LABEL_54;
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          goto LABEL_47;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    if (v5 <= -9.22337204e18)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if (v5 >= 9.22337204e18)
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    if ((uint64_t)v5 >= 1)
    {
      v11 = log10(v5);
      if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
      {
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      if (v11 <= -9.22337204e18)
      {
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      if (v11 >= 9.22337204e18)
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      if ((uint64_t)v11 >= a2)
      {
        if (qword_255C34D68 == -1)
        {
LABEL_43:
          v10 = &qword_255C3A288;
          return *v10;
        }
LABEL_58:
        swift_once();
        goto LABEL_43;
      }
    }
    if (qword_255C34D60 != -1)
      swift_once();
    v10 = &qword_255C3A280;
  }
  return *v10;
}

id sub_22CB65974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, double a5)
{
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t inited;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v80 = a2;
  v76 = a1;
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_22CB5F9BC(0, (unint64_t *)&qword_255C35088, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED08], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v9);
  v77 = (char *)&v70 - v10;
  v78 = sub_22CB9C634();
  v11 = *(_QWORD *)(v78 - 8);
  v12 = MEMORY[0x24BDAC7A8](v78);
  v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v70 - v15;
  v79 = sub_22CB9C64C();
  v17 = *(_QWORD *)(v79 - 8);
  v18 = MEMORY[0x24BDAC7A8](v79);
  v75 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v70 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v70 - v23;
  sub_22CB5F9BC(0, &qword_255C35090, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEB60], v8);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v70 - v26;
  v28 = *a4;
  v29 = (void *)sub_22CB656AC(*a4, *(_QWORD *)a3, *(_BYTE *)(a3 + 8), a5);
  v30 = v29;
  if ((v28 & 2) != 0 && v80)
  {
    v73 = v29;
    sub_22CB9C5E0();
    sub_22CB9C640();
    v31 = *(void (**)(char *, uint64_t))(v17 + 8);
    v32 = v79;
    v74 = v31;
    v31(v24, v79);
    sub_22CB9C61C();
    v33 = *(void (**)(char *, uint64_t))(v11 + 8);
    v34 = v78;
    v33(v16, v78);
    v35 = sub_22CB9C598();
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v27, 1, v35) == 1)
    {
      sub_22CB60B48((uint64_t)v27, &qword_255C35090, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEB60]);
    }
    else
    {
      v71 = _s9StocksKit8CurrencyV10identifierSSvg_0();
      v72 = v42;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v35);
      sub_22CB9C5E0();
      sub_22CB9C640();
      v43 = v74;
      v74(v22, v32);
      v44 = (uint64_t)v77;
      sub_22CB9C628();
      v33(v14, v34);
      v45 = sub_22CB9C5C8();
      v46 = *(_QWORD *)(v45 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45) != 1)
      {
        v47 = v43;
        v48 = _s9StocksKit8CurrencyV10identifierSSvg_0();
        v50 = v49;
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v45);
        sub_22CB5F9BC(0, &qword_255C35098, (uint64_t (*)(uint64_t))sub_22CB662B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_22CB9DCC0;
        *(_QWORD *)(inited + 32) = sub_22CB9D024();
        *(_QWORD *)(inited + 40) = v52;
        v53 = v76;
        v54 = v80;
        *(_QWORD *)(inited + 48) = v76;
        *(_QWORD *)(inited + 56) = v54;
        *(_QWORD *)(inited + 64) = sub_22CB9D024();
        *(_QWORD *)(inited + 72) = v55;
        v56 = v72;
        *(_QWORD *)(inited + 80) = v71;
        *(_QWORD *)(inited + 88) = v56;
        *(_QWORD *)(inited + 96) = sub_22CB9D024();
        *(_QWORD *)(inited + 104) = v57;
        *(_QWORD *)(inited + 112) = v48;
        *(_QWORD *)(inited + 120) = v50;
        swift_bridgeObjectRetain();
        sub_22CB7DE54(inited);
        MEMORY[0x22E301DE8]();
        swift_bridgeObjectRelease();
        v58 = v75;
        sub_22CB9C580();
        v59 = (void *)sub_22CB9C5A4();
        v60 = v73;
        objc_msgSend(v73, sel_setLocale_, v59);

        if (v53 == 7356999 && v54 == 0xE300000000000000 || (sub_22CB9D4BC() & 1) != 0)
        {
          objc_msgSend(v60, sel_setNumberStyle_, 1);
          v61 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, a5);
          v40 = objc_msgSend(v60, sel_stringFromNumber_, v61);

          if (!v40)
          {

            v47(v58, v79);
            return v40;
          }
          v62 = sub_22CB9D024();
          v64 = v63;

          sub_22CB5F9BC(0, &qword_255C350A8, (uint64_t (*)(uint64_t))sub_22CB66310, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
          v65 = swift_allocObject();
          *(_OWORD *)(v65 + 16) = xmmword_22CB9E8F0;
          v66 = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v65 + 56) = MEMORY[0x24BEE0D00];
          v67 = sub_22CB66364();
          *(_QWORD *)(v65 + 32) = 0xD000000000000021;
          *(_QWORD *)(v65 + 40) = 0x800000022CBA24D0;
          *(_QWORD *)(v65 + 96) = v66;
          *(_QWORD *)(v65 + 104) = v67;
          *(_QWORD *)(v65 + 64) = v67;
          *(_QWORD *)(v65 + 72) = v62;
          *(_QWORD *)(v65 + 80) = v64;
          v40 = (id)sub_22CB9D030();

        }
        else
        {
          objc_msgSend(v60, sel_setNumberStyle_, 2);
          v68 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, a5);
          v69 = objc_msgSend(v60, sel_stringFromNumber_, v68);

          if (v69)
          {
            v40 = (id)sub_22CB9D024();

          }
          else
          {

            v40 = 0;
          }
        }
        v47(v58, v79);
        return v40;
      }
      swift_bridgeObjectRelease();
      sub_22CB60B48(v44, (unint64_t *)&qword_255C35088, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED08]);
    }
  }
  else
  {
    v37 = v29;
  }
  objc_msgSend(v30, sel_setNumberStyle_, 1);
  v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, a5);
  v39 = objc_msgSend(v30, sel_stringFromNumber_, v38);

  if (v39)
  {
    v40 = (id)sub_22CB9D024();

  }
  else
  {

    return 0;
  }
  return v40;
}

unint64_t sub_22CB66078()
{
  unint64_t result;

  result = qword_255C35068;
  if (!qword_255C35068)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for PriceFormatter.Options, &type metadata for PriceFormatter.Options);
    atomic_store(result, (unint64_t *)&qword_255C35068);
  }
  return result;
}

unint64_t sub_22CB660C0()
{
  unint64_t result;

  result = qword_255C35070;
  if (!qword_255C35070)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for PriceFormatter.Options, &type metadata for PriceFormatter.Options);
    atomic_store(result, (unint64_t *)&qword_255C35070);
  }
  return result;
}

unint64_t sub_22CB66108()
{
  unint64_t result;

  result = qword_255C35078;
  if (!qword_255C35078)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for PriceFormatter.Options, &type metadata for PriceFormatter.Options);
    atomic_store(result, (unint64_t *)&qword_255C35078);
  }
  return result;
}

unint64_t sub_22CB66150()
{
  unint64_t result;

  result = qword_255C35080;
  if (!qword_255C35080)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for PriceFormatter.Options, &type metadata for PriceFormatter.Options);
    atomic_store(result, (unint64_t *)&qword_255C35080);
  }
  return result;
}

uint64_t type metadata accessor for PriceFormatter()
{
  return objc_opt_self();
}

uint64_t method lookup function for PriceFormatter()
{
  return swift_lookUpClassMethod();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PriceFormatter.Style(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PriceFormatter.Style(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_22CB66260(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_22CB66278(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PriceFormatter.Style()
{
  return &type metadata for PriceFormatter.Style;
}

ValueMetadata *type metadata accessor for PriceFormatter.Options()
{
  return &type metadata for PriceFormatter.Options;
}

void sub_22CB662B0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_255C350A0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_255C350A0);
  }
}

unint64_t sub_22CB66310()
{
  unint64_t result;

  result = qword_255C350B0;
  if (!qword_255C350B0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_255C350B0);
  }
  return result;
}

unint64_t sub_22CB66364()
{
  unint64_t result;

  result = qword_255C350B8;
  if (!qword_255C350B8)
  {
    result = MEMORY[0x22E303264](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_255C350B8);
  }
  return result;
}

StocksKit::DataSource::ImageContext __swiftcall DataSource.ImageContext.init(scale:)(StocksKit::DataSource::ImageContext scale)
{
  StocksKit::DataSource::ImageContext *v1;

  v1->scale = scale.scale;
  return scale;
}

uint64_t DataSource.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DataSource.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*DataSource.name.modify())()
{
  return nullsub_1;
}

uint64_t DataSource.logo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DataSource(0);
  return sub_22CB6AE84(v1 + *(int *)(v3 + 20), a1, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
}

uint64_t type metadata accessor for DataSource(uint64_t a1)
{
  return sub_22CB60CD0(a1, (uint64_t *)&unk_253F83E78);
}

uint64_t type metadata accessor for DataSource.Logo(uint64_t a1)
{
  return sub_22CB60CD0(a1, (uint64_t *)&unk_253F83E60);
}

uint64_t DataSource.destination.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DataSource(0);
  return sub_22CB6AE84(v1 + *(int *)(v3 + 24), a1, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
}

uint64_t DataSource.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = sub_22CB9C4F0();
  v28 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v27 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, v3);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v29 = (uint64_t)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v26 = (uint64_t)&v25 - v7;
  v8 = type metadata accessor for DataSource.Logo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4E0E4(0, &qword_253F83E70, v12);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v25 - v14;
  swift_bridgeObjectRetain();
  sub_22CB9D048();
  swift_bridgeObjectRelease();
  v16 = type metadata accessor for DataSource(0);
  v17 = *(int *)(v16 + 20);
  v30 = v0;
  sub_22CB6AE84(v0 + v17, (uint64_t)v15, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) == 1)
  {
    sub_22CB9D54C();
    v18 = v28;
  }
  else
  {
    sub_22CB67950((uint64_t)v15, (uint64_t)v11);
    sub_22CB9D54C();
    v19 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
    sub_22CB50668(&qword_255C350C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_22CB9CFE8();
    v20 = v26;
    sub_22CB6AE84((uint64_t)&v11[*(int *)(v8 + 20)], v26, (unint64_t *)&qword_253F83998, v19);
    v18 = v28;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v20, 1, v1) == 1)
    {
      sub_22CB9D54C();
    }
    else
    {
      v21 = v27;
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v27, v20, v1);
      sub_22CB9D54C();
      sub_22CB9CFE8();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v1);
    }
    sub_22CB6257C((uint64_t)v11, type metadata accessor for DataSource.Logo);
  }
  v22 = v29;
  sub_22CB6AE84(v30 + *(int *)(v16 + 24), v29, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v22, 1, v1) == 1)
    return sub_22CB9D54C();
  v24 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v27, v22, v1);
  sub_22CB9D54C();
  sub_22CB50668(&qword_255C350C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_22CB9CFE8();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v24, v1);
}

uint64_t sub_22CB6686C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1869049708;
  if (*v0 != 1)
    v1 = 0x74616E6974736564;
  if (*v0)
    return v1;
  else
    return 1701667182;
}

uint64_t sub_22CB668C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB6AC60(a1, a2);
  *a3 = result;
  return result;
}

void sub_22CB668E4(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_22CB668F0()
{
  sub_22CB68754();
  return sub_22CB9D654();
}

uint64_t sub_22CB66918()
{
  sub_22CB68754();
  return sub_22CB9D660();
}

uint64_t DataSource.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  sub_22CB5F8B8(0, &qword_253F83970, (uint64_t (*)(void))sub_22CB68754, (uint64_t)&type metadata for DataSource.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB68754();
  sub_22CB9D57C();
  v12 = 0;
  sub_22CB9D468();
  if (!v1)
  {
    type metadata accessor for DataSource(0);
    v11 = 1;
    type metadata accessor for DataSource.Logo(0);
    sub_22CB50668(&qword_253F83840, type metadata accessor for DataSource.Logo, (uint64_t)&protocol conformance descriptor for DataSource.Logo);
    sub_22CB9D45C();
    v10 = 2;
    sub_22CB9C4F0();
    sub_22CB50668(&qword_253F837D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_22CB9D45C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DataSource.hashValue.getter()
{
  sub_22CB9D534();
  DataSource.hash(into:)();
  return sub_22CB9D558();
}

uint64_t DataSource.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;

  v21 = a2;
  sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v3);
  v22 = (char *)&v21 - v4;
  sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
  MEMORY[0x24BDAC7A8](v5);
  v23 = (char *)&v21 - v6;
  sub_22CB5F8B8(0, &qword_253F83730, (uint64_t (*)(void))sub_22CB68754, (uint64_t)&type metadata for DataSource.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v24 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v21 - v9;
  v11 = type metadata accessor for DataSource(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (uint64_t *)((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB68754();
  v25 = v10;
  v14 = v26;
  sub_22CB9D570();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v15 = (uint64_t)a1;
  v29 = 0;
  v16 = (uint64_t)v23;
  v17 = v24;
  *v13 = sub_22CB9D3F0();
  v13[1] = v18;
  type metadata accessor for DataSource.Logo(0);
  v28 = 1;
  sub_22CB50668(&qword_253F83650, type metadata accessor for DataSource.Logo, (uint64_t)&protocol conformance descriptor for DataSource.Logo);
  sub_22CB9D3E4();
  sub_22CB68798(v16, (uint64_t)v13 + *(int *)(v11 + 20), &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
  sub_22CB9C4F0();
  v27 = 2;
  sub_22CB50668(&qword_253F834C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  v19 = (uint64_t)v22;
  v26 = 0;
  sub_22CB9D3E4();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v25, v17);
  sub_22CB68798(v19, (uint64_t)v13 + *(int *)(v11 + 24), (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  sub_22CB4DCF4((uint64_t)v13, v21, type metadata accessor for DataSource);
  __swift_destroy_boxed_opaque_existential_1(v15);
  return sub_22CB6257C((uint64_t)v13, type metadata accessor for DataSource);
}

uint64_t sub_22CB66EE8()
{
  sub_22CB9D534();
  DataSource.hash(into:)();
  return sub_22CB9D558();
}

uint64_t sub_22CB66F28()
{
  sub_22CB9D534();
  DataSource.hash(into:)();
  return sub_22CB9D558();
}

uint64_t sub_22CB66F60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DataSource.init(from:)(a1, a2);
}

uint64_t sub_22CB66F74(_QWORD *a1)
{
  return DataSource.encode(to:)(a1);
}

uint64_t DataSource.Logo.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v1 = sub_22CB9C4F0();
  v2 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, v2);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - v7;
  sub_22CB50668(&qword_255C350C0, (uint64_t (*)(uint64_t))v2, MEMORY[0x24BDCDAF0]);
  sub_22CB9CFE8();
  v9 = type metadata accessor for DataSource.Logo(0);
  sub_22CB6AE84(v0 + *(int *)(v9 + 20), (uint64_t)v8, (unint64_t *)&qword_253F83998, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v1) == 1)
    return sub_22CB9D54C();
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v1);
  sub_22CB9D54C();
  sub_22CB9CFE8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v1);
}

BOOL sub_22CB6710C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_22CB67124()
{
  _BYTE *v0;

  if (*v0)
    return 1802658148;
  else
    return 0x746867696CLL;
}

uint64_t sub_22CB67154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB6ADAC(a1, a2);
  *a3 = result;
  return result;
}

void sub_22CB67178(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_22CB67184()
{
  sub_22CB68B90();
  return sub_22CB9D654();
}

uint64_t sub_22CB671AC()
{
  sub_22CB68B90();
  return sub_22CB9D660();
}

uint64_t DataSource.Logo.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;

  sub_22CB5F8B8(0, &qword_253F83978, (uint64_t (*)(void))sub_22CB68B90, (uint64_t)&type metadata for DataSource.Logo.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB68B90();
  sub_22CB9D57C();
  v11 = 0;
  sub_22CB9C4F0();
  sub_22CB50668(&qword_253F837D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
  sub_22CB9D480();
  if (!v1)
  {
    type metadata accessor for DataSource.Logo(0);
    v10 = 1;
    sub_22CB9D45C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DataSource.Logo.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v1 = sub_22CB9C4F0();
  v2 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, v2);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - v7;
  sub_22CB9D534();
  sub_22CB50668(&qword_255C350C0, (uint64_t (*)(uint64_t))v2, MEMORY[0x24BDCDAF0]);
  sub_22CB9CFE8();
  v9 = type metadata accessor for DataSource.Logo(0);
  sub_22CB6AE84(v0 + *(int *)(v9 + 20), (uint64_t)v8, (unint64_t *)&qword_253F83998, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v1) == 1)
  {
    sub_22CB9D54C();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v1);
    sub_22CB9D54C();
    sub_22CB9CFE8();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v1);
  }
  return sub_22CB9D558();
}

uint64_t DataSource.Logo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  char v33;

  v25 = a2;
  sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v3);
  v27 = (char *)&v22 - v4;
  v28 = sub_22CB9C4F0();
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v29 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB5F8B8(0, &qword_253F83738, (uint64_t (*)(void))sub_22CB68B90, (uint64_t)&type metadata for DataSource.Logo.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v30 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v22 - v8;
  v10 = type metadata accessor for DataSource.Logo(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB68B90();
  v13 = (uint64_t)v31;
  sub_22CB9D570();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v24 = v10;
  v31 = a1;
  v14 = v7;
  v16 = v26;
  v15 = v27;
  v33 = 0;
  sub_22CB50668(&qword_253F834C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  v17 = v28;
  sub_22CB9D408();
  v18 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v23 = v12;
  v18(v12, v29, v17);
  v32 = 1;
  v19 = (uint64_t)v15;
  sub_22CB9D3E4();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v30);
  v20 = (uint64_t)v23;
  sub_22CB68798(v19, (uint64_t)&v23[*(int *)(v24 + 20)], (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  sub_22CB4DCF4(v20, v25, type metadata accessor for DataSource.Logo);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  return sub_22CB6257C(v20, type metadata accessor for DataSource.Logo);
}

uint64_t sub_22CB677D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v4 = sub_22CB9C4F0();
  v5 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, v5);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - v10;
  sub_22CB50668(&qword_255C350C0, (uint64_t (*)(uint64_t))v5, MEMORY[0x24BDCDAF0]);
  sub_22CB9CFE8();
  sub_22CB6AE84(v2 + *(int *)(a2 + 20), (uint64_t)v11, (unint64_t *)&qword_253F83998, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v4) == 1)
    return sub_22CB9D54C();
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v4);
  sub_22CB9D54C();
  sub_22CB9CFE8();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v4);
}

uint64_t sub_22CB67950(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DataSource.Logo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_22CB67994(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v4 = sub_22CB9C4F0();
  v5 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, v5);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - v10;
  sub_22CB9D534();
  sub_22CB50668(&qword_255C350C0, (uint64_t (*)(uint64_t))v5, MEMORY[0x24BDCDAF0]);
  sub_22CB9CFE8();
  sub_22CB6AE84(v2 + *(int *)(a2 + 20), (uint64_t)v11, (unint64_t *)&qword_253F83998, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v4) == 1)
  {
    sub_22CB9D54C();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v4);
    sub_22CB9D54C();
    sub_22CB9CFE8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  }
  return sub_22CB9D558();
}

uint64_t sub_22CB67B24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DataSource.Logo.init(from:)(a1, a2);
}

uint64_t sub_22CB67B38(_QWORD *a1)
{
  return DataSource.Logo.encode(to:)(a1);
}

double DataSource.ImageContext.scale.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void DataSource.ImageContext.scale.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*DataSource.ImageContext.scale.modify())()
{
  return nullsub_1;
}

uint64_t DataSource.DownloadedLogo.light.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_22CB68BD4(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t DataSource.DownloadedLogo.dark.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_22CB68C18(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

double DataSource.DownloadedLogo.scale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

uint64_t sub_22CB67BD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v48 = a2;
  v3 = sub_22CB9C9C4();
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v39 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v5);
  v45 = (char *)&v39 - v6;
  v7 = sub_22CB9C4F0();
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v46 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_22CB9C988();
  v9 = *(_QWORD *)(v42 - 8);
  v10 = MEMORY[0x24BDAC7A8](v42);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v39 - v13;
  v15 = (void (*)(uint64_t))MEMORY[0x24BEB1988];
  sub_22CB4E0E4(0, &qword_253F83800, (void (*)(uint64_t))MEMORY[0x24BEB1988]);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v39 - v20;
  v22 = type metadata accessor for DataSource.Logo(0);
  v47 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB6AE84(a1, (uint64_t)v21, &qword_253F83800, v15);
  v25 = sub_22CB9C9D0();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v21, 1, v25) == 1)
  {
    sub_22CB6AED0(a1, &qword_253F83800, (void (*)(uint64_t))MEMORY[0x24BEB1988]);
LABEL_9:
    sub_22CB6AED0((uint64_t)v21, &qword_253F83800, (void (*)(uint64_t))MEMORY[0x24BEB1988]);
    v37 = 1;
    v36 = v48;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v36, v37, 1, v22);
  }
  sub_22CB6AE84((uint64_t)v21, (uint64_t)v19, &qword_253F83800, (void (*)(uint64_t))MEMORY[0x24BEB1988]);
  v27 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v19, v25);
  if (v27 == *MEMORY[0x24BEB1950])
  {
    (*(void (**)(char *, uint64_t))(v26 + 96))(v19, v25);
    v28 = v42;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v19, v42);
    v29 = v46;
    sub_22CB9C970();
    v30 = (uint64_t)v45;
    sub_22CB9C964();
    sub_22CB6AED0(a1, &qword_253F83800, (void (*)(uint64_t))MEMORY[0x24BEB1988]);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v28);
  }
  else
  {
    if (v27 != *MEMORY[0x24BEB1980])
    {
      sub_22CB6AED0(a1, &qword_253F83800, (void (*)(uint64_t))MEMORY[0x24BEB1988]);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v25);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v26 + 96))(v19, v25);
    v31 = v39;
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v39, v19, v41);
    sub_22CB9C994();
    sub_22CB9C970();
    v32 = *(void (**)(char *, uint64_t))(v9 + 8);
    v33 = v14;
    v34 = v42;
    v32(v33, v42);
    sub_22CB9C994();
    v30 = (uint64_t)v45;
    sub_22CB9C964();
    sub_22CB6AED0(a1, &qword_253F83800, (void (*)(uint64_t))MEMORY[0x24BEB1988]);
    v35 = v12;
    v29 = v46;
    v32(v35, v34);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v41);
  }
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v24, v29, v44);
  sub_22CB68798(v30, (uint64_t)&v24[*(int *)(v22 + 20)], (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  sub_22CB6AED0((uint64_t)v21, &qword_253F83800, (void (*)(uint64_t))MEMORY[0x24BEB1988]);
  v36 = v48;
  sub_22CB67950((uint64_t)v24, v48);
  v37 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v36, v37, 1, v22);
}

BOOL _s9StocksKit10DataSourceV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _BOOL8 result;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(uint64_t, uint64_t, uint64_t);
  void (*v53)(uint64_t);
  uint64_t v54;
  void (*v55)(uint64_t);
  char *v56;
  void (*v57)(uint64_t);
  char v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;

  v4 = sub_22CB9C4F0();
  v5 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v67 = *(_QWORD *)(v4 - 8);
  v68 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v61 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB6AF48(0, &qword_255C350E8, (unint64_t *)&qword_253F83998, v5);
  v64 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v60 - v8;
  sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, v5);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v62 = (uint64_t)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v65 = (uint64_t)&v60 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v66 = (uint64_t)&v60 - v15;
  v69 = type metadata accessor for DataSource.Logo(0);
  v16 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v63 = (uint64_t)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB6AF48(0, &qword_255C350F8, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
  v19 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v60 - v20;
  sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v60 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v60 - v29;
  v31 = *a1;
  v32 = a1[1];
  v70 = a1;
  v71 = a2;
  if (v31 == *a2 && v32 == a2[1] || (v33 = sub_22CB9D4BC(), result = 0, (v33 & 1) != 0))
  {
    v60 = v9;
    v35 = type metadata accessor for DataSource(0);
    sub_22CB6AE84((uint64_t)v70 + *(int *)(v35 + 20), (uint64_t)v30, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    sub_22CB6AE84((uint64_t)v71 + *(int *)(v35 + 20), (uint64_t)v28, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    v36 = (uint64_t)&v21[*(int *)(v19 + 48)];
    sub_22CB6AE84((uint64_t)v30, (uint64_t)v21, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    sub_22CB6AE84((uint64_t)v28, v36, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    v38 = v69;
    if (v37((uint64_t)v21, 1, v69) == 1)
    {
      sub_22CB6AED0((uint64_t)v28, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
      sub_22CB6AED0((uint64_t)v30, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
      if (v37(v36, 1, v38) == 1)
      {
        sub_22CB6AED0((uint64_t)v21, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
LABEL_11:
        v45 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
        v46 = v66;
        sub_22CB6AE84((uint64_t)v70 + *(int *)(v35 + 24), v66, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        v47 = v65;
        sub_22CB6AE84((uint64_t)v71 + *(int *)(v35 + 24), v65, (unint64_t *)&qword_253F83998, v45);
        v48 = (uint64_t)v60;
        v49 = (uint64_t)&v60[*(int *)(v64 + 48)];
        sub_22CB6AE84(v46, (uint64_t)v60, (unint64_t *)&qword_253F83998, v45);
        sub_22CB6AE84(v47, v49, (unint64_t *)&qword_253F83998, v45);
        v50 = v67;
        v51 = v68;
        v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
        if (v52(v48, 1, v68) == 1)
        {
          v53 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
          sub_22CB6AED0(v47, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
          sub_22CB6AED0(v46, (unint64_t *)&qword_253F83998, v53);
          if (v52(v49, 1, v51) == 1)
          {
            sub_22CB6AED0(v48, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
            return 1;
          }
        }
        else
        {
          v54 = v62;
          sub_22CB6AE84(v48, v62, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
          if (v52(v49, 1, v51) != 1)
          {
            v56 = v61;
            (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v61, v49, v51);
            v57 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
            sub_22CB50668(&qword_255C350F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
            v58 = sub_22CB9D00C();
            v59 = *(void (**)(char *, uint64_t))(v50 + 8);
            v59(v56, v51);
            sub_22CB6AED0(v47, (unint64_t *)&qword_253F83998, v57);
            sub_22CB6AED0(v46, (unint64_t *)&qword_253F83998, v57);
            v59((char *)v54, v51);
            sub_22CB6AED0(v48, (unint64_t *)&qword_253F83998, v57);
            return (v58 & 1) != 0;
          }
          v55 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
          sub_22CB6AED0(v47, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
          sub_22CB6AED0(v46, (unint64_t *)&qword_253F83998, v55);
          (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v54, v51);
        }
        v39 = &qword_255C350E8;
        v40 = (unint64_t *)&qword_253F83998;
        v41 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
        v42 = v48;
        goto LABEL_17;
      }
    }
    else
    {
      sub_22CB6AE84((uint64_t)v21, (uint64_t)v25, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
      if (v37(v36, 1, v38) != 1)
      {
        v43 = v63;
        sub_22CB67950(v36, v63);
        v44 = _s9StocksKit10DataSourceV4LogoV2eeoiySbAE_AEtFZ_0((uint64_t)v25, v43);
        sub_22CB6257C(v43, type metadata accessor for DataSource.Logo);
        sub_22CB6AED0((uint64_t)v28, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
        sub_22CB6AED0((uint64_t)v30, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
        sub_22CB6257C((uint64_t)v25, type metadata accessor for DataSource.Logo);
        sub_22CB6AED0((uint64_t)v21, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
        if (!v44)
          return 0;
        goto LABEL_11;
      }
      sub_22CB6AED0((uint64_t)v28, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
      sub_22CB6AED0((uint64_t)v30, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
      sub_22CB6257C((uint64_t)v25, type metadata accessor for DataSource.Logo);
    }
    v39 = &qword_255C350F8;
    v40 = &qword_253F83E70;
    v41 = (void (*)(uint64_t))type metadata accessor for DataSource.Logo;
    v42 = (uint64_t)v21;
LABEL_17:
    sub_22CB6AF0C(v42, v39, v40, v41);
    return 0;
  }
  return result;
}

unint64_t sub_22CB68754()
{
  unint64_t result;

  result = qword_253F83E30;
  if (!qword_253F83E30)
  {
    result = MEMORY[0x22E303264](&unk_22CB9EEDC, &type metadata for DataSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83E30);
  }
  return result;
}

uint64_t sub_22CB68798(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_22CB4E0E4(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

BOOL _s9StocksKit10DataSourceV4LogoV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(uint64_t);
  void (*v30)(_BYTE *, uint64_t, uint64_t);
  uint64_t v31;
  _BYTE *v32;
  void (*v33)(uint64_t);
  void (*v34)(_BYTE *, uint64_t);
  _BYTE v36[12];
  int v37;
  _BYTE *v38;
  _BYTE *v39;

  v4 = sub_22CB9C4F0();
  v5 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_22CB6AF48(0, &qword_255C350E8, (unint64_t *)&qword_253F83998, v5);
  v10 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v36[-v11];
  sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, v5);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = &v36[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = &v36[-v18];
  MEMORY[0x24BDAC7A8](v17);
  v21 = &v36[-v20];
  if ((MEMORY[0x22E301D4C](a1, a2) & 1) == 0)
    return 0;
  v38 = v8;
  v39 = v16;
  v22 = type metadata accessor for DataSource.Logo(0);
  v23 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  sub_22CB6AE84(a1 + *(int *)(v22 + 20), (uint64_t)v21, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v24 = *(int *)(v22 + 20);
  v25 = v6;
  sub_22CB6AE84(a2 + v24, (uint64_t)v19, (unint64_t *)&qword_253F83998, v23);
  v26 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_22CB6AE84((uint64_t)v21, (uint64_t)v12, (unint64_t *)&qword_253F83998, v23);
  sub_22CB6AE84((uint64_t)v19, v26, (unint64_t *)&qword_253F83998, v23);
  v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v27((uint64_t)v12, 1, v4) == 1)
  {
    sub_22CB6AED0((uint64_t)v19, (unint64_t *)&qword_253F83998, v23);
    sub_22CB6AED0((uint64_t)v21, (unint64_t *)&qword_253F83998, v23);
    if (v27(v26, 1, v4) == 1)
    {
      sub_22CB6AED0((uint64_t)v12, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      return 1;
    }
    goto LABEL_7;
  }
  v28 = (uint64_t)v39;
  sub_22CB6AE84((uint64_t)v12, (uint64_t)v39, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v27(v26, 1, v4) == 1)
  {
    v29 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
    sub_22CB6AED0((uint64_t)v19, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    sub_22CB6AED0((uint64_t)v21, (unint64_t *)&qword_253F83998, v29);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v28, v4);
LABEL_7:
    sub_22CB6AF0C((uint64_t)v12, &qword_255C350E8, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    return 0;
  }
  v30 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 32);
  v31 = v28;
  v32 = v38;
  v30(v38, v26, v4);
  v33 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  sub_22CB50668(&qword_255C350F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
  v37 = sub_22CB9D00C();
  v34 = *(void (**)(_BYTE *, uint64_t))(v25 + 8);
  v34(v32, v4);
  sub_22CB6AED0((uint64_t)v19, (unint64_t *)&qword_253F83998, v33);
  sub_22CB6AED0((uint64_t)v21, (unint64_t *)&qword_253F83998, v33);
  v34((_BYTE *)v31, v4);
  sub_22CB6AED0((uint64_t)v12, (unint64_t *)&qword_253F83998, v33);
  return (v37 & 1) != 0;
}

unint64_t sub_22CB68B90()
{
  unint64_t result;

  result = qword_253F83E48;
  if (!qword_253F83E48)
  {
    result = MEMORY[0x22E303264](&unk_22CB9EE8C, &type metadata for DataSource.Logo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83E48);
  }
  return result;
}

uint64_t sub_22CB68BD4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_22CB68C18(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_22CB68BD4(a1, a2);
  return a1;
}

uint64_t sub_22CB68C2C()
{
  return sub_22CB50668(&qword_255C350C8, type metadata accessor for DataSource, (uint64_t)&protocol conformance descriptor for DataSource);
}

uint64_t sub_22CB68C58()
{
  return sub_22CB50668(&qword_255C350D0, type metadata accessor for DataSource.Logo, (uint64_t)&protocol conformance descriptor for DataSource.Logo);
}

uint64_t *initializeBufferWithCopyOfBuffer for DataSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DataSource.Logo(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = sub_22CB9C4F0();
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
      v18(v9, v10, v16);
      v19 = *(int *)(v11 + 20);
      __dst = &v9[v19];
      v20 = &v10[v19];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v20, 1, v16))
      {
        sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        v18(__dst, v20, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v22 = *(int *)(a3 + 24);
    v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    v25 = sub_22CB9C4F0();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
  }
  return v4;
}

uint64_t destroy for DataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for DataSource.Logo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = sub_22CB9C4F0();
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v8(v4, v6);
    v9 = v4 + *(int *)(v5 + 20);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6))
      v8(v9, v6);
  }
  v10 = a1 + *(int *)(a2 + 24);
  v11 = sub_22CB9C4F0();
  v12 = *(_QWORD *)(v11 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  return result;
}

_QWORD *initializeWithCopy for DataSource(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for DataSource.Logo(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = sub_22CB9C4F0();
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v16(v8, v9, v14);
    v17 = *(int *)(v10 + 20);
    __dst = &v8[v17];
    v18 = &v9[v17];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v18, 1, v14))
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v16(__dst, v18, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v20 = *(int *)(a3 + 24);
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = sub_22CB9C4F0();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  return a1;
}

_QWORD *assignWithCopy for DataSource(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, char *, uint64_t);
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t (*v30)(void *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v43;
  void *__dst;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (uint64_t)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DataSource.Logo(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11((uint64_t)v8, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      sub_22CB6257C(v7, type metadata accessor for DataSource.Logo);
LABEL_6:
      sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
      v15 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
      v16 = (void *)v7;
      v17 = v8;
LABEL_7:
      memcpy(v16, v17, v15);
      goto LABEL_15;
    }
    v24 = sub_22CB9C4F0();
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 24);
    v26(v7, v8, v24);
    v27 = *(int *)(v9 + 20);
    v28 = (void *)(v7 + v27);
    v29 = &v8[v27];
    v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
    v31 = v30(v28, 1, v24);
    v32 = v30(v29, 1, v24);
    if (v31)
    {
      if (!v32)
      {
        (*(void (**)(void *, char *, uint64_t))(v25 + 16))(v28, v29, v24);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v28, 0, 1, v24);
        goto LABEL_15;
      }
    }
    else
    {
      if (!v32)
      {
        v26((uint64_t)v28, v29, v24);
        goto LABEL_15;
      }
      (*(void (**)(void *, uint64_t))(v25 + 8))(v28, v24);
    }
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v15 = *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64);
    v16 = v28;
    v17 = v29;
    goto LABEL_7;
  }
  if (v13)
    goto LABEL_6;
  v18 = sub_22CB9C4F0();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 16);
  v20(v7, v8, v18);
  v21 = *(int *)(v9 + 20);
  __dst = (void *)(v7 + v21);
  v22 = &v8[v21];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v22, 1, v18))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v20((uint64_t)__dst, v22, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_15:
  v33 = *(int *)(a3 + 24);
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = sub_22CB9C4F0();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38(v35, 1, v36);
  if (!v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 24))(v34, v35, v36);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v36);
    goto LABEL_20;
  }
  if (v40)
  {
LABEL_20:
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  return a1;
}

_OWORD *initializeWithTake for DataSource(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *__dst;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DataSource.Logo(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = sub_22CB9C4F0();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v14(v7, v8, v12);
    v15 = *(int *)(v9 + 20);
    __dst = &v7[v15];
    v16 = &v8[v15];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v16, 1, v12))
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v14(__dst, v16, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v18 = *(int *)(a3 + 24);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_22CB9C4F0();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

_QWORD *assignWithTake for DataSource(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  size_t v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t (*v31)(void *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v44;
  void *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for DataSource.Logo(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12((uint64_t)v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_22CB6257C(v8, type metadata accessor for DataSource.Logo);
LABEL_6:
      sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
      v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
      v17 = (void *)v8;
      v18 = v9;
LABEL_7:
      memcpy(v17, v18, v16);
      goto LABEL_15;
    }
    v25 = sub_22CB9C4F0();
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 40);
    v27(v8, v9, v25);
    v28 = *(int *)(v10 + 20);
    v29 = (void *)(v8 + v28);
    v30 = &v9[v28];
    v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 48);
    v32 = v31(v29, 1, v25);
    v33 = v31(v30, 1, v25);
    if (v32)
    {
      if (!v33)
      {
        (*(void (**)(void *, char *, uint64_t))(v26 + 32))(v29, v30, v25);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v29, 0, 1, v25);
        goto LABEL_15;
      }
    }
    else
    {
      if (!v33)
      {
        v27((uint64_t)v29, v30, v25);
        goto LABEL_15;
      }
      (*(void (**)(void *, uint64_t))(v26 + 8))(v29, v25);
    }
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v16 = *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64);
    v17 = v29;
    v18 = v30;
    goto LABEL_7;
  }
  if (v14)
    goto LABEL_6;
  v19 = sub_22CB9C4F0();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 32);
  v21(v8, v9, v19);
  v22 = *(int *)(v10 + 20);
  __dst = (void *)(v8 + v22);
  v23 = &v9[v22];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v23, 1, v19))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v21((uint64_t)__dst, v23, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_15:
  v34 = *(int *)(a3 + 24);
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = sub_22CB9C4F0();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v35, v36, v37);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
    goto LABEL_20;
  }
  if (v41)
  {
LABEL_20:
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataSource()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB69AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DataSource()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB69BC0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_22CB69C7C()
{
  unint64_t v0;
  unint64_t v1;

  sub_22CB4E0E4(319, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
  if (v0 <= 0x3F)
  {
    sub_22CB4E0E4(319, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for DataSource.Logo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_22CB9C4F0();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = *(int *)(a3 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v11, (uint64_t *)v12, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for DataSource.Logo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = sub_22CB9C4F0();
  v5 = *(_QWORD *)(v4 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  return result;
}

char *initializeWithCopy for DataSource.Logo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = sub_22CB9C4F0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for DataSource.Logo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = sub_22CB9C4F0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

char *initializeWithTake for DataSource.Logo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = sub_22CB9C4F0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for DataSource.Logo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = sub_22CB9C4F0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataSource.Logo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB6A2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_22CB9C4F0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v8 = v11;
    v12 = *(_QWORD *)(v11 - 8);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for DataSource.Logo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB6A358(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = sub_22CB9C4F0();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_22CB6A3E4()
{
  unint64_t v0;
  unint64_t v1;

  sub_22CB9C4F0();
  if (v0 <= 0x3F)
  {
    sub_22CB4E0E4(319, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for DataSource.ImageContext()
{
  return &type metadata for DataSource.ImageContext;
}

uint64_t initializeBufferWithCopyOfBuffer for Stock(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for DataSource.DownloadedLogo(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;

  result = sub_22CB64954(*a1, a1[1]);
  v3 = a1[3];
  if (v3 >> 60 != 15)
    return sub_22CB64954(a1[2], v3);
  return result;
}

uint64_t initializeWithCopy for DataSource.DownloadedLogo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  sub_22CB68BD4(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2 + 2;
  v7 = a2[3];
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    sub_22CB68BD4(*v6, a2[3]);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v7;
  }
  *(_QWORD *)(a1 + 32) = a2[4];
  return a1;
}

uint64_t *assignWithCopy for DataSource.DownloadedLogo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *a2;
  v5 = a2[1];
  sub_22CB68BD4(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_22CB64954(v6, v7);
  v8 = a2 + 2;
  v9 = a2[3];
  if ((unint64_t)a1[3] >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      v11 = *v8;
      sub_22CB68BD4(*v8, a2[3]);
      v12 = a1[2];
      v13 = a1[3];
      a1[2] = v11;
      a1[3] = v9;
      sub_22CB64954(v12, v13);
      goto LABEL_8;
    }
    sub_22CB6A654((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  v10 = *v8;
  sub_22CB68BD4(*v8, a2[3]);
  a1[2] = v10;
  a1[3] = v9;
LABEL_8:
  a1[4] = a2[4];
  return a1;
}

uint64_t sub_22CB6A654(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for DataSource.DownloadedLogo(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_22CB64954(v4, v5);
  v6 = (uint64_t *)(a2 + 16);
  v7 = a1[3];
  if (v7 >> 60 != 15)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (v8 >> 60 != 15)
    {
      v9 = a1[2];
      a1[2] = *v6;
      a1[3] = v8;
      sub_22CB64954(v9, v7);
      goto LABEL_6;
    }
    sub_22CB6A654((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v6;
LABEL_6:
  a1[4] = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DataSource.DownloadedLogo(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DataSource.DownloadedLogo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DataSource.DownloadedLogo()
{
  return &type metadata for DataSource.DownloadedLogo;
}

uint64_t getEnumTagSinglePayload for DataSource.Logo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DataSource.Logo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_22CB6A8C8 + 4 * byte_22CB9EB1D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_22CB6A8FC + 4 * asc_22CB9EB18[v4]))();
}

uint64_t sub_22CB6A8FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB6A904(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB6A90CLL);
  return result;
}

uint64_t sub_22CB6A918(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB6A920);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_22CB6A924(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB6A92C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_22CB6A938(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DataSource.Logo.CodingKeys()
{
  return &type metadata for DataSource.Logo.CodingKeys;
}

uint64_t getEnumTagSinglePayload for DataSource.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DataSource.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_22CB6AA30 + 4 * byte_22CB9EB27[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_22CB6AA64 + 4 * byte_22CB9EB22[v4]))();
}

uint64_t sub_22CB6AA64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB6AA6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB6AA74);
  return result;
}

uint64_t sub_22CB6AA80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB6AA88);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_22CB6AA8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB6AA94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DataSource.CodingKeys()
{
  return &type metadata for DataSource.CodingKeys;
}

unint64_t sub_22CB6AAB4()
{
  unint64_t result;

  result = qword_255C350D8;
  if (!qword_255C350D8)
  {
    result = MEMORY[0x22E303264](&unk_22CB9EDAC, &type metadata for DataSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C350D8);
  }
  return result;
}

unint64_t sub_22CB6AAFC()
{
  unint64_t result;

  result = qword_255C350E0;
  if (!qword_255C350E0)
  {
    result = MEMORY[0x22E303264](&unk_22CB9EE64, &type metadata for DataSource.Logo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C350E0);
  }
  return result;
}

unint64_t sub_22CB6AB44()
{
  unint64_t result;

  result = qword_253F83E58;
  if (!qword_253F83E58)
  {
    result = MEMORY[0x22E303264](&unk_22CB9EDD4, &type metadata for DataSource.Logo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83E58);
  }
  return result;
}

unint64_t sub_22CB6AB8C()
{
  unint64_t result;

  result = qword_253F83E50;
  if (!qword_253F83E50)
  {
    result = MEMORY[0x22E303264](&unk_22CB9EDFC, &type metadata for DataSource.Logo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83E50);
  }
  return result;
}

unint64_t sub_22CB6ABD4()
{
  unint64_t result;

  result = qword_253F83E40;
  if (!qword_253F83E40)
  {
    result = MEMORY[0x22E303264](&unk_22CB9ED1C, &type metadata for DataSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83E40);
  }
  return result;
}

unint64_t sub_22CB6AC1C()
{
  unint64_t result;

  result = qword_253F83E38;
  if (!qword_253F83E38)
  {
    result = MEMORY[0x22E303264](&unk_22CB9ED44, &type metadata for DataSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83E38);
  }
  return result;
}

uint64_t sub_22CB6AC60(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1869049708 && a2 == 0xE400000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_22CB6ADAC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746867696CLL && a2 == 0xE500000000000000;
  if (v2 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1802658148 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_22CB6AE84(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_22CB4E0E4(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_22CB6AED0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_22CB4E0E4(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_22CB6AF0C(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v5;

  sub_22CB6AF48(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_22CB6AF48(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    sub_22CB4E0E4(255, a3, a4);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t StockSearchResult.stocks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StockSearchResult.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for StockSearchResult() + 20);
  return sub_22CB62E94(v3, a1);
}

uint64_t type metadata accessor for StockSearchResult()
{
  uint64_t result;

  result = qword_255C35100;
  if (!qword_255C35100)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t getEnumTagSinglePayload for StockSearchResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB6B028(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DataSource(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for StockSearchResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_22CB6B0B0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DataSource(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_22CB6B124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  int v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  int v56;
  int v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  char v86[9];

  v4 = sub_22CB9C664();
  v82 = *(_QWORD *)(v4 - 8);
  v83 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v79 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_22CB9C544();
  v80 = *(_QWORD *)(v6 - 8);
  v81 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v78 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB5F9BC(0, &qword_255C35110, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v77 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v76 = (char *)&v55 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v55 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v55 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v55 - v20;
  v22 = sub_22CB9C838();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v55 - v27;
  v75 = sub_22CB9CB98();
  v74 = v29;
  v73 = sub_22CB9CAD8();
  v72 = v30;
  v71 = sub_22CB9CB68();
  v70 = v31;
  v69 = sub_22CB9CB2C();
  v68 = v32;
  v67 = sub_22CB9CB80();
  v66 = v33;
  v65 = sub_22CB9CB20();
  v64 = v34;
  v63 = sub_22CB9CB74();
  v62 = v35;
  v61 = sub_22CB9CAE4();
  v60 = v36;
  sub_22CB9CB08();
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v28, v22);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v26, v22);
  if (v37 == *MEMORY[0x24BEB1608])
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v28, v22);
    v59 = 0;
    goto LABEL_10;
  }
  v38 = v37;
  if (v37 == *MEMORY[0x24BEB15F8])
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v28, v22);
    v39 = 1;
LABEL_9:
    v59 = v39;
    goto LABEL_10;
  }
  if (v37 == *MEMORY[0x24BEB1600])
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v28, v22);
    v39 = 2;
    goto LABEL_9;
  }
  if (v37 == *MEMORY[0x24BEB1610])
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v28, v22);
    v39 = 3;
    goto LABEL_9;
  }
  v58 = v16;
  v53 = *MEMORY[0x24BEB15F0];
  v54 = *(void (**)(char *, uint64_t))(v23 + 8);
  v54(v28, v22);
  if (v38 == v53)
  {
    v59 = 4;
  }
  else
  {
    v54(v26, v22);
    v59 = 0;
  }
  v16 = v58;
LABEL_10:
  v40 = (uint64_t)v21;
  sub_22CB9CAF0();
  v41 = (uint64_t)v19;
  sub_22CB9CAFC();
  sub_22CB9CB44();
  sub_22CB6BDB0(MEMORY[0x24BEB1B08], v86);
  LODWORD(v58) = v86[0];
  sub_22CB6BDB0(MEMORY[0x24BEB1B58], (char *)&v85);
  v57 = v85;
  sub_22CB6BDB0(MEMORY[0x24BEB1B50], (char *)&v84);
  v56 = v84;
  v55 = sub_22CB9CB8C();
  v43 = v42;
  v44 = (uint64_t)v76;
  sub_22CB9CB5C();
  v45 = (uint64_t)v77;
  sub_22CB9CB38();
  v46 = v78;
  sub_22CB9CB50();
  v47 = v79;
  sub_22CB9CB14();
  v48 = sub_22CB9CBA4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(a1, v48);
  *(_QWORD *)a2 = v75;
  *(_BYTE *)(a2 + 8) = v74 & 1;
  *(_QWORD *)(a2 + 16) = v73;
  *(_BYTE *)(a2 + 24) = v72 & 1;
  *(_QWORD *)(a2 + 32) = v71;
  *(_BYTE *)(a2 + 40) = v70 & 1;
  *(_QWORD *)(a2 + 48) = v69;
  *(_BYTE *)(a2 + 56) = v68 & 1;
  *(_QWORD *)(a2 + 64) = v67;
  *(_BYTE *)(a2 + 72) = v66 & 1;
  *(_QWORD *)(a2 + 80) = v65;
  *(_BYTE *)(a2 + 88) = v64 & 1;
  *(_QWORD *)(a2 + 96) = v63;
  *(_BYTE *)(a2 + 104) = v62 & 1;
  v49 = v60;
  *(_QWORD *)(a2 + 112) = v61;
  *(_QWORD *)(a2 + 120) = v49;
  *(_BYTE *)(a2 + 128) = v59;
  v50 = (int *)type metadata accessor for Quote();
  sub_22CB6F308(v40, a2 + v50[13]);
  sub_22CB6F308(v41, a2 + v50[14]);
  sub_22CB6F308((uint64_t)v16, a2 + v50[15]);
  *(_BYTE *)(a2 + v50[16]) = (_BYTE)v58;
  *(_BYTE *)(a2 + v50[17]) = v57;
  *(_BYTE *)(a2 + v50[18]) = v56;
  v51 = a2 + v50[19];
  *(_QWORD *)v51 = v55;
  *(_BYTE *)(v51 + 8) = v43 & 1;
  sub_22CB6F308(v44, a2 + v50[20]);
  sub_22CB6F308(v45, a2 + v50[21]);
  (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(a2 + v50[22], v46, v81);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v82 + 32))(a2 + v50[23], v47, v83);
}

uint64_t Quote.Source.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22CB6B75C
                                                            + 4 * asc_22CB9EF58[*v0]))(0x44636972656E6567, 0xEE00646579616C65);
}

uint64_t sub_22CB6B75C()
{
  return 0x655271616473616ELL;
}

uint64_t sub_22CB6B780()
{
  return 0x6C6165526573796ELL;
}

unint64_t sub_22CB6B7A0()
{
  return 0xD000000000000010;
}

uint64_t sub_22CB6B7BC()
{
  return 0x52544B4D6573796ELL;
}

uint64_t sub_22CB6B7F4()
{
  return 0x6E776F6E6B6E75;
}

uint64_t Quote.Source.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22CB6B848 + 4 * byte_22CB9EF5F[*v0]))(0x44636972656E6567, 0xEE00646579616C65);
}

uint64_t sub_22CB6B848()
{
  return 0x655271616473616ELL;
}

uint64_t sub_22CB6B86C()
{
  return 0x6C6165526573796ELL;
}

unint64_t sub_22CB6B88C()
{
  return 0xD000000000000010;
}

uint64_t sub_22CB6B8A8()
{
  return 0x52544B4D6573796ELL;
}

uint64_t sub_22CB6B8E0()
{
  return 0x6E776F6E6B6E75;
}

StocksKit::Quote::Source_optional __swiftcall Quote.Source.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  StocksKit::Quote::Source_optional result;
  char v5;

  v2 = v1;
  v3 = sub_22CB9D39C();
  result.value = swift_bridgeObjectRelease();
  v5 = 7;
  if (v3 < 7)
    v5 = v3;
  *v2 = v5;
  return result;
}

void sub_22CB6B950()
{
  char *v0;

  sub_22CB99BF4(0, *v0);
}

void sub_22CB6B95C(uint64_t a1)
{
  char *v1;

  sub_22CB88D04(a1, *v1);
}

void sub_22CB6B964(uint64_t a1)
{
  char *v1;

  sub_22CB99BF4(a1, *v1);
}

StocksKit::Quote::Source_optional sub_22CB6B96C(Swift::String *a1)
{
  return Quote.Source.init(rawValue:)(*a1);
}

uint64_t sub_22CB6B978@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Quote.Source.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_22CB6B99C(char *a1)
{
  sub_22CB72364(*a1);
}

uint64_t sub_22CB6B9A8()
{
  sub_22CB71B50();
  return sub_22CB9D078();
}

uint64_t sub_22CB6BA04()
{
  sub_22CB71B50();
  return sub_22CB9D06C();
}

uint64_t Quote.price.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Quote.priceChange.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t Quote.marketCapitalization.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t Quote.afterHoursPrice.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t Quote.afterHoursPriceChange.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t Quote.preMarketPrice.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t Quote.preMarketPriceChange.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t Quote.currencyCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

void Quote.exchangeStatus.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 128);
}

uint64_t Quote.exchangeOpen.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Quote() + 52);
  return sub_22CB6BB4C(v3, a1);
}

uint64_t type metadata accessor for Quote()
{
  uint64_t result;

  result = qword_255C35170;
  if (!qword_255C35170)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_22CB6BB4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Quote.exchangeClose.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Quote() + 56);
  return sub_22CB6BB4C(v3, a1);
}

uint64_t Quote.exchangeNextOpen.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Quote() + 60);
  return sub_22CB6BB4C(v3, a1);
}

uint64_t Quote.priceSource.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Quote();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 64));
  return result;
}

uint64_t Quote.afterHoursSource.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Quote();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 68));
  return result;
}

uint64_t Quote.preMarketSource.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Quote();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 72));
  return result;
}

uint64_t Quote.preferredRefreshInterval.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Quote() + 76));
}

uint64_t Quote.earningsStartDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Quote() + 80);
  return sub_22CB6BB4C(v3, a1);
}

uint64_t Quote.earningsEndDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Quote() + 84);
  return sub_22CB6BB4C(v3, a1);
}

uint64_t Quote.dateLastRefreshed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Quote() + 88);
  v4 = sub_22CB9C544();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Quote.marketTimeZone.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Quote() + 92);
  v4 = sub_22CB9C664();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_22CB6BDB0@<X0>(void (*a1)(uint64_t)@<X1>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  char v19;
  void (*v20)(char *, char *, uint64_t);
  int v21;
  int v22;
  void (*v24)(char *, uint64_t);
  void (*v25)(char *, uint64_t);
  void (*v26)(char *, uint64_t);
  int v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;

  sub_22CB5F9BC(0, &qword_255C351B0, (uint64_t (*)(uint64_t))MEMORY[0x24BEB1598], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v29 - v5;
  v7 = sub_22CB9C820();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v29 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v29 - v16;
  a1(v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    result = sub_22CB60B48((uint64_t)v6, &qword_255C351B0, (uint64_t (*)(uint64_t))MEMORY[0x24BEB1598]);
    v19 = 7;
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v17, v6, v7);
  v20 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v20(v14, v17, v7);
  v20(v11, v14, v7);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v21 == *MEMORY[0x24BEB1568])
  {
    v19 = 0;
LABEL_13:
    v24 = *(void (**)(char *, uint64_t))(v8 + 8);
    v24(v14, v7);
    result = ((uint64_t (*)(char *, uint64_t))v24)(v17, v7);
    goto LABEL_14;
  }
  v22 = v21;
  if (v21 == *MEMORY[0x24BEB1570] || v21 == *MEMORY[0x24BEB1560])
  {
    v19 = 1;
    goto LABEL_13;
  }
  if (v21 == *MEMORY[0x24BEB1588])
  {
    v19 = 3;
    goto LABEL_13;
  }
  if (v21 == *MEMORY[0x24BEB1580])
  {
    v25 = *(void (**)(char *, uint64_t))(v8 + 8);
    v25(v14, v7);
    result = ((uint64_t (*)(char *, uint64_t))v25)(v17, v7);
    v19 = 4;
  }
  else if (v21 == *MEMORY[0x24BEB1578])
  {
    v26 = *(void (**)(char *, uint64_t))(v8 + 8);
    v26(v14, v7);
    result = ((uint64_t (*)(char *, uint64_t))v26)(v17, v7);
    v19 = 5;
  }
  else
  {
    v27 = *MEMORY[0x24BEB1590];
    v28 = *(void (**)(char *, uint64_t))(v8 + 8);
    v28(v14, v7);
    if (v22 != v27)
      v28(v11, v7);
    result = ((uint64_t (*)(char *, uint64_t))v28)(v17, v7);
    v19 = 6;
  }
LABEL_14:
  *a2 = v19;
  return result;
}

uint64_t sub_22CB6C078(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22CB6C0A8 + 4 * byte_22CB9EF66[a1]))(0x6563697270, 0xE500000000000000);
}

uint64_t sub_22CB6C0A8()
{
  return 0x6168436563697270;
}

unint64_t sub_22CB6C0CC()
{
  return 0xD000000000000014;
}

uint64_t sub_22CB6C298()
{
  return 0x695474656B72616DLL;
}

uint64_t sub_22CB6C2BC()
{
  unsigned __int8 *v0;

  return sub_22CB6C078(*v0);
}

uint64_t sub_22CB6C2C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB71290(a1, a2);
  *a3 = result;
  return result;
}

void sub_22CB6C2E8(_BYTE *a1@<X8>)
{
  *a1 = 20;
}

uint64_t sub_22CB6C2F4()
{
  sub_22CB6F19C();
  return sub_22CB9D654();
}

uint64_t sub_22CB6C31C()
{
  sub_22CB6F19C();
  return sub_22CB9D660();
}

uint64_t Quote.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  _QWORD v12[2];
  char v13;
  char v14;

  v3 = v1;
  sub_22CB6F268(0, &qword_255C35118, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB6F19C();
  sub_22CB9D57C();
  v14 = 0;
  sub_22CB9D444();
  if (!v2)
  {
    v14 = 1;
    sub_22CB9D444();
    v14 = 2;
    sub_22CB9D444();
    v14 = 3;
    sub_22CB9D444();
    v14 = 4;
    sub_22CB9D444();
    v14 = 5;
    sub_22CB9D444();
    v14 = 6;
    sub_22CB9D444();
    v14 = 7;
    sub_22CB9D438();
    v14 = *(_BYTE *)(v3 + 128);
    v13 = 8;
    sub_22CB6F1E0();
    sub_22CB9D480();
    v10 = (int *)type metadata accessor for Quote();
    v14 = 9;
    sub_22CB9C544();
    sub_22CB50668(&qword_253F837D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_22CB9D45C();
    v14 = 10;
    sub_22CB9D45C();
    v14 = 11;
    sub_22CB9D45C();
    v14 = *(_BYTE *)(v3 + v10[16]);
    v13 = 12;
    v12[1] = sub_22CB6F224();
    sub_22CB9D45C();
    v14 = *(_BYTE *)(v3 + v10[17]);
    v13 = 13;
    sub_22CB9D45C();
    v14 = *(_BYTE *)(v3 + v10[18]);
    v13 = 14;
    sub_22CB9D45C();
    v14 = 15;
    sub_22CB9D444();
    v14 = 16;
    sub_22CB9D45C();
    v14 = 17;
    sub_22CB9D45C();
    v14 = 18;
    sub_22CB9D480();
    v14 = 19;
    sub_22CB9C664();
    sub_22CB50668(&qword_255C35138, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF528]);
    sub_22CB9D480();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Quote.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  _QWORD *v60;
  int *v61;
  uint64_t *v62;
  char v63;
  char v64;

  v51 = a2;
  v49 = sub_22CB9C664();
  v56 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v52 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22CB9C544();
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v50 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB5F9BC(0, &qword_255C35110, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v55 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v47 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v47 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v47 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v47 - v19;
  sub_22CB6F268(0, &qword_255C35140, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v57 = v21;
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v47 - v23;
  v61 = (int *)type metadata accessor for Quote();
  MEMORY[0x24BDAC7A8](v61);
  v62 = (uint64_t *)((char *)&v47 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = a1[3];
  v60 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v26);
  sub_22CB6F19C();
  v58 = v24;
  v27 = (uint64_t)v59;
  sub_22CB9D570();
  if (v27)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
  v28 = (uint64_t)v20;
  v59 = v18;
  v48 = v15;
  v29 = v22;
  v31 = (uint64_t)v55;
  v30 = v56;
  v64 = 0;
  v32 = sub_22CB9D3CC();
  v33 = v62;
  *v62 = v32;
  *((_BYTE *)v33 + 8) = v34 & 1;
  v64 = 1;
  v33[2] = sub_22CB9D3CC();
  *((_BYTE *)v33 + 24) = v35 & 1;
  v64 = 2;
  v33[4] = sub_22CB9D3CC();
  *((_BYTE *)v33 + 40) = v36 & 1;
  v64 = 3;
  v33[6] = sub_22CB9D3CC();
  *((_BYTE *)v33 + 56) = v37 & 1;
  v64 = 4;
  v33[8] = sub_22CB9D3CC();
  *((_BYTE *)v33 + 72) = v38 & 1;
  v64 = 5;
  v33[10] = sub_22CB9D3CC();
  *((_BYTE *)v33 + 88) = v39 & 1;
  v64 = 6;
  v33[12] = sub_22CB9D3CC();
  *((_BYTE *)v33 + 104) = v40 & 1;
  v64 = 7;
  v33[14] = sub_22CB9D3C0();
  v33[15] = v41;
  v63 = 8;
  sub_22CB6F2C4();
  sub_22CB9D408();
  *((_BYTE *)v33 + 128) = v64;
  v64 = 9;
  sub_22CB50668(&qword_253F834C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  sub_22CB9D3E4();
  sub_22CB6F308(v28, (uint64_t)v62 + v61[13]);
  v64 = 10;
  sub_22CB9D3E4();
  sub_22CB6F308((uint64_t)v59, (uint64_t)v62 + v61[14]);
  v64 = 11;
  sub_22CB9D3E4();
  sub_22CB6F308((uint64_t)v48, (uint64_t)v62 + v61[15]);
  v63 = 12;
  sub_22CB6F364();
  sub_22CB9D3E4();
  *((_BYTE *)v62 + v61[16]) = v64;
  v63 = 13;
  sub_22CB9D3E4();
  *((_BYTE *)v62 + v61[17]) = v64;
  v63 = 14;
  sub_22CB9D3E4();
  *((_BYTE *)v62 + v61[18]) = v64;
  v64 = 15;
  v42 = sub_22CB9D3CC();
  v43 = (char *)v62 + v61[19];
  *(_QWORD *)v43 = v42;
  v43[8] = v44 & 1;
  v64 = 16;
  sub_22CB9D3E4();
  sub_22CB6F308((uint64_t)v12, (uint64_t)v62 + v61[20]);
  v64 = 17;
  sub_22CB9D3E4();
  sub_22CB6F308(v31, (uint64_t)v62 + v61[21]);
  v64 = 18;
  sub_22CB9D408();
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))((char *)v62 + v61[22], v50, v54);
  v64 = 19;
  sub_22CB50668(&qword_255C35158, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF540]);
  sub_22CB9D408();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v58, v57);
  v45 = (uint64_t)v62;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))((char *)v62 + v61[23], v52, v49);
  sub_22CB6F3A8(v45, v51);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
  return sub_22CB6257C(v45, (uint64_t (*)(_QWORD))type metadata accessor for Quote);
}

uint64_t sub_22CB6D288@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Quote.init(from:)(a1, a2);
}

uint64_t sub_22CB6D29C(_QWORD *a1)
{
  return Quote.encode(to:)(a1);
}

void Quote.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;

  sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v45 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v44 = (uint64_t)&v43 - v2;
  v47 = 0;
  v48 = 0xE000000000000000;
  v3 = MEMORY[0x24BEE13C8];
  v4 = MEMORY[0x24BEE1448];
  if ((v0[1] & 1) == 0)
  {
    v5 = *v0;
    sub_22CB5F9BC(0, &qword_255C350A8, (uint64_t (*)(uint64_t))sub_22CB66310, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_22CB9F380;
    *(_QWORD *)(v6 + 56) = v3;
    *(_QWORD *)(v6 + 64) = v4;
    *(_QWORD *)(v6 + 32) = v5;
    sub_22CB9D030();
  }
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  v47 = 0x2865746F7551;
  v48 = 0xE600000000000000;
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  v7 = v47;
  v8 = v48;
  v47 = 0;
  v48 = 0xE000000000000000;
  if ((v0[3] & 1) == 0)
  {
    v9 = v0[2];
    sub_22CB5F9BC(0, &qword_255C350A8, (uint64_t (*)(uint64_t))sub_22CB66310, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_22CB9F380;
    *(_QWORD *)(v10 + 56) = v3;
    *(_QWORD *)(v10 + 64) = v4;
    *(_QWORD *)(v10 + 32) = v9;
    sub_22CB9D030();
  }
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  v47 = v7;
  v48 = v8;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v47;
  v12 = v48;
  v47 = 0;
  v48 = 0xE000000000000000;
  if ((v0[5] & 1) == 0)
  {
    v13 = v0[4];
    sub_22CB5F9BC(0, &qword_255C350A8, (uint64_t (*)(uint64_t))sub_22CB66310, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_22CB9F380;
    *(_QWORD *)(v14 + 56) = v3;
    *(_QWORD *)(v14 + 64) = v4;
    *(_QWORD *)(v14 + 32) = v13;
    sub_22CB9D030();
  }
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  v47 = v11;
  v48 = v12;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = v47;
  v16 = v48;
  v47 = 0;
  v48 = 0xE000000000000000;
  if ((v0[7] & 1) == 0)
  {
    v17 = v0[6];
    sub_22CB5F9BC(0, &qword_255C350A8, (uint64_t (*)(uint64_t))sub_22CB66310, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_22CB9F380;
    *(_QWORD *)(v18 + 56) = v3;
    *(_QWORD *)(v18 + 64) = v4;
    *(_QWORD *)(v18 + 32) = v17;
    sub_22CB9D030();
  }
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  v47 = v15;
  v48 = v16;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = v47;
  v20 = v48;
  v47 = 0;
  v48 = 0xE000000000000000;
  if ((v0[9] & 1) == 0)
  {
    v21 = v0[8];
    sub_22CB5F9BC(0, &qword_255C350A8, (uint64_t (*)(uint64_t))sub_22CB66310, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_22CB9F380;
    *(_QWORD *)(v22 + 56) = v3;
    *(_QWORD *)(v22 + 64) = v4;
    *(_QWORD *)(v22 + 32) = v21;
    sub_22CB9D030();
  }
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  v47 = v19;
  v48 = v20;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = v47;
  v24 = v48;
  v47 = 0;
  v48 = 0xE000000000000000;
  if ((v0[11] & 1) == 0)
  {
    v25 = v0[10];
    sub_22CB5F9BC(0, &qword_255C350A8, (uint64_t (*)(uint64_t))sub_22CB66310, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_22CB9F380;
    *(_QWORD *)(v26 + 56) = v3;
    *(_QWORD *)(v26 + 64) = v4;
    *(_QWORD *)(v26 + 32) = v25;
    sub_22CB9D030();
  }
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  v47 = v23;
  v48 = v24;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = v47;
  v28 = v48;
  v47 = 0;
  v48 = 0xE000000000000000;
  if ((v0[13] & 1) == 0)
  {
    v29 = v0[12];
    sub_22CB5F9BC(0, &qword_255C350A8, (uint64_t (*)(uint64_t))sub_22CB66310, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_22CB9F380;
    *(_QWORD *)(v30 + 56) = v3;
    *(_QWORD *)(v30 + 64) = v4;
    *(_QWORD *)(v30 + 32) = v29;
    sub_22CB9D030();
  }
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  v47 = v27;
  v48 = v28;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = v47;
  v32 = v48;
  v47 = 0;
  v48 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  v47 = v31;
  v48 = v32;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = v47;
  v34 = v48;
  v47 = 46;
  v48 = 0xE100000000000000;
  v46 = *((_BYTE *)v0 + 128);
  sub_22CB9D03C();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  v47 = v33;
  v48 = v34;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v35 = v47;
  v36 = v48;
  v47 = 46;
  v48 = 0xE100000000000000;
  v37 = (int *)type metadata accessor for Quote();
  v38 = v44;
  sub_22CB6BB4C((uint64_t)v0 + v37[13], v44);
  sub_22CB9D03C();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  v47 = v35;
  v48 = v36;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v39 = v47;
  v40 = v48;
  v47 = 46;
  v48 = 0xE100000000000000;
  sub_22CB6BB4C((uint64_t)v0 + v37[14], v38);
  sub_22CB9D03C();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  v47 = v39;
  v48 = v40;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41 = v47;
  v42 = v48;
  v47 = 46;
  v48 = 0xE100000000000000;
  sub_22CB6BB4C((uint64_t)v0 + v37[15], v38);
  sub_22CB9D03C();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  v47 = v41;
  v48 = v42;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47 = 46;
  v48 = 0xE100000000000000;
  __asm { BR              X10 }
}

uint64_t sub_22CB6DB1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  *(_QWORD *)(v4 - 112) = v1;
  *(_QWORD *)(v4 - 104) = v3;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 - 112) = 46;
  *(_QWORD *)(v4 - 104) = 0xE100000000000000;
  return ((uint64_t (*)(uint64_t))((char *)sub_22CB6DC74
                                          + 4 * byte_22CB9EF82[*(unsigned __int8 *)(v0 + *(int *)(v2 + 68))]))(7104878);
}

uint64_t sub_22CB6DC74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  *(_QWORD *)(v4 - 112) = v1;
  *(_QWORD *)(v4 - 104) = v3;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 - 112) = 46;
  *(_QWORD *)(v4 - 104) = 0xE100000000000000;
  return ((uint64_t (*)(uint64_t))((char *)sub_22CB6DDC8
                                          + 4 * byte_22CB9EF8A[*(unsigned __int8 *)(v0 + *(int *)(v2 + 72))]))(7104878);
}

uint64_t sub_22CB6DDC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  *(_QWORD *)(v5 - 112) = v2;
  *(_QWORD *)(v5 - 104) = v4;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v5 - 112);
  v7 = *(_QWORD *)(v5 - 104);
  *(_QWORD *)(v5 - 112) = 0;
  *(_QWORD *)(v5 - 104) = 0xE000000000000000;
  v8 = (uint64_t *)(v0 + *(int *)(v3 + 76));
  if ((v8[1] & 1) == 0)
  {
    v9 = *v8;
    sub_22CB5F9BC(0, &qword_255C350A8, (uint64_t (*)(uint64_t))sub_22CB66310, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = *(_OWORD *)(v1 + 896);
    *(_QWORD *)(v10 + 56) = MEMORY[0x24BEE13C8];
    *(_QWORD *)(v10 + 64) = MEMORY[0x24BEE1448];
    *(_QWORD *)(v10 + 32) = v9;
    sub_22CB9D030();
  }
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  *(_QWORD *)(v5 - 112) = v6;
  *(_QWORD *)(v5 - 104) = v7;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v5 - 112);
  v11 = *(_QWORD *)(v5 - 104);
  *(_QWORD *)(v5 - 112) = 46;
  *(_QWORD *)(v5 - 104) = 0xE100000000000000;
  v13 = v0 + *(int *)(v3 + 80);
  v14 = v0;
  v15 = v3;
  v16 = *(_QWORD *)(v5 - 136);
  sub_22CB6BB4C(v13, v16);
  sub_22CB9D03C();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  *(_QWORD *)(v5 - 112) = v12;
  *(_QWORD *)(v5 - 104) = v11;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v5 - 112);
  v17 = *(_QWORD *)(v5 - 104);
  *(_QWORD *)(v5 - 112) = 46;
  *(_QWORD *)(v5 - 104) = 0xE100000000000000;
  sub_22CB6BB4C(v14 + *(int *)(v15 + 84), v16);
  sub_22CB9D03C();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  sub_22CB9D054();
  *(_QWORD *)(v5 - 112) = v18;
  *(_QWORD *)(v5 - 104) = v17;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v5 - 112);
  v19 = *(_QWORD *)(v5 - 104);
  sub_22CB9C544();
  sub_22CB50668((unint64_t *)&qword_253F837E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
  *(_QWORD *)(v5 - 112) = sub_22CB9D498();
  *(_QWORD *)(v5 - 104) = v21;
  sub_22CB9D054();
  *(_QWORD *)(v5 - 112) = v20;
  *(_QWORD *)(v5 - 104) = v19;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(v5 - 112);
  v22 = *(_QWORD *)(v5 - 104);
  sub_22CB9C664();
  sub_22CB50668(&qword_255C35160, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF548]);
  sub_22CB9D498();
  *(_QWORD *)(v5 - 112) = v23;
  *(_QWORD *)(v5 - 104) = v22;
  swift_bridgeObjectRetain();
  sub_22CB9D054();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return *(_QWORD *)(v5 - 112);
}

uint64_t _s9StocksKit5QuoteV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  unsigned int (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v69)(uint64_t);
  _BYTE *v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t);
  int *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t);
  uint64_t (*v77)(uint64_t);
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  unsigned int (*v81)(uint64_t, uint64_t, uint64_t);
  void (*v82)(_BYTE *, uint64_t);
  uint64_t (*v83)(uint64_t);
  int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t);
  uint64_t v91;
  _BYTE *v92;
  uint64_t (*v93)(uint64_t);
  void (*v94)(_BYTE *, uint64_t);
  uint64_t v95;
  int v96;
  int v97;
  char v98;
  uint64_t v99;
  int v100;
  int v101;
  char v102;
  uint64_t v103;
  int v104;
  int v105;
  char v106;
  uint64_t v107;
  double *v108;
  char v109;
  double *v110;
  int v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t);
  uint64_t (*v119)(uint64_t);
  uint64_t v120;
  _BYTE *v121;
  uint64_t (*v122)(uint64_t);
  uint64_t v123;
  char v124;
  void (*v125)(_BYTE *, uint64_t);
  int *v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(uint64_t);
  uint64_t (*v133)(uint64_t);
  uint64_t v134;
  _BYTE *v135;
  uint64_t (*v136)(uint64_t);
  uint64_t v137;
  char v138;
  void (*v139)(_BYTE *, uint64_t);
  _BYTE v140[12];
  int v141;
  unsigned int (*v142)(uint64_t, uint64_t, uint64_t);
  int *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  _BYTE *v155;
  _BYTE *v156;
  uint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  uint64_t v160;

  v4 = sub_22CB9C544();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  v160 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v158 = &v140[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_22CB71B94();
  v159 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v154 = &v140[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = MEMORY[0x24BDAC7A8](v8);
  v155 = &v140[-v11];
  v12 = MEMORY[0x24BDAC7A8](v10);
  v156 = &v140[-v13];
  v14 = MEMORY[0x24BDAC7A8](v12);
  v157 = (uint64_t)&v140[-v15];
  MEMORY[0x24BDAC7A8](v14);
  v17 = &v140[-v16];
  sub_22CB5F9BC(0, &qword_255C35110, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v21 = MEMORY[0x24BDAC7A8](v20);
  MEMORY[0x24BDAC7A8](v21);
  v23 = MEMORY[0x24BDAC7A8](&v140[-v22]);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v30 = &v140[-v29];
  v31 = MEMORY[0x24BDAC7A8](v28);
  v33 = &v140[-v32];
  v34 = MEMORY[0x24BDAC7A8](v31);
  v36 = &v140[-v35];
  v37 = MEMORY[0x24BDAC7A8](v34);
  v39 = &v140[-v38];
  v40 = MEMORY[0x24BDAC7A8](v37);
  v42 = &v140[-v41];
  v43 = MEMORY[0x24BDAC7A8](v40);
  v53 = &v140[-v52];
  v54 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      goto LABEL_72;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v54 = 1;
    if ((v54 & 1) != 0)
      goto LABEL_72;
  }
  v55 = *(_BYTE *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      goto LABEL_72;
  }
  else
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
      v55 = 1;
    if ((v55 & 1) != 0)
      goto LABEL_72;
  }
  v56 = *(_BYTE *)(a2 + 40);
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 40))
      goto LABEL_72;
  }
  else
  {
    if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
      v56 = 1;
    if ((v56 & 1) != 0)
      goto LABEL_72;
  }
  v57 = *(_BYTE *)(a2 + 56);
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 56))
      goto LABEL_72;
  }
  else
  {
    if (*(double *)(a1 + 48) != *(double *)(a2 + 48))
      v57 = 1;
    if ((v57 & 1) != 0)
      goto LABEL_72;
  }
  v58 = *(_BYTE *)(a2 + 72);
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 72))
      goto LABEL_72;
  }
  else
  {
    if (*(double *)(a1 + 64) != *(double *)(a2 + 64))
      v58 = 1;
    if ((v58 & 1) != 0)
      goto LABEL_72;
  }
  v59 = *(_BYTE *)(a2 + 88);
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 88))
      goto LABEL_72;
  }
  else
  {
    if (*(double *)(a1 + 80) != *(double *)(a2 + 80))
      v59 = 1;
    if ((v59 & 1) != 0)
      goto LABEL_72;
  }
  v60 = *(_BYTE *)(a2 + 104);
  if ((*(_BYTE *)(a1 + 104) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 104))
      goto LABEL_72;
  }
  else
  {
    if (*(double *)(a1 + 96) != *(double *)(a2 + 96))
      v60 = 1;
    if ((v60 & 1) != 0)
      goto LABEL_72;
  }
  v61 = *(_QWORD *)(a1 + 120);
  v62 = *(_QWORD *)(a2 + 120);
  if (!v61)
  {
    v152 = v48;
    v153 = v47;
    v150 = v44;
    v151 = (_BYTE *)v46;
    v147 = v43;
    v148 = v45;
    v145 = v49;
    v146 = v51;
    v149 = v50;
    if (v62)
      goto LABEL_72;
    goto LABEL_50;
  }
  if (!v62)
    goto LABEL_72;
  v152 = v48;
  v153 = v47;
  v150 = v44;
  v151 = (_BYTE *)v46;
  v147 = v43;
  v148 = v45;
  v145 = v49;
  v146 = v51;
  v149 = v50;
  if (*(_QWORD *)(a1 + 112) == *(_QWORD *)(a2 + 112) && v61 == v62 || (v63 = sub_22CB9D4BC(), v64 = 0, (v63 & 1) != 0))
  {
LABEL_50:
    sub_22CB725CC(*(_BYTE *)(a1 + 128));
    if ((v65 & 1) == 0)
      goto LABEL_72;
    v143 = (int *)type metadata accessor for Quote();
    sub_22CB6BB4C(a1 + v143[13], (uint64_t)v53);
    sub_22CB6BB4C(a2 + v143[13], (uint64_t)v42);
    v144 = (uint64_t)&v17[*(int *)(v159 + 48)];
    sub_22CB6BB4C((uint64_t)v53, (uint64_t)v17);
    sub_22CB6BB4C((uint64_t)v42, v144);
    v142 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v160 + 48);
    if (v142((uint64_t)v17, 1, v4) == 1)
    {
      v66 = (uint64_t)v42;
      v67 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
      sub_22CB60B48(v66, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
      sub_22CB60B48((uint64_t)v53, &qword_255C35110, v67);
      v68 = v142;
      if (v142(v144, 1, v4) == 1)
      {
        sub_22CB60B48((uint64_t)v17, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
        goto LABEL_58;
      }
    }
    else
    {
      sub_22CB6BB4C((uint64_t)v17, (uint64_t)v39);
      if (v142(v144, 1, v4) != 1)
      {
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v160 + 32))(v158, v144, v4);
        sub_22CB50668(&qword_255C351A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
        v141 = sub_22CB9D00C();
        v144 = *(_QWORD *)(v160 + 8);
        ((void (*)(_BYTE *, uint64_t))v144)(v158, v4);
        v71 = (uint64_t)v42;
        v72 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
        sub_22CB60B48(v71, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
        sub_22CB60B48((uint64_t)v53, &qword_255C35110, v72);
        ((void (*)(_BYTE *, uint64_t))v144)(v39, v4);
        sub_22CB60B48((uint64_t)v17, &qword_255C35110, v72);
        v68 = v142;
        if ((v141 & 1) == 0)
          goto LABEL_72;
LABEL_58:
        v73 = v143;
        sub_22CB6BB4C(a1 + v143[14], (uint64_t)v36);
        sub_22CB6BB4C(a2 + v73[14], (uint64_t)v33);
        v74 = (_BYTE *)v157;
        v75 = v157 + *(int *)(v159 + 48);
        sub_22CB6BB4C((uint64_t)v36, v157);
        sub_22CB6BB4C((uint64_t)v33, v75);
        if (v68((uint64_t)v74, 1, v4) == 1)
        {
          v76 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
          sub_22CB60B48((uint64_t)v33, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
          sub_22CB60B48((uint64_t)v36, &qword_255C35110, v76);
          if (v68(v75, 1, v4) != 1)
            goto LABEL_70;
          sub_22CB60B48((uint64_t)v74, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
        }
        else
        {
          sub_22CB6BB4C((uint64_t)v74, (uint64_t)v30);
          if (v68(v75, 1, v4) == 1)
          {
            v77 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
            sub_22CB60B48((uint64_t)v33, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
            v78 = (uint64_t)v36;
            goto LABEL_69;
          }
          v79 = v160;
          v80 = v158;
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v160 + 32))(v158, v75, v4);
          sub_22CB50668(&qword_255C351A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
          LODWORD(v144) = sub_22CB9D00C();
          v81 = v68;
          v82 = *(void (**)(_BYTE *, uint64_t))(v79 + 8);
          v82(v80, v4);
          v83 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
          sub_22CB60B48((uint64_t)v33, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
          sub_22CB60B48((uint64_t)v36, &qword_255C35110, v83);
          v82(v30, v4);
          v68 = v81;
          sub_22CB60B48(v157, &qword_255C35110, v83);
          if ((v144 & 1) == 0)
            goto LABEL_72;
        }
        v84 = v143;
        v85 = v153;
        sub_22CB6BB4C(a1 + v143[15], v153);
        v86 = v152;
        sub_22CB6BB4C(a2 + v84[15], v152);
        v74 = v156;
        v87 = (uint64_t)&v156[*(int *)(v159 + 48)];
        v153 = v85;
        sub_22CB6BB4C(v85, (uint64_t)v156);
        v88 = v86;
        sub_22CB6BB4C(v86, v87);
        if (v68((uint64_t)v74, 1, v4) == 1)
        {
          v89 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
          sub_22CB60B48(v88, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
          sub_22CB60B48(v153, &qword_255C35110, v89);
          if (v68(v87, 1, v4) == 1)
          {
            sub_22CB60B48((uint64_t)v74, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
LABEL_75:
            v95 = v143[16];
            v96 = *(unsigned __int8 *)(a1 + v95);
            v97 = *(unsigned __int8 *)(a2 + v95);
            if (v96 == 7)
            {
              if (v97 != 7)
                goto LABEL_72;
            }
            else
            {
              if (v97 == 7)
                goto LABEL_72;
              sub_22CB72364(v96);
              if ((v98 & 1) == 0)
                goto LABEL_72;
            }
            v99 = v143[17];
            v100 = *(unsigned __int8 *)(a1 + v99);
            v101 = *(unsigned __int8 *)(a2 + v99);
            if (v100 == 7)
            {
              if (v101 != 7)
                goto LABEL_72;
            }
            else
            {
              if (v101 == 7)
                goto LABEL_72;
              sub_22CB72364(v100);
              if ((v102 & 1) == 0)
                goto LABEL_72;
            }
            v103 = v143[18];
            v104 = *(unsigned __int8 *)(a1 + v103);
            v105 = *(unsigned __int8 *)(a2 + v103);
            if (v104 == 7)
            {
              if (v105 != 7)
                goto LABEL_72;
            }
            else
            {
              if (v105 == 7)
                goto LABEL_72;
              sub_22CB72364(v104);
              if ((v106 & 1) == 0)
                goto LABEL_72;
            }
            v107 = v143[19];
            v108 = (double *)(a1 + v107);
            v109 = *(_BYTE *)(a1 + v107 + 8);
            v110 = (double *)(a2 + v107);
            v111 = *(unsigned __int8 *)(a2 + v107 + 8);
            if ((v109 & 1) != 0)
            {
              if (!v111)
                goto LABEL_72;
            }
            else
            {
              if (*v108 != *v110)
                LOBYTE(v111) = 1;
              if ((v111 & 1) != 0)
                goto LABEL_72;
            }
            v112 = v143;
            v113 = v150;
            sub_22CB6BB4C(a1 + v143[20], v150);
            v114 = v148;
            sub_22CB6BB4C(a2 + v112[20], v148);
            v115 = v155;
            v116 = (uint64_t)&v155[*(int *)(v159 + 48)];
            v150 = v113;
            sub_22CB6BB4C(v113, (uint64_t)v155);
            v117 = v114;
            sub_22CB6BB4C(v114, v116);
            if (v142((uint64_t)v115, 1, v4) == 1)
            {
              v118 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
              sub_22CB60B48(v114, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
              sub_22CB60B48(v150, &qword_255C35110, v118);
              if (v142(v116, 1, v4) == 1)
              {
                sub_22CB60B48((uint64_t)v155, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
LABEL_103:
                v126 = v143;
                v127 = v149;
                sub_22CB6BB4C(a1 + v143[21], v149);
                v128 = v146;
                sub_22CB6BB4C(a2 + v126[21], v146);
                v129 = v154;
                v130 = (uint64_t)&v154[*(int *)(v159 + 48)];
                v149 = v127;
                sub_22CB6BB4C(v127, (uint64_t)v154);
                v131 = v128;
                sub_22CB6BB4C(v128, v130);
                if (v142((uint64_t)v129, 1, v4) == 1)
                {
                  v132 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
                  sub_22CB60B48(v128, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
                  sub_22CB60B48(v149, &qword_255C35110, v132);
                  if (v142(v130, 1, v4) == 1)
                  {
                    sub_22CB60B48((uint64_t)v154, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
                    goto LABEL_110;
                  }
                  goto LABEL_108;
                }
                sub_22CB6BB4C((uint64_t)v154, v145);
                if (v142(v130, 1, v4) == 1)
                {
                  v133 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
                  sub_22CB60B48(v128, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
                  sub_22CB60B48(v149, &qword_255C35110, v133);
                  (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v145, v4);
LABEL_108:
                  v70 = v154;
                  goto LABEL_71;
                }
                v134 = v160;
                v135 = v158;
                (*(void (**)(_BYTE *, uint64_t, uint64_t))(v160 + 32))(v158, v130, v4);
                v136 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
                sub_22CB50668(&qword_255C351A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
                v137 = v145;
                v138 = sub_22CB9D00C();
                v139 = *(void (**)(_BYTE *, uint64_t))(v134 + 8);
                v139(v135, v4);
                sub_22CB60B48(v131, &qword_255C35110, v136);
                sub_22CB60B48(v149, &qword_255C35110, v136);
                v139((_BYTE *)v137, v4);
                sub_22CB60B48((uint64_t)v154, &qword_255C35110, v136);
                if ((v138 & 1) != 0)
                {
LABEL_110:
                  if ((sub_22CB9C514() & 1) != 0)
                  {
                    v64 = MEMORY[0x22E301ECC](a1 + v143[23], a2 + v143[23]);
                    return v64 & 1;
                  }
                }
LABEL_72:
                v64 = 0;
                return v64 & 1;
              }
            }
            else
            {
              sub_22CB6BB4C((uint64_t)v155, v147);
              if (v142(v116, 1, v4) != 1)
              {
                v120 = v160;
                v121 = v158;
                (*(void (**)(_BYTE *, uint64_t, uint64_t))(v160 + 32))(v158, v116, v4);
                v122 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
                sub_22CB50668(&qword_255C351A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
                v123 = v147;
                v124 = sub_22CB9D00C();
                v125 = *(void (**)(_BYTE *, uint64_t))(v120 + 8);
                v125(v121, v4);
                sub_22CB60B48(v117, &qword_255C35110, v122);
                sub_22CB60B48(v150, &qword_255C35110, v122);
                v125((_BYTE *)v123, v4);
                sub_22CB60B48((uint64_t)v155, &qword_255C35110, v122);
                if ((v124 & 1) == 0)
                  goto LABEL_72;
                goto LABEL_103;
              }
              v119 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
              sub_22CB60B48(v114, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
              sub_22CB60B48(v150, &qword_255C35110, v119);
              (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v147, v4);
            }
            v70 = v155;
LABEL_71:
            sub_22CB6257C((uint64_t)v70, (uint64_t (*)(_QWORD))sub_22CB71B94);
            goto LABEL_72;
          }
LABEL_70:
          v70 = v74;
          goto LABEL_71;
        }
        v30 = v151;
        sub_22CB6BB4C((uint64_t)v74, (uint64_t)v151);
        if (v68(v87, 1, v4) != 1)
        {
          v91 = v160;
          v92 = v158;
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v160 + 32))(v158, v87, v4);
          v93 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
          sub_22CB50668(&qword_255C351A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
          LODWORD(v157) = sub_22CB9D00C();
          v94 = *(void (**)(_BYTE *, uint64_t))(v91 + 8);
          v94(v92, v4);
          sub_22CB60B48(v88, &qword_255C35110, v93);
          sub_22CB60B48(v153, &qword_255C35110, v93);
          v94(v30, v4);
          sub_22CB60B48((uint64_t)v74, &qword_255C35110, v93);
          if ((v157 & 1) == 0)
            goto LABEL_72;
          goto LABEL_75;
        }
        v77 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
        sub_22CB60B48(v86, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
        v78 = v153;
LABEL_69:
        sub_22CB60B48(v78, &qword_255C35110, v77);
        (*(void (**)(_BYTE *, uint64_t))(v160 + 8))(v30, v4);
        goto LABEL_70;
      }
      v69 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
      sub_22CB60B48((uint64_t)v42, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
      sub_22CB60B48((uint64_t)v53, &qword_255C35110, v69);
      (*(void (**)(_BYTE *, uint64_t))(v160 + 8))(v39, v4);
    }
    v70 = v17;
    goto LABEL_71;
  }
  return v64 & 1;
}

unint64_t sub_22CB6F19C()
{
  unint64_t result;

  result = qword_255C35120;
  if (!qword_255C35120)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F330, &type metadata for Quote.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35120);
  }
  return result;
}

unint64_t sub_22CB6F1E0()
{
  unint64_t result;

  result = qword_255C35128;
  if (!qword_255C35128)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for ExchangeStatus, &type metadata for ExchangeStatus);
    atomic_store(result, (unint64_t *)&qword_255C35128);
  }
  return result;
}

unint64_t sub_22CB6F224()
{
  unint64_t result;

  result = qword_255C35130;
  if (!qword_255C35130)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for Quote.Source, &type metadata for Quote.Source);
    atomic_store(result, (unint64_t *)&qword_255C35130);
  }
  return result;
}

void sub_22CB6F268(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_22CB6F19C();
    v7 = a3(a1, &type metadata for Quote.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_22CB6F2C4()
{
  unint64_t result;

  result = qword_255C35148;
  if (!qword_255C35148)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for ExchangeStatus, &type metadata for ExchangeStatus);
    atomic_store(result, (unint64_t *)&qword_255C35148);
  }
  return result;
}

uint64_t sub_22CB6F308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_22CB6F364()
{
  unint64_t result;

  result = qword_255C35150;
  if (!qword_255C35150)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for Quote.Source, &type metadata for Quote.Source);
    atomic_store(result, (unint64_t *)&qword_255C35150);
  }
  return result;
}

uint64_t sub_22CB6F3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Quote();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_22CB6F3F0()
{
  unint64_t result;

  result = qword_255C35168;
  if (!qword_255C35168)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for Quote.Source, &type metadata for Quote.Source);
    atomic_store(result, (unint64_t *)&qword_255C35168);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Quote(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    *(_QWORD *)(a1 + 48) = a2[6];
    v7 = a2[8];
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_QWORD *)(a1 + 64) = v7;
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    v8 = a2[14];
    v9 = a2[15];
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    v10 = a3[13];
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    *(_QWORD *)(a1 + 112) = v8;
    *(_QWORD *)(a1 + 120) = v9;
    v13 = sub_22CB9C544();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v18 = a3[14];
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    if (v15((char *)a2 + v18, 1, v13))
    {
      sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v20, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v19, 0, 1, v13);
    }
    v22 = a3[15];
    v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    if (v15((char *)a2 + v22, 1, v13))
    {
      sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v23, v24, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v23, 0, 1, v13);
    }
    v26 = a3[17];
    *((_BYTE *)v4 + a3[16]) = *((_BYTE *)a2 + a3[16]);
    *((_BYTE *)v4 + v26) = *((_BYTE *)a2 + v26);
    v27 = a3[19];
    *((_BYTE *)v4 + a3[18]) = *((_BYTE *)a2 + a3[18]);
    v28 = (char *)v4 + v27;
    v29 = (uint64_t)a2 + v27;
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = *(_BYTE *)(v29 + 8);
    v30 = a3[20];
    v31 = (char *)v4 + v30;
    v32 = (char *)a2 + v30;
    if (v15((char *)a2 + v30, 1, v13))
    {
      sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v31, v32, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v31, 0, 1, v13);
    }
    v34 = a3[21];
    v35 = (char *)v4 + v34;
    v36 = (char *)a2 + v34;
    if (v15((char *)a2 + v34, 1, v13))
    {
      sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)v4 + a3[22], (uint64_t)a2 + a3[22], v13);
    }
    else
    {
      v38 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
      v38(v35, v36, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v35, 0, 1, v13);
      v38((char *)v4 + a3[22], (char *)a2 + a3[22], v13);
    }
    v39 = a3[23];
    v40 = (char *)v4 + v39;
    v41 = (uint64_t)a2 + v39;
    v42 = sub_22CB9C664();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  }
  return v4;
}

uint64_t destroy for Quote(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[13];
  v5 = sub_22CB9C544();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + a2[14];
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  v9 = a1 + a2[15];
  if (!v7(v9, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  v10 = a1 + a2[20];
  if (!v7(v10, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v5);
  v11 = a1 + a2[21];
  v12 = v7(v11, 1, v5);
  v13 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  if (!v12)
    v13(v11, v5);
  v13(a1 + a2[22], v5);
  v14 = a1 + a2[23];
  v15 = sub_22CB9C664();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
}

uint64_t initializeWithCopy for Quote(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  void (*v36)(void *, const void *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 112);
  v8 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v9 = a3[13];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  *(_QWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 120) = v8;
  v12 = sub_22CB9C544();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  if (v14(v11, 1, v12))
  {
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = a3[14];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  if (v14((const void *)(a2 + v16), 1, v12))
  {
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v17, v18, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  v20 = a3[15];
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  if (v14((const void *)(a2 + v20), 1, v12))
  {
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v21, v22, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, v12);
  }
  v24 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  v25 = a3[19];
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  v28 = a3[20];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  if (v14((const void *)(a2 + v28), 1, v12))
  {
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v29, v30, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v29, 0, 1, v12);
  }
  v32 = a3[21];
  v33 = (void *)(a1 + v32);
  v34 = (const void *)(a2 + v32);
  if (v14((const void *)(a2 + v32), 1, v12))
  {
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a1 + a3[22], a2 + a3[22], v12);
  }
  else
  {
    v36 = *(void (**)(void *, const void *, uint64_t))(v13 + 16);
    v36(v33, v34, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v33, 0, 1, v12);
    v36((void *)(a1 + a3[22]), (const void *)(a2 + a3[22]), v12);
  }
  v37 = a3[23];
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = sub_22CB9C664();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
  return a1;
}

uint64_t assignWithCopy for Quote(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  v9 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  v10 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  v11 = a2[10];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_QWORD *)(a1 + 80) = v11;
  v12 = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_QWORD *)(a1 + 96) = v12;
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_QWORD *)(a1 + 120) = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  v13 = a3[13];
  v14 = (void *)(a1 + v13);
  v15 = (char *)a2 + v13;
  v16 = sub_22CB9C544();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
LABEL_6:
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v17 + 24))(v14, v15, v16);
LABEL_7:
  v22 = a3[14];
  v23 = (void *)(a1 + v22);
  v24 = (char *)a2 + v22;
  v25 = v18((void *)(a1 + v22), 1, v16);
  v26 = v18(v24, 1, v16);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, char *, uint64_t))(v17 + 16))(v23, v24, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v23, 0, 1, v16);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v23, v16);
LABEL_12:
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, char *, uint64_t))(v17 + 24))(v23, v24, v16);
LABEL_13:
  v28 = a3[15];
  v29 = (void *)(a1 + v28);
  v30 = (char *)a2 + v28;
  v31 = v18((void *)(a1 + v28), 1, v16);
  v32 = v18(v30, 1, v16);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, char *, uint64_t))(v17 + 16))(v29, v30, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v29, 0, 1, v16);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v29, v16);
LABEL_18:
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, char *, uint64_t))(v17 + 24))(v29, v30, v16);
LABEL_19:
  *(_BYTE *)(a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  *(_BYTE *)(a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  *(_BYTE *)(a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  v34 = a3[19];
  v35 = a1 + v34;
  v36 = (uint64_t *)((char *)a2 + v34);
  v37 = *v36;
  *(_BYTE *)(v35 + 8) = *((_BYTE *)v36 + 8);
  *(_QWORD *)v35 = v37;
  v38 = a3[20];
  v39 = (void *)(a1 + v38);
  v40 = (char *)a2 + v38;
  v41 = v18((void *)(a1 + v38), 1, v16);
  v42 = v18(v40, 1, v16);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, char *, uint64_t))(v17 + 16))(v39, v40, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v39, 0, 1, v16);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v42)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v39, v16);
LABEL_24:
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, char *, uint64_t))(v17 + 24))(v39, v40, v16);
LABEL_25:
  v44 = a3[21];
  v45 = (void *)(a1 + v44);
  v46 = (char *)a2 + v44;
  v47 = v18((void *)(a1 + v44), 1, v16);
  v48 = v18(v46, 1, v16);
  if (!v47)
  {
    if (!v48)
    {
      (*(void (**)(void *, char *, uint64_t))(v17 + 24))(v45, v46, v16);
      goto LABEL_31;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v45, v16);
    goto LABEL_30;
  }
  if (v48)
  {
LABEL_30:
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, char *, uint64_t))(v17 + 16))(v45, v46, v16);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v45, 0, 1, v16);
LABEL_31:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 24))(a1 + a3[22], (uint64_t)a2 + a3[22], v16);
  v50 = a3[23];
  v51 = a1 + v50;
  v52 = (uint64_t)a2 + v50;
  v53 = sub_22CB9C664();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 24))(v51, v52, v53);
  return a1;
}

uint64_t initializeWithTake for Quote(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  void (*v35)(void *, const void *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v7 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v8 = a3[13];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 112) = v7;
  v11 = sub_22CB9C544();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[14];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  if (v13((const void *)(a2 + v15), 1, v11))
  {
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v16, v17, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  v19 = a3[15];
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  if (v13((const void *)(a2 + v19), 1, v11))
  {
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v20, v21, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v20, 0, 1, v11);
  }
  v23 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  v24 = a3[19];
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  v25 = a1 + v24;
  v26 = a2 + v24;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a3[20];
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  if (v13((const void *)(a2 + v27), 1, v11))
  {
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v28, v29, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v28, 0, 1, v11);
  }
  v31 = a3[21];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  if (v13((const void *)(a2 + v31), 1, v11))
  {
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(a1 + a3[22], a2 + a3[22], v11);
  }
  else
  {
    v35 = *(void (**)(void *, const void *, uint64_t))(v12 + 32);
    v35(v32, v33, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v32, 0, 1, v11);
    v35((void *)(a1 + a3[22]), (const void *)(a2 + a3[22]), v11);
  }
  v36 = a3[23];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = sub_22CB9C664();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
  return a1;
}

uint64_t assignWithTake for Quote(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v8 = a3[13];
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = sub_22CB9C544();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = a3[14];
  v18 = (void *)(a1 + v17);
  v19 = (void *)(a2 + v17);
  v20 = v13((void *)(a1 + v17), 1, v11);
  v21 = v13(v19, 1, v11);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v18, v19, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v18, v11);
LABEL_12:
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v18, v19, v11);
LABEL_13:
  v23 = a3[15];
  v24 = (void *)(a1 + v23);
  v25 = (void *)(a2 + v23);
  v26 = v13((void *)(a1 + v23), 1, v11);
  v27 = v13(v25, 1, v11);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v24, v25, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v24, 0, 1, v11);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v24, v11);
LABEL_18:
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v24, v25, v11);
LABEL_19:
  v29 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v30 = a3[19];
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  v31 = a1 + v30;
  v32 = a2 + v30;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  v33 = a3[20];
  v34 = (void *)(a1 + v33);
  v35 = (void *)(a2 + v33);
  v36 = v13((void *)(a1 + v33), 1, v11);
  v37 = v13(v35, 1, v11);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v34, v35, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v34, 0, 1, v11);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v34, v11);
LABEL_24:
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v34, v35, v11);
LABEL_25:
  v39 = a3[21];
  v40 = (void *)(a1 + v39);
  v41 = (void *)(a2 + v39);
  v42 = v13((void *)(a1 + v39), 1, v11);
  v43 = v13(v41, 1, v11);
  if (!v42)
  {
    if (!v43)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v40, v41, v11);
      goto LABEL_31;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v40, v11);
    goto LABEL_30;
  }
  if (v43)
  {
LABEL_30:
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v40, v41, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v40, 0, 1, v11);
LABEL_31:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(a1 + a3[22], a2 + a3[22], v11);
  v45 = a3[23];
  v46 = a1 + v45;
  v47 = a2 + v45;
  v48 = sub_22CB9C664();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 40))(v46, v47, v48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Quote()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB70C38(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 120);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = a3[13];
    }
    else
    {
      v13 = sub_22CB9C544();
      v10 = *(_QWORD *)(v13 - 8);
      if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
      {
        v11 = v13;
        v12 = a3[22];
      }
      else
      {
        v11 = sub_22CB9C664();
        v10 = *(_QWORD *)(v11 - 8);
        v12 = a3[23];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for Quote()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB70D2C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 120) = a2;
  }
  else
  {
    sub_22CB5F9BC(0, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[13];
    }
    else
    {
      v12 = sub_22CB9C544();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[22];
      }
      else
      {
        v10 = sub_22CB9C664();
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[23];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_22CB70E04()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_22CB5F9BC(319, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_22CB9C544();
    if (v1 <= 0x3F)
    {
      sub_22CB9C664();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for Quote.Source(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Quote.Source(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_22CB70FDC + 4 * byte_22CB9EF97[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_22CB71010 + 4 * byte_22CB9EF92[v4]))();
}

uint64_t sub_22CB71010(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB71018(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB71020);
  return result;
}

uint64_t sub_22CB7102C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB71034);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_22CB71038(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB71040(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Quote.Source()
{
  return &type metadata for Quote.Source;
}

uint64_t getEnumTagSinglePayload for Quote.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Quote.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_22CB71138 + 4 * byte_22CB9EFA1[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_22CB7116C + 4 * byte_22CB9EF9C[v4]))();
}

uint64_t sub_22CB7116C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB71174(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB7117CLL);
  return result;
}

uint64_t sub_22CB71188(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB71190);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_22CB71194(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB7119C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Quote.CodingKeys()
{
  return &type metadata for Quote.CodingKeys;
}

unint64_t sub_22CB711BC()
{
  unint64_t result;

  result = qword_255C35180;
  if (!qword_255C35180)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F308, &type metadata for Quote.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35180);
  }
  return result;
}

unint64_t sub_22CB71204()
{
  unint64_t result;

  result = qword_255C35188;
  if (!qword_255C35188)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F278, &type metadata for Quote.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35188);
  }
  return result;
}

unint64_t sub_22CB7124C()
{
  unint64_t result;

  result = qword_255C35190;
  if (!qword_255C35190)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F2A0, &type metadata for Quote.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35190);
  }
  return result;
}

uint64_t sub_22CB71290(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6563697270 && a2 == 0xE500000000000000;
  if (v2 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6168436563697270 && a2 == 0xEB0000000065676ELL || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000022CBA2500 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x756F487265746661 && a2 == 0xEF65636972507372 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000022CBA2520 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656B72614D657270 && a2 == 0xEE00656369725074 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000022CBA2540 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xEC00000065646F43 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x65676E6168637865 && a2 == 0xEE00737574617453 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x65676E6168637865 && a2 == 0xEC0000006E65704FLL || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x65676E6168637865 && a2 == 0xED000065736F6C43 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000022CBA2560 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x756F536563697270 && a2 == 0xEB00000000656372 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000022CBA2580 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x656B72614D657270 && a2 == 0xEF656372756F5374 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000022CBA25A0 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000022CBA25C0 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x73676E696E726165 && a2 == 0xEF65746144646E45 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000022CBA25E0 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x695474656B72616DLL && a2 == 0xEE00656E6F5A656DLL)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else
  {
    v6 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 19;
    else
      return 20;
  }
}

unint64_t sub_22CB71B50()
{
  unint64_t result;

  result = qword_255C35198;
  if (!qword_255C35198)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for Quote.Source, &type metadata for Quote.Source);
    atomic_store(result, (unint64_t *)&qword_255C35198);
  }
  return result;
}

void sub_22CB71B94()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_255C351A0)
  {
    sub_22CB5F9BC(255, &qword_255C35110, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_255C351A0);
  }
}

void sub_22CB71C14()
{
  void *v0;
  void *v1;
  id v2;

  v0 = (void *)objc_opt_self();
  v1 = (void *)sub_22CB9D018();
  v2 = objc_msgSend(v0, sel_sc_userDefaultsWithSuiteName_backupDisabled_, v1, 1);

  qword_255C3A290 = (uint64_t)v2;
}

uint64_t sub_22CB71C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v15 = MEMORY[0x24BDAC7A8](a1);
  v16 = v7;
  v17 = v2;
  sub_22CB9C85C();
  sub_22CB9CE98();
  v8 = (void *)sub_22CB9CE14();
  sub_22CB9CE74();
  swift_release();

  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v2, a1);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))(v10 + v9, &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], a1);
  v11 = (void *)sub_22CB9CE14();
  v12 = sub_22CB9CE68();
  swift_release();
  swift_release();

  return v12;
}

uint64_t sub_22CB71DDC()
{
  return sub_22CB9CA00();
}

uint64_t sub_22CB71E08(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v2 = sub_22CB9C85C();
  MEMORY[0x24BDAC7A8](v2);
  if (qword_253F839E0 != -1)
    swift_once();
  v3 = sub_22CB9CEEC();
  __swift_project_value_buffer(v3, (uint64_t)qword_253F86EA8);
  v4 = a1;
  v5 = a1;
  v6 = sub_22CB9CED4();
  v7 = sub_22CB9D1A4();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v13 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue();
    v10 = sub_22CB9D4F8();
    sub_22CB5DFE8(v10, v11, &v13);
    sub_22CB9D204();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_22CB4C000, v6, v7, "Failed to refresh app configuration with error: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v9, -1, -1);
    MEMORY[0x22E303318](v8, -1, -1);
  }
  else
  {

  }
  sub_22CB9C9F4();
  sub_22CB720E0();
  swift_allocObject();
  return sub_22CB9CE5C();
}

uint64_t sub_22CB7205C()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_22CB720B4(void *a1)
{
  return sub_22CB71E08(a1);
}

void sub_22CB720E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255C351B8)
  {
    sub_22CB9C85C();
    v0 = sub_22CB9CE80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255C351B8);
  }
}

void sub_22CB72134(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_22CB72184(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_22CB72244 + 4 * byte_22CB9F398[a2]))(0x79636E6572727563);
}

uint64_t sub_22CB72244(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x79636E6572727563 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_22CB9D4BC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_22CB72364(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_22CB723D0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_22CB72498 + 4 * byte_22CB9F3A7[a2]))(0x655271616473616ELL);
}

uint64_t sub_22CB72498(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x655271616473616ELL && v1 == 0xEE00656D69746C61)
    v2 = 1;
  else
    v2 = sub_22CB9D4BC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_22CB725CC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_22CB7261C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_22CB72694 + 4 * byte_22CB9F3B3[a2]))(1852141679);
}

uint64_t sub_22CB72694(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1852141679 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_22CB9D4BC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_22CB72754(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_22CB7279C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_22CB728A4 + 4 * byte_22CB9F3C3[a2]))(0x6B656557656E6FLL);
}

uint64_t sub_22CB728A4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6B656557656E6FLL && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_22CB9D4BC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_22CB72A14(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xED00006572756C69;
  v3 = 0x614665646F636564;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x6961466863746566;
    else
      v5 = 0x616C6C65636E6163;
    if (v4 == 1)
      v6 = 0xEC0000006572756CLL;
    else
      v6 = 0xEC0000006E6F6974;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x614665646F636564;
  v6 = 0xED00006572756C69;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x6961466863746566;
    else
      v3 = 0x616C6C65636E6163;
    if (v7 == 1)
      v2 = 0xEC0000006572756CLL;
    else
      v2 = 0xEC0000006E6F6974;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_22CB9D4BC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_22CB72B5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v1 = type metadata accessor for StocksKitServiceRequest(0);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v20 - v5;
  v7 = sub_22CB9C568();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CancellableStocksKitServiceRequest(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4DCF4(v0, (uint64_t)v13, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
    strcpy((char *)v20, ".cancel(id: ");
    BYTE5(v20[1]) = 0;
    HIWORD(v20[1]) = -5120;
    sub_22CB50668(&qword_255C351F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    sub_22CB9D498();
    sub_22CB9D054();
    swift_bridgeObjectRelease();
    sub_22CB9D054();
    v15 = v20[0];
  }
  else
  {
    sub_22CB79304();
    v17 = (uint64_t)&v13[*(int *)(v16 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
    sub_22CB6291C(v17, (uint64_t)v6, type metadata accessor for StocksKitServiceRequest);
    v20[0] = 0;
    v20[1] = 0xE000000000000000;
    sub_22CB9D27C();
    swift_bridgeObjectRelease();
    strcpy((char *)v20, ".fetch(id: ");
    HIDWORD(v20[1]) = -352321536;
    sub_22CB50668(&qword_255C351F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    sub_22CB9D498();
    sub_22CB9D054();
    swift_bridgeObjectRelease();
    sub_22CB9D054();
    sub_22CB4DCF4((uint64_t)v6, (uint64_t)v4, type metadata accessor for StocksKitServiceRequest);
    sub_22CB77F60();
    sub_22CB7AAE0((uint64_t)&v4[*(int *)(v18 + 48)]);
    sub_22CB9D054();
    sub_22CB9D054();
    v15 = v20[0];
    sub_22CB6257C((uint64_t)v6, type metadata accessor for StocksKitServiceRequest);
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v15;
}

uint64_t sub_22CB72E50(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char v46;
  char v47;
  char v48;
  char v49;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  sub_22CB5F8B8(0, &qword_253F83760, (uint64_t (*)(void))sub_22CB79CA0, (uint64_t)&type metadata for CancellableStocksKitServiceRequest.CancelCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v35 = v3;
  v33 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v34 = (char *)&v32 - v4;
  sub_22CB5F8B8(0, &qword_253F83758, (uint64_t (*)(void))sub_22CB79CE4, (uint64_t)&type metadata for CancellableStocksKitServiceRequest.FetchCodingKeys, v2);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v45 = (char *)&v32 - v6;
  v32 = type metadata accessor for StocksKitServiceRequest(0);
  MEMORY[0x24BDAC7A8](v32);
  v40 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_22CB9C568();
  v39 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v38 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v32 - v11;
  v13 = type metadata accessor for CancellableStocksKitServiceRequest(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB5F8B8(0, &qword_253F83750, (uint64_t (*)(void))sub_22CB79D28, (uint64_t)&type metadata for CancellableStocksKitServiceRequest.CodingKeys, v2);
  v44 = v16;
  v42 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v32 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB79D28();
  sub_22CB9D57C();
  sub_22CB4DCF4(v43, (uint64_t)v15, type metadata accessor for CancellableStocksKitServiceRequest);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v19 = v33;
    v20 = v39;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v38, v15, v8);
    v49 = 1;
    sub_22CB79CA0();
    v21 = v34;
    v22 = v44;
    sub_22CB9D42C();
    sub_22CB50668((unint64_t *)&unk_253F834D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
    v23 = v35;
    sub_22CB9D480();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v23);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v38, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v18, v22);
  }
  else
  {
    sub_22CB79304();
    v26 = (uint64_t)&v15[*(int *)(v25 + 48)];
    v27 = v39;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v12, v15, v8);
    sub_22CB6291C(v26, v40, type metadata accessor for StocksKitServiceRequest);
    v48 = 0;
    sub_22CB79CE4();
    v28 = v44;
    sub_22CB9D42C();
    v47 = 0;
    sub_22CB50668((unint64_t *)&unk_253F834D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
    v29 = v37;
    v30 = v41;
    sub_22CB9D480();
    if (v30)
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v45, v29);
      sub_22CB6257C(v40, type metadata accessor for StocksKitServiceRequest);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v8);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v18, v28);
    }
    else
    {
      v46 = 1;
      sub_22CB50668((unint64_t *)&unk_253F83638, type metadata accessor for StocksKitServiceRequest, (uint64_t)&unk_22CB9F654);
      v31 = v40;
      sub_22CB9D480();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v45, v29);
      sub_22CB6257C(v31, type metadata accessor for StocksKitServiceRequest);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v8);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v18, v44);
    }
  }
}

uint64_t sub_22CB73338@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  char v51;
  char v52;
  char v53;
  char v54;

  v41 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  sub_22CB5F8B8(0, &qword_253F83920, (uint64_t (*)(void))sub_22CB79CA0, (uint64_t)&type metadata for CancellableStocksKitServiceRequest.CancelCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v46 = (char *)&v37 - v5;
  sub_22CB5F8B8(0, &qword_253F83918, (uint64_t (*)(void))sub_22CB79CE4, (uint64_t)&type metadata for CancellableStocksKitServiceRequest.FetchCodingKeys, v3);
  v7 = *(_QWORD *)(v6 - 8);
  v44 = v6;
  v45 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v49 = (char *)&v37 - v8;
  sub_22CB5F8B8(0, &qword_253F83910, (uint64_t (*)(void))sub_22CB79D28, (uint64_t)&type metadata for CancellableStocksKitServiceRequest.CodingKeys, v3);
  v47 = *(_QWORD *)(v9 - 8);
  v48 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v37 - v10;
  v12 = type metadata accessor for CancellableStocksKitServiceRequest(0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v37 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v37 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB79D28();
  v21 = (uint64_t)v50;
  sub_22CB9D570();
  if (v21)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v39 = v15;
  v40 = v18;
  v23 = v48;
  v22 = v49;
  v38 = v20;
  v50 = a1;
  v24 = sub_22CB9D414();
  v25 = v24;
  if (*(_QWORD *)(v24 + 16) != 1)
  {
    v29 = sub_22CB9D2B8();
    swift_allocError();
    v31 = v30;
    sub_22CB5F914();
    *v31 = v12;
    sub_22CB9D3B4();
    sub_22CB9D2A0();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, *MEMORY[0x24BEE26D0], v29);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v23);
    a1 = v50;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  if ((*(_BYTE *)(v24 + 32) & 1) != 0)
  {
    v54 = 1;
    sub_22CB79CA0();
    v26 = v46;
    sub_22CB9D3A8();
    v37 = v25;
    sub_22CB9C568();
    sub_22CB50668(&qword_253F837F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    v27 = (uint64_t)v39;
    v28 = v43;
    sub_22CB9D408();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v23);
  }
  else
  {
    v53 = 0;
    sub_22CB79CE4();
    sub_22CB9D3A8();
    v46 = (char *)v12;
    v37 = v25;
    sub_22CB9C568();
    v52 = 0;
    sub_22CB50668(&qword_253F837F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    v32 = (uint64_t)v40;
    v33 = v44;
    sub_22CB9D408();
    sub_22CB79304();
    type metadata accessor for StocksKitServiceRequest(0);
    v51 = 1;
    sub_22CB50668(&qword_253F83838, type metadata accessor for StocksKitServiceRequest, (uint64_t)&unk_22CB9F67C);
    sub_22CB9D408();
    v35 = v47;
    v27 = v32;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v22, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v23);
  }
  swift_storeEnumTagMultiPayload();
  v36 = (uint64_t)v38;
  sub_22CB6291C(v27, (uint64_t)v38, type metadata accessor for CancellableStocksKitServiceRequest);
  sub_22CB6291C(v36, v41, type metadata accessor for CancellableStocksKitServiceRequest);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
}

uint64_t sub_22CB7392C()
{
  return 25705;
}

uint64_t sub_22CB73938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_22CB9D4BC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_22CB739B4()
{
  sub_22CB79CA0();
  return sub_22CB9D654();
}

uint64_t sub_22CB739DC()
{
  sub_22CB79CA0();
  return sub_22CB9D660();
}

uint64_t sub_22CB73A0C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C65636E6163;
  else
    return 0x6863746566;
}

uint64_t sub_22CB73A40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB7AD7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_22CB73A64()
{
  sub_22CB79D28();
  return sub_22CB9D654();
}

uint64_t sub_22CB73A8C()
{
  sub_22CB79D28();
  return sub_22CB9D660();
}

uint64_t sub_22CB73AB4()
{
  _BYTE *v0;

  if (*v0)
    return 0x74736575716572;
  else
    return 25705;
}

uint64_t sub_22CB73AE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB7AE5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_22CB73B08()
{
  sub_22CB79CE4();
  return sub_22CB9D654();
}

uint64_t sub_22CB73B30()
{
  sub_22CB79CE4();
  return sub_22CB9D660();
}

uint64_t sub_22CB73B58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22CB73338(a1, a2);
}

uint64_t sub_22CB73B6C(_QWORD *a1)
{
  return sub_22CB72E50(a1);
}

uint64_t sub_22CB73B84(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  sub_22CB5F8B8(0, &qword_253F83770, (uint64_t (*)(void))sub_22CB7BB58, (uint64_t)&type metadata for StocksKitServiceRequest.CurrencyConversionsCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  v29 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v27 - v5;
  sub_22CB4E0E4(0, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v27 - v8;
  v10 = type metadata accessor for StocksKitServiceRequest(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB5F8B8(0, &qword_253F83768, (uint64_t (*)(void))sub_22CB7BB9C, (uint64_t)&type metadata for StocksKitServiceRequest.CodingKeys, v2);
  v14 = v13;
  v27 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v27 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB7BB9C();
  sub_22CB9D57C();
  sub_22CB4DCF4((uint64_t)v31, (uint64_t)v12, type metadata accessor for StocksKitServiceRequest);
  v17 = *(_QWORD *)v12;
  v18 = *((_QWORD *)v12 + 1);
  v19 = v12[16];
  sub_22CB77F60();
  v21 = (uint64_t)&v12[*(int *)(v20 + 48)];
  v31 = v9;
  sub_22CB7BC24(v21, (uint64_t)v9);
  sub_22CB7BB58();
  sub_22CB9D42C();
  v32 = v17;
  v33 = v18;
  v22 = v28;
  v34 = v19;
  v35 = 0;
  sub_22CB7BC78();
  v23 = v30;
  sub_22CB9D480();
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v22);
    sub_22CB7AAE0((uint64_t)v31);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v16, v14);
  }
  else
  {
    v25 = v27;
    v26 = v29;
    LOBYTE(v32) = 1;
    sub_22CB9D324();
    sub_22CB50668(&qword_253F83720, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], MEMORY[0x24BEE6DD8]);
    sub_22CB9D45C();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v22);
    sub_22CB7AAE0((uint64_t)v31);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v16, v14);
  }
}

uint64_t sub_22CB73E70@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  char v33;

  v26 = a2;
  v28 = type metadata accessor for StocksKitServiceRequest(0);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  sub_22CB5F8B8(0, &qword_253F83930, (uint64_t (*)(void))sub_22CB7BB58, (uint64_t)&type metadata for StocksKitServiceRequest.CurrencyConversionsCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v29 = v5;
  v27 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v24 - v6;
  sub_22CB5F8B8(0, &qword_253F83928, (uint64_t (*)(void))sub_22CB7BB9C, (uint64_t)&type metadata for StocksKitServiceRequest.CodingKeys, v4);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v24 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB7BB9C();
  v13 = v31;
  sub_22CB9D570();
  if (v13)
    goto LABEL_5;
  v14 = v29;
  v25 = a1;
  v31 = v10;
  v15 = sub_22CB9D414();
  v16 = v9;
  if (*(_QWORD *)(v15 + 16) != 1)
  {
    v17 = sub_22CB9D2B8();
    swift_allocError();
    v19 = v18;
    sub_22CB5F914();
    *v19 = v28;
    sub_22CB9D3B4();
    sub_22CB9D2A0();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v16);
    a1 = v25;
LABEL_5:
    v23 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v23);
  }
  sub_22CB7BB58();
  sub_22CB9D3A8();
  v33 = 0;
  sub_22CB7BBE0();
  sub_22CB9D408();
  v28 = v15;
  sub_22CB77F60();
  v21 = (uint64_t)v30;
  sub_22CB9D324();
  v32 = 1;
  sub_22CB50668(&qword_253F838F0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], MEMORY[0x24BEE6DF8]);
  sub_22CB9D3E4();
  v22 = v31;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v14);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v16);
  sub_22CB6291C(v21, v26, type metadata accessor for StocksKitServiceRequest);
  v23 = (uint64_t)v25;
  return __swift_destroy_boxed_opaque_existential_1(v23);
}

BOOL sub_22CB74248(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_22CB74258()
{
  return sub_22CB9D540();
}

uint64_t sub_22CB7427C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73736563637573 && a2 == 0xE700000000000000;
  if (v2 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6572756C696166 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_22CB7436C()
{
  sub_22CB9D534();
  sub_22CB9D540();
  return sub_22CB9D558();
}

uint64_t sub_22CB743B0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6572756C696166;
  else
    return 0x73736563637573;
}

uint64_t sub_22CB743E0(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6E6F73616572 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_22CB7445C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

void sub_22CB744D8()
{
  type metadata accessor for StocksKitServiceResult.FailureCodingKeys();
}

void sub_22CB74538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v18 = MEMORY[0x22E303264](&unk_22CB9FF54, a1);
  *(_QWORD *)(v16 - 256) = a1;
  *(_QWORD *)(v16 - 264) = v18;
  v19 = sub_22CB9D48C();
  *(_QWORD *)(v16 - 208) = v19;
  *(_QWORD *)(v16 - 232) = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  *(_QWORD *)(v16 - 248) = (char *)&a9 - v21;
  *(_QWORD *)(v16 - 216) = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v16 - 240) = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v16 - 144) = v15;
  *(_QWORD *)(v16 - 136) = v9;
  *(_QWORD *)(v16 - 128) = v12;
  *(_QWORD *)(v16 - 120) = v11;
  *(_QWORD *)(v16 - 112) = v13;
  *(_QWORD *)(v16 - 104) = v10;
  *(_QWORD *)(v16 - 96) = v14;
  type metadata accessor for StocksKitServiceResult.SuccessCodingKeys();
}

void sub_22CB745EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v17 = MEMORY[0x22E303264](&unk_22CB9FF04, a1);
  *(_QWORD *)(v15 - 312) = a1;
  *(_QWORD *)(v15 - 320) = v17;
  v18 = sub_22CB9D48C();
  *(_QWORD *)(v15 - 272) = v18;
  *(_QWORD *)(v15 - 288) = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 304) = (char *)&a9 - v20;
  *(_QWORD *)(v15 - 280) = *(_QWORD *)(v14 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  *(_QWORD *)(v15 - 296) = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  *(_QWORD *)(v15 - 192) = v9;
  *(_QWORD *)(v15 - 184) = v14;
  *(_QWORD *)(v15 - 144) = v14;
  *(_QWORD *)(v15 - 136) = v9;
  *(_QWORD *)(v15 - 128) = *(_QWORD *)(v15 - 168);
  *(_QWORD *)(v15 - 120) = v11;
  *(_QWORD *)(v15 - 200) = v11;
  *(_QWORD *)(v15 - 112) = v12;
  *(_QWORD *)(v15 - 104) = v10;
  *(_QWORD *)(v15 - 224) = v10;
  *(_QWORD *)(v15 - 96) = v13;
  type metadata accessor for StocksKitServiceResult.CodingKeys();
}

uint64_t sub_22CB746F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  MEMORY[0x22E303264](&unk_22CB9FEB4, a1);
  v5 = sub_22CB9D48C();
  *(_QWORD *)(v4 - 176) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 - 168) = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - v6;
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v4 - 160), *(_QWORD *)(*(_QWORD *)(v4 - 160) + 24));
  sub_22CB9D57C();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v3, *(_QWORD *)(v4 - 152), v1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = *(_QWORD *)(v4 - 216);
    v9 = *(_QWORD *)(v4 - 240);
    v10 = *(_QWORD *)(v4 - 192);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v9, v3, v10);
    *(_BYTE *)(v4 - 144) = 1;
    v11 = *(_QWORD *)(v4 - 248);
    v12 = *(_QWORD *)(v4 - 168);
    sub_22CB9D42C();
    v13 = *(_QWORD *)(v4 - 208);
    sub_22CB9D480();
    v14 = *(_QWORD *)(v4 - 232);
  }
  else
  {
    v8 = *(_QWORD *)(v4 - 280);
    v9 = *(_QWORD *)(v4 - 296);
    v10 = *(_QWORD *)(v4 - 184);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v9, v3, v10);
    *(_BYTE *)(v4 - 144) = 0;
    v11 = *(_QWORD *)(v4 - 304);
    v12 = *(_QWORD *)(v4 - 168);
    sub_22CB9D42C();
    v13 = *(_QWORD *)(v4 - 272);
    sub_22CB9D480();
    v14 = *(_QWORD *)(v4 - 288);
  }
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v11, v13);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v4 - 176) + 8))(v7, v12);
}

void sub_22CB74904()
{
  type metadata accessor for StocksKitServiceResult.FailureCodingKeys();
}

void sub_22CB7496C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v16 - 248) = MEMORY[0x22E303264](&unk_22CB9FF54, a1);
  *(_QWORD *)(v16 - 240) = a1;
  v18 = sub_22CB9D420();
  *(_QWORD *)(v16 - 320) = v18;
  *(_QWORD *)(v16 - 280) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v16 - 232) = (char *)&a9 - v19;
  *(_QWORD *)(v16 - 144) = v15;
  *(_QWORD *)(v16 - 136) = v9;
  *(_QWORD *)(v16 - 128) = v14;
  *(_QWORD *)(v16 - 120) = v11;
  *(_QWORD *)(v16 - 112) = v13;
  *(_QWORD *)(v16 - 104) = v12;
  *(_QWORD *)(v16 - 96) = v10;
  type metadata accessor for StocksKitServiceResult.SuccessCodingKeys();
}

void sub_22CB749EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v18 = MEMORY[0x22E303264](&unk_22CB9FF04, a1);
  *(_QWORD *)(v16 - 264) = a1;
  *(_QWORD *)(v16 - 272) = v18;
  v19 = sub_22CB9D420();
  *(_QWORD *)(v16 - 328) = v19;
  *(_QWORD *)(v16 - 288) = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  *(_QWORD *)(v16 - 256) = (char *)&a9 - v20;
  *(_QWORD *)(v16 - 144) = v15;
  *(_QWORD *)(v16 - 136) = v9;
  *(_QWORD *)(v16 - 128) = v14;
  *(_QWORD *)(v16 - 120) = v11;
  *(_QWORD *)(v16 - 112) = v13;
  *(_QWORD *)(v16 - 104) = v12;
  *(_QWORD *)(v16 - 96) = v10;
  type metadata accessor for StocksKitServiceResult.CodingKeys();
}

void sub_22CB74A7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v8 - 192) = MEMORY[0x22E303264](&unk_22CB9FEB4, a1);
  v9 = sub_22CB9D420();
  *(_QWORD *)(v8 - 208) = v9;
  *(_QWORD *)(v8 - 224) = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  *(_QWORD *)(v8 - 200) = v7;
  *(_QWORD *)(v8 - 144) = v7;
  *(_QWORD *)(v8 - 136) = v2;
  *(_QWORD *)(v8 - 312) = v2;
  *(_QWORD *)(v8 - 304) = v6;
  *(_QWORD *)(v8 - 128) = v6;
  *(_QWORD *)(v8 - 120) = v3;
  *(_QWORD *)(v8 - 296) = v5;
  *(_QWORD *)(v8 - 112) = v5;
  *(_QWORD *)(v8 - 104) = v4;
  *(_QWORD *)(v8 - 96) = v1;
  type metadata accessor for StocksKitServiceResult();
}

uint64_t sub_22CB74B0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  _BYTE v42[96];

  *(_QWORD *)(v2 - 216) = a1;
  *(_QWORD *)(v2 - 336) = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = &v42[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = &v42[-v7];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v42[-v9];
  v11 = *(_QWORD **)(v2 - 72);
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  v12 = *(_QWORD *)(v2 - 184);
  sub_22CB9D570();
  if (!v12)
  {
    *(_QWORD *)(v2 - 352) = v8;
    *(_QWORD *)(v2 - 192) = v5;
    *(_QWORD *)(v2 - 360) = v10;
    v13 = *(_QWORD *)(v2 - 208);
    v14 = *(_QWORD *)(v2 - 216);
    *(_QWORD *)(v2 - 184) = 0;
    v15 = v1;
    *(_QWORD *)(v2 - 176) = sub_22CB9D414();
    v16 = sub_22CB9D0CC();
    MEMORY[0x22E303264](MEMORY[0x24BEE12C8], v16);
    *(_QWORD *)(v2 - 144) = sub_22CB9D228();
    *(_QWORD *)(v2 - 136) = v17;
    *(_QWORD *)(v2 - 128) = v18;
    *(_QWORD *)(v2 - 120) = v19;
    v20 = sub_22CB9D21C();
    MEMORY[0x22E303264](MEMORY[0x24BEE2190], v20);
    sub_22CB9D180();
    v21 = *(unsigned __int8 *)(v2 - 176);
    if (v21 == 2
      || (v23 = *(_OWORD *)(v2 - 144),
          v22 = *(_OWORD *)(v2 - 128),
          *(_OWORD *)(v2 - 384) = v23,
          *(_OWORD *)(v2 - 176) = v23,
          *(_OWORD *)(v2 - 160) = v22,
          (sub_22CB9D18C() & 1) == 0))
    {
      v31 = sub_22CB9D2B8();
      swift_allocError();
      v33 = v32;
      sub_22CB5F914();
      *v33 = v14;
      sub_22CB9D3B4();
      sub_22CB9D2A0();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v33, *MEMORY[0x24BEE26D0], v31);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 224) + 8))(v15, v13);
    }
    else
    {
      if ((v21 & 1) != 0)
      {
        *(_BYTE *)(v2 - 176) = 1;
        v34 = *(_QWORD *)(v2 - 232);
        v25 = v1;
        v35 = *(_QWORD *)(v2 - 184);
        sub_22CB9D3A8();
        if (!v35)
        {
          v27 = *(_QWORD *)(v2 - 192);
          v36 = *(_QWORD *)(v2 - 320);
          sub_22CB9D408();
          v37 = *(_QWORD *)(v2 - 224);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 280) + 8))(v34, v36);
          swift_unknownObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v25, v13);
          v30 = v14;
          goto LABEL_14;
        }
      }
      else
      {
        *(_BYTE *)(v2 - 176) = 0;
        v24 = *(_QWORD *)(v2 - 256);
        v25 = v1;
        v26 = *(_QWORD *)(v2 - 184);
        sub_22CB9D3A8();
        if (!v26)
        {
          v27 = *(_QWORD *)(v2 - 352);
          v28 = *(_QWORD *)(v2 - 328);
          sub_22CB9D408();
          v29 = *(_QWORD *)(v2 - 224);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 288) + 8))(v24, v28);
          swift_unknownObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v25, v13);
          v30 = v14;
LABEL_14:
          swift_storeEnumTagMultiPayload();
          v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 336) + 32);
          v41 = *(_QWORD *)(v2 - 360);
          v40(v41, v27, v14);
          v40(*(_QWORD *)(v2 - 344), v41, v30);
          v38 = *(_QWORD *)(v2 - 72);
          return __swift_destroy_boxed_opaque_existential_1(v38);
        }
      }
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 224) + 8))(v25, v13);
    }
    v11 = *(_QWORD **)(v2 - 72);
  }
  v38 = (uint64_t)v11;
  return __swift_destroy_boxed_opaque_existential_1(v38);
}

unint64_t sub_22CB74F7C()
{
  return 0xD000000000000013;
}

uint64_t sub_22CB74F98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB7AF34(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_22CB74FC0()
{
  sub_22CB7BB9C();
  return sub_22CB9D654();
}

uint64_t sub_22CB74FE8()
{
  sub_22CB7BB9C();
  return sub_22CB9D660();
}

uint64_t sub_22CB75010()
{
  _BYTE *v0;

  if (*v0)
    return 0x656E696C64616564;
  else
    return 0x6C6F506568636163;
}

uint64_t sub_22CB75054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB7AFB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_22CB75078()
{
  sub_22CB7BB58();
  return sub_22CB9D654();
}

uint64_t sub_22CB750A0()
{
  sub_22CB7BB58();
  return sub_22CB9D660();
}

uint64_t sub_22CB750C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22CB73E70(a1, a2);
}

uint64_t sub_22CB750DC(_QWORD *a1)
{
  return sub_22CB73B84(a1);
}

unint64_t sub_22CB750F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4DCF4(v1, (uint64_t)v3, type metadata accessor for StocksKitServiceRequest);
  sub_22CB77F60();
  sub_22CB7AAE0((uint64_t)&v3[*(int *)(v4 + 48)]);
  return 0xD000000000000013;
}

BOOL sub_22CB75178(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_22CB74248(*a1, *a2);
}

uint64_t sub_22CB751B8()
{
  return sub_22CB7436C();
}

uint64_t sub_22CB751D4()
{
  return sub_22CB74258();
}

uint64_t sub_22CB7520C()
{
  sub_22CB9D534();
  sub_22CB74258();
  return sub_22CB9D558();
}

uint64_t sub_22CB75260()
{
  char *v0;

  return sub_22CB743B0(*v0);
}

uint64_t sub_22CB7527C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB7427C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_22CB752C0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_22CB7B0C0();
  *a1 = result;
  return result;
}

uint64_t sub_22CB752F8(uint64_t a1)
{
  MEMORY[0x22E303264](&unk_22CB9FEB4, a1);
  return sub_22CB9D654();
}

uint64_t sub_22CB7532C(uint64_t a1)
{
  MEMORY[0x22E303264](&unk_22CB9FEB4, a1);
  return sub_22CB9D660();
}

uint64_t sub_22CB75360()
{
  return 0x6E6F73616572;
}

uint64_t sub_22CB75374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_22CB75414(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_22CB743E0, a4);
}

uint64_t sub_22CB75380@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_22CB7546C(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_22CB514E4, a2);
}

uint64_t sub_22CB7538C(uint64_t a1)
{
  MEMORY[0x22E303264](&unk_22CB9FF54, a1);
  return sub_22CB9D654();
}

uint64_t sub_22CB753C0(uint64_t a1)
{
  MEMORY[0x22E303264](&unk_22CB9FF54, a1);
  return sub_22CB9D660();
}

uint64_t sub_22CB753F4()
{
  return 0x65756C6176;
}

uint64_t sub_22CB75408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_22CB75414(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_22CB7445C, a4);
}

uint64_t sub_22CB75414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X4>, _BYTE *a5@<X8>)
{
  uint64_t result;

  result = a4(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8]);
  *a5 = result & 1;
  return result;
}

uint64_t sub_22CB75460@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_22CB7546C(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_22CB7C338, a2);
}

uint64_t sub_22CB7546C@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8]);
  *a3 = result & 1;
  return result;
}

uint64_t sub_22CB754AC(uint64_t a1)
{
  MEMORY[0x22E303264](&unk_22CB9FF04, a1);
  return sub_22CB9D654();
}

uint64_t sub_22CB754E0(uint64_t a1)
{
  MEMORY[0x22E303264](&unk_22CB9FF04, a1);
  return sub_22CB9D660();
}

void sub_22CB75514()
{
  sub_22CB74904();
}

void sub_22CB7553C()
{
  sub_22CB744D8();
}

uint64_t sub_22CB75550(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_22CB72A14(*a1, *a2);
}

uint64_t sub_22CB7555C()
{
  sub_22CB9D534();
  sub_22CB9D048();
  swift_bridgeObjectRelease();
  return sub_22CB9D558();
}

uint64_t sub_22CB75618()
{
  sub_22CB9D048();
  return swift_bridgeObjectRelease();
}

uint64_t sub_22CB756B0()
{
  sub_22CB9D534();
  sub_22CB9D048();
  swift_bridgeObjectRelease();
  return sub_22CB9D558();
}

uint64_t sub_22CB75768@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_22CB7B0C8();
  *a1 = result;
  return result;
}

void sub_22CB75794(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xED00006572756C69;
  v4 = 0xEC0000006572756CLL;
  v5 = 0x6961466863746566;
  if (v2 != 1)
  {
    v5 = 0x616C6C65636E6163;
    v4 = 0xEC0000006E6F6974;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x614665646F636564;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_22CB75810()
{
  sub_22CB79D6C();
  return sub_22CB9D078();
}

uint64_t sub_22CB7586C()
{
  sub_22CB79D6C();
  return sub_22CB9D06C();
}

uint64_t sub_22CB758B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  os_unfair_lock_s *v6;

  v1 = v0;
  if (qword_253F839E0 != -1)
    swift_once();
  v2 = sub_22CB9CEEC();
  __swift_project_value_buffer(v2, (uint64_t)qword_253F86EA8);
  v3 = sub_22CB9CED4();
  v4 = sub_22CB9D1A4();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_22CB4C000, v3, v4, "XPCSessionWrapper deinit", v5, 2u);
    MEMORY[0x22E303318](v5, -1, -1);
  }

  v6 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v6 + 6);
  sub_22CB759D0();
  os_unfair_lock_unlock(v6 + 6);
  swift_release();
  return v1;
}

uint64_t sub_22CB759D0()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (qword_253F839E0 != -1)
    swift_once();
  v0 = sub_22CB9CEEC();
  __swift_project_value_buffer(v0, (uint64_t)qword_253F86EA8);
  v1 = sub_22CB9CED4();
  v2 = sub_22CB9D1A4();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_22CB4C000, v1, v2, "Cancelling XPC...", v3, 2u);
    MEMORY[0x22E303318](v3, -1, -1);
  }

  return sub_22CB9CF34();
}

uint64_t sub_22CB75AD0()
{
  sub_22CB758B8();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for XPCSessionWrapper()
{
  return objc_opt_self();
}

uint64_t sub_22CB75B0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v38 = a4;
  v39 = a5;
  v40 = a3;
  v37 = a1;
  v7 = type metadata accessor for StocksKitServiceRequest(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v32 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v32 - v15;
  if (qword_253F839E0 != -1)
    swift_once();
  v17 = sub_22CB9CEEC();
  __swift_project_value_buffer(v17, (uint64_t)qword_253F86EA8);
  sub_22CB4DCF4(a2, (uint64_t)v16, type metadata accessor for StocksKitServiceRequest);
  v18 = sub_22CB9CED4();
  v19 = sub_22CB9D1A4();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v36 = v5;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc();
    v35 = a2;
    v33 = v22;
    v42 = v22;
    v34 = v8;
    *(_DWORD *)v21 = 136315138;
    v32 = v21 + 4;
    sub_22CB4DCF4((uint64_t)v16, (uint64_t)v14, type metadata accessor for StocksKitServiceRequest);
    sub_22CB4DCF4((uint64_t)v14, (uint64_t)v11, type metadata accessor for StocksKitServiceRequest);
    sub_22CB77F60();
    v24 = (uint64_t)&v11[*(int *)(v23 + 48)];
    sub_22CB6257C((uint64_t)v14, type metadata accessor for StocksKitServiceRequest);
    sub_22CB7AAE0(v24);
    v41 = sub_22CB5DFE8(0xD000000000000013, 0x800000022CBA26E0, &v42);
    v8 = v34;
    sub_22CB9D204();
    sub_22CB6257C((uint64_t)v16, type metadata accessor for StocksKitServiceRequest);
    _os_log_impl(&dword_22CB4C000, v18, v19, "Sending XPC message from proxy: %s", v21, 0xCu);
    v25 = v33;
    swift_arrayDestroy();
    a2 = v35;
    MEMORY[0x22E303318](v25, -1, -1);
    MEMORY[0x22E303318](v21, -1, -1);
  }
  else
  {
    sub_22CB6257C((uint64_t)v16, type metadata accessor for StocksKitServiceRequest);
  }

  v26 = *v37;
  sub_22CB4DCF4(a2, (uint64_t)v14, type metadata accessor for StocksKitServiceRequest);
  v27 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v26;
  sub_22CB6291C((uint64_t)v14, v28 + v27, type metadata accessor for StocksKitServiceRequest);
  v29 = (_QWORD *)(v28 + ((v9 + v27 + 7) & 0xFFFFFFFFFFFFFFF8));
  v30 = v39;
  *v29 = v38;
  v29[1] = v30;
  type metadata accessor for CancellableStocksKitServiceRequest(0);
  sub_22CB7B830();
  sub_22CB50668(&qword_253F83628, type metadata accessor for CancellableStocksKitServiceRequest, (uint64_t)&unk_22CB9F53C);
  sub_22CB50668(&qword_253F83630, (uint64_t (*)(uint64_t))sub_22CB7B830, (uint64_t)&unk_22CB9F564);
  swift_retain();
  swift_retain();
  sub_22CB9CF28();
  return swift_release();
}

uint64_t sub_22CB75EBC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *);
  uint64_t v45;
  uint64_t v46;

  v43 = a5;
  v44 = a4;
  v41 = a3;
  v6 = type metadata accessor for StocksKitServiceRequest(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v41 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v41 - v13;
  v42 = sub_22CB7B830();
  v15 = MEMORY[0x24BDAC7A8](v42);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v41 - v18;
  sub_22CB7BA30(0, &qword_253F837C8, (uint64_t (*)(uint64_t))sub_22CB7B830, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BEE4408]);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (void **)((char *)&v41 - v21);
  sub_22CB7B9D8(a1, (uint64_t)&v41 - v21, &qword_253F837C8, (uint64_t (*)(uint64_t))sub_22CB7B830);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v23 = *v22;
    if (qword_253F839E0 != -1)
      swift_once();
    v24 = sub_22CB9CEEC();
    __swift_project_value_buffer(v24, (uint64_t)qword_253F86EA8);
    v25 = v23;
    v26 = v23;
    v27 = sub_22CB9CED4();
    v28 = sub_22CB9D1A4();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      v30 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v29 = 138412290;
      v31 = v23;
      v32 = _swift_stdlib_bridgeErrorToNSError();
      v46 = v32;
      sub_22CB9D204();
      *v30 = v32;

      _os_log_impl(&dword_22CB4C000, v27, v28, "Failure sending request, error: %@", v29, 0xCu);
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83FC8, (void (*)(uint64_t))sub_22CB7AB2C);
      swift_arrayDestroy();
      MEMORY[0x22E303318](v30, -1, -1);
      MEMORY[0x22E303318](v29, -1, -1);
    }
    else
    {

    }
    *v17 = 0;
    swift_storeEnumTagMultiPayload();
    v44(v17);

    v19 = v17;
  }
  else
  {
    sub_22CB6291C((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_22CB7B830);
    if (qword_253F839E0 != -1)
      swift_once();
    v33 = sub_22CB9CEEC();
    __swift_project_value_buffer(v33, (uint64_t)qword_253F86EA8);
    sub_22CB4DCF4(v41, (uint64_t)v14, type metadata accessor for StocksKitServiceRequest);
    v34 = sub_22CB9CED4();
    v35 = sub_22CB9D1A4();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      v37 = swift_slowAlloc();
      v46 = v37;
      *(_DWORD *)v36 = 136315138;
      v42 = (uint64_t)(v36 + 4);
      sub_22CB4DCF4((uint64_t)v14, (uint64_t)v12, type metadata accessor for StocksKitServiceRequest);
      sub_22CB4DCF4((uint64_t)v12, (uint64_t)v9, type metadata accessor for StocksKitServiceRequest);
      sub_22CB77F60();
      v39 = (uint64_t)&v9[*(int *)(v38 + 48)];
      sub_22CB6257C((uint64_t)v12, type metadata accessor for StocksKitServiceRequest);
      sub_22CB7AAE0(v39);
      v45 = sub_22CB5DFE8(0xD000000000000013, 0x800000022CBA26E0, &v46);
      sub_22CB9D204();
      sub_22CB6257C((uint64_t)v14, type metadata accessor for StocksKitServiceRequest);
      _os_log_impl(&dword_22CB4C000, v34, v35, "Done sending request: %s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E303318](v37, -1, -1);
      MEMORY[0x22E303318](v36, -1, -1);
    }
    else
    {
      sub_22CB6257C((uint64_t)v14, type metadata accessor for StocksKitServiceRequest);
    }

    v44(v19);
  }
  return sub_22CB6257C((uint64_t)v19, (uint64_t (*)(_QWORD))sub_22CB7B830);
}

uint64_t sub_22CB763D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v26 = type metadata accessor for CancellableStocksKitServiceRequest(0);
  MEMORY[0x24BDAC7A8](v26);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_22CB9C568();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_253F839E0 != -1)
    swift_once();
  v11 = sub_22CB9CEEC();
  __swift_project_value_buffer(v11, (uint64_t)qword_253F86EA8);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v25 = a2;
  v24(v10, a2, v7);
  v12 = sub_22CB9CED4();
  v13 = sub_22CB9D1A4();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v23 = v2;
    v15 = (uint8_t *)v14;
    v21 = swift_slowAlloc();
    v28 = v21;
    v22 = a1;
    *(_DWORD *)v15 = 136315138;
    v20 = v15 + 4;
    v16 = sub_22CB9C550();
    v27 = sub_22CB5DFE8(v16, v17, &v28);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl(&dword_22CB4C000, v12, v13, "Sending cancellation XPC message for id: %s", v15, 0xCu);
    v18 = v21;
    swift_arrayDestroy();
    MEMORY[0x22E303318](v18, -1, -1);
    MEMORY[0x22E303318](v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  v24(v6, v25, v7);
  swift_storeEnumTagMultiPayload();
  sub_22CB50668(&qword_253F83628, type metadata accessor for CancellableStocksKitServiceRequest, (uint64_t)&unk_22CB9F53C);
  sub_22CB9CF1C();
  return sub_22CB6257C((uint64_t)v6, type metadata accessor for CancellableStocksKitServiceRequest);
}

void sub_22CB76694()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (qword_253F839E0 != -1)
    swift_once();
  v0 = sub_22CB9CEEC();
  __swift_project_value_buffer(v0, (uint64_t)qword_253F86EA8);
  oslog = sub_22CB9CED4();
  v1 = sub_22CB9D1A4();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_22CB4C000, oslog, v1, "Done sending XPC cancellation message", v2, 2u);
    MEMORY[0x22E303318](v2, -1, -1);
  }

}

void sub_22CB76760(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  unint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v2 = sub_22CB9CF64();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v20 - v7;
  if (qword_253F839E0 != -1)
    swift_once();
  v9 = sub_22CB9CEEC();
  __swift_project_value_buffer(v9, (uint64_t)qword_253F86EA8);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10(v8, a1, v2);
  v10(v6, a1, v2);
  v11 = sub_22CB9CED4();
  v12 = sub_22CB9D198();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    v21 = v14;
    *(_DWORD *)v13 = 67109378;
    v15 = sub_22CB9CF58() & 1;
    v16 = *(void (**)(char *, uint64_t))(v3 + 8);
    v16(v8, v2);
    LODWORD(v20) = v15;
    sub_22CB9D204();
    *(_WORD *)(v13 + 8) = 2080;
    v17 = sub_22CB9CF4C();
    v20 = sub_22CB5DFE8(v17, v18, &v21);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    v16(v6, v2);
    _os_log_impl(&dword_22CB4C000, v11, v12, "Session cancelled (recoverable: %{BOOL}d): %s", (uint8_t *)v13, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v14, -1, -1);
    MEMORY[0x22E303318](v13, -1, -1);
  }
  else
  {
    v19 = *(void (**)(char *, uint64_t))(v3 + 8);
    v19(v8, v2);
    v19(v6, v2);
  }

}

uint64_t sub_22CB769B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v4 = sub_22CB9D108();
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  v5 = *(_QWORD *)(type metadata accessor for StocksKitServiceRequest(0) - 8);
  v3[12] = v5;
  v3[13] = *(_QWORD *)(v5 + 64);
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v6 = sub_22CB9C568();
  v3[18] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[19] = v7;
  v3[20] = *(_QWORD *)(v7 + 64);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_22CB76AC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41[2];

  sub_22CB9C55C();
  if (qword_253F839E0 != -1)
    swift_once();
  v1 = v0[22];
  v2 = v0[23];
  v3 = v0[18];
  v4 = v0[19];
  v5 = v0[17];
  v6 = v0[6];
  v7 = sub_22CB9CEEC();
  __swift_project_value_buffer(v7, (uint64_t)qword_253F86EA8);
  sub_22CB4DCF4(v6, v5, type metadata accessor for StocksKitServiceRequest);
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v40(v1, v2, v3);
  v8 = sub_22CB9CED4();
  v9 = sub_22CB9D1A4();
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[22];
  v13 = v0[18];
  v12 = v0[19];
  v14 = v0[17];
  if (v10)
  {
    v15 = v0[15];
    v16 = v0[16];
    v37 = v0[18];
    v17 = swift_slowAlloc();
    v38 = swift_slowAlloc();
    v41[0] = v38;
    *(_DWORD *)v17 = 136315394;
    sub_22CB4DCF4(v14, v16, type metadata accessor for StocksKitServiceRequest);
    sub_22CB4DCF4(v16, v15, type metadata accessor for StocksKitServiceRequest);
    sub_22CB77F60();
    v19 = v15 + *(int *)(v18 + 48);
    sub_22CB6257C(v16, type metadata accessor for StocksKitServiceRequest);
    sub_22CB7AAE0(v19);
    v0[3] = sub_22CB5DFE8(0xD000000000000013, 0x800000022CBA26E0, v41);
    sub_22CB9D204();
    sub_22CB6257C(v14, type metadata accessor for StocksKitServiceRequest);
    *(_WORD *)(v17 + 12) = 2080;
    v20 = sub_22CB9C550();
    v0[4] = sub_22CB5DFE8(v20, v21, v41);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    v22 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v22(v11, v37);
    _os_log_impl(&dword_22CB4C000, v8, v9, "Fetching request: %s from proxy with id: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v38, -1, -1);
    MEMORY[0x22E303318](v17, -1, -1);
  }
  else
  {
    sub_22CB6257C(v0[17], type metadata accessor for StocksKitServiceRequest);
    v22 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v22(v11, v13);
  }

  v0[24] = v22;
  v23 = sub_22CB79E28();
  v0[25] = v23;
  v24 = v23;
  v25 = v0[21];
  v26 = v0[18];
  v27 = v0[19];
  v28 = v0[14];
  v39 = v0[20];
  v29 = v0[12];
  v30 = v0[6];
  v31 = v0[7];
  v40(v25, v0[23], v26);
  sub_22CB4DCF4(v30, v28, type metadata accessor for StocksKitServiceRequest);
  v32 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  v33 = (v39 + *(unsigned __int8 *)(v29 + 80) + v32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  v34 = swift_allocObject();
  v0[26] = v34;
  *(_QWORD *)(v34 + 16) = v31;
  *(_QWORD *)(v34 + 24) = v24;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 32))(v34 + v32, v25, v26);
  sub_22CB6291C(v28, v34 + v33, type metadata accessor for StocksKitServiceRequest);
  swift_retain();
  swift_retain();
  v35 = (_QWORD *)swift_task_alloc();
  v0[27] = v35;
  type metadata accessor for CurrencyConversionsResult();
  *v35 = v0;
  v35[1] = sub_22CB76F1C;
  return sub_22CB9CDA8();
}

uint64_t sub_22CB76F1C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_22CB76F88()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 144);
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB77050()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(void **)(v0 + 224);
  swift_release();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = v1;
  sub_22CB7A568();
  if (swift_dynamicCast())
  {
    v3 = *(_QWORD *)(v0 + 200);
    v4 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(v0 + 80);
    v5 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 64);
    v8 = *(_QWORD *)(v0 + 72);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v6, v5, v7);
    sub_22CB7A5BC(v3, v4);
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
    v10 = *(_QWORD *)(v0 + 184);
    v11 = *(_QWORD *)(v0 + 144);
    v13 = *(_QWORD *)(v0 + 72);
    v12 = *(_QWORD *)(v0 + 80);
    v14 = *(_QWORD *)(v0 + 64);
    sub_22CB50668(&qword_255C34F58, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v15, v12, v14);
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    v9(v10, v11);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 144));
    swift_release();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB77238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_22CB77258()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  v2 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 32) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  type metadata accessor for CurrencyConversionsResult();
  *v3 = v0;
  v3[1] = sub_22CB772FC;
  return sub_22CB9D4C8();
}

uint64_t sub_22CB772FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_22CB77370()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB773A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a4;
  v30 = a5;
  v27 = a3;
  v28 = a1;
  sub_22CB7BA30(0, (unint64_t *)&unk_253F83700, (uint64_t (*)(uint64_t))type metadata accessor for CurrencyConversionsResult, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BEE6830]);
  v26 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - v7;
  v25 = (char *)&v25 - v7;
  v9 = sub_22CB9C568();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for StocksKitServiceRequest(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4DCF4(v30, (uint64_t)v16, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v29, v9);
  v18 = v8;
  v19 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v18, v28, v26);
  v20 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v21 = (v15 + *(unsigned __int8 *)(v10 + 80) + v20) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v22 = (v11 + v21 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v23 = swift_allocObject();
  sub_22CB6291C((uint64_t)v16, v23 + v20, type metadata accessor for StocksKitServiceRequest);
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v23 + v21, v12, v9);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v23 + v22, v25, v19);
  sub_22CB7B110(v27, v29, v30, (uint64_t)sub_22CB7ACD0, v23);
  return swift_release();
}

uint64_t sub_22CB775B8(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t (*v34)(_QWORD);
  char v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v72 = a3;
  v73 = a4;
  v71 = a2;
  sub_22CB7BA30(0, &qword_253F837C0, (uint64_t (*)(uint64_t))type metadata accessor for CurrencyConversionsResult, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BEE4408]);
  v68 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v69 = (uint64_t *)((char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v6);
  v70 = (uint64_t)&v65 - v8;
  v74 = sub_22CB9C568();
  v9 = *(_QWORD *)(v74 - 8);
  v10 = MEMORY[0x24BDAC7A8](v74);
  v67 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v65 - v12;
  v14 = type metadata accessor for StocksKitServiceRequest(0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v65 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v65 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v65 - v24;
  v26 = type metadata accessor for CurrencyConversionsResult();
  v27 = MEMORY[0x24BDAC7A8](v26);
  v66 = (uint64_t)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v65 - v29;
  v31 = sub_22CB7B830();
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v65 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4DCF4(a1, (uint64_t)v33, v34);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v35 = *v33;
    if (qword_253F839E0 != -1)
      swift_once();
    v36 = sub_22CB9CEEC();
    __swift_project_value_buffer(v36, (uint64_t)qword_253F86EA8);
    sub_22CB4DCF4(v71, (uint64_t)v23, type metadata accessor for StocksKitServiceRequest);
    v37 = v67;
    v38 = v74;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v67, v72, v74);
    v39 = sub_22CB9CED4();
    v40 = sub_22CB9D1A4();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc();
      v42 = swift_slowAlloc();
      v71 = v9;
      v72 = (char *)v42;
      v76 = v42;
      *(_DWORD *)v41 = 136315650;
      sub_22CB4DCF4((uint64_t)v23, (uint64_t)v20, type metadata accessor for StocksKitServiceRequest);
      sub_22CB4DCF4((uint64_t)v20, (uint64_t)v17, type metadata accessor for StocksKitServiceRequest);
      sub_22CB77F60();
      sub_22CB7AAE0((uint64_t)&v17[*(int *)(v43 + 48)]);
      sub_22CB6257C((uint64_t)v20, type metadata accessor for StocksKitServiceRequest);
      v75 = sub_22CB5DFE8(0xD000000000000013, 0x800000022CBA26E0, &v76);
      sub_22CB9D204();
      sub_22CB6257C((uint64_t)v23, type metadata accessor for StocksKitServiceRequest);
      *(_WORD *)(v41 + 12) = 2080;
      LOBYTE(v75) = v35;
      sub_22CB7B994();
      v44 = sub_22CB9D4F8();
      v75 = sub_22CB5DFE8(v44, v45, &v76);
      sub_22CB9D204();
      swift_bridgeObjectRelease();
      *(_WORD *)(v41 + 22) = 2080;
      v46 = sub_22CB9C550();
      v75 = sub_22CB5DFE8(v46, v47, &v76);
      sub_22CB9D204();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v37, v74);
      _os_log_impl(&dword_22CB4C000, v39, v40, "Got failure response for request: %s, failure reason: %s, for id: %s", (uint8_t *)v41, 0x20u);
      v48 = v72;
      swift_arrayDestroy();
      MEMORY[0x22E303318](v48, -1, -1);
      MEMORY[0x22E303318](v41, -1, -1);
    }
    else
    {
      sub_22CB6257C((uint64_t)v23, type metadata accessor for StocksKitServiceRequest);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v37, v38);
    }

    sub_22CB7B994();
    v60 = swift_allocError();
    *v61 = v35;
    v76 = v60;
    sub_22CB7BA30(0, (unint64_t *)&unk_253F83700, (uint64_t (*)(uint64_t))type metadata accessor for CurrencyConversionsResult, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BEE6830]);
    return sub_22CB9D0E4();
  }
  else
  {
    sub_22CB6291C((uint64_t)v33, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
    if (qword_253F839E0 != -1)
      swift_once();
    v49 = sub_22CB9CEEC();
    __swift_project_value_buffer(v49, (uint64_t)qword_253F86EA8);
    sub_22CB4DCF4(v71, (uint64_t)v25, type metadata accessor for StocksKitServiceRequest);
    v50 = v74;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v72, v74);
    v51 = sub_22CB9CED4();
    v52 = sub_22CB9D1A4();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = swift_slowAlloc();
      v72 = v30;
      v54 = v53;
      v71 = swift_slowAlloc();
      v76 = v71;
      *(_DWORD *)v54 = 136315394;
      v67 = (char *)(v54 + 4);
      sub_22CB4DCF4((uint64_t)v25, (uint64_t)v20, type metadata accessor for StocksKitServiceRequest);
      sub_22CB4DCF4((uint64_t)v20, (uint64_t)v17, type metadata accessor for StocksKitServiceRequest);
      sub_22CB77F60();
      sub_22CB7AAE0((uint64_t)&v17[*(int *)(v55 + 48)]);
      sub_22CB6257C((uint64_t)v20, type metadata accessor for StocksKitServiceRequest);
      v75 = sub_22CB5DFE8(0xD000000000000013, 0x800000022CBA26E0, &v76);
      sub_22CB9D204();
      sub_22CB6257C((uint64_t)v25, type metadata accessor for StocksKitServiceRequest);
      *(_WORD *)(v54 + 12) = 2080;
      v56 = sub_22CB9C550();
      v75 = sub_22CB5DFE8(v56, v57, &v76);
      sub_22CB9D204();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v50);
      _os_log_impl(&dword_22CB4C000, v51, v52, "Got success response for request: %s, for id: %s", (uint8_t *)v54, 0x16u);
      v58 = v71;
      swift_arrayDestroy();
      MEMORY[0x22E303318](v58, -1, -1);
      v59 = v54;
      v30 = v72;
      MEMORY[0x22E303318](v59, -1, -1);
    }
    else
    {
      sub_22CB6257C((uint64_t)v25, type metadata accessor for StocksKitServiceRequest);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v50);
    }

    v63 = v69;
    v64 = v70;
    sub_22CB4DCF4((uint64_t)v30, v70, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
    swift_storeEnumTagMultiPayload();
    sub_22CB7B9D8(v64, (uint64_t)v63, &qword_253F837C0, (uint64_t (*)(uint64_t))type metadata accessor for CurrencyConversionsResult);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v76 = *v63;
      sub_22CB7BA30(0, (unint64_t *)&unk_253F83700, (uint64_t (*)(uint64_t))type metadata accessor for CurrencyConversionsResult, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BEE6830]);
      sub_22CB9D0E4();
    }
    else
    {
      sub_22CB6291C((uint64_t)v63, v66, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
      sub_22CB7BA30(0, (unint64_t *)&unk_253F83700, (uint64_t (*)(uint64_t))type metadata accessor for CurrencyConversionsResult, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BEE6830]);
      sub_22CB9D0F0();
    }
    sub_22CB7BAA0(v64);
    return sub_22CB6257C((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
  }
}

uint64_t type metadata accessor for StocksKitServiceProxy()
{
  return objc_opt_self();
}

_QWORD *sub_22CB77E58(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    sub_22CB77F60();
    v7 = *(int *)(v6 + 48);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_22CB9D324();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      sub_22CB4E0E4(0, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
  }
  return v4;
}

void sub_22CB77F60()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_255C351C0)
  {
    sub_22CB4E0E4(255, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_255C351C0);
  }
}

uint64_t sub_22CB77FD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  sub_22CB77F60();
  v3 = a1 + *(int *)(v2 + 48);
  v4 = sub_22CB9D324();
  v5 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  return result;
}

uint64_t sub_22CB78050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  sub_22CB77F60();
  v5 = *(int *)(v4 + 48);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = sub_22CB9D324();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    sub_22CB4E0E4(0, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_22CB7812C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  sub_22CB77F60();
  v6 = *(int *)(v5 + 48);
  v7 = (void *)(a1 + v6);
  v8 = (char *)a2 + v6;
  v9 = sub_22CB9D324();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    sub_22CB4E0E4(0, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_22CB78254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  sub_22CB77F60();
  v5 = *(int *)(v4 + 48);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = sub_22CB9D324();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    sub_22CB4E0E4(0, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_22CB78330(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  sub_22CB77F60();
  v5 = *(int *)(v4 + 48);
  v6 = (void *)(a1 + v5);
  v7 = (void *)(a2 + v5);
  v8 = sub_22CB9D324();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v6, 1, v8);
  v12 = v10(v7, 1, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v6, v7, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    sub_22CB4E0E4(0, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v6, v7, v8);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  return a1;
}

uint64_t sub_22CB78458(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_22CB77F60();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_22CB78494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_22CB77F60();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a3, v6);
}

uint64_t type metadata accessor for StocksKitServiceRequest(uint64_t a1)
{
  return sub_22CB60CD0(a1, (uint64_t *)&unk_253F83E20);
}

void sub_22CB784F4(uint64_t a1)
{
  unint64_t v2;
  int v3;

  sub_22CB4E0E4(319, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
  if (v2 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSingleCase();
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = v3;
  }
}

uint64_t storeEnumTagSinglePayload for StocksKitServiceError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_22CB785C8 + 4 * byte_22CB9F3D3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_22CB785FC + 4 * byte_22CB9F3CE[v4]))();
}

uint64_t sub_22CB785FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB78604(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB7860CLL);
  return result;
}

uint64_t sub_22CB78618(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB78620);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_22CB78624(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB7862C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StocksKitServiceError()
{
  return &type metadata for StocksKitServiceError;
}

uint64_t sub_22CB78648()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_22CB78650()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_22CB786D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_22CB78804(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_22CB78850 + 4 * byte_22CB9F3DD[v7]))();
  }
}

uint64_t sub_22CB788A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_22CB78978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_22CB78AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_22CB78BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_22CB78D44(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_22CB78E0C + 4 * byte_22CB9F400[(v4 - 1)]))();
}

void sub_22CB78E58(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_22CB79004(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_22CB79050 + 4 * byte_22CB9F40E[v3]))();
}

void sub_22CB79098(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v4] = a2;
  }
}

void type metadata accessor for StocksKitServiceResult()
{
  JUMPOUT(0x22E3031F8);
}

_QWORD *sub_22CB7918C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = sub_22CB9C568();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    if (EnumCaseMultiPayload != 1)
    {
      sub_22CB79304();
      v10 = *(int *)(v9 + 48);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      *(_OWORD *)v11 = *(_OWORD *)((char *)a2 + v10);
      v11[16] = *((_BYTE *)a2 + v10 + 16);
      sub_22CB77F60();
      v14 = *(int *)(v13 + 48);
      v15 = &v11[v14];
      v16 = &v12[v14];
      v17 = sub_22CB9D324();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        sub_22CB4E0E4(0, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_22CB79304()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_253F83B60)
  {
    sub_22CB9C568();
    type metadata accessor for StocksKitServiceRequest(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_253F83B60);
  }
}

uint64_t sub_22CB79374(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v3 = sub_22CB9C568();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  if (EnumCaseMultiPayload != 1)
  {
    sub_22CB79304();
    v6 = a1 + *(int *)(v5 + 48);
    sub_22CB77F60();
    v8 = v6 + *(int *)(v7 + 48);
    v9 = sub_22CB9D324();
    v10 = *(_QWORD *)(v9 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  return result;
}

uint64_t sub_22CB79428(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = sub_22CB9C568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  if (EnumCaseMultiPayload != 1)
  {
    sub_22CB79304();
    v7 = *(int *)(v6 + 48);
    v8 = a1 + v7;
    v9 = a2 + v7;
    *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
    *(_BYTE *)(v8 + 16) = *(_BYTE *)(a2 + v7 + 16);
    sub_22CB77F60();
    v11 = *(int *)(v10 + 48);
    v12 = (void *)(v8 + v11);
    v13 = (const void *)(v9 + v11);
    v14 = sub_22CB9D324();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      sub_22CB4E0E4(0, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_22CB79574(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_22CB6257C(a1, type metadata accessor for CancellableStocksKitServiceRequest);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = sub_22CB9C568();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    if (EnumCaseMultiPayload != 1)
    {
      sub_22CB79304();
      v7 = *(int *)(v6 + 48);
      v8 = a1 + v7;
      v9 = (_OWORD *)(a2 + v7);
      LOBYTE(v7) = *(_BYTE *)(a2 + v7 + 16);
      *(_OWORD *)v8 = *v9;
      *(_BYTE *)(v8 + 16) = v7;
      sub_22CB77F60();
      v11 = *(int *)(v10 + 48);
      v12 = (void *)(v8 + v11);
      v13 = (char *)v9 + v11;
      v14 = sub_22CB9D324();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        sub_22CB4E0E4(0, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for CancellableStocksKitServiceRequest(uint64_t a1)
{
  return sub_22CB60CD0(a1, (uint64_t *)&unk_253F83BB8);
}

uint64_t sub_22CB796EC(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = sub_22CB9C568();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
  if (EnumCaseMultiPayload != 1)
  {
    sub_22CB79304();
    v7 = *(int *)(v6 + 48);
    v8 = a1 + v7;
    v9 = a2 + v7;
    *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
    *(_BYTE *)(v8 + 16) = *(_BYTE *)(a2 + v7 + 16);
    sub_22CB77F60();
    v11 = *(int *)(v10 + 48);
    v12 = (void *)(v8 + v11);
    v13 = (const void *)(v9 + v11);
    v14 = sub_22CB9D324();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      sub_22CB4E0E4(0, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_22CB79838(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_22CB6257C(a1, type metadata accessor for CancellableStocksKitServiceRequest);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = sub_22CB9C568();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    if (EnumCaseMultiPayload != 1)
    {
      sub_22CB79304();
      v7 = *(int *)(v6 + 48);
      v8 = a1 + v7;
      v9 = a2 + v7;
      *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
      *(_BYTE *)(v8 + 16) = *(_BYTE *)(a2 + v7 + 16);
      sub_22CB77F60();
      v11 = *(int *)(v10 + 48);
      v12 = (void *)(v8 + v11);
      v13 = (const void *)(v9 + v11);
      v14 = sub_22CB9D324();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        sub_22CB4E0E4(0, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_22CB7999C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_22CB799A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_22CB799B8()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_22CB799C8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v6;
  char *v7;
  uint64_t v8;

  v0 = sub_22CB9C568();
  if (v1 <= 0x3F)
  {
    sub_22CB4E0E4(319, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      v4 = *(_QWORD *)(v0 - 8) + 64;
      swift_getTupleTypeLayout2();
      swift_getTupleTypeLayout2();
      v7 = &v6;
      v8 = v4;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v0;
}

unint64_t sub_22CB79A98()
{
  unint64_t result;

  result = qword_255C351C8;
  if (!qword_255C351C8)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F604, &type metadata for StocksKitServiceError);
    atomic_store(result, (unint64_t *)&qword_255C351C8);
  }
  return result;
}

uint64_t sub_22CB79ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a3;
  type metadata accessor for StocksKitServiceRequest(0);
  v6 = swift_task_alloc();
  v7 = *v3;
  *(_QWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 40) = v7;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)a2;
  *(_BYTE *)(v4 + 80) = *(_BYTE *)(a2 + 16);
  return swift_task_switch();
}

uint64_t sub_22CB79B4C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_BYTE *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  sub_22CB77F60();
  v7 = v5 + *(int *)(v6 + 48);
  *(_QWORD *)v5 = v3;
  *(_QWORD *)(v5 + 8) = v2;
  *(_BYTE *)(v5 + 16) = v1;
  sub_22CB79DD4(v4, v7);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v8;
  *v8 = v0;
  v8[1] = sub_22CB79BD8;
  return sub_22CB769B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 32));
}

uint64_t sub_22CB79BD8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  swift_task_dealloc();
  sub_22CB6257C(v2, type metadata accessor for StocksKitServiceRequest);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_22CB79C6C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_22CB79CA0()
{
  unint64_t result;

  result = qword_253F83BA0;
  if (!qword_253F83BA0)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0044, &type metadata for CancellableStocksKitServiceRequest.CancelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83BA0);
  }
  return result;
}

unint64_t sub_22CB79CE4()
{
  unint64_t result;

  result = qword_253F83B88;
  if (!qword_253F83B88)
  {
    result = MEMORY[0x22E303264](&unk_22CB9FFF4, &type metadata for CancellableStocksKitServiceRequest.FetchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83B88);
  }
  return result;
}

unint64_t sub_22CB79D28()
{
  unint64_t result;

  result = qword_253F83B70;
  if (!qword_253F83B70)
  {
    result = MEMORY[0x22E303264](&unk_22CB9FFA4, &type metadata for CancellableStocksKitServiceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83B70);
  }
  return result;
}

unint64_t sub_22CB79D6C()
{
  unint64_t result;

  result = qword_253F83BD0;
  if (!qword_253F83BD0)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F58C, &type metadata for StocksKitServiceError);
    atomic_store(result, (unint64_t *)&qword_253F83BD0);
  }
  return result;
}

void type metadata accessor for StocksKitServiceResult.FailureCodingKeys()
{
  JUMPOUT(0x22E3031F8);
}

void type metadata accessor for StocksKitServiceResult.SuccessCodingKeys()
{
  JUMPOUT(0x22E3031F8);
}

void type metadata accessor for StocksKitServiceResult.CodingKeys()
{
  JUMPOUT(0x22E3031F8);
}

uint64_t sub_22CB79DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_22CB4E0E4(0, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

NSObject *sub_22CB79E28()
{
  void *v0;
  NSObject *v1;
  Class isa;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void (*v18)(char *, char *, NSObject *);
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void (*v24)(char *, NSObject *);
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  os_log_type_t v34;
  uint8_t *v35;
  _QWORD *v36;
  id v37;
  void *v38;
  char *v39;
  uint64_t v41;
  os_log_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, NSObject *);
  uint64_t v45;
  uint64_t v46;
  id v47;

  v1 = sub_22CB9CF64();
  isa = v1[-1].isa;
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = (char *)&v41 - v7;
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v41 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v41 - v12;
  v14 = sub_22CB9CF10();
  MEMORY[0x24BDAC7A8](v14);
  sub_22CB9CF40();
  sub_22CB9CF04();
  v15 = sub_22CB9CEF8();
  if (v0)
  {
    v47 = v0;
    v16 = v0;
    sub_22CB7A568();
    if (swift_dynamicCast())
    {

      (*((void (**)(char *, char *, NSObject *))isa + 4))(v11, v13, v1);
      if (qword_253F839E0 != -1)
        swift_once();
      v17 = sub_22CB9CEEC();
      __swift_project_value_buffer(v17, (uint64_t)qword_253F86EA8);
      v18 = (void (*)(char *, char *, NSObject *))*((_QWORD *)isa + 2);
      v18(v8, v11, v1);
      v18(v5, v11, v1);
      v19 = sub_22CB9CED4();
      v20 = sub_22CB9D198();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = swift_slowAlloc();
        v44 = v18;
        v22 = v21;
        v43 = swift_slowAlloc();
        v46 = v43;
        *(_DWORD *)v22 = 67109378;
        v42 = v19;
        v23 = sub_22CB9CF58() & 1;
        v24 = (void (*)(char *, NSObject *))*((_QWORD *)isa + 1);
        v24(v8, v1);
        LODWORD(v45) = v23;
        sub_22CB9D204();
        *(_WORD *)(v22 + 8) = 2080;
        v25 = sub_22CB9CF4C();
        v45 = sub_22CB5DFE8(v25, v26, &v46);
        sub_22CB9D204();
        swift_bridgeObjectRelease();
        v24(v5, v1);
        v19 = v42;
        _os_log_impl(&dword_22CB4C000, v42, v20, "Failed to initialize session (recoverable: %{BOOL}d): %s", (uint8_t *)v22, 0x12u);
        v27 = v43;
        swift_arrayDestroy();
        MEMORY[0x22E303318](v27, -1, -1);
        v28 = v22;
        v18 = v44;
        MEMORY[0x22E303318](v28, -1, -1);
      }
      else
      {
        v24 = (void (*)(char *, NSObject *))*((_QWORD *)isa + 1);
        v24(v8, v1);
        v24(v5, v1);
      }

      sub_22CB50668(&qword_253F83808, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6678], MEMORY[0x24BEE6688]);
      swift_allocError();
      v18(v39, v11, v1);
      swift_willThrow();
      v24(v11, v1);

    }
    else
    {

      if (qword_253F839E0 != -1)
        swift_once();
      v31 = sub_22CB9CEEC();
      __swift_project_value_buffer(v31, (uint64_t)qword_253F86EA8);
      v32 = v0;
      v33 = v0;
      v1 = sub_22CB9CED4();
      v34 = sub_22CB9D198();
      if (os_log_type_enabled(v1, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc();
        v36 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v35 = 138412290;
        v37 = v0;
        v38 = (void *)_swift_stdlib_bridgeErrorToNSError();
        v47 = v38;
        sub_22CB9D204();
        *v36 = v38;

        _os_log_impl(&dword_22CB4C000, v1, v34, "Failed to initialize session: %@", v35, 0xCu);
        sub_22CB4E0E4(0, (unint64_t *)&qword_253F83FC8, (void (*)(uint64_t))sub_22CB7AB2C);
        swift_arrayDestroy();
        MEMORY[0x22E303318](v36, -1, -1);
        MEMORY[0x22E303318](v35, -1, -1);
      }
      else
      {

      }
      swift_willThrow();
    }
  }
  else
  {
    v29 = v15;
    type metadata accessor for XPCSessionWrapper();
    v1 = swift_allocObject();
    sub_22CB7BAF4();
    v30 = swift_allocObject();
    *(_DWORD *)(v30 + 24) = 0;
    *(_QWORD *)(v30 + 16) = v29;
    v1[2].isa = (Class)v30;
  }
  return v1;
}

uint64_t sub_22CB7A3C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_22CB9C568();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StocksKitServiceRequest(0) - 8) + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  sub_22CB77F60();
  v7 = v0 + *(int *)(v6 + 48) + ((v3 + v4 + v5) & ~v5);
  v8 = sub_22CB9D324();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v7, v8);
  return swift_deallocObject();
}

uint64_t sub_22CB7A4B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = *(_QWORD *)(sub_22CB9C568() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StocksKitServiceRequest(0) - 8) + 80);
  v8 = v1 + ((v5 + v6 + v7) & ~v7);
  v9 = swift_task_alloc();
  v10 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v9;
  *(_QWORD *)v9 = v2;
  *(_QWORD *)(v9 + 8) = sub_22CB62A2C;
  *(_QWORD *)(v9 + 40) = v1 + v5;
  *(_QWORD *)(v9 + 48) = v8;
  *(_OWORD *)(v9 + 24) = v10;
  *(_QWORD *)(v9 + 16) = a1;
  return swift_task_switch();
}

unint64_t sub_22CB7A568()
{
  unint64_t result;

  result = qword_253F839F0;
  if (!qword_253F839F0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_253F839F0);
  }
  return result;
}

void sub_22CB7A5BC(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  id v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  char v27;
  int v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  unint64_t v31;
  os_log_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  _QWORD *v40;
  id v41;
  void *v42;
  char *v43;
  os_log_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;

  v5 = sub_22CB9CF64();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v47 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v44 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v44 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v44 - v15;
  v17 = *(os_unfair_lock_s **)(a1 + 16);
  v18 = (uint64_t)&v17[4];
  v19 = v17 + 6;
  os_unfair_lock_lock(v17 + 6);
  sub_22CB763D4(v18, a2);
  if (v2)
  {
    os_unfair_lock_unlock(v19);
    v50 = v2;
    v20 = v2;
    sub_22CB7A568();
    if (swift_dynamicCast())
    {

      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v14, v16, v5);
      if (qword_253F839E0 != -1)
        swift_once();
      v21 = sub_22CB9CEEC();
      __swift_project_value_buffer(v21, (uint64_t)qword_253F86EA8);
      v22 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
      v22(v11, v14, v5);
      v23 = v47;
      v22(v47, v14, v5);
      v24 = sub_22CB9CED4();
      v25 = sub_22CB9D198();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = swift_slowAlloc();
        v45 = swift_slowAlloc();
        v49 = v45;
        *(_DWORD *)v26 = 67109378;
        v44 = v24;
        v27 = sub_22CB9CF58();
        v46 = v22;
        v28 = v27 & 1;
        v29 = *(void (**)(char *, uint64_t))(v6 + 8);
        v29(v11, v5);
        LODWORD(v48) = v28;
        sub_22CB9D204();
        *(_WORD *)(v26 + 8) = 2080;
        v30 = sub_22CB9CF4C();
        v48 = sub_22CB5DFE8(v30, v31, &v49);
        v22 = v46;
        sub_22CB9D204();
        swift_bridgeObjectRelease();
        v29(v23, v5);
        v32 = v44;
        _os_log_impl(&dword_22CB4C000, v44, v25, "Failed to send XPC message XPC error (recoverable: %{BOOL}d): %s", (uint8_t *)v26, 0x12u);
        v33 = v45;
        swift_arrayDestroy();
        MEMORY[0x22E303318](v33, -1, -1);
        MEMORY[0x22E303318](v26, -1, -1);

      }
      else
      {
        v29 = *(void (**)(char *, uint64_t))(v6 + 8);
        v29(v11, v5);
        v29(v23, v5);

      }
      sub_22CB50668(&qword_253F83808, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6678], MEMORY[0x24BEE6688]);
      swift_allocError();
      v22(v43, v14, v5);
      swift_willThrow();
      v29(v14, v5);

    }
    else
    {

      if (qword_253F839E0 != -1)
        swift_once();
      v34 = sub_22CB9CEEC();
      __swift_project_value_buffer(v34, (uint64_t)qword_253F86EA8);
      v35 = v2;
      v36 = v2;
      v37 = sub_22CB9CED4();
      v38 = sub_22CB9D198();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc();
        v40 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v39 = 138412290;
        v41 = v2;
        v42 = (void *)_swift_stdlib_bridgeErrorToNSError();
        v50 = v42;
        sub_22CB9D204();
        *v40 = v42;

        _os_log_impl(&dword_22CB4C000, v37, v38, "Failed to send XPC message: %@", v39, 0xCu);
        sub_22CB4E0E4(0, (unint64_t *)&qword_253F83FC8, (void (*)(uint64_t))sub_22CB7AB2C);
        swift_arrayDestroy();
        MEMORY[0x22E303318](v40, -1, -1);
        MEMORY[0x22E303318](v39, -1, -1);
      }
      else
      {

      }
      swift_willThrow();
    }
  }
  else
  {
    os_unfair_lock_unlock(v19);
  }
}

uint64_t sub_22CB7AAE0(uint64_t a1)
{
  uint64_t v2;

  sub_22CB4E0E4(0, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_22CB7AB2C()
{
  unint64_t result;

  result = qword_253F83FC0;
  if (!qword_253F83FC0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_253F83FC0);
  }
  return result;
}

uint64_t sub_22CB7AB68(uint64_t a1)
{
  uint64_t *v1;

  return sub_22CB773A4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_22CB7AB74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(type metadata accessor for StocksKitServiceRequest(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v17 = *(_QWORD *)(v1 + 64);
  v18 = sub_22CB9C568();
  v3 = *(_QWORD *)(v18 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v15 = *(_QWORD *)(v3 + 64);
  sub_22CB7BA30(0, (unint64_t *)&unk_253F83700, (uint64_t (*)(uint64_t))type metadata accessor for CurrencyConversionsResult, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BEE6830]);
  v16 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  sub_22CB77F60();
  v9 = v0 + *(int *)(v8 + 48) + ((v2 + 16) & ~v2);
  v10 = sub_22CB9D324();
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v12 = (((v2 + 16) & ~v2) + v17 + v4) & ~v4;
  v13 = (v12 + v15 + v7) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v12, v18);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v13, v16);
  return swift_deallocObject();
}

uint64_t sub_22CB7ACD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(type metadata accessor for StocksKitServiceRequest(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(sub_22CB9C568() - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v7 + *(_QWORD *)(v6 + 64);
  sub_22CB7BA30(0, (unint64_t *)&unk_253F83700, (uint64_t (*)(uint64_t))type metadata accessor for CurrencyConversionsResult, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BEE6830]);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80);
  return sub_22CB775B8(a1, v1 + v4, (char *)(v1 + v7), v1 + ((v8 + v10) & ~v10));
}

uint64_t sub_22CB7AD7C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6863746566 && a2 == 0xE500000000000000;
  if (v2 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C65636E6163 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_22CB7AE5C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74736575716572 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_22CB7AF34(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000013 && a2 == 0x800000022CBA26E0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_22CB7AFB8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C6F506568636163 && a2 == 0xEB00000000796369;
  if (v2 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E696C64616564 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_22CB7B0C0()
{
  return 2;
}

uint64_t sub_22CB7B0C8()
{
  unint64_t v0;

  v0 = sub_22CB9D39C();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

void sub_22CB7B110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t *v25;
  os_unfair_lock_s *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  int v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  _QWORD *v53;
  id v54;
  void *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;

  v61 = a5;
  v9 = sub_22CB9CF64();
  v58 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v59 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v57 = (char *)&v57 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v60 = (char *)&v57 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v57 - v16;
  v18 = type metadata accessor for CancellableStocksKitServiceRequest(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB79304();
  v22 = (uint64_t)&v20[*(int *)(v21 + 48)];
  v23 = sub_22CB9C568();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, a2, v23);
  sub_22CB4DCF4(a3, v22, type metadata accessor for StocksKitServiceRequest);
  swift_storeEnumTagMultiPayload();
  v24 = *(os_unfair_lock_s **)(a1 + 16);
  v25 = (uint64_t *)&v24[4];
  v26 = v24 + 6;
  os_unfair_lock_lock(v24 + 6);
  v27 = (void *)v62;
  sub_22CB75B0C(v25, a3, (uint64_t)v20, a4, v61);
  if (v27)
  {
    os_unfair_lock_unlock(v26);
    sub_22CB6257C((uint64_t)v20, type metadata accessor for CancellableStocksKitServiceRequest);
    v65 = v27;
    v28 = v27;
    sub_22CB7A568();
    if (swift_dynamicCast())
    {
      v29 = v9;

      v30 = v58;
      v31 = v60;
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v60, v17, v9);
      if (qword_253F839E0 != -1)
        swift_once();
      v32 = sub_22CB9CEEC();
      __swift_project_value_buffer(v32, (uint64_t)qword_253F86EA8);
      v33 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
      v34 = v57;
      v33(v57, v31, v29);
      v35 = v59;
      v33(v59, v31, v29);
      v36 = sub_22CB9CED4();
      v37 = sub_22CB9D198();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = v34;
        v39 = swift_slowAlloc();
        v62 = swift_slowAlloc();
        v64 = v62;
        *(_DWORD *)v39 = 67109378;
        v40 = v33;
        v41 = sub_22CB9CF58() & 1;
        v42 = *(void (**)(char *, uint64_t))(v30 + 8);
        v42(v38, v29);
        LODWORD(v63) = v41;
        v33 = v40;
        sub_22CB9D204();
        *(_WORD *)(v39 + 8) = 2080;
        v43 = v59;
        v44 = sub_22CB9CF4C();
        v63 = sub_22CB5DFE8(v44, v45, &v64);
        v31 = v60;
        sub_22CB9D204();
        swift_bridgeObjectRelease();
        v42(v43, v29);
        _os_log_impl(&dword_22CB4C000, v36, v37, "Failed to send XPC message XPC error (recoverable: %{BOOL}d): %s", (uint8_t *)v39, 0x12u);
        v46 = v62;
        swift_arrayDestroy();
        MEMORY[0x22E303318](v46, -1, -1);
        MEMORY[0x22E303318](v39, -1, -1);
      }
      else
      {
        v42 = *(void (**)(char *, uint64_t))(v30 + 8);
        v42(v34, v29);
        v42(v35, v29);
      }

      sub_22CB50668(&qword_253F83808, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6678], MEMORY[0x24BEE6688]);
      swift_allocError();
      v33(v56, v31, v29);
      swift_willThrow();
      v42(v31, v29);

    }
    else
    {

      if (qword_253F839E0 != -1)
        swift_once();
      v47 = sub_22CB9CEEC();
      __swift_project_value_buffer(v47, (uint64_t)qword_253F86EA8);
      v48 = v27;
      v49 = v27;
      v50 = sub_22CB9CED4();
      v51 = sub_22CB9D198();
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc();
        v53 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v52 = 138412290;
        v54 = v27;
        v55 = (void *)_swift_stdlib_bridgeErrorToNSError();
        v65 = v55;
        sub_22CB9D204();
        *v53 = v55;

        _os_log_impl(&dword_22CB4C000, v50, v51, "Failed to send XPC message: %@", v52, 0xCu);
        sub_22CB4E0E4(0, (unint64_t *)&qword_253F83FC8, (void (*)(uint64_t))sub_22CB7AB2C);
        swift_arrayDestroy();
        MEMORY[0x22E303318](v53, -1, -1);
        MEMORY[0x22E303318](v52, -1, -1);
      }
      else
      {

      }
      swift_willThrow();
    }
  }
  else
  {
    os_unfair_lock_unlock(v26);
    sub_22CB6257C((uint64_t)v20, type metadata accessor for CancellableStocksKitServiceRequest);
  }
}

uint64_t sub_22CB7B70C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for StocksKitServiceRequest(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_release();
  sub_22CB77F60();
  v4 = v0 + *(int *)(v3 + 48) + v2;
  v5 = sub_22CB9D324();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_22CB7B7D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for StocksKitServiceRequest(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_22CB75EBC(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(void (**)(char *))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_22CB7B830()
{
  uint64_t result;

  result = qword_253F83DE8;
  if (!qword_253F83DE8)
  {
    type metadata accessor for CurrencyConversionsResult();
    sub_22CB50668((unint64_t *)&qword_253F83F68, (uint64_t (*)(uint64_t))type metadata accessor for CurrencyConversionsResult, (uint64_t)&protocol conformance descriptor for CurrencyConversionsResult);
    sub_22CB50668(&qword_253F83F60, (uint64_t (*)(uint64_t))type metadata accessor for CurrencyConversionsResult, (uint64_t)&protocol conformance descriptor for CurrencyConversionsResult);
    sub_22CB7B90C();
    sub_22CB7B950();
    sub_22CB7B994();
    type metadata accessor for StocksKitServiceResult();
  }
  return result;
}

unint64_t sub_22CB7B90C()
{
  unint64_t result;

  result = qword_253F83BD8;
  if (!qword_253F83BD8)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F744, &type metadata for StocksKitServiceError);
    atomic_store(result, (unint64_t *)&qword_253F83BD8);
  }
  return result;
}

unint64_t sub_22CB7B950()
{
  unint64_t result;

  result = qword_253F83BC8;
  if (!qword_253F83BC8)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F71C, &type metadata for StocksKitServiceError);
    atomic_store(result, (unint64_t *)&qword_253F83BC8);
  }
  return result;
}

unint64_t sub_22CB7B994()
{
  unint64_t result;

  result = qword_253F83BE0[0];
  if (!qword_253F83BE0[0])
  {
    result = MEMORY[0x22E303264](&unk_22CB9F6DC, &type metadata for StocksKitServiceError);
    atomic_store(result, qword_253F83BE0);
  }
  return result;
}

uint64_t sub_22CB7B9D8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_22CB7BA30(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BEE4408]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_22CB7BA30(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = sub_22CB7A568();
    v9 = a4(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_22CB7BAA0(uint64_t a1)
{
  uint64_t v2;

  sub_22CB7BA30(0, &qword_253F837C0, (uint64_t (*)(uint64_t))type metadata accessor for CurrencyConversionsResult, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BEE4408]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_22CB7BAF4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_253F83718)
  {
    sub_22CB9CF40();
    type metadata accessor for os_unfair_lock_s();
    v0 = sub_22CB9D2C4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_253F83718);
  }
}

unint64_t sub_22CB7BB58()
{
  unint64_t result;

  result = qword_253F83E08;
  if (!qword_253F83E08)
  {
    result = MEMORY[0x22E303264](&unk_22CB9FE64, &type metadata for StocksKitServiceRequest.CurrencyConversionsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83E08);
  }
  return result;
}

unint64_t sub_22CB7BB9C()
{
  unint64_t result;

  result = qword_253F83DF0;
  if (!qword_253F83DF0)
  {
    result = MEMORY[0x22E303264](&unk_22CB9FE14, &type metadata for StocksKitServiceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83DF0);
  }
  return result;
}

unint64_t sub_22CB7BBE0()
{
  unint64_t result;

  result = qword_253F83860;
  if (!qword_253F83860)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for StockService.CachePolicy, &type metadata for StockService.CachePolicy);
    atomic_store(result, (unint64_t *)&qword_253F83860);
  }
  return result;
}

uint64_t sub_22CB7BC24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_22CB4E0E4(0, &qword_255C34EF0, (void (*)(uint64_t))MEMORY[0x24BEE6DC8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_22CB7BC78()
{
  unint64_t result;

  result = qword_253F83660;
  if (!qword_253F83660)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for StockService.CachePolicy, &type metadata for StockService.CachePolicy);
    atomic_store(result, (unint64_t *)&qword_253F83660);
  }
  return result;
}

ValueMetadata *type metadata accessor for StocksKitServiceRequest.CodingKeys()
{
  return &type metadata for StocksKitServiceRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for StocksKitServiceRequest.CurrencyConversionsCodingKeys()
{
  return &type metadata for StocksKitServiceRequest.CurrencyConversionsCodingKeys;
}

uint64_t sub_22CB7BCE8()
{
  return swift_allocateGenericValueMetadata();
}

ValueMetadata *type metadata accessor for CancellableStocksKitServiceRequest.CodingKeys()
{
  return &type metadata for CancellableStocksKitServiceRequest.CodingKeys;
}

uint64_t _s9StocksKit23StocksKitServiceRequestO29CurrencyConversionsCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_22CB7BD4C + 4 * byte_22CB9F418[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_22CB7BD80 + 4 * byte_22CB9F413[v4]))();
}

uint64_t sub_22CB7BD80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB7BD88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB7BD90);
  return result;
}

uint64_t sub_22CB7BD9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB7BDA4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_22CB7BDA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB7BDB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CancellableStocksKitServiceRequest.FetchCodingKeys()
{
  return &type metadata for CancellableStocksKitServiceRequest.FetchCodingKeys;
}

uint64_t _s9StocksKit23StocksKitServiceRequestO10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22CB7BE0C + 4 * byte_22CB9F41D[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22CB7BE2C + 4 * byte_22CB9F422[v4]))();
}

_BYTE *sub_22CB7BE0C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22CB7BE2C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22CB7BE34(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22CB7BE3C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22CB7BE44(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22CB7BE4C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CancellableStocksKitServiceRequest.CancelCodingKeys()
{
  return &type metadata for CancellableStocksKitServiceRequest.CancelCodingKeys;
}

unint64_t sub_22CB7BE6C()
{
  unint64_t result;

  result = qword_255C351F8;
  if (!qword_255C351F8)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F8E4, &type metadata for CancellableStocksKitServiceRequest.CancelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C351F8);
  }
  return result;
}

unint64_t sub_22CB7BEB4()
{
  unint64_t result;

  result = qword_255C35200;
  if (!qword_255C35200)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F99C, &type metadata for CancellableStocksKitServiceRequest.FetchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35200);
  }
  return result;
}

unint64_t sub_22CB7BEFC()
{
  unint64_t result;

  result = qword_255C35208;
  if (!qword_255C35208)
  {
    result = MEMORY[0x22E303264](&unk_22CB9FA54, &type metadata for CancellableStocksKitServiceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35208);
  }
  return result;
}

void sub_22CB7BF40()
{
  JUMPOUT(0x22E303264);
}

void sub_22CB7BF50()
{
  JUMPOUT(0x22E303264);
}

void sub_22CB7BF60()
{
  JUMPOUT(0x22E303264);
}

unint64_t sub_22CB7BF74()
{
  unint64_t result;

  result = qword_255C35210;
  if (!qword_255C35210)
  {
    result = MEMORY[0x22E303264](&unk_22CB9FD34, &type metadata for StocksKitServiceRequest.CurrencyConversionsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35210);
  }
  return result;
}

unint64_t sub_22CB7BFBC()
{
  unint64_t result;

  result = qword_255C35218;
  if (!qword_255C35218)
  {
    result = MEMORY[0x22E303264](&unk_22CB9FDEC, &type metadata for StocksKitServiceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35218);
  }
  return result;
}

unint64_t sub_22CB7C004()
{
  unint64_t result;

  result = qword_253F83E00;
  if (!qword_253F83E00)
  {
    result = MEMORY[0x22E303264](&unk_22CB9FD5C, &type metadata for StocksKitServiceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83E00);
  }
  return result;
}

unint64_t sub_22CB7C04C()
{
  unint64_t result;

  result = qword_253F83DF8;
  if (!qword_253F83DF8)
  {
    result = MEMORY[0x22E303264](&unk_22CB9FD84, &type metadata for StocksKitServiceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83DF8);
  }
  return result;
}

unint64_t sub_22CB7C094()
{
  unint64_t result;

  result = qword_253F83E18;
  if (!qword_253F83E18)
  {
    result = MEMORY[0x22E303264](&unk_22CB9FCA4, &type metadata for StocksKitServiceRequest.CurrencyConversionsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83E18);
  }
  return result;
}

unint64_t sub_22CB7C0DC()
{
  unint64_t result;

  result = qword_253F83E10;
  if (!qword_253F83E10)
  {
    result = MEMORY[0x22E303264](&unk_22CB9FCCC, &type metadata for StocksKitServiceRequest.CurrencyConversionsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83E10);
  }
  return result;
}

void sub_22CB7C120()
{
  JUMPOUT(0x22E303264);
}

void sub_22CB7C130()
{
  JUMPOUT(0x22E303264);
}

void sub_22CB7C140()
{
  JUMPOUT(0x22E303264);
}

void sub_22CB7C150()
{
  JUMPOUT(0x22E303264);
}

void sub_22CB7C160()
{
  JUMPOUT(0x22E303264);
}

void sub_22CB7C170()
{
  JUMPOUT(0x22E303264);
}

unint64_t sub_22CB7C184()
{
  unint64_t result;

  result = qword_253F83B80;
  if (!qword_253F83B80)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F9C4, &type metadata for CancellableStocksKitServiceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83B80);
  }
  return result;
}

unint64_t sub_22CB7C1CC()
{
  unint64_t result;

  result = qword_253F83B78;
  if (!qword_253F83B78)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F9EC, &type metadata for CancellableStocksKitServiceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83B78);
  }
  return result;
}

unint64_t sub_22CB7C214()
{
  unint64_t result;

  result = qword_253F83B98;
  if (!qword_253F83B98)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F90C, &type metadata for CancellableStocksKitServiceRequest.FetchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83B98);
  }
  return result;
}

unint64_t sub_22CB7C25C()
{
  unint64_t result;

  result = qword_253F83B90;
  if (!qword_253F83B90)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F934, &type metadata for CancellableStocksKitServiceRequest.FetchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83B90);
  }
  return result;
}

unint64_t sub_22CB7C2A4()
{
  unint64_t result;

  result = qword_253F83BB0;
  if (!qword_253F83BB0)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F854, &type metadata for CancellableStocksKitServiceRequest.CancelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83BB0);
  }
  return result;
}

unint64_t sub_22CB7C2EC()
{
  unint64_t result;

  result = qword_253F83BA8;
  if (!qword_253F83BA8)
  {
    result = MEMORY[0x22E303264](&unk_22CB9F87C, &type metadata for CancellableStocksKitServiceRequest.CancelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83BA8);
  }
  return result;
}

BOOL ExchangeStatus.isClosed.getter()
{
  unsigned __int8 *v0;

  return *v0 > 1u;
}

StocksKit::ExchangeStatus_optional __swiftcall ExchangeStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  StocksKit::ExchangeStatus_optional result;
  char v5;

  v2 = v1;
  v3 = sub_22CB9D39C();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t ExchangeStatus.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22CB7C3D8 + 4 * byte_22CBA00B0[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_22CB7C3D8()
{
  return 1852141679;
}

uint64_t sub_22CB7C3E8()
{
  return 0x6465736F6C63;
}

uint64_t sub_22CB7C3FC()
{
  return 0x656B72614D657270;
}

uint64_t sub_22CB7C418()
{
  return 0x756F487265746661;
}

unint64_t sub_22CB7C438()
{
  unint64_t result;

  result = qword_255C35220;
  if (!qword_255C35220)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for ExchangeStatus, &type metadata for ExchangeStatus);
    atomic_store(result, (unint64_t *)&qword_255C35220);
  }
  return result;
}

void sub_22CB7C47C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_22CB9D534();
  __asm { BR              X9 }
}

uint64_t sub_22CB7C4C8()
{
  sub_22CB9D048();
  swift_bridgeObjectRelease();
  return sub_22CB9D558();
}

void sub_22CB7C54C()
{
  __asm { BR              X10 }
}

uint64_t sub_22CB7C588()
{
  sub_22CB9D048();
  return swift_bridgeObjectRelease();
}

void sub_22CB7C5F8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_22CB9D534();
  __asm { BR              X9 }
}

uint64_t sub_22CB7C640()
{
  sub_22CB9D048();
  swift_bridgeObjectRelease();
  return sub_22CB9D558();
}

StocksKit::ExchangeStatus_optional sub_22CB7C6C4(Swift::String *a1)
{
  return ExchangeStatus.init(rawValue:)(*a1);
}

uint64_t sub_22CB7C6D0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_22CB7C700 + 4 * byte_22CBA00C4[*v0]))();
}

void sub_22CB7C700(_QWORD *a1@<X8>)
{
  *a1 = 1852141679;
  a1[1] = 0xE400000000000000;
}

void sub_22CB7C714(_QWORD *a1@<X8>)
{
  *a1 = 0x6465736F6C63;
  a1[1] = 0xE600000000000000;
}

void sub_22CB7C72C(_QWORD *a1@<X8>)
{
  *a1 = 0x656B72614D657270;
  a1[1] = 0xE900000000000074;
}

void sub_22CB7C74C(_QWORD *a1@<X8>)
{
  *a1 = 0x756F487265746661;
  a1[1] = 0xEA00000000007372;
}

uint64_t sub_22CB7C76C()
{
  sub_22CB7C97C();
  return sub_22CB9D078();
}

uint64_t sub_22CB7C7C8()
{
  sub_22CB7C97C();
  return sub_22CB9D06C();
}

void sub_22CB7C814(char *a1)
{
  sub_22CB725CC(*a1);
}

uint64_t getEnumTagSinglePayload for ExchangeStatus(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ExchangeStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_22CB7C8FC + 4 * byte_22CBA00CE[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_22CB7C930 + 4 * byte_22CBA00C9[v4]))();
}

uint64_t sub_22CB7C930(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB7C938(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB7C940);
  return result;
}

uint64_t sub_22CB7C94C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB7C954);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_22CB7C958(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB7C960(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExchangeStatus()
{
  return &type metadata for ExchangeStatus;
}

unint64_t sub_22CB7C97C()
{
  unint64_t result;

  result = qword_255C35228;
  if (!qword_255C35228)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for ExchangeStatus, &type metadata for ExchangeStatus);
    atomic_store(result, (unint64_t *)&qword_255C35228);
  }
  return result;
}

uint64_t sub_22CB7C9C0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  if (qword_253F839E0 != -1)
    swift_once();
  v4 = sub_22CB9CEEC();
  __swift_project_value_buffer(v4, (uint64_t)qword_253F86EA8);
  v5 = a1;
  v6 = sub_22CB9CED4();
  v7 = sub_22CB9D1A4();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v29 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = objc_msgSend(v5, sel_configuration);
    v11 = objc_msgSend(v10, sel_identifier);

    if (v11)
    {
      v12 = sub_22CB9D024();
      v14 = v13;

    }
    else
    {
      v14 = 0xE700000000000000;
      v12 = 0x6E776F6E6B6E75;
    }
    sub_22CB5DFE8(v12, v14, &v29);
    sub_22CB9D204();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CB4C000, v6, v7, "Background URL session did finish for identifier: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v9, -1, -1);
    MEMORY[0x22E303318](v8, -1, -1);

  }
  else
  {

  }
  v15 = OBJC_IVAR____TtC9StocksKit30StockServiceURLSessionDelegate_sessionDidFinishObservers;
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9StocksKit30StockServiceURLSessionDelegate_sessionDidFinishObservers);
  v29 = MEMORY[0x24BEE4AF8];
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_22CB9D354();
    v17 = result;
    if (result)
      goto LABEL_11;
LABEL_22:
    swift_bridgeObjectRelease();
    v22 = MEMORY[0x24BEE4AF8];
    goto LABEL_23;
  }
  v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v17)
    goto LABEL_22;
LABEL_11:
  if (v17 < 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  for (i = 0; i != v17; ++i)
  {
    if ((v16 & 0xC000000000000001) != 0)
    {
      v20 = MEMORY[0x22E302B08](i, v16);
    }
    else
    {
      v20 = *(_QWORD *)(v16 + 8 * i + 32);
      swift_retain();
    }
    v21 = MEMORY[0x22E3033C0](v20 + 32);
    swift_unknownObjectRelease();
    if (v21)
    {
      sub_22CB9D2DC();
      sub_22CB9D2F4();
      sub_22CB9D300();
      sub_22CB9D2E8();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  v22 = v29;
LABEL_23:
  *(_QWORD *)(v2 + v15) = v22;
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(v2 + v15);
  if (!(v23 >> 62))
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n();
    if (v24)
      goto LABEL_25;
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain_n();
  result = sub_22CB9D354();
  v24 = result;
  if (!result)
    return swift_bridgeObjectRelease_n();
LABEL_25:
  if (v24 >= 1)
  {
    v25 = 0;
    do
    {
      if ((v23 & 0xC000000000000001) != 0)
      {
        v26 = MEMORY[0x22E302B08](v25, v23);
      }
      else
      {
        v26 = *(_QWORD *)(v23 + 8 * v25 + 32);
        swift_retain();
      }
      ++v25;
      v27 = *(void (**)(uint64_t))(v26 + 16);
      v28 = swift_retain();
      v27(v28);
      swift_release();
      swift_release();
    }
    while (v24 != v25);
    return swift_bridgeObjectRelease_n();
  }
LABEL_34:
  __break(1u);
  return result;
}

id sub_22CB7CE4C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for StockServiceURLSessionDelegate()
{
  return objc_opt_self();
}

uint64_t sub_22CB7CEB0()
{
  uint64_t v0;

  swift_release();
  sub_22CB7CF1C(v0 + 32);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DisposableObserver()
{
  return objc_opt_self();
}

uint64_t sub_22CB7CEFC()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_22CB7CF0C()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_22CB7CF1C(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t type metadata accessor for IdentificationService()
{
  return objc_opt_self();
}

uint64_t sub_22CB7D040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v1 = sub_22CB9C568();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)(v0 + OBJC_IVAR____TtC9StocksKit21IdentificationService_sensitiveUserDefaults);
  v6 = (void *)sub_22CB9D018();
  v7 = objc_msgSend(v5, sel_stringForKey_, v6);

  if (v7)
  {
    v8 = sub_22CB9D024();

    return v8;
  }
  else
  {
    sub_22CB9C55C();
    v10 = sub_22CB9C550();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v11 = (void *)sub_22CB9D018();
    v12 = (void *)sub_22CB9D018();
    objc_msgSend(v5, sel_setObject_forKey_, v11, v12);

    return v10;
  }
}

uint64_t sub_22CB7D188(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  void *v15;
  void *v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t ObjectType;
  _QWORD v32[5];

  v30 = a3;
  v4 = v3;
  ObjectType = swift_getObjectType();
  v5 = sub_22CB9C568();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB9C55C();
  v9 = sub_22CB9C550();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v9 == sub_22CB7D040() && v11 == v12)
    goto LABEL_18;
  v14 = sub_22CB9D4BC();
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
    return swift_bridgeObjectRelease();
  v15 = *(void **)&v4[OBJC_IVAR____TtC9StocksKit21IdentificationService_sensitiveUserDefaults];
  v16 = (void *)sub_22CB9D018();
  v17 = (void *)sub_22CB9D018();
  objc_msgSend(v15, sel_setObject_forKey_, v16, v17);

  v18 = &v4[OBJC_IVAR____TtC9StocksKit21IdentificationService_observers];
  swift_beginAccess();
  v19 = *(_QWORD *)v18;
  if (!(*(_QWORD *)v18 >> 62))
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v20)
      goto LABEL_8;
LABEL_18:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  result = sub_22CB9D354();
  v20 = result;
  if (!result)
    goto LABEL_18;
LABEL_8:
  v29 = v9;
  if (v20 >= 1)
  {
    v22 = 0;
    do
    {
      if ((v19 & 0xC000000000000001) != 0)
      {
        v24 = MEMORY[0x22E302B08](v22, v19);
      }
      else
      {
        v24 = *(_QWORD *)(v19 + 8 * v22 + 32);
        swift_retain();
      }
      v32[3] = ObjectType;
      v32[4] = sub_22CB7DAA4();
      v32[0] = v4;
      if (MEMORY[0x22E3033C0](v24 + 16))
      {
        v25 = *(_QWORD *)(v24 + 24);
        v26 = swift_getObjectType();
        v27 = v4;
        v30(v32, v29, v11, v26, v25);
        swift_unknownObjectRelease();
      }
      else
      {
        v23 = v4;
      }
      ++v22;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);

      swift_release();
    }
    while (v20 != v22);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t sub_22CB7D418(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (uint64_t *)(v2 + OBJC_IVAR____TtC9StocksKit21IdentificationService_observers);
  swift_beginAccess();
  v5 = *v4;
  v14 = MEMORY[0x24BEE4AF8];
  if ((unint64_t)*v4 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_22CB9D354();
    v6 = result;
    if (result)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
    goto LABEL_15;
  }
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_14;
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
    return result;
  }
  for (i = 0; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      v9 = MEMORY[0x22E302B08](i, v5);
    }
    else
    {
      v9 = *(_QWORD *)(v5 + 8 * i + 32);
      swift_retain();
    }
    v10 = MEMORY[0x22E3033C0](v9 + 16);
    swift_unknownObjectRelease();
    if (v10)
    {
      sub_22CB9D2DC();
      sub_22CB9D2F4();
      sub_22CB9D300();
      sub_22CB9D2E8();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  v11 = v14;
LABEL_15:
  *v4 = v11;
  swift_bridgeObjectRelease();
  type metadata accessor for ObserverProxy();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v12 + 24) = a2;
  swift_unknownObjectWeakAssign();
  v13 = swift_beginAccess();
  MEMORY[0x22E3028F8](v13);
  if (*(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_22CB9D0B4();
  sub_22CB9D0C0();
  sub_22CB9D0A8();
  return swift_endAccess();
}

uint64_t sub_22CB7D638()
{
  return sub_22CB7D040();
}

uint64_t sub_22CB7D66C()
{
  return sub_22CB7D188(0x64695F72657375, 0xE700000000000000, MEMORY[0x24BEB1A30]);
}

uint64_t sub_22CB7D6A8()
{
  return sub_22CB7D040();
}

uint64_t sub_22CB7D6E0()
{
  return sub_22CB7D188(0x5F726573755F6461, 0xEA00000000006469, MEMORY[0x24BEB1A38]);
}

uint64_t sub_22CB7D720(uint64_t a1, uint64_t a2)
{
  return sub_22CB7D418(a1, a2);
}

uint64_t sub_22CB7D740(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)(*v1 + OBJC_IVAR____TtC9StocksKit21IdentificationService_observers);
  swift_beginAccess();
  swift_unknownObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_22CB7D944(v4, a1);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  *v3 = v5;
  return swift_bridgeObjectRelease();
}

uint64_t sub_22CB7D7E0()
{
  uint64_t v0;

  sub_22CB7CF1C(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ObserverProxy()
{
  return objc_opt_self();
}

uint64_t sub_22CB7D824(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_22CB7D83C(a1, a2, a3, a4, a5, MEMORY[0x24BEB1A30]);
}

uint64_t sub_22CB7D830(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_22CB7D83C(a1, a2, a3, a4, a5, MEMORY[0x24BEB1A38]);
}

uint64_t sub_22CB7D83C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v10 = a1[3];
  v11 = a1[4];
  v12 = __swift_project_boxed_opaque_existential_1(a1, v10);
  return sub_22CB7D898((uint64_t)v12, a2, a3, v6, v10, v11, a6);
}

uint64_t sub_22CB7D898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v17[5];

  v17[3] = a5;
  v17[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
  if (MEMORY[0x22E3033C0](a4 + 16))
  {
    v14 = *(_QWORD *)(a4 + 24);
    ObjectType = swift_getObjectType();
    a7(v17, a2, a3, ObjectType, v14);
    swift_unknownObjectRelease();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
}

uint64_t sub_22CB7D944(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t i;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;

  v11 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
LABEL_17:
    v3 = sub_22CB9D354();
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
    {
LABEL_3:
      for (i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v5 = MEMORY[0x22E302B08](i, a1);
          v6 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_14:
            __break(1u);
            return v11;
          }
        }
        else
        {
          if (i >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_17;
          }
          v5 = *(_QWORD *)(a1 + 8 * i + 32);
          swift_retain();
          v6 = i + 1;
          if (__OFADD__(i, 1))
            goto LABEL_14;
        }
        v7 = MEMORY[0x22E3033C0](v5 + 16);
        if (v7 && (v8 = v7, swift_unknownObjectRelease(), v8 == a2))
        {
          swift_release();
        }
        else
        {
          sub_22CB9D2DC();
          sub_22CB9D2F4();
          sub_22CB9D300();
          sub_22CB9D2E8();
        }
        if (v6 == v3)
          return v11;
      }
    }
  }
  return MEMORY[0x24BEE4AF8];
}

unint64_t sub_22CB7DAA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255C34E60;
  if (!qword_255C34E60)
  {
    v1 = type metadata accessor for IdentificationService();
    result = MEMORY[0x22E303264](&unk_22CBA02D0, v1);
    atomic_store(result, (unint64_t *)&qword_255C34E60);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

unint64_t sub_22CB7DB24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  sub_22CB80F20();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_22CB81020();
  v7 = sub_22CB9D378();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = *(int *)(v3 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_22CB4DCF4(v13, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_22CB80F20);
    result = sub_22CB8447C((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for Currency();
    result = sub_22CB6291C((uint64_t)v6, v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v6[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_22CB7DCB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  sub_22CB80EBC();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_22CB80F9C(0, &qword_253F83908, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))MEMORY[0x24BEE30A0]);
  v7 = sub_22CB9D378();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = *(int *)(v3 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_22CB4DCF4(v13, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_22CB80EBC);
    result = sub_22CB8447C((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for Currency();
    result = sub_22CB6291C((uint64_t)v6, v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v6[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_22CB7DE54(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_22CB819B0();
  v2 = (_QWORD *)sub_22CB9D378();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_22CB84504(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_22CB7DF70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  sub_22CB818AC();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_22CB81918(0, (unint64_t *)&qword_253F838F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE30A0]);
  v7 = sub_22CB9D378();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = *(int *)(v3 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_22CB4DCF4(v13, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_22CB818AC);
    result = sub_22CB84568((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = sub_22CB9C568();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v6, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v6[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t static PeerHandler.machService.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_22CB7E128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v0 = sub_22CB9D1C8();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22CB9D1B0();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v4);
  v6 = sub_22CB9CFC4();
  MEMORY[0x24BDAC7A8](v6);
  v8[0] = sub_22CB62544(0, &qword_253F83FB8);
  sub_22CB9CFAC();
  v8[1] = MEMORY[0x24BEE4AF8];
  sub_22CB50668(&qword_253F83FB0, v5, MEMORY[0x24BEE5698]);
  sub_22CB5F9BC(0, &qword_253F83FA0, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_22CB62AD8(&qword_253F83FA8, &qword_253F83FA0, v5);
  sub_22CB9D240();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE5750], v0);
  result = sub_22CB9D1EC();
  qword_253F83850 = result;
  return result;
}

uint64_t PeerHandler.init(session:stockService:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;

  v6 = sub_22CB7DF70(MEMORY[0x24BEE4AF8]);
  sub_22CB7E370();
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 16) = v6;
  a3[6] = v7;
  *a3 = a1;
  return sub_22CB50598(a2, (uint64_t)(a3 + 1));
}

void sub_22CB7E370()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_253F838E8)
  {
    sub_22CB81918(255, &qword_253F838A8, MEMORY[0x24BEE0460]);
    type metadata accessor for os_unfair_lock_s();
    v0 = sub_22CB9D2C4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_253F838E8);
  }
}

void sub_22CB7E3E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_253F838D8)
  {
    sub_22CB7A568();
    v0 = sub_22CB9D150();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_253F838D8);
  }
}

uint64_t PeerHandler.handleIncomingRequest(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35[2];
  _OWORD v36[3];
  uint64_t v37;
  _BYTE v38[56];

  v34 = a2;
  v32 = sub_22CB9CF94();
  v3 = *(_QWORD *)(v32 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x24BDAC7A8](v32);
  v5 = type metadata accessor for CancellableStocksKitServiceRequest(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v28 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v28 - v12;
  sub_22CB50668(&qword_253F83818, v14, (uint64_t)&unk_22CB9F76C);
  sub_22CB9CF88();
  v29 = v6;
  v15 = (uint64_t)v33;
  v30 = v4;
  v31 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v32;
  sub_22CB6291C((uint64_t)v11, (uint64_t)v13, type metadata accessor for CancellableStocksKitServiceRequest);
  if (qword_253F83858 != -1)
    swift_once();
  v28 = qword_253F83850;
  sub_22CB505B0(v15 + 8, (uint64_t)v38);
  v17 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4DCF4((uint64_t)v13, (uint64_t)v17, type metadata accessor for CancellableStocksKitServiceRequest);
  sub_22CB7EAF8(v15, (uint64_t)v36);
  sub_22CB505B0((uint64_t)v38, (uint64_t)v35);
  v18 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v31, a1, v16);
  v19 = *(unsigned __int8 *)(v29 + 80);
  v33 = v13;
  v20 = (v19 + 16) & ~v19;
  v21 = (v7 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 63) & 0xFFFFFFFFFFFFFFF8;
  v23 = (*(unsigned __int8 *)(v3 + 80) + v22 + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24 = swift_allocObject();
  sub_22CB6291C((uint64_t)v17, v24 + v20, type metadata accessor for CancellableStocksKitServiceRequest);
  v25 = v24 + v21;
  v26 = v36[1];
  *(_OWORD *)v25 = v36[0];
  *(_OWORD *)(v25 + 16) = v26;
  *(_OWORD *)(v25 + 32) = v36[2];
  *(_QWORD *)(v25 + 48) = v37;
  sub_22CB50598(v35, v24 + v22);
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v24 + v23, v18, v16);
  sub_22CB9CF70();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  return sub_22CB6257C((uint64_t)v33, type metadata accessor for CancellableStocksKitServiceRequest);
}

uint64_t sub_22CB7E768()
{
  uint64_t result;

  result = qword_253F83830;
  if (!qword_253F83830)
  {
    sub_22CB7B90C();
    sub_22CB7B950();
    sub_22CB7B994();
    type metadata accessor for StocksKitServiceResult();
  }
  return result;
}

uint64_t sub_22CB7E808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(_QWORD);
  os_unfair_lock_s *v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  os_unfair_lock_s *v34;
  os_unfair_lock_s *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a4;
  v40 = a3;
  v41 = a2;
  sub_22CB5F9BC(0, &qword_255C34EF0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v37 - v6;
  v8 = type metadata accessor for StocksKitServiceRequest(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v37 - v12;
  v14 = sub_22CB9C568();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v37 - v19;
  v21 = type metadata accessor for CancellableStocksKitServiceRequest(0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4DCF4(a1, (uint64_t)v23, v24);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v23, v14);
    v25 = *(os_unfair_lock_s **)(v41 + 48);
    v26 = (uint64_t)&v25[4];
    v27 = v25 + 6;
    os_unfair_lock_lock(v25 + 6);
    sub_22CB80688(v26, (uint64_t)v18);
    os_unfair_lock_unlock(v27);
    v20 = v18;
  }
  else
  {
    sub_22CB79304();
    v29 = (uint64_t)&v23[*(int *)(v28 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v23, v14);
    sub_22CB6291C(v29, (uint64_t)v13, type metadata accessor for StocksKitServiceRequest);
    sub_22CB4DCF4((uint64_t)v13, (uint64_t)v11, type metadata accessor for StocksKitServiceRequest);
    v30 = *((_QWORD *)v11 + 1);
    v38 = *(_QWORD *)v11;
    v31 = v11[16];
    sub_22CB77F60();
    sub_22CB7BC24((uint64_t)&v11[*(int *)(v32 + 48)], (uint64_t)v7);
    v33 = *(os_unfair_lock_s **)(v41 + 48);
    v34 = v33 + 4;
    v35 = v33 + 6;
    os_unfair_lock_lock(v33 + 6);
    sub_22CB7ED24(v34, (uint64_t)v13, (uint64_t)v20, v40, v38, v30, v31, (uint64_t)v7, v39);
    os_unfair_lock_unlock(v35);
    sub_22CB60B48((uint64_t)v7, &qword_255C34EF0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8]);
    sub_22CB6257C((uint64_t)v13, type metadata accessor for StocksKitServiceRequest);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v14);
}

uint64_t sub_22CB7EAF8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PeerHandler(a2, a1);
  return a2;
}

uint64_t sub_22CB7EB2C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = *(_QWORD *)(type metadata accessor for CancellableStocksKitServiceRequest(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v18 = *(_QWORD *)(v1 + 64);
  v3 = sub_22CB9CF94();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v7 = sub_22CB9C568();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v2, v7);
  if (EnumCaseMultiPayload != 1)
  {
    sub_22CB79304();
    v9 = *(int *)(v8 + 48);
    sub_22CB77F60();
    v11 = v0 + v2 + v9 + *(int *)(v10 + 48);
    v12 = sub_22CB9D324();
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  v14 = (v18 + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 63) & 0xFFFFFFFFFFFFFFF8;
  v16 = v0 + v14;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v16 + 8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + v15);
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((v5 + v15 + 40) & ~v5), v3);
  return swift_deallocObject();
}

uint64_t sub_22CB7ECA8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for CancellableStocksKitServiceRequest(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_22CB9CF94() - 8) + 80);
  return sub_22CB7E808(v0 + v2, v0 + v3, v0 + ((v3 + 63) & 0xFFFFFFFFFFFFFFF8), v0 + ((v4 + ((v3 + 63) & 0xFFFFFFFFFFFFFFF8) + 40) & ~v4));
}

uint64_t sub_22CB7ED24(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(unint64_t, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  void (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  __int128 v93[3];
  uint64_t v94;

  v86 = a7;
  v83 = a5;
  v84 = a6;
  v76 = a4;
  v87 = a1;
  v77 = a9;
  v85 = sub_22CB9CF94();
  v82 = *(_QWORD *)(v85 - 8);
  MEMORY[0x24BDAC7A8](v85);
  v80 = v12;
  v81 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_22CB5F9BC(0, &qword_255C34EF0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v74 = *(_QWORD *)(v14 - 8);
  v75 = *(_QWORD *)(v74 + 64);
  MEMORY[0x24BDAC7A8](v14);
  v79 = (uint64_t)&v70 - v15;
  sub_22CB5F9BC(0, &qword_253F838D0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], v13);
  MEMORY[0x24BDAC7A8](v16);
  v90 = (uint64_t)&v70 - v17;
  v18 = sub_22CB9C568();
  v92 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v89 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v91 = (char *)&v70 - v22;
  v73 = v23;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v70 - v24;
  v26 = type metadata accessor for StocksKitServiceRequest(0);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v27);
  v32 = (char *)&v70 - v31;
  MEMORY[0x24BDAC7A8](v30);
  v34 = (char *)&v70 - v33;
  if (qword_253F839E0 != -1)
    swift_once();
  v35 = sub_22CB9CEEC();
  __swift_project_value_buffer(v35, (uint64_t)qword_253F86EA8);
  sub_22CB4DCF4(a2, (uint64_t)v34, type metadata accessor for StocksKitServiceRequest);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v92 + 16);
  v78 = a3;
  v72 = v36;
  v36(v25, a3, v18);
  v37 = sub_22CB9CED4();
  v38 = sub_22CB9D198();
  v39 = os_log_type_enabled(v37, v38);
  v88 = v18;
  if (v39)
  {
    v40 = swift_slowAlloc();
    v70 = a8;
    v41 = v40;
    v42 = swift_slowAlloc();
    *(_QWORD *)&v93[0] = v42;
    *(_DWORD *)v41 = 136315394;
    v71 = (void (*)(char *, uint64_t))(v41 + 4);
    sub_22CB4DCF4((uint64_t)v34, (uint64_t)v32, type metadata accessor for StocksKitServiceRequest);
    sub_22CB4DCF4((uint64_t)v32, (uint64_t)v29, type metadata accessor for StocksKitServiceRequest);
    sub_22CB77F60();
    v44 = (uint64_t)&v29[*(int *)(v43 + 48)];
    sub_22CB6257C((uint64_t)v32, type metadata accessor for StocksKitServiceRequest);
    sub_22CB60B48(v44, &qword_255C34EF0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8]);
    v94 = sub_22CB5DFE8(0xD000000000000013, 0x800000022CBA26E0, (uint64_t *)v93);
    sub_22CB9D204();
    sub_22CB6257C((uint64_t)v34, type metadata accessor for StocksKitServiceRequest);
    *(_WORD *)(v41 + 12) = 2080;
    v45 = sub_22CB9C550();
    v94 = sub_22CB5DFE8(v45, v46, (uint64_t *)v93);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    v71 = *(void (**)(char *, uint64_t))(v92 + 8);
    v71(v25, v88);
    _os_log_impl(&dword_22CB4C000, v37, v38, "Starting fetch for request %s in XPC for id: %s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v42, -1, -1);
    v47 = v41;
    v18 = v88;
    a8 = v70;
    MEMORY[0x22E303318](v47, -1, -1);
  }
  else
  {
    sub_22CB6257C((uint64_t)v34, type metadata accessor for StocksKitServiceRequest);
    v71 = *(void (**)(char *, uint64_t))(v92 + 8);
    v71(v25, v18);
  }

  v48 = v78;
  v49 = v72;
  v72(v91, v78, v18);
  v50 = sub_22CB9D138();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v90, 1, 1, v50);
  sub_22CB505B0(v76, (uint64_t)v93);
  v51 = a8;
  v52 = v79;
  sub_22CB79DD4(v51, v79);
  v54 = v81;
  v53 = v82;
  v55 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v81, v77, v85);
  v49(v89, v48, v18);
  v56 = (*(unsigned __int8 *)(v74 + 80) + 89) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
  v57 = (v75 + *(unsigned __int8 *)(v53 + 80) + v56) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  v58 = v92;
  v59 = (v80 + *(unsigned __int8 *)(v92 + 80) + v57) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
  v60 = swift_allocObject();
  *(_QWORD *)(v60 + 16) = 0;
  *(_QWORD *)(v60 + 24) = 0;
  sub_22CB50598(v93, v60 + 32);
  v61 = v84;
  *(_QWORD *)(v60 + 72) = v83;
  *(_QWORD *)(v60 + 80) = v61;
  *(_BYTE *)(v60 + 88) = v86;
  sub_22CB7BC24(v52, v60 + v56);
  (*(void (**)(unint64_t, char *, uint64_t))(v53 + 32))(v60 + v57, v54, v55);
  v62 = *(void (**)(unint64_t, char *, uint64_t))(v58 + 32);
  v63 = v88;
  v62(v60 + v59, v89, v88);
  v64 = sub_22CB8054C(v90, (uint64_t)&unk_255C352B8, v60);
  v65 = v87;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v93[0] = *v65;
  *v65 = 0x8000000000000000;
  v67 = v64;
  v68 = (uint64_t)v91;
  sub_22CB87DA4(v67, (uint64_t)v91, isUniquelyReferenced_nonNull_native);
  *v65 = *(_QWORD *)&v93[0];
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, uint64_t))v71)(v68, v63);
}

uint64_t sub_22CB7F3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v8 + 96) = v16;
  *(_QWORD *)(v8 + 104) = v17;
  *(_QWORD *)(v8 + 80) = a6;
  *(_QWORD *)(v8 + 88) = a8;
  *(_BYTE *)(v8 + 224) = a7;
  *(_QWORD *)(v8 + 64) = a4;
  *(_QWORD *)(v8 + 72) = a5;
  *(_QWORD *)(v8 + 56) = a1;
  v9 = sub_22CB9C568();
  *(_QWORD *)(v8 + 112) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 120) = v10;
  *(_QWORD *)(v8 + 128) = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v8 + 136) = swift_task_alloc();
  v11 = sub_22CB9CF94();
  *(_QWORD *)(v8 + 144) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 152) = v12;
  *(_QWORD *)(v8 + 160) = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v8 + 168) = swift_task_alloc();
  sub_22CB5F9BC(0, &qword_255C34EF0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 176) = v14;
  *(_QWORD *)(v8 + 184) = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v8 + 192) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_22CB7F4A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v1 = *(_QWORD *)(v0 + 192);
  v21 = v1;
  v2 = *(_QWORD *)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 176);
  v19 = *(_QWORD *)(v0 + 184);
  v22 = v2;
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 120);
  v20 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 96);
  v25 = *(_BYTE *)(v0 + 224);
  v23 = *(_QWORD *)(v0 + 72);
  v24 = *(_QWORD *)(v0 + 80);
  sub_22CB505B0(*(_QWORD *)(v0 + 64), v0 + 16);
  sub_22CB79DD4(v9, v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v8, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v17, v7);
  v10 = (*(unsigned __int8 *)(v18 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v11 = v3;
  v12 = (v19 + *(unsigned __int8 *)(v3 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v13 = (v20 + *(unsigned __int8 *)(v6 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v0 + 200) = v14;
  sub_22CB50598((__int128 *)(v0 + 16), v14 + 16);
  *(_QWORD *)(v14 + 56) = v23;
  *(_QWORD *)(v14 + 64) = v24;
  *(_BYTE *)(v14 + 72) = v25;
  sub_22CB7BC24(v21, v14 + v10);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))(v14 + v12, v22, v5);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v14 + v13, v4, v7);
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 208) = v15;
  *v15 = v0;
  v15[1] = sub_22CB7F65C;
  return sub_22CB9CDA8();
}

uint64_t sub_22CB7F65C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 216) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_22CB7F700()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB7F75C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v8 + 264) = a7;
  *(_QWORD *)(v8 + 272) = a8;
  *(_BYTE *)(v8 + 177) = a5;
  *(_QWORD *)(v8 + 248) = a4;
  *(_QWORD *)(v8 + 256) = a6;
  *(_QWORD *)(v8 + 232) = a2;
  *(_QWORD *)(v8 + 240) = a3;
  v9 = sub_22CB9D108();
  *(_QWORD *)(v8 + 280) = v9;
  *(_QWORD *)(v8 + 288) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 296) = swift_task_alloc();
  v10 = sub_22CB9C568();
  *(_QWORD *)(v8 + 304) = v10;
  *(_QWORD *)(v8 + 312) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 320) = swift_task_alloc();
  v11 = sub_22CB9CFA0();
  *(_QWORD *)(v8 + 328) = v11;
  *(_QWORD *)(v8 + 336) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 344) = swift_task_alloc();
  v12 = sub_22CB9CFC4();
  *(_QWORD *)(v8 + 352) = v12;
  *(_QWORD *)(v8 + 360) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 368) = swift_task_alloc();
  v13 = sub_22CB9CF94();
  *(_QWORD *)(v8 + 376) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 384) = v14;
  *(_QWORD *)(v8 + 392) = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v8 + 400) = swift_task_alloc();
  v15 = *(_QWORD *)(type metadata accessor for CurrencyConversionsResult() - 8);
  *(_QWORD *)(v8 + 408) = v15;
  *(_QWORD *)(v8 + 416) = *(_QWORD *)(v15 + 64);
  *(_QWORD *)(v8 + 424) = swift_task_alloc();
  *(_QWORD *)(v8 + 432) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_22CB7F8A4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t);

  v1 = *(_BYTE *)(v0 + 177);
  v3 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD **)(v0 + 232);
  v5 = v4[3];
  v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  *(_QWORD *)(v0 + 160) = v3;
  *(_QWORD *)(v0 + 168) = v2;
  *(_BYTE *)(v0 + 176) = v1;
  v9 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(**(int **)(v6 + 8) + *(_QWORD *)(v6 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 440) = v7;
  *v7 = v0;
  v7[1] = sub_22CB7F954;
  return v9(*(_QWORD *)(v0 + 432), v0 + 160, *(_QWORD *)(v0 + 256), v5, v6);
}

uint64_t sub_22CB7F954()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 448) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_22CB7F9B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (qword_253F83858 != -1)
    swift_once();
  v1 = v0[53];
  v2 = v0[54];
  v3 = v0[51];
  v4 = v0[49];
  v5 = v0[50];
  v7 = v0[47];
  v6 = v0[48];
  v19 = v0[45];
  v20 = v0[44];
  v15 = v0[46];
  v16 = v0[43];
  v8 = v0[41];
  v17 = v2;
  v18 = v0[42];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v5, v0[33], v7);
  sub_22CB4DCF4(v2, v1, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = (v4 + *(unsigned __int8 *)(v3 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v11 + v9, v5, v7);
  sub_22CB6291C(v1, v11 + v10, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
  v0[12] = sub_22CB8184C;
  v0[13] = v11;
  v0[8] = MEMORY[0x24BDAC760];
  v0[9] = 1107296256;
  v0[10] = sub_22CB5DEA4;
  v0[11] = &block_descriptor_26;
  v12 = _Block_copy(v0 + 8);
  sub_22CB9CFAC();
  v0[28] = MEMORY[0x24BEE4AF8];
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  sub_22CB50668(&qword_253F83810, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  sub_22CB5F9BC(0, &qword_253F838C0, v13, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_22CB62AD8(&qword_253F838C8, &qword_253F838C0, v13);
  sub_22CB9D240();
  MEMORY[0x22E302A54](0, v15, v16, v12);
  _Block_release(v12);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v8);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v15, v20);
  sub_22CB6257C(v17, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_22CB7FC78()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  void *v24;
  uint8_t *v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (**v54)(uint64_t, uint64_t);
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v1 = *(void **)(v0 + 448);
  *(_QWORD *)(v0 + 216) = v1;
  v2 = v1;
  sub_22CB7A568();
  if ((swift_dynamicCast() & 1) != 0)
  {

    if (qword_253F839E0 != -1)
      swift_once();
    v4 = *(_QWORD *)(v0 + 312);
    v3 = *(_QWORD *)(v0 + 320);
    v5 = *(_QWORD *)(v0 + 304);
    v6 = *(_QWORD *)(v0 + 272);
    v7 = sub_22CB9CEEC();
    __swift_project_value_buffer(v7, (uint64_t)qword_253F86EA8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
    v8 = sub_22CB9CED4();
    v9 = sub_22CB9D198();
    v10 = os_log_type_enabled(v8, v9);
    v12 = *(_QWORD *)(v0 + 312);
    v11 = *(_QWORD *)(v0 + 320);
    if (v10)
    {
      v58 = *(_QWORD *)(v0 + 304);
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v61 = v14;
      *(_DWORD *)v13 = 136315138;
      v15 = sub_22CB9C550();
      *(_QWORD *)(v0 + 208) = sub_22CB5DFE8(v15, v16, &v61);
      sub_22CB9D204();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v58);
      _os_log_impl(&dword_22CB4C000, v8, v9, "Currencies fetch cancelled in XPC for id: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E303318](v14, -1, -1);
      MEMORY[0x22E303318](v13, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
    }

    if (qword_253F83858 != -1)
      swift_once();
    v29 = *(_QWORD *)(v0 + 400);
    v30 = *(_QWORD *)(v0 + 376);
    v31 = *(_QWORD *)(v0 + 384);
    v32 = *(_QWORD *)(v0 + 368);
    v33 = *(_QWORD *)(v0 + 344);
    v51 = *(_QWORD *)(v0 + 360);
    v52 = *(_QWORD *)(v0 + 352);
    v34 = *(_QWORD *)(v0 + 328);
    v50 = *(_QWORD *)(v0 + 336);
    v54 = *(void (***)(uint64_t, uint64_t))(v0 + 288);
    v56 = *(_QWORD *)(v0 + 280);
    v59 = *(_QWORD *)(v0 + 296);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v31 + 16))(v29, *(_QWORD *)(v0 + 264), v30);
    v35 = (*(unsigned __int8 *)(v31 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    v36 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v31 + 32))(v36 + v35, v29, v30);
    *(_QWORD *)(v0 + 48) = sub_22CB8161C;
    *(_QWORD *)(v0 + 56) = v36;
    *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = sub_22CB5DEA4;
    *(_QWORD *)(v0 + 40) = &block_descriptor_20;
    v37 = _Block_copy((const void *)(v0 + 16));
    sub_22CB9CFAC();
    *(_QWORD *)(v0 + 200) = MEMORY[0x24BEE4AF8];
    v38 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
    sub_22CB50668(&qword_253F83810, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    sub_22CB5F9BC(0, &qword_253F838C0, v38, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_22CB62AD8(&qword_253F838C8, &qword_253F838C0, v38);
    sub_22CB9D240();
    MEMORY[0x22E302A54](0, v32, v33, v37);
    _Block_release(v37);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v33, v34);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v32, v52);
    swift_release();
    v54[1](v59, v56);

  }
  else
  {

    if (qword_253F839E0 != -1)
      swift_once();
    v17 = *(void **)(v0 + 448);
    v18 = sub_22CB9CEEC();
    __swift_project_value_buffer(v18, (uint64_t)qword_253F86EA8);
    v19 = v17;
    v20 = v17;
    v21 = sub_22CB9CED4();
    v22 = sub_22CB9D198();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(void **)(v0 + 448);
    if (v23)
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v25 = 138543362;
      v27 = v24;
      v28 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 184) = v28;
      sub_22CB9D204();
      *v26 = v28;

      _os_log_impl(&dword_22CB4C000, v21, v22, "Currencies fetch failed in XPC, error: %{public}@", v25, 0xCu);
      sub_22CB624E0();
      swift_arrayDestroy();
      MEMORY[0x22E303318](v26, -1, -1);
      MEMORY[0x22E303318](v25, -1, -1);
    }
    else
    {

    }
    if (qword_253F83858 != -1)
      swift_once();
    v39 = *(_QWORD *)(v0 + 400);
    v40 = *(_QWORD *)(v0 + 376);
    v41 = *(_QWORD *)(v0 + 384);
    v42 = *(_QWORD *)(v0 + 368);
    v55 = *(id *)(v0 + 448);
    v57 = *(_QWORD *)(v0 + 360);
    v43 = *(_QWORD *)(v0 + 344);
    v60 = *(_QWORD *)(v0 + 352);
    v44 = *(_QWORD *)(v0 + 328);
    v53 = *(_QWORD *)(v0 + 336);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v41 + 16))(v39, *(_QWORD *)(v0 + 264), v40);
    v45 = (*(unsigned __int8 *)(v41 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    v46 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v41 + 32))(v46 + v45, v39, v40);
    *(_QWORD *)(v0 + 144) = sub_22CB81598;
    *(_QWORD *)(v0 + 152) = v46;
    *(_QWORD *)(v0 + 112) = MEMORY[0x24BDAC760];
    *(_QWORD *)(v0 + 120) = 1107296256;
    *(_QWORD *)(v0 + 128) = sub_22CB5DEA4;
    *(_QWORD *)(v0 + 136) = &block_descriptor_0;
    v47 = _Block_copy((const void *)(v0 + 112));
    sub_22CB9CFAC();
    *(_QWORD *)(v0 + 192) = MEMORY[0x24BEE4AF8];
    v48 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
    sub_22CB50668(&qword_253F83810, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    sub_22CB5F9BC(0, &qword_253F838C0, v48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_22CB62AD8(&qword_253F838C8, &qword_253F838C0, v48);
    sub_22CB9D240();
    MEMORY[0x22E302A54](0, v42, v43, v47);
    _Block_release(v47);

    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v43, v44);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v42, v60);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB80418(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = sub_22CB7B830();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4DCF4(a2, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
  swift_storeEnumTagMultiPayload();
  sub_22CB50668(&qword_253F83820, (uint64_t (*)(uint64_t))sub_22CB7B830, (uint64_t)&unk_22CB9F6B4);
  sub_22CB9CF7C();
  return sub_22CB6257C((uint64_t)v5, (uint64_t (*)(_QWORD))sub_22CB7B830);
}

uint64_t sub_22CB804E4()
{
  sub_22CB7E768();
  sub_22CB50668(&qword_253F83828, (uint64_t (*)(uint64_t))sub_22CB7E768, (uint64_t)&unk_22CB9F6B4);
  return sub_22CB9CF7C();
}

uint64_t sub_22CB8054C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_22CB9D138();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_22CB9D12C();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_22CB60B48(a1, &qword_253F838D0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990]);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_22CB9D0D8();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void sub_22CB80688(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = sub_22CB9C568();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_253F839E0 != -1)
    swift_once();
  v9 = sub_22CB9CEEC();
  __swift_project_value_buffer(v9, (uint64_t)qword_253F86EA8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  v10 = sub_22CB9CED4();
  v11 = sub_22CB9D1A4();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v23 = v2;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc();
    v22 = a2;
    v15 = v14;
    v25 = v14;
    v21 = a1;
    *(_DWORD *)v13 = 136315138;
    v20[1] = v13 + 4;
    v16 = sub_22CB9C550();
    v24 = sub_22CB5DFE8(v16, v17, &v25);
    a1 = v21;
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    _os_log_impl(&dword_22CB4C000, v10, v11, "Cancelling request in XPC with id: %s", v13, 0xCu);
    swift_arrayDestroy();
    v18 = v15;
    a2 = v22;
    MEMORY[0x22E303318](v18, -1, -1);
    MEMORY[0x22E303318](v13, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  if (*(_QWORD *)(*(_QWORD *)a1 + 16))
  {
    sub_22CB84568(a2);
    if ((v19 & 1) != 0)
    {
      sub_22CB7A568();
      swift_retain();
      sub_22CB9D144();
      swift_release();
    }
  }
}

void PeerHandler.handleCancellation(error:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  _QWORD v14[2];

  v2 = sub_22CB9CF64();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_253F839E0 != -1)
    swift_once();
  v6 = sub_22CB9CEEC();
  __swift_project_value_buffer(v6, (uint64_t)qword_253F86EA8);
  v7 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v7(v5, a1, v2);
  v8 = sub_22CB9CED4();
  v9 = sub_22CB9D198();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v10 = 138412290;
    v14[0] = v10 + 4;
    sub_22CB50668(&qword_253F83808, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6678], MEMORY[0x24BEE6688]);
    swift_allocError();
    v7(v12, (uint64_t)v5, v2);
    v13 = _swift_stdlib_bridgeErrorToNSError();
    v14[1] = v13;
    sub_22CB9D204();
    *v11 = v13;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&dword_22CB4C000, v8, v9, "XPC is cancelling because error: %@", v10, 0xCu);
    sub_22CB624E0();
    swift_arrayDestroy();
    MEMORY[0x22E303318](v11, -1, -1);
    MEMORY[0x22E303318](v10, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

}

void sub_22CB80B14(uint64_t a1)
{
  PeerHandler.handleCancellation(error:)(a1);
}

uint64_t destroy for PeerHandler(uint64_t a1)
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return swift_release();
}

uint64_t initializeWithCopy for PeerHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a2 + 8;
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for PeerHandler(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PeerHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PeerHandler(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PeerHandler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PeerHandler()
{
  return &type metadata for PeerHandler;
}

void sub_22CB80EBC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_253F838A0)
  {
    type metadata accessor for Currency();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_253F838A0);
  }
}

void sub_22CB80F20()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_253F83898)
  {
    type metadata accessor for Currency();
    sub_22CB80F9C(255, &qword_253F83F98, MEMORY[0x24BEE0460]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_253F83898);
  }
}

void sub_22CB80F9C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for Currency();
    v7 = sub_22CB50668(&qword_253F83F70, (uint64_t (*)(uint64_t))type metadata accessor for Currency, (uint64_t)&protocol conformance descriptor for Currency);
    v8 = a3(a1, v6, MEMORY[0x24BEE13C8], v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_22CB81020()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_253F83900)
  {
    type metadata accessor for Currency();
    sub_22CB80F9C(255, &qword_253F83F98, MEMORY[0x24BEE0460]);
    sub_22CB50668(&qword_253F83F70, (uint64_t (*)(uint64_t))type metadata accessor for Currency, (uint64_t)&protocol conformance descriptor for Currency);
    v0 = sub_22CB9D384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_253F83900);
  }
}

uint64_t sub_22CB810C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_22CB5F9BC(0, &qword_255C34EF0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 89) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v14 = *(_QWORD *)(v2 + 64);
  v16 = sub_22CB9CF94();
  v4 = *(_QWORD *)(v16 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v13 = *(_QWORD *)(v4 + 64);
  v15 = sub_22CB9C568();
  v6 = *(_QWORD *)(v15 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  v8 = sub_22CB9D324();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v3, 1, v8))
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v0 + v3, v8);
  v10 = (v3 + v14 + v5) & ~v5;
  v11 = (v10 + v13 + v7) & ~v7;
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v10, v16);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v11, v15);
  return swift_deallocObject();
}

uint64_t sub_22CB8121C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;

  sub_22CB5F9BC(0, &qword_255C34EF0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v4 = (*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 89) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  sub_22CB9CF94();
  sub_22CB9C568();
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + 32;
  v8 = *(_QWORD *)(v1 + 72);
  v9 = *(_QWORD *)(v1 + 80);
  v10 = v1 + v4;
  v11 = *(_BYTE *)(v1 + 88);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_22CB62A2C;
  return sub_22CB7F3BC(a1, v5, v6, v7, v8, v9, v11, v10);
}

uint64_t sub_22CB81338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_22CB5F9BC(0, &qword_255C34EF0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v14 = *(_QWORD *)(v2 + 64);
  v16 = sub_22CB9CF94();
  v4 = *(_QWORD *)(v16 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v13 = *(_QWORD *)(v4 + 64);
  v15 = sub_22CB9C568();
  v6 = *(_QWORD *)(v15 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v8 = sub_22CB9D324();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v3, 1, v8))
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v0 + v3, v8);
  v10 = (v3 + v14 + v5) & ~v5;
  v11 = (v10 + v13 + v7) & ~v7;
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v10, v16);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v11, v15);
  return swift_deallocObject();
}

uint64_t sub_22CB81488(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;

  sub_22CB5F9BC(0, &qword_255C34EF0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(sub_22CB9CF94() - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(sub_22CB9C568() - 8) + 80);
  v12 = v9 + v10 + v11;
  v13 = v1 + 16;
  v14 = *(_QWORD *)(v1 + 56);
  v15 = *(_QWORD *)(v1 + 64);
  v16 = v1 + v6;
  v17 = v1 + v9;
  v18 = v1 + (v12 & ~v11);
  v19 = *(_BYTE *)(v1 + 72);
  v20 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v20;
  *v20 = v2;
  v20[1] = sub_22CB62D98;
  return sub_22CB7F75C(a1, v13, v14, v15, v19, v16, v17, v18);
}

uint64_t sub_22CB81598()
{
  return sub_22CB81624();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t objectdestroy_12Tm()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_22CB9CF94();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_22CB8161C()
{
  return sub_22CB81624();
}

uint64_t sub_22CB81624()
{
  sub_22CB9CF94();
  return sub_22CB804E4();
}

uint64_t sub_22CB81664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  void (*v22)(unint64_t, uint64_t);

  v1 = sub_22CB9CF94();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = (int *)type metadata accessor for CurrencyConversionsResult();
  v6 = (v3 + v4 + *(unsigned __int8 *)(*((_QWORD *)v5 - 1) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v5 - 1) + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v7 = v0 + v6;
  swift_bridgeObjectRelease();
  v8 = v0 + v6 + v5[5];
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for DataSource(0);
  v10 = v8 + *(int *)(v9 + 20);
  v11 = type metadata accessor for DataSource.Logo(0);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    v12 = sub_22CB9C4F0();
    v13 = *(_QWORD *)(v12 - 8);
    v22 = *(void (**)(unint64_t, uint64_t))(v13 + 8);
    v22(v10, v12);
    v14 = v10 + *(int *)(v11 + 20);
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12))
      v22(v14, v12);
  }
  v15 = v8 + *(int *)(v9 + 24);
  v16 = sub_22CB9C4F0();
  v17 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    (*(void (**)(unint64_t, uint64_t))(v17 + 8))(v15, v16);
  v18 = v7 + v5[6];
  v19 = sub_22CB9C544();
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(v18, v19);
  v20(v7 + v5[7], v19);
  return swift_deallocObject();
}

uint64_t sub_22CB8184C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(sub_22CB9CF94() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CurrencyConversionsResult() - 8) + 80);
  return sub_22CB80418(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

void sub_22CB818AC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_253F837F8)
  {
    sub_22CB9C568();
    sub_22CB7E3E4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_253F837F8);
  }
}

void sub_22CB81918(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v6 = sub_22CB9C568();
    v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
    sub_22CB7E3E4();
    v9 = v8;
    v10 = sub_22CB50668(&qword_253F837E8, v7, MEMORY[0x24BDCEA88]);
    v11 = a3(a1, v6, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

void sub_22CB819B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255C352D0)
  {
    v0 = sub_22CB9D384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255C352D0);
  }
}

uint64_t sub_22CB81A20@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  char *v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v34 = a1;
  v35 = a2;
  v2 = sub_22CB9C5C8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v33 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB81FA8();
  v6 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB82008();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v32 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v32 - v16;
  v18 = sub_22CB9C64C();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB9C5E0();
  sub_22CB9C5D4();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  sub_22CB9C5BC();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
  v22 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_22CB8205C((uint64_t)v17, (uint64_t)v8);
  sub_22CB8205C((uint64_t)v15, v22);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v23((uint64_t)v8, 1, v2) == 1)
  {
    sub_22CB6257C((uint64_t)v15, (uint64_t (*)(_QWORD))sub_22CB82008);
    sub_22CB6257C((uint64_t)v17, (uint64_t (*)(_QWORD))sub_22CB82008);
    if (v23(v22, 1, v2) == 1)
    {
      sub_22CB6257C((uint64_t)v8, (uint64_t (*)(_QWORD))sub_22CB82008);
LABEL_8:
      v27 = sub_22CB9CA18();
      swift_allocObject();
      result = sub_22CB9CA0C();
      v29 = MEMORY[0x24BEB1A48];
LABEL_12:
      v31 = v35;
      v35[3] = v27;
      v31[4] = v29;
      *v31 = result;
      return result;
    }
    goto LABEL_6;
  }
  sub_22CB8205C((uint64_t)v8, (uint64_t)v12);
  if (v23(v22, 1, v2) == 1)
  {
    sub_22CB6257C((uint64_t)v15, (uint64_t (*)(_QWORD))sub_22CB82008);
    sub_22CB6257C((uint64_t)v17, (uint64_t (*)(_QWORD))sub_22CB82008);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
LABEL_6:
    sub_22CB6257C((uint64_t)v8, (uint64_t (*)(_QWORD))sub_22CB81FA8);
    goto LABEL_9;
  }
  v24 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v33, v22, v2);
  sub_22CB820A0();
  v25 = sub_22CB9D00C();
  v26 = *(void (**)(char *, uint64_t))(v3 + 8);
  v26(v24, v2);
  sub_22CB6257C((uint64_t)v15, (uint64_t (*)(_QWORD))sub_22CB82008);
  sub_22CB6257C((uint64_t)v17, (uint64_t (*)(_QWORD))sub_22CB82008);
  v26(v12, v2);
  sub_22CB6257C((uint64_t)v8, (uint64_t (*)(_QWORD))sub_22CB82008);
  if ((v25 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  v30 = v34;
  __swift_project_boxed_opaque_existential_1(v34, v34[3]);
  sub_22CB650E0(0, &qword_255C352E0);
  result = sub_22CB9CD0C();
  if (v37)
  {
    __swift_project_boxed_opaque_existential_1(v30, v30[3]);
    sub_22CB650E0(0, &qword_255C352E8);
    result = sub_22CB9CD0C();
    if (v36)
    {
      v27 = sub_22CB9C94C();
      swift_allocObject();
      result = sub_22CB9C940();
      v29 = MEMORY[0x24BEB1910];
      goto LABEL_12;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ManagerAssembly()
{
  return objc_opt_self();
}

uint64_t sub_22CB81E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = sub_22CB9CE08();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB9CD48();
  sub_22CB650E0(0, &qword_253F83548);
  sub_22CB9CD9C();
  swift_release();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEB4660], v0);
  sub_22CB9CCB8();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_22CB9CD48();
  sub_22CB9C82C();
  sub_22CB9CD9C();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_22CB81FA8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_255C352D8)
  {
    sub_22CB82008();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_255C352D8);
  }
}

void sub_22CB82008()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255C35088)
  {
    sub_22CB9C5C8();
    v0 = sub_22CB9D1F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255C35088);
  }
}

uint64_t sub_22CB8205C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_22CB82008();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_22CB820A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255C352F0;
  if (!qword_255C352F0)
  {
    v1 = sub_22CB9C5C8();
    result = MEMORY[0x22E303264](MEMORY[0x24BDCED28], v1);
    atomic_store(result, (unint64_t *)&qword_255C352F0);
  }
  return result;
}

uint64_t sub_22CB820E8()
{
  uint64_t v0;

  v0 = sub_22CB9CEEC();
  __swift_allocate_value_buffer(v0, qword_253F86EA8);
  __swift_project_value_buffer(v0, (uint64_t)qword_253F86EA8);
  return sub_22CB9CEE0();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_22CB821A0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_22CB85390(0, v1, 0);
    v2 = v9;
    v4 = a1 + 40;
    do
    {
      sub_22CB9D054();
      sub_22CB9D168();
      v6 = *(_QWORD *)(v9 + 16);
      v5 = *(_QWORD *)(v9 + 24);
      if (v6 >= v5 >> 1)
        sub_22CB85390(v5 > 1, v6 + 1, 1);
      *(_QWORD *)(v9 + 16) = v6 + 1;
      v7 = v9 + 16 * v6;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0xE000000000000000;
      v4 += 16;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t CurrencyConversions.currencies.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t Currency.codingKey.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = _s9StocksKit8CurrencyV10identifierSSvg_0();
  v4 = v3;
  a1[3] = (uint64_t)&type metadata for Currency.StringCodingKey;
  a1[4] = sub_22CB82354();
  result = swift_allocObject();
  *a1 = result;
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 1;
  return result;
}

unint64_t sub_22CB82354()
{
  unint64_t result;

  result = qword_253F83880;
  if (!qword_253F83880)
  {
    result = MEMORY[0x22E303264](&unk_22CBA07B0, &type metadata for Currency.StringCodingKey);
    atomic_store(result, (unint64_t *)&qword_253F83880);
  }
  return result;
}

uint64_t sub_22CB82398()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t Currency.init<A>(codingKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = sub_22CB9C604();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB9D648();
  _s9StocksKit8CurrencyVyACSScfC_0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, v6);
  v10 = type metadata accessor for Currency();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a3, 0, 1, v10);
}

uint64_t type metadata accessor for Currency()
{
  uint64_t result;

  result = qword_253F83F80;
  if (!qword_253F83F80)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_22CB824D4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_22CB82500@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

uint64_t sub_22CB82514()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void sub_22CB82520(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t sub_22CB82530()
{
  sub_22CB82354();
  return sub_22CB9D654();
}

uint64_t sub_22CB82558()
{
  sub_22CB82354();
  return sub_22CB9D660();
}

uint64_t Currency.hash(into:)()
{
  sub_22CB9C604();
  sub_22CB50668(&qword_253F83B68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED80], MEMORY[0x24BDCED98]);
  return sub_22CB9CFE8();
}

uint64_t sub_22CB825DC()
{
  return 0x65756C6156776172;
}

uint64_t sub_22CB825F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_22CB9D4BC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_22CB82688()
{
  sub_22CB82808();
  return sub_22CB9D654();
}

uint64_t sub_22CB826B0()
{
  sub_22CB82808();
  return sub_22CB9D660();
}

uint64_t Currency.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_22CB5F8B8(0, &qword_255C352F8, (uint64_t (*)(void))sub_22CB82808, (uint64_t)&type metadata for Currency.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB82808();
  sub_22CB9D57C();
  sub_22CB9C604();
  sub_22CB50668(&qword_255C35308, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED80], MEMORY[0x24BDCED90]);
  sub_22CB9D480();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_22CB82808()
{
  unint64_t result;

  result = qword_255C35300;
  if (!qword_255C35300)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0760, &type metadata for Currency.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35300);
  }
  return result;
}

uint64_t Currency.hashValue.getter()
{
  sub_22CB9D534();
  sub_22CB9C604();
  sub_22CB50668(&qword_253F83B68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED80], MEMORY[0x24BDCED98]);
  sub_22CB9CFE8();
  return sub_22CB9D558();
}

uint64_t Currency.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v17 = a2;
  v19 = sub_22CB9C604();
  v3 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v18 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB5F8B8(0, &qword_255C35310, (uint64_t (*)(void))sub_22CB82808, (uint64_t)&type metadata for Currency.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v20 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - v7;
  v9 = type metadata accessor for Currency();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB82808();
  v12 = v21;
  sub_22CB9D570();
  if (!v12)
  {
    v13 = (uint64_t)v11;
    sub_22CB50668(&qword_255C35318, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED80], MEMORY[0x24BDCEDA0]);
    v15 = v18;
    v14 = v19;
    sub_22CB9D408();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v20);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v13, v15, v14);
    sub_22CB82BD4(v13, v17);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_22CB82AA8()
{
  sub_22CB9D534();
  sub_22CB9C604();
  sub_22CB50668(&qword_253F83B68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED80], MEMORY[0x24BDCED98]);
  sub_22CB9CFE8();
  return sub_22CB9D558();
}

uint64_t sub_22CB82B14()
{
  sub_22CB9C604();
  sub_22CB50668(&qword_253F83B68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED80], MEMORY[0x24BDCED98]);
  return sub_22CB9CFE8();
}

uint64_t sub_22CB82B6C()
{
  sub_22CB9D534();
  sub_22CB9C604();
  sub_22CB50668(&qword_253F83B68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED80], MEMORY[0x24BDCED98]);
  sub_22CB9CFE8();
  return sub_22CB9D558();
}

uint64_t sub_22CB82BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Currency();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_22CB82C18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Currency.init(from:)(a1, a2);
}

uint64_t sub_22CB82C2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_22CB5F8B8(0, &qword_255C352F8, (uint64_t (*)(void))sub_22CB82808, (uint64_t)&type metadata for Currency.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB82808();
  sub_22CB9D57C();
  sub_22CB9C604();
  sub_22CB50668(&qword_255C35308, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED80], MEMORY[0x24BDCED90]);
  sub_22CB9D480();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_22CB82D5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = _s9StocksKit8CurrencyV10identifierSSvg_0();
  v4 = v3;
  a1[3] = (uint64_t)&type metadata for Currency.StringCodingKey;
  a1[4] = sub_22CB82354();
  result = swift_allocObject();
  *a1 = result;
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t CurrencyConversions.conversionRate(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  double v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = type metadata accessor for Currency();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v29 - v9;
  v32 = *v2;
  v11 = sub_22CB83194(a1, a2);
  if (qword_253F839E0 != -1)
    swift_once();
  v12 = sub_22CB9CEEC();
  __swift_project_value_buffer(v12, (uint64_t)qword_253F86EA8);
  sub_22CB84900(a1, (uint64_t)v10);
  sub_22CB84900(a2, (uint64_t)v8);
  swift_bridgeObjectRetain_n();
  v13 = sub_22CB9CED4();
  v14 = sub_22CB9D1A4();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v30 = swift_slowAlloc();
    v32 = v30;
    *(_DWORD *)v15 = 136446722;
    v16 = _s9StocksKit8CurrencyV10identifierSSvg_0();
    v31 = sub_22CB5DFE8(v16, v17, &v32);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    sub_22CB6257C((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
    *(_WORD *)(v15 + 12) = 2082;
    v18 = _s9StocksKit8CurrencyV10identifierSSvg_0();
    v31 = sub_22CB5DFE8(v18, v19, &v32);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    sub_22CB6257C((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
    *(_WORD *)(v15 + 22) = 2082;
    if (v11)
    {
      v31 = sub_22CB821A0(v11);
      sub_22CB88B18(0, &qword_255C35320, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
      sub_22CB84944();
      v20 = sub_22CB9CFF4();
      v22 = v21;
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = 0xE300000000000000;
      v20 = 7104878;
    }
    v31 = sub_22CB5DFE8(v20, v22, &v32);
    sub_22CB9D204();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CB4C000, v13, v14, "Converting %{public}s -> %{public}s: %{public}s", (uint8_t *)v15, 0x20u);
    v28 = v30;
    swift_arrayDestroy();
    MEMORY[0x22E303318](v28, -1, -1);
    MEMORY[0x22E303318](v15, -1, -1);

    if (!v11)
      return 0;
  }
  else
  {
    sub_22CB6257C((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
    sub_22CB6257C((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Currency);

    swift_bridgeObjectRelease_n();
    if (!v11)
      return 0;
  }
  v23 = *(_QWORD *)(v11 + 16);
  if (v23)
  {
    v24 = (double *)(v11 + 40);
    v25 = 1.0;
    do
    {
      v26 = *(v24 - 1);
      if ((*(_BYTE *)v24 & 1) != 0)
        v25 = v25 / v26;
      else
        v25 = v25 * v26;
      v24 += 2;
      --v23;
    }
    while (v23);
  }
  else
  {
    v25 = 1.0;
  }
  swift_bridgeObjectRelease();
  return *(_QWORD *)&v25;
}

uint64_t sub_22CB83194(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v40;

  sub_22CB5F9BC(0, &qword_255C35368, (uint64_t (*)(uint64_t))sub_22CB8861C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v40 - v6;
  sub_22CB80EBC();
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Currency();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  if (!*(_QWORD *)(*v2 + 16))
    goto LABEL_29;
  v16 = sub_22CB8447C(a2);
  if ((v17 & 1) == 0)
  {
    v18 = 0;
LABEL_8:
    if (!*(_QWORD *)(v15 + 16))
    {
LABEL_16:
      v23 = 0;
LABEL_17:
      if (!v18)
        goto LABEL_29;
      goto LABEL_18;
    }
LABEL_9:
    v24 = sub_22CB8447C(a1);
    if ((v25 & 1) != 0)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v24);
      v26 = *(_QWORD *)(v23 + 16);
      swift_bridgeObjectRetain();
      if (!v26)
        goto LABEL_17;
      swift_bridgeObjectRetain();
      v27 = sub_22CB8447C(a2);
      if ((v28 & 1) != 0)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v27);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        sub_22CB88B18(0, &qword_255C35378, (uint64_t)&type metadata for CurrencyConversions.ConversionStep, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
        v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = xmmword_22CB9F380;
        *(_QWORD *)(v23 + 32) = v29;
        *(_BYTE *)(v23 + 40) = 1;
        return v23;
      }
      swift_bridgeObjectRelease();
      if (!v18)
      {
LABEL_29:
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      v23 = 0;
      if (!v18)
        goto LABEL_29;
    }
LABEL_18:
    v30 = swift_bridgeObjectRetain();
    sub_22CB8357C(v30, (uint64_t)v7);
    swift_bridgeObjectRelease();
    sub_22CB8861C();
    v32 = v31;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v7, 1, v31) == 1)
    {
      sub_22CB88684((uint64_t)v7);
    }
    else
    {
      v33 = *(_QWORD *)&v7[*(int *)(v32 + 48)];
      v34 = *(int *)(v9 + 48);
      sub_22CB82BD4((uint64_t)v7, (uint64_t)v11);
      *(_QWORD *)&v11[v34] = v33;
      v35 = *(_QWORD *)&v11[*(int *)(v9 + 48)];
      sub_22CB82BD4((uint64_t)v11, (uint64_t)v14);
      if (v23 && *(_QWORD *)(v23 + 16))
      {
        swift_bridgeObjectRetain();
        v36 = sub_22CB8447C((uint64_t)v14);
        if ((v37 & 1) != 0)
        {
          v38 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v36);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          sub_22CB88B18(0, &qword_255C35378, (uint64_t)&type metadata for CurrencyConversions.ConversionStep, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
          v23 = swift_allocObject();
          *(_OWORD *)(v23 + 16) = xmmword_22CB9E8F0;
          *(_QWORD *)(v23 + 32) = v35;
          *(_BYTE *)(v23 + 40) = 0;
          *(_QWORD *)(v23 + 48) = v38;
          *(_BYTE *)(v23 + 56) = 1;
          sub_22CB6257C((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
          return v23;
        }
        swift_bridgeObjectRelease();
      }
      sub_22CB6257C((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
    }
    swift_bridgeObjectRelease();
    if (!v23)
      return v23;
    goto LABEL_29;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
  v19 = *(_QWORD *)(v18 + 16);
  swift_bridgeObjectRetain();
  if (!v19)
    goto LABEL_8;
  swift_bridgeObjectRetain();
  v20 = sub_22CB8447C(a1);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v15 + 16))
      goto LABEL_16;
    goto LABEL_9;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v20);
  swift_bridgeObjectRelease_n();
  sub_22CB88B18(0, &qword_255C35378, (uint64_t)&type metadata for CurrencyConversions.ConversionStep, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_22CB9F380;
  *(_QWORD *)(v23 + 32) = v22;
  *(_BYTE *)(v23 + 40) = 0;
  return v23;
}

uint64_t sub_22CB8357C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_22CB8861C();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_22CB88904(a1);
  if ((v11 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v10)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, 1, 1, v5);
  v12 = *(int *)(v5 + 48);
  sub_22CB8898C((uint64_t)v8, result, v10, 0, a1);
  v14 = v13;
  *(_QWORD *)&v8[v12] = v13;
  sub_22CB84900((uint64_t)v8, a2);
  *(_QWORD *)(a2 + *(int *)(v5 + 48)) = v14;
  sub_22CB6257C((uint64_t)v8, (uint64_t (*)(_QWORD))sub_22CB8861C);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, v5);
}

uint64_t sub_22CB836BC()
{
  sub_22CB9D054();
  sub_22CB9D168();
  return 0;
}

uint64_t sub_22CB83734()
{
  return sub_22CB836BC();
}

uint64_t sub_22CB83740()
{
  return 0x69737265766E6F63;
}

uint64_t sub_22CB83764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x69737265766E6F63 && a2 == 0xEF6F547942736E6FLL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_22CB9D4BC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_22CB8381C()
{
  sub_22CB849A4();
  return sub_22CB9D654();
}

uint64_t sub_22CB83844()
{
  sub_22CB849A4();
  return sub_22CB9D660();
}

uint64_t CurrencyConversions.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[4];

  sub_22CB5F8B8(0, &qword_253F83980, (uint64_t (*)(void))sub_22CB849A4, (uint64_t)&type metadata for CurrencyConversions.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v10 - v6;
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB849A4();
  sub_22CB9D57C();
  v10[3] = v8;
  sub_22CB88254(0, &qword_253F83F90, MEMORY[0x24BEE0460]);
  sub_22CB84A28(&qword_253F838B0, sub_22CB849E8, sub_22CB84A04, MEMORY[0x24BEE04C0]);
  sub_22CB9D480();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t CurrencyConversions.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v12 = a2;
  sub_22CB5F8B8(0, &qword_253F83740, (uint64_t (*)(void))sub_22CB849A4, (uint64_t)&type metadata for CurrencyConversions.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v11 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB849A4();
  sub_22CB9D570();
  if (!v2)
  {
    v9 = v12;
    sub_22CB88254(0, &qword_253F83F90, MEMORY[0x24BEE0460]);
    sub_22CB84A28(&qword_253F836D8, sub_22CB84AB0, sub_22CB84ACC, MEMORY[0x24BEE04E0]);
    sub_22CB9D408();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *v9 = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_22CB83B48@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return CurrencyConversions.init(from:)(a1, a2);
}

uint64_t sub_22CB83B5C(_QWORD *a1)
{
  return CurrencyConversions.encode(to:)(a1);
}

uint64_t sub_22CB83B70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  int64_t v30;
  unint64_t (*v31)@<X0>(unint64_t *@<X8>);
  unint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t (*v39)@<X0>(unint64_t *@<X8>);
  uint64_t v40;
  double v41;
  double v42;
  int v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t (*v62)();
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int64_t v68;
  unint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t (*v76)();
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int isUniquelyReferenced_nonNull_native;
  char v87;
  unint64_t v88;
  uint64_t v89;
  _BOOL8 v90;
  uint64_t v91;
  char v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  void (*v109)(uint64_t);
  uint64_t v110;
  unint64_t (*v111)@<X0>(unint64_t *@<X8>);
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;

  v102 = type metadata accessor for Currency();
  v113 = *(_QWORD *)(v102 - 8);
  v4 = MEMORY[0x24BDAC7A8](v102);
  v114 = (uint64_t)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v101 = (char *)&v98 - v7;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v98 - v9;
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v98 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v98 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v111 = (unint64_t (*)@<X0>(unint64_t *@<X8>))((char *)&v98 - v18);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v110 = (uint64_t)&v98 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v98 - v21;
  v23 = sub_22CB9C8EC();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  *(_QWORD *)&v112 = (char *)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB5F9BC(0, &qword_253F83890, (uint64_t (*)(uint64_t))type metadata accessor for Currency, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v98 - v27;
  v29 = (_QWORD *)sub_22CB7DB24(MEMORY[0x24BEE4AF8]);
  v119 = MEMORY[0x24BEE4B08];
  v30 = *(_QWORD *)(a1 + 16);
  v100 = v28;
  v99 = a2;
  if (!v30)
  {
    swift_bridgeObjectRelease();
    v111 = 0;
    v56 = MEMORY[0x24BEE4B08];
LABEL_16:
    v57 = 0;
    v58 = *(_QWORD *)(v56 + 56);
    v115 = v56 + 56;
    v59 = 1 << *(_BYTE *)(v56 + 32);
    v60 = -1;
    if (v59 < 64)
      v60 = ~(-1 << v59);
    v61 = v60 & v58;
    v116 = (unint64_t)(v59 + 63) >> 6;
    v112 = xmmword_22CB9F380;
    v62 = type metadata accessor for Currency;
    v63 = (uint64_t)v101;
    v64 = v29;
    while (1)
    {
      if (v61)
      {
        v66 = __clz(__rbit64(v61));
        v61 &= v61 - 1;
        v67 = v66 | (v57 << 6);
      }
      else
      {
        v68 = v57 + 1;
        if (__OFADD__(v57, 1))
          goto LABEL_57;
        if (v68 >= v116)
        {
LABEL_52:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v113 + 56))(v28, 1, 1, v102);
LABEL_53:
          swift_release();
          result = sub_22CB85E30((uint64_t)v111);
          *v99 = v64;
          return result;
        }
        v69 = *(_QWORD *)(v115 + 8 * v68);
        ++v57;
        if (!v69)
        {
          v57 = v68 + 1;
          if (v68 + 1 >= v116)
            goto LABEL_52;
          v69 = *(_QWORD *)(v115 + 8 * v57);
          if (!v69)
          {
            v57 = v68 + 2;
            if (v68 + 2 >= v116)
              goto LABEL_52;
            v69 = *(_QWORD *)(v115 + 8 * v57);
            if (!v69)
            {
              v70 = v68 + 3;
              if (v70 >= v116)
                goto LABEL_52;
              v69 = *(_QWORD *)(v115 + 8 * v70);
              if (!v69)
              {
                while (1)
                {
                  v57 = v70 + 1;
                  if (__OFADD__(v70, 1))
                    goto LABEL_59;
                  if (v57 >= v116)
                    goto LABEL_52;
                  v69 = *(_QWORD *)(v115 + 8 * v57);
                  ++v70;
                  if (v69)
                    goto LABEL_37;
                }
              }
              v57 = v70;
            }
          }
        }
LABEL_37:
        v61 = (v69 - 1) & v69;
        v67 = __clz(__rbit64(v69)) + (v57 << 6);
      }
      v71 = v113;
      v72 = *(_QWORD *)(v113 + 72);
      sub_22CB84900(*(_QWORD *)(v56 + 48) + v72 * v67, (uint64_t)v28);
      v73 = v102;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v28, 0, 1, v102);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v28, 1, v73) == 1)
        goto LABEL_53;
      sub_22CB82BD4((uint64_t)v28, v63);
      if (!v64[2])
        break;
      sub_22CB8447C(v63);
      if ((v74 & 1) == 0)
        break;
LABEL_21:
      sub_22CB6257C(v63, (uint64_t (*)(_QWORD))v62);
    }
    v117 = v57;
    v75 = v56;
    v76 = v62;
    v77 = v114;
    sub_22CB84900(v63, v114);
    sub_22CB5F9BC(0, &qword_255C35360, (uint64_t (*)(uint64_t))sub_22CB80EBC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    sub_22CB80EBC();
    v79 = v78;
    v80 = *(unsigned __int8 *)(*(_QWORD *)(v78 - 8) + 80);
    v81 = (v80 + 32) & ~v80;
    v82 = swift_allocObject();
    *(_OWORD *)(v82 + 16) = v112;
    v83 = v82 + v81;
    v84 = *(int *)(v79 + 48);
    sub_22CB84900(v63, v83);
    *(_QWORD *)(v83 + v84) = 0x3FF0000000000000;
    v85 = sub_22CB7DCB4(v82);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v118 = v64;
    v88 = sub_22CB8447C(v77);
    v89 = v64[2];
    v90 = (v87 & 1) == 0;
    v91 = v89 + v90;
    if (__OFADD__(v89, v90))
      goto LABEL_55;
    v92 = v87;
    if (v64[3] < v91)
    {
      sub_22CB87194(v91, isUniquelyReferenced_nonNull_native);
      v93 = sub_22CB8447C(v114);
      if ((v92 & 1) != (v94 & 1))
        goto LABEL_60;
      v88 = v93;
      v64 = v118;
      if ((v92 & 1) == 0)
        goto LABEL_48;
LABEL_19:
      v65 = v64[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v65 + 8 * v88) = v85;
LABEL_20:
      swift_bridgeObjectRelease();
      v62 = v76;
      sub_22CB6257C(v114, (uint64_t (*)(_QWORD))v76);
      v63 = (uint64_t)v101;
      v28 = v100;
      v56 = v75;
      v57 = v117;
      goto LABEL_21;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v64 = v118;
      if ((v87 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      sub_22CB88028();
      v64 = v118;
      if ((v92 & 1) != 0)
        goto LABEL_19;
    }
LABEL_48:
    v64[(v88 >> 6) + 8] |= 1 << v88;
    sub_22CB84900(v114, v64[6] + v88 * v72);
    *(_QWORD *)(v64[7] + 8 * v88) = v85;
    v95 = v64[2];
    v54 = __OFADD__(v95, 1);
    v96 = v95 + 1;
    if (v54)
      goto LABEL_58;
    v64[2] = v96;
    goto LABEL_20;
  }
  v31 = 0;
  v32 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v98 = a1;
  v33 = a1 + v32;
  v105 = *(_QWORD *)(v24 + 72);
  v106 = v24;
  v34 = *(void (**)(uint64_t))(v24 + 16);
  v108 = v22;
  v109 = v34;
  v35 = v112;
  v107 = v23;
  v103 = v10;
  v104 = v16;
  while (1)
  {
    v116 = v30;
    v117 = (uint64_t)v31;
    v115 = v33;
    v109(v35);
    sub_22CB9C8D4();
    _s9StocksKit8CurrencyVyACSScfC_0();
    v39 = v111;
    sub_22CB84900((uint64_t)v22, (uint64_t)v111);
    v40 = v110;
    sub_22CB85BF8(v110, (uint64_t)v39);
    sub_22CB6257C(v40, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
    sub_22CB9C8C8();
    _s9StocksKit8CurrencyVyACSScfC_0();
    sub_22CB84900((uint64_t)v16, (uint64_t)v13);
    sub_22CB84900((uint64_t)v22, (uint64_t)v10);
    sub_22CB9C8E0();
    v42 = v41;
    sub_22CB85E30(v117);
    v43 = swift_isUniquelyReferenced_nonNull_native();
    v118 = v29;
    v45 = sub_22CB8447C((uint64_t)v13);
    v46 = v29[2];
    v47 = (v44 & 1) == 0;
    v48 = v46 + v47;
    if (__OFADD__(v46, v47))
      break;
    v49 = v44;
    if (v29[3] >= v48)
    {
      if ((v43 & 1) == 0)
      {
        sub_22CB88028();
        v29 = v118;
      }
    }
    else
    {
      sub_22CB87194(v48, v43);
      v29 = v118;
      v50 = sub_22CB8447C((uint64_t)v13);
      if ((v49 & 1) != (v51 & 1))
        goto LABEL_60;
      v45 = v50;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    if ((v49 & 1) == 0)
    {
      v52 = sub_22CB7DCB4(MEMORY[0x24BEE4AF8]);
      v29[(v45 >> 6) + 8] |= 1 << v45;
      sub_22CB84900((uint64_t)v13, v29[6] + *(_QWORD *)(v113 + 72) * v45);
      *(_QWORD *)(v29[7] + 8 * v45) = v52;
      v53 = v29[2];
      v54 = __OFADD__(v53, 1);
      v55 = v53 + 1;
      if (v54)
        goto LABEL_56;
      v29[2] = v55;
    }
    v36 = v29[7];
    swift_bridgeObjectRelease();
    v37 = 8 * v45;
    v38 = swift_isUniquelyReferenced_nonNull_native();
    v118 = *(_QWORD **)(v36 + v37);
    *(_QWORD *)(v36 + v37) = 0x8000000000000000;
    v10 = v103;
    sub_22CB87C5C((uint64_t)v103, v38, v42);
    *(_QWORD *)(v36 + v37) = v118;
    swift_bridgeObjectRelease();
    sub_22CB6257C((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
    sub_22CB6257C((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
    v16 = v104;
    sub_22CB6257C((uint64_t)v104, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
    v22 = v108;
    sub_22CB6257C((uint64_t)v108, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
    v35 = v112;
    (*(void (**)(_QWORD, uint64_t))(v106 + 8))(v112, v107);
    v33 = v115 + v105;
    v31 = sub_22CB84450;
    v30 = v116 - 1;
    if (v116 == 1)
    {
      swift_bridgeObjectRelease();
      v111 = sub_22CB84450;
      v56 = v119;
      v28 = v100;
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  result = sub_22CB9D4E0();
  __break(1u);
  return result;
}

unint64_t sub_22CB84450@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = sub_22CB7DCB4(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  return result;
}

unint64_t sub_22CB8447C(uint64_t a1)
{
  uint64_t v2;

  sub_22CB9D534();
  sub_22CB9C604();
  sub_22CB50668(&qword_253F83B68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED80], MEMORY[0x24BDCED98]);
  sub_22CB9CFE8();
  v2 = sub_22CB9D558();
  return sub_22CB845D4(a1, v2);
}

unint64_t sub_22CB84504(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_22CB9D534();
  sub_22CB9D048();
  v4 = sub_22CB9D558();
  return sub_22CB846E0(a1, a2, v4);
}

unint64_t sub_22CB84568(uint64_t a1)
{
  uint64_t v2;

  sub_22CB9C568();
  sub_22CB50668(&qword_253F837E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v2 = sub_22CB9CFDC();
  return sub_22CB847C0(a1, v2);
}

unint64_t sub_22CB845D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;

  v5 = type metadata accessor for Currency();
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    do
    {
      sub_22CB84900(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8);
      v13 = MEMORY[0x22E301E6C](v8, a1);
      sub_22CB6257C((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
      if ((v13 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_22CB846E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_22CB9D4BC() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_22CB9D4BC() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_22CB847C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_22CB9C568();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_22CB50668(&qword_255C35380, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v14 = sub_22CB9D00C();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_22CB84900(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Currency();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_22CB84944()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255C35328;
  if (!qword_255C35328)
  {
    sub_22CB88B18(255, &qword_255C35320, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x22E303264](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_255C35328);
  }
  return result;
}

unint64_t sub_22CB849A4()
{
  unint64_t result;

  result = qword_253F83F30;
  if (!qword_253F83F30)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0710, &type metadata for CurrencyConversions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83F30);
  }
  return result;
}

uint64_t sub_22CB849E8()
{
  return sub_22CB50668(&qword_253F83888, (uint64_t (*)(uint64_t))type metadata accessor for Currency, (uint64_t)&protocol conformance descriptor for Currency);
}

uint64_t sub_22CB84A04()
{
  return sub_22CB84AF0(&qword_253F838B8, sub_22CB849E8, MEMORY[0x24BEE13D8], MEMORY[0x24BEE04C0]);
}

uint64_t sub_22CB84A28(unint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  result = *a1;
  if (!result)
  {
    sub_22CB88254(255, &qword_253F83F90, MEMORY[0x24BEE0460]);
    v10 = v9;
    v11[0] = a2();
    v11[1] = a3();
    result = MEMORY[0x22E303264](a4, v10, v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22CB84AB0()
{
  return sub_22CB50668(&qword_253F836D0, (uint64_t (*)(uint64_t))type metadata accessor for Currency, (uint64_t)&protocol conformance descriptor for Currency);
}

uint64_t sub_22CB84ACC()
{
  return sub_22CB84AF0(&qword_253F836E0, sub_22CB84AB0, MEMORY[0x24BEE1400], MEMORY[0x24BEE04E0]);
}

uint64_t sub_22CB84AF0(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  result = *a1;
  if (!result)
  {
    sub_22CB88520(255, &qword_253F83F98, MEMORY[0x24BEE0460]);
    v10 = v9;
    v11[0] = a2();
    v11[1] = a3;
    result = MEMORY[0x22E303264](a4, v10, v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22CB84B70()
{
  return sub_22CB50668(&qword_253F83F78, (uint64_t (*)(uint64_t))type metadata accessor for Currency, (uint64_t)&protocol conformance descriptor for Currency);
}

uint64_t initializeBufferWithCopyOfBuffer for Currency(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22CB9C604();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for Currency(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_22CB9C604();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for Currency(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22CB9C604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for Currency(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22CB9C604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for Currency(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22CB9C604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for Currency(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22CB9C604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Currency()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB84D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22CB9C604();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Currency()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB84D70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22CB9C604();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_22CB84DB0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_22CB9C604();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CurrencyConversions()
{
  return &type metadata for CurrencyConversions;
}

unint64_t sub_22CB84E2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255C35330;
  if (!qword_255C35330)
  {
    sub_22CB88254(255, &qword_255C35338, MEMORY[0x24BEE0300]);
    result = MEMORY[0x22E303264](MEMORY[0x24BEE0318], v1);
    atomic_store(result, (unint64_t *)&qword_255C35330);
  }
  return result;
}

ValueMetadata *type metadata accessor for CurrencyConversions.CodingKeys()
{
  return &type metadata for CurrencyConversions.CodingKeys;
}

uint64_t _s9StocksKit19CurrencyConversionsV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22CB84ED8 + 4 * byte_22CBA03C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22CB84EF8 + 4 * byte_22CBA03C5[v4]))();
}

_BYTE *sub_22CB84ED8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22CB84EF8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22CB84F00(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22CB84F08(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22CB84F10(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22CB84F18(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Currency.CodingKeys()
{
  return &type metadata for Currency.CodingKeys;
}

uint64_t initializeWithCopy for Currency.StringCodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Currency.StringCodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Currency.StringCodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Currency.StringCodingKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Currency.StringCodingKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Currency.StringCodingKey()
{
  return &type metadata for Currency.StringCodingKey;
}

unint64_t sub_22CB850C4()
{
  unint64_t result;

  result = qword_255C35340;
  if (!qword_255C35340)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0630, &type metadata for Currency.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35340);
  }
  return result;
}

unint64_t sub_22CB8510C()
{
  unint64_t result;

  result = qword_255C35348;
  if (!qword_255C35348)
  {
    result = MEMORY[0x22E303264](&unk_22CBA06E8, &type metadata for CurrencyConversions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35348);
  }
  return result;
}

unint64_t sub_22CB85154()
{
  unint64_t result;

  result = qword_253F83F40;
  if (!qword_253F83F40)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0658, &type metadata for CurrencyConversions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83F40);
  }
  return result;
}

unint64_t sub_22CB8519C()
{
  unint64_t result;

  result = qword_253F83F38;
  if (!qword_253F83F38)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0680, &type metadata for CurrencyConversions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83F38);
  }
  return result;
}

unint64_t sub_22CB851E4()
{
  unint64_t result;

  result = qword_255C35350;
  if (!qword_255C35350)
  {
    result = MEMORY[0x22E303264](&unk_22CBA05A0, &type metadata for Currency.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35350);
  }
  return result;
}

unint64_t sub_22CB8522C()
{
  unint64_t result;

  result = qword_255C35358;
  if (!qword_255C35358)
  {
    result = MEMORY[0x22E303264](&unk_22CBA05C8, &type metadata for Currency.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35358);
  }
  return result;
}

unint64_t sub_22CB85274()
{
  unint64_t result;

  result = qword_253F83870;
  if (!qword_253F83870)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0550, &type metadata for Currency.StringCodingKey);
    atomic_store(result, (unint64_t *)&qword_253F83870);
  }
  return result;
}

unint64_t sub_22CB852BC()
{
  unint64_t result;

  result = qword_253F83878;
  if (!qword_253F83878)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0578, &type metadata for Currency.StringCodingKey);
    atomic_store(result, (unint64_t *)&qword_253F83878);
  }
  return result;
}

uint64_t sub_22CB85300(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_22CB853AC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_22CB8531C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_22CB85544(a1, a2, a3, *v3, &qword_255C35390, (uint64_t)&type metadata for FundMetadata.Sector);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_22CB85348(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_22CB85544(a1, a2, a3, *v3, &qword_255C35398, (uint64_t)&type metadata for FundMetadata.Holding);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_22CB85374(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_22CB856DC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_22CB85390(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_22CB858D0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_22CB853AC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_22CB88B18(0, &qword_255C353A8, (uint64_t)&type metadata for Stock, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 120);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[120 * v8])
      memmove(v12, v13, 120 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[120 * v8] || v12 >= &v13[120 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_22CB9D390();
  __break(1u);
  return result;
}

uint64_t sub_22CB85544(char a1, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    sub_22CB88B18(0, a5, a6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size(v12);
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 24);
  }
  else
  {
    v12 = (char *)MEMORY[0x24BEE4AF8];
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[24 * v10])
      memmove(v14, v15, 24 * v10);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v15 >= &v14[24 * v10] || v14 >= &v15[24 * v10])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v12;
  }
LABEL_30:
  result = sub_22CB9D390();
  __break(1u);
  return result;
}

uint64_t sub_22CB856DC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_22CB5F9BC(0, &qword_255C35388, type metadata accessor for StockChart.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v10 = *(_QWORD *)(type metadata accessor for StockChart.Entry(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for StockChart.Entry(0) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_22CB9D390();
  __break(1u);
  return result;
}

uint64_t sub_22CB858D0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_22CB88B18(0, &qword_255C34F38, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_22CB9D390();
  __break(1u);
  return result;
}

uint64_t sub_22CB85A4C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_22CB9D534();
  swift_bridgeObjectRetain();
  sub_22CB9D048();
  v8 = sub_22CB9D558();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_22CB9D4BC() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_22CB9D4BC() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_22CB86480(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_22CB85BF8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v6 = type metadata accessor for Currency();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v24 = (uint64_t)&v22 - v11;
  v12 = *v2;
  sub_22CB9D534();
  sub_22CB9C604();
  sub_22CB50668(&qword_253F83B68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED80], MEMORY[0x24BDCED98]);
  swift_bridgeObjectRetain();
  sub_22CB9CFE8();
  v13 = sub_22CB9D558();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  v15 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v22 = v2;
    v23 = a1;
    v16 = ~v14;
    v17 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_22CB84900(*(_QWORD *)(v12 + 48) + v17 * v15, (uint64_t)v10);
      v18 = MEMORY[0x22E301E6C](v10, a2);
      sub_22CB6257C((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
      if ((v18 & 1) != 0)
        break;
      v15 = (v15 + 1) & v16;
      if (((*(_QWORD *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v22;
        a1 = v23;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_22CB6257C(a2, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
    sub_22CB84900(*(_QWORD *)(*v22 + 48) + v17 * v15, v23);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = v24;
    sub_22CB84900(a2, v24);
    v25 = *v3;
    *v3 = 0x8000000000000000;
    sub_22CB86618(v20, v15, isUniquelyReferenced_nonNull_native);
    *v3 = v25;
    swift_bridgeObjectRelease();
    sub_22CB82BD4(a2, a1);
    return 1;
  }
}

uint64_t sub_22CB85E30(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_22CB85E40()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  sub_22CB88ABC();
  v3 = sub_22CB9D258();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_22CB9D534();
      sub_22CB9D048();
      result = sub_22CB9D558();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_22CB86118()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v1 = v0;
  v2 = type metadata accessor for Currency();
  v34 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_22CB885A4();
  v6 = sub_22CB9D258();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v33 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v31 = v0;
    v32 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v32)
          goto LABEL_33;
        v19 = v33[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v32)
            goto LABEL_33;
          v19 = v33[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v32)
              goto LABEL_33;
            v19 = v33[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v32)
              {
LABEL_33:
                swift_release();
                v1 = v31;
                v29 = 1 << *(_BYTE *)(v5 + 32);
                if (v29 > 63)
                  bzero(v33, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v29;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v32)
                    goto LABEL_33;
                  v19 = v33[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(v34 + 72);
      sub_22CB82BD4(*(_QWORD *)(v5 + 48) + v21 * v17, (uint64_t)v4);
      sub_22CB9D534();
      sub_22CB9C604();
      sub_22CB50668(&qword_253F83B68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED80], MEMORY[0x24BDCED98]);
      sub_22CB9CFE8();
      result = sub_22CB9D558();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = sub_22CB82BD4((uint64_t)v4, *(_QWORD *)(v7 + 48) + v15 * v21);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t sub_22CB86480(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_22CB85E40();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_22CB8681C();
      goto LABEL_22;
    }
    sub_22CB86BBC();
  }
  v11 = *v4;
  sub_22CB9D534();
  sub_22CB9D048();
  result = sub_22CB9D558();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_22CB9D4BC(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_22CB9D4D4();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_22CB9D4BC();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_22CB86618(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t *v26;

  v7 = type metadata accessor for Currency();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
  {
LABEL_13:
    v13 = v8;
    goto LABEL_14;
  }
  if ((a3 & 1) != 0)
  {
    sub_22CB86118();
    goto LABEL_8;
  }
  if (v12 <= v11)
  {
    sub_22CB86E64();
LABEL_8:
    v14 = *v3;
    sub_22CB9D534();
    sub_22CB9C604();
    sub_22CB50668(&qword_253F83B68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED80], MEMORY[0x24BDCED98]);
    sub_22CB9CFE8();
    v15 = sub_22CB9D558();
    v16 = -1 << *(_BYTE *)(v14 + 32);
    a2 = v15 & ~v16;
    if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v25[1] = v7;
      v17 = ~v16;
      v13 = v8;
      v18 = *(_QWORD *)(v8 + 72);
      while (1)
      {
        sub_22CB84900(*(_QWORD *)(v14 + 48) + v18 * a2, (uint64_t)v10);
        v19 = MEMORY[0x22E301E6C](v10, a1);
        sub_22CB6257C((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Currency);
        if ((v19 & 1) != 0)
          goto LABEL_17;
        a2 = (a2 + 1) & v17;
        if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          goto LABEL_14;
      }
    }
    goto LABEL_13;
  }
  v13 = v8;
  sub_22CB869C8();
LABEL_14:
  v20 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_22CB82BD4(a1, *(_QWORD *)(v20 + 48) + *(_QWORD *)(v13 + 72) * a2);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_17:
  result = sub_22CB9D4D4();
  __break(1u);
  return result;
}

void *sub_22CB8681C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_22CB88ABC();
  v2 = *v0;
  v3 = sub_22CB9D24C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_22CB869C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for Currency();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB885A4();
  v6 = *v0;
  v7 = sub_22CB9D24C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v8;
    return result;
  }
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    sub_22CB84900(*(_QWORD *)(v6 + 48) + v20, (uint64_t)v5);
    result = (void *)sub_22CB82BD4((uint64_t)v5, *(_QWORD *)(v8 + 48) + v20);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
    goto LABEL_28;
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_22CB86BBC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_22CB88ABC();
  v3 = sub_22CB9D258();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_22CB9D534();
    swift_bridgeObjectRetain();
    sub_22CB9D048();
    result = sub_22CB9D558();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_22CB86E64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;

  v1 = v0;
  v2 = type metadata accessor for Currency();
  v33 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_22CB885A4();
  v6 = sub_22CB9D258();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v7;
    return result;
  }
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v9 = *(_QWORD *)(v5 + 56);
  v30 = v0;
  v31 = v5 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & v9;
  v32 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v32)
      goto LABEL_33;
    v19 = *(_QWORD *)(v31 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_33;
      v19 = *(_QWORD *)(v31 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_33;
        v19 = *(_QWORD *)(v31 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v11 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    v21 = *(_QWORD *)(v33 + 72);
    sub_22CB84900(*(_QWORD *)(v5 + 48) + v21 * v17, (uint64_t)v4);
    sub_22CB9D534();
    sub_22CB9C604();
    sub_22CB50668(&qword_253F83B68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED80], MEMORY[0x24BDCED98]);
    sub_22CB9CFE8();
    result = sub_22CB9D558();
    v22 = -1 << *(_BYTE *)(v7 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    result = sub_22CB82BD4((uint64_t)v4, *(_QWORD *)(v7 + 48) + v15 * v21);
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v30;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v31 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v32)
      goto LABEL_33;
    v19 = *(_QWORD *)(v31 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_22CB87194(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;

  v3 = v2;
  v5 = type metadata accessor for Currency();
  v39 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  sub_22CB88254(0, (unint64_t *)&qword_253F83900, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE30A0]);
  v40 = a2;
  v9 = sub_22CB9D36C();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v38 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v36 = v2;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v37)
      break;
    v22 = v38;
    v23 = v38[v21];
    ++v17;
    if (!v23)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v37)
        goto LABEL_34;
      v23 = v38[v17];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v40 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = v38[v24];
        if (!v23)
        {
          while (1)
          {
            v17 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v17 >= v37)
              goto LABEL_34;
            v23 = v38[v17];
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v17 = v24;
      }
    }
LABEL_21:
    v14 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v39 + 72);
    v26 = *(_QWORD *)(v8 + 48) + v25 * v20;
    if ((v40 & 1) != 0)
    {
      sub_22CB82BD4(v26, (uint64_t)v7);
      v27 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v20);
    }
    else
    {
      sub_22CB84900(v26, (uint64_t)v7);
      v27 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v20);
      swift_bridgeObjectRetain();
    }
    sub_22CB9D534();
    sub_22CB9C604();
    sub_22CB50668(&qword_253F83B68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED80], MEMORY[0x24BDCED98]);
    sub_22CB9CFE8();
    result = sub_22CB9D558();
    v28 = -1 << *(_BYTE *)(v10 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = sub_22CB82BD4((uint64_t)v7, *(_QWORD *)(v10 + 48) + v25 * v18);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v18) = v27;
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v36;
  v22 = v38;
  if ((v40 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v8 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_22CB87534(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;

  v3 = v2;
  v5 = type metadata accessor for Currency();
  v39 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  sub_22CB88520(0, &qword_253F83908, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))MEMORY[0x24BEE30A0]);
  v40 = a2;
  v9 = sub_22CB9D36C();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v38 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v36 = v2;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v37)
      break;
    v22 = v38;
    v23 = v38[v21];
    ++v17;
    if (!v23)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v37)
        goto LABEL_34;
      v23 = v38[v17];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v40 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = v38[v24];
        if (!v23)
        {
          while (1)
          {
            v17 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v17 >= v37)
              goto LABEL_34;
            v23 = v38[v17];
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v17 = v24;
      }
    }
LABEL_21:
    v14 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v39 + 72);
    v26 = *(_QWORD *)(v8 + 48) + v25 * v20;
    if ((v40 & 1) != 0)
      sub_22CB82BD4(v26, (uint64_t)v7);
    else
      sub_22CB84900(v26, (uint64_t)v7);
    v27 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v20);
    sub_22CB9D534();
    sub_22CB9C604();
    sub_22CB50668(&qword_253F83B68, (uint64_t (*)(uint64_t))MEMORY[0x24BDCED80], MEMORY[0x24BDCED98]);
    sub_22CB9CFE8();
    result = sub_22CB9D558();
    v28 = -1 << *(_BYTE *)(v10 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = sub_22CB82BD4((uint64_t)v7, *(_QWORD *)(v10 + 48) + v25 * v18);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v18) = v27;
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v36;
  v22 = v38;
  if ((v40 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v8 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_22CB878CC(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = sub_22CB9C568();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  sub_22CB88A28();
  v42 = a2;
  v10 = sub_22CB9D36C();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_retain();
    }
    sub_22CB50668(&qword_253F837E8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = sub_22CB9CFDC();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_22CB87C5C(uint64_t a1, char a2, double a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for Currency();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_22CB8447C(a1);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  result = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = v11[3];
    if (v18 >= result && (a2 & 1) != 0)
    {
LABEL_7:
      v19 = *v4;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        *(double *)(v19[7] + 8 * v13) = a3;
        return result;
      }
      goto LABEL_11;
    }
    if (v18 >= result && (a2 & 1) == 0)
    {
      result = (uint64_t)sub_22CB882FC();
      goto LABEL_7;
    }
    sub_22CB87534(result, a2 & 1);
    result = sub_22CB8447C(a1);
    if ((v17 & 1) == (v20 & 1))
    {
      v13 = result;
      v19 = *v4;
      if ((v17 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_22CB84900(a1, (uint64_t)v10);
      return sub_22CB87F00(v13, (uint64_t)v10, v19, a3);
    }
  }
  result = sub_22CB9D4E0();
  __break(1u);
  return result;
}

uint64_t sub_22CB87DA4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = sub_22CB9C568();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_22CB84568(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_release();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_22CB886D8();
    goto LABEL_7;
  }
  sub_22CB878CC(v17, a3 & 1);
  v23 = sub_22CB84568(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = sub_22CB9D4E0();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_22CB87F90(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_22CB87F00(unint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a3[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a3[6];
  v9 = type metadata accessor for Currency();
  result = sub_22CB82BD4(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1);
  *(double *)(a3[7] + 8 * a1) = a4;
  v11 = a3[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a3[2] = v13;
  return result;
}

uint64_t sub_22CB87F90(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_22CB9C568();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

void *sub_22CB88028()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for Currency();
  v26 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB88254(0, (unint64_t *)&qword_253F83900, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE30A0]);
  v5 = *v0;
  v6 = sub_22CB9D360();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = v5 + 64;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v9 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v26 + 72) * v18;
    sub_22CB84900(*(_QWORD *)(v5 + 48) + v19, (uint64_t)v4);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
    sub_22CB82BD4((uint64_t)v4, *(_QWORD *)(v7 + 48) + v19);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v9 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_22CB88254(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v6 = type metadata accessor for Currency();
    sub_22CB88520(255, &qword_253F83F98, MEMORY[0x24BEE0460]);
    v8 = v7;
    v9 = sub_22CB50668(&qword_253F83F70, (uint64_t (*)(uint64_t))type metadata accessor for Currency, (uint64_t)&protocol conformance descriptor for Currency);
    v10 = a3(a1, v6, v8, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

void *sub_22CB882FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = type metadata accessor for Currency();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB88520(0, &qword_253F83908, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))MEMORY[0x24BEE30A0]);
  v6 = *v0;
  v7 = sub_22CB9D360();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v27 = v1;
  result = (void *)(v7 + 64);
  v10 = v6 + 64;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 64), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v17)
      goto LABEL_26;
    v24 = *(_QWORD *)(v10 + 8 * v23);
    ++v13;
    if (!v24)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v17)
        goto LABEL_26;
      v24 = *(_QWORD *)(v10 + 8 * v13);
      if (!v24)
        break;
    }
LABEL_25:
    v16 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    sub_22CB84900(*(_QWORD *)(v6 + 48) + v20, (uint64_t)v5);
    v21 = 8 * v19;
    v22 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v21);
    result = (void *)sub_22CB82BD4((uint64_t)v5, *(_QWORD *)(v8 + 48) + v20);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v21) = v22;
  }
  v25 = v23 + 2;
  if (v25 >= v17)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v27;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v10 + 8 * v25);
  if (v24)
  {
    v13 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v13 >= v17)
      goto LABEL_26;
    v24 = *(_QWORD *)(v10 + 8 * v13);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_22CB88520(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for Currency();
    v7 = sub_22CB50668(&qword_253F83F70, (uint64_t (*)(uint64_t))type metadata accessor for Currency, (uint64_t)&protocol conformance descriptor for Currency);
    v8 = a3(a1, v6, MEMORY[0x24BEE13C8], v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_22CB885A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_253F838E0)
  {
    type metadata accessor for Currency();
    sub_22CB50668(&qword_253F83F70, (uint64_t (*)(uint64_t))type metadata accessor for Currency, (uint64_t)&protocol conformance descriptor for Currency);
    v0 = sub_22CB9D270();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_253F838E0);
  }
}

void sub_22CB8861C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_255C35370)
  {
    type metadata accessor for Currency();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_255C35370);
  }
}

uint64_t sub_22CB88684(uint64_t a1)
{
  uint64_t v2;

  sub_22CB5F9BC(0, &qword_255C35368, (uint64_t (*)(uint64_t))sub_22CB8861C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_22CB886D8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = sub_22CB9C568();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB88A28();
  v24 = v0;
  v5 = *v0;
  v6 = sub_22CB9D360();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_22CB88904(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_22CB8898C(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v6 = result;
    v7 = *(_QWORD *)(a5 + 48);
    v8 = type metadata accessor for Currency();
    return sub_22CB84900(v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a2, v6);
  }
LABEL_8:
  __break(1u);
  return result;
}

void sub_22CB88A28()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_253F838F8)
  {
    sub_22CB9C568();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
    sub_22CB7E3E4();
    sub_22CB50668(&qword_253F837E8, v0, MEMORY[0x24BDCEA88]);
    v1 = sub_22CB9D384();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_253F838F8);
  }
}

void sub_22CB88ABC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255C353A0)
  {
    v0 = sub_22CB9D270();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255C353A0);
  }
}

void sub_22CB88B18(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t getEnumTagSinglePayload for CurrencyConversions.ConversionStep(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CurrencyConversions.ConversionStep(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_22CB88BE8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_22CB88BF0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CurrencyConversions.ConversionStep()
{
  return &type metadata for CurrencyConversions.ConversionStep;
}

void sub_22CB88C0C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22CB88C4C()
{
  sub_22CB9D048();
  return swift_bridgeObjectRelease();
}

void sub_22CB88D04(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22CB88D50()
{
  sub_22CB9D048();
  return swift_bridgeObjectRelease();
}

void sub_22CB88E14(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22CB88E50()
{
  sub_22CB9D048();
  return swift_bridgeObjectRelease();
}

uint64_t Stock.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Stock.symbol.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Stock.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Stock.exchange.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

void Stock.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 64);
}

uint64_t Stock.symbolDisplayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Stock.shortName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Stock.compactName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

void Stock.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 64);
  swift_bridgeObjectRetain();
  sub_22CB9D048();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_22CB9D048();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_22CB9D048();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_22CB9D048();
  swift_bridgeObjectRelease();
  __asm { BR              X9 }
}

uint64_t sub_22CB8919C()
{
  sub_22CB9D048();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_22CB9D048();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_22CB9D048();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_22CB9D048();
  return swift_bridgeObjectRelease();
}

uint64_t sub_22CB892D8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22CB89300 + 4 * byte_22CBA085A[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_22CB89300()
{
  return 0x6C6F626D7973;
}

uint64_t sub_22CB89314()
{
  return 1701667182;
}

uint64_t sub_22CB89324()
{
  return 0x65676E6168637865;
}

uint64_t sub_22CB8933C()
{
  return 1701869940;
}

unint64_t sub_22CB8934C()
{
  return 0xD000000000000011;
}

uint64_t sub_22CB89368()
{
  return 0x6D614E74726F6873;
}

uint64_t sub_22CB89384()
{
  return 0x4E746361706D6F63;
}

uint64_t sub_22CB893A4()
{
  unsigned __int8 *v0;

  return sub_22CB892D8(*v0);
}

uint64_t sub_22CB893AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB8A7B8(a1, a2);
  *a3 = result;
  return result;
}

void sub_22CB893D0(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_22CB893DC()
{
  sub_22CB8A088();
  return sub_22CB9D654();
}

uint64_t sub_22CB89404()
{
  sub_22CB8A088();
  return sub_22CB9D660();
}

uint64_t Stock.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[7];
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  sub_22CB8A110(0, &qword_255C353B0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v16 - v6;
  v8 = *(_QWORD *)(v1 + 16);
  v22 = *(_QWORD *)(v1 + 24);
  v23 = v8;
  v9 = *(_QWORD *)(v1 + 32);
  v20 = *(_QWORD *)(v1 + 40);
  v21 = v9;
  v10 = *(_QWORD *)(v1 + 48);
  v18 = *(_QWORD *)(v1 + 56);
  v19 = v10;
  v17 = *(unsigned __int8 *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v16[5] = *(_QWORD *)(v1 + 80);
  v16[6] = v11;
  v12 = *(_QWORD *)(v1 + 96);
  v16[3] = *(_QWORD *)(v1 + 88);
  v16[4] = v12;
  v13 = *(_QWORD *)(v1 + 104);
  v16[1] = *(_QWORD *)(v1 + 112);
  v16[2] = v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB8A088();
  sub_22CB9D57C();
  v33 = 0;
  v14 = v24;
  sub_22CB9D468();
  if (!v14)
  {
    v32 = 1;
    sub_22CB9D468();
    v31 = 2;
    sub_22CB9D468();
    v30 = 3;
    sub_22CB9D468();
    v29 = v17;
    v28 = 4;
    sub_22CB8A0CC();
    sub_22CB9D480();
    v27 = 5;
    sub_22CB9D468();
    v26 = 6;
    sub_22CB9D468();
    v25 = 7;
    sub_22CB9D468();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Stock.hashValue.getter()
{
  sub_22CB9D534();
  Stock.hash(into:)();
  return sub_22CB9D558();
}

uint64_t Stock.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  unsigned __int8 v51;
  char v52;
  char v53;
  char v54;
  char v55;

  sub_22CB8A110(0, &qword_255C353C8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v34 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB8A088();
  sub_22CB9D570();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v55 = 0;
  v11 = sub_22CB9D3F0();
  v13 = v12;
  v54 = 1;
  swift_bridgeObjectRetain();
  v44 = sub_22CB9D3F0();
  v45 = v11;
  v53 = 2;
  v15 = v14;
  swift_bridgeObjectRetain();
  v16 = sub_22CB9D3F0();
  v46 = v15;
  v43 = v16;
  v52 = 3;
  v18 = v17;
  swift_bridgeObjectRetain();
  v19 = sub_22CB9D3F0();
  v21 = v20;
  v41 = v19;
  v42 = v18;
  v50 = 4;
  sub_22CB8A16C();
  swift_bridgeObjectRetain();
  sub_22CB9D408();
  v39 = v21;
  LODWORD(v18) = v51;
  v49 = 5;
  v37 = sub_22CB9D3F0();
  v38 = v18;
  v48 = 6;
  v40 = v22;
  swift_bridgeObjectRetain();
  v23 = sub_22CB9D3F0();
  v47 = 7;
  v36 = v24;
  swift_bridgeObjectRetain();
  v25 = sub_22CB9D3F0();
  v27 = v26;
  v28 = *(void (**)(char *, uint64_t))(v7 + 8);
  v35 = v25;
  v28(v9, v6);
  swift_bridgeObjectRetain();
  v29 = v46;
  swift_bridgeObjectRetain();
  v30 = v42;
  swift_bridgeObjectRetain();
  v31 = v39;
  swift_bridgeObjectRetain();
  v34 = v23;
  v32 = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v45;
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v44;
  *(_QWORD *)(a2 + 24) = v29;
  *(_QWORD *)(a2 + 32) = v43;
  *(_QWORD *)(a2 + 40) = v30;
  *(_QWORD *)(a2 + 48) = v41;
  *(_QWORD *)(a2 + 56) = v31;
  *(_BYTE *)(a2 + 64) = v38;
  v33 = v36;
  *(_QWORD *)(a2 + 72) = v37;
  *(_QWORD *)(a2 + 80) = v32;
  *(_QWORD *)(a2 + 88) = v34;
  *(_QWORD *)(a2 + 96) = v33;
  *(_QWORD *)(a2 + 104) = v35;
  *(_QWORD *)(a2 + 112) = v27;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_22CB89D00@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22CB89D0C()
{
  sub_22CB9D534();
  Stock.hash(into:)();
  return sub_22CB9D558();
}

uint64_t sub_22CB89D90()
{
  sub_22CB9D534();
  Stock.hash(into:)();
  return sub_22CB9D558();
}

uint64_t sub_22CB89E10@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Stock.init(from:)(a1, a2);
}

uint64_t sub_22CB89E24(_QWORD *a1)
{
  return Stock.encode(to:)(a1);
}

uint64_t _s9StocksKit5StockV2eeoiySbAC_ACtFZ_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v33 = *(_QWORD *)(a1 + 56);
  v34 = *(_QWORD *)(a1 + 48);
  v32 = *(_BYTE *)(a1 + 64);
  v31 = *(_QWORD *)(a1 + 72);
  v27 = *(_QWORD *)(a1 + 88);
  v25 = *(_QWORD *)(a1 + 96);
  v22 = *(_QWORD *)(a1 + 112);
  v23 = *(_QWORD *)(a1 + 104);
  v7 = a2[2];
  v6 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v11 = a2[6];
  v10 = a2[7];
  v29 = *(_QWORD *)(a1 + 80);
  v30 = a2[9];
  v28 = a2[10];
  v26 = a2[11];
  v24 = a2[12];
  v20 = a2[14];
  v21 = a2[13];
  if (*(_QWORD *)a1 == *a2 && *(_QWORD *)(a1 + 8) == a2[1] || (v12 = sub_22CB9D4BC(), result = 0, (v12 & 1) != 0))
  {
    if (v2 == v7 && v3 == v6 || (v14 = sub_22CB9D4BC(), result = 0, (v14 & 1) != 0))
    {
      if (v4 == v8 && v5 == v9 || (v15 = sub_22CB9D4BC(), result = 0, (v15 & 1) != 0))
      {
        if (v34 == v11 && v33 == v10 || (v16 = sub_22CB9D4BC(), result = 0, (v16 & 1) != 0))
        {
          sub_22CB72134(v32);
          if ((v17 & 1) != 0)
          {
            if (v31 == v30 && v29 == v28 || (v18 = sub_22CB9D4BC(), result = 0, (v18 & 1) != 0))
            {
              if (v27 == v26 && v25 == v24 || (v19 = sub_22CB9D4BC(), result = 0, (v19 & 1) != 0))
              {
                if (v23 == v21 && v22 == v20)
                  return 1;
                else
                  return sub_22CB9D4BC();
              }
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_22CB8A088()
{
  unint64_t result;

  result = qword_255C353B8;
  if (!qword_255C353B8)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0A4C, &type metadata for Stock.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C353B8);
  }
  return result;
}

unint64_t sub_22CB8A0CC()
{
  unint64_t result;

  result = qword_255C353C0;
  if (!qword_255C353C0)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for StockType, &type metadata for StockType);
    atomic_store(result, (unint64_t *)&qword_255C353C0);
  }
  return result;
}

void sub_22CB8A110(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_22CB8A088();
    v7 = a3(a1, &type metadata for Stock.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_22CB8A16C()
{
  unint64_t result;

  result = qword_255C353D0;
  if (!qword_255C353D0)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for StockType, &type metadata for StockType);
    atomic_store(result, (unint64_t *)&qword_255C353D0);
  }
  return result;
}

unint64_t sub_22CB8A1B4()
{
  unint64_t result;

  result = qword_255C353D8;
  if (!qword_255C353D8)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for Stock, &type metadata for Stock);
    atomic_store(result, (unint64_t *)&qword_255C353D8);
  }
  return result;
}

uint64_t destroy for Stock()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Stock(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Stock(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for Stock(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Stock(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Stock(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Stock()
{
  return &type metadata for Stock;
}

uint64_t getEnumTagSinglePayload for StockType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Stock.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_22CB8A660 + 4 * byte_22CBA0867[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_22CB8A694 + 4 * byte_22CBA0862[v4]))();
}

uint64_t sub_22CB8A694(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB8A69C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB8A6A4);
  return result;
}

uint64_t sub_22CB8A6B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB8A6B8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_22CB8A6BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB8A6C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Stock.CodingKeys()
{
  return &type metadata for Stock.CodingKeys;
}

unint64_t sub_22CB8A6E4()
{
  unint64_t result;

  result = qword_255C353E0;
  if (!qword_255C353E0)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0A24, &type metadata for Stock.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C353E0);
  }
  return result;
}

unint64_t sub_22CB8A72C()
{
  unint64_t result;

  result = qword_255C353E8;
  if (!qword_255C353E8)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0994, &type metadata for Stock.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C353E8);
  }
  return result;
}

unint64_t sub_22CB8A774()
{
  unint64_t result;

  result = qword_255C353F0;
  if (!qword_255C353F0)
  {
    result = MEMORY[0x22E303264](&unk_22CBA09BC, &type metadata for Stock.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C353F0);
  }
  return result;
}

uint64_t sub_22CB8A7B8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F626D7973 && a2 == 0xE600000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65676E6168637865 && a2 == 0xE800000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000022CBA2910 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6D614E74726F6873 && a2 == 0xE900000000000065 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x4E746361706D6F63 && a2 == 0xEB00000000656D61)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_22CB8AADC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(char *, unint64_t, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void (*v67)(char *, unint64_t, uint64_t);
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t *v81;
  int *v82;
  void (*v83)(uint64_t);
  uint64_t *v84;
  uint64_t v85;
  void (*v86)(uint64_t);
  uint64_t result;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v134 = a2;
  v3 = sub_22CB9C6C4();
  v4 = *(_QWORD *)(v3 - 8);
  v142 = v3;
  v143 = v4;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v141 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v140 = (char *)&v94 - v7;
  v139 = sub_22CB9C6E8();
  v8 = *(_QWORD *)(v139 - 8);
  v9 = MEMORY[0x24BDAC7A8](v139);
  v11 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v138 = (char *)&v94 - v12;
  sub_22CB4E0E4(0, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v94 - v14;
  sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v94 - v20;
  sub_22CB4E0E4(0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v94 - v26;
  v128 = sub_22CB9C73C();
  v127 = v28;
  v124 = sub_22CB9C70C();
  v123 = v29;
  v122 = sub_22CB9C730();
  v119 = v30;
  v118 = sub_22CB9C754();
  v117 = v31;
  v114 = sub_22CB9C778();
  v113 = v32;
  v110 = sub_22CB9C76C();
  v109 = v33;
  v106 = sub_22CB9C7F0();
  v103 = v34;
  v102 = sub_22CB9C760();
  v101 = v35;
  v100 = sub_22CB9C7D8();
  v99 = v36;
  v98 = sub_22CB9C7E4();
  v97 = v37;
  v96 = sub_22CB9C7B4();
  v95 = v38;
  v129 = v27;
  sub_22CB9C7CC();
  v130 = v25;
  sub_22CB9C79C();
  v108 = sub_22CB9C724();
  v107 = v39;
  v131 = v21;
  sub_22CB9C6F4();
  v132 = v19;
  sub_22CB9C7C0();
  v133 = v15;
  sub_22CB9C790();
  v126 = sub_22CB9C784();
  v125 = v40;
  v121 = sub_22CB9C748();
  v120 = v41;
  v116 = sub_22CB9C7FC();
  v115 = v42;
  v112 = sub_22CB9C808();
  v111 = v43;
  v105 = sub_22CB9C700();
  v104 = v44;
  v45 = sub_22CB9C7A8();
  v46 = *(_QWORD *)(v45 + 16);
  v135 = a1;
  if (v46)
  {
    v144 = MEMORY[0x24BEE4AF8];
    sub_22CB85348(0, v46, 0);
    v47 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v94 = v45;
    v48 = v45 + v47;
    v136 = *(_QWORD *)(v8 + 72);
    v137 = v8;
    v49 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    do
    {
      v51 = v138;
      v50 = v139;
      v49(v138, v48, v139);
      v49(v11, (unint64_t)v51, v50);
      v52 = sub_22CB9C6B8();
      v54 = v53;
      sub_22CB9C6AC();
      v56 = v55;
      v57 = *(void (**)(char *, uint64_t))(v8 + 8);
      v57(v11, v50);
      v57(v51, v50);
      v58 = v144;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22CB85348(0, *(_QWORD *)(v58 + 16) + 1, 1);
        v58 = v144;
      }
      v60 = *(_QWORD *)(v58 + 16);
      v59 = *(_QWORD *)(v58 + 24);
      if (v60 >= v59 >> 1)
      {
        sub_22CB85348(v59 > 1, v60 + 1, 1);
        v58 = v144;
      }
      *(_QWORD *)(v58 + 16) = v60 + 1;
      v61 = (_QWORD *)(v58 + 24 * v60);
      v61[4] = v52;
      v61[5] = v54;
      v61[6] = v56;
      v8 = v137;
      v48 += v136;
      --v46;
    }
    while (v46);
    swift_bridgeObjectRelease();
    a1 = v135;
  }
  else
  {
    swift_bridgeObjectRelease();
    v58 = MEMORY[0x24BEE4AF8];
  }
  v62 = sub_22CB9C718();
  v63 = *(_QWORD *)(v62 + 16);
  v64 = MEMORY[0x24BEE4AF8];
  if (v63)
  {
    v144 = MEMORY[0x24BEE4AF8];
    sub_22CB8531C(0, v63, 0);
    v65 = v62 + ((*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80));
    v66 = *(_QWORD *)(v143 + 72);
    v138 = (char *)v62;
    v139 = v66;
    v67 = *(void (**)(char *, unint64_t, uint64_t))(v143 + 16);
    do
    {
      v68 = v140;
      v69 = v142;
      v67(v140, v65, v142);
      v70 = v141;
      v67(v141, (unint64_t)v68, v69);
      v71 = sub_22CB9C6B8();
      v73 = v72;
      sub_22CB9C6AC();
      v75 = v74;
      v76 = *(void (**)(char *, uint64_t))(v143 + 8);
      v76(v70, v69);
      v76(v68, v69);
      v64 = v144;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22CB8531C(0, *(_QWORD *)(v64 + 16) + 1, 1);
        v64 = v144;
      }
      v78 = *(_QWORD *)(v64 + 16);
      v77 = *(_QWORD *)(v64 + 24);
      if (v78 >= v77 >> 1)
      {
        sub_22CB8531C(v77 > 1, v78 + 1, 1);
        v64 = v144;
      }
      *(_QWORD *)(v64 + 16) = v78 + 1;
      v79 = (_QWORD *)(v64 + 24 * v78);
      v79[4] = v71;
      v79[5] = v73;
      v79[6] = v75;
      v65 += v139;
      --v63;
    }
    while (v63);
    a1 = v135;
  }
  v80 = sub_22CB9C814();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 8))(a1, v80);
  swift_bridgeObjectRelease();
  v81 = v134;
  *v134 = v128;
  *((_BYTE *)v81 + 8) = v127 & 1;
  v81[2] = v124;
  *((_BYTE *)v81 + 24) = v123 & 1;
  v81[4] = v122;
  *((_BYTE *)v81 + 40) = v119 & 1;
  v81[6] = v118;
  *((_BYTE *)v81 + 56) = v117 & 1;
  v81[8] = v114;
  *((_BYTE *)v81 + 72) = v113 & 1;
  v81[10] = v110;
  *((_BYTE *)v81 + 88) = v109 & 1;
  v81[12] = v106;
  *((_BYTE *)v81 + 104) = v103 & 1;
  v81[14] = v102;
  *((_BYTE *)v81 + 120) = v101 & 1;
  v81[16] = v100;
  *((_BYTE *)v81 + 136) = v99 & 1;
  v81[18] = v98;
  *((_BYTE *)v81 + 152) = v97 & 1;
  v81[20] = v96;
  *((_BYTE *)v81 + 168) = v95 & 1;
  v82 = (int *)type metadata accessor for QuoteDetail();
  v83 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  sub_22CB68798((uint64_t)v129, (uint64_t)v81 + v82[15], &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  sub_22CB68798((uint64_t)v130, (uint64_t)v81 + v82[16], &qword_255C35110, v83);
  v84 = (uint64_t *)((char *)v81 + v82[17]);
  v85 = v107;
  *v84 = v108;
  v84[1] = v85;
  v86 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  sub_22CB68798((uint64_t)v131, (uint64_t)v81 + v82[18], (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  sub_22CB68798((uint64_t)v132, (uint64_t)v81 + v82[19], (unint64_t *)&qword_253F83998, v86);
  result = sub_22CB68798((uint64_t)v133, (uint64_t)v81 + v82[20], &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  v88 = (uint64_t *)((char *)v81 + v82[21]);
  v89 = v125;
  *v88 = v126;
  v88[1] = v89;
  v90 = v120;
  v88[2] = v121;
  v88[3] = v90;
  v91 = v115;
  v88[4] = v116;
  v88[5] = v91;
  v92 = v111;
  v88[6] = v112;
  v88[7] = v92;
  v93 = v104;
  v88[8] = v105;
  v88[9] = v93;
  v88[10] = v58;
  v88[11] = v64;
  return result;
}

uint64_t QuoteDetail.dayOpenPrice.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t QuoteDetail.dayLowPrice.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t QuoteDetail.dayHighPrice.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t QuoteDetail.yearLowPrice.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t QuoteDetail.yearHighPrice.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t QuoteDetail.dividendYield.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t QuoteDetail.volume.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t QuoteDetail.averageVolume.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t QuoteDetail.priceEarningsRatio.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

uint64_t QuoteDetail.beta.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 144);
}

uint64_t QuoteDetail.earningsPerShare.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 160);
}

uint64_t QuoteDetail.earningsStartDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for QuoteDetail();
  return sub_22CB6AE84(v1 + *(int *)(v3 + 60), a1, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
}

uint64_t type metadata accessor for QuoteDetail()
{
  uint64_t result;

  result = qword_255C35428;
  if (!qword_255C35428)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t QuoteDetail.earningsEndDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for QuoteDetail();
  return sub_22CB6AE84(v1 + *(int *)(v3 + 64), a1, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
}

uint64_t QuoteDetail.currencyCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for QuoteDetail() + 68));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t QuoteDetail.detailsURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for QuoteDetail();
  return sub_22CB6AE84(v1 + *(int *)(v3 + 72), a1, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
}

uint64_t QuoteDetail.keyStatisticsURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for QuoteDetail();
  return sub_22CB6AE84(v1 + *(int *)(v3 + 76), a1, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
}

uint64_t QuoteDetail.marketTimeZone.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for QuoteDetail();
  return sub_22CB6AE84(v1 + *(int *)(v3 + 80), a1, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
}

uint64_t QuoteDetail.fundMetadata.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for QuoteDetail() + 84));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = v3[6];
  v11 = v3[7];
  v12 = v3[8];
  v13 = v3[9];
  v15 = v3[10];
  v14 = v3[11];
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v12;
  a1[9] = v13;
  a1[10] = v15;
  a1[11] = v14;
  return sub_22CB8B644(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v15);
}

uint64_t sub_22CB8B644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;

  if (a11)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_22CB8B6D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22CB8B710 + 4 * byte_22CBA0AA0[a1]))(0x506E65704F796164, 0xEC00000065636972);
}

uint64_t sub_22CB8B710()
{
  return 0x7250776F4C796164;
}

uint64_t sub_22CB8B730()
{
  return 0x5068676948796164;
}

uint64_t sub_22CB8B744()
{
  return 0x50776F4C72616579;
}

uint64_t sub_22CB8B758()
{
  return 0x6867694872616579;
}

uint64_t sub_22CB8B77C()
{
  return 0x646E656469766964;
}

uint64_t sub_22CB8B7A0()
{
  return 0x656D756C6F76;
}

uint64_t sub_22CB8B7B4()
{
  return 0x5665676172657661;
}

unint64_t sub_22CB8B7D8()
{
  return 0xD000000000000012;
}

uint64_t sub_22CB8B82C()
{
  return 0x73676E696E726165;
}

uint64_t sub_22CB8B850()
{
  return 0x79636E6572727563;
}

uint64_t sub_22CB8B870()
{
  return 0x55736C6961746564;
}

uint64_t sub_22CB8B8A8()
{
  return 0x695474656B72616DLL;
}

uint64_t sub_22CB8B8CC()
{
  return 0x6174654D646E7566;
}

uint64_t sub_22CB8B8EC()
{
  unsigned __int8 *v0;

  return sub_22CB8B6D4(*v0);
}

uint64_t sub_22CB8B8F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB8FE64(a1, a2);
  *a3 = result;
  return result;
}

void sub_22CB8B918(_BYTE *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_22CB8B924()
{
  sub_22CB8DC58();
  return sub_22CB9D654();
}

uint64_t sub_22CB8B94C()
{
  sub_22CB8DC58();
  return sub_22CB9D660();
}

uint64_t QuoteDetail.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[6];
  char v17;

  v3 = v1;
  sub_22CB8DCE0(0, &qword_255C35400, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v16 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB8DC58();
  sub_22CB9D57C();
  LOBYTE(v16[0]) = 0;
  sub_22CB9D444();
  if (!v2)
  {
    LOBYTE(v16[0]) = 1;
    sub_22CB9D444();
    LOBYTE(v16[0]) = 2;
    sub_22CB9D444();
    LOBYTE(v16[0]) = 3;
    sub_22CB9D444();
    LOBYTE(v16[0]) = 4;
    sub_22CB9D444();
    LOBYTE(v16[0]) = 5;
    sub_22CB9D444();
    LOBYTE(v16[0]) = 6;
    sub_22CB9D450();
    LOBYTE(v16[0]) = 7;
    sub_22CB9D450();
    LOBYTE(v16[0]) = 8;
    sub_22CB9D444();
    LOBYTE(v16[0]) = 9;
    sub_22CB9D444();
    LOBYTE(v16[0]) = 10;
    sub_22CB9D444();
    v11 = type metadata accessor for QuoteDetail();
    LOBYTE(v16[0]) = 11;
    sub_22CB9C544();
    sub_22CB50668(&qword_253F837D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_22CB9D45C();
    LOBYTE(v16[0]) = 12;
    sub_22CB9D45C();
    LOBYTE(v16[0]) = 13;
    sub_22CB9D438();
    LOBYTE(v16[0]) = 14;
    sub_22CB9C4F0();
    sub_22CB50668(&qword_253F837D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_22CB9D45C();
    LOBYTE(v16[0]) = 15;
    sub_22CB9D45C();
    LOBYTE(v16[0]) = 16;
    sub_22CB9C664();
    sub_22CB50668(&qword_255C35138, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF528]);
    sub_22CB9D45C();
    v12 = (_OWORD *)(v3 + *(int *)(v11 + 84));
    v13 = v12[1];
    v16[0] = *v12;
    v16[1] = v13;
    v14 = v12[3];
    v16[2] = v12[2];
    v16[3] = v14;
    v15 = v12[5];
    v16[4] = v12[4];
    v16[5] = v15;
    v17 = 17;
    sub_22CB8DC9C();
    sub_22CB9D45C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t QuoteDetail.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  int *v61;
  uint64_t *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char v69;

  v56 = a2;
  sub_22CB4E0E4(0, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v3);
  v55 = (uint64_t)&v51 - v4;
  sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v51 - v9;
  sub_22CB4E0E4(0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v51 - v15;
  sub_22CB8DCE0(0, &qword_255C35418, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v58 = v17;
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v51 - v19;
  v61 = (int *)type metadata accessor for QuoteDetail();
  MEMORY[0x24BDAC7A8](v61);
  v62 = (uint64_t *)((char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = a1[3];
  v60 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  sub_22CB8DC58();
  v57 = v20;
  v23 = (uint64_t)v59;
  sub_22CB9D570();
  if (v23)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
  v59 = v16;
  v54 = v14;
  v53 = v10;
  v52 = v8;
  v24 = v18;
  LOBYTE(v63) = 0;
  v25 = sub_22CB9D3CC();
  v26 = v62;
  *v62 = v25;
  *((_BYTE *)v26 + 8) = v27 & 1;
  LOBYTE(v63) = 1;
  v26[2] = sub_22CB9D3CC();
  *((_BYTE *)v26 + 24) = v28 & 1;
  LOBYTE(v63) = 2;
  v26[4] = sub_22CB9D3CC();
  *((_BYTE *)v26 + 40) = v29 & 1;
  LOBYTE(v63) = 3;
  v26[6] = sub_22CB9D3CC();
  *((_BYTE *)v26 + 56) = v30 & 1;
  LOBYTE(v63) = 4;
  v26[8] = sub_22CB9D3CC();
  *((_BYTE *)v26 + 72) = v31 & 1;
  LOBYTE(v63) = 5;
  v26[10] = sub_22CB9D3CC();
  *((_BYTE *)v26 + 88) = v32 & 1;
  LOBYTE(v63) = 6;
  v26[12] = sub_22CB9D3D8();
  *((_BYTE *)v26 + 104) = v33 & 1;
  LOBYTE(v63) = 7;
  v26[14] = sub_22CB9D3D8();
  *((_BYTE *)v26 + 120) = v34 & 1;
  LOBYTE(v63) = 8;
  v26[16] = sub_22CB9D3CC();
  *((_BYTE *)v26 + 136) = v35 & 1;
  LOBYTE(v63) = 9;
  v36 = sub_22CB9D3CC();
  v37 = v62;
  v62[18] = v36;
  *((_BYTE *)v37 + 152) = v38 & 1;
  LOBYTE(v63) = 10;
  v39 = sub_22CB9D3CC();
  v40 = v62;
  v62[20] = v39;
  *((_BYTE *)v40 + 168) = v41 & 1;
  sub_22CB9C544();
  LOBYTE(v63) = 11;
  sub_22CB50668(&qword_253F834C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  sub_22CB9D3E4();
  sub_22CB68798((uint64_t)v59, (uint64_t)v62 + v61[15], &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  LOBYTE(v63) = 12;
  sub_22CB9D3E4();
  sub_22CB68798((uint64_t)v54, (uint64_t)v62 + v61[16], &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  LOBYTE(v63) = 13;
  v42 = sub_22CB9D3C0();
  v43 = (uint64_t *)((char *)v62 + v61[17]);
  *v43 = v42;
  v43[1] = v44;
  sub_22CB9C4F0();
  LOBYTE(v63) = 14;
  sub_22CB50668(&qword_253F834C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  sub_22CB9D3E4();
  sub_22CB68798((uint64_t)v53, (uint64_t)v62 + v61[18], (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  LOBYTE(v63) = 15;
  sub_22CB9D3E4();
  sub_22CB68798((uint64_t)v52, (uint64_t)v62 + v61[19], (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  sub_22CB9C664();
  LOBYTE(v63) = 16;
  sub_22CB50668(&qword_255C35158, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF540]);
  sub_22CB9D3E4();
  sub_22CB68798(v55, (uint64_t)v62 + v61[20], &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  v69 = 17;
  sub_22CB8DD3C();
  sub_22CB9D3E4();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v57, v58);
  v45 = (uint64_t)v62;
  v46 = (_OWORD *)((char *)v62 + v61[21]);
  v47 = v64;
  *v46 = v63;
  v46[1] = v47;
  v48 = v66;
  v46[2] = v65;
  v46[3] = v48;
  v49 = v68;
  v46[4] = v67;
  v46[5] = v49;
  sub_22CB8DD80(v45, v56);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
  return sub_22CB8DDC4(v45);
}

uint64_t sub_22CB8C7AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return QuoteDetail.init(from:)(a1, a2);
}

uint64_t sub_22CB8C7C0(_QWORD *a1)
{
  return QuoteDetail.encode(to:)(a1);
}

BOOL _s9StocksKit11QuoteDetailV2eeoiySbAC_ACtFZ_0()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;
  void (*v71)(uint64_t);
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  void (*v73)(uint64_t);
  uint64_t v74;
  void (*v75)(uint64_t);
  int *v76;
  void (*v77)(uint64_t);
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  void (*v81)(uint64_t);
  _BYTE *v82;
  uint64_t v83;
  void (*v84)(uint64_t);
  void (*v85)(_BYTE *, uint64_t);
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  char v91;
  _BOOL8 result;
  int *v93;
  void (*v94)(uint64_t);
  _BYTE *v95;
  _BYTE *v96;
  _BYTE *v97;
  uint64_t v98;
  unsigned int (*v99)(uint64_t, uint64_t, _BYTE *);
  void (*v100)(uint64_t);
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  void (*v104)(uint64_t);
  _BYTE *v105;
  char v106;
  void (*v107)(_BYTE *, _BYTE *);
  int *v108;
  void (*v109)(uint64_t);
  _BYTE *v110;
  _BYTE *v111;
  _BYTE *v112;
  uint64_t v113;
  void (*v114)(uint64_t);
  uint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  void (*v118)(uint64_t);
  _BYTE *v119;
  char v120;
  void (*v121)(_BYTE *, _BYTE *);
  int *v122;
  void (*v123)(uint64_t);
  _BYTE *v124;
  _BYTE *v125;
  _BYTE *v126;
  uint64_t v127;
  unsigned int (*v128)(uint64_t, uint64_t, uint64_t);
  void (*v129)(uint64_t);
  uint64_t v130;
  _BYTE *v131;
  uint64_t v132;
  void (*v133)(uint64_t);
  _BYTE *v134;
  char v135;
  void (*v136)(_BYTE *, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  _BYTE *v151;
  _BYTE *v152;
  _BYTE *v153;
  uint64_t v154;
  char v155;
  _BYTE v156[4];
  int v157;
  unsigned int (*v158)(uint64_t, uint64_t, uint64_t);
  int *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _BYTE *v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  _BYTE *v167;
  _BYTE *v168;
  _BYTE *v169;
  _BYTE *v170;
  uint64_t v171;
  _BYTE *v172;
  _BYTE *v173;
  _BYTE *v174;
  _BYTE *v175;
  _BYTE *v176;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  _BYTE *v180;
  _BYTE *v181;
  _BYTE *v182;
  _BYTE *v183;
  _BYTE *v184;
  uint64_t v185;
  _QWORD v186[12];
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _BYTE *v192;
  uint64_t v193;
  _BYTE *v194;
  uint64_t v195;
  _BYTE *v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE *v199;
  _BYTE *v200;
  _BYTE *v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE *v204;
  _BYTE *v205;
  _BYTE *v206;
  _BYTE *v207;
  _BYTE *v208;
  uint64_t v209;
  uint64_t v210;

  v0 = sub_22CB9C664();
  v1 = (void (*)(uint64_t))MEMORY[0x24BDCF510];
  v171 = v0;
  v166 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v163 = &v156[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_22CB6AF48(0, &qword_255C35450, &qword_255C353F8, v1);
  v164 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v170 = &v156[-v4];
  sub_22CB4E0E4(0, &qword_255C353F8, v1);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v165 = &v156[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x24BDAC7A8](v6);
  v167 = &v156[-v9];
  MEMORY[0x24BDAC7A8](v8);
  v168 = &v156[-v10];
  v11 = sub_22CB9C4F0();
  v12 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
  v182 = (_BYTE *)v11;
  v178 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v169 = &v156[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_22CB6AF48(0, &qword_255C350E8, (unint64_t *)&qword_253F83998, v12);
  v177 = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v175 = &v156[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v181 = &v156[-v17];
  sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, v12);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v172 = &v156[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = MEMORY[0x24BDAC7A8](v19);
  v173 = &v156[-v22];
  v23 = MEMORY[0x24BDAC7A8](v21);
  v174 = &v156[-v24];
  v25 = MEMORY[0x24BDAC7A8](v23);
  v176 = &v156[-v26];
  v27 = MEMORY[0x24BDAC7A8](v25);
  v179 = &v156[-v28];
  MEMORY[0x24BDAC7A8](v27);
  v180 = &v156[-v29];
  v30 = sub_22CB9C544();
  v31 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  v185 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v184 = &v156[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_22CB6AF48(0, (unint64_t *)&qword_255C351A0, &qword_255C35110, v31);
  v34 = v33;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v183 = &v156[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v35);
  v38 = &v156[-v37];
  sub_22CB4E0E4(0, &qword_255C35110, v31);
  v40 = MEMORY[0x24BDAC7A8](v39);
  v42 = &v156[-((v41 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v43 = MEMORY[0x24BDAC7A8](v40);
  v45 = &v156[-v44];
  v46 = MEMORY[0x24BDAC7A8](v43);
  v48 = &v156[-v47];
  v49 = MEMORY[0x24BDAC7A8](v46);
  v51 = &v156[-v50];
  v52 = MEMORY[0x24BDAC7A8](v49);
  v54 = &v156[-v53];
  MEMORY[0x24BDAC7A8](v52);
  v58 = &v156[-v57];
  v59 = *(_BYTE *)(v55 + 8);
  if ((*(_BYTE *)(v56 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(v55 + 8))
      return 0;
  }
  else
  {
    if (*(double *)v56 != *(double *)v55)
      v59 = 1;
    if ((v59 & 1) != 0)
      return 0;
  }
  v60 = *(_BYTE *)(v55 + 24);
  if ((*(_BYTE *)(v56 + 24) & 1) != 0)
  {
    if (!*(_BYTE *)(v55 + 24))
      return 0;
  }
  else
  {
    if (*(double *)(v56 + 16) != *(double *)(v55 + 16))
      v60 = 1;
    if ((v60 & 1) != 0)
      return 0;
  }
  v61 = *(_BYTE *)(v55 + 40);
  if ((*(_BYTE *)(v56 + 40) & 1) != 0)
  {
    if (!*(_BYTE *)(v55 + 40))
      return 0;
  }
  else
  {
    if (*(double *)(v56 + 32) != *(double *)(v55 + 32))
      v61 = 1;
    if ((v61 & 1) != 0)
      return 0;
  }
  v62 = *(_BYTE *)(v55 + 56);
  if ((*(_BYTE *)(v56 + 56) & 1) != 0)
  {
    if (!*(_BYTE *)(v55 + 56))
      return 0;
  }
  else
  {
    if (*(double *)(v56 + 48) != *(double *)(v55 + 48))
      v62 = 1;
    if ((v62 & 1) != 0)
      return 0;
  }
  v63 = *(_BYTE *)(v55 + 72);
  if ((*(_BYTE *)(v56 + 72) & 1) != 0)
  {
    if (!*(_BYTE *)(v55 + 72))
      return 0;
  }
  else
  {
    if (*(double *)(v56 + 64) != *(double *)(v55 + 64))
      v63 = 1;
    if ((v63 & 1) != 0)
      return 0;
  }
  v64 = *(_BYTE *)(v55 + 88);
  if ((*(_BYTE *)(v56 + 88) & 1) != 0)
  {
    if (!*(_BYTE *)(v55 + 88))
      return 0;
  }
  else
  {
    if (*(double *)(v56 + 80) != *(double *)(v55 + 80))
      v64 = 1;
    if ((v64 & 1) != 0)
      return 0;
  }
  v65 = *(_BYTE *)(v55 + 104);
  if ((*(_BYTE *)(v56 + 104) & 1) != 0)
  {
    if (!*(_BYTE *)(v55 + 104))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(v56 + 96) != *(_QWORD *)(v55 + 96))
      v65 = 1;
    if ((v65 & 1) != 0)
      return 0;
  }
  v66 = *(_BYTE *)(v55 + 120);
  if ((*(_BYTE *)(v56 + 120) & 1) != 0)
  {
    if (!*(_BYTE *)(v55 + 120))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(v56 + 112) != *(_QWORD *)(v55 + 112))
      v66 = 1;
    if ((v66 & 1) != 0)
      return 0;
  }
  v67 = *(_BYTE *)(v55 + 136);
  if ((*(_BYTE *)(v56 + 136) & 1) != 0)
  {
    if (!*(_BYTE *)(v55 + 136))
      return 0;
  }
  else
  {
    if (*(double *)(v56 + 128) != *(double *)(v55 + 128))
      v67 = 1;
    if ((v67 & 1) != 0)
      return 0;
  }
  v68 = *(_BYTE *)(v55 + 152);
  if ((*(_BYTE *)(v56 + 152) & 1) != 0)
  {
    if (!*(_BYTE *)(v55 + 152))
      return 0;
  }
  else
  {
    if (*(double *)(v56 + 144) != *(double *)(v55 + 144))
      v68 = 1;
    if ((v68 & 1) != 0)
      return 0;
  }
  v69 = *(_BYTE *)(v55 + 168);
  if ((*(_BYTE *)(v56 + 168) & 1) != 0)
  {
    if (!*(_BYTE *)(v55 + 168))
      return 0;
  }
  else
  {
    if (*(double *)(v56 + 160) != *(double *)(v55 + 160))
      v69 = 1;
    if ((v69 & 1) != 0)
      return 0;
  }
  v160 = v56;
  v161 = v55;
  v159 = (int *)type metadata accessor for QuoteDetail();
  sub_22CB6AE84(v160 + v159[15], (uint64_t)v58, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  sub_22CB6AE84(v161 + v159[15], (uint64_t)v54, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v162 = (uint64_t)&v38[*(int *)(v34 + 48)];
  sub_22CB6AE84((uint64_t)v58, (uint64_t)v38, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  sub_22CB6AE84((uint64_t)v54, v162, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v158 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v185 + 48);
  if (v158((uint64_t)v38, 1, v30) == 1)
  {
    v70 = (uint64_t)v54;
    v71 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
    sub_22CB6AED0(v70, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    sub_22CB6AED0((uint64_t)v58, &qword_255C35110, v71);
    v72 = v158;
    if (v158(v162, 1, v30) == 1)
    {
      sub_22CB6AED0((uint64_t)v38, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
      goto LABEL_74;
    }
LABEL_72:
    sub_22CB6AF0C((uint64_t)v38, (unint64_t *)&qword_255C351A0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    return 0;
  }
  sub_22CB6AE84((uint64_t)v38, (uint64_t)v51, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  if (v158(v162, 1, v30) == 1)
  {
    v73 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
    sub_22CB6AED0((uint64_t)v54, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    sub_22CB6AED0((uint64_t)v58, &qword_255C35110, v73);
    (*(void (**)(_BYTE *, uint64_t))(v185 + 8))(v51, v30);
    goto LABEL_72;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v185 + 32))(v184, v162, v30);
  sub_22CB50668(&qword_255C351A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
  v157 = sub_22CB9D00C();
  v162 = *(_QWORD *)(v185 + 8);
  ((void (*)(_BYTE *, uint64_t))v162)(v184, v30);
  v74 = (uint64_t)v54;
  v75 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  sub_22CB6AED0(v74, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  sub_22CB6AED0((uint64_t)v58, &qword_255C35110, v75);
  ((void (*)(_BYTE *, uint64_t))v162)(v51, v30);
  sub_22CB6AED0((uint64_t)v38, &qword_255C35110, v75);
  v72 = v158;
  if ((v157 & 1) == 0)
    return 0;
LABEL_74:
  v76 = v159;
  v77 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  sub_22CB6AE84(v160 + v159[16], (uint64_t)v48, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  sub_22CB6AE84(v161 + v76[16], (uint64_t)v45, &qword_255C35110, v77);
  v78 = *(int *)(v34 + 48);
  v79 = v183;
  v80 = (uint64_t)&v183[v78];
  sub_22CB6AE84((uint64_t)v48, (uint64_t)v183, &qword_255C35110, v77);
  sub_22CB6AE84((uint64_t)v45, v80, &qword_255C35110, v77);
  if (v72((uint64_t)v79, 1, v30) == 1)
  {
    sub_22CB6AED0((uint64_t)v45, &qword_255C35110, v77);
    sub_22CB6AED0((uint64_t)v48, &qword_255C35110, v77);
    if (v72(v80, 1, v30) == 1)
    {
      sub_22CB6AED0((uint64_t)v79, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
      goto LABEL_81;
    }
LABEL_79:
    sub_22CB6AF0C((uint64_t)v79, (unint64_t *)&qword_255C351A0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    return 0;
  }
  sub_22CB6AE84((uint64_t)v79, (uint64_t)v42, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  if (v72(v80, 1, v30) == 1)
  {
    v81 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
    sub_22CB6AED0((uint64_t)v45, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    sub_22CB6AED0((uint64_t)v48, &qword_255C35110, v81);
    (*(void (**)(_BYTE *, uint64_t))(v185 + 8))(v42, v30);
    goto LABEL_79;
  }
  v82 = v184;
  v83 = v185;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v185 + 32))(v184, v80, v30);
  v84 = (void (*)(uint64_t))MEMORY[0x24BDCE900];
  sub_22CB50668(&qword_255C351A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
  LODWORD(v162) = sub_22CB9D00C();
  v85 = *(void (**)(_BYTE *, uint64_t))(v83 + 8);
  v85(v82, v30);
  sub_22CB6AED0((uint64_t)v45, &qword_255C35110, v84);
  sub_22CB6AED0((uint64_t)v48, &qword_255C35110, v84);
  v85(v42, v30);
  sub_22CB6AED0((uint64_t)v79, &qword_255C35110, v84);
  if ((v162 & 1) == 0)
    return 0;
LABEL_81:
  v86 = v159[17];
  v87 = (_QWORD *)(v160 + v86);
  v88 = *(_QWORD *)(v160 + v86 + 8);
  v89 = (_QWORD *)(v161 + v86);
  v90 = v89[1];
  if (!v88)
  {
    if (v90)
      return 0;
    goto LABEL_88;
  }
  if (!v90)
    return 0;
  if (*v87 == *v89 && v88 == v90 || (v91 = sub_22CB9D4BC(), result = 0, (v91 & 1) != 0))
  {
LABEL_88:
    v93 = v159;
    v94 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
    v95 = v180;
    sub_22CB6AE84(v160 + v159[18], (uint64_t)v180, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v96 = v179;
    sub_22CB6AE84(v161 + v93[18], (uint64_t)v179, (unint64_t *)&qword_253F83998, v94);
    v97 = v181;
    v98 = (uint64_t)&v181[*(int *)(v177 + 48)];
    sub_22CB6AE84((uint64_t)v95, (uint64_t)v181, (unint64_t *)&qword_253F83998, v94);
    sub_22CB6AE84((uint64_t)v96, v98, (unint64_t *)&qword_253F83998, v94);
    v99 = *(unsigned int (**)(uint64_t, uint64_t, _BYTE *))(v178 + 48);
    if (v99((uint64_t)v97, 1, v182) == 1)
    {
      sub_22CB6AED0((uint64_t)v179, (unint64_t *)&qword_253F83998, v94);
      sub_22CB6AED0((uint64_t)v180, (unint64_t *)&qword_253F83998, v94);
      if (v99(v98, 1, v182) == 1)
      {
        sub_22CB6AED0((uint64_t)v181, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        goto LABEL_95;
      }
    }
    else
    {
      sub_22CB6AE84((uint64_t)v181, (uint64_t)v176, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      if (v99(v98, 1, v182) != 1)
      {
        v101 = v178;
        v102 = v169;
        v103 = v182;
        (*(void (**)(_BYTE *, uint64_t, _BYTE *))(v178 + 32))(v169, v98, v182);
        v104 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
        sub_22CB50668(&qword_255C350F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
        v105 = v176;
        v106 = sub_22CB9D00C();
        v107 = *(void (**)(_BYTE *, _BYTE *))(v101 + 8);
        v107(v102, v103);
        sub_22CB6AED0((uint64_t)v179, (unint64_t *)&qword_253F83998, v104);
        sub_22CB6AED0((uint64_t)v180, (unint64_t *)&qword_253F83998, v104);
        v107(v105, v103);
        sub_22CB6AED0((uint64_t)v181, (unint64_t *)&qword_253F83998, v104);
        if ((v106 & 1) == 0)
          return 0;
LABEL_95:
        v108 = v159;
        v109 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
        v110 = v174;
        sub_22CB6AE84(v160 + v159[19], (uint64_t)v174, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        v111 = v173;
        sub_22CB6AE84(v161 + v108[19], (uint64_t)v173, (unint64_t *)&qword_253F83998, v109);
        v112 = v175;
        v113 = (uint64_t)&v175[*(int *)(v177 + 48)];
        sub_22CB6AE84((uint64_t)v110, (uint64_t)v175, (unint64_t *)&qword_253F83998, v109);
        sub_22CB6AE84((uint64_t)v111, v113, (unint64_t *)&qword_253F83998, v109);
        if (v99((uint64_t)v112, 1, v182) == 1)
        {
          sub_22CB6AED0((uint64_t)v173, (unint64_t *)&qword_253F83998, v109);
          sub_22CB6AED0((uint64_t)v174, (unint64_t *)&qword_253F83998, v109);
          if (v99(v113, 1, v182) == 1)
          {
            sub_22CB6AED0((uint64_t)v175, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
            goto LABEL_102;
          }
        }
        else
        {
          sub_22CB6AE84((uint64_t)v175, (uint64_t)v172, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
          if (v99(v113, 1, v182) != 1)
          {
            v115 = v178;
            v116 = v169;
            v117 = v182;
            (*(void (**)(_BYTE *, uint64_t, _BYTE *))(v178 + 32))(v169, v113, v182);
            v118 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
            sub_22CB50668(&qword_255C350F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
            v119 = v172;
            v120 = sub_22CB9D00C();
            v121 = *(void (**)(_BYTE *, _BYTE *))(v115 + 8);
            v121(v116, v117);
            sub_22CB6AED0((uint64_t)v173, (unint64_t *)&qword_253F83998, v118);
            sub_22CB6AED0((uint64_t)v174, (unint64_t *)&qword_253F83998, v118);
            v121(v119, v117);
            sub_22CB6AED0((uint64_t)v175, (unint64_t *)&qword_253F83998, v118);
            if ((v120 & 1) == 0)
              return 0;
LABEL_102:
            v122 = v159;
            v123 = (void (*)(uint64_t))MEMORY[0x24BDCF510];
            v124 = v168;
            sub_22CB6AE84(v160 + v159[20], (uint64_t)v168, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
            v125 = v167;
            sub_22CB6AE84(v161 + v122[20], (uint64_t)v167, &qword_255C353F8, v123);
            v126 = v170;
            v127 = (uint64_t)&v170[*(int *)(v164 + 48)];
            sub_22CB6AE84((uint64_t)v124, (uint64_t)v170, &qword_255C353F8, v123);
            sub_22CB6AE84((uint64_t)v125, v127, &qword_255C353F8, v123);
            v128 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v166 + 48);
            if (v128((uint64_t)v126, 1, v171) == 1)
            {
              sub_22CB6AED0((uint64_t)v167, &qword_255C353F8, v123);
              sub_22CB6AED0((uint64_t)v168, &qword_255C353F8, v123);
              if (v128(v127, 1, v171) == 1)
              {
                sub_22CB6AED0((uint64_t)v170, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
                goto LABEL_109;
              }
            }
            else
            {
              sub_22CB6AE84((uint64_t)v170, (uint64_t)v165, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
              if (v128(v127, 1, v171) != 1)
              {
                v130 = v166;
                v131 = v163;
                v132 = v171;
                (*(void (**)(_BYTE *, uint64_t, uint64_t))(v166 + 32))(v163, v127, v171);
                v133 = (void (*)(uint64_t))MEMORY[0x24BDCF510];
                sub_22CB50668(&qword_255C35458, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF538]);
                v134 = v165;
                v135 = sub_22CB9D00C();
                v136 = *(void (**)(_BYTE *, uint64_t))(v130 + 8);
                v136(v131, v132);
                sub_22CB6AED0((uint64_t)v167, &qword_255C353F8, v133);
                sub_22CB6AED0((uint64_t)v168, &qword_255C353F8, v133);
                v136(v134, v132);
                sub_22CB6AED0((uint64_t)v170, &qword_255C353F8, v133);
                if ((v135 & 1) == 0)
                  return 0;
LABEL_109:
                v137 = v159[21];
                v138 = *(_QWORD *)(v160 + v137);
                v139 = *(_QWORD *)(v160 + v137 + 8);
                v140 = *(_QWORD *)(v160 + v137 + 16);
                v141 = *(_QWORD *)(v160 + v137 + 24);
                v142 = *(_QWORD *)(v160 + v137 + 32);
                v144 = *(_QWORD *)(v160 + v137 + 48);
                v143 = *(_BYTE **)(v160 + v137 + 56);
                v182 = *(_BYTE **)(v160 + v137 + 40);
                v183 = v143;
                v145 = *(_QWORD *)(v160 + v137 + 64);
                v147 = *(_QWORD *)(v160 + v137 + 80);
                v146 = *(_QWORD *)(v160 + v137 + 88);
                v184 = *(_BYTE **)(v160 + v137 + 72);
                v185 = v146;
                v148 = v161 + v137;
                v149 = *(_BYTE **)(v148 + 8);
                v174 = *(_BYTE **)v148;
                v175 = v149;
                v150 = *(_QWORD *)(v148 + 24);
                v176 = *(_BYTE **)(v148 + 16);
                v177 = v150;
                v151 = *(_BYTE **)(v148 + 40);
                v178 = *(_QWORD *)(v148 + 32);
                v179 = v151;
                v152 = *(_BYTE **)(v148 + 56);
                v180 = *(_BYTE **)(v148 + 48);
                v181 = v152;
                v153 = *(_BYTE **)(v148 + 64);
                v154 = *(_QWORD *)(v148 + 80);
                v172 = *(_BYTE **)(v148 + 72);
                v173 = v153;
                v171 = *(_QWORD *)(v148 + 88);
                if (v147)
                {
                  v187 = v138;
                  v188 = v139;
                  v189 = v140;
                  v190 = v141;
                  v191 = v142;
                  v192 = v182;
                  v193 = v144;
                  v194 = v183;
                  v195 = v145;
                  v196 = v184;
                  v197 = v147;
                  v198 = v185;
                  if (v154)
                  {
                    v186[0] = v174;
                    v186[1] = v175;
                    v186[2] = v176;
                    v186[3] = v177;
                    v186[4] = v178;
                    v186[5] = v179;
                    v186[6] = v180;
                    v186[7] = v181;
                    v186[8] = v173;
                    v186[9] = v172;
                    v186[10] = v154;
                    v186[11] = v171;
                    v155 = _s9StocksKit12FundMetadataV2eeoiySbAC_ACtFZ_0(&v187, v186);
                    v180 = v192;
                    v181 = v194;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    return (v155 & 1) != 0;
                  }
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else if (!v154)
                {
                  return 1;
                }
                v187 = v138;
                v188 = v139;
                v189 = v140;
                v190 = v141;
                v191 = v142;
                v192 = v182;
                v193 = v144;
                v194 = v183;
                v195 = v145;
                v196 = v184;
                v197 = v147;
                v198 = v185;
                v199 = v174;
                v200 = v175;
                v201 = v176;
                v202 = v177;
                v203 = v178;
                v204 = v179;
                v205 = v180;
                v206 = v181;
                v207 = v173;
                v208 = v172;
                v209 = v154;
                v210 = v171;
                sub_22CB8B644((uint64_t)v174, (uint64_t)v175, (uint64_t)v176, v177, v178, (uint64_t)v179, (uint64_t)v180, (uint64_t)v181, (uint64_t)v173, (uint64_t)v172, v154);
                sub_22CB90688((uint64_t)&v187);
                return 0;
              }
              v129 = (void (*)(uint64_t))MEMORY[0x24BDCF510];
              sub_22CB6AED0((uint64_t)v167, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
              sub_22CB6AED0((uint64_t)v168, &qword_255C353F8, v129);
              (*(void (**)(_BYTE *, uint64_t))(v166 + 8))(v165, v171);
            }
            sub_22CB6AF0C((uint64_t)v170, &qword_255C35450, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
            return 0;
          }
          v114 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
          sub_22CB6AED0((uint64_t)v173, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
          sub_22CB6AED0((uint64_t)v174, (unint64_t *)&qword_253F83998, v114);
          (*(void (**)(_BYTE *, _BYTE *))(v178 + 8))(v172, v182);
        }
        sub_22CB6AF0C((uint64_t)v175, &qword_255C350E8, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        return 0;
      }
      v100 = (void (*)(uint64_t))MEMORY[0x24BDCDAC0];
      sub_22CB6AED0((uint64_t)v179, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      sub_22CB6AED0((uint64_t)v180, (unint64_t *)&qword_253F83998, v100);
      (*(void (**)(_BYTE *, _BYTE *))(v178 + 8))(v176, v182);
    }
    sub_22CB6AF0C((uint64_t)v181, &qword_255C350E8, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    return 0;
  }
  return result;
}

unint64_t sub_22CB8DC58()
{
  unint64_t result;

  result = qword_255C35408;
  if (!qword_255C35408)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0CB4, &type metadata for QuoteDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35408);
  }
  return result;
}

unint64_t sub_22CB8DC9C()
{
  unint64_t result;

  result = qword_255C35410;
  if (!qword_255C35410)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for FundMetadata, &type metadata for FundMetadata);
    atomic_store(result, (unint64_t *)&qword_255C35410);
  }
  return result;
}

void sub_22CB8DCE0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_22CB8DC58();
    v7 = a3(a1, &type metadata for QuoteDetail.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_22CB8DD3C()
{
  unint64_t result;

  result = qword_255C35420;
  if (!qword_255C35420)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for FundMetadata, &type metadata for FundMetadata);
    atomic_store(result, (unint64_t *)&qword_255C35420);
  }
  return result;
}

uint64_t sub_22CB8DD80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for QuoteDetail();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22CB8DDC4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for QuoteDetail();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for QuoteDetail(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    *(_QWORD *)(a1 + 48) = a2[6];
    v7 = a2[8];
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_QWORD *)(a1 + 64) = v7;
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
    *(_QWORD *)(a1 + 128) = a2[16];
    v8 = a2[18];
    *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
    *(_QWORD *)(a1 + 144) = v8;
    v9 = a2[20];
    *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
    *(_QWORD *)(a1 + 160) = v9;
    v10 = a3[15];
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    v13 = sub_22CB9C544();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    if (v15(v12, 1, v13))
    {
      sub_22CB4E0E4(0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v18 = a3[16];
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    if (v15((char *)a2 + v18, 1, v13))
    {
      sub_22CB4E0E4(0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v20, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v19, 0, 1, v13);
    }
    v22 = a3[17];
    v23 = a3[18];
    v24 = (_QWORD *)((char *)v4 + v22);
    v25 = (uint64_t *)((char *)a2 + v22);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = (char *)v4 + v23;
    v28 = (char *)a2 + v23;
    v29 = sub_22CB9C4F0();
    v30 = *(_QWORD *)(v29 - 8);
    v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
    swift_bridgeObjectRetain();
    if (v31(v28, 1, v29))
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v33 = a3[19];
    v34 = (char *)v4 + v33;
    v35 = (char *)a2 + v33;
    if (v31((char *)a2 + v33, 1, v29))
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v34, v35, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v34, 0, 1, v29);
    }
    v37 = a3[20];
    v38 = (char *)v4 + v37;
    v39 = (char *)a2 + v37;
    v40 = sub_22CB9C664();
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      sub_22CB4E0E4(0, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    v43 = a3[21];
    v44 = (_QWORD *)((char *)v4 + v43);
    v45 = (uint64_t *)((char *)a2 + v43);
    v46 = v45[10];
    if (v46)
    {
      v47 = v45[1];
      *v44 = *v45;
      v44[1] = v47;
      v48 = v45[3];
      v44[2] = v45[2];
      v44[3] = v48;
      v49 = v45[5];
      v44[4] = v45[4];
      v44[5] = v49;
      v50 = v45[7];
      v44[6] = v45[6];
      v44[7] = v50;
      v51 = v45[9];
      v44[8] = v45[8];
      v44[9] = v51;
      v52 = v45[11];
      v44[10] = v46;
      v44[11] = v52;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v53 = *((_OWORD *)v45 + 3);
      *((_OWORD *)v44 + 2) = *((_OWORD *)v45 + 2);
      *((_OWORD *)v44 + 3) = v53;
      v54 = *((_OWORD *)v45 + 5);
      *((_OWORD *)v44 + 4) = *((_OWORD *)v45 + 4);
      *((_OWORD *)v44 + 5) = v54;
      v55 = *((_OWORD *)v45 + 1);
      *(_OWORD *)v44 = *(_OWORD *)v45;
      *((_OWORD *)v44 + 1) = v55;
    }
  }
  return v4;
}

uint64_t destroy for QuoteDetail(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v4 = a1 + a2[15];
  v5 = sub_22CB9C544();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + a2[16];
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease();
  v9 = a1 + a2[18];
  v10 = sub_22CB9C4F0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v12(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v13 = a1 + a2[19];
  if (!v12(v13, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
  v14 = a1 + a2[20];
  v15 = sub_22CB9C664();
  v16 = *(_QWORD *)(v15 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  if (!(_DWORD)result)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  if (*(_QWORD *)(a1 + a2[21] + 80))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for QuoteDetail(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(const void *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v7;
  v8 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v8;
  v9 = a3[15];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = sub_22CB9C544();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12))
  {
    sub_22CB4E0E4(0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = a3[16];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  if (v14((const void *)(a2 + v16), 1, v12))
  {
    sub_22CB4E0E4(0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v17, v18, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  v20 = a3[17];
  v21 = a3[18];
  v22 = (_QWORD *)(a1 + v20);
  v23 = (_QWORD *)(a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (void *)(a1 + v21);
  v26 = (const void *)(a2 + v21);
  v27 = sub_22CB9C4F0();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  swift_bridgeObjectRetain();
  if (v29(v26, 1, v27))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v31 = a3[19];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  if (v29((const void *)(a2 + v31), 1, v27))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v32, v33, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v32, 0, 1, v27);
  }
  v35 = a3[20];
  v36 = (void *)(a1 + v35);
  v37 = (const void *)(a2 + v35);
  v38 = sub_22CB9C664();
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    sub_22CB4E0E4(0, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v36, v37, v38);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  v41 = a3[21];
  v42 = (_QWORD *)(a1 + v41);
  v43 = (_QWORD *)(a2 + v41);
  v44 = v43[10];
  if (v44)
  {
    v45 = v43[1];
    *v42 = *v43;
    v42[1] = v45;
    v46 = v43[3];
    v42[2] = v43[2];
    v42[3] = v46;
    v47 = v43[5];
    v42[4] = v43[4];
    v42[5] = v47;
    v48 = v43[7];
    v42[6] = v43[6];
    v42[7] = v48;
    v49 = v43[9];
    v42[8] = v43[8];
    v42[9] = v49;
    v50 = v43[11];
    v42[10] = v44;
    v42[11] = v50;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v51 = *((_OWORD *)v43 + 3);
    *((_OWORD *)v42 + 2) = *((_OWORD *)v43 + 2);
    *((_OWORD *)v42 + 3) = v51;
    v52 = *((_OWORD *)v43 + 5);
    *((_OWORD *)v42 + 4) = *((_OWORD *)v43 + 4);
    *((_OWORD *)v42 + 5) = v52;
    v53 = *((_OWORD *)v43 + 1);
    *(_OWORD *)v42 = *(_OWORD *)v43;
    *((_OWORD *)v42 + 1) = v53;
  }
  return a1;
}

uint64_t assignWithCopy for QuoteDetail(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(void *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  v9 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  v10 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  v11 = a2[10];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_QWORD *)(a1 + 80) = v11;
  v12 = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_QWORD *)(a1 + 96) = v12;
  v13 = a2[14];
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_QWORD *)(a1 + 112) = v13;
  v14 = a2[16];
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_QWORD *)(a1 + 128) = v14;
  v15 = a2[18];
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  *(_QWORD *)(a1 + 144) = v15;
  v16 = a2[20];
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  *(_QWORD *)(a1 + 160) = v16;
  v17 = a3[15];
  v18 = (void *)(a1 + v17);
  v19 = (char *)a2 + v17;
  v20 = sub_22CB9C544();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
LABEL_6:
    sub_22CB4E0E4(0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
LABEL_7:
  v26 = a3[16];
  v27 = (void *)(a1 + v26);
  v28 = (char *)a2 + v26;
  v29 = v22((void *)(a1 + v26), 1, v20);
  v30 = v22(v28, 1, v20);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, char *, uint64_t))(v21 + 16))(v27, v28, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v27, 0, 1, v20);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(void *, uint64_t))(v21 + 8))(v27, v20);
LABEL_12:
    sub_22CB4E0E4(0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, char *, uint64_t))(v21 + 24))(v27, v28, v20);
LABEL_13:
  v32 = a3[17];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (uint64_t *)((char *)a2 + v32);
  *v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 = a3[18];
  v36 = (void *)(a1 + v35);
  v37 = (char *)a2 + v35;
  v38 = sub_22CB9C4F0();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v42)
  {
    (*(void (**)(void *, uint64_t))(v39 + 8))(v36, v38);
LABEL_18:
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, char *, uint64_t))(v39 + 24))(v36, v37, v38);
LABEL_19:
  v44 = a3[19];
  v45 = (void *)(a1 + v44);
  v46 = (char *)a2 + v44;
  v47 = v40((void *)(a1 + v44), 1, v38);
  v48 = v40(v46, 1, v38);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(void *, char *, uint64_t))(v39 + 16))(v45, v46, v38);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v45, 0, 1, v38);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v48)
  {
    (*(void (**)(void *, uint64_t))(v39 + 8))(v45, v38);
LABEL_24:
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, char *, uint64_t))(v39 + 24))(v45, v46, v38);
LABEL_25:
  v50 = a3[20];
  v51 = (void *)(a1 + v50);
  v52 = (char *)a2 + v50;
  v53 = sub_22CB9C664();
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v54 + 48);
  v56 = v55(v51, 1, v53);
  v57 = v55(v52, 1, v53);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(void *, char *, uint64_t))(v54 + 16))(v51, v52, v53);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v57)
  {
    (*(void (**)(void *, uint64_t))(v54 + 8))(v51, v53);
LABEL_30:
    sub_22CB4E0E4(0, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, char *, uint64_t))(v54 + 24))(v51, v52, v53);
LABEL_31:
  v59 = a3[21];
  v60 = (_QWORD *)(a1 + v59);
  v61 = (uint64_t *)((char *)a2 + v59);
  v62 = *(_QWORD *)(a1 + v59 + 80);
  v63 = *(uint64_t *)((char *)a2 + v59 + 80);
  if (v62)
  {
    if (v63)
    {
      *v60 = *v61;
      v60[1] = v61[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v60[2] = v61[2];
      v60[3] = v61[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v60[4] = v61[4];
      v60[5] = v61[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v60[6] = v61[6];
      v60[7] = v61[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v60[8] = v61[8];
      v60[9] = v61[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v60[10] = v61[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v60[11] = v61[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_22CB8EF5C((uint64_t)v60);
      v64 = *((_OWORD *)v61 + 1);
      *(_OWORD *)v60 = *(_OWORD *)v61;
      *((_OWORD *)v60 + 1) = v64;
      v65 = *((_OWORD *)v61 + 5);
      v67 = *((_OWORD *)v61 + 2);
      v66 = *((_OWORD *)v61 + 3);
      *((_OWORD *)v60 + 4) = *((_OWORD *)v61 + 4);
      *((_OWORD *)v60 + 5) = v65;
      *((_OWORD *)v60 + 2) = v67;
      *((_OWORD *)v60 + 3) = v66;
    }
  }
  else if (v63)
  {
    *v60 = *v61;
    v60[1] = v61[1];
    v60[2] = v61[2];
    v60[3] = v61[3];
    v60[4] = v61[4];
    v60[5] = v61[5];
    v60[6] = v61[6];
    v60[7] = v61[7];
    v60[8] = v61[8];
    v60[9] = v61[9];
    v60[10] = v61[10];
    v60[11] = v61[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v68 = *((_OWORD *)v61 + 1);
    *(_OWORD *)v60 = *(_OWORD *)v61;
    *((_OWORD *)v60 + 1) = v68;
    v69 = *((_OWORD *)v61 + 2);
    v70 = *((_OWORD *)v61 + 3);
    v71 = *((_OWORD *)v61 + 5);
    *((_OWORD *)v60 + 4) = *((_OWORD *)v61 + 4);
    *((_OWORD *)v60 + 5) = v71;
    *((_OWORD *)v60 + 2) = v69;
    *((_OWORD *)v60 + 3) = v70;
  }
  return a1;
}

uint64_t sub_22CB8EF5C(uint64_t a1)
{
  destroy for FundMetadata();
  return a1;
}

uint64_t initializeWithTake for QuoteDetail(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(const void *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v7;
  v8 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v8;
  v9 = a3[15];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = sub_22CB9C544();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12))
  {
    sub_22CB4E0E4(0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = a3[16];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  if (v14((const void *)(a2 + v16), 1, v12))
  {
    sub_22CB4E0E4(0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v17, v18, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  v20 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  v23 = sub_22CB9C4F0();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48);
  if (v25(v22, 1, v23))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v27 = a3[19];
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  if (v25((const void *)(a2 + v27), 1, v23))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v28, v29, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v23);
  }
  v31 = a3[20];
  v32 = (void *)(a1 + v31);
  v33 = (const void *)(a2 + v31);
  v34 = sub_22CB9C664();
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    sub_22CB4E0E4(0, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v35 + 32))(v32, v33, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  v37 = a3[21];
  v38 = (_OWORD *)(a1 + v37);
  v39 = (_OWORD *)(a2 + v37);
  v40 = v39[3];
  v38[2] = v39[2];
  v38[3] = v40;
  v41 = v39[5];
  v38[4] = v39[4];
  v38[5] = v41;
  v42 = v39[1];
  *v38 = *v39;
  v38[1] = v42;
  return a1;
}

uint64_t assignWithTake for QuoteDetail(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v7;
  v8 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v8;
  v9 = a3[15];
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = sub_22CB9C544();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    sub_22CB4E0E4(0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  v18 = a3[16];
  v19 = (void *)(a1 + v18);
  v20 = (void *)(a2 + v18);
  v21 = v14((void *)(a1 + v18), 1, v12);
  v22 = v14(v20, 1, v12);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v19, v20, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v19, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v19, v12);
LABEL_12:
    sub_22CB4E0E4(0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v19, v20, v12);
LABEL_13:
  v24 = a3[17];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (uint64_t *)(a2 + v24);
  v28 = *v26;
  v27 = v26[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  v29 = a3[18];
  v30 = (void *)(a1 + v29);
  v31 = (void *)(a2 + v29);
  v32 = sub_22CB9C4F0();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
  v35 = v34(v30, 1, v32);
  v36 = v34(v31, 1, v32);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v33 + 32))(v30, v31, v32);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v36)
  {
    (*(void (**)(void *, uint64_t))(v33 + 8))(v30, v32);
LABEL_18:
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v33 + 40))(v30, v31, v32);
LABEL_19:
  v38 = a3[19];
  v39 = (void *)(a1 + v38);
  v40 = (void *)(a2 + v38);
  v41 = v34((void *)(a1 + v38), 1, v32);
  v42 = v34(v40, 1, v32);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v33 + 32))(v39, v40, v32);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v39, 0, 1, v32);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v42)
  {
    (*(void (**)(void *, uint64_t))(v33 + 8))(v39, v32);
LABEL_24:
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v33 + 40))(v39, v40, v32);
LABEL_25:
  v44 = a3[20];
  v45 = (void *)(a1 + v44);
  v46 = (void *)(a2 + v44);
  v47 = sub_22CB9C664();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, void *, uint64_t))(v48 + 32))(v45, v46, v47);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v51)
  {
    (*(void (**)(void *, uint64_t))(v48 + 8))(v45, v47);
LABEL_30:
    sub_22CB4E0E4(0, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v48 + 40))(v45, v46, v47);
LABEL_31:
  v53 = a3[21];
  v54 = a1 + v53;
  v55 = a2 + v53;
  if (!*(_QWORD *)(a1 + v53 + 80))
  {
LABEL_35:
    v61 = *(_OWORD *)(v55 + 48);
    *(_OWORD *)(v54 + 32) = *(_OWORD *)(v55 + 32);
    *(_OWORD *)(v54 + 48) = v61;
    v62 = *(_OWORD *)(v55 + 80);
    *(_OWORD *)(v54 + 64) = *(_OWORD *)(v55 + 64);
    *(_OWORD *)(v54 + 80) = v62;
    v63 = *(_OWORD *)(v55 + 16);
    *(_OWORD *)v54 = *(_OWORD *)v55;
    *(_OWORD *)(v54 + 16) = v63;
    return a1;
  }
  if (!*(_QWORD *)(v55 + 80))
  {
    sub_22CB8EF5C(v54);
    goto LABEL_35;
  }
  v56 = *(_QWORD *)(v55 + 8);
  *(_QWORD *)v54 = *(_QWORD *)v55;
  *(_QWORD *)(v54 + 8) = v56;
  swift_bridgeObjectRelease();
  v57 = *(_QWORD *)(v55 + 24);
  *(_QWORD *)(v54 + 16) = *(_QWORD *)(v55 + 16);
  *(_QWORD *)(v54 + 24) = v57;
  swift_bridgeObjectRelease();
  v58 = *(_QWORD *)(v55 + 40);
  *(_QWORD *)(v54 + 32) = *(_QWORD *)(v55 + 32);
  *(_QWORD *)(v54 + 40) = v58;
  swift_bridgeObjectRelease();
  v59 = *(_QWORD *)(v55 + 56);
  *(_QWORD *)(v54 + 48) = *(_QWORD *)(v55 + 48);
  *(_QWORD *)(v54 + 56) = v59;
  swift_bridgeObjectRelease();
  v60 = *(_QWORD *)(v55 + 72);
  *(_QWORD *)(v54 + 64) = *(_QWORD *)(v55 + 64);
  *(_QWORD *)(v54 + 72) = v60;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v54 + 80) = *(_QWORD *)(v55 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v54 + 88) = *(_QWORD *)(v55 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for QuoteDetail()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB8F920(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;

  sub_22CB4E0E4(0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[15];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v7 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v9 = a3[18];
    }
    else
    {
      sub_22CB4E0E4(0, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      v8 = v14;
      v7 = *(_QWORD *)(v14 - 8);
      v9 = a3[20];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[17] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  v11 = v10 - 1;
  if (v11 < 0)
    v11 = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for QuoteDetail()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_22CB8FA34(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_22CB4E0E4(0, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[15];
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + a4[17] + 8) = a2;
      return;
    }
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[18];
    }
    else
    {
      sub_22CB4E0E4(0, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      v10 = v13;
      v9 = *(_QWORD *)(v13 - 8);
      v11 = a4[20];
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_22CB8FB2C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_22CB4E0E4(319, &qword_255C35110, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  if (v0 <= 0x3F)
  {
    sub_22CB4E0E4(319, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
    {
      sub_22CB4E0E4(319, &qword_255C353F8, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for QuoteDetail.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for QuoteDetail.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_22CB8FD0C + 4 * byte_22CBA0AB7[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_22CB8FD40 + 4 * byte_22CBA0AB2[v4]))();
}

uint64_t sub_22CB8FD40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB8FD48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB8FD50);
  return result;
}

uint64_t sub_22CB8FD5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB8FD64);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_22CB8FD68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB8FD70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for QuoteDetail.CodingKeys()
{
  return &type metadata for QuoteDetail.CodingKeys;
}

unint64_t sub_22CB8FD90()
{
  unint64_t result;

  result = qword_255C35438;
  if (!qword_255C35438)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0C8C, &type metadata for QuoteDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35438);
  }
  return result;
}

unint64_t sub_22CB8FDD8()
{
  unint64_t result;

  result = qword_255C35440;
  if (!qword_255C35440)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0BFC, &type metadata for QuoteDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35440);
  }
  return result;
}

unint64_t sub_22CB8FE20()
{
  unint64_t result;

  result = qword_255C35448;
  if (!qword_255C35448)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0C24, &type metadata for QuoteDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35448);
  }
  return result;
}

uint64_t sub_22CB8FE64(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x506E65704F796164 && a2 == 0xEC00000065636972;
  if (v2 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7250776F4C796164 && a2 == 0xEB00000000656369 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5068676948796164 && a2 == 0xEC00000065636972 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x50776F4C72616579 && a2 == 0xEC00000065636972 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6867694872616579 && a2 == 0xED00006563697250 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x646E656469766964 && a2 == 0xED0000646C656959 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x656D756C6F76 && a2 == 0xE600000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x5665676172657661 && a2 == 0xED0000656D756C6FLL || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000022CBA2930 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 1635018082 && a2 == 0xE400000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000022CBA2950 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000022CBA25C0 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x73676E696E726165 && a2 == 0xEF65746144646E45 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xEC00000065646F43 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x55736C6961746564 && a2 == 0xEA00000000004C52 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000022CBA2970 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x695474656B72616DLL && a2 == 0xEE00656E6F5A656DLL || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x6174654D646E7566 && a2 == 0xEC00000061746164)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else
  {
    v6 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 17;
    else
      return 18;
  }
}

uint64_t sub_22CB90688(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 96);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v11 = *(_OWORD *)(a1 + 160);
  v9 = *(_QWORD *)(a1 + 176);
  sub_22CB90748(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
  sub_22CB90748(v12, v2, v3, v4, v5, v6, v7, v8, v11, *((uint64_t *)&v11 + 1), v9);
  return a1;
}

uint64_t sub_22CB90748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;

  result = a11;
  if (a11)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t StockChart.Entry.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StockChart.Entry.referenceDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StockChart.Entry(0) + 20);
  v4 = sub_22CB9C544();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for StockChart.Entry(uint64_t a1)
{
  return sub_22CB60CD0(a1, (uint64_t *)&unk_255C354E0);
}

uint64_t StockChart.Entry.open.getter()
{
  return sub_22CB91290(type metadata accessor for StockChart.Entry);
}

uint64_t StockChart.Entry.close.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for StockChart.Entry(0) + 28));
}

uint64_t StockChart.Entry.high.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for StockChart.Entry(0) + 32));
}

uint64_t StockChart.Entry.low.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for StockChart.Entry(0) + 36));
}

uint64_t StockChart.Entry.volume.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for StockChart.Entry(0) + 40));
}

uint64_t sub_22CB9090C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22CB90930 + 4 * byte_22CBA0D08[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_22CB90930()
{
  return 0x636E657265666572;
}

uint64_t sub_22CB90954()
{
  return 1852141679;
}

uint64_t sub_22CB90964()
{
  return 0x65736F6C63;
}

uint64_t sub_22CB90978()
{
  return 1751607656;
}

uint64_t sub_22CB90988()
{
  return 7827308;
}

uint64_t sub_22CB90998()
{
  return 0x656D756C6F76;
}

uint64_t sub_22CB909AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB93338(a1, a2);
  *a3 = result;
  return result;
}

void sub_22CB909D0(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_22CB909DC()
{
  sub_22CB91C50();
  return sub_22CB9D654();
}

uint64_t sub_22CB90A04()
{
  sub_22CB91C50();
  return sub_22CB9D660();
}

uint64_t StockChart.Entry.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;

  sub_22CB5F8B8(0, &qword_255C35460, (uint64_t (*)(void))sub_22CB91C50, (uint64_t)&type metadata for StockChart.Entry.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB91C50();
  sub_22CB9D57C();
  v16 = 0;
  sub_22CB9D468();
  if (!v1)
  {
    type metadata accessor for StockChart.Entry(0);
    v15 = 1;
    sub_22CB9C544();
    sub_22CB50668(&qword_253F837D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_22CB9D480();
    v14 = 2;
    sub_22CB9D444();
    v13 = 3;
    sub_22CB9D444();
    v12 = 4;
    sub_22CB9D444();
    v11 = 5;
    sub_22CB9D444();
    v10 = 6;
    sub_22CB9D444();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t StockChart.Entry.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v38 = a2;
  v3 = sub_22CB9C544();
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v39 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB5F8B8(0, &qword_255C35470, (uint64_t (*)(void))sub_22CB91C50, (uint64_t)&type metadata for StockChart.Entry.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v43 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - v7;
  v9 = (int *)type metadata accessor for StockChart.Entry(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB91C50();
  v42 = v8;
  v12 = (uint64_t)v44;
  sub_22CB9D570();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v13 = v6;
  v44 = a1;
  v14 = v39;
  v15 = v40;
  v16 = v41;
  v51 = 0;
  v17 = (uint64_t)v11;
  *v11 = sub_22CB9D3F0();
  v11[1] = v18;
  v50 = 1;
  sub_22CB50668(&qword_253F834C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  sub_22CB9D408();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))((char *)v11 + v9[5], v14, v16);
  v49 = 2;
  v19 = sub_22CB9D3CC();
  v20 = v13;
  v21 = v17 + v9[6];
  *(_QWORD *)v21 = v19;
  *(_BYTE *)(v21 + 8) = v22 & 1;
  v48 = 3;
  v23 = sub_22CB9D3CC();
  v24 = v17 + v9[7];
  *(_QWORD *)v24 = v23;
  *(_BYTE *)(v24 + 8) = v25 & 1;
  v47 = 4;
  v26 = sub_22CB9D3CC();
  v27 = v17 + v9[8];
  *(_QWORD *)v27 = v26;
  *(_BYTE *)(v27 + 8) = v28 & 1;
  v46 = 5;
  v29 = sub_22CB9D3CC();
  v30 = v17 + v9[9];
  *(_QWORD *)v30 = v29;
  *(_BYTE *)(v30 + 8) = v31 & 1;
  v45 = 6;
  v32 = v17;
  v33 = sub_22CB9D3CC();
  LOBYTE(v17) = v34;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v42, v43);
  v35 = v32 + v9[10];
  *(_QWORD *)v35 = v33;
  *(_BYTE *)(v35 + 8) = v17 & 1;
  sub_22CB4DCF4(v32, v38, type metadata accessor for StockChart.Entry);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  return sub_22CB6257C(v32, type metadata accessor for StockChart.Entry);
}

uint64_t sub_22CB9109C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return StockChart.Entry.init(from:)(a1, a2);
}

uint64_t sub_22CB910B0(_QWORD *a1)
{
  return StockChart.Entry.encode(to:)(a1);
}

uint64_t StockChart.Feature.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_22CB9D39C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t StockChart.Feature.rawValue.getter()
{
  return 0x656D756C6F76;
}

uint64_t sub_22CB91130()
{
  sub_22CB9D534();
  sub_22CB9D048();
  return sub_22CB9D558();
}

uint64_t sub_22CB9117C()
{
  return sub_22CB9D048();
}

uint64_t sub_22CB91190()
{
  sub_22CB9D534();
  sub_22CB9D048();
  return sub_22CB9D558();
}

uint64_t sub_22CB911D8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_22CB9D39C();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_22CB91228(_QWORD *a1@<X8>)
{
  *a1 = 0x656D756C6F76;
  a1[1] = 0xE600000000000000;
}

uint64_t StockChart.entries.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StockChart.dateRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for StockChart(0);
  return sub_22CB4DCF4(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))sub_22CB4E03C);
}

uint64_t StockChart.previousClose.getter()
{
  return sub_22CB91290(type metadata accessor for StockChart);
}

uint64_t sub_22CB91290(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1(0) + 24));
}

uint64_t StockChart.marketTimeZone.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StockChart(0) + 28);
  v4 = sub_22CB9C664();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void *StockChart.features.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (!v2)
    return (void *)MEMORY[0x24BEE4AF8];
  v3 = v2 - 1;
  v4 = type metadata accessor for StockChart.Entry(0);
  v5 = v1
     + ((*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v4 - 8) + 72) * v3
     + *(int *)(v4 + 40);
  if ((*(_BYTE *)(v5 + 8) & 1) != 0 || *(double *)v5 <= 0.0)
    return (void *)MEMORY[0x24BEE4AF8];
  else
    return &unk_24F75DE50;
}

uint64_t sub_22CB91384()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22CB913B4 + 4 * byte_22CBA0D0F[*v0]))(0x73656972746E65, 0xE700000000000000);
}

uint64_t sub_22CB913B4()
{
  return 0x676E615265746164;
}

uint64_t sub_22CB913D0()
{
  return 0x73756F6976657270;
}

uint64_t sub_22CB913F4()
{
  return 0x695474656B72616DLL;
}

uint64_t sub_22CB91418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB935E8(a1, a2);
  *a3 = result;
  return result;
}

void sub_22CB9143C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_22CB91448()
{
  sub_22CB91E8C();
  return sub_22CB9D654();
}

uint64_t sub_22CB91470()
{
  sub_22CB91E8C();
  return sub_22CB9D660();
}

uint64_t StockChart.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];
  uint64_t v12;

  v3 = v1;
  sub_22CB5F8B8(0, &qword_255C35478, (uint64_t (*)(void))sub_22CB91E8C, (uint64_t)&type metadata for StockChart.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v11[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB91E8C();
  sub_22CB9D57C();
  v12 = *v3;
  v11[15] = 0;
  sub_22CB91ED0();
  sub_22CB91FA4(&qword_255C35490, &qword_255C35498, (uint64_t)&protocol conformance descriptor for StockChart.Entry, MEMORY[0x24BEE12A0]);
  sub_22CB9D480();
  if (!v2)
  {
    type metadata accessor for StockChart(0);
    v11[14] = 1;
    sub_22CB4E03C();
    sub_22CB91F24(&qword_255C354A0, &qword_253F837D8, MEMORY[0x24BDCE920], MEMORY[0x24BEE08E0]);
    sub_22CB9D480();
    v11[13] = 2;
    sub_22CB9D444();
    v11[12] = 3;
    sub_22CB9C664();
    sub_22CB50668(&qword_255C35138, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF528]);
    sub_22CB9D480();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t StockChart.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;

  v22 = a2;
  v23 = sub_22CB9C664();
  v21 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4E03C();
  v24 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB5F8B8(0, &qword_255C354A8, (uint64_t (*)(void))sub_22CB91E8C, (uint64_t)&type metadata for StockChart.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v26 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v21 - v8;
  v10 = (int *)type metadata accessor for StockChart(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v28 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_22CB91E8C();
  v27 = v9;
  v14 = v29;
  sub_22CB9D570();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  v15 = v25;
  sub_22CB91ED0();
  v33 = 0;
  sub_22CB91FA4(&qword_255C354B0, &qword_255C354B8, (uint64_t)&protocol conformance descriptor for StockChart.Entry, MEMORY[0x24BEE12D0]);
  sub_22CB9D408();
  *(_QWORD *)v12 = v34;
  v32 = 1;
  sub_22CB91F24(&qword_255C354C0, &qword_253F834C8, MEMORY[0x24BDCE960], MEMORY[0x24BEE0900]);
  sub_22CB9D408();
  sub_22CB92024((uint64_t)v6, (uint64_t)&v12[v10[5]]);
  v31 = 2;
  v16 = sub_22CB9D3CC();
  v17 = &v12[v10[6]];
  *(_QWORD *)v17 = v16;
  v17[8] = v18 & 1;
  v30 = 3;
  sub_22CB50668(&qword_255C35158, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], MEMORY[0x24BDCF540]);
  v19 = v23;
  sub_22CB9D408();
  MEMORY[8](v27, v26);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(&v12[v10[7]], v15, v19);
  sub_22CB4DCF4((uint64_t)v12, v22, type metadata accessor for StockChart);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return sub_22CB6257C((uint64_t)v12, type metadata accessor for StockChart);
}

uint64_t sub_22CB91AA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return StockChart.init(from:)(a1, a2);
}

uint64_t sub_22CB91AB8(_QWORD *a1)
{
  return StockChart.encode(to:)(a1);
}

BOOL _s9StocksKit10StockChartV5EntryV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  _BOOL8 result;
  int *v7;
  uint64_t v8;
  double *v9;
  char v10;
  double *v11;
  int v12;
  uint64_t v13;
  double *v14;
  char v15;
  double *v16;
  int v17;
  uint64_t v18;
  double *v19;
  char v20;
  double *v21;
  int v22;
  uint64_t v23;
  double *v24;
  char v25;
  double *v26;
  int v27;
  uint64_t v28;
  double *v29;
  char v30;
  double *v31;
  char v32;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_22CB9D4BC(), result = 0, (v5 & 1) != 0))
  {
    v7 = (int *)type metadata accessor for StockChart.Entry(0);
    if ((sub_22CB9C514() & 1) != 0)
    {
      v8 = v7[6];
      v9 = (double *)((char *)a1 + v8);
      v10 = *((_BYTE *)a1 + v8 + 8);
      v11 = (double *)((char *)a2 + v8);
      v12 = *((unsigned __int8 *)a2 + v8 + 8);
      if ((v10 & 1) != 0)
      {
        if (!v12)
          return 0;
      }
      else
      {
        if (*v9 != *v11)
          LOBYTE(v12) = 1;
        if ((v12 & 1) != 0)
          return 0;
      }
      v13 = v7[7];
      v14 = (double *)((char *)a1 + v13);
      v15 = *((_BYTE *)a1 + v13 + 8);
      v16 = (double *)((char *)a2 + v13);
      v17 = *((unsigned __int8 *)a2 + v13 + 8);
      if ((v15 & 1) != 0)
      {
        if (!v17)
          return 0;
      }
      else
      {
        if (*v14 != *v16)
          LOBYTE(v17) = 1;
        if ((v17 & 1) != 0)
          return 0;
      }
      v18 = v7[8];
      v19 = (double *)((char *)a1 + v18);
      v20 = *((_BYTE *)a1 + v18 + 8);
      v21 = (double *)((char *)a2 + v18);
      v22 = *((unsigned __int8 *)a2 + v18 + 8);
      if ((v20 & 1) != 0)
      {
        if (!v22)
          return 0;
      }
      else
      {
        if (*v19 != *v21)
          LOBYTE(v22) = 1;
        if ((v22 & 1) != 0)
          return 0;
      }
      v23 = v7[9];
      v24 = (double *)((char *)a1 + v23);
      v25 = *((_BYTE *)a1 + v23 + 8);
      v26 = (double *)((char *)a2 + v23);
      v27 = *((unsigned __int8 *)a2 + v23 + 8);
      if ((v25 & 1) != 0)
      {
        if (!v27)
          return 0;
      }
      else
      {
        if (*v24 != *v26)
          LOBYTE(v27) = 1;
        if ((v27 & 1) != 0)
          return 0;
      }
      v28 = v7[10];
      v29 = (double *)((char *)a1 + v28);
      v30 = *((_BYTE *)a1 + v28 + 8);
      v31 = (double *)((char *)a2 + v28);
      v32 = *((_BYTE *)a2 + v28 + 8);
      if ((v30 & 1) == 0)
      {
        if (*v29 != *v31)
          v32 = 1;
        return (v32 & 1) == 0;
      }
      if ((v32 & 1) != 0)
        return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_22CB91C50()
{
  unint64_t result;

  result = qword_255C35468;
  if (!qword_255C35468)
  {
    result = MEMORY[0x22E303264](&unk_22CBA1170, &type metadata for StockChart.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35468);
  }
  return result;
}

uint64_t type metadata accessor for StockChart(uint64_t a1)
{
  return sub_22CB60CD0(a1, (uint64_t *)&unk_255C354D0);
}

uint64_t _s9StocksKit10StockChartV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  char v22;
  uint64_t *v24;
  uint64_t v25;

  sub_22CB4E03C();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v24 - v8;
  if ((sub_22CB9509C(*a1, *a2) & 1) != 0)
  {
    v25 = type metadata accessor for StockChart(0);
    v10 = *(int *)(v25 + 20);
    v11 = (uint64_t)a1 + v10;
    v12 = (uint64_t)a2 + v10;
    sub_22CB9C544();
    v24 = a1;
    sub_22CB50668(&qword_255C351A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
    v13 = sub_22CB9D00C();
    sub_22CB4DCF4(v11, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_22CB4E03C);
    sub_22CB4DCF4(v12, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_22CB4E03C);
    if ((v13 & 1) != 0)
    {
      v14 = v24;
      v15 = v25;
      v16 = sub_22CB9D00C();
      sub_22CB6257C((uint64_t)v7, (uint64_t (*)(_QWORD))sub_22CB4E03C);
      sub_22CB6257C((uint64_t)v9, (uint64_t (*)(_QWORD))sub_22CB4E03C);
      if ((v16 & 1) != 0)
      {
        v17 = *(int *)(v15 + 24);
        v18 = (double *)((char *)v14 + v17);
        v19 = *((_BYTE *)v14 + v17 + 8);
        v20 = (double *)((char *)a2 + v17);
        v21 = *((unsigned __int8 *)a2 + v17 + 8);
        if ((v19 & 1) != 0)
        {
          if (v21)
          {
LABEL_13:
            v22 = MEMORY[0x22E301ECC]((char *)v14 + *(int *)(v15 + 28), (char *)a2 + *(int *)(v15 + 28));
            return v22 & 1;
          }
        }
        else
        {
          if (*v18 != *v20)
            LOBYTE(v21) = 1;
          if ((v21 & 1) == 0)
            goto LABEL_13;
        }
      }
    }
    else
    {
      sub_22CB6257C((uint64_t)v7, (uint64_t (*)(_QWORD))sub_22CB4E03C);
      sub_22CB6257C((uint64_t)v9, (uint64_t (*)(_QWORD))sub_22CB4E03C);
    }
  }
  v22 = 0;
  return v22 & 1;
}

unint64_t sub_22CB91E8C()
{
  unint64_t result;

  result = qword_255C35480;
  if (!qword_255C35480)
  {
    result = MEMORY[0x22E303264](&unk_22CBA1120, &type metadata for StockChart.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35480);
  }
  return result;
}

void sub_22CB91ED0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255C35488)
  {
    type metadata accessor for StockChart.Entry(255);
    v0 = sub_22CB9D0CC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255C35488);
  }
}

uint64_t sub_22CB91F24(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_22CB4E03C();
    v10 = v9;
    v11 = sub_22CB50668(a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], a3);
    result = MEMORY[0x22E303264](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22CB91FA4(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_22CB91ED0();
    v10 = v9;
    v11 = sub_22CB50668(a2, type metadata accessor for StockChart.Entry, a3);
    result = MEMORY[0x22E303264](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22CB92024(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_22CB4E03C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_22CB9206C()
{
  unint64_t result;

  result = qword_255C354C8;
  if (!qword_255C354C8)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for StockChart.Feature, &type metadata for StockChart.Feature);
    atomic_store(result, (unint64_t *)&qword_255C354C8);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StockChart(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_22CB9C544();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    sub_22CB4E03C();
    v12(&v9[*(int *)(v13 + 36)], &v10[*(int *)(v13 + 36)], v11);
    v14 = a3[6];
    v15 = a3[7];
    v16 = (char *)v7 + v14;
    v17 = (char *)a2 + v14;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = (char *)v7 + v15;
    v19 = (char *)a2 + v15;
    v20 = sub_22CB9C664();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return v7;
}

uint64_t destroy for StockChart(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_22CB9C544();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  sub_22CB4E03C();
  v6(v4 + *(int *)(v7 + 36), v5);
  v8 = a1 + *(int *)(a2 + 28);
  v9 = sub_22CB9C664();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

_QWORD *initializeWithCopy for StockChart(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_22CB9C544();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  sub_22CB4E03C();
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = (char *)a1 + v13;
  v17 = (char *)a2 + v13;
  v18 = sub_22CB9C664();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

_QWORD *assignWithCopy for StockChart(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_22CB9C544();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  sub_22CB4E03C();
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = v14[8];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v15;
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = sub_22CB9C664();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

_QWORD *initializeWithTake for StockChart(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_22CB9C544();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  sub_22CB4E03C();
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = (char *)a1 + v13;
  v17 = (char *)a2 + v13;
  v18 = sub_22CB9C664();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

_QWORD *assignWithTake for StockChart(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_22CB9C544();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  sub_22CB4E03C();
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = (char *)a1 + v13;
  v17 = (char *)a2 + v13;
  v18 = sub_22CB9C664();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for StockChart()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB925E0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_22CB4E03C();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_22CB9C664();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for StockChart()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_22CB9268C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_22CB4E03C();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_22CB9C664();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_22CB92728()
{
  unint64_t v0;
  unint64_t v1;

  sub_22CB4E03C();
  if (v0 <= 0x3F)
  {
    sub_22CB9C664();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for StockChart.Entry(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_22CB9C544();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (char *)v4 + v13;
    v16 = (char *)a2 + v13;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = (char *)v4 + v14;
    v18 = (char *)a2 + v14;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    v19 = a3[8];
    v20 = a3[9];
    v21 = (char *)v4 + v19;
    v22 = (char *)a2 + v19;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = (char *)v4 + v20;
    v24 = (char *)a2 + v20;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    v25 = a3[10];
    v26 = (char *)v4 + v25;
    v27 = (char *)a2 + v25;
    v28 = *(_QWORD *)v27;
    v26[8] = v27[8];
    *(_QWORD *)v26 = v28;
  }
  return v4;
}

uint64_t destroy for StockChart.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_22CB9C544();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for StockChart.Entry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_22CB9C544();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = (char *)a1 + v13;
  v17 = (char *)a2 + v13;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = a3[8];
  v19 = a3[9];
  v20 = (char *)a1 + v18;
  v21 = (char *)a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = (char *)a1 + v19;
  v23 = (char *)a2 + v19;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = a3[10];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  return a1;
}

_QWORD *assignWithCopy for StockChart.Entry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_22CB9C544();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[8];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v13;
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = v16[8];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v17;
  v18 = a3[8];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v21;
  v22 = a3[9];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v25;
  v26 = a3[10];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = v28[8];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v29;
  return a1;
}

_OWORD *initializeWithTake for StockChart.Entry(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_22CB9C544();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = (char *)a1 + v11;
  v15 = (char *)a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = a3[8];
  v17 = a3[9];
  v18 = (char *)a1 + v16;
  v19 = (char *)a2 + v16;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = (char *)a1 + v17;
  v21 = (char *)a2 + v17;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = a3[10];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *(_QWORD *)v24;
  v23[8] = v24[8];
  *(_QWORD *)v23 = v25;
  return a1;
}

_QWORD *assignWithTake for StockChart.Entry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_22CB9C544();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = (char *)a1 + v12;
  v16 = (char *)a2 + v12;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = a3[8];
  v18 = a3[9];
  v19 = (char *)a1 + v17;
  v20 = (char *)a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = (char *)a1 + v18;
  v22 = (char *)a2 + v18;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = a3[10];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(_QWORD *)v25;
  v24[8] = v25[8];
  *(_QWORD *)v24 = v26;
  return a1;
}

uint64_t getEnumTagSinglePayload for StockChart.Entry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB92D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_22CB9C544();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for StockChart.Entry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB92DCC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_22CB9C544();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_22CB92E40()
{
  uint64_t result;
  unint64_t v1;

  result = sub_22CB9C544();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for StockChart.Feature(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_22CB92F04 + 4 * byte_22CBA0D13[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_22CB92F24 + 4 * byte_22CBA0D18[v4]))();
}

_BYTE *sub_22CB92F04(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_22CB92F24(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22CB92F2C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22CB92F34(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_22CB92F3C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_22CB92F44(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StockChart.Feature()
{
  return &type metadata for StockChart.Feature;
}

uint64_t getEnumTagSinglePayload for StockChart.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StockChart.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_22CB9303C + 4 * byte_22CBA0D22[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_22CB93070 + 4 * byte_22CBA0D1D[v4]))();
}

uint64_t sub_22CB93070(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB93078(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB93080);
  return result;
}

uint64_t sub_22CB9308C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB93094);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_22CB93098(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB930A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StockChart.CodingKeys()
{
  return &type metadata for StockChart.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for StockChart.Entry.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_22CB93108 + 4 * byte_22CBA0D2C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_22CB9313C + 4 * byte_22CBA0D27[v4]))();
}

uint64_t sub_22CB9313C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB93144(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB9314CLL);
  return result;
}

uint64_t sub_22CB93158(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB93160);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_22CB93164(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB9316C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StockChart.Entry.CodingKeys()
{
  return &type metadata for StockChart.Entry.CodingKeys;
}

unint64_t sub_22CB9318C()
{
  unint64_t result;

  result = qword_255C354F0;
  if (!qword_255C354F0)
  {
    result = MEMORY[0x22E303264](&unk_22CBA1040, &type metadata for StockChart.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C354F0);
  }
  return result;
}

unint64_t sub_22CB931D4()
{
  unint64_t result;

  result = qword_255C354F8;
  if (!qword_255C354F8)
  {
    result = MEMORY[0x22E303264](&unk_22CBA10F8, &type metadata for StockChart.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C354F8);
  }
  return result;
}

unint64_t sub_22CB9321C()
{
  unint64_t result;

  result = qword_255C35500;
  if (!qword_255C35500)
  {
    result = MEMORY[0x22E303264](&unk_22CBA1068, &type metadata for StockChart.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35500);
  }
  return result;
}

unint64_t sub_22CB93264()
{
  unint64_t result;

  result = qword_255C35508;
  if (!qword_255C35508)
  {
    result = MEMORY[0x22E303264](&unk_22CBA1090, &type metadata for StockChart.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35508);
  }
  return result;
}

unint64_t sub_22CB932AC()
{
  unint64_t result;

  result = qword_255C35510;
  if (!qword_255C35510)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0FB0, &type metadata for StockChart.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35510);
  }
  return result;
}

unint64_t sub_22CB932F4()
{
  unint64_t result;

  result = qword_255C35518;
  if (!qword_255C35518)
  {
    result = MEMORY[0x22E303264](&unk_22CBA0FD8, &type metadata for StockChart.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35518);
  }
  return result;
}

uint64_t sub_22CB93338(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636E657265666572 && a2 == 0xED00006574614465 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1852141679 && a2 == 0xE400000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65736F6C63 && a2 == 0xE500000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1751607656 && a2 == 0xE400000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7827308 && a2 == 0xE300000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x656D756C6F76 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_22CB935E8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73656972746E65 && a2 == 0xE700000000000000;
  if (v2 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E615265746164 && a2 == 0xE900000000000065 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73756F6976657270 && a2 == 0xED000065736F6C43 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x695474656B72616DLL && a2 == 0xEE00656E6F5A656DLL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_22CB937F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(char *, unint64_t, uint64_t);
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  void *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = sub_22CB9C85C();
  v45 = *(_QWORD *)(v1 - 8);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v43 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v39 - v4;
  sub_22CB93DF8();
  MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_22CB9C688();
  v46 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v41 = (char *)&v39 - v12;
  v13 = sub_22CB9C694();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB9CC28();
  sub_22CB93E4C();
  v44 = v0;
  sub_22CB9CC58();
  swift_release();
  v17 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v16, v13);
  if (v17 == *MEMORY[0x24BEB1438])
  {
    v18 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v19 = objc_msgSend(v18, sel_bundleIdentifier);

    if (v19)
    {
      v20 = sub_22CB9D024();
      v22 = v21;

      __swift_project_boxed_opaque_existential_1((_QWORD *)(v44 + 72), *(_QWORD *)(v44 + 96));
      sub_22CB9C9F4();
      v23 = sub_22CB9C844();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v5, v1);
      v24 = *(_QWORD *)(v23 + 16);
      if (v24)
      {
        v39 = v23;
        v40 = v1;
        v25 = v46;
        v26 = v23 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
        v27 = *(_QWORD *)(v46 + 72);
        v28 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 16);
        swift_bridgeObjectRetain();
        while (1)
        {
          v28(v11, v26, v8);
          if (sub_22CB9C670() == v20 && v29 == v22)
          {
            swift_bridgeObjectRelease();
            goto LABEL_17;
          }
          v30 = sub_22CB9D4BC();
          swift_bridgeObjectRelease();
          if ((v30 & 1) != 0)
            break;
          v25 = v46;
          (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v8);
          v26 += v27;
          if (!--v24)
          {
            swift_bridgeObjectRelease();
            v31 = 1;
            v1 = v40;
            v32 = (uint64_t)v42;
            goto LABEL_18;
          }
        }
        v25 = v46;
LABEL_17:
        swift_bridgeObjectRelease();
        v32 = (uint64_t)v42;
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v42, v11, v8);
        v31 = 0;
        v1 = v40;
      }
      else
      {
        v31 = 1;
        v32 = (uint64_t)v42;
        v25 = v46;
      }
LABEL_18:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v32, v31, 1, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v32, 1, v8) != 1)
      {
        v37 = v41;
        (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v41, v32, v8);
        v33 = sub_22CB9C67C();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v37, v8);
        return v33 & 1;
      }
      sub_22CB93E90(v32);
    }
    v34 = (void *)objc_opt_self();
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v44 + 72), *(_QWORD *)(v44 + 96));
    v35 = v43;
    sub_22CB9C9F4();
    v36 = sub_22CB9C850();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v1);
    v33 = objc_msgSend(v34, sel_enabledForCurrentLevel_, v36);
    return v33 & 1;
  }
  if (v17 == *MEMORY[0x24BEB1440])
  {
    v33 = 1;
    return v33 & 1;
  }
  if (v17 == *MEMORY[0x24BEB1448])
  {
    v33 = 0;
    return v33 & 1;
  }
  result = sub_22CB9D4B0();
  __break(1u);
  return result;
}

uint64_t sub_22CB93CA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v1 + 22) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  sub_22CB505B0(a1, v1 + 72);
  sub_22CB505B0(a1, (uint64_t)&v6);
  v3 = sub_22CB9CA3C();
  swift_allocObject();
  v4 = sub_22CB9CA30();
  v7 = v3;
  v8 = MEMORY[0x24BEB1A80];
  *(_QWORD *)&v6 = v4;
  __swift_destroy_boxed_opaque_existential_1(a1);
  sub_22CB50598(&v6, v1 + 32);
  return v1;
}

uint64_t sub_22CB93D38()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FeatureAvailability()
{
  return objc_opt_self();
}

uint64_t sub_22CB93D84()
{
  return sub_22CB937F8() & 1;
}

uint64_t sub_22CB93DA8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_22CB505B0(*v1 + 32, a1);
}

uint64_t sub_22CB93DC8()
{
  return sub_22CB9CC58();
}

uint64_t sub_22CB93DD4()
{
  return sub_22CB9CC4C();
}

uint64_t sub_22CB93DE0()
{
  return sub_22CB9CC64();
}

uint64_t sub_22CB93DEC()
{
  return sub_22CB9CC40();
}

void sub_22CB93DF8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255C35520)
  {
    sub_22CB9C688();
    v0 = sub_22CB9D1F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255C35520);
  }
}

unint64_t sub_22CB93E4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_255C35528;
  if (!qword_255C35528)
  {
    v1 = type metadata accessor for FeatureAvailability();
    result = MEMORY[0x22E303264](&unk_22CBA1254, v1);
    atomic_store(result, (unint64_t *)&qword_255C35528);
  }
  return result;
}

uint64_t sub_22CB93E90(uint64_t a1)
{
  uint64_t v2;

  sub_22CB93DF8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t InProcessStockService.__allocating_init(appConfigurationManager:currencyManager:)(__int128 *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  sub_22CB50598(a1, v4 + 16);
  sub_22CB50598(a2, v4 + 56);
  return v4;
}

uint64_t InProcessStockService.init(appConfigurationManager:currencyManager:)(__int128 *a1, __int128 *a2)
{
  uint64_t v2;

  sub_22CB50598(a1, v2 + 16);
  sub_22CB50598(a2, v2 + 56);
  return v2;
}

uint64_t InProcessStockService.fetchCurrencyConversions(cachePolicy:deadline:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v3 + 48) = a1;
  *(_QWORD *)(v3 + 56) = v2;
  v5 = sub_22CB9CCDC();
  *(_QWORD *)(v3 + 64) = v5;
  *(_QWORD *)(v3 + 72) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 80) = swift_task_alloc();
  v6 = sub_22CB9C8A4();
  *(_QWORD *)(v3 + 88) = v6;
  *(_QWORD *)(v3 + 96) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 104) = swift_task_alloc();
  *(_QWORD *)(v3 + 112) = swift_task_alloc();
  *(_QWORD *)(v3 + 120) = swift_task_alloc();
  *(_QWORD *)(v3 + 128) = swift_task_alloc();
  *(_QWORD *)(v3 + 136) = swift_task_alloc();
  v7 = sub_22CB9C544();
  *(_QWORD *)(v3 + 144) = v7;
  *(_QWORD *)(v3 + 152) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 160) = swift_task_alloc();
  *(_QWORD *)(v3 + 168) = swift_task_alloc();
  v8 = sub_22CB9CCC4();
  *(_QWORD *)(v3 + 176) = v8;
  *(_QWORD *)(v3 + 184) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 192) = swift_task_alloc();
  v9 = sub_22CB9C85C();
  *(_QWORD *)(v3 + 200) = v9;
  *(_QWORD *)(v3 + 208) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v3 + 216) = swift_task_alloc();
  *(_OWORD *)(v3 + 224) = *(_OWORD *)a2;
  *(_BYTE *)(v3 + 288) = *(_BYTE *)(a2 + 16);
  return swift_task_switch();
}

uint64_t sub_22CB940B0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  __int128 v12;
  double *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  __int128 v24;
  char v25;

  if (qword_253F839E0 != -1)
    swift_once();
  v1 = sub_22CB9CEEC();
  *(_QWORD *)(v0 + 240) = __swift_project_value_buffer(v1, (uint64_t)qword_253F86EA8);
  v2 = sub_22CB9CED4();
  v3 = sub_22CB9D1A4();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_BYTE *)(v0 + 288);
    v5 = *(_QWORD *)(v0 + 224);
    v6 = *(_QWORD *)(v0 + 232);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315138;
    v23 = v8;
    *(_QWORD *)&v24 = v5;
    *((_QWORD *)&v24 + 1) = v6;
    v25 = v4;
    v9 = StockService.CachePolicy.description.getter();
    *(_QWORD *)(v0 + 40) = sub_22CB5DFE8(v9, v10, &v23);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CB4C000, v2, v3, "Currencies fetch started, cachePolicy: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v8, -1, -1);
    MEMORY[0x22E303318](v7, -1, -1);
  }

  sub_22CB9D15C();
  v11 = *(unsigned __int8 *)(v0 + 288);
  if (v11 == 2)
  {
    if (!*(_QWORD *)(v0 + 232) && *(_QWORD *)(v0 + 224) == 1)
    {
      v12 = xmmword_22CB9DCF0;
      goto LABEL_11;
    }
LABEL_14:
    *(_QWORD *)(v0 + 248) = sub_22CB9CE98();
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v17;
    *v17 = v0;
    v17[1] = sub_22CB944C8;
    return sub_22CB9CE20();
  }
  if (*(_BYTE *)(v0 + 288))
    goto LABEL_14;
  v12 = *(_OWORD *)(v0 + 224);
LABEL_11:
  v13 = *(double **)(v0 + 192);
  v24 = v12;
  v25 = v11;
  sub_22CB51344(0, v13);
  sub_22CB9C520();
  v14 = sub_22CB9CED4();
  v15 = sub_22CB9D1A4();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_22CB4C000, v14, v15, "Firing currencies fetch", v16, 2u);
    MEMORY[0x22E303318](v16, -1, -1);
  }

  sub_22CB9D15C();
  v19 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 80);
  v20 = *(_QWORD *)(v0 + 64);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 56) + 56), *(_QWORD *)(*(_QWORD *)(v0 + 56) + 80));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104))(v18, *MEMORY[0x24BEB4370], v20);
  v21 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 272) = v21;
  *v21 = v0;
  v21[1] = sub_22CB94770;
  return sub_22CB9C8F8();
}

uint64_t sub_22CB944C8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[26] + 8))(v2[27], v2[25]);
    swift_release();
  }
  return swift_task_switch();
}

uint64_t sub_22CB94548()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 264);
  sub_22CB51344(0, *(double **)(v0 + 192));
  sub_22CB9C520();
  v2 = sub_22CB9CED4();
  v3 = sub_22CB9D1A4();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_22CB4C000, v2, v3, "Firing currencies fetch", v4, 2u);
    MEMORY[0x22E303318](v4, -1, -1);
  }

  sub_22CB9D15C();
  if (v1)
  {
    v6 = *(_QWORD *)(v0 + 184);
    v5 = *(_QWORD *)(v0 + 192);
    v7 = *(_QWORD *)(v0 + 176);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 80);
    v11 = *(_QWORD *)(v0 + 64);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 56) + 56), *(_QWORD *)(*(_QWORD *)(v0 + 56) + 80));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v9, *MEMORY[0x24BEB4370], v11);
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 272) = v12;
    *v12 = v0;
    v12[1] = sub_22CB94770;
    return sub_22CB9C8F8();
  }
}

uint64_t sub_22CB94770()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[9] + 8))(v2[10], v2[8]);
  return swift_task_switch();
}

uint64_t sub_22CB947E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t type;
  NSObject *log;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 96) + 16);
  v5(*(_QWORD *)(v0 + 128), v1, v4);
  v5(v2, v1, v4);
  v49 = v5;
  v5(v3, v1, v4);
  v6 = sub_22CB9CED4();
  v7 = sub_22CB9D1A4();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 160);
    v10 = *(_QWORD *)(v0 + 144);
    v39 = *(_QWORD *)(v0 + 128);
    v43 = *(_QWORD *)(v0 + 120);
    v44 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v0 + 96);
    v42 = *(_QWORD *)(v0 + 88);
    log = v6;
    v12 = swift_slowAlloc();
    v47 = swift_slowAlloc();
    v50 = v47;
    *(_DWORD *)v12 = 136315650;
    type = v7;
    sub_22CB9C898();
    sub_22CB94F70();
    v13 = sub_22CB9D498();
    v15 = v14;
    v40 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v40(v9, v10);
    *(_QWORD *)(v0 + 16) = sub_22CB5DFE8(v13, v15, &v50);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(v39, v42);
    *(_WORD *)(v12 + 12) = 2080;
    sub_22CB9C88C();
    v17 = sub_22CB9D498();
    v19 = v18;
    v40(v9, v10);
    *(_QWORD *)(v0 + 24) = sub_22CB5DFE8(v17, v19, &v50);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    v16(v43, v42);
    *(_WORD *)(v12 + 22) = 2080;
    v20 = sub_22CB9C874();
    v21 = sub_22CB9C8EC();
    v22 = MEMORY[0x22E302910](v20, v21);
    v24 = v23;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 32) = sub_22CB5DFE8(v22, v24, &v50);
    sub_22CB9D204();
    swift_bridgeObjectRelease();
    v48 = v16;
    v16(v44, v42);
    _os_log_impl(&dword_22CB4C000, log, type, "Currencies fetch success, createdAt: %s, staleAt: %s, result: %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x22E303318](v47, -1, -1);
    MEMORY[0x22E303318](v12, -1, -1);

  }
  else
  {
    v25 = *(_QWORD *)(v0 + 120);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 88);
    v28 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 96) + 8);
    v28(*(_QWORD *)(v0 + 128), v27);
    v28(v25, v27);
    v48 = v28;
    v28(v26, v27);

  }
  v29 = *(_QWORD *)(v0 + 184);
  v30 = *(_QWORD *)(v0 + 192);
  v31 = *(_QWORD *)(v0 + 168);
  v41 = *(_QWORD *)(v0 + 176);
  v32 = *(_QWORD *)(v0 + 152);
  v34 = *(_QWORD *)(v0 + 136);
  v33 = *(_QWORD *)(v0 + 144);
  v35 = *(_QWORD *)(v0 + 104);
  v36 = *(_QWORD *)(v0 + 88);
  v37 = *(char **)(v0 + 48);
  v49(v35, v34, v36);
  sub_22CB976FC(v35, v37);
  v48(v34, v36);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v41);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB94BFC()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB94CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 184);
  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 176);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB94DA0(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (qword_253F839E0 != -1)
    swift_once();
  v2 = sub_22CB9CEEC();
  __swift_project_value_buffer(v2, (uint64_t)qword_253F86EA8);
  v3 = sub_22CB9CED4();
  v4 = sub_22CB9D1A4();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_22CB4C000, v3, v4, "Fetching app config for currencies fetch", v5, 2u);
    MEMORY[0x22E303318](v5, -1, -1);
  }

  v6 = a1 + 2;
  v7 = a1[5];
  v8 = a1[6];
  __swift_project_boxed_opaque_existential_1(v6, v7);
  return sub_22CB71C8C(v7, v8);
}

uint64_t InProcessStockService.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return v0;
}

uint64_t InProcessStockService.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocClassInstance();
}

uint64_t sub_22CB94EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_22CB62A2C;
  return InProcessStockService.fetchCurrencyConversions(cachePolicy:deadline:)(a1, a2);
}

uint64_t sub_22CB94F58()
{
  _QWORD *v0;

  return sub_22CB94DA0(v0);
}

unint64_t sub_22CB94F70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_253F837E0;
  if (!qword_253F837E0)
  {
    v1 = sub_22CB9C544();
    result = MEMORY[0x22E303264](MEMORY[0x24BDCE988], v1);
    atomic_store(result, (unint64_t *)&qword_253F837E0);
  }
  return result;
}

uint64_t type metadata accessor for InProcessStockService()
{
  return objc_opt_self();
}

uint64_t method lookup function for InProcessStockService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InProcessStockService.__allocating_init(appConfigurationManager:currencyManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_22CB94FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  double v5;
  double v6;
  char v8;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (double *)(a2 + 48);
    v4 = (double *)(a1 + 48);
    do
    {
      v5 = *v4;
      v6 = *v3;
      if (*((_QWORD *)v4 - 2) == *((_QWORD *)v3 - 2) && *((_QWORD *)v4 - 1) == *((_QWORD *)v3 - 1))
      {
        if (v5 != v6)
          return 0;
      }
      else
      {
        v8 = sub_22CB9D4BC();
        result = 0;
        if ((v8 & 1) == 0 || v5 != v6)
          return result;
      }
      v3 += 3;
      v4 += 3;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_22CB9509C(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  BOOL v15;
  uint64_t v16;
  double *v17;
  char v18;
  double *v19;
  int v20;
  uint64_t v21;
  double *v22;
  char v23;
  double *v24;
  int v25;
  uint64_t v26;
  double *v27;
  char v28;
  double *v29;
  int v30;
  uint64_t v31;
  double *v32;
  char v33;
  double *v34;
  int v35;
  uint64_t v36;
  double *v37;
  char v38;
  double *v39;
  int v40;
  uint64_t v41;

  v4 = (int *)type metadata accessor for StockChart.Entry(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (uint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v5);
  v10 = (uint64_t *)((char *)&v41 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v11 || a1 == a2)
    return 1;
  v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = *(_QWORD *)(v8 + 72);
  while (1)
  {
    sub_22CB97670(a1 + v12, (uint64_t)v10);
    sub_22CB97670(a2 + v12, (uint64_t)v7);
    v15 = *v10 == *v7 && v10[1] == v7[1];
    if (!v15 && (sub_22CB9D4BC() & 1) == 0 || (sub_22CB9C514() & 1) == 0)
      break;
    v16 = v4[6];
    v17 = (double *)((char *)v10 + v16);
    v18 = *((_BYTE *)v10 + v16 + 8);
    v19 = (double *)((char *)v7 + v16);
    v20 = *((unsigned __int8 *)v7 + v16 + 8);
    if ((v18 & 1) != 0)
    {
      if (!v20)
        break;
    }
    else
    {
      if (*v17 != *v19)
        LOBYTE(v20) = 1;
      if ((v20 & 1) != 0)
        break;
    }
    v21 = v4[7];
    v22 = (double *)((char *)v10 + v21);
    v23 = *((_BYTE *)v10 + v21 + 8);
    v24 = (double *)((char *)v7 + v21);
    v25 = *((unsigned __int8 *)v7 + v21 + 8);
    if ((v23 & 1) != 0)
    {
      if (!v25)
        break;
    }
    else
    {
      if (*v22 != *v24)
        LOBYTE(v25) = 1;
      if ((v25 & 1) != 0)
        break;
    }
    v26 = v4[8];
    v27 = (double *)((char *)v10 + v26);
    v28 = *((_BYTE *)v10 + v26 + 8);
    v29 = (double *)((char *)v7 + v26);
    v30 = *((unsigned __int8 *)v7 + v26 + 8);
    if ((v28 & 1) != 0)
    {
      if (!v30)
        break;
    }
    else
    {
      if (*v27 != *v29)
        LOBYTE(v30) = 1;
      if ((v30 & 1) != 0)
        break;
    }
    v31 = v4[9];
    v32 = (double *)((char *)v10 + v31);
    v33 = *((_BYTE *)v10 + v31 + 8);
    v34 = (double *)((char *)v7 + v31);
    v35 = *((unsigned __int8 *)v7 + v31 + 8);
    if ((v33 & 1) != 0)
    {
      if (!v35)
        break;
    }
    else
    {
      if (*v32 != *v34)
        LOBYTE(v35) = 1;
      if ((v35 & 1) != 0)
        break;
    }
    v36 = v4[10];
    v37 = (double *)((char *)v10 + v36);
    v38 = *((_BYTE *)v10 + v36 + 8);
    v39 = (double *)((char *)v7 + v36);
    v40 = *((unsigned __int8 *)v7 + v36 + 8);
    if ((v38 & 1) != 0)
    {
      if (!v40)
        break;
    }
    else
    {
      if (*v37 != *v39)
        LOBYTE(v40) = 1;
      if ((v40 & 1) != 0)
        break;
    }
    sub_22CB976B4((uint64_t)v7);
    sub_22CB976B4((uint64_t)v10);
    v12 += v13;
    result = 1;
    if (!--v11)
      return result;
  }
  sub_22CB976B4((uint64_t)v7);
  sub_22CB976B4((uint64_t)v10);
  return 0;
}

uint64_t sub_22CB952F0()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x6C6F626D7973;
}

uint64_t sub_22CB9532C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB971AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_22CB95350()
{
  sub_22CB953CC();
  return sub_22CB9D654();
}

uint64_t sub_22CB95378()
{
  sub_22CB953CC();
  return sub_22CB9D660();
}

uint64_t FundMetadata.Holding.encode(to:)(_QWORD *a1)
{
  return sub_22CB955D8(a1, &qword_255C35540, (uint64_t (*)(void))sub_22CB953CC, (uint64_t)&type metadata for FundMetadata.Holding.CodingKeys);
}

unint64_t sub_22CB953CC()
{
  unint64_t result;

  result = qword_255C35548;
  if (!qword_255C35548)
  {
    result = MEMORY[0x22E303264](&unk_22CBA181C, &type metadata for FundMetadata.Holding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35548);
  }
  return result;
}

uint64_t FundMetadata.Holding.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22CB9577C(a1, &qword_255C35550, (uint64_t (*)(void))sub_22CB953CC, (uint64_t)&type metadata for FundMetadata.Holding.CodingKeys, a2);
}

uint64_t sub_22CB95440@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FundMetadata.Holding.init(from:)(a1, a2);
}

uint64_t sub_22CB95454(_QWORD *a1)
{
  return FundMetadata.Holding.encode(to:)(a1);
}

uint64_t FundMetadata.Sector.sector.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

double FundMetadata.Sector.percentageOfAssets.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

BOOL _s9StocksKit12FundMetadataV7HoldingV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  char v5;
  _BOOL8 result;

  v2 = *(double *)(a1 + 16);
  v3 = *(double *)(a2 + 16);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return v2 == v3;
  v5 = sub_22CB9D4BC();
  result = 0;
  if ((v5 & 1) != 0)
    return v2 == v3;
  return result;
}

uint64_t sub_22CB954FC()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x726F74636573;
}

uint64_t sub_22CB95538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB97290(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_22CB9555C()
{
  sub_22CB9570C();
  return sub_22CB9D654();
}

uint64_t sub_22CB95584()
{
  sub_22CB9570C();
  return sub_22CB9D660();
}

uint64_t FundMetadata.Sector.encode(to:)(_QWORD *a1)
{
  return sub_22CB955D8(a1, &qword_255C35558, (uint64_t (*)(void))sub_22CB9570C, (uint64_t)&type metadata for FundMetadata.Sector.CodingKeys);
}

uint64_t sub_22CB955D8(_QWORD *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  char v17;

  sub_22CB5F8B8(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v15 - v10;
  v12 = *v4;
  v15[0] = v4[1];
  v15[1] = v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_22CB9D57C();
  v17 = 0;
  v13 = v15[2];
  sub_22CB9D468();
  if (!v13)
  {
    v16 = 1;
    sub_22CB9D474();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t sub_22CB9570C()
{
  unint64_t result;

  result = qword_255C35560;
  if (!qword_255C35560)
  {
    result = MEMORY[0x22E303264](&unk_22CBA17CC, &type metadata for FundMetadata.Sector.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35560);
  }
  return result;
}

uint64_t FundMetadata.Sector.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22CB9577C(a1, &qword_255C35568, (uint64_t (*)(void))sub_22CB9570C, (uint64_t)&type metadata for FundMetadata.Sector.CodingKeys, a2);
}

uint64_t sub_22CB9577C@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  char v25;

  v22 = a5;
  sub_22CB5F8B8(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v23 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_22CB9D570();
  if (v5)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v12 = v9;
  v13 = v22;
  v14 = v23;
  v25 = 0;
  v15 = sub_22CB9D3F0();
  v17 = v16;
  v24 = 1;
  swift_bridgeObjectRetain();
  sub_22CB9D3FC();
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v14);
  *v13 = v15;
  v13[1] = v17;
  v13[2] = v19;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_22CB9591C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FundMetadata.Sector.init(from:)(a1, a2);
}

uint64_t sub_22CB95930(_QWORD *a1)
{
  return FundMetadata.Sector.encode(to:)(a1);
}

uint64_t FundMetadata.assetClass.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FundMetadata.category.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FundMetadata.focus.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FundMetadata.niche.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FundMetadata.region.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FundMetadata.topHoldings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FundMetadata.topSectors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_22CB95A34()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22CB95A6C + 4 * byte_22CBA1378[*v0]))(0x616C437465737361, 0xEA00000000007373);
}

uint64_t sub_22CB95A6C()
{
  return 0x79726F6765746163;
}

uint64_t sub_22CB95A84()
{
  return 0x7375636F66;
}

uint64_t sub_22CB95A98()
{
  return 0x656863696ELL;
}

uint64_t sub_22CB95AAC()
{
  return 0x6E6F69676572;
}

uint64_t sub_22CB95AC0()
{
  return 0x69646C6F48706F74;
}

uint64_t sub_22CB95AE0()
{
  return 0x6F74636553706F74;
}

uint64_t sub_22CB95AFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB97374(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_22CB95B20()
{
  sub_22CB966F8();
  return sub_22CB9D654();
}

uint64_t sub_22CB95B48()
{
  sub_22CB966F8();
  return sub_22CB9D660();
}

uint64_t FundMetadata.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  sub_22CB5F8B8(0, &qword_255C35570, (uint64_t (*)(void))sub_22CB966F8, (uint64_t)&type metadata for FundMetadata.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v15 - v6;
  v8 = v1[2];
  v23 = v1[3];
  v24 = v8;
  v9 = v1[4];
  v21 = v1[5];
  v22 = v9;
  v10 = v1[6];
  v19 = v1[7];
  v20 = v10;
  v11 = v1[9];
  v17 = v1[8];
  v18 = v11;
  v12 = v1[10];
  v15 = v1[11];
  v16 = v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB966F8();
  sub_22CB9D57C();
  LOBYTE(v27) = 0;
  v13 = v25;
  sub_22CB9D438();
  if (!v13)
  {
    LOBYTE(v27) = 1;
    sub_22CB9D438();
    LOBYTE(v27) = 2;
    sub_22CB9D438();
    LOBYTE(v27) = 3;
    sub_22CB9D438();
    LOBYTE(v27) = 4;
    sub_22CB9D438();
    v27 = v16;
    v26 = 5;
    sub_22CB96780(0, &qword_255C35580);
    sub_22CB96808(&qword_255C35588, (uint64_t (*)(void))sub_22CB9673C, MEMORY[0x24BEE12A0]);
    sub_22CB9D480();
    v27 = v15;
    v26 = 6;
    sub_22CB96780(0, &qword_255C35598);
    sub_22CB968C0(&qword_255C355A0, (uint64_t (*)(void))sub_22CB967C4, MEMORY[0x24BEE12A0]);
    sub_22CB9D480();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t FundMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  char v45;
  uint64_t v46;

  sub_22CB5F8B8(0, &qword_255C355B0, (uint64_t (*)(void))sub_22CB966F8, (uint64_t)&type metadata for FundMetadata.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v34 - v8;
  v10 = a1[3];
  v44 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_22CB966F8();
  sub_22CB9D570();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  v43 = a2;
  LOBYTE(v46) = 0;
  v11 = sub_22CB9D3C0();
  v13 = v12;
  LOBYTE(v46) = 1;
  swift_bridgeObjectRetain();
  v14 = sub_22CB9D3C0();
  v16 = v15;
  v42 = v14;
  LOBYTE(v46) = 2;
  swift_bridgeObjectRetain();
  v40 = sub_22CB9D3C0();
  LOBYTE(v46) = 3;
  v19 = v18;
  swift_bridgeObjectRetain();
  v20 = sub_22CB9D3C0();
  v41 = v21;
  v36 = v20;
  v38 = v19;
  LOBYTE(v46) = 4;
  swift_bridgeObjectRetain();
  v37 = 0;
  v22 = sub_22CB9D3C0();
  v24 = v23;
  v35 = v22;
  sub_22CB96780(0, &qword_255C35580);
  v45 = 5;
  sub_22CB96808(&qword_255C355B8, (uint64_t (*)(void))sub_22CB9687C, MEMORY[0x24BEE12D0]);
  v39 = v24;
  swift_bridgeObjectRetain();
  sub_22CB9D408();
  v25 = v46;
  sub_22CB96780(0, &qword_255C35598);
  v45 = 6;
  sub_22CB968C0(&qword_255C355C8, (uint64_t (*)(void))sub_22CB96934, MEMORY[0x24BEE12D0]);
  v34 = v25;
  swift_bridgeObjectRetain();
  sub_22CB9D408();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v26 = v46;
  swift_bridgeObjectRetain();
  v27 = v16;
  swift_bridgeObjectRetain();
  v28 = v38;
  swift_bridgeObjectRetain();
  v29 = v41;
  swift_bridgeObjectRetain();
  v30 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v32 = v42;
  v31 = v43;
  *v43 = v11;
  v31[1] = v13;
  v31[2] = v32;
  v31[3] = v27;
  v31[4] = v40;
  v31[5] = v28;
  v31[6] = v36;
  v31[7] = v29;
  v33 = v34;
  v31[8] = v35;
  v31[9] = v30;
  v31[10] = v33;
  v31[11] = v26;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_22CB96404@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FundMetadata.init(from:)(a1, a2);
}

uint64_t sub_22CB96418(_QWORD *a1)
{
  return FundMetadata.encode(to:)(a1);
}

uint64_t _s9StocksKit12FundMetadataV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v3 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v5 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v11 = a1[9];
  v12 = a1[10];
  v13 = a1[11];
  v14 = a2[1];
  v15 = a2[2];
  v17 = a2[3];
  v16 = a2[4];
  v19 = a2[5];
  v18 = a2[6];
  v21 = a2[7];
  v20 = a2[8];
  v23 = a2[9];
  v22 = a2[10];
  v24 = a2[11];
  if (!v3)
  {
    if (v14)
      goto LABEL_38;
    goto LABEL_8;
  }
  if (!v14)
    goto LABEL_38;
  if (*a1 == *a2 && v3 == v14)
    goto LABEL_8;
  v57 = a1[2];
  v58 = a1[10];
  v66 = a1[9];
  v69 = a2[9];
  v62 = a2[10];
  v64 = a1[8];
  v59 = a1[6];
  v60 = a2[11];
  v25 = a1[11];
  v26 = a2[8];
  v27 = a1[7];
  v28 = a2[7];
  v29 = a2[6];
  v30 = a1[4];
  v31 = a1[5];
  v72 = a2[5];
  v32 = a2[4];
  v56 = a2[2];
  v33 = sub_22CB9D4BC();
  v15 = v56;
  v4 = v57;
  v16 = v32;
  v7 = v31;
  v5 = v30;
  v18 = v29;
  v21 = v28;
  v9 = v27;
  v20 = v26;
  v13 = v25;
  v12 = v58;
  v8 = v59;
  v24 = v60;
  v22 = v62;
  v10 = v64;
  v11 = v66;
  v23 = v69;
  v19 = v72;
  v34 = v33;
  v35 = 0;
  if ((v34 & 1) != 0)
  {
LABEL_8:
    if (v6)
    {
      if (!v17)
        goto LABEL_38;
      if (v4 != v15 || v6 != v17)
      {
        v67 = v18;
        v70 = v13;
        v36 = v20;
        v63 = v7;
        v65 = v9;
        v37 = v5;
        v73 = v19;
        v61 = v16;
        v38 = sub_22CB9D4BC();
        v16 = v61;
        v7 = v63;
        v13 = v70;
        v19 = v73;
        v5 = v37;
        v9 = v65;
        v18 = v67;
        v20 = v36;
        v39 = v38;
        v35 = 0;
        if ((v39 & 1) == 0)
          return v35 & 1;
      }
    }
    else if (v17)
    {
      goto LABEL_38;
    }
    if (v7)
    {
      if (!v19)
        goto LABEL_38;
      if (v5 != v16 || v7 != v19)
      {
        v68 = v18;
        v71 = v13;
        v40 = v20;
        v41 = v9;
        v42 = sub_22CB9D4BC();
        v18 = v68;
        v13 = v71;
        v9 = v41;
        v20 = v40;
        v43 = v42;
        v35 = 0;
        if ((v43 & 1) == 0)
          return v35 & 1;
      }
    }
    else if (v19)
    {
      goto LABEL_38;
    }
    if (v9)
    {
      if (!v21)
        goto LABEL_38;
      if (v8 != v18 || v9 != v21)
      {
        v44 = v24;
        v45 = v13;
        v46 = v20;
        v47 = sub_22CB9D4BC();
        v20 = v46;
        v13 = v45;
        v24 = v44;
        v48 = v47;
        v35 = 0;
        if ((v48 & 1) == 0)
          return v35 & 1;
      }
    }
    else if (v21)
    {
      goto LABEL_38;
    }
    if (v11)
    {
      if (!v23)
        goto LABEL_38;
      if (v10 != v20 || v11 != v23)
      {
        v49 = v24;
        v50 = v13;
        v51 = sub_22CB9D4BC();
        v13 = v50;
        v24 = v49;
        v52 = v51;
        v35 = 0;
        if ((v52 & 1) == 0)
          return v35 & 1;
      }
    }
    else if (v23)
    {
      goto LABEL_38;
    }
    v53 = v24;
    v54 = v13;
    if ((sub_22CB94FEC(v12, v22) & 1) != 0)
    {
      v35 = sub_22CB94FEC(v54, v53);
      return v35 & 1;
    }
LABEL_38:
    v35 = 0;
  }
  return v35 & 1;
}

unint64_t sub_22CB966F8()
{
  unint64_t result;

  result = qword_255C35578;
  if (!qword_255C35578)
  {
    result = MEMORY[0x22E303264](&unk_22CBA177C, &type metadata for FundMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35578);
  }
  return result;
}

unint64_t sub_22CB9673C()
{
  unint64_t result;

  result = qword_255C35590;
  if (!qword_255C35590)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for FundMetadata.Holding, &type metadata for FundMetadata.Holding);
    atomic_store(result, (unint64_t *)&qword_255C35590);
  }
  return result;
}

void sub_22CB96780(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_22CB9D0CC();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t sub_22CB967C4()
{
  unint64_t result;

  result = qword_255C355A8;
  if (!qword_255C355A8)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for FundMetadata.Sector, &type metadata for FundMetadata.Sector);
    atomic_store(result, (unint64_t *)&qword_255C355A8);
  }
  return result;
}

uint64_t sub_22CB96808(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_22CB96780(255, &qword_255C35580);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x22E303264](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_22CB9687C()
{
  unint64_t result;

  result = qword_255C355C0;
  if (!qword_255C355C0)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for FundMetadata.Holding, &type metadata for FundMetadata.Holding);
    atomic_store(result, (unint64_t *)&qword_255C355C0);
  }
  return result;
}

uint64_t sub_22CB968C0(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_22CB96780(255, &qword_255C35598);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x22E303264](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_22CB96934()
{
  unint64_t result;

  result = qword_255C355D0;
  if (!qword_255C355D0)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for FundMetadata.Sector, &type metadata for FundMetadata.Sector);
    atomic_store(result, (unint64_t *)&qword_255C355D0);
  }
  return result;
}

uint64_t destroy for FundMetadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FundMetadata(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FundMetadata(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for FundMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FundMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FundMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FundMetadata()
{
  return &type metadata for FundMetadata;
}

ValueMetadata *type metadata accessor for FundMetadata.Holding()
{
  return &type metadata for FundMetadata.Holding;
}

uint64_t _s9StocksKit12FundMetadataV7HoldingVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_22CB96D28(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FundMetadata.Sector()
{
  return &type metadata for FundMetadata.Sector;
}

uint64_t storeEnumTagSinglePayload for FundMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_22CB96DC4 + 4 * byte_22CBA1384[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_22CB96DF8 + 4 * byte_22CBA137F[v4]))();
}

uint64_t sub_22CB96DF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB96E00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB96E08);
  return result;
}

uint64_t sub_22CB96E14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB96E1CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_22CB96E20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB96E28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FundMetadata.CodingKeys()
{
  return &type metadata for FundMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for FundMetadata.Sector.CodingKeys()
{
  return &type metadata for FundMetadata.Sector.CodingKeys;
}

uint64_t _s9StocksKit12FundMetadataV6SectorV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_22CB96EA4 + 4 * byte_22CBA138E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_22CB96ED8 + 4 * byte_22CBA1389[v4]))();
}

uint64_t sub_22CB96ED8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB96EE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB96EE8);
  return result;
}

uint64_t sub_22CB96EF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB96EFCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_22CB96F00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB96F08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FundMetadata.Holding.CodingKeys()
{
  return &type metadata for FundMetadata.Holding.CodingKeys;
}

unint64_t sub_22CB96F28()
{
  unint64_t result;

  result = qword_255C355D8;
  if (!qword_255C355D8)
  {
    result = MEMORY[0x22E303264](&unk_22CBA15E4, &type metadata for FundMetadata.Holding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C355D8);
  }
  return result;
}

unint64_t sub_22CB96F70()
{
  unint64_t result;

  result = qword_255C355E0;
  if (!qword_255C355E0)
  {
    result = MEMORY[0x22E303264](&unk_22CBA169C, &type metadata for FundMetadata.Sector.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C355E0);
  }
  return result;
}

unint64_t sub_22CB96FB8()
{
  unint64_t result;

  result = qword_255C355E8;
  if (!qword_255C355E8)
  {
    result = MEMORY[0x22E303264](&unk_22CBA1754, &type metadata for FundMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C355E8);
  }
  return result;
}

unint64_t sub_22CB97000()
{
  unint64_t result;

  result = qword_255C355F0;
  if (!qword_255C355F0)
  {
    result = MEMORY[0x22E303264](&unk_22CBA16C4, &type metadata for FundMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C355F0);
  }
  return result;
}

unint64_t sub_22CB97048()
{
  unint64_t result;

  result = qword_255C355F8;
  if (!qword_255C355F8)
  {
    result = MEMORY[0x22E303264](&unk_22CBA16EC, &type metadata for FundMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C355F8);
  }
  return result;
}

unint64_t sub_22CB97090()
{
  unint64_t result;

  result = qword_255C35600;
  if (!qword_255C35600)
  {
    result = MEMORY[0x22E303264](&unk_22CBA160C, &type metadata for FundMetadata.Sector.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35600);
  }
  return result;
}

unint64_t sub_22CB970D8()
{
  unint64_t result;

  result = qword_255C35608;
  if (!qword_255C35608)
  {
    result = MEMORY[0x22E303264](&unk_22CBA1634, &type metadata for FundMetadata.Sector.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35608);
  }
  return result;
}

unint64_t sub_22CB97120()
{
  unint64_t result;

  result = qword_255C35610;
  if (!qword_255C35610)
  {
    result = MEMORY[0x22E303264](&unk_22CBA1554, &type metadata for FundMetadata.Holding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35610);
  }
  return result;
}

unint64_t sub_22CB97168()
{
  unint64_t result;

  result = qword_255C35618;
  if (!qword_255C35618)
  {
    result = MEMORY[0x22E303264](&unk_22CBA157C, &type metadata for FundMetadata.Holding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35618);
  }
  return result;
}

uint64_t sub_22CB971AC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C6F626D7973 && a2 == 0xE600000000000000;
  if (v2 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000022CBA2C40)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_22CB97290(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726F74636573 && a2 == 0xE600000000000000;
  if (v2 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000022CBA2C40)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_22CB97374(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x616C437465737361 && a2 == 0xEA00000000007373 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7375636F66 && a2 == 0xE500000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656863696ELL && a2 == 0xE500000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F69676572 && a2 == 0xE600000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x69646C6F48706F74 && a2 == 0xEB0000000073676ELL || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6F74636553706F74 && a2 == 0xEA00000000007372)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v5 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_22CB97670(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StockChart.Entry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22CB976B4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StockChart.Entry(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22CB976FC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = sub_22CB9C544();
  v36 = *(_QWORD *)(v4 - 8);
  v37 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v35 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  MEMORY[0x24BDAC7A8](v6);
  v34 = (char *)&v31 - v7;
  sub_22CB4E0E4(0, &qword_253F83800, (void (*)(uint64_t))MEMORY[0x24BEB1988]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v31 - v9;
  sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v31 - v12;
  v14 = sub_22CB9C928();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a1;
  v18 = sub_22CB9C874();
  sub_22CB83B70(v18, &v38);
  v32 = a2;
  *(_QWORD *)a2 = v38;
  sub_22CB9C880();
  v19 = type metadata accessor for CurrencyConversionsResult();
  v20 = (uint64_t *)&a2[*(int *)(v19 + 20)];
  v21 = sub_22CB9C910();
  v23 = v22;
  sub_22CB9C904();
  sub_22CB67BD8((uint64_t)v10, (uint64_t)v13);
  v24 = (uint64_t)v34;
  sub_22CB9C91C();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  *v20 = v21;
  v20[1] = v23;
  v25 = type metadata accessor for DataSource(0);
  sub_22CB68798((uint64_t)v13, (uint64_t)v20 + *(int *)(v25 + 20), &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
  sub_22CB68798(v24, (uint64_t)v20 + *(int *)(v25 + 24), (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  v27 = v32;
  v26 = v33;
  sub_22CB9C898();
  v28 = v35;
  sub_22CB9C88C();
  v29 = sub_22CB9C8A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v26, v29);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))(&v27[*(int *)(v19 + 28)], v28, v37);
}

uint64_t CurrencyConversionsResult.conversions.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t CurrencyConversionsResult.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CurrencyConversionsResult();
  return sub_22CB4DCF4(v1 + *(int *)(v3 + 20), a1, type metadata accessor for DataSource);
}

uint64_t type metadata accessor for CurrencyConversionsResult()
{
  uint64_t result;

  result = qword_253F839A0;
  if (!qword_253F839A0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CurrencyConversionsResult.source.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for CurrencyConversionsResult() + 20);
  return sub_22CB97A48(a1, v3);
}

uint64_t sub_22CB97A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DataSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*CurrencyConversionsResult.source.modify())()
{
  type metadata accessor for CurrencyConversionsResult();
  return nullsub_1;
}

uint64_t CurrencyConversionsResult.createdAt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CurrencyConversionsResult() + 24);
  v4 = sub_22CB9C544();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CurrencyConversionsResult.staleAt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CurrencyConversionsResult() + 28);
  v4 = sub_22CB9C544();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CurrencyConversionsResult.init(conversions:source:createdAt:staleAt:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int *v9;
  char *v10;
  uint64_t v11;
  void (*v13)(char *, uint64_t, uint64_t);

  *a5 = *a1;
  v9 = (int *)type metadata accessor for CurrencyConversionsResult();
  sub_22CB97BF0(a2, (uint64_t)a5 + v9[5]);
  v10 = (char *)a5 + v9[6];
  v11 = sub_22CB9C544();
  v13 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v13(v10, a3, v11);
  return ((uint64_t (*)(char *, uint64_t, uint64_t))v13)((char *)a5 + v9[7], a4, v11);
}

uint64_t sub_22CB97BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DataSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_22CB97C34()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22CB97C6C + 4 * byte_22CBA1870[*v0]))(0x69737265766E6F63, 0xEB00000000736E6FLL);
}

uint64_t sub_22CB97C6C()
{
  return 0x656372756F73;
}

uint64_t sub_22CB97C80()
{
  return 0x4164657461657263;
}

uint64_t sub_22CB97C9C()
{
  return 0x7441656C617473;
}

uint64_t sub_22CB97CB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_22CB9998C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_22CB97CD8()
{
  sub_22CB97F40();
  return sub_22CB9D654();
}

uint64_t sub_22CB97D00()
{
  sub_22CB97F40();
  return sub_22CB9D660();
}

uint64_t CurrencyConversionsResult.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];
  uint64_t v12;

  v3 = v1;
  sub_22CB983FC(0, (unint64_t *)&unk_253F83988, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v11[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB97F40();
  sub_22CB9D57C();
  v12 = *v3;
  v11[15] = 0;
  sub_22CB97F84();
  sub_22CB9D480();
  if (!v2)
  {
    type metadata accessor for CurrencyConversionsResult();
    v11[14] = 1;
    type metadata accessor for DataSource(0);
    sub_22CB50668(&qword_253F83848, type metadata accessor for DataSource, (uint64_t)&protocol conformance descriptor for DataSource);
    sub_22CB9D480();
    v11[13] = 2;
    sub_22CB9C544();
    sub_22CB50668(&qword_253F837D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_22CB9D480();
    v11[12] = 3;
    sub_22CB9D480();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_22CB97F40()
{
  unint64_t result;

  result = qword_253F83F48;
  if (!qword_253F83F48)
  {
    result = MEMORY[0x22E303264](&unk_22CBA19D0, &type metadata for CurrencyConversionsResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83F48);
  }
  return result;
}

unint64_t sub_22CB97F84()
{
  unint64_t result;

  result = qword_253F83868;
  if (!qword_253F83868)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for CurrencyConversions, &type metadata for CurrencyConversions);
    atomic_store(result, (unint64_t *)&qword_253F83868);
  }
  return result;
}

uint64_t CurrencyConversionsResult.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  char v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;

  v24 = a2;
  v29 = sub_22CB9C544();
  v27 = *(_QWORD *)(v29 - 8);
  v3 = MEMORY[0x24BDAC7A8](v29);
  v25 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)&v22 - v5;
  v28 = type metadata accessor for DataSource(0);
  MEMORY[0x24BDAC7A8](v28);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB983FC(0, &qword_253F83748, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x24BEE33E0]);
  v30 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - v10;
  v12 = type metadata accessor for CurrencyConversionsResult();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CB97F40();
  v31 = v11;
  v15 = (uint64_t)v32;
  sub_22CB9D570();
  if (v15)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v23 = v9;
  v32 = a1;
  v16 = v29;
  v36 = 0;
  sub_22CB98458();
  sub_22CB9D408();
  *(_QWORD *)v14 = v37;
  v35 = 1;
  sub_22CB50668(&qword_253F83658, type metadata accessor for DataSource, (uint64_t)&protocol conformance descriptor for DataSource);
  sub_22CB9D408();
  v28 = v12;
  sub_22CB97BF0((uint64_t)v7, (uint64_t)&v14[*(int *)(v12 + 20)]);
  v34 = 2;
  sub_22CB50668(&qword_253F834C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  v17 = v26;
  sub_22CB9D408();
  v18 = v17;
  v19 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v19(&v14[*(int *)(v28 + 24)], v18, v16);
  v33 = 3;
  v20 = v25;
  sub_22CB9D408();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v31, v30);
  v19((char *)*(int *)(v28 + 28), v20, v16);
  sub_22CB4DCF4(0, v24, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  return sub_22CB6257C(0, (uint64_t (*)(_QWORD))type metadata accessor for CurrencyConversionsResult);
}

void sub_22CB983FC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_22CB97F40();
    v7 = a3(a1, &type metadata for CurrencyConversionsResult.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_22CB98458()
{
  unint64_t result;

  result = qword_253F836C8;
  if (!qword_253F836C8)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for CurrencyConversions, &type metadata for CurrencyConversions);
    atomic_store(result, (unint64_t *)&qword_253F836C8);
  }
  return result;
}

uint64_t sub_22CB9849C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CurrencyConversionsResult.init(from:)(a1, a2);
}

uint64_t sub_22CB984B0(_QWORD *a1)
{
  return CurrencyConversionsResult.encode(to:)(a1);
}

char *initializeBufferWithCopyOfBuffer for CurrencyConversionsResult(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v39;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (char *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = (char *)a1;
    v6 = a3[5];
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (char *)a2 + v6;
    v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    *v7 = *(uint64_t *)((char *)a2 + v6);
    v7[1] = v9;
    v39 = type metadata accessor for DataSource(0);
    v10 = *(int *)(v39 + 20);
    v11 = (char *)v7 + v10;
    v12 = &v8[v10];
    v13 = type metadata accessor for DataSource.Logo(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v36 = v14;
      v17 = sub_22CB9C4F0();
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      v19(v11, v12, v17);
      v20 = *(int *)(v13 + 20);
      v21 = &v11[v20];
      v22 = &v12[v20];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v22, 1, v17))
      {
        sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        v19(v21, v22, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v17);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v11, 0, 1, v13);
    }
    v24 = *(int *)(v39 + 24);
    v25 = (char *)v7 + v24;
    v26 = &v8[v24];
    v27 = sub_22CB9C4F0();
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    v30 = a3[6];
    v31 = &v5[v30];
    v32 = (char *)a2 + v30;
    v33 = sub_22CB9C544();
    v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
    v34(v31, v32, v33);
    v34(&v5[a3[7]], (char *)a2 + a3[7], v33);
  }
  return v5;
}

uint64_t destroy for CurrencyConversionsResult(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v18)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for DataSource(0);
  v6 = v4 + *(int *)(v5 + 20);
  v7 = type metadata accessor for DataSource.Logo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = sub_22CB9C4F0();
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v10(v6, v8);
    v11 = v6 + *(int *)(v7 + 20);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
      v10(v11, v8);
  }
  v12 = v4 + *(int *)(v5 + 24);
  v13 = sub_22CB9C4F0();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  v15 = a1 + a2[6];
  v16 = sub_22CB9C544();
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
  v18(v15, v16);
  return ((uint64_t (*)(uint64_t, uint64_t))v18)(a1 + a2[7], v16);
}

char *initializeWithCopy for CurrencyConversionsResult(char *a1, char *a2, int *a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  void (*v33)(char *, char *, uint64_t);
  uint64_t v35;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a3[5];
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = *(_QWORD *)&a2[v4 + 8];
  *(_QWORD *)v5 = *(_QWORD *)&a2[v4];
  *((_QWORD *)v5 + 1) = v7;
  v35 = type metadata accessor for DataSource(0);
  v8 = *(int *)(v35 + 20);
  v9 = &v5[v8];
  v10 = &v6[v8];
  v11 = type metadata accessor for DataSource.Logo(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = sub_22CB9C4F0();
    v16 = *(_QWORD *)(v15 - 8);
    v33 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v33(v9, v10, v15);
    v17 = *(int *)(v11 + 20);
    v18 = &v9[v17];
    v19 = &v10[v17];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v19, 1, v15))
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v33(v18, v19, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v15);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v21 = *(int *)(v35 + 24);
  v22 = &v5[v21];
  v23 = &v6[v21];
  v24 = sub_22CB9C4F0();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v27 = a3[6];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = sub_22CB9C544();
  v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
  v31(v28, v29, v30);
  v31(&a1[a3[7]], &a2[a3[7]], v30);
  return a1;
}

char *assignWithCopy for CurrencyConversionsResult(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t (*v31)(void *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v49;
  void (*v50)(uint64_t, char *, uint64_t);
  void (*v51)(uint64_t, char *, uint64_t);
  void *__dst;
  uint64_t v53;
  uint64_t v54;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v54 = a3;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  *(_QWORD *)v7 = *(_QWORD *)&a2[v6];
  *((_QWORD *)v7 + 1) = *(_QWORD *)&a2[v6 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v53 = type metadata accessor for DataSource(0);
  v9 = *(int *)(v53 + 20);
  v10 = (uint64_t)&v7[v9];
  v11 = &v8[v9];
  v12 = type metadata accessor for DataSource.Logo(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14((uint64_t)v11, 1, v12);
  if (!v15)
  {
    if (v16)
    {
      sub_22CB6257C(v10, type metadata accessor for DataSource.Logo);
LABEL_6:
      sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
      v18 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64);
      v19 = (void *)v10;
      v20 = v11;
LABEL_7:
      memcpy(v19, v20, v18);
      goto LABEL_15;
    }
    v26 = sub_22CB9C4F0();
    v27 = *(_QWORD *)(v26 - 8);
    v51 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 24);
    v51(v10, v11, v26);
    v28 = *(int *)(v12 + 20);
    v29 = (void *)(v10 + v28);
    v30 = &v11[v28];
    v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
    v32 = v31(v29, 1, v26);
    v33 = v31(v30, 1, v26);
    if (v32)
    {
      if (!v33)
      {
        (*(void (**)(void *, char *, uint64_t))(v27 + 16))(v29, v30, v26);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, v26);
        goto LABEL_15;
      }
    }
    else
    {
      if (!v33)
      {
        v51((uint64_t)v29, v30, v26);
        goto LABEL_15;
      }
      (*(void (**)(void *, uint64_t))(v27 + 8))(v29, v26);
    }
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v18 = *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64);
    v19 = v29;
    v20 = v30;
    goto LABEL_7;
  }
  if (v16)
    goto LABEL_6;
  v21 = sub_22CB9C4F0();
  v22 = *(_QWORD *)(v21 - 8);
  v50 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 16);
  v50(v10, v11, v21);
  v23 = *(int *)(v12 + 20);
  __dst = (void *)(v10 + v23);
  v24 = &v11[v23];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v24, 1, v21))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v50((uint64_t)__dst, v24, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_15:
  v34 = *(int *)(v53 + 24);
  v35 = &v7[v34];
  v36 = &v8[v34];
  v37 = sub_22CB9C4F0();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 24))(v35, v36, v37);
      goto LABEL_21;
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
    goto LABEL_20;
  }
  if (v41)
  {
LABEL_20:
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_21:
  v43 = *(int *)(v54 + 24);
  v44 = &a1[v43];
  v45 = &a2[v43];
  v46 = sub_22CB9C544();
  v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 24);
  v47(v44, v45, v46);
  v47(&a1[*(int *)(v54 + 28)], &a2[*(int *)(v54 + 28)], v46);
  return a1;
}

char *initializeWithTake for CurrencyConversionsResult(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *__dst;

  v3 = a3;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  *(_OWORD *)&a1[v6] = *(_OWORD *)&a2[v6];
  v9 = type metadata accessor for DataSource(0);
  v10 = *(int *)(v9 + 20);
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for DataSource.Logo(0);
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v34 = v9;
    v35 = v3;
    v16 = sub_22CB9C4F0();
    v17 = *(_QWORD *)(v16 - 8);
    v33 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v33(v11, v12, v16);
    v18 = *(int *)(v13 + 20);
    __dst = &v11[v18];
    v19 = &v12[v18];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v19, 1, v16))
    {
      sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v33(__dst, v19, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    v9 = v34;
    v3 = v35;
  }
  v21 = *(int *)(v9 + 24);
  v22 = &v7[v21];
  v23 = &v8[v21];
  v24 = sub_22CB9C4F0();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v27 = *(int *)(v3 + 24);
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = sub_22CB9C544();
  v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32);
  v31(v28, v29, v30);
  v31(&a1[*(int *)(v3 + 28)], &a2[*(int *)(v3 + 28)], v30);
  return a1;
}

char *assignWithTake for CurrencyConversionsResult(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v50;
  void (*v51)(uint64_t, char *, uint64_t);
  void (*v52)(uint64_t, char *, uint64_t);
  void *__dst;
  uint64_t v54;
  uint64_t v55;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v55 = a3;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  *(_QWORD *)v7 = *(_QWORD *)&a2[v6];
  *((_QWORD *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  v54 = type metadata accessor for DataSource(0);
  v10 = *(int *)(v54 + 20);
  v11 = (uint64_t)&v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for DataSource.Logo(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15((uint64_t)v12, 1, v13);
  if (!v16)
  {
    if (v17)
    {
      sub_22CB6257C(v11, type metadata accessor for DataSource.Logo);
LABEL_6:
      sub_22CB4E0E4(0, &qword_253F83E70, (void (*)(uint64_t))type metadata accessor for DataSource.Logo);
      v19 = *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64);
      v20 = (void *)v11;
      v21 = v12;
LABEL_7:
      memcpy(v20, v21, v19);
      goto LABEL_15;
    }
    v27 = sub_22CB9C4F0();
    v28 = *(_QWORD *)(v27 - 8);
    v52 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 40);
    v52(v11, v12, v27);
    v29 = *(int *)(v13 + 20);
    v30 = (void *)(v11 + v29);
    v31 = &v12[v29];
    v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
    v33 = v32(v30, 1, v27);
    v34 = v32(v31, 1, v27);
    if (v33)
    {
      if (!v34)
      {
        (*(void (**)(void *, char *, uint64_t))(v28 + 32))(v30, v31, v27);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v27);
        goto LABEL_15;
      }
    }
    else
    {
      if (!v34)
      {
        v52((uint64_t)v30, v31, v27);
        goto LABEL_15;
      }
      (*(void (**)(void *, uint64_t))(v28 + 8))(v30, v27);
    }
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v19 = *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64);
    v20 = v30;
    v21 = v31;
    goto LABEL_7;
  }
  if (v17)
    goto LABEL_6;
  v22 = sub_22CB9C4F0();
  v23 = *(_QWORD *)(v22 - 8);
  v51 = *(void (**)(uint64_t, char *, uint64_t))(v23 + 32);
  v51(v11, v12, v22);
  v24 = *(int *)(v13 + 20);
  __dst = (void *)(v11 + v24);
  v25 = &v12[v24];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v25, 1, v22))
  {
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v51((uint64_t)__dst, v25, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_15:
  v35 = *(int *)(v54 + 24);
  v36 = &v7[v35];
  v37 = &v8[v35];
  v38 = sub_22CB9C4F0();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (!v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 40))(v36, v37, v38);
      goto LABEL_21;
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v36, v38);
    goto LABEL_20;
  }
  if (v42)
  {
LABEL_20:
    sub_22CB4E0E4(0, (unint64_t *)&qword_253F83998, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
LABEL_21:
  v44 = *(int *)(v55 + 24);
  v45 = &a1[v44];
  v46 = &a2[v44];
  v47 = sub_22CB9C544();
  v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 40);
  v48(v45, v46, v47);
  v48(&a1[*(int *)(v55 + 28)], &a2[*(int *)(v55 + 28)], v47);
  return a1;
}

uint64_t getEnumTagSinglePayload for CurrencyConversionsResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB9960C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DataSource(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_22CB9C544();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CurrencyConversionsResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_22CB996B8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for DataSource(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_22CB9C544();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_22CB99754()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for DataSource(319);
  if (v1 <= 0x3F)
  {
    result = sub_22CB9C544();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CurrencyConversionsResult.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_22CB99834 + 4 * byte_22CBA1879[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_22CB99868 + 4 * byte_22CBA1874[v4]))();
}

uint64_t sub_22CB99868(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB99870(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB99878);
  return result;
}

uint64_t sub_22CB99884(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB9988CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_22CB99890(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB99898(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CurrencyConversionsResult.CodingKeys()
{
  return &type metadata for CurrencyConversionsResult.CodingKeys;
}

unint64_t sub_22CB998B8()
{
  unint64_t result;

  result = qword_255C35620;
  if (!qword_255C35620)
  {
    result = MEMORY[0x22E303264](&unk_22CBA19A8, &type metadata for CurrencyConversionsResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_255C35620);
  }
  return result;
}

unint64_t sub_22CB99900()
{
  unint64_t result;

  result = qword_253F83F58;
  if (!qword_253F83F58)
  {
    result = MEMORY[0x22E303264](&unk_22CBA1918, &type metadata for CurrencyConversionsResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83F58);
  }
  return result;
}

unint64_t sub_22CB99948()
{
  unint64_t result;

  result = qword_253F83F50;
  if (!qword_253F83F50)
  {
    result = MEMORY[0x22E303264](&unk_22CBA1940, &type metadata for CurrencyConversionsResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_253F83F50);
  }
  return result;
}

uint64_t sub_22CB9998C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x69737265766E6F63 && a2 == 0xEB00000000736E6FLL;
  if (v2 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656372756F73 && a2 == 0xE600000000000000 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4164657461657263 && a2 == 0xE900000000000074 || (sub_22CB9D4BC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7441656C617473 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_22CB9D4BC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t dispatch thunk of StockServiceType.fetchCurrencyConversions(cachePolicy:deadline:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 8) + *(_QWORD *)(a5 + 8));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_22CB62A2C;
  return v13(a1, a2, a3, a4, a5);
}

void sub_22CB99BF4(uint64_t a1, char a2)
{
  sub_22CB9D534();
  __asm { BR              X10 }
}

uint64_t sub_22CB99C4C()
{
  sub_22CB9D048();
  swift_bridgeObjectRelease();
  return sub_22CB9D558();
}

void sub_22CB99D24(uint64_t a1, char a2)
{
  sub_22CB9D534();
  __asm { BR              X10 }
}

uint64_t sub_22CB99D70()
{
  sub_22CB9D048();
  swift_bridgeObjectRelease();
  return sub_22CB9D558();
}

StocksKit::StockType_optional __swiftcall StockType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  StocksKit::StockType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_22CB9D39C();
  result.value = swift_bridgeObjectRelease();
  v5 = 8;
  if (v3 < 8)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t StockType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_22CB99EC4 + 4 * byte_22CBA1A43[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_22CB99EC4()
{
  return 0x79636E6572727563;
}

uint64_t sub_22CB99EDC()
{
  return 0x75636F7470797263;
}

uint64_t sub_22CB99F00()
{
  return 0x797469757165;
}

uint64_t sub_22CB99F14()
{
  return 6714469;
}

uint64_t sub_22CB99F24()
{
  return 0x73657275747566;
}

uint64_t sub_22CB99F38()
{
  return 0x7865646E69;
}

uint64_t sub_22CB99F4C()
{
  return 0x75466C617574756DLL;
}

unint64_t sub_22CB99F6C()
{
  unint64_t result;

  result = qword_255C35630;
  if (!qword_255C35630)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for StockType, &type metadata for StockType);
    atomic_store(result, (unint64_t *)&qword_255C35630);
  }
  return result;
}

void sub_22CB99FB0()
{
  char *v0;

  sub_22CB99D24(0, *v0);
}

void sub_22CB99FBC(uint64_t a1)
{
  char *v1;

  sub_22CB88C0C(a1, *v1);
}

void sub_22CB99FC4(uint64_t a1)
{
  char *v1;

  sub_22CB99D24(a1, *v1);
}

StocksKit::StockType_optional sub_22CB99FCC(Swift::String *a1)
{
  return StockType.init(rawValue:)(*a1);
}

uint64_t sub_22CB99FD8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_22CB9A008 + 4 * byte_22CBA1A4B[*v0]))();
}

void sub_22CB9A008(_QWORD *a1@<X8>)
{
  *a1 = 0x79636E6572727563;
  a1[1] = 0xE800000000000000;
}

void sub_22CB9A024(char *a1@<X8>)
{
  strcpy(a1, "cryptocurrency");
  a1[15] = -18;
}

void sub_22CB9A04C(_QWORD *a1@<X8>)
{
  *a1 = 0x797469757165;
  a1[1] = 0xE600000000000000;
}

void sub_22CB9A064(_QWORD *a1@<X8>)
{
  *a1 = 6714469;
  a1[1] = 0xE300000000000000;
}

void sub_22CB9A078(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x73657275747566;
  a1[1] = v1;
}

void sub_22CB9A090(_QWORD *a1@<X8>)
{
  *a1 = 0x7865646E69;
  a1[1] = 0xE500000000000000;
}

void sub_22CB9A0A8(_QWORD *a1@<X8>)
{
  *a1 = 0x75466C617574756DLL;
  a1[1] = 0xEA0000000000646ELL;
}

uint64_t sub_22CB9A0C8()
{
  sub_22CB9A248();
  return sub_22CB9D078();
}

uint64_t sub_22CB9A124()
{
  sub_22CB9A248();
  return sub_22CB9D06C();
}

void sub_22CB9A170(char *a1)
{
  sub_22CB72134(*a1);
}

uint64_t storeEnumTagSinglePayload for StockType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_22CB9A1C8 + 4 * byte_22CBA1A58[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_22CB9A1FC + 4 * byte_22CBA1A53[v4]))();
}

uint64_t sub_22CB9A1FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB9A204(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22CB9A20CLL);
  return result;
}

uint64_t sub_22CB9A218(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22CB9A220);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_22CB9A224(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22CB9A22C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StockType()
{
  return &type metadata for StockType;
}

unint64_t sub_22CB9A248()
{
  unint64_t result;

  result = qword_255C35638;
  if (!qword_255C35638)
  {
    result = MEMORY[0x22E303264](&protocol conformance descriptor for StockType, &type metadata for StockType);
    atomic_store(result, (unint64_t *)&qword_255C35638);
  }
  return result;
}

uint64_t QuoteDetailResult.quoteDetails.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t QuoteDetailResult.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for QuoteDetailResult() + 20);
  return sub_22CB62E94(v3, a1);
}

uint64_t type metadata accessor for QuoteDetailResult()
{
  uint64_t result;

  result = qword_255C35640;
  if (!qword_255C35640)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t getEnumTagSinglePayload for QuoteDetailResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB9A30C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DataSource(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for QuoteDetailResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_22CB9A394(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DataSource(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t StockResult.stocks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StockResult.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for StockResult() + 20);
  return sub_22CB62E94(v3, a1);
}

uint64_t type metadata accessor for StockResult()
{
  uint64_t result;

  result = qword_255C35650;
  if (!qword_255C35650)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t getEnumTagSinglePayload for StockResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22CB9A488(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DataSource(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for StockResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_22CB9A510(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DataSource(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t StockService.searchStocks(for:cachePolicy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_22CB9A5A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;

  if (qword_253F83690 != -1)
    swift_once();
  v2 = v0[3];
  v1 = v0[4];
  v3 = off_253F83688;
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  v5 = (_QWORD *)swift_task_alloc();
  v0[6] = v5;
  type metadata accessor for StockSearchResult();
  *v5 = v0;
  v5[1] = sub_22CB53B14;
  return sub_22CB9D4C8();
}

uint64_t sub_22CB9A67C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  sub_22CB9C3C0(0, (unint64_t *)&unk_255C356D0, (void (*)(uint64_t))type metadata accessor for StockSearchResult);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v15 - v10, a1, v8);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, v11, v8);
  StockService.searchStocks(for:completion:)(a3, a4, (uint64_t)sub_22CB9C440, v13);
  return swift_release();
}

uint64_t sub_22CB9A780(uint64_t a1)
{
  uint64_t v1;

  return sub_22CB9A67C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t StockService.fetchStocks(for:cachePolicy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a3;
  *(_BYTE *)(v3 + 72) = *(_BYTE *)(a3 + 16);
  return swift_task_switch();
}

uint64_t sub_22CB9A7B4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;

  if (qword_253F83690 != -1)
    swift_once();
  v1 = *(_BYTE *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 40);
  v7 = *(_OWORD *)(v0 + 24);
  v3 = off_253F83688;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_OWORD *)(v4 + 24) = v7;
  *(_QWORD *)(v4 + 40) = v2;
  *(_BYTE *)(v4 + 48) = v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v5;
  type metadata accessor for StockResult();
  *v5 = v0;
  v5[1] = sub_22CB53C78;
  return sub_22CB9D4C8();
}

uint64_t sub_22CB9A8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[2];
  char v25;

  v23 = a2;
  sub_22CB9C3C0(0, &qword_255C356C8, (void (*)(uint64_t))type metadata accessor for StockResult);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v24[-1] - v14;
  v16 = type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v24[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = a4;
  v24[1] = a5;
  v25 = a6;
  sub_22CB50D2C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v20 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v21 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v21 + v20, v15, v12);
  StockService.fetchStocks(for:cachePolicy:networkSession:completion:)(a3, (uint64_t)v24, (uint64_t)v18, (uint64_t)sub_22CB9C390, v21);
  swift_release();
  return sub_22CB9C16C((uint64_t)v18);
}

uint64_t sub_22CB9AA2C(uint64_t a1)
{
  return sub_22CB9AFA8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_22CB9A8B0);
}

uint64_t StockService.fetchStocks(for:cachePolicy:networkSession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a4;
  *(_QWORD *)(v4 + 16) = a1;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)a3;
  *(_BYTE *)(v4 + 80) = *(_BYTE *)(a3 + 16);
  return swift_task_switch();
}

uint64_t sub_22CB9AA64()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  if (qword_253F83690 != -1)
    swift_once();
  v1 = *(_BYTE *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = off_253F83688;
  v7 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v7;
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  *(_QWORD *)(v7 + 32) = v3;
  *(_QWORD *)(v7 + 40) = v2;
  *(_BYTE *)(v7 + 48) = v1;
  *(_QWORD *)(v7 + 56) = v4;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v8;
  type metadata accessor for StockResult();
  *v8 = v0;
  v8[1] = sub_22CB772FC;
  return sub_22CB9D4C8();
}

uint64_t sub_22CB9AB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v20 = a7;
  sub_22CB9C3C0(0, &qword_255C356C8, (void (*)(uint64_t))type metadata accessor for StockResult);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v21[-1] - v15;
  v21[0] = a4;
  v21[1] = a5;
  v22 = a6;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v21[-1] - v15, a1, v13);
  v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v18 + v17, v16, v13);
  StockService.fetchStocks(for:cachePolicy:networkSession:completion:)(a3, (uint64_t)v21, v20, (uint64_t)sub_22CB9C390, v18);
  return swift_release();
}

uint64_t sub_22CB9AC7C(uint64_t a1)
{
  return sub_22CB9B4D0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_22CB9AB60);
}

uint64_t StockService.fetchQuotes(for:cachePolicy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a3;
  *(_BYTE *)(v3 + 72) = *(_BYTE *)(a3 + 16);
  return swift_task_switch();
}

uint64_t sub_22CB9ACB0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;

  if (qword_253F83690 != -1)
    swift_once();
  v1 = *(_BYTE *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 40);
  v7 = *(_OWORD *)(v0 + 24);
  v3 = off_253F83688;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_OWORD *)(v4 + 24) = v7;
  *(_QWORD *)(v4 + 40) = v2;
  *(_BYTE *)(v4 + 48) = v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v5;
  type metadata accessor for QuoteResult();
  *v5 = v0;
  v5[1] = sub_22CB9ADAC;
  return sub_22CB9D4C8();
}

uint64_t sub_22CB9ADAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_22CB9AE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[2];
  char v25;

  v23 = a2;
  sub_22CB9C3C0(0, &qword_255C356C0, (void (*)(uint64_t))type metadata accessor for QuoteResult);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v24[-1] - v14;
  v16 = type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v24[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = a4;
  v24[1] = a5;
  v25 = a6;
  sub_22CB50D2C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v20 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v21 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v21 + v20, v15, v12);
  StockService.fetchQuotes(for:cachePolicy:networkSession:completion:)(a3, (uint64_t)v24, (uint64_t)v18, (uint64_t)sub_22CB9C34C, v21);
  swift_release();
  return sub_22CB9C16C((uint64_t)v18);
}

uint64_t sub_22CB9AF9C(uint64_t a1)
{
  return sub_22CB9AFA8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_22CB9AE20);
}

uint64_t sub_22CB9AFA8(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(unsigned __int8 *)(v2 + 48));
}

uint64_t StockService.fetchQuotes(for:cachePolicy:networkSession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a4;
  *(_QWORD *)(v4 + 16) = a1;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)a3;
  *(_BYTE *)(v4 + 80) = *(_BYTE *)(a3 + 16);
  return swift_task_switch();
}

uint64_t sub_22CB9AFE8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  if (qword_253F83690 != -1)
    swift_once();
  v1 = *(_BYTE *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = off_253F83688;
  v7 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v7;
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  *(_QWORD *)(v7 + 32) = v3;
  *(_QWORD *)(v7 + 40) = v2;
  *(_BYTE *)(v7 + 48) = v1;
  *(_QWORD *)(v7 + 56) = v4;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v8;
  type metadata accessor for QuoteResult();
  *v8 = v0;
  v8[1] = sub_22CB9B0E4;
  return sub_22CB9D4C8();
}

uint64_t sub_22CB9B0E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_22CB9B158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v20 = a7;
  sub_22CB9C3C0(0, &qword_255C356C0, (void (*)(uint64_t))type metadata accessor for QuoteResult);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v21[-1] - v15;
  v21[0] = a4;
  v21[1] = a5;
  v22 = a6;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v21[-1] - v15, a1, v13);
  v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v18 + v17, v16, v13);
  StockService.fetchQuotes(for:cachePolicy:networkSession:completion:)(a3, (uint64_t)v21, v20, (uint64_t)sub_22CB9C34C, v18);
  return swift_release();
}

uint64_t sub_22CB9B274(uint64_t a1)
{
  return sub_22CB9B4D0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_22CB9B158);
}

uint64_t StockService.fetchQuoteDetails(for:cachePolicy:networkSession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a4;
  *(_QWORD *)(v4 + 16) = a1;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)a3;
  *(_BYTE *)(v4 + 80) = *(_BYTE *)(a3 + 16);
  return swift_task_switch();
}

uint64_t sub_22CB9B2AC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  if (qword_253F83690 != -1)
    swift_once();
  v1 = *(_BYTE *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = off_253F83688;
  v7 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v7;
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  *(_QWORD *)(v7 + 32) = v3;
  *(_QWORD *)(v7 + 40) = v2;
  *(_BYTE *)(v7 + 48) = v1;
  *(_QWORD *)(v7 + 56) = v4;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v8;
  type metadata accessor for QuoteDetailResult();
  *v8 = v0;
  v8[1] = sub_22CB9B0E4;
  return sub_22CB9D4C8();
}

uint64_t sub_22CB9B3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v20 = a7;
  sub_22CB9C3C0(0, &qword_255C356B8, (void (*)(uint64_t))type metadata accessor for QuoteDetailResult);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v21[-1] - v15;
  v21[0] = a4;
  v21[1] = a5;
  v22 = a6;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v21[-1] - v15, a1, v13);
  v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v18 + v17, v16, v13);
  StockService.fetchQuoteDetails(for:cachePolicy:networkSession:completion:)(a3, (uint64_t)v21, v20, (uint64_t)sub_22CB9C2D0, v18);
  return swift_release();
}

uint64_t sub_22CB9B4C4(uint64_t a1)
{
  return sub_22CB9B4D0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_22CB9B3A8);
}

uint64_t sub_22CB9B4D0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t StockService.fetchStockChart(for:range:cachePolicy:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a2;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 16) = a1;
  *(_BYTE *)(v5 + 80) = *a4;
  *(_OWORD *)(v5 + 40) = *(_OWORD *)a5;
  *(_BYTE *)(v5 + 81) = *(_BYTE *)(a5 + 16);
  return swift_task_switch();
}

uint64_t sub_22CB9B51C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;

  if (qword_253F83690 != -1)
    swift_once();
  v1 = *(_BYTE *)(v0 + 81);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_BYTE *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v7 = off_253F83688;
  v8 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v8;
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  *(_QWORD *)(v8 + 32) = v5;
  *(_BYTE *)(v8 + 40) = v4;
  *(_QWORD *)(v8 + 48) = v3;
  *(_QWORD *)(v8 + 56) = v2;
  *(_BYTE *)(v8 + 64) = v1;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v9;
  type metadata accessor for StockChartResult();
  *v9 = v0;
  v9[1] = sub_22CB772FC;
  return sub_22CB9D4C8();
}

uint64_t sub_22CB9B620(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28[2];
  char v29;
  unsigned __int8 v30;

  v25 = a3;
  v26 = a4;
  v27 = a2;
  sub_22CB9C3C0(0, &qword_255C356B0, (void (*)(uint64_t))type metadata accessor for StockChartResult);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v25 - v16;
  v18 = type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a5;
  v28[0] = a6;
  v28[1] = a7;
  v29 = a8;
  sub_22CB50D2C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  v22 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v23 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v23 + v22, v17, v14);
  StockService.fetchStockChart(for:range:cachePolicy:networkSession:completion:)(v25, v26, &v30, v28, (uint64_t)v20, (uint64_t)sub_22CB9C224, v23);
  swift_release();
  return sub_22CB9C16C((uint64_t)v20);
}

uint64_t sub_22CB9B7A8(uint64_t a1)
{
  uint64_t v1;

  return sub_22CB9B620(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_BYTE *)(v1 + 64));
}

uint64_t StockService.fetchStockChart(for:range:cachePolicy:networkSession:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 40) = a6;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_BYTE *)(v6 + 88) = *a4;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)a5;
  *(_BYTE *)(v6 + 89) = *(_BYTE *)(a5 + 16);
  return swift_task_switch();
}

uint64_t sub_22CB9B7F4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;

  if (qword_253F83690 != -1)
    swift_once();
  v1 = *(_BYTE *)(v0 + 89);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_BYTE *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 24);
  v8 = off_253F83688;
  v9 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v9;
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  *(_QWORD *)(v9 + 32) = v6;
  *(_BYTE *)(v9 + 40) = v4;
  *(_QWORD *)(v9 + 48) = v3;
  *(_QWORD *)(v9 + 56) = v2;
  *(_BYTE *)(v9 + 64) = v1;
  *(_QWORD *)(v9 + 72) = v5;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v10;
  type metadata accessor for StockChartResult();
  *v10 = v0;
  v10[1] = sub_22CB9B908;
  return sub_22CB9D4C8();
}

uint64_t sub_22CB9B908()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_22CB9B97C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_22CB9B9B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25[2];
  char v26;
  unsigned __int8 v27;

  v22 = a3;
  v23 = a4;
  v24 = a2;
  sub_22CB9C3C0(0, &qword_255C356B0, (void (*)(uint64_t))type metadata accessor for StockChartResult);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v22 - v17;
  v27 = a5;
  v25[0] = a6;
  v25[1] = a7;
  v26 = a8;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v22 - v17, a1, v15);
  v19 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v20 + v19, v18, v15);
  StockService.fetchStockChart(for:range:cachePolicy:networkSession:completion:)(v22, v23, &v27, v25, a9, (uint64_t)sub_22CB9C224, v20);
  return swift_release();
}

uint64_t sub_22CB9BADC(uint64_t a1)
{
  uint64_t v1;

  return sub_22CB9B9B0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_BYTE *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_22CB9BB14(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), unint64_t *a4, unint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v9 = ((uint64_t (*)(_QWORD))a3)(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v21 - v10;
  sub_22CB9C45C(0, a4, a3);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v21 - v13;
  sub_22CB9C2EC(a1, (uint64_t)v21 - v13, a4, a3);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = *(_QWORD *)v14;
    v16 = *((_QWORD *)v14 + 1);
    v17 = v14[16];
    sub_22CB62290();
    v18 = swift_allocError();
    *(_QWORD *)v19 = v15;
    *(_QWORD *)(v19 + 8) = v16;
    *(_BYTE *)(v19 + 16) = v17;
    v21[1] = v18;
    sub_22CB9C3C0(0, a5, a3);
    return sub_22CB9D0E4();
  }
  else
  {
    sub_22CB6291C((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(_QWORD))a3);
    sub_22CB9C3C0(0, a5, a3);
    return sub_22CB9D0F0();
  }
}

uint64_t StockService.fetchDefaultWatchlist(cachePolicy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)a2;
  *(_BYTE *)(v2 + 64) = *(_BYTE *)(a2 + 16);
  return swift_task_switch();
}

uint64_t sub_22CB9BC98()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;

  if (qword_253F83690 != -1)
    swift_once();
  v1 = *(_BYTE *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v4 = off_253F83688;
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v5;
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *(_QWORD *)(v5 + 32) = v2;
  *(_BYTE *)(v5 + 40) = v1;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v6;
  *v6 = v0;
  v6[1] = sub_22CB53B14;
  return sub_22CB9D4C8();
}

uint64_t sub_22CB9BD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD v25[2];
  char v26;

  v24 = a2;
  sub_22CB9BF8C();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v13 = type metadata accessor for StockService.NetworkSession(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v25[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CB50D2C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v25[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v17 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v17, (char *)&v25[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v19 = objc_msgSend((id)objc_opt_self(), sel_defaultsForCurrentCountry, v24);
  v20 = objc_msgSend(v19, sel_defaultSymbols);

  v21 = sub_22CB9D090();
  v25[0] = a3;
  v25[1] = a4;
  v26 = a5;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_22CB9C104;
  *(_QWORD *)(v22 + 24) = v18;
  swift_retain();
  StockService.fetchStocks(for:cachePolicy:networkSession:completion:)(v21, (uint64_t)v25, (uint64_t)v15, (uint64_t)sub_22CB9C164, v22);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_22CB9C16C((uint64_t)v15);
}

uint64_t sub_22CB9BF7C(uint64_t a1)
{
  uint64_t v1;

  return sub_22CB9BD80(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

void sub_22CB9BF8C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_255C356A8)
  {
    sub_22CB7A568();
    v0 = sub_22CB9D0FC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_255C356A8);
  }
}

uint64_t sub_22CB9BFF0(uint64_t a1)
{
  void *v1;
  void *v2;
  char v3;
  uint64_t v4;

  v1 = *(void **)a1;
  if ((*(_BYTE *)(a1 + 17) & 1) != 0)
  {
    v2 = *(void **)(a1 + 8);
    v3 = *(_BYTE *)(a1 + 16);
    sub_22CB62290();
    swift_allocError();
    *(_QWORD *)v4 = v1;
    *(_QWORD *)(v4 + 8) = v2;
    *(_BYTE *)(v4 + 16) = v3;
    sub_22CB617D8(v1, v2, v3);
    sub_22CB9BF8C();
    return sub_22CB9D0E4();
  }
  else
  {
    sub_22CB9BF8C();
    swift_bridgeObjectRetain();
    return sub_22CB9D0F0();
  }
}

uint64_t sub_22CB9C0A4()
{
  uint64_t v0;
  uint64_t v1;

  sub_22CB9BF8C();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_22CB9C104(uint64_t a1)
{
  sub_22CB9BF8C();
  return sub_22CB9BFF0(a1);
}

uint64_t sub_22CB9C140()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_22CB9C164(uint64_t a1)
{
  uint64_t v1;

  return sub_22CB5D6DC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_22CB9C16C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StockService.NetworkSession(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22CB9C1A8()
{
  return objectdestroy_44Tm(&qword_255C356B0, (void (*)(uint64_t))type metadata accessor for StockChartResult);
}

uint64_t objectdestroy_44Tm(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  sub_22CB9C3C0(0, a1, a2);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2+ ((*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80)), v3);
  return swift_deallocObject();
}

uint64_t sub_22CB9C224(uint64_t a1)
{
  return sub_22CB9C254(a1, &qword_255C356B0, (void (*)(uint64_t))type metadata accessor for StockChartResult, &qword_255C34F60);
}

uint64_t sub_22CB9C240()
{
  return objectdestroy_44Tm(&qword_255C356B0, (void (*)(uint64_t))type metadata accessor for StockChartResult);
}

uint64_t sub_22CB9C254(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;

  sub_22CB9C3C0(0, a2, a3);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80);
  return sub_22CB9BB14(a1, v4 + ((v10 + 16) & ~v10), a3, a4, a2);
}

uint64_t sub_22CB9C2BC()
{
  return objectdestroy_44Tm(&qword_255C356B8, (void (*)(uint64_t))type metadata accessor for QuoteDetailResult);
}

uint64_t sub_22CB9C2D0(uint64_t a1)
{
  return sub_22CB9C254(a1, &qword_255C356B8, (void (*)(uint64_t))type metadata accessor for QuoteDetailResult, &qword_255C34F80);
}

uint64_t sub_22CB9C2EC(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_22CB9C45C(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_22CB9C338()
{
  return objectdestroy_44Tm(&qword_255C356C0, (void (*)(uint64_t))type metadata accessor for QuoteResult);
}

uint64_t sub_22CB9C34C(uint64_t a1)
{
  return sub_22CB9C254(a1, &qword_255C356C0, (void (*)(uint64_t))type metadata accessor for QuoteResult, &qword_255C34FA8);
}

uint64_t sub_22CB9C368()
{
  return objectdestroy_44Tm(&qword_255C356C0, (void (*)(uint64_t))type metadata accessor for QuoteResult);
}

uint64_t sub_22CB9C37C()
{
  return objectdestroy_44Tm(&qword_255C356C8, (void (*)(uint64_t))type metadata accessor for StockResult);
}

uint64_t sub_22CB9C390(uint64_t a1)
{
  return sub_22CB9C254(a1, &qword_255C356C8, (void (*)(uint64_t))type metadata accessor for StockResult, &qword_255C34F30);
}

uint64_t sub_22CB9C3AC()
{
  return objectdestroy_44Tm(&qword_255C356C8, (void (*)(uint64_t))type metadata accessor for StockResult);
}

void sub_22CB9C3C0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    sub_22CB7A568();
    v4 = sub_22CB9D0FC();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_22CB9C42C()
{
  return objectdestroy_44Tm((unint64_t *)&unk_255C356D0, (void (*)(uint64_t))type metadata accessor for StockSearchResult);
}

uint64_t sub_22CB9C440(uint64_t a1)
{
  return sub_22CB9C254(a1, (unint64_t *)&unk_255C356D0, (void (*)(uint64_t))type metadata accessor for StockSearchResult, &qword_255C35008);
}

void sub_22CB9C45C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    sub_22CB62290();
    v4 = sub_22CB9D564();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_22CB9C4CC()
{
  return MEMORY[0x24BDCB188]();
}

uint64_t sub_22CB9C4D8()
{
  return MEMORY[0x24BDCD988]();
}

uint64_t sub_22CB9C4E4()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t sub_22CB9C4F0()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_22CB9C4FC()
{
  return MEMORY[0x24BDCDB78]();
}

uint64_t sub_22CB9C508()
{
  return MEMORY[0x24BDCE5F0]();
}

uint64_t sub_22CB9C514()
{
  return MEMORY[0x24BDCE858]();
}

uint64_t sub_22CB9C520()
{
  return MEMORY[0x24BDCE880]();
}

uint64_t sub_22CB9C52C()
{
  return MEMORY[0x24BDCE8C8]();
}

uint64_t sub_22CB9C538()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t sub_22CB9C544()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_22CB9C550()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t sub_22CB9C55C()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_22CB9C568()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_22CB9C574()
{
  return MEMORY[0x24BDCEB08]();
}

uint64_t sub_22CB9C580()
{
  return MEMORY[0x24BDCEB18]();
}

uint64_t _s9StocksKit8CurrencyV10identifierSSvg_0()
{
  return MEMORY[0x24BDCEB50]();
}

uint64_t sub_22CB9C598()
{
  return MEMORY[0x24BDCEB60]();
}

uint64_t sub_22CB9C5A4()
{
  return MEMORY[0x24BDCEC90]();
}

uint64_t sub_22CB9C5B0()
{
  return MEMORY[0x24BDCECF0]();
}

uint64_t sub_22CB9C5BC()
{
  return MEMORY[0x24BDCECF8]();
}

uint64_t sub_22CB9C5C8()
{
  return MEMORY[0x24BDCED08]();
}

uint64_t sub_22CB9C5D4()
{
  return MEMORY[0x24BDCED50]();
}

uint64_t sub_22CB9C5E0()
{
  return MEMORY[0x24BDCED58]();
}

uint64_t sub_22CB9C5EC()
{
  return MEMORY[0x24BDCED68]();
}

uint64_t sub_22CB9C5F8()
{
  return MEMORY[0x24BDCED78]();
}

uint64_t sub_22CB9C604()
{
  return MEMORY[0x24BDCED80]();
}

uint64_t _s9StocksKit8CurrencyVyACSScfC_0()
{
  return MEMORY[0x24BDCEDA8]();
}

uint64_t sub_22CB9C61C()
{
  return MEMORY[0x24BDCEDE0]();
}

uint64_t sub_22CB9C628()
{
  return MEMORY[0x24BDCEE18]();
}

uint64_t sub_22CB9C634()
{
  return MEMORY[0x24BDCEE28]();
}

uint64_t sub_22CB9C640()
{
  return MEMORY[0x24BDCEE60]();
}

uint64_t sub_22CB9C64C()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_22CB9C658()
{
  return MEMORY[0x24BDCF4E8]();
}

uint64_t sub_22CB9C664()
{
  return MEMORY[0x24BDCF510]();
}

uint64_t sub_22CB9C670()
{
  return MEMORY[0x24BEB1420]();
}

uint64_t sub_22CB9C67C()
{
  return MEMORY[0x24BEB1428]();
}

uint64_t sub_22CB9C688()
{
  return MEMORY[0x24BEB1430]();
}

uint64_t sub_22CB9C694()
{
  return MEMORY[0x24BEB1450]();
}

uint64_t sub_22CB9C6A0()
{
  return MEMORY[0x24BEB1458]();
}

uint64_t sub_22CB9C6AC()
{
  return MEMORY[0x24BEB1460]();
}

uint64_t sub_22CB9C6B8()
{
  return MEMORY[0x24BEB1468]();
}

uint64_t sub_22CB9C6C4()
{
  return MEMORY[0x24BEB1470]();
}

uint64_t sub_22CB9C6D0()
{
  return MEMORY[0x24BEB1478]();
}

uint64_t sub_22CB9C6DC()
{
  return MEMORY[0x24BEB1480]();
}

uint64_t sub_22CB9C6E8()
{
  return MEMORY[0x24BEB1488]();
}

uint64_t sub_22CB9C6F4()
{
  return MEMORY[0x24BEB1490]();
}

uint64_t sub_22CB9C700()
{
  return MEMORY[0x24BEB1498]();
}

uint64_t sub_22CB9C70C()
{
  return MEMORY[0x24BEB14A0]();
}

uint64_t sub_22CB9C718()
{
  return MEMORY[0x24BEB14A8]();
}

uint64_t sub_22CB9C724()
{
  return MEMORY[0x24BEB14B0]();
}

uint64_t sub_22CB9C730()
{
  return MEMORY[0x24BEB14B8]();
}

uint64_t sub_22CB9C73C()
{
  return MEMORY[0x24BEB14C0]();
}

uint64_t sub_22CB9C748()
{
  return MEMORY[0x24BEB14C8]();
}

uint64_t sub_22CB9C754()
{
  return MEMORY[0x24BEB14D0]();
}

uint64_t sub_22CB9C760()
{
  return MEMORY[0x24BEB14D8]();
}

uint64_t sub_22CB9C76C()
{
  return MEMORY[0x24BEB14E0]();
}

uint64_t sub_22CB9C778()
{
  return MEMORY[0x24BEB14E8]();
}

uint64_t sub_22CB9C784()
{
  return MEMORY[0x24BEB14F0]();
}

uint64_t sub_22CB9C790()
{
  return MEMORY[0x24BEB14F8]();
}

uint64_t sub_22CB9C79C()
{
  return MEMORY[0x24BEB1500]();
}

uint64_t sub_22CB9C7A8()
{
  return MEMORY[0x24BEB1508]();
}

uint64_t sub_22CB9C7B4()
{
  return MEMORY[0x24BEB1510]();
}

uint64_t sub_22CB9C7C0()
{
  return MEMORY[0x24BEB1518]();
}

uint64_t sub_22CB9C7CC()
{
  return MEMORY[0x24BEB1520]();
}

uint64_t sub_22CB9C7D8()
{
  return MEMORY[0x24BEB1528]();
}

uint64_t sub_22CB9C7E4()
{
  return MEMORY[0x24BEB1530]();
}

uint64_t sub_22CB9C7F0()
{
  return MEMORY[0x24BEB1538]();
}

uint64_t sub_22CB9C7FC()
{
  return MEMORY[0x24BEB1540]();
}

uint64_t sub_22CB9C808()
{
  return MEMORY[0x24BEB1548]();
}

uint64_t sub_22CB9C814()
{
  return MEMORY[0x24BEB1550]();
}

uint64_t sub_22CB9C820()
{
  return MEMORY[0x24BEB1598]();
}

uint64_t sub_22CB9C82C()
{
  return MEMORY[0x24BEB15D0]();
}

uint64_t sub_22CB9C838()
{
  return MEMORY[0x24BEB1618]();
}

uint64_t sub_22CB9C844()
{
  return MEMORY[0x24BEB16E8]();
}

uint64_t sub_22CB9C850()
{
  return MEMORY[0x24BEB16F0]();
}

uint64_t sub_22CB9C85C()
{
  return MEMORY[0x24BEB16F8]();
}

uint64_t sub_22CB9C868()
{
  return MEMORY[0x24BEB1710]();
}

uint64_t sub_22CB9C874()
{
  return MEMORY[0x24BEB1718]();
}

uint64_t sub_22CB9C880()
{
  return MEMORY[0x24BEB1720]();
}

uint64_t sub_22CB9C88C()
{
  return MEMORY[0x24BEB1728]();
}

uint64_t sub_22CB9C898()
{
  return MEMORY[0x24BEB1730]();
}

uint64_t sub_22CB9C8A4()
{
  return MEMORY[0x24BEB1738]();
}

uint64_t sub_22CB9C8B0()
{
  return MEMORY[0x24BEB1788]();
}

uint64_t sub_22CB9C8BC()
{
  return MEMORY[0x24BEB1870]();
}

uint64_t sub_22CB9C8C8()
{
  return MEMORY[0x24BEB1878]();
}

uint64_t sub_22CB9C8D4()
{
  return MEMORY[0x24BEB1880]();
}

uint64_t sub_22CB9C8E0()
{
  return MEMORY[0x24BEB1888]();
}

uint64_t sub_22CB9C8EC()
{
  return MEMORY[0x24BEB1890]();
}

uint64_t sub_22CB9C8F8()
{
  return MEMORY[0x24BEB18A0]();
}

uint64_t sub_22CB9C904()
{
  return MEMORY[0x24BEB18B0]();
}

uint64_t sub_22CB9C910()
{
  return MEMORY[0x24BEB18B8]();
}

uint64_t sub_22CB9C91C()
{
  return MEMORY[0x24BEB18C0]();
}

uint64_t sub_22CB9C928()
{
  return MEMORY[0x24BEB18C8]();
}

uint64_t sub_22CB9C934()
{
  return MEMORY[0x24BEB18F0]();
}

uint64_t sub_22CB9C940()
{
  return MEMORY[0x24BEB1908]();
}

uint64_t sub_22CB9C94C()
{
  return MEMORY[0x24BEB1918]();
}

uint64_t sub_22CB9C958()
{
  return MEMORY[0x24BEB1920]();
}

uint64_t sub_22CB9C964()
{
  return MEMORY[0x24BEB1930]();
}

uint64_t sub_22CB9C970()
{
  return MEMORY[0x24BEB1938]();
}

uint64_t sub_22CB9C97C()
{
  return MEMORY[0x24BEB1940]();
}

uint64_t sub_22CB9C988()
{
  return MEMORY[0x24BEB1948]();
}

uint64_t sub_22CB9C994()
{
  return MEMORY[0x24BEB1958]();
}

uint64_t sub_22CB9C9A0()
{
  return MEMORY[0x24BEB1960]();
}

uint64_t sub_22CB9C9AC()
{
  return MEMORY[0x24BEB1968]();
}

uint64_t sub_22CB9C9B8()
{
  return MEMORY[0x24BEB1970]();
}

uint64_t sub_22CB9C9C4()
{
  return MEMORY[0x24BEB1978]();
}

uint64_t sub_22CB9C9D0()
{
  return MEMORY[0x24BEB1988]();
}

uint64_t sub_22CB9C9DC()
{
  return MEMORY[0x24BEB1998]();
}

uint64_t sub_22CB9C9E8()
{
  return MEMORY[0x24BEB19D0]();
}

uint64_t sub_22CB9C9F4()
{
  return MEMORY[0x24BEB19E8]();
}

uint64_t sub_22CB9CA00()
{
  return MEMORY[0x24BEB19F0]();
}

uint64_t sub_22CB9CA0C()
{
  return MEMORY[0x24BEB1A50]();
}

uint64_t sub_22CB9CA18()
{
  return MEMORY[0x24BEB1A58]();
}

uint64_t sub_22CB9CA24()
{
  return MEMORY[0x24BEB1A68]();
}

uint64_t sub_22CB9CA30()
{
  return MEMORY[0x24BEB1A78]();
}

uint64_t sub_22CB9CA3C()
{
  return MEMORY[0x24BEB1A88]();
}

uint64_t sub_22CB9CA48()
{
  return MEMORY[0x24BEB1A98]();
}

uint64_t sub_22CB9CA54()
{
  return MEMORY[0x24BEB1AA0]();
}

uint64_t sub_22CB9CA60()
{
  return MEMORY[0x24BEB1AA8]();
}

uint64_t sub_22CB9CA6C()
{
  return MEMORY[0x24BEB1AB0]();
}

uint64_t sub_22CB9CA78()
{
  return MEMORY[0x24BEB1AB8]();
}

uint64_t sub_22CB9CA84()
{
  return MEMORY[0x24BEB1AC0]();
}

uint64_t sub_22CB9CA90()
{
  return MEMORY[0x24BEB1AC8]();
}

uint64_t sub_22CB9CA9C()
{
  return MEMORY[0x24BEB1AD0]();
}

uint64_t sub_22CB9CAA8()
{
  return MEMORY[0x24BEB1AD8]();
}

uint64_t sub_22CB9CAB4()
{
  return MEMORY[0x24BEB1AE0]();
}

uint64_t sub_22CB9CAC0()
{
  return MEMORY[0x24BEB1AE8]();
}

uint64_t sub_22CB9CACC()
{
  return MEMORY[0x24BEB1AF0]();
}

uint64_t sub_22CB9CAD8()
{
  return MEMORY[0x24BEB1B00]();
}

uint64_t sub_22CB9CAE4()
{
  return MEMORY[0x24BEB1B10]();
}

uint64_t sub_22CB9CAF0()
{
  return MEMORY[0x24BEB1B18]();
}

uint64_t sub_22CB9CAFC()
{
  return MEMORY[0x24BEB1B20]();
}

uint64_t sub_22CB9CB08()
{
  return MEMORY[0x24BEB1B28]();
}

uint64_t sub_22CB9CB14()
{
  return MEMORY[0x24BEB1B30]();
}

uint64_t sub_22CB9CB20()
{
  return MEMORY[0x24BEB1B38]();
}

uint64_t sub_22CB9CB2C()
{
  return MEMORY[0x24BEB1B40]();
}

uint64_t sub_22CB9CB38()
{
  return MEMORY[0x24BEB1B48]();
}

uint64_t sub_22CB9CB44()
{
  return MEMORY[0x24BEB1B60]();
}

uint64_t sub_22CB9CB50()
{
  return MEMORY[0x24BEB1B68]();
}

uint64_t sub_22CB9CB5C()
{
  return MEMORY[0x24BEB1B70]();
}

uint64_t sub_22CB9CB68()
{
  return MEMORY[0x24BEB1B78]();
}

uint64_t sub_22CB9CB74()
{
  return MEMORY[0x24BEB1B80]();
}

uint64_t sub_22CB9CB80()
{
  return MEMORY[0x24BEB1B88]();
}

uint64_t sub_22CB9CB8C()
{
  return MEMORY[0x24BEB1B90]();
}

uint64_t sub_22CB9CB98()
{
  return MEMORY[0x24BEB1B98]();
}

uint64_t sub_22CB9CBA4()
{
  return MEMORY[0x24BEB1BA0]();
}

uint64_t sub_22CB9CBB0()
{
  return MEMORY[0x24BEB1BB0]();
}

uint64_t sub_22CB9CBBC()
{
  return MEMORY[0x24BEB1BB8]();
}

uint64_t sub_22CB9CBC8()
{
  return MEMORY[0x24BEB1BC0]();
}

uint64_t sub_22CB9CBD4()
{
  return MEMORY[0x24BEB1BC8]();
}

uint64_t sub_22CB9CBE0()
{
  return MEMORY[0x24BEB1BD0]();
}

uint64_t sub_22CB9CBEC()
{
  return MEMORY[0x24BEB1BD8]();
}

uint64_t sub_22CB9CBF8()
{
  return MEMORY[0x24BEB1BE0]();
}

uint64_t sub_22CB9CC04()
{
  return MEMORY[0x24BEB1BF8]();
}

uint64_t sub_22CB9CC10()
{
  return MEMORY[0x24BEB1C00]();
}

uint64_t sub_22CB9CC1C()
{
  return MEMORY[0x24BEB1C58]();
}

uint64_t sub_22CB9CC28()
{
  return MEMORY[0x24BEB1C60]();
}

uint64_t sub_22CB9CC34()
{
  return MEMORY[0x24BEB1C68]();
}

uint64_t sub_22CB9CC40()
{
  return MEMORY[0x24BEB47B8]();
}

uint64_t sub_22CB9CC4C()
{
  return MEMORY[0x24BEB47C0]();
}

uint64_t sub_22CB9CC58()
{
  return MEMORY[0x24BEB47C8]();
}

uint64_t sub_22CB9CC64()
{
  return MEMORY[0x24BEB47D0]();
}

uint64_t sub_22CB9CC70()
{
  return MEMORY[0x24BEB47E0]();
}

uint64_t sub_22CB9CC7C()
{
  return MEMORY[0x24BEB47E8]();
}

uint64_t sub_22CB9CC88()
{
  return MEMORY[0x24BEB47F0]();
}

uint64_t sub_22CB9CC94()
{
  return MEMORY[0x24BEB42D8]();
}

uint64_t sub_22CB9CCA0()
{
  return MEMORY[0x24BEB42E0]();
}

uint64_t sub_22CB9CCAC()
{
  return MEMORY[0x24BEB42E8]();
}

uint64_t sub_22CB9CCB8()
{
  return MEMORY[0x24BEB4300]();
}

uint64_t sub_22CB9CCC4()
{
  return MEMORY[0x24BEB4338]();
}

uint64_t sub_22CB9CCD0()
{
  return MEMORY[0x24BEB4348]();
}

uint64_t sub_22CB9CCDC()
{
  return MEMORY[0x24BEB4378]();
}

uint64_t sub_22CB9CCE8()
{
  return MEMORY[0x24BEB4390]();
}

uint64_t sub_22CB9CCF4()
{
  return MEMORY[0x24BEB4398]();
}

uint64_t sub_22CB9CD00()
{
  return MEMORY[0x24BEB43A8]();
}

uint64_t sub_22CB9CD0C()
{
  return MEMORY[0x24BEB43B0]();
}

uint64_t sub_22CB9CD18()
{
  return MEMORY[0x24BEB43E8]();
}

uint64_t sub_22CB9CD24()
{
  return MEMORY[0x24BEB43F0]();
}

uint64_t sub_22CB9CD30()
{
  return MEMORY[0x24BEB43F8]();
}

uint64_t sub_22CB9CD3C()
{
  return MEMORY[0x24BEB4408]();
}

uint64_t sub_22CB9CD48()
{
  return MEMORY[0x24BEB4430]();
}

uint64_t sub_22CB9CD54()
{
  return MEMORY[0x24BEB4450]();
}

uint64_t sub_22CB9CD60()
{
  return MEMORY[0x24BEB44B0]();
}

uint64_t sub_22CB9CD6C()
{
  return MEMORY[0x24BEB44C8]();
}

uint64_t sub_22CB9CD78()
{
  return MEMORY[0x24BEB44D0]();
}

uint64_t sub_22CB9CD84()
{
  return MEMORY[0x24BEB44D8]();
}

uint64_t sub_22CB9CD90()
{
  return MEMORY[0x24BEB4560]();
}

uint64_t sub_22CB9CD9C()
{
  return MEMORY[0x24BEB4568]();
}

uint64_t sub_22CB9CDA8()
{
  return MEMORY[0x24BEB4570]();
}

uint64_t sub_22CB9CDB4()
{
  return MEMORY[0x24BEB4580]();
}

uint64_t sub_22CB9CDC0()
{
  return MEMORY[0x24BEB4588]();
}

uint64_t sub_22CB9CDCC()
{
  return MEMORY[0x24BEB45C0]();
}

uint64_t sub_22CB9CDD8()
{
  return MEMORY[0x24BEB45C8]();
}

uint64_t sub_22CB9CDE4()
{
  return MEMORY[0x24BEB4608]();
}

uint64_t sub_22CB9CDF0()
{
  return MEMORY[0x24BEB4610]();
}

uint64_t sub_22CB9CDFC()
{
  return MEMORY[0x24BEB4618]();
}

uint64_t sub_22CB9CE08()
{
  return MEMORY[0x24BEB4668]();
}

uint64_t sub_22CB9CE14()
{
  return MEMORY[0x24BEB4670]();
}

uint64_t sub_22CB9CE20()
{
  return MEMORY[0x24BEB4678]();
}

uint64_t sub_22CB9CE2C()
{
  return MEMORY[0x24BEB4688]();
}

uint64_t sub_22CB9CE38()
{
  return MEMORY[0x24BEB46A0]();
}

uint64_t sub_22CB9CE44()
{
  return MEMORY[0x24BEB46A8]();
}

uint64_t sub_22CB9CE50()
{
  return MEMORY[0x24BEB46B0]();
}

uint64_t sub_22CB9CE5C()
{
  return MEMORY[0x24BEB46B8]();
}

uint64_t sub_22CB9CE68()
{
  return MEMORY[0x24BEB46C0]();
}

uint64_t sub_22CB9CE74()
{
  return MEMORY[0x24BEB46C8]();
}

uint64_t sub_22CB9CE80()
{
  return MEMORY[0x24BEB46D8]();
}

uint64_t sub_22CB9CE8C()
{
  return MEMORY[0x24BEB46E8]();
}

uint64_t sub_22CB9CE98()
{
  return MEMORY[0x24BEB46F0]();
}

uint64_t sub_22CB9CEA4()
{
  return MEMORY[0x24BEB4738]();
}

uint64_t sub_22CB9CEB0()
{
  return MEMORY[0x24BEB4740]();
}

uint64_t sub_22CB9CEBC()
{
  return MEMORY[0x24BEB4750]();
}

uint64_t sub_22CB9CEC8()
{
  return MEMORY[0x24BEB4758]();
}

uint64_t sub_22CB9CED4()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_22CB9CEE0()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_22CB9CEEC()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_22CB9CEF8()
{
  return MEMORY[0x24BEE64E0]();
}

uint64_t sub_22CB9CF04()
{
  return MEMORY[0x24BEE6520]();
}

uint64_t sub_22CB9CF10()
{
  return MEMORY[0x24BEE6530]();
}

uint64_t sub_22CB9CF1C()
{
  return MEMORY[0x24BEE6560]();
}

uint64_t sub_22CB9CF28()
{
  return MEMORY[0x24BEE6568]();
}

uint64_t sub_22CB9CF34()
{
  return MEMORY[0x24BEE6578]();
}

uint64_t sub_22CB9CF40()
{
  return MEMORY[0x24BEE65A8]();
}

uint64_t sub_22CB9CF4C()
{
  return MEMORY[0x24BEE6668]();
}

uint64_t sub_22CB9CF58()
{
  return MEMORY[0x24BEE6670]();
}

uint64_t sub_22CB9CF64()
{
  return MEMORY[0x24BEE6678]();
}

uint64_t sub_22CB9CF70()
{
  return MEMORY[0x24BEE6738]();
}

uint64_t sub_22CB9CF7C()
{
  return MEMORY[0x24BEE6748]();
}

uint64_t sub_22CB9CF88()
{
  return MEMORY[0x24BEE6750]();
}

uint64_t sub_22CB9CF94()
{
  return MEMORY[0x24BEE6760]();
}

uint64_t sub_22CB9CFA0()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t sub_22CB9CFAC()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t sub_22CB9CFB8()
{
  return MEMORY[0x24BEE54D0]();
}

uint64_t sub_22CB9CFC4()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t sub_22CB9CFD0()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t sub_22CB9CFDC()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_22CB9CFE8()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_22CB9CFF4()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_22CB9D000()
{
  return MEMORY[0x24BEE08B8]();
}

uint64_t sub_22CB9D00C()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_22CB9D018()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_22CB9D024()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_22CB9D030()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t sub_22CB9D03C()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_22CB9D048()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_22CB9D054()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_22CB9D060()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_22CB9D06C()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_22CB9D078()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_22CB9D084()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_22CB9D090()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_22CB9D09C()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_22CB9D0A8()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_22CB9D0B4()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_22CB9D0C0()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_22CB9D0CC()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_22CB9D0D8()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_22CB9D0E4()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t sub_22CB9D0F0()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_22CB9D0FC()
{
  return MEMORY[0x24BEE6830]();
}

uint64_t sub_22CB9D108()
{
  return MEMORY[0x24BEE6838]();
}

uint64_t sub_22CB9D114()
{
  return MEMORY[0x24BEE6920]();
}

uint64_t sub_22CB9D120()
{
  return MEMORY[0x24BEE6928]();
}

uint64_t sub_22CB9D12C()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t sub_22CB9D138()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t sub_22CB9D144()
{
  return MEMORY[0x24BEE6AD0]();
}

uint64_t sub_22CB9D150()
{
  return MEMORY[0x24BEE6AE8]();
}

uint64_t sub_22CB9D15C()
{
  return MEMORY[0x24BEE6B20]();
}

uint64_t sub_22CB9D168()
{
  return MEMORY[0x24BEE13A8]();
}

uint64_t sub_22CB9D174()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_22CB9D180()
{
  return MEMORY[0x24BEE1930]();
}

uint64_t sub_22CB9D18C()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t sub_22CB9D198()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_22CB9D1A4()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t sub_22CB9D1B0()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t sub_22CB9D1BC()
{
  return MEMORY[0x24BEE56C8]();
}

uint64_t sub_22CB9D1C8()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t sub_22CB9D1D4()
{
  return MEMORY[0x24BEE5770]();
}

uint64_t sub_22CB9D1E0()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t sub_22CB9D1EC()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t sub_22CB9D1F8()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_22CB9D204()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_22CB9D210()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_22CB9D21C()
{
  return MEMORY[0x24BEE2150]();
}

uint64_t sub_22CB9D228()
{
  return MEMORY[0x24BEE2168]();
}

uint64_t sub_22CB9D234()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t sub_22CB9D240()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_22CB9D24C()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_22CB9D258()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_22CB9D264()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_22CB9D270()
{
  return MEMORY[0x24BEE24D8]();
}

uint64_t sub_22CB9D27C()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_22CB9D288()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_22CB9D294()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_22CB9D2A0()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_22CB9D2AC()
{
  return MEMORY[0x24BEE2700]();
}

uint64_t sub_22CB9D2B8()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_22CB9D2C4()
{
  return MEMORY[0x24BEE2798]();
}

uint64_t sub_22CB9D2D0()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_22CB9D2DC()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_22CB9D2E8()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_22CB9D2F4()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_22CB9D300()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_22CB9D30C()
{
  return MEMORY[0x24BEE6D88]();
}

uint64_t sub_22CB9D318()
{
  return MEMORY[0x24BEE6DB8]();
}

uint64_t sub_22CB9D324()
{
  return MEMORY[0x24BEE6DC8]();
}

uint64_t sub_22CB9D330()
{
  return MEMORY[0x24BEE6E10]();
}

uint64_t sub_22CB9D33C()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_22CB9D348()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_22CB9D354()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_22CB9D360()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_22CB9D36C()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_22CB9D378()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_22CB9D384()
{
  return MEMORY[0x24BEE30A0]();
}

uint64_t sub_22CB9D390()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_22CB9D39C()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_22CB9D3A8()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_22CB9D3B4()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_22CB9D3C0()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_22CB9D3CC()
{
  return MEMORY[0x24BEE32E8]();
}

uint64_t sub_22CB9D3D8()
{
  return MEMORY[0x24BEE3300]();
}

uint64_t sub_22CB9D3E4()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_22CB9D3F0()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_22CB9D3FC()
{
  return MEMORY[0x24BEE3360]();
}

uint64_t sub_22CB9D408()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_22CB9D414()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_22CB9D420()
{
  return MEMORY[0x24BEE33E0]();
}

uint64_t sub_22CB9D42C()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_22CB9D438()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_22CB9D444()
{
  return MEMORY[0x24BEE3438]();
}

uint64_t sub_22CB9D450()
{
  return MEMORY[0x24BEE3450]();
}

uint64_t sub_22CB9D45C()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_22CB9D468()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_22CB9D474()
{
  return MEMORY[0x24BEE34B0]();
}

uint64_t sub_22CB9D480()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_22CB9D48C()
{
  return MEMORY[0x24BEE3520]();
}

uint64_t sub_22CB9D498()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_22CB9D4A4()
{
  return MEMORY[0x24BEE3598]();
}

uint64_t sub_22CB9D4B0()
{
  return MEMORY[0x24BEE3A28]();
}

uint64_t sub_22CB9D4BC()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_22CB9D4C8()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t sub_22CB9D4D4()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_22CB9D4E0()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_22CB9D4EC()
{
  return MEMORY[0x24BEE7148]();
}

uint64_t sub_22CB9D4F8()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t sub_22CB9D504()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_22CB9D510()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_22CB9D51C()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_22CB9D528()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_22CB9D534()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_22CB9D540()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_22CB9D54C()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_22CB9D558()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_22CB9D564()
{
  return MEMORY[0x24BEE4408]();
}

uint64_t sub_22CB9D570()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_22CB9D57C()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_22CB9D588()
{
  return MEMORY[0x24BDD0900]();
}

uint64_t sub_22CB9D594()
{
  return MEMORY[0x24BDD0910]();
}

uint64_t sub_22CB9D5A0()
{
  return MEMORY[0x24BDD09E8]();
}

uint64_t sub_22CB9D5AC()
{
  return MEMORY[0x24BDD09F0]();
}

uint64_t sub_22CB9D5B8()
{
  return MEMORY[0x24BDD0A30]();
}

uint64_t sub_22CB9D5C4()
{
  return MEMORY[0x24BDD0A40]();
}

uint64_t sub_22CB9D5D0()
{
  return MEMORY[0x24BDD0A48]();
}

uint64_t sub_22CB9D5DC()
{
  return MEMORY[0x24BDD0A50]();
}

uint64_t sub_22CB9D5E8()
{
  return MEMORY[0x24BDD0A88]();
}

uint64_t sub_22CB9D5F4()
{
  return MEMORY[0x24BDD0A90]();
}

uint64_t sub_22CB9D600()
{
  return MEMORY[0x24BDD0AB8]();
}

uint64_t sub_22CB9D60C()
{
  return MEMORY[0x24BDD0AF0]();
}

uint64_t sub_22CB9D618()
{
  return MEMORY[0x24BDD0B18]();
}

uint64_t sub_22CB9D624()
{
  return MEMORY[0x24BDD0B20]();
}

uint64_t sub_22CB9D630()
{
  return MEMORY[0x24BEE4828]();
}

uint64_t sub_22CB9D63C()
{
  return MEMORY[0x24BEE4880]();
}

uint64_t sub_22CB9D648()
{
  return MEMORY[0x24BEE49E8]();
}

uint64_t sub_22CB9D654()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_22CB9D660()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_22CB9D66C()
{
  return MEMORY[0x24BEE4A98]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAB0](__x);
  return result;
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getExistentialMetatypeMetadata()
{
  return MEMORY[0x24BEE4D20]();
}

uint64_t swift_getExistentialTypeMetadata()
{
  return MEMORY[0x24BEE4D28]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x24BEE4DE8]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x24BEE4E00]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSingleCase()
{
  return MEMORY[0x24BEE4E38]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_getMainExecutor()
{
  return MEMORY[0x24BEE7240]();
}

uint64_t swift_task_isCurrentExecutor()
{
  return MEMORY[0x24BEE7250]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

