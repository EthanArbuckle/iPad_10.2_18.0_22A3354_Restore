@implementation CKChatController

- (void)configureMacToolbarProperties
{
  CKMacToolBarImageProperties *v3;
  CKMacToolBarImageProperties *v4;

  v3 = objc_alloc_init(CKMacToolBarImageProperties);
  -[CKChatController setMacToolbarFaceTimeButtonProps:](self, "setMacToolbarFaceTimeButtonProps:", v3);

  v4 = objc_alloc_init(CKMacToolBarImageProperties);
  -[CKChatController setMacToolbarDetailsButtonProps:](self, "setMacToolbarDetailsButtonProps:", v4);

  -[CKChatController _configureMacFaceTimeButtonMenu](self, "_configureMacFaceTimeButtonMenu");
  -[CKChatController _configureFaceTimeStartCallToolbarItem](self, "_configureFaceTimeStartCallToolbarItem");
  -[CKChatController _configureMacFaceTimeJoinCallToolbarItem](self, "_configureMacFaceTimeJoinCallToolbarItem");
  -[CKChatController _configureMacFaceTimeJoinedCallToolbarItem](self, "_configureMacFaceTimeJoinedCallToolbarItem");
  -[CKChatController _configureDetailsToolbarItem](self, "_configureDetailsToolbarItem");
}

- (void)_configureMacFaceTimeButtonMenu
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  id *v29;
  id *v30;
  void *v31;
  _QWORD v33[4];
  id v34;
  _QWORD v35[4];
  id v36;
  _QWORD v37[4];
  id v38;
  _QWORD v39[4];
  id v40;
  id location;
  _QWORD v42[2];
  _QWORD v43[4];
  _QWORD v44[3];

  v44[1] = *MEMORY[0x1E0C80C00];
  location = 0;
  objc_initWeak(&location, self);
  v2 = (void *)MEMORY[0x1E0CEA2A8];
  CKFrameworkBundle();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("FACETIME_AUDIO"), &stru_1E276D870, CFSTR("ChatKit"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = MEMORY[0x1E0C809B0];
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3221225472;
  v39[2] = __63__CKChatController_MacToolbar___configureMacFaceTimeButtonMenu__block_invoke;
  v39[3] = &unk_1E274A4C0;
  objc_copyWeak(&v40, &location);
  objc_msgSend(v2, "actionWithTitle:image:identifier:handler:", v4, 0, 0, v39);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (void *)MEMORY[0x1E0CEA2A8];
  CKFrameworkBundle();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("FACETIME_VIDEO"), &stru_1E276D870, CFSTR("ChatKit"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v37[0] = v5;
  v37[1] = 3221225472;
  v37[2] = __63__CKChatController_MacToolbar___configureMacFaceTimeButtonMenu__block_invoke_2;
  v37[3] = &unk_1E274A4C0;
  objc_copyWeak(&v38, &location);
  objc_msgSend(v6, "actionWithTitle:image:identifier:handler:", v8, 0, 0, v37);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = (void *)MEMORY[0x1E0CEA2A8];
  CKFrameworkBundle();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("INVITE_TO_SHARE_MY_SCREEN"), &stru_1E276D870, CFSTR("ChatKit"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v35[0] = v5;
  v35[1] = 3221225472;
  v35[2] = __63__CKChatController_MacToolbar___configureMacFaceTimeButtonMenu__block_invoke_3;
  v35[3] = &unk_1E274A4C0;
  objc_copyWeak(&v36, &location);
  objc_msgSend(v10, "actionWithTitle:image:identifier:handler:", v12, 0, 0, v35);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = v5;
  v15 = (void *)MEMORY[0x1E0CEA2A8];
  CKFrameworkBundle();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("ASK_TO_SHARE_THEIR_SCREEN"), &stru_1E276D870, CFSTR("ChatKit"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v33[0] = v14;
  v33[1] = 3221225472;
  v33[2] = __63__CKChatController_MacToolbar___configureMacFaceTimeButtonMenu__block_invoke_4;
  v33[3] = &unk_1E274A4C0;
  objc_copyWeak(&v34, &location);
  objc_msgSend(v15, "actionWithTitle:image:identifier:handler:", v17, 0, 0, v33);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (!IMDeviceIsGreenTea())
  {
    -[CKChatController detailsContactsManager](self, "detailsContactsManager", &v38, &v40);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKCoreChatController conversation](self, "conversation");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "recipient");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v22, "showScreenSharingButtonForEntity:", v24);

    if (v25)
    {
      v43[0] = v31;
      v43[1] = v9;
      v26 = v43;
      v27 = 4;
      v43[2] = v13;
      v43[3] = v18;
    }
    else
    {
      v42[0] = v31;
      v42[1] = v9;
      v26 = v42;
      v27 = 2;
    }
    goto LABEL_8;
  }
  -[CKCoreChatController conversation](self, "conversation", &v38, &v40);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "isGroupConversation");

  if ((v20 & 1) == 0)
  {
    v44[0] = v9;
    v26 = v44;
    v27 = 1;
LABEL_8:
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, v27);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v21 = (void *)MEMORY[0x1E0C9AA60];
LABEL_9:
  objc_msgSend(MEMORY[0x1E0CEA740], "menuWithTitle:image:identifier:options:children:", &stru_1E276D870, 0, 0, 1, v21);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController setMacFaceTimeButtonMenu:](self, "setMacFaceTimeButtonMenu:", v28);

  objc_destroyWeak(&v34);
  objc_destroyWeak(&v36);

  objc_destroyWeak(v29);
  objc_destroyWeak(v30);
  objc_destroyWeak(&location);
}

void __63__CKChatController_MacToolbar___configureMacFaceTimeButtonMenu__block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "conversation");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "chat");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "initiateTUConversationWithVideoEnabled:", 0);

}

void __63__CKChatController_MacToolbar___configureMacFaceTimeButtonMenu__block_invoke_2(uint64_t a1)
{
  int IsGreenTea;
  void *v3;
  void *v4;
  void *v5;
  id WeakRetained;

  IsGreenTea = IMDeviceIsGreenTea();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "chat");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (IsGreenTea)
    objc_msgSend(v4, "initiateTUDialRequestWithVideoEnabled:", 1);
  else
    objc_msgSend(v4, "initiateTUConversationWithVideoEnabled:", 1);

}

void __63__CKChatController_MacToolbar___configureMacFaceTimeButtonMenu__block_invoke_3(uint64_t a1)
{
  id *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id WeakRetained;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "detailsContactsManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "conversation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "recipient");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "shareMyScreenWithEntity:", v5);

}

void __63__CKChatController_MacToolbar___configureMacFaceTimeButtonMenu__block_invoke_4(uint64_t a1)
{
  id *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id WeakRetained;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "detailsContactsManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "conversation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "recipient");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "inviteEntityToShareTheirScreen:", v5);

}

- (void)_configureDetailsToolbarItem
{
  void *v3;
  int v4;

  -[CKCoreChatController chat](self, "chat");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isStewieSharingChat");

  if (v4)
  {
    -[CKChatController setDetailsToolbarItem:](self, "setDetailsToolbarItem:", 0);
  }
  else
  {
    -[CKChatController detailsToolbarItem](self, "detailsToolbarItem");

  }
}

- (BOOL)shouldUseMacRecipientsView
{
  void *v3;
  void *v4;
  int v5;

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "useMacToolbar"))
  {
    -[CKCoreChatController conversation](self, "conversation");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isBusinessConversation") ^ 1;

  }
  else
  {
    LOBYTE(v5) = 0;
  }

  return v5;
}

- (double)preferredMacToolbarHeight
{
  void *v3;
  double v4;
  double v5;

  if (!-[CKChatController shouldUseMacRecipientsView](self, "shouldUseMacRecipientsView"))
    return 0.0;
  -[CKChatController macRecipientsController](self, "macRecipientsController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "preferredMacToolbarHeight");
  v5 = v4;

  return v5;
}

- (id)innermostToolbarItemIdentifier
{
  const __CFString *v3;
  int64_t v4;
  _BOOL4 v5;
  const __CFString *v6;
  const __CFString *v7;

  v3 = CFSTR("CKMacToolbarChatDetailsItemIdentifier");
  if (-[CKChatController _macShouldShowFaceTimeButtonInToolbar](self, "_macShouldShowFaceTimeButtonInToolbar"))
  {
    v4 = -[CKChatController macJoinStyle](self, "macJoinStyle");
    v5 = -[CKChatController macJoinStyle](self, "macJoinStyle") == 1
      || -[CKChatController macJoinStyle](self, "macJoinStyle") == 3;
    v6 = CFSTR("CKMacToolbarFacetimeJoinedCallItemIdentifier");
    if (-[CKChatController macJoinStyle](self, "macJoinStyle") != 4
      && -[CKChatController macJoinStyle](self, "macJoinStyle") != 6)
    {
      v6 = CFSTR("CKMacToolbarChatDetailsItemIdentifier");
    }
    v7 = CFSTR("CKMacToolbarFacetimeJoinCallItemIdentifier");
    if (!v5)
      v7 = v6;
    if (v4)
      return (id)v7;
    else
      return CFSTR("CKMacToolbarFacetimeStartCallItemIdentifier");
  }
  return (id)v3;
}

- (void)macRecipientsControllerDidUpdateToFieldSizing:(id)a3
{
  id v4;
  id v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;

  v4 = a3;
  -[CKChatController macRecipientsController](self, "macRecipientsController");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  if (v5 == v4)
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "useMacToolbar");

    if (v7)
    {
      -[CKChatController view](self, "view");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "window");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "frame");
      v11 = v10;
      v13 = v12;
      v15 = v14;
      v17 = v16;

      -[CKChatController macToolbarController](self, "macToolbarController");
      v18 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "updateWithFrame:", v11, v13, v15, v17);

    }
  }
}

- (void)refreshMacToolbar
{
  void *v3;
  id v4;

  -[CKChatController macToolbarController](self, "macToolbarController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "reloadToolbarItems");

  -[CKChatController macToolbarController](self, "macToolbarController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateVirtualViewForProvider:", self);

}

- (id)_newImageConfiguredForNSToolbarWithName:(id)a3 tintColor:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _QWORD v19[4];
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;

  v6 = a4;
  v7 = a3;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "macToolbarSymbolConfiguration");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = objc_alloc_init(MEMORY[0x1E0CEA618]);
  -[CKChatController traitCollection](self, "traitCollection");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "displayScale");
  objc_msgSend(v10, "setScale:");

  objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:withConfiguration:", v7, v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = objc_alloc(MEMORY[0x1E0CEA610]);
  objc_msgSend(v12, "size");
  v14 = (void *)objc_msgSend(v13, "initWithSize:format:", v10);
  v15 = MEMORY[0x1E0C809B0];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __82__CKChatController_MacToolbar___newImageConfiguredForNSToolbarWithName_tintColor___block_invoke;
  v22[3] = &unk_1E274A3D0;
  v23 = v12;
  objc_msgSend(v14, "imageWithActions:", v22);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "imageWithRenderingMode:", 2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v19[0] = v15;
    v19[1] = 3221225472;
    v19[2] = __82__CKChatController_MacToolbar___newImageConfiguredForNSToolbarWithName_tintColor___block_invoke_2;
    v19[3] = &unk_1E274A4E8;
    v20 = v17;
    v21 = v6;
    objc_msgSend(v14, "imageWithActions:", v19);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v17;
}

uint64_t __82__CKChatController_MacToolbar___newImageConfiguredForNSToolbarWithName_tintColor___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "drawAtPoint:", *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
}

void __82__CKChatController_MacToolbar___newImageConfiguredForNSToolbarWithName_tintColor___block_invoke_2(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "imageWithTintColor:", *(_QWORD *)(a1 + 40));
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "drawAtPoint:", *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));

}

- (id)_updatedDetailsToolbarItemImage
{
  void *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;

  -[CKChatController macToolbarDetailsButtonProps](self, "macToolbarDetailsButtonProps");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "image");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isBusinessConversation");

  if (v6)
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "theme");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKCoreChatController conversation](self, "conversation");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "chat");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "secondaryBrandColorForBusinessChat:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v4)
      goto LABEL_9;
  }
  else
  {
    v11 = 0;
    if (!v4)
      goto LABEL_9;
  }
  objc_msgSend(v3, "tintColor");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v12, "isEqual:", v11) & 1) != 0)
  {
    -[CKChatController traitCollection](self, "traitCollection");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "displayScale");
    v15 = v14;
    objc_msgSend(v4, "scale");
    v17 = v16;

    if (v15 == v17)
      goto LABEL_10;
  }
  else
  {

  }
LABEL_9:
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "macToolbarDetailsImageName");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[CKChatController _newImageConfiguredForNSToolbarWithName:tintColor:](self, "_newImageConfiguredForNSToolbarWithName:tintColor:", v19, v11);

  -[CKChatController macToolbarDetailsButtonProps](self, "macToolbarDetailsButtonProps");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setTintColor:", v11);

  -[CKChatController macToolbarDetailsButtonProps](self, "macToolbarDetailsButtonProps");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setImage:", v20);

  v4 = v20;
LABEL_10:

  return v4;
}

- (id)_updatedFaceTimeToolbarItemImage
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  id v17;

  -[CKChatController macToolbarFaceTimeButtonProps](self, "macToolbarFaceTimeButtonProps");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "image");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  switch(-[CKChatController macJoinStyle](self, "macJoinStyle"))
  {
    case 1:
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "macToolbarJoinableFaceTimeAudioImageName");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_5;
    case 3:
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "macToolbarJoinableFaceTimeVideoImageName");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_5;
    case 4:
      objc_msgSend(MEMORY[0x1E0CEA478], "ckColorNamed:", CFSTR("CKSystemGreenColor"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "macToolbarJoinedFaceTimeAudioImageName");
      v9 = objc_claimAutoreleasedReturnValue();
      goto LABEL_8;
    case 6:
      objc_msgSend(MEMORY[0x1E0CEA478], "ckColorNamed:", CFSTR("CKSystemGreenColor"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "macToolbarJoinedFaceTimeVideoImageName");
      v9 = objc_claimAutoreleasedReturnValue();
LABEL_8:
      v7 = (void *)v9;
      break;
    default:
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "macToolbarFaceTimeImageName");
      v6 = objc_claimAutoreleasedReturnValue();
LABEL_5:
      v7 = (void *)v6;
      v8 = 0;
      break;
  }

  if (v4)
  {
    objc_msgSend(v3, "tintColor");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v10, "isEqual:", v8))
    {
      objc_msgSend(v3, "imageName");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v11, "isEqualToString:", v7) & 1) != 0)
      {
        -[CKChatController traitCollection](self, "traitCollection");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "displayScale");
        v14 = v13;
        objc_msgSend(v4, "scale");
        v16 = v15;

        if (v14 == v16)
          goto LABEL_17;
        goto LABEL_16;
      }

    }
  }
LABEL_16:
  v17 = -[CKChatController _newImageConfiguredForNSToolbarWithName:tintColor:](self, "_newImageConfiguredForNSToolbarWithName:tintColor:", v7, v8);

  objc_msgSend(v3, "setTintColor:", v8);
  objc_msgSend(v3, "setImage:", v17);
  v4 = v17;
LABEL_17:

  return v4;
}

- (void)configureWithToolbarController:(id)a3
{
  void *v3;
  void *v4;
  id v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  CKBusinessMacToolbarViewController *v12;
  CKMacRecipientsController *v13;
  void *v14;
  CKMacRecipientsController *v15;
  void *v16;
  void *v17;
  char v18;
  _BOOL8 v19;
  void *v20;
  void *v21;
  objc_super v22;

  v6 = a3;
  -[CKCoreChatController conversation](self, "conversation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isBusinessConversation");

  if (v8)
  {
    -[CKCoreChatController conversation](self, "conversation");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handles");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "firstObject");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = -[CKBusinessMacToolbarViewController initWithConversation:showingInStandAloneWindow:]([CKBusinessMacToolbarViewController alloc], "initWithConversation:showingInStandAloneWindow:", v11, -[CKCoreChatController showingInStandAloneWindow](self, "showingInStandAloneWindow"));
    -[CKChatController setBusinessMacToolbarController:](self, "setBusinessMacToolbarController:", v12);

  }
  else
  {
    if (!-[CKChatController shouldUseMacRecipientsView](self, "shouldUseMacRecipientsView"))
      goto LABEL_6;
    v13 = [CKMacRecipientsController alloc];
    -[CKCoreChatController conversation](self, "conversation");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = -[CKMacRecipientsController initWithConversation:](v13, "initWithConversation:", v14);
    -[CKChatController setMacRecipientsController:](self, "setMacRecipientsController:", v15);

    -[CKChatController macRecipientsController](self, "macRecipientsController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setDelegate:", self);
  }

LABEL_6:
  v22.receiver = self;
  v22.super_class = (Class)CKChatController;
  -[CKCoreChatController configureWithToolbarController:](&v22, sel_configureWithToolbarController_, v6);
  -[CKCoreChatController conversation](self, "conversation");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "chat");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "allowedByScreenTime");
  if ((v18 & 1) != 0)
  {
    v19 = 1;
  }
  else
  {
    -[CKCoreChatController conversation](self, "conversation");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "chat");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v4 == 0;
  }
  -[CKChatController macToolbarController](self, "macToolbarController");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setShouldDrawSecondaryBlur:", v19);

  if ((v18 & 1) == 0)
  {

  }
  -[CKChatController macToolbarController](self, "macToolbarController");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "updateVirtualViewForProvider:", self);

}

- (void)providerWillBeRemovedFromToolbarController:(id)a3
{
  void *v4;
  id v5;

  -[CKChatController recipientsVirtualToolbarItem](self, "recipientsVirtualToolbarItem", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    -[CKChatController recipientsVirtualToolbarItem](self, "recipientsVirtualToolbarItem");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "removeFromSuperview");

  }
}

- (BOOL)itemProviderDisablesTouches
{
  return 0;
}

- (BOOL)_macShouldShowFaceTimeButtonInToolbar
{
  void *v3;
  void *v4;
  int v5;
  void *v6;
  int v7;
  BOOL v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;

  -[CKCoreChatController conversation](self, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "chat");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "supportsCapabilities:", 1024);

  if (!v5)
    return 0;
  -[CKCoreChatController conversation](self, "conversation");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isGroupConversation");

  if (v7)
  {
    if ((IMDeviceIsGreenTea() & 1) != 0)
      return 0;
  }
  else
  {
    -[CKCoreChatController conversation](self, "conversation");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "chat");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "isSMS");

    if ((v11 & 1) != 0)
      return 0;
  }
  -[CKCoreChatController conversation](self, "conversation");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v12, "isBusinessConversation") & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    -[CKCoreChatController conversation](self, "conversation");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = +[CKFaceTimeUtilities isFaceTimeVideoAvailable:](CKFaceTimeUtilities, "isFaceTimeVideoAvailable:", v13);

  }
  return v8;
}

- (id)toolbarItemForIdentifier:(id)a3
{
  return 0;
}

- (BOOL)reparentToolbarItem:(id)a3
{
  return 0;
}

- (UIEdgeInsets)virtualToolbarContentInsets
{
  double v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  char v8;
  void *v9;
  int v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  UIEdgeInsets result;

  v4 = *MEMORY[0x1E0CEB4B0];
  v3 = *(double *)(MEMORY[0x1E0CEB4B0] + 8);
  v5 = *(double *)(MEMORY[0x1E0CEB4B0] + 16);
  v6 = *(double *)(MEMORY[0x1E0CEB4B0] + 24);
  if (-[CKCoreChatController showingInStandAloneWindow](self, "showingInStandAloneWindow"))
  {
    -[CKCoreChatController conversation](self, "conversation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isBusinessConversation");

    if ((v8 & 1) == 0)
    {
      -[CKChatController view](self, "view");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "_shouldReverseLayoutDirection");

      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "macToolbarStoplightButtonsLeadingPadding");
      v3 = v12;

      v5 = 0.0;
      if (v10)
        v6 = v3;
      else
        v6 = 0.0;
      if (v10)
        v3 = 0.0;
      v4 = 0.0;
    }
  }
  v13 = v4;
  v14 = v3;
  v15 = v5;
  v16 = v6;
  result.right = v16;
  result.bottom = v15;
  result.left = v14;
  result.top = v13;
  return result;
}

- (id)virtualView
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if ((objc_msgSend(MEMORY[0x1E0D35808], "isContactLimitsFeatureEnabled") & 1) != 0)
  {
    if (objc_msgSend(MEMORY[0x1E0D35808], "isContactLimitsFeatureEnabled"))
    {
      -[CKCoreChatController conversation](self, "conversation");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "chat");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (v4)
      {
        -[CKCoreChatController conversation](self, "conversation");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "chat");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v6, "allowedByScreenTime") ^ 1;

      }
      else
      {
        v7 = 0;
      }

    }
    else
    {
      v7 = 0;
    }
    if (!-[CKChatController effectPickerIsPresented](self, "effectPickerIsPresented") && !v7)
    {
      -[CKCoreChatController conversation](self, "conversation");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v11, "isBusinessConversation") & 1) != 0)
      {
        -[CKChatController businessMacToolbarController](self, "businessMacToolbarController");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "view");
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          -[CKChatController businessMacToolbarController](self, "businessMacToolbarController");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "view");
          v9 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_20:
          -[CKChatController macToolbarController](self, "macToolbarController");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "setShouldDrawSecondaryBlur:", 1);
          goto LABEL_7;
        }
      }
      else
      {

      }
      if (!-[CKChatController shouldUseMacRecipientsView](self, "shouldUseMacRecipientsView"))
      {
        v9 = 0;
        return v9;
      }
      -[CKChatController recipientsVirtualToolbarItem](self, "recipientsVirtualToolbarItem");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_20;
    }
  }
  else
  {
    -[CKChatController effectPickerIsPresented](self, "effectPickerIsPresented");
  }
  -[CKChatController macToolbarController](self, "macToolbarController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setShouldDrawSecondaryBlur:", 0);
  v9 = 0;
LABEL_7:

  return v9;
}

- (BOOL)prefersBottomDividerHidden
{
  double v3;
  double v4;
  void *v5;
  double v6;
  double v7;
  BOOL result;

  -[CKChatController preferredMacToolbarHeight](self, "preferredMacToolbarHeight");
  v4 = v3;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "macAppKitToolbarHeight");
  v7 = v6;

  result = -[CKChatController effectPickerIsPresented](self, "effectPickerIsPresented");
  if (v4 > v7)
    return 1;
  return result;
}

- (id)transcriptCollectionViewController:(id)a3 contextMenuConfigurationForItemAtIndexPath:(id)a4 point:(CGPoint)a5 interaction:(id)a6
{
  CGFloat y;
  CGFloat x;
  id v11;
  id v12;
  id v13;
  void *v14;
  int v15;
  NSObject *v16;
  void *v17;
  NSObject *v19;
  id v20;
  void *v21;
  int v22;
  void *v23;
  BOOL v24;
  void *v25;
  NSObject *v26;
  id v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  void *v41;
  double v42;
  CGFloat v43;
  double v44;
  CGFloat v45;
  double v46;
  CGFloat v47;
  double v48;
  CGFloat v49;
  void *v50;
  void *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  void *v60;
  double v61;
  CGFloat v62;
  double v63;
  CGFloat v64;
  double v65;
  CGFloat v66;
  double v67;
  CGFloat v68;
  id v69;
  id *v70;
  id v71;
  NSObject *v72;
  NSObject *v73;
  void *v74;
  uint64_t v75;
  id v76;
  id v77;
  void *v78;
  void *v79;
  NSObject *v80;
  void *v81;
  id *v82;
  id *location;
  id v84;
  id v85;
  _QWORD v86[4];
  id v87;
  id v88;
  id v89;
  CKChatController *v90;
  id v91;
  id v92;
  _QWORD v93[4];
  id v94;
  id v95;
  id v96;
  id v97;
  uint8_t v98[8];
  _QWORD v99[8];
  _BYTE buf[24];
  id v101;
  __int16 v102;
  id v103;
  __int16 v104;
  id v105;
  uint64_t v106;
  CGPoint v107;
  CGPoint v108;
  CGRect v109;
  CGRect v110;

  y = a5.y;
  x = a5.x;
  v106 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  v12 = a4;
  v13 = a6;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "disableTranscriptInteractions");

  if (v15)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v16, OS_LOG_TYPE_INFO, "clicky orb disabled: transcript interactions disabled", buf, 2u);
      }
LABEL_11:

      goto LABEL_12;
    }
    goto LABEL_12;
  }
  if (!-[CKChatController _clickyOrbEnabled](self, "_clickyOrbEnabled")
    || -[CKChatController isEditing](self, "isEditing"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v16, OS_LOG_TYPE_INFO, "clicky orb disabled: clicky orb is not enabled or currently editing", buf, 2u);
      }
      goto LABEL_11;
    }
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  if (-[CKChatController isShowingOscarChat](self, "isShowingOscarChat"))
  {
    if (!IMOSLoggingEnabled())
      goto LABEL_12;
    OSLogHandleForIMFoundationCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v16, OS_LOG_TYPE_INFO, "clicky orb disabled: showing oscar chat", buf, 2u);
    }
    goto LABEL_11;
  }
  if (!CKIsRunningInMacCatalyst()
    || !-[CKChatController contextMenuInteractionIsOutsideOfVisibleBalloonCells:](self, "contextMenuInteractionIsOutsideOfVisibleBalloonCells:", v13))
  {
    -[CKChatController _parentChatItemForIndexPath:](self, "_parentChatItemForIndexPath:", v12);
    v20 = (id)objc_claimAutoreleasedReturnValue();
    -[CKChatController _parentIndexPathForCellAtIndexPath:](self, "_parentIndexPathForCellAtIndexPath:", v12);
    v84 = (id)objc_claimAutoreleasedReturnValue();
    -[CKChatController _balloonViewForCellAtIndexPath:](self, "_balloonViewForCellAtIndexPath:", v84);
    v85 = (id)objc_claimAutoreleasedReturnValue();
    if (!CKIsRunningInMacCatalyst() && objc_msgSend(v13, "menuAppearance") == 1)
      objc_msgSend(v85, "setIsBeingShownAsPreview:", 1);
    if (!CKIsRunningInMacCatalyst())
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if (v85)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            if (IMOSLoggingEnabled())
            {
              OSLogHandleForIMFoundationCategory();
              v28 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18DFCD000, v28, OS_LOG_TYPE_INFO, "clicky orb disabled: No context menu for the moment share placeholder item", buf, 2u);
              }

            }
LABEL_39:
            v17 = 0;
            v27 = v20;
            goto LABEL_76;
          }
        }
      }
    }
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "isStickerRepositioningEnabled");

    if (v22)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      LOBYTE(v101) = 0;
      objc_msgSend(v20, "visibleAssociatedMessageChatItems");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v23, "count") == 0;

      if (!v24)
      {
        objc_msgSend(v20, "visibleAssociatedMessageChatItems");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v99[0] = MEMORY[0x1E0C809B0];
        v99[1] = 3221225472;
        v99[2] = __138__CKChatController_ClickyOrbConformance__transcriptCollectionViewController_contextMenuConfigurationForItemAtIndexPath_point_interaction___block_invoke;
        v99[3] = &unk_1E274AFC0;
        *(CGFloat *)&v99[6] = x;
        *(CGFloat *)&v99[7] = y;
        v99[4] = self;
        v99[5] = buf;
        objc_msgSend(v25, "enumerateObjectsUsingBlock:", v99);

      }
      if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v26 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v98 = 0;
            _os_log_impl(&dword_18DFCD000, v26, OS_LOG_TYPE_INFO, "clicky orb disabled: touch intersects a repositionable sticker", v98, 2u);
          }

        }
        _Block_object_dispose(buf, 8);
        goto LABEL_39;
      }
      _Block_object_dispose(buf, 8);
    }
    v27 = v20;
    if (!CKIsRunningInMacCatalyst())
    {
      objc_opt_class();
      v27 = v20;
      if ((objc_opt_isKindOfClass() & (v85 != 0)) == 1)
      {
        objc_opt_class();
        v27 = v20;
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v85, "stackView");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "currentAssetReference");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "asset");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "chatItem");
          v27 = (id)objc_claimAutoreleasedReturnValue();

        }
      }
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[CKChatController collectionView](self, "collectionView");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v85, "frame");
      v34 = v33;
      v36 = v35;
      v38 = v37;
      v40 = v39;
      objc_msgSend(v85, "superview");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "convertRect:fromView:", v41, v34, v36, v38, v40);
      v43 = v42;
      v45 = v44;
      v47 = v46;
      v49 = v48;

      v109.origin.x = v43;
      v109.origin.y = v45;
      v109.size.width = v47;
      v109.size.height = v49;
      v107.x = x;
      v107.y = y;
      if (!CGRectContainsPoint(v109, v107) && objc_msgSend(v12, "row") >= 1)
      {
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", objc_msgSend(v12, "row") - 1, objc_msgSend(v12, "section"));
        location = (id *)objc_claimAutoreleasedReturnValue();
        -[CKChatController _parentChatItemForIndexPath:](self, "_parentChatItemForIndexPath:", location);
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController _parentIndexPathForCellAtIndexPath:](self, "_parentIndexPathForCellAtIndexPath:", location);
        v82 = (id *)objc_claimAutoreleasedReturnValue();
        -[CKChatController _balloonViewForCellAtIndexPath:](self, "_balloonViewForCellAtIndexPath:", v82);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          -[CKChatController collectionView](self, "collectionView");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v50, "frame");
          v53 = v52;
          v55 = v54;
          v57 = v56;
          v59 = v58;
          objc_msgSend(v50, "superview");
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v51, "convertRect:fromView:", v60, v53, v55, v57, v59);
          v62 = v61;
          v64 = v63;
          v66 = v65;
          v68 = v67;

          v110.origin.x = v62;
          v110.origin.y = v64;
          v110.size.width = v66;
          v110.size.height = v68;
          v108.x = x;
          v108.y = y;
          if (CGRectContainsPoint(v110, v108))
          {
            v69 = v81;

            v70 = v82;
            v71 = v50;

            v84 = v70;
            v85 = v71;
            v27 = v69;
          }
        }

      }
    }
    -[CKChatController setClickyOrbChatItem:](self, "setClickyOrbChatItem:", v27);
    if (v27)
    {
      if (!objc_msgSend(v27, "isReplyContextPreview"))
      {
        -[CKChatController hideAssociatedCellsForChatItem:](self, "hideAssociatedCellsForChatItem:", v20);
        *(_QWORD *)v98 = 0;
        objc_initWeak((id *)v98, self);
        v74 = (void *)MEMORY[0x1E0CEA4B0];
        v75 = MEMORY[0x1E0C809B0];
        v93[0] = MEMORY[0x1E0C809B0];
        v93[1] = 3221225472;
        v93[2] = __138__CKChatController_ClickyOrbConformance__transcriptCollectionViewController_contextMenuConfigurationForItemAtIndexPath_point_interaction___block_invoke_69;
        v93[3] = &unk_1E274AFE8;
        v76 = v27;
        v94 = v76;
        objc_copyWeak(&v97, (id *)v98);
        v85 = v85;
        v95 = v85;
        v84 = v84;
        v96 = v84;
        v86[0] = v75;
        v86[1] = 3221225472;
        v86[2] = __138__CKChatController_ClickyOrbConformance__transcriptCollectionViewController_contextMenuConfigurationForItemAtIndexPath_point_interaction___block_invoke_2;
        v86[3] = &unk_1E274B038;
        objc_copyWeak(&v92, (id *)v98);
        v27 = v76;
        v87 = v27;
        v88 = v20;
        v89 = v13;
        v90 = self;
        v77 = v12;
        v91 = v77;
        objc_msgSend(v74, "configurationWithIdentifier:previewProvider:actionProvider:", v77, v93, v86);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController entryView](self, "entryView");
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v78, "contentView");
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController setEntryViewWasActiveOnContextMenuPresentation:](self, "setEntryViewWasActiveOnContextMenuPresentation:", objc_msgSend(v79, "isActive"));

        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v80 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138413314;
            *(_QWORD *)&buf[4] = v17;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v27;
            *(_WORD *)&buf[22] = 2112;
            v101 = v77;
            v102 = 2112;
            v103 = v84;
            v104 = 2112;
            v105 = v85;
            _os_log_impl(&dword_18DFCD000, v80, OS_LOG_TYPE_INFO, "clicky orb: configuration:%@ made from chatItem:%@, at indexPath:%@, with parentIndexPath:%@, parentBalloonView:%@", buf, 0x34u);
          }

        }
        objc_destroyWeak(&v92);

        objc_destroyWeak(&v97);
        objc_destroyWeak((id *)v98);
        goto LABEL_76;
      }
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v72 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18DFCD000, v72, OS_LOG_TYPE_INFO, "clicky orb disabled: chatItem isReplyContextPreview=YES", buf, 2u);
        }

      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v73 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v12;
          _os_log_impl(&dword_18DFCD000, v73, OS_LOG_TYPE_INFO, "clicky orb disabled: nil chatItem from indexPath: %@", buf, 0xCu);
        }

      }
      v27 = 0;
    }
    v17 = 0;
LABEL_76:

    goto LABEL_13;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[CKChatController(ClickyOrbConformance) transcriptCollectionViewController:contextMenuConfig"
                           "urationForItemAtIndexPath:point:interaction:]";
      _os_log_impl(&dword_18DFCD000, v19, OS_LOG_TYPE_INFO, "%s - context menu interaction is outside of visible balloonCell", buf, 0xCu);
    }

  }
  -[CKChatController contextMenuInteractionOutsideOfVisibleBalloonCells](self, "contextMenuInteractionOutsideOfVisibleBalloonCells");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_13:

  return v17;
}

void __138__CKChatController_ClickyOrbConformance__transcriptCollectionViewController_contextMenuConfigurationForItemAtIndexPath_point_interaction___block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  char isKindOfClass;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  id v30;
  CGRect v31;

  v30 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v7 = v30;
  if ((isKindOfClass & 1) != 0)
  {
    v8 = v30;
    if (objc_msgSend(v8, "isFromMe"))
    {
      objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "cellForAssociatedChatItem:", v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v10, "associatedItemView");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "collectionView");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "frame");
        v14 = v13;
        v16 = v15;
        v18 = v17;
        v20 = v19;
        objc_msgSend(v11, "superview");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "convertRect:fromView:", v21, v14, v16, v18, v20);
        v23 = v22;
        v25 = v24;
        v27 = v26;
        v29 = v28;

        v31.origin.x = v23;
        v31.origin.y = v25;
        v31.size.width = v27;
        v31.size.height = v29;
        if (CGRectContainsPoint(v31, *(CGPoint *)(a1 + 48)))
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
          *a4 = 1;
        }

      }
    }

    v7 = v30;
  }

}

id __138__CKChatController_ClickyOrbConformance__transcriptCollectionViewController_contextMenuConfigurationForItemAtIndexPath_point_interaction___block_invoke_69(uint64_t a1)
{
  void *WeakRetained;
  void *v3;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_6;
  objc_msgSend(*(id *)(a1 + 32), "mediaObject");
  WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_msgSend(WeakRetained, "needsAnimation") & 1) == 0)
  {

LABEL_6:
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(WeakRetained, "_previewingViewControllerForHitView:indexPath:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
  v3 = 0;
LABEL_7:

  return v3;
}

id __138__CKChatController_ClickyOrbConformance__transcriptCollectionViewController_contextMenuConfigurationForItemAtIndexPath_point_interaction___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v21;
  _QWORD v22[4];
  id v23;
  id v24;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  objc_msgSend(WeakRetained, "_menuForChatItem:withParentChatItem:menuAppearance:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 48), "menuAppearance"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isEmojiTapbacksEnabled");

  if ((v7 & 1) == 0 && objc_msgSend(*(id *)(a1 + 48), "menuAppearance") == 2)
  {
    objc_msgSend(v5, "children");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v8, "mutableCopy");

    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 56), "_tapbacksPaletteMenuForChatItem:", *(_QWORD *)(a1 + 32));
    v11 = objc_claimAutoreleasedReturnValue();
    if (v11)
      objc_msgSend(v10, "addObject:", v11);
    objc_msgSend(MEMORY[0x1E0CEA638], "_systemImageNamed:", CFSTR("plus.bubble.tapback"), v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)MEMORY[0x1E0CEA2A8];
    CKFrameworkBundle();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("TRANSCRIPT_TAPBACK_MENU_ELLIPSIS"), &stru_1E276D870, CFSTR("ChatKit"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v22[1] = 3221225472;
    v22[2] = __138__CKChatController_ClickyOrbConformance__transcriptCollectionViewController_contextMenuConfigurationForItemAtIndexPath_point_interaction___block_invoke_3;
    v22[3] = &unk_1E274B010;
    v22[0] = MEMORY[0x1E0C809B0];
    objc_copyWeak(&v24, (id *)(a1 + 72));
    v23 = *(id *)(a1 + 64);
    objc_msgSend(v13, "actionWithTitle:image:identifier:handler:", v15, v12, 0, v22);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "addObject:", v16);
    if (objc_msgSend(v9, "count"))
    {
      objc_msgSend(MEMORY[0x1E0CB36B8], "indexSetWithIndexesInRange:", 0, objc_msgSend(v10, "count"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "insertObjects:atIndexes:", v10, v17);

    }
    else
    {
      objc_msgSend(v9, "addObjectsFromArray:", v10);
    }
    objc_msgSend(v5, "menuByReplacingChildren:", v9);
    v18 = objc_claimAutoreleasedReturnValue();

    objc_destroyWeak(&v24);
    v5 = (void *)v18;
  }
  v19 = v5;

  return v19;
}

void __138__CKChatController_ClickyOrbConformance__transcriptCollectionViewController_contextMenuConfigurationForItemAtIndexPath_point_interaction___block_invoke_3(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "showFullScreenAcknowledgmentPickerIfNeededForBalloonAtIndexPath:", *(_QWORD *)(a1 + 32));

}

- (void)transcriptCollectionViewController:(id)a3 willPerformPreviewActionForMenuWithConfiguration:(id)a4 animator:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD v29[5];
  id v30;
  id v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v10, "previewViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
    goto LABEL_3;
  objc_msgSend(v9, "identifier");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _parentIndexPathForCellAtIndexPath:](self, "_parentIndexPathForCellAtIndexPath:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _balloonViewForCellAtIndexPath:](self, "_balloonViewForCellAtIndexPath:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _previewingViewControllerForHitView:indexPath:](self, "_previewingViewControllerForHitView:indexPath:", v14, v13);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
LABEL_3:
    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "trackEvent:", *MEMORY[0x1E0D387C8]);

    objc_msgSend(v9, "identifier");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController _parentIndexPathForCellAtIndexPath:](self, "_parentIndexPathForCellAtIndexPath:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController _chatItemForContextMenuWithConfiguration:](self, "_chatItemForContextMenuWithConfiguration:", v9);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v25 = v8;
        objc_msgSend(v18, "IMChatItem");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "guid");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController clickyOrbChatItem](self, "clickyOrbChatItem");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "IMChatItem");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "guid");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v34 = v26;
        v35 = 2112;
        v36 = v21;
        _os_log_impl(&dword_18DFCD000, v19, OS_LOG_TYPE_INFO, " willPerformPreviewActionForMenuWithConfiguration chatItem: %@, self.clickyOrb:%@", buf, 0x16u);

        v8 = v25;
      }

    }
    objc_msgSend(v10, "setPreferredCommitStyle:", 1);
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __135__CKChatController_ClickyOrbConformance__transcriptCollectionViewController_willPerformPreviewActionForMenuWithConfiguration_animator___block_invoke;
    v29[3] = &unk_1E274B060;
    v29[4] = self;
    v30 = v11;
    v31 = v17;
    v32 = v18;
    v22 = v18;
    v23 = v17;
    v24 = v11;
    objc_msgSend(v10, "addCompletion:", v29);

  }
}

void __135__CKChatController_ClickyOrbConformance__transcriptCollectionViewController_willPerformPreviewActionForMenuWithConfiguration_animator___block_invoke(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  void *v10;
  objc_super v11;
  uint8_t buf[16];

  objc_msgSend(*(id *)(a1 + 32), "setIsShowingPreview:", 1);
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v2, OS_LOG_TYPE_INFO, "willPerformPreviewActionForMenuWithConfiguration: Setting showing preview to YES", buf, 2u);
    }

  }
  v3 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "previewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3 == v4)
  {
    v11.receiver = *(id *)(a1 + 32);
    v11.super_class = (Class)CKChatController;
    objc_msgSendSuper2(&v11, sel_becomeFirstResponder);
    objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);
    return;
  }
  objc_msgSend(*(id *)(a1 + 32), "restoreEntryViewAfterPreview");
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_13;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_13;
  v5 = *(void **)(a1 + 56);
  objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "transcriptIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "balloonControllerForContext:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_opt_respondsToSelector() & 1) == 0)
  {

    goto LABEL_13;
  }
  v9 = objc_msgSend(v8, "handlePresentationAction");

  if ((v9 & 1) == 0)
  {
LABEL_13:
    objc_msgSend(*(id *)(a1 + 32), "navigationController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "pushViewController:animated:", *(_QWORD *)(a1 + 40), 0);

  }
}

- (id)transcriptCollectionViewController:(id)a3 previewForHighlightingContextMenuWithConfiguration:(id)a4
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char isKindOfClass;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  void *v38;
  double v39;
  CGFloat v40;
  double v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  double v45;
  CGFloat v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  void *v60;
  double v61;
  CGFloat v62;
  double v63;
  CGFloat v64;
  double v65;
  CGFloat v66;
  double v67;
  CGFloat v68;
  id v69;
  void *v70;
  _BOOL4 v71;
  NSObject *v72;
  void *v73;
  void *v74;
  void *v75;
  void (**v76)(_QWORD, _QWORD);
  void *v77;
  void *v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  void *v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  uint64_t v98;
  double v99;
  double v100;
  int v101;
  double v102;
  double v103;
  void *v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  void *v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  void *v129;
  void *v130;
  double v131;
  double v132;
  void *v133;
  void *v134;
  void *v135;
  double v136;
  double v137;
  double v138;
  void *v139;
  double v140;
  double v141;
  void *v142;
  id v143;
  uint64_t v144;
  void *v145;
  void *v146;
  id v147;
  id v148;
  void *v149;
  float64x2_t v150;
  float64_t v151;
  float64x2_t v152;
  float64_t v153;
  void *v154;
  void *v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  void *v165;
  id v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v172;
  void *v173;
  void *v174;
  id v175;
  void *v176;
  id v177;
  void *v178;
  char v179;
  char v180;
  uint8_t buf[4];
  void *v182;
  __int16 v183;
  void *v184;
  uint64_t v185;
  CGPoint v186;
  CGPoint v187;
  CGRect v188;
  CGRect v189;

  v185 = *MEMORY[0x1E0C80C00];
  v175 = a3;
  v177 = a4;
  objc_msgSend(v177, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController collectionView](self, "collectionView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "contextMenuInteraction");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController collectionView](self, "collectionView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "locationInView:", v9);
  v11 = v10;
  v13 = v12;

  -[CKChatController _parentChatItemForIndexPath:](self, "_parentChatItemForIndexPath:", v6);
  v176 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _parentIndexPathForCellAtIndexPath:](self, "_parentIndexPathForCellAtIndexPath:", v6);
  v178 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _balloonViewForCellAtIndexPath:](self, "_balloonViewForCellAtIndexPath:", v178);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "displayConfiguration");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "type");

  if (v17 != 2)
    goto LABEL_6;
  -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "balloonView");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    if (v18)
    {
      objc_msgSend(v18, "balloonView");
      v21 = objc_claimAutoreleasedReturnValue();

      v14 = (void *)v21;
    }

LABEL_6:
    -[CKChatController _chatItemForContextMenuWithConfiguration:](self, "_chatItemForContextMenuWithConfiguration:", v177);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v18, "IMChatItem");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "guid");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController clickyOrbChatItem](self, "clickyOrbChatItem");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "IMChatItem");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "guid");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v182 = v24;
        v183 = 2112;
        v184 = v27;
        _os_log_impl(&dword_18DFCD000, v22, OS_LOG_TYPE_INFO, " previewForHighlightingContextMenuWithConfiguration chatItem: %@, self.clickyOrb:%@", buf, 0x16u);

      }
    }
    if (!v18)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v28 = v14;
        objc_msgSend(v28, "setCanUseOpaqueMask:", 1);
        objc_msgSend(v28, "prepareForDisplayIfNeeded");

      }
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[CKChatController collectionView](self, "collectionView");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "frame");
      v31 = v30;
      v33 = v32;
      v35 = v34;
      v37 = v36;
      objc_msgSend(v14, "superview");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "convertRect:fromView:", v38, v31, v33, v35, v37);
      v40 = v39;
      v42 = v41;
      v44 = v43;
      v46 = v45;

      v188.origin.x = v40;
      v188.origin.y = v42;
      v188.size.width = v44;
      v188.size.height = v46;
      v186.x = v11;
      v186.y = v13;
      if (!CGRectContainsPoint(v188, v186) && objc_msgSend(v6, "row") >= 1)
      {
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", objc_msgSend(v6, "row") - 1, objc_msgSend(v6, "section"));
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController _parentChatItemForIndexPath:](self, "_parentChatItemForIndexPath:", v47);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController _parentIndexPathForCellAtIndexPath:](self, "_parentIndexPathForCellAtIndexPath:", v47);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController _balloonViewForCellAtIndexPath:](self, "_balloonViewForCellAtIndexPath:", v49);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          -[CKChatController collectionView](self, "collectionView");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v50, "frame");
          v53 = v52;
          v55 = v54;
          v57 = v56;
          v59 = v58;
          objc_msgSend(v50, "superview");
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v51, "convertRect:fromView:", v60, v53, v55, v57, v59);
          v62 = v61;
          v64 = v63;
          v66 = v65;
          v68 = v67;

          v189.origin.x = v62;
          v189.origin.y = v64;
          v189.size.width = v66;
          v189.size.height = v68;
          v187.x = v11;
          v187.y = v13;
          if (CGRectContainsPoint(v189, v187))
          {
            v69 = v50;

            v14 = v69;
          }
        }

      }
    }
    if (v14)
    {
      objc_msgSend(v14, "window");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      v71 = v70 == 0;

      if (v71)
      {
        IMLogHandleForCategory();
        v72 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
          -[CKChatController(ClickyOrbConformance) transcriptCollectionViewController:previewForHighlightingContextMenuWithConfiguration:].cold.2();
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v72 = v14;
          -[NSObject stackView](v72, "stackView");
          v174 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v174, "currentAssetReference");
          v173 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v174, "regionOfInterestForAssetReference:", v173);
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          v74 = v73;
          if (!v73)
            goto LABEL_48;
          objc_msgSend(v73, "placeholderViewFactory");
          v75 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v75
            || (objc_msgSend(v74, "placeholderViewFactory"),
                v76 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(),
                ((void (**)(_QWORD, void *))v76)[2](v76, v74),
                v77 = (void *)objc_claimAutoreleasedReturnValue(),
                v76,
                !v77))
          {
            -[CKChatController view](self, "view");
            v78 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v74, "rectInCoordinateSpace:", v78);
            v80 = v79;
            v82 = v81;
            v84 = v83;
            v86 = v85;

            -[CKChatController view](self, "view");
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v87, "resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:", 0, v80, v82, v84, v86, *MEMORY[0x1E0CEB4B0], *(double *)(MEMORY[0x1E0CEB4B0] + 8), *(double *)(MEMORY[0x1E0CEB4B0] + 16), *(double *)(MEMORY[0x1E0CEB4B0] + 24));
            v77 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v77)
            {
LABEL_48:
              v129 = 0;
LABEL_85:

              v14 = v72;
              goto LABEL_86;
            }
          }
          if ((objc_opt_respondsToSelector() & 1) != 0)
          {
            objc_msgSend(v74, "trackingContainerView");
            v172 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v77, "bounds");
            v91 = v90;
            v93 = v92;
            v95 = v94;
            v97 = v96;
            v98 = MEMORY[0x1E0C9D648];
            if (CKMainScreenScale_once_2 != -1)
              dispatch_once(&CKMainScreenScale_once_2, &__block_literal_global_398_0);
            v100 = *(double *)(v98 + 16);
            v99 = *(double *)(v98 + 24);
            v89 = *(double *)&CKMainScreenScale_sMainScreenScale_2;
            v88 = 1.0;
            if (*(double *)&CKMainScreenScale_sMainScreenScale_2 == 0.0)
              v89 = 1.0;
            if (v172)
            {
              v101 = 0;
              v102 = 1.0 / v89 * (v91 * v89 + floor((v95 * v89 - v100 * v89) * 0.5));
              v103 = 1.0 / v89 * (v93 * v89 + floor((v97 * v89 - v99 * v89) * 0.5));
LABEL_80:
              v165 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA8C0]), "initWithContainer:center:", v172, v102, v103);
              v166 = objc_alloc_init(MEMORY[0x1E0CEA8B8]);
              +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
              v167 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v167, "dragBalloonCornerRadius");

              v168 = (void *)MEMORY[0x1E0CEA390];
              objc_msgSend(v77, "bounds");
              objc_msgSend(v168, "bezierPathWithRoundedRect:cornerRadius:");
              v169 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v166, "setVisiblePath:", v169);

              v170 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA98]), "initWithView:parameters:target:", v77, v166, v165);
              v129 = v170;
              if (v101)
                objc_msgSend(v170, "_setOverridePositionTrackingView:", v72);
              if ((objc_opt_respondsToSelector() & 1) != 0)
                objc_msgSend(v129, "_setPrefersUnmaskedPlatterStyle:", 1);

              goto LABEL_85;
            }
          }
          else
          {
            v100 = *(double *)(MEMORY[0x1E0C9D648] + 16);
            v99 = *(double *)(MEMORY[0x1E0C9D648] + 24);
          }
          -[CKChatController view](self, "view", v88, v89);
          v172 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v172, "coordinateSpace");
          v155 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v74, "rectInCoordinateSpace:", v155);
          v157 = v156;
          v159 = v158;
          v161 = v160;
          v163 = v162;
          if (CKMainScreenScale_once_2 != -1)
            dispatch_once(&CKMainScreenScale_once_2, &__block_literal_global_398_0);
          if (*(double *)&CKMainScreenScale_sMainScreenScale_2 == 0.0)
            v164 = 1.0;
          else
            v164 = *(double *)&CKMainScreenScale_sMainScreenScale_2;

          v102 = 1.0 / v164 * (v157 * v164 + floor((v161 * v164 - v100 * v164) * 0.5));
          v103 = 1.0 / v164 * (v159 * v164 + floor((v163 * v164 - v99 * v164) * 0.5));
          v101 = 1;
          goto LABEL_80;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          if (((v18 != 0) & objc_msgSend(v14, "canUseOpaqueMask")) == 1)
          {
            objc_msgSend(v14, "setCanUseOpaqueMask:", 0);
            objc_msgSend(v14, "setNeedsPrepareForDisplay");
            objc_msgSend(v14, "prepareForDisplayIfNeeded");
            objc_msgSend(v14, "layoutIfNeeded");
            objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
          }
          objc_msgSend(v14, "bounds");
          v118 = v117;
          v120 = v119;
          v122 = v121;
          v124 = v123;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(v14, "imageInsets");
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
LABEL_60:
              +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
              v135 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v135, "dragBalloonTailCropWidth");
              v137 = v136;

              objc_msgSend(v14, "balloonDescriptor");
              if (v179)
                v138 = -0.0;
              else
                v138 = v137;
              v72 = objc_alloc_init(MEMORY[0x1E0CEA8B8]);
              +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
              v139 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v139, "dragBalloonCornerRadius");
              v141 = v140;

              objc_msgSend(MEMORY[0x1E0CEA390], "bezierPathWithRoundedRect:cornerRadius:", v118 + v138, v120, v122 - v137, v124, v141);
              v142 = (void *)objc_claimAutoreleasedReturnValue();
              -[NSObject setVisiblePath:](v72, "setVisiblePath:", v142);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v14, "shouldProvideDragPreview"))
              {
                v143 = v14;
                objc_msgSend(v143, "attachmentBalloonViewPreview");
                v144 = objc_claimAutoreleasedReturnValue();
                v145 = (void *)v144;
                if (v144)
                  v146 = (void *)v144;
                else
                  v146 = v143;
                v147 = v146;

                v148 = objc_alloc(MEMORY[0x1E0CEA8C0]);
                objc_msgSend(v143, "superview");
                v149 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v143, "frame");
                v154 = (void *)objc_msgSend(v148, "initWithContainer:center:", v149, CGRectPxCenterPoint(v150, v151, v152, v153));

                v129 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA98]), "initWithView:parameters:target:", v147, v72, v154);
              }
              else
              {
                v129 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA98]), "initWithView:parameters:", v14, v72);
              }
              objc_msgSend(v129, "_setOverridePositionTrackingView:", v14);
              if ((objc_opt_respondsToSelector() & 1) != 0)
                objc_msgSend(v129, "_setPrefersUnmaskedPlatterStyle:", 1);

              goto LABEL_86;
            }
            objc_msgSend(v14, "pluginInsets");
          }
          v118 = v118 + v126;
          v120 = v120 + v125;
          v122 = v122 - (v126 + v128);
          v124 = v124 - (v125 + v127);
          goto LABEL_60;
        }
        IMLogHandleForCategory();
        v72 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
          -[CKChatController(ClickyOrbConformance) transcriptCollectionViewController:previewForHighlightingContextMenuWithConfiguration:].cold.3();
      }
    }
    else
    {
      IMLogHandleForCategory();
      v72 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
        -[CKChatController(ClickyOrbConformance) transcriptCollectionViewController:previewForHighlightingContextMenuWithConfiguration:].cold.1();
    }
    v129 = 0;
    goto LABEL_86;
  }
  objc_msgSend(v18, "balloonView");
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v104, "bounds");
  v106 = v105;
  v108 = v107;
  v110 = v109;
  v112 = v111;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v113 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v113, "dragBalloonTailCropWidth");
    v115 = v114;

    if (v14)
    {
      objc_msgSend(v14, "balloonDescriptor");
      v116 = -0.0;
      if (!v180)
        v116 = v115;
    }
    else
    {
      v116 = v115;
    }
    v106 = v106 + v116;
    v110 = v110 - v115;
  }
  v72 = objc_alloc_init(MEMORY[0x1E0CEA8B8]);
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v130 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v130, "dragBalloonCornerRadius");
  v132 = v131;

  objc_msgSend(MEMORY[0x1E0CEA390], "bezierPathWithRoundedRect:cornerRadius:", v106, v108, v110, v112, v132);
  v133 = (void *)objc_claimAutoreleasedReturnValue();
  -[NSObject setVisiblePath:](v72, "setVisiblePath:", v133);

  objc_msgSend(v18, "balloonView");
  v134 = (void *)objc_claimAutoreleasedReturnValue();
  v129 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA98]), "initWithView:parameters:", v134, v72);
  objc_msgSend(v129, "_setOverridePositionTrackingView:", v134);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v129, "_setPrefersUnmaskedPlatterStyle:", 1);

LABEL_86:
  return v129;
}

- (id)transcriptCollectionViewController:(id)a3 previewForDismissingContextMenuWithConfiguration:(id)a4
{
  id v6;
  id v7;
  void *v8;

  v6 = a4;
  v7 = a3;
  -[CKChatController setClickyOrbChatItem:](self, "setClickyOrbChatItem:", 0);
  -[CKChatController setPickerContainerAccessoryView:](self, "setPickerContainerAccessoryView:", 0);
  -[CKChatController transcriptCollectionViewController:previewForHighlightingContextMenuWithConfiguration:](self, "transcriptCollectionViewController:previewForHighlightingContextMenuWithConfiguration:", v7, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

- (id)contextMenuAccessoryViewsForChatItem:(id)a3 containingViewController:(id)a4
{
  id v6;
  id v7;
  id v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;

  v6 = a3;
  v7 = a4;
  v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (-[CKChatController shouldShowTapbackPickerForChatItem:](self, "shouldShowTapbackPickerForChatItem:", v6))
  {
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isEmojiTapbacksEnabled");

    if (v10)
    {
      -[CKChatController pickerAccessoryViewForChatItem:containingViewController:](self, "pickerAccessoryViewForChatItem:containingViewController:", v6, v7);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "addObject:", v11);
      -[CKChatController setPickerContainerAccessoryView:](self, "setPickerContainerAccessoryView:", v11);
    }
    else
    {
      -[CKChatController setupLegacyTapbackPickerWithChatItem:viewController:](self, "setupLegacyTapbackPickerWithChatItem:viewController:", v6, v7);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "addObject:", v11);
    }

  }
  if (-[CKCoreChatController shouldShowTapbackAttributionForChatItem:](self, "shouldShowTapbackAttributionForChatItem:", v6))
  {
    -[CKChatController _votingViewForChatItem:containingViewController:](self, "_votingViewForChatItem:containingViewController:", v6, v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "addObject:", v12);

  }
  return v8;
}

- (id)setupLegacyTapbackPickerWithChatItem:(id)a3 viewController:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  CKMessageAcknowledgmentPickerBarAccessoryView *v30;
  void *v31;

  v6 = a4;
  v7 = a3;
  objc_msgSend(v6, "presentedViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v6, "presentedViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "view");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(v6, "view");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }

  objc_msgSend(v10, "safeAreaLayoutGuide");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "layoutFrame");
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;

  objc_msgSend(v10, "window");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "view");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "convertRect:fromView:", v21, v13, v15, v17, v19);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v29 = v28;

  v30 = -[CKMessageAcknowledgmentPickerBarAccessoryView initWithChatItem:layoutBounds:]([CKMessageAcknowledgmentPickerBarAccessoryView alloc], "initWithChatItem:layoutBounds:", v7, v23, v25, v27, v29);
  -[CKMessageAcknowledgmentPickerBarAccessoryView pickerViewController](v30, "pickerViewController");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setDelegate:", self);

  return v30;
}

- (id)transcriptCollectionViewController:(id)a3 styleForContextMenuWithConfiguration:(id)a4
{
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  int v24;
  double v25;
  double v26;
  double v27;
  void *v28;
  double v29;
  double v30;
  void *v31;
  double v32;
  double v33;
  void *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  void *v43;
  void *v44;
  double v45;
  double v46;
  void *v47;
  double v48;
  double v49;
  void *v50;
  double v51;
  double v52;
  void *v53;
  double v54;
  double v55;
  double v56;
  int v58;
  void *v59;
  __int16 v60;
  void *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[CKChatController _chatItemForContextMenuWithConfiguration:](self, "_chatItemForContextMenuWithConfiguration:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v8, "IMChatItem");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "guid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController clickyOrbChatItem](self, "clickyOrbChatItem");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "IMChatItem");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "guid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v58 = 138412546;
      v59 = v11;
      v60 = 2112;
      v61 = v14;
      _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, " styleForContextMenuWithConfiguration chatItem: %@, self.clickyOrb:%@", (uint8_t *)&v58, 0x16u);

    }
  }
  objc_msgSend(MEMORY[0x1E0CEACE0], "defaultStyle");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController collectionView](self, "collectionView");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "layoutMargins");
  v18 = v17;
  v20 = v19;
  v22 = v21;

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v23, "isEmojiTapbacksEnabled");

  if (v24)
  {
    v25 = 0.0;
    if (-[CKChatController shouldShowTapbackPickerForChatItem:](self, "shouldShowTapbackPickerForChatItem:", v8))
    {
      +[CKTapbackPickerBalloonLayoutTemplate requiredDisplayHeight](CKTapbackPickerBalloonLayoutTemplate, "requiredDisplayHeight");
      v27 = v26;
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "messageAcknowledgementVotingViewMinPadding");
      v30 = v29;

      v25 = v27 + v30 + 0.0;
    }
    if (-[CKCoreChatController shouldShowTapbackAttributionForChatItem:](self, "shouldShowTapbackAttributionForChatItem:", v8))
    {
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "attributionViewHeight");
      v33 = v32;
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "attributionViewMinPadding");
      v36 = v35;

      v25 = v25 + v33 + v36;
    }
    +[CKTapbackPickerBalloonLayoutTemplate emojiTailBubbleMargin](CKTapbackPickerBalloonLayoutTemplate, "emojiTailBubbleMargin");
    v38 = v37;
    +[CKTapbackPickerBalloonLayoutTemplate selectionTailSize](CKTapbackPickerBalloonLayoutTemplate, "selectionTailSize");
    v40 = v39;
    +[CKTapbackPickerBalloonLayoutTemplate emojiTailBubbleMargin](CKTapbackPickerBalloonLayoutTemplate, "emojiTailBubbleMargin");
    v42 = v41;
    if (objc_msgSend(v8, "isFromMe"))
      v18 = v38 + v40 + v42;
    else
      v22 = v38 + v40 + v42;
  }
  else
  {
    -[CKChatController view](self, "view");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "window");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "safeAreaInsets");
    v46 = v45;
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "messageAcknowledgmentPickerBarSize");
    v49 = v48;

    v25 = v46 + v49;
    if (-[CKCoreChatController shouldShowTapbackAttributionForChatItem:](self, "shouldShowTapbackAttributionForChatItem:", v8))
    {
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "messageAcknowledgementVotingViewHeight");
      v52 = v51;
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "messageAcknowledgementVotingViewMinPadding");
      v55 = v54;

      v25 = v25 + v52 + v55;
    }
  }
  objc_msgSend(v15, "preferredEdgeInsets");
  objc_msgSend(v15, "setPreferredEdgeInsets:", fmax(v56, v25), v18, v20, v22);

  return v15;
}

- (void)clearEntryViewPasteConfiguration
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  -[CKChatController entryView](self, "entryView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "contentView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "textView");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  v4 = objc_alloc_init(MEMORY[0x1E0CEA808]);
  objc_msgSend(v5, "setPasteConfiguration:", v4);

}

- (void)restoreEntryViewPasteConfiguration
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  -[CKChatController entryView](self, "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "contentView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "textView");
  v9 = (id)objc_claimAutoreleasedReturnValue();

  -[CKCoreChatController chat](self, "chat");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "supportsCapabilities:", 0x8000) ^ 1;

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "pasteConfigurationDisablingKeyboardStickers:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "setPasteConfiguration:", v8);
}

- (void)transcriptCollectionViewController:(id)a3 willEndContextMenuInteractionWithConfiguration:(id)a4 animator:(id)a5
{
  id v8;
  id v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _BOOL4 v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void (**v25)(_QWORD);
  void *v26;
  void *v27;
  char v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  _QWORD v34[4];
  id v35;
  CKChatController *v36;
  _QWORD aBlock[5];
  id v38;
  id v39;
  id v40;
  id v41;
  BOOL v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v33 = a5;
  -[CKChatController _chatItemForContextMenuWithConfiguration:](self, "_chatItemForContextMenuWithConfiguration:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v10, "IMChatItem");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "guid");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController clickyOrbChatItem](self, "clickyOrbChatItem");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "IMChatItem");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "guid");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v44 = v13;
      v45 = 2112;
      v46 = v16;
      _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, " willEndContextMenuInteractionWithConfiguration chatItem: %@, self.clickyOrb:%@", buf, 0x16u);

    }
  }
  -[CKChatController messageEditingViewController](self, "messageEditingViewController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v17 != 0;

  if (v18)
    -[CKScrollViewController endHoldingScrollGeometryUpdatesForReason:](self, "endHoldingScrollGeometryUpdatesForReason:", CFSTR("ContextMenu"));
  objc_msgSend(v9, "identifier");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _parentIndexPathForCellAtIndexPath:](self, "_parentIndexPathForCellAtIndexPath:", v32);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _balloonViewForCellAtIndexPath:](self, "_balloonViewForCellAtIndexPath:", v31);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setIsBeingShownAsPreview:", 0);
  v20 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __133__CKChatController_ClickyOrbConformance__transcriptCollectionViewController_willEndContextMenuInteractionWithConfiguration_animator___block_invoke;
  aBlock[3] = &unk_1E274B088;
  aBlock[4] = self;
  v21 = v10;
  v38 = v21;
  v42 = v18;
  v22 = v8;
  v39 = v22;
  v23 = v9;
  v40 = v23;
  v24 = v19;
  v41 = v24;
  v25 = (void (**)(_QWORD))_Block_copy(aBlock);
  -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "displayConfiguration");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend(v27, "shouldShowStickers");

  if (v33)
  {
    if ((v28 & 1) == 0)
    {
      v34[0] = v20;
      v34[1] = 3221225472;
      v34[2] = __133__CKChatController_ClickyOrbConformance__transcriptCollectionViewController_willEndContextMenuInteractionWithConfiguration_animator___block_invoke_2;
      v34[3] = &unk_1E274A108;
      v35 = v23;
      v36 = self;
      objc_msgSend(v33, "addAnimations:", v34);

    }
    objc_msgSend(v33, "addCompletion:", v25);
  }
  else
  {
    if ((v28 & 1) == 0)
    {
      objc_msgSend(v23, "identifier");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController _parentChatItemForIndexPath:](self, "_parentChatItemForIndexPath:", v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();

      -[CKChatController showAssociatedCellsForChatItem:animated:completion:](self, "showAssociatedCellsForChatItem:animated:completion:", v30, 1, 0);
    }
    v25[2](v25);
  }
  -[CKChatController restoreEntryViewPasteConfiguration](self, "restoreEntryViewPasteConfiguration");
  -[CKChatController restoreInputAfterPreviewPresentation](self, "restoreInputAfterPreviewPresentation");

}

void __133__CKChatController_ClickyOrbConformance__transcriptCollectionViewController_willEndContextMenuInteractionWithConfiguration_animator___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  void *v11;
  void *v12;
  id v13;
  id v14;

  objc_msgSend(*(id *)(a1 + 32), "setClickyOrbChatItem:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setPickerContainerAccessoryView:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setDismissingContextMenu:", 1);
  if (objc_msgSend(*(id *)(a1 + 32), "acknowledgmentToSend"))
  {
    objc_msgSend(*(id *)(a1 + 32), "chat");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "sendMessageAcknowledgment:forChatItem:", objc_msgSend(*(id *)(a1 + 32), "acknowledgmentToSend"), *(_QWORD *)(a1 + 40));

    objc_msgSend(*(id *)(a1 + 32), "setAcknowledgmentToSend:", 0);
  }
  objc_msgSend(*(id *)(a1 + 32), "chat");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "endHoldingChatItemsUpdatesForReason:", *MEMORY[0x1E0D35368]);
  if (!*(_BYTE *)(a1 + 72))
    objc_msgSend(*(id *)(a1 + 32), "endHoldingScrollGeometryUpdatesForReason:", CFSTR("ContextMenu"));
  if (objc_msgSend(*(id *)(a1 + 32), "wasKeyboardShowingWithApp"))
  {
    objc_msgSend(*(id *)(a1 + 32), "setWasKeyboardShowingWithApp:", 0);
    objc_msgSend(*(id *)(a1 + 32), "presentedViewController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {

    }
    else if ((objc_msgSend(*(id *)(a1 + 32), "isEditing") & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "reloadInputViews");
      objc_msgSend(*(id *)(a1 + 32), "becomeFirstResponder");
    }
    objc_msgSend(*(id *)(a1 + 48), "collectionView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "endHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerClickyOrb"));

  }
  if (objc_msgSend(*(id *)(a1 + 32), "wantsInlineOverlay"))
  {
    if (CKIsRunningInMacCatalyst())
    {
      objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "selectedChatItems");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "firstObject");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      v8 = v7;
      if (!v7)
        v8 = *(void **)(a1 + 40);
      v9 = v8;

    }
    else
    {
      v9 = *(id *)(a1 + 40);
    }
    objc_msgSend(*(id *)(a1 + 32), "showInlineReplyControllerForChatItem:presentKeyboard:", v9, 1);
    objc_msgSend(*(id *)(a1 + 32), "setWantsInlineOverlay:", 0);
  }
  else
  {
    v10 = objc_msgSend(*(id *)(a1 + 32), "wantsStickerDetails");
    v11 = *(void **)(a1 + 32);
    if (v10)
    {
      objc_msgSend(v11, "setWantsStickerDetails:", 0);
      v12 = *(void **)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 56), "identifier");
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "presentStickerDetailControllerWithIndexPath:", v9);
    }
    else
    {
      if (!objc_msgSend(v11, "wantsEmojiDetails"))
        goto LABEL_23;
      objc_msgSend(*(id *)(a1 + 32), "setWantsEmojiDetails:", 0);
      objc_msgSend(*(id *)(a1 + 56), "identifier");
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "presentEmojiDetailsControllerWithIndexPath:", v9);
    }
  }

LABEL_23:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v13 = *(id *)(a1 + 64);
    objc_msgSend(v13, "setCanUseOpaqueMask:", 1);
    objc_msgSend(v13, "prepareForDisplayIfNeeded");

  }
  objc_msgSend(*(id *)(a1 + 32), "setDismissingContextMenu:", 0);

}

void __133__CKChatController_ClickyOrbConformance__transcriptCollectionViewController_willEndContextMenuInteractionWithConfiguration_animator___block_invoke_2(uint64_t a1)
{
  void *v2;
  char isKindOfClass;
  uint64_t v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "identifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "identifier");
    v4 = objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      v6 = (id)v4;
      objc_msgSend(*(id *)(a1 + 40), "_parentChatItemForIndexPath:", v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "showAssociatedCellsForChatItem:animated:completion:", v5, 1, 0);

    }
  }
}

- (void)transcriptCollectionViewController:(id)a3 willDisplayContextMenuWithConfiguration:(id)a4 animator:(id)a5
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v6 = a4;
  -[CKChatController clearEntryViewPasteConfiguration](self, "clearEntryViewPasteConfiguration");
  -[CKChatController prepareInputForPreviewPresentation](self, "prepareInputForPreviewPresentation");
  objc_msgSend(v6, "identifier");
  v10 = (id)objc_claimAutoreleasedReturnValue();

  -[CKChatController _parentIndexPathForCellAtIndexPath:](self, "_parentIndexPathForCellAtIndexPath:", v10);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _balloonViewForCellAtIndexPath:](self, "_balloonViewForCellAtIndexPath:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "canUseOpaqueMask"))
  {
    objc_msgSend(v8, "setCanUseOpaqueMask:", 0);
    objc_msgSend(v8, "setNeedsPrepareForDisplay");
    objc_msgSend(v8, "prepareForDisplayIfNeeded");
    objc_msgSend(v8, "layoutIfNeeded");
    objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
  }
  -[CKCoreChatController chat](self, "chat");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "beginHoldingChatItemsUpdatesForReason:", *MEMORY[0x1E0D35368]);
  -[CKScrollViewController beginHoldingScrollGeometryUpdatesForReason:](self, "beginHoldingScrollGeometryUpdatesForReason:", CFSTR("ContextMenu"));

}

- (id)transcriptCollectionViewController:(id)a3 chatItemForContextMenuWithConfiguration:(id)a4
{
  return -[CKChatController _chatItemForContextMenuWithConfiguration:](self, "_chatItemForContextMenuWithConfiguration:", a4);
}

- (id)_chatItemForContextMenuWithConfiguration:(id)a3
{
  id v4;
  void *v5;
  char isKindOfClass;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(v4, "identifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      -[CKChatController _parentChatItemForIndexPath:](self, "_parentChatItemForIndexPath:", v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
LABEL_6:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[CKChatController _parentIndexPathForCellAtIndexPath:](self, "_parentIndexPathForCellAtIndexPath:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController _balloonViewForCellAtIndexPath:](self, "_balloonViewForCellAtIndexPath:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v10, "stackView");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "currentAssetReference");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "asset");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "chatItem");
        v14 = objc_claimAutoreleasedReturnValue();

        v8 = (void *)v14;
      }
    }

  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v17 = 138412546;
      v18 = v8;
      v19 = 2112;
      v20 = v7;
      _os_log_impl(&dword_18DFCD000, v15, OS_LOG_TYPE_INFO, "clickyOrbConformance: found chatItem:%@ at indexPath:%@", (uint8_t *)&v17, 0x16u);
    }

  }
  return v8;
}

- (void)messageAcknowledgmentPickerViewController:(id)a3 didPickAcknowledgment:(int64_t)a4
{
  -[CKChatController setAcknowledgmentToSend:](self, "setAcknowledgmentToSend:", a4);
  -[CKChatController dismissContextMenuInteractionMenu](self, "dismissContextMenuInteractionMenu");
}

- (void)dismissContextMenuInteractionMenu
{
  void *v3;
  char v4;
  void *v5;
  void *v6;
  id v7;

  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
  {
    -[CKChatController photosGridViewController](self, "photosGridViewController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_opt_respondsToSelector();

    if ((v4 & 1) == 0)
      return;
    -[CKChatController photosGridViewController](self, "photosGridViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[CKChatController collectionView](self, "collectionView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v7 = v5;
  objc_msgSend(v5, "contextMenuInteraction");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "dismissMenu");

}

- (id)_menuForChatItem:(id)a3 withParentChatItem:(id)a4 menuAppearance:(int64_t)a5
{
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  char v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  char v39;
  void *v40;
  int v41;
  void *v42;
  void *v43;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  _QWORD v53[4];
  id v54;
  id v55;
  id location;

  v8 = a3;
  v9 = a4;
  if (IMEnableTranscriptClickyOrb())
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[CKChatController _shouldConfigureChatItemMenuForCommSafety:](self, "_shouldConfigureChatItemMenuForCommSafety:", v8))
    {
      if (CKIsRunningInMacCatalyst())
        -[CKChatController _deleteMenuForChatItem:](self, "_deleteMenuForChatItem:", v8);
      else
        -[CKChatController _moreActionForChatItem:configureForCommSafety:](self, "_moreActionForChatItem:configureForCommSafety:", v8, 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke((uint64_t)v13, v13, v10);

      if (objc_msgSend(v10, "count"))
      {
        objc_msgSend(MEMORY[0x1E0CEA740], "menuWithTitle:children:", &stru_1E276D870, v10);
        v11 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v11 = 0;
      }
    }
    else
    {
      -[CKChatController _responsesSubmenuForChatItem:withParentChatItem:menuAppearance:](self, "_responsesSubmenuForChatItem:withParentChatItem:menuAppearance:", v8, v9, a5);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke((uint64_t)v12, v12, v10);
      if (CKIsRunningInMacCatalyst())
        -[CKChatController _exportMenuForChatItem:](self, "_exportMenuForChatItem:", v8);
      else
        -[CKChatController _exportActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:](self, "_exportActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:", v8, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke((uint64_t)v14, v14, v10);
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "balloonViewForChatItem:", v9);
      v16 = objc_claimAutoreleasedReturnValue();

      -[CKChatController _saveStickerActionForChatItem:sourceView:](self, "_saveStickerActionForChatItem:sourceView:", v8, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke((uint64_t)v17, v17, v10);
      -[CKCoreChatController conversation](self, "conversation");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = (void *)objc_opt_new();
      -[CKCoreChatController chat](self, "chat");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "supportsCapabilities:", 1);

      if (v19
        && objc_msgSend(v8, "canEditMessageText")
        && objc_msgSend(v51, "supportsMessageEditing"))
      {
        location = 0;
        objc_initWeak(&location, self);
        v47 = (void *)MEMORY[0x1E0CEA2A8];
        CKFrameworkBundle();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("EDIT"), &stru_1E276D870, CFSTR("ChatKit"));
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("pencil"));
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = v20;
        v53[0] = MEMORY[0x1E0C809B0];
        v53[1] = 3221225472;
        v53[2] = __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke_2;
        v53[3] = &unk_1E274B010;
        objc_copyWeak(&v55, &location);
        v54 = v8;
        objc_msgSend(v47, "actionWithTitle:image:identifier:handler:", v46, v49, 0, v53);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v52, "addObject:", v21);
        objc_destroyWeak(&v55);
        objc_destroyWeak(&location);
      }
      if (objc_msgSend(v8, "canRetract", v45)
        && objc_msgSend(v51, "supportsMessageEditing"))
      {
        -[CKChatController _retractionActionForChatItem:](self, "_retractionActionForChatItem:", v8);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v52, "addObject:", v22);

      }
      if (objc_msgSend(v52, "count"))
      {
        objc_msgSend(MEMORY[0x1E0CEA740], "menuWithTitle:image:identifier:options:children:", &stru_1E276D870, 0, 0, 1, v52);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke((uint64_t)v23, v23, v10);

      }
      if (CKIsRunningInMacCatalyst())
        -[CKChatController _forwardAndCopyMenuForChatItem:](self, "_forwardAndCopyMenuForChatItem:", v8);
      else
        -[CKChatController _forwardAndCopyActionsForChatItem:](self, "_forwardAndCopyActionsForChatItem:", v8);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke((uint64_t)v24, v24, v10);
      if (objc_msgSend(MEMORY[0x1E0D397F8], "supportsSharedWithYou"))
      {
        -[CKChatController _highlightActionForChatItem:](self, "_highlightActionForChatItem:", v8);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke((uint64_t)v25, v25, v10);

      }
      v48 = v17;
      v50 = v14;
      if (+[CKTranslatorUtilities shouldShowTranslateMenuOption:](CKTranslatorUtilities, "shouldShowTranslateMenuOption:", v8))
      {
        +[CKTranslationMenu translateOrbActionForChatItem:forController:](CKTranslationMenu, "translateOrbActionForChatItem:forController:", v8, self);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke((uint64_t)v26, v26, v10);

      }
      v27 = (void *)v16;
      v28 = v12;
      if (CKIsRunningInMacCatalyst())
      {
        -[CKCoreChatController chat](self, "chat");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend(v29, "isStewieSharingChat");

        if ((v30 & 1) == 0 && objc_msgSend(v8, "canDelete"))
        {
          -[CKChatController _deleteMenuForChatItem:](self, "_deleteMenuForChatItem:", v8);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke((uint64_t)v31, v31, v10);

        }
        -[CKChatController _showTimestampsAction](self, "_showTimestampsAction");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke((uint64_t)v32, v32, v10);

      }
      -[CKChatController _downgradeMessageActionForChatItem:](self, "_downgradeMessageActionForChatItem:", v8);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke((uint64_t)v33, v33, v10);

      -[CKChatController _emojiDetailsActionForChatItem:](self, "_emojiDetailsActionForChatItem:", v9);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke((uint64_t)v34, v34, v10);

      -[CKChatController _stickerDetailsActionForChatItem:](self, "_stickerDetailsActionForChatItem:", v9);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke((uint64_t)v35, v35, v10);

      -[CKChatController _mediaAttributionActionForChatItem:](self, "_mediaAttributionActionForChatItem:", v8);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke((uint64_t)v36, v36, v10);

      -[CKChatController _moreActionForChatItem:](self, "_moreActionForChatItem:", v8);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke((uint64_t)v37, v37, v10);

      objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = objc_msgSend(v38, "BOOLForKey:", CFSTR("CKInternalInstallShouldHideDebugMenu"));

      objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = objc_msgSend(v40, "isInternalInstall");

      if (v41 && (v39 & 1) == 0)
      {
        -[CKChatController _internalMenuForChatItem:](self, "_internalMenuForChatItem:", v8);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "addObject:", v42);

      }
      v43 = (void *)objc_msgSend(v10, "count");
      if (v43)
      {
        objc_msgSend(MEMORY[0x1E0CEA740], "menuWithTitle:children:", &stru_1E276D870, v10);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v11 = v43;

    }
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;

  v5 = a2;
  v4 = a3;
  if (v5)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_msgSend(v4, "addObjectsFromArray:", v5);
    else
      objc_msgSend(v4, "addObject:", v5);
  }

}

void __93__CKChatController_ClickyOrbConformance___menuForChatItem_withParentChatItem_menuAppearance___block_invoke_2(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "actionEditIsTappedForChatItem:", *(_QWORD *)(a1 + 32));

}

- (BOOL)_shouldConfigureChatItemMenuForCommSafety:(id)a3
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  if ((objc_msgSend(v3, "supportsCommunicationSafety") & 1) != 0
    || (objc_msgSend(v3, "visibleAssociatedMessageChatItems"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = objc_msgSend(v4, "count"),
        v4,
        v5))
  {
    objc_msgSend(MEMORY[0x1E0D35820], "sharedInstance");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "commSafetyTransferGUID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "transferForGUID:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (+[CKCommSafetyHelper shouldDisableTranscriptCapabilitiesForFileTransfer:](CKCommSafetyHelper, "shouldDisableTranscriptCapabilitiesForFileTransfer:", v8))
    {
      LOBYTE(v9) = 1;
    }
    else
    {
      objc_msgSend(v3, "visibleAssociatedMessageChatItems");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v10, "count");

      if (v9)
      {
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        objc_msgSend(v3, "visibleAssociatedMessageChatItems");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
        if (v9)
        {
          v20 = v8;
          v12 = *(_QWORD *)v22;
          while (2)
          {
            for (i = 0; i != v9; ++i)
            {
              if (*(_QWORD *)v22 != v12)
                objc_enumerationMutation(v11);
              v14 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
              if (objc_msgSend(v14, "supportsCommunicationSafety"))
              {
                objc_msgSend(v14, "commSafetyTransferGUID");
                v15 = (void *)objc_claimAutoreleasedReturnValue();

                if (v15)
                {
                  objc_msgSend(MEMORY[0x1E0D35820], "sharedInstance");
                  v16 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v14, "commSafetyTransferGUID");
                  v17 = objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v16, "transferForGUID:", v17);
                  v18 = (void *)objc_claimAutoreleasedReturnValue();

                  LOBYTE(v17) = +[CKCommSafetyHelper shouldDisableTranscriptCapabilitiesForFileTransfer:](CKCommSafetyHelper, "shouldDisableTranscriptCapabilitiesForFileTransfer:", v18);
                  if ((v17 & 1) != 0)
                  {
                    LOBYTE(v9) = 1;
                    goto LABEL_19;
                  }
                }
              }
            }
            v9 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
            if (v9)
              continue;
            break;
          }
LABEL_19:
          v8 = v20;
        }

      }
    }

  }
  else
  {
    LOBYTE(v9) = 0;
  }

  return v9;
}

- (id)_highlightActionForChatItem:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  const __CFString *v13;
  void *v14;
  void *v15;
  _QWORD v17[4];
  id v18;
  CKChatController *v19;
  id v20;
  id location;

  v4 = a3;
  if (objc_msgSend(v4, "syndicationBehavior") == 1
    && (-[CKCoreChatController chat](self, "chat"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "isBusinessChat"),
        v5,
        (v6 & 1) == 0))
  {
    v8 = objc_msgSend(v4, "isHighlighted");
    CKFrameworkBundle();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v8)
      v11 = CFSTR("REMOVE_PIN_ACTION");
    else
      v11 = CFSTR("ADD_PIN_ACTION");
    objc_msgSend(v9, "localizedStringForKey:value:table:", v11, &stru_1E276D870, CFSTR("ChatKit"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v4, "isHighlighted"))
      v13 = CFSTR("pin.slash");
    else
      v13 = CFSTR("pin");
    objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    location = 0;
    objc_initWeak(&location, self);
    v15 = (void *)MEMORY[0x1E0CEA2A8];
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __70__CKChatController_ClickyOrbConformance___highlightActionForChatItem___block_invoke;
    v17[3] = &unk_1E274B0B0;
    v18 = v4;
    objc_copyWeak(&v20, &location);
    v19 = self;
    objc_msgSend(v15, "actionWithTitle:image:identifier:handler:", v12, v14, 0, v17);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_destroyWeak(&v20);

    objc_destroyWeak(&location);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void __70__CKChatController_ClickyOrbConformance___highlightActionForChatItem___block_invoke(id *a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  char v19;
  void *v20;
  id v21;

  if (objc_msgSend(a1[4], "isHighlighted"))
    v2 = 8;
  else
    v2 = 4;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend(WeakRetained, "conversation");
  v4 = objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v4, "chat");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[4], "IMChatItem");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "guid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(a1[4], "messagePartRange");
  objc_msgSend(v5, "sendSyndicationAction:forMessagePartGUID:syndicatedMessagePartRange:", v2, v7, v8, v9);

  objc_msgSend(a1[4], "IMChatItem");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  LOBYTE(v4) = objc_opt_isKindOfClass();

  if ((v4 & 1) != 0)
  {
    objc_msgSend(a1[4], "IMChatItem");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "messageItem");
    v21 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v21, "swyAppName");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "swyBundleID");
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)v13;
    if (v12 && v13)
    {
      if ((_DWORD)v2 == 8)
      {
        objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "decrementPinCountForBundleID:", v14);

      }
      else
      {
        objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "incrementPinCountForBundleID:", v14);

        objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "getPinCountForBundleID:", v14);

        objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v18, "isSharedWithYouEnabledForApplicationWithBundleID:", v14);

        if (v17 >= 3 && (v19 & 1) == 0)
          objc_msgSend(a1[5], "_showAutoDonationAlertForAppName:bundleID:", v12, v14);
      }
    }

  }
}

- (void)_showAutoDonationAlertForAppName:(id)a3 bundleID:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  __CFString *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  id v24;

  v6 = a3;
  v7 = a4;
  if (objc_msgSend(v6, "length") && objc_msgSend(v7, "length"))
  {
    v8 = (void *)MEMORY[0x1E0CB3940];
    CKFrameworkBundle();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("SHARED_WITH_YOU_AUTO_DONATION_ALERT"), &stru_1E276D870, CFSTR("ChatKit"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringWithFormat:", v10, v6, v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "userInterfaceLayoutDirection");

    if (v13 == 1)
      v14 = CFSTR("\u200F");
    else
      v14 = CFSTR("\u200E");
    -[__CFString stringByAppendingString:](v14, "stringByAppendingString:", v11);
    v15 = objc_claimAutoreleasedReturnValue();

    +[CKAlertController alertControllerWithTitle:message:preferredStyle:](CKAlertController, "alertControllerWithTitle:message:preferredStyle:", v15, 0, 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    CKFrameworkBundle();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("SHARED_WITH_YOU_OK_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __84__CKChatController_ClickyOrbConformance___showAutoDonationAlertForAppName_bundleID___block_invoke;
    v23[3] = &unk_1E274B0D8;
    v24 = v7;
    +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v18, 0, v23);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "addAction:", v19);

    CKFrameworkBundle();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("SHARED_WITH_YOU_CANCEL_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v21, 1, 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "addAction:", v22);

    -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v16, 1, 0);
  }
  else
  {
    IMLogHandleForCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      -[CKChatController(ClickyOrbConformance) _showAutoDonationAlertForAppName:bundleID:].cold.1((uint64_t)v6, (uint64_t)v7, v15);
  }

}

void __84__CKChatController_ClickyOrbConformance___showAutoDonationAlertForAppName_bundleID___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setSharedWithYouEnabled:forApplicationWithBundleID:", 1, *(_QWORD *)(a1 + 32));

}

- (id)_responsesSubmenuForChatItem:(id)a3 withParentChatItem:(id)a4 menuAppearance:(int64_t)a5
{
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v8 = a3;
  v9 = (void *)MEMORY[0x1E0C99DE8];
  v10 = a4;
  objc_msgSend(v9, "array");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "isEmojiTapbacksEnabled");

  if (v13)
  {
    if (a5 == 2 || CKIsRunningInMacCatalyst())
    {
      -[CKChatController tapbackMenuElementsForChatItem:](self, "tapbackMenuElementsForChatItem:", v8);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = v14;
      if (!v14 || !objc_msgSend(v14, "count"))
        goto LABEL_17;
      if (CKIsRunningInMacCatalyst())
      {
        objc_msgSend(v11, "addObjectsFromArray:", v15);
LABEL_17:

        goto LABEL_18;
      }
      objc_msgSend(MEMORY[0x1E0CEA740], "menuWithTitle:image:identifier:options:children:", &stru_1E276D870, 0, 0, 1, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_15:
      objc_msgSend(v11, "addObject:", v16);
LABEL_16:

      goto LABEL_17;
    }
  }
  else if (CKIsRunningInMacCatalyst()
         && -[CKChatController shouldShowTapbackPickerForChatItem:](self, "shouldShowTapbackPickerForChatItem:", v8))
  {
    -[CKChatController _tapbacksPaletteMenuForChatItem:](self, "_tapbacksPaletteMenuForChatItem:", v8);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (v15)
      objc_msgSend(v11, "addObject:", v15);
    -[CKChatController _tapbackActionForChatItem:](self, "_tapbackActionForChatItem:", v8);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v16)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_18:
  -[CKChatController _inlineReplyActionForChatItem:](self, "_inlineReplyActionForChatItem:", v8);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
    objc_msgSend(v11, "addObject:", v17);
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "balloonViewForChatItem:", v10);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKChatController _addStickerActionForChatItem:parentChatItem:sourceView:](self, "_addStickerActionForChatItem:parentChatItem:sourceView:", v8, v10, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (v20)
  {
    if (CKIsRunningInMessagesViewService())
      objc_msgSend(v20, "setAttributes:", 1);
    objc_msgSend(v11, "addObject:", v20);
  }
  if (objc_msgSend(v11, "count"))
  {
    objc_msgSend(MEMORY[0x1E0CEA740], "menuWithTitle:image:identifier:options:children:", &stru_1E276D870, 0, 0, 1, v11);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v21 = 0;
  }

  return v21;
}

- (id)_tapbacksPaletteMenuForChatItem:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  __CFString *v15;
  void *v16;
  _QWORD v18[5];
  id v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  v4 = a3;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isInlineTapbackMenuEnabled");

  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 0;
    v22 = &v21;
    v23 = 0x3032000000;
    v24 = __Block_byref_object_copy__3;
    v25 = __Block_byref_object_dispose__3;
    v26 = 0;
    v26 = v4;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[CKChatController currentTopChatItemForAggregateChatItem:](self, "currentTopChatItemForAggregateChatItem:", v22[5]);
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = (void *)v22[5];
      v22[5] = v8;

    }
    v10 = objc_msgSend((id)*MEMORY[0x1E0CEB258], "userInterfaceLayoutDirection") == 1;
    objc_msgSend((id)v22[5], "serviceName");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    +[CKMessageAcknowledgmentDraftDescriptor allMessageAcknowledgmentDescriptorsWithServiceName:](CKMessageAcknowledgmentDraftDescriptor, "allMessageAcknowledgmentDescriptorsWithServiceName:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __74__CKChatController_ClickyOrbConformance___tapbacksPaletteMenuForChatItem___block_invoke;
    v18[3] = &unk_1E274B128;
    v20 = &v21;
    v18[4] = self;
    v13 = v7;
    v19 = v13;
    objc_msgSend(v12, "enumerateObjectsWithOptions:usingBlock:", 2 * v10, v18);
    if (objc_msgSend(v13, "count"))
    {
      if (CKIsRunningInMacCatalyst())
      {
        CKFrameworkBundle();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("TRANSCRIPT_TAPBACK_MENU"), &stru_1E276D870, CFSTR("ChatKit"));
        v15 = (__CFString *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v15 = &stru_1E276D870;
      }
      objc_msgSend(MEMORY[0x1E0CEA740], "menuWithTitle:image:identifier:options:children:", v15, 0, 0, 129, v13);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v16 = 0;
    }

    _Block_object_dispose(&v21, 8);
  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void __74__CKChatController_ClickyOrbConformance___tapbacksPaletteMenuForChatItem___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[6];
  id v16;
  BOOL v17;
  id location;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v3 = a2;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v22 = objc_msgSend(v3, "messageAcknowledgmentType");
  objc_msgSend(v3, "symbolName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v20[3];
  v6 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "selectedType");
  location = 0;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v7 = (void *)MEMORY[0x1E0CEA2A8];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __74__CKChatController_ClickyOrbConformance___tapbacksPaletteMenuForChatItem___block_invoke_2;
  v15[3] = &unk_1E274B100;
  v17 = v5 == v6;
  v15[4] = &v19;
  objc_copyWeak(&v16, &location);
  v15[5] = *(_QWORD *)(a1 + 48);
  objc_msgSend(v7, "actionWithHandler:", v15);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CEA638], "_systemImageNamed:", v4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setImage:", v9);
  if (v20[3] == 2000)
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "theme");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "messageAcknowledgment:acknowledgmentImageColor:", 0, objc_msgSend(v3, "themeColor"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CEA650], "configurationWithHierarchicalColor:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CEA638], "_systemImageNamed:withConfiguration:", v4, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setSelectedImage:", v14);

  }
  objc_msgSend(v8, "setState:", v5 == v6);
  objc_msgSend(*(id *)(a1 + 40), "addObject:", v8);

  objc_destroyWeak(&v16);
  objc_destroyWeak(&location);

  _Block_object_dispose(&v19, 8);
}

void __74__CKChatController_ClickyOrbConformance___tapbacksPaletteMenuForChatItem___block_invoke_2(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  if (*(_BYTE *)(a1 + 56))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CKDeselectedAcknowledgmentTypeForAcknowledgmentType(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "chat");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "sendMessageAcknowledgment:forChatItem:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

- (id)_tapbackActionForChatItem:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  _QWORD v12[4];
  id v13;
  id v14;
  id location;

  v4 = a3;
  location = 0;
  objc_initWeak(&location, self);
  objc_msgSend(MEMORY[0x1E0CEA638], "_systemImageNamed:", CFSTR("plus.bubble.tapback"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CEA2A8];
  CKFrameworkBundle();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("TRANSCRIPT_TAPBACK_MENU_ELLIPSIS"), &stru_1E276D870, CFSTR("ChatKit"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __68__CKChatController_ClickyOrbConformance___tapbackActionForChatItem___block_invoke;
  v12[3] = &unk_1E274B010;
  objc_copyWeak(&v14, &location);
  v9 = v4;
  v13 = v9;
  objc_msgSend(v6, "actionWithTitle:image:identifier:handler:", v8, v5, 0, v12);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);

  return v10;
}

void __68__CKChatController_ClickyOrbConformance___tapbackActionForChatItem___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "showFullScreenAcknowledgmentPickerForChatItem:", *(_QWORD *)(a1 + 32));

}

- (id)_inlineReplyActionForChatItem:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  void *v14;
  id v15;
  id location;

  v4 = a3;
  if (-[CKCoreChatController wantsReplyButton](self, "wantsReplyButton"))
  {
    location = 0;
    objc_initWeak(&location, self);
    if (CKIsRunningInMacCatalyst())
    {
      CKFrameworkBundle();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("INLINE_REPLY_MENU"), &stru_1E276D870, CFSTR("ChatKit"));
    }
    else
    {
      CKFrameworkBundle();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("INLINE_REPLY_ORB_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = (void *)MEMORY[0x1E0CEA2A8];
    objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("arrowshape.turn.up.backward"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = MEMORY[0x1E0C809B0];
    v12 = 3221225472;
    v13 = __72__CKChatController_ClickyOrbConformance___inlineReplyActionForChatItem___block_invoke;
    v14 = &unk_1E274A4C0;
    objc_copyWeak(&v15, &location);
    objc_msgSend(v8, "actionWithTitle:image:identifier:handler:", v7, v9, 0, &v11);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v4, "canInlineReply", v11, v12, v13, v14) & 1) == 0)
      objc_msgSend(v6, "setAttributes:", 1);
    objc_destroyWeak(&v15);

    objc_destroyWeak(&location);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void __72__CKChatController_ClickyOrbConformance___inlineReplyActionForChatItem___block_invoke(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  id v5;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "collectionViewController");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  if (CKIsRunningInMacCatalyst())
    objc_msgSend(v5, "hideTranscriptTimestampsIfNeeded");
  objc_msgSend(v5, "collectionView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "beginHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerClickyOrb"));

  v4 = objc_loadWeakRetained(v1);
  objc_msgSend(v4, "setWantsInlineOverlay:", 1);

}

- (BOOL)_shouldShowSaveStickerActionForChatItem:(id)a3
{
  void *v3;

  +[CKUtilities saveableStickerFromChatItem:](CKUtilities, "saveableStickerFromChatItem:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3 != 0;
}

- (id)_saveStickerActionForChatItem:(id)a3 sourceView:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id location;

  v6 = a3;
  v7 = a4;
  if (-[CKChatController _shouldShowSaveStickerActionForChatItem:](self, "_shouldShowSaveStickerActionForChatItem:", v6))
  {
    CKFrameworkBundle();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("SAVE_TO_STICKERS"), &stru_1E276D870, CFSTR("ChatKit"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CEA638], "_systemImageNamed:", CFSTR("square.and.arrow.down"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    location = 0;
    objc_initWeak(&location, self);
    v11 = (void *)MEMORY[0x1E0CEA2A8];
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __83__CKChatController_ClickyOrbConformance___saveStickerActionForChatItem_sourceView___block_invoke;
    v14[3] = &unk_1E274B0B0;
    v15 = v7;
    objc_copyWeak(&v17, &location);
    v16 = v6;
    objc_msgSend(v11, "actionWithTitle:image:identifier:handler:", v9, v10, 0, v14);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_destroyWeak(&v17);
    objc_destroyWeak(&location);

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void __83__CKChatController_ClickyOrbConformance___saveStickerActionForChatItem_sourceView___block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id WeakRetained;

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "shouldAnimateStickerOnSave");

  if ((v3 & 1) != 0)
    v4 = 0;
  else
    v4 = *(void **)(a1 + 32);
  v5 = v4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "saveStickerFromChatItem:pluginSourceView:animateFlyIn:", *(_QWORD *)(a1 + 40), v5, v3);

}

- (id)_addStickerActionForChatItem:(id)a3 parentChatItem:(id)a4 sourceView:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  id v26;
  id location;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "isReactWithAStickerEnabled");

  if (!v12
    || -[CKChatController _shouldShowSaveStickerActionForChatItem:](self, "_shouldShowSaveStickerActionForChatItem:", v8))
  {
    goto LABEL_9;
  }
  -[CKCoreChatController chat](self, "chat");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v13, "supportsCapabilities:", 0x8000)
    || (objc_msgSend(v8, "canAttachStickers") & 1) == 0)
  {

    goto LABEL_9;
  }
  -[CKCoreChatController chat](self, "chat");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "canSend");

  if (!v15)
  {
LABEL_9:
    v17 = 0;
    goto LABEL_10;
  }
  location = 0;
  objc_initWeak(&location, self);
  if (CKIsRunningInMacCatalyst())
  {
    CKFrameworkBundle();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("ADD_STICKER_ELLIPSIS"), &stru_1E276D870, CFSTR("ChatKit"));
  }
  else
  {
    CKFrameworkBundle();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("ADD_STICKER"), &stru_1E276D870, CFSTR("ChatKit"));
  }
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = (void *)MEMORY[0x1E0CEA2A8];
  objc_msgSend(MEMORY[0x1E0CEA638], "_systemImageNamed:", CFSTR("sticker.badge.plus"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __97__CKChatController_ClickyOrbConformance___addStickerActionForChatItem_parentChatItem_sourceView___block_invoke;
  v22[3] = &unk_1E274B150;
  objc_copyWeak(&v26, &location);
  v23 = v8;
  v24 = v9;
  v25 = v10;
  objc_msgSend(v20, "actionWithTitle:image:identifier:handler:", v19, v21, 0, v22);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_destroyWeak(&v26);
  objc_destroyWeak(&location);
LABEL_10:

  return v17;
}

void __97__CKChatController_ClickyOrbConformance___addStickerActionForChatItem_parentChatItem_sourceView___block_invoke(uint64_t a1)
{
  void *v2;
  id WeakRetained;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;

  IMStickersExtensionIdentifier();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  IMBalloonExtensionIDWithSuffix();
  v22 = (id)objc_claimAutoreleasedReturnValue();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "inputController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "appPresentationStyleForShowingPluginID:", v22);

  v6 = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(v6, "setIgnoresAutomaticScrollsTowardBottom:", 1);

  if (!v5)
  {
    v7 = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(v7, "updateChatItemBalloonViewAndStickerViews:hidden:", *(_QWORD *)(a1 + 32), 1);

    v8 = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(v8, "showFullScreenBalloonFocusForChatItem:", *(_QWORD *)(a1 + 40));

  }
  v9 = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(v9, "dismissKeyboard");

  v10 = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(v10, "inputController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = *(_QWORD *)(a1 + 32);
  v13 = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(v13, "collectionViewController");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "cellForChatItem:", *(_QWORD *)(a1 + 32));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "beginStickerReactionSessionWithChatItem:cell:", v12, v15);

  v16 = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(v16, "inputController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "showPluginWithExtensionIdentifier:sourceView:", v22, *(_QWORD *)(a1 + 48));

  v18 = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(v18, "inputController");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setStickerPickerMessagePartChatItem:", *(_QWORD *)(a1 + 32));

  v20 = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(v20, "inputController");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setStickerPickerMessagePartParentChatItem:", *(_QWORD *)(a1 + 40));

}

- (id)_retractionActionForChatItem:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id *v12;
  void *v13;
  id *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v19[4];
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id location;

  v4 = a3;
  location = 0;
  objc_initWeak(&location, self);
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v5, "isScheduledMessagesCoreEnabled") || objc_msgSend(v4, "scheduleType") != 2)
  {

    goto LABEL_7;
  }
  v6 = objc_msgSend(v4, "scheduleState");

  if (v6 != 2)
  {
LABEL_7:
    CKFrameworkBundle();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "localizedStringForKey:value:table:", CFSTR("UNDO_SEND_ACTION"), &stru_1E276D870, CFSTR("ChatKit"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "contextMenuUndoSendIcon");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v17 = (void *)MEMORY[0x1E0CEA2A8];
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __71__CKChatController_ClickyOrbConformance___retractionActionForChatItem___block_invoke_2;
    v19[3] = &unk_1E274B010;
    v12 = &v21;
    objc_copyWeak(&v21, &location);
    v20 = v4;
    objc_msgSend(v17, "actionWithTitle:image:identifier:handler:", v8, v10, 0, v19);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = &v20;
    goto LABEL_8;
  }
  CKFrameworkBundle();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("DELETE_SCHEDULED_ACTION"), &stru_1E276D870, CFSTR("ChatKit"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "contextMenuCancelScheduledMessageIcon");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = (void *)MEMORY[0x1E0CEA2A8];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __71__CKChatController_ClickyOrbConformance___retractionActionForChatItem___block_invoke;
  v22[3] = &unk_1E274B010;
  v12 = &v24;
  objc_copyWeak(&v24, &location);
  v23 = v4;
  objc_msgSend(v11, "actionWithTitle:image:identifier:handler:", v8, v10, 0, v22);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = &v23;
  if (!CKIsRunningInMacCatalyst())
    objc_msgSend(v13, "setAttributes:", 2);
LABEL_8:

  objc_destroyWeak(v12);
  objc_destroyWeak(&location);

  return v13;
}

void __71__CKChatController_ClickyOrbConformance___retractionActionForChatItem___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "actionCancelIsTappedForChatItem:", *(_QWORD *)(a1 + 32));

}

void __71__CKChatController_ClickyOrbConformance___retractionActionForChatItem___block_invoke_2(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "actionRetractIsTappedForChatItem:", *(_QWORD *)(a1 + 32));

}

- (void)showFullScreenBalloonFocusForChatItem:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  void *v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  _QWORD v26[5];
  uint8_t buf[4];
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v28 = v4;
      _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "showFullScreenBalloonFocusForChatItem, chatItem: %@", buf, 0xCu);
    }

  }
  -[CKCoreChatController chat](self, "chat");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "beginHoldingChatItemsUpdatesForReason:", *MEMORY[0x1E0D35380]);
  -[CKScrollViewController beginHoldingScrollGeometryUpdatesForReason:](self, "beginHoldingScrollGeometryUpdatesForReason:", CFSTR("FullscreenBalloonMenuVisible"));
  -[CKCoreChatController inputController](self, "inputController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isAppCardPresented");

  +[CKFullScreenBalloonViewDisplayConfiguration addStickerContextDismissingAppCardOnExit:](CKFullScreenBalloonViewDisplayConfiguration, "addStickerContextDismissingAppCardOnExit:", v8 ^ 1u);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _fullScreenBalloonViewControllerWithChatItem:displayConfiguration:](self, "_fullScreenBalloonViewControllerWithChatItem:displayConfiguration:", v4, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController setFullScreenBalloonViewController:](self, "setFullScreenBalloonViewController:", v10);
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v11, "canPresentOverKeyboard"))
    v12 = 0;
  else
    v12 = 6;
  objc_msgSend(v10, "setModalPresentationStyle:", v12);

  -[CKChatController addChildViewController:](self, "addChildViewController:", v10);
  -[CKChatController view](self, "view");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "view");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "addSubview:", v14);

  objc_msgSend(v10, "didMoveToParentViewController:", self);
  -[CKChatController view](self, "view");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "bounds");
  v17 = v16;
  -[CKChatController view](self, "view");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "bounds");
  v20 = v19;
  objc_msgSend(v10, "view");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setFrame:", 0.0, 0.0, v17, v20);

  objc_msgSend(v10, "view");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setNeedsLayout");

  objc_msgSend(v10, "view");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "layoutIfNeeded");

  if (!-[CKCoreChatController isInline](self, "isInline"))
  {
    -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "setNavBarContext:", 4);

    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __80__CKChatController_ClickyOrbConformance__showFullScreenBalloonFocusForChatItem___block_invoke;
    v26[3] = &unk_1E274A208;
    v26[4] = self;
    objc_msgSend(MEMORY[0x1E0CEABB0], "animateWithDuration:animations:", v26, 0.15);
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v25, OS_LOG_TYPE_INFO, "showFullScreenBalloonFocusForChatItem: _fullScreenBalloonViewController has been presented", buf, 2u);
    }

  }
}

void __80__CKChatController_ClickyOrbConformance__showFullScreenBalloonFocusForChatItem___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "navbarCanvasViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "backButtonView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAlpha:", 0.0);

  objc_msgSend(*(id *)(a1 + 32), "navbarCanvasViewController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "unifiedCallButton");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setAlpha:", 0.0);

}

- (id)_forwardAndCopyMenuForChatItem:(id)a3
{
  void *v3;
  void *v4;

  -[CKChatController _forwardAndCopyActionsForChatItem:](self, "_forwardAndCopyActionsForChatItem:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "count"))
  {
    objc_msgSend(MEMORY[0x1E0CEA740], "menuWithTitle:image:identifier:options:children:", &stru_1E276D870, 0, 0, 1, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (id)_forwardAndCopyActionsForChatItem:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _forwardActionForChatItem:](self, "_forwardActionForChatItem:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    objc_msgSend(v5, "addObject:", v6);
  v7 = -[CKChatController _copyActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:](self, "_copyActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:", v4, 1);
  if (v7)
    objc_msgSend(v5, "addObject:", v7);
  if (CKIsRunningInMacCatalyst())
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v8 = -[CKChatController _copyActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:](self, "_copyActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:", v4, 0);
      if (v8)
        objc_msgSend(v5, "addObject:", v8);

    }
  }

  return v5;
}

- (id)_forwardActionForChatItem:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  id v11;
  id v12;
  id location;

  v4 = a3;
  location = 0;
  objc_initWeak(&location, self);
  if (CKIsRunningInMacCatalyst()
    && !-[CKCoreChatController isInline](self, "isInline")
    && objc_msgSend(v4, "canForward"))
  {
    v5 = (void *)MEMORY[0x1E0CEA2A8];
    CKFrameworkBundle();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("FORWARD_ELLIPSIS"), &stru_1E276D870, CFSTR("ChatKit"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __68__CKChatController_ClickyOrbConformance___forwardActionForChatItem___block_invoke;
    v10[3] = &unk_1E274B010;
    objc_copyWeak(&v12, &location);
    v11 = v4;
    objc_msgSend(v5, "actionWithTitle:image:identifier:handler:", v7, 0, 0, v10);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_destroyWeak(&v12);
  }
  else
  {
    v8 = 0;
  }
  objc_destroyWeak(&location);

  return v8;
}

void __68__CKChatController_ClickyOrbConformance___forwardActionForChatItem___block_invoke(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  int v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setIsShowingPreview:", 0);

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "enableBalloonTextSelection");

  if (v5)
  {
    v6 = objc_loadWeakRetained(v2);
    objc_msgSend(v6, "collectionViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "selectedChatItems");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!objc_msgSend(v8, "count"))
    {
      v26[0] = *(_QWORD *)(a1 + 32);
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 1);
      v9 = objc_claimAutoreleasedReturnValue();

      v8 = (void *)v9;
    }
    v10 = objc_loadWeakRetained(v2);
    objc_msgSend(v10, "entryView");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "shouldShowSubject");
    v13 = objc_loadWeakRetained(v2);
    objc_msgSend(v13, "chatInputTranscriptIdentifier");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    +[CKComposition compositionForMessageParts:preserveSubject:contextIdentifier:](CKComposition, "compositionForMessageParts:preserveSubject:contextIdentifier:", v8, v12, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    v16 = objc_loadWeakRetained(v2);
    objc_msgSend(v16, "delegate");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_loadWeakRetained(v2);
    objc_msgSend(v17, "chatController:forwardComposition:", v18, v15);

  }
  else
  {
    v25 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v25, 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_loadWeakRetained(v2);
    objc_msgSend(v20, "entryView");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "shouldShowSubject");
    v23 = objc_loadWeakRetained(v2);
    objc_msgSend(v23, "chatInputTranscriptIdentifier");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    +[CKComposition compositionForMessageParts:preserveSubject:contextIdentifier:](CKComposition, "compositionForMessageParts:preserveSubject:contextIdentifier:", v19, v22, v24);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v15 = objc_loadWeakRetained(v2);
    objc_msgSend(v15, "delegate");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_loadWeakRetained(v2);
    objc_msgSend(v16, "chatController:forwardComposition:", v17, v8);
  }

}

- (id)_copyActionForChatItem:(id)a3 shouldUseTopMostChatItemIfAggregateChatItem:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v25;
  void *v26;
  CKChatController *v27;
  _QWORD v28[4];
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v4 = a4;
  v35 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (objc_msgSend(v6, "canCopy"))
  {
    v7 = v6;
    if (v4)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        -[CKChatController currentTopChatItemForAggregateChatItem:](self, "currentTopChatItemForAggregateChatItem:", v7);
        v8 = objc_claimAutoreleasedReturnValue();

        v7 = (id)v8;
      }
    }
    CKFrameworkBundle();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("COPY"), &stru_1E276D870, CFSTR("ChatKit"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v4)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v26 = v10;
        v27 = self;
        v30 = 0u;
        v31 = 0u;
        v32 = 0u;
        v33 = 0u;
        v25 = v7;
        objc_msgSend(v25, "mediaObjects");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
        if (v12)
        {
          v13 = v12;
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v17 = *(_QWORD *)v31;
          do
          {
            for (i = 0; i != v13; ++i)
            {
              if (*(_QWORD *)v31 != v17)
                objc_enumerationMutation(v11);
              v19 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
              if (objc_msgSend(v19, "mediaType") == 2)
              {
                ++v15;
              }
              else if (objc_msgSend(v19, "mediaType") == 3)
              {
                ++v14;
              }
              else
              {
                ++v16;
              }
            }
            v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
          }
          while (v13);
        }
        else
        {
          v14 = 0;
          v15 = 0;
          v16 = 0;
        }

        -[CKChatController _localizedTitleStringForAggregateAction:numberOfPhotos:numberOfVideos:numberOfOther:](v27, "_localizedTitleStringForAggregateAction:numberOfPhotos:numberOfVideos:numberOfOther:", 0, v14, v15, v16);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

      }
    }
    objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("doc.on.doc"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = (void *)MEMORY[0x1E0CEA2A8];
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __109__CKChatController_ClickyOrbConformance___copyActionForChatItem_shouldUseTopMostChatItemIfAggregateChatItem___block_invoke;
    v28[3] = &unk_1E274B178;
    v29 = v7;
    v23 = v7;
    objc_msgSend(v22, "actionWithTitle:image:identifier:handler:", v10, v21, 0, v28);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v20 = 0;
  }

  return v20;
}

void __109__CKChatController_ClickyOrbConformance___copyActionForChatItem_shouldUseTopMostChatItemIfAggregateChatItem___block_invoke(uint64_t a1)
{
  void *v1;
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "pasteboardItemProviders");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CEA810], "generalPasteboard");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setItemProviders:", v2);

}

- (void)actionEditIsTappedForChatItem:(id)a3
{
  -[CKChatController showMessageEditingViewControllerForChatItem:presentKeyboard:](self, "showMessageEditingViewControllerForChatItem:presentKeyboard:", a3, 1);
}

- (id)_deleteMenuForChatItem:(id)a3
{
  void *v3;
  void *v4;

  -[CKChatController _deleteActionsForChatItem:](self, "_deleteActionsForChatItem:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "count"))
  {
    objc_msgSend(MEMORY[0x1E0CEA740], "menuWithTitle:image:identifier:options:children:", &stru_1E276D870, 0, 0, 1, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (id)_deleteActionsForChatItem:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _deleteActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:](self, "_deleteActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:", v4, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    objc_msgSend(v5, "addObject:", v6);
  if (CKIsRunningInMacCatalyst())
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[CKChatController _deleteActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:](self, "_deleteActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:", v4, 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
        objc_msgSend(v5, "addObject:", v7);

    }
  }

  return v5;
}

- (id)_deleteActionForChatItem:(id)a3 shouldUseTopMostChatItemIfAggregateChatItem:(BOOL)a4
{
  _BOOL4 v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v30;
  NSObject *v32;
  _QWORD v33[4];
  id v34;
  id v35;
  id location;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v4 = a4;
  v42 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  if (v4)
  {
    objc_opt_class();
    v6 = v5;
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[CKChatController currentTopChatItemForAggregateChatItem:](self, "currentTopChatItemForAggregateChatItem:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  if (v6)
  {
    CKFrameworkBundle();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("DELETE_ELLIPSIS"), &stru_1E276D870, CFSTR("ChatKit"));
    v32 = objc_claimAutoreleasedReturnValue();

    if (!v4)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v40 = 0u;
        v30 = v6;
        objc_msgSend(v30, "mediaObjects");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
        if (v12)
        {
          v13 = *(_QWORD *)v38;
          do
          {
            for (i = 0; i != v12; ++i)
            {
              if (*(_QWORD *)v38 != v13)
                objc_enumerationMutation(v8);
              v15 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * i);
              if (objc_msgSend(v15, "mediaType") == 2)
              {
                ++v10;
              }
              else if (objc_msgSend(v15, "mediaType") == 3)
              {
                ++v9;
              }
              else
              {
                ++v11;
              }
            }
            v12 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v37, v41, 16);
          }
          while (v12);
        }

        -[CKChatController _localizedTitleStringForAggregateAction:numberOfPhotos:numberOfVideos:numberOfOther:](self, "_localizedTitleStringForAggregateAction:numberOfPhotos:numberOfVideos:numberOfOther:", 1, v9, v10, v11);
        v16 = objc_claimAutoreleasedReturnValue();

        v32 = v16;
      }
    }
    objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("trash"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    location = 0;
    objc_initWeak(&location, self);
    v18 = (void *)MEMORY[0x1E0CEA2A8];
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = __111__CKChatController_ClickyOrbConformance___deleteActionForChatItem_shouldUseTopMostChatItemIfAggregateChatItem___block_invoke;
    v33[3] = &unk_1E274B010;
    objc_copyWeak(&v35, &location);
    v34 = v6;
    objc_msgSend(v18, "actionWithTitle:image:identifier:handler:", v32, v17, 0, v33);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "setAttributes:", 2);

    objc_destroyWeak(&v35);
    objc_destroyWeak(&location);

    v20 = v32;
  }
  else
  {
    IMLogHandleForCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    v20 = v21;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      -[CKChatController(ClickyOrbConformance) _deleteActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:].cold.1(v21, v22, v23, v24, v25, v26, v27, v28);
      v19 = 0;
      v20 = v21;
    }
    else
    {
      v19 = 0;
    }
  }

  return v19;
}

void __111__CKChatController_ClickyOrbConformance___deleteActionForChatItem_shouldUseTopMostChatItemIfAggregateChatItem___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "collectionViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "deleteChatItems:sender:", v4, 0);

}

- (id)_exportMenuForChatItem:(id)a3
{
  void *v3;
  void *v4;

  -[CKChatController _exportActionsForChatItem:](self, "_exportActionsForChatItem:", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "count"))
  {
    objc_msgSend(MEMORY[0x1E0CEA740], "menuWithTitle:image:identifier:options:children:", &stru_1E276D870, 0, 0, 1, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

- (id)_exportActionsForChatItem:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _exportActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:](self, "_exportActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:", v4, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    objc_msgSend(v5, "addObject:", v6);
  if (CKIsRunningInMacCatalyst())
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[CKChatController _exportActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:](self, "_exportActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:", v4, 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
        objc_msgSend(v5, "addObject:", v7);

    }
  }

  return v5;
}

- (id)_exportActionForChatItem:(id)a3 shouldUseTopMostChatItemIfAggregateChatItem:(BOOL)a4
{
  id v4;
  id v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  _BOOL4 v39;
  const __CFString *v40;
  const __CFString *v41;
  void *v42;
  void *v43;
  void *v44;
  _BOOL4 v45;
  void *v47;
  _QWORD v48[4];
  id v49;
  id v50;
  id v51;
  CKChatController *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];
  uint64_t v58;
  uint8_t buf[4];
  id v60;
  uint64_t v61;

  v45 = a4;
  v61 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("square.and.arrow.down"));
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "canExport"))
  {
    v5 = v4;
    if (v45 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      -[CKChatController currentTopChatItemForAggregateChatItem:](self, "currentTopChatItemForAggregateChatItem:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v60 = v5;
          _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "Request to export top-most chat item for chatItem: %@", buf, 0xCu);
        }

      }
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v60 = v6;
          _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Request to export top-most chat item for chatItemToExport: %@", buf, 0xCu);
        }

      }
    }
    else
    {
      v6 = v5;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v10 = v6;
      -[NSObject mediaObjects](v10, "mediaObjects");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSObject momentShareURL](v10, "momentShareURL");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v10 = v6;
        -[NSObject mediaObject](v10, "mediaObject");
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = (void *)v11;
        if (v11)
        {
          v58 = v11;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v58, 1);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          CKMomentShareURLForMediaObjects(v44);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          IMLogHandleForCategory();
          v19 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            -[CKChatController(ClickyOrbConformance) _exportActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:].cold.1();

          v43 = 0;
          v44 = 0;
        }

      }
      else
      {
        IMLogHandleForCategory();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          -[CKChatController(ClickyOrbConformance) _exportActionForChatItem:shouldUseTopMostChatItemIfAggregateChatItem:].cold.2((uint64_t)v6, v10, v13, v14, v15, v16, v17, v18);
        v43 = 0;
        v44 = 0;
      }
    }

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "isRichAudioMessagesEnabled");

      CKFrameworkBundle();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v22;
      if (v21)
      {
        objc_msgSend(v22, "localizedStringForKey:value:table:", CFSTR("AUDIO_MESSAGE_SAVE"), &stru_1E276D870, CFSTR("ChatKit"));
        v24 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("waveform.badge.plus"));
        v23 = v47;
        v47 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_50:

        v34 = (void *)MEMORY[0x1E0CEA2A8];
        v48[0] = MEMORY[0x1E0C809B0];
        v48[1] = 3221225472;
        v48[2] = __111__CKChatController_ClickyOrbConformance___exportActionForChatItem_shouldUseTopMostChatItemIfAggregateChatItem___block_invoke;
        v48[3] = &unk_1E274B1C8;
        v49 = v6;
        v50 = v44;
        v51 = v43;
        v52 = self;
        v35 = v43;
        v36 = v44;
        v37 = v6;
        objc_msgSend(v34, "actionWithTitle:image:identifier:handler:", v24, v47, 0, v48);
        v9 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_51;
      }
      objc_msgSend(v22, "localizedStringForKey:value:table:", CFSTR("BALLOON_EXPORT_CALLOUT"), &stru_1E276D870, CFSTR("ChatKit"));
      v33 = objc_claimAutoreleasedReturnValue();
LABEL_49:
      v24 = (void *)v33;
      goto LABEL_50;
    }
    if (!CKIsRunningInMacCatalyst())
    {
      CKFrameworkBundle();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "localizedStringForKey:value:table:", CFSTR("BALLOON_EXPORT_CALLOUT"), &stru_1E276D870, CFSTR("ChatKit"));
      v33 = objc_claimAutoreleasedReturnValue();
      goto LABEL_49;
    }
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v25 = v44;
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v53, v57, 16);
    if (v26)
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = *(_QWORD *)v54;
      do
      {
        for (i = 0; i != v26; ++i)
        {
          if (*(_QWORD *)v54 != v30)
            objc_enumerationMutation(v25);
          v32 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * i);
          if (objc_msgSend(v32, "mediaType") == 2)
          {
            ++v28;
          }
          else if (objc_msgSend(v32, "mediaType") == 3)
          {
            ++v27;
          }
          else
          {
            ++v29;
          }
        }
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v53, v57, 16);
      }
      while (v26);

      if (v29)
      {
        CKFrameworkBundle();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "localizedStringForKey:value:table:", CFSTR("SAVE_TO_DOWNLOADS"), &stru_1E276D870, CFSTR("ChatKit"));
        v33 = objc_claimAutoreleasedReturnValue();
        goto LABEL_49;
      }
    }
    else
    {

      v28 = 0;
      v27 = 0;
    }
    if (!v45)
    {
      if (v28)
        v39 = 1;
      else
        v39 = v27 == 0;
      if (v27 == 0 && v28 != 0)
        v40 = CFSTR("_VIDEOS");
      else
        v40 = CFSTR("_ITEMS");
      if (v39)
        v41 = v40;
      else
        v41 = CFSTR("_PHOTOS");
      objc_msgSend(CFSTR("ADD_ALL_TO_PHOTOS_LIBRARY"), "stringByAppendingFormat:", v41);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      CKFrameworkBundle();
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "localizedStringForKey:value:table:", v23, &stru_1E276D870, CFSTR("ChatKit"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_50;
    }
    CKFrameworkBundle();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "localizedStringForKey:value:table:", CFSTR("ADD_TO_PHOTOS_LIBRARY"), &stru_1E276D870, CFSTR("ChatKit"));
    v33 = objc_claimAutoreleasedReturnValue();
    goto LABEL_49;
  }
  v9 = 0;
LABEL_51:

  return v9;
}

void __111__CKChatController_ClickyOrbConformance___exportActionForChatItem_shouldUseTopMostChatItemIfAggregateChatItem___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  CKMediaObjectExportManager *v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(*(id *)(a1 + 32), "canPerformQuickAction");
  v5 = IMOSLoggingEnabled();
  if (v4)
  {
    if (v5)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = objc_msgSend(*(id *)(a1 + 40), "count");
        *(_DWORD *)buf = 134217984;
        v14 = v7;
        _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "Will quick save %tu items", buf, 0xCu);
      }

    }
    +[CKUtilities quickSaveConfirmationAlertForMediaObjects:momentShareURL:popoverSource:metricsSource:cancelHandler:preSaveHandler:postSaveHandler:postAnyActionHandler:](CKUtilities, "quickSaveConfirmationAlertForMediaObjects:momentShareURL:popoverSource:metricsSource:cancelHandler:preSaveHandler:postSaveHandler:postAnyActionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0, *MEMORY[0x1E0D388C0], 0, 0, 0, 0);
    v8 = (CKMediaObjectExportManager *)objc_claimAutoreleasedReturnValue();
    if (v8)
      objc_msgSend(*(id *)(a1 + 56), "presentViewController:animated:completion:", v8, 1, 0);
  }
  else
  {
    if (v5)
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v10 = objc_msgSend(*(id *)(a1 + 40), "count");
        *(_DWORD *)buf = 134217984;
        v14 = v10;
        _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, "Will save %tu items", buf, 0xCu);
      }

    }
    v8 = -[CKMediaObjectExportManager initWithMediaObjects:]([CKMediaObjectExportManager alloc], "initWithMediaObjects:", *(_QWORD *)(a1 + 40));
    -[CKMediaObjectExportManager setMetricsSource:](v8, "setMetricsSource:", *MEMORY[0x1E0D388C0]);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __111__CKChatController_ClickyOrbConformance___exportActionForChatItem_shouldUseTopMostChatItemIfAggregateChatItem___block_invoke_212;
    v11[3] = &unk_1E274B1A0;
    v12 = *(id *)(a1 + 40);
    -[CKMediaObjectExportManager exportQueuedMediaObjectsWithCompletion:](v8, "exportQueuedMediaObjectsWithCompletion:", v11);

  }
}

void __111__CKChatController_ClickyOrbConformance___exportActionForChatItem_shouldUseTopMostChatItemIfAggregateChatItem___block_invoke_212(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (a2)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = objc_msgSend(*(id *)(a1 + 32), "count");
        v9 = 134217984;
        v10 = v7;
        _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "Successfully saved %tu items", (uint8_t *)&v9, 0xCu);
      }

    }
  }
  else
  {
    IMLogHandleForCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      __111__CKChatController_ClickyOrbConformance___exportActionForChatItem_shouldUseTopMostChatItemIfAggregateChatItem___block_invoke_212_cold_1((uint64_t)v5, a1, v8);

  }
}

- (id)_downgradeMessageActionForChatItem:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char isKindOfClass;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  id location;

  v4 = a3;
  location = 0;
  objc_initWeak(&location, self);
  if (objc_msgSend(v4, "canSendAsTextMessage"))
  {
    objc_msgSend(v4, "IMChatItem");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "IMChatItem");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) == 0)
    {
      v11 = 0;
      goto LABEL_10;
    }
    objc_msgSend(v5, "message");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_loadWeakRetained(&location);
    objc_msgSend(v9, "conversation");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!-[CKChatController _smsEnabled](self, "_smsEnabled")
      || !objc_msgSend(v8, "isFromMe")
      || (objc_msgSend(v8, "isDelivered") & 1) != 0)
    {
      goto LABEL_6;
    }
    objc_msgSend(v8, "error");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      v11 = 0;
    }
    else
    {
      if ((objc_msgSend(v10, "isGroupConversation") & 1) != 0)
        goto LABEL_6;
      v14 = objc_loadWeakRetained(&location);
      objc_msgSend(v14, "collectionViewController");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "chatItems");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v8, "guid");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "__ck_indexesOfPartsOfMessageWithGUID:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "objectsAtIndexes:", v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      v20 = objc_loadWeakRetained(&location);
      objc_msgSend(v20, "textInputContextIdentifier");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      +[CKComposition compositionForMessageParts:preserveSubject:contextIdentifier:](CKComposition, "compositionForMessageParts:preserveSubject:contextIdentifier:", v19, 1, v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();

      LOBYTE(v20) = objc_msgSend(v10, "canSendComposition:error:", v22, 0);
      if ((v20 & 1) == 0)
      {
LABEL_6:
        v11 = 0;
LABEL_7:

LABEL_10:
        goto LABEL_11;
      }
      objc_msgSend(v10, "fallbackSendString");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = (void *)MEMORY[0x1E0CEA2A8];
      objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("arrow.up.circle"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = __77__CKChatController_ClickyOrbConformance___downgradeMessageActionForChatItem___block_invoke;
      v25[3] = &unk_1E274B1F0;
      v26 = v8;
      v27 = v10;
      objc_copyWeak(&v28, &location);
      objc_msgSend(v23, "actionWithTitle:image:identifier:handler:", v13, v24, 0, v25);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      objc_destroyWeak(&v28);
    }

    goto LABEL_7;
  }
  v11 = 0;
LABEL_11:
  objc_destroyWeak(&location);

  return v11;
}

void __77__CKChatController_ClickyOrbConformance___downgradeMessageActionForChatItem___block_invoke(id *a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  id *v7;
  void *v8;
  void *v9;
  id WeakRetained;
  void *v11;
  id v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled())
  {
    CKLogCStringForType(29);
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(a1[4], "guid");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = a1[5];
      *(_DWORD *)buf = 138412546;
      v19 = v5;
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_18DFCD000, v4, OS_LOG_TYPE_INFO, "Manually downgrading message with GUID {%@} -- conversation:%@", buf, 0x16u);

    }
  }
  if (os_log_shim_legacy_logging_enabled() && _CKShouldLogExternal())
  {
    objc_msgSend(a1[4], "guid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = a1[5];
    _CKLogExternal();

  }
  v7 = a1 + 5;
  objc_msgSend(a1[5], "chat", v13, v14);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "downgradeMessage:manualDowngrade:", a1[4], 1);

  objc_msgSend(a1[4], "__ck_downgradedMessage");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend(WeakRetained, "collectionViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __77__CKChatController_ClickyOrbConformance___downgradeMessageActionForChatItem___block_invoke_219;
  v15[3] = &unk_1E274A108;
  v16 = *v7;
  v17 = v9;
  v12 = v9;
  objc_msgSend(v11, "updateTranscript:animated:completion:", v15, 0, 0);

}

void __77__CKChatController_ClickyOrbConformance___downgradeMessageActionForChatItem___block_invoke_219(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0D35910], "smsService");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "sendMessage:onService:newComposition:", v2, v3, 0);

}

- (id)_stickerDetailsActionForChatItem:(id)a3
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  id location;

  v4 = a3;
  location = 0;
  objc_initWeak(&location, self);
  objc_msgSend(v4, "visibleAssociatedMessageChatItems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(v4, "visibleAssociatedMessageChatItems");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = MEMORY[0x1E0C809B0];
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __75__CKChatController_ClickyOrbConformance___stickerDetailsActionForChatItem___block_invoke;
    v18[3] = &unk_1E274B218;
    v9 = v6;
    v19 = v9;
    objc_msgSend(v7, "enumerateObjectsUsingBlock:", v18);

    if (objc_msgSend(v9, "count"))
    {
      v10 = (void *)MEMORY[0x1E0CEA2A8];
      CKFrameworkBundle();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("BALLOON_STICKER_CALLOUT"), &stru_1E276D870, CFSTR("ChatKit"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("info.circle"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v16[0] = v8;
      v16[1] = 3221225472;
      v16[2] = __75__CKChatController_ClickyOrbConformance___stickerDetailsActionForChatItem___block_invoke_2;
      v16[3] = &unk_1E274A4C0;
      objc_copyWeak(&v17, &location);
      objc_msgSend(v10, "actionWithTitle:image:identifier:handler:", v12, v13, 0, v16);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      objc_destroyWeak(&v17);
    }
    else
    {
      v14 = 0;
    }

  }
  else
  {
    v14 = 0;
  }
  objc_destroyWeak(&location);

  return v14;
}

void __75__CKChatController_ClickyOrbConformance___stickerDetailsActionForChatItem___block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

void __75__CKChatController_ClickyOrbConformance___stickerDetailsActionForChatItem___block_invoke_2(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setWantsStickerDetails:", 1);

}

- (id)_emojiDetailsActionForChatItem:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  id location;

  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = v4;
    objc_msgSend(v5, "emojiImageMediaObjectsInMessagePartText");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "count"))
    {
      CKFrameworkBundle();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("EMOJI_DETAILS_CONTEXT_MENU_ACTION_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0CEA638], "_systemImageNamed:", CFSTR("info.circle"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      location = 0;
      objc_initWeak(&location, self);
      v10 = (void *)MEMORY[0x1E0CEA2A8];
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __73__CKChatController_ClickyOrbConformance___emojiDetailsActionForChatItem___block_invoke;
      v13[3] = &unk_1E274A4C0;
      objc_copyWeak(&v14, &location);
      objc_msgSend(v10, "actionWithTitle:image:identifier:handler:", v8, v9, 0, v13);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_destroyWeak(&v14);
      objc_destroyWeak(&location);

    }
    else
    {
      v11 = 0;
    }

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void __73__CKChatController_ClickyOrbConformance___emojiDetailsActionForChatItem___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setWantsEmojiDetails:", 1);

}

- (id)_showTimestampsAction
{
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  void *v15;
  CKChatController *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  void *v20;
  CKChatController *v21;

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isShowingTranscriptTimestamps");
  v5 = (void *)MEMORY[0x1E0CEA2A8];
  CKFrameworkBundle();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v4)
  {
    objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("HIDE_TRANSCRIPT_TIMESTAMPS"), &stru_1E276D870, CFSTR("ChatKit"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = MEMORY[0x1E0C809B0];
    v18 = 3221225472;
    v19 = __63__CKChatController_ClickyOrbConformance___showTimestampsAction__block_invoke;
    v20 = &unk_1E274B178;
    v21 = self;
    v9 = &v17;
  }
  else
  {
    objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("SHOW_TRANSCRIPT_TIMESTAMPS"), &stru_1E276D870, CFSTR("ChatKit"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = MEMORY[0x1E0C809B0];
    v13 = 3221225472;
    v14 = __63__CKChatController_ClickyOrbConformance___showTimestampsAction__block_invoke_2;
    v15 = &unk_1E274B178;
    v16 = self;
    v9 = &v12;
  }
  objc_msgSend(v5, "actionWithTitle:image:identifier:handler:", v8, 0, 0, v9, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void __63__CKChatController_ClickyOrbConformance___showTimestampsAction__block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "hideTranscriptTimestampsIfNeeded");

}

void __63__CKChatController_ClickyOrbConformance___showTimestampsAction__block_invoke_2(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "showTranscriptTimestamps");

}

- (id)_mediaAttributionActionForChatItem:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  __CFString *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  _QWORD v26[4];
  id v27;
  id v28;
  id v29;
  uint8_t buf[8];

  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v4, "mediaObject");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "transfer");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "attributionInfo");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("bundle-id"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v8, "isEqualToString:", CFSTR("com.apple.messages.MSMessageExtensionBalloonPlugin:0000000000:com.apple.Stickers.UserGenerated.MessagesExtension")))
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v9 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, "Not showing media attribution action: user generation sticker plugin", buf, 2u);
          }

        }
        v10 = 0;
      }
      else
      {
        objc_msgSend(v7, "__ck_localizedAppNameForTranscriptAttribution");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (v13)
        {
          *(_QWORD *)buf = 0;
          objc_initWeak((id *)buf, self);
          v14 = (void *)MEMORY[0x1E0CEA2A8];
          v15 = (void *)MEMORY[0x1E0CB3940];
          CKFrameworkBundle();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("MEDIA_ATTRIBUTION_TITLE_FORMAT"), &stru_1E276D870, CFSTR("ChatKit"));
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "stringWithFormat:", v17, v13);
          v18 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v19, "userInterfaceLayoutDirection");

          if (v20 == 1)
            v21 = CFSTR("\u200F");
          else
            v21 = CFSTR("\u200E");
          -[__CFString stringByAppendingString:](v21, "stringByAppendingString:", v18);
          v22 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0CEA638], "_systemImageNamed:", CFSTR("appstore.capsule"));
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v26[0] = MEMORY[0x1E0C809B0];
          v26[1] = 3221225472;
          v26[2] = __77__CKChatController_ClickyOrbConformance___mediaAttributionActionForChatItem___block_invoke;
          v26[3] = &unk_1E274B1F0;
          v27 = v7;
          v28 = v5;
          objc_copyWeak(&v29, (id *)buf);
          objc_msgSend(v14, "actionWithTitle:image:identifier:handler:", v22, v23, 0, v26);
          v10 = (void *)objc_claimAutoreleasedReturnValue();

          objc_destroyWeak(&v29);
          objc_destroyWeak((id *)buf);
        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v24 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18DFCD000, v24, OS_LOG_TYPE_INFO, "Not showing media attribution action: title is nil", buf, 2u);
            }

          }
          v10 = 0;
        }

      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18DFCD000, v12, OS_LOG_TYPE_INFO, "Not showing media attribution action: no attribution", buf, 2u);
        }

      }
      v10 = 0;
    }

  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "Not showing media attribution action: not a CKAttachmentMessagePartChatItem", buf, 2u);
      }

    }
    v10 = 0;
  }

  return v10;
}

void __77__CKChatController_ClickyOrbConformance___mediaAttributionActionForChatItem___block_invoke(id *a1)
{
  dispatch_time_t v2;
  _QWORD block[4];
  id v4;
  id v5;
  id v6;

  v2 = dispatch_time(0, 200000000);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __77__CKChatController_ClickyOrbConformance___mediaAttributionActionForChatItem___block_invoke_2;
  block[3] = &unk_1E274B240;
  v4 = a1[4];
  v5 = a1[5];
  objc_copyWeak(&v6, a1 + 6);
  dispatch_after(v2, MEMORY[0x1E0C80D38], block);
  objc_destroyWeak(&v6);

}

void __77__CKChatController_ClickyOrbConformance___mediaAttributionActionForChatItem___block_invoke_2(id *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id WeakRetained;
  id v8;

  objc_msgSend(a1[4], "objectForKey:", *MEMORY[0x1E0D37F18]);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[4], "objectForKey:", *MEMORY[0x1E0D37F30]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v8, "longLongValue"));
    v3 = objc_claimAutoreleasedReturnValue();

    v8 = (id)v3;
  }
  objc_msgSend(a1[4], "objectForKey:", *MEMORY[0x1E0D37F70]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "transfer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isSticker");

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend(WeakRetained, "_presentBrowserOrAppStoreForAdamID:url:identifier:isForSticker:", v8, v4, v2, v6);

}

- (id)_moreActionForChatItem:(id)a3
{
  return -[CKChatController _moreActionForChatItem:configureForCommSafety:](self, "_moreActionForChatItem:configureForCommSafety:", a3, 0);
}

- (id)_moreActionForChatItem:(id)a3 configureForCommSafety:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  char v11;
  void *v12;
  void *v13;
  CKChatController *v14;
  void *v15;
  _QWORD v17[4];
  id v18;
  id v19;
  id location;

  v4 = a4;
  v6 = a3;
  if (objc_msgSend(v6, "wantsMoreMenu"))
  {
    location = 0;
    v7 = objc_initWeak(&location, self);
    -[CKCoreChatController conversation](self, "conversation");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v8, "isPending") & 1) != 0)
    {
      v9 = 0;
    }
    else
    {
      v10 = objc_loadWeakRetained(&location);
      v11 = objc_msgSend(v10, "isInline");

      if ((v11 & 1) != 0)
      {
        v9 = 0;
LABEL_11:
        objc_destroyWeak(&location);
        goto LABEL_12;
      }
      CKFrameworkBundle();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("BALLOON_MORE_CALLOUT"), &stru_1E276D870, CFSTR("ChatKit"));
      self = (CKChatController *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("ellipsis.circle"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v4)
      {
        CKFrameworkBundle();
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("DELETE_ELLIPSIS"), &stru_1E276D870, CFSTR("ChatKit"));
        v14 = (CKChatController *)objc_claimAutoreleasedReturnValue();

        self = v14;
      }
      v15 = (void *)MEMORY[0x1E0CEA2A8];
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = __88__CKChatController_ClickyOrbConformance___moreActionForChatItem_configureForCommSafety___block_invoke;
      v17[3] = &unk_1E274B010;
      objc_copyWeak(&v19, &location);
      v18 = v6;
      objc_msgSend(v15, "actionWithTitle:image:identifier:handler:", self, v8, 0, v17);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_destroyWeak(&v19);
    }

    goto LABEL_11;
  }
  v9 = 0;
LABEL_12:

  return v9;
}

void __88__CKChatController_ClickyOrbConformance___moreActionForChatItem_configureForCommSafety___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "actionMoreIsTappedForChatItem:", *(_QWORD *)(a1 + 32));

}

- (id)_votingViewForChatItem:(id)a3 containingViewController:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  void *v41;
  int v42;
  void *v43;
  double v44;
  double v45;
  CKAttributionViewAccessoryView *v46;
  CKGroupAcknowledgmentVotingAccessoryView *v47;
  void *v48;
  double v49;
  double v50;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  _QWORD v58[4];
  id v59;
  id location;
  CGRect v61;

  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "view");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "safeAreaLayoutGuide");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "layoutFrame");
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;

  -[CKChatController presentedViewController](self, "presentedViewController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[CKChatController presentedViewController](self, "presentedViewController");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "view");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    -[CKChatController view](self, "view");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
  }

  objc_msgSend(v20, "window");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController view](self, "view");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "convertRect:fromView:", v22, v11, v13, v15, v17);
  v56 = v24;
  v57 = v23;
  v54 = v26;
  v55 = v25;

  objc_msgSend(v20, "window");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "bounds");
  v52 = v29;
  v53 = v28;

  -[CKChatController systemMinimumLayoutMargins](self, "systemMinimumLayoutMargins");
  v31 = v30;
  v33 = v32;
  -[CKChatController view](self, "view");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend(v34, "effectiveUserInterfaceLayoutDirection");
  if (v35)
    v36 = v33;
  else
    v36 = v31;
  if (v35)
    v37 = v31;
  else
    v37 = v33;

  v39 = *MEMORY[0x1E0C9D648];
  v38 = *(double *)(MEMORY[0x1E0C9D648] + 8);
  v61.origin.x = v11;
  v61.origin.y = v13;
  v61.size.width = v15;
  v61.size.height = v17;
  v40 = CGRectGetWidth(v61) - (v36 + v37);
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = objc_msgSend(v41, "isEmojiTapbacksEnabled");

  if (v42)
  {
    location = 0;
    objc_initWeak(&location, self);
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "attributionViewHeight");
    v45 = v44;

    v46 = [CKAttributionViewAccessoryView alloc];
    v58[0] = MEMORY[0x1E0C809B0];
    v58[1] = 3221225472;
    v58[2] = __90__CKChatController_ClickyOrbConformance___votingViewForChatItem_containingViewController___block_invoke;
    v58[3] = &unk_1E274B268;
    objc_copyWeak(&v59, &location);
    v47 = -[CKAttributionViewAccessoryView initWithFrame:chatItem:layoutBounds:windowSize:saveStickerHandler:](v46, "initWithFrame:chatItem:layoutBounds:windowSize:saveStickerHandler:", v6, v58, v39, v38, v40, v45, v57, v56, v55, v54, v53, v52);
    objc_destroyWeak(&v59);
    objc_destroyWeak(&location);
  }
  else
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "messageAcknowledgementVotingViewHeight");
    v50 = v49;

    v47 = -[CKGroupAcknowledgmentVotingAccessoryView initWithFrame:chatItem:]([CKGroupAcknowledgmentVotingAccessoryView alloc], "initWithFrame:chatItem:", v6, v39, v38, v40, v50);
  }

  return v47;
}

void __90__CKChatController_ClickyOrbConformance___votingViewForChatItem_containingViewController___block_invoke(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  id v5;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "dismissContextMenuInteractionMenu");

  v5 = objc_loadWeakRetained(v2);
  objc_msgSend(v5, "saveStickerFromTapbackAttributionFlow:", v3);

}

- (id)_localizedTitleStringForAggregateAction:(int64_t)a3 numberOfPhotos:(int64_t)a4 numberOfVideos:(int64_t)a5 numberOfOther:(int64_t)a6
{
  const __CFString *v7;
  BOOL v8;
  const __CFString *v9;
  __CFString *v10;
  int64_t v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  __CFString *v19;
  void *v20;

  v7 = CFSTR("_ITEMS");
  if (a6 <= 0)
  {
    if (!a4 || a5)
    {
      if (a5)
        v8 = a4 == 0;
      else
        v8 = 0;
      if (v8)
        v7 = CFSTR("_VIDEOS");
    }
    else
    {
      v7 = CFSTR("_PHOTOS");
    }
  }
  v9 = CFSTR("DELETE");
  if (a3 != 1)
    v9 = 0;
  if (a3)
    v10 = (__CFString *)v9;
  else
    v10 = CFSTR("COPY");
  v11 = a5 + a4 + a6;
  -[__CFString stringByAppendingFormat:](v10, "stringByAppendingFormat:", v7);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0CB3940];
  CKFrameworkBundle();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "localizedStringForKey:value:table:", v12, &stru_1E276D870, CFSTR("ChatKit"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "localizedStringWithFormat:", v15, v11);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "userInterfaceLayoutDirection");

  if (v18 == 1)
    v19 = CFSTR("\u200F");
  else
    v19 = CFSTR("\u200E");
  -[__CFString stringByAppendingString:](v19, "stringByAppendingString:", v16);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

- (id)_balloonViewForCellAtIndexPath:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  objc_class *v9;
  void *v10;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKChatController collectionView](self, "collectionView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "cellForItemAtIndexPath:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v6, "balloonView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = (objc_class *)objc_opt_class();
        NSStringFromClass(v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138412290;
        v13 = v10;
        _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "_balloonViewForCellAtIndexPath will return nil for class: %@", (uint8_t *)&v12, 0xCu);

      }
    }
    v7 = 0;
  }

  return v7;
}

- (id)_parentChatItemForIndexPath:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  void *v9;
  void *v10;
  __CFString *v11;
  NSObject *v12;
  NSObject *v13;
  const __CFString *v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  const __CFString *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKChatController _parentIndexPathForCellAtIndexPath:](self, "_parentIndexPathForCellAtIndexPath:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "chatItems");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v8 = objc_msgSend(v5, "item");
    if (v8 < objc_msgSend(v7, "count"))
    {
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "chatItems");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "objectAtIndex:", objc_msgSend(v5, "item"));
      v11 = (__CFString *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        goto LABEL_17;
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          v18 = 138412290;
          v19 = v11;
          _os_log_impl(&dword_18DFCD000, v12, OS_LOG_TYPE_INFO, "_parentChatItemForIndexPath will return nil. chatItem: %@ is not of class CKMessagePartChatItem", (uint8_t *)&v18, 0xCu);
        }

      }
    }
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      if (v5)
        v14 = CFSTR("NO");
      else
        v14 = CFSTR("YES");
      v15 = objc_msgSend(v5, "item");
      v16 = objc_msgSend(v7, "count");
      v18 = 138412802;
      v19 = v14;
      v20 = 2048;
      v21 = v15;
      v22 = 2048;
      v23 = v16;
      _os_log_impl(&dword_18DFCD000, v13, OS_LOG_TYPE_INFO, "_parentChatItemForIndexPath returning nil. ParentIndexPath is nil: %@; ParentIndexPath.item: %ld; chatItems.count: %ld",
        (uint8_t *)&v18,
        0x20u);
    }

  }
  v11 = 0;
LABEL_17:

  return v11;
}

- (id)_parentIndexPathForCellAtIndexPath:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  unint64_t v22;
  void *v23;
  NSObject *v24;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKChatController collectionView](self, "collectionView");
  v5 = objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v5, "cellForItemAtIndexPath:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  LOBYTE(v5) = objc_opt_isKindOfClass();
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if ((v5 & 1) == 0)
  {
    objc_msgSend(v7, "chatItems");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v22 = objc_msgSend(v4, "item");
    if (v22 >= objc_msgSend(v9, "count"))
    {
      if (!IMOSLoggingEnabled())
        goto LABEL_22;
      OSLogHandleForIMFoundationCategory();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        v26 = 134218240;
        v27 = objc_msgSend(v4, "item");
        v28 = 2048;
        v29 = objc_msgSend(v9, "count");
        _os_log_impl(&dword_18DFCD000, v24, OS_LOG_TYPE_INFO, "Attempted to get parent index for chat item out of idx range. idx %lu count %lu", (uint8_t *)&v26, 0x16u);
      }
      goto LABEL_13;
    }
    objc_msgSend(v9, "objectAtIndex:", objc_msgSend(v4, "item"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v21 = v4;

      goto LABEL_9;
    }

LABEL_22:
    v21 = 0;
    goto LABEL_23;
  }
  objc_msgSend(v7, "associatedChatItems");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = objc_msgSend(v4, "item");
  if (v10 >= objc_msgSend(v9, "count"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        v26 = 134218240;
        v27 = objc_msgSend(v4, "item");
        v28 = 2048;
        v29 = objc_msgSend(v9, "count");
        _os_log_impl(&dword_18DFCD000, v24, OS_LOG_TYPE_INFO, "Attempted to get parent index for associated chat item out of idx range. idx %lu count %lu", (uint8_t *)&v26, 0x16u);
      }
LABEL_13:

      goto LABEL_22;
    }
    goto LABEL_22;
  }
  objc_msgSend(v9, "objectAtIndex:", objc_msgSend(v4, "item"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "chatItems");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "associatedChatItemGUID");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v11, "associatedMessageRange");
  v17 = objc_msgSend(v13, "__ck_indexOfParentChatItemWithMesssageGUID:associatedMessageRange:", v14, v15, v16);

  if (v17 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_21:

    goto LABEL_22;
  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "chatItems");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "objectAtIndex:", v17);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v11 = v20;
    goto LABEL_21;
  }
  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForItem:inSection:", v17, 0);
  v21 = (id)objc_claimAutoreleasedReturnValue();

LABEL_9:
LABEL_23:

  return v21;
}

- (BOOL)_hasPreviewViewControllerForChatItem:(id)a3
{
  id v3;
  void *v4;
  char isKindOfClass;

  v3 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v3, "mediaObject");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v4, "shouldBeQuickLooked") & 1) != 0)
    {
      isKindOfClass = 1;
    }
    else
    {
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
    }

  }
  else
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
  }

  return isKindOfClass & 1;
}

- (BOOL)_balloonViewOfCell:(id)a3 containsPoint:(CGPoint)a4 fromView:(id)a5
{
  CGFloat y;
  CGFloat x;
  id v8;
  id v9;
  void *v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  CGPoint v20;
  CGRect v21;

  y = a4.y;
  x = a4.x;
  v8 = a5;
  v9 = a3;
  objc_msgSend(v9, "balloonView");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "frame");
  objc_msgSend(v8, "convertRect:fromView:", v9);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;

  v21.origin.x = v12;
  v21.origin.y = v14;
  v21.size.width = v16;
  v21.size.height = v18;
  v20.x = x;
  v20.y = y;
  LOBYTE(v9) = CGRectContainsPoint(v21, v20);

  return (char)v9;
}

- (BOOL)_point:(CGPoint)a3 visuallyIntersectsBalloonViewInCollectionView:(id)a4
{
  double y;
  double x;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  BOOL v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  y = a3.y;
  x = a3.x;
  v26 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  objc_msgSend(v7, "indexPathForItemAtPoint:", x, y);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "cellForItemAtIndexPath:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "hitTest:withEvent:", 0, x, y);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      && v10
      && (objc_msgSend(v9, "balloonView"),
          v11 = (void *)objc_claimAutoreleasedReturnValue(),
          v12 = objc_msgSend(v10, "isDescendantOfView:", v11),
          v11,
          (v12 & 1) != 0))
    {
      v13 = 1;
    }
    else
    {
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      objc_msgSend(v7, "visibleCells", 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v22;
        while (2)
        {
          for (i = 0; i != v16; ++i)
          {
            if (*(_QWORD *)v22 != v17)
              objc_enumerationMutation(v14);
            v19 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * i);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0
              && -[CKChatController _balloonViewOfCell:containsPoint:fromView:](self, "_balloonViewOfCell:containsPoint:fromView:", v19, v7, x, y))
            {
              v13 = 1;
              goto LABEL_18;
            }
          }
          v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
          if (v16)
            continue;
          break;
        }
      }
      v13 = 0;
LABEL_18:

    }
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

- (BOOL)contextMenuInteractionIsOutsideOfVisibleBalloonCells:(id)a3
{
  id v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;

  v4 = a3;
  -[CKChatController collectionView](self, "collectionView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "locationInView:", v5);
  v7 = v6;
  v9 = v8;

  -[CKChatController collectionView](self, "collectionView");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(self) = -[CKChatController _point:visuallyIntersectsBalloonViewInCollectionView:](self, "_point:visuallyIntersectsBalloonViewInCollectionView:", v10, v7, v9);

  return self ^ 1;
}

- (void)contextMenuInteraction:(id)a3 willDisplayMenuForConfiguration:(id)a4 animator:(id)a5
{
  if (-[CKChatController contextMenuInteractionIsOutsideOfVisibleBalloonCells:](self, "contextMenuInteractionIsOutsideOfVisibleBalloonCells:", a3, a4, a5))
  {
    -[CKChatController clearEntryViewPasteConfiguration](self, "clearEntryViewPasteConfiguration");
  }
}

- (void)contextMenuInteraction:(id)a3 willEndForConfiguration:(id)a4 animator:(id)a5
{
  if (-[CKChatController contextMenuInteractionIsOutsideOfVisibleBalloonCells:](self, "contextMenuInteractionIsOutsideOfVisibleBalloonCells:", a3, a4, a5))
  {
    -[CKChatController restoreEntryViewPasteConfiguration](self, "restoreEntryViewPasteConfiguration");
  }
}

- (id)contextMenuInteraction:(id)a3 configurationForMenuAtLocation:(CGPoint)a4
{
  id v5;
  NSObject *v6;
  void *v7;
  int v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (-[CKChatController contextMenuInteractionIsOutsideOfVisibleBalloonCells:](self, "contextMenuInteractionIsOutsideOfVisibleBalloonCells:", v5))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v9 = 136315138;
        v10 = "-[CKChatController(ClickyOrbConformance) contextMenuInteraction:configurationForMenuAtLocation:]";
        _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "%s - context menu interaction is outside of visible balloonCell", (uint8_t *)&v9, 0xCu);
      }

    }
    -[CKChatController contextMenuInteractionOutsideOfVisibleBalloonCells](self, "contextMenuInteractionOutsideOfVisibleBalloonCells");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (id)contextMenuInteractionOutsideOfVisibleBalloonCells
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  _QWORD v10[4];
  id v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0CEA740];
  -[CKChatController _showTimestampsAction](self, "_showTimestampsAction");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "menuWithTitle:children:", &stru_1E276D870, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (void *)MEMORY[0x1E0CEA4B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __92__CKChatController_ClickyOrbConformance__contextMenuInteractionOutsideOfVisibleBalloonCells__block_invoke;
  v10[3] = &unk_1E274B290;
  v11 = v5;
  v7 = v5;
  objc_msgSend(v6, "configurationWithIdentifier:previewProvider:actionProvider:", CFSTR("CKTranscriptContextMenuConfigurationIdentifier"), 0, v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id __92__CKChatController_ClickyOrbConformance__contextMenuInteractionOutsideOfVisibleBalloonCells__block_invoke(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

- (void)setupClickyOrbForConversation:(id)a3
{
  void *v4;
  void *v5;
  id v6;
  id v7;

  if (CKIsRunningInMacCatalyst())
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "collectionView");
    v7 = (id)objc_claimAutoreleasedReturnValue();

    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA4B8]), "initWithDelegate:", self);
    v6 = objc_alloc_init(MEMORY[0x1E0CEABB0]);
    objc_msgSend(v7, "setBackgroundView:", v6);
    objc_msgSend(v7, "addInteraction:", v5);

  }
}

- (void)setClickyOrbChatItem:(id)a3
{
  objc_setAssociatedObject(self, sel_clickyOrbChatItem, a3, (void *)1);
}

- (CKMessagePartChatItem)clickyOrbChatItem
{
  return (CKMessagePartChatItem *)objc_getAssociatedObject(self, sel_clickyOrbChatItem);
}

- (id)transcriptCollectionViewController:(id)a3 accessoriesForContextMenuWithConfiguration:(id)a4 layoutAnchor:(id *)a5
{
  id v7;
  id v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  -[CKChatController _chatItemForContextMenuWithConfiguration:](self, "_chatItemForContextMenuWithConfiguration:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v9, "IMChatItem");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "guid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController clickyOrbChatItem](self, "clickyOrbChatItem");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "IMChatItem");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "guid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138412546;
      v19 = v12;
      v20 = 2112;
      v21 = v15;
      _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, " accessoriesForContextMenuWithConfiguration chatItem: %@, self.clickyOrb:%@", (uint8_t *)&v18, 0x16u);

    }
  }
  -[CKChatController contextMenuAccessoryViewsForChatItem:containingViewController:](self, "contextMenuAccessoryViewsForChatItem:containingViewController:", v9, self);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

- (CGAffineTransform)stickerPreviewTransform
{
  uint64_t v4;
  void *v5;

  v4 = MEMORY[0x193FF3C18](CFSTR("_MSStickerDragPreviewContainerView"), CFSTR("Messages"));
  if (v4 && (v5 = (void *)v4, (objc_opt_respondsToSelector() & 1) != 0))
    return (CGAffineTransform *)objc_msgSend(v5, "targetPreviewTransform");
  else
    return CGAffineTransformMakeScale(retstr, 1.25, 1.25);
}

- (id)_stickerDragPreviewForDragItem:(id)a3 defaultPreview:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  _OWORD v29[3];
  uint8_t buf[4];
  id v31;
  __int16 v32;
  id v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  id v37;
  __int16 v38;
  void *v39;
  uint64_t v40;
  CGPoint v41;

  v40 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[CKChatController dropSession](self, "dropSession");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _stickerDropProposalForItem:inSession:](self, "_stickerDropProposalForItem:inSession:", v6, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      -[CKChatController dropSession](self, "dropSession");
      v11 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "dragItem");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "previewCenter");
      NSStringFromCGPoint(v41);
      v13 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "targetBalloonIndex");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138413314;
      v31 = v6;
      v32 = 2112;
      v33 = v11;
      v34 = 2112;
      v35 = v12;
      v36 = 2112;
      v37 = v13;
      v38 = 2112;
      v39 = v14;
      _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, "_stickerDragPreviewForDragItem: got dropProposal for item: %@, session: %@, dragItem: %@, previewCenter: %@, targetBalloonIndex: %@", buf, 0x34u);

    }
  }
  objc_msgSend(v9, "targetBalloonIndex");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    v16 = (void *)objc_msgSend(objc_alloc((Class)MEMORY[0x193FF3C18](CFSTR("_MSStickerDragPreviewContainerView"), CFSTR("Messages"))), "initWithIsDropAnimation:", 1);
    objc_msgSend(v7, "target");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_alloc(MEMORY[0x1E0CEA570]);
    objc_msgSend(v17, "container");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "center");
    v21 = v20;
    v23 = v22;
    if (v6)
      objc_msgSend(v6, "_suggestedTransform");
    else
      memset(v29, 0, sizeof(v29));
    v27 = (void *)objc_msgSend(v18, "initWithContainer:center:transform:", v19, v29, v21, v23);

    objc_msgSend(v7, "retargetedPreviewWithTarget:", v27);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "_setPreviewContainer:", v16);
    -[CKChatController _prepareForDropAnimationWithItem:preview:](self, "_prepareForDropAnimationWithItem:preview:", v6, v26);

  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        -[CKChatController dropSession](self, "dropSession");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v31 = v6;
        v32 = 2112;
        v33 = v25;
        _os_log_impl(&dword_18DFCD000, v24, OS_LOG_TYPE_INFO, "_stickerDragPreviewForDragItem: Not returning a UITargetedDragPreview which will abort the stick animation. There was no valid target balloon sufficiently close to the drop preview for item: %@, drop session: %@.", buf, 0x16u);

      }
    }
    v26 = 0;
  }

  return v26;
}

- (id)hashKeyForDragItem:(id)a3
{
  if (!a3)
    return &stru_1E276D870;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lu"), objc_msgSend(a3, "hash"));
  return (id)objc_claimAutoreleasedReturnValue();
}

- (void)_prepareForDropAnimationWithItem:(id)a3 preview:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  NSObject *v16;
  int v17;
  id v18;
  __int16 v19;
  id v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  IMLogHandleForCategory();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    objc_msgSend(v7, "_previewContainer");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = 138412802;
    v18 = v6;
    v19 = 2112;
    v20 = v7;
    v21 = 2112;
    v22 = v9;
    _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "_prepareForDropAnimationWithItem dragItem: %@, dragPreview: %@, container: %@", (uint8_t *)&v17, 0x20u);

  }
  -[CKChatController hashKeyForDragItem:](self, "hashKeyForDragItem:", v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController activeDropPreviews](self, "activeDropPreviews");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setObject:forKey:", v7, v10);

  objc_msgSend(v7, "_previewContainer");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_opt_respondsToSelector();

  if ((v13 & 1) != 0)
  {
    objc_msgSend(v7, "_previewContainer");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setDefersFinalDropAnimationCompletion:", 1);

  }
  objc_msgSend(v7, "_previewContainer");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v15)
  {
    IMLogHandleForCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      -[CKChatController(CKChatController_Stickers) _prepareForDropAnimationWithItem:preview:].cold.1();

  }
}

- (id)_stickerDropProposalForSession:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  objc_msgSend(v4, "items", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    v9 = *(_QWORD *)v15;
LABEL_3:
    v10 = 0;
    v11 = v8;
    while (1)
    {
      if (*(_QWORD *)v15 != v9)
        objc_enumerationMutation(v5);
      -[CKChatController _stickerDropProposalForItem:inSession:](self, "_stickerDropProposalForItem:inSession:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v10), v4);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v8, "targetBalloonIndex");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
        break;
      ++v10;
      v11 = v8;
      if (v7 == v10)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v7)
          goto LABEL_3;
        break;
      }
    }
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

- (id)_stickerDropProposalForItem:(id)a3 inSession:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  NSObject *v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  NSObject *v22;
  void *v23;
  double v24;
  double v25;
  CKTranscriptStickerDropProposal *v26;
  NSObject *v28;
  CGAffineTransformComponents v29;
  CGAffineTransform t1;
  CGAffineTransform t2;
  CGAffineTransform v32;
  CGAffineTransform v33;
  CGAffineTransform buf;

  v6 = a3;
  v7 = a4;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "collectionView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *MEMORY[0x1E0C9D538];
  v11 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  if ((objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    IMLogHandleForCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.a) = 0;
      _os_log_impl(&dword_18DFCD000, v12, OS_LOG_TYPE_INFO, "_stickerDropProposalForItem:inSession: checking view geometry", (uint8_t *)&buf, 2u);
    }

    -[CKChatController view](self, "view");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "window");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_previewCenterForVisibleItem:inView:", v6, v14);
    v10 = v15;
    v11 = v16;

    objc_msgSend(v7, "_previewSizeForVisibleItem:", v6);
    v18 = v17;
    v20 = v19;
    memset(&buf, 0, sizeof(buf));
    -[CKChatController stickerPreviewTransform](self, "stickerPreviewTransform");
    CGAffineTransformInvert(&buf, &v33);
    memset(&v32, 0, sizeof(v32));
    if (v6)
      objc_msgSend(v6, "_suggestedTransform");
    else
      memset(&t2, 0, sizeof(t2));
    t1 = buf;
    CGAffineTransformConcat(&v32, &t1, &t2);
    t1 = v32;
    CGAffineTransformDecompose(&v29, &t1);
    -[CKChatController selectedBalloonIntersectingRect:](self, "selectedBalloonIntersectingRect:", v10 - v18 * v29.scale.width * 0.5, v11 - v20 * v29.scale.width * 0.5);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v21)
    {
      IMLogHandleForCategory();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        LOWORD(t1.a) = 0;
        _os_log_impl(&dword_18DFCD000, v28, OS_LOG_TYPE_INFO, "_stickerDropProposalForItem:inSession: no view geometry; will try touch rect",
          (uint8_t *)&t1,
          2u);
      }

    }
  }
  else
  {
    v21 = 0;
  }
  if (!v21)
  {
    if (v9)
    {
      objc_msgSend(v9, "window");
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (v21)
      {
        IMLogHandleForCategory();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf.a) = 0;
          _os_log_impl(&dword_18DFCD000, v22, OS_LOG_TYPE_INFO, "_stickerDropProposalForItem:inSession: no view geometry; trying touch rect",
            (uint8_t *)&buf,
            2u);
        }

        -[CKChatController _selectedBalloonFromTouchForDropSession:](self, "_selectedBalloonFromTouchForDropSession:", v7);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "window");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "locationInView:", v23);
        v10 = v24;
        v11 = v25;

      }
    }
  }
  v26 = -[CKTranscriptStickerDropProposal initWithDragItem:previewCenter:targetBalloonIndex:]([CKTranscriptStickerDropProposal alloc], "initWithDragItem:previewCenter:targetBalloonIndex:", v6, v21, v10, v11);

  return v26;
}

- (id)_selectedBalloonFromTouchForDropSession:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGFloat v14;
  CGFloat v15;
  double v16;
  void *v17;
  CGRect v19;
  CGRect v20;

  v4 = a3;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "collectionView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6 && (objc_msgSend(v6, "window"), v8 = (void *)objc_claimAutoreleasedReturnValue(), v8, v8))
  {
    objc_msgSend(v7, "window");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "locationInView:", v9);
    v11 = v10;
    v13 = v12;

    v14 = *MEMORY[0x1E0C9D648];
    v15 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v19.origin.x = *(CGFloat *)MEMORY[0x1E0C9D648];
    v19.origin.y = v15;
    v19.size.width = 44.0;
    v19.size.height = 44.0;
    v16 = v11 - CGRectGetWidth(v19) * 0.5;
    v20.origin.x = v14;
    v20.origin.y = v15;
    v20.size.width = 44.0;
    v20.size.height = 44.0;
    -[CKChatController selectedBalloonIntersectingRect:](self, "selectedBalloonIntersectingRect:", v16, v13 - CGRectGetHeight(v20) * 0.5, 44.0, 44.0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v17 = 0;
  }

  return v17;
}

- (void)_sendStickerForDragItem:(id)a3 previewSize:(CGSize)a4 dropLocation:(CGPoint)a5
{
  CGFloat y;
  CGFloat x;
  CGFloat height;
  CGFloat width;
  id v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  int v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  int v22;
  void *v23;
  void *v24;
  void *v25;
  char v26;
  void *v27;
  void *v28;
  void *v29;
  int v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  NSObject *v38;
  _QWORD v39[4];
  NSObject *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  _QWORD v45[4];
  id v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  char v50;
  _QWORD v51[4];
  id v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  CGFloat v57;
  CGFloat v58;
  _QWORD v59[3];
  int v60;
  _QWORD v61[5];
  id v62;
  _QWORD v63[5];
  __CFString *v64;
  _QWORD v65[5];
  id v66;
  _QWORD v67[5];
  id v68;
  _QWORD v69[4];
  id v70;
  _QWORD aBlock[5];
  id v72;
  _QWORD *v73;
  _BYTE *v74;
  CGFloat v75;
  CGFloat v76;
  _QWORD v77[5];
  id v78;
  _BYTE buf[24];
  void *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  CGPoint v85;

  y = a5.y;
  x = a5.x;
  height = a4.height;
  width = a4.width;
  v84 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  IMLogHandleForCategory();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    v85.x = x;
    v85.y = y;
    NSStringFromCGPoint(v85);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v12;
    _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "_sendStickerForDragItem: dragItem: %@, dropLocation %@", buf, 0x16u);

  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x5010000000;
  v80 = &unk_18E8EEE6F;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  if (v10)
    objc_msgSend(v10, "_suggestedTransform");
  v77[0] = 0;
  v77[1] = v77;
  v77[2] = 0x3032000000;
  v77[3] = __Block_byref_object_copy__8;
  v77[4] = __Block_byref_object_dispose__8;
  v78 = 0;
  -[CKChatController hashKeyForDragItem:](self, "hashKeyForDragItem:", v10);
  v78 = (id)objc_claimAutoreleasedReturnValue();
  v13 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke;
  aBlock[3] = &unk_1E274BF58;
  aBlock[4] = self;
  v73 = v77;
  v14 = v10;
  v75 = x;
  v76 = y;
  v72 = v14;
  v74 = buf;
  v15 = _Block_copy(aBlock);
  objc_msgSend(v14, "itemProvider");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "hasItemConformingToTypeIdentifier:", CFSTR("com.apple.sticker.mediaPayload"));

  if (v17)
  {
    v18 = MEMORY[0x193FF3C18](CFSTR("_MSMessageMediaPayload"), CFSTR("Messages"));
    objc_msgSend(v14, "itemProvider");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v69[0] = v13;
    v69[1] = 3221225472;
    v69[2] = __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_114;
    v69[3] = &unk_1E274BFA8;
    v70 = v15;
    v20 = (id)objc_msgSend(v19, "loadObjectOfClass:completionHandler:", v18, v69);

  }
  else
  {
    objc_msgSend(v14, "itemProvider");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "hasItemConformingToTypeIdentifier:", CFSTR("com.apple.sticker"));

    if (v22)
    {
      v67[0] = 0;
      v67[1] = v67;
      v67[2] = 0x3032000000;
      v67[3] = __Block_byref_object_copy__8;
      v67[4] = __Block_byref_object_dispose__8;
      v68 = 0;
      v65[0] = 0;
      v65[1] = v65;
      v65[2] = 0x3032000000;
      v65[3] = __Block_byref_object_copy__8;
      v65[4] = __Block_byref_object_dispose__8;
      v66 = 0;
      v63[0] = 0;
      v63[1] = v63;
      v63[2] = 0x3032000000;
      v63[3] = __Block_byref_object_copy__8;
      v63[4] = __Block_byref_object_dispose__8;
      v64 = &stru_1E276D870;
      v61[0] = 0;
      v61[1] = v61;
      v61[2] = 0x3032000000;
      v61[3] = __Block_byref_object_copy__8;
      v61[4] = __Block_byref_object_dispose__8;
      v62 = 0;
      objc_msgSend(v14, "itemProvider");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = (void *)*MEMORY[0x1E0CEC580];
      objc_msgSend((id)*MEMORY[0x1E0CEC580], "identifier");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend(v23, "hasRepresentationConformingToTypeIdentifier:fileOptions:", v25, 0);

      objc_msgSend(v14, "itemProvider");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = (void *)*MEMORY[0x1E0CEC610];
      objc_msgSend((id)*MEMORY[0x1E0CEC610], "identifier");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend(v27, "hasRepresentationConformingToTypeIdentifier:fileOptions:", v29, 0);

      v59[0] = 0;
      v59[1] = v59;
      v59[2] = 0x2020000000;
      v60 = 0;
      v51[0] = v13;
      v51[1] = 3221225472;
      v51[2] = __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_2;
      v51[3] = &unk_1E274BFD0;
      v53 = v65;
      v54 = v67;
      v55 = v63;
      v56 = v61;
      v52 = v15;
      v57 = width;
      v58 = height;
      v31 = _Block_copy(v51);
      if ((v26 & 1) != 0)
      {
        if (v30)
        {
          objc_msgSend(v14, "itemProvider");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v28, "identifier");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v45[0] = v13;
          v45[1] = 3221225472;
          v45[2] = __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_120;
          v45[3] = &unk_1E274BFF8;
          v47 = v61;
          v48 = v63;
          v49 = v59;
          v50 = v26;
          v46 = v31;
          v34 = (id)objc_msgSend(v32, "loadDataRepresentationForTypeIdentifier:completionHandler:", v33, v45);

        }
        objc_msgSend(v14, "itemProvider");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "identifier");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v39[0] = v13;
        v39[1] = 3221225472;
        v39[2] = __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_125;
        v39[3] = &unk_1E274C020;
        v41 = v67;
        v42 = v65;
        v43 = v59;
        v44 = v30;
        v40 = v31;
        v37 = (id)objc_msgSend(v35, "loadFileRepresentationForTypeIdentifier:completionHandler:", v36, v39);

        v38 = v40;
      }
      else
      {
        IMLogHandleForCategory();
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          -[CKChatController(CKChatController_Stickers) _sendStickerForDragItem:previewSize:dropLocation:].cold.1();
      }

      _Block_object_dispose(v59, 8);
      _Block_object_dispose(v61, 8);

      _Block_object_dispose(v63, 8);
      _Block_object_dispose(v65, 8);

      _Block_object_dispose(v67, 8);
    }
  }

  _Block_object_dispose(v77, 8);
  _Block_object_dispose(buf, 8);

}

void __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke(uint64_t a1, void *a2, CGFloat a3, CGFloat a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  id v14;
  id v15;
  int8x16_t v16;
  uint64_t v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint64_t v21;
  int8x16_t v22;
  id v23;
  __int128 v24;
  CGFloat v25;
  CGFloat v26;
  id location;
  uint8_t buf[4];
  id v29;
  __int16 v30;
  void *v31;
  uint64_t v32;
  CGSize v33;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  objc_msgSend(*(id *)(a1 + 32), "activeDropPreviews");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKey:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "_previewContainer");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v9, "_previewContainer");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v11 = 0;
  }

  location = 0;
  objc_initWeak(&location, *(id *)(a1 + 32));
  if (v11)
  {
    IMLogHandleForCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v33.width = a3;
      v33.height = a4;
      NSStringFromCGSize(v33);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v29 = v7;
      v30 = 2112;
      v31 = v13;
      _os_log_impl(&dword_18DFCD000, v12, OS_LOG_TYPE_INFO, "Scheduling performAfterDropAnimation to commit sticker %@, size: %@", buf, 0x16u);

    }
  }
  else
  {
    IMLogHandleForCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_cold_1();
  }

  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_104;
  v18[3] = &unk_1E274BF30;
  v14 = v7;
  v19 = v14;
  objc_copyWeak(&v23, &location);
  v15 = *(id *)(a1 + 40);
  v16 = *(int8x16_t *)(a1 + 48);
  v24 = *(_OWORD *)(a1 + 64);
  v25 = a3;
  v26 = a4;
  v17 = *(_QWORD *)(a1 + 32);
  v20 = v15;
  v21 = v17;
  v22 = vextq_s8(v16, v16, 8uLL);
  objc_msgSend(v11, "performAfterDropAnimation:", v18);

  objc_destroyWeak(&v23);
  objc_destroyWeak(&location);

}

void __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_104(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id WeakRetained;
  void *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  __int128 v23;
  void *v24;
  void *v25;
  _OWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  IMLogHandleForCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 32);
    LODWORD(v26[0]) = 138412290;
    *(_QWORD *)((char *)v26 + 4) = v3;
    _os_log_impl(&dword_18DFCD000, v2, OS_LOG_TYPE_INFO, "performAfterDropAnimation: callback for sticker: %@", (uint8_t *)v26, 0xCu);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
  objc_msgSend(*(id *)(a1 + 32), "stickerPackGUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "stickerPackGUID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "length");

    if (!v7)
    {
      IMLogHandleForCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_104_cold_2(a1 + 32, v8, v9, v10, v11, v12, v13, v14);

    }
    v15 = *(_OWORD **)(*(_QWORD *)(a1 + 56) + 8);
    v16 = *(_QWORD *)(a1 + 32);
    v17 = objc_msgSend(MEMORY[0x1E0D39B18], "dragItemIsRepositioningSticker:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 48), "_stickerChatItemForDragItem:", *(_QWORD *)(a1 + 40));
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = *(double *)(a1 + 80);
    v20 = *(double *)(a1 + 88);
    v21 = *(double *)(a1 + 96);
    v22 = *(double *)(a1 + 104);
    v23 = v15[3];
    v26[0] = v15[2];
    v26[1] = v23;
    v26[2] = v15[4];
    objc_msgSend(WeakRetained, "_commitSticker:toCoordinate:withInitialSize:dropPreviewTransform:isRepositioningSticker:localStickerChatItem:", v16, v26, v17, v18, v19, v20, v21, v22);
  }
  else
  {
    IMLogHandleForCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_104_cold_1((_QWORD *)(a1 + 32), a1, v18);
  }

  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  objc_msgSend(WeakRetained, "activeDropPreviews");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "removeObjectForKey:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));

  objc_msgSend(WeakRetained, "inputController");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "stickerDropAnimationFinished");

  objc_msgSend(WeakRetained, "setIgnoresAutomaticScrollsTowardBottom:", 0);
}

void __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_114(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t buf[16];

  v5 = a3;
  v6 = a2;
  IMLogHandleForCategory();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_114_cold_1();
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Finished loading _MSMessageMediaPayload from item provider.", buf, 2u);
  }

  objc_msgSend(MEMORY[0x1E0D39B18], "stickerWithMSMessageMediaPayload:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "sourceFrame");
  v11 = v10;
  v13 = v12;

  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_115;
  v16[3] = &unk_1E274BF80;
  v14 = *(id *)(a1 + 32);
  v17 = v9;
  v18 = v14;
  v19 = v11;
  v20 = v13;
  v15 = v9;
  dispatch_async(MEMORY[0x1E0C80D38], v16);

}

uint64_t __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_115(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double, double))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), *(double *)(a1 + 48), *(double *)(a1 + 56));
}

void __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_2(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  __int128 v11;

  v2 = objc_alloc(MEMORY[0x1E0D39B18]);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  objc_msgSend(MEMORY[0x1E0D39828], "defaultEmojiStickerPackID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v2, "initWithStickerID:stickerPackID:fileURL:accessibilityLabel:moodCategory:stickerName:", v3, v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), 0, 0);

  objc_msgSend(v5, "setExternalURI:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_3;
  v8[3] = &unk_1E274BF80;
  v6 = *(id *)(a1 + 32);
  v9 = v5;
  v10 = v6;
  v11 = *(_OWORD *)(a1 + 72);
  v7 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], v8);

}

uint64_t __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double, double))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), *(double *)(a1 + 48), *(double *)(a1 + 56));
}

void __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_120(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  const void *v8;
  void *v9;
  BOOL v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  signed int v21;
  BOOL v22;
  uint8_t buf[4];
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "localeIdentifier");
    v8 = (const void *)CEMCreateEmojiLocaleData();

    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v5, 4);
    if (v9)
      v10 = v8 == 0;
    else
      v10 = 1;
    if (v10)
    {
      if (!v8)
        goto LABEL_15;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("sticker:///emoji/identifier/%@"), v9);
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v14 = *(void **)(v13 + 40);
      *(_QWORD *)(v13 + 40) = v12;

      v15 = CEMEmojiTokenCreateWithString();
      if (v15)
      {
        v16 = (const void *)v15;
        v17 = CEMEmojiTokenCopyName();
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v19 = *(void **)(v18 + 40);
        *(_QWORD *)(v18 + 40) = v17;

        CFRelease(v16);
      }
    }
    CFRelease(v8);
LABEL_15:

    goto LABEL_16;
  }
  IMLogHandleForCategory();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v24 = v6;
    _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "emoji sticker drag failed with error: %@", buf, 0xCu);
  }

LABEL_16:
  v20 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  if (*(_BYTE *)(a1 + 64))
    v22 = v21 < 1;
  else
    v22 = 0;
  if (!v22)
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_125(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  id v18;
  NSObject *v19;
  unsigned int *v20;
  signed int v21;
  BOOL v22;
  id v23;
  uint8_t buf[4];
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  IMLogHandleForCategory();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (v8)
    {
      *(_DWORD *)buf = 138412290;
      v25 = v5;
      _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "received emoji sticker drag: %@", buf, 0xCu);
    }

    v9 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v5, "path");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    IMSharedHelperMD5HashOfFileAtPath();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringWithFormat:", CFSTR("%@-sticker"), v11);
    v7 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "pathExtension");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      -[NSObject stringByAppendingPathExtension:](v7, "stringByAppendingPathExtension:", v12);
      v13 = objc_claimAutoreleasedReturnValue();

      v7 = v13;
    }
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "im_randomTemporaryFileURLWithFileName:", v7);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 0;
    v17 = objc_msgSend(v16, "copyItemAtURL:toURL:error:", v5, v15, &v23);
    v18 = v23;

    if ((v17 & 1) == 0)
    {
      IMLogHandleForCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_125_cold_1();

    }
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v15);
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v7);
    v20 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
    if (*(_BYTE *)(a1 + 64))
      v22 = v21 < 1;
    else
      v22 = 0;
    if (!v22)
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else if (v8)
  {
    *(_DWORD *)buf = 138412290;
    v25 = v6;
    _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "emoji sticker drag failed with error: %@", buf, 0xCu);
  }

}

- (void)_commitSticker:(id)a3 toCoordinate:(CGPoint)a4 withInitialSize:(CGSize)a5 dropPreviewTransform:(CGAffineTransform *)a6
{
  __int128 v6;
  _OWORD v7[3];

  v6 = *(_OWORD *)&a6->c;
  v7[0] = *(_OWORD *)&a6->a;
  v7[1] = v6;
  v7[2] = *(_OWORD *)&a6->tx;
  -[CKChatController _commitSticker:toCoordinate:withInitialSize:dropPreviewTransform:isRepositioningSticker:localStickerChatItem:](self, "_commitSticker:toCoordinate:withInitialSize:dropPreviewTransform:isRepositioningSticker:localStickerChatItem:", a3, v7, 0, 0, a4.x, a4.y, a5.width, a5.height);
}

- (void)sendSticker:(id)a3 toCoordinate:(CGPoint)a4 withInitialSize:(CGSize)a5 dropPreviewTransform:(CGAffineTransform *)a6 isRepositioningSticker:(BOOL)a7 localStickerChatItem:(id)a8
{
  __int128 v8;
  _OWORD v9[3];

  v8 = *(_OWORD *)&a6->c;
  v9[0] = *(_OWORD *)&a6->a;
  v9[1] = v8;
  v9[2] = *(_OWORD *)&a6->tx;
  -[CKChatController _commitSticker:toCoordinate:withInitialSize:dropPreviewTransform:isRepositioningSticker:localStickerChatItem:](self, "_commitSticker:toCoordinate:withInitialSize:dropPreviewTransform:isRepositioningSticker:localStickerChatItem:", a3, v9, a7, a8, a4.x, a4.y, a5.width, a5.height);
}

- (void)_commitSticker:(id)a3 toCoordinate:(CGPoint)a4 withInitialSize:(CGSize)a5 dropPreviewTransform:(CGAffineTransform *)a6 isRepositioningSticker:(BOOL)a7 localStickerChatItem:(id)a8
{
  _BOOL8 v9;
  double height;
  double width;
  double y;
  double x;
  id v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  __int128 v22;
  double v23;
  double v24;
  double v25;
  void *v26;
  void *v27;
  CGAffineTransform v28;
  CGAffineTransform t1;
  CGAffineTransform v30;
  CGAffineTransform v31;
  CGAffineTransform buf;
  uint64_t v33;
  CGPoint v34;
  CGSize v35;

  v9 = a7;
  height = a5.height;
  width = a5.width;
  y = a4.y;
  x = a4.x;
  v33 = *MEMORY[0x1E0C80C00];
  v16 = a3;
  v17 = a8;
  IMLogHandleForCategory();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    v34.x = x;
    v34.y = y;
    NSStringFromCGPoint(v34);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v35.width = width;
    v35.height = height;
    NSStringFromCGSize(v35);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    NSStringFromBOOL();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf.a) = 138413058;
    *(_QWORD *)((char *)&buf.a + 4) = v16;
    WORD2(buf.b) = 2112;
    *(_QWORD *)((char *)&buf.b + 6) = v19;
    HIWORD(buf.c) = 2112;
    *(_QWORD *)&buf.d = v20;
    LOWORD(buf.tx) = 2112;
    *(_QWORD *)((char *)&buf.tx + 2) = v21;
    _os_log_impl(&dword_18DFCD000, v18, OS_LOG_TYPE_INFO, "_commitSticker: %@, coordinate: %@, initialSize: %@ repositioning: %@", (uint8_t *)&buf, 0x2Au);

  }
  memset(&buf, 0, sizeof(buf));
  -[CKChatController stickerPreviewTransform](self, "stickerPreviewTransform");
  CGAffineTransformInvert(&buf, &v31);
  t1 = buf;
  memset(&v30, 0, sizeof(v30));
  v22 = *(_OWORD *)&a6->c;
  *(_OWORD *)&v28.a = *(_OWORD *)&a6->a;
  *(_OWORD *)&v28.c = v22;
  *(_OWORD *)&v28.tx = *(_OWORD *)&a6->tx;
  CGAffineTransformConcat(&v30, &t1, &v28);
  v28 = v30;
  memset(&t1, 0, sizeof(t1));
  CGAffineTransformDecompose((CGAffineTransformComponents *)&t1, &v28);
  v23 = fmax(t1.a, 0.0);
  if (v23 <= 0.0)
    v24 = 1.0;
  else
    v24 = v23;
  objc_msgSend(v16, "calculatePreviewScaleWithTargetSize:", width, height);
  +[CKBrowserDragControllerTarget targetWithScreenCoordinate:initialSize:scale:meshScaleFactor:rotation:associatedLayoutIntent:stickerIsRepositioning:stickerChatItem:](CKBrowserDragControllerTarget, "targetWithScreenCoordinate:initialSize:scale:meshScaleFactor:rotation:associatedLayoutIntent:stickerIsRepositioning:stickerChatItem:", 0, v9, v17, x, y, width, height, v25 * v24, 0.4, t1.d);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKCoreChatController inputController](self, "inputController");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "commitSticker:withDragTarget:draggedSticker:", v16, v26, 0);

}

- (void)_sendNewStickerFromDropSession:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  double v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  id v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  id v34;
  __int16 v35;
  void *v36;
  uint64_t v37;
  CGPoint v38;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKChatController _stickerDropProposalForSession:](self, "_stickerDropProposalForSession:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      -[CKChatController dropSession](self, "dropSession");
      v7 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "dragItem");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "previewCenter");
      NSStringFromCGPoint(v38);
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "targetBalloonIndex");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 138413058;
      v30 = v7;
      v31 = 2112;
      v32 = v8;
      v33 = 2112;
      v34 = v9;
      v35 = 2112;
      v36 = v10;
      _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "_sendNewStickerFromDropSession: got dropProposal for session: %@, dragItem: %@, previewCenter: %@, targetBalloonIndex: %@", (uint8_t *)&v29, 0x2Au);

    }
  }
  objc_msgSend(v5, "targetBalloonIndex");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v5, "dragItem");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController dropSession](self, "dropSession");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = 138412546;
        v30 = v21;
        v31 = 2112;
        v32 = v22;
        _os_log_impl(&dword_18DFCD000, v20, OS_LOG_TYPE_INFO, "_sendNewStickerFromDropSession: Aborting the sticker drop because there was no valid target balloon sufficiently close to the drop preview for item: %@, drop session: %@.", (uint8_t *)&v29, 0x16u);

      }
    }
    objc_msgSend(v5, "dragItem");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController hashKeyForDragItem:](self, "hashKeyForDragItem:", v23);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKChatController activeDropPreviews](self, "activeDropPreviews");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "objectForKey:", v17);
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v25, "_previewContainer");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v25, "_previewContainer");
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v27)
      {
LABEL_16:
        -[CKChatController activeDropPreviews](self, "activeDropPreviews");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "removeObjectForKey:", v17);

        goto LABEL_17;
      }
      objc_msgSend(v27, "setDefersFinalDropAnimationCompletion:", 0);
    }
    else
    {
      v27 = v26;
    }

    goto LABEL_16;
  }
  objc_msgSend(v5, "dragItem");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_previewSizeForVisibleItem:", v12);
  v14 = v13;
  v16 = v15;

  objc_msgSend(v5, "dragItem");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "previewCenter");
  -[CKChatController _sendStickerForDragItem:previewSize:dropLocation:](self, "_sendStickerForDragItem:previewSize:dropLocation:", v17, v14, v16, v18, v19);
LABEL_17:

}

- (id)cellIndexPathForDragTarget:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *i;
  void *v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;
  CGPoint v25;
  CGRect v26;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "collectionView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "window");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "screenCoordinate");
  objc_msgSend(v7, "convertPoint:toView:", v6);
  v9 = v8;
  v11 = v10;

  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  objc_msgSend(v6, "indexPathsForVisibleItems", 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (id)objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v13; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v14)
          objc_enumerationMutation(v12);
        v16 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
        if (!objc_msgSend(v16, "section"))
        {
          objc_msgSend(v6, "cellForItemAtIndexPath:", v16);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "frame");
          v25.x = v9;
          v25.y = v11;
          if (CGRectContainsPoint(v26, v25))
          {
            v13 = v16;

            goto LABEL_13;
          }

        }
      }
      v13 = (id)objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      if (v13)
        continue;
      break;
    }
  }
LABEL_13:

  return v13;
}

- (void)sendSticker:(id)a3 withMediaObject:(id)a4 composition:(id)a5 parentMessagePartChatItem:(id)a6
{
  -[CKChatController sendSticker:withMediaObject:composition:parentMessagePartChatItem:messageSummaryInfo:](self, "sendSticker:withMediaObject:composition:parentMessagePartChatItem:messageSummaryInfo:", a3, a4, a5, a6, 0);
}

- (void)sendSticker:(id)a3 withMediaObject:(id)a4 composition:(id)a5 parentMessagePartChatItem:(id)a6 messageSummaryInfo:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  char v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  id v24;
  CKChatController *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint8_t buf[4];
  id v32;
  __int16 v33;
  id v34;
  __int16 v35;
  NSObject *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  if (v12)
  {
    if (v13)
    {
      if (v14)
      {
        -[CKCoreChatController conversation](self, "conversation");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = 0;
        v18 = objc_msgSend(v17, "canSendComposition:error:", v14, &v30);
        v19 = v30;

        if ((v18 & 1) != 0)
        {
          +[CKStickerDropCommSafetySendContext contextWithSticker:composition:mediaObject:parentMessagePartChatItem:messageSummaryInfo:](CKStickerDropCommSafetySendContext, "contextWithSticker:composition:mediaObject:parentMessagePartChatItem:messageSummaryInfo:", v12, v14, v13, v15, v16);
          v20 = objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "transfer");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "fileURL");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23[0] = MEMORY[0x1E0C809B0];
          v23[1] = 3221225472;
          v23[2] = __132__CKChatController_CKChatController_Stickers__sendSticker_withMediaObject_composition_parentMessagePartChatItem_messageSummaryInfo___block_invoke;
          v23[3] = &unk_1E274C048;
          v24 = v12;
          v25 = self;
          v26 = v13;
          v27 = v14;
          v28 = v15;
          v29 = v16;
          -[CKChatController presentCommSafetyInterventionIfNecessaryForFileURL:withSendContext:completion:](self, "presentCommSafetyInterventionIfNecessaryForFileURL:withSendContext:completion:", v22, v20, v23);

        }
        else
        {
          IMLogHandleForCategory();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412802;
            v32 = v14;
            v33 = 2112;
            v34 = v15;
            v35 = 2112;
            v36 = v19;
            _os_log_error_impl(&dword_18DFCD000, v20, OS_LOG_TYPE_ERROR, "Unable to send composition: %@ for messageItem: %@ with error: %@", buf, 0x20u);
          }
        }

      }
      else
      {
        IMLogHandleForCategory();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          -[CKChatController(CKChatController_Stickers) sendSticker:withMediaObject:composition:parentMessagePartChatItem:messageSummaryInfo:].cold.3();
      }
    }
    else
    {
      IMLogHandleForCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        -[CKChatController(CKChatController_Stickers) sendSticker:withMediaObject:composition:parentMessagePartChatItem:messageSummaryInfo:].cold.2();
    }
  }
  else
  {
    IMLogHandleForCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      -[CKChatController(CKChatController_Stickers) sendSticker:withMediaObject:composition:parentMessagePartChatItem:messageSummaryInfo:].cold.1();
  }

}

void __132__CKChatController_CKChatController_Stickers__sendSticker_withMediaObject_composition_parentMessagePartChatItem_messageSummaryInfo___block_invoke(uint64_t a1, int a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    IMLogHandleForCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = 138412290;
      v6 = v4;
      _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "Sticker was sensitive, deferring send for intervention: %@", (uint8_t *)&v5, 0xCu);
    }

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_sendCommSafetyVerifiedSticker:withMediaObject:composition:parentMessagePartChatItem:messageSummaryInfo:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  }
}

- (void)handleStickerDropConfirmCommSafetySendContext:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v4 = a3;
  objc_msgSend(v4, "sticker");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "mediaObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "composition");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "parentMessagePartChatItem");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "messageSummaryInfo");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKChatController _sendCommSafetyVerifiedSticker:withMediaObject:composition:parentMessagePartChatItem:messageSummaryInfo:](self, "_sendCommSafetyVerifiedSticker:withMediaObject:composition:parentMessagePartChatItem:messageSummaryInfo:", v9, v5, v6, v7, v8);
}

- (void)_sendCommSafetyVerifiedSticker:(id)a3 withMediaObject:(id)a4 composition:(id)a5 parentMessagePartChatItem:(id)a6 messageSummaryInfo:(id)a7
{
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v35;

  v11 = a5;
  v12 = a6;
  v32 = a7;
  v33 = a4;
  v13 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v12, "aggregateChatItems");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "firstObject");
    v15 = objc_claimAutoreleasedReturnValue();

    v12 = (id)v15;
  }
  v35 = 0;
  objc_msgSend(v11, "superFormatText:", &v35);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v35;
  v29 = objc_alloc(MEMORY[0x1E0D35870]);
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "IMChatItem");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "guid");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v13, "isEmojiSticker"))
    v20 = 1001;
  else
    v20 = 1000;
  v31 = v11;
  v21 = objc_msgSend(v12, "messagePartRange");
  v23 = v22;
  objc_msgSend(v12, "threadIdentifier");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = (void *)objc_msgSend(v29, "initWithSender:time:text:messageSubject:fileTransferGUIDs:flags:error:guid:subject:associatedMessageGUID:associatedMessageType:associatedMessageRange:messageSummaryInfo:threadIdentifier:", 0, v28, v30, 0, v16, 5, 0, v17, 0, v19, v20, v21, v23, v32, v24);

  objc_msgSend(v33, "transfer");
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v26, "setIMMessage:", v25);
  +[CKAssociatedStickerChatItem addDroppedSticker:](CKAssociatedStickerChatItem, "addDroppedSticker:", v13);
  -[CKCoreChatController conversation](self, "conversation");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController sendMessage:forConversation:newComposition:](self, "sendMessage:forConversation:newComposition:", v25, v27, 0);

  objc_msgSend((id)objc_opt_class(), "donateStickerToRecents:", v13);
}

- (BOOL)repositionSticker:(id)a3 stickerChatItem:(id)a4 parentMessagePartChatItem:(id)a5 stickerPositioningInfo:(id)a6
{
  id v10;
  id v11;
  void *v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  CKChatController *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  _QWORD v61[3];

  v61[1] = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v58 = a5;
  v59 = a6;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(a5) = objc_msgSend(v12, "isStickerRepositioningEnabled");

  if ((a5 & 1) != 0)
  {
    v13 = 0;
    if (v10)
      goto LABEL_3;
  }
  else
  {
    IMLogHandleForCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      -[CKChatController(CKChatController_Stickers) repositionSticker:stickerChatItem:parentMessagePartChatItem:stickerPositioningInfo:].cold.5();

    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("CKChatControllerStickerErrorDomain"), 1, 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
LABEL_3:
      if (v11)
        goto LABEL_14;
      goto LABEL_11;
    }
  }
  IMLogHandleForCategory();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    -[CKChatController(CKChatController_Stickers) repositionSticker:stickerChatItem:parentMessagePartChatItem:stickerPositioningInfo:].cold.4();

  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("CKChatControllerStickerErrorDomain"), 2, 0);
  v16 = objc_claimAutoreleasedReturnValue();

  v13 = (void *)v16;
  if (!v11)
  {
LABEL_11:
    IMLogHandleForCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      -[CKChatController(CKChatController_Stickers) repositionSticker:stickerChatItem:parentMessagePartChatItem:stickerPositioningInfo:].cold.3();

    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("CKChatControllerStickerErrorDomain"), 3, 0);
    v18 = objc_claimAutoreleasedReturnValue();

    v13 = (void *)v18;
  }
LABEL_14:
  if (!v59)
  {
    IMLogHandleForCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      -[CKChatController(CKChatController_Stickers) repositionSticker:stickerChatItem:parentMessagePartChatItem:stickerPositioningInfo:].cold.2();

    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("CKChatControllerStickerErrorDomain"), 4, 0);
    v20 = objc_claimAutoreleasedReturnValue();

    v13 = (void *)v20;
  }
  IMSharedHelperMissingKeysInStickerUserInfo();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = v21;
  if (objc_msgSend(v21, "count"))
  {
    IMLogHandleForCategory();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      -[CKChatController(CKChatController_Stickers) repositionSticker:stickerChatItem:parentMessagePartChatItem:stickerPositioningInfo:].cold.1();

    objc_msgSend(v21, "componentsJoinedByString:", CFSTR(" "));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (void *)MEMORY[0x1E0CB35C8];
    v60 = *MEMORY[0x1E0CB2938];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Missing keys: %@"), v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v61[0] = v25;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v61, &v60, 1);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "errorWithDomain:code:userInfo:", CFSTR("CKChatControllerStickerErrorDomain"), 5, v26);
    v27 = objc_claimAutoreleasedReturnValue();

    v13 = (void *)v27;
  }
  if (v13)
  {
    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "forceAutoBugCaptureWithSubType:errorPayload:", CFSTR("Invalid Sticker Reposition"), v13);
  }
  else
  {
    v53 = self;
    -[CKCoreChatController chat](self, "chat");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "IMChatItem");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "guid");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "_stripFZIDPrefix");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "messageItemForGUID:", v32);
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v54, "message");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "messageSummaryInfo");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = (void *)objc_msgSend(v34, "mutableCopy");

    objc_msgSend(v56, "setValue:forKey:", v59, *MEMORY[0x1E0D383B8]);
    v51 = objc_alloc(MEMORY[0x1E0D35870]);
    objc_msgSend(v33, "sender");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "time");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "text");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "messageSubject");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "fileTransferGUIDs");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "guid");
    v55 = v10;
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "subject");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "associatedMessageGUID");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v55, "isEmojiSticker"))
      v38 = 1001;
    else
      v38 = 1000;
    v39 = objc_msgSend(v58, "messagePartRange");
    v41 = v40;
    objc_msgSend(v33, "threadIdentifier");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = (void *)objc_msgSend(v51, "initWithSender:time:text:messageSubject:fileTransferGUIDs:flags:error:guid:subject:associatedMessageGUID:associatedMessageType:associatedMessageRange:messageSummaryInfo:threadIdentifier:", v50, v49, v48, v47, v46, 5, 0, v35, v36, v37, v38, v39, v41, v56, v42);

    v10 = v55;
    +[CKAssociatedStickerChatItem addDroppedSticker:](CKAssociatedStickerChatItem, "addDroppedSticker:", v55);
    -[CKCoreChatController conversation](v53, "conversation");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "IMChatItem");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "repositionSticker:associatedChatItem:", v52, v44);

    v28 = v54;
  }

  return v13 == 0;
}

- (id)_originalIndexPathForRepositioningDropSession:(id)a3
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char isKindOfClass;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  objc_msgSend(a3, "items", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v15;
LABEL_3:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v15 != v6)
        objc_enumerationMutation(v3);
      v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v7);
      if (objc_msgSend(MEMORY[0x1E0D39B18], "dragItemIsRepositioningSticker:", v8))
      {
        objc_msgSend(v8, "localObject");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) == 0)
          goto LABEL_11;
        objc_msgSend(v8, "localObject");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "objectForKey:", CFSTR("kStickerDragItemOriginalIndexPathKey"));
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        if (v12)
          break;
      }
      if (v5 == ++v7)
      {
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v5)
          goto LABEL_3;
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    v12 = 0;
  }

  return v12;
}

- (id)_stickerChatItemForDragItem:(id)a3
{
  id v3;
  void *v4;
  char isKindOfClass;
  void *v6;
  void *v7;

  v3 = a3;
  if (objc_msgSend(MEMORY[0x1E0D39B18], "dragItemIsRepositioningSticker:", v3)
    && (objc_msgSend(v3, "localObject"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_opt_class(),
        isKindOfClass = objc_opt_isKindOfClass(),
        v4,
        (isKindOfClass & 1) != 0))
  {
    objc_msgSend(v3, "localObject");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKey:", CFSTR("kStickerDragItemChatItemKey"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (BOOL)_dropSessionIsNewSticker:(id)a3
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a3, "items", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v10;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v3);
        v7 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * i);
        if (objc_msgSend(MEMORY[0x1E0D39B18], "dragItemIsSticker:", v7)
          && !objc_msgSend(MEMORY[0x1E0D39B18], "dragItemIsRepositioningSticker:", v7))
        {
          LOBYTE(v4) = 1;
          goto LABEL_12;
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_12:

  return v4;
}

- (void)_registerRepresentationsInItemProvider:(id)a3 sticker:(id)a4
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  _QWORD v15[5];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  objc_msgSend(a4, "representations");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v17 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        objc_msgSend(v11, "type");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v5, "hasItemConformingToTypeIdentifier:", v12);

        if ((v13 & 1) == 0)
        {
          objc_msgSend(v11, "type");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15[0] = MEMORY[0x1E0C809B0];
          v15[1] = 3221225472;
          v15[2] = __94__CKChatController_CKChatController_Stickers___registerRepresentationsInItemProvider_sticker___block_invoke;
          v15[3] = &unk_1E274C070;
          v15[4] = v11;
          objc_msgSend(v5, "registerItemForTypeIdentifier:loadHandler:", v14, v15);

        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v8);
  }

}

void __94__CKChatController_CKChatController_Stickers___registerRepresentationsInItemProvider_sticker___block_invoke(uint64_t a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "data");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, id, _QWORD))a2)[2](v4, v5, 0);

}

- (void)_registerStandardRepresentationsInItemProvider:(id)a3 sticker:(id)a4 effectView:(id)a5
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  _QWORD v33[4];
  id v34;
  id v35;
  CKChatController *v36;
  _QWORD v37[4];
  id v38;
  id v39;
  CKChatController *v40;
  id v41;
  uint64_t v42;
  _QWORD v43[4];
  id v44;
  _QWORD v45[4];
  id v46;
  CKChatController *v47;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = MEMORY[0x193FF3C18](CFSTR("MSSticker"), CFSTR("Messages"));
  objc_msgSend(v9, "fileURL");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    objc_msgSend((id)*MEMORY[0x1E0CEC580], "identifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v45[0] = MEMORY[0x1E0C809B0];
    v45[1] = 3221225472;
    v45[2] = __113__CKChatController_CKChatController_Stickers___registerStandardRepresentationsInItemProvider_sticker_effectView___block_invoke;
    v45[3] = &unk_1E274C098;
    v46 = v9;
    v47 = self;
    objc_msgSend(v8, "registerItemForTypeIdentifier:loadHandler:", v13, v45);

    v14 = v46;
  }
  else
  {
    objc_msgSend(v9, "representations");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "firstObject");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKChatController representationForRole:sticker:](self, "representationForRole:sticker:", *MEMORY[0x1E0CEC240], v9);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController representationForRole:sticker:](self, "representationForRole:sticker:", *MEMORY[0x1E0CEC230], v9);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14 && v14 == v16)
    {
      objc_msgSend(v14, "type");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v43[0] = MEMORY[0x1E0C809B0];
      v43[1] = 3221225472;
      v43[2] = __113__CKChatController_CKChatController_Stickers___registerStandardRepresentationsInItemProvider_sticker_effectView___block_invoke_2;
      v43[3] = &unk_1E274C070;
      v44 = v14;
      objc_msgSend(v8, "registerItemForTypeIdentifier:loadHandler:", v18, v43);

    }
    if (v17)
    {
      v30 = v11;
      v32 = v16;
      objc_msgSend(v10, "effect");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = (void *)MEMORY[0x1E0CEA638];
      objc_msgSend(v17, "data");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "window");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "screen");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "scale");
      objc_msgSend(v19, "imageWithData:scale:", v20);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v17, "type");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend((id)*MEMORY[0x1E0CEC508], "identifier");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v21) = objc_msgSend(v24, "isEqualToString:", v25);

      if ((_DWORD)v21)
      {
        objc_msgSend(v17, "type");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v37[0] = MEMORY[0x1E0C809B0];
        v37[1] = 3221225472;
        v37[2] = __113__CKChatController_CKChatController_Stickers___registerStandardRepresentationsInItemProvider_sticker_effectView___block_invoke_3;
        v37[3] = &unk_1E274C0E8;
        v38 = v31;
        v42 = v30;
        v39 = v23;
        v40 = self;
        v41 = v17;
        objc_msgSend(v8, "registerItemForTypeIdentifier:loadHandler:", v26, v37);

      }
      objc_msgSend((id)*MEMORY[0x1E0CEC580], "identifier");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v33[0] = MEMORY[0x1E0C809B0];
      v33[1] = 3221225472;
      v33[2] = __113__CKChatController_CKChatController_Stickers___registerStandardRepresentationsInItemProvider_sticker_effectView___block_invoke_5;
      v33[3] = &unk_1E274C110;
      v34 = v31;
      v35 = v23;
      v36 = self;
      v28 = v23;
      v29 = v31;
      objc_msgSend(v8, "registerItemForTypeIdentifier:loadHandler:", v27, v33);

      v16 = v32;
    }

  }
}

void __113__CKChatController_CKChatController_Stickers___registerStandardRepresentationsInItemProvider_sticker_effectView___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = (void *)MEMORY[0x1E0CEA638];
  v4 = *(void **)(a1 + 32);
  v5 = a2;
  objc_msgSend(v4, "fileURL");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "path");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "imageWithContentsOfFile:", v7);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "addPNGImage:completion:", v8, v5);
}

void __113__CKChatController_CKChatController_Stickers___registerStandardRepresentationsInItemProvider_sticker_effectView___block_invoke_2(uint64_t a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "data");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, id, _QWORD))a2)[2](v4, v5, 0);

}

void __113__CKChatController_CKChatController_Stickers___registerStandardRepresentationsInItemProvider_sticker_effectView___block_invoke_3(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[5];
  id v14;

  v6 = a2;
  v7 = a4;
  if (*(_QWORD *)(a1 + 32) && objc_msgSend(*(id *)(a1 + 64), "_isHEICSupported"))
  {
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isStickersAppEnabled");

    if (v9)
    {
      v10 = *(void **)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 40);
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __113__CKChatController_CKChatController_Stickers___registerStandardRepresentationsInItemProvider_sticker_effectView___block_invoke_4;
      v13[3] = &unk_1E274C0C0;
      v13[4] = *(_QWORD *)(a1 + 48);
      v14 = v6;
      objc_msgSend(v10, "applyToImage:completion:", v11, v13);

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 56), "data");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *, _QWORD))v6 + 2))(v6, v12, 0);

  }
}

uint64_t __113__CKChatController_CKChatController_Stickers___registerStandardRepresentationsInItemProvider_sticker_effectView___block_invoke_4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addHEICImage:completion:", a2, *(_QWORD *)(a1 + 40));
}

void __113__CKChatController_CKChatController_Stickers___registerStandardRepresentationsInItemProvider_sticker_effectView___block_invoke_5(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[5];
  id v13;

  v6 = a2;
  v7 = a4;
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isStickersAppEnabled");

    if (v9)
    {
      v10 = *(void **)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 40);
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = __113__CKChatController_CKChatController_Stickers___registerStandardRepresentationsInItemProvider_sticker_effectView___block_invoke_6;
      v12[3] = &unk_1E274C0C0;
      v12[4] = *(_QWORD *)(a1 + 48);
      v13 = v6;
      objc_msgSend(v10, "applyToImage:completion:", v11, v12);

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "addPNGImage:completion:", *(_QWORD *)(a1 + 40), v6);
  }

}

uint64_t __113__CKChatController_CKChatController_Stickers___registerStandardRepresentationsInItemProvider_sticker_effectView___block_invoke_6(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addPNGImage:completion:", a2, *(_QWORD *)(a1 + 40));
}

- (id)representationForRole:(id)a3 sticker:(id)a4
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  char v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  objc_msgSend(a4, "representations", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (id)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v10, "role");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "isEqualToString:", v5);

        if ((v12 & 1) != 0)
        {
          v7 = v10;
          goto LABEL_11;
        }
      }
      v7 = (id)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v7)
        continue;
      break;
    }
  }
LABEL_11:

  return v7;
}

- (void)addHEICImage:(id)a3 completion:(id)a4
{
  id v5;
  void (**v6)(id, id, _QWORD);
  id v7;

  v5 = objc_retainAutorelease(a3);
  v6 = (void (**)(id, id, _QWORD))a4;
  objc_msgSend(v5, "CGImage");
  v7 = (id)IMCreateHEICSImageDataFromCGImageRef();
  v6[2](v6, v7, 0);

}

- (void)addPNGImage:(id)a3 completion:(id)a4
{
  id v5;
  void (**v6)(id, id, _QWORD);
  id v7;

  v5 = objc_retainAutorelease(a3);
  v6 = (void (**)(id, id, _QWORD))a4;
  objc_msgSend(v5, "CGImage");
  v7 = (id)IMCreatePNGImageDataFromCGImageRef();
  v6[2](v6, v7, 0);

}

- (void)saveStickerFromChatItem:(id)a3 pluginSourceView:(id)a4 animateFlyIn:(BOOL)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  double v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double MidY;
  void *v36;
  void *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  _QWORD v56[4];
  id v57;
  id v58[7];
  BOOL v59;
  id location[2];
  CGRect v61;
  CGRect v62;

  v8 = a3;
  v9 = a4;
  if (v8)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_msgSend(v8, "index");
    -[CKChatController dismissKeyboard](self, "dismissKeyboard");
    IMStickersExtensionIdentifier();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    IMBalloonExtensionIDWithSuffix();
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKCoreChatController inputController](self, "inputController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "showPluginWithExtensionIdentifier:sourceView:", v11, v9);

    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "collectionView");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "shouldScrollToSavedSticker");

    if (v16)
    {
      objc_msgSend(v14, "setIgnoresAutomaticScrollsTowardBottom:", 1);
      -[CKCoreChatController inputController](self, "inputController");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "_appCardHeightWithSafeArea");
      v19 = v18;
      -[CKChatController entryView](self, "entryView");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "frame");
      v22 = v19 + v21;

      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "collectionView");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "contentInset");
      v26 = v25;
      v28 = v27;
      v30 = v29;

      objc_msgSend(v14, "bounds");
      v61.origin.x = v28 + v31;
      v32 = 0.0;
      v61.origin.y = v26 + 0.0;
      v61.size.width = v33 - (v28 + v30);
      v61.size.height = v34 - (v22 + v26);
      MidY = CGRectGetMidY(v61);
      objc_msgSend(v13, "balloonViewForChatItem:", v8);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      if (v36)
      {
        -[CKChatController view](self, "view");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "frame");
        v39 = v38;
        v41 = v40;
        v43 = v42;
        v45 = v44;
        objc_msgSend(v36, "superview");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "convertRect:fromView:", v46, v39, v41, v43, v45);
        v48 = v47;
        v50 = v49;
        v52 = v51;
        v54 = v53;

        *(_QWORD *)&v62.origin.x = v48;
        *(_QWORD *)&v62.origin.y = v50;
        *(_QWORD *)&v62.size.width = v52;
        *(_QWORD *)&v62.size.height = v54;
        v32 = CGRectGetMidY(v62) - MidY;
      }
      else
      {
        v48 = (void *)*MEMORY[0x1E0C9D648];
        v50 = *(void **)(MEMORY[0x1E0C9D648] + 8);
        v52 = *(void **)(MEMORY[0x1E0C9D648] + 16);
        v54 = *(void **)(MEMORY[0x1E0C9D648] + 24);
      }
      location[0] = 0;
      objc_initWeak(location, self);
      v56[0] = MEMORY[0x1E0C809B0];
      v56[1] = 3221225472;
      v56[2] = __101__CKChatController_CKChatController_Stickers__saveStickerFromChatItem_pluginSourceView_animateFlyIn___block_invoke;
      v56[3] = &unk_1E274C138;
      objc_copyWeak(v58, location);
      v59 = a5;
      v58[1] = v48;
      v58[2] = v50;
      v58[3] = v52;
      v58[4] = v54;
      v58[5] = 0;
      v58[6] = *(id *)&MidY;
      v57 = v8;
      -[CKChatController fullScreenBalloonViewController:verticallyScrollTranscriptByAmount:animated:duration:completion:](self, "fullScreenBalloonViewController:verticallyScrollTranscriptByAmount:animated:duration:completion:", 0, 1, v56, v32, 0.3);

      objc_destroyWeak(v58);
      objc_destroyWeak(location);

    }
    else
    {
      +[CKUtilities saveableStickerFromChatItem:](CKUtilities, "saveableStickerFromChatItem:", v8);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController saveSticker:sourceRect:](self, "saveSticker:sourceRect:", v55, *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));

    }
  }

}

void __101__CKChatController_CKChatController_Stickers__saveStickerFromChatItem_pluginSourceView_animateFlyIn___block_invoke(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;
  id v15;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "collectionViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "collectionView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setIgnoresAutomaticScrollsTowardBottom:", 0);

  v6 = (double *)MEMORY[0x1E0C9D648];
  v7 = (double *)(MEMORY[0x1E0C9D648] + 24);
  v8 = (double *)(MEMORY[0x1E0C9D648] + 16);
  if (*(_BYTE *)(a1 + 96))
    v9 = (double *)(a1 + 88);
  else
    v9 = (double *)(MEMORY[0x1E0C9D648] + 8);
  if (*(_BYTE *)(a1 + 96))
  {
    v8 = (double *)(a1 + 64);
    v7 = (double *)(a1 + 72);
    v6 = (double *)(a1 + 48);
  }
  v10 = *v6;
  v11 = *v7;
  v12 = *v8;
  v13 = *v9;
  +[CKUtilities saveableStickerFromChatItem:](CKUtilities, "saveableStickerFromChatItem:", *(_QWORD *)(a1 + 32));
  v15 = (id)objc_claimAutoreleasedReturnValue();
  v14 = objc_loadWeakRetained(v2);
  objc_msgSend(v14, "saveSticker:sourceRect:", v15, v10, v13, v12, v11);

}

- (void)saveStickerFromTapbackAttributionFlow:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  IMStickersExtensionIdentifier();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  IMBalloonExtensionIDWithSuffix();
  v7 = (id)objc_claimAutoreleasedReturnValue();

  -[CKCoreChatController inputController](self, "inputController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "showPluginWithExtensionIdentifier:sourceView:", v7, 0);

  -[CKChatController saveSticker:sourceRect:](self, "saveSticker:sourceRect:", v4, *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
}

- (void)saveStickerFromEmojiDetails:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  IMStickersExtensionIdentifier();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  IMBalloonExtensionIDWithSuffix();
  v7 = (id)objc_claimAutoreleasedReturnValue();

  -[CKCoreChatController inputController](self, "inputController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "showPluginWithExtensionIdentifier:sourceView:", v7, 0);

  -[CKChatController saveSticker:sourceRect:](self, "saveSticker:sourceRect:", v4, *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
}

- (void)saveSticker:(id)a3 sourceRect:(CGRect)a4
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  dispatch_time_t v16;
  _QWORD block[5];
  id v18;
  uint64_t *v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  height = a4.size.height;
  width = a4.size.width;
  y = a4.origin.y;
  x = a4.origin.x;
  v9 = a3;
  v10 = v9;
  if (v9)
  {
    objc_msgSend(v9, "uiSticker");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      v24 = 0;
      v25 = &v24;
      v26 = 0x3032000000;
      v27 = __Block_byref_object_copy__8;
      v28 = __Block_byref_object_dispose__8;
      v29 = 0;
      -[CKCoreChatController inputController](self, "inputController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "appCardPresentationOverseer");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v13, "browserViewController");
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = (void *)v25[5];
      v25[5] = v14;

      if (v25[5])
      {
        v16 = dispatch_time(0, 500000000);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __70__CKChatController_CKChatController_Stickers__saveSticker_sourceRect___block_invoke;
        block[3] = &unk_1E274C160;
        block[4] = self;
        v20 = x;
        v21 = y;
        v22 = width;
        v23 = height;
        v18 = v11;
        v19 = &v24;
        dispatch_after(v16, MEMORY[0x1E0C80D38], block);

      }
      _Block_object_dispose(&v24, 8);

    }
  }

}

uint64_t __70__CKChatController_CKChatController_Stickers__saveSticker_sourceRect___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_addStickerToStoreWithUISticker:sourceRect:browserViewController:", *(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
}

- (void)_addStickerToStoreWithUISticker:(id)a3 sourceRect:(CGRect)a4 browserViewController:(id)a5
{
  objc_msgSend(a5, "_addStickerToStoreWithUISticker:sourceRect:completion:", a3, &__block_literal_global_26, a4.origin.x, a4.origin.y, a4.size.width, a4.size.height);
}

void __112__CKChatController_CKChatController_Stickers___addStickerToStoreWithUISticker_sourceRect_browserViewController___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  if (v5 && IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v5, "description");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138412290;
      v11 = v7;
      _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "Unable to save sticker with error: %@", (uint8_t *)&v10, 0xCu);

    }
  }
  if (v4 && IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v4, "description");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138412290;
      v11 = v9;
      _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Stickers added: %@", (uint8_t *)&v10, 0xCu);

    }
  }

}

- (id)_stickerFromChatItem:(id)a3
{
  id v3;
  void *v4;
  void *v5;

  v3 = a3;
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    objc_msgSend(v3, "mediaObject");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      objc_msgSend(v4, "sticker");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v5 = 0;
    }

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (id)_dragItemsIfRepositioningForInteraction:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  CKChatController *v33;
  int v34;
  double v36;
  double v37;
  double v38;
  double v39;
  void *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  _QWORD v59[4];
  id v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  void (*v66)(uint64_t);
  id v67;
  _QWORD v68[4];
  id v69;
  CKChatController *v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  void *v76;
  _QWORD v77[3];
  _QWORD v78[3];
  _QWORD v79[4];
  _QWORD v80[6];

  v80[4] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isStickerRepositioningEnabled");

  if (v6)
  {
    -[CKChatController _transcriptStickerCellContainingInteraction:](self, "_transcriptStickerCellContainingInteraction:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v7)
    {
      v33 = 0;
LABEL_17:

      goto LABEL_18;
    }
    -[CKChatController collectionView](self, "collectionView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "indexPathForCell:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "chatItemAtIndexPath:", v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "associatedItemView");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "effectView");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v11
      || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
      || !objc_msgSend(v11, "itemIsFromMe"))
    {
      v34 = 1;
LABEL_13:

      if (v34)
        v33 = 0;
      else
        v33 = self;
      goto LABEL_17;
    }
    v56 = v11;
    objc_msgSend(v56, "sticker");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v56, "attributionInfo");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setAttributionInfo:", v15);

    objc_msgSend(v56, "attributionInfo");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "objectForKey:", *MEMORY[0x1E0D37F10]);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setAccessibilityLabel:", v17);

    v58 = objc_alloc_init(MEMORY[0x1E0CB36C8]);
    objc_msgSend(v13, "bounds");
    v19 = *MEMORY[0x1E0C9D820];
    if (v20 == *MEMORY[0x1E0C9D820] && (v21 = *(double *)(MEMORY[0x1E0C9D820] + 8), v18 == v21))
    {
      objc_msgSend(v12, "bounds");
      if (v23 == v19 && v22 == v21)
      {
        objc_msgSend(v12, "superview");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "frame");
        v26 = v25;
        v28 = v27;
        v30 = v29;
        v32 = v31;

LABEL_22:
        v45 = MEMORY[0x193FF3C18](CFSTR("_MSMessageMediaPayload"), CFSTR("Messages"));
        v46 = objc_opt_class();
        v68[0] = MEMORY[0x1E0C809B0];
        v68[1] = 3221225472;
        v68[2] = __87__CKChatController_CKChatController_Stickers___dragItemsIfRepositioningForInteraction___block_invoke;
        v68[3] = &unk_1E274C1A8;
        v71 = v45;
        v72 = v26;
        v73 = v28;
        v74 = v30;
        v75 = v32;
        v55 = v14;
        v69 = v55;
        v70 = self;
        objc_msgSend(v58, "registerObjectOfClass:visibility:loadHandler:", v46, 0, v68);
        -[CKChatController _registerStandardRepresentationsInItemProvider:sticker:effectView:](self, "_registerStandardRepresentationsInItemProvider:sticker:effectView:", v58, v55, v13);
        -[CKChatController _registerRepresentationsInItemProvider:sticker:](self, "_registerRepresentationsInItemProvider:sticker:", v58, v55);
        objc_msgSend(v58, "registerItemForTypeIdentifier:loadHandler:", CFSTR("com.apple.sticker"), &__block_literal_global_167_0);
        v62 = 0;
        v63 = &v62;
        v64 = 0x3032000000;
        v65 = __Block_byref_object_copy__8;
        v66 = __Block_byref_object_dispose__8;
        v67 = 0;
        -[CKCoreChatController collectionViewController](self, "collectionViewController");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "chatItems");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        v59[0] = MEMORY[0x1E0C809B0];
        v59[1] = 3221225472;
        v59[2] = __87__CKChatController_CKChatController_Stickers___dragItemsIfRepositioningForInteraction___block_invoke_3;
        v59[3] = &unk_1E274C218;
        v54 = v56;
        v60 = v54;
        v61 = &v62;
        objc_msgSend(v48, "enumerateObjectsUsingBlock:", v59);

        v57 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA558]), "initWithItemProvider:", v58);
        if (v63[5])
        {
          -[CKCoreChatController collectionViewController](self, "collectionViewController");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v49, "cellForChatItem:", v63[5]);
          v50 = (void *)objc_claimAutoreleasedReturnValue();

          v79[0] = CFSTR("kStickerDragItemImageViewKey");
          v79[1] = CFSTR("kStickerDragItemChatItemKey");
          v80[0] = v12;
          v80[1] = v54;
          v79[2] = CFSTR("kStickerDragItemOriginalIndexPathKey");
          -[CKChatController collectionView](self, "collectionView");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v51, "indexPathForCell:", v50);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          v79[3] = CFSTR("kStickerIsRepositioningKey");
          v80[2] = v52;
          v80[3] = MEMORY[0x1E0C9AAB0];
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v80, v79, 4);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v57, "setLocalObject:", v53);

        }
        else
        {
          v77[0] = CFSTR("kStickerDragItemImageViewKey");
          v77[1] = CFSTR("kStickerDragItemChatItemKey");
          v78[0] = v12;
          v78[1] = v54;
          v77[2] = CFSTR("kStickerIsRepositioningKey");
          v78[2] = MEMORY[0x1E0C9AAB0];
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v78, v77, 3);
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v57, "setLocalObject:", v50);
        }

        v76 = v57;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v76, 1);
        self = (CKChatController *)objc_claimAutoreleasedReturnValue();

        _Block_object_dispose(&v62, 8);
        v34 = 0;
        goto LABEL_13;
      }
      objc_msgSend(v12, "center");
      objc_msgSend(v12, "convertPoint:toView:", 0);
      v37 = v41;
      v39 = v42;
      v40 = v12;
    }
    else
    {
      objc_msgSend(v13, "center");
      objc_msgSend(v13, "convertPoint:toView:", 0);
      v37 = v36;
      v39 = v38;
      v40 = v13;
    }
    objc_msgSend(v40, "bounds");
    v30 = v43;
    v32 = v44;
    v26 = v37 - v43 * 0.5;
    v28 = v39 - v44 * 0.5;
    goto LABEL_22;
  }
  v33 = 0;
LABEL_18:

  return v33;
}

uint64_t __87__CKChatController_CKChatController_Stickers___dragItemsIfRepositioningForInteraction___block_invoke(uint64_t a1, void *a2)
{
  objc_class *v3;
  void (**v4)(id, void *, _QWORD);
  void *v5;
  uint64_t v6;

  v3 = *(objc_class **)(a1 + 48);
  v4 = a2;
  v5 = (void *)objc_msgSend([v3 alloc], "initWithIMSticker:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v5, "setSourceFrame:", *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
  v6 = objc_msgSend(*(id *)(a1 + 40), "initialFrameIndexForCurrentDrag");
  if (v6 != 0x7FFFFFFFFFFFFFFFLL)
    objc_msgSend(v5, "setInitialFrameIndex:", v6);
  objc_msgSend(*(id *)(a1 + 40), "setInitialFrameIndexForCurrentDrag:", 0x7FFFFFFFFFFFFFFFLL);
  v4[2](v4, v5, 0);

  return 0;
}

void __87__CKChatController_CKChatController_Stickers___dragItemsIfRepositioningForInteraction___block_invoke_2(uint64_t a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);
  id v5;

  v3 = (void *)MEMORY[0x1E0C99D50];
  v4 = a2;
  objc_msgSend(v3, "data");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, id, _QWORD))a2)[2](v4, v5, 0);

}

void __87__CKChatController_CKChatController_Stickers___dragItemsIfRepositioningForInteraction___block_invoke_3(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v11 = a2;
  objc_msgSend(v11, "visibleAssociatedMessageChatItems");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "count");

  if (v7)
  {
    objc_msgSend(v11, "visibleAssociatedMessageChatItems");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __87__CKChatController_CKChatController_Stickers___dragItemsIfRepositioningForInteraction___block_invoke_4;
    v12[3] = &unk_1E274C1F0;
    v9 = *(id *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 40);
    v13 = v9;
    v15 = v10;
    v14 = v11;
    v16 = a4;
    objc_msgSend(v8, "enumerateObjectsUsingBlock:", v12);

  }
}

void __87__CKChatController_CKChatController_Stickers___dragItemsIfRepositioningForInteraction___block_invoke_4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  if (objc_msgSend(a2, "isEqual:", *(_QWORD *)(a1 + 32)))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(id *)(a1 + 40));
    **(_BYTE **)(a1 + 56) = 1;
    *a4 = 1;
  }
}

- (id)_transcriptStickerCellContainingInteraction:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  char v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKChatController collectionView](self, "collectionView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "visibleCells");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v7 = v6;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v19;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v19 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v11);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v13 = v12;
          objc_msgSend(v13, "associatedItemView", (_QWORD)v18);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "interactions");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v15, "containsObject:", v4);

          if ((v16 & 1) != 0)
            goto LABEL_12;

        }
        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v9);
  }
  v13 = 0;
LABEL_12:

  return v13;
}

- (void)presentStickerDetailControllerWithIndexPath:(id)a3
{
  objc_class *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  CKStickerDetailViewController *v9;
  id v10;
  _QWORD v11[4];
  id v12;

  v4 = (objc_class *)MEMORY[0x1E0C99DE8];
  v5 = a3;
  v10 = objc_alloc_init(v4);
  -[CKChatController _parentChatItemForIndexPath:](self, "_parentChatItemForIndexPath:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "visibleAssociatedMessageChatItems");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend(v6, "visibleAssociatedMessageChatItems");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __103__CKChatController_CKStickerDetailViewControllerDelegate__presentStickerDetailControllerWithIndexPath___block_invoke;
    v11[3] = &unk_1E274B218;
    v12 = v10;
    objc_msgSend(v8, "enumerateObjectsUsingBlock:", v11);

  }
  if (objc_msgSend(v10, "count"))
  {
    v9 = -[CKStickerDetailViewController initWithStickerChatItems:]([CKStickerDetailViewController alloc], "initWithStickerChatItems:", v10);
    -[CKChatController presentStickerDetailsViewController:fromChatItem:](self, "presentStickerDetailsViewController:fromChatItem:", v9, v6);

  }
}

void __103__CKChatController_CKStickerDetailViewControllerDelegate__presentStickerDetailControllerWithIndexPath___block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

- (void)presentEmojiDetailsControllerWithIndexPath:(id)a3
{
  char isKindOfClass;
  void *v5;
  id v6;
  void *v7;
  CKStickerDetailViewController *v8;
  void *v9;

  -[CKChatController _parentChatItemForIndexPath:](self, "_parentChatItemForIndexPath:", a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v5 = v9;
  if ((isKindOfClass & 1) != 0)
  {
    v6 = v9;
    objc_msgSend(v6, "emojiImageMediaObjectsInMessagePartText");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "count"))
    {
      v8 = -[CKStickerDetailViewController initWithEmojiImageMediaObjects:]([CKStickerDetailViewController alloc], "initWithEmojiImageMediaObjects:", v7);
      -[CKChatController presentStickerDetailsViewController:fromChatItem:](self, "presentStickerDetailsViewController:fromChatItem:", v8, v6);

    }
    v5 = v9;
  }

}

- (void)presentStickerDetailsViewController:(id)a3 fromChatItem:(id)a4
{
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v6 = a4;
  v7 = a3;
  objc_msgSend(v7, "setDelegate:", self);
  v12 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA7B8]), "initWithRootViewController:", v7);

  if (CKIsRunningInMacCatalyst())
    v8 = 7;
  else
    v8 = 2;
  objc_msgSend(v12, "setModalPresentationStyle:", v8);
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "balloonViewForChatItem:", v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    objc_msgSend(v12, "popoverPresentationController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setSourceView:", v10);

    -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v12, 1, 0);
  }

}

- (void)stickerDetailViewController:(id)a3 deletedStickerWithTransferGUID:(id)a4
{
  -[CKChatController _deleteStickerWithTransferGUID:](self, "_deleteStickerWithTransferGUID:", a4);
}

- (void)stickerDetailViewController:(id)a3 selectedStickerPackWithAdamID:(id)a4
{
  id v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v5 = a4;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __117__CKChatController_CKStickerDetailViewControllerDelegate__stickerDetailViewController_selectedStickerPackWithAdamID___block_invoke;
  v7[3] = &unk_1E274A108;
  v7[4] = self;
  v8 = v5;
  v6 = v5;
  -[CKChatController dismissViewControllerAnimated:completion:](self, "dismissViewControllerAnimated:completion:", 1, v7);

}

uint64_t __117__CKChatController_CKStickerDetailViewControllerDelegate__stickerDetailViewController_selectedStickerPackWithAdamID___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_presentAppStoreForAdamID:", *(_QWORD *)(a1 + 40));
}

- (void)saveStickerFromDetailViewController:(id)a3 chatItemContainingSticker:(id)a4
{
  if (a4)
    -[CKChatController saveStickerFromChatItem:pluginSourceView:animateFlyIn:](self, "saveStickerFromChatItem:pluginSourceView:animateFlyIn:", a4, 0, 0);
}

- (void)stickerDetailViewController:(id)a3 didRequestSaveSticker:(id)a4
{
  -[CKChatController saveStickerFromEmojiDetails:](self, "saveStickerFromEmojiDetails:", a4);
}

- (void)_dealloc
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  char v22;
  void *v23;
  void *v24;
  void *v25;
  __CFNotificationCenter *DarwinNotifyCenter;
  void *v27;
  void *v28;
  int v29;
  CKChatController *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  -[CKChatController effectPickerViewController](self, "effectPickerViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dismissViewControllerAnimated:completion:", 0, 0);

  -[CKCoreChatController conversation](self, "conversation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateLastViewedDate");

  -[CKScheduledUpdater invalidate](self->_transcriptInlineNotificationUpdater, "invalidate");
  -[CADisplayLink invalidate](self->_stickerTranscriptScrollDisplayLink, "invalidate");
  -[CKChatController setStickerTranscriptScrollDisplayLink:](self, "setStickerTranscriptScrollDisplayLink:", 0);
  -[CKChatController autorotationUpdater](self, "autorotationUpdater");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "invalidate");

  -[CKChatController setAutorotationUpdater:](self, "setAutorotationUpdater:", 0);
  -[CKChatController typingUpdater](self, "typingUpdater");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "invalidate");

  -[CKChatController setTypingUpdater:](self, "setTypingUpdater:", 0);
  -[CKChatController hideMediaPickerAnimated:](self, "hideMediaPickerAnimated:", 0);
  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setDelegate:", 0);

  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "view");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "superview");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "view");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "view");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "superview");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = 138412802;
        v30 = self;
        v31 = 2112;
        v32 = v13;
        v33 = 2112;
        v34 = v16;
        _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "%@: removing navbarCanvasViewController's view %@ from %@.", (uint8_t *)&v29, 0x20u);

      }
    }
    -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "view");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "removeFromSuperview");

  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setDragInteractionDelegate:", 0);

  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v20, "_supportsForceTouch"))
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "disableTranscriptOrb");

    if ((v22 & 1) != 0)
      goto LABEL_11;
    -[CKChatController view](self, "view");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController unregisterPreviewSourceView:](self, "unregisterPreviewSourceView:", v20);
  }

LABEL_11:
  objc_msgSend((id)MEMORY[0x193FF3C18](CFSTR("AFContextManager"), CFSTR("AssistantServices")), "defaultContextManager");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "removeContextProvider:", self);

  -[CKChatController funCameraViewController](self, "funCameraViewController");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (v24)
  {
    -[CKChatController funCameraViewController](self, "funCameraViewController");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "dismiss");

  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, self, CFSTR("CKDraftManagerSavedDraft"), 0);
  if (!CKIsRunningInMessagesViewService() && !CKIsRunningInMessagesNotificationExtension())
  {
    +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "invalidateAllActivePlugins");

    +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "forceKillRemoteExtensionsWithDelay:", 1);

  }
}

- (void)dealloc
{
  objc_super v3;

  -[CKChatController _dealloc](self, "_dealloc");
  v3.receiver = self;
  v3.super_class = (Class)CKChatController;
  -[CKCoreChatController dealloc](&v3, sel_dealloc);
}

- (void)prepareToDismissForSecondInstance
{
  id v2;

  -[CKCoreChatController inputController](self, "inputController");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dismiss");

}

- (CKChatController)initWithConversation:(id)a3
{
  CKChatController *v3;
  CKChatController *v4;
  void *v5;
  CKScheduledUpdater *v6;
  CKScheduledUpdater *v7;
  CKScheduledUpdater *transcriptInlineNotificationUpdater;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  __CFNotificationCenter *DarwinNotifyCenter;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  SGSuggestionPresenter *standardSuggestionPresenter;
  void *v32;
  int v33;
  uint64_t v34;
  SGFoundInSuggestionPresenter *foundInSuggestionPresenter;
  _TtC7ChatKit16CKChatTipManager *v36;
  _TtC7ChatKit16CKChatTipManager *tipManager;
  void *v38;
  id v39;
  id v40;
  void *v41;
  _TtC7ChatKit25CKSuggestedActionsHandler *v42;
  void *v43;
  objc_super v45;

  v45.receiver = self;
  v45.super_class = (Class)CKChatController;
  v3 = -[CKCoreChatController initWithConversation:](&v45, sel_initWithConversation_, a3);
  v4 = v3;
  if (v3)
  {
    v3->_keyboardSnapshotReason = 0;
    -[CKChatController _updateRecipientCapabilities](v3, "_updateRecipientCapabilities");
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D36AC8]), "initWithTarget:action:", v4, sel__autorotationUpdaterFired);
    -[CKChatController setAutorotationUpdater:](v4, "setAutorotationUpdater:", v5);
    -[CKChatController setTargetFirstResponder:](v4, "setTargetFirstResponder:", 0);
    v6 = -[CKScheduledUpdater initWithTarget:action:]([CKScheduledUpdater alloc], "initWithTarget:action:", v4, sel_updateTyping);
    -[CKChatController setTypingUpdater:](v4, "setTypingUpdater:", v6);
    if (CKIsRunningInMessages())
    {
      v7 = -[CKScheduledUpdater initWithTarget:action:]([CKScheduledUpdater alloc], "initWithTarget:action:", v4, sel__updateBannerNotifications);
      transcriptInlineNotificationUpdater = v4->_transcriptInlineNotificationUpdater;
      v4->_transcriptInlineNotificationUpdater = v7;

      -[CKScheduledUpdater setUpdateSynchronouslyIfPossible:](v4->_transcriptInlineNotificationUpdater, "setUpdateSynchronouslyIfPossible:", 1);
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "addObserver:selector:name:object:", v4, sel__handleIsUnexpectedlyLoggedOutChanged_, CFSTR("com.apple.ChatKit.IsUnexpectedlyLoggedOutChanged"), 0);

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "addObserver:selector:name:object:", v4, sel_composeRecipientViewShouldResignFirstResponder, CFSTR("com.apple.ChatKit.CKComposeRecipientView.BecameFirstResponder"), 0);

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "addObserver:selector:name:object:", v4, sel_keyboardShouldShowPredictions_, *MEMORY[0x1E0CEB948], 0);

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "addObserver:selector:name:object:", v4, sel_keyboardShouldShowCandidates_, *MEMORY[0x1E0CEB940], 0);

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "addObserver:selector:name:object:", v4, sel_keyboardWillBeginInteractiveDismissal_, *MEMORY[0x1E0CEB918], 0);

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "addObserver:selector:name:object:", v4, sel_windowDidResignKey_, *MEMORY[0x1E0CEBE10], 0);

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "addObserver:selector:name:object:", v4, sel__balloonPluginExtensionsLoaded_, *MEMORY[0x1E0D352B8], 0);

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "addObserver:selector:name:object:", v4, sel__prewarmBalloonViewCacheCompleted_, CFSTR("__kCKPrewarmBalloonViewCacheCompletedNotification"), 0);

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "addObserver:selector:name:object:", v4, sel__messageReceived_, *MEMORY[0x1E0D353F8], 0);

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "addObserver:selector:name:object:", v4, sel__handleGroupPhotoChanged_, CFSTR("CKConversationShowGroupPhotoBannersNotification"), 0);

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "addObserver:selector:name:object:", v4, sel__handleGroupNameChanged_, CFSTR("CKConversationShowGroupNameBannersNotification"), 0);

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "addObserver:selector:name:object:", v4, sel__transferFileTooLarge_, CFSTR("CKTransferFileTooLargeNotification"), 0);

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "addObserver:selector:name:object:", v4, sel__handleCollaborationNoticesChanged_, *MEMORY[0x1E0D35520], 0);

      objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(v22, "isCarrierPigeonEnabled");

      if (v23)
      {
        objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "addObserver:selector:name:object:", v4, sel__updateForNewPreferredService, *MEMORY[0x1E0D354D0], 0);

        objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "addObserver:selector:name:object:", v4, sel__updateForNewPreferredService, *MEMORY[0x1E0D38068], 0);

      }
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(DarwinNotifyCenter, v4, (CFNotificationCallback)_restoreDraftFromMessagesNotificationExtension, CFSTR("CKDraftManagerSavedDraft"), v4, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "addObserver:selector:name:object:", v4, sel__handleDictationStarted_, CFSTR("UIKeyboardDidBeginDictationNotification"), 0);

    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "addObserver:selector:name:object:", v4, sel__handleDictationEnded_, *MEMORY[0x1E0CEB460], 0);

    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "addObserver:selector:name:object:", v4, sel_keyboardWillChangeFrame_, *MEMORY[0x1E0CEB960], 0);

    v4->_shouldBecomeFirstResponderWhenDismissingModalBrowser = 1;
    v30 = objc_opt_new();
    standardSuggestionPresenter = v4->_standardSuggestionPresenter;
    v4->_standardSuggestionPresenter = (SGSuggestionPresenter *)v30;

    -[SGSuggestionPresenter setDelegate:](v4->_standardSuggestionPresenter, "setDelegate:", v4);
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend(v32, "supportsFoundInSuggestions");

    if (v33)
    {
      v34 = objc_opt_new();
      foundInSuggestionPresenter = v4->_foundInSuggestionPresenter;
      v4->_foundInSuggestionPresenter = (SGFoundInSuggestionPresenter *)v34;

      -[SGFoundInSuggestionPresenter setDelegate:](v4->_foundInSuggestionPresenter, "setDelegate:", v4);
    }
    v36 = -[CKChatTipManager initWithChatController:]([_TtC7ChatKit16CKChatTipManager alloc], "initWithChatController:", v4);
    tipManager = v4->_tipManager;
    v4->_tipManager = v36;

    objc_msgSend(MEMORY[0x1E0D397A8], "sharedInstance");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v4->_shouldFetchCollaborationNotices = objc_msgSend(v38, "isBatchFetchingForLaunchCompleted");

    v39 = (id)objc_msgSend(MEMORY[0x1E0D357C8], "sharedInstance");
    -[CKChatController setEffectPickerIsPresented:](v4, "setEffectPickerIsPresented:", 0);
    v40 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    -[CKChatController setFileURLKeyToGuidMapping:](v4, "setFileURLKeyToGuidMapping:", v40);

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController setActiveDropPreviews:](v4, "setActiveDropPreviews:", v41);

    v42 = objc_alloc_init(_TtC7ChatKit25CKSuggestedActionsHandler);
    -[CKChatController setSuggestedActionsHandler:](v4, "setSuggestedActionsHandler:", v42);

    -[CKChatController suggestedActionsHandler](v4, "suggestedActionsHandler");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "setDelegate:", v4);

    -[CKChatController setIsWebViewVisible:](v4, "setIsWebViewVisible:", 0);
  }
  return v4;
}

- (void)_handleGroupPhotoChanged:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "chatIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController chat](self, "chat");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "chatIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v6, "isEqualToString:", v8);

  if (v9)
  {
    -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "conversationIdentityView");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "updateAvatarViewVisualIdentity");

    objc_msgSend(v4, "userInfo");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "valueForKey:", CFSTR("CKGroupPhotoUpdate"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "groupUpdates");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "firstObject");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "handleID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v13, "handleID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v18, "isEqualToString:", v19);
      -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "updateBannerType");

      if (v22 != 2 && v22 != 4 && v20)
      {
        v23 = objc_msgSend(v13, "groupUpdateType");
        v24 = 3;
        v25 = 3;
        if (v22 == 5)
          v25 = 6;
        if (v22 == 1)
          v25 = 7;
        v26 = 3;
        if (v22 == 5)
          v26 = 8;
        if (v23 == 2)
          v24 = v26;
        if (v23 == 4)
          v27 = v25;
        else
          v27 = v24;
        objc_msgSend(v13, "setGroupUpdateType:", v27);
      }
      -[CKChatController dimsmissCurrentBannerAndShowNewBannerForGroupUpdate:](self, "dimsmissCurrentBannerAndShowNewBannerForGroupUpdate:", v13);

    }
    else
    {
      v28[0] = v13;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v28, 1);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController showBannerForGroupUpdate:](self, "showBannerForGroupUpdate:", v18);
    }

  }
}

- (void)_handleGroupNameChanged:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "chatIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController chat](self, "chat");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "chatIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v6, "isEqualToString:", v8);

  if (v9)
  {
    -[CKCoreChatController _updateTitleAnimated:](self, "_updateTitleAnimated:", 1);
    if (-[CKChatController shouldUseMacRecipientsView](self, "shouldUseMacRecipientsView"))
    {
      -[CKChatController macRecipientsController](self, "macRecipientsController");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "refreshRecipients");

    }
    objc_msgSend(v4, "userInfo");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "valueForKey:", CFSTR("GroupNameUpdate"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      objc_msgSend(MEMORY[0x1E0C99E38], "null");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12 != v13)
      {
        -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        if (v14)
        {
          -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "groupUpdates");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "firstObject");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "handleID");
          v18 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v12, "handleID");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v18, "isEqualToString:", v19);
          -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v21, "updateBannerType");

          if ((v22 & 0xFFFFFFFFFFFFFFFBLL) != 1 && v20)
          {
            -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            v24 = objc_msgSend(v23, "updateBannerType");

            v25 = objc_msgSend(v12, "groupUpdateType");
            v26 = 3;
            v27 = 3;
            if (v24 == 4)
              v27 = 6;
            if (v24 == 2)
              v27 = 8;
            v28 = 3;
            if (v24 == 4)
              v28 = 7;
            if (v25 == 1)
              v26 = v28;
            if (v25 == 5)
              v29 = v27;
            else
              v29 = v26;
            objc_msgSend(v12, "setGroupUpdateType:", v29);
          }
          -[CKChatController dimsmissCurrentBannerAndShowNewBannerForGroupUpdate:](self, "dimsmissCurrentBannerAndShowNewBannerForGroupUpdate:", v12);

        }
        else
        {
          v30[0] = v12;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v30, 1);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          -[CKChatController showBannerForGroupUpdate:](self, "showBannerForGroupUpdate:", v18);
        }

      }
    }

  }
}

- (void)_messageReceived:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "personCentricID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController chat](self, "chat");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "personCentricID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v6, "isEqualToString:", v8);

  if (v9)
  {
    objc_msgSend(v4, "userInfo");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKey:", *MEMORY[0x1E0D354E8]);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "sender");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "account");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "service");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      -[CKCoreChatController conversation](self, "conversation");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "sendingService");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (v14 != v16)
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v11, "sender");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "account");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "service");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            -[CKCoreChatController conversation](self, "conversation");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "sendingService");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412546;
            v25 = v19;
            v26 = 2112;
            v27 = v21;
            _os_log_impl(&dword_18DFCD000, v17, OS_LOG_TYPE_INFO, "Refresh service: received a message with service %@ different than current chat service %@", buf, 0x16u);

          }
        }
        -[CKCoreChatController chat](self, "chat");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "refreshServiceForSending");

      }
    }

  }
}

- (void)_transferFileTooLarge:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  __CFString *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  _QWORD block[4];
  id v25;
  CKChatController *v26;

  v4 = a3;
  CKFrameworkBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("FILE_TOO_LARGE_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "userInfo");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "objectForKey:", CFSTR("kCKTransferFileTooLargeAttachmentURLKey"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "lastPathComponent");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = (void *)MEMORY[0x1E0CB3940];
    CKFrameworkBundle();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("FILE_TOO_LARGE_DESC"), &stru_1E276D870, CFSTR("ChatKit"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "stringWithFormat:", v12, v9);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "userInterfaceLayoutDirection");

    if (v15 == 1)
      v16 = CFSTR("\u200F");
    else
      v16 = CFSTR("\u200E");
    -[__CFString stringByAppendingString:](v16, "stringByAppendingString:", v13);
    v17 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    CKFrameworkBundle();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("FILE_TOO_LARGE_NO_NAME_DESC"), &stru_1E276D870, CFSTR("ChatKit"));
    v17 = objc_claimAutoreleasedReturnValue();
  }
  v18 = (void *)v17;

  +[CKAlertController alertControllerWithTitle:message:preferredStyle:](CKAlertController, "alertControllerWithTitle:message:preferredStyle:", v6, v18, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  CKFrameworkBundle();
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1E276D870, CFSTR("ChatKit"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v21, 1, 0);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v19, "addAction:", v22);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __42__CKChatController__transferFileTooLarge___block_invoke;
  block[3] = &unk_1E274A108;
  v25 = v19;
  v26 = self;
  v23 = v19;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

uint64_t __42__CKChatController__transferFileTooLarge___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "presentFromViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);
}

- (void)dimsmissCurrentBannerAndShowNewBannerForGroupUpdate:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __72__CKChatController_dimsmissCurrentBannerAndShowNewBannerForGroupUpdate___block_invoke;
  v7[3] = &unk_1E274A108;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  -[CKChatController _dismissBannerView:completion:](self, "_dismissBannerView:completion:", v5, v7);

}

void __72__CKChatController_dimsmissCurrentBannerAndShowNewBannerForGroupUpdate___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "setGroupPhotoUpdateBanner:", 0);
  objc_msgSend(*(id *)(a1 + 32), "updateScrollGeometryWithoutAnimationForReason:", CFSTR("BannerDismissed"));
  objc_msgSend(*(id *)(a1 + 32), "conversation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setShouldShowGroupNameUpdateBanner:", 0);

  objc_msgSend(*(id *)(a1 + 32), "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setShouldShowGroupPhotoUpdateBanner:", 0);

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = *(void **)(a1 + 32);
    v7[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "showBannerForGroupUpdate:", v6);

  }
}

- (id)createBannerForGroupUpdates:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  CKGroupUpdateBannerView *v14;
  _QWORD aBlock[4];
  id v17;
  id v18;
  id location;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "firstObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D397A8], "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "handleID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "fetchCNContactForHandleWithID:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v20[0] = v8;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v9 = (void *)MEMORY[0x1E0C9AA60];
  }
  +[CKNicknameUtility groupPhotoUpdateTitleForUpdate:](CKNicknameUtility, "groupPhotoUpdateTitleForUpdate:", v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKNicknameUtility groupPhotoUpdateSubtitleForUpdate:](CKNicknameUtility, "groupPhotoUpdateSubtitleForUpdate:", v5);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  location = 0;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __48__CKChatController_createBannerForGroupUpdates___block_invoke;
  aBlock[3] = &unk_1E274C670;
  objc_copyWeak(&v18, &location);
  v12 = v5;
  v17 = v12;
  v13 = _Block_copy(aBlock);
  v14 = -[CKNicknameBannerView initWithStyle:updates:useNamedTitles:avatarImages:contacts:customImage:titleString:subtitleString:actionButtonTitle:actionButtonHandler:actionButtonMenuItems:xButtonHandler:]([CKGroupUpdateBannerView alloc], "initWithStyle:updates:useNamedTitles:avatarImages:contacts:customImage:titleString:subtitleString:actionButtonTitle:actionButtonHandler:actionButtonMenuItems:xButtonHandler:", 7, 0, 1, 0, v9, 0, v10, v11, 0, 0, 0, v13);
  -[CKGroupUpdateBannerView setGroupUpdates:](v14, "setGroupUpdates:", v4);
  -[CKGroupUpdateBannerView setUpdateBannerType:](v14, "setUpdateBannerType:", objc_msgSend(v12, "groupUpdateType"));

  objc_destroyWeak(&v18);
  objc_destroyWeak(&location);

  return v14;
}

void __48__CKChatController_createBannerForGroupUpdates___block_invoke(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "groupPhotoUpdateBanner:dismissedUpdate:", v4, *(_QWORD *)(a1 + 32));

}

- (void)showBannerForGroupUpdate:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint8_t v11[16];

  v4 = a3;
  objc_msgSend(v4, "firstObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    -[CKChatController createBannerForGroupUpdates:](self, "createBannerForGroupUpdates:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController setGroupPhotoUpdateBanner:](self, "setGroupPhotoUpdateBanner:", v6);
    objc_msgSend(v4, "firstObject");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "groupUpdateType");
    -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setUpdateBannerType:", v8);

    -[CKChatController showGroupBannerUpdateIfNeeded](self, "showGroupBannerUpdateIfNeeded");
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, "Attempting to show banner for group update, but groupUpdates is empty", v11, 2u);
    }

  }
}

- (void)windowDidResignKey:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  char v7;
  _BOOL4 v8;
  void *v9;
  id v10;

  -[CKCoreChatController inputController](self, "inputController", a3);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "isInputViewVisible"))
  {
    -[CKChatController view](self, "view");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "window");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "windowScene");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "_isKeyWindowScene");

    if ((v7 & 1) != 0)
      return;
    v8 = CKIsAppCardsEnabled();
    -[CKCoreChatController inputController](self, "inputController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v8)
      objc_msgSend(v9, "dismissAppCardIfNecessaryAnimated:completion:", 0, 0);
    else
      objc_msgSend(v9, "forceDismissBrowserWithoutAnimation");
  }

}

- (void)registerChatForScreenTime:(id)a3
{
  id v4;
  int v5;
  void *v6;
  id v7;

  v4 = a3;
  if (v4)
  {
    v7 = v4;
    v5 = objc_msgSend(MEMORY[0x1E0D35808], "isContactLimitsFeatureEnabled");
    v4 = v7;
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addObserver:selector:name:object:", self, sel_chatAllowedByScreenTimeChanged_, *MEMORY[0x1E0D352D8], v7);

      -[CKChatController updateScreenTimeShieldIfNeededForChat:](self, "updateScreenTimeShieldIfNeededForChat:", v7);
      v4 = v7;
    }
  }

}

- (void)unregisterChatForScreenTime:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  if (objc_msgSend(MEMORY[0x1E0D35808], "isContactLimitsFeatureEnabled"))
  {
    -[CKChatController removeLockoutControllerIfNeeded](self, "removeLockoutControllerIfNeeded");
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "removeObserver:name:object:", self, *MEMORY[0x1E0D352D8], v5);

    }
  }

}

- (void)chatAllowedByScreenTimeChanged:(id)a3
{
  id v4;
  void *v5;
  id v6;
  NSObject *v7;
  void *v8;
  int v9;
  id v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (objc_msgSend(MEMORY[0x1E0D35808], "isContactLimitsFeatureEnabled"))
  {
    objc_msgSend(v4, "object");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v6 = v5;
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v6, "allowedByScreenTime"));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = 138412546;
          v10 = v6;
          v11 = 2112;
          v12 = v8;
          _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "chat: %@ received IMChatAllowedByScreenTimeChangedNotification notification, allowed = %@", (uint8_t *)&v9, 0x16u);

        }
      }
      -[CKChatController updateScreenTimeShieldIfNeededForChat:](self, "updateScreenTimeShieldIfNeededForChat:", v6);

    }
  }

}

- (BOOL)isChatAllowedByScreenTime:(id)a3
{
  return objc_msgSend(a3, "allowedByScreenTime");
}

- (void)updateScreenTimeShieldIfNeededForChat:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  if (v4)
  {
    v5 = v4;
    if (-[CKChatController isChatAllowedByScreenTime:](self, "isChatAllowedByScreenTime:", v4))
      -[CKChatController removeLockoutControllerIfNeeded](self, "removeLockoutControllerIfNeeded");
    else
      -[CKChatController showScreenTimeShieldIfNeeded](self, "showScreenTimeShieldIfNeeded");
    v4 = v5;
  }

}

- (void)lockoutViewControllerDidFinishDismissing:(id)a3
{
  void *v4;
  char v5;
  void *v6;

  -[CKCoreChatController delegate](self, "delegate", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_respondsToSelector();

  if ((v5 & 1) != 0)
  {
    -[CKCoreChatController delegate](self, "delegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "screenTimeOKPressedForChatController:", self);

  }
  -[CKChatController _doneButtonPressed](self, "_doneButtonPressed");
}

- (void)_stageFindMyLocationRequest
{
  void *v3;
  int v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isWaldoEnabled");

  if (v4)
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x2050000000;
    v5 = (void *)getMSMessageClass_softClass_0;
    v13 = getMSMessageClass_softClass_0;
    if (!getMSMessageClass_softClass_0)
    {
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = __getMSMessageClass_block_invoke_0;
      v9[3] = &unk_1E274A178;
      v9[4] = &v10;
      __getMSMessageClass_block_invoke_0((uint64_t)v9);
      v5 = (void *)v11[3];
    }
    v6 = objc_retainAutorelease(v5);
    _Block_object_dispose(&v10, 8);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v6, "findMyLocationRequestMessage");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      +[CKComposition compositionWithMSMessage:appExtensionIdentifier:](CKComposition, "compositionWithMSMessage:appExtensionIdentifier:", v7, *MEMORY[0x1E0D37508]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController setComposition:](self, "setComposition:", v8);

    }
  }
}

- (void)setConversation:(id)a3
{
  -[CKChatController setConversation:forceReload:](self, "setConversation:forceReload:", a3, 0);
}

- (void)setConversation:(id)a3 forceReload:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  objc_super v15;

  v4 = a4;
  v6 = a3;
  -[CKCoreChatController conversation](self, "conversation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "chat");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController unregisterChatForScreenTime:](self, "unregisterChatForScreenTime:", v8);

  -[CKChatController reloadFooterViewIfNecessaryForNewConversation:](self, "reloadFooterViewIfNecessaryForNewConversation:", self);
  v15.receiver = self;
  v15.super_class = (Class)CKChatController;
  -[CKCoreChatController setConversation:forceReload:](&v15, sel_setConversation_forceReload_, v6, v4);
  -[CKChatController setMediaObjectToDownload:](self, "setMediaObjectToDownload:", 0);
  objc_msgSend(v6, "chat");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController registerChatForScreenTime:](self, "registerChatForScreenTime:", v9);

  -[CKChatController _updateRecipientCapabilities](self, "_updateRecipientCapabilities");
  -[CKChatController setupClickyOrbForConversation:](self, "setupClickyOrbForConversation:", v6);

  -[CKChatController _updateTitleViewLayout](self, "_updateTitleViewLayout");
  objc_msgSend(MEMORY[0x1E0D397A8], "sharedInstance");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController setShouldFetchCollaborationNotices:](self, "setShouldFetchCollaborationNotices:", objc_msgSend(v10, "isBatchFetchingForLaunchCompleted"));

  -[CKChatController setEditing:animated:](self, "setEditing:animated:", 0, 0);
  -[CKCoreChatController chat](self, "chat");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "firstUnreadMessageItem");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "guid");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController setFirstUnreadMessageGUID:](self, "setFirstUnreadMessageGUID:", v13);

  objc_msgSend(v12, "guid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController setFirstUnreadMessageGUIDForTextEffects:](self, "setFirstUnreadMessageGUIDForTextEffects:", v14);

}

- (id)viewToInsertTranscriptCollectionViewBelow
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  objc_super v9;

  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[CKChatController inlineReplyController](self, "inlineReplyController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[CKChatController messageEditingViewController](self, "messageEditingViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      v9.receiver = self;
      v9.super_class = (Class)CKChatController;
      -[CKCoreChatController viewToInsertTranscriptCollectionViewBelow](&v9, sel_viewToInsertTranscriptCollectionViewBelow);
      return (id)objc_claimAutoreleasedReturnValue();
    }
    -[CKChatController messageEditingViewController](self, "messageEditingViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v6 = v4;
  objc_msgSend(v4, "view");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

- (void)forciblyUnloadChatInputController
{
  void *v3;
  void *v4;
  char isKindOfClass;
  void *v6;
  void *v7;

  -[CKCoreChatController inputController](self, "inputController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "inputViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    -[CKCoreChatController inputController](self, "inputController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "inputViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setViewController:", 0);

  }
  -[CKCoreChatController setInputController:](self, "setInputController:", 0);
  -[CKChatController setEntryView:](self, "setEntryView:", 0);
}

- (BOOL)isHandwritingLandscape
{
  void *v2;
  char v3;

  -[CKCoreChatController inputController](self, "inputController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isHandwritingLandscape");

  return v3;
}

- (BOOL)shouldPresentBlockingDowntimeViewController
{
  return 1;
}

- (void)removeLockoutControllerIfNeeded
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(MEMORY[0x1E0D35808], "isContactLimitsFeatureEnabled")
    && -[CKCoreChatController isShowingLockoutView](self, "isShowingLockoutView"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        -[CKCoreChatController chat](self, "chat");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412290;
        v12 = v4;
        _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "removing ScreenTime blocking shield for chat: %@", (uint8_t *)&v11, 0xCu);

      }
    }
    -[CKCoreChatController lockoutViewController](self, "lockoutViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "view");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "removeFromSuperview");

    objc_msgSend(v5, "removeFromParentViewController");
    -[CKCoreChatController setLockoutViewController:](self, "setLockoutViewController:", 0);
    -[CKChatController setLockoutView:](self, "setLockoutView:", 0);
    -[CKCoreChatController setIsShowingLockoutView:](self, "setIsShowingLockoutView:", 0);
    -[CKCoreChatController conversation](self, "conversation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController setConversation:](self, "setConversation:", v7);

    v8 = IMIsRunningInScreenshotTesting_IsolatedTranscriptUI();
    -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "detailsButton");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setHidden:", v8);

    -[CKChatController addOrRemoveEntryViewIfNeeded](self, "addOrRemoveEntryViewIfNeeded");
    -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
    -[CKChatController refreshMacToolbar](self, "refreshMacToolbar");
    -[CKChatController reloadInputViews](self, "reloadInputViews");

  }
}

- (void)showScreenTimeShieldIfNeeded
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  BOOL v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD block[4];
  id v30;
  _BYTE buf[24];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(MEMORY[0x1E0D35808], "isContactLimitsFeatureEnabled")
    && -[CKChatController shouldPresentBlockingDowntimeViewController](self, "shouldPresentBlockingDowntimeViewController")&& !-[CKCoreChatController isShowingLockoutView](self, "isShowingLockoutView"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        -[CKCoreChatController chat](self, "chat");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v4;
        _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "showing ScreenTime blocking shield for chat: %@", buf, 0xCu);

      }
    }
    objc_msgSend(MEMORY[0x1E0D397A8], "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "getContactStore");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!showScreenTimeShieldIfNeeded_CKSTLockoutViewController)
      showScreenTimeShieldIfNeeded_CKSTLockoutViewController = MEMORY[0x193FF3C18](CFSTR("STLockoutViewController"), CFSTR("ScreenTimeUI"));
    -[CKCoreChatController conversation](self, "conversation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "chat");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      IMSharedDowntimeController();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKCoreChatController conversation](self, "conversation");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "chat");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "conversationContextForChat:", v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController setConversationContext:](self, "setConversationContext:", v12);

    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v13, OS_LOG_TYPE_INFO, "Chat is nil when attempting to show screentime shield", buf, 2u);
      }

    }
    -[CKChatController conversationContext](self, "conversationContext");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v14)
      v15 = v6 == 0;
    else
      v15 = 1;
    v16 = !v15;

    v17 = (void *)showScreenTimeShieldIfNeeded_CKSTLockoutViewController;
    if (v16)
    {
      -[CKChatController conversationContext](self, "conversationContext");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKCoreChatController conversation](self, "conversation");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "contactNameByHandle");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "lockoutViewControllerWithConversationContext:bundleIdentifier:contactStore:applicationName:contactNameByHandle:", v18, CFSTR("com.apple.MobileSMS"), v6, 0, v20);
    }
    else
    {
      -[CKCoreChatController _handleIDsForCurrentConversation](self, "_handleIDsForCurrentConversation");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKCoreChatController conversation](self, "conversation");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "contactNameByHandle");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "lockoutViewControllerWithBundleIdentifier:contactsHandles:contactNameByHandle:", CFSTR("com.apple.MobileSMS"), v18, v20);
    }
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (-[CKChatController isCollapsed](self, "isCollapsed"))
      objc_msgSend(v21, "setOkButtonAction:", 1);
    else
      objc_msgSend(v21, "setOkButtonAlwaysHidden:", 1);
    objc_msgSend(v21, "setViewControllerDelegate:", self);
    objc_msgSend(v21, "view");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController setLockoutView:](self, "setLockoutView:", v22);

    -[CKCoreChatController setLockoutViewController:](self, "setLockoutViewController:", v21);
    -[CKChatController view](self, "view");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController lockoutView](self, "lockoutView");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "addSubview:", v24);

    -[CKChatController addChildViewController:](self, "addChildViewController:", v21);
    -[CKCoreChatController setIsShowingLockoutView:](self, "setIsShowingLockoutView:", 1);
    -[CKChatController addOrRemoveEntryViewIfNeeded](self, "addOrRemoveEntryViewIfNeeded");
    -[CKChatController view](self, "view");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "setNeedsLayout");

    -[CKChatController view](self, "view");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "layoutIfNeeded");

    -[CKChatController reloadInputViews](self, "reloadInputViews");
    *(_QWORD *)buf = 0;
    objc_initWeak((id *)buf, self);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __48__CKChatController_showScreenTimeShieldIfNeeded__block_invoke;
    block[3] = &unk_1E274B548;
    objc_copyWeak(&v30, (id *)buf);
    dispatch_async(MEMORY[0x1E0C80D38], block);
    -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "detailsButton");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setHidden:", 1);

    -[CKChatController refreshMacToolbar](self, "refreshMacToolbar");
    objc_destroyWeak(&v30);
    objc_destroyWeak((id *)buf);

  }
}

void __48__CKChatController_showScreenTimeShieldIfNeeded__block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "view");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "window");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "firstResponder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "resignFirstResponder");

}

- (void)setCollectionViewController:(id)a3
{
  void *v4;
  objc_super v5;

  v5.receiver = self;
  v5.super_class = (Class)CKChatController;
  -[CKCoreChatController setCollectionViewController:](&v5, sel_setCollectionViewController_, a3);
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setDragInteractionDelegate:", self);

}

- (void)loadView
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  objc_super v10;

  v10.receiver = self;
  v10.super_class = (Class)CKChatController;
  -[CKCoreChatController loadView](&v10, sel_loadView);
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v3, "_supportsForceTouch"))
    goto LABEL_4;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "disableTranscriptOrb");

  if ((v5 & 1) == 0)
  {
    -[CKChatController view](self, "view");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController registerPreviewSourceView:previewingDelegate:](self, "registerPreviewSourceView:previewingDelegate:", v3, self);
LABEL_4:

  }
  -[CKChatController navigationItem](self, "navigationItem");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setLargeTitleDisplayMode:", 2);

  -[CKChatController _updateNavigationUI](self, "_updateNavigationUI");
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA588]), "initWithDelegate:", self);
  objc_msgSend(v7, "setAllowsSimultaneousDropSessions:", 1);
  -[CKChatController view](self, "view");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addInteraction:", v7);

  -[CKChatController transcriptInlineNotificationUpdater](self, "transcriptInlineNotificationUpdater");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setNeedsUpdate");

}

- (void)_updateNavigationUI
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    -[CKChatController navigationController](self, "navigationController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "navigationBar");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "standardAppearance");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = (id)objc_msgSend(v6, "copy");

    if (-[CKChatController wantsChromelessAppearance](self, "wantsChromelessAppearance"))
      objc_msgSend(v14, "configureWithTransparentBackground");
    else
      objc_msgSend(v14, "configureWithDefaultBackground");
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "theme");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKCoreChatController conversation](self, "conversation");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "chat");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "primaryBrandColorForBusinessChat:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setBackgroundColor:", v11);

    -[CKChatController navigationItem](self, "navigationItem");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setScrollEdgeAppearance:", v14);

    -[CKChatController navigationItem](self, "navigationItem");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setStandardAppearance:", v14);

  }
}

- (void)viewDidLoad
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint8_t v8[16];
  objc_super v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v9.receiver = self;
  v9.super_class = (Class)CKChatController;
  -[CKCoreChatController viewDidLoad](&v9, sel_viewDidLoad);
  if (-[CKChatController shouldUseNavigationBarCanvasView](self, "shouldUseNavigationBarCanvasView"))
  {
    -[CKChatController _initializeNavigationBarCanvasViewIfNecessary](self, "_initializeNavigationBarCanvasViewIfNecessary");
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "Ready to configure nav bar title view from viewDidLoad.", v8, 2u);
      }

    }
    -[CKChatController _configureTitleView](self, "_configureTitleView");
  }
  +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addExtensionConsumer:", self);

  -[CKCoreChatController chat](self, "chat");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_reloadChatItemsForSatelliteStateChangeIfRequired:", CFSTR("CKChatController viewDidLoad"));

  v10[0] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (id)-[CKChatController registerForTraitChanges:withHandler:](self, "registerForTraitChanges:withHandler:", v6, &__block_literal_global_29);

}

void __31__CKChatController_viewDidLoad__block_invoke(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  objc_msgSend(v2, "_updateEntryViewConstraintsIfNeeded");
  objc_msgSend(v2, "_setUpEntryViewAppCardLayoutConstraint");
  objc_msgSend(v2, "updateActiveEntryViewPositioningGuide");

}

- (void)transcriptCollectionViewControllerDidInset:(id)a3
{
  void *v4;
  objc_super v5;

  v5.receiver = self;
  v5.super_class = (Class)CKChatController;
  -[CKCoreChatController transcriptCollectionViewControllerDidInset:](&v5, sel_transcriptCollectionViewControllerDidInset_, a3);
  -[CKChatController transcriptInlineNotificationUpdater](self, "transcriptInlineNotificationUpdater");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setNeedsUpdate");

  -[CKChatController scrollTranscriptToAlignWithMessageEditingBalloonView](self, "scrollTranscriptToAlignWithMessageEditingBalloonView");
}

- (void)_updateBannerNotifications
{
  -[CKChatController _updateAccountRegistrationFailureNotification](self, "_updateAccountRegistrationFailureNotification");
  -[CKChatController _updateLogoutBannerNotification](self, "_updateLogoutBannerNotification");
}

- (void)_updateLogoutBannerNotification
{
  BOOL v3;
  void *v4;
  char v5;
  CKChatController *v6;
  uint64_t v7;
  id v8;

  if (CKIsRunningInMessages()
    && !CKIsRunningUITests()
    && !CKIsRunningForDevelopmentOnSimulator())
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v8, "isRunningInStoreDemoMode"))
    {

    }
    else
    {
      v3 = -[CKChatController _isRunningPPT](self, "_isRunningPPT");

      if (!v3)
      {
        -[CKCoreChatController chat](self, "chat");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = objc_msgSend(v4, "isStewieChat");

        if ((v5 & 1) == 0)
        {
          if (CKIsUnexpectedlyLoggedOut()
            && -[CKChatController _chatShowsAccountRegistrationFailureBanner](self, "_chatShowsAccountRegistrationFailureBanner"))
          {
            v6 = self;
            v7 = 1;
          }
          else
          {
            v6 = self;
            v7 = 0;
          }
          -[CKChatController _updateNotificationBannerOfType:show:](v6, "_updateNotificationBannerOfType:show:", 1, v7);
        }
      }
    }
  }
}

- (void)_updateAccountRegistrationFailureNotification
{
  char v3;
  uint64_t v4;
  int v5;
  _BOOL8 v6;

  if ((CKIsAppleIDNotUpdated() & 1) != 0)
  {
    v3 = 0;
    v4 = 3;
  }
  else
  {
    v5 = CKIsWaitingForCloud();
    v3 = v5 ^ 1;
    if (v5)
      v4 = 2;
    else
      v4 = 0;
  }
  if (-[CKChatController notificationBannerType](self, "notificationBannerType") != v4
    && (-[CKChatController notificationBannerType](self, "notificationBannerType") & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    -[CKChatController _updateNotificationBannerOfType:show:](self, "_updateNotificationBannerOfType:show:", -[CKChatController notificationBannerType](self, "notificationBannerType"), 0);
  }
  v6 = (v3 & 1) == 0
    && -[CKChatController _chatShowsAccountRegistrationFailureBanner](self, "_chatShowsAccountRegistrationFailureBanner");
  -[CKChatController _updateNotificationBannerOfType:show:](self, "_updateNotificationBannerOfType:show:", v4, v6);
}

- (void)_updateNotificationBannerOfType:(int64_t)a3 show:(BOOL)a4
{
  _BOOL4 v4;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  BOOL v12;
  void *v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  BOOL v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  void *v31;
  double v32;
  double v33;
  void *v34;
  _DWORD v35[2];
  __int16 v36;
  void *v37;
  uint64_t v38;

  v4 = a4;
  v38 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v35[0] = 67109378;
      v35[1] = v4;
      v36 = 2112;
      v37 = v9;
      _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Update banner notificaton show:%d type:%@", (uint8_t *)v35, 0x12u);

    }
  }
  if (!v4)
  {
    if (-[CKChatController notificationBannerType](self, "notificationBannerType") != a3)
    {
      if (-[CKChatController notificationBannerType](self, "notificationBannerType") != a3)
        return;
      goto LABEL_17;
    }
LABEL_15:
    -[CKChatController notificationBannerView](self, "notificationBannerView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "removeFromSuperview");

    -[CKChatController setNotificationBannerView:](self, "setNotificationBannerView:", 0);
    -[CKChatController setNotificationBannerType:](self, "setNotificationBannerType:", 0);
    return;
  }
  if (!a3)
    goto LABEL_15;
  if (-[CKChatController notificationBannerType](self, "notificationBannerType") > a3
    || a3 == 1
    && ((CKIsAppleIDNotUpdated() & 1) != 0
     || (CKIsWaitingForCloud() & 1) != 0
     || (IMGetUserIgnoreFailureWaitingForCloudIntent() & 1) != 0
     || (IMGetUserIgnoreFailureUpdateAppleIDIntent() & 1) != 0))
  {
    return;
  }
LABEL_17:
  -[CKChatController notificationBannerView](self, "notificationBannerView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    v12 = -[CKChatController notificationBannerType](self, "notificationBannerType") == a3;

    if (!v12)
    {
      -[CKChatController notificationBannerView](self, "notificationBannerView");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "removeFromSuperview");

      -[CKChatController setNotificationBannerView:](self, "setNotificationBannerView:", 0);
    }
  }
  -[CKChatController setNotificationBannerType:](self, "setNotificationBannerType:", a3);
  -[CKChatController notificationBannerView](self, "notificationBannerView");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14 == 0;

  if (!v15)
    goto LABEL_29;
  switch(a3)
  {
    case 0:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("CKChatController.m"), 1948, CFSTR("This case should have been already filtered out"));
      goto LABEL_26;
    case 1:
      +[CKBannerViewFactory unexpectedlyLoggedOutBanner](_TtC7ChatKit19CKBannerViewFactory, "unexpectedlyLoggedOutBanner");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController setNotificationBannerView:](self, "setNotificationBannerView:", v16);
      goto LABEL_26;
    case 2:
      +[CKBannerViewFactory waitingForCloudBanner](_TtC7ChatKit19CKBannerViewFactory, "waitingForCloudBanner");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController setNotificationBannerView:](self, "setNotificationBannerView:", v16);
      goto LABEL_26;
    case 3:
      +[CKBannerViewFactory updateAppleIDSettingsBanner](_TtC7ChatKit19CKBannerViewFactory, "updateAppleIDSettingsBanner");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController setNotificationBannerView:](self, "setNotificationBannerView:", v16);
LABEL_26:

      break;
    default:
      break;
  }
  -[CKChatController notificationBannerView](self, "notificationBannerView");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v17 == 0;

  if (!v18)
  {
    -[CKChatController view](self, "view");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController notificationBannerView](self, "notificationBannerView");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "addSubview:", v20);

LABEL_29:
    -[CKChatController view](self, "view");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController notificationBannerView](self, "notificationBannerView");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "bringSubviewToFront:", v22);

    -[CKChatController notificationBannerView](self, "notificationBannerView");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController view](self, "view");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "bounds");
    objc_msgSend(v23, "sizeThatFits:", v25, v26);
    v28 = v27;
    v30 = v29;

    -[CKCoreChatController scrollView](self, "scrollView");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "contentInset");
    v33 = v32;
    -[CKChatController notificationBannerView](self, "notificationBannerView");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "setFrame:", 0.0, v33, v28, v30);

  }
}

- (BOOL)_chatShowsAccountRegistrationFailureBanner
{
  return !-[CKChatController isTesting](self, "isTesting");
}

- (void)insertInitialCompositionIfNeeded
{
  id v3;

  -[CKChatController initialComposition](self, "initialComposition");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[CKChatController setInitialComposition:](self, "setInitialComposition:", 0);
    -[CKChatController setComposition:](self, "setComposition:", v3);
  }

}

- (void)viewDidLayoutSubviews
{
  BOOL v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  void *v21;
  void *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float v34;
  double v35;
  NSObject *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  BOOL v82;
  void (**v83)(void);
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  void *v98;
  BOOL v99;
  objc_super v100;
  uint8_t buf[4];
  id v102;
  __int16 v103;
  double v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v3 = -[CKCoreChatController initialLayoutComplete](self, "initialLayoutComplete");
  v100.receiver = self;
  v100.super_class = (Class)CKChatController;
  -[CKCoreChatController viewDidLayoutSubviews](&v100, sel_viewDidLayoutSubviews);
  if (__CurrentTestName && (objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "postNotificationName:object:userInfo:", CFSTR("PPTDidLayoutConversationEvent"), 0, 0);

  }
  if (-[CKCoreChatController initialLayoutComplete](self, "initialLayoutComplete"))
  {
    -[CKChatController view](self, "view");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "bounds");
    -[CKChatController _invalidateChatItemLayoutIfNecessary:](self, "_invalidateChatItemLayoutIfNecessary:", v6, v7);

  }
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v8, "useMacToolbar"))
    goto LABEL_9;
  v9 = -[CKCoreChatController showingInStandAloneWindow](self, "showingInStandAloneWindow");

  if (v9)
  {
    -[CKChatController view](self, "view");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "window");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "frame");
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v19 = v18;

    -[CKChatController macToolbarController](self, "macToolbarController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "updateWithFrame:", v13, v15, v17, v19);
LABEL_9:

  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "collectionView");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKChatController view](self, "view");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "bounds");
  v24 = v23;
  v26 = v25;

  -[CKChatController transcriptBottomContentOffsetAtSuspend](self, "transcriptBottomContentOffsetAtSuspend");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (!-[CKChatController needToEnforceScrollIntent](self, "needToEnforceScrollIntent")
    || (-[CKChatController lastLaidOutSize](self, "lastLaidOutSize"), v24 == v29) && v26 == v28)
  {
    if (v27)
    {
      objc_msgSend(v21, "__ck_bottomOffset");
      v31 = v30;
      v33 = v32;
      objc_msgSend(v27, "floatValue");
      v35 = v33 - v34;
      objc_msgSend(v21, "setContentOffset:", v31, v35);
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          -[CKChatController transcriptBottomContentOffsetAtSuspend](self, "transcriptBottomContentOffsetAtSuspend");
          v37 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "contentSize");
          v39 = v38;
          objc_msgSend(v21, "bounds");
          *(_DWORD *)buf = 138413058;
          v102 = v37;
          v103 = 2048;
          v104 = v35;
          v105 = 2048;
          v106 = v39;
          v107 = 2048;
          v108 = v40;
          _os_log_impl(&dword_18DFCD000, v36, OS_LOG_TYPE_INFO, "Stored bottom offset is %@, setting offset to %f for content height %f view height %f", buf, 0x2Au);

        }
      }
      if (-[CKChatController firstLayoutAfterResume](self, "firstLayoutAfterResume"))
        -[CKChatController setTranscriptBottomContentOffsetAtSuspend:](self, "setTranscriptBottomContentOffsetAtSuspend:", 0);
    }
  }
  else
  {
    -[CKChatController setNeedToEnforceScrollIntent:](self, "setNeedToEnforceScrollIntent:", 0);
    +[CKScrollViewAnimationProperties inheritedAnimation](CKScrollViewAnimationProperties, "inheritedAnimation");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "enforceTranscriptScrollIntentWithAnimationProperties:", v41);

  }
  -[CKChatController setFirstLayoutAfterResume:](self, "setFirstLayoutAfterResume:", 0);
  -[CKChatController setLastLaidOutSize:](self, "setLastLaidOutSize:", v24, v26);
  -[CKChatController insertInitialCompositionIfNeeded](self, "insertInitialCompositionIfNeeded");
  if (-[CKCoreChatController viewIsVisible](self, "viewIsVisible")
    && -[CKChatController targetFirstResponder](self, "targetFirstResponder") == 1)
  {
    -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
  }
  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v42 = (void *)objc_claimAutoreleasedReturnValue();

  if (v42)
  {
    -[CKChatController inlineReplyController](self, "inlineReplyController");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v43, "view");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController view](self, "view");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "bounds");
    objc_msgSend(v44, "setFrame:");

  }
  -[CKChatController messageEditingViewController](self, "messageEditingViewController");
  v46 = (void *)objc_claimAutoreleasedReturnValue();

  if (v46)
  {
    -[CKChatController view](self, "view");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "bounds");
    v49 = v48;
    v51 = v50;
    v53 = v52;
    v55 = v54;

    -[CKChatController messageEditingViewController](self, "messageEditingViewController");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v56, "view");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "setFrame:", v49, v51, v53, v55);

  }
  -[CKChatController activeSendMenuPresentationForChatController:](self, "activeSendMenuPresentationForChatController:", self);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "layout");
  -[CKChatController view](self, "view");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v59, "bounds");
  v61 = v60;
  v63 = v62;
  v65 = v64;
  v67 = v66;
  -[CKChatController entryViewContainerView](self, "entryViewContainerView");
  v68 = objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v68, "setFrame:", v61, v63, v65, v67);

  -[CKChatController _marginInsetsForEntryView](self, "_marginInsetsForEntryView");
  v70 = v69;
  v72 = v71;
  v74 = v73;
  v76 = v75;
  -[CKChatController entryView](self, "entryView");
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v77, "setMarginInsets:", v70, v72, v74, v76);

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v68) = objc_msgSend(v78, "entryViewFollowsKeyboardLayoutGuide");

  if ((v68 & 1) == 0)
  {
    -[CKChatController entryView](self, "entryView");
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController entryView](self, "entryView");
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v80, "frame");
    objc_msgSend(v79, "setFrame:");

  }
  if (!v3)
  {
    -[CKChatController scrollBlock](self, "scrollBlock");
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    v82 = v81 == 0;

    if (!v82)
    {
      -[CKChatController scrollBlock](self, "scrollBlock");
      v83 = (void (**)(void))objc_claimAutoreleasedReturnValue();
      v83[2]();

      -[CKChatController setScrollBlock:](self, "setScrollBlock:", 0);
    }
  }
  -[CKChatController transcriptInlineNotificationUpdater](self, "transcriptInlineNotificationUpdater");
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v84, "setNeedsUpdate");

  -[CKChatController currentNavigationBarBasedOnSizeClass](self, "currentNavigationBarBasedOnSizeClass");
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v86, "theme");
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v85, "setBarStyle:", objc_msgSend(v87, "navBarStyle"));

  -[CKChatController nicknameBanner](self, "nicknameBanner");
  v88 = (void *)objc_claimAutoreleasedReturnValue();

  if (v88)
  {
    -[CKChatController nicknameBanner](self, "nicknameBanner");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
    v90 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v90)
      goto LABEL_40;
    -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v90 = v89;
  if (v89 && !self->_shouldOverrideBannerFrameOnPopTransition)
  {
    objc_msgSend(v89, "setNeedsLayout");
    objc_msgSend(v90, "layoutIfNeeded");
    -[CKChatController view](self, "view");
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v91, "bounds");
    objc_msgSend(v90, "sizeThatFits:", v92, 1.79769313e308);
    v94 = v93;
    v96 = v95;

    -[CKScrollViewController navigationBarInsets](self, "navigationBarInsets");
    objc_msgSend(v90, "setFrame:", *MEMORY[0x1E0C9D648], v97, v94, v96);
  }
LABEL_40:
  if (-[CKCoreChatController isShowingLockoutView](self, "isShowingLockoutView"))
  {
    -[CKChatController lockoutView](self, "lockoutView");
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    v99 = v98 == 0;

    if (!v99)
      -[CKChatController layoutLockoutView](self, "layoutLockoutView");
  }
  -[CKChatController reloadFooterViewIfNecessaryForNewConversation:](self, "reloadFooterViewIfNecessaryForNewConversation:", self);
  -[CKChatController layoutFooterView](self, "layoutFooterView");

}

- (void)layoutLockoutView
{
  void *v3;
  id v4;

  -[CKChatController lockoutView](self, "lockoutView");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CKChatController view](self, "view");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bounds");
  objc_msgSend(v4, "setFrame:");

}

- (BOOL)isModal
{
  return 0;
}

- (CKTranscriptCollectionView)collectionView
{
  void *v2;
  void *v3;

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "collectionView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (CKTranscriptCollectionView *)v3;
}

- (id)preferredFocusEnvironments
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController entryView](self, "entryView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "contentView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "textView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    -[CKChatController entryView](self, "entryView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "contentView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "textView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v9);

  }
  return v3;
}

- (void)avatarViewPressed:(id)a3
{
  void *v4;
  int v5;
  id v6;

  -[CKCoreChatController delegate](self, "delegate", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hasDetailsNavigationController");

  if (v5)
  {
    -[CKCoreChatController delegate](self, "delegate");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "dismissDetailsNavigationController");

  }
  else
  {
    -[CKChatController presentDetailsViewController](self, "presentDetailsViewController");
  }
}

- (void)_setupNavbar
{
  CKNavigationBarTitleController *v3;
  void *v4;
  CKNavigationBarTitleController *v5;
  CKNavigationBarTitleController *navigationBarTitleController;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v3 = [CKNavigationBarTitleController alloc];
  -[CKCoreChatController conversation](self, "conversation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = -[CKNavigationBarTitleController initWithConversation:](v3, "initWithConversation:", v4);
  navigationBarTitleController = self->_navigationBarTitleController;
  self->_navigationBarTitleController = v5;

  -[CKNavigationBarTitleController setDelegate:](self->_navigationBarTitleController, "setDelegate:", self);
  -[CKNavigationBarTitleController setEditing:](self->_navigationBarTitleController, "setEditing:", -[CKChatController isEditing](self, "isEditing"));
  -[CKChatController navigationItem](self, "navigationItem");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKNavigationBarTitleController titleView](self->_navigationBarTitleController, "titleView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setTitleView:", v8);

  -[CKChatController navigationItem](self, "navigationItem");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKNavigationBarTitleController leftBarButtonItems](self->_navigationBarTitleController, "leftBarButtonItems");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setLeftBarButtonItems:", v10);

  -[CKChatController navigationItem](self, "navigationItem");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  -[CKNavigationBarTitleController rightBarButtonItems](self->_navigationBarTitleController, "rightBarButtonItems");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setRightBarButtonItems:", v11);

}

- (void)viewWillAppear:(BOOL)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  uint8_t v21[16];
  objc_super v22;

  v22.receiver = self;
  v22.super_class = (Class)CKChatController;
  -[CKCoreChatController viewWillAppear:](&v22, sel_viewWillAppear_, a3);
  -[CKChatController view](self, "view");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setNeedsLayout");

  -[CKScrollViewController endHoldingScrollGeometryUpdatesForReason:](self, "endHoldingScrollGeometryUpdatesForReason:", CFSTR("ViewControllerNotVisible"));
  if (!-[CKChatController isTransitioningFromQLPreviewToGrid](self, "isTransitioningFromQLPreviewToGrid"))
    -[CKScrollViewController endHoldingScrollGeometryUpdatesForReason:](self, "endHoldingScrollGeometryUpdatesForReason:", CFSTR("ShowingPhotoGridOverlay"));
  -[CKChatController navigationController](self, "navigationController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "navigationBar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "traitCollection");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "userInterfaceIdiom");

  if ((unint64_t)(v8 - 4) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    -[CKChatController navigationController](self, "navigationController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "navigationBar");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController navigationController](self, "navigationController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "navigationBar");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "standardAppearance");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setScrollEdgeAppearance:", v13);

  }
  if (-[CKChatController wantsChromelessAppearance](self, "wantsChromelessAppearance"))
    -[CKChatController _setupNavbar](self, "_setupNavbar");
  -[CKChatController _restoreDraftState](self, "_restoreDraftState");
  -[CKChatController registerForTextInputPayloadHandling](self, "registerForTextInputPayloadHandling");
  -[CKCoreChatController conversation](self, "conversation");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController registerForTextinputPayloadHandlingForCheckInForConversation:](self, "registerForTextinputPayloadHandlingForCheckInForConversation:", v14);

  -[CKChatController currentNavigationBarBasedOnSizeClass](self, "currentNavigationBarBasedOnSizeClass");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setAlpha:", 1.0);

  -[CKChatController currentNavigationBarBasedOnSizeClass](self, "currentNavigationBarBasedOnSizeClass");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "theme");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "setBarStyle:", objc_msgSend(v18, "navBarStyle"));

  -[CKChatController _showOrHideNicknameBannerIfNeeded](self, "_showOrHideNicknameBannerIfNeeded");
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_18DFCD000, v19, OS_LOG_TYPE_INFO, "Ready to configure nav bar title view from viewDidAppear:.", v21, 2u);
    }

  }
  -[CKChatController _configureTitleView](self, "_configureTitleView");
  -[CKChatController collectionView](self, "collectionView");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "beginDisablingTranscriptDynamicsForReason:", CFSTR("ViewIsAppearing"));

}

- (void)viewWillLayoutSubviews
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  objc_super v13;

  v13.receiver = self;
  v13.super_class = (Class)CKChatController;
  -[CKChatController viewWillLayoutSubviews](&v13, sel_viewWillLayoutSubviews);
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "isEntryViewInputAccessory") & 1) == 0)
  {
    -[CKChatController entryView](self, "entryView");
    v4 = objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      v5 = (void *)v4;
      -[CKChatController view](self, "view");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "bounds");
      v8 = v7;
      -[CKChatController entryView](self, "entryView");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "bounds");
      v11 = v10;

      if (v8 == v11)
        return;
      -[CKChatController _updateEntryViewFrameIfNeeded:](self, "_updateEntryViewFrameIfNeeded:", 0);
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "collectionView");
      v3 = (void *)objc_claimAutoreleasedReturnValue();

      if (v3)
      {
        if (objc_msgSend(v3, "numberOfItemsInSection:", 0) >= 1)
          -[CKChatController setNeedToEnforceScrollIntent:](self, "setNeedToEnforceScrollIntent:", 1);
      }
    }
  }

}

- (void)viewDidMoveToWindow:(id)a3 shouldAppearOrDisappear:(BOOL)a4
{
  void *v5;
  double v6;
  double v7;
  objc_super v8;

  v8.receiver = self;
  v8.super_class = (Class)CKChatController;
  -[CKChatController viewDidMoveToWindow:shouldAppearOrDisappear:](&v8, sel_viewDidMoveToWindow_shouldAppearOrDisappear_, a3, a4);
  -[CKChatController configureForCurrentTraitCollection](self, "configureForCurrentTraitCollection");
  -[CKChatController view](self, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bounds");
  -[CKChatController _invalidateChatItemLayoutIfNecessary:](self, "_invalidateChatItemLayoutIfNecessary:", v6, v7);

}

- (void)viewDidAppear:(BOOL)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  NSObject *v9;
  void *v10;
  int v11;
  const __CFString *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  NSObject *v20;
  void *v21;
  void *v22;
  objc_super v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  const __CFString *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v23.receiver = self;
  v23.super_class = (Class)CKChatController;
  -[CKCoreChatController viewDidAppear:](&v23, sel_viewDidAppear_, a3);
  -[CKChatController updateRaiseGesture](self, "updateRaiseGesture");
  -[CKChatController _setAvoidanceInsetsNeedsUpdate](self, "_setAvoidanceInsetsNeedsUpdate");
  if (__CurrentTestName && (objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "postNotificationName:object:userInfo:", CFSTR("PPTDidShowConversationEvent"), 0, 0);

  }
  if (!CKIsRunningInMacCatalyst())
  {
    -[CKChatController previewController](self, "previewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5
      && (objc_msgSend(v5, "transitionCoordinator"),
          v7 = (void *)objc_claimAutoreleasedReturnValue(),
          v8 = objc_msgSend(v7, "isInteractive"),
          v7,
          (v8 & 1) == 0))
    {
      -[CKChatController restoreEntryViewAfterPreview](self, "restoreEntryViewAfterPreview");
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v6, "transitionCoordinator");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "isInteractive");
        v12 = CFSTR("NO");
        if (v11)
          v12 = CFSTR("YES");
        *(_DWORD *)buf = 138412546;
        v25 = v6;
        v26 = 2112;
        v27 = v12;
        _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, "No preview controller: %@ - interactive: %@", buf, 0x16u);

      }
    }

  }
  objc_msgSend(MEMORY[0x1E0CEA6C8], "activeKeyboard");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController effectPickerWindow](self, "effectPickerWindow");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setTypingEnabled:", v14 == 0);

  -[CKChatController transcriptInlineNotificationUpdater](self, "transcriptInlineNotificationUpdater");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setNeedsUpdate");

  if (CKIsRunningInMacCatalyst()
    && -[CKCoreChatController showingInStandAloneWindow](self, "showingInStandAloneWindow"))
  {
    -[CKChatController entryView](self, "entryView");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "contentView");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "makeActive");

  }
  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "locationLabelHidden");

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v25) = v19;
      _os_log_impl(&dword_18DFCD000, v20, OS_LOG_TYPE_INFO, "setting location label: %{BOOL}d, to NO on view appearance", buf, 8u);
    }

  }
  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setLocationLabelHidden:", 0);

  -[CKChatController _resizeNavigationBarIfNecessaryWithAnimation:](self, "_resizeNavigationBarIfNecessaryWithAnimation:", 0);
  -[CKChatController collectionView](self, "collectionView");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "endDisablingTranscriptDynamicsForReason:", CFSTR("ViewIsAppearing"));

}

- (void)viewDidAppearDeferredSetup
{
  void *v3;
  void *v4;
  CKDetailsContactsManager *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  dispatch_time_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  _BOOL4 v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void (**v31)(_QWORD);
  void *v32;
  char v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, int);
  void *v51;
  void (**v52)(_QWORD);
  _QWORD v53[4];
  id v54;
  _QWORD v55[5];
  _QWORD block[4];
  id v57;
  id v58;
  _QWORD aBlock[4];
  id v60;
  objc_super v61;
  _BYTE buf[24];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v61.receiver = self;
  v61.super_class = (Class)CKChatController;
  -[CKCoreChatController viewDidAppearDeferredSetup](&v61, sel_viewDidAppearDeferredSetup);
  -[CKChatController _resizeNavigationBarIfNecessaryWithAnimation:](self, "_resizeNavigationBarIfNecessaryWithAnimation:", 0);
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v3, "userInterfaceIdiom"))
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend(v32, "entryViewFollowsKeyboardLayoutGuide");

    if ((v33 & 1) != 0)
      goto LABEL_3;
    -[CKChatController view](self, "view");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "window");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "windowScene");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "keyboardSceneDelegate");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKChatController view](self, "view");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "visibleFrameInView:", v37);
    v39 = v38;
    v41 = v40;
    v43 = v42;
    v45 = v44;

    LODWORD(v37) = -[CKScrollViewController manuallyUpdateKeyboardScreenFrameWithFrameIfNeeded:animationDuration:animationCurve:](self, "manuallyUpdateKeyboardScreenFrameWithFrameIfNeeded:animationDuration:animationCurve:", 0, v39, v41, v43, v45, 0.3);
    if (((v37 ^ 1 | -[CKScrollViewController isHoldingScrollGeometryUpdates](self, "isHoldingScrollGeometryUpdates")) & 1) == 0)
    {
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "scrollTranscriptToEntryViewInsertionTimeWithAnimation:", 1);

    }
  }

LABEL_3:
  -[CKCoreChatController conversation](self, "conversation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 && CKIsRunningInMacCatalyst())
  {
    v5 = -[CKDetailsContactsManager initWithConversation:delegate:]([CKDetailsContactsManager alloc], "initWithConversation:delegate:", v4, self);
    -[CKChatController setDetailsContactsManager:](self, "setDetailsContactsManager:", v5);

  }
  else
  {
    -[CKChatController setDetailsContactsManager:](self, "setDetailsContactsManager:", 0);
  }
  objc_msgSend(v4, "chat");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "watermarkOutForScrutinyMode");

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      -[CKCoreChatController chat](self, "chat");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "guid");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "Reset load attempt count for chat GUID %@", buf, 0xCu);

    }
  }
  objc_msgSend(v4, "chat");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isInScrutinyMode");

  if (v11)
  {
    objc_msgSend(v4, "chat");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "clearScrutinyMode");

    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        -[CKCoreChatController chat](self, "chat");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "guid");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v15;
        _os_log_impl(&dword_18DFCD000, v13, OS_LOG_TYPE_INFO, "Clearing scrutiny mode for chat GUID %@", buf, 0xCu);

      }
    }
  }
  -[CKChatController _sizeEffectPickerWindow](self, "_sizeEffectPickerWindow");
  -[CKChatController entryView](self, "entryView");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "endDeferringEntryFieldCollapsedStateChanges");

  *(_QWORD *)buf = 0;
  objc_initWeak((id *)buf, self);
  v17 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __46__CKChatController_viewDidAppearDeferredSetup__block_invoke;
  aBlock[3] = &unk_1E274B548;
  objc_copyWeak(&v60, (id *)buf);
  v18 = _Block_copy(aBlock);
  v19 = dispatch_time(0, 200000000);
  block[0] = v17;
  block[1] = 3221225472;
  block[2] = __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_2;
  block[3] = &unk_1E274C6B8;
  objc_copyWeak(&v58, (id *)buf);
  v20 = v18;
  v57 = v20;
  dispatch_after(v19, MEMORY[0x1E0C80D38], block);
  +[CKPreviewDispatchCache genmojiPreviewCache](CKPreviewDispatchCache, "genmojiPreviewCache");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "resume");

  +[CKPreviewDispatchCache transcriptPreviewCache](CKPreviewDispatchCache, "transcriptPreviewCache");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "resume");

  -[CKChatController nicknameBanner](self, "nicknameBanner");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v22) = v23 == 0;

  if ((_DWORD)v22)
    -[CKChatController _showOrHideNicknameBannerIfNeeded](self, "_showOrHideNicknameBannerIfNeeded");
  -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = v24 == 0;

  if (v25)
    -[CKChatController showGroupBannerUpdateIfNeeded](self, "showGroupBannerUpdateIfNeeded");
  -[CKChatController checkSuggestionsForBanner](self, "checkSuggestionsForBanner");
  objc_msgSend((id)MEMORY[0x193FF3C18](CFSTR("AFContextManager"), CFSTR("AssistantServices")), "defaultContextManager");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "addContextProvider:", self);

  -[CKChatController _kickPhotoKit](self, "_kickPhotoKit");
  -[CKCoreChatController delegate](self, "delegate");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "prewarmCameraIfNecessaryForChatController:", self);

  +[CKNanoCryptographer sharedCryptographer](CKNanoCryptographer, "sharedCryptographer");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "prewarmDeviceSalt");

  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController setLastKnownDeviceOrientation:](self, "setLastKnownDeviceOrientation:", objc_msgSend(v29, "orientation"));

  if (-[CKCoreChatController userInitiatedTranscriptPush](self, "userInitiatedTranscriptPush"))
    -[CKChatController _markMessagesAsReadOnPushIfNeeded](self, "_markMessagesAsReadOnPushIfNeeded");
  -[CKChatController _markVisibleMentionsAsRead](self, "_markVisibleMentionsAsRead");
  -[CKChatController _retryGroupPhotoUploadIfNecessary](self, "_retryGroupPhotoUploadIfNecessary");
  -[CKChatController tipManager](self, "tipManager");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "chatControllerDidAppear");

  if (-[CKChatController shouldShowBanners](self, "shouldShowBanners"))
  {
    v55[0] = v17;
    v55[1] = 3221225472;
    v55[2] = __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_3;
    v55[3] = &unk_1E274C6E0;
    v55[4] = self;
    -[CKChatController showCheckInTips:](self, "showCheckInTips:", v55);
  }
  v53[0] = v17;
  v53[1] = 3221225472;
  v53[2] = __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_4;
  v53[3] = &unk_1E274B548;
  objc_copyWeak(&v54, (id *)buf);
  v31 = (void (**)(_QWORD))_Block_copy(v53);
  if (-[CKChatController canShowBusinessOnboarding](self, "canShowBusinessOnboarding"))
  {
    if (+[CKBusinessOnboardingController shouldShowBusinessOnboarding](CKBusinessOnboardingController, "shouldShowBusinessOnboarding"))
    {
      v31[2](v31);
    }
    else
    {
      v48 = v17;
      v49 = 3221225472;
      v50 = __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_9;
      v51 = &unk_1E274C308;
      v52 = v31;
      +[CKBusinessOnboardingController checkForBusinessAlertsIDSIssues:](CKBusinessOnboardingController, "checkForBusinessAlertsIDSIssues:", &v48);

    }
  }
  -[CKChatController _autoAcceptNicknameIfNeeded](self, "_autoAcceptNicknameIfNeeded", v48, v49, v50, v51);
  -[CKChatController catchUpButtonManager](self, "catchUpButtonManager");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v47, "animateInResumingFromBackground:", 0);

  objc_destroyWeak(&v54);
  objc_destroyWeak(&v58);

  objc_destroyWeak(&v60);
  objc_destroyWeak((id *)buf);

}

void __46__CKChatController_viewDidAppearDeferredSetup__block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "navbarCanvasViewController");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "conversationIdentityView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "performAnimationForPhotoUpdate");

}

uint64_t __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_2(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void (**v10)(void);
  id v11;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "mentionsController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "deferredSetup");

  v5 = objc_loadWeakRetained(v2);
  objc_msgSend(v5, "entryView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "deferredSetup");

  v7 = objc_loadWeakRetained(v2);
  objc_msgSend(v7, "deferredPresentationBlock");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v9 = objc_loadWeakRetained(v2);
    objc_msgSend(v9, "deferredPresentationBlock");
    v10 = (void (**)(void))objc_claimAutoreleasedReturnValue();
    v10[2]();

    v11 = objc_loadWeakRetained(v2);
    objc_msgSend(v11, "setDeferredPresentationBlock:", 0);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_3(uint64_t a1, int a2, void *a3)
{
  void *v4;
  void *v5;
  id v6;

  if (a2)
  {
    if (objc_msgSend(a3, "length"))
    {
      v4 = *(void **)(a1 + 32);
      objc_msgSend(v4, "tipManager");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setCheckInDelegate:", v4);

      objc_msgSend(*(id *)(a1 + 32), "tipManager");
      v6 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "presentCheckInTip");

    }
  }
}

void __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_4(uint64_t a1)
{
  CKBusinessOnboardingController *v2;
  uint64_t v3;
  id *v4;
  CKBusinessOnboardingController *v5;
  id WeakRetained;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;

  v2 = [CKBusinessOnboardingController alloc];
  v3 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_5;
  v13[3] = &unk_1E274B548;
  v4 = (id *)(a1 + 32);
  objc_copyWeak(&v14, (id *)(a1 + 32));
  v5 = -[CKBusinessOnboardingController initWithCompletionHandler:](v2, "initWithCompletionHandler:", v13);
  v8 = v3;
  v9 = 3221225472;
  v10 = __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_7;
  v11 = &unk_1E274B548;
  objc_copyWeak(&v12, v4);
  -[CKBusinessOnboardingController setupNotNowWithActionHandler:](v5, "setupNotNowWithActionHandler:", &v8);
  WeakRetained = objc_loadWeakRetained(v4);
  objc_msgSend(WeakRetained, "dismissKeyboard", v8, v9, v10, v11);

  v7 = objc_loadWeakRetained(v4);
  objc_msgSend(v7, "presentViewController:animated:completion:", v5, 1, 0);

  objc_destroyWeak(&v12);
  objc_destroyWeak(&v14);
}

void __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_5(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  _QWORD v3[4];
  id v4;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_6;
  v3[3] = &unk_1E274B548;
  objc_copyWeak(&v4, v1);
  objc_msgSend(WeakRetained, "dismissViewControllerAnimated:completion:", 1, v3);

  objc_destroyWeak(&v4);
}

void __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_6(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "didFinishShowingBusinessOnboarding");

}

void __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_7(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "chat");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5 = objc_loadWeakRetained(v1);
    objc_msgSend(v5, "conversation");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "chat");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "hasSentMessageToBusiness");

    if ((v8 & 1) == 0)
    {
      +[CKConversationList sharedConversationList](CKConversationList, "sharedConversationList");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_loadWeakRetained(v1);
      objc_msgSend(v10, "conversation");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v17[0] = v11;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v17, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "recoverableDeleteForConversations:deleteDate:synchronousQuery:completionHandler:", v12, v13, 0, 0);

    }
  }
  else
  {

  }
  v14 = objc_loadWeakRetained(v1);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_8;
  v15[3] = &unk_1E274B548;
  objc_copyWeak(&v16, v1);
  objc_msgSend(v14, "dismissViewControllerAnimated:completion:", 1, v15);

  objc_destroyWeak(&v16);
}

void __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_8(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "cancelNewMessageCompositionAnimated:", 1);

  v5 = objc_loadWeakRetained(v1);
  objc_msgSend(v5, "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "showConversationList");

}

uint64_t __46__CKChatController_viewDidAppearDeferredSetup__block_invoke_9(uint64_t result, int a2)
{
  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

- (void)_markMessagesAsReadOnPushIfNeeded
{
  im_dispatch_after();
}

void __53__CKChatController__markMessagesAsReadOnPushIfNeeded__block_invoke(uint64_t a1)
{
  int v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint8_t buf[4];
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "chat");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "unreadMessageCount"))
  {
    v2 = CKIsRunningInMessages();

    if (v2
      && (!+[CKStarkManager isCarPlayConnected](CKStarkManager, "isCarPlayConnected")
       || !CKIsScreenLocked()))
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v3 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(*(id *)(a1 + 32), "chat");
          v4 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "chatIdentifier");
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v9 = v5;
          _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "Marking chat %@ as read on transcript push as this was a user initiated action", buf, 0xCu);

        }
      }
      objc_msgSend(*(id *)(a1 + 32), "conversation");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "markAllMessagesAsRead");

    }
  }
  else
  {

  }
}

- (BOOL)clearCommSafetyCompositionIfNecessary
{
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;

  objc_msgSend(MEMORY[0x1E0D397A0], "sharedManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "checksForSensitivityOnSend");

  if (!v4)
    return 0;
  -[CKChatController composition](self, "composition");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "text");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "string");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  IMSharedUtilitiesFrameworkBundle();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("MESSAGE_GROWNUP_BODY"), &stru_1E276D870, CFSTR("CommSafetyLocalizable"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v7, "isEqualToString:", v9);

  if (!v10)
    return 0;
  -[CKCoreChatController conversation](self, "conversation");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setUnsentComposition:", 0);

  -[CKChatController setComposition:](self, "setComposition:", 0);
  return 1;
}

- (void)viewWillDisappear:(BOOL)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[5];
  id v22;
  objc_super v23;

  v23.receiver = self;
  v23.super_class = (Class)CKChatController;
  -[CKCoreChatController viewWillDisappear:](&v23, sel_viewWillDisappear_, a3);
  -[CKChatController setSuppressEntryViewKeyboardNotifications:](self, "setSuppressEntryViewKeyboardNotifications:", 1);
  -[CKScrollViewController beginHoldingScrollGeometryUpdatesForReason:](self, "beginHoldingScrollGeometryUpdatesForReason:", CFSTR("ViewControllerNotVisible"));
  -[CKChatController entryView](self, "entryView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "beginDeferringEntryFieldCollapsedStateChanges");

  -[CKChatController entryView](self, "entryView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "contentView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setIgnoreEndEditing:", 1);

  -[CKChatController resignFirstResponderOnEntryViewIfNeeded](self, "resignFirstResponderOnEntryViewIfNeeded");
  -[CKChatController activeSendMenuPresentationForChatController:](self, "activeSendMenuPresentationForChatController:", self);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
    objc_msgSend(v7, "chatControllerWillDisappear:", self);
  -[CKChatController entryView](self, "entryView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isRecording");

  if (v10)
  {
    -[CKChatController entryView](self, "entryView");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "stopRecording");

    -[CKChatController entryView](self, "entryView");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "recorder");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setPaused:", 1);

  }
  if (!-[CKChatController clearCommSafetyCompositionIfNecessary](self, "clearCommSafetyCompositionIfNecessary"))
    -[CKChatController _saveDraftState](self, "_saveDraftState");
  -[CKChatController updateRaiseGesture](self, "updateRaiseGesture");
  -[CKCoreChatController inputController](self, "inputController");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "unregisterForTextInputPayloadHandling");

  +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "invalidatePhotosPlugin");

  objc_msgSend((id)MEMORY[0x193FF3C18](CFSTR("AFContextManager"), CFSTR("AssistantServices")), "defaultContextManager");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "removeContextProvider:", self);

  -[CKChatController nicknameBanner](self, "nicknameBanner");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    -[CKChatController transitionCoordinator](self, "transitionCoordinator");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = MEMORY[0x1E0C809B0];
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __38__CKChatController_viewWillDisappear___block_invoke;
    v21[3] = &unk_1E274C708;
    v21[4] = self;
    v22 = v17;
    v20[0] = v19;
    v20[1] = 3221225472;
    v20[2] = __38__CKChatController_viewWillDisappear___block_invoke_2;
    v20[3] = &unk_1E274B4D0;
    v20[4] = self;
    objc_msgSend(v18, "animateAlongsideTransition:completion:", v21, v20);

  }
  -[CKChatController dimsmissCurrentBannerAndShowNewBannerForGroupUpdate:](self, "dimsmissCurrentBannerAndShowNewBannerForGroupUpdate:", 0);
  -[CKChatController dismissCollaborationNoticeBannersIfNecessary](self, "dismissCollaborationNoticeBannersIfNecessary");
  -[CKChatController dismissBusinessOnboardingIfShowing](self, "dismissBusinessOnboardingIfShowing");

}

void __38__CKChatController_viewWillDisappear___block_invoke(uint64_t a1, void *a2)
{
  char isKindOfClass;
  void *v4;
  id v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void *v26;
  double v27;
  double v28;
  void *v29;

  objc_msgSend(a2, "viewControllerForKey:", *MEMORY[0x1E0CEBDB8]);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v4 = v29;
  if ((isKindOfClass & 1) != 0)
  {
    v5 = v29;
    objc_msgSend(v5, "navigationItem");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_manualScrollEdgeAppearanceProgress");
    v8 = v7;

    objc_msgSend(*(id *)(a1 + 32), "view");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "safeAreaInsets");
    v11 = v10;
    objc_msgSend(v5, "view");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "safeAreaInsets");
    v14 = v13;

    objc_msgSend(*(id *)(a1 + 32), "view");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "window");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "windowScene");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "interfaceOrientation") - 3;

    if (v18 > 1)
    {
      v19 = 0;
    }
    else
    {
      v19 = 0;
      if (v11 < v14 && v8 == 0.0)
        v19 = objc_msgSend(*(id *)(a1 + 32), "_wantsThreeColumnLayout") ^ 1;
    }
    if (v8 == 1.0 || (objc_msgSend(v5, "isSearchActive") | v19) == 1)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1296) = 1;
      objc_msgSend(*(id *)(a1 + 40), "frame");
      v21 = v20;
      v23 = v22;
      v25 = v24;
      objc_msgSend(v5, "view");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "safeAreaInsets");
      v28 = v27;

      objc_msgSend(*(id *)(a1 + 40), "setFrame:", v21, v28, v23, v25);
    }

    v4 = v29;
  }

}

uint64_t __38__CKChatController_viewWillDisappear___block_invoke_2(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 1296) = 0;
  return result;
}

- (void)viewDidDisappear:(BOOL)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  objc_super v9;

  v9.receiver = self;
  v9.super_class = (Class)CKChatController;
  -[CKViewController viewDidDisappear:](&v9, sel_viewDidDisappear_, a3);
  -[CKChatController setSuppressEntryViewKeyboardNotifications:](self, "setSuppressEntryViewKeyboardNotifications:", 0);
  +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "commitInteractionTimeOrderingChanges");

  -[CKChatController setScrollBlock:](self, "setScrollBlock:", 0);
  -[CKChatController setEditing:animated:](self, "setEditing:animated:", 0, 0);
  -[CKChatController setIsShowingCamera:](self, "setIsShowingCamera:", 0);
  -[CKChatController entryView](self, "entryView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "endDeferringEntryFieldCollapsedStateChanges");

  -[CKChatController tipManager](self, "tipManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "chatControllerDidDisappear");

  if (objc_msgSend(MEMORY[0x1E0D35808], "isContactLimitsFeatureEnabled"))
    -[CKChatController removeLockoutControllerIfNeeded](self, "removeLockoutControllerIfNeeded");
  -[CKChatController activeSendMenuPresentationForChatController:](self, "activeSendMenuPresentationForChatController:", self);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
    objc_msgSend(v7, "dismissAnimated:completion:", 0, 0);

}

- (void)parentControllerDidBecomeActive
{
  void *v3;
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)CKChatController;
  -[CKCoreChatController parentControllerDidBecomeActive](&v4, sel_parentControllerDidBecomeActive);
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "parentControllerDidBecomeActive");

}

- (void)_performResume
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  NSObject *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  objc_super v20;
  uint8_t buf[4];
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  -[CKChatController setIsCatchUpButtonNeededOnFirstLoad:](self, "setIsCatchUpButtonNeededOnFirstLoad:", 0);
  -[CKChatController setDidComputeInitiallyVisibleIndexPaths:](self, "setDidComputeInitiallyVisibleIndexPaths:", 0);
  -[CKChatController setDidDisplayFirstUnreadMessage:](self, "setDidDisplayFirstUnreadMessage:", 0);
  -[CKChatController _updateCatchUpButtonVisibilityResumingFromBackground:](self, "_updateCatchUpButtonVisibilityResumingFromBackground:", 1);
  v20.receiver = self;
  v20.super_class = (Class)CKChatController;
  -[CKCoreChatController _performResume](&v20, sel__performResume);
  -[CKChatController entryView](self, "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "isHidden"))
  {
    -[CKCoreChatController inputController](self, "inputController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "appManagerIsDisplayed");

    if ((v5 & 1) != 0)
      goto LABEL_5;
    -[CKChatController entryView](self, "entryView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setHidden:", 0);

    -[CKChatController entryView](self, "entryView");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setAlpha:", 1.0);
  }

LABEL_5:
  -[CKChatController setEditing:animated:](self, "setEditing:animated:", 0, 0);
  +[CKDraftManager sharedInstance](CKDraftManager, "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "flushCache");

  -[CKCoreChatController conversation](self, "conversation");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "unsentComposition");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKChatController composition](self, "composition");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "hasContent");

  if (v11)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v12, OS_LOG_TYPE_INFO, "Refreshing composition to establish connection to photo browser due to resume", buf, 2u);
      }

    }
    -[CKCoreChatController inputController](self, "inputController");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController composition](self, "composition");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "requestPhotoBrowserInitFromDraft:", v14);

  }
  else
  {
    if (!objc_msgSend(v9, "hasContent"))
      goto LABEL_18;
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v15, OS_LOG_TYPE_INFO, "Conversation has unsent content that is not in the current composition, restoring it", buf, 2u);
      }

    }
    -[CKChatController setComposition:](self, "setComposition:", v9);
    -[CKCoreChatController inputController](self, "inputController");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "requestPhotoBrowserInitFromDraft:", v9);
  }

LABEL_18:
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v22 = "-[CKChatController _performResume]";
      _os_log_impl(&dword_18DFCD000, v16, OS_LOG_TYPE_INFO, "reloadEntryViewIfNeeded called from %s", buf, 0xCu);
    }

  }
  -[CKChatController reloadEntryViewIfNeeded](self, "reloadEntryViewIfNeeded");
  -[CKChatController _sizeEffectPickerWindow](self, "_sizeEffectPickerWindow");
  -[CKChatController _reloadMentionsData](self, "_reloadMentionsData");
  -[CKChatController entryView](self, "entryView");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "contentView");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "pluginEntryViewController");
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v19, "performHostAppResume");
  -[CKChatController setFirstLayoutAfterResume:](self, "setFirstLayoutAfterResume:", 1);

}

- (void)prepareForSuspend
{
  NSObject *v3;
  void *v4;
  int v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  _QWORD v21[5];
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  double v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v23 = "-[CKChatController prepareForSuspend]";
      _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
    }

  }
  +[CKPluginExtensionStateObserver sharedInstance](CKPluginExtensionStateObserver, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "passKitUIPresented");

  if (v5)
  {
    if (!IMOSLoggingEnabled())
      return;
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "prepareForSuspend not doing suspend work as we are suspending due to passkit UI", buf, 2u);
    }
    goto LABEL_9;
  }
  +[CKPluginExtensionStateObserver sharedInstance](CKPluginExtensionStateObserver, "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "iTunesStoreDialogPresented");

  if (v8)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "prepareForSuspend not doing suspend work as we are suspending due to iTunesStore UI", buf, 2u);
      }
LABEL_9:

    }
  }
  else
  {
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __37__CKChatController_prepareForSuspend__block_invoke;
    v21[3] = &unk_1E274A208;
    v21[4] = self;
    objc_msgSend(MEMORY[0x1E0CEABB8], "_performWithoutDeferringTransitions:", v21);
    +[CKLinkIntentsManager sharedManager](CKLinkIntentsManager, "sharedManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "purgeDependencies");

    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "collectionView");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "__ck_bottomOffset");
    v13 = v12;
    objc_msgSend(v11, "contentOffset");
    v15 = v13 - v14;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController setTranscriptBottomContentOffsetAtSuspend:](self, "setTranscriptBottomContentOffsetAtSuspend:", v16);

    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v11, "contentSize");
        v19 = v18;
        objc_msgSend(v11, "contentOffset");
        *(_DWORD *)buf = 134218496;
        v23 = v19;
        v24 = 2048;
        v25 = v20;
        v26 = 2048;
        v27 = v15;
        _os_log_impl(&dword_18DFCD000, v17, OS_LOG_TYPE_INFO, "Transcript content height at suspend %f top offset %f offset from bottom: %f", buf, 0x20u);
      }

    }
  }
}

void __37__CKChatController_prepareForSuspend__block_invoke(uint64_t a1)
{
  void *v2;
  int v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  NSObject *v17;
  void *v18;
  void *v19;
  char isKindOfClass;
  void *v21;
  char v22;
  void *v23;
  void *v24;
  void *v25;
  char v26;
  void *v27;
  id v28;
  void *v29;
  char v30;
  void *v31;
  void *v32;
  char v33;
  void *v34;
  void *v35;
  void *v36;
  uint8_t v37[16];

  objc_msgSend(MEMORY[0x1E0D397A0], "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "checksForSensitivityOnSend");

  v4 = *(void **)(a1 + 32);
  if (!v3)
    goto LABEL_4;
  objc_msgSend(v4, "composition");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "text");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "string");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  IMSharedUtilitiesFrameworkBundle();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("MESSAGE_GROWNUP_BODY"), &stru_1E276D870, CFSTR("CommSafetyLocalizable"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v7, "isEqualToString:", v9);

  v4 = *(void **)(a1 + 32);
  if (v10)
  {
    objc_msgSend(v4, "conversation");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setUnsentComposition:", 0);

  }
  else
  {
LABEL_4:
    objc_msgSend(v4, "_saveDraftState");
  }
  if (CKIsRunningInMacCatalyst())
    return;
  objc_msgSend(*(id *)(a1 + 32), "setEditing:animated:", 0, 0);
  objc_msgSend(*(id *)(a1 + 32), "inputController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "prepareForSuspend");

  +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "prepareForSuspend");

  objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "prepareForSuspend");

  objc_msgSend(*(id *)(a1 + 32), "dismissContextMenuInteractionMenu");
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "isEmojiTapbacksEnabled");

  if (v16)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "isFullScreenBalloonViewOnScreen"))
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v37 = 0;
          _os_log_impl(&dword_18DFCD000, v17, OS_LOG_TYPE_INFO, "Dismissing fullscreen balloon view for suspend", v37, 2u);
        }

      }
      objc_msgSend(*(id *)(a1 + 32), "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:", 0, 0, 0);
    }
    goto LABEL_16;
  }
  +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "presentedViewController");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0)
  {
LABEL_16:
    +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "dismissViewControllerAnimated:completion:", 0, 0);

    goto LABEL_17;
  }
  objc_msgSend(*(id *)(a1 + 32), "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:", 0, 0, 0);
LABEL_17:
  objc_msgSend(*(id *)(a1 + 32), "dismissVideoMessageRecordingViewController");
  objc_msgSend(*(id *)(a1 + 32), "hideMediaPickerAnimated:", 0);
  objc_msgSend(*(id *)(a1 + 32), "updateRaiseGesture");
  v22 = objc_msgSend(*(id *)(a1 + 32), "isFunCamPresented");
  if ((v22 & 1) == 0 && (objc_msgSend(*(id *)(a1 + 32), "isWebViewVisible") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "navigationController");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "visibleViewController");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = *(void **)(a1 + 32);
    if (v24 == v25)
    {
LABEL_22:

      goto LABEL_23;
    }
    v26 = objc_msgSend(v25, "isShowingBusinessOnboarding");

    if ((v26 & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "navigationController");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "visibleViewController");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "dismissViewControllerAnimated:completion:", 0, 0);
      goto LABEL_22;
    }
  }
LABEL_23:
  objc_msgSend(*(id *)(a1 + 32), "navigationController");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = (id)objc_msgSend(v27, "popToViewController:animated:", *(_QWORD *)(a1 + 32), 0);

  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v29)
    v30 = v22;
  else
    v30 = 1;
  if ((v30 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "entryView");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "contentView");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend(v32, "isActive");

    if ((v33 & 1) == 0)
      objc_msgSend(*(id *)(a1 + 32), "becomeFirstResponder");
  }
  objc_msgSend(*(id *)(a1 + 32), "setTargetFirstResponder:", 0);
  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "contentView");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "pluginEntryViewController");
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v36, "performHostAppSuspend");

}

- (void)didReceiveMemoryWarning
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)CKChatController;
  -[CKChatController didReceiveMemoryWarning](&v3, sel_didReceiveMemoryWarning);
  -[CKChatController setPreviewController:](self, "setPreviewController:", 0);
}

- (void)viewWillTransitionToSize:(CGSize)a3 withTransitionCoordinator:(id)a4
{
  double height;
  double width;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  char v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v20[5];
  _QWORD v21[5];
  id v22;
  BOOL v23;
  char v24;
  _QWORD aBlock[5];
  objc_super v26;

  height = a3.height;
  width = a3.width;
  v7 = a4;
  v26.receiver = self;
  v26.super_class = (Class)CKChatController;
  -[CKChatController viewWillTransitionToSize:withTransitionCoordinator:](&v26, sel_viewWillTransitionToSize_withTransitionCoordinator_, v7, width, height);
  -[CKChatController _hideCatchUpButtonIfNeededAndRemoveOnCompletion:](self, "_hideCatchUpButtonIfNeededAndRemoveOnCompletion:", 0);
  -[CKChatController setTransitioningSize:](self, "setTransitioningSize:", 1);
  -[CKScrollViewController beginHoldingScrollGeometryUpdatesForReason:](self, "beginHoldingScrollGeometryUpdatesForReason:", CFSTR("ViewControllerSizeTransition"));
  v8 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __71__CKChatController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke;
  aBlock[3] = &unk_1E274B4D0;
  aBlock[4] = self;
  v9 = _Block_copy(aBlock);
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "collectionView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11 && objc_msgSend(v11, "numberOfItemsInSection:", 0) >= 1)
  {
    -[CKChatController setNeedToEnforceScrollIntent:](self, "setNeedToEnforceScrollIntent:", 1);
    v12 = -[CKChatController isEditing](self, "isEditing");
    v13 = v12;
    if (v12)
    {
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "selectedItems");
      v15 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v15 = 0;
    }
    v21[0] = v8;
    v21[1] = 3221225472;
    v21[2] = __71__CKChatController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke_2;
    v21[3] = &unk_1E274C758;
    v23 = -[CKChatController isCollapsed](self, "isCollapsed");
    v24 = v13;
    v21[4] = self;
    v22 = v15;
    v16 = v15;
    objc_msgSend(v7, "animateAlongsideTransition:completion:", v21, v9);

  }
  else
  {
    v20[0] = v8;
    v20[1] = 3221225472;
    v20[2] = __71__CKChatController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke_4;
    v20[3] = &unk_1E274B4D0;
    v20[4] = self;
    objc_msgSend(v7, "animateAlongsideTransition:completion:", v20, v9);
  }
  -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    -[CKCoreChatController inputController](self, "inputController");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "endStickerReactionSession");

    -[CKChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:](self, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:", 0, 0, 0);
    -[CKChatController updateActiveEntryViewPositioningGuide](self, "updateActiveEntryViewPositioningGuide");
  }
  -[CKChatController transcriptInlineNotificationUpdater](self, "transcriptInlineNotificationUpdater");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setNeedsUpdate");

  objc_msgSend(MEMORY[0x1E0CD28B0], "addCommitHandler:forPhase:", &__block_literal_global_344_0, 2);
}

void __71__CKChatController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "setTransitioningSize:", 0);
  objc_msgSend(*(id *)(a1 + 32), "endHoldingScrollGeometryUpdatesForReason:", CFSTR("ViewControllerSizeTransition"));
  if (objc_msgSend(*(id *)(a1 + 32), "viewDidMoveToWindowAndNeedsToScrollToInsertionTime"))
  {
    objc_msgSend(*(id *)(a1 + 32), "updateScrollGeometryWithInheritedAnimationForReason:", CFSTR("ViewSizeTransitionCompletion"));
    objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "scrollTranscriptToEntryViewInsertionTimeWithAnimation:", 0);

    objc_msgSend(*(id *)(a1 + 32), "setViewDidMoveToWindowAndNeedsToScrollToInsertionTime:", 0);
  }
  objc_msgSend(*(id *)(a1 + 32), "_sizeEffectPickerWindow");
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "orientation");

  if (objc_msgSend(*(id *)(a1 + 32), "lastKnownDeviceOrientation") != v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "inputController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "didTransitionFromOrientation:toOrientation:", objc_msgSend(*(id *)(a1 + 32), "lastKnownDeviceOrientation"), v4);

    objc_msgSend(*(id *)(a1 + 32), "setLastKnownDeviceOrientation:", v4);
  }
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "postNotificationName:object:", CFSTR("kPPTChatControllerDidRotateNotification"), 0);

}

void __71__CKChatController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke_2(uint64_t a1)
{
  void *v1;
  void *v2;
  _QWORD v3[5];
  id v4;
  __int16 v5;

  v1 = (void *)MEMORY[0x1E0CEABB0];
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __71__CKChatController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke_3;
  v3[3] = &unk_1E274C730;
  v5 = *(_WORD *)(a1 + 48);
  v2 = *(void **)(a1 + 40);
  v3[4] = *(_QWORD *)(a1 + 32);
  v4 = v2;
  objc_msgSend(v1, "performWithoutAnimation:", v3);

}

uint64_t __71__CKChatController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke_3(uint64_t a1)
{
  void *v2;
  int v3;
  int v4;
  void *v5;
  void *v6;

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "canPresentOverKeyboard") & 1) != 0)
  {

  }
  else
  {
    v3 = *(unsigned __int8 *)(a1 + 48);
    v4 = objc_msgSend(*(id *)(a1 + 32), "isCollapsed");

    if (v3 != v4)
    {
      objc_msgSend(*(id *)(a1 + 32), "imagePickerController");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      if (v5)
        objc_msgSend(*(id *)(a1 + 32), "hideMediaPickerAnimated:", 0);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_updateEntryViewFrameIfNeeded:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setEditing:animated:", *(unsigned __int8 *)(a1 + 49), 0);
  objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setSelectedItems:", *(_QWORD *)(a1 + 40));

  objc_msgSend(*(id *)(a1 + 32), "reloadFooterViewIfNecessaryForNewConversation:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 32), "updateScrollGeometryWithInheritedAnimationForReason:", CFSTR("ViewSizeTransitionAnimation"));
  return objc_msgSend(*(id *)(a1 + 32), "_showCatchUpButtonIfNeeded");
}

uint64_t __71__CKChatController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke_4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_updateEntryViewFrameIfNeeded:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "updateScrollGeometryWithInheritedAnimationForReason:", CFSTR("ViewSizeTransitionAnimation"));
}

void __71__CKChatController_viewWillTransitionToSize_withTransitionCoordinator___block_invoke_5()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", CFSTR("kPPTChatControllerWillRotateNotification"), 0);

}

- (void)presentViewController:(id)a3 animated:(BOOL)a4 completion:(id)a5
{
  _BOOL8 v6;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  CKChatController *v13;
  CKChatController *v14;
  objc_super v15;

  v6 = a4;
  v8 = a3;
  v9 = a5;
  objc_msgSend(v8, "presentationController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "delegate");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    objc_msgSend(v8, "presentationController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setDelegate:", self);

  }
  -[CKChatController dismissTipIfPresented](self, "dismissTipIfPresented");
  -[CKChatController _viewControllerForModalPresentation](self, "_viewControllerForModalPresentation");
  v13 = (CKChatController *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (v13 == self)
  {
    v15.receiver = self;
    v15.super_class = (Class)CKChatController;
    -[CKChatController presentViewController:animated:completion:](&v15, sel_presentViewController_animated_completion_, v8, v6, v9);
  }
  else
  {
    -[CKChatController presentViewController:animated:completion:](v13, "presentViewController:animated:completion:", v8, v6, v9);
  }

}

- (id)_viewControllerForModalPresentation
{
  void *v3;
  int v4;
  void *v5;
  int v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  CKChatController *v12;

  -[CKCoreChatController inputController](self, "inputController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isAppCardPresented");

  if (!v4)
    goto LABEL_6;
  -[CKChatController presentedViewController](self, "presentedViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "conformsToProtocol:", &unk_1EE2B0E00);

  if (v6)
  {
    -[CKCoreChatController inputController](self, "inputController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isAppCardDismissing");

    if ((v8 & 1) == 0)
    {
      -[CKChatController presentedViewController](self, "presentedViewController");
      v12 = (CKChatController *)objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    }
  }
  -[CKChatController activeSendMenuPresentationForChatInputController:](self, "activeSendMenuPresentationForChatInputController:", 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
LABEL_6:
    v12 = self;
LABEL_7:
    v11 = v12;
    return v11;
  }
  v10 = v9;
  objc_msgSend(v9, "sendMenuViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (void)dismissViewControllerAnimated:(BOOL)a3 completion:(id)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void *v8;
  objc_super v9;

  v4 = a3;
  v6 = a4;
  -[CKChatController presentedViewController](self, "presentedViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController nicknameUpdateController](self, "nicknameUpdateController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7 == v8)
    -[CKChatController setNicknameUpdateController:](self, "setNicknameUpdateController:", 0);
  v9.receiver = self;
  v9.super_class = (Class)CKChatController;
  -[CKChatController dismissViewControllerAnimated:completion:](&v9, sel_dismissViewControllerAnimated_completion_, v4, v6);

}

- (void)presentationControllerDidDismiss:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  char isKindOfClass;
  void *v11;
  void *v12;
  int v13;
  void *v14;

  v4 = a3;
  -[CKChatController presentedViewController](self, "presentedViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    -[CKChatController entryView](self, "entryView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "window");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      IMLogHandleForCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        -[CKChatController presentationControllerDidDismiss:].cold.1((uint64_t)v4, self, v8);

      -[CKChatController reloadInputViews](self, "reloadInputViews");
    }
  }
  objc_msgSend(v4, "presentedViewController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
    -[CKChatController didFinishShowingBusinessOnboarding](self, "didFinishShowingBusinessOnboarding");
  objc_msgSend(v4, "presentedViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController walletOrderImportViewController](self, "walletOrderImportViewController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v11, "isEqual:", v12);

  if (v13)
  {
    -[CKChatController _walletOrderImportControllerDismissed](self, "_walletOrderImportControllerDismissed");
    -[CKCoreChatController delegate](self, "delegate");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stopForcingOrientation");

  }
}

- (void)_reduceTransparencyStatusDidChange
{
  NSObject *v3;
  uint8_t v4[16];

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "Reduce Transparency Status Did Change", v4, 2u);
    }

  }
  -[CKChatController reloadEntryViewIfNeeded](self, "reloadEntryViewIfNeeded");
}

- (void)traitCollectionDidChange:(id)a3
{
  id v4;
  NSObject *v5;
  __CFString *v6;
  NSObject *v7;
  void *v8;
  __CFString *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  const __CFString *v19;
  const __CFString *v20;
  void *v21;
  char v22;
  void *v23;
  void *v24;
  BOOL v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  double v30;
  double v31;
  void *v32;
  double v33;
  _BOOL4 v34;
  NSObject *v35;
  objc_super v36;
  uint8_t buf[4];
  const __CFString *v38;
  __int16 v39;
  const __CFString *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v36.receiver = self;
  v36.super_class = (Class)CKChatController;
  -[CKCoreChatController traitCollectionDidChange:](&v36, sel_traitCollectionDidChange_, v4);
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v4, "description");
      v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v38 = v6;
      _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "traitCollectionDidChange | previous: {%@}", buf, 0xCu);

    }
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      -[CKChatController traitCollection](self, "traitCollection");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "description");
      v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v38 = v9;
      _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "traitCollectionDidChange | current: {%@}", buf, 0xCu);

    }
  }
  v10 = (void *)MEMORY[0x193FF4740]();
  -[CKChatController configureForCurrentTraitCollection](self, "configureForCurrentTraitCollection");
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "traitCollectionDidChange | Returned from configureForCurrentTraitCollection", buf, 2u);
    }

  }
  v12 = objc_msgSend(v4, "horizontalSizeClass");
  -[CKChatController traitCollection](self, "traitCollection");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "horizontalSizeClass");

  v15 = objc_msgSend(v4, "verticalSizeClass");
  -[CKChatController traitCollection](self, "traitCollection");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "verticalSizeClass");

  if (v12 != v14 || v15 != v17)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        v19 = CFSTR("NO");
        if (v12 == v14)
          v20 = CFSTR("NO");
        else
          v20 = CFSTR("YES");
        if (v15 != v17)
          v19 = CFSTR("YES");
        *(_DWORD *)buf = 138412546;
        v38 = v20;
        v39 = 2112;
        v40 = v19;
        _os_log_impl(&dword_18DFCD000, v18, OS_LOG_TYPE_INFO, "> Detected a change to the chat controller's size class. horizontalSizeClassDidChange={%@} verticalSizeClassDidChange={%@}", buf, 0x16u);
      }

    }
    -[CKChatController _hideCatchUpButtonIfNeededAndRemoveOnCompletion:](self, "_hideCatchUpButtonIfNeededAndRemoveOnCompletion:", 0);
    -[CKChatController _configureTitleView](self, "_configureTitleView");
  }
  if (v12 != v14 && objc_msgSend(v4, "horizontalSizeClass") == 1)
  {
    if (+[CKUtilities isIpad](CKUtilities, "isIpad"))
    {
      -[CKCoreChatController inputController](self, "inputController");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "presentedAppBypassesSendMenu");

      if ((v22 & 1) == 0)
      {
        -[CKCoreChatController inputController](self, "inputController");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "dismissAppCardIfNecessaryAnimated:completion:", 0, 0);

      }
    }
  }
  -[CKChatController keyboardSnapshotView](self, "keyboardSnapshotView");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = v24 == 0;

  if (!v25)
  {
    -[CKChatController traitCollection](self, "traitCollection");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend(v26, "userInterfaceStyle");
    LOBYTE(v27) = v27 == objc_msgSend(v4, "userInterfaceStyle");

    if ((v27 & 1) == 0)
    {
      -[CKChatController activeSendMenuPresentationForChatController:](self, "activeSendMenuPresentationForChatController:", self);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = v28;
      if (v28)
        objc_msgSend(v28, "dismissAnimated:completion:", 1, 0);

    }
  }
  objc_msgSend(v4, "displayScale");
  v31 = v30;
  -[CKChatController traitCollection](self, "traitCollection");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "displayScale");
  v34 = v31 != v33;

  if (v34)
    -[CKChatController refreshMacToolbar](self, "refreshMacToolbar");
  -[CKChatController updateStyleForCurrentEffect](self, "updateStyleForCurrentEffect");
  -[CKChatController _dismissSendMenuIfNecessaryForChangedPresentationStyle](self, "_dismissSendMenuIfNecessaryForChangedPresentationStyle");
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v35, OS_LOG_TYPE_INFO, "traitCollectionDidChange | Completed all configuration updates in response to traitCollection change.", buf, 2u);
    }

  }
  objc_autoreleasePoolPop(v10);

}

- (void)configureForCurrentTraitCollection
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;

  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCanShowBackButtonView:", -[CKChatController _canShowBackButtonView](self, "_canShowBackButtonView"));

  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setShouldShowDoneButton:", -[CKChatController shouldShowDoneButton](self, "shouldShowDoneButton"));

  -[CKChatController traitCollection](self, "traitCollection");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  -[CKChatController entryView](self, "entryView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setEntryViewTraitCollection:", v11);

  -[CKMessageEntryBackgroundViewProtocol setEntryViewTraitCollection:](self->_keyboardCandidateBarBackgroundView, "setEntryViewTraitCollection:", v11);
  -[CKCoreChatController _updateTitleAnimated:](self, "_updateTitleAnimated:", 1);
  -[CKChatController tipManager](self, "tipManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "presentingTip");

  if (v7)
  {
    -[CKChatController traitCollection](self, "traitCollection");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "verticalSizeClass");

    if (v9 == 1)
    {
      -[CKChatController tipManager](self, "tipManager");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "dismissTipIfPresented");

    }
  }

}

- (int64_t)preferredStatusBarStyle
{
  void *v2;
  void *v3;
  int64_t v4;
  void *v5;
  void *v6;

  -[CKCoreChatController inputController](self, "inputController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "statusBarStyleViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = objc_msgSend(v3, "preferredStatusBarStyle");
  }
  else
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "theme");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v6, "statusBarStyle");

  }
  return v4;
}

- (BOOL)prefersStatusBarHidden
{
  void *v3;
  char v4;
  void *v5;
  char v6;
  objc_super v8;

  -[CKCoreChatController inputController](self, "inputController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "shouldSuppressStatusBarForHandwriting");

  if ((v4 & 1) != 0)
    return 1;
  -[CKCoreChatController inputController](self, "inputController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "shouldSuppressStatusBarForSendMenu");

  if ((v6 & 1) != 0)
    return 1;
  v8.receiver = self;
  v8.super_class = (Class)CKChatController;
  return -[CKChatController prefersStatusBarHidden](&v8, sel_prefersStatusBarHidden);
}

- (void)willMoveToParentViewController:(id)a3
{
  void *v4;
  CKChatController *v5;
  int isKindOfClass;
  id v7;
  id v8;
  void *v9;
  char v10;
  id v11;

  if (!a3)
  {
    -[CKChatController presentedViewController](self, "presentedViewController");
    v11 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "_existingPresentationControllerImmediate:effective:", 1, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "presentingViewController");
    v5 = (CKChatController *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if (v11)
    {
      -[CKChatController inlineReplyController](self, "inlineReplyController");
      v7 = (id)objc_claimAutoreleasedReturnValue();

      if (v5 != self || ((isKindOfClass ^ 1) & 1) != 0)
      {
        if (v11 == v7)
        {
          objc_msgSend(v11, "dismissViewControllerAnimated:completion:", 0, 0);
LABEL_13:

          return;
        }
LABEL_12:
        -[CKChatController dismissBusinessOnboardingIfShowing](self, "dismissBusinessOnboardingIfShowing");
        goto LABEL_13;
      }
    }
    else if (v5 != self || ((isKindOfClass ^ 1) & 1) != 0)
    {
      goto LABEL_12;
    }
    v8 = v11;
    objc_msgSend(v8, "topViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    v10 = objc_opt_isKindOfClass();

    if ((v10 & 1) != 0)
      objc_msgSend(v8, "dismissViewControllerAnimated:completion:", 0, 0);

    goto LABEL_13;
  }
}

- (BOOL)isCollapsed
{
  void *v3;
  char v4;
  void *v5;
  char v6;
  BOOL v7;

  -[CKCoreChatController delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    -[CKCoreChatController delegate](self, "delegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "shouldConfigureChatControllerAsCollapsed");
  }
  else
  {
    -[CKChatController splitViewController](self, "splitViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isCollapsed");
  }
  v7 = v6;

  return v7;
}

- (BOOL)isShowingOscarChat
{
  void *v3;
  void *v4;
  BOOL v5;

  if (!IMIsOscarEnabled())
    return 0;
  +[CKConversationList sharedConversationList](CKConversationList, "sharedConversationList");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "primaryFilterModeForConversation:", v4) == 9;

  return v5;
}

- (BOOL)isEditingMessage
{
  void *v3;
  BOOL v4;
  void *v5;
  void *v6;

  -[CKChatController messageEditingViewController](self, "messageEditingViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = 1;
  }
  else
  {
    -[CKChatController inlineReplyController](self, "inlineReplyController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "messageEditingViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v6 != 0;

  }
  return v4;
}

- (id)splitViewController
{
  void *v3;
  void *v4;
  void *v5;
  objc_super v7;

  -[CKChatController presentingViewController](self, "presentingViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[CKChatController presentingViewController](self, "presentingViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "splitViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    return v5;
  }
  else
  {
    v7.receiver = self;
    v7.super_class = (Class)CKChatController;
    -[CKChatController splitViewController](&v7, sel_splitViewController);
    return (id)objc_claimAutoreleasedReturnValue();
  }
}

- (void)chatControllerWillBeginResizing
{
  void *v3;

  -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    -[CKChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:](self, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:", 0, 0, 0);
}

- (unint64_t)supportedInterfaceOrientations
{
  void *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "supportedInterfaceOrientations");
  -[CKCoreChatController inputController](self, "inputController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "browserSupportedInterfaceOrientations") & v4;

  return v6;
}

- (void)performResumeDeferredSetup
{
  void *v3;
  dispatch_time_t v4;
  void *v5;
  void *v6;
  objc_super v7;

  v7.receiver = self;
  v7.super_class = (Class)CKChatController;
  -[CKViewController performResumeDeferredSetup](&v7, sel_performResumeDeferredSetup);
  -[CKChatController deferredPresentationBlock](self, "deferredPresentationBlock");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v4 = dispatch_time(0, 200000000);
    -[CKChatController deferredPresentationBlock](self, "deferredPresentationBlock");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    dispatch_after(v4, MEMORY[0x1E0C80D38], v5);

    -[CKChatController setDeferredPresentationBlock:](self, "setDeferredPresentationBlock:", 0);
  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "performResumeDeferredSetup");

}

- (id)_currentPresentationController
{
  return (id)-[CKChatController _existingPresentationControllerImmediate:effective:](self, "_existingPresentationControllerImmediate:effective:", 0, 1);
}

- (BOOL)shouldAutorotate
{
  void *v3;
  char v4;
  void *v6;
  char v7;

  -[CKChatController autorotationUpdater](self, "autorotationUpdater");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isHoldingUpdates");

  if ((v4 & 1) != 0)
    return 0;
  -[CKCoreChatController inputController](self, "inputController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "browserShouldAutorotate");

  return v7;
}

- (void)_autorotationUpdaterFired
{
  objc_msgSend(MEMORY[0x1E0CEABB8], "attemptRotationToDeviceOrientation");
}

- (void)beginHoldingAutorotationForKey:(id)a3
{
  id v4;
  void *v5;
  id v6;

  v4 = a3;
  -[CKChatController autorotationUpdater](self, "autorotationUpdater");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "beginHoldingUpdatesForKey:", v4);

  -[CKChatController autorotationUpdater](self, "autorotationUpdater");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setNeedsUpdate");

}

- (void)endHoldingAutorotationForKey:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[CKChatController autorotationUpdater](self, "autorotationUpdater");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "endHoldingUpdatesForKey:", v4);

}

- (void)sendMessage:(id)a3 forConversation:(id)a4 onService:(id)a5 newComposition:(BOOL)a6
{
  objc_msgSend(a4, "sendMessage:onService:newComposition:", a3, a5, a6);
}

- (void)sendMessage:(id)a3 forConversation:(id)a4 newComposition:(BOOL)a5
{
  objc_msgSend(a4, "sendMessage:newComposition:", a3, a5);
}

- (void)sendComposition:(id)a3 animations:(id)a4
{
  id v6;
  void (**v7)(_QWORD);
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  const char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  BOOL v26;
  void *v27;
  char v28;
  void *v29;
  BOOL v30;
  void *v31;
  int v32;
  void *v33;
  char isKindOfClass;
  void *v35;
  char v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  _BOOL4 v42;
  char v43;
  void *v44;
  uint64_t v45;
  CKComposition *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  int v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  const __CFString *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void (**v74)(_QWORD);
  _QWORD v75[5];
  _QWORD v76[5];
  id v77;
  uint8_t buf[16];
  uint64_t v79;
  _QWORD v80[3];

  v80[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (void (**)(_QWORD))a4;
  _chatControllerTelemetryLogHandle();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_18DFCD000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "SendingMessage", " enableTelemetry=YES ", buf, 2u);
  }
  -[CKCoreChatController inputController](self, "inputController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "willSendComposition");

  -[CKCoreChatController inputController](self, "inputController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "requestPhotoBrowserToPrepareForDraftClearingPhotoShelfViewController:", 0);

  if (!-[CKChatController showSendAlertIfNecessaryForComposition:](self, "showSendAlertIfNecessaryForComposition:", v6))
  {
    -[CKCoreChatController inputController](self, "inputController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "requestPhotoBrowserToAppendFinalImagesToComposition");

    -[CKCoreChatController conversation](self, "conversation");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "resetCaches");
    if ((objc_msgSend(v6, "hasContent") & 1) != 0)
    {
      -[CKChatController nextMediaObjectToTrimInComposition:](self, "nextMediaObjectToTrimInComposition:", v6);
      v13 = objc_claimAutoreleasedReturnValue();
      if (v13)
      {
        v14 = (void *)v13;
        objc_msgSend(v6, "shelfPluginPayload");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "pluginBundleID");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "isEqualToString:", *MEMORY[0x1E0D375E0]);

        objc_msgSend(v15, "pluginBundleID");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        IMBalloonExtensionIDWithSuffix();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v74 = v7;
        if (objc_msgSend(v18, "isEqualToString:", v19)
          && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          v20 = objc_msgSend(v15, "shouldSendAsMediaObject");
        }
        else
        {
          v20 = 0;
        }

        if ((v17 | v20) == 1)
        {
          objc_msgSend(v6, "shelfPluginPayload");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "__ck_photoCompositionString");
          v23 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v6, "text");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = (void *)objc_msgSend(v24, "mutableCopy");

          if (objc_msgSend(v25, "length"))
          {
            objc_msgSend(v25, "insertAttributedString:atIndex:", v23, 0);
          }
          else
          {
            v44 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithAttributedString:", v23);
            v45 = objc_msgSend(v44, "mutableCopy");

            v25 = (void *)v45;
          }
          v46 = [CKComposition alloc];
          objc_msgSend(v6, "subject");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          v48 = -[CKComposition initWithText:subject:shelfPluginPayload:](v46, "initWithText:subject:shelfPluginPayload:", v25, v47, 0);

          -[CKChatController entryView](self, "entryView");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v49, "setComposition:", v48);

          -[CKChatController nextMediaObjectToTrimInComposition:](self, "nextMediaObjectToTrimInComposition:", v48);
          v50 = objc_claimAutoreleasedReturnValue();

          v14 = (void *)v50;
          v6 = (id)v48;
        }
        objc_msgSend(v6, "mediaObjects");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        v73 = v14;
        v71 = v51;
        v72 = v15;
        if (objc_msgSend(v51, "count") == 1)
        {
          objc_msgSend(v51, "objectAtIndex:", 0);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          v53 = objc_msgSend(v52, "mediaType");

          CKFrameworkBundle();
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          v55 = v54;
          if (v53 == 2)
          {
            objc_msgSend(v54, "localizedStringForKey:value:table:", CFSTR("TRIM_ONE_VIDEO_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
            v56 = objc_claimAutoreleasedReturnValue();

            CKFrameworkBundle();
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            v58 = v57;
            v59 = CFSTR("TRIM_ONE_VIDEO_MESSAGE");
          }
          else
          {
            objc_msgSend(v54, "localizedStringForKey:value:table:", CFSTR("TRIM_ONE_ATTACHMENT_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
            v56 = objc_claimAutoreleasedReturnValue();

            CKFrameworkBundle();
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            v58 = v57;
            v59 = CFSTR("TRIM_ONE_ATTACHMENT_MESSAGE");
          }
        }
        else
        {
          CKFrameworkBundle();
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v60, "localizedStringForKey:value:table:", CFSTR("TRIM_MANY_ATTACHMENTS_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
          v56 = objc_claimAutoreleasedReturnValue();

          CKFrameworkBundle();
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          v58 = v57;
          v59 = CFSTR("TRIM_MANY_ATTACHMENTS_MESSAGE");
        }
        objc_msgSend(v57, "localizedStringForKey:value:table:", v59, &stru_1E276D870, CFSTR("ChatKit"));
        v61 = objc_claimAutoreleasedReturnValue();

        v69 = (void *)v61;
        v70 = (void *)v56;
        +[CKAlertController alertControllerWithTitle:message:preferredStyle:](CKAlertController, "alertControllerWithTitle:message:preferredStyle:", v56, v61, 1);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        CKFrameworkBundle();
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v63, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1E276D870, CFSTR("ChatKit"));
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        v76[0] = MEMORY[0x1E0C809B0];
        v76[1] = 3221225472;
        v76[2] = __47__CKChatController_sendComposition_animations___block_invoke;
        v76[3] = &unk_1E274B818;
        v76[4] = self;
        v6 = v6;
        v77 = v6;
        +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v64, 0, v76);
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v62, "addAction:", v65);

        CKFrameworkBundle();
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v66, "localizedStringForKey:value:table:", CFSTR("CANCEL"), &stru_1E276D870, CFSTR("ChatKit"));
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v67, 1, 0);
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v62, "addAction:", v68);

        objc_msgSend(v62, "presentFromViewController:animated:completion:", self, 1, 0);
        if (os_signpost_enabled(v8))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_18DFCD000, v8, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SendingMessage", "Send message failed: Bad attachment", buf, 2u);
        }

        v7 = v74;
        goto LABEL_45;
      }
      v26 = -[CKChatController _isRunningPPT](self, "_isRunningPPT");
      objc_msgSend(v12, "recipients");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend(v12, "canSendToRecipients:alertIfUnable:", v27, 1);

      if ((v28 & 1) != 0 || v26)
      {
        objc_msgSend(MEMORY[0x1E0CEA6C8], "activeKeyboard");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "removeAutocorrectPrompt");

        v30 = -[CKCoreChatController isSendingMessage](self, "isSendingMessage");
        -[CKChatController setSendingMessage:](self, "setSendingMessage:", 1);
        -[CKChatController _updateNavigationButtons](self, "_updateNavigationButtons");
        -[CKChatController _willSendComposition:inConversation:](self, "_willSendComposition:inConversation:", v6, v12);
        -[CKChatController entryView](self, "entryView");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v32 = objc_msgSend(v31, "isPredictionBarEnabled");

        if (v32)
        {
          v75[0] = MEMORY[0x1E0C809B0];
          v75[1] = 3221225472;
          v75[2] = __47__CKChatController_sendComposition_animations___block_invoke_384;
          v75[3] = &unk_1E274A208;
          v75[4] = self;
          objc_msgSend(MEMORY[0x1E0CEABB0], "performWithoutAnimation:", v75);
        }
        objc_msgSend(v6, "shelfPluginPayload");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) == 0
          || (objc_msgSend(v6, "shelfPluginPayload"),
              v35 = (void *)objc_claimAutoreleasedReturnValue(),
              v36 = objc_msgSend(v35, "useDirectSend"),
              v35,
              (v36 & 1) == 0))
        {
          objc_msgSend(v12, "setUnsentComposition:", 0);
        }
        -[CKChatController shareSheetHostBundleIdentifier](self, "shareSheetHostBundleIdentifier");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "evaluateSendMetricsWithConversation:shareSheetHostBundleIdentifier:", v12, v37);

        if (!CKIsRunningInMacCatalyst())
        {
          objc_msgSend(v6, "proofreadingInfo");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v38, "count"))
          {
            -[CKCoreChatController conversation](self, "conversation");
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v39, "chat");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            v79 = *MEMORY[0x1E0D35430];
            v80[0] = v38;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v80, &v79, 1);
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "setProofreadingInfo:", v41);

          }
        }
        v42 = -[CKChatController shouldUseThrowAnimationForComposition:](self, "shouldUseThrowAnimationForComposition:", v6);
        if (v7)
          v43 = v30;
        else
          v43 = 1;
        if (!v42 || (v43 & 1) != 0)
          -[CKChatController sendCompositionWithoutThrow:](self, "sendCompositionWithoutThrow:", v6);
        else
          v7[2](v7);
        -[CKChatController _clearCompositionAndPendingConversation](self, "_clearCompositionAndPendingConversation");
        if (!os_signpost_enabled(v8))
          goto LABEL_45;
        *(_WORD *)buf = 0;
        v21 = " enableTelemetry=YES ";
      }
      else
      {
        if (!os_signpost_enabled(v8))
          goto LABEL_45;
        *(_WORD *)buf = 0;
        v21 = "Send message failed: Cannot send";
      }
    }
    else
    {
      -[CKChatController messageEntryViewDidChange:isTextChange:isShelfChange:](self, "messageEntryViewDidChange:isTextChange:isShelfChange:", 0, 1, 0);
      if (!os_signpost_enabled(v8))
      {
LABEL_45:

        goto LABEL_46;
      }
      *(_WORD *)buf = 0;
      v21 = "Send message failed: Empty message content";
    }
    _os_signpost_emit_with_name_impl(&dword_18DFCD000, v8, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SendingMessage", v21, buf, 2u);
    goto LABEL_45;
  }
LABEL_46:

}

uint64_t __47__CKChatController_sendComposition_animations___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startTrimmingMediaObjectsInComposition:", *(_QWORD *)(a1 + 40));
}

uint64_t __47__CKChatController_sendComposition_animations___block_invoke_384(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateAppStripVisibility:animated:", 1, 0);
}

- (BOOL)showSendAlertIfNecessaryForComposition:(id)a3
{
  id v4;
  void *v5;
  char v6;
  id v7;
  BOOL v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  CKChatController *v15;
  CKChatController *v16;
  NSObject *v17;
  uint8_t v19[8];
  id v20;

  v4 = a3;
  -[CKCoreChatController conversation](self, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = 0;
  v6 = objc_msgSend(v5, "canSendComposition:error:", v4, &v20);

  v7 = v20;
  if ((v6 & 1) != 0 || -[CKChatController _isRunningPPT](self, "_isRunningPPT"))
  {
    v8 = 0;
  }
  else
  {
    if (v7)
    {
      CKFrameworkBundle();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("CANNOT_SEND_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      CKFrameworkBundle();
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1E276D870, CFSTR("ChatKit"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      CKCreateAlertControllerWithError(v7, v10, 0, v12, 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController effectPickerViewController](self, "effectPickerViewController");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (v14)
      {
        -[CKChatController effectPickerViewController](self, "effectPickerViewController");
        v15 = (CKChatController *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v15 = self;
      }
      v16 = v15;

      objc_msgSend(v13, "presentFromViewController:animated:completion:", v16, 1, 0);
    }
    _chatControllerTelemetryLogHandle();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v17))
    {
      *(_WORD *)v19 = 0;
      _os_signpost_emit_with_name_impl(&dword_18DFCD000, v17, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "SendingMessage", "Send message failed: Cannot send", v19, 2u);
    }

    v8 = 1;
  }

  return v8;
}

- (void)_clearCompositionAndPendingConversation
{
  CKComposition *dropComposition;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  id v15;

  dropComposition = self->_dropComposition;
  self->_dropComposition = 0;

  -[CKCoreChatController conversation](self, "conversation");
  v15 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "chat");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "guid");
  v5 = objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)v5;
    -[CKCoreChatController conversation](self, "conversation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "chat");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "guid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[CKConversationList sharedConversationList](CKConversationList, "sharedConversationList");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "pendingConversation");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "chat");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "guid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v9, "isEqualToString:", v13);

    if (!v14)
      return;
    +[CKConversationList sharedConversationList](CKConversationList, "sharedConversationList");
    v15 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "unpendConversation");
  }
  else
  {

  }
}

- (void)sendComposition:(id)a3
{
  id v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v4 = a3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __36__CKChatController_sendComposition___block_invoke;
  v6[3] = &unk_1E274A108;
  v6[4] = self;
  v7 = v4;
  v5 = v4;
  -[CKChatController sendComposition:animations:](self, "sendComposition:animations:", v5, v6);

}

uint64_t __36__CKChatController_sendComposition___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "beginThrowAnimationForComposition:", *(_QWORD *)(a1 + 40));
}

- (id)makeThrowAnimationManager
{
  void *v3;

  v3 = (void *)objc_opt_new();
  objc_msgSend(v3, "setThrowManagerDelegate:", self);
  objc_msgSend(v3, "setSendAnimationManagerDelegate:", self);
  objc_msgSend(v3, "setSendAnimationBalloonProvider:", self);
  return v3;
}

- (void)beginThrowAnimationForComposition:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  id v21;
  id v22;
  id v23;
  _QWORD v24[5];
  id v25;
  id v26;
  id v27;

  v4 = a3;
  -[CKChatController makeThrowAnimationManager](self, "makeThrowAnimationManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController setThrowAnimationManager:](self, "setThrowAnimationManager:", v5);
  -[CKCoreChatController conversation](self, "conversation");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "messagesFromComposition:", v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "isAudioComposition"))
  {
    -[CKChatController entryView](self, "entryView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "audioRecordingPillViewFrameInThrowViewCoordinates");
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v16 = v15;

    objc_msgSend(v5, "setAudioMessageSourceRect:", v10, v12, v14, v16);
    -[CKChatController entryView](self, "entryView");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "audioRecordingPillViewSnapshot");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "setAudioRecordingPillViewSnapshot:", v18);
  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "updateAnimationGroup");
  v20 = objc_claimAutoreleasedReturnValue();
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __54__CKChatController_beginThrowAnimationForComposition___block_invoke;
  v24[3] = &unk_1E274B060;
  v24[4] = self;
  v25 = v4;
  v26 = v5;
  v27 = v7;
  v21 = v7;
  v22 = v5;
  v23 = v4;
  dispatch_group_notify(v20, MEMORY[0x1E0C80D38], v24);

}

uint64_t __54__CKChatController_beginThrowAnimationForComposition___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "flagSensitiveMediaObjects:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 48), "animateMessages:", *(_QWORD *)(a1 + 56));
}

- (void)sendCompositionWithoutThrow:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char isKindOfClass;
  void *v13;
  char v14;
  void *v15;
  void *v16;
  void *v17;
  _BOOL4 v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKCoreChatController conversation](self, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController flagSensitiveMediaObjects:](self, "flagSensitiveMediaObjects:", v4);
  objc_msgSend(v5, "messagesFromComposition:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v24;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v24 != v9)
          objc_enumerationMutation(v6);
        -[CKChatController sendMessage:forConversation:newComposition:](self, "sendMessage:forConversation:newComposition:", *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v10++), v5, 0);
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    }
    while (v8);
  }
  objc_msgSend(v4, "shelfPluginPayload");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0
    || (objc_msgSend(v4, "shelfPluginPayload"),
        v13 = (void *)objc_claimAutoreleasedReturnValue(),
        v14 = objc_msgSend(v13, "useDirectSend"),
        v13,
        (v14 & 1) == 0))
  {
    -[CKChatController entryView](self, "entryView");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "invalidateCompositionForReason:", 1);

  }
  -[CKChatController _updateNavigationButtons](self, "_updateNavigationButtons");
  objc_msgSend(v5, "setIgnoringTypingUpdates:", 0);
  -[CKChatController setSendingMessage:](self, "setSendingMessage:", 0);
  -[CKChatController _didSendCompositionInConversation:](self, "_didSendCompositionInConversation:", v5);
  objc_msgSend(v4, "expressiveSendStyleID");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (!+[CKImpactEffectManager identifierIsAnimatedImpactEffect:](CKImpactEffectManager, "identifierIsAnimatedImpactEffect:", v16))
  {

    goto LABEL_15;
  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[CKCoreChatController transcriptCollectionViewControllerPlaybackForOutgoingEffectsIsAllowed:](self, "transcriptCollectionViewControllerPlaybackForOutgoingEffectsIsAllowed:", v17);

  if (!v18)
  {
LABEL_15:
    -[CKChatController dismissEffectPickerAnimated:](self, "dismissEffectPickerAnimated:", 0);
    goto LABEL_16;
  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "impactEffectManager");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "lastObject");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = v21;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v27, 1);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "animateMessages:", v22);

LABEL_16:
}

- (BOOL)shouldUseThrowAnimationForComposition:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  BOOL v7;
  void *v8;

  v4 = a3;
  if (-[CKCoreChatController shouldDismissAfterSend](self, "shouldDismissAfterSend")
    || !objc_msgSend(v4, "isSendAnimated"))
  {
    v7 = 0;
  }
  else
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "showsSendAnimation"))
    {
      objc_msgSend(v4, "expressiveSendStyleID");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (+[CKImpactEffectManager identifierIsValidImpactEffect:](CKImpactEffectManager, "identifierIsValidImpactEffect:", v6))
      {
        v7 = 0;
      }
      else
      {
        -[CKCoreChatController collectionViewController](self, "collectionViewController");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = v8 != 0;

      }
    }
    else
    {
      v7 = 0;
    }

  }
  return v7;
}

- (void)updateChatControllerForRecoveredJunkConversation
{
  void *v3;
  void *v4;
  void *v5;

  -[CKCoreChatController conversation](self, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "chat");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_reloadChatItemsForJunkStateChange");

  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "updateForRecoveredJunkConversation");

  -[CKChatController addOrRemoveEntryViewIfNeeded](self, "addOrRemoveEntryViewIfNeeded");
  -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
  -[CKChatController reloadInputViews](self, "reloadInputViews");
}

- (void)performAnimatedJunkRecoveryTransition:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  id v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  _QWORD v37[4];
  id v38;
  id v39;
  _QWORD v40[4];
  id v41;
  CKChatController *v42;
  uint8_t buf[4];
  CKChatController *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKChatController _currentPresentationController](self, "_currentPresentationController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v44 = self;
        _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "Transitioning chatController: %@ to full screen presentation", buf, 0xCu);
      }

    }
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setTransitioningFromComposing:", 1);

    v8 = v5;
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "sendAnimationDuration");
    v11 = v10;

    objc_msgSend(v8, "containerView");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    _UISheetMinimumTopInset();
    v14 = v13;

    -[CKChatController collectionView](self, "collectionView");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "beginDisablingTranscriptDynamicsForReason:", CFSTR("JunkRecovery"));
    -[CKChatController collectionView](self, "collectionView");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "contentOffset");
    v18 = v17;
    v20 = v19;

    objc_msgSend(v8, "containerView");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "bounds");
    v23 = v22;
    v25 = v24;
    v27 = v26;
    v29 = v28;

    -[CKChatController collectionView](self, "collectionView");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "setAutoresizingMask:", 0);

    -[CKChatController collectionView](self, "collectionView");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "setFrame:", v23, v25 - v14, v27, v29);

    -[CKChatController collectionView](self, "collectionView");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "setContentOffset:", v18, v20 - v14);

    -[CKChatController collectionView](self, "collectionView");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "layoutIfNeeded");

    v34 = (void *)MEMORY[0x1E0CEABB0];
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 3221225472;
    v40[2] = __58__CKChatController_performAnimatedJunkRecoveryTransition___block_invoke;
    v40[3] = &unk_1E274A108;
    v41 = v8;
    v42 = self;
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 3221225472;
    v37[2] = __58__CKChatController_performAnimatedJunkRecoveryTransition___block_invoke_2;
    v37[3] = &unk_1E274C780;
    v38 = v15;
    v39 = v4;
    v35 = v15;
    v36 = v8;
    objc_msgSend(v34, "animateWithDuration:animations:completion:", v40, v37, v11);

  }
}

void __58__CKChatController_performAnimatedJunkRecoveryTransition___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;

  objc_msgSend(*(id *)(a1 + 32), "_setWantsFullScreen:", objc_msgSend(*(id *)(a1 + 32), "_wantsFullScreen") ^ 1);
  objc_msgSend(*(id *)(a1 + 32), "containerView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "layoutIfNeeded");

  objc_msgSend(*(id *)(a1 + 32), "containerView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bounds");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  objc_msgSend(*(id *)(a1 + 40), "collectionView");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setFrame:", v5, v7, v9, v11);

}

uint64_t __58__CKChatController_performAnimatedJunkRecoveryTransition___block_invoke_2(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "endDisablingTranscriptDynamicsForReason:", CFSTR("JunkRecovery"));
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

- (void)setupStateForLaunchURL:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  int v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t v32[128];
  uint8_t buf[4];
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(v3, "scheme");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "lowercaseString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isEqualToString:", CFSTR("itms-messages")))
  {

  }
  else
  {
    objc_msgSend(v3, "scheme");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "lowercaseString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isEqualToString:", CFSTR("itms-messagess"));

    if (!v8)
      goto LABEL_9;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v34 = "-[CKChatController setupStateForLaunchURL:]";
      _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, "reloadEntryViewIfNeeded called from (1) %s", buf, 0xCu);
    }

  }
  -[CKChatController reloadEntryViewIfNeeded](self, "reloadEntryViewIfNeeded");
  -[CKCoreChatController inputController](self, "inputController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "presentAppStoreForURL:", v3);

  objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "trackEvent:", *MEMORY[0x1E0D384A8]);

LABEL_9:
  objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", v3, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "queryItems");
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v13 = (id)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v14)
  {
    v15 = *(_QWORD *)v29;
    while (2)
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v29 != v15)
          objc_enumerationMutation(v13);
        v17 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
        objc_msgSend(v17, "name");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v18, "isEqualToString:", CFSTR("inputmode"));

        if (v19)
        {
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v20 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315138;
              v34 = "-[CKChatController setupStateForLaunchURL:]";
              _os_log_impl(&dword_18DFCD000, v20, OS_LOG_TYPE_INFO, "reloadEntryViewIfNeeded called from (2) %s", buf, 0xCu);
            }

          }
          -[CKChatController reloadEntryViewIfNeeded](self, "reloadEntryViewIfNeeded");
          objc_msgSend(v17, "value");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v21, "isEqualToString:", CFSTR("photos")))
          {
            -[CKCoreChatController inputController](self, "inputController");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "showPhotosExtension");

          }
          else if (objc_msgSend(v21, "isEqualToString:", CFSTR("camera")))
          {
            -[CKCoreChatController inputController](self, "inputController");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "showFunCamera");

          }
          else if (objc_msgSend(v21, "isEqualToString:", CFSTR("dt")))
          {
            -[CKCoreChatController inputController](self, "inputController");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "showDTCompose");

          }
          else
          {
            objc_msgSend(v21, "isEqualToString:", CFSTR("apps"));
          }

          goto LABEL_30;
        }
      }
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
      if (v14)
        continue;
      break;
    }
  }
LABEL_30:

  objc_msgSend(v3, "ckLaunchURLBalloonPluginBundleID");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v25, "length"))
  {
    objc_msgSend(v3, "ckLaunchURLBalloonPluginPayload");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController setupStateForLaunchPluginWithBundleID:pluginPayload:](self, "setupStateForLaunchPluginWithBundleID:pluginPayload:", v25, v26);

  }
}

- (void)setupStateForLaunchPluginWithBundleID:(id)a3 pluginPayload:(id)a4
{
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id location;

  v6 = a3;
  v7 = a4;
  if (objc_msgSend(v6, "length"))
  {
    location = 0;
    objc_initWeak(&location, self);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __72__CKChatController_setupStateForLaunchPluginWithBundleID_pluginPayload___block_invoke;
    v8[3] = &unk_1E274C7A8;
    v9 = v6;
    objc_copyWeak(&v11, &location);
    v10 = v7;
    -[CKChatController setDeferredPresentationBlock:](self, "setDeferredPresentationBlock:", v8);

    objc_destroyWeak(&v11);
    objc_destroyWeak(&location);
  }

}

void __72__CKChatController_setupStateForLaunchPluginWithBundleID_pluginPayload___block_invoke(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  id WeakRetained;

  v2 = objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", *MEMORY[0x1E0D375A0]);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "inputController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v2)
    objc_msgSend(v3, "showFunCamera");
  else
    objc_msgSend(v3, "presentPluginWithBundleID:appLaunchPayload:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

- (void)setupStateForLaunchAudio
{
  _QWORD v3[4];
  id v4;
  id location;

  location = 0;
  objc_initWeak(&location, self);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __44__CKChatController_setupStateForLaunchAudio__block_invoke;
  v3[3] = &unk_1E274B548;
  objc_copyWeak(&v4, &location);
  -[CKChatController setDeferredPresentationBlock:](self, "setDeferredPresentationBlock:", v3);
  objc_destroyWeak(&v4);
  objc_destroyWeak(&location);
}

void __44__CKChatController_setupStateForLaunchAudio__block_invoke(uint64_t a1)
{
  void *v1;
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "inputController");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "entryView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "startRecordingForAudioButtonInEntryView");

}

- (CKComposition)composition
{
  void *v3;
  void *v4;
  void *v5;

  -[CKChatController entryView](self, "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
    objc_msgSend(v3, "composition");
  else
    -[CKChatController initialComposition](self, "initialComposition");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return (CKComposition *)v5;
}

- (void)setComposition:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  int v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKChatController setCollaborationFailureCount:](self, "setCollaborationFailureCount:", 0);
  if (-[CKCoreChatController initialLayoutComplete](self, "initialLayoutComplete"))
  {
    -[CKChatController entryView](self, "entryView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v5)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          LOWORD(v11) = 0;
          _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "entry view is nil", (uint8_t *)&v11, 2u);
        }

      }
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          v11 = 136315138;
          v12 = "-[CKChatController setComposition:]";
          _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "reloadEntryViewIfNeeded called from %s", (uint8_t *)&v11, 0xCu);
        }

      }
      -[CKChatController reloadEntryViewIfNeeded](self, "reloadEntryViewIfNeeded");
    }
  }
  -[CKChatController entryView](self, "entryView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "setComposition:", v4);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        LOWORD(v11) = 0;
        _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, "entry view is nil, set initial composition", (uint8_t *)&v11, 2u);
      }

    }
    -[CKChatController setInitialComposition:](self, "setInitialComposition:", v4);
  }

}

- (void)makeEntryViewActiveAfterSend
{
  -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 1);
}

- (void)showKeyboard
{
  -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 1);
  -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
}

- (BOOL)showKeyboardForReply
{
  void *v3;
  void *v4;
  char v5;

  -[CKChatController entryView](self, "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "contentView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isActive");

  if ((v5 & 1) == 0)
  {
    -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 1);
    -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
  }
  return v5 ^ 1;
}

- (void)dismissKeyboard
{
  objc_super v3;

  if (-[CKChatController isKeyboardSnapshotted](self, "isKeyboardSnapshotted"))
    -[CKChatController animatedDismissalOfKeyboardSnapshot](self, "animatedDismissalOfKeyboardSnapshot");
  v3.receiver = self;
  v3.super_class = (Class)CKChatController;
  -[CKChatController becomeFirstResponder](&v3, sel_becomeFirstResponder);
}

- (void)scrollToMessage:(id)a3 highlight:(BOOL)a4
{
  -[CKChatController scrollToMessage:highlight:withInlineReplyOverlay:](self, "scrollToMessage:highlight:withInlineReplyOverlay:", a3, a4, 0);
}

- (void)scrollToMessageGUID:(id)a3 partIndex:(int64_t)a4 highlight:(BOOL)a5
{
  -[CKChatController scrollToMessageGUID:atSpecificMessagePartIndex:highlight:withInlineReplyOverlay:alignedWithView:allowOverScroll:scrollPosition:](self, "scrollToMessageGUID:atSpecificMessagePartIndex:highlight:withInlineReplyOverlay:alignedWithView:allowOverScroll:scrollPosition:", a3, a4, a5, 0, 0, 0, 2);
}

- (void)scrollToMessageGUID:(id)a3 partIndex:(int64_t)a4 highlight:(BOOL)a5 scrollPosition:(unint64_t)a6
{
  -[CKChatController scrollToMessageGUID:atSpecificMessagePartIndex:highlight:withInlineReplyOverlay:alignedWithView:allowOverScroll:scrollPosition:](self, "scrollToMessageGUID:atSpecificMessagePartIndex:highlight:withInlineReplyOverlay:alignedWithView:allowOverScroll:scrollPosition:", a3, a4, a5, 0, 0, 0, a6);
}

- (void)scrollToMessage:(id)a3 highlight:(BOOL)a4 withInlineReplyOverlay:(BOOL)a5
{
  -[CKChatController scrollToMessage:atSpecificMessagePartIndex:highlight:withInlineReplyOverlay:](self, "scrollToMessage:atSpecificMessagePartIndex:highlight:withInlineReplyOverlay:", a3, 0x7FFFFFFFFFFFFFFFLL, a4, a5);
}

- (void)scrollToMessage:(id)a3 atSpecificMessagePartIndex:(int64_t)a4 highlight:(BOOL)a5 withInlineReplyOverlay:(BOOL)a6
{
  -[CKChatController scrollToMessage:atSpecificMessagePartIndex:highlight:withInlineReplyOverlay:alignedWithView:allowOverScroll:](self, "scrollToMessage:atSpecificMessagePartIndex:highlight:withInlineReplyOverlay:alignedWithView:allowOverScroll:", a3, a4, a5, a6, 0, 0);
}

- (void)scrollToMessage:(id)a3 atSpecificMessagePartIndex:(int64_t)a4 highlight:(BOOL)a5 withInlineReplyOverlay:(BOOL)a6 alignedWithView:(id)a7 allowOverScroll:(BOOL)a8
{
  _BOOL8 v8;
  _BOOL8 v9;
  _BOOL8 v10;
  id v14;
  id v15;

  v8 = a8;
  v9 = a6;
  v10 = a5;
  v14 = a7;
  objc_msgSend(a3, "guid");
  v15 = (id)objc_claimAutoreleasedReturnValue();
  -[CKChatController scrollToMessageGUID:atSpecificMessagePartIndex:highlight:withInlineReplyOverlay:alignedWithView:allowOverScroll:scrollPosition:](self, "scrollToMessageGUID:atSpecificMessagePartIndex:highlight:withInlineReplyOverlay:alignedWithView:allowOverScroll:scrollPosition:", v15, a4, v10, v9, v14, v8, 2);

}

- (void)scrollToMessageGUID:(id)a3 atSpecificMessagePartIndex:(int64_t)a4 highlight:(BOOL)a5 withInlineReplyOverlay:(BOOL)a6 alignedWithView:(id)a7 allowOverScroll:(BOOL)a8 scrollPosition:(unint64_t)a9
{
  id v15;
  id v16;
  id v17;
  id v18;
  void (**v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  void *v23;
  id v24;
  id v25;
  CKChatController *v26;
  id v27[3];
  BOOL v28;
  BOOL v29;
  BOOL v30;
  id location;

  v15 = a3;
  v16 = a7;
  location = 0;
  objc_initWeak(&location, self);
  v20 = MEMORY[0x1E0C809B0];
  v21 = 3221225472;
  v22 = __147__CKChatController_scrollToMessageGUID_atSpecificMessagePartIndex_highlight_withInlineReplyOverlay_alignedWithView_allowOverScroll_scrollPosition___block_invoke;
  v23 = &unk_1E274C7D0;
  objc_copyWeak(v27, &location);
  v17 = v15;
  v24 = v17;
  v27[1] = (id)a4;
  v18 = v16;
  v28 = a8;
  v27[2] = (id)a9;
  v29 = a5;
  v30 = a6;
  v25 = v18;
  v26 = self;
  v19 = (void (**)(_QWORD))_Block_copy(&v20);
  if (-[CKCoreChatController initialLayoutComplete](self, "initialLayoutComplete", v20, v21, v22, v23))
    v19[2](v19);
  else
    -[CKChatController setScrollBlock:](self, "setScrollBlock:", v19);

  objc_destroyWeak(v27);
  objc_destroyWeak(&location);

}

void __147__CKChatController_scrollToMessageGUID_atSpecificMessagePartIndex_highlight_withInlineReplyOverlay_alignedWithView_allowOverScroll_scrollPosition___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  CKTranscriptHighlightedMessageScrollContext *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  void *v13;
  NSObject *v14;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "collectionViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "collectionView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setTranscriptScrollIntent:", 2);
    v6 = -[CKTranscriptHighlightedMessageScrollContext initWithMessageGUID:messagePartIndex:viewToAlignWith:allowOverScroll:scrollPosition:]([CKTranscriptHighlightedMessageScrollContext alloc], "initWithMessageGUID:messagePartIndex:viewToAlignWith:allowOverScroll:scrollPosition:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 80), *(_QWORD *)(a1 + 72));
    objc_msgSend(v5, "setHighlightedMessageScrollContext:", v6);

    objc_msgSend(v3, "indexPathForMessageGUID:messagePartIndex:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      objc_msgSend(v3, "contentOffsetForIndexPath:viewToAlignWith:allowOverScroll:scrollPosition:", v7, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 80), *(_QWORD *)(a1 + 72));
      v9 = v8;
      v11 = v10;
      objc_msgSend(v5, "beginDisablingTranscriptDynamicsForReason:", CFSTR("ScrollToMessage"));
      objc_msgSend(v5, "setContentOffset:animated:", 0, v9, v11);
      objc_msgSend(v5, "endDisablingTranscriptDynamicsForReason:", CFSTR("ScrollToMessage"));
      if (*(_BYTE *)(a1 + 81))
        objc_msgSend(v4, "highlightItemAtIndexPathWhenDisplayed:autoDismiss:", v7, 1);
      if (*(_BYTE *)(a1 + 82))
      {
        objc_msgSend(v4, "chatItems");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        +[CKSocialLayerChatController chatItemForMessageGUID:messagePartIndex:chatItems:](CKSocialLayerChatController, "chatItemForMessageGUID:messagePartIndex:chatItems:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64), v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "showInlineReplyControllerForChatItem:presentKeyboard:", v13, 1);

      }
    }
    else
    {
      IMLogHandleForCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        __147__CKChatController_scrollToMessageGUID_atSpecificMessagePartIndex_highlight_withInlineReplyOverlay_alignedWithView_allowOverScroll_scrollPosition___block_invoke_cold_1();

    }
  }

}

- (void)dismissInlineReplyIfNeededAndScrollToBottom
{
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[5];

  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[CKChatController inlineReplyController](self, "inlineReplyController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __63__CKChatController_dismissInlineReplyIfNeededAndScrollToBottom__block_invoke;
    v6[3] = &unk_1E274A1B8;
    v6[4] = self;
    objc_msgSend(v4, "dismissControllerWithCompletion:", v6);

  }
  else
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "scrollTranscriptToEntryViewInsertionTimeWithAnimation:", 1);

  }
}

void __63__CKChatController_dismissInlineReplyIfNeededAndScrollToBottom__block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "scrollTranscriptToEntryViewInsertionTimeWithAnimation:", 1);

}

- (void)primeTranscriptWithInitialOffset:(CGPoint)a3 inset:(UIEdgeInsets)a4
{
  double right;
  double bottom;
  double left;
  double top;
  double y;
  double x;

  right = a4.right;
  bottom = a4.bottom;
  left = a4.left;
  top = a4.top;
  y = a3.y;
  x = a3.x;
  -[CKChatController setPrimeTranscriptWithInitialScrollGeometries:](self, "setPrimeTranscriptWithInitialScrollGeometries:", 1);
  -[CKChatController setInitialContentOffset:](self, "setInitialContentOffset:", x, y);
  -[CKChatController setInitialContentInset:](self, "setInitialContentInset:", top, left, bottom, right);
}

- (id)nextMediaObjectToTrimInComposition:(id)a3
{
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  void *v13;
  BOOL v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *j;
  void *v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[8];
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (CKIsRunningInMacCatalyst())
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "Do not offer to trim - this is running on Mac.", buf, 2u);
      }

    }
    v6 = 0;
  }
  else
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    objc_msgSend(v4, "mediaObjects");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v26;
      while (2)
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v26 != v9)
            objc_enumerationMutation(v7);
          v11 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
          if (-[CKChatController _mediaObjectNeedsTrimming:](self, "_mediaObjectNeedsTrimming:", v11))
          {
            v6 = v11;
            goto LABEL_17;
          }
        }
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
        if (v8)
          continue;
        break;
      }
    }
    v6 = 0;
LABEL_17:

    objc_msgSend(v4, "shelfPluginPayload");
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = (void *)v12;
    if (v6)
      v14 = 1;
    else
      v14 = v12 == 0;
    if (!v14)
    {
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      -[CKChatController fileURLKeyToGuidMapping](self, "fileURLKeyToGuidMapping", 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "__ck_photoCompositionMediaObjectsWithKeyToTrasferGUIDMap:", v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      v6 = (id)objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
      if (v6)
      {
        v17 = *(_QWORD *)v22;
        while (2)
        {
          for (j = 0; j != v6; j = (char *)j + 1)
          {
            if (*(_QWORD *)v22 != v17)
              objc_enumerationMutation(v16);
            v19 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)j);
            if (-[CKChatController _mediaObjectNeedsTrimming:](self, "_mediaObjectNeedsTrimming:", v19))
            {
              v6 = v19;
              goto LABEL_31;
            }
          }
          v6 = (id)objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
          if (v6)
            continue;
          break;
        }
      }
LABEL_31:

    }
  }

  return v6;
}

- (void)_updateRecipientCapabilities
{
  objc_msgSend(MEMORY[0x1E0DE7910], "cancelPreviousPerformRequestsWithTarget:selector:object:", self, sel__fetchRecipientCapabilitiesDeferred, 0);
  -[CKChatController performSelector:withObject:afterDelay:](self, "performSelector:withObject:afterDelay:", sel__fetchRecipientCapabilitiesDeferred, 0, 0.0);
}

- (void)_fetchRecipientCapabilitiesDeferred
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D357F0], "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = *MEMORY[0x1E0D34B38];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v9, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController chat](self, "chat");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "guid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __55__CKChatController__fetchRecipientCapabilitiesDeferred__block_invoke;
  v8[3] = &unk_1E274C7F8;
  v8[4] = self;
  objc_msgSend(v3, "fetchCommonCapabilities:fromChatWithGUID:reply:", v5, v7, v8);

}

void __55__CKChatController__fetchRecipientCapabilitiesDeferred__block_invoke(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  const __CFString *v7;
  void *v8;
  int v9;
  const __CFString *v10;
  __int16 v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = CFSTR("NO");
      if (a2)
        v7 = CFSTR("YES");
      v9 = 138412546;
      v10 = v7;
      v11 = 2112;
      v12 = v5;
      _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "Got response on capabilities: %@ %@", (uint8_t *)&v9, 0x16u);
    }

  }
  objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D34B38]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setRecipientsAreHEIFCapable:", objc_msgSend(v8, "BOOLValue"));

}

- (unint64_t)_maxAllowedSVSize
{
  return 104857600;
}

- (BOOL)_mediaObjectHasTrimMetadata:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  BOOL v7;
  BOOL v9;

  objc_msgSend(a3, "transcoderUserInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", *MEMORY[0x1E0D37F08]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", *MEMORY[0x1E0D37ED8]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", *MEMORY[0x1E0D37ED0]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  v9 = !v7 && v6 != 0;

  return v9;
}

- (BOOL)_mediaObjectNeedsTrimming:(id)a3
{
  __CFString *v4;
  void *v5;
  int v6;
  NSObject *v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  BOOL v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  __CFString *v21;
  unint64_t v22;
  unint64_t v23;
  NSObject *v24;
  unint64_t v25;
  const __CFString *v26;
  id v27;
  uint8_t buf[4];
  const __CFString *v29;
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  unint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = (__CFString *)a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_16;
  -[__CFString fileURL](v4, "fileURL");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = IMIsAAVideoURL();

  if (v6)
  {
    if (!-[CKChatController recipientsAreHEIFCapable](self, "recipientsAreHEIFCapable"))
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "Not all recipients are HEIF capable, transcoding new media video", buf, 2u);
        }
        goto LABEL_15;
      }
LABEL_16:
      v13 = 0;
      goto LABEL_17;
    }
    if (-[CKChatController _mediaObjectHasTrimMetadata:](self, "_mediaObjectHasTrimMetadata:", v4))
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v29 = v4;
          _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "Skipping already trimmed object, %@", buf, 0xCu);
        }
LABEL_15:

        goto LABEL_16;
      }
      goto LABEL_16;
    }
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString fileURL](v4, "fileURL");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "path");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = 0;
    objc_msgSend(v15, "attributesOfItemAtPath:error:", v17, &v27);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v27;

    if (v19)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          -[__CFString fileURL](v4, "fileURL");
          v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v29 = v21;
          v30 = 2112;
          v31 = (unint64_t)v19;
          _os_log_impl(&dword_18DFCD000, v20, OS_LOG_TYPE_INFO, "Failed to find new media at %@ to check size, error %@", buf, 0x16u);

        }
      }
      v13 = 0;
    }
    else
    {
      v22 = objc_msgSend(v18, "fileSize");
      v23 = -[CKChatController _maxAllowedSVSize](self, "_maxAllowedSVSize");
      v13 = v22 > v23;
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          v25 = -[CKChatController _maxAllowedSVSize](self, "_maxAllowedSVSize");
          v26 = CFSTR("NO");
          *(_DWORD *)buf = 138412802;
          if (v22 > v23)
            v26 = CFSTR("YES");
          v29 = v26;
          v30 = 2048;
          v31 = v22;
          v32 = 2048;
          v33 = v25;
          _os_log_impl(&dword_18DFCD000, v24, OS_LOG_TYPE_INFO, "Outgoing new media needs trim? %@ size: %lu limit %lu", buf, 0x20u);
        }

      }
    }

  }
  else
  {
    if (CKIsRunningInMacCatalyst())
      goto LABEL_16;
    -[__CFString duration](v4, "duration");
    v9 = v8;
    -[CKCoreChatController conversation](self, "conversation");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "maxTrimDurationForMedia:", v4);
    v12 = v11;

    if (v9 <= v12)
      goto LABEL_16;
    v13 = 1;
  }
LABEL_17:

  return v13;
}

- (void)startTrimmingMediaObjectsInComposition:(id)a3
{
  void *v4;
  id v5;

  v5 = a3;
  -[CKChatController nextMediaObjectToTrimInComposition:](self, "nextMediaObjectToTrimInComposition:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[CKChatController setCompositionBeingTrimmed:](self, "setCompositionBeingTrimmed:", v5);
    -[CKChatController presentTrimControllerForMediaObject:](self, "presentTrimControllerForMediaObject:", v4);
  }
  else
  {
    -[CKChatController setCompositionBeingTrimmed:](self, "setCompositionBeingTrimmed:", 0);
  }

}

- (void)presentTrimControllerForMediaObject:(id)a3
{
  id v4;
  int v5;
  void *v6;
  double v7;
  double v8;
  id v9;
  void (**v10)(_QWORD, double);
  void *v11;
  int v12;
  void *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, double);
  void *v19;
  CKChatController *v20;
  id v21;
  uint8_t buf[4];
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = objc_msgSend(v4, "mediaType");
  -[CKCoreChatController conversation](self, "conversation");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "maxTrimDurationForMedia:", v4);
  v8 = v7;

  if (v5 != 1)
  {
    if (v5 == 2)
    {
      v16 = MEMORY[0x1E0C809B0];
      v17 = 3221225472;
      v18 = __56__CKChatController_presentTrimControllerForMediaObject___block_invoke;
      v19 = &unk_1E274C820;
      v20 = self;
      v9 = v4;
      v21 = v9;
      v10 = (void (**)(_QWORD, double))_Block_copy(&v16);
      objc_msgSend(v9, "fileURL", v16, v17, v18, v19, v20);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = IMIsAAVideoURL();

      if (v12)
      {
        objc_msgSend(v9, "fileURL");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        CKAVURLAssetForURLWithWriteAccess(v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        -[CKChatController _maxAllowedSVSize](self, "_maxAllowedSVSize");
        IMEstimateDurationForSize();

      }
      else
      {
        v10[2](v10, v8 * 0.95);
      }

    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v23 = v4;
        _os_log_impl(&dword_18DFCD000, v15, OS_LOG_TYPE_INFO, "I don't know how to trim this media object [%@]", buf, 0xCu);
      }

    }
  }

}

void __56__CKChatController_presentTrimControllerForMediaObject___block_invoke(uint64_t a1, double a2)
{
  void *v3;
  _QWORD block[5];
  id v5;
  double v6;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __56__CKChatController_presentTrimControllerForMediaObject___block_invoke_2;
  block[3] = &unk_1E274A420;
  v3 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  v6 = a2;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

void __56__CKChatController_presentTrimControllerForMediaObject___block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  CKVideoTrimController *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD aBlock[5];

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v2 + 1792))
  {
    v3 = -[CKVideoTrimController initWithMediaObject:maxTrimDuration:]([CKVideoTrimController alloc], "initWithMediaObject:maxTrimDuration:", *(_QWORD *)(a1 + 40), *(double *)(a1 + 48));
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 1792);
    *(_QWORD *)(v4 + 1792) = v3;

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1792), "setDelegate:");
    v2 = *(_QWORD *)(a1 + 32);
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __56__CKChatController_presentTrimControllerForMediaObject___block_invoke_3;
  aBlock[3] = &unk_1E274B4F8;
  aBlock[4] = v2;
  v6 = _Block_copy(aBlock);
  objc_msgSend(*(id *)(a1 + 32), "view");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "window");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "windowScene");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)(objc_msgSend(v9, "interfaceOrientation") - 3) >= 2)
    v10 = 3;
  else
    v10 = 4;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1792), "editVideoVC");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "popoverPresentationController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setPermittedArrowDirections:", v10);

  +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1792), "editVideoVC");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "presentViewController:fromViewController:presentationHandler:dismissalHandler:animated:completion:", v14, *(_QWORD *)(a1 + 32), v6, 0, 1, 0);

}

void __56__CKChatController_presentTrimControllerForMediaObject___block_invoke_3(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "photoButton");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "frame");
  *a2 = v7;
  a2[1] = v8;
  a2[2] = v9;
  a2[3] = v10;

  v11 = objc_retainAutorelease(v5);
  *a3 = v11;

}

- (void)trimControllerDidCancel:(id)a3
{
  CKVideoTrimController *v4;
  _QWORD *p_audioTrimController;
  void *v6;
  _QWORD v7[5];

  v4 = (CKVideoTrimController *)a3;
  -[CKChatController setCompositionBeingTrimmed:](self, "setCompositionBeingTrimmed:", 0);
  p_audioTrimController = &self->_audioTrimController;
  if ((CKVideoTrimController *)self->_audioTrimController == v4
    || (p_audioTrimController = &self->_videoTrimController, self->_videoTrimController == v4))
  {
    *p_audioTrimController = 0;

  }
  +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __44__CKChatController_trimControllerDidCancel___block_invoke;
  v7[3] = &unk_1E274A208;
  v7[4] = self;
  objc_msgSend(v6, "dismissViewControllerAnimated:completion:", 1, v7);

}

uint64_t __44__CKChatController_trimControllerDidCancel___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "reloadInputViews");
  return objc_msgSend(*(id *)(a1 + 32), "becomeFirstResponder");
}

- (void)trimController:(id)a3 didFinishTrimmingMediaObject:(id)a4 withReplacementMediaObject:(id)a5
{
  CKVideoTrimController *v8;
  id v9;
  id v10;
  _QWORD *p_audioTrimController;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  NSObject *v17;
  void *v18;
  _QWORD v19[5];
  uint8_t buf[4];
  id v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = (CKVideoTrimController *)a3;
  v9 = a4;
  v10 = a5;
  p_audioTrimController = &self->_audioTrimController;
  if ((CKVideoTrimController *)self->_audioTrimController == v8
    || (p_audioTrimController = &self->_videoTrimController, self->_videoTrimController == v8))
  {
    *p_audioTrimController = 0;

  }
  if (v9 && v10)
  {
    -[CKChatController compositionBeingTrimmed](self, "compositionBeingTrimmed");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "compositionByReplacingMediaObject:withMediaObject:", v9, v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKChatController composition](self, "composition");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController compositionBeingTrimmed](self, "compositionBeingTrimmed");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v14, "isEqual:", v15);

    if (v16)
      -[CKChatController setComposition:](self, "setComposition:", v13);
    -[CKChatController setCompositionBeingTrimmed:](self, "setCompositionBeingTrimmed:", v13);

  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v21 = v9;
      v22 = 2112;
      v23 = v10;
      _os_log_impl(&dword_18DFCD000, v17, OS_LOG_TYPE_INFO, "Not replacing [%@] with [%@]", buf, 0x16u);
    }

  }
  +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __91__CKChatController_trimController_didFinishTrimmingMediaObject_withReplacementMediaObject___block_invoke;
  v19[3] = &unk_1E274A208;
  v19[4] = self;
  objc_msgSend(v18, "dismissViewControllerAnimated:completion:", 1, v19);

}

void __91__CKChatController_trimController_didFinishTrimmingMediaObject_withReplacementMediaObject___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  _QWORD aBlock[5];

  v2 = *(void **)(a1 + 32);
  objc_msgSend(v2, "compositionBeingTrimmed");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "nextMediaObjectToTrimInComposition:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "presentTrimControllerForMediaObject:", v4);
  }
  else
  {
    v5 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __91__CKChatController_trimController_didFinishTrimmingMediaObject_withReplacementMediaObject___block_invoke_2;
    aBlock[3] = &unk_1E274C848;
    aBlock[4] = *(_QWORD *)(a1 + 32);
    v6 = _Block_copy(aBlock);
    objc_msgSend(*(id *)(a1 + 32), "compositionBeingTrimmed");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "composition");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7 == v8)
    {
      objc_msgSend(*(id *)(a1 + 32), "entryView");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10[0] = v5;
      v10[1] = 3221225472;
      v10[2] = __91__CKChatController_trimController_didFinishTrimmingMediaObject_withReplacementMediaObject___block_invoke_3;
      v10[3] = &unk_1E274C870;
      v11 = v6;
      objc_msgSend(v9, "compositionWithAcceptedAutocorrection:", v10);

    }
    else
    {
      (*((void (**)(void *, void *))v6 + 2))(v6, v7);
    }

  }
}

uint64_t __91__CKChatController_trimController_didFinishTrimmingMediaObject_withReplacementMediaObject___block_invoke_2(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "sendComposition:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setCompositionBeingTrimmed:", 0);
  objc_msgSend(*(id *)(a1 + 32), "reloadInputViews");
  return objc_msgSend(*(id *)(a1 + 32), "becomeFirstResponder");
}

uint64_t __91__CKChatController_trimController_didFinishTrimmingMediaObject_withReplacementMediaObject___block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (double)balloonMaxWidth
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  double v20;
  double v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  double v28;
  double v29;

  -[CKCoreChatController calculateTranscriptSafeAreaInsets](self, "calculateTranscriptSafeAreaInsets");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  -[CKCoreChatController calculateTranscriptMarginInsets](self, "calculateTranscriptMarginInsets");
  v12 = v4 + v11;
  v14 = v6 + v13;
  v16 = v8 + v15;
  v18 = v10 + v17;
  -[CKChatController view](self, "view");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "bounds");
  v21 = v20;

  -[CKCoreChatController chat](self, "chat");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "isStewieChat");

  -[CKCoreChatController conversation](self, "conversation");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "sendingService");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = v23 | objc_msgSend(v25, "__ck_isiMessageLite");

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "balloonMaxWidthForTranscriptWidth:marginInsets:shouldShowPluginButtons:shouldShowCharacterCount:shouldCoverSendButton:isStewieMode:", -[CKChatController pluginButtonsEnabled](self, "pluginButtonsEnabled"), CKShowCharacterCountEnabled(v26) != 0, 0, v26, v21, v12, v14, v16, v18);
  v29 = v28;

  return v29;
}

- (double)gradientBottomPlaceholderHeight
{
  void *v2;
  double v3;
  double v4;

  -[CKChatController entryView](self, "entryView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "placeholderHeight");
  v4 = v3;

  return v4;
}

- (id)outgoingComposeViewForSendAnimation
{
  return 0;
}

- (void)_setConversationDeferredSetup
{
  NSObject *v3;
  CKMacRecipientsController *macRecipientsController;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  BOOL v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _BOOL4 v24;
  CKRaiseGesture *v25;
  void *v26;
  void *v27;
  char v28;
  NSObject *v29;
  char *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  objc_super v38;
  uint8_t buf[4];
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v38.receiver = self;
  v38.super_class = (Class)CKChatController;
  -[CKCoreChatController _setConversationDeferredSetup](&v38, sel__setConversationDeferredSetup);
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v40 = "-[CKChatController _setConversationDeferredSetup]";
      _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "reloadEntryViewIfNeeded called from %s", buf, 0xCu);
    }

  }
  -[CKChatController reloadEntryViewIfNeeded](self, "reloadEntryViewIfNeeded");
  -[CKChatController cleanUpDarkEffectStyle](self, "cleanUpDarkEffectStyle");
  if (CKIsRunningInMacCatalyst())
  {
    if (-[CKChatController shouldUseMacRecipientsView](self, "shouldUseMacRecipientsView"))
    {
      macRecipientsController = self->_macRecipientsController;
      if (macRecipientsController)
      {
        -[CKCoreChatController conversation](self, "conversation");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKMacRecipientsController setConversation:](macRecipientsController, "setConversation:", v5);

        -[CKMacRecipientsController view](self->_macRecipientsController, "view");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController view](self, "view");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "bounds");
        objc_msgSend(v6, "setFrame:");

      }
    }
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "useMacToolbar");

    if (v9)
    {
      -[CKChatController macToolbarController](self, "macToolbarController");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "updateVirtualViewForProvider:", self);

    }
  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "collectionView");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (-[CKChatController primeTranscriptWithInitialScrollGeometries](self, "primeTranscriptWithInitialScrollGeometries"))
  {
    objc_msgSend(v12, "layoutIfNeeded");
    -[CKChatController setPrimeTranscriptWithInitialScrollGeometries:](self, "setPrimeTranscriptWithInitialScrollGeometries:", 0);
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "sizeFullTranscriptIfNecessary");

    objc_msgSend(v12, "beginDisablingTranscriptDynamicsForReason:", CFSTR("ProgramaticScroll"));
    -[CKChatController initialContentOffset](self, "initialContentOffset");
    objc_msgSend(v12, "setContentOffset:");
    -[CKChatController initialContentInset](self, "initialContentInset");
    objc_msgSend(v12, "setContentInset:");
    objc_msgSend(v12, "endDisablingTranscriptDynamicsForReason:", CFSTR("ProgramaticScroll"));
  }
  -[CKChatController tapGestureRecognizer](self, "tapGestureRecognizer");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v14)
    goto LABEL_15;
  -[CKChatController tapGestureRecognizer](self, "tapGestureRecognizer");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "view");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v16 == v12;

  if (!v17)
  {
LABEL_15:
    -[CKChatController tapGestureRecognizer](self, "tapGestureRecognizer");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      -[CKChatController tapGestureRecognizer](self, "tapGestureRecognizer");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "view");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController tapGestureRecognizer](self, "tapGestureRecognizer");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "removeGestureRecognizer:", v21);

    }
    v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA88]), "initWithTarget:action:", self, sel_tapGestureRecognized_);
    objc_msgSend(v22, "setDelegate:", self);
    objc_msgSend(v12, "addGestureRecognizer:", v22);
    -[CKChatController setTapGestureRecognizer:](self, "setTapGestureRecognizer:", v22);

  }
  if (+[CKRaiseGesture isRaiseGestureSupported](CKRaiseGesture, "isRaiseGestureSupported"))
  {
    -[CKChatController raiseGesture](self, "raiseGesture");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v23 == 0;

    if (v24)
    {
      v25 = -[CKRaiseGesture initWithTarget:action:]([CKRaiseGesture alloc], "initWithTarget:action:", self, sel_raiseGestureRecognized_);
      -[CKChatController setRaiseGesture:](self, "setRaiseGesture:", v25);

    }
    -[CKChatController updateRaiseGesture](self, "updateRaiseGesture");
  }
  -[CKChatController view](self, "view");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "window");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_msgSend(v27, "isKeyWindow");

  if ((v28 & 1) == 0)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CEAC18], "keyWindow");
        v30 = (char *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v40 = v30;
        _os_log_impl(&dword_18DFCD000, v29, OS_LOG_TYPE_INFO, "CKChatController's window is not key, making it key again. Current key is %@", buf, 0xCu);

      }
    }
    -[CKChatController view](self, "view");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "window");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "makeKeyWindow");

  }
  -[CKChatController nicknameBanner](self, "nicknameBanner");
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  if (v33)
  {
    -[CKChatController view](self, "view");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController nicknameBanner](self, "nicknameBanner");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "bringSubviewToFront:", v35);

  }
  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "updateContentsForConversation:", v37);

  -[CKChatController updateSendMenuShouldElevateCheckIn](self, "updateSendMenuShouldElevateCheckIn");
}

- (void)_invalidateChatItemLayoutIfNecessary:(CGSize)a3
{
  BOOL v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  double v24;
  id v25;

  v4 = +[CKApplicationState isResizing](CKApplicationState, "isResizing", a3.width, a3.height);
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v25 = (id)objc_claimAutoreleasedReturnValue();
  if (v25)
  {
    if (!v4)
    {
      -[CKCoreChatController calculateTranscriptMarginInsets](self, "calculateTranscriptMarginInsets");
      v6 = v5;
      v8 = v7;
      v10 = v9;
      v12 = v11;
      objc_msgSend(v25, "marginInsets");
      v14 = v13;
      v16 = v15;
      v24 = v17;
      v19 = v18;
      -[CKChatController balloonMaxWidth](self, "balloonMaxWidth");
      v21 = v20;
      objc_msgSend(v25, "balloonMaxWidth");
      if (v8 != v16 || v6 != v14 || v12 != v19 || v10 != v24 || vabdd_f64(v21, v22) > 0.001)
      {
        -[CKChatController traitCollection](self, "traitCollection");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "invalidateChatItemLayoutWithNewBalloonMaxWidth:marginInsets:traitCollection:", v23, v21, v6, v8, v10, v12);

      }
    }
  }

}

- (CGRect)effectiveVisibleRectOfCollectionViewForTranscriptCollectionViewController:(id)a3
{
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  CGRect result;

  -[CKChatController collectionView](self, "collectionView", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bounds");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  objc_msgSend(v4, "adjustedContentInset");
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  -[CKChatController _currentlyVisibleBannerHeight](self, "_currentlyVisibleBannerHeight");
  v22 = v14 + v21;
  v23 = v8 + v22;
  v24 = v12 - (v18 + v22);

  v25 = v6 + v16;
  v26 = v23;
  v27 = v10 - (v16 + v20);
  v28 = v24;
  result.size.height = v28;
  result.size.width = v27;
  result.origin.y = v26;
  result.origin.x = v25;
  return result;
}

- (id)firstUnreadMessageItemGUIDForTranscriptCollectionViewController:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  -[CKChatController firstUnreadMessageGUIDForTextEffects](self, "firstUnreadMessageGUIDForTextEffects", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    -[CKChatController firstUnreadMessageGUIDForTextEffects](self, "firstUnreadMessageGUIDForTextEffects");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[CKCoreChatController chat](self, "chat");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "firstUnreadMessageItem");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "guid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController setFirstUnreadMessageGUIDForTextEffects:](self, "setFirstUnreadMessageGUIDForTextEffects:", v8);

    -[CKChatController firstUnreadMessageGUIDForTextEffects](self, "firstUnreadMessageGUIDForTextEffects");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v5;
}

- (void)transcriptCollectionViewControllerNeedsChatItemLayoutInvalidation:(id)a3
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  id v16;

  v4 = a3;
  -[CKChatController balloonMaxWidth](self, "balloonMaxWidth");
  v6 = v5;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v16 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "marginInsets");
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  -[CKChatController traitCollection](self, "traitCollection");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "invalidateChatItemLayoutWithNewBalloonMaxWidth:marginInsets:traitCollection:", v15, v6, v8, v10, v12, v14);

}

- (void)transcriptCollectionViewController:(id)a3 didInsertChatItems:(id)a4 associatedChatItems:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void (**v11)(_QWORD, _QWORD, _QWORD);
  objc_super v12;

  v8 = a4;
  v9 = a5;
  v12.receiver = self;
  v12.super_class = (Class)CKChatController;
  -[CKCoreChatController transcriptCollectionViewController:didInsertChatItems:associatedChatItems:](&v12, sel_transcriptCollectionViewController_didInsertChatItems_associatedChatItems_, a3, v8, v9);
  -[CKChatController insertItemsCallback](self, "insertItemsCallback");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    -[CKChatController insertItemsCallback](self, "insertItemsCallback");
    v11 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, id, id))v11)[2](v11, v8, v9);

    -[CKChatController setInsertItemsCallback:](self, "setInsertItemsCallback:", 0);
  }

}

- (void)transcriptCollectionViewController:(id)a3 didTapAttributionButtonForChatItem:(id)a4 parentIndexPath:(id)a5
{
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v16 = a3;
  v8 = a5;
  objc_msgSend(a4, "IMChatItem");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = v9;
    if (objc_msgSend(v10, "attributionType") == 6 && !CKIsRunningInMacCatalyst())
    {
      -[CKChatController _presentSentWithSiriUI](self, "_presentSentWithSiriUI");
    }
    else if (objc_msgSend(v10, "isCommSafetySensitiveAttribution"))
    {
      objc_msgSend(MEMORY[0x1E0D397A0], "sharedManager");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "enablementGroup");

      if (v12 == 2)
      {
        -[CKCoreChatController transcriptCollectionViewController:viewedCommSafetyAssociatedItemsWithIndexPath:](self, "transcriptCollectionViewController:viewedCommSafetyAssociatedItemsWithIndexPath:", v16, v8);
      }
      else
      {
        -[CKCoreChatController collectionViewController](self, "collectionViewController");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "presentUserInterventionScreenForIndexPath:shouldTargetAssociatedItems:", v8, 1);

      }
    }
    else
    {
      objc_msgSend(v10, "attributionInfo");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "objectForKey:", *MEMORY[0x1E0D37F18]);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (v14)
        -[CKChatController _presentBrowserOrAppStoreForAdamID:url:identifier:isForSticker:](self, "_presentBrowserOrAppStoreForAdamID:url:identifier:isForSticker:", v14, 0, 0, objc_msgSend(v10, "attributionType") == 3);

    }
  }

}

- (int64_t)transcriptCollectionViewControllerWantsCurrentDesiredIntent:(id)a3
{
  void *v3;
  void *v4;

  -[CKChatController entryView](self, "entryView", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "sendLaterPluginInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
    return 6;
  else
    return 0;
}

- (void)transcriptCollectionViewController:(id)a3 didTapPluginStatusButtonForChatItem:(id)a4
{
  void *v4;
  id v5;

  objc_msgSend(a4, "IMChatItem", a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v5, "dataSource");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "didTapStatusItem");

  }
}

- (void)transcriptCollectionViewController:(id)a3 didTapReplyCountStatusButtonForChatItem:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  id v9;

  v6 = a4;
  objc_msgSend(a3, "chatItems");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController _threadChatItemForReplyCountChatItem:chatItems:](self, "_threadChatItemForReplyCountChatItem:chatItems:", v6, v7);
  v9 = (id)objc_claimAutoreleasedReturnValue();

  v8 = v9;
  if (v9)
  {
    -[CKChatController showInlineReplyControllerForChatItem:presentKeyboard:](self, "showInlineReplyControllerForChatItem:presentKeyboard:", v9, 0);
    v8 = v9;
  }

}

- (void)transcriptCollectionViewController:(id)a3 balloonView:(id)a4 tappedForChatItem:(id)a5
{
  id v8;
  id v9;
  id v10;
  CKTranscriptPluginPresentationConfiguration *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  objc_super v19;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (-[CKChatController isFullScreenBalloonViewOnScreen](self, "isFullScreenBalloonViewOnScreen"))
    goto LABEL_40;
  if (CKIsRunningInMacCatalyst())
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v9, "stackView");
        v11 = (CKTranscriptPluginPresentationConfiguration *)objc_claimAutoreleasedReturnValue();
        -[CKTranscriptPluginPresentationConfiguration currentAssetReference](v11, "currentAssetReference");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController _presentViewerForChatItem:assetReference:](self, "_presentViewerForChatItem:assetReference:", v10, v12);
LABEL_18:

LABEL_19:
        goto LABEL_40;
      }
    }
  }
  if (objc_msgSend(v10, "itemIsReplyContextPreview")
    && (-[CKChatController isEditing](self, "isEditing") & 1) == 0)
  {
LABEL_39:
    -[CKChatController showInlineReplyControllerForChatItem:presentKeyboard:](self, "showInlineReplyControllerForChatItem:presentKeyboard:", v10, 0);
    goto LABEL_40;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v10, "mediaObject");
    v11 = (CKTranscriptPluginPresentationConfiguration *)objc_claimAutoreleasedReturnValue();
    -[CKTranscriptPluginPresentationConfiguration transfer](v11, "transfer");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v12, "isDownloadable"))
    {
      objc_storeStrong((id *)&self->_mediaObjectToDownload, v11);
      -[CKCoreChatController conversation](self, "conversation");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "guid");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "acceptTransfer:", v14);

    }
    else
    {
      if (!-[CKTranscriptPluginPresentationConfiguration shouldShowViewer](v11, "shouldShowViewer"))
        goto LABEL_18;
      if (objc_msgSend(v12, "isRestoring"))
      {
        -[CKTranscriptPluginPresentationConfiguration fileURL](v11, "fileURL");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "path");
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        +[CKSyncController sharedInstance](CKSyncController, "sharedInstance");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "prioritizeAttachmentAtPath:", v16);

      }
      -[CKChatController showViewerForMediaObject:](self, "showViewerForMediaObject:", v11);
      objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "trackEvent:", *MEMORY[0x1E0D387C8]);
    }

    goto LABEL_18;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && objc_msgSend(v10, "isCorrupt"))
  {
    -[CKChatController _showReaderForAggregateChatItem:balloonView:](self, "_showReaderForAggregateChatItem:balloonView:", v10, v9);
    goto LABEL_40;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (!CKIsRunningInMacCatalyst())
    {
      -[CKChatController _handleTranscriptPluginChatItem:](self, "_handleTranscriptPluginChatItem:", v10);
      goto LABEL_40;
    }
    if (objc_msgSend(v10, "balloonOrientation") == 1)
      v18 = 8;
    else
      v18 = 4;
    v11 = -[CKTranscriptPluginPresentationConfiguration initWithSourceView:permittedArrowDirections:shouldDisableSnapshotView:]([CKTranscriptPluginPresentationConfiguration alloc], "initWithSourceView:permittedArrowDirections:shouldDisableSnapshotView:", v9, v18, 1);
    -[CKChatController _handleTranscriptPluginChatItem:presentationConfiguration:](self, "_handleTranscriptPluginChatItem:presentationConfiguration:", v10, v11);
    goto LABEL_19;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if ((!objc_msgSend(v10, "itemIsReply")
       || (objc_msgSend(v10, "wantsOverlayLayout") & 1) != 0
       || (-[CKChatController isEditing](self, "isEditing") & 1) != 0)
      && (!objc_msgSend(v10, "itemIsThreadOriginator")
       || (objc_msgSend(v10, "wantsOverlayLayout") & 1) != 0
       || CKIsRunningInMacCatalyst()
       || (-[CKChatController isEditing](self, "isEditing") & 1) != 0))
    {
      v19.receiver = self;
      v19.super_class = (Class)CKChatController;
      -[CKCoreChatController transcriptCollectionViewController:balloonView:tappedForChatItem:](&v19, sel_transcriptCollectionViewController_balloonView_tappedForChatItem_, v8, v9, v10);
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if (objc_msgSend(v10, "offerState") != 2)
    -[CKChatController presentDetailsViewController](self, "presentDetailsViewController");
LABEL_40:

}

- (void)transcriptCollectionViewController:(id)a3 balloonView:(id)a4 doubleTappedItemAtIndexPath:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  objc_super v12;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
  {
    v12.receiver = self;
    v12.super_class = (Class)CKChatController;
    -[CKCoreChatController transcriptCollectionViewController:balloonView:doubleTappedItemAtIndexPath:](&v12, sel_transcriptCollectionViewController_balloonView_doubleTappedItemAtIndexPath_, v8, v9, v10);
  }

}

- (void)transcriptCollectionViewController:(id)a3 balloonView:(id)a4 didRequestReaderViewControllerForChatItem:(id)a5
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;

  v7 = a4;
  v8 = a5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    +[CKReaderViewController readerViewControllerForAudioChatItem:](CKReaderViewController, "readerViewControllerForAudioChatItem:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setDelegate:", self);
    if (CKIsRunningInMacCatalyst())
    {
      objc_msgSend(v9, "setModalPresentationStyle:", 7);
      objc_msgSend(v9, "popoverPresentationController");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setSourceView:", v7);

      -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v9, 1, 0);
    }
    else
    {
      -[CKChatController showViewController:sender:](self, "showViewController:sender:", v9, self);
    }

  }
  else
  {
    IMLogHandleForCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      -[CKChatController transcriptCollectionViewController:balloonView:didRequestReaderViewControllerForChatItem:].cold.1();

  }
}

- (void)viewDidLayoutSubviewsForTranscriptCollectionViewController:(id)a3
{
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)CKChatController;
  -[CKCoreChatController viewDidLayoutSubviewsForTranscriptCollectionViewController:](&v4, sel_viewDidLayoutSubviewsForTranscriptCollectionViewController_, a3);
  -[CKChatController _updateCatchUpButtonVisibilityResumingFromBackground:](self, "_updateCatchUpButtonVisibilityResumingFromBackground:", 0);
}

- (void)_handleTranscriptPluginChatItem:(id)a3
{
  -[CKChatController _handleTranscriptPluginChatItem:presentationConfiguration:](self, "_handleTranscriptPluginChatItem:presentationConfiguration:", a3, 0);
}

- (void)_handleTranscriptPluginChatItem:(id)a3 presentationConfiguration:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v6 = a3;
  v7 = a4;
  v17 = v6;
  objc_msgSend(v17, "IMChatItem");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "dataSource");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v9, "wantsInteractiveContentView") & 1) == 0)
  {
    if (objc_msgSend(v9, "wantsReplyFromContentView")
      && objc_msgSend(v9, "allowedByScreenTime"))
    {
      -[CKCoreChatController inputController](self, "inputController");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "presentViewControllerWithPluginChatItem:presentationStyle:presentationConfiguration:", v17, 1, v7);
    }
    else
    {
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "transcriptIdentifier");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "balloonControllerForContext:", v12);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if ((objc_opt_respondsToSelector() & 1) == 0 || (objc_msgSend(v10, "handlePresentationAction") & 1) == 0)
      {
        -[CKCoreChatController collectionViewController](self, "collectionViewController");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "transcriptIdentifier");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "contentViewControllerForContext:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          -[CKChatController navigationController](self, "navigationController");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "pushViewController:animated:", v15, 1);

        }
      }
    }

  }
}

- (void)transcriptCollectionViewController:(id)a3 balloonView:(id)a4 selectedItemAtIndexPath:(id)a5
{
  objc_super v6;

  v6.receiver = self;
  v6.super_class = (Class)CKChatController;
  -[CKCoreChatController transcriptCollectionViewController:balloonView:selectedItemAtIndexPath:](&v6, sel_transcriptCollectionViewController_balloonView_selectedItemAtIndexPath_, a3, a4, a5);
  -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 0);
  -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
}

- (BOOL)transcriptCollectionViewController:(id)a3 balloonView:(id)a4 shouldSelectChatItem:(id)a5
{
  id v5;
  void *v6;
  void *v7;
  char v8;
  BOOL v9;

  v5 = a5;
  if (!CKIsRunningInMacCatalyst())
    goto LABEL_7;
  if ((objc_msgSend(v5, "itemIsReplyContextPreview") & 1) != 0)
    goto LABEL_7;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    goto LABEL_7;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    goto LABEL_7;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_9;
  objc_msgSend(v5, "mediaObject");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "transfer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isDownloadable");

  if ((v8 & 1) != 0)
LABEL_7:
    v9 = 0;
  else
LABEL_9:
    v9 = 1;

  return v9;
}

- (BOOL)transcriptCollectionViewControllerShouldShouldScrollToTopForStatusBarTap:(id)a3
{
  void *v4;
  char v5;
  int v7;

  -[CKChatController activeSendMenuPresentationForChatController:](self, "activeSendMenuPresentationForChatController:", self);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 || -[CKChatController isFullScreenBalloonViewOnScreen](self, "isFullScreenBalloonViewOnScreen"))
  {
    v5 = 0;
  }
  else
  {
    v7 = IMGetCachedDomainBoolForKeyWithDefaultValue();
    if (v7)
      -[CKChatController showMessageHistoryViewController](self, "showMessageHistoryViewController");
    v5 = v7 ^ 1;
  }

  return v5;
}

- (BOOL)transcriptCollectionViewControllerShouldScrollToBottomForLocalSentMessage:(id)a3
{
  void *v3;
  BOOL v4;

  -[CKChatController inlineReplyController](self, "inlineReplyController", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 == 0;

  return v4;
}

- (BOOL)transcriptCollectionViewControllerShouldPlayAudio:(id)a3
{
  void *v3;
  char v4;

  -[CKChatController entryView](self, "entryView", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isRecording") ^ 1;

  return v4;
}

- (void)transcriptCollectionViewControllerDidSetChatItems:(id)a3
{
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)CKChatController;
  -[CKCoreChatController transcriptCollectionViewControllerDidSetChatItems:](&v4, sel_transcriptCollectionViewControllerDidSetChatItems_, a3);
  if (-[CKViewController deferredAppeared](self, "deferredAppeared"))
    -[CKChatController _showOrHideNicknameBannerIfNeeded](self, "_showOrHideNicknameBannerIfNeeded");
  -[CKChatController updateRaiseGesture](self, "updateRaiseGesture");
  -[CKChatController _updatePhotoGridIfNeeded](self, "_updatePhotoGridIfNeeded");
  -[CKChatController updateQLPreviewControllerBarButtonItemsIfVisible](self, "updateQLPreviewControllerBarButtonItemsIfVisible");
}

- (void)transcriptCollectionViewControllerDidChangeAssociatedChatItem:(id)a3 chatItemDiff:(id)a4
{
  objc_super v5;

  v5.receiver = self;
  v5.super_class = (Class)CKChatController;
  -[CKCoreChatController transcriptCollectionViewControllerDidChangeAssociatedChatItem:chatItemDiff:](&v5, sel_transcriptCollectionViewControllerDidChangeAssociatedChatItem_chatItemDiff_, a3, a4);
  -[CKChatController updateQLPreviewControllerBarButtonItemsIfVisible](self, "updateQLPreviewControllerBarButtonItemsIfVisible");
}

- (void)_updatePhotoGridIfNeeded
{
  CKChatController *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  CKChatController *v14;
  void *v15;
  int v16;
  id obj;
  id obja;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v2 = self;
  v24 = *MEMORY[0x1E0C80C00];
  -[CKChatController photoGridDisplayedChatItemGUID](self, "photoGridDisplayedChatItemGUID");
  obj = (id)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(obj, "length"))
  {

    return;
  }
  -[CKChatController photoGridDataSourceManager](v2, "photoGridDataSourceManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {

  }
  else
  {
    -[CKChatController photoGridMomentShareChatItem](v2, "photoGridMomentShareChatItem");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v4)
      return;
  }
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  -[CKCoreChatController collectionViewController](v2, "collectionViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "chatItems");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  obja = v6;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v20 != v9)
          objc_enumerationMutation(obja);
        v11 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v11, "IMChatItem");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "guid");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          -[CKChatController photoGridDisplayedChatItemGUID](v2, "photoGridDisplayedChatItemGUID");
          v14 = v2;
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v13, "isEqualToString:", v15);

          v2 = v14;
          if (v16)
          {
            -[CKChatController photoGridDisplayedChatItemChanged:](v14, "photoGridDisplayedChatItemChanged:", v11);
            goto LABEL_17;
          }
        }
      }
      v8 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      if (v8)
        continue;
      break;
    }
  }
LABEL_17:

}

- (void)transcriptCollectionViewControllerAudioControllerDidStop:(id)a3
{
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  id v13;

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isAudioMessagesEntryViewRecordingEnabled");

  if ((v5 & 1) == 0)
  {
    -[CKCoreChatController conversation](self, "conversation");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "chat");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "lastFinishedMessage");
    v13 = (id)objc_claimAutoreleasedReturnValue();

    LODWORD(v6) = objc_msgSend(v13, "isAudioMessage");
    v8 = objc_msgSend(v13, "isFromMe");
    if ((_DWORD)v6 && (v8 & 1) == 0)
    {
      -[CKChatController setAudioMessageWasPlayedAndIsLatestMessage:](self, "setAudioMessageWasPlayedAndIsLatestMessage:", 1);
      -[CKCoreChatController conversation](self, "conversation");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "chat");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "prefersTextResponseToIncomingAudioMessages");

      if ((v11 & 1) == 0)
      {
        -[CKCoreChatController inputController](self, "inputController");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "presentPluginWithBundleID:appLaunchPayload:", *MEMORY[0x1E0D37570], 0);

      }
    }

  }
}

- (void)transcriptCollectionViewControllerPerformBatchUpdateCompleted:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  objc_super v12;

  v12.receiver = self;
  v12.super_class = (Class)CKChatController;
  -[CKCoreChatController transcriptCollectionViewControllerPerformBatchUpdateCompleted:](&v12, sel_transcriptCollectionViewControllerPerformBatchUpdateCompleted_, a3);
  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "collectionView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setNeedsLayout");

    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "collectionView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "layoutIfNeeded");

    -[CKChatController inlineReplyController](self, "inlineReplyController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "transitionContext");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKChatController _visibleChatItemsToScreenFrameMap](self, "_visibleChatItemsToScreenFrameMap");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setVisibleChatItemToFrameMap:", v11);

  }
}

- (void)transcriptCollectionViewController:(id)a3 willBeginImpactEffectAnimationWithSendAnimationContext:(id)a4
{
  void *v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  void *v17;
  void *v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  void *v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  id v37;
  CGRect v38;
  CGRect v39;

  v37 = a4;
  if (objc_msgSend(v37, "isSender"))
    -[CKChatController dismissEffectPickerAnimated:](self, "dismissEffectPickerAnimated:", 1);
  objc_msgSend(v37, "impactIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = +[CKImpactEffectManager identifierShouldPlayInWindow:](CKImpactEffectManager, "identifierShouldPlayInWindow:", v5);

  if (v6)
  {
    -[CKChatController currentNavigationBarBasedOnSizeClass](self, "currentNavigationBarBasedOnSizeClass");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "superview");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "frame");
    objc_msgSend(v8, "convertRect:toView:", 0);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v16 = v15;

    objc_msgSend(v37, "throwBalloonViews");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "firstObject");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v18, "superview");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "frame");
    objc_msgSend(v19, "convertRect:toView:", 0);
    v21 = v20;
    v23 = v22;
    v25 = v24;
    v27 = v26;

    -[CKChatController collectionView](self, "collectionView");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "convertRect:toView:", 0, v21, v23, v25, v27);
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v36 = v35;

    v38.origin.x = v10;
    v38.origin.y = v12;
    v38.size.width = v14;
    v38.size.height = v16;
    v39.origin.x = v30;
    v39.origin.y = v32;
    v39.size.width = v34;
    v39.size.height = v36;
    if (CGRectIntersectsRect(v38, v39))
      objc_msgSend(v7, "setAlpha:", 0.0);

  }
}

- (void)transcriptCollectionViewController:(id)a3 didEndImpactEffectAnimationWithSendAnimationContext:(id)a4
{
  void *v4;
  double v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  -[CKChatController currentNavigationBarBasedOnSizeClass](self, "currentNavigationBarBasedOnSizeClass", a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "alpha");
  if (v5 != 1.0)
  {
    v6 = (void *)MEMORY[0x1E0CEABB0];
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __107__CKChatController_transcriptCollectionViewController_didEndImpactEffectAnimationWithSendAnimationContext___block_invoke;
    v7[3] = &unk_1E274A208;
    v8 = v4;
    objc_msgSend(v6, "animateWithDuration:animations:", v7, 0.25);

  }
}

uint64_t __107__CKChatController_transcriptCollectionViewController_didEndImpactEffectAnimationWithSendAnimationContext___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

- (void)transcriptCollectionViewController:(id)a3 balloonView:(id)a4 didRequestPresentationStyle:(unint64_t)a5 forChatItem:(id)a6 allowAllStyles:(BOOL)a7
{
  id v10;
  id v11;
  uint64_t v12;
  CKTranscriptPluginPresentationConfiguration *v13;
  void *v14;
  id v15;

  v15 = a4;
  v10 = a6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v11 = v10;
    if (CKIsRunningInMacCatalyst())
    {
      if (objc_msgSend(v11, "balloonOrientation") == 1)
        v12 = 8;
      else
        v12 = 4;
      v13 = -[CKTranscriptPluginPresentationConfiguration initWithSourceView:permittedArrowDirections:shouldDisableSnapshotView:]([CKTranscriptPluginPresentationConfiguration alloc], "initWithSourceView:permittedArrowDirections:shouldDisableSnapshotView:", v15, v12, 1);
      -[CKCoreChatController inputController](self, "inputController");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "presentViewControllerWithPluginChatItem:presentationStyle:presentationConfiguration:", v11, a5, v13);

    }
    else
    {
      -[CKCoreChatController inputController](self, "inputController");
      v13 = (CKTranscriptPluginPresentationConfiguration *)objc_claimAutoreleasedReturnValue();
      -[CKTranscriptPluginPresentationConfiguration presentViewControllerWithPluginChatItem:presentationStyle:](v13, "presentViewControllerWithPluginChatItem:presentationStyle:", v11, a5);
    }

  }
}

- (BOOL)transcriptCollectionViewController:(id)a3 balloonViewDidRequestCommitPayload:(id)a4 forPlugin:(id)a5 allowAllCommits:(BOOL)a6 error:(id *)a7
{
  _BOOL4 v8;
  id v12;
  id v13;
  id v14;
  int v15;
  int v16;
  void *v17;
  char v18;
  void *v19;
  uint64_t v20;

  v8 = a6;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = objc_msgSend(v12, "isVisiblePlugin:", v14);
  v16 = objc_msgSend(v12, "hasRecentTouchForSendingPlugin:", v14);
  if (!objc_msgSend(v14, "length") || !v15)
  {
    if (a7)
    {
      v19 = (void *)MEMORY[0x1E0CB35C8];
      v20 = 2;
LABEL_9:
      objc_msgSend(v19, "errorWithDomain:code:userInfo:", CFSTR("CKBrowserErrorDomain"), v20, 0);
      v18 = 0;
      *a7 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_11;
    }
LABEL_10:
    v18 = 0;
    goto LABEL_11;
  }
  if ((v8 | v16) != 1)
  {
    if (a7)
    {
      v19 = (void *)MEMORY[0x1E0CB35C8];
      v20 = 1;
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  objc_msgSend(v12, "clearRecentPluginTouch");
  -[CKCoreChatController inputController](self, "inputController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "commitPayloadBypassingValidation:forPlugin:", v13, v14);

LABEL_11:
  return v18;
}

- (void)transcriptCollectionViewController:(id)a3 balloonViewDidRequestStartEditingPayload:(id)a4 forPlugin:(id)a5 allowAllCommits:(BOOL)a6 completionHandler:(id)a7
{
  _BOOL4 v8;
  id v12;
  void (**v13)(id, void *);
  id v14;
  int v15;
  int v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;

  v8 = a6;
  v20 = a4;
  v12 = a5;
  v13 = (void (**)(id, void *))a7;
  v14 = a3;
  v15 = objc_msgSend(v14, "isVisiblePlugin:", v12);
  v16 = objc_msgSend(v14, "hasRecentTouchForSendingPlugin:", v12);

  if (objc_msgSend(v12, "length") && v15)
  {
    if ((v8 | v16) == 1)
    {
      -[CKCoreChatController inputController](self, "inputController");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "startEditingPayloadBypassingValidation:forPlugin:completion:", v20, v12, v13);
LABEL_10:

      goto LABEL_11;
    }
    if (v13)
    {
      v18 = (void *)MEMORY[0x1E0CB35C8];
      v19 = 1;
      goto LABEL_9;
    }
  }
  else if (v13)
  {
    v18 = (void *)MEMORY[0x1E0CB35C8];
    v19 = -1;
LABEL_9:
    objc_msgSend(v18, "errorWithDomain:code:userInfo:", CFSTR("CKBrowserErrorDomain"), v19, 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v13[2](v13, v17);
    goto LABEL_10;
  }
LABEL_11:

}

- (void)chatInputController:(id)a3 didRequestAppendToCompositionForPayload:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v5 = a4;
  -[CKChatController entryView](self, "entryView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "composition");
  v10 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "mediaObjectFromPayload");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "compositionByAppendingMediaObject:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v8, "hasContent"))
  {
    -[CKChatController entryView](self, "entryView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setComposition:", v8);

    -[CKChatController _updateEntryViewFrameIfNeeded:](self, "_updateEntryViewFrameIfNeeded:", 1);
  }

}

- (BOOL)transcriptCollectionViewController:(id)a3 balloonViewDidRequestCommitSticker:(id)a4 forPlugin:(id)a5 allowAllCommits:(BOOL)a6 error:(id *)a7
{
  _BOOL4 v8;
  id v12;
  id v13;
  id v14;
  int v15;
  int v16;
  void *v17;
  void *v18;
  uint64_t v19;

  v8 = a6;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = objc_msgSend(v12, "isVisiblePlugin:", v14);
  v16 = objc_msgSend(v12, "hasRecentTouchForSendingPlugin:", v14);
  if (!objc_msgSend(v14, "length") || !v15)
  {
    if (!a7)
      goto LABEL_10;
    v18 = (void *)MEMORY[0x1E0CB35C8];
    v19 = 2;
LABEL_9:
    objc_msgSend(v18, "errorWithDomain:code:userInfo:", CFSTR("CKBrowserErrorDomain"), v19, 0);
    *a7 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_10;
  }
  if ((v8 | v16) != 1)
  {
    if (!a7)
      goto LABEL_10;
    v18 = (void *)MEMORY[0x1E0CB35C8];
    v19 = 1;
    goto LABEL_9;
  }
  objc_msgSend(v12, "clearRecentPluginTouch");
  -[CKCoreChatController inputController](self, "inputController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "commitStickerBypassingValidation:forPlugin:stickerFrame:", v13, v14, *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));

LABEL_10:
  return 1;
}

- (void)transcriptCollectionViewControllerDisplaySMSSpamReporting:(id)a3
{
  void *v4;
  id v5;

  -[CKCoreChatController chat](self, "chat", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "allMessagesToReportAsSpam");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  -[CKChatController showSMSReportSpamExtensionControllerForMessages:](self, "showSMSReportSpamExtensionControllerForMessages:", v5);
}

- (void)transcriptCollectionViewController:(id)a3 willDisplayBalloonForGUID:(id)a4 withIndexPath:(id)a5 withOriginY:(double)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  int v15;
  NSObject *v16;
  uint8_t v17[16];

  v10 = a3;
  v11 = a4;
  v12 = a5;
  -[CKChatController firstUnreadMessageGUID](self, "firstUnreadMessageGUID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    if (!-[CKChatController didDisplayFirstUnreadMessage](self, "didDisplayFirstUnreadMessage"))
    {
      -[CKChatController firstUnreadMessageGUID](self, "firstUnreadMessageGUID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v11, "isEqualToString:", v14);

      if (v15)
      {
        -[CKChatController setDidDisplayFirstUnreadMessage:](self, "setDidDisplayFirstUnreadMessage:", 1);
        -[CKChatController setFirstUnreadMessageCellOriginY:](self, "setFirstUnreadMessageCellOriginY:", a6);
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v17 = 0;
            _os_log_impl(&dword_18DFCD000, v16, OS_LOG_TYPE_INFO, "First unread message has been displayed by collection view.", v17, 2u);
          }

        }
      }
    }
  }

}

- (void)transcriptCollectionViewController:(id)a3 didScroll:(CGPoint)a4
{
  double y;
  double x;
  void *v7;
  void *v8;
  id v9;

  y = a4.y;
  x = a4.x;
  v9 = a3;
  if (-[CKChatController didDisplayFirstUnreadMessage](self, "didDisplayFirstUnreadMessage"))
  {
    -[CKChatController catchUpButton](self, "catchUpButton");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      if (-[CKChatController _isFirstUnreadMessageVisibleForContentOffset:](self, "_isFirstUnreadMessageVisibleForContentOffset:", x, y))
      {
        -[CKChatController _hideCatchUpButtonIfNeededAndRemoveOnCompletion:](self, "_hideCatchUpButtonIfNeededAndRemoveOnCompletion:", 1);
        -[CKChatController indexPathForFirstUnreadMessage](self, "indexPathForFirstUnreadMessage");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "highlightItemAtIndexPathWhenDisplayed:autoDismiss:", v8, 1);

      }
    }
  }

}

- (BOOL)_isFirstUnreadMessageVisibleForContentOffset:(CGPoint)a3
{
  double y;
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  double v10;

  y = a3.y;
  -[CKChatController _currentlyVisibleBannerHeight](self, "_currentlyVisibleBannerHeight", a3.x);
  v6 = v5;
  -[CKChatController collectionView](self, "collectionView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "adjustedContentInset");
  v9 = v8;

  if (v9 >= v6)
    v6 = v9;
  -[CKChatController firstUnreadMessageCellOriginY](self, "firstUnreadMessageCellOriginY");
  return y <= v10 - v6;
}

- (void)transcriptCollectionViewControllerWillDisplayLastBalloon:(id)a3
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)CKChatController;
  -[CKCoreChatController transcriptCollectionViewControllerWillDisplayLastBalloon:](&v3, sel_transcriptCollectionViewControllerWillDisplayLastBalloon_, a3);
}

- (double)transcriptCollectionViewController:(id)a3 targetAlphaForChatItem:(id)a4
{
  id v5;
  double v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  char v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char v15;

  v5 = a4;
  v6 = -1.0;
  if ((objc_msgSend(v5, "itemIsReplyContextPreview") & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isDashedBalloonsEnabled");

    if ((v8 & 1) == 0)
    {
      objc_msgSend(v5, "IMChatItem");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v5, "IMChatItem");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "isPendingSatelliteSend");

        v6 = 0.5;
        if ((v11 & 1) != 0)
          goto LABEL_11;
      }
      else
      {

      }
    }
    objc_opt_class();
    v6 = 0.5;
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      -[CKChatController inlineReplyController](self, "inlineReplyController");
      v12 = objc_claimAutoreleasedReturnValue();
      if (!v12)
        goto LABEL_10;
      v13 = (void *)v12;
      -[CKChatController inlineReplyController](self, "inlineReplyController");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "animatingOut");

      if ((v15 & 1) != 0)
        goto LABEL_10;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v5, "color") == 1
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && (objc_msgSend(v5, "latestIsFromMe") & 1) != 0)
      {
        v6 = 0.699999988;
        goto LABEL_11;
      }
      objc_opt_class();
      v6 = 0.400000006;
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
LABEL_10:
            v6 = 1.0;
        }
      }
    }
  }
LABEL_11:

  return v6;
}

- (void)transcriptCollectionViewController:(id)a3 sendQuickReplyComposition:(id)a4 withSourceView:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  void *v30;
  void *v31;
  NSObject *v32;
  id v33;
  id v34;
  _QWORD v35[5];
  id v36;
  id v37;
  uint8_t buf[16];

  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(v8, "collectionView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "beginHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerSendAnimation"));

  objc_msgSend(v10, "bounds");
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  -[CKChatController view](self, "view");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "convertRect:toView:", v20, v13, v15, v17, v19);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v27;

  -[CKChatController makeThrowAnimationManager](self, "makeThrowAnimationManager");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "setSourceRect:", v22, v24, v26, v28);
  -[CKChatController view](self, "view");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "quickReplySnapshotInView:", v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  if (v31)
  {
    objc_msgSend(v29, "setQuickReplySnapshot:", v31);
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v32, OS_LOG_TYPE_INFO, "CKChatController : Throw Animation Manager: No snapshot generated. Attempting graceful failure by continuing send.", buf, 2u);
    }

  }
  -[CKChatController setThrowAnimationManager:](self, "setThrowAnimationManager:", v29);
  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 3221225472;
  v35[2] = __96__CKChatController_transcriptCollectionViewController_sendQuickReplyComposition_withSourceView___block_invoke;
  v35[3] = &unk_1E274A0B8;
  v35[4] = self;
  v36 = v9;
  v37 = v29;
  v33 = v29;
  v34 = v9;
  -[CKChatController sendComposition:animations:](self, "sendComposition:animations:", v34, v35);

}

void __96__CKChatController_transcriptCollectionViewController_sendQuickReplyComposition_withSourceView___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  id v7;
  _QWORD v8[5];
  id v9;
  id v10;
  id v11;

  objc_msgSend(*(id *)(a1 + 32), "conversation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messagesFromComposition:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateAnimationGroup");
  v5 = objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __96__CKChatController_transcriptCollectionViewController_sendQuickReplyComposition_withSourceView___block_invoke_2;
  v8[3] = &unk_1E274B060;
  v6 = *(void **)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v6;
  v10 = *(id *)(a1 + 48);
  v11 = v3;
  v7 = v3;
  dispatch_group_notify(v5, MEMORY[0x1E0C80D38], v8);

}

uint64_t __96__CKChatController_transcriptCollectionViewController_sendQuickReplyComposition_withSourceView___block_invoke_2(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "flagSensitiveMediaObjects:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 48), "animateQuickReplyMessages:", *(_QWORD *)(a1 + 56));
}

- (void)transcriptCollectionViewController:(id)a3 selectedChipAction:(id)a4
{
  id v5;
  id v6;

  v5 = a4;
  -[CKChatController suggestedActionsHandler](self, "suggestedActionsHandler");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "performChipAction:", v5);

}

- (void)transcriptCollectionViewController:(id)a3 selectedSuggestedReply:(id)a4 messageGUID:(id)a5
{
  -[CKChatController sendSelectedSuggestedReply:messageGUID:](self, "sendSelectedSuggestedReply:messageGUID:", a4, a5);
}

- (void)transcriptCollectionViewControllerWillUpdateTranscriptChatItems:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  objc_super v9;

  v9.receiver = self;
  v9.super_class = (Class)CKChatController;
  -[CKCoreChatController transcriptCollectionViewControllerWillUpdateTranscriptChatItems:](&v9, sel_transcriptCollectionViewControllerWillUpdateTranscriptChatItems_, a3);
  -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "displayConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "type");

  if (v6 == 2)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "collectionView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "beginHoldingContentOffsetUpdatesForReason:", CFSTR("TranscriptUpdatingForAddSticker"));

  }
}

- (void)transcriptCollectionViewControllerDidUpdateTranscriptChatItems:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  objc_super v10;

  v10.receiver = self;
  v10.super_class = (Class)CKChatController;
  -[CKCoreChatController transcriptCollectionViewControllerDidUpdateTranscriptChatItems:](&v10, sel_transcriptCollectionViewControllerDidUpdateTranscriptChatItems_, a3);
  if (-[CKViewController deferredAppeared](self, "deferredAppeared"))
    -[CKChatController _showOrHideNicknameBannerIfNeeded](self, "_showOrHideNicknameBannerIfNeeded");
  -[CKChatController updateRaiseGesture](self, "updateRaiseGesture");
  -[CKChatController _updatePhotoGridIfNeeded](self, "_updatePhotoGridIfNeeded");
  -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "displayConfiguration");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "type");

  if (v6 == 2)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "collectionView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "endHoldingContentOffsetUpdatesForReason:", CFSTR("TranscriptUpdatingForAddSticker"));

    -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "updateStickersAnimated:", 0);

  }
}

- (void)prepareInputForPreviewPresentation
{
  void *v3;
  char v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  objc_super v10;

  -[CKCoreChatController inputController](self, "inputController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isInputViewVisible");

  if ((v4 & 1) != 0)
  {
    -[CKChatController entryView](self, "entryView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "contentView");
    v6 = objc_claimAutoreleasedReturnValue();
    -[CKChatController setEntryViewWasActiveOnPreview:](self, "setEntryViewWasActiveOnPreview:", objc_msgSend((id)v6, "isActive"));

    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v6) = objc_msgSend(v7, "isEntryViewInputAccessory");

    if ((v6 & 1) == 0)
    {
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "collectionView");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "beginHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerPreviewPresentation"));

    }
    v10.receiver = self;
    v10.super_class = (Class)CKChatController;
    -[CKChatController becomeFirstResponder](&v10, sel_becomeFirstResponder);
  }
  else
  {
    -[CKChatController setWasKeyboardShowingWithApp:](self, "setWasKeyboardShowingWithApp:", 0);
  }
}

- (void)restoreInputAfterPreviewPresentation
{
  uint64_t v3;
  void *v4;
  id v5;

  if (-[CKChatController wasKeyboardShowingWithApp](self, "wasKeyboardShowingWithApp"))
  {
    if (-[CKChatController entryViewWasActiveOnPreview](self, "entryViewWasActiveOnPreview"))
    {
      -[CKChatController setEntryViewWasActiveOnPreview:](self, "setEntryViewWasActiveOnPreview:", 0);
      v3 = 1;
    }
    else
    {
      v3 = 0;
    }
    -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", v3);
  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "collectionView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "endHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerPreviewPresentation"));

}

- (void)restoreInputAfterSearchPresentation
{
  if (CKIsRunningInMacCatalyst()
    && !-[CKChatController targetFirstResponder](self, "targetFirstResponder"))
  {
    -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 1);
  }
  -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
}

- (void)setupScrollingForKeyboardInteraction
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  id v7;

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "collectionView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "contentSize");
  v6 = v5;

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setScrollAnchor:", v6);

}

- (UIEdgeInsets)_avoidanceInsets
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  objc_super v20;
  UIEdgeInsets result;

  v20.receiver = self;
  v20.super_class = (Class)CKChatController;
  -[CKChatController _avoidanceInsets](&v20, sel__avoidanceInsets);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  -[CKChatController entryView](self, "entryView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    objc_msgSend(v11, "contentView");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "isActive");

    if ((v14 & 1) == 0)
    {
      objc_msgSend(v12, "frame");
      v8 = v8 + v15;
    }
  }

  v16 = v4;
  v17 = v6;
  v18 = v8;
  v19 = v10;
  result.right = v19;
  result.bottom = v18;
  result.left = v17;
  result.top = v16;
  return result;
}

- (void)_presentSentWithSiriUI
{
  CKSentWithSiriViewController *v3;
  void *v4;
  void *v5;
  void *v6;
  CKFullscreenBrowserNavigationController *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  CKSentWithSiriViewController *v13;

  v3 = [CKSentWithSiriViewController alloc];
  -[CKCoreChatController conversation](self, "conversation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[CKSentWithSiriViewController initWithConversation:](v3, "initWithConversation:", v4);

  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA380]), "initWithBarButtonSystemItem:target:action:", 0, self, sel__dismissSentWithSiriUI);
  -[CKSentWithSiriViewController navigationItem](v13, "navigationItem");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setRightBarButtonItem:", v5);

  v7 = -[CKFullscreenBrowserNavigationController initWithRootViewController:]([CKFullscreenBrowserNavigationController alloc], "initWithRootViewController:", v13);
  -[CKFullscreenBrowserNavigationController navigationBar](v7, "navigationBar");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setTranslucent:", 0);
  objc_msgSend(v8, "_setShadowAlpha:", 0.0);
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "theme");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "transcriptBackgroundColor");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "_setBackgroundColor:", v11);

  +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "presentViewController:fromViewController:presentationHandler:dismissalHandler:animated:completion:", v7, self, 0, 0, 1, 0);

}

- (void)_dismissSentWithSiriUI
{
  id v2;

  +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, 0);

}

- (void)_presentBrowserForPlugin:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[CKCoreChatController inputController](self, "inputController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "launchAndShowBrowserForPlugin:dataSource:style:", v4, 0, 0);

}

- (void)_presentBrowserOrAppStoreForAdamID:(id)a3 url:(id)a4 identifier:(id)a5
{
  -[CKChatController _presentBrowserOrAppStoreForAdamID:url:identifier:isForSticker:](self, "_presentBrowserOrAppStoreForAdamID:url:identifier:isForSticker:", a3, a4, a5, 0);
}

- (void)_presentBrowserOrAppStoreForAdamID:(id)a3 url:(id)a4 identifier:(id)a5 isForSticker:(BOOL)a6
{
  _BOOL4 v6;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  int v28;
  id v29;
  __int16 v30;
  id v31;
  uint64_t v32;

  v6 = a6;
  v32 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = v12;
  if (v10)
  {
    +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "pluginForAdamID:", v10);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      if (v6)
      {
        +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "pluginForIdentifier:", CFSTR("com.apple.messages.MSMessageExtensionBalloonPlugin:0000000000:com.apple.Stickers.UserGenerated.MessagesExtension"));
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if (v17)
          v18 = v17;
        else
          v18 = v15;
        v19 = v18;

        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            v28 = 138412290;
            v29 = v19;
            _os_log_impl(&dword_18DFCD000, v20, OS_LOG_TYPE_INFO, "We have a plugin: %@, we'll launch the stickers ultra extension instead of launching that plugin directly.", (uint8_t *)&v28, 0xCu);
          }

        }
      }
      else
      {
        v19 = v15;
      }
      -[CKChatController _presentBrowserForPlugin:](self, "_presentBrowserForPlugin:", v19);
    }
    else
    {
      -[CKCoreChatController inputController](self, "inputController");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "presentAppStoreForAdamID:", v10);

      objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "trackEvent:", *MEMORY[0x1E0D38488]);

      v19 = 0;
    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        v28 = 138412546;
        v29 = v10;
        v30 = 2112;
        v31 = v19;
        _os_log_impl(&dword_18DFCD000, v25, OS_LOG_TYPE_INFO, "presenting browser or app store for ID: %@, plugin: %@", (uint8_t *)&v28, 0x16u);
      }

    }
  }
  else if (v11)
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v11);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21)
      objc_msgSend((id)*MEMORY[0x1E0CEB258], "openURL:withCompletionHandler:", v21, 0);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        v28 = 138412290;
        v29 = v11;
        _os_log_impl(&dword_18DFCD000, v22, OS_LOG_TYPE_INFO, "presenting browser or app store for URL: %@", (uint8_t *)&v28, 0xCu);
      }

    }
  }
  else if (v12)
  {
    +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "pluginForIdentifier:", v13);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    if (v27)
      -[CKChatController _presentBrowserForPlugin:](self, "_presentBrowserForPlugin:", v27);

  }
}

- (void)presentAppStoreForURL:(id)a3 fromSourceApplication:(id)a4
{
  id v6;
  id v7;
  id v8;

  v6 = a4;
  v7 = a3;
  -[CKCoreChatController inputController](self, "inputController");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "presentAppStoreForURL:fromSourceApplication:", v7, v6);

}

- (void)_updateForNewPreferredService
{
  void *v3;
  void *v4;
  void *v5;
  objc_super v6;

  v6.receiver = self;
  v6.super_class = (Class)CKChatController;
  -[CKCoreChatController _updateForNewPreferredService](&v6, sel__updateForNewPreferredService);
  -[CKChatController effectPickerViewController](self, "effectPickerViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "updateColor:", objc_msgSend(v4, "sendButtonColor"));

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v4) = objc_msgSend(v5, "isCarrierPigeonEnabled");

  if ((_DWORD)v4)
  {
    -[CKChatController _updateEntryViewPasteConfiguration](self, "_updateEntryViewPasteConfiguration");
    -[CKChatController refreshMacToolbar](self, "refreshMacToolbar");
  }
}

- (void)_willSendComposition:(id)a3 inConversation:(id)a4
{
  id v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  char isKindOfClass;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  objc_super v22;

  v6 = a3;
  v22.receiver = self;
  v22.super_class = (Class)CKChatController;
  -[CKCoreChatController _willSendComposition:inConversation:](&v22, sel__willSendComposition_inConversation_, v6, a4);
  objc_msgSend(v6, "shelfPluginPayload");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = objc_msgSend(v7, "shouldSendAsMediaObject");
  else
    v8 = 0;
  objc_msgSend(v7, "pluginBundleID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "length"))
  {
    objc_msgSend(v7, "pluginBundleID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v10, "rangeOfString:", *MEMORY[0x1E0D375D0]) == 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(v7, "pluginBundleID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "rangeOfString:", *MEMORY[0x1E0D375F8]);

      if (v12 == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (!v8)
          goto LABEL_19;
        goto LABEL_13;
      }
    }
    else
    {

    }
    if ((v8 & 1) == 0)
    {
      objc_msgSend(v6, "shelfPluginPayload");
      v13 = (id)objc_claimAutoreleasedReturnValue();
      -[CKChatController setExtensionPayloadBeingSent:](self, "setExtensionPayloadBeingSent:", v13);
LABEL_18:

      goto LABEL_19;
    }
LABEL_13:
    v13 = v7;
    objc_msgSend(v13, "mediaObject");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) != 0)
    {
      objc_msgSend(v13, "mediaObject");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "sticker");
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      if (v17)
      {
        objc_msgSend(v16, "sticker");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        +[CKChatController donateStickerToRecents:](CKChatController, "donateStickerToRecents:", v18);

      }
    }
    goto LABEL_18;
  }

  if (v8)
    goto LABEL_13;
LABEL_19:
  -[CKChatController entryView](self, "entryView");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "contentView");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "pluginEntryViewController");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v21, "payloadWillSend");

}

- (void)_didSendCompositionInConversation:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  objc_super v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v19.receiver = self;
  v19.super_class = (Class)CKChatController;
  -[CKCoreChatController _didSendCompositionInConversation:](&v19, sel__didSendCompositionInConversation_, v4);
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isExpressiveTextEnabled");

  if (v6)
  {
    -[CKChatController entryView](self, "entryView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "contentView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "textView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "hideTextEffectsPickerIfNeededAndResetTypingAttributes");
  }
  -[CKChatController extensionPayloadBeingSent](self, "extensionPayloadBeingSent");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v21 = v10;
      _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "_didSendCompositionInConversation: %@", buf, 0xCu);
    }

  }
  if (v10)
  {
    -[CKChatController setExtensionPayloadBeingSent:](self, "setExtensionPayloadBeingSent:", 0);
    +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "pluginBundleID");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "viewControllerForPluginIdentifier:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v4, "senderIdentifier");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setSender:", v15);

    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      -[CKCoreChatController conversation](self, "conversation");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "recipientStrings");
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v14, "setRecipients:", v17);
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v14, "didStartSendingPluginPayload:", v10);
    objc_msgSend(v14, "balloonPluginDataSource");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "payloadWillSendFromShelf");

  }
}

- (void)sendSelectedSuggestedReply:(id)a3 messageGUID:(id)a4
{
  id v6;
  _CKSuggestedReplyComposition *v7;
  void *v8;
  _CKSuggestedReplyComposition *v9;
  void *v10;
  id v11;

  v11 = a4;
  v6 = a3;
  v7 = [_CKSuggestedReplyComposition alloc];
  objc_msgSend(v6, "suggestedReplyBody");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = -[CKComposition initWithText:subject:](v7, "initWithText:subject:", v8, 0);
  if (v11)
  {
    -[CKCoreChatController chat](self, "chat");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "markRepliedForMessageGUID:", v11);

  }
  -[CKChatController sendCompositionIfAllowed:](self, "sendCompositionIfAllowed:", v9);

}

- (void)stageSelectedSuggestedReply:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  CKComposition *v12;
  void *v13;
  void *v14;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "suggestion");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "displayText");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  CKFrameworkBundle();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("SELECTED_OPTION"), &stru_1E276D870, CFSTR("ChatKit"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = CFSTR("suggestedReplyBody");
  objc_msgSend(v4, "suggestedReplyBody");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v16[0] = v9;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKSuggestedActionsHandler pluginPayloadForShelfCardWithTitle:summary:userInfo:](_TtC7ChatKit25CKSuggestedActionsHandler, "pluginPayloadForShelfCardWithTitle:summary:userInfo:", v6, v8, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = -[CKComposition initWithText:subject:shelfPluginPayload:]([CKComposition alloc], "initWithText:subject:shelfPluginPayload:", 0, 0, v11);
  -[CKChatController composition](self, "composition");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "compositionByAppendingComposition:", v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController setComposition:](self, "setComposition:", v14);

}

- (void)_showCatchUpButtonIfNeeded
{
  -[CKChatController _showCatchUpButtonIfNeededResumingFromBackground:](self, "_showCatchUpButtonIfNeededResumingFromBackground:", 0);
}

- (void)_showCatchUpButtonIfNeededResumingFromBackground:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  _TtC7ChatKit22CKCatchUpButtonManager *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  double v30;
  double v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  _QWORD aBlock[4];
  id v39;
  id location;

  v3 = a3;
  if (CKIsCatchUpEnabled())
  {
    if (-[CKChatController _wantsCatchUpAffordance](self, "_wantsCatchUpAffordance"))
    {
      -[CKChatController catchUpButton](self, "catchUpButton");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v5)
      {
        location = 0;
        objc_initWeak(&location, self);
        aBlock[1] = 3221225472;
        aBlock[2] = __69__CKChatController__showCatchUpButtonIfNeededResumingFromBackground___block_invoke;
        aBlock[3] = &unk_1E274B548;
        aBlock[0] = MEMORY[0x1E0C809B0];
        objc_copyWeak(&v39, &location);
        v6 = _Block_copy(aBlock);
        v7 = -[CKCatchUpButtonManager initWithDidTapButton:]([_TtC7ChatKit22CKCatchUpButtonManager alloc], "initWithDidTapButton:", v6);
        -[CKChatController setCatchUpButtonManager:](self, "setCatchUpButtonManager:", v7);
        v37 = v6;
        -[CKCatchUpButtonManager catchUpButtonHost](v7, "catchUpButtonHost");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "view");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController setCatchUpButton:](self, "setCatchUpButton:", v9);

        -[CKChatController addChildViewController:](self, "addChildViewController:", v8);
        -[CKChatController view](self, "view");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController catchUpButton](self, "catchUpButton");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "addSubview:", v11);

        objc_msgSend(v8, "didMoveToParentViewController:", self);
        -[CKChatController catchUpButton](self, "catchUpButton");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

        -[CKChatController catchUpButton](self, "catchUpButton");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "leadingAnchor");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController view](self, "view");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "leadingAnchor");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "constraintEqualToAnchor:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "setActive:", 1);

        -[CKChatController catchUpButton](self, "catchUpButton");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "trailingAnchor");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController view](self, "view");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "trailingAnchor");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "constraintEqualToAnchor:", v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "setActive:", 1);

        -[CKChatController catchUpButton](self, "catchUpButton");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "topAnchor");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController view](self, "view");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "safeAreaLayoutGuide");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "topAnchor");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "constraintEqualToAnchor:constant:", v27, 0.0);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController setCatchUpButtonTopConstraint:](self, "setCatchUpButtonTopConstraint:", v28);

        -[CKChatController catchUpButtonTopConstraint](self, "catchUpButtonTopConstraint");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "setActive:", 1);

        objc_destroyWeak(&v39);
        objc_destroyWeak(&location);
      }
      -[CKChatController _currentlyVisibleBannerHeight](self, "_currentlyVisibleBannerHeight");
      v31 = v30;
      -[CKChatController catchUpButtonTopConstraint](self, "catchUpButtonTopConstraint");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "setConstant:", v31);

      -[CKChatController catchUpButton](self, "catchUpButton");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "setNeedsUpdateConstraints");

      -[CKChatController view](self, "view");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController catchUpButton](self, "catchUpButton");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "bringSubviewToFront:", v35);

      -[CKChatController catchUpButtonManager](self, "catchUpButtonManager");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "animateInResumingFromBackground:", v3);

    }
    else
    {
      -[CKChatController _hideCatchUpButtonIfNeededAndRemoveOnCompletion:](self, "_hideCatchUpButtonIfNeededAndRemoveOnCompletion:", 1);
    }
  }
}

void __69__CKChatController__showCatchUpButtonIfNeededResumingFromBackground___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_catchUpButtonTapped");

}

- (void)_hideCatchUpButtonIfNeededAndRemoveOnCompletion:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD aBlock[4];
  id v10;
  id location;

  v3 = a3;
  -[CKChatController catchUpButton](self, "catchUpButton");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    if (v3)
    {
      location = 0;
      objc_initWeak(&location, self);
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __68__CKChatController__hideCatchUpButtonIfNeededAndRemoveOnCompletion___block_invoke;
      aBlock[3] = &unk_1E274B548;
      objc_copyWeak(&v10, &location);
      v6 = _Block_copy(aBlock);
      -[CKChatController catchUpButtonManager](self, "catchUpButtonManager");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "animateOutWithCompletion:", v6);

      objc_destroyWeak(&v10);
      objc_destroyWeak(&location);
    }
    else
    {
      -[CKChatController catchUpButtonManager](self, "catchUpButtonManager");
      v8 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "animateOutWithCompletion:", 0);

    }
  }
  else
  {
    -[CKChatController setIndexPathForFirstUnreadMessage:](self, "setIndexPathForFirstUnreadMessage:", 0);
    -[CKChatController setFirstUnreadMessageGUID:](self, "setFirstUnreadMessageGUID:", 0);
  }
}

void __68__CKChatController__hideCatchUpButtonIfNeededAndRemoveOnCompletion___block_invoke(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "catchUpButtonManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "catchUpButtonHost");
  v10 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "willMoveToParentViewController:", 0);
  objc_msgSend(v10, "view");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeFromSuperview");

  objc_msgSend(v10, "removeFromParentViewController");
  v5 = objc_loadWeakRetained(v1);
  objc_msgSend(v5, "setCatchUpButton:", 0);

  v6 = objc_loadWeakRetained(v1);
  objc_msgSend(v6, "setCatchUpButtonManager:", 0);

  v7 = objc_loadWeakRetained(v1);
  objc_msgSend(v7, "setIsCatchUpButtonNeededOnFirstLoad:", 0);

  v8 = objc_loadWeakRetained(v1);
  objc_msgSend(v8, "setIndexPathForFirstUnreadMessage:", 0);

  v9 = objc_loadWeakRetained(v1);
  objc_msgSend(v9, "setFirstUnreadMessageGUID:", 0);

}

- (double)_currentlyVisibleBannerHeight
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  void *v13;
  double v14;
  double v15;

  -[CKChatController suggestionBannerView](self, "suggestionBannerView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[CKChatController suggestionBannerView](self, "suggestionBannerView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "frame");
    v6 = v5;

    v7 = fmax(v6, 0.0);
  }
  else
  {
    v7 = 0.0;
  }
  -[CKChatController nicknameBanner](self, "nicknameBanner");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    -[CKChatController nicknameBanner](self, "nicknameBanner");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "frame");
    v11 = v10;

    if (v7 < v11)
      v7 = v11;
  }
  -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "frame");
    v15 = v14;

    if (v7 < v15)
      return v15;
  }
  return v7;
}

- (void)handleContentSizeCategoryDidChangeNotification:(id)a3
{
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)CKChatController;
  -[CKCoreChatController handleContentSizeCategoryDidChangeNotification:](&v4, sel_handleContentSizeCategoryDidChangeNotification_, a3);
  -[CKChatController _showCatchUpButtonIfNeeded](self, "_showCatchUpButtonIfNeeded");
}

- (void)_catchUpButtonTapped
{
  void *v3;
  CKTranscriptHighlightedMessageScrollContext *v4;
  void *v5;
  CKTranscriptHighlightedMessageScrollContext *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  id v12;

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "collectionView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setTranscriptScrollIntent:", 2);
  v4 = [CKTranscriptHighlightedMessageScrollContext alloc];
  -[CKChatController firstUnreadMessageGUID](self, "firstUnreadMessageGUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[CKTranscriptHighlightedMessageScrollContext initWithMessageGUID:messagePartIndex:viewToAlignWith:allowOverScroll:scrollPosition:](v4, "initWithMessageGUID:messagePartIndex:viewToAlignWith:allowOverScroll:scrollPosition:", v5, 0x7FFFFFFFFFFFFFFFLL, 0, 0, 1);
  objc_msgSend(v3, "setHighlightedMessageScrollContext:", v6);

  objc_msgSend(v3, "beginDisablingTranscriptDynamicsForReason:", CFSTR("ScrollToMessage"));
  -[CKChatController contentOffsetForFirstUnreadMessage](self, "contentOffsetForFirstUnreadMessage");
  v8 = v7;
  v10 = v9;
  if (_catchUpDecelerationAnimation_onceToken != -1)
    dispatch_once(&_catchUpDecelerationAnimation_onceToken, &__block_literal_global_3327);
  objc_msgSend(v3, "_setContentOffset:animated:animationCurve:animationAdjustsForContentOffsetDelta:animation:", 1, 1, 0, _catchUpDecelerationAnimation_spring, v8, v10);
  objc_msgSend(v3, "endDisablingTranscriptDynamicsForReason:", CFSTR("ScrollToMessage"));
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "highlightItemAtIndexPathWhenDisplayed:autoDismiss:", self->_indexPathForFirstUnreadMessage, 1);

  -[CKChatController _hideCatchUpButtonIfNeededAndRemoveOnCompletion:](self, "_hideCatchUpButtonIfNeededAndRemoveOnCompletion:", 1);
}

- (void)_updateIndexPathForFirstUnreadMessage
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  NSObject *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (CKIsCatchUpEnabled())
  {
    -[CKChatController firstUnreadMessageGUID](self, "firstUnreadMessageGUID");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v3)
    {
      -[CKCoreChatController chat](self, "chat");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "firstUnreadMessageItem");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v5, "guid");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController setFirstUnreadMessageGUID:](self, "setFirstUnreadMessageGUID:", v6);

    }
    -[CKChatController firstUnreadMessageGUID](self, "firstUnreadMessageGUID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          v17 = 138412290;
          v18 = v7;
          _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Determined first unread message GUID %@", (uint8_t *)&v17, 0xCu);
        }

      }
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "chatItems");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "__ck_catchUpScrollTargetForMessageGUID:", v7);
      v13 = v12;

      if (v11 != 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForItem:inSection:", v13, 0);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForItem:inSection:", v11, 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if (v14)
        {
          -[CKCoreChatController contentOffsetForIndexPath:viewToAlignWith:allowOverScroll:scrollPosition:](self, "contentOffsetForIndexPath:viewToAlignWith:allowOverScroll:scrollPosition:", v14, 0, 0, 1);
          -[CKChatController setContentOffsetForFirstUnreadMessage:](self, "setContentOffsetForFirstUnreadMessage:");
        }
        if (v15)
          -[CKChatController setIndexPathForFirstUnreadMessage:](self, "setIndexPathForFirstUnreadMessage:", v15);
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            v17 = 138412546;
            v18 = v14;
            v19 = 2112;
            v20 = v15;
            _os_log_impl(&dword_18DFCD000, v16, OS_LOG_TYPE_INFO, "Determined index path for first unread message: scrollTarget(%@) and highlightTarget(%@)", (uint8_t *)&v17, 0x16u);
          }

        }
      }
    }

  }
}

- (void)_updateCatchUpButtonVisibilityResumingFromBackground:(BOOL)a3
{
  _BOOL4 v3;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  id v25;
  id v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  int v45;
  NSObject *v46;
  _BOOL4 v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  id obja;
  id obj;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint8_t buf[16];
  _BYTE v64[128];
  _BYTE v65[128];
  uint64_t v66;

  v3 = a3;
  v66 = *MEMORY[0x1E0C80C00];
  if (CKIsCatchUpEnabled()
    && !-[CKChatController didComputeInitiallyVisibleIndexPaths](self, "didComputeInitiallyVisibleIndexPaths"))
  {
    v47 = v3;
    -[CKChatController collectionView](self, "collectionView");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v52, "bounds");
    v6 = v5;
    v8 = v7;
    v10 = v9;
    obja = v11;
    objc_msgSend(v52, "adjustedContentInset");
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v19 = v18;
    -[CKChatController _currentlyVisibleBannerHeight](self, "_currentlyVisibleBannerHeight");
    v21 = v20;
    objc_msgSend(v52, "collectionViewLayout");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v50, "layoutAttributesForElementsInRect:", v6 + v15, v8 + v13 + v21, v10 - (v15 + v19), *(double *)&obja - (v17 + v13 + v21));
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController setDidComputeInitiallyVisibleIndexPaths:](self, "setDidComputeInitiallyVisibleIndexPaths:", 1);
    -[CKChatController _updateIndexPathForFirstUnreadMessage](self, "_updateIndexPathForFirstUnreadMessage");
    -[CKChatController indexPathForFirstUnreadMessage](self, "indexPathForFirstUnreadMessage");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    if (v51)
    {
      v22 = objc_msgSend(v52, "numberOfItemsInSection:", 0);
      if (objc_msgSend(v51, "item") <= v22)
      {
        -[CKChatController setIsCatchUpButtonNeededOnFirstLoad:](self, "setIsCatchUpButtonNeededOnFirstLoad:", 1);
        v25 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v59 = 0u;
        v60 = 0u;
        v61 = 0u;
        v62 = 0u;
        v26 = v49;
        v27 = 0;
        v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v59, v65, 16);
        if (v28)
        {
          v29 = *(_QWORD *)v60;
          do
          {
            for (i = 0; i != v28; ++i)
            {
              if (*(_QWORD *)v60 != v29)
                objc_enumerationMutation(v26);
              v31 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * i);
              objc_msgSend(v31, "indexPath");
              v32 = objc_claimAutoreleasedReturnValue();
              objc_msgSend(v25, "addObject:", v32);

              -[CKChatController indexPathForFirstUnreadMessage](self, "indexPathForFirstUnreadMessage");
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v31, "indexPath");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              LOBYTE(v32) = objc_msgSend(v33, "isEqual:", v34);

              v27 |= v32;
            }
            v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v59, v65, 16);
          }
          while (v28);
        }

        -[CKCoreChatController collectionViewController](self, "collectionViewController");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "chatItems");
        v48 = (void *)objc_claimAutoreleasedReturnValue();

        v36 = objc_msgSend(v25, "count");
        if (objc_msgSend(v48, "count") <= v36)
        {
          v37 = v48;
        }
        else
        {
          objc_msgSend(v48, "subarrayWithRange:", objc_msgSend(v48, "count") - v36, v36);
          v37 = (id)objc_claimAutoreleasedReturnValue();
        }
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        obj = v37;
        v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v64, 16);
        if (v38)
        {
          v39 = *(_QWORD *)v56;
          while (2)
          {
            for (j = 0; j != v38; ++j)
            {
              if (*(_QWORD *)v56 != v39)
                objc_enumerationMutation(obj);
              v41 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * j);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(v41, "message");
                v42 = (void *)objc_claimAutoreleasedReturnValue();
                if (objc_msgSend(v42, "isFromMe"))
                {
                  if (IMOSLoggingEnabled())
                  {
                    OSLogHandleForIMFoundationCategory();
                    v46 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl(&dword_18DFCD000, v46, OS_LOG_TYPE_INFO, "A message that I sent is visible on screen. Do not show catch up button.", buf, 2u);
                    }
LABEL_42:

                  }
LABEL_43:
                  -[CKChatController setIsCatchUpButtonNeededOnFirstLoad:](self, "setIsCatchUpButtonNeededOnFirstLoad:", 0);

                  goto LABEL_44;
                }
                if ((v27 & 1) != 0)
                {
                  objc_msgSend(v42, "guid");
                  v43 = (void *)objc_claimAutoreleasedReturnValue();
                  -[CKChatController firstUnreadMessageGUID](self, "firstUnreadMessageGUID");
                  v44 = (void *)objc_claimAutoreleasedReturnValue();
                  v45 = objc_msgSend(v43, "isEqualToString:", v44);

                  if (v45)
                  {
                    if (IMOSLoggingEnabled())
                    {
                      OSLogHandleForIMFoundationCategory();
                      v46 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl(&dword_18DFCD000, v46, OS_LOG_TYPE_INFO, "First unread message is visible on screen. Do not show catch up button.", buf, 2u);
                      }
                      goto LABEL_42;
                    }
                    goto LABEL_43;
                  }
                }

              }
            }
            v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v55, v64, 16);
            if (v38)
              continue;
            break;
          }
        }
LABEL_44:

        -[CKChatController _showCatchUpButtonIfNeededResumingFromBackground:](self, "_showCatchUpButtonIfNeededResumingFromBackground:", v47);
      }
      else
      {
        -[CKChatController setIsCatchUpButtonNeededOnFirstLoad:](self, "setIsCatchUpButtonNeededOnFirstLoad:", 0);
        IMLogHandleForCategory();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          -[CKChatController _updateCatchUpButtonVisibilityResumingFromBackground:].cold.1(v51, v22, v23);

      }
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
      }

    }
  }
}

- (BOOL)_wantsCatchUpAffordance
{
  int v3;
  void *v4;
  void *v5;

  v3 = CKIsCatchUpEnabled();
  if (v3)
  {
    -[CKChatController catchUpButton](self, "catchUpButton");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      LOBYTE(v3) = 1;
    }
    else
    {
      -[CKChatController indexPathForFirstUnreadMessage](self, "indexPathForFirstUnreadMessage");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      if (v5)
        LOBYTE(v3) = -[CKChatController isCatchUpButtonNeededOnFirstLoad](self, "isCatchUpButtonNeededOnFirstLoad");
      else
        LOBYTE(v3) = 0;
    }
  }
  return v3;
}

- (BOOL)isSafeToMarkAsRead
{
  void *v3;
  void *v4;
  unsigned __int8 v5;
  _BOOL4 v6;
  BOOL v7;
  objc_super v9;

  -[CKCoreChatController conversation](self, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "chat");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4 && !objc_msgSend(v4, "allowedByScreenTime"))
  {
    v7 = 0;
  }
  else
  {
    v9.receiver = self;
    v9.super_class = (Class)CKChatController;
    v5 = -[CKCoreChatController isSafeToMarkAsRead](&v9, sel_isSafeToMarkAsRead);
    if (+[CKStarkManager isCarPlayConnected](CKStarkManager, "isCarPlayConnected"))
      v6 = !CKIsScreenLocked();
    else
      LOBYTE(v6) = 1;
    v7 = v5 & v6;
  }

  return v7;
}

- (void)_markAsReadIfNecessary
{
  void *v3;
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)CKChatController;
  -[CKCoreChatController _markAsReadIfNecessary](&v4, sel__markAsReadIfNecessary);
  if (-[CKChatController isSafeToMarkAsRead](self, "isSafeToMarkAsRead"))
  {
    if (!-[CKChatController _shouldShowReadRecieptAlert](self, "_shouldShowReadRecieptAlert"))
    {
      if (CKIsRunningUnitTests())
        -[CKChatController _askToTurnOnSMSRelayIfNeeded](self, "_askToTurnOnSMSRelayIfNeeded");
      else
        -[CKChatController performSelector:withObject:afterDelay:](self, "performSelector:withObject:afterDelay:", sel__askToTurnOnSMSRelayIfNeeded, 0, 2.0);
    }
    -[CKChatController catchUpButton](self, "catchUpButton");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
      -[CKChatController _updateIndexPathForFirstUnreadMessage](self, "_updateIndexPathForFirstUnreadMessage");
    -[CKChatController _askToTurnOnReadReceiptsIfNeeded](self, "_askToTurnOnReadReceiptsIfNeeded");
  }
}

- (void)_markVisibleMentionsAsRead
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "chatItems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v5, "count"))
  {
    -[CKChatController collectionView](self, "collectionView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "indexPathsForVisibleItems");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v8 = v7;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v29;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v29 != v11)
            objc_enumerationMutation(v8);
          v13 = objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * v12), "item");
          if (v13 < objc_msgSend(v5, "count"))
          {
            objc_msgSend(v5, "objectAtIndex:", v13);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend(v14, "message");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v15, "hasMention"))
                objc_msgSend(v3, "addObject:", v15);

            }
          }
          ++v12;
        }
        while (v10 != v12);
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
      }
      while (v10);
    }

  }
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v16 = v3;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v25;
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v25 != v19)
          objc_enumerationMutation(v16);
        v21 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * v20);
        -[CKCoreChatController chat](self, "chat", (_QWORD)v24);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "guid");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "removeMentionMessageGUID:", v23);

        ++v20;
      }
      while (v18 != v20);
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    }
    while (v18);
  }

}

- (void)_retryGroupPhotoUploadIfNecessary
{
  id v2;

  -[CKCoreChatController chat](self, "chat");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "retryGroupPhotoUploadIfNecessary");

}

- (BOOL)_shouldShowReadRecieptAlert
{
  void *v2;
  void *v3;
  void *v4;
  _BOOL4 v5;
  _BOOL4 v6;
  void *v7;
  int v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  int v16;
  NSObject *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  -[CKCoreChatController conversation](self, "conversation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "chat");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "lastIncomingMessage");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = CKReadReceiptSettingsConfirmed();
  v6 = CKReadReceiptsEnabled();
  objc_msgSend(v4, "__ck_service");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "supportsCapability:", *MEMORY[0x1E0D38E70]);

  v9 = objc_msgSend(v4, "isRead");
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  objc_msgSend(MEMORY[0x1E0D35738], "sharedInstance", 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "__ck_service");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "accountsForService:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v33, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v20 != v14)
          objc_enumerationMutation(v12);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * i), "_isUsableForSending") & 1) != 0)
        {
          LODWORD(v13) = 1;
          goto LABEL_11;
        }
      }
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v19, v33, 16);
      if (v13)
        continue;
      break;
    }
  }
LABEL_11:

  v16 = v9 ^ 1;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67110144;
      v24 = v13;
      v25 = 1024;
      v26 = !v5;
      v27 = 1024;
      v28 = !v6;
      v29 = 1024;
      v30 = v8;
      v31 = 1024;
      v32 = v16;
      _os_log_impl(&dword_18DFCD000, v17, OS_LOG_TYPE_INFO, "lastMessageServiceIsActive: %{BOOL}d, readReceiptSettingsNotConfirmed: %{BOOL}d, readReceiptSettingsNotEnabled: %{BOOL}d, lastSupportsReadReceipts: %{BOOL}d, lastMessageNotRead: %{BOOL}d", buf, 0x20u);
    }

  }
  return v8 & ~(v5 | ~(_BYTE)v13 | v6) & v16;
}

- (void)_askToTurnOnReadReceiptsIfNeeded
{
  if (-[CKChatController _shouldShowReadRecieptAlert](self, "_shouldShowReadRecieptAlert"))
  {
    CKSetReadReceiptSettingsConfirmed(1);
    if (CKIsRunningUnitTests())
    {
      -[CKChatController _confirmReadReceiptSettings](self, "_confirmReadReceiptSettings");
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0DE7910], "cancelPreviousPerformRequestsWithTarget:selector:object:", self, sel__confirmReadReceiptSettings, 0);
      -[CKChatController performSelector:withObject:afterDelay:](self, "performSelector:withObject:afterDelay:", sel__confirmReadReceiptSettings, 0, 2.0);
    }
  }
}

- (void)_confirmReadReceiptSettings
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  id v22;
  _QWORD aBlock[5];

  CKFrameworkBundle();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("READ_RECEIPTS_SETTINGS_CONFIRM_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  CKFrameworkBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("READ_RECEIPTS_SETTINGS_CONFIRM_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKAlertController alertControllerWithTitle:message:preferredStyle:](CKAlertController, "alertControllerWithTitle:message:preferredStyle:", v4, v6, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __47__CKChatController__confirmReadReceiptSettings__block_invoke;
  aBlock[3] = &unk_1E274A208;
  aBlock[4] = self;
  v9 = _Block_copy(aBlock);
  CKFrameworkBundle();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("NOT_NOW"), &stru_1E276D870, CFSTR("ChatKit"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v21[0] = v8;
  v21[1] = 3221225472;
  v21[2] = __47__CKChatController__confirmReadReceiptSettings__block_invoke_2;
  v21[3] = &unk_1E274B330;
  v12 = v9;
  v22 = v12;
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v11, 1, v21);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addAction:", v13);

  CKFrameworkBundle();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("ALLOW"), &stru_1E276D870, CFSTR("ChatKit"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v8;
  v19[1] = 3221225472;
  v19[2] = __47__CKChatController__confirmReadReceiptSettings__block_invoke_3;
  v19[3] = &unk_1E274B330;
  v20 = v12;
  v16 = v12;
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v15, 0, v19);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addAction:", v17);

  objc_msgSend(v7, "presentFromViewController:animated:completion:", self, 1, 0);
}

void __47__CKChatController__confirmReadReceiptSettings__block_invoke(uint64_t a1)
{
  void *v2;
  char v3;

  objc_msgSend(*(id *)(a1 + 32), "_askToTurnOnReadReceiptsIfNeeded");
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "canPresentOverKeyboard");

  if ((v3 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "becomeFirstResponder");
}

uint64_t __47__CKChatController__confirmReadReceiptSettings__block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __47__CKChatController__confirmReadReceiptSettings__block_invoke_3(uint64_t a1)
{
  CKSetReadReceiptsEnabled(1);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (void)_askToTurnOnSMSRelayIfNeeded
{
  void *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  __CFString *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  char v37;
  _QWORD v38[4];
  id v39;
  CKChatController *v40;
  char v41;
  _QWORD v42[5];
  char v43;

  objc_msgSend(MEMORY[0x1E0D35918], "smsService");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  IMPreferredAccountForService();
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D20BF8], "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "supportsMMS");

  if ((CKSMSRelaySettingsConfirmed() & 1) == 0)
  {
    v7 = (void *)MEMORY[0x1E0D35918];
    -[CKCoreChatController conversation](self, "conversation");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "lastAddressedHandle");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKCoreChatController conversation](self, "conversation");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "lastAddressedSIMID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (((objc_msgSend(v7, "iMessageEnabledForSenderLastAddressedHandle:simID:", v9, v11) ^ 1 | v6) & 1) != 0
      || !objc_msgSend(v4, "isSMSRelayCapable"))
    {

    }
    else
    {
      v12 = objc_msgSend(v4, "allowsSMSRelay");

      if ((v12 & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0DE7910], "cancelPreviousPerformRequestsWithTarget:selector:object:", self, sel__askToTurnOnSMSRelayIfNeeded, 0);
        CKSetSMSRelaySettingsConfirmed(1);
        +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "canPresentOverKeyboard");

        v37 = v14;
        if (CKIsRunningInMacCatalyst())
        {
          CKFrameworkBundle();
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "localizedStringForKey:value:table:", CFSTR("SMS_RELAY_ALERT_TITLE_MAC"), &stru_1E276D870, CFSTR("ChatKit"));
          v16 = objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v17 = (void *)MEMORY[0x1E0CB3940];
          CKFrameworkBundle();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "localizedStringForKey:value:table:", CFSTR("SMS_RELAY_ALERT_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "localizedModel");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "stringWithFormat:", v19, v21);
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend(v22, "userInterfaceLayoutDirection");

          if (v23 == 1)
            v24 = CFSTR("\u200F");
          else
            v24 = CFSTR("\u200E");
          -[__CFString stringByAppendingString:](v24, "stringByAppendingString:", v15);
          v16 = objc_claimAutoreleasedReturnValue();
        }
        v25 = (void *)v16;

        CKFrameworkBundle();
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "localizedStringForKey:value:table:", CFSTR("SMS_RELAY_ALERT_BODY"), &stru_1E276D870, CFSTR("ChatKit"));
        v27 = (void *)objc_claimAutoreleasedReturnValue();

        v36 = v25;
        +[CKAlertController alertControllerWithTitle:message:preferredStyle:](CKAlertController, "alertControllerWithTitle:message:preferredStyle:", v25, v27, 1);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        CKFrameworkBundle();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "localizedStringForKey:value:table:", CFSTR("SMS_RELAY_NOT_NOW"), &stru_1E276D870, CFSTR("ChatKit"));
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = MEMORY[0x1E0C809B0];
        v42[0] = MEMORY[0x1E0C809B0];
        v42[1] = 3221225472;
        v42[2] = __48__CKChatController__askToTurnOnSMSRelayIfNeeded__block_invoke;
        v42[3] = &unk_1E274C898;
        v43 = v37;
        v42[4] = self;
        +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v30, 0, v42);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "addAction:", v32);

        CKFrameworkBundle();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "localizedStringForKey:value:table:", CFSTR("SMS_RELAY_TURN_ON"), &stru_1E276D870, CFSTR("ChatKit"));
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v38[0] = v31;
        v38[1] = 3221225472;
        v38[2] = __48__CKChatController__askToTurnOnSMSRelayIfNeeded__block_invoke_2;
        v38[3] = &unk_1E274C8C0;
        v41 = v37;
        v39 = v4;
        v40 = self;
        +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v34, 0, v38);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "addAction:", v35);

        if ((v37 & 1) == 0)
        {
          -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 0);
          -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
        }
        objc_msgSend(v28, "presentFromViewController:animated:completion:", self, 1, 0);

      }
    }
  }

}

uint64_t __48__CKChatController__askToTurnOnSMSRelayIfNeeded__block_invoke(uint64_t result)
{
  if (!*(_BYTE *)(result + 40))
    return objc_msgSend(*(id *)(result + 32), "becomeFirstResponder");
  return result;
}

uint64_t __48__CKChatController__askToTurnOnSMSRelayIfNeeded__block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "enrollSelfDeviceInSMSRelay");
  if (!*(_BYTE *)(a1 + 48))
    return objc_msgSend(*(id *)(a1 + 40), "becomeFirstResponder");
  return result;
}

- (void)keyboardWillShow:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  void *v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  char v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  int v30;
  void *v31;
  void *v32;
  objc_super v33;

  v4 = a3;
  -[CKChatController view](self, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "window");
  v6 = objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = (void *)v6;
    -[CKChatController view](self, "view");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "window");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "keyWindow");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9 != v11)
      goto LABEL_14;
  }
  else
  {

  }
  -[CKChatController pickerContainerAccessoryView](self, "pickerContainerAccessoryView");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v12)
  {
    -[CKChatController collectionView](self, "collectionView");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v33.receiver = self;
    v33.super_class = (Class)CKChatController;
    -[CKScrollViewController keyboardWillShow:](&v33, sel_keyboardWillShow_, v4);
    if (!-[CKChatController suppressEntryViewKeyboardNotifications](self, "suppressEntryViewKeyboardNotifications"))
    {
      objc_msgSend(v4, "userInfo");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "objectForKeyedSubscript:", *MEMORY[0x1E0CEB890]);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "CGRectValue");
      v17 = v16;

      -[CKChatController entryView](self, "entryView");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "frame");
      v20 = v19;

      if (v17 > v20)
      {
        -[CKChatController entryView](self, "entryView");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "setKeyboardVisible:", 1);

        -[CKCoreChatController inputController](self, "inputController");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = objc_msgSend(v22, "isInputViewVisible");

        if ((v23 & 1) == 0)
        {
          -[CKChatController entryView](self, "entryView");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "clearAppStripSelection");

        }
        -[CKChatController presentedViewController](self, "presentedViewController");
        v25 = objc_claimAutoreleasedReturnValue();
        if (v25)
        {
          v26 = (void *)v25;
          -[CKChatController entryView](self, "entryView");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "contentView");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v28, "textView");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = objc_msgSend(v29, "isFirstResponder");

          if (v30)
          {
            +[CKScrollViewAnimationProperties inheritedAnimation](CKScrollViewAnimationProperties, "inheritedAnimation");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "enforceTranscriptScrollIntentWithAnimationProperties:", v31);

          }
        }
      }
    }
    objc_msgSend(v13, "beginDisablingTranscriptDynamicsForReason:", CFSTR("KeyboardPresentation"));
    -[CKChatController _updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification:](self, "_updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification:", v4);
    -[CKCoreChatController inputController](self, "inputController");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "chatControllerReceivedKeyboardWillShowNotification:", v4);
    -[CKChatController _inheritHiddenKeyboardAppearanceIfNeeded](self, "_inheritHiddenKeyboardAppearanceIfNeeded");
    -[CKChatController setSuppressEntryViewKeyboardNotifications:](self, "setSuppressEntryViewKeyboardNotifications:", 1);

  }
LABEL_14:

}

- (void)keyboardWillHide:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  _QWORD v17[5];
  objc_super v18;

  v4 = a3;
  -[CKChatController view](self, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "window");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "keyWindow");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6 == v8)
  {
    v18.receiver = self;
    v18.super_class = (Class)CKChatController;
    -[CKScrollViewController keyboardWillHide:](&v18, sel_keyboardWillHide_, v4);
    if (CKShowAppStripInEntryView()
      && ((objc_opt_respondsToSelector() & 1) == 0
       || (objc_msgSend(MEMORY[0x1E0CEA6C8], "candidateDisplayIsExtended") & 1) == 0)
      && !-[CKChatController suppressEntryViewKeyboardNotifications](self, "suppressEntryViewKeyboardNotifications"))
    {
      -[CKChatController entryView](self, "entryView");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "isKeyboardVisible");

      if (v10)
      {
        -[CKChatController entryView](self, "entryView");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "setKeyboardVisible:", 0);

        if (!-[CKChatController appModalIsDisplayed](self, "appModalIsDisplayed"))
        {
          -[CKChatController entryView](self, "entryView");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "clearAppStripSelection");

        }
        +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "isAppStripInKeyboard");

        if (v14)
        {
          v17[0] = MEMORY[0x1E0C809B0];
          v17[1] = 3221225472;
          v17[2] = __37__CKChatController_keyboardWillHide___block_invoke;
          v17[3] = &unk_1E274A208;
          v17[4] = self;
          objc_msgSend(MEMORY[0x1E0CEABB0], "animateWithDuration:animations:", v17, 0.5);
        }
        -[CKChatController messageEditingViewController](self, "messageEditingViewController");
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (!-[CKChatController isTransitioningSize](self, "isTransitioningSize") && !v15)
          -[CKChatController updateAppStripVisibility:animated:](self, "updateAppStripVisibility:animated:", 1, 1);
      }
    }
    -[CKChatController _updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification:](self, "_updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification:", v4);
    -[CKCoreChatController inputController](self, "inputController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "chatControllerReceivedKeyboardWillHideNotification:", v4);
    -[CKChatController setSuppressEntryViewKeyboardNotifications:](self, "setSuppressEntryViewKeyboardNotifications:", 1);

  }
}

void __37__CKChatController_keyboardWillHide___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setNeedsLayout");

  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "layoutIfNeeded");

}

- (void)keyboardDidShow:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  objc_super v7;

  v7.receiver = self;
  v7.super_class = (Class)CKChatController;
  v4 = a3;
  -[CKScrollViewController keyboardDidShow:](&v7, sel_keyboardDidShow_, v4);
  if (-[CKChatController _appearState](self, "_appearState", v7.receiver, v7.super_class) != 3)
    -[CKChatController setSuppressEntryViewKeyboardNotifications:](self, "setSuppressEntryViewKeyboardNotifications:", 0);
  -[CKCoreChatController inputController](self, "inputController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "chatControllerReceivedKeyboardDidShowNotification:", v4);

  -[CKChatController collectionView](self, "collectionView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "endDisablingTranscriptDynamicsForReason:", CFSTR("KeyboardPresentation"));

}

- (void)keyboardDidHide:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  objc_super v8;

  v8.receiver = self;
  v8.super_class = (Class)CKChatController;
  v4 = a3;
  -[CKScrollViewController keyboardDidHide:](&v8, sel_keyboardDidHide_, v4);
  if (-[CKChatController _appearState](self, "_appearState", v8.receiver, v8.super_class) != 3)
    -[CKChatController setSuppressEntryViewKeyboardNotifications:](self, "setSuppressEntryViewKeyboardNotifications:", 0);
  if (-[CKChatController isShowingEmojiKeyboard](self, "isShowingEmojiKeyboard"))
  {
    objc_msgSend(MEMORY[0x1E0CEA6F8], "sharedInputModeController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController savedKeyboardInputMode](self, "savedKeyboardInputMode");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setCurrentInputMode:", v6);

  }
  -[CKCoreChatController inputController](self, "inputController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "chatControllerReceivedKeyboardDidHideNotification:", v4);

}

- (void)keyboardDidChangeFrame:(id)a3
{
  id v4;
  void *v5;
  objc_super v6;

  v4 = a3;
  -[CKChatController pickerContainerAccessoryView](self, "pickerContainerAccessoryView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    v6.receiver = self;
    v6.super_class = (Class)CKChatController;
    -[CKScrollViewController keyboardDidChangeFrame:](&v6, sel_keyboardDidChangeFrame_, v4);
    -[CKChatController _updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification:](self, "_updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification:", v4);
  }

}

- (CGRect)screenFrameForNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  objc_super v24;
  CGRect result;

  v4 = a3;
  if (CKIsAppCardsEnabled())
  {
    -[CKChatController entryView](self, "entryView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "entryViewKeyboardLayoutGuide");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "owningView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "layoutFrame");
    objc_msgSend(v7, "convertRect:toView:", 0);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v15 = v14;

  }
  else
  {
    v24.receiver = self;
    v24.super_class = (Class)CKChatController;
    -[CKScrollViewController screenFrameForNotification:](&v24, sel_screenFrameForNotification_, v4);
    v9 = v16;
    v11 = v17;
    v13 = v18;
    v15 = v19;
  }

  v20 = v9;
  v21 = v11;
  v22 = v13;
  v23 = v15;
  result.size.height = v23;
  result.size.width = v22;
  result.origin.y = v21;
  result.origin.x = v20;
  return result;
}

- (void)contentInsetDidChangeWithAnimationProperties:(id)a3
{
  void *v4;
  objc_super v5;

  v5.receiver = self;
  v5.super_class = (Class)CKChatController;
  -[CKCoreChatController contentInsetDidChangeWithAnimationProperties:](&v5, sel_contentInsetDidChangeWithAnimationProperties_, a3);
  -[CKChatController messageEditingViewController](self, "messageEditingViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "transcriptContentInsetsDidChange");

}

- (BOOL)keyboardIsQuickPathing
{
  void *v2;
  char v3;

  objc_msgSend(MEMORY[0x1E0CEA6E8], "activeInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "continuousPathUnderway");

  return v3;
}

- (void)keyboardShouldShowPredictions:(id)a3
{
  void *v4;
  void *v5;
  char v6;
  id v7;

  if (-[CKScrollViewController isKeyboardVisible](self, "isKeyboardVisible", a3))
  {
    -[CKCoreChatController inputController](self, "inputController");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v7, "isInputViewVisible"))
    {
      -[CKChatController entryView](self, "entryView");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v4, "showsKeyboardPredictionBar") & 1) != 0)
      {
        objc_msgSend(MEMORY[0x1E0CEA6E8], "activeInstance");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = objc_msgSend(v5, "isMinimized");

        if ((v6 & 1) == 0)
          -[CKChatController updateAppStripVisibility:animated:](self, "updateAppStripVisibility:animated:", 0, 1);
        return;
      }

    }
  }
}

- (void)keyboardShouldShowCandidates:(id)a3
{
  void *v4;
  int v5;
  id v6;

  if (-[CKScrollViewController isKeyboardVisible](self, "isKeyboardVisible", a3))
  {
    -[CKCoreChatController inputController](self, "inputController");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "isInputViewVisible"))
    {

    }
    else
    {
      -[CKChatController entryView](self, "entryView");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "showsKeyboardPredictionBar");

      if (v5)
        -[CKChatController updateAppStripVisibility:animated:](self, "updateAppStripVisibility:animated:", 0, 0);
    }
  }
}

- (void)keyboardWillBeginInteractiveDismissal:(id)a3
{
  void *v4;
  BOOL v5;
  id v6;

  v6 = a3;
  if (-[CKScrollViewController isKeyboardVisible](self, "isKeyboardVisible"))
  {
    -[CKChatController entryView](self, "entryView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v4, "showsKeyboardPredictionBar") & 1) != 0)
    {
      v5 = -[CKChatController isShowingEmojiKeyboard](self, "isShowingEmojiKeyboard");

      if (!v5)
        -[CKChatController updateAppStripVisibility:animated:](self, "updateAppStripVisibility:animated:", 1, 1);
    }
    else
    {

    }
  }
  -[CKChatController _updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification:](self, "_updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification:", v6);

}

- (void)keyboardWillChangeFrame:(id)a3
{
  id v4;

  -[CKChatController _updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification:](self, "_updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification:", a3);
  -[CKChatController entryView](self, "entryView");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CKChatController updateEntryViewHeightIncludingAppStrip:animated:](self, "updateEntryViewHeightIncludingAppStrip:animated:", objc_msgSend(v4, "shouldShowAppStrip"), 0);

}

- (UIEdgeInsets)bannerInsets
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  UIEdgeInsets result;

  -[CKChatController nicknameBanner](self, "nicknameBanner");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[CKChatController nicknameBanner](self, "nicknameBanner");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "bounds");
    v6 = v5;

    v7 = 0.0;
    v8 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v6 = *MEMORY[0x1E0CEB4B0];
    v7 = *(double *)(MEMORY[0x1E0CEB4B0] + 8);
    v8 = *(double *)(MEMORY[0x1E0CEB4B0] + 16);
    v9 = *(double *)(MEMORY[0x1E0CEB4B0] + 24);
  }
  v10 = v6;
  result.right = v9;
  result.bottom = v8;
  result.left = v7;
  result.top = v10;
  return result;
}

- (UIEdgeInsets)additionalSafeAreaInsets
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  objc_super v22;
  UIEdgeInsets result;

  v22.receiver = self;
  v22.super_class = (Class)CKChatController;
  -[CKChatController additionalSafeAreaInsets](&v22, sel_additionalSafeAreaInsets);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  if (CKIsRunningInMacCatalyst())
  {
    -[CKChatController preferredMacToolbarHeight](self, "preferredMacToolbarHeight");
    v12 = v11;
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "macAppKitToolbarHeight");
    v15 = v14;

    if (v12 > v15)
    {
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "macAppKitToolbarHeight");
      v4 = v12 - v17;

    }
  }
  v18 = v4;
  v19 = v6;
  v20 = v8;
  v21 = v10;
  result.right = v21;
  result.bottom = v20;
  result.left = v19;
  result.top = v18;
  return result;
}

- (UIEdgeInsets)macToolbarInsets
{
  double *v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  int v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  UIEdgeInsets result;

  v3 = (double *)MEMORY[0x1E0CEB4B0];
  v4 = *(double *)(MEMORY[0x1E0CEB4B0] + 8);
  v5 = *(double *)(MEMORY[0x1E0CEB4B0] + 16);
  v6 = *(double *)(MEMORY[0x1E0CEB4B0] + 24);
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "useMacToolbar");

  if (v8)
  {
    -[CKChatController preferredMacToolbarHeight](self, "preferredMacToolbarHeight");
    v10 = v9;
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "macAppKitToolbarHeight");
    if (v10 > v12)
    {
      -[CKChatController preferredMacToolbarHeight](self, "preferredMacToolbarHeight");
      v15 = v16;
    }
    else
    {
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "macAppKitToolbarHeight");
      v15 = v14;

    }
  }
  else
  {
    v15 = *v3;
  }
  v17 = v15;
  v18 = v4;
  v19 = v5;
  v20 = v6;
  result.right = v20;
  result.bottom = v19;
  result.left = v18;
  result.top = v17;
  return result;
}

- (double)minimumBottomInset
{
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double Height;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  double v12;
  CGRect v14;

  -[CKChatController footerViewController](self, "footerViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (!v3)
  {
    if (-[CKChatController inputAccessoryViewControllerEnabled](self, "inputAccessoryViewControllerEnabled"))
    {
      -[CKChatController inputAccessoryViewController](self, "inputAccessoryViewController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "view");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      if (v5)
      {
LABEL_5:
        objc_msgSend(v5, "frame");
        Height = CGRectGetHeight(v14);
        goto LABEL_8;
      }
    }
    else
    {
      -[CKChatController inputAccessoryView](self, "inputAccessoryView");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (v5)
        goto LABEL_5;
    }
    Height = 0.0;
LABEL_8:
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "transcriptMinBottomInsetIsEntryViewHeight"))
    {
      -[CKChatController entryView](self, "entryView");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "window");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v11)
        goto LABEL_12;
      -[CKChatController entryView](self, "entryView");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "frame");
      Height = v12;
    }

    goto LABEL_12;
  }
  objc_msgSend(v3, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "frame");
  Height = v6;
LABEL_12:

  return Height;
}

- (double)topInsetPadding
{
  void *v3;
  double v4;
  double v5;
  void *v6;
  double v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  objc_super v24;
  objc_super v25;
  objc_super v26;
  CGRect v27;

  -[CKChatController nicknameBanner](self, "nicknameBanner");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    v26.receiver = self;
    v26.super_class = (Class)CKChatController;
    -[CKScrollViewController topInsetPadding](&v26, sel_topInsetPadding);
    v5 = v4;
    -[CKChatController nicknameBanner](self, "nicknameBanner");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "bounds");
    v7 = v5 + CGRectGetHeight(v27);

  }
  else
  {
    if (!-[CKChatController _anySuggestionPresenterWantsToShowBanner](self, "_anySuggestionPresenterWantsToShowBanner"))
      goto LABEL_6;
    -[CKChatController collectionView](self, "collectionView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "contentInset");
    v10 = v9;
    v12 = v11;

    -[CKChatController collectionView](self, "collectionView");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "bounds");
    v15 = v14 - v10 - v12;

    -[CKChatController collectionView](self, "collectionView");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "contentSize");
    v18 = v17;

    if (v18 < v15)
    {
      v25.receiver = self;
      v25.super_class = (Class)CKChatController;
      -[CKScrollViewController topInsetPadding](&v25, sel_topInsetPadding);
      v20 = v19;
      -[CKChatController suggestionBannerHeight](self, "suggestionBannerHeight");
      return v20 + v21;
    }
    else
    {
LABEL_6:
      v24.receiver = self;
      v24.super_class = (Class)CKChatController;
      -[CKScrollViewController topInsetPadding](&v24, sel_topInsetPadding);
      return v22;
    }
  }
  return v7;
}

- (id)_animationPropertiesToUseForUpdateAfterHoldForReason:(id)a3
{
  id v3;
  double v4;
  uint64_t v5;
  void *v6;

  v3 = a3;
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("ThrowAnimation")))
  {
    v4 = 0.3;
  }
  else
  {
    if (!objc_msgSend(v3, "isEqualToString:", CFSTR("MainTranscriptWhileInlineReplyControllerVisible"))
      && (objc_msgSend(v3, "isEqualToString:", CFSTR("ViewControllerNotVisible"))
       || objc_msgSend(v3, "isEqualToString:", CFSTR("NotificationChatControllerFixedLayout"))
       || objc_msgSend(v3, "isEqualToString:", CFSTR("InlineReplyAnimateOut"))
       || objc_msgSend(v3, "isEqualToString:", CFSTR("ViewControllerSizeTransition"))))
    {
      +[CKScrollViewAnimationProperties unanimated](CKScrollViewAnimationProperties, "unanimated");
      v5 = objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    }
    v4 = 0.5;
  }
  +[CKScrollViewAnimationProperties animatedWithDuration:animationCurve:](CKScrollViewAnimationProperties, "animatedWithDuration:animationCurve:", 0, v4);
  v5 = objc_claimAutoreleasedReturnValue();
LABEL_10:
  v6 = (void *)v5;

  return v6;
}

- (id)_animationPropertiesToUseInUpdateForReasons:(id)a3 followingHoldForReason:(id)a4
{
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  unint64_t v13;
  NSObject *v14;
  _BOOL4 v15;
  int v16;
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (v7)
  {
    -[CKChatController _animationPropertiesToUseForUpdateAfterHoldForReason:](self, "_animationPropertiesToUseForUpdateAfterHoldForReason:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    IMLogHandleForCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v16 = 138412546;
      v17 = v8;
      v18 = 2112;
      v19 = v7;
      _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, "Using animation properties %@ following hold for reason: %@", (uint8_t *)&v16, 0x16u);
    }
LABEL_8:

    goto LABEL_9;
  }
  if (objc_msgSend(v6, "count") == 1)
  {
    objc_msgSend(v6, "anyObject");
    v9 = objc_claimAutoreleasedReturnValue();
    -[NSObject animationProperties](v9, "animationProperties");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    IMLogHandleForCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      -[NSObject reasonType](v9, "reasonType");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138412546;
      v17 = v8;
      v18 = 2112;
      v19 = v11;
      _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, "Using animation properties %@ following update for reasonType: %@", (uint8_t *)&v16, 0x16u);

    }
    goto LABEL_8;
  }
  v13 = objc_msgSend(v6, "count");
  IMLogHandleForCategory();
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (v13 < 2)
  {
    if (v15)
      -[CKChatController _animationPropertiesToUseInUpdateForReasons:followingHoldForReason:].cold.2();
  }
  else if (v15)
  {
    -[CKChatController _animationPropertiesToUseInUpdateForReasons:followingHoldForReason:].cold.1();
  }

  +[CKScrollViewAnimationProperties unanimated](CKScrollViewAnimationProperties, "unanimated");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

  return v8;
}

- (void)scrollGeometryIsUpdatingForReasons:(id)a3 followingHoldForReason:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;

  v6 = a4;
  v7 = a3;
  -[CKChatController _animationPropertiesToUseInUpdateForReasons:followingHoldForReason:](self, "_animationPropertiesToUseInUpdateForReasons:followingHoldForReason:", v7, v6);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  -[CKScrollViewController scrollGeometryContentInsetIsUpdatingForReasons:followingHoldForReason:withAnimationProperties:](self, "scrollGeometryContentInsetIsUpdatingForReasons:followingHoldForReason:withAnimationProperties:", v7, v6, v9);

  -[CKChatController collectionView](self, "collectionView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "enforceTranscriptScrollIntentWithAnimationProperties:", v9);

}

- (id)progressBar
{
  void *v3;
  uint64_t v4;
  void *v5;
  BOOL v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  void *v15;
  void *v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  objc_super v23;
  _QWORD v24[5];

  v24[4] = *MEMORY[0x1E0C80C00];
  v23.receiver = self;
  v23.super_class = (Class)CKChatController;
  -[CKCoreChatController progressBar](&v23, sel_progressBar);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _progressBarHostView](self, "_progressBarHostView");
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)v4;
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    objc_msgSend(v3, "superview");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7 != v5)
    {
      objc_msgSend(v3, "removeFromSuperview");
      objc_msgSend(v5, "addSubview:", v3);
      objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v18 = (void *)MEMORY[0x1E0CB3718];
      objc_msgSend(v3, "leadingAnchor");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "leadingAnchor");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "constraintEqualToAnchor:", v21);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v24[0] = v20;
      objc_msgSend(v3, "trailingAnchor");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "trailingAnchor");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "constraintEqualToAnchor:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v24[1] = v9;
      objc_msgSend(v3, "bottomAnchor");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "bottomAnchor");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "constraintEqualToAnchor:", v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v24[2] = v12;
      objc_msgSend(v3, "heightAnchor");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "frame");
      objc_msgSend(v13, "constraintEqualToConstant:", v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v24[3] = v15;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v24, 4);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "activateConstraints:", v16);

      objc_msgSend(v5, "setNeedsLayout");
      objc_msgSend(v5, "layoutIfNeeded");
    }
  }

  return v3;
}

- (id)_progressBarHostView
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  if (CKIsRunningInMacCatalyst())
  {
    -[CKChatController macRecipientsController](self, "macRecipientsController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "view");
    v4 = objc_claimAutoreleasedReturnValue();
LABEL_6:
    v7 = (void *)v4;
    goto LABEL_7;
  }
  -[CKChatController navigationItem](self, "navigationItem");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "navigationBar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(v3, "_backgroundView");
    v4 = objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  -[CKChatController navigationItem](self, "navigationItem");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "titleView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_7:
  return v7;
}

- (void)_updateTitleViewHeight:(id)a3
{
  id v4;
  void *v5;
  double v6;
  id v7;

  if (a3)
  {
    v4 = a3;
    -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "view");
    v7 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v7, "sizeThatFits:", *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8));
    objc_msgSend(v4, "setHeight:", v6);

  }
}

- (void)_configureTitleView
{
  NSObject *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  _CKTranscriptNavigationBarTitleView *v7;
  NSObject *v8;
  NSObject *v9;
  _CKTranscriptNavigationBarTitleView *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _CKTranscriptNavigationBarTitleView *v27;
  _QWORD v28[4];
  uint8_t buf[4];
  _CKTranscriptNavigationBarTitleView *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  dispatch_assert_queue_V2(MEMORY[0x1E0C80D38]);
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "Call made to _configureTitleView for the navigation bar.", buf, 2u);
    }

  }
  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "view");
  v27 = (_CKTranscriptNavigationBarTitleView *)objc_claimAutoreleasedReturnValue();

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      -[_CKTranscriptNavigationBarTitleView superview](v27, "superview");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v30 = v27;
      v31 = 2112;
      v32 = v6;
      _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "> Currently has NavBarCanvasView instance {%@}. superview={%@}", buf, 0x16u);

    }
  }
  v7 = objc_alloc_init(_CKTranscriptNavigationBarTitleView);
  -[_UINavigationBarTitleView setHideTrailingBarButtons:](v7, "setHideTrailingBarButtons:", 1);
  -[_UINavigationBarTitleView setHideStandardTitle:](v7, "setHideStandardTitle:", 1);
  -[_UINavigationBarTitleView setHideLeadingBarButtons:](v7, "setHideLeadingBarButtons:", 1);
  -[_UINavigationBarTitleView setHideBackButton:](v7, "setHideBackButton:", 1);
  -[CKChatController _updateTitleViewHeight:](self, "_updateTitleViewHeight:", v7);
  -[_CKTranscriptNavigationBarTitleView addSubview:](v7, "addSubview:", v27);
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v30 = v7;
      _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "> Created a new Nav Title View {%@}.", buf, 0xCu);
    }

  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      -[CKChatController navigationItem](self, "navigationItem");
      v10 = (_CKTranscriptNavigationBarTitleView *)objc_claimAutoreleasedReturnValue();
      -[CKChatController navigationController](self, "navigationController");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v30 = v10;
      v31 = 2112;
      v32 = v11;
      _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, "> Ready to apply the titleView on navigationItem {%@}\n currentNavVC={%@}.", buf, 0x16u);

    }
  }
  -[CKChatController navigationItem](self, "navigationItem");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setTitleView:", v7);

  v22 = (void *)MEMORY[0x1E0CB3718];
  -[_CKTranscriptNavigationBarTitleView leadingAnchor](v27, "leadingAnchor");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[_CKTranscriptNavigationBarTitleView leadingAnchor](v7, "leadingAnchor");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "constraintEqualToAnchor:", v25);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = v24;
  -[_CKTranscriptNavigationBarTitleView trailingAnchor](v27, "trailingAnchor");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  -[_CKTranscriptNavigationBarTitleView trailingAnchor](v7, "trailingAnchor");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "constraintEqualToAnchor:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v28[1] = v14;
  -[_CKTranscriptNavigationBarTitleView topAnchor](v27, "topAnchor");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[_CKTranscriptNavigationBarTitleView topAnchor](v7, "topAnchor");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "constraintEqualToAnchor:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v28[2] = v17;
  -[_CKTranscriptNavigationBarTitleView bottomAnchor](v27, "bottomAnchor");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[_CKTranscriptNavigationBarTitleView bottomAnchor](v7, "bottomAnchor");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "constraintEqualToAnchor:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v28[3] = v20;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v28, 4);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "activateConstraints:", v21);

}

- (void)_setTitle:(id)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _BOOL4 v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  __CFString *v20;
  uint64_t v21;
  void *v22;
  id v23;

  v4 = a4;
  v23 = a3;
  -[CKCoreChatController conversation](self, "conversation");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "chat");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "valueForChatProperty:", *MEMORY[0x1E0D359E0]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "BOOLValue"))
  {
    -[CKCoreChatController conversation](self, "conversation");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "chat");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "isFiltered") != 0;

  }
  else
  {
    v11 = 0;
  }

  -[CKCoreChatController conversation](self, "conversation");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v12, "wasDetectedAsSMSSpam"))
    v13 = !+[CKConversation isSMSSpamFilteringEnabled](CKConversation, "isSMSSpamFilteringEnabled");
  else
    v13 = 0;

  if ((v11 | v13) == 1)
  {
    v14 = (void *)MEMORY[0x1E0CB3940];
    CKFrameworkBundle();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "localizedStringForKey:value:table:", CFSTR("MAYBE_JUNK"), &stru_1E276D870, CFSTR("ChatKit"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stringWithFormat:", v16, v23);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "userInterfaceLayoutDirection");

    if (v19 == 1)
      v20 = CFSTR("\u200F");
    else
      v20 = CFSTR("\u200E");
    -[__CFString stringByAppendingString:](v20, "stringByAppendingString:", v17);
    v21 = objc_claimAutoreleasedReturnValue();

    v23 = (id)v21;
  }
  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "updateTitle:animated:", v23, v4);

}

- (void)_updateTitleViewLayout
{
  NSObject *v3;
  void *v4;
  void *v5;
  uint8_t v6[16];

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "Updating title view layout in response to font size change", v6, 2u);
    }

  }
  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "conversationIdentityView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setNeedsLayout");

}

- (BOOL)shouldUseNavigationBarCanvasView
{
  return !-[CKChatController wantsChromelessAppearance](self, "wantsChromelessAppearance");
}

- (void)_updateNavigationButtons
{
  void *v3;
  id v4;

  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setCanShowBackButtonView:", -[CKChatController _canShowBackButtonView](self, "_canShowBackButtonView"));

  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "configureForEditing:", -[CKChatController isEditing](self, "isEditing"));

}

- (BOOL)_canShowBackButtonView
{
  int v3;

  if (CKIsRunningInMacCatalyst() || (IMIsRunningInScreenshotTesting_IsolatedTranscriptUI() & 1) != 0)
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    v3 = -[CKChatController isCollapsed](self, "isCollapsed");
    if (v3)
      LOBYTE(v3) = -[CKChatController isEditing](self, "isEditing") ^ 1;
  }
  return v3;
}

- (void)_initializeNavigationBarCanvasViewIfNecessary
{
  void *v3;
  CKNavbarCanvasViewController *v4;
  void *v5;
  void *v6;
  CKNavbarCanvasViewController *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  CKNavbarCanvasViewController *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v4 = [CKNavbarCanvasViewController alloc];
    -[CKCoreChatController conversation](self, "conversation");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController navigationController](self, "navigationController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[CKNavbarCanvasViewController initWithConversation:navigationController:hideLocationIfUnavailable:](v4, "initWithConversation:navigationController:hideLocationIfUnavailable:", v5, v6, 1);

    -[CKNavbarCanvasViewController setCanShowBackButtonView:](v7, "setCanShowBackButtonView:", -[CKChatController _canShowBackButtonView](self, "_canShowBackButtonView"));
    if (-[CKChatController shouldShowDoneButton](self, "shouldShowDoneButton"))
      v8 = IMIsRunningInScreenshotTesting_IsolatedTranscriptUI() ^ 1;
    else
      v8 = 0;
    -[CKNavbarCanvasViewController setShouldShowDoneButton:](v7, "setShouldShowDoneButton:", v8);
    -[CKNavbarCanvasViewController setDelegate:](v7, "setDelegate:", self);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v14 = 138412290;
        v15 = v7;
        _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, "A CKNavbarCanvasViewController instance {%@} was just initialized in _initializeNavigationBarCanvasViewIfNecessary.", (uint8_t *)&v14, 0xCu);
      }

    }
    -[CKChatController setNavbarCanvasViewController:](self, "setNavbarCanvasViewController:", v7);
    v10 = (void *)MEMORY[0x1E0C974D0];
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "theme");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "contactStyle");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setCurrentStyle:", v13);

  }
}

- (void)_resizeNavigationBarIfNecessary
{
  -[CKChatController _resizeNavigationBarIfNecessaryWithAnimation:](self, "_resizeNavigationBarIfNecessaryWithAnimation:", 1);
}

- (void)_resizeNavigationBarIfNecessaryWithAnimation:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  double Height;
  double v13;
  uint64_t v14;
  void *v15;
  void (**v16)(_QWORD);
  _QWORD aBlock[4];
  id v18;
  _QWORD v19[5];
  id v20;
  CGRect v21;

  v3 = a3;
  if (-[CKChatController shouldUseNavigationBarCanvasView](self, "shouldUseNavigationBarCanvasView"))
  {
    -[CKChatController currentNavigationBarBasedOnSizeClass](self, "currentNavigationBarBasedOnSizeClass");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "canvasView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKChatController navigationItem](self, "navigationItem");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "titleView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[CKChatController navigationItem](self, "navigationItem");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "titleView");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v11 = 0;
    }

    objc_msgSend(v5, "bounds");
    Height = CGRectGetHeight(v21);
    objc_msgSend(v7, "_updatedPreferredHeight");
    if (Height != v13)
    {
      v14 = MEMORY[0x1E0C809B0];
      v15 = (void *)MEMORY[0x1E0CEABB0];
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = __65__CKChatController__resizeNavigationBarIfNecessaryWithAnimation___block_invoke;
      v19[3] = &unk_1E274A108;
      v19[4] = self;
      v20 = v11;
      objc_msgSend(v15, "performWithoutAnimation:", v19);
      aBlock[0] = v14;
      aBlock[1] = 3221225472;
      aBlock[2] = __65__CKChatController__resizeNavigationBarIfNecessaryWithAnimation___block_invoke_2;
      aBlock[3] = &unk_1E274A208;
      v18 = v5;
      v16 = (void (**)(_QWORD))_Block_copy(aBlock);
      if ((IMIsRunningInUnitTesting() & 1) != 0 || !v3)
        v16[2](v16);
      else
        objc_msgSend(MEMORY[0x1E0CEABB0], "animateWithDuration:delay:options:animations:completion:", 0x20000, v16, 0, 0.2, 0.0);

    }
  }
}

uint64_t __65__CKChatController__resizeNavigationBarIfNecessaryWithAnimation___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "navbarCanvasViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "canvasView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "layoutIfNeeded");

  return objc_msgSend(*(id *)(a1 + 32), "_updateTitleViewHeight:", *(_QWORD *)(a1 + 40));
}

void __65__CKChatController__resizeNavigationBarIfNecessaryWithAnimation___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "superview");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setNeedsLayout");

  objc_msgSend(*(id *)(a1 + 32), "superview");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "layoutIfNeeded");

}

- (id)currentNavigationBarBasedOnSizeClass
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  if (CKIsRunningInMessagesTranscriptExtension()
    || (-[CKChatController traitCollection](self, "traitCollection"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v3, "horizontalSizeClass"),
        v3,
        v4 != 1))
  {
    -[CKChatController navigationController](self, "navigationController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "navigationBar");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[CKChatController parentViewController](self, "parentViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "navigationController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "navigationBar");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v7;
}

- (BOOL)shouldShowAvatarViewInNavBarCanvas
{
  BOOL result;
  void *v4;
  void *v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  char v9;

  if (CKIsRunningInMacCatalyst())
    return 0;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "contactPhotosEnabled"))
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "bounds");
    v6 = _UIUserInterfaceSizeClassForHeight() != 1;

  }
  else
  {
    v6 = 0;
  }

  -[CKChatController splitViewController](self, "splitViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
    result = 0;
  else
    result = v6;
  if (v7)
  {
    if (v6)
    {
      -[CKChatController splitViewController](self, "splitViewController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "isCollapsed");

      return v9;
    }
  }
  return result;
}

- (void)navbarCanvasViewController:(id)a3 didTapView:(id)a4
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  NSObject *v18;
  void *v19;
  int v20;
  id v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (objc_msgSend(v6, "navBarContext") == 3)
  {
    -[CKChatController messageEditingViewController](self, "messageEditingViewController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "dismissAndRejectChanges");
LABEL_3:

    goto LABEL_25;
  }
  if (objc_msgSend(v6, "navBarContext") == 4)
  {
    -[CKChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:](self, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:", 1, 0, 0);
    goto LABEL_25;
  }
  objc_msgSend(v6, "backButtonView");
  v9 = (id)objc_claimAutoreleasedReturnValue();

  if (v9 == v7)
  {
    -[CKChatController _backbuttonPressed](self, "_backbuttonPressed");
    goto LABEL_25;
  }
  objc_msgSend(v6, "detailsButton");
  v10 = (id)objc_claimAutoreleasedReturnValue();

  if (v10 == v7)
    goto LABEL_24;
  objc_msgSend(v6, "editCancelButtonView");
  v11 = (id)objc_claimAutoreleasedReturnValue();

  if (v11 == v7)
  {
    -[CKChatController _editCancelButtonPressed](self, "_editCancelButtonPressed");
    goto LABEL_25;
  }
  objc_msgSend(v6, "doneButton");
  v12 = (id)objc_claimAutoreleasedReturnValue();

  if (v12 == v7)
  {
    -[CKChatController _doneButtonPressed](self, "_doneButtonPressed");
    goto LABEL_25;
  }
  objc_msgSend(v6, "avatarView");
  v13 = (id)objc_claimAutoreleasedReturnValue();

  if (v13 == v7)
    goto LABEL_24;
  objc_msgSend(v6, "canvasView");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  if (v14 != v7)
  {

    goto LABEL_19;
  }
  v15 = objc_msgSend(v6, "navBarContext");

  if (v15 != 1)
  {
LABEL_19:
    objc_msgSend(v6, "canvasView");
    v17 = (id)objc_claimAutoreleasedReturnValue();

    if (v17 != v7)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v6, "backButtonView");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = 138412546;
          v21 = v7;
          v22 = 2112;
          v23 = v19;
          _os_log_impl(&dword_18DFCD000, v18, OS_LOG_TYPE_INFO, "Unknown view (%@) back buttonView is (%@)", (uint8_t *)&v20, 0x16u);

        }
      }
      goto LABEL_25;
    }
LABEL_24:
    -[CKChatController _detailsButtonPressed](self, "_detailsButtonPressed");
    goto LABEL_25;
  }
  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    -[CKChatController inlineReplyController](self, "inlineReplyController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "dismissController");
    goto LABEL_3;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    -[CKChatController dismissController](self, "dismissController");
LABEL_25:

}

- (void)navbarCanvasViewControllerLegacyCanvasHeightDidChange:(id)a3
{
  if (!-[CKChatController isTransitioningSize](self, "isTransitioningSize", a3))
    -[CKChatController _resizeNavigationBarIfNecessary](self, "_resizeNavigationBarIfNecessary");
}

- (void)navbarCanvasViewControllerCanvasHeightDidChange:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  if (-[CKChatController shouldUseNavigationBarCanvasView](self, "shouldUseNavigationBarCanvasView", a3))
  {
    -[CKChatController navigationItem](self, "navigationItem");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "titleView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[CKChatController navigationItem](self, "navigationItem");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "titleView");
      v7 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v7 = 0;
    }

    -[CKChatController _updateTitleViewHeight:](self, "_updateTitleViewHeight:", v7);
  }
}

- (void)navbarCanvasViewControllerFaceTimeAudioButtonTapped:(id)a3
{
  -[CKChatController _callButtonPressedWithVideoEnabled:](self, "_callButtonPressedWithVideoEnabled:", 0);
}

- (void)navbarCanvasViewControllerFaceTimeVideoButtonTapped:(id)a3
{
  -[CKChatController _callButtonPressedWithVideoEnabled:](self, "_callButtonPressedWithVideoEnabled:", 1);
}

- (void)navbarCanvasViewController:(id)a3 updatedJoinStateWithStyle:(int64_t)a4
{
  id v6;
  id v7;

  v7 = a3;
  if (CKIsRunningInMacCatalyst())
  {
    -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
    v6 = (id)objc_claimAutoreleasedReturnValue();

    if (v6 == v7 && -[CKChatController macJoinStyle](self, "macJoinStyle") != a4)
    {
      -[CKChatController setMacJoinStyle:](self, "setMacJoinStyle:", a4);
      -[CKChatController refreshMacToolbar](self, "refreshMacToolbar");
    }
  }

}

- (void)navbarCanvasViewController:(id)a3 selectedChipAction:(id)a4
{
  id v5;
  id v6;

  v5 = a4;
  -[CKChatController suggestedActionsHandler](self, "suggestedActionsHandler");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "performChipAction:", v5);

}

- (void)navbarCanvasViewController:(id)a3 selectedSuggestedReply:(id)a4
{
  -[CKChatController stageSelectedSuggestedReply:](self, "stageSelectedSuggestedReply:", a4);
}

- (BOOL)shouldConfigureForJunkModalInNavbarCanvasViewController:(id)a3
{
  _BOOL4 v4;

  v4 = -[CKChatController isCollapsed](self, "isCollapsed", a3);
  if (v4)
    LOBYTE(v4) = -[CKChatController isShowingOscarChat](self, "isShowingOscarChat");
  return v4;
}

- (BOOL)shouldUseMinimumSafeAreas
{
  void *v3;
  char v4;
  void *v5;
  char v6;

  -[CKCoreChatController delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) == 0)
    return 0;
  -[CKCoreChatController delegate](self, "delegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "shouldUseMinimumSafeAreas");

  return v6;
}

- (void)keyCommandToggleDetails
{
  if (CKIsRunningInMacCatalyst())
    -[CKChatController _detailsButtonPressed](self, "_detailsButtonPressed");
  else
    -[CKChatController presentDetailsViewController](self, "presentDetailsViewController");
}

- (void)keyCommandToggleUnreadState
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  -[CKCoreChatController chat](self, "chat");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "unreadMessageCount");

  -[CKCoreChatController chat](self, "chat");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v4)
    objc_msgSend(v5, "markAllMessagesAsRead");
  else
    objc_msgSend(v5, "markLastMessageAsUnread");

}

- (void)_detailsButtonPressed
{
  if (!IMIsOscarEnabled() || !-[CKChatController isShowingOscarChat](self, "isShowingOscarChat"))
    -[CKChatController presentDetailsViewController](self, "presentDetailsViewController");
}

- (void)presentDetailsViewController
{
  -[CKChatController presentDetailsViewControllerAnimated:](self, "presentDetailsViewControllerAnimated:", 1);
}

- (void)presentDetailsViewControllerAnimated:(BOOL)a3
{
  void *v4;
  char v5;
  void *v6;
  int v7;
  void *v8;
  int v9;
  void *v10;
  id v11;

  -[CKCoreChatController delegate](self, "delegate", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_respondsToSelector();

  if ((v5 & 1) == 0)
  {
    if (!CKIsRunningInMessagesTranscriptExtension())
      return;
LABEL_6:
    -[CKChatController _presentDetailsViewControllerAnimated:](self, "_presentDetailsViewControllerAnimated:", 1);
    return;
  }
  -[CKCoreChatController delegate](self, "delegate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "hasDetailsNavigationController");

  if (!v7)
    goto LABEL_6;
  -[CKCoreChatController delegate](self, "delegate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isDetailsNavigationControllerDetached");

  -[CKCoreChatController delegate](self, "delegate");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v9)
    objc_msgSend(v10, "dismissAndReopenDetailsNavigationController");
  else
    objc_msgSend(v10, "dismissDetailsNavigationController");

}

- (void)_presentDetailsViewControllerAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  int v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  int v13;
  CKDetailsControllerAdapter *v14;
  void *v15;
  CKDetailsControllerAdapter *v16;
  void *v17;
  CKDetailsNavigationController *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  _WORD v28[8];
  _QWORD v29[12];

  v3 = a3;
  v29[1] = *MEMORY[0x1E0C80C00];
  -[CKCoreChatController conversation](self, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "chat");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isStewieChat");

  if (v7)
  {
    if (!IMOSLoggingEnabled())
      return;
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v28[0] = 0;
      _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Do not present Details view in Stewie chats", (uint8_t *)v28, 2u);
    }
    goto LABEL_5;
  }
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isTranscriptSharingEnabled");

  if (v10
    && (-[CKCoreChatController conversation](self, "conversation"),
        v11 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v11, "chat"),
        v12 = (void *)objc_claimAutoreleasedReturnValue(),
        v13 = objc_msgSend(v12, "isStewieSharingChat"),
        v12,
        v11,
        v13))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v28[0] = 0;
        _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Do not present Details view in Transcript Sharing chats", (uint8_t *)v28, 2u);
      }
LABEL_5:

    }
  }
  else
  {
    v14 = [CKDetailsControllerAdapter alloc];
    -[CKCoreChatController conversation](self, "conversation");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = -[CKDetailsControllerAdapter initWithConversation:delegate:](v14, "initWithConversation:delegate:", v15, self);

    -[CKDetailsControllerAdapter detailsController](v16, "detailsController");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = -[CKDetailsNavigationController initWithNavigationBarClass:toolbarClass:]([CKDetailsNavigationController alloc], "initWithNavigationBarClass:toolbarClass:", objc_opt_class(), 0);
    -[CKDetailsNavigationController setDetailsAdapter:](v18, "setDetailsAdapter:", v16);
    if (v17)
    {
      v29[0] = v17;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v29, 1);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKDetailsNavigationController setViewControllers:](v18, "setViewControllers:", v19);

    }
    else
    {
      -[CKDetailsNavigationController setViewControllers:](v18, "setViewControllers:", MEMORY[0x1E0C9AA60]);
    }
    -[CKDetailsNavigationController setDelegate:](v18, "setDelegate:", v17);
    -[CKCoreChatController delegate](self, "delegate");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "presentDetailsNavigationController:", v18);

    -[CKCoreChatController conversation](self, "conversation");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "isBusinessConversation");

    if (v22)
    {
      -[CKDetailsNavigationController view](v18, "view");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CEA478], "systemBackgroundColor");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "setBackgroundColor:", v24);

    }
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "userInterfaceIdiom");

    if ((v26 & 0xFFFFFFFFFFFFFFFBLL) == 1)
      -[CKDetailsNavigationController setModalPresentationStyle:](v18, "setModalPresentationStyle:", 2);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      +[CKLinkIntentsManager sharedManager](CKLinkIntentsManager, "sharedManager");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "registerDependencyWithDetailsController:", v17);

    }
    -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v18, v3, 0);

  }
}

- (void)_backbuttonPressed
{
  id v2;
  id v3;

  -[CKChatController _navigationControllerToPop](self, "_navigationControllerToPop");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v2 = (id)objc_msgSend(v3, "popViewControllerAnimated:", 1);

}

- (id)_navigationControllerToPop
{
  void *v3;
  CKChatController *v4;
  void *v5;
  void *v6;

  if (-[CKChatController isCollapsed](self, "isCollapsed")
    && (-[CKChatController navigationController](self, "navigationController"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v3, "topViewController"),
        v4 = (CKChatController *)objc_claimAutoreleasedReturnValue(),
        v4,
        v3,
        v4 == self))
  {
    -[CKChatController navigationController](self, "navigationController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "navigationController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    -[CKChatController navigationController](self, "navigationController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v5;
}

- (void)dismissDetailsController:(id)a3
{
  -[CKChatController dismissDetailsControllerAnimated:](self, "dismissDetailsControllerAnimated:", 1);
}

- (void)dismissDetailsControllerAnimated:(BOOL)a3
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __53__CKChatController_dismissDetailsControllerAnimated___block_invoke;
  v3[3] = &unk_1E274A208;
  v3[4] = self;
  -[CKChatController dismissViewControllerAnimated:completion:](self, "dismissViewControllerAnimated:completion:", a3, v3);
}

uint64_t __53__CKChatController_dismissDetailsControllerAnimated___block_invoke(uint64_t a1)
{
  void *v2;

  +[CKLinkIntentsManager sharedManager](CKLinkIntentsManager, "sharedManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "purgeDependencies");

  objc_msgSend(*(id *)(a1 + 32), "setTargetFirstResponder:", 1);
  return objc_msgSend(*(id *)(a1 + 32), "becomeFirstResponder");
}

- (void)_callButtonPressed
{
  void *v3;
  void *v4;
  id v5;

  -[CKCoreChatController conversation](self, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "chat");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "conversation");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  -[CKChatController _callButtonPressedWithVideoEnabled:](self, "_callButtonPressedWithVideoEnabled:", objc_msgSend(MEMORY[0x1E0D35818], "conversationIsVideoCall:", v5));
}

- (void)_callButtonPressedWithVideoEnabled:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a3;
  -[CKCoreChatController conversation](self, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "chat");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "conversation");
  v8 = (id)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
    -[CKCoreChatController chat](self, "chat");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "initiateTUConversationWithVideoEnabled:", v3);
LABEL_6:

    goto LABEL_7;
  }
  if (!objc_msgSend(v8, "state"))
  {
    -[CKCoreChatController chat](self, "chat");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "joinExistingTUConversation");
    goto LABEL_6;
  }
  +[CKFaceTimeUtilities showCallControlsForConversation:](CKFaceTimeUtilities, "showCallControlsForConversation:", v8);
LABEL_7:

}

- (CNContactPickerViewController)contactPicker
{
  CNContactPickerViewController *contactPicker;
  CNContactPickerViewController *v4;
  CNContactPickerViewController *v5;

  contactPicker = self->_contactPicker;
  if (!contactPicker)
  {
    v4 = (CNContactPickerViewController *)objc_alloc_init(MEMORY[0x1E0C974B0]);
    v5 = self->_contactPicker;
    self->_contactPicker = v4;

    -[CNContactPickerViewController setDelegate:](self->_contactPicker, "setDelegate:", self);
    contactPicker = self->_contactPicker;
  }
  return contactPicker;
}

- (BOOL)canPerformAction:(SEL)a3 withSender:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  BOOL v25;
  unsigned __int8 v26;
  objc_super v28;

  v6 = a4;
  -[CKChatController entryView](self, "entryView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "contentView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "textView");
  v9 = (id)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = (void *)objc_opt_new();
LABEL_5:
    objc_msgSend(v9, "setPasteConfiguration:", v10);

    goto LABEL_6;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[CKCoreChatController chat](self, "chat");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "supportsCapabilities:", 0x8000) ^ 1;

    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "pasteConfigurationDisablingKeyboardStickers:", v12);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_5;
  }
LABEL_6:
  objc_msgSend(MEMORY[0x1E0CEA748], "sharedMenuController");
  v14 = (id)objc_claimAutoreleasedReturnValue();

  if (v14 == v6 || v9 == v6)
  {
    v26 = objc_msgSend(v9, "canPerformAction:withSender:", a3, v6);
LABEL_19:
    v25 = v26;
    goto LABEL_20;
  }
  if (sel_copy_ == a3 || sel_delete_ == a3)
  {
    -[CKChatController selectedChatItems](self, "selectedChatItems");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "count");

    if (!v16)
    {
      v25 = 0;
      goto LABEL_20;
    }
  }
  if (sel_delete_ != a3
    || (-[CKChatController selectedChatItems](self, "selectedChatItems"),
        v17 = (void *)objc_claimAutoreleasedReturnValue(),
        v18 = objc_msgSend(v17, "count"),
        v17,
        v18 != 1))
  {
LABEL_18:
    v28.receiver = self;
    v28.super_class = (Class)CKChatController;
    v26 = -[CKChatController canPerformAction:withSender:](&v28, sel_canPerformAction_withSender_, a3, v6);
    goto LABEL_19;
  }
  -[CKChatController selectedChatItems](self, "selectedChatItems");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "firstObject");
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "balloonViewForChatItem:", v20);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    goto LABEL_18;
  }
  objc_msgSend(v22, "textView");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "selectedTextRange");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = v24 == 0;

LABEL_20:
  return v25;
}

- (void)registerNotifications
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void **v19;
  void *v20;
  void **v21;
  void *v22;
  void *v23;
  void *v24;
  objc_super v25;

  v25.receiver = self;
  v25.super_class = (Class)CKChatController;
  -[CKCoreChatController registerNotifications](&v25, sel_registerNotifications);
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObserver:selector:name:object:", self, sel__applicationDidBecomeActive_, *MEMORY[0x1E0CEB270], 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObserver:selector:name:object:", self, sel__raiseToListenSettingChanged_, CKPreferenceRaiseToListenDidChangeNotification, 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addObserver:selector:name:object:", self, sel__applicationWillResignActive_, *MEMORY[0x1E0CEB358], 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel__textInputModeDidChange_, *MEMORY[0x1E0CEBD28], 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObserver:selector:name:object:", self, sel__reduceTransparencyStatusDidChange, *MEMORY[0x1E0CEB098], 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addObserver:selector:name:object:", self, sel_inputLanguageDidChange_, *MEMORY[0x1E0CEBD58], 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "addObserver:selector:name:object:", self, sel_nicknameStoreDidChange_, *MEMORY[0x1E0D355F8], 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "addObserver:selector:name:object:", self, sel_nicknameStoreDidChange_, *MEMORY[0x1E0D35610], 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "addObserver:selector:name:object:", self, sel__switchedToEmojiKeyboard_, *MEMORY[0x1E0CEB838], 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "addObserver:selector:name:object:", self, sel__switchedAwayFromEmojiKeyboard_, *MEMORY[0x1E0CEB830], 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "addObserver:selector:name:object:", self, sel__transferUpdated_, CFSTR("CKFileTransferUpdatedNotification"), 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObserver:selector:name:object:", self, sel__transferCompleted_, CFSTR("CKFileTransferFinishedNotification"), 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "addObserver:selector:name:object:", self, sel__handleContactStoreBatchLoadCompleteNotification_, *MEMORY[0x1E0D37C38], 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "addObserver:selector:name:object:", self, sel__updateNavigationUI, *MEMORY[0x1E0D373D0], 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "addObserver:selector:name:object:", self, sel_presentCollaborationPopoverUI, *MEMORY[0x1E0D352B0], 0);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "addObserver:selector:name:object:", self, sel__updateAccountRegistrationFailureNotification, *MEMORY[0x1E0D35298], 0);

  if (CKIsRunningInMessages())
  {
    if (!registerNotifications__DDDetectionControllerWillPresentActionNotification)
    {
      v19 = (void **)MEMORY[0x193FF3C24]("DDDetectionControllerWillPresentActionNotification", CFSTR("DataDetectorsUI"));
      if (v19)
        v20 = *v19;
      else
        v20 = 0;
      objc_storeStrong((id *)&registerNotifications__DDDetectionControllerWillPresentActionNotification, v20);
    }
    if (!registerNotifications__DDDetectionControllerDidDismissActionNotification)
    {
      v21 = (void **)MEMORY[0x193FF3C24]("DDDetectionControllerDidDismissActionNotification", CFSTR("DataDetectorsUI"));
      if (v21)
        v22 = *v21;
      else
        v22 = 0;
      objc_storeStrong((id *)&registerNotifications__DDDetectionControllerDidDismissActionNotification, v22);
    }
    if (registerNotifications__DDDetectionControllerWillPresentActionNotification)
    {
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "addObserver:selector:name:object:", self, sel__dataDetectorsWillPresentNotification_, registerNotifications__DDDetectionControllerWillPresentActionNotification, 0);

    }
    if (registerNotifications__DDDetectionControllerDidDismissActionNotification)
    {
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "addObserver:selector:name:object:", self, sel__dataDetectorsDidDismissNotification_, registerNotifications__DDDetectionControllerDidDismissActionNotification, 0);

    }
  }
}

- (void)_registerSendProgressDelegate
{
  objc_super v2;

  v2.receiver = self;
  v2.super_class = (Class)CKChatController;
  -[CKCoreChatController _registerSendProgressDelegate](&v2, sel__registerSendProgressDelegate);
}

- (void)registerNotificationsForConversation:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  objc_super v16;

  v16.receiver = self;
  v16.super_class = (Class)CKChatController;
  -[CKCoreChatController registerNotificationsForConversation:](&v16, sel_registerNotificationsForConversation_, a3);
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObserver:selector:name:object:", self, sel__conversationParticipantsChanged_, CFSTR("CKConversationParticipantsDidChangeNotification"), v5);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObserver:selector:name:object:", self, sel__conversationJoinStateDidChange_, CFSTR("CKConversationJoinStateDidChangeNotification"), v7);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = *MEMORY[0x1E0D35328];
  -[CKCoreChatController conversation](self, "conversation");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "chat");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addObserver:selector:name:object:", self, sel__handleChatItemDidChange_, v9, v11);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = *MEMORY[0x1E0D353E0];
  -[CKCoreChatController conversation](self, "conversation");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "chat");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "addObserver:selector:name:object:", self, sel__handleKeyTransparencyShouldRefresh_, v13, v15);

}

- (void)_displayNameUpdatedNotification:(id)a3
{
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)CKChatController;
  -[CKCoreChatController _displayNameUpdatedNotification:](&v4, sel__displayNameUpdatedNotification_, a3);
  -[CKCoreChatController _updateTitleAnimated:](self, "_updateTitleAnimated:", 1);
}

- (BOOL)shouldListParticipantsInTitle
{
  int v3;
  void *v4;

  if (-[CKChatController shouldShowAvatarViewInNavBarCanvas](self, "shouldShowAvatarViewInNavBarCanvas"))
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    -[CKChatController splitViewController](self, "splitViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v4, "isCollapsed") ^ 1;

  }
  return v3;
}

- (void)_transferFinishedNotification:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  id v9;

  objc_msgSend(a3, "object");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "chatItems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "__ck_indexOfTransfer:", v9);

  if (v6 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(v9, "IMMessage");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "isFromMe"))
    {

    }
    else
    {
      v8 = objc_msgSend(v9, "isFileDataReady");

      if (v8)
        -[CKChatController updateQLPreviewControllerIfVisible](self, "updateQLPreviewControllerIfVisible");
    }
  }

}

- (void)_transferRestoredNotification:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  uint8_t buf[4];
  void *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "chatItems");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "__ck_indexOfTransfer:", v5);

  if (v8 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (IMOSLoggingEnabled())
    {
      CKLogCStringForType(46);
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        v13 = v5;
        v14 = 2048;
        v15 = v8;
        _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_DEBUG, "Transfer %@ restored. Reload indexes %lu.", buf, 0x16u);
      }

    }
    if (os_log_shim_legacy_logging_enabled() && _CKShouldLog())
    {
      v10 = v5;
      v11 = v8;
      _CKLog();
    }
    -[CKChatController updateQLPreviewControllerIfVisible](self, "updateQLPreviewControllerIfVisible", v10, v11);
  }

}

- (void)_handleAddressBookChangedNotification:(id)a3
{
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)CKChatController;
  -[CKCoreChatController _handleAddressBookChangedNotification:](&v4, sel__handleAddressBookChangedNotification_, a3);
  if (-[CKChatController allowsMentions](self, "allowsMentions"))
    -[CKChatController _reloadMentionsData](self, "_reloadMentionsData");
}

- (void)_reloadMentionsData
{
  void *v2;
  void *v3;
  id v4;

  -[CKChatController entryView](self, "entryView");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "contentView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "textView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "reloadMentionsData");

}

- (void)_raiseToListenSettingChanged:(id)a3
{
  void *v4;
  id v5;

  -[CKChatController updateRaiseGesture](self, "updateRaiseGesture", a3);
  +[CKConversationList sharedConversationList](CKConversationList, "sharedConversationList");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setNeedsReload");

  -[CKCoreChatController conversation](self, "conversation");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "loadAllMessages");

}

- (void)_applicationWillResignActive:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;

  -[CKChatController setIsShowingCamera:](self, "setIsShowingCamera:", 0);
  -[CKCoreChatController inputController](self, "inputController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "isInputViewVisible") & 1) != 0)
  {
    -[CKChatController entryView](self, "entryView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "contentView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "activeView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isFirstResponder");

    if ((v8 & 1) != 0)
    {
      v9 = 1;
      goto LABEL_7;
    }
  }
  else
  {

  }
  if (!-[CKChatController appModalIsDisplayed](self, "appModalIsDisplayed"))
    return;
  v9 = 4;
LABEL_7:
  -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", v9);
}

- (void)_applicationDidBecomeActive:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;

  -[CKChatController updateRaiseGesture](self, "updateRaiseGesture", a3);
  -[CKCoreChatController inputController](self, "inputController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "isInputViewVisible") & 1) != 0)
  {
    -[CKChatController entryView](self, "entryView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "contentView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "activeView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isFirstResponder");

    if ((v8 & 1) != 0)
      goto LABEL_7;
  }
  else
  {

  }
  if (-[CKChatController targetFirstResponder](self, "targetFirstResponder") == 1)
  {
    -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
    return;
  }
LABEL_7:
  -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 0);
}

- (void)_conversationParticipantsChanged:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  objc_super v9;

  -[CKChatController _updateRecipientCapabilities](self, "_updateRecipientCapabilities", a3);
  -[CKChatController reloadInputViews](self, "reloadInputViews");
  -[CKChatController addOrRemoveEntryViewIfNeeded](self, "addOrRemoveEntryViewIfNeeded");
  if (-[CKChatController shouldUseMacRecipientsView](self, "shouldUseMacRecipientsView"))
  {
    -[CKChatController macRecipientsController](self, "macRecipientsController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "refreshRecipients");

  }
  -[CKCoreChatController conversation](self, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "hasLeftGroupChat") & 1) != 0)
    goto LABEL_6;
  -[CKCoreChatController conversation](self, "conversation");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "isBusinessChatDisabled"))
  {

LABEL_6:
LABEL_7:
    v9.receiver = self;
    v9.super_class = (Class)CKChatController;
    -[CKChatController becomeFirstResponder](&v9, sel_becomeFirstResponder);
    goto LABEL_8;
  }
  -[CKCoreChatController conversation](self, "conversation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isReadOnlyChat");

  if ((v8 & 1) != 0)
    goto LABEL_7;
  if (-[CKChatController allowsMentions](self, "allowsMentions"))
    -[CKChatController _reloadMentionsData](self, "_reloadMentionsData");
LABEL_8:
  -[CKCoreChatController _updateTitleAnimated:](self, "_updateTitleAnimated:", 1);
}

- (void)_conversationJoinStateDidChange:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  id v9;

  -[CKChatController reloadInputViews](self, "reloadInputViews", a3);
  -[CKChatController addOrRemoveEntryViewIfNeeded](self, "addOrRemoveEntryViewIfNeeded");
  -[CKCoreChatController conversation](self, "conversation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "hasLeftGroupChat") & 1) != 0)
    goto LABEL_4;
  -[CKCoreChatController conversation](self, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isBusinessChatDisabled"))
  {

LABEL_4:
LABEL_5:
    -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 0);
    -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
    goto LABEL_6;
  }
  -[CKCoreChatController conversation](self, "conversation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isReadOnlyChat");

  if ((v8 & 1) != 0)
    goto LABEL_5;
LABEL_6:
  if (-[CKChatController shouldUseMacRecipientsView](self, "shouldUseMacRecipientsView"))
  {
    -[CKChatController macRecipientsController](self, "macRecipientsController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      -[CKChatController macRecipientsController](self, "macRecipientsController");
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "refreshRecipients");

    }
  }
}

- (void)_dataDetectorsWillPresentNotification:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  -[CKChatController entryView](self, "entryView", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "contentView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  self->_entryViewWasActiveBeforePresentingDataDetector = objc_msgSend(v5, "isActive");

  if (self->_entryViewWasActiveBeforePresentingDataDetector)
  {
    -[CKChatController entryView](self, "entryView");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "contentView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "activeView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "resignFirstResponder");

  }
}

- (void)_dataDetectorsDidDismissNotification:(id)a3
{
  _QWORD block[5];

  if (self->_entryViewWasActiveBeforePresentingDataDetector)
    -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __57__CKChatController__dataDetectorsDidDismissNotification___block_invoke;
  block[3] = &unk_1E274A208;
  block[4] = self;
  dispatch_async(MEMORY[0x1E0C80D38], block);
}

uint64_t __57__CKChatController__dataDetectorsDidDismissNotification___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "becomeFirstResponder");
}

- (void)_sizeEffectPickerWindow
{
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  double v20;
  double v21;

  -[CKChatController effectPickerWindow](self, "effectPickerWindow");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[CKChatController effectPickerViewController](self, "effectPickerViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(MEMORY[0x1E0CEA508], "__ck_currentDeviceIsPadOrMac"))
    {
      v20 = 0.0;
      v21 = 0.0;
      -[CKChatController messageEntryViewWidth:andOffset:](self, "messageEntryViewWidth:andOffset:", &v21, &v20);
      -[CKChatController view](self, "view");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "bounds");
      v7 = v6;
      v9 = v8;

      objc_msgSend(v3, "setFrame:", v20, v7, v21, v9);
      v10 = *MEMORY[0x1E0CEBB18];
      v11 = -1.0;
    }
    else
    {
      -[CKChatController view](self, "view");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "window");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "frame");
      objc_msgSend(v3, "setFrame:");

      v10 = *MEMORY[0x1E0CEBB18];
      v11 = 1.0;
    }
    objc_msgSend(v3, "setLevel:", v10 + v11);
    objc_msgSend(v4, "view");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "bounds");
    objc_msgSend(v14, "setFrame:");

    -[CKChatController entryView](self, "entryView");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "sendButtonFrameInScreenCoordinates");
    v17 = v16;

    objc_msgSend(v4, "setCloseButtonYPosition:", v17);
    objc_msgSend(v4, "view");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setNeedsLayout");

    objc_msgSend(v4, "view");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "layoutIfNeeded");

  }
}

- (void)_switchedToEmojiKeyboard:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;

  -[CKChatController entryView](self, "entryView", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "contentView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "activeView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isFirstResponder");

  if (v7)
  {
    objc_msgSend(MEMORY[0x1E0CEA6F8], "sharedInputModeController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "currentInputModeInPreference");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController setSavedKeyboardInputMode:](self, "setSavedKeyboardInputMode:", v9);

    -[CKChatController setIsShowingEmojiKeyboard:](self, "setIsShowingEmojiKeyboard:", 1);
    -[CKChatController updateAppStripVisibility:animated:](self, "updateAppStripVisibility:animated:", 0, 0);
  }
}

- (void)_switchedAwayFromEmojiKeyboard:(id)a3
{
  id v4;

  -[CKChatController setIsShowingEmojiKeyboard:](self, "setIsShowingEmojiKeyboard:", 0);
  -[CKChatController entryView](self, "entryView");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CKChatController messageEntryViewDidChange:isTextChange:isShelfChange:](self, "messageEntryViewDidChange:isTextChange:isShelfChange:", v4, 0, 0);

}

- (void)_initializeEffectPicker
{
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  CKEffectPickerMacViewController *v26;
  void *v27;
  void *v28;
  void *v29;
  CKEffectPickerMacViewController *v30;
  CKEffectPickerViewController *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  NSObject *v42;
  _QWORD v43[5];
  double v44;
  uint8_t buf[16];

  -[CKChatController entryView](self, "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "sendButtonFrameInScreenCoordinates");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  -[CKChatController entryView](self, "entryView");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "contentView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "superview");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v14, "frame");
  v16 = v15;
  v18 = v17;
  objc_msgSend(v14, "superview");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "convertPoint:toView:", 0, v16, v18);
  v21 = v20;
  v23 = v22;

  v24 = v21 + 1.0;
  if (objc_msgSend(MEMORY[0x1E0CEA508], "__ck_currentDeviceIsPadOrMac"))
  {
    v44 = 0.0;
    *(_QWORD *)buf = 0;
    -[CKChatController messageEntryViewWidth:andOffset:](self, "messageEntryViewWidth:andOffset:", buf, &v44);
    v5 = v5 - v44;
    v24 = v24 - v44;
  }
  v25 = v23 + 1.0;
  if (CKIsRunningInMacCatalyst())
  {
    v26 = [CKEffectPickerMacViewController alloc];
    -[CKChatController entryView](self, "entryView");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "composition");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKCoreChatController conversation](self, "conversation");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = -[CKEffectPickerMacViewController initWithComposition:balloonViewOrigin:color:](v26, "initWithComposition:balloonViewOrigin:color:", v28, objc_msgSend(v29, "sendButtonColor"), v24, v25);

    -[CKEffectPickerMacViewController setModalPresentationStyle:](v30, "setModalPresentationStyle:", 6);
    -[CKEffectPickerMacViewController setShowingInStandAloneWindow:](v30, "setShowingInStandAloneWindow:", -[CKCoreChatController showingInStandAloneWindow](self, "showingInStandAloneWindow"));
  }
  else
  {
    v31 = [CKEffectPickerViewController alloc];
    -[CKChatController entryView](self, "entryView");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "composition");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController entryView](self, "entryView");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "sendButton");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = -[CKEffectPickerViewController initWithComposition:sendButtonFrame:balloonViewOrigin:color:](v31, "initWithComposition:sendButtonFrame:balloonViewOrigin:color:", v33, objc_msgSend(v35, "ckTintColor"), v5, v7, v9, v11, v24, v25);

  }
  -[CKEffectPickerMacViewController setDelegate:](v30, "setDelegate:", self);
  -[CKChatController setEffectPickerViewController:](self, "setEffectPickerViewController:", v30);
  if (CKIsRunningInMacCatalyst())
  {
    v43[0] = MEMORY[0x1E0C809B0];
    v43[1] = 3221225472;
    v43[2] = __43__CKChatController__initializeEffectPicker__block_invoke;
    v43[3] = &unk_1E274A208;
    v43[4] = self;
    -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v30, 0, v43);
  }
  else
  {
    v36 = objc_alloc(MEMORY[0x1E0CEAC18]);
    -[CKChatController view](self, "view");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "window");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "windowScene");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = (void *)objc_msgSend(v36, "initWithWindowScene:", v39);

    -[CKChatController setEffectPickerWindow:](self, "setEffectPickerWindow:", v40);
    objc_msgSend(v40, "setRootViewController:", v30);
    -[CKChatController _sizeEffectPickerWindow](self, "_sizeEffectPickerWindow");
    objc_msgSend(v40, "setHidden:", 0);
    objc_msgSend(MEMORY[0x1E0CEA6C8], "activeKeyboard");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "setTypingEnabled:", 0);

    -[CKChatController requestShowKeyboardSnapshotForReason:](self, "requestShowKeyboardSnapshotForReason:", 4);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v42, OS_LOG_TYPE_INFO, "Hiding entry view", buf, 2u);
      }

    }
  }

}

uint64_t __43__CKChatController__initializeEffectPicker__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "refreshMacToolbar");
}

- (void)_handleIsUnexpectedlyLoggedOutChanged:(id)a3
{
  id v3;

  -[CKChatController transcriptInlineNotificationUpdater](self, "transcriptInlineNotificationUpdater", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setNeedsUpdate");

}

- (void)composeRecipientViewShouldResignFirstResponder
{
  -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 0);
}

- (void)_transferUpdated:(id)a3
{
  BOOL v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  objc_msgSend(a3, "object");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v12, "updateReason") != 1 && objc_msgSend(v12, "updateReason") != 2;
  v5 = v12;
  if (v12 && !v4)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "associatedChatItems");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = objc_msgSend(v7, "__ck_indexOfTransfer:", v12);
    if (v8 != 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(v7, "objectAtIndexedSubscript:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        -[CKCoreChatController chat](self, "chat");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "IMChatItem");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "stickerRepositionedForAssociatedChatItem:", v11);

      }
    }

    v5 = v12;
  }

}

- (void)_transferCompleted:(id)a3
{
  id v4;
  void *v5;
  CKChatController *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  CKMediaObject *mediaObjectToDownload;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  void *v24;
  int v25;
  dispatch_time_t v26;
  void *v27;
  id v28;
  _QWORD block[5];
  id v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "object");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = self;
  -[CKChatController mediaObjectToDownload](self, "mediaObjectToDownload");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "transferGUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "guid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v9, "isEqualToString:", v10);

    if (v11)
    {
      mediaObjectToDownload = self->_mediaObjectToDownload;
      self->_mediaObjectToDownload = 0;

      -[CKChatController showViewerForMediaObject:](self, "showViewerForMediaObject:", v8);
    }
  }
  if (v5 && objc_msgSend(v5, "commSafetySensitive"))
  {
    v27 = v8;
    v28 = v4;
    v13 = v5;
    objc_msgSend(v4, "object");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "guid");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKCoreChatController collectionViewController](v6, "collectionViewController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "chatItems");
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v18 = v17;
    v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v33 != v21)
            objc_enumerationMutation(v18);
          v23 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
          if (objc_msgSend(v23, "supportsCommunicationSafety"))
          {
            objc_msgSend(v23, "commSafetyTransferGUID");
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            v25 = objc_msgSend(v15, "isEqualToString:", v24);

            if (v25)
            {
              v26 = dispatch_time(0, 200000000);
              block[0] = MEMORY[0x1E0C809B0];
              block[1] = 3221225472;
              block[2] = __39__CKChatController__transferCompleted___block_invoke;
              block[3] = &unk_1E274A0B8;
              block[4] = v6;
              v30 = v13;
              v31 = v23;
              dispatch_after(v26, MEMORY[0x1E0C80D38], block);

            }
          }
        }
        v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      }
      while (v20);
    }

    v8 = v27;
    v4 = v28;
    v5 = v13;
  }

}

void __39__CKChatController__transferCompleted___block_invoke(id *a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  objc_msgSend(a1[4], "chat");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(a1[5], "commSafetySensitive");
  objc_msgSend(a1[6], "IMChatItem");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateCommSafety:forChatItem:", v2, v3);

}

- (void)_textInputModeDidChange:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  BOOL v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(v3, "userInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0CEBD38]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "userInfo");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0CEBD40]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "userInfo");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x1E0CEBD48]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
    v10 = v7 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = objc_alloc_init((Class)MEMORY[0x193FF3C18](CFSTR("NPSManager"), CFSTR("NanoPreferencesSync")));
    v12 = (void *)MEMORY[0x1E0C99E60];
    v15[0] = v7;
    v15[1] = v9;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setWithArray:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "synchronizeUserDefaultsDomain:keys:", v5, v14);

  }
}

- (void)inputLanguageDidChange:(id)a3
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __43__CKChatController_inputLanguageDidChange___block_invoke;
  block[3] = &unk_1E274A208;
  block[4] = self;
  dispatch_async(MEMORY[0x1E0C80D38], block);
}

void __43__CKChatController_inputLanguageDidChange___block_invoke(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  objc_msgSend(v1, "entryView");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "updateEntryViewHeightIncludingAppStrip:animated:", objc_msgSend(v2, "shouldShowAppStrip"), 0);

}

- (void)invalidateEntryViewForNewCompose
{
  -[CKChatController setEntryView:](self, "setEntryView:", 0);
}

- (void)setEntryViewOverrideForNewCompose:(id)a3
{
  id v4;

  v4 = a3;
  objc_msgSend(v4, "setDelegate:", self);
  -[CKChatController setEntryView:](self, "setEntryView:", v4);
  objc_msgSend(v4, "_overrideInputAccessoryViewNextResponderWithResponder:", self);

  self->_entryViewShouldBecomeTargetFirstResponderForPendingDraft = 1;
}

- (void)cleanupPostComposeTransitionWithKBFrame:(CGRect)a3
{
  void *v4;
  _BOOL8 v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  -[CKScrollViewController primeWithKeyboardFrame:](self, "primeWithKeyboardFrame:", a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  -[CKChatController entryView](self, "entryView");
  v15 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setConversation:", 0);
  -[CKCoreChatController conversation](self, "conversation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setConversation:", v4);

  objc_msgSend(v15, "setDelegate:", self);
  objc_msgSend(v15, "setClickInteractionDelegate:", self);
  v5 = -[CKScrollViewController isKeyboardVisible](self, "isKeyboardVisible");
  -[CKCoreChatController conversation](self, "conversation");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setConversation:", v6);

  objc_msgSend(v15, "setSendingMessage:", -[CKCoreChatController isSendingMessage](self, "isSendingMessage"));
  objc_msgSend(v15, "setKeyboardVisible:", v5);
  objc_msgSend(v15, "setShowAppStrip:animated:completion:", CKShowAppStripInEntryView(), 0, 0);
  objc_msgSend(v15, "contentView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "textView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "setTextDropDelegate:", self);
  objc_msgSend(v8, "setPasteDelegate:", self);
  -[CKCoreChatController chat](self, "chat");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "supportsCapabilities:", 0x8000) ^ 1;

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "pasteConfigurationDisablingKeyboardStickers:", v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "setPasteConfiguration:", v12);
  -[CKCoreChatController inputController](self, "inputController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController entryView](self, "entryView");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setEntryView:", v14);

}

- (void)setEntryView:(id)a3
{
  CKMessageEntryViewController *v4;
  void *v5;
  id v6;

  v6 = a3;
  if (v6)
  {
    v4 = -[CKMessageEntryViewController initWithEntryView:]([CKMessageEntryViewController alloc], "initWithEntryView:", v6);
    -[CKChatController setEntryViewController:](self, "setEntryViewController:", v4);

  }
  else
  {
    -[CKChatController setEntryViewController:](self, "setEntryViewController:", 0);
  }
  -[CKChatController entryViewController](self, "entryViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setInputAccessoryViewControllerEnabled:", -[CKChatController inputAccessoryViewControllerEnabled](self, "inputAccessoryViewControllerEnabled"));

}

- (CKMessageEntryView)entryView
{
  void *v2;
  void *v3;

  -[CKChatController entryViewController](self, "entryViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return (CKMessageEntryView *)v3;
}

- (void)resignFirstResponderOnEntryViewIfNeeded
{
  void *v3;
  int v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  _BOOL4 v9;
  BOOL v10;
  void *v11;
  void *v12;
  id v13;

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEntryViewInputAccessory");

  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "userInterfaceIdiom");

    objc_msgSend(MEMORY[0x1E0CEA6E8], "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isInHardwareKeyboardMode");

    v9 = -[CKChatController isCollapsed](self, "isCollapsed");
    v10 = -[CKCoreChatController isInline](self, "isInline");
    if (v6 == 1 && v9 && v8 && !v10)
    {
      -[CKChatController entryView](self, "entryView");
      v13 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "contentView");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "textView");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "resignFirstResponder");

    }
  }
}

- (BOOL)appManagerDisplayedInMessages
{
  int v3;
  void *v4;
  int v5;
  NSObject *v6;
  uint8_t v8[16];

  v3 = CKIsRunningInMessages();
  if (v3)
  {
    -[CKCoreChatController inputController](self, "inputController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "appManagerIsDisplayed");

    if (v5)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v8 = 0;
          _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "EntryView Debug - App Manager is displayed in Messages", v8, 2u);
        }

      }
      LOBYTE(v3) = 1;
    }
    else
    {
      LOBYTE(v3) = 0;
    }
  }
  return v3;
}

- (BOOL)appModalIsDisplayed
{
  int v3;
  void *v4;
  int v5;
  NSObject *v6;
  uint8_t v8[16];

  v3 = CKIsRunningInMessages();
  if (v3)
  {
    -[CKCoreChatController inputController](self, "inputController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "appModalIsDisplayed");

    if (v5)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v8 = 0;
          _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "EntryView Debug - App modal is displayed in Messages", v8, 2u);
        }

      }
      LOBYTE(v3) = 1;
    }
    else
    {
      LOBYTE(v3) = 0;
    }
  }
  return v3;
}

- (BOOL)inputAccessoryViewControllerEnabled
{
  void *v3;
  int v4;
  void *v5;
  void *v6;
  char v7;
  int v8;

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isTranscriptSharingEnabled");

  if (v4
    && (-[CKCoreChatController conversation](self, "conversation"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v5, "chat"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        v7 = objc_msgSend(v6, "isStewieSharingChat"),
        v6,
        v5,
        (v7 & 1) != 0))
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    v8 = CKInputAccessoryViewControllerEnabled();
    if (v8)
      LOBYTE(v8) = !-[CKCoreChatController isShowingLockoutView](self, "isShowingLockoutView");
  }
  return v8;
}

- (id)inputAccessoryViewController
{
  void *v3;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  char v9;
  NSObject *v10;
  NSObject *v11;
  objc_class *v12;
  uint64_t v13;
  uint64_t v14;
  objc_class *v15;
  void *v16;
  void *v17;
  objc_class *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  int v25;
  const __CFString *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint8_t buf[4];
  id v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  id v44;
  __int16 v45;
  id v46;
  __int16 v47;
  id v48;
  __int16 v49;
  id v50;
  __int16 v51;
  id v52;
  __int16 v53;
  const __CFString *v54;
  uint64_t v55;
  CGRect v56;

  v55 = *MEMORY[0x1E0C80C00];
  if (!-[CKChatController inputAccessoryViewControllerEnabled](self, "inputAccessoryViewControllerEnabled"))
    return 0;
  if (-[CKChatController shouldShowEntryView](self, "shouldShowEntryView"))
  {
    -[CKChatController entryViewController](self, "entryViewController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }
  -[CKCoreChatController inputController](self, "inputController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "entryView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setEntryView:", v6);

  if (-[CKChatController appManagerDisplayedInMessages](self, "appManagerDisplayedInMessages"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "EntryView Debug - Not vending IAVC, -appManagerDisplayedInMessages is YES", buf, 2u);
      }

    }
    v3 = 0;
  }
  if (-[CKChatController appModalIsDisplayed](self, "appModalIsDisplayed"))
  {
    -[CKCoreChatController inputController](self, "inputController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isDismissingAppModal");

    if ((v9 & 1) == 0)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, "EntryView Debug - Not vending IAVC, -appModalIsDisplayed is YES", buf, 2u);
        }

      }
      v3 = 0;
    }
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = (objc_class *)objc_opt_class();
      NSStringFromClass(v12);
      v36 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "view");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "alpha");
      v14 = v13;
      objc_msgSend(v3, "view");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "frame");
      NSStringFromCGRect(v56);
      v34 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "view");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "window");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (objc_class *)objc_opt_class();
      NSStringFromClass(v15);
      v33 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "view");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "window");
      v35 = (id)objc_claimAutoreleasedReturnValue();
      -[CKChatController view](self, "view");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "window");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "firstResponder");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = (objc_class *)objc_opt_class();
      NSStringFromClass(v18);
      v19 = (id)objc_claimAutoreleasedReturnValue();
      -[CKChatController view](self, "view");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "window");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "firstResponder");
      v22 = (id)objc_claimAutoreleasedReturnValue();
      -[CKChatController view](self, "view");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "window");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v24, "isKeyWindow");
      v26 = CFSTR("NO");
      *(_DWORD *)buf = 138414338;
      v38 = v36;
      v39 = 2048;
      if (v25)
        v26 = CFSTR("YES");
      v40 = v3;
      v41 = 2048;
      v42 = v14;
      v43 = 2112;
      v44 = v34;
      v45 = 2112;
      v46 = v33;
      v47 = 2048;
      v48 = v35;
      v49 = 2112;
      v50 = v19;
      v51 = 2048;
      v52 = v22;
      v53 = 2112;
      v54 = v26;
      _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "EntryView Debug - IAVC %@ <%p> Alpha %f Frame %@ IAV Window %@ <%p>  Current FR %@ <%p> View window is key - %@", buf, 0x5Cu);

    }
  }
  return v3;
}

- (id)inputAccessoryView
{
  void *v3;
  int v4;
  void *v5;
  void *v7;
  void *v8;
  char v9;
  NSObject *v10;
  void *v11;
  char v12;
  NSObject *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  objc_class *v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v21;
  void *v22;
  objc_class *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  int v30;
  const __CFString *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint8_t buf[4];
  id v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  id v46;
  __int16 v47;
  id v48;
  __int16 v49;
  id v50;
  __int16 v51;
  id v52;
  __int16 v53;
  id v54;
  __int16 v55;
  const __CFString *v56;
  uint64_t v57;
  CGRect v58;

  v57 = *MEMORY[0x1E0C80C00];
  if (-[CKChatController inputAccessoryViewControllerEnabled](self, "inputAccessoryViewControllerEnabled")
    || -[CKCoreChatController isShowingLockoutView](self, "isShowingLockoutView")
    || (+[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v3, "isEntryViewInputAccessory"),
        v3,
        !v4))
  {
    v5 = 0;
  }
  else
  {
    if (-[CKChatController shouldShowEntryView](self, "shouldShowEntryView"))
    {
      -[CKChatController entryView](self, "entryView");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v5 = 0;
    }
    -[CKCoreChatController inputController](self, "inputController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setEntryView:", v5);

    if (-[CKChatController appManagerDisplayedInMessages](self, "appManagerDisplayedInMessages"))
    {
      -[CKChatController presentedViewController](self, "presentedViewController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "isBeingDismissed");

      if ((v9 & 1) == 0)
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v10 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, "EntryView Debug - Not vending IAV, -appManagerDisplayedInMessages is YES", buf, 2u);
          }

        }
        v5 = 0;
      }
    }
    if (-[CKChatController appModalIsDisplayed](self, "appModalIsDisplayed"))
    {
      -[CKCoreChatController inputController](self, "inputController");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "isDismissingAppModal");

      if ((v12 & 1) == 0)
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18DFCD000, v13, OS_LOG_TYPE_INFO, "EntryView Debug - Not vending IAV, -appModalIsDisplayed is YES", buf, 2u);
          }

        }
        v5 = 0;
      }
    }
    -[CKChatController presentedViewController](self, "presentedViewController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (v14 && (objc_msgSend(v14, "isBeingDismissed") & 1) == 0)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18DFCD000, v16, OS_LOG_TYPE_INFO, "EntryView Debug - Not vending IAV, presenting view controller", buf, 2u);
        }

      }
      v5 = 0;
    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        v18 = (objc_class *)objc_opt_class();
        NSStringFromClass(v18);
        v38 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "alpha");
        v20 = v19;
        objc_msgSend(v5, "frame");
        NSStringFromCGRect(v58);
        v36 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "window");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = (objc_class *)objc_opt_class();
        NSStringFromClass(v21);
        v35 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "window");
        v37 = (id)objc_claimAutoreleasedReturnValue();
        -[CKChatController view](self, "view");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "window");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "firstResponder");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = (objc_class *)objc_opt_class();
        NSStringFromClass(v23);
        v24 = (id)objc_claimAutoreleasedReturnValue();
        -[CKChatController view](self, "view");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "window");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "firstResponder");
        v27 = (id)objc_claimAutoreleasedReturnValue();
        -[CKChatController view](self, "view");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "window");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = objc_msgSend(v29, "isKeyWindow");
        v31 = CFSTR("NO");
        *(_DWORD *)buf = 138414338;
        v40 = v38;
        v41 = 2048;
        if (v30)
          v31 = CFSTR("YES");
        v42 = v5;
        v43 = 2048;
        v44 = v20;
        v45 = 2112;
        v46 = v36;
        v47 = 2112;
        v48 = v35;
        v49 = 2048;
        v50 = v37;
        v51 = 2112;
        v52 = v24;
        v53 = 2048;
        v54 = v27;
        v55 = 2112;
        v56 = v31;
        _os_log_impl(&dword_18DFCD000, v17, OS_LOG_TYPE_INFO, "EntryView Debug - IAV %@ <%p> Alpha %f Frame %@ IAV Window %@ <%p>  Current FR %@ <%p> View window is key - %@", buf, 0x5Cu);

      }
    }

  }
  return v5;
}

- (id)inputViewController
{
  void *v3;
  void *v4;

  if (-[CKChatController isShowingPreview](self, "isShowingPreview"))
  {
    v3 = 0;
  }
  else
  {
    -[CKCoreChatController inputController](self, "inputController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "inputViewController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v3;
}

- (UIEdgeInsets)_marginInsetsForEntryView
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  uint64_t v12;
  double v13;
  double v14;
  void *v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  UIEdgeInsets result;

  -[CKChatController systemMinimumLayoutMargins](self, "systemMinimumLayoutMargins");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  -[CKChatController view](self, "view");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "effectiveUserInterfaceLayoutDirection");
  if (v12)
    v13 = v10;
  else
    v13 = v6;
  if (!v12)
    v6 = v10;

  v14 = *MEMORY[0x1E0CEB4B0];
  if (*(double *)(MEMORY[0x1E0CEB4B0] + 8) == v13
    && v14 == v4
    && *(double *)(MEMORY[0x1E0CEB4B0] + 24) == v6
    && *(double *)(MEMORY[0x1E0CEB4B0] + 16) == v8)
  {
    -[CKCoreChatController delegate](self, "delegate", v14);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      -[CKCoreChatController delegate](self, "delegate");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "initialSystemMinimumLayoutMarginsForChatController:", self);
      v4 = v20;
      v13 = v21;
      v8 = v22;
      v6 = v23;

    }
  }
  v24 = v4;
  v25 = v13;
  v26 = v8;
  v27 = v6;
  result.right = v27;
  result.bottom = v26;
  result.left = v25;
  result.top = v24;
  return result;
}

- (void)setSendingMessage:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  objc_super v6;

  v3 = a3;
  v6.receiver = self;
  v6.super_class = (Class)CKChatController;
  -[CKCoreChatController setSendingMessage:](&v6, sel_setSendingMessage_);
  -[CKChatController entryView](self, "entryView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setSendingMessage:", v3);

}

- (BOOL)reloadEntryViewForStagedPluginMessage
{
  return 0;
}

- (void)_updateEntryViewPasteConfiguration
{
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  int v11;
  NSObject *v12;
  const __CFString *v13;
  NSObject *v14;
  const __CFString *v15;
  int v16;
  const __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isCarrierPigeonEnabled");

  if (v4)
  {
    -[CKChatController entryView](self, "entryView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "contentView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "textView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
LABEL_21:

      return;
    }
    v8 = objc_msgSend(v7, "disableKeyboardStickers");
    -[CKCoreChatController chat](self, "chat");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      -[CKCoreChatController chat](self, "chat");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "supportsCapabilities:", 0x8000) ^ 1;

      if (v8 == v11)
      {
LABEL_15:
        -[CKChatController setShouldUpdateEntryViewPasteConfiguration:](self, "setShouldUpdateEntryViewPasteConfiguration:", 0);
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            v15 = CFSTR("NO");
            if (v8)
              v15 = CFSTR("YES");
            v16 = 138412290;
            v17 = v15;
            _os_log_impl(&dword_18DFCD000, v14, OS_LOG_TYPE_INFO, "Configuration of stickers in keyboard has already been updated to hide:(%@). Ignoring paste configuration update.", (uint8_t *)&v16, 0xCu);
          }

        }
        goto LABEL_21;
      }
    }
    else
    {
      if ((v8 & 1) == 0)
        goto LABEL_15;
      v11 = 0;
    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        v13 = CFSTR("NO");
        if (v11)
          v13 = CFSTR("YES");
        v16 = 138412290;
        v17 = v13;
        _os_log_impl(&dword_18DFCD000, v12, OS_LOG_TYPE_INFO, "Updating paste configuration of entry text view to hide stickers:(%@)", (uint8_t *)&v16, 0xCu);
      }

    }
    -[CKChatController setShouldUpdateEntryViewPasteConfiguration:](self, "setShouldUpdateEntryViewPasteConfiguration:", 1);
    -[CKChatController reloadEntryViewIfNeeded](self, "reloadEntryViewIfNeeded");
    goto LABEL_21;
  }
}

- (void)reloadEntryViewIfNeeded
{
  NSObject *v3;
  void *v4;
  _BOOL4 v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  _BOOL4 AddressedHandle;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  int v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  int v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  _BOOL4 v42;
  void *v43;
  int v44;
  NSObject *v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  void *v66;
  void *v67;
  int v68;
  uint64_t v69;
  CKMessageEntryView *v70;
  int v71;
  _BOOL8 v72;
  _BOOL8 v73;
  void *v74;
  CKMessageEntryView *v75;
  CKMentionsController *v76;
  void *v77;
  void *v78;
  void *v79;
  CKMentionsController *v80;
  CKMessageEntryViewContainerView *v81;
  void *v82;
  void *v83;
  void *v84;
  _BOOL8 v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  char v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  _BOOL4 v104;
  int v105;
  int v106;
  char v107;
  unsigned int v108;
  int v109;
  void *v110;
  void *v111;
  uint8_t buf[4];
  const char *v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  +[CKPPTSubTest start:](CKPPTSubTest, "start:", CFSTR("reloadEntryViewIfNeeded"));
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v113 = "-[CKChatController reloadEntryViewIfNeeded]";
      _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "CKMessageEntryView - %s", buf, 0xCu);
    }

  }
  -[CKCoreChatController inputController](self, "inputController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4 == 0;

  if (v5)
    -[CKChatController loadChatInputController](self, "loadChatInputController");
  -[CKCoreChatController conversation](self, "conversation");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    -[CKChatController entryView](self, "entryView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v113) = v7 == 0;
        _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "CKMessageEntryView - shouldUpdateEntryView = %d", buf, 8u);
      }

    }
    -[CKCoreChatController conversation](self, "conversation");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "lastAddressedHandle");
    v111 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKCoreChatController conversation](self, "conversation");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "lastAddressedSIMID");
    v110 = (void *)objc_claimAutoreleasedReturnValue();

    AddressedHandle = CKShowSubjectEnabledForLastAddressedHandle(v111, v110);
    -[CKCoreChatController conversation](self, "conversation");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v109 = objc_msgSend(v12, "isStewieConversation");

    -[CKCoreChatController conversation](self, "conversation");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "sendingService");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v14, "__ck_isiMessageLite"))
    {

    }
    else
    {
      -[CKCoreChatController conversation](self, "conversation");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "sendingService");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v16, "__ck_isSatelliteSMS") & 1) != 0)
      {
        v17 = 1;
      }
      else
      {
        -[CKCoreChatController conversation](self, "conversation");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "chat");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v19, "shouldDisplayOffGridModeStatus");

      }
      if (!v17)
      {
        v20 = 0;
        v108 = AddressedHandle & ~v109;
LABEL_20:
        v107 = v20;
        v21 = v20 | v109;
        if (v7)
        {
          -[CKChatController entryView](self, "entryView");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v106 = objc_msgSend(v22, "shouldShowSubject");

          -[CKChatController entryView](self, "entryView");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v105 = objc_msgSend(v23, "shouldShowPluginButtons");
          v104 = -[CKChatController pluginButtonsEnabled](self, "pluginButtonsEnabled");

          -[CKChatController entryView](self, "entryView");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v103 = objc_msgSend(v24, "shouldShowCharacterCount");
          v102 = CKShowCharacterCountEnabled(v21);

          -[CKChatController entryView](self, "entryView");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v101 = objc_msgSend(v25, "shouldDisableAttachments");

          -[CKChatController entryView](self, "entryView");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = objc_msgSend(v26, "shouldReloadBackgroundView");

          objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = objc_msgSend(v28, "isExpressiveTextEnabled");

          -[CKChatController entryView](self, "entryView");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "contentView");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "textView");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = v32;
          if (v29)
          {

            v34 = objc_msgSend(v33, "ck_containsStaleEntryViewFont");
          }
          else
          {
            objc_msgSend(v32, "font");
            v35 = (void *)objc_claimAutoreleasedReturnValue();

            +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "balloonTextFont");
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(v35, "isEqual:", v37) & 1) != 0)
            {
              v34 = 0;
            }
            else
            {
              +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v38, "singleBigEmojiFont");
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              if ((objc_msgSend(v35, "isEqual:", v39) & 1) != 0)
              {
                v34 = 0;
              }
              else
              {
                +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v40, "multipleBigEmojiFont");
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                v100 = objc_msgSend(v35, "isEqual:", v41);

                v34 = v100 ^ 1;
              }

            }
            v33 = v35;
          }

          v42 = (v108 ^ v106 | v105 ^ v104 | v34 | v27) & 1 | (v102 != v103)
             || v21 != v101 && !-[CKScrollViewController isKeyboardVisible](self, "isKeyboardVisible")
             || -[CKChatController reloadEntryViewForStagedPluginMessage](self, "reloadEntryViewForStagedPluginMessage");
          objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          v44 = objc_msgSend(v43, "isCarrierPigeonEnabled");

          if (v44)
          {
            if (!v42
              && (!-[CKChatController shouldUpdateEntryViewPasteConfiguration](self, "shouldUpdateEntryViewPasteConfiguration")|| -[CKScrollViewController isKeyboardVisible](self, "isKeyboardVisible")))
            {
              goto LABEL_56;
            }
          }
          else if (!v42)
          {
LABEL_56:

            goto LABEL_57;
          }
        }
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v45 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18DFCD000, v45, OS_LOG_TYPE_INFO, "CKMessageEntryView - CKChatController is creating a new CKMessageEntryView", buf, 2u);
          }

        }
        -[CKChatController _marginInsetsForEntryView](self, "_marginInsetsForEntryView");
        v47 = v46;
        v49 = v48;
        v51 = v50;
        v53 = v52;
        -[CKChatController entryView](self, "entryView");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "composition");
        v55 = (void *)objc_claimAutoreleasedReturnValue();

        -[CKChatController entryView](self, "entryView");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "removeFromSuperview");

        -[CKChatController view](self, "view");
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "bounds");
        v59 = v58;
        v61 = v60;
        v63 = v62;
        v65 = v64;

        -[CKCoreChatController chat](self, "chat");
        v66 = (void *)objc_claimAutoreleasedReturnValue();

        if (v66)
        {
          -[CKCoreChatController chat](self, "chat");
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          v68 = objc_msgSend(v67, "supportsCapabilities:", 0x8000);

          v69 = v68 ^ 1u;
        }
        else
        {
          v69 = 0;
        }
        v70 = [CKMessageEntryView alloc];
        v71 = IMIsRunningInMessagesComposeViewService();
        v72 = -[CKChatController pluginButtonsEnabled](self, "pluginButtonsEnabled");
        v73 = CKShowCharacterCountEnabled(v21) != 0;
        -[CKChatController traitCollection](self, "traitCollection");
        v74 = (void *)objc_claimAutoreleasedReturnValue();
        BYTE3(v99) = v69;
        BYTE2(v99) = v107;
        BYTE1(v99) = v109;
        LOBYTE(v99) = v21;
        v75 = -[CKMessageEntryView initWithFrame:marginInsets:shouldAllowImpact:shouldShowSendButton:shouldShowSubject:shouldShowPluginButtons:shouldShowCharacterCount:traitCollection:shouldDisableAttachments:shouldUseNonEmojiKeyboard:shouldUseNonHandwritingKeyboard:shouldDisableKeyboardStickers:](v70, "initWithFrame:marginInsets:shouldAllowImpact:shouldShowSendButton:shouldShowSubject:shouldShowPluginButtons:shouldShowCharacterCount:traitCollection:shouldDisableAttachments:shouldUseNonEmojiKeyboard:shouldUseNonHandwritingKeyboard:shouldDisableKeyboardStickers:", v71 ^ 1u, 1, v108, v72, v73, v74, v59, v61, v63, v65, v47, v49, v51, v53, v99);

        v76 = [CKMentionsController alloc];
        -[CKMessageEntryView contentView](v75, "contentView");
        v77 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v77, "textView");
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKCoreChatController conversation](self, "conversation");
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        v80 = -[CKMentionsController initWithEntryTextView:conversation:](v76, "initWithEntryTextView:conversation:", v78, v79);
        -[CKChatController setMentionsController:](self, "setMentionsController:", v80);

        -[CKChatController setEntryView:](self, "setEntryView:", v75);
        v81 = -[CKMessageEntryViewContainerView initWithFrame:]([CKMessageEntryViewContainerView alloc], "initWithFrame:", v59, v61, v63, v65);
        -[CKMessageEntryViewContainerView setEntryViewContainerViewDelegate:](v81, "setEntryViewContainerViewDelegate:", self);
        -[CKMessageEntryViewContainerView setTranslatesAutoresizingMaskIntoConstraints:](v81, "setTranslatesAutoresizingMaskIntoConstraints:", 1);
        -[CKMessageEntryViewContainerView setAutoresizingMask:](v81, "setAutoresizingMask:", 18);
        -[CKMessageEntryViewContainerView addSubview:](v81, "addSubview:", v75);
        -[CKChatController setEntryViewContainerView:](self, "setEntryViewContainerView:", v81);
        -[CKChatController inlineReplyController](self, "inlineReplyController");
        v82 = (void *)objc_claimAutoreleasedReturnValue();

        if (v82)
        {
          -[CKChatController inlineReplyController](self, "inlineReplyController");
          v83 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v83, "setEntryView:", v75);

          -[CKChatController inlineReplyController](self, "inlineReplyController");
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          -[CKMessageEntryView setDelegate:](v75, "setDelegate:", v84);

        }
        else
        {
          -[CKMessageEntryView setDelegate:](v75, "setDelegate:", self);
        }
        -[CKMessageEntryView setClickInteractionDelegate:](v75, "setClickInteractionDelegate:", self);
        v85 = -[CKScrollViewController isKeyboardVisible](self, "isKeyboardVisible");
        -[CKCoreChatController conversation](self, "conversation");
        v86 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKMessageEntryView setConversation:](v75, "setConversation:", v86);

        -[CKMessageEntryView setSendingMessage:](v75, "setSendingMessage:", -[CKCoreChatController isSendingMessage](self, "isSendingMessage"));
        -[CKMessageEntryView setKeyboardVisible:](v75, "setKeyboardVisible:", v85);
        -[CKMessageEntryView setShowAppStrip:animated:completion:](v75, "setShowAppStrip:animated:completion:", CKShowAppStripInEntryView(), 0, 0);
        -[CKMessageEntryView contentView](v75, "contentView");
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v87, "textView");
        v88 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v88, "setTextDropDelegate:", self);
        objc_msgSend(v88, "setPasteDelegate:", self);
        +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v89, "pasteConfigurationDisablingKeyboardStickers:", v69);
        v90 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v88, "setPasteConfiguration:", v90);
        -[CKCoreChatController delegate](self, "delegate");
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        v92 = objc_opt_respondsToSelector();

        if ((v92 & 1) != 0)
        {
          -[CKCoreChatController delegate](self, "delegate");
          v93 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v93, "navigationBarBackdropLayerGroupNameForChatController:", self);
          v94 = (void *)objc_claimAutoreleasedReturnValue();

          -[CKMessageEntryView setBackdropGroupName:](v75, "setBackdropGroupName:", v94);
        }
        if (objc_msgSend(v55, "hasContent"))
          -[CKMessageEntryView setComposition:](v75, "setComposition:", v55);
        -[CKChatController _updateEntryViewFrameIfNeeded:](self, "_updateEntryViewFrameIfNeeded:", 0);
        -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
        -[CKChatController firstResponder](self, "firstResponder");
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v95, "reloadInputViews");

        -[CKCoreChatController inputController](self, "inputController");
        v96 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v96, "setEntryView:", v75);

        goto LABEL_56;
      }
    }
    v108 = 0;
    v20 = 1;
    goto LABEL_20;
  }
LABEL_57:
  -[CKChatController addOrRemoveEntryViewIfNeeded](self, "addOrRemoveEntryViewIfNeeded");
  -[CKChatController registerForTextInputPayloadHandling](self, "registerForTextInputPayloadHandling");
  -[CKChatController entryView](self, "entryView");
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v97, "setConversation:", v98);

  +[CKPPTSubTest stop:](CKPPTSubTest, "stop:", CFSTR("reloadEntryViewIfNeeded"));
}

- (void)registerForTextInputPayloadHandling
{
  void *v3;
  void *v4;
  _BOOL8 v5;
  void *v6;
  void *v7;
  id v8;

  -[CKCoreChatController inputController](self, "inputController");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "chat");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isFiltered") != 0;
  -[CKCoreChatController conversation](self, "conversation");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "chat");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "registerForTextInputPayloadHandling:isGroupChat:", v5, objc_msgSend(v7, "isGroupChat"));

}

- (void)addOrRemoveEntryViewIfNeeded
{
  int v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  int v10;
  _BOOL4 v11;
  int v12;
  NSObject *v13;
  void *v14;
  char v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  int v24;
  CKMessageEntryBackgroundViewProtocol *keyboardCandidateBarBackgroundView;
  NSObject *v26;
  void *v27;
  objc_class *v28;
  id v29;
  void *v30;
  char v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  NSObject *v49;
  CKMessageEntryBackgroundViewProtocol *v50;
  id v51;
  uint8_t v52[16];
  uint8_t v53[16];
  uint8_t v54[16];
  uint8_t v55[16];
  uint8_t v56[16];
  uint8_t v57[16];
  uint8_t buf[16];

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v51 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v51, "isEntryViewInputAccessory") & 1) != 0)
  {

    return;
  }
  v3 = CKIsRunningUITests();

  if (!v3)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v4, OS_LOG_TYPE_INFO, "entryView: addOrRemoveEntryViewIfNeeded", buf, 2u);
      }

    }
    -[CKChatController view](self, "view");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController entryViewContainerView](self, "entryViewContainerView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "userInterfaceIdiom");

    v9 = objc_msgSend(MEMORY[0x1E0CEA6C8], "isInHardwareKeyboardMode");
    if (v8 == 1)
      v10 = v9;
    else
      v10 = 0;
    v11 = -[CKChatController shouldShowEntryView](self, "shouldShowEntryView");
    v12 = IMOSLoggingEnabled();
    if (!v11)
    {
      if (v12)
      {
        OSLogHandleForIMFoundationCategory();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v57 = 0;
          _os_log_impl(&dword_18DFCD000, v18, OS_LOG_TYPE_INFO, "entryView: shouldRemoveEntryView", v57, 2u);
        }

      }
      if (v6)
      {
        objc_msgSend(v6, "superview");
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19 == v5)
        {
          -[CKChatController entryViewContainerView](self, "entryViewContainerView");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "removeFromSuperview");

          -[CKChatController entryView](self, "entryView");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "setEntryViewKeyboardLayoutGuide:", 0);

          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v22 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)v56 = 0;
              _os_log_impl(&dword_18DFCD000, v22, OS_LOG_TYPE_INFO, "entryView: Removed from super view", v56, 2u);
            }

          }
        }
      }
LABEL_37:
      -[CKChatController entryView](self, "entryView");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v23, "isInPencilMode");

      keyboardCandidateBarBackgroundView = self->_keyboardCandidateBarBackgroundView;
      if ((v11 & (v10 | v24)) == 1)
      {
        if (keyboardCandidateBarBackgroundView || !v6)
          goto LABEL_54;
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v26 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v53 = 0;
            _os_log_impl(&dword_18DFCD000, v26, OS_LOG_TYPE_INFO, "Adding the keyboardCandidateBarBackgroundView", v53, 2u);
          }

        }
        +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = (objc_class *)objc_msgSend(v27, "entryViewBackgroundClass");

        v29 = objc_alloc_init(v28);
        -[CKCoreChatController delegate](self, "delegate");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_opt_respondsToSelector();

        if ((v31 & 1) != 0)
        {
          -[CKCoreChatController delegate](self, "delegate");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "navigationBarBackdropLayerGroupNameForChatController:", self);
          v33 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v29, "setBackdropGroupName:", v33);
        }
        -[CKChatController entryView](self, "entryView");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "entryViewTraitCollection");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "setEntryViewTraitCollection:", v35);

        objc_msgSend(v6, "addSubview:", v29);
        objc_msgSend(v29, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        objc_msgSend(v6, "bottomAnchor");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "bottomAnchor");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "constraintEqualToAnchor:", v37);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "setActive:", 1);

        objc_msgSend(v6, "leadingAnchor");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "leadingAnchor");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "constraintEqualToAnchor:", v40);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "setActive:", 1);

        objc_msgSend(v6, "trailingAnchor");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "trailingAnchor");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "constraintEqualToAnchor:", v43);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "setActive:", 1);

        objc_msgSend(v6, "keyboardLayoutGuide");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v45, "topAnchor");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "topAnchor");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "constraintEqualToAnchor:", v47);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "setActive:", 1);

      }
      else
      {
        if (!keyboardCandidateBarBackgroundView)
        {
LABEL_54:

          return;
        }
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v49 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v52 = 0;
            _os_log_impl(&dword_18DFCD000, v49, OS_LOG_TYPE_INFO, "Removing the keyboardCandidateBarBackgroundView", v52, 2u);
          }

        }
        -[CKMessageEntryBackgroundViewProtocol removeFromSuperview](self->_keyboardCandidateBarBackgroundView, "removeFromSuperview");
        v29 = 0;
      }
      v50 = self->_keyboardCandidateBarBackgroundView;
      self->_keyboardCandidateBarBackgroundView = (CKMessageEntryBackgroundViewProtocol *)v29;

      goto LABEL_54;
    }
    if (v12)
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v55 = 0;
        _os_log_impl(&dword_18DFCD000, v13, OS_LOG_TYPE_INFO, "entryView: shouldInsertEntryView", v55, 2u);
      }

    }
    if (!v6
      || (objc_msgSend(v5, "subviews"),
          v14 = (void *)objc_claimAutoreleasedReturnValue(),
          v15 = objc_msgSend(v14, "containsObject:", v6),
          v14,
          (v15 & 1) != 0))
    {
LABEL_26:
      objc_msgSend(v5, "bringSubviewToFront:", v6);
      goto LABEL_37;
    }
    objc_msgSend(v5, "addSubview:", v6);
    -[CKChatController setUpEntryViewLayoutConstraintsIfNecessary](self, "setUpEntryViewLayoutConstraintsIfNecessary");
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v16, "isEntryViewFirstResponderOnViewAppearance") & 1) != 0
      || self->_entryViewShouldBecomeTargetFirstResponderForPendingDraft)
    {

    }
    else
    {

      if ((v10 & 1) == 0)
      {
LABEL_22:
        -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v54 = 0;
            _os_log_impl(&dword_18DFCD000, v17, OS_LOG_TYPE_INFO, "entryView: added to view", v54, 2u);
          }

        }
        goto LABEL_26;
      }
    }
    -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 1);
    self->_entryViewShouldBecomeTargetFirstResponderForPendingDraft = 0;
    goto LABEL_22;
  }
}

- (BOOL)shouldShowEntryView
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  BOOL v19;
  void *v20;
  uint64_t v21;
  uint8_t v23[16];

  if ((-[CKChatController isViewLoaded](self, "isViewLoaded") & 1) == 0)
  {
    if (!IMOSLoggingEnabled())
      return 0;
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      goto LABEL_31;
    *(_WORD *)v23 = 0;
    v12 = "Not inserting entry view because view is nil";
LABEL_30:
    _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, v12, v23, 2u);
    goto LABEL_31;
  }
  -[CKChatController entryView](self, "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    if (!IMOSLoggingEnabled())
      return 0;
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      goto LABEL_31;
    *(_WORD *)v23 = 0;
    v12 = "Not inserting entry view because entryView is nil";
    goto LABEL_30;
  }
  if (!-[CKChatController entryViewRequiresCollectionView](self, "entryViewRequiresCollectionView")
    || (-[CKChatController collectionView](self, "collectionView"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v4,
        v4))
  {
    -[CKCoreChatController conversation](self, "conversation");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "chat");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isTranscriptSharingEnabled");

    if (v8 && objc_msgSend(v6, "isStewieSharingChat"))
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v23 = 0;
          v10 = "Hiding entry view for Stewie Transcript Sharing";
LABEL_76:
          _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, v10, v23, 2u);
          goto LABEL_77;
        }
        goto LABEL_77;
      }
    }
    else if (objc_msgSend(v6, "isStewieEmergencyChat")
           && (objc_msgSend(MEMORY[0x1E0D357A0], "sharedInstance"),
               v13 = (void *)objc_claimAutoreleasedReturnValue(),
               v14 = objc_msgSend(v13, "isStewieEmergencyActive"),
               v13,
               (v14 & 1) == 0))
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v23 = 0;
          v10 = "Hiding entry view for Stewie emergency";
          goto LABEL_76;
        }
        goto LABEL_77;
      }
    }
    else if (objc_msgSend(v6, "isStewieRoadsideChat")
           && (objc_msgSend(MEMORY[0x1E0D357A0], "sharedInstance"),
               v15 = (void *)objc_claimAutoreleasedReturnValue(),
               v16 = objc_msgSend(v15, "isStewieRoadsideActive"),
               v15,
               (v16 & 1) == 0))
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v23 = 0;
          v10 = "Hiding entry view for Stewie roadside";
          goto LABEL_76;
        }
        goto LABEL_77;
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0D10788], "sharedSystemShellSwitcher");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "isClarityBoardEnabled");

      if ((v18 & 1) == 0)
      {
        if (-[CKChatController isShowingOscarChat](self, "isShowingOscarChat") && (objc_msgSend(v6, "isSMS") & 1) == 0)
        {
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v9 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)v23 = 0;
              v10 = "Hiding entry view for Oscar";
              goto LABEL_76;
            }
            goto LABEL_77;
          }
        }
        else if (objc_msgSend(v5, "hasLeftGroupChat"))
        {
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v9 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)v23 = 0;
              v10 = "Hiding entry view because the user has left the group chat";
              goto LABEL_76;
            }
LABEL_77:

          }
        }
        else if (objc_msgSend(v5, "isReadOnlyChat"))
        {
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v9 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)v23 = 0;
              v10 = "Hiding entry view because the chat is read only";
              goto LABEL_76;
            }
            goto LABEL_77;
          }
        }
        else if (objc_msgSend(v5, "isBusinessChatDisabled"))
        {
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v9 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)v23 = 0;
              v10 = "Hiding entry view because business chat is disabled";
              goto LABEL_76;
            }
            goto LABEL_77;
          }
        }
        else if ((objc_msgSend(v5, "hasReplyEnabled") & 1) != 0)
        {
          if (v6 && (objc_msgSend(v6, "allowedByScreenTime") & 1) == 0)
          {
            if (IMOSLoggingEnabled())
            {
              OSLogHandleForIMFoundationCategory();
              v9 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)v23 = 0;
                v10 = "Hiding entry view because chat is screentime blocked";
                goto LABEL_76;
              }
              goto LABEL_77;
            }
          }
          else if (-[CKCoreChatController isShowingLockoutView](self, "isShowingLockoutView"))
          {
            if (IMOSLoggingEnabled())
            {
              OSLogHandleForIMFoundationCategory();
              v9 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)v23 = 0;
                v10 = "Hiding entry view while the screentime lockout view is being shown";
                goto LABEL_76;
              }
              goto LABEL_77;
            }
          }
          else if (-[CKChatController isEditing](self, "isEditing"))
          {
            if (IMOSLoggingEnabled())
            {
              OSLogHandleForIMFoundationCategory();
              v9 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)v23 = 0;
                v10 = "Hiding entry view because the user is editing the chat";
                goto LABEL_76;
              }
              goto LABEL_77;
            }
          }
          else if (-[CKChatController isShowingPreview](self, "isShowingPreview"))
          {
            if (IMOSLoggingEnabled())
            {
              OSLogHandleForIMFoundationCategory();
              v9 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)v23 = 0;
                v10 = "Hiding entry view while the user is viewing a preview";
                goto LABEL_76;
              }
              goto LABEL_77;
            }
          }
          else
          {
            if (!objc_msgSend(v6, "isGroupChat")
              || (objc_msgSend(v6, "participants"),
                  v20 = (void *)objc_claimAutoreleasedReturnValue(),
                  v21 = objc_msgSend(v20, "count"),
                  v20,
                  v21 != 1))
            {
              v19 = 1;
              goto LABEL_79;
            }
            if (IMOSLoggingEnabled())
            {
              OSLogHandleForIMFoundationCategory();
              v9 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)v23 = 0;
                v10 = "Hiding entry view while the user is viewing an unnamed single-participant group";
                goto LABEL_76;
              }
              goto LABEL_77;
            }
          }
        }
        else if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v9 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v23 = 0;
            v10 = "Hiding entry view because hasReplyEnabled is false";
            goto LABEL_76;
          }
          goto LABEL_77;
        }
      }
    }
    v19 = 0;
LABEL_79:

    return v19;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v23 = 0;
      v12 = "Not inserting entry view because collectionView is nil";
      goto LABEL_30;
    }
LABEL_31:

  }
  return 0;
}

- (BOOL)entryViewRequiresCollectionView
{
  return 1;
}

- (void)loadChatInputController
{
  void *v3;
  int v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  id WeakRetained;
  CKChatInputController *v10;

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isTranscriptSharingEnabled");

  if (!v4
    || (-[CKCoreChatController conversation](self, "conversation"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v5, "chat"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        v7 = objc_msgSend(v6, "isStewieSharingChat"),
        v6,
        v5,
        (v7 & 1) == 0))
  {
    -[CKCoreChatController inputController](self, "inputController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v8)
    {
      v10 = objc_alloc_init(CKChatInputController);
      -[CKChatInputController set_isRunningPPT:](v10, "set_isRunningPPT:", -[CKChatController _isRunningPPT](self, "_isRunningPPT"));
      -[CKCoreChatController setInputController:](self, "setInputController:", v10);
      -[CKChatInputController setDelegate:](v10, "setDelegate:", self);
      WeakRetained = objc_loadWeakRetained((id *)&self->_externalPluginControllerProvider);
      -[CKChatInputController setExternalPluginControllerProvider:](v10, "setExternalPluginControllerProvider:", WeakRetained);

    }
  }
}

- (double)_entryViewTopInsetPadding
{
  return 0.0;
}

- (BOOL)_CKRunningInSOSBuddy
{
  if (_CKRunningInSOSBuddy_onceToken != -1)
    dispatch_once(&_CKRunningInSOSBuddy_onceToken, &__block_literal_global_669);
  return _CKRunningInSOSBuddy_sIsRunningInSOSBuddy;
}

CFStringRef __40__CKChatController__CKRunningInSOSBuddy__block_invoke()
{
  __CFBundle *MainBundle;
  CFStringRef result;
  BOOL v2;

  MainBundle = CFBundleGetMainBundle();
  result = CFBundleGetIdentifier(MainBundle);
  if (result)
  {
    result = (CFStringRef)CFEqual(result, CFSTR("com.apple.SOSBuddy"));
    v2 = (_DWORD)result != 0;
  }
  else
  {
    v2 = 0;
  }
  _CKRunningInSOSBuddy_sIsRunningInSOSBuddy = v2;
  return result;
}

- (void)viewSafeAreaInsetsDidChange
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)CKChatController;
  -[CKScrollViewController viewSafeAreaInsetsDidChange](&v3, sel_viewSafeAreaInsetsDidChange);
  -[CKChatController _updateEntryViewFrameIfNeeded:](self, "_updateEntryViewFrameIfNeeded:", 0);
}

- (double)_maxEntryViewHeight
{
  NSNumber *frozenEntryViewHeightDuringDismissAnimation;
  double result;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  CGFloat v11;
  double v12;
  double v13;
  double v14;
  double v15;
  NSObject *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  double v22;
  void *v23;
  double v24;
  double v25;
  void *v26;
  double v27;
  double v28;
  void *v29;
  double v30;
  double v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  void *v41;
  double v42;
  CGFloat v43;
  double v44;
  double v45;
  double v46;
  CGFloat v47;
  double v48;
  CGFloat v49;
  double MaxY;
  NSObject *v51;
  double v52;
  CGFloat v53;
  NSObject *v54;
  NSObject *v55;
  double v56;
  CGFloat v57;
  int v58;
  double v59;
  double v60;
  NSObject *v61;
  double v62;
  void *v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  CGFloat rect;
  CGFloat v68;
  CGFloat v69;
  uint8_t buf[4];
  double v71;
  __int16 v72;
  CGFloat v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  void *v79;
  uint64_t v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;

  v80 = *MEMORY[0x1E0C80C00];
  frozenEntryViewHeightDuringDismissAnimation = self->_frozenEntryViewHeightDuringDismissAnimation;
  if (frozenEntryViewHeightDuringDismissAnimation)
  {
    -[NSNumber doubleValue](frozenEntryViewHeightDuringDismissAnimation, "doubleValue");
    return result;
  }
  -[CKChatController entryView](self, "entryView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController view](self, "view");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "bounds");
  v68 = v8;
  v69 = v7;
  rect = v9;
  v11 = v10;

  -[CKScrollViewController navigationBarInsets](self, "navigationBarInsets");
  v13 = v12;
  -[CKChatController _entryViewTopInsetPadding](self, "_entryViewTopInsetPadding");
  v15 = v14;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      v81.origin.y = v68;
      v81.origin.x = v69;
      v81.size.width = rect;
      v81.size.height = v11;
      NSStringFromCGRect(v81);
      v17 = COERCE_DOUBLE((id)objc_claimAutoreleasedReturnValue());
      -[CKScrollViewController navigationBarInsets](self, "navigationBarInsets");
      v19 = v18;
      -[CKChatController _entryViewTopInsetPadding](self, "_entryViewTopInsetPadding");
      *(_DWORD *)buf = 138412802;
      v71 = v17;
      v72 = 2048;
      v73 = v19;
      v74 = 2048;
      v75 = v20;
      _os_log_impl(&dword_18DFCD000, v16, OS_LOG_TYPE_INFO, "entryView: Calculating max entry view height. Bounds: %@, navbar top inset: %f, entryView top inset: %f", buf, 0x20u);

    }
  }
  -[CKChatController catchUpButton](self, "catchUpButton");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  v22 = v13 + v15;
  if (v21)
  {
    -[CKChatController catchUpButton](self, "catchUpButton");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "frame");
    v25 = v24;
    -[CKChatController catchUpButton](self, "catchUpButton");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "frame");
    v28 = v27;

    if (v22 < v25 + v28)
      v22 = v25 + v28;
  }
  -[CKChatController view](self, "view");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "bounds");
  objc_msgSend(v5, "sizeThatFits:", CGRectGetWidth(v82), 1.79769313e308);
  v31 = v30;

  objc_msgSend(v5, "window");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v29) = v32 == 0;

  if ((_DWORD)v29)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v54 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v71 = v31;
        _os_log_impl(&dword_18DFCD000, v54, OS_LOG_TYPE_INFO, "entryView: Entry does not have a window, return maxEntryViewHeight: %f", buf, 0xCu);
      }
      goto LABEL_49;
    }
    goto LABEL_55;
  }
  objc_msgSend(v5, "bounds");
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v40 = v39;
  -[CKChatController view](self, "view");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "convertRect:toView:", v41, v34, v36, v38, v40);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  v49 = v48;

  if (v45 == 0.0)
  {
    v83.origin.y = v68;
    v83.origin.x = v69;
    v83.size.width = rect;
    v83.size.height = v11;
    MaxY = CGRectGetMaxY(v83);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v51 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        v84.origin.x = v43;
        v84.origin.y = v45;
        v84.size.width = v47;
        v84.size.height = v49;
        NSStringFromCGRect(v84);
        v52 = COERCE_DOUBLE((id)objc_claimAutoreleasedReturnValue());
        v85.origin.y = v68;
        v85.origin.x = v69;
        v85.size.width = rect;
        v85.size.height = v11;
        v53 = CGRectGetMaxY(v85);
        *(_DWORD *)buf = 138412546;
        v71 = v52;
        v72 = 2048;
        v73 = v53;
        _os_log_impl(&dword_18DFCD000, v51, OS_LOG_TYPE_INFO, "entryView: entryViewCurrentBoundsInViewControllerCoordinates.origin.y (%@) is 0, setting entryViewCurrentMaxY to max y: %f", buf, 0x16u);

      }
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        v86.origin.x = v43;
        v86.origin.y = v45;
        v86.size.width = v47;
        v86.size.height = v49;
        NSStringFromCGRect(v86);
        v56 = COERCE_DOUBLE((id)objc_claimAutoreleasedReturnValue());
        v87.origin.x = v43;
        v87.origin.y = v45;
        v87.size.width = v47;
        v87.size.height = v49;
        v57 = CGRectGetMaxY(v87);
        *(_DWORD *)buf = 138412546;
        v71 = v56;
        v72 = 2048;
        v73 = v57;
        _os_log_impl(&dword_18DFCD000, v55, OS_LOG_TYPE_INFO, "entryView: entryViewCurrentBoundsInViewControllerCoordinates.origin.y (%@) is not 0, setting entryViewCurrentMaxY to max y: %f", buf, 0x16u);

      }
    }
    v88.origin.x = v43;
    v88.origin.y = v45;
    v88.size.width = v47;
    v88.size.height = v49;
    MaxY = CGRectGetMaxY(v88);
  }
  v58 = objc_msgSend(MEMORY[0x1E0CEA6C8], "isInHardwareKeyboardMode");
  v59 = MaxY - v31;
  if (MaxY - v31 <= v22)
  {
    v60 = MaxY - v22;
    if (v59 < 0.0)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v61 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
        {
          if (v60 >= v31)
            v62 = v31;
          else
            v62 = MaxY - v22;
          -[CKScrollViewController keyboardFrameInViewCoordinates](self, "keyboardFrameInViewCoordinates");
          NSStringFromCGRect(v89);
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 134219010;
          v71 = v59;
          v72 = 2048;
          v73 = v60;
          v74 = 2048;
          v75 = v31;
          v76 = 2048;
          v77 = v62;
          v78 = 2112;
          v79 = v63;
          _os_log_impl(&dword_18DFCD000, v61, OS_LOG_TYPE_INFO, "entryView: entryViewOriginYAtFittingSize(%f) is negative, return min of availableHeight(%f) and entryViewFittingHeight(%f): %f. KeyboardFrameInViewCoordinates: %@", buf, 0x34u);

        }
      }
      if (v60 < v31)
        v31 = v60;
      goto LABEL_55;
    }
    if (v58)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v64 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v71 = MaxY - v22;
          _os_log_impl(&dword_18DFCD000, v64, OS_LOG_TYPE_INFO, "entryView: Is in hardware keyboard mode, return availableHeight: %f", buf, 0xCu);
        }
LABEL_53:

      }
    }
    else
    {
      if (v60 < 0.0)
      {
        IMLogHandleForCategory();
        v54 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          -[CKChatController _maxEntryViewHeight].cold.1(v54, v31, v65, v66);
        goto LABEL_49;
      }
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v64 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v71 = MaxY - v22;
          _os_log_impl(&dword_18DFCD000, v64, OS_LOG_TYPE_INFO, "entryView: Found max height in view controller, return entryViewMaxHeightInViewController: %f", buf, 0xCu);
        }
        goto LABEL_53;
      }
    }
    v31 = MaxY - v22;
    goto LABEL_55;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v54 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v71 = v31;
      _os_log_impl(&dword_18DFCD000, v54, OS_LOG_TYPE_INFO, "entryView: There is still room for the entry view to expand, return maxEntryViewHeight: %f", buf, 0xCu);
    }
LABEL_49:

  }
LABEL_55:

  return v31;
}

- (CGRect)inputAccessoryViewFrameForFloatingKeyboard
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  CGRect result;

  -[CKChatController entryView](self, "entryView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "frame");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = v4;
  v12 = v6;
  v13 = v8;
  v14 = v10;
  result.size.height = v14;
  result.size.width = v13;
  result.origin.y = v12;
  result.origin.x = v11;
  return result;
}

- (void)_updateEntryViewFrameIfNeeded:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BOOL4 v16;
  id v17;

  v3 = a3;
  -[CKChatController entryView](self, "entryView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "window");
  v17 = (id)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    -[CKChatController view](self, "view");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "bounds");
    v8 = v7;

    -[CKChatController _maxEntryViewHeight](self, "_maxEntryViewHeight");
    v10 = v9;
    -[CKChatController entryView](self, "entryView");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "frame");
    v13 = v12;
    v15 = v14;

    if (v13 != v8 || v15 != v10)
    {
      -[CKChatController _setAvoidanceInsetsNeedsUpdate](self, "_setAvoidanceInsetsNeedsUpdate");
      -[CKChatController setupScrollingForKeyboardInteraction](self, "setupScrollingForKeyboardInteraction");
      v16 = -[CKScrollViewController isKeyboardFloating](self, "isKeyboardFloating");
      -[CKChatController _setEntryViewFrame:animated:](self, "_setEntryViewFrame:animated:", v3, 0.0, 0.0, v8, v10);
      if (v16)
        -[CKScrollViewController inputAccessoryViewFrameUpdatedForFloatingKeyboard](self, "inputAccessoryViewFrameUpdatedForFloatingKeyboard");
    }
  }

}

- (void)__setEntryViewFrame:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  void *v8;
  int v9;
  void *v10;
  double v11;
  id v12;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  -[CKChatController entryView](self, "entryView");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "entryViewFollowsKeyboardLayoutGuide");

  if (v9)
  {
    objc_msgSend(v12, "heightConstraint");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "constant");
    if (vabdd_f64(height, v11) <= 0.001)
    {

    }
    else
    {
      objc_msgSend(v10, "setConstant:", height);

      objc_msgSend(v12, "layoutIfNeeded");
      -[CKChatController _layoutEntryViewSuperview](self, "_layoutEntryViewSuperview");
    }
  }
  else
  {
    objc_msgSend(v12, "setFrame:", x, y, width, height);
  }

}

- (void)_setEntryViewFrame:(CGRect)a3 isContentChange:(BOOL)a4 animated:(BOOL)a5 completionHandler:(id)a6
{
  _BOOL4 v6;
  _BOOL4 v7;
  double height;
  double width;
  CGFloat y;
  CGFloat x;
  void (**v13)(_QWORD);
  void *v14;
  NSObject *v15;
  void *v16;
  double v17;
  double v18;
  void *v20;
  id v21;
  double v22;
  void *v23;
  double v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  char v31;
  void *v32;
  void *v33;
  dispatch_time_t v34;
  _QWORD block[4];
  id v36;
  void (**v37)(_QWORD);
  _QWORD v38[5];
  void (**v39)(_QWORD);
  _QWORD v40[9];
  _QWORD v41[5];
  void (**v42)(_QWORD);
  _QWORD v43[9];
  _QWORD v44[4];
  id v45;
  uint8_t buf[4];
  void *v47;
  uint64_t v48;
  CGRect v49;

  v6 = a5;
  v7 = a4;
  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v48 = *MEMORY[0x1E0C80C00];
  v13 = (void (**)(_QWORD))a6;
  -[CKChatController entryView](self, "entryView");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v49.origin.x = x;
      v49.origin.y = y;
      v49.size.width = width;
      v49.size.height = height;
      NSStringFromCGRect(v49);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v47 = v16;
      _os_log_impl(&dword_18DFCD000, v15, OS_LOG_TYPE_INFO, "entryView: setting entry view frame: %@", buf, 0xCu);

    }
  }
  objc_msgSend(v14, "frame");
  if (v18 != width || v17 != height)
  {
    if (v6)
    {
      if (!-[CKChatController isEntryViewResizeAnimationRunning](self, "isEntryViewResizeAnimationRunning") && v7)
      {
        v20 = (void *)MEMORY[0x1E0CEABB0];
        v44[0] = MEMORY[0x1E0C809B0];
        v44[1] = 3221225472;
        v44[2] = __82__CKChatController__setEntryViewFrame_isContentChange_animated_completionHandler___block_invoke;
        v44[3] = &unk_1E274A208;
        v45 = v14;
        objc_msgSend(v20, "performWithoutAnimation:", v44);

      }
      -[CKChatController setEntryViewResizeAnimationRunning:](self, "setEntryViewResizeAnimationRunning:", 1);
      if (objc_msgSend(v14, "shouldUseLinearResizeForAudioMessage"))
      {
        v21 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA4D0]), "initWithAnimationCurve:", 3);
        v22 = 0.5;
      }
      else
      {
        v21 = objc_alloc_init(MEMORY[0x1E0CEA9D8]);
        objc_msgSend(v21, "settlingDuration");
        v22 = v24;
      }
      v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEABC8]), "initWithDuration:timingParameters:", v21, v22);
      v26 = MEMORY[0x1E0C809B0];
      v43[0] = MEMORY[0x1E0C809B0];
      v43[1] = 3221225472;
      v43[2] = __82__CKChatController__setEntryViewFrame_isContentChange_animated_completionHandler___block_invoke_2;
      v43[3] = &unk_1E274B8B8;
      v43[4] = self;
      *(CGFloat *)&v43[5] = x;
      *(CGFloat *)&v43[6] = y;
      *(double *)&v43[7] = width;
      *(double *)&v43[8] = height;
      objc_msgSend(v25, "addAnimations:", v43);
      v41[0] = v26;
      v41[1] = 3221225472;
      v41[2] = __82__CKChatController__setEntryViewFrame_isContentChange_animated_completionHandler___block_invoke_3;
      v41[3] = &unk_1E274C8E8;
      v41[4] = self;
      v42 = v13;
      objc_msgSend(v25, "addCompletion:", v41);
      objc_msgSend(v25, "startAnimation");

    }
    else
    {
      -[CKChatController setEntryViewResizeAnimationRunning:](self, "setEntryViewResizeAnimationRunning:", 1);
      v23 = (void *)MEMORY[0x1E0CEABB0];
      v40[0] = MEMORY[0x1E0C809B0];
      v40[1] = 3221225472;
      v40[2] = __82__CKChatController__setEntryViewFrame_isContentChange_animated_completionHandler___block_invoke_4;
      v40[3] = &unk_1E274B8B8;
      v40[4] = self;
      *(CGFloat *)&v40[5] = x;
      *(CGFloat *)&v40[6] = y;
      *(double *)&v40[7] = width;
      *(double *)&v40[8] = height;
      v38[0] = MEMORY[0x1E0C809B0];
      v38[1] = 3221225472;
      v38[2] = __82__CKChatController__setEntryViewFrame_isContentChange_animated_completionHandler___block_invoke_5;
      v38[3] = &unk_1E274C780;
      v38[4] = self;
      v39 = v13;
      objc_msgSend(v23, "animateWithDuration:animations:completion:", v40, v38, 0.0);

      v22 = 0.0;
    }
    -[CKChatController _setAvoidanceInsetsNeedsUpdate](self, "_setAvoidanceInsetsNeedsUpdate");
    -[CKChatController entryView](self, "entryView");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "entryViewKeyboardLayoutGuide");
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v28, "setKeyboardDismissPadding:", height);
    -[CKCoreChatController inputController](self, "inputController");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "setAppCardDismissPadding:", height);

    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v30, "isEntryViewInputAccessory");

    if ((v31 & 1) == 0)
    {
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "collectionView");
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v33, "beginDisablingTranscriptDynamicsForReason:", CFSTR("ProgramaticScroll"));
      if (v6)
      {
        -[CKScrollViewController updateScrollGeometryForReason:withDuration:animationCurve:](self, "updateScrollGeometryForReason:withDuration:animationCurve:", CFSTR("EntryViewFrameChanged"), 3, v22);
        v34 = dispatch_time(0, (uint64_t)(v22 * 1000000000.0));
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __82__CKChatController__setEntryViewFrame_isContentChange_animated_completionHandler___block_invoke_6;
        block[3] = &unk_1E274C2E0;
        v36 = v33;
        v37 = v13;
        dispatch_after(v34, MEMORY[0x1E0C80D38], block);

      }
      else
      {
        -[CKScrollViewController updateScrollGeometryWithoutAnimationForReason:](self, "updateScrollGeometryWithoutAnimationForReason:", CFSTR("EntryViewFrameChanged"));
        objc_msgSend(v33, "endDisablingTranscriptDynamicsForReason:", CFSTR("ProgramaticScroll"));
        v13[2](v13);
      }

    }
  }

}

uint64_t __82__CKChatController__setEntryViewFrame_isContentChange_animated_completionHandler___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "prepareForResizeAnimationIfNeeded");
}

void __82__CKChatController__setEntryViewFrame_isContentChange_animated_completionHandler___block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "__setEntryViewFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "contentView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setNeedsLayout");

}

void __82__CKChatController__setEntryViewFrame_isContentChange_animated_completionHandler___block_invoke_3(uint64_t a1)
{
  void *v2;
  int v3;

  objc_msgSend(*(id *)(a1 + 32), "setEntryViewResizeAnimationRunning:", 0);
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEntryViewInputAccessory");

  if (v3)
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void __82__CKChatController__setEntryViewFrame_isContentChange_animated_completionHandler___block_invoke_4(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "__setEntryViewFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "contentView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setNeedsLayout");

}

void __82__CKChatController__setEntryViewFrame_isContentChange_animated_completionHandler___block_invoke_5(uint64_t a1)
{
  void *v2;
  int v3;

  objc_msgSend(*(id *)(a1 + 32), "setEntryViewResizeAnimationRunning:", 0);
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEntryViewInputAccessory");

  if (v3)
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t __82__CKChatController__setEntryViewFrame_isContentChange_animated_completionHandler___block_invoke_6(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "endDisablingTranscriptDynamicsForReason:", CFSTR("ProgramaticScroll"));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

- (void)_setEntryViewFrame:(CGRect)a3 isContentChange:(BOOL)a4 animated:(BOOL)a5
{
  -[CKChatController _setEntryViewFrame:isContentChange:animated:completionHandler:](self, "_setEntryViewFrame:isContentChange:animated:completionHandler:", a4, a5, &__block_literal_global_678, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
}

- (void)_setEntryViewFrame:(CGRect)a3 animated:(BOOL)a4
{
  -[CKChatController _setEntryViewFrame:isContentChange:animated:](self, "_setEntryViewFrame:isContentChange:animated:", 1, a4, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
}

- (double)bottomInsetPadding
{
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "entryViewFollowsKeyboardLayoutGuide");

  -[CKChatController entryView](self, "entryView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "window");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v4)
  {

    if (v7)
    {
      objc_msgSend(v5, "heightConstraint");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "constant");
      v10 = v9;
    }
    else
    {
      -[CKChatController view](self, "view");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "safeAreaInsets");
      v10 = v12;
    }

    goto LABEL_8;
  }

  v10 = 0.0;
  if (!v7)
  {
    -[CKChatController view](self, "view");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "safeAreaInsets");
    v10 = v11;
LABEL_8:

  }
  return v10;
}

- (void)setUpEntryViewLayoutConstraintsIfNecessary
{
  NSObject *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSLayoutConstraint *v10;
  NSLayoutConstraint *entryViewLeadingLayoutConstraint;
  void *v12;
  void *v13;
  NSLayoutConstraint *v14;
  NSLayoutConstraint *entryViewTrailingLayoutConstraint;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  NSLayoutConstraint *entryViewKeyboardLayoutConstraint;
  void *v22;
  void *v23;
  NSLayoutConstraint *v24;
  NSLayoutConstraint *v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  NSLayoutConstraint *v34;
  NSLayoutConstraint *entryViewFauxKeyboardLayoutConstraint;
  double v36;
  double v37;
  double v38;
  void *v39;
  _BOOL4 v40;
  void *v41;
  void *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  int v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      LOWORD(v48) = 0;
      _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "setUpEntryViewLayoutConstraintsIfNecessary", (uint8_t *)&v48, 2u);
    }

  }
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "entryViewFollowsKeyboardLayoutGuide");

  if ((v5 & 1) != 0)
  {
    -[CKChatController entryView](self, "entryView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "superview");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      if (!self->_entryViewLeadingLayoutConstraint)
      {
        objc_msgSend(v6, "leadingAnchor");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "leadingAnchor");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "constraintEqualToAnchor:", v9);
        v10 = (NSLayoutConstraint *)objc_claimAutoreleasedReturnValue();
        entryViewLeadingLayoutConstraint = self->_entryViewLeadingLayoutConstraint;
        self->_entryViewLeadingLayoutConstraint = v10;

        -[NSLayoutConstraint setActive:](self->_entryViewLeadingLayoutConstraint, "setActive:", 1);
      }
      if (!self->_entryViewTrailingLayoutConstraint)
      {
        objc_msgSend(v6, "trailingAnchor");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "trailingAnchor");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "constraintEqualToAnchor:", v13);
        v14 = (NSLayoutConstraint *)objc_claimAutoreleasedReturnValue();
        entryViewTrailingLayoutConstraint = self->_entryViewTrailingLayoutConstraint;
        self->_entryViewTrailingLayoutConstraint = v14;

        -[NSLayoutConstraint setActive:](self->_entryViewTrailingLayoutConstraint, "setActive:", 1);
      }
      objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "isEntryViewUsesKeyboardLayoutGuideEnabled");

      if (v17)
      {
        objc_msgSend(v7, "keyboardLayoutGuide");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setFollowsUndockedKeyboard:", 0);
        objc_msgSend(v18, "followUndockedKeyboardOfTypes:", 28);
        +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setIgnoresSafeArea:", objc_msgSend(v19, "entryFieldShouldUseBackdropView"));

        -[CKChatController entryView](self, "entryView");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "setEntryViewKeyboardLayoutGuide:", v18);

        entryViewKeyboardLayoutConstraint = self->_entryViewKeyboardLayoutConstraint;
        if (entryViewKeyboardLayoutConstraint)
          -[NSLayoutConstraint setActive:](entryViewKeyboardLayoutConstraint, "setActive:", 0);
        objc_msgSend(v6, "bottomAnchor");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "topAnchor");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "constraintEqualToAnchor:", v23);
        v24 = (NSLayoutConstraint *)objc_claimAutoreleasedReturnValue();
        v25 = self->_entryViewKeyboardLayoutConstraint;
        self->_entryViewKeyboardLayoutConstraint = v24;

        if (self->_entryViewContainerView)
        {
          objc_msgSend(v6, "bottomAnchor");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          -[CKMessageEntryViewContainerView bottomAnchor](self->_entryViewContainerView, "bottomAnchor");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "constraintEqualToAnchor:", v27);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          -[CKMessageEntryViewContainerView setEntryViewStuckToChatControllerBottomLayoutConstraint:](self->_entryViewContainerView, "setEntryViewStuckToChatControllerBottomLayoutConstraint:", v28);

        }
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v29 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            v48 = 138412290;
            v49 = v18;
            _os_log_impl(&dword_18DFCD000, v29, OS_LOG_TYPE_INFO, "entryView: set entry view to keyboard top anchor: %@", (uint8_t *)&v48, 0xCu);
          }

        }
      }
      else
      {
        objc_msgSend(v7, "bottomAnchor");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "bottomAnchor");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "constraintEqualToAnchor:constant:", v33, 0.0);
        v34 = (NSLayoutConstraint *)objc_claimAutoreleasedReturnValue();
        entryViewFauxKeyboardLayoutConstraint = self->_entryViewFauxKeyboardLayoutConstraint;
        self->_entryViewFauxKeyboardLayoutConstraint = v34;

        -[CKScrollViewController keyboardFrameInViewCoordinates](self, "keyboardFrameInViewCoordinates");
        -[CKChatController _updateFauxKeyboardLayoutGuideIfNeededWithKeyboardFrame:](self, "_updateFauxKeyboardLayoutGuideIfNeededWithKeyboardFrame:");
      }
      objc_msgSend(v7, "bounds");
      objc_msgSend(v6, "sizeThatFits:", v36, 1.79769313e308);
      v38 = v37;
      objc_msgSend(v6, "heightConstraint");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = v39 == 0;

      if (v40)
      {
        objc_msgSend(v6, "heightAnchor");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "constraintEqualToConstant:", v38);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "setHeightConstraint:", v42);

      }
      else
      {
        objc_msgSend(v6, "heightConstraint");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "setConstant:", v38);
      }

      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v43 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          v44 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v6, "heightConstraint");
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "constant");
          objc_msgSend(v44, "numberWithDouble:");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          v48 = 138412290;
          v49 = v46;
          _os_log_impl(&dword_18DFCD000, v43, OS_LOG_TYPE_INFO, "entryView: heightConstraint.constant: %@", (uint8_t *)&v48, 0xCu);

        }
      }
      objc_msgSend(v6, "heightConstraint");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v47, "setActive:", 1);

      -[CKChatController _setUpEntryViewAppCardLayoutConstraint](self, "_setUpEntryViewAppCardLayoutConstraint");
      -[CKChatController updateActiveEntryViewPositioningGuide](self, "updateActiveEntryViewPositioningGuide");
      objc_msgSend(v7, "layoutIfNeeded");
      -[CKScrollViewController updateScrollGeometryWithoutAnimationForReason:](self, "updateScrollGeometryWithoutAnimationForReason:", CFSTR("EntryViewCreated"));
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        LOWORD(v48) = 0;
        _os_log_impl(&dword_18DFCD000, v31, OS_LOG_TYPE_INFO, "entryView: not in view hierarchy", (uint8_t *)&v48, 2u);
      }

    }
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      LOWORD(v48) = 0;
      _os_log_impl(&dword_18DFCD000, v30, OS_LOG_TYPE_INFO, "entryView: not using layout constraints", (uint8_t *)&v48, 2u);
    }

  }
}

- (void)_updateEntryViewConstraintsIfNeeded
{
  void *v3;
  void *v4;

  -[CKChatController entryView](self, "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "window");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
    -[CKChatController setUpEntryViewLayoutConstraintsIfNecessary](self, "setUpEntryViewLayoutConstraintsIfNecessary");
  else
    -[CKChatController _invalidateEntryViewConstraints](self, "_invalidateEntryViewConstraints");
}

- (void)_invalidateEntryViewConstraints
{
  void *v3;
  NSLayoutConstraint *entryViewFauxKeyboardLayoutConstraint;
  NSLayoutConstraint *entryViewKeyboardLayoutConstraint;
  NSLayoutConstraint *entryViewKeyboardSnapshotLayoutConstraint;
  NSLayoutConstraint *entryViewAppCardLayoutConstraint;
  NSLayoutConstraint *entryViewLeadingLayoutConstraint;
  NSLayoutConstraint *entryViewTrailingLayoutConstraint;

  -[NSLayoutConstraint setActive:](self->_entryViewFauxKeyboardLayoutConstraint, "setActive:", 0);
  -[NSLayoutConstraint setActive:](self->_entryViewKeyboardLayoutConstraint, "setActive:", 0);
  -[NSLayoutConstraint setActive:](self->_entryViewKeyboardSnapshotLayoutConstraint, "setActive:", 0);
  -[NSLayoutConstraint setActive:](self->_entryViewAppCardLayoutConstraint, "setActive:", 0);
  -[NSLayoutConstraint setActive:](self->_entryViewLeadingLayoutConstraint, "setActive:", 0);
  -[NSLayoutConstraint setActive:](self->_entryViewTrailingLayoutConstraint, "setActive:", 0);
  -[CKMessageEntryViewContainerView entryViewStuckToChatControllerBottomLayoutConstraint](self->_entryViewContainerView, "entryViewStuckToChatControllerBottomLayoutConstraint");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setActive:", 0);

  entryViewFauxKeyboardLayoutConstraint = self->_entryViewFauxKeyboardLayoutConstraint;
  self->_entryViewFauxKeyboardLayoutConstraint = 0;

  entryViewKeyboardLayoutConstraint = self->_entryViewKeyboardLayoutConstraint;
  self->_entryViewKeyboardLayoutConstraint = 0;

  entryViewKeyboardSnapshotLayoutConstraint = self->_entryViewKeyboardSnapshotLayoutConstraint;
  self->_entryViewKeyboardSnapshotLayoutConstraint = 0;

  entryViewAppCardLayoutConstraint = self->_entryViewAppCardLayoutConstraint;
  self->_entryViewAppCardLayoutConstraint = 0;

  entryViewLeadingLayoutConstraint = self->_entryViewLeadingLayoutConstraint;
  self->_entryViewLeadingLayoutConstraint = 0;

  entryViewTrailingLayoutConstraint = self->_entryViewTrailingLayoutConstraint;
  self->_entryViewTrailingLayoutConstraint = 0;

  -[CKMessageEntryViewContainerView setEntryViewStuckToChatControllerBottomLayoutConstraint:](self->_entryViewContainerView, "setEntryViewStuckToChatControllerBottomLayoutConstraint:", 0);
}

- (void)_setUpEntryViewAppCardLayoutConstraint
{
  void *v3;
  void *entryViewAppCardLayoutConstraint;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSLayoutConstraint *v10;
  NSLayoutConstraint *v11;
  id v12;

  -[CKChatController entryView](self, "entryView");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "window");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  entryViewAppCardLayoutConstraint = self->_entryViewAppCardLayoutConstraint;
  if (!v3)
  {
    self->_entryViewAppCardLayoutConstraint = 0;
LABEL_7:

    goto LABEL_8;
  }
  -[NSLayoutConstraint firstItem](self->_entryViewAppCardLayoutConstraint, "firstItem");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 != v5)
  {

LABEL_6:
    objc_msgSend(v3, "bottomAnchor");
    entryViewAppCardLayoutConstraint = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "bottomAnchor");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKCoreChatController inputController](self, "inputController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "_appCardHeightWithSafeArea");
    objc_msgSend(entryViewAppCardLayoutConstraint, "constraintEqualToAnchor:constant:", v8);
    v10 = (NSLayoutConstraint *)objc_claimAutoreleasedReturnValue();
    v11 = self->_entryViewAppCardLayoutConstraint;
    self->_entryViewAppCardLayoutConstraint = v10;

    goto LABEL_7;
  }
  -[NSLayoutConstraint secondItem](self->_entryViewAppCardLayoutConstraint, "secondItem");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController entryView](self, "entryView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6 != v7)
    goto LABEL_6;
LABEL_8:

}

- (double)_expectedAppCardAndEntryViewHeight
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  double v16;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = (void *)MEMORY[0x1E0CB37E8];
      -[CKCoreChatController inputController](self, "inputController");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "_appCardHeightWithSafeArea");
      objc_msgSend(v4, "numberWithDouble:");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = (void *)MEMORY[0x1E0CB37E8];
      -[CKChatController entryView](self, "entryView");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "frame");
      objc_msgSend(v7, "numberWithDouble:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138412546;
      v19 = v6;
      v20 = 2112;
      v21 = v10;
      _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "_appCardHeightWithSafeArea: %@ entryView.frame: %@", (uint8_t *)&v18, 0x16u);

    }
  }
  -[CKCoreChatController inputController](self, "inputController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "_appCardHeightWithSafeArea");
  v13 = v12;
  -[CKChatController entryView](self, "entryView");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "frame");
  v16 = v15;

  return v13 + v16;
}

- (void)updateChatItemBalloonViewAndStickerViews:(id)a3 hidden:(BOOL)a4
{
  _BOOL4 v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD v15[5];
  id v16;

  v4 = a4;
  v14 = a3;
  v6 = (void *)objc_opt_new();
  if (v4)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "balloonViewForChatItem:", v14);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "indexPathForBalloonView:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addIndex:", objc_msgSend(v9, "row"));

  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setHiddenBalloonViews:", v6);

  objc_msgSend(MEMORY[0x1E0CB3788], "indexSet");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(v14, "visibleAssociatedMessageChatItems");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __68__CKChatController_updateChatItemBalloonViewAndStickerViews_hidden___block_invoke;
    v15[3] = &unk_1E274C930;
    v15[4] = self;
    v16 = v11;
    objc_msgSend(v12, "enumerateObjectsUsingBlock:", v15);

  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setHiddenAssociatedItems:", v11);

}

void __68__CKChatController_updateChatItemBalloonViewAndStickerViews_hidden___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v6 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "associatedChatItems");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "indexOfObject:", v6);

    objc_msgSend(*(id *)(a1 + 40), "addIndex:", v5);
  }

}

- (void)associatedStickerCells:(id *)a3 stickerChatItems:(id *)a4 chatItemGUID:(id)a5
{
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;

  v8 = a5;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "chatItemForGUID:", v8);
  v16 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "visibleAssociatedMessageChatItems");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __73__CKChatController_associatedStickerCells_stickerChatItems_chatItemGUID___block_invoke;
  v17[3] = &unk_1E274C958;
  v18 = v9;
  v13 = v10;
  v19 = v13;
  v14 = v11;
  v20 = v14;
  v15 = v9;
  objc_msgSend(v12, "enumerateObjectsUsingBlock:", v17);

  if (a3)
    *a3 = (id)objc_msgSend(v13, "copy");
  if (a4)
    *a4 = (id)objc_msgSend(v14, "copy");

}

void __73__CKChatController_associatedStickerCells_stickerChatItems_chatItemGUID___block_invoke(id *a1, void *a2)
{
  char isKindOfClass;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v4 = v8;
  if ((isKindOfClass & 1) != 0)
  {
    v5 = v8;
    objc_msgSend(a1[4], "cellForAssociatedChatItem:", v5);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)v6;
    if (v5 && v6)
    {
      objc_msgSend(a1[5], "addObject:", v6);
      objc_msgSend(a1[6], "addObject:", v5);
    }

    v4 = v8;
  }

}

- (void)_updateFauxKeyboardLayoutGuideIfNeededWithKeyboardFrame:(CGRect)a3
{
  double height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  BOOL v12;
  char v13;
  double v14;
  void *v15;
  double v16;
  double v17;
  double MinY;
  double v19;
  int v20;
  void *v21;
  uint64_t v22;
  CGRect v23;
  CGRect v24;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v22 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v23.origin.x = x;
      v23.origin.y = y;
      v23.size.width = width;
      v23.size.height = height;
      NSStringFromCGRect(v23);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = 138412290;
      v21 = v9;
      _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "entryView: updating faux keyboard layout guide with keyboard frame: %@", (uint8_t *)&v20, 0xCu);

    }
  }
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "entryViewFollowsKeyboardLayoutGuide");

  if (v11 && self->_entryViewFauxKeyboardLayoutConstraint)
  {
    v12 = -[CKScrollViewController isKeyboardUndocked](self, "isKeyboardUndocked");
    v13 = height <= 0.0 || v12;
    v14 = 0.0;
    if ((v13 & 1) == 0)
    {
      -[CKChatController view](self, "view");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "bounds");
      v17 = v16;
      v24.origin.x = x;
      v24.origin.y = y;
      v24.size.width = width;
      v24.size.height = height;
      MinY = CGRectGetMinY(v24);

      v14 = v17 - MinY;
    }
    -[NSLayoutConstraint constant](self->_entryViewFauxKeyboardLayoutConstraint, "constant");
    if (vabdd_f64(v19, v14) > 0.00000011920929)
      -[NSLayoutConstraint setConstant:](self->_entryViewFauxKeyboardLayoutConstraint, "setConstant:", v14);
  }
}

- (void)_updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  double v30;
  double v31;
  void *v32;
  void *v33;
  unint64_t v34;
  _QWORD v35[9];
  _QWORD v36[9];

  v4 = a3;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "entryViewFollowsKeyboardLayoutGuide");

  if (v6
    && !-[CKChatController suppressEntryViewKeyboardNotifications](self, "suppressEntryViewKeyboardNotifications")
    && self->_entryViewFauxKeyboardLayoutConstraint)
  {
    objc_msgSend(v4, "userInfo");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0CEB890]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v8, "CGRectValue");
      v10 = v9;
      v12 = v11;
      v14 = v13;
      v16 = v15;
      -[CKChatController view](self, "view");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "window");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController view](self, "view");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "convertRect:toView:", v19, v10, v12, v14, v16);
      v21 = v20;
      v23 = v22;
      v25 = v24;
      v27 = v26;

      objc_msgSend(v4, "userInfo");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "objectForKeyedSubscript:", *MEMORY[0x1E0CEB7F0]);
      v29 = objc_claimAutoreleasedReturnValue();

      -[NSObject doubleValue](v29, "doubleValue");
      if (v30 > 0.0 && (v31 = v30, -[CKCoreChatController viewIsVisible](self, "viewIsVisible")))
      {
        objc_msgSend(v4, "userInfo");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "objectForKeyedSubscript:", *MEMORY[0x1E0CEB7E8]);
        v33 = (void *)objc_claimAutoreleasedReturnValue();

        v34 = -[CKChatController _animationOptionsFromCurve:](self, "_animationOptionsFromCurve:", objc_msgSend(v33, "integerValue"));
        v36[0] = MEMORY[0x1E0C809B0];
        v36[1] = 3221225472;
        v36[2] = __92__CKChatController__updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification___block_invoke;
        v36[3] = &unk_1E274B8B8;
        v36[4] = self;
        v36[5] = v21;
        v36[6] = v23;
        v36[7] = v25;
        v36[8] = v27;
        objc_msgSend(MEMORY[0x1E0CEABB0], "animateWithDuration:delay:options:animations:completion:", v34 | 4, v36, &__block_literal_global_682, v31, 0.0);

      }
      else
      {
        v35[0] = MEMORY[0x1E0C809B0];
        v35[1] = 3221225472;
        v35[2] = __92__CKChatController__updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification___block_invoke_3;
        v35[3] = &unk_1E274B8B8;
        v35[4] = self;
        v35[5] = v21;
        v35[6] = v23;
        v35[7] = v25;
        v35[8] = v27;
        objc_msgSend(MEMORY[0x1E0CEABB0], "performWithoutAnimation:", v35);
      }
    }
    else
    {
      IMLogHandleForCategory();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        -[CKChatController _updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification:].cold.1();
    }

  }
}

void __92__CKChatController__updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "_updateFauxKeyboardLayoutGuideIfNeededWithKeyboardFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
  objc_msgSend(*(id *)(a1 + 32), "view");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setNeedsLayout");

  objc_msgSend(*(id *)(a1 + 32), "view");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "layoutIfNeeded");

}

void __92__CKChatController__updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification___block_invoke_3(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "_updateFauxKeyboardLayoutGuideIfNeededWithKeyboardFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
  objc_msgSend(*(id *)(a1 + 32), "view");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setNeedsLayout");

  objc_msgSend(*(id *)(a1 + 32), "view");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "layoutIfNeeded");

}

- (unint64_t)_animationOptionsFromCurve:(int64_t)a3
{
  if ((unint64_t)(a3 - 1) >= 3)
    return 0;
  else
    return ((a3 - 1) << 16) + 0x10000;
}

- (BOOL)pluginButtonsEnabled
{
  void *v3;
  char v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  -[CKCoreChatController conversation](self, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isStewieConversation");

  if ((v4 & 1) != 0)
    return 0;
  v6 = (void *)MEMORY[0x1E0D35918];
  -[CKCoreChatController conversation](self, "conversation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "lastAddressedHandle");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "lastAddressedSIMID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v6) = objc_msgSend(v6, "mmsEnabledforPhoneNumber:simID:", v8, v10);

  return (v6 & 1) != 0 || CKiMessageSupported() != 0;
}

- (void)setTargetFirstResponder:(int64_t)a3
{
  NSObject *v5;
  int64_t targetFirstResponder;
  int v7;
  int64_t v8;
  __int16 v9;
  int64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (self->_targetFirstResponder != a3)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        targetFirstResponder = self->_targetFirstResponder;
        v7 = 134218240;
        v8 = targetFirstResponder;
        v9 = 2048;
        v10 = a3;
        _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "Target first responder changing from %lu to %lu", (uint8_t *)&v7, 0x16u);
      }

    }
    self->_targetFirstResponder = a3;
    self->_becomingFirstResponderInProgress = 0;
  }
}

- (BOOL)canBecomeFirstResponder
{
  _BOOL4 v3;

  v3 = -[CKCoreChatController shouldDisplayTextEntry](self, "shouldDisplayTextEntry");
  if (v3)
    LOBYTE(v3) = !-[CKChatController isShowingCamera](self, "isShowingCamera");
  return v3;
}

- (BOOL)becomeFirstResponder
{
  unsigned int v2;
  int64_t v4;
  int64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  const __CFString *v13;
  void *v15;
  void *v16;
  void *v17;
  objc_super v18;
  objc_super v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  const __CFString *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (self->_becomingFirstResponderInProgress)
  {
    LOBYTE(v2) = 0;
    return v2;
  }
  self->_becomingFirstResponderInProgress = 1;
  v4 = -[CKChatController targetFirstResponder](self, "targetFirstResponder");
  v5 = v4;
  switch(v4)
  {
    case 3:
      -[CKChatController messageEditingViewController](self, "messageEditingViewController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = objc_msgSend(v8, "becomeFirstResponder");

      break;
    case 1:
      if ((-[CKChatController isEditing](self, "isEditing") & 1) == 0)
      {
        -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
        v9 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v9)
        {
          self->_nextEntryViewSafeAreaInsetUpdateIsSynchronous = 1;
          -[CKChatController entryView](self, "entryView");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "contentView");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "activeView");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v17, "becomeFirstResponder") & 1) != 0)
          {
            v2 = 1;
          }
          else
          {
            v18.receiver = self;
            v18.super_class = (Class)CKChatController;
            v2 = -[CKChatController becomeFirstResponder](&v18, sel_becomeFirstResponder);
          }

          break;
        }
      }
      break;
    case 0:
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "No target FR, making chat controller FR", buf, 2u);
        }

      }
      -[CKCoreChatController inputController](self, "inputController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "clearBrowserViewControllerIfNecessary");

      v19.receiver = self;
      v19.super_class = (Class)CKChatController;
      v2 = -[CKChatController becomeFirstResponder](&v19, sel_becomeFirstResponder);
      break;
    default:
      v2 = 0;
      break;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v5);
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = (void *)v11;
      v13 = CFSTR("NO");
      if (v2)
        v13 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v21 = v11;
      v22 = 2112;
      v23 = v13;
      _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, "targetFirstResponder: %@, didBecomeFirstResponder: %@", buf, 0x16u);

    }
  }
  self->_becomingFirstResponderInProgress = 0;
  return v2;
}

- (id)consumingBundleIdentifiers
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController inputController](self, "inputController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "browserPlugin");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(v5, "identifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v6);

  }
  -[CKChatController entryView](self, "entryView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "composition");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "shelfPluginPayload");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    objc_msgSend(v9, "pluginBundleID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v10);

  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "chatItems");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v12, "count"))
  {
    v24 = v5;
    -[CKChatController collectionView](self, "collectionView");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "indexPathsForVisibleItems");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v15 = v14;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v26;
      do
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v26 != v18)
            objc_enumerationMutation(v15);
          v20 = objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * v19), "item");
          if (v20 < objc_msgSend(v12, "count"))
          {
            objc_msgSend(v12, "objectAtIndex:", v20);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend(v21, "bundleIdentifier");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v3, "addObject:", v22);

            }
          }
          ++v19;
        }
        while (v17 != v19);
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      }
      while (v17);
    }

    v5 = v24;
  }

  return v3;
}

- (id)generatedSummary
{
  void *v2;
  void *v3;
  void *v4;

  -[CKCoreChatController chat](self, "chat");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "chatSummary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "string");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)generativeContext
{
  void *v2;
  void *v3;

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "generativeContextHistory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (int64_t)_determineEntryViewPositioningGuideToActivate
{
  void *v3;
  int v4;
  int v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  char v11;
  _BOOL4 v12;
  int64_t v13;
  _BOOL4 v14;
  void *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _BOOL4 v23;
  _BOOL4 v24;
  _BOOL4 v25;
  int v26;
  int v27;

  -[CKCoreChatController inputController](self, "inputController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v3, "isAppCardPresented");
  v27 = objc_msgSend(v3, "isAppCardAppearing");
  v4 = objc_msgSend(v3, "isAppCardDismissing");
  v5 = objc_msgSend(v3, "isAppCardUsingSheetPresentation");
  v25 = -[CKScrollViewController isKeyboardVisible](self, "isKeyboardVisible");
  v23 = -[CKChatController isKeyboardSnapshotted](self, "isKeyboardSnapshotted");
  v24 = -[CKChatController isKeyboardSnapshotVisible](self, "isKeyboardSnapshotVisible");
  -[CKChatController traitCollection](self, "traitCollection");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "verticalSizeClass");

  -[CKChatController traitCollection](self, "traitCollection");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "horizontalSizeClass");

  v10 = objc_msgSend(v3, "isAppCardUsingPopoverPresentation");
  v11 = objc_msgSend(v3, "hasStickerReactionSession");
  v12 = -[CKChatController isFullScreenBalloonViewOnScreen](self, "isFullScreenBalloonViewOnScreen");
  v13 = 3;
  if ((v11 & 1) == 0 && (v10 & 1) == 0)
  {
    v14 = v12;
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "isEmojiTapbacksEnabled");

    if ((v16 & v14) == 1)
    {
      v13 = -[CKChatController entryViewPositioningGuideForCurrentTapbackPickerPresentation](self, "entryViewPositioningGuideForCurrentTapbackPickerPresentation");
    }
    else
    {
      v17 = v26 & v5 ^ 1;
      if (v9 != 1)
        v17 = 1;
      if (((v17 | v27 | v4) & 1) == 0 && v7 != 1)
        goto LABEL_13;
      v18 = v25 || v24;
      v19 = v4 & v5 ^ 1;
      if (v9 != 1)
        v19 = 1;
      if (((v19 | v18) & 1) != 0 || v7 == 1)
      {
        v20 = v27 & v5 ^ 1;
        if (v9 != 1)
          v20 = 1;
        v21 = v20 | v18;
        if (v7 == 1)
          v21 = 1;
        if (v21)
          v13 = v23;
        else
          v13 = 2;
      }
      else
      {
LABEL_13:
        v13 = 2;
      }
    }
  }

  return v13;
}

- (void)updateActiveEntryViewPositioningGuide
{
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;
  NSLayoutConstraint *entryViewFauxKeyboardLayoutConstraint;
  NSObject *v11;
  void *v12;
  int v13;
  void *v14;
  char v15;
  NSObject *v16;
  void *v17;
  char v18;
  int v19;
  NSObject *v20;
  void *v21;
  void *v22;
  _BOOL4 v23;
  void *v24;
  NSObject *v25;
  uint8_t v26[16];
  uint8_t v27[16];
  uint8_t v28[16];
  uint8_t buf[16];
  uint8_t v30[16];

  -[CKChatController entryView](self, "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "window");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    switch(-[CKChatController _determineEntryViewPositioningGuideToActivate](self, "_determineEntryViewPositioningGuideToActivate"))
    {
      case 0:
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v5 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "Updating entry view positioning guide to follow Keyboard", buf, 2u);
          }

        }
        -[NSLayoutConstraint setActive:](self->_entryViewKeyboardSnapshotLayoutConstraint, "setActive:", 0);
        -[NSLayoutConstraint setActive:](self->_entryViewAppCardLayoutConstraint, "setActive:", 0);
        -[CKMessageEntryViewContainerView entryViewStuckToChatControllerBottomLayoutConstraint](self->_entryViewContainerView, "entryViewStuckToChatControllerBottomLayoutConstraint");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v6, "isActive");

        if (v7)
        {
          -[CKMessageEntryViewContainerView entryViewStuckToChatControllerBottomLayoutConstraint](self->_entryViewContainerView, "entryViewStuckToChatControllerBottomLayoutConstraint");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "setActive:", 0);

        }
        v9 = 1696;
        entryViewFauxKeyboardLayoutConstraint = self->_entryViewFauxKeyboardLayoutConstraint;
        if (entryViewFauxKeyboardLayoutConstraint)
          goto LABEL_33;
        v9 = 1704;
        goto LABEL_32;
      case 1:
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v28 = 0;
            _os_log_impl(&dword_18DFCD000, v20, OS_LOG_TYPE_INFO, "Updating entry view positioning guide to follow Keyboard Snapshot", v28, 2u);
          }

        }
        -[NSLayoutConstraint setActive:](self->_entryViewFauxKeyboardLayoutConstraint, "setActive:", 0);
        -[NSLayoutConstraint setActive:](self->_entryViewKeyboardLayoutConstraint, "setActive:", 0);
        -[NSLayoutConstraint setActive:](self->_entryViewAppCardLayoutConstraint, "setActive:", 0);
        -[CKMessageEntryViewContainerView entryViewStuckToChatControllerBottomLayoutConstraint](self->_entryViewContainerView, "entryViewStuckToChatControllerBottomLayoutConstraint");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v21, "isActive");

        if (v7)
        {
          -[CKMessageEntryViewContainerView entryViewStuckToChatControllerBottomLayoutConstraint](self->_entryViewContainerView, "entryViewStuckToChatControllerBottomLayoutConstraint");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "setActive:", 0);

        }
        v9 = 1712;
LABEL_32:
        entryViewFauxKeyboardLayoutConstraint = *(NSLayoutConstraint **)((char *)&self->super.super.super.super.super.super.isa
                                                                       + v9);
LABEL_33:
        v23 = -[NSLayoutConstraint isActive](entryViewFauxKeyboardLayoutConstraint, "isActive");
        objc_msgSend(*(id *)((char *)&self->super.super.super.super.super.super.isa + v9), "setActive:", 1);
        if (((!v23 | v7) & 1) == 0)
          return;
        goto LABEL_45;
      case 2:
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v27 = 0;
            _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "Updating entry view positioning guide to follow App Card", v27, 2u);
          }

        }
        -[NSLayoutConstraint setActive:](self->_entryViewFauxKeyboardLayoutConstraint, "setActive:", 0);
        -[NSLayoutConstraint setActive:](self->_entryViewKeyboardLayoutConstraint, "setActive:", 0);
        -[NSLayoutConstraint setActive:](self->_entryViewKeyboardSnapshotLayoutConstraint, "setActive:", 0);
        -[CKMessageEntryViewContainerView entryViewStuckToChatControllerBottomLayoutConstraint](self->_entryViewContainerView, "entryViewStuckToChatControllerBottomLayoutConstraint");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "isActive");

        if (v13)
        {
          -[CKMessageEntryViewContainerView entryViewStuckToChatControllerBottomLayoutConstraint](self->_entryViewContainerView, "entryViewStuckToChatControllerBottomLayoutConstraint");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "setActive:", 0);

        }
        v15 = !-[NSLayoutConstraint isActive](self->_entryViewAppCardLayoutConstraint, "isActive") | v13;
        -[NSLayoutConstraint setActive:](self->_entryViewAppCardLayoutConstraint, "setActive:", 1);
        if ((v15 & 1) == 0)
          return;
        goto LABEL_45;
      case 3:
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v30 = 0;
            _os_log_impl(&dword_18DFCD000, v16, OS_LOG_TYPE_INFO, "Updating entry view positioning guide to align to the bottom of the entry view container", v30, 2u);
          }

        }
        -[CKMessageEntryViewContainerView entryViewStuckToChatControllerBottomLayoutConstraint](self->_entryViewContainerView, "entryViewStuckToChatControllerBottomLayoutConstraint");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "isActive");

        if ((v18 & 1) != 0)
        {
          v19 = 0;
        }
        else
        {
          -[CKMessageEntryViewContainerView entryViewStuckToChatControllerBottomLayoutConstraint](self->_entryViewContainerView, "entryViewStuckToChatControllerBottomLayoutConstraint");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = 1;
          objc_msgSend(v24, "setActive:", 1);

        }
        if (-[NSLayoutConstraint isActive](self->_entryViewKeyboardSnapshotLayoutConstraint, "isActive"))
        {
          -[NSLayoutConstraint setActive:](self->_entryViewKeyboardSnapshotLayoutConstraint, "setActive:", 0);
          v19 = 1;
        }
        if (-[NSLayoutConstraint isActive](self->_entryViewAppCardLayoutConstraint, "isActive"))
        {
          -[NSLayoutConstraint setActive:](self->_entryViewAppCardLayoutConstraint, "setActive:", 0);
          v19 = 1;
        }
        if (-[NSLayoutConstraint isActive](self->_entryViewFauxKeyboardLayoutConstraint, "isActive"))
        {
          -[NSLayoutConstraint setActive:](self->_entryViewFauxKeyboardLayoutConstraint, "setActive:", 0);
          v19 = 1;
        }
        if (-[NSLayoutConstraint isActive](self->_entryViewKeyboardLayoutConstraint, "isActive"))
        {
          -[NSLayoutConstraint setActive:](self->_entryViewKeyboardLayoutConstraint, "setActive:", 0);
        }
        else if (!v19)
        {
          return;
        }
LABEL_45:
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v25 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v26 = 0;
            _os_log_impl(&dword_18DFCD000, v25, OS_LOG_TYPE_INFO, "Active entry view positioning guide did change", v26, 2u);
          }

        }
        -[CKChatController _layoutEntryViewSuperview](self, "_layoutEntryViewSuperview");
        break;
      default:
        return;
    }
  }
}

- (void)_addAppCardBackgroundView
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  +[CKAppCardLoadingViewProvider spinnerViewController](CKAppCardLoadingViewProvider, "spinnerViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController setAppCardBackgroundViewController:](self, "setAppCardBackgroundViewController:", v3);

  -[CKChatController appCardBackgroundViewController](self, "appCardBackgroundViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController addChildViewController:](self, "addChildViewController:", v4);

  -[CKChatController view](self, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController appCardBackgroundViewController](self, "appCardBackgroundViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "view");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addSubview:", v7);

  -[CKChatController appCardBackgroundViewController](self, "appCardBackgroundViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "didMoveToParentViewController:", self);

  -[CKChatController appCardBackgroundViewController](self, "appCardBackgroundViewController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "view");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "topAnchor");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController entryView](self, "entryView");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "bottomAnchor");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "constraintEqualToAnchor:", v27);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v30[0] = v26;
  objc_msgSend(v10, "leadingAnchor");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController view](self, "view");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "leadingAnchor");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "constraintEqualToAnchor:", v23);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v30[1] = v22;
  objc_msgSend(v10, "trailingAnchor");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController view](self, "view");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "trailingAnchor");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "constraintEqualToAnchor:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v30[2] = v13;
  objc_msgSend(v10, "bottomAnchor");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController view](self, "view");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "bottomAnchor");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "constraintEqualToAnchor:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v30[3] = v17;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v30, 4);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController setAppCardBackgroundViewConstraints:](self, "setAppCardBackgroundViewConstraints:", v18);

  v19 = (void *)MEMORY[0x1E0CB3718];
  -[CKChatController appCardBackgroundViewConstraints](self, "appCardBackgroundViewConstraints");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "activateConstraints:", v20);

  objc_msgSend(v10, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
}

- (void)addAppCardBackgroundViewIfNecessary
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  -[CKChatController appCardBackgroundViewController](self, "appCardBackgroundViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {

  }
  else
  {
    -[CKChatController entryView](self, "entryView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "window");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      -[CKCoreChatController inputController](self, "inputController");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController traitCollection](self, "traitCollection");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v6, "determineSendMenuPresentationStyleCompatibleWithTraitCollection:", v7);

      if (!v8)
        -[CKChatController _addAppCardBackgroundView](self, "_addAppCardBackgroundView");
    }
  }
}

- (void)removeAppCardBackgroundViewIfNecessary
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  -[CKChatController appCardBackgroundViewController](self, "appCardBackgroundViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[CKChatController appCardBackgroundViewController](self, "appCardBackgroundViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "willMoveToParentViewController:", 0);

    -[CKChatController appCardBackgroundViewController](self, "appCardBackgroundViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "view");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "removeFromSuperview");

    -[CKChatController appCardBackgroundViewController](self, "appCardBackgroundViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "removeFromParentViewController");

    v8 = (void *)MEMORY[0x1E0CB3718];
    -[CKChatController appCardBackgroundViewConstraints](self, "appCardBackgroundViewConstraints");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "deactivateConstraints:", v9);

    -[CKChatController setAppCardBackgroundViewConstraints:](self, "setAppCardBackgroundViewConstraints:", 0);
    -[CKChatController setAppCardBackgroundViewController:](self, "setAppCardBackgroundViewController:", 0);
  }
}

- (void)_layoutEntryViewSuperview
{
  void *v3;
  void *v4;
  NSObject *v5;
  uint8_t v6[16];

  -[CKChatController entryView](self, "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "superview");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "setNeedsLayout");
  if (-[CKCoreChatController initialLayoutComplete](self, "initialLayoutComplete"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "Triggering layout for entry view positioning change", v6, 2u);
      }

    }
    objc_msgSend(v4, "layoutIfNeeded");
  }

}

- (void)appCardDidChangeEntryViewAlignmentHeight:(double)a3 animated:(BOOL)a4
{
  _BOOL4 v4;
  NSLayoutConstraint *entryViewAppCardLayoutConstraint;
  double v8;
  void *v9;
  uint64_t v10;
  double v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[5];

  v4 = a4;
  entryViewAppCardLayoutConstraint = self->_entryViewAppCardLayoutConstraint;
  if (!entryViewAppCardLayoutConstraint
    || (-[NSLayoutConstraint constant](entryViewAppCardLayoutConstraint, "constant"), vabdd_f64(a3, v8) >= 0.001))
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "collectionView");
    v13 = (id)objc_claimAutoreleasedReturnValue();

    -[NSLayoutConstraint setConstant:](self->_entryViewAppCardLayoutConstraint, "setConstant:", a3);
    if (v4)
    {
      v10 = 103;
    }
    else
    {
      -[CKChatController _layoutEntryViewSuperview](self, "_layoutEntryViewSuperview");
      v10 = 3;
    }
    if (v4)
      v11 = *MEMORY[0x1E0CEB8E0];
    else
      v11 = 0.0;
    -[CKScrollViewController updateScrollGeometryForReason:withDuration:animationCurve:](self, "updateScrollGeometryForReason:withDuration:animationCurve:", CFSTR("AppCardChangedHeight"), v10, v11, v13);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __70__CKChatController_appCardDidChangeEntryViewAlignmentHeight_animated___block_invoke;
    v15[3] = &unk_1E274A208;
    v15[4] = self;
    -[CKScrollViewController scrollWithDuration:animationCurve:scrollBlock:](self, "scrollWithDuration:animationCurve:scrollBlock:", v10, v15, v11);
    +[CKScrollViewAnimationProperties animatedWithDuration:animationCurve:](CKScrollViewAnimationProperties, "animatedWithDuration:animationCurve:", v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "enforceTranscriptScrollIntentWithAnimationProperties:", v12);

  }
}

void __70__CKChatController_appCardDidChangeEntryViewAlignmentHeight_animated___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_layoutEntryViewSuperview");
  objc_msgSend(*(id *)(a1 + 32), "view");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "layoutIfNeeded");

}

- (void)appCardViewStateDidChange:(BOOL)a3
{
  if (a3)
    -[CKChatController removeAppCardBackgroundViewIfNecessary](self, "removeAppCardBackgroundViewIfNecessary");
  else
    -[CKChatController addAppCardBackgroundViewIfNecessary](self, "addAppCardBackgroundViewIfNecessary");
}

- (void)appCardDidDismiss
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;

  -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "appeared") & 1) == 0)
    goto LABEL_4;
  -[CKCoreChatController inputController](self, "inputController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "didDismissAppCardForStickerDrag"))
  {

LABEL_4:
    goto LABEL_5;
  }
  -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "displayConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "shouldDismissWithAppCard");

  if (v7)
    -[CKChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:](self, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:", 1, 0, 0);
LABEL_5:
  -[CKChatController updateEntryViewHeightIncludingAppStrip:isContentChange:animated:](self, "updateEntryViewHeightIncludingAppStrip:isContentChange:animated:", 1, 0, 1);
  -[CKScrollViewController updateScrollGeometryWithoutAnimationForReason:](self, "updateScrollGeometryWithoutAnimationForReason:", CFSTR("AppCardDismissed"));
  -[CKChatController updateActiveEntryViewPositioningGuide](self, "updateActiveEntryViewPositioningGuide");
}

- (BOOL)isUsingVisibleInputViewHeightWhenUpdatingScrollGeometry
{
  void *v2;
  void *v3;
  char v4;

  -[CKChatController entryViewContainerView](self, "entryViewContainerView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "entryViewStuckToChatControllerBottomLayoutConstraint");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isActive") ^ 1;

  return v4;
}

- (double)visibleInputViewHeight
{
  double result;
  char v4;
  void *v5;
  char v6;
  objc_super v7;

  if (-[NSLayoutConstraint isActive](self->_entryViewAppCardLayoutConstraint, "isActive"))
  {
    -[NSLayoutConstraint constant](self->_entryViewAppCardLayoutConstraint, "constant");
  }
  else
  {
    v4 = objc_msgSend(MEMORY[0x1E0CEA6C8], "isInHardwareKeyboardMode");
    -[CKChatController collectionView](self, "collectionView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isDragging");

    if ((v4 & 1) != 0 || (v6 & 1) != 0 || -[CKChatController dismissingContextMenu](self, "dismissingContextMenu"))
    {
      -[CKChatController _keyboardHeightFromLayoutGuide](self, "_keyboardHeightFromLayoutGuide");
    }
    else
    {
      v7.receiver = self;
      v7.super_class = (Class)CKChatController;
      -[CKScrollViewController visibleInputViewHeight](&v7, sel_visibleInputViewHeight);
    }
  }
  return result;
}

- (double)_keyboardHeightFromLayoutGuide
{
  void *v3;
  void *v4;
  double x;
  double y;
  double width;
  double height;
  double v9;
  void *v10;
  void *v11;
  double MinY;
  CGRect v14;
  CGRect v15;
  CGRect v16;

  -[CKChatController entryView](self, "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "entryViewKeyboardLayoutGuide");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "layoutFrame");
  x = v14.origin.x;
  y = v14.origin.y;
  width = v14.size.width;
  height = v14.size.height;
  v9 = 0.0;
  if (!CGRectEqualToRect(v14, *MEMORY[0x1E0C9D648]))
  {
    objc_msgSend(v4, "owningView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController view](self, "view");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "convertRect:fromView:", v10, x, y, width, height);
    MinY = CGRectGetMinY(v15);
    objc_msgSend(v11, "bounds");
    v9 = CGRectGetMaxY(v16) - MinY;

  }
  return v9;
}

- (id)activeSendMenuPresentationForChatInputController:(id)a3
{
  void *v4;
  void *v5;

  -[CKChatController sendMenuDelegate](self, "sendMenuDelegate", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "activeSendMenuPresentationForChatController:", self);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (void)enforceSendMenuOrderingInWindowSubviews
{
  void *v3;
  void *v4;
  id v5;

  if (self->_keyboardSnapshotView)
  {
    -[CKChatController view](self, "view");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "window");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "bringSubviewToFront:", self->_keyboardSnapshotView);

  }
  -[CKChatController activeSendMenuPresentationForChatController:](self, "activeSendMenuPresentationForChatController:", self);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "enforceSendMenuOrderingInWindowSubviews");

}

- (id)chatInputTranscriptIdentifier
{
  void *v2;
  void *v3;

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "transcriptIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)viewForDragAndChatInputDropTarget
{
  void *v2;
  void *v3;

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "view");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)keyboardLayoutGuideForAppCardPresentation
{
  void *v2;
  void *v3;

  -[CKChatController entryView](self, "entryView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "entryViewKeyboardLayoutGuide");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)chatInputSentComposition:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  id v9;
  NSObject *v10;
  id v11;
  uint8_t buf[4];
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKCoreChatController conversation](self, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "recipients");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "count"))
  {
    -[CKCoreChatController conversation](self, "conversation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 0;
    v8 = objc_msgSend(v7, "canSendComposition:error:", v4, &v11);
    v9 = v11;

    if (v8)
    {
      -[CKChatController sendCompositionIfAllowed:](self, "sendCompositionIfAllowed:", v4);
      goto LABEL_9;
    }
  }
  else
  {

    v9 = 0;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v13 = v9;
      _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, "Failed to send composition with error: %@", buf, 0xCu);
    }

  }
LABEL_9:

}

- (BOOL)chatInputControllerCanSend:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  const __CFString *v13;
  BOOL v14;
  void *v16;
  char v17;
  int v18;
  const __CFString *v19;
  __int16 v20;
  const __CFString *v21;
  __int16 v22;
  const __CFString *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKCoreChatController conversation](self, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v5, "hasLeftGroupChat") & 1) != 0)
    goto LABEL_4;
  -[CKCoreChatController conversation](self, "conversation");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "isBusinessChatDisabled"))
  {

LABEL_4:
    goto LABEL_5;
  }
  -[CKCoreChatController conversation](self, "conversation");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "isReadOnlyChat");

  if ((v17 & 1) == 0)
  {
    v14 = 1;
    goto LABEL_19;
  }
LABEL_5:
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      -[CKCoreChatController conversation](self, "conversation");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v8, "hasLeftGroupChat"))
        v9 = CFSTR("YES");
      else
        v9 = CFSTR("NO");
      -[CKCoreChatController conversation](self, "conversation");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v10, "isBusinessChatDisabled"))
        v11 = CFSTR("YES");
      else
        v11 = CFSTR("NO");
      -[CKCoreChatController conversation](self, "conversation");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v12, "isReadOnlyChat"))
        v13 = CFSTR("YES");
      else
        v13 = CFSTR("NO");
      v18 = 138412802;
      v19 = v9;
      v20 = 2112;
      v21 = v11;
      v22 = 2112;
      v23 = v13;
      _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "Cannot send, leftGroupChat: %@, isBusinessChatDisabled: %@, readOnlyChat: %@", (uint8_t *)&v18, 0x20u);

    }
  }
  v14 = 0;
LABEL_19:

  return v14;
}

- (void)sendSticker:(id)a3 withDragTarget:(id)a4 draggedSticker:(id)a5
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  void *v38;
  int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  NSObject *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  _QWORD v70[12];
  _QWORD v71[14];

  v71[12] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  objc_msgSend(v7, "prepareToSend");
  objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "trackEvent:", *MEMORY[0x1E0D389D8]);

  -[CKChatController stickerTranscriptScrollDisplayLink](self, "stickerTranscriptScrollDisplayLink");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "invalidate");

  -[CKChatController setStickerTranscriptScrollDisplayLink:](self, "setStickerTranscriptScrollDisplayLink:", 0);
  objc_msgSend(v8, "screenCoordinate");
  v12 = v11;
  v14 = v13;
  objc_msgSend(v8, "scale");
  v16 = v15;
  objc_msgSend(v8, "rotation");
  if (v8)
  {
    v18 = v17;
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController selectedBalloonForTarget:](self, "selectedBalloonForTarget:", v8);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v20)
    {
LABEL_21:

      goto LABEL_22;
    }
    objc_msgSend(v19, "chatItems");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "objectAtIndex:", objc_msgSend(v20, "row"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v19, "balloonViewForChatItem:", v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v23;
    if (v23)
    {
      objc_msgSend(v23, "superview");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "frame");
      objc_msgSend(v25, "convertRect:toView:", 0);
      v27 = v26;
      v29 = v28;
      v31 = v30;
      v33 = v32;

      v34 = (v12 - v27) / v31;
      v35 = (v14 - v29) / v33;
      objc_msgSend(v22, "size");
      v37 = v36;
      objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v38, "isStickerRepositioningEnabled"))
      {
        v39 = objc_msgSend(v8, "stickerIsRepositioning");

        if (v39)
        {
          objc_msgSend(v8, "stickerChatItem");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v41 = objc_msgSend(v40, "stickerPositionVersion") + 1;

          v70[0] = *MEMORY[0x1E0D392F8];
          objc_msgSend(v7, "stickerGUID");
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          v71[0] = v69;
          v70[1] = *MEMORY[0x1E0D39310];
          objc_msgSend(v7, "stickerPackGUID");
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          v71[1] = v68;
          v70[2] = *MEMORY[0x1E0D39300];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lu"), objc_msgSend(v7, "hash"));
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = *MEMORY[0x1E0D39308];
          v71[2] = v67;
          v71[3] = MEMORY[0x1E0C9AAA0];
          v43 = *MEMORY[0x1E0D392E8];
          v70[3] = v42;
          v70[4] = v43;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v7, "stickerEffectType"));
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v71[4] = v66;
          v70[5] = *MEMORY[0x1E0D39328];
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v34);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          v71[5] = v65;
          v70[6] = *MEMORY[0x1E0D39330];
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v35);
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          v71[6] = v64;
          v70[7] = *MEMORY[0x1E0D392D8];
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v16);
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          v71[7] = v63;
          v70[8] = *MEMORY[0x1E0D392D0];
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v18);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          v71[8] = v62;
          v70[9] = *MEMORY[0x1E0D392C8];
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v37);
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          v71[9] = v61;
          v70[10] = *MEMORY[0x1E0D39318];
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v41);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          v70[11] = *MEMORY[0x1E0D392C0];
          v71[10] = v44;
          v71[11] = &unk_1E2870360;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v71, v70, 12);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          v46 = (void *)objc_msgSend(v45, "mutableCopy");

          objc_msgSend(v7, "ballonBundleID");
          v47 = (void *)objc_claimAutoreleasedReturnValue();

          if (v47)
          {
            objc_msgSend(v7, "ballonBundleID");
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v46, "setObject:forKey:", v48, *MEMORY[0x1E0D392E0]);

          }
          objc_msgSend(v7, "getSafeExternalURI");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "setObject:forKey:", v49, *MEMORY[0x1E0D392F0]);

          objc_msgSend(v8, "stickerChatItem");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          if (!-[CKChatController repositionSticker:stickerChatItem:parentMessagePartChatItem:stickerPositioningInfo:](self, "repositionSticker:stickerChatItem:parentMessagePartChatItem:stickerPositioningInfo:", v7, v50, v22, v46))
          {
            -[CKCoreChatController collectionViewController](self, "collectionViewController");
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v51, "cellForAssociatedChatItem:", v50);
            v52 = (void *)objc_claimAutoreleasedReturnValue();

            if (v52)
            {
              objc_msgSend(v52, "setHidden:", 0);
              objc_msgSend(v52, "setStickerViewHidden:", 0);
            }

          }
          goto LABEL_20;
        }
      }
      else
      {

      }
      v53 = (void *)MEMORY[0x1E0D39B18];
      v54 = objc_msgSend(v7, "initialFrameIndex");
      objc_msgSend(v7, "getSafeExternalURI");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "userInfoDictionaryWithLayoutIntent:parentPreviewWidth:xScalar:yScalar:scale:rotation:initialFrameIndex:stickerPositionVersion:externalURI:", 0, v54, 0, v55, v37, v34, v35, v16, v18);
      v56 = (void *)objc_claimAutoreleasedReturnValue();

      +[CKMediaObjectManager sharedInstance](CKMediaObjectManager, "sharedInstance");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "mediaObjectWithSticker:stickerUserInfo:", v7, v56);
      v58 = (void *)objc_claimAutoreleasedReturnValue();

      if (v58)
      {
        -[CKChatController compositionForSticker:mediaObject:](self, "compositionForSticker:mediaObject:", v7, v58);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController sendSticker:withMediaObject:composition:parentMessagePartChatItem:](self, "sendSticker:withMediaObject:composition:parentMessagePartChatItem:", v7, v58, v59, v22);

      }
      else
      {
        IMLogHandleForCategory();
        v60 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
          -[CKChatController sendSticker:withDragTarget:draggedSticker:].cold.1(v7, v60);

      }
    }
LABEL_20:

    goto LABEL_21;
  }
LABEL_22:

}

- (id)_compositionForEmojiSticker:(id)a3 mediaObject:(id)a4
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  CKComposition *v10;
  id v11;
  void *v12;
  void *v13;
  CKComposition *v14;
  void *v15;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v17 = a4;
  v5 = (void *)MEMORY[0x1E0C99D20];
  v6 = a4;
  v7 = a3;
  objc_msgSend(v5, "arrayWithObjects:count:", &v17, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKComposition stickerCompositionWithMediaObjects:](CKComposition, "stickerCompositionWithMediaObjects:", v8, v17, v18);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = [CKComposition alloc];
  v11 = objc_alloc(MEMORY[0x1E0CB3498]);

  objc_msgSend(v7, "emojiString");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = (void *)objc_msgSend(v11, "initWithString:", v12);
  v14 = -[CKComposition initWithText:subject:](v10, "initWithText:subject:", v13, 0);

  -[CKComposition compositionByAppendingComposition:](v14, "compositionByAppendingComposition:", v9);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

- (id)compositionForSticker:(id)a3 mediaObject:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (objc_msgSend(v6, "isEmojiSticker"))
  {
    -[CKChatController _compositionForEmojiSticker:mediaObject:](self, "_compositionForEmojiSticker:mediaObject:", v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v11[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    +[CKComposition stickerCompositionWithMediaObjects:](CKComposition, "stickerCompositionWithMediaObjects:", v9);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v8;
}

- (void)_setHoldUpdatesForStickerMoveAnimation:(BOOL)a3
{
  _BOOL4 v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = a3;
  -[CKCoreChatController chat](self, "chat");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *MEMORY[0x1E0D353B0];
  v6 = v4;
  if (v3)
    objc_msgSend(v4, "beginHoldingChatItemsUpdatesForReason:", v5);
  else
    objc_msgSend(v4, "endHoldingChatItemsUpdatesForReason:", v5);

}

- (void)updateSupportedInterfaceOrientations:(unint64_t)a3
{
  void *v5;
  char v6;
  id v7;

  -[CKCoreChatController delegate](self, "delegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) != 0)
  {
    -[CKCoreChatController delegate](self, "delegate");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "updateSupportedInterfaceOrientations:", a3);

  }
}

- (void)stopForcingOrientation
{
  void *v3;
  char v4;
  id v5;

  -[CKCoreChatController delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    -[CKCoreChatController delegate](self, "delegate");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stopForcingOrientation");

  }
}

- (int64_t)sceneInterfaceOrientation
{
  void *v2;
  void *v3;
  void *v4;
  int64_t v5;

  -[CKChatController viewIfLoaded](self, "viewIfLoaded");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "window");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "windowScene");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
    v5 = objc_msgSend(v4, "interfaceOrientation");
  else
    v5 = 1;

  return v5;
}

- (unint64_t)recipientsCount
{
  void *v2;
  void *v3;
  unint64_t v4;

  -[CKCoreChatController conversation](self, "conversation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "recipients");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");

  return v4;
}

- (BOOL)commitStickerAsTapback:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  BOOL v13;
  uint8_t v15[16];
  uint8_t buf[16];

  v4 = a3;
  -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "displayConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "type");

  if (v7 == 1)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Inserting sticker as Tapback during double-tap", buf, 2u);
      }

    }
    -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[CKChatController pickerContainerAccessoryView](self, "pickerContainerAccessoryView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v10)
    {
      v13 = 0;
      goto LABEL_14;
    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "Inserting sticker as Tapback during long-press", v15, 2u);
      }

    }
    -[CKChatController pickerContainerAccessoryView](self, "pickerContainerAccessoryView");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "pickerBalloonParentView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(v9, "insertSticker:", v4);

  v13 = 1;
LABEL_14:

  return v13;
}

- (BOOL)allowsMentions
{
  void *v2;
  void *v3;
  void *v4;
  char v5;

  -[CKChatController entryView](self, "entryView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "contentView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "textView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "allowsMentions");

  return v5;
}

- (void)_dismissSendMenuIfNecessaryForChangedPresentationStyle
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t v10[16];

  -[CKChatController activeSendMenuPresentationForChatController:](self, "activeSendMenuPresentationForChatController:", self);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, "presentationStyle");
    -[CKCoreChatController inputController](self, "inputController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController traitCollection](self, "traitCollection");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "determineSendMenuPresentationStyleCompatibleWithTraitCollection:", v7);

    if (v5 != v8)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v10 = 0;
          _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, "Dismissing send menu due to a presentation style change (e.g. resizing the window on an iPad)", v10, 2u);
        }

      }
      objc_msgSend(v4, "dismissAnimated:completion:", 0, 0);
    }
  }

}

- (id)activeSendMenuPresentationForChatController:(id)a3
{
  void *v4;
  void *v5;

  -[CKChatController sendMenuDelegate](self, "sendMenuDelegate", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "activeSendMenuPresentationForChatController:", self);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (void)chatController:(id)a3 requestPresentSendMenu:(id)a4
{
  id v6;
  id v7;
  id v8;

  v6 = a4;
  v7 = a3;
  -[CKChatController sendMenuDelegate](self, "sendMenuDelegate");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "chatController:requestPresentSendMenu:", v7, v6);

}

- (void)chatController:(id)a3 didFinishDismissAnimationForSendMenuViewController:(id)a4
{
  id v6;
  id v7;
  id v8;

  v6 = a4;
  v7 = a3;
  -[CKChatController sendMenuDelegate](self, "sendMenuDelegate");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "chatController:didFinishDismissAnimationForSendMenuViewController:", v7, v6);

}

- (void)chatInputControllerRequestShowKeyboardSnapshot:(id)a3
{
  -[CKChatController requestShowKeyboardSnapshotForReason:](self, "requestShowKeyboardSnapshotForReason:", 1);
}

- (void)chatInputControllerRequestDismissKeyboardSnapshot:(id)a3
{
  -[CKChatController requestDismissKeyboardSnapshotForReason:](self, "requestDismissKeyboardSnapshotForReason:", 1);
}

- (void)fullScreenBalloonViewControllerRequestShowKeyboardSnapshot:(id)a3
{
  -[CKChatController requestShowKeyboardSnapshotForReason:](self, "requestShowKeyboardSnapshotForReason:", 16);
}

- (void)fullScreenBalloonViewControllerRequestDismissKeyboardSnapshot:(id)a3
{
  -[CKChatController requestDismissKeyboardSnapshotForReason:](self, "requestDismissKeyboardSnapshotForReason:", 16);
}

- (void)requestShowKeyboardSnapshotForReason:(unint64_t)a3
{
  unint64_t keyboardSnapshotReason;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  NSObject *v35;
  unint64_t v36;
  NSObject *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  double v45;
  double v46;
  double v47;
  CGFloat v48;
  double v49;
  double v50;
  double v51;
  double v52;
  void *v53;
  void *v54;
  double Height;
  double v56;
  void *v57;
  NSObject *v58;
  void *v59;
  void *v60;
  double v61;
  void *v62;
  void *v63;
  void *v64;
  NSLayoutConstraint *v65;
  NSLayoutConstraint *entryViewKeyboardSnapshotLayoutConstraint;
  void *v67;
  uint8_t buf[4];
  void *v69;
  __int16 v70;
  _BOOL4 v71;
  uint64_t v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;

  v72 = *MEMORY[0x1E0C80C00];
  if (!+[CKUtilities isIpad](CKUtilities, "isIpad"))
  {
    if (!a3)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v67, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("CKChatController.m"), 8452, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("reason != CKKeyboardSnapshotReasonNone"));

    }
    keyboardSnapshotReason = self->_keyboardSnapshotReason;
    self->_keyboardSnapshotReason = keyboardSnapshotReason | a3;
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v69 = v8;
        v70 = 1024;
        v71 = keyboardSnapshotReason == 0;
        _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "request to show keyboardSnapshot with reason: %@, snapshotCreationNeeded: %{BOOL}d", buf, 0x12u);

      }
    }
    if (!keyboardSnapshotReason)
    {
      objc_msgSend(MEMORY[0x1E0CEA6C8], "activeKeyboard");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKCoreChatController inputController](self, "inputController");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "isInputViewVisible");

      if (v11)
      {
        -[CKChatController inputViewController](self, "inputViewController");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "view");
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v13, "snapshotViewAfterScreenUpdates:", 0);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "coordinateSpace");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "bounds");
        v17 = v16;
        v19 = v18;
        v21 = v20;
        v23 = v22;
        objc_msgSend(v13, "window");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "screen");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "coordinateSpace");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "convertRect:toCoordinateSpace:", v26, v17, v19, v21, v23);
        v28 = v27;
        v30 = v29;
        v32 = v31;
        v34 = v33;

        objc_msgSend(v14, "setFrame:", v28, v30, v32, v34);
      }
      else if ((objc_msgSend(MEMORY[0x1E0CEA6C8], "usesInputSystemUI") & 1) != 0)
      {
        IMLogHandleForCategory();
        v35 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18DFCD000, v35, OS_LOG_TYPE_DEFAULT, "Requesting OOP keyboard snapshot.", buf, 2u);
        }

        objc_msgSend(MEMORY[0x1E0CEA6C8], "snapshotViewForOptions:", 1);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        if (v14)
          goto LABEL_24;
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("CKChatController.m"), 8493, CFSTR("+[UIKeyboard snapshotViewForOptions:UIKBSnapshotOptionWindow] returned nil. Unexpected."));
        v14 = 0;
      }
      else
      {
        v36 = self->_keyboardSnapshotReason;
        if ((v36 & 0x10) != 0)
        {
          IMLogHandleForCategory();
          v37 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18DFCD000, v37, OS_LOG_TYPE_DEFAULT, "Forcing immediate keyboard snapshot for CKKeyboardSnapshotReasonSnapshotFullScreenBalloon", buf, 2u);
          }

        }
        IMLogHandleForCategory();
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18DFCD000, v38, OS_LOG_TYPE_DEFAULT, "Requesting keyboard snapshot.", buf, 2u);
        }

        objc_msgSend(v9, "superview");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "superview");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "snapshotViewAfterScreenUpdates:", (v36 & 0x10) == 0);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

      }
LABEL_24:
      -[CKChatController setKeyboardAlpha:](self, "setKeyboardAlpha:", 0.0);
      -[CKChatController setKeyboardSnapshotView:](self, "setKeyboardSnapshotView:", v14);
      -[CKChatController keyboardSnapshotView](self, "keyboardSnapshotView");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "setUserInteractionEnabled:", 0);

      -[CKChatController view](self, "view");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "window");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController keyboardSnapshotView](self, "keyboardSnapshotView");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "addSubview:", v43);

      -[CKChatController enforceSendMenuOrderingInWindowSubviews](self, "enforceSendMenuOrderingInWindowSubviews");
      -[CKChatController keyboardSnapshotView](self, "keyboardSnapshotView");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "frame");
      v46 = v45;
      v48 = v47;
      v50 = v49;
      v52 = v51;

      -[CKChatController view](self, "view");
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "window");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v54, "bounds");
      Height = CGRectGetHeight(v73);
      v74.origin.x = v46;
      v74.origin.y = v48;
      v74.size.width = v50;
      v74.size.height = v52;
      v56 = CGRectGetHeight(v74);

      -[CKChatController keyboardSnapshotView](self, "keyboardSnapshotView");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "setFrame:", v46, Height - v56, v50, v52);

      if ((v11 & 1) == 0 && objc_msgSend(v9, "isMinimized"))
      {
        IMLogHandleForCategory();
        v58 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18DFCD000, v58, OS_LOG_TYPE_DEFAULT, "UIKeyboard is minimized e.g. due to a hardware keyboard. The snapshot we've taken may include a keyboard, but it is not visible to the user. Hiding the snapshot.", buf, 2u);
        }

        -[CKChatController keyboardSnapshotView](self, "keyboardSnapshotView");
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v59, "setHidden:", 1);

      }
      -[CKChatController entryView](self, "entryView");
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKScrollViewController keyboardFrame](self, "keyboardFrame");
      v61 = CGRectGetHeight(v75);
      objc_msgSend(v60, "window");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "bottomAnchor");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "bottomAnchor");
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "constraintEqualToAnchor:constant:", v64, v61);
      v65 = (NSLayoutConstraint *)objc_claimAutoreleasedReturnValue();
      entryViewKeyboardSnapshotLayoutConstraint = self->_entryViewKeyboardSnapshotLayoutConstraint;
      self->_entryViewKeyboardSnapshotLayoutConstraint = v65;

      -[CKChatController updateActiveEntryViewPositioningGuide](self, "updateActiveEntryViewPositioningGuide");
    }
  }
}

- (void)setKeyboardAlpha:(double)a3
{
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD aBlock[6];

  if ((objc_msgSend(MEMORY[0x1E0CEA6C8], "usesInputSystemUI") & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CD28B0], "activate");
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __37__CKChatController_setKeyboardAlpha___block_invoke;
    aBlock[3] = &unk_1E274C9C0;
    *(double *)&aBlock[5] = a3;
    aBlock[4] = self;
    v5 = _Block_copy(aBlock);
    objc_msgSend(MEMORY[0x1E0CD28B0], "addCommitHandler:forPhase:", v5, 5);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA6C8], "setKeyboardAlpha:", a3);
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isExpressiveTextEnabled");

    if (v7)
    {
      -[CKChatController entryView](self, "entryView");
      v10 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "contentView");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "textView");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "hideTextEffectsPickerIfNeeded");

    }
  }
}

void __37__CKChatController_setKeyboardAlpha___block_invoke(uint64_t a1)
{
  void *v2;
  int v3;
  void *v4;
  void *v5;
  id v6;

  objc_msgSend(MEMORY[0x1E0CEA6C8], "setKeyboardAlpha:", *(double *)(a1 + 40));
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isExpressiveTextEnabled");

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "entryView");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "contentView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "textView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "hideTextEffectsPickerIfNeeded");

  }
}

- (void)hideExistingKeyboardSnapshot
{
  void *v3;

  -[CKChatController keyboardSnapshotView](self, "keyboardSnapshotView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAlpha:", 0.0);

  -[CKChatController setKeyboardAlpha:](self, "setKeyboardAlpha:", 1.0);
}

- (void)revealExistingKeyboardSnapshot
{
  void *v3;

  -[CKChatController keyboardSnapshotView](self, "keyboardSnapshotView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAlpha:", 1.0);

  -[CKChatController setKeyboardAlpha:](self, "setKeyboardAlpha:", 0.0);
}

- (void)_inheritHiddenKeyboardAppearanceIfNeeded
{
  void *v3;
  void *v4;
  void *v5;
  _BOOL4 v6;
  void *v7;
  double v8;
  double v9;
  NSObject *v10;
  _QWORD v11[5];
  uint8_t buf[16];

  -[CKChatController keyboardSnapshotView](self, "keyboardSnapshotView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[CKChatController keyboardSnapshotView](self, "keyboardSnapshotView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "window");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5 != 0;

  }
  else
  {
    v6 = 0;
  }

  -[CKChatController keyboardSnapshotView](self, "keyboardSnapshotView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "alpha");
  v9 = v8;

  if (v6 && v9 > 0.99)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, "Keyboard will show while keyboard snapshot is in use. Will hide new keyboard view.", buf, 2u);
      }

    }
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __60__CKChatController__inheritHiddenKeyboardAppearanceIfNeeded__block_invoke;
    v11[3] = &unk_1E274A208;
    v11[4] = self;
    objc_msgSend(MEMORY[0x1E0CEABB0], "performWithoutAnimation:", v11);
  }
}

uint64_t __60__CKChatController__inheritHiddenKeyboardAppearanceIfNeeded__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setKeyboardAlpha:", 0.0);
}

- (void)requestDismissKeyboardSnapshotForReason:(unint64_t)a3
{
  unint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSLayoutConstraint *entryViewKeyboardSnapshotLayoutConstraint;
  void *v11;
  uint8_t buf[4];
  void *v13;
  __int16 v14;
  _BOOL4 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!+[CKUtilities isIpad](CKUtilities, "isIpad"))
  {
    if (!a3)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, CFSTR("CKChatController.m"), 8575, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("reason != CKKeyboardSnapshotReasonNone"));

    }
    v6 = self->_keyboardSnapshotReason & ~a3;
    self->_keyboardSnapshotReason = v6;
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v13 = v8;
        v14 = 1024;
        v15 = v6 == 0;
        _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "request to dismiss keyboardSnapshot with reason: %@, snapshotRemovalNeeded: %{BOOL}d", buf, 0x12u);

      }
    }
    if (!v6)
    {
      objc_msgSend(MEMORY[0x1E0CEA6C8], "setKeyboardAlpha:", 1.0);
      -[CKChatController keyboardSnapshotView](self, "keyboardSnapshotView");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "removeFromSuperview");

      -[CKChatController setKeyboardSnapshotView:](self, "setKeyboardSnapshotView:", 0);
      -[CKChatController updateActiveEntryViewPositioningGuide](self, "updateActiveEntryViewPositioningGuide");
      entryViewKeyboardSnapshotLayoutConstraint = self->_entryViewKeyboardSnapshotLayoutConstraint;
      self->_entryViewKeyboardSnapshotLayoutConstraint = 0;

    }
  }
}

- (void)animatedDismissalOfKeyboardSnapshot
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];

  if (self->_keyboardSnapshotView)
  {
    -[CKChatController requestShowKeyboardSnapshotForReason:](self, "requestShowKeyboardSnapshotForReason:", 8);
    v3 = objc_alloc_init(MEMORY[0x1E0CEA9D8]);
    v4 = objc_alloc(MEMORY[0x1E0CEABC8]);
    v5 = (void *)objc_msgSend(v4, "initWithDuration:timingParameters:", v3, *MEMORY[0x1E0CEB8E0]);
    v6 = MEMORY[0x1E0C809B0];
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __55__CKChatController_animatedDismissalOfKeyboardSnapshot__block_invoke;
    v8[3] = &unk_1E274A208;
    v8[4] = self;
    objc_msgSend(v5, "addAnimations:", v8);
    v7[0] = v6;
    v7[1] = 3221225472;
    v7[2] = __55__CKChatController_animatedDismissalOfKeyboardSnapshot__block_invoke_2;
    v7[3] = &unk_1E274C9E8;
    v7[4] = self;
    objc_msgSend(v5, "addCompletion:", v7);
    objc_msgSend(v5, "startAnimation");

  }
}

uint64_t __55__CKChatController_animatedDismissalOfKeyboardSnapshot__block_invoke(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  double Height;
  CGRect v12;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2056), "frame");
  v3 = v2;
  v5 = v4;
  v7 = v6;
  objc_msgSend(*(id *)(a1 + 32), "view");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "window");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "bounds");
  Height = CGRectGetHeight(v12);

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2056), "setFrame:", v3, Height, v5, v7);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1712), "setConstant:", 0.0);
}

uint64_t __55__CKChatController_animatedDismissalOfKeyboardSnapshot__block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "requestDismissKeyboardSnapshotForReason:", 8);
}

- (void)requestShowKeyboardSnapshotForSendMenu
{
  -[CKChatController requestShowKeyboardSnapshotForReason:](self, "requestShowKeyboardSnapshotForReason:", 2);
}

- (void)requestDismissKeyboardSnapshotForSendMenu
{
  -[CKChatController requestDismissKeyboardSnapshotForReason:](self, "requestDismissKeyboardSnapshotForReason:", 2);
}

- (void)requestDismissKeyboardSnapshotForEffectPickerIfNeeded
{
  if ((self->_keyboardSnapshotReason & 4) != 0)
    -[CKChatController requestDismissKeyboardSnapshotForReason:](self, "requestDismissKeyboardSnapshotForReason:", 4);
}

- (id)newInputSnapshotView
{
  return 0;
}

+ (void)donateStickerToRecents:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  IMLogHandleForCategory();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    objc_msgSend(v4, "description");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v21 = v6;
    _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "Donating sticker to recents: %@", buf, 0xCu);

  }
  objc_msgSend(v4, "representations");
  v7 = objc_claimAutoreleasedReturnValue();
  if (v7)
    goto LABEL_4;
  objc_msgSend(v4, "fileURL");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    objc_msgSend(v4, "fileURL");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "representationFromFileURL:", v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if (v18)
    {
      v19 = v18;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v19, 1);
      v7 = objc_claimAutoreleasedReturnValue();

LABEL_4:
      objc_msgSend(v4, "stickerGUID");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v4, "stickerEffectType");
      objc_msgSend(v4, "externalURI");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "stickerName");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "accessibilityLabel");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "attributionInfo");
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = (void *)v13;
      v15 = MEMORY[0x1E0C9AA70];
      if (v13)
        v15 = v13;
      objc_msgSend(a1, "donateStickerToRecentsWithIdentifier:representations:stickerEffectType:externalURI:name:accessibilityLabel:metadata:ckAttributionInfo:", v8, v7, v9, v10, v11, v12, 0, v15);

      goto LABEL_7;
    }
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      +[CKChatController donateStickerToRecents:].cold.2(v4, v7);
  }
  else
  {
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      +[CKChatController donateStickerToRecents:].cold.1(v4, v7);
  }
LABEL_7:

}

+ (void)donateStickerToRecentsWithIdentifier:(id)a3 representations:(id)a4 stickerEffectType:(int64_t)a5 externalURI:(id)a6 name:(id)a7 accessibilityLabel:(id)a8 metadata:(id)a9 ckAttributionInfo:(id)a10
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  NSObject *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  NSObject *v29;
  NSObject *v30;
  id v31;
  int64_t v32;
  _QWORD block[4];
  NSObject *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  int64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 buf;
  Class (*v49)(uint64_t);
  void *v50;
  uint64_t *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v15 = a3;
  v16 = a4;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v20 = a9;
  v21 = a10;
  IMLogHandleForCategory();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v15;
    _os_log_impl(&dword_18DFCD000, v22, OS_LOG_TYPE_INFO, "Donating sticker to recents with identifier: %@", (uint8_t *)&buf, 0xCu);
  }

  v44 = 0;
  v45 = &v44;
  v46 = 0x2050000000;
  v23 = (void *)get_STKMessagesObjCStoreFacadeClass_softClass;
  v47 = get_STKMessagesObjCStoreFacadeClass_softClass;
  if (!get_STKMessagesObjCStoreFacadeClass_softClass)
  {
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v49 = __get_STKMessagesObjCStoreFacadeClass_block_invoke;
    v50 = &unk_1E274A178;
    v51 = &v44;
    __get_STKMessagesObjCStoreFacadeClass_block_invoke((uint64_t)&buf);
    v23 = (void *)v45[3];
  }
  v24 = objc_retainAutorelease(v23);
  _Block_object_dispose(&v44, 8);
  v44 = 0;
  v45 = &v44;
  v46 = 0x2050000000;
  v25 = (void *)get_STKStickerUIStickerRepresentationClass_softClass;
  v47 = get_STKStickerUIStickerRepresentationClass_softClass;
  if (!get_STKStickerUIStickerRepresentationClass_softClass)
  {
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v49 = __get_STKStickerUIStickerRepresentationClass_block_invoke;
    v50 = &unk_1E274A178;
    v51 = &v44;
    __get_STKStickerUIStickerRepresentationClass_block_invoke((uint64_t)&buf);
    v25 = (void *)v45[3];
  }
  v32 = a5;
  v26 = objc_retainAutorelease(v25);
  _Block_object_dispose(&v44, 8);
  v44 = 0;
  v45 = &v44;
  v46 = 0x2050000000;
  v27 = (void *)get_STKStickerAttributionInfoClass_softClass;
  v47 = get_STKStickerAttributionInfoClass_softClass;
  if (!get_STKStickerAttributionInfoClass_softClass)
  {
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v49 = __get_STKStickerAttributionInfoClass_block_invoke;
    v50 = &unk_1E274A178;
    v51 = &v44;
    __get_STKStickerAttributionInfoClass_block_invoke((uint64_t)&buf);
    v27 = (void *)v45[3];
  }
  v28 = objc_retainAutorelease(v27);
  _Block_object_dispose(&v44, 8);
  if (v24 && v26 && v28)
  {
    dispatch_get_global_queue(25, 0);
    v31 = v20;
    v29 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __154__CKChatController_donateStickerToRecentsWithIdentifier_representations_stickerEffectType_externalURI_name_accessibilityLabel_metadata_ckAttributionInfo___block_invoke;
    block[3] = &unk_1E274CA10;
    v40 = v24;
    v34 = v16;
    v41 = v26;
    v35 = v21;
    v42 = v28;
    v36 = v15;
    v43 = v32;
    v37 = v17;
    v38 = v18;
    v39 = v19;
    dispatch_async(v29, block);

    v20 = v31;
    v30 = v34;
  }
  else
  {
    IMLogHandleForCategory();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      +[CKChatController donateStickerToRecentsWithIdentifier:representations:stickerEffectType:externalURI:name:accessibilityLabel:metadata:ckAttributionInfo:].cold.1();
  }

}

void __154__CKChatController_donateStickerToRecentsWithIdentifier_representations_stickerEffectType_externalURI_name_accessibilityLabel_metadata_ckAttributionInfo___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  id v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v29 = objc_alloc_init(*(Class *)(a1 + 80));
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v32 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
        v9 = objc_alloc(*(Class *)(a1 + 88));
        objc_msgSend(v8, "data");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "type");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "size");
        v13 = v12;
        v15 = v14;
        objc_msgSend(v8, "role");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = (void *)objc_msgSend(v9, "initWithData:type:size:role:", v10, v11, v16, v13, v15);

        objc_msgSend(v2, "addObject:", v17);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    }
    while (v5);
  }

  objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", *MEMORY[0x1E0D37F18]);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", *MEMORY[0x1E0D37F30]);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", *MEMORY[0x1E0D37F20]);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (void *)objc_msgSend(objc_alloc(*(Class *)(a1 + 96)), "initWithAdamID:bundleIdentifier:name:", v18, v19, v20);
  v22 = *(_QWORD *)(a1 + 104);
  v23 = *(_QWORD *)(a1 + 48);
  v24 = *(_QWORD *)(a1 + 56);
  v25 = *(_QWORD *)(a1 + 64);
  v26 = *(_QWORD *)(a1 + 72);
  v30 = 0;
  objc_msgSend(v29, "donateStickerToRecentsWithIdentifier:representations:stickerEffectEnum:externalURI:name:accessibilityName:metadata:attributionInfo:error:", v23, v2, v22, v24, v25, v26, 0, v21, &v30);
  v27 = v30;
  if (v27)
  {
    IMLogHandleForCategory();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      __154__CKChatController_donateStickerToRecentsWithIdentifier_representations_stickerEffectType_externalURI_name_accessibilityLabel_metadata_ckAttributionInfo___block_invoke_cold_1();

  }
}

+ (id)representationFromFileURL:(id)a3
{
  const __CFURL *v3;
  const __CFURL *v4;
  void *v5;
  void *v6;
  void *v7;
  CGImageSource *v8;
  __CFString *Type;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v16;

  v3 = (const __CFURL *)a3;
  v4 = v3;
  if (v3)
  {
    v5 = (void *)MEMORY[0x1E0CEA638];
    -[__CFURL path](v3, "path");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "imageWithContentsOfFile:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7
      && (v8 = CGImageSourceCreateWithURL(v4, 0), Type = (__CFString *)CGImageSourceGetType(v8), CFRelease(v8), Type))
    {
      v10 = objc_alloc_init(MEMORY[0x1E0CEAEF8]);
      v16 = 0;
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:options:error:", v4, 1, &v16);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = v16;
      objc_msgSend(v10, "setData:", v11);

      v13 = 0;
      if (!v12)
      {
        v14 = (void *)-[__CFString copy](Type, "copy");
        objc_msgSend(v10, "setType:", v14);

        objc_msgSend(v7, "size");
        objc_msgSend(v10, "setSize:");
        v13 = v10;
      }

    }
    else
    {
      v13 = 0;
    }

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

- (void)dragManagerDidBeginDragging:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  -[CKCoreChatController conversation](self, "conversation", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "chat");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "beginHoldingChatItemsUpdatesForReason:", *MEMORY[0x1E0D353A8]);
  -[CKScrollViewController beginHoldingScrollGeometryUpdatesForReason:](self, "beginHoldingScrollGeometryUpdatesForReason:", CFSTR("StickerDrag"));
  -[CKChatController setScrollDownIsValid:](self, "setScrollDownIsValid:", 0);
  -[CKChatController collectionView](self, "collectionView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "beginDisablingTranscriptDynamicsForReason:", CFSTR("StickerDrag"));

}

- (void)dragManager:(id)a3 draggedItemWithTarget:(id)a4
{
  void *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  double Height;
  double v16;
  double v17;
  void *v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  CGRect v29;

  v28 = a4;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "collectionView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKChatController selectedBalloonForTarget:](self, "selectedBalloonForTarget:", v28);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _setOverlayForBalloonViewAtIndexPath:](self, "_setOverlayForBalloonViewAtIndexPath:", v8);
  if (a3)
    goto LABEL_15;
  objc_msgSend(v28, "screenCoordinate");
  v10 = v9;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "dragTranscriptScrollThreshold");
  v13 = v12;

  -[CKChatController view](self, "view");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "bounds");
  Height = CGRectGetHeight(v29);
  objc_msgSend(v7, "contentInset");
  v17 = Height - v16;

  if (v10 >= v13 && v10 <= v17)
  {
    -[CKChatController setScrollDownIsValid:](self, "setScrollDownIsValid:", 1);
    goto LABEL_9;
  }
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "dragTranscriptScrollDisplayLinkMaxDelta");
  v21 = v20;

  if (v10 < v13)
  {
    v22 = -(fmin((v13 - v10) / v13, 1.0) * v21);
    goto LABEL_13;
  }
  v22 = 0.0;
  if (v10 > v17)
  {
    if (-[CKChatController scrollDownIsValid](self, "scrollDownIsValid", 0.0))
    {
      v22 = fmin((v10 - v17) / v13, 1.0) * v21;
      goto LABEL_13;
    }
    -[CKChatController setStickerTranscriptScrollDelta:](self, "setStickerTranscriptScrollDelta:", 0.0);
LABEL_9:
    -[CKChatController stickerTranscriptScrollDisplayLink](self, "stickerTranscriptScrollDisplayLink");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "invalidate");

    -[CKChatController setStickerTranscriptScrollDisplayLink:](self, "setStickerTranscriptScrollDisplayLink:", 0);
    goto LABEL_15;
  }
LABEL_13:
  -[CKChatController setStickerTranscriptScrollDelta:](self, "setStickerTranscriptScrollDelta:", v22);
  -[CKChatController stickerTranscriptScrollDisplayLink](self, "stickerTranscriptScrollDisplayLink");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v24)
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "displayLinkWithTarget:selector:", self, sel__stickerTranscriptScrollDisplayLinkFired);
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99E58], "mainRunLoop");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "addToRunLoop:forMode:", v27, *MEMORY[0x1E0C99860]);

    -[CKChatController setStickerTranscriptScrollDisplayLink:](self, "setStickerTranscriptScrollDisplayLink:", v26);
  }
LABEL_15:

}

- (void)_stickerTranscriptScrollDisplayLinkFired
{
  double v3;
  double v4;
  double v5;
  double v6;
  double stickerTranscriptScrollDelta;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  id v13;

  -[CKChatController collectionView](self, "collectionView");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "contentOffset");
  v4 = v3;
  v6 = v5;
  stickerTranscriptScrollDelta = self->_stickerTranscriptScrollDelta;
  -[CKCoreChatController inputController](self, "inputController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stickerPickerMessagePartChatItem");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
  {
    v10 = v6 + stickerTranscriptScrollDelta;
    objc_msgSend(v13, "__ck_bottomOffset");
    if (v10 < v11)
    {
      objc_msgSend(v13, "__ck_scrollToTopContentOffset");
      if (v10 > v12)
        objc_msgSend(v13, "setContentOffset:", v4, v10);
    }
  }

}

- (id)selectedBalloonForTarget:(id)a3
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  CGFloat v9;
  CGFloat v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  CGFloat v19;
  CGFloat v20;
  double v21;
  CGRect v23;
  CGRect v24;

  v4 = a3;
  objc_msgSend(v4, "screenCoordinate");
  v6 = v5;
  v8 = v7;
  v9 = *MEMORY[0x1E0C9D648];
  v10 = *(double *)(MEMORY[0x1E0C9D648] + 8);
  objc_msgSend(v4, "initialSize");
  v12 = v11;
  v14 = v13;
  objc_msgSend(v4, "scale");
  v16 = v15;
  objc_msgSend(v4, "meshScaleFactor");
  v18 = v17;

  v19 = v12 * (v16 / v18);
  v20 = v14 * (v16 / v18);
  v23.origin.x = v9;
  v23.origin.y = v10;
  v23.size.width = v19;
  v23.size.height = v20;
  v21 = v6 - CGRectGetWidth(v23) * 0.5;
  v24.origin.x = v9;
  v24.origin.y = v10;
  v24.size.width = v19;
  v24.size.height = v20;
  return -[CKChatController selectedBalloonIntersectingRect:](self, "selectedBalloonIntersectingRect:", v21, v8 - CGRectGetHeight(v24) * 0.5, v19, v20);
}

- (id)selectedBalloonIntersectingRect:(CGRect)a3
{
  return -[CKChatController selectedBalloonIntersectingRect:chatItemForRepositioning:](self, "selectedBalloonIntersectingRect:chatItemForRepositioning:", 0, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
}

- (id)selectedBalloonIntersectingRect:(CGRect)a3 chatItemForRepositioning:(id)a4
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double MinX;
  double v37;
  double MaxX;
  CGFloat v39;
  double v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  void *v48;
  _BOOL4 v49;
  void *v50;
  id v51;
  void *v52;
  CGFloat MidY;
  CGFloat MidX;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  void *v60;
  double v61;
  double v62;
  void *v63;
  id v64;
  _QWORD v65[4];
  id v66;
  uint64_t *v67;
  CGFloat v68;
  CGFloat v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  void (*v74)(uint64_t);
  id v75;
  _QWORD v76[4];
  id v77;
  CGFloat v78;
  CGFloat v79;
  CGFloat v80;
  CGFloat v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[128];
  uint64_t v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;
  CGRect v92;
  CGRect v93;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v87 = *MEMORY[0x1E0C80C00];
  v64 = a4;
  v88.origin.x = x;
  v88.origin.y = y;
  v88.size.width = width;
  v88.size.height = height;
  MidX = CGRectGetMidX(v88);
  v56 = x;
  v89.origin.x = x;
  v57 = y;
  v58 = width;
  v89.origin.y = y;
  v89.size.width = width;
  v59 = height;
  v89.size.height = height;
  MidY = CGRectGetMidY(v89);
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "collectionView");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v63, "indexPathsForVisibleItems");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v60 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v10, "count"));
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v11 = v10;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v82, v86, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v83;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v83 != v13)
          objc_enumerationMutation(v11);
        v15 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * i);
        if (!objc_msgSend(v15, "section"))
        {
          objc_msgSend(v9, "chatItems");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "objectAtIndex:", objc_msgSend(v15, "item"));
          v17 = (void *)objc_claimAutoreleasedReturnValue();

          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && (!v64 || objc_msgSend(v64, "isEqual:", v17)))
          {
            objc_msgSend(v63, "cellForItemAtIndexPath:", v15);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend(v18, "balloonView");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              v20 = v19;
              if (v19)
              {
                objc_msgSend(v19, "superview");
                v21 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v20, "frame");
                objc_msgSend(v21, "convertRect:toView:", v63);
                v61 = v23;
                v62 = v22;
                v25 = v24;
                v27 = v26;

                objc_msgSend(v63, "frame");
                v29 = v28;
                v31 = v30;
                v33 = v32;
                v35 = v34;
                v90.origin.x = v25;
                v90.size.width = v61;
                v90.origin.y = v62;
                v90.size.height = v27;
                MinX = CGRectGetMinX(v90);
                v91.origin.x = v29;
                v91.origin.y = v31;
                v91.size.width = v33;
                v91.size.height = v35;
                v37 = CGRectGetMinX(v91);
                v92.origin.x = v29;
                v92.origin.y = v31;
                v92.size.width = v33;
                v92.size.height = v35;
                MaxX = CGRectGetMaxX(v92);
                v93.origin.x = v25;
                v93.size.width = v61;
                v93.origin.y = v62;
                v93.size.height = v27;
                v39 = CGRectGetMaxX(v93);
                v40 = fmin(MinX - v37, 75.0);
                objc_msgSend(v63, "convertRect:toView:", 0, v25 - v40, v62, v61 + v40 + fmin(MaxX - v39, 75.0), v27 + 0.0);
                objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGRect:");
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v60, "setObject:forKey:", v41, v15);

              }
            }

          }
        }
      }
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v82, v86, 16);
    }
    while (v12);
  }

  v42 = (void *)objc_msgSend(v60, "copy");
  objc_msgSend(v42, "allKeys");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = MEMORY[0x1E0C809B0];
  v76[0] = MEMORY[0x1E0C809B0];
  v76[1] = 3221225472;
  v76[2] = __77__CKChatController_selectedBalloonIntersectingRect_chatItemForRepositioning___block_invoke;
  v76[3] = &unk_1E274CA38;
  v45 = v60;
  v77 = v45;
  v78 = v56;
  v79 = v57;
  v80 = v58;
  v81 = v59;
  objc_msgSend(v43, "enumerateObjectsUsingBlock:", v76);

  objc_msgSend(v45, "allKeys");
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = objc_msgSend(v46, "count");

  if (v47)
  {
    objc_msgSend(v45, "allKeys");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = objc_msgSend(v48, "count") == 1;

    if (v49)
    {
      objc_msgSend(v45, "allKeys");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "firstObject");
      v51 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v70 = 0;
      v71 = &v70;
      v72 = 0x3032000000;
      v73 = __Block_byref_object_copy__11;
      v74 = __Block_byref_object_dispose__11;
      v75 = 0;
      objc_msgSend(v45, "allKeys");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v65[0] = v44;
      v65[1] = 3221225472;
      v65[2] = __77__CKChatController_selectedBalloonIntersectingRect_chatItemForRepositioning___block_invoke_714;
      v65[3] = &unk_1E274CA60;
      v68 = MidX;
      v69 = MidY;
      v66 = v45;
      v67 = &v70;
      objc_msgSend(v52, "enumerateObjectsUsingBlock:", v65);

      v51 = (id)v71[5];
      _Block_object_dispose(&v70, 8);

    }
  }
  else
  {
    v51 = 0;
  }

  return v51;
}

void __77__CKChatController_selectedBalloonIntersectingRect_chatItemForRepositioning___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  id v12;
  CGRect v13;

  v12 = a2;
  objc_msgSend(*(id *)(a1 + 32), "objectForKey:");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "CGRectValue");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  v13.origin.x = v5;
  v13.origin.y = v7;
  v13.size.width = v9;
  v13.size.height = v11;
  if (!CGRectIntersectsRect(v13, *(CGRect *)(a1 + 40)))
    objc_msgSend(*(id *)(a1 + 32), "removeObjectForKey:", v12);

}

void __77__CKChatController_selectedBalloonIntersectingRect_chatItemForRepositioning___block_invoke_714(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  double v17;
  id v18;
  CGRect v19;
  CGRect v20;

  v18 = a2;
  objc_msgSend(*(id *)(a1 + 32), "objectForKey:");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "CGRectValue");
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;

  v16 = *(double *)(a1 + 56);
  v19.origin.x = v9;
  v19.origin.y = v11;
  v19.size.width = v13;
  v19.size.height = v15;
  if (v16 > CGRectGetMinY(v19))
  {
    v17 = *(double *)(a1 + 56);
    v20.origin.x = v9;
    v20.origin.y = v11;
    v20.size.width = v13;
    v20.size.height = v15;
    if (v17 < CGRectGetMaxY(v20))
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
      *a4 = 1;
    }
  }

}

- (void)dragManagerDidEndDragging:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  CKBrowserDragManager *browserDragManager;
  id v8;

  -[CKChatController _clearBalloonViewOverlays](self, "_clearBalloonViewOverlays", a3);
  -[CKChatController stickerTranscriptScrollDisplayLink](self, "stickerTranscriptScrollDisplayLink");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "invalidate");

  -[CKChatController setStickerTranscriptScrollDisplayLink:](self, "setStickerTranscriptScrollDisplayLink:", 0);
  -[CKChatController collectionView](self, "collectionView");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "chat");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "endDisablingTranscriptDynamicsForReason:", CFSTR("StickerDrag"));
  -[CKScrollViewController endHoldingScrollGeometryUpdatesForReason:](self, "endHoldingScrollGeometryUpdatesForReason:", CFSTR("StickerDrag"));
  objc_msgSend(v6, "endHoldingChatItemsUpdatesForReason:", *MEMORY[0x1E0D353A8]);
  browserDragManager = self->_browserDragManager;
  self->_browserDragManager = 0;

}

- (int)dragManager:(id)a3 dropAreaForDragTarget:(id)a4
{
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  void *v23;
  void *v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  void *v33;
  void *v34;
  void *v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  double v40;
  CGFloat v41;
  double v42;
  CGFloat v43;
  void *v44;
  int v45;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGPoint v53;
  CGPoint v54;
  CGPoint v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;

  v5 = a4;
  objc_msgSend(v5, "screenCoordinate");
  v7 = v6;
  v9 = v8;
  -[CKCoreChatController inputController](self, "inputController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "inputViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "view");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  v51 = v9;
  v52 = v7;
  if (v12)
  {
    v14 = v12;
  }
  else
  {
    -[CKChatController viewControllerForChatInputModalPresentation](self, "viewControllerForChatInputModalPresentation");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "presentedViewController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "view");
    v14 = (id)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(v14, "superview");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "frame");
  objc_msgSend(v17, "convertRect:toView:", 0);
  v49 = v19;
  v50 = v18;
  v47 = v21;
  v48 = v20;

  -[CKChatController entryView](self, "entryView");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "superview");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController entryView](self, "entryView");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "frame");
  objc_msgSend(v23, "convertRect:toView:", 0);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;

  -[CKChatController collectionView](self, "collectionView");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "superview");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController collectionView](self, "collectionView");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "frame");
  objc_msgSend(v34, "convertRect:toView:", 0);
  v37 = v36;
  v39 = v38;
  v41 = v40;
  v43 = v42;

  -[CKChatController selectedBalloonForTarget:](self, "selectedBalloonForTarget:", v5);
  v44 = (void *)objc_claimAutoreleasedReturnValue();

  v56.origin.x = v26;
  v56.origin.y = v28;
  v56.size.width = v30;
  v56.size.height = v32;
  v53.x = v52;
  v53.y = v51;
  if (CGRectContainsPoint(v56, v53))
  {
    v45 = 2;
  }
  else
  {
    v57.origin.y = v49;
    v57.origin.x = v50;
    v57.size.height = v47;
    v57.size.width = v48;
    v54.x = v52;
    v54.y = v51;
    if (CGRectContainsPoint(v57, v54))
    {
      v45 = 3;
    }
    else if (v44)
    {
      v45 = 4;
    }
    else
    {
      v58.origin.x = v37;
      v58.origin.y = v39;
      v58.size.width = v41;
      v58.size.height = v43;
      v55.x = v52;
      v55.y = v51;
      v45 = CGRectContainsPoint(v58, v55);
    }
  }

  return v45;
}

- (void)setLocalUserIsComposing:(BOOL)a3 withPluginBundleID:(id)a4 typingIndicatorData:(id)a5
{
  _BOOL4 v6;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v6 = a3;
  v11 = a4;
  v8 = a5;
  -[CKCoreChatController conversation](self, "conversation");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v6)
    objc_msgSend(v9, "setLocalUserIsComposing:typingIndicatorIcon:", v11, v8);
  else
    objc_msgSend(v9, "setLocalUserIsComposing:", 0);

}

- (void)chatInputControllerRequestInputViewFocusFromFullscreen:(id)a3
{
  self->_shouldBecomeFirstResponderWhenDismissingModalBrowser = 0;
  -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 1);
  -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
}

- (void)chatInputDidUpdateInputViewShowingBrowser:(BOOL)a3 entryFieldCollapsed:(BOOL)a4 animated:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  _BOOL4 v7;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  _QWORD v21[4];
  id v22;
  BOOL v23;

  v5 = a5;
  v6 = a4;
  v7 = a3;
  -[CKChatController entryView](self, "entryView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "contentView");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "textView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    -[CKChatController view](self, "view");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "window");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "isKeyWindow");

    if ((v14 & 1) == 0)
    {
      -[CKChatController view](self, "view");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "window");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "makeKeyWindow");

    }
    objc_msgSend(v11, "becomeFirstResponder");
    -[CKChatController entryView](self, "entryView");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "setEntryFieldCollapsed:animated:", v6, v5);

    objc_msgSend(v11, "saveKeyboardInputMode");
  }
  -[CKChatController firstResponder](self, "firstResponder");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "reloadInputViews");

  v19 = (void *)MEMORY[0x1E0CEABB0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __91__CKChatController_chatInputDidUpdateInputViewShowingBrowser_entryFieldCollapsed_animated___block_invoke;
  v21[3] = &unk_1E274CA88;
  v23 = v7;
  v22 = v11;
  v20 = v11;
  objc_msgSend(v19, "performWithoutAnimation:", v21);

}

uint64_t __91__CKChatController_chatInputDidUpdateInputViewShowingBrowser_entryFieldCollapsed_animated___block_invoke(uint64_t result)
{
  if (!*(_BYTE *)(result + 40))
    return objc_msgSend(*(id *)(result + 32), "restoreKeyboardInputMode");
  return result;
}

- (void)chatInputController:(id)a3 presentShelfModal:(id)a4 animated:(BOOL)a5 completion:(id)a6
{
  -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", a4, a5, a6);
}

- (void)chatInputDidUpdateWithNewInputViewController:(id)a3
{
  id v3;

  -[CKChatController firstResponder](self, "firstResponder", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "reloadInputViews");

}

- (void)chatInputControllerWillPresentModalBrowserViewController:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  -[CKChatController entryView](self, "entryView", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "contentView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isActive");

  -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 0);
  -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
  -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", v6);
  -[CKChatController collectionView](self, "collectionView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "beginHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerModalBrowser"));

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setAllowsPluginPlayback:", 0);

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "stopPluginPlayback");

}

- (void)chatInputControllerWillDismissModalBrowserViewController:(id)a3
{
  void *v4;
  id v5;

  -[CKScrollViewController endHoldingScrollGeometryUpdatesForReason:](self, "endHoldingScrollGeometryUpdatesForReason:", CFSTR("BrowserTransition"));
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "scrollTranscriptToEntryViewInsertionTimeWithAnimation:", 0);

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setTranscriptUpdateAnimated:", 1);

}

- (void)chatInputControllerDidDismissModalBrowserViewController:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  id v13;

  -[CKChatController collectionView](self, "collectionView", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "endHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerModalBrowser"));

  if (self->_shouldDisplayKeyboardWhenDismissingModalBrowser)
  {
    -[CKChatController entryView](self, "entryView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "contentView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isActive");

    if ((v7 & 1) == 0)
      -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 1);
  }
  if (self->_shouldBecomeFirstResponderWhenDismissingModalBrowser)
    -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
  objc_msgSend(MEMORY[0x1E0CEABB8], "attemptRotationToDeviceOrientation");
  self->_shouldBecomeFirstResponderWhenDismissingModalBrowser = 1;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setAllowsPluginPlayback:", 1);

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "startPluginPlaybackAfterDelay:", 0.0);

  -[CKChatController entryView](self, "entryView");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setAlpha:", 1.0);

  -[CKCoreChatController delegate](self, "delegate");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_opt_respondsToSelector();

  if ((v12 & 1) != 0)
  {
    -[CKCoreChatController delegate](self, "delegate");
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "stopForcingOrientation");

  }
}

- (void)chatInputControllerDidDismissCompactBrowserViewController:(id)a3
{
  void *v4;
  id v5;

  -[CKCoreChatController collectionViewController](self, "collectionViewController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "scrollTranscriptToEntryViewInsertionTimeWithAnimation:", 1);

  -[CKChatController entryView](self, "entryView");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setAlpha:", 1.0);

}

- (void)chatInputController:(id)a3 willPresentStickerPickerForChatItem:(id)a4
{
  void *v5;
  id v6;

  v6 = a4;
  if (!CKIsAppCardsEnabled())
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "beginPresentingChatItemForKeyboardPresentation:layoutAreaContentInsets:completion:", v6, 0, 40.0, 0.0, 40.0, 0.0);

  }
}

- (void)chatInputControllerDidSelectRequestLocation:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[CKCoreChatController inputController](self, "inputController");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  if (v5 == v4)
    -[CKChatController _stageFindMyLocationRequest](self, "_stageFindMyLocationRequest");
}

- (void)chatInputController:(id)a3 didPresentStickerPickerForChatItem:(id)a4
{
  void *v5;
  id v6;

  v6 = a4;
  if (!CKIsAppCardsEnabled())
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "endPresentingChatItemForKeyboardPresentation:completion:", v6, 0);

  }
}

- (void)chatInputDidSelectPhotoPicker
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];

  v17[3] = *MEMORY[0x1E0C80C00];
  v3 = objc_alloc_init(MEMORY[0x1E0CEA648]);
  -[CKChatController setImagePickerController:](self, "setImagePickerController:", v3);
  objc_msgSend(v3, "setDelegate:", self);
  v4 = *MEMORY[0x1E0CA5BF8];
  v17[0] = *MEMORY[0x1E0CA5B90];
  v17[1] = v4;
  v17[2] = *MEMORY[0x1E0CA5BC0];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v17, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setMediaTypes:", v5);

  v6 = MEMORY[0x1E0C9AAB0];
  objc_msgSend(v3, "_setValue:forProperty:", MEMORY[0x1E0C9AAB0], CFSTR("_UIImagePickerControllerSkipConfirmation"));
  objc_msgSend(v3, "_setValue:forProperty:", v6, CFSTR("_UIImagePickerControllerMessagesLayout"));
  objc_msgSend(v3, "setSourceType:", 0);
  objc_msgSend(v3, "setModalPresentationStyle:", 7);
  objc_msgSend(v3, "setAllowsEditing:", 0);
  v7 = v3;
  objc_msgSend(v7, "popoverPresentationController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setPermittedArrowDirections:", 8);
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isSendMenuEnabled");

  if (v10)
  {
    -[CKCoreChatController inputController](self, "inputController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "entryView");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "sendMenuSourceView");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setSourceView:", v13);

    -[CKCoreChatController inputController](self, "inputController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "entryView");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "sendMenuSourceView");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "bounds");
    objc_msgSend(v8, "setSourceRect:");
  }
  else
  {
    objc_msgSend(v7, "presentationController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController entryView](self, "entryView");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "sendMenuSourceView");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setSourceView:", v16);
  }

  -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v7, 1, 0);
}

- (void)chatInputDidSelectEffectPicker
{
  void *v3;
  void *v4;
  char v5;
  id v6;

  -[CKChatController entryView](self, "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "composition");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "hasContent");

  if ((v5 & 1) != 0)
  {
    -[CKChatController showEffectPicker](self, "showEffectPicker");
  }
  else
  {
    -[CKChatController entryView](self, "entryView");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "showMessageEffectsHint");

  }
}

- (void)chatInputControllerWillSelectFunCamera:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  NSObject *v9;
  uint8_t v10[16];

  v4 = a3;
  +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isCameraAllowed");

  if ((v6 & 1) != 0)
  {
    -[CKCoreChatController inputController](self, "inputController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isInputViewVisible");

    if ((v8 & 1) == 0)
      -[CKChatController prewarmFunCamera](self, "prewarmFunCamera");
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, "chatInputControllerWillSelectFunCamera: Not attempting to present Camera. Camera restriction in effect.", v10, 2u);
    }

  }
}

- (void)chatInputControllerCancelSelectFunCamera:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController funCameraViewController](self, "funCameraViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "balloonPlugin");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "existingViewControllerForPluginIdentifier:", v7);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "beginAppearanceTransition:animated:", 0, 0);
  objc_msgSend(v8, "endAppearanceTransition");

}

- (void)chatInputControllerDidSelectFunCamera:(id)a3
{
  id v4;
  void *v5;
  char v6;
  uint64_t v7;
  void (**v8)(_QWORD);
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  int64_t v19;
  dispatch_time_t v20;
  _QWORD block[5];
  void (**v22)(_QWORD);
  _QWORD aBlock[5];
  uint8_t buf[16];

  v4 = a3;
  if (CKIsRunningInMessagesTranscriptExtension())
  {
    -[CKChatController openURLInExtensionContextForMode:](self, "openURLInExtensionContextForMode:", CFSTR("photos"));
  }
  else
  {
    +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isCameraAllowed");

    if ((v6 & 1) != 0)
    {
      v7 = MEMORY[0x1E0C809B0];
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __58__CKChatController_chatInputControllerDidSelectFunCamera___block_invoke;
      aBlock[3] = &unk_1E274A208;
      aBlock[4] = self;
      v8 = (void (**)(_QWORD))_Block_copy(aBlock);
      -[CKCoreChatController inputController](self, "inputController");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "isInputViewVisible");

      if (v10)
      {
        -[CKCoreChatController inputController](self, "inputController");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "forceDismissBrowserWithoutAnimation");

        +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "forceKillNonCameraRemoteExtensionsImmediately");

      }
      -[CKChatController funCameraViewController](self, "funCameraViewController");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v13)
      {
        v8[2](v8);
      }
      else
      {
        -[CKCoreChatController inputController](self, "inputController");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "isInputViewVisible");

        if (v16)
        {
          -[CKCoreChatController inputController](self, "inputController");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "forceDismissBrowserWithoutAnimation");

          +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "forceKillNonCameraRemoteExtensionsImmediately");

          v19 = 50000000;
        }
        else
        {
          v19 = 0;
        }
        v20 = dispatch_time(0, v19);
        block[0] = v7;
        block[1] = 3221225472;
        block[2] = __58__CKChatController_chatInputControllerDidSelectFunCamera___block_invoke_720;
        block[3] = &unk_1E274C2E0;
        block[4] = self;
        v22 = v8;
        dispatch_after(v20, MEMORY[0x1E0C80D38], block);

      }
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v14, OS_LOG_TYPE_INFO, "chatInputControllerDidSelectFunCamera: Not attempting to present Camera. Camera restriction in effect.", buf, 2u);
      }

    }
  }

}

void __58__CKChatController_chatInputControllerDidSelectFunCamera___block_invoke(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint8_t buf[2];
  __int16 v17;

  if (objc_msgSend(*(id *)(a1 + 32), "isShowingCamera"))
  {
    if (!IMOSLoggingEnabled())
      return;
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      goto LABEL_12;
    v17 = 0;
    v3 = "Not presenting FunCam, instance of camera already presented";
    v4 = (uint8_t *)&v17;
LABEL_11:
    _os_log_impl(&dword_18DFCD000, v2, OS_LOG_TYPE_INFO, v3, v4, 2u);
LABEL_12:

    return;
  }
  if (!objc_msgSend(*(id *)(a1 + 32), "appeared"))
  {
    if (!IMOSLoggingEnabled())
      return;
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      goto LABEL_12;
    *(_WORD *)buf = 0;
    v3 = "Not presenting FunCam, chat controller is dissapearing or dissapeared";
    v4 = buf;
    goto LABEL_11;
  }
  objc_msgSend(*(id *)(a1 + 32), "setIsShowingCamera:", 1);
  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "contentView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isActive");

  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "entryView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "contentView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "activeView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "resignFirstResponder");

  }
  else if (!CKIsAppCardsEnabled())
  {
    objc_msgSend(*(id *)(a1 + 32), "resignFirstResponder");
  }
  v11 = *(void **)(a1 + 32);
  objc_msgSend(v11, "funCameraViewController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setDelegate:", v11);

  objc_msgSend(*(id *)(a1 + 32), "funCameraViewController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setModalPresentationStyle:", 0);

  v14 = *(void **)(a1 + 32);
  objc_msgSend(v14, "funCameraViewController");
  v15 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "presentViewController:animated:completion:", v15, 1, 0);

}

uint64_t __58__CKChatController_chatInputControllerDidSelectFunCamera___block_invoke_720(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "prewarmFunCamera");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

- (void)chatInputController:(id)a3 requestPresentSendMenu:(id)a4
{
  id v5;
  void *v6;

  v5 = a4;
  -[CKChatController animateSendMenuStatusBarAppearanceUpdate](self, "animateSendMenuStatusBarAppearanceUpdate");
  -[CKChatController sendMenuDelegate](self, "sendMenuDelegate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "chatController:requestPresentSendMenu:", self, v5);

  -[CKChatController enforceSendMenuOrderingInWindowSubviews](self, "enforceSendMenuOrderingInWindowSubviews");
}

- (void)chatInputController:(id)a3 didFinishDismissAnimationForSendMenuViewController:(id)a4
{
  id v5;
  void *v6;

  v5 = a4;
  -[CKChatController sendMenuDelegate](self, "sendMenuDelegate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "chatController:didFinishDismissAnimationForSendMenuViewController:", self, v5);

  -[CKChatController animateSendMenuStatusBarAppearanceUpdate](self, "animateSendMenuStatusBarAppearanceUpdate");
}

- (void)animateSendMenuStatusBarAppearanceUpdate
{
  void *v3;
  void *v4;
  _QWORD v5[5];

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "sendMenuStatusBarAnimator");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __60__CKChatController_animateSendMenuStatusBarAppearanceUpdate__block_invoke;
  v5[3] = &unk_1E274A208;
  v5[4] = self;
  objc_msgSend(v4, "addAnimations:", v5);
  objc_msgSend(v4, "startAnimation");

}

uint64_t __60__CKChatController_animateSendMenuStatusBarAppearanceUpdate__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setNeedsStatusBarAppearanceUpdate");
}

- (BOOL)isKeyboardSnapshotted
{
  void *v2;
  BOOL v3;

  -[CKChatController keyboardSnapshotView](self, "keyboardSnapshotView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (BOOL)isKeyboardSnapshotVisible
{
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  BOOL v7;
  CGRect v9;

  -[CKChatController keyboardSnapshotView](self, "keyboardSnapshotView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "window");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "frame");
    v6 = v5;
    objc_msgSend(v4, "bounds");
    v7 = v6 < CGRectGetMaxY(v9);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (void)chatInputDidChangeSize
{
  -[CKChatController _updateEntryViewFrameIfNeeded:](self, "_updateEntryViewFrameIfNeeded:", 0);
}

- (void)chatInputWillChangeHeightForCompactPresentation:(double)a3
{
  void *v3;
  id v4;

  -[CKChatController collectionView](self, "collectionView", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  +[CKScrollViewAnimationProperties systemDefaultScrollAnimation](CKScrollViewAnimationProperties, "systemDefaultScrollAnimation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "enforceTranscriptScrollIntentWithAnimationProperties:", v3);

}

- (void)chatInputControllerWillTransitionExpanded:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  -[CKCoreChatController collectionViewController](self, "collectionViewController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setAllowsPluginPlayback:", 0);

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stopPluginPlayback");

  self->_shouldDisplayKeyboardWhenDismissingModalBrowser = -[CKScrollViewController isKeyboardVisible](self, "isKeyboardVisible");
  -[CKScrollViewController beginHoldingScrollGeometryUpdatesForReason:](self, "beginHoldingScrollGeometryUpdatesForReason:", CFSTR("BrowserTransition"));
  -[CKChatController collectionView](self, "collectionView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "beginHoldingContentOffsetUpdatesForReason:", CFSTR("ChatInputControllerTransition"));

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setTranscriptUpdateAnimated:", 0);

}

- (void)chatInputControllerDidTransitionExpanded:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  -[CKChatController collectionView](self, "collectionView", a3);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[CKChatController collectionView](self, "collectionView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "endHoldingContentOffsetUpdatesForReason:", CFSTR("ChatInputControllerTransition"));

  +[CKScrollViewAnimationProperties unanimated](CKScrollViewAnimationProperties, "unanimated");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "enforceTranscriptScrollIntentWithAnimationProperties:", v5);

}

- (void)chatInputControllerWillTransitionCollapsed:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  UIKeyboardOrderInAutomaticSkippingAnimation();
  -[CKScrollViewController endHoldingScrollGeometryUpdatesForReason:](self, "endHoldingScrollGeometryUpdatesForReason:", CFSTR("BrowserTransition"));
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "scrollTranscriptToEntryViewInsertionTimeWithAnimation:", 0);

  -[CKChatController collectionView](self, "collectionView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "beginHoldingContentOffsetUpdatesForReason:", CFSTR("ChatInputControllerTransition"));

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setTranscriptUpdateAnimated:", 1);

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setAllowsPluginPlayback:", 1);

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "startPluginPlaybackAfterDelay:", 0.0);

}

- (void)chatInputControllerDidTransitionCollapsed:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;

  -[CKChatController collectionView](self, "collectionView", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "endHoldingContentOffsetUpdatesForReason:", CFSTR("ChatInputControllerTransition"));

  -[CKChatController entryView](self, "entryView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "composition");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "hasContent") ^ 1;

  -[CKChatController entryView](self, "entryView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setEntryFieldCollapsed:animated:", v7, 0);

  -[CKChatController _updateEntryViewFrameIfNeeded:](self, "_updateEntryViewFrameIfNeeded:", 1);
  -[CKChatController entryView](self, "entryView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setAlpha:", 1.0);

  objc_msgSend(MEMORY[0x1E0CEABB8], "attemptRotationToDeviceOrientation");
}

- (BOOL)chatInputControllerShouldShowHandwriting:(id)a3
{
  void *v4;
  void *v5;
  char v6;

  -[CKCoreChatController chat](self, "chat", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[CKCoreChatController chat](self, "chat");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "allowedToShowConversation");

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)showContactForHandle:(id)a3
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  CKEntity *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  CKEntity *v17;
  void *v18;
  uint64_t v19;
  CKEntity *j;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint8_t buf[4];
  id v41;
  _BYTE v42[128];
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  objc_msgSend(MEMORY[0x1E0D35868], "me");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "imHandles");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v36, v43, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v37;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v37 != v8)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v36 + 1) + 8 * i), "ID");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        MEMORY[0x193FF3B40]();
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addObject:", v11);

      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v36, v43, 16);
    }
    while (v7);
  }

  if (objc_msgSend(v4, "containsObject:", v3))
  {
    v12 = [CKEntity alloc];
    -[CKCoreChatController conversation](self, "conversation");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "chat");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "account");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "loginIMHandle");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = -[CKEntity initWithIMHandle:](v12, "initWithIMHandle:", v16);

  }
  else
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    -[CKCoreChatController conversation](self, "conversation");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "recipients");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v17 = (CKEntity *)objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v42, 16);
    if (v17)
    {
      v19 = *(_QWORD *)v33;
      while (2)
      {
        for (j = 0; j != v17; j = (CKEntity *)((char *)j + 1))
        {
          if (*(_QWORD *)v33 != v19)
            objc_enumerationMutation(v13);
          v21 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)j);
          objc_msgSend(v21, "defaultIMHandle");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "ID");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v23, "isEqualToString:", v3);

          if (v24)
          {
            v17 = v21;
            goto LABEL_20;
          }
        }
        v17 = (CKEntity *)objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v32, v42, 16);
        if (v17)
          continue;
        break;
      }
    }
  }
LABEL_20:

  if (v17)
  {
    -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "showContactCardForEntity:address:", v17, v3);

  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v41 = v3;
        _os_log_impl(&dword_18DFCD000, v26, OS_LOG_TYPE_INFO, "Failed to find target handle %@", buf, 0xCu);
      }

    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v41 = v4;
        _os_log_impl(&dword_18DFCD000, v27, OS_LOG_TYPE_INFO, "My login handles %@", buf, 0xCu);
      }

    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        -[CKCoreChatController conversation](self, "conversation");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "recipients");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v41 = v30;
        _os_log_impl(&dword_18DFCD000, v28, OS_LOG_TYPE_INFO, "Recipients %@", buf, 0xCu);

      }
    }
  }

}

- (id)_associatedStickerChatItemInInsertedIndexes:(id)a3 matchingSticker:(id)a4
{
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v11[5];
  id v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v6 = a3;
  v7 = a4;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy__11;
  v18 = __Block_byref_object_dispose__11;
  v19 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __80__CKChatController__associatedStickerChatItemInInsertedIndexes_matchingSticker___block_invoke;
  v11[3] = &unk_1E274CAB0;
  v11[4] = self;
  v8 = v7;
  v12 = v8;
  v13 = &v14;
  objc_msgSend(v6, "enumerateIndexesUsingBlock:", v11);
  v9 = (id)v15[5];

  _Block_object_dispose(&v14, 8);
  return v9;
}

void __80__CKChatController__associatedStickerChatItemInInsertedIndexes_matchingSticker___block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  id v12;

  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", a2, 1);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "chatItemAtIndexPath:", v12);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v7 = v6;
    objc_msgSend(v7, "sticker");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stickerGUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "stickerGUID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v9, "hasPrefix:", v10);

    if (v11)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v6);
      *a3 = 1;
    }

  }
}

- (CGRect)_targetStickerFrameFromStickerCell:(id)a3 coordinateSpace:(id)a4
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  _OWORD v31[8];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[8];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  CGRect result;

  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v5 = a4;
  v6 = a3;
  objc_msgSend(v6, "associatedItemView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "layer");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "transform");
  }
  else
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
  }

  objc_msgSend(v6, "associatedItemView");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "layer");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 80);
  v40[4] = *(_OWORD *)(MEMORY[0x1E0CD2610] + 64);
  v40[5] = v12;
  v13 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 112);
  v40[6] = *(_OWORD *)(MEMORY[0x1E0CD2610] + 96);
  v40[7] = v13;
  v14 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 16);
  v40[0] = *MEMORY[0x1E0CD2610];
  v40[1] = v14;
  v15 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 48);
  v40[2] = *(_OWORD *)(MEMORY[0x1E0CD2610] + 32);
  v40[3] = v15;
  objc_msgSend(v11, "setTransform:", v40);

  objc_msgSend(v6, "associatedItemView");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "frame");
  objc_msgSend(v6, "convertRect:toCoordinateSpace:", v5);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;

  v36 = v45;
  v37 = v46;
  v38 = v47;
  v39 = v48;
  v32 = v41;
  v33 = v42;
  v34 = v43;
  v35 = v44;
  objc_msgSend(v6, "associatedItemView");
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v25, "layer");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v31[4] = v36;
  v31[5] = v37;
  v31[6] = v38;
  v31[7] = v39;
  v31[0] = v32;
  v31[1] = v33;
  v31[2] = v34;
  v31[3] = v35;
  objc_msgSend(v26, "setTransform:", v31);

  v27 = v18;
  v28 = v20;
  v29 = v22;
  v30 = v24;
  result.size.height = v30;
  result.size.width = v29;
  result.origin.y = v28;
  result.origin.x = v27;
  return result;
}

- (void)sendAutomaticallyPlacedSticker:(id)a3 stickerReactionSession:(id)a4 forChatItem:(id)a5 forParentChatItem:(id)a6 stickerFrame:(CGRect)a7 animationCompletionHandler:(id)a8
{
  double height;
  double width;
  double y;
  double x;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  _QWORD v32[4];
  id v33;
  CKChatController *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  double v39;
  double v40;
  double v41;
  double v42;

  height = a7.size.height;
  width = a7.size.width;
  y = a7.origin.y;
  x = a7.origin.x;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = a8;
  +[CKAutomaticallyPlacedStickerCommSafetySendContext contextWithAutomaticallyPlacedSticker:stickerReactionSession:chatItem:parentChatItem:stickerFrame:animationCompletionHandler:](CKAutomaticallyPlacedStickerCommSafetySendContext, "contextWithAutomaticallyPlacedSticker:stickerReactionSession:chatItem:parentChatItem:stickerFrame:animationCompletionHandler:", v17, v18, v19, v20, v21, x, y, width, height);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKMediaObjectManager sharedInstance](CKMediaObjectManager, "sharedInstance");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "mediaObjectWithSticker:stickerUserInfo:", v17, 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v24, "transfer");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "fileURL");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = __144__CKChatController_sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke;
  v32[3] = &unk_1E274CAD8;
  v33 = v17;
  v34 = self;
  v35 = v18;
  v36 = v19;
  v39 = x;
  v40 = y;
  v41 = width;
  v42 = height;
  v37 = v20;
  v38 = v21;
  v27 = v21;
  v28 = v20;
  v29 = v19;
  v30 = v18;
  v31 = v17;
  -[CKChatController presentCommSafetyInterventionIfNecessaryForFileURL:withSendContext:completion:](self, "presentCommSafetyInterventionIfNecessaryForFileURL:withSendContext:completion:", v26, v22, v32);

}

void __144__CKChatController_sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke(uint64_t a1, int a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    IMLogHandleForCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = 138412290;
      v6 = v4;
      _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "Sticker was sensitive, deferring send for intervention: %@", (uint8_t *)&v5, 0xCu);
    }

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_sendAutomaticallyPlacedSticker:stickerReactionSession:forChatItem:forParentChatItem:stickerFrame:animationCompletionHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104));
  }
}

- (void)_sendAutomaticallyPlacedSticker:(id)a3 stickerReactionSession:(id)a4 forChatItem:(id)a5 forParentChatItem:(id)a6 stickerFrame:(CGRect)a7 animationCompletionHandler:(id)a8
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  NSObject *v31;
  void *v32;
  _QWORD v33[4];
  id v34;
  NSObject *v35;
  id v36;
  id v37;
  id v38[5];
  _BYTE buf[12];
  uint64_t v40;

  height = a7.size.height;
  width = a7.size.width;
  y = a7.origin.y;
  x = a7.origin.x;
  v40 = *MEMORY[0x1E0C80C00];
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = a8;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "isReactWithAStickerEnabled");

  if (v23)
  {
    if (v17)
    {
      IMLogHandleForCategory();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = v24;
      if (v20)
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v17;
          _os_log_impl(&dword_18DFCD000, v25, OS_LOG_TYPE_INFO, "Sending sticker: %@", buf, 0xCu);
        }

        -[CKChatController stickerTranscriptScrollDisplayLink](self, "stickerTranscriptScrollDisplayLink");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "invalidate");

        -[CKChatController setStickerTranscriptScrollDisplayLink:](self, "setStickerTranscriptScrollDisplayLink:", 0);
        -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
        v25 = objc_claimAutoreleasedReturnValue();
        -[CKCoreChatController collectionViewController](self, "collectionViewController");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "balloonViewForChatItem:", v20);
        v28 = (void *)objc_claimAutoreleasedReturnValue();

        if (v28)
        {
          -[CKChatController setAnimatingStickerReaction:](self, "setAnimatingStickerReaction:", 1);
          -[CKChatController _setHoldUpdatesForStickerMoveAnimation:](self, "_setHoldUpdatesForStickerMoveAnimation:", 1);
          -[CKChatController setIgnoresAutomaticScrollsTowardBottom:](self, "setIgnoresAutomaticScrollsTowardBottom:", 1);
          -[CKChatController collectionView](self, "collectionView");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "beginHoldingContentOffsetUpdatesForReason:", CFSTR("StickerAnimation"));

          *(_QWORD *)buf = 0;
          objc_initWeak((id *)buf, self);
          v33[0] = MEMORY[0x1E0C809B0];
          v33[1] = 3221225472;
          v33[2] = __145__CKChatController__sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke;
          v33[3] = &unk_1E274CBA0;
          objc_copyWeak(v38, (id *)buf);
          v30 = v17;
          v34 = v30;
          v35 = v25;
          v36 = v28;
          v38[1] = *(id *)&x;
          v38[2] = *(id *)&y;
          v38[3] = *(id *)&width;
          v38[4] = *(id *)&height;
          v37 = v21;
          -[CKChatController setInsertItemsCallback:](self, "setInsertItemsCallback:", v33);
          objc_msgSend(v18, "sendSticker:", v30);

          objc_destroyWeak(v38);
          objc_destroyWeak((id *)buf);
        }
        else
        {
          IMLogHandleForCategory();
          v31 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            -[CKChatController _sendAutomaticallyPlacedSticker:stickerReactionSession:forChatItem:forParentChatItem:stickerFrame:animationCompletionHandler:].cold.3();

          objc_msgSend(v18, "sendSticker:", v17);
          -[CKCoreChatController inputController](self, "inputController");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "endStickerReactionSession");

          if (v25)
            -[CKChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:dismissAppCard:completion:](self, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:dismissAppCard:completion:", 1, 0, 1, 0);
        }

      }
      else if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        -[CKChatController _sendAutomaticallyPlacedSticker:stickerReactionSession:forChatItem:forParentChatItem:stickerFrame:animationCompletionHandler:].cold.2();
      }
    }
    else
    {
      IMLogHandleForCategory();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        -[CKChatController(CKChatController_Stickers) sendSticker:withMediaObject:composition:parentMessagePartChatItem:messageSummaryInfo:].cold.1();
    }

  }
}

void __145__CKChatController__sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  char *__ptr32 *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  NSObject *v35;
  dispatch_time_t v36;
  void *v37;
  id v38;
  __int128 v39;
  id v40;
  id v41;
  void *v42;
  _QWORD v43[4];
  id v44;
  id v45;
  NSObject *v46;
  id v47;
  id v48;
  id v49;
  __int128 v50;
  __int128 v51;
  _QWORD block[4];
  id v53;
  _QWORD v54[4];
  id v55;
  id v56;
  id v57[2];

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(WeakRetained, "_associatedStickerChatItemInInsertedIndexes:matchingSticker:", v6, *(_QWORD *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(v8, "guid");
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(v10, "collectionViewController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "cellForAssociatedChatItem:", v8);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v13 = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(v13, "collectionViewController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = (void *)v9;
    objc_msgSend(v14, "beginHidingStickerWithGUIDDuringAddStickerAnimation:", v9);

    v15 = MEMORY[0x1E0C809B0];
    v16 = &off_18E7C8000;
    if (*(_QWORD *)(a1 + 40))
    {
      v40 = v5;
      v41 = v6;
      v17 = objc_loadWeakRetained((id *)(a1 + 64));
      objc_msgSend(v17, "collectionViewController");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "chatItem");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "IMChatItem");
      v20 = v12;
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "guid");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "chatItemForGUID:", v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      v24 = objc_loadWeakRetained((id *)(a1 + 64));
      objc_msgSend(v24, "updateChatItemBalloonViewAndStickerViews:hidden:", v23, 1);

      objc_msgSend(*(id *)(a1 + 40), "updateStickersAnimated:", 0);
      v25 = *(void **)(a1 + 40);
      objc_msgSend(v8, "IMChatItem");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "guid");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "setStickerVisibility:forStickerChatItemGUID:", 0, v27);

      v12 = v20;
      v15 = MEMORY[0x1E0C809B0];
      objc_msgSend(*(id *)(a1 + 40), "setTintDimissalAnimationDuration:", 0.5);
      v28 = objc_loadWeakRetained((id *)(a1 + 64));
      v54[0] = v15;
      v54[1] = 3221225472;
      v54[2] = __145__CKChatController__sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke_727;
      v54[3] = &unk_1E274CB00;
      objc_copyWeak(v57, (id *)(a1 + 64));
      v29 = v23;
      v55 = v29;
      v56 = v20;
      objc_msgSend(v28, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:dismissAppCard:completion:", 1, 0, 0, v54);

      v30 = objc_loadWeakRetained((id *)(a1 + 64));
      v6 = v41;
      LODWORD(v28) = objc_msgSend(v30, "entryViewWasActiveOnContextMenuPresentation");

      if ((_DWORD)v28)
      {
        v31 = objc_loadWeakRetained((id *)(a1 + 64));
        objc_msgSend(v31, "inputController");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "endStickerReactionSession");

        v33 = objc_loadWeakRetained((id *)(a1 + 64));
        objc_msgSend(v33, "updateActiveEntryViewPositioningGuide");

        v34 = objc_loadWeakRetained((id *)(a1 + 64));
        objc_msgSend(v34, "showKeyboard");

      }
      objc_destroyWeak(v57);

      v5 = v40;
      v16 = &off_18E7C8000;
    }
    else
    {
      v36 = dispatch_time(0, 150000000);
      block[0] = v15;
      block[1] = 3221225472;
      block[2] = __145__CKChatController__sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke_2;
      block[3] = &unk_1E274B548;
      objc_copyWeak(&v53, (id *)(a1 + 64));
      dispatch_after(v36, MEMORY[0x1E0C80D38], block);
      objc_destroyWeak(&v53);
    }
    v37 = *(void **)(a1 + 32);
    v43[0] = v15;
    v43[1] = *((_QWORD *)v16 + 242);
    v43[2] = __145__CKChatController__sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke_3;
    v43[3] = &unk_1E274CB78;
    v44 = *(id *)(a1 + 48);
    objc_copyWeak(&v49, (id *)(a1 + 64));
    v38 = v12;
    v45 = v38;
    v39 = *(_OWORD *)(a1 + 88);
    v50 = *(_OWORD *)(a1 + 72);
    v51 = v39;
    v35 = v42;
    v46 = v35;
    v47 = *(id *)(a1 + 40);
    v48 = *(id *)(a1 + 56);
    objc_msgSend(v37, "stickerViewForStickerChatItem:snapshotEffectView:completion:", v8, 1, v43);

    objc_destroyWeak(&v49);
  }
  else
  {
    IMLogHandleForCategory();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      __145__CKChatController__sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke_cold_1();
  }

}

void __145__CKChatController__sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke_727(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  id v5;

  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "setIgnoresAutomaticScrollsTowardBottom:", 1);

  v4 = objc_loadWeakRetained(v2);
  objc_msgSend(v4, "updateChatItemBalloonViewAndStickerViews:hidden:", *(_QWORD *)(a1 + 32), 0);

  objc_msgSend(*(id *)(a1 + 40), "associatedItemView");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setHidden:", 1);

}

void __145__CKChatController__sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke_2(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "inputController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dismissStickerPickerPreservingChatItem:completion:", 0, 0);

  v4 = objc_loadWeakRetained(v1);
  objc_msgSend(v4, "_setHoldUpdatesForStickerMoveAnimation:", 1);

  v5 = objc_loadWeakRetained(v1);
  objc_msgSend(v5, "setIgnoresAutomaticScrollsTowardBottom:", 1);

  v7 = objc_loadWeakRetained(v1);
  objc_msgSend(v7, "collectionView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "beginHoldingContentOffsetUpdatesForReason:", CFSTR("StickerPopoverDismiss"));

}

void __145__CKChatController__sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  void *v35;
  void *v36;
  void *v37;
  double v38;
  double v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  _QWORD v58[4];
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t *v63;
  id v64;
  _OWORD v65[8];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t);
  void (*v78)(uint64_t);
  CKAnimationOverlayWindow *v79;
  _QWORD v80[7];

  v80[5] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "window");
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  objc_msgSend(WeakRetained, "fullScreenBalloonViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = objc_loadWeakRetained((id *)(a1 + 72));
    objc_msgSend(v6, "fullScreenBalloonViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "preservedBoundsInBalloonWindowAtAppearance");
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v15 = v14;

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "bounds");
    v9 = v16;
    v11 = v17;
    v13 = v18;
    v15 = v19;
  }

  v74 = 0;
  v75 = &v74;
  v76 = 0x3032000000;
  v77 = __Block_byref_object_copy__11;
  v78 = __Block_byref_object_dispose__11;
  v79 = 0;
  v79 = -[CKAnimationOverlayWindow initWithFrame:]([CKAnimationOverlayWindow alloc], "initWithFrame:", v9, v11, v13, v15);
  v20 = (void *)v75[5];
  objc_msgSend(v57, "windowScene");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "showInWindowScene:", v21);

  objc_msgSend((id)v75[5], "addSubview:", v3);
  v22 = objc_loadWeakRetained((id *)(a1 + 72));
  objc_msgSend(v22, "fullScreenBalloonViewController");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (v23)
  {
    v24 = objc_loadWeakRetained((id *)(a1 + 72));
    objc_msgSend(v24, "view");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "coordinateSpace");
    v56 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend((id)v75[5], "coordinateSpace");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
  }

  v26 = objc_loadWeakRetained((id *)(a1 + 72));
  objc_msgSend(v26, "_targetStickerFrameFromStickerCell:coordinateSpace:", *(_QWORD *)(a1 + 40), v56);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v34 = v33;

  objc_msgSend(v3, "setFrame:", *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104));
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  objc_msgSend(*(id *)(a1 + 40), "associatedItemView");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "layer");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = v36;
  if (v36)
  {
    objc_msgSend(v36, "transform");
  }
  else
  {
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
  }

  v65[4] = v70;
  v65[5] = v71;
  v65[6] = v72;
  v65[7] = v73;
  v65[0] = v66;
  v65[1] = v67;
  v65[2] = v68;
  v65[3] = v69;
  objc_msgSend(MEMORY[0x1E0CD26F8], "ck_stickerFlyInTransformAnimationTo:", v65);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "bounds");
  objc_msgSend(MEMORY[0x1E0CD26F8], "ck_stickerFlyInBoundsAnimationFromSize:toSize:", v38, v39, v32, v34);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CD26F8], "ck_stickerFlyInSpringAnimation");
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CD26F8], "ck_stickerFlyInScaleAnimation");
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CD26F8], "ck_stickerFlyInMoveAnimationFromRect:toRect:", *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), v28, v30, v32, v34);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CD2700], "animation");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "beginTime");
  v45 = v44;
  objc_msgSend(v40, "duration");
  v47 = v46;
  objc_msgSend(v41, "duration");
  if (v45 + v47 >= v48)
    v48 = v45 + v47;
  objc_msgSend(v43, "setDuration:", v48);
  v80[0] = v55;
  v80[1] = v42;
  v80[2] = v41;
  v80[3] = v40;
  v80[4] = v54;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v80, 5);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "setAnimations:", v49);

  objc_msgSend(v43, "setFillMode:", *MEMORY[0x1E0CD2B60]);
  objc_msgSend(v43, "setRemovedOnCompletion:", 0);
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  v50 = (void *)MEMORY[0x1E0CD28B0];
  objc_msgSend(v43, "duration");
  objc_msgSend(v50, "setAnimationDuration:");
  v51 = (void *)MEMORY[0x1E0CD28B0];
  v58[0] = MEMORY[0x1E0C809B0];
  v58[1] = 3221225472;
  v58[2] = __145__CKChatController__sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke_4;
  v58[3] = &unk_1E274CB50;
  objc_copyWeak(&v64, (id *)(a1 + 72));
  v59 = *(id *)(a1 + 48);
  v52 = v3;
  v60 = v52;
  v63 = &v74;
  v61 = *(id *)(a1 + 56);
  v62 = *(id *)(a1 + 64);
  objc_msgSend(v51, "setCompletionBlock:", v58);
  objc_msgSend(v52, "layer");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v53, "addAnimation:forKey:", v43, 0);

  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  objc_destroyWeak(&v64);

  _Block_object_dispose(&v74, 8);
}

void __145__CKChatController__sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke_4(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  dispatch_time_t v5;
  id v6;
  uint64_t v7;
  _QWORD block[4];
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;

  v2 = (id *)(a1 + 72);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  objc_msgSend(WeakRetained, "collectionViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "endHidingStickerWithGUIDDuringAddStickerAnimation:", *(_QWORD *)(a1 + 32));

  v5 = dispatch_time(0, 100000000);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __145__CKChatController__sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke_5;
  block[3] = &unk_1E274CB28;
  v6 = *(id *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 64);
  v9 = v6;
  v12 = v7;
  objc_copyWeak(&v13, v2);
  v10 = *(id *)(a1 + 48);
  v11 = *(id *)(a1 + 56);
  dispatch_after(v5, MEMORY[0x1E0C80D38], block);

  objc_destroyWeak(&v13);
}

uint64_t __145__CKChatController__sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke_5(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id WeakRetained;
  id v5;
  int v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  int v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "dismiss");
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(WeakRetained, "_setHoldUpdatesForStickerMoveAnimation:", 0);

  v5 = objc_loadWeakRetained((id *)(a1 + 64));
  v6 = objc_msgSend(v5, "entryViewWasActiveOnContextMenuPresentation");

  if (v6)
  {
    v7 = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(v7, "inputController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "endStickerReactionSession");

    v9 = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(v9, "showKeyboard");
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "displayConfiguration");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "shouldDismissAppCardOnExit");

    if (!v11)
      goto LABEL_6;
    v12 = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(v12, "inputController");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "dismissAppCardIfNecessary");

    v9 = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(v9, "inputController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "endStickerReactionSession");

  }
LABEL_6:
  v15 = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(v15, "setIgnoresAutomaticScrollsTowardBottom:", 0);

  v16 = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(v16, "collectionView");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "endHoldingContentOffsetUpdatesForReason:", CFSTR("StickerAnimation"));

  v18 = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(v18, "collectionView");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "endHoldingContentOffsetUpdatesForReason:", CFSTR("StickerPopoverDismiss"));

  v20 = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(v20, "setAnimatingStickerReaction:", 0);

  v21 = objc_loadWeakRetained((id *)(a1 + 64));
  objc_msgSend(v21, "updateActiveEntryViewPositioningGuide");

  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

- (void)prewarmFunCamera
{
  NSObject *v3;
  CKFunCameraViewController *v4;
  void *v5;
  CKFunCameraViewController *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint8_t buf[16];

  if (-[CKChatController isShowingCamera](self, "isShowingCamera"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "Not prewarming FunCam, instance of camera already presented", buf, 2u);
      }

    }
  }
  else
  {
    v4 = [CKFunCameraViewController alloc];
    -[CKCoreChatController conversation](self, "conversation");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = -[CKFunCameraViewController initWithConversation:](v4, "initWithConversation:", v5);
    -[CKChatController setFunCameraViewController:](self, "setFunCameraViewController:", v6);

    +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController funCameraViewController](self, "funCameraViewController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "balloonPlugin");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "identifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "viewControllerForPluginIdentifier:", v10);
    v11 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "prepareForPresentationWithCompletionHandler:", &__block_literal_global_734);
  }
}

- (BOOL)isFunCamPresented
{
  void *v3;
  void *v4;
  BOOL v5;

  -[CKChatController presentedViewController](self, "presentedViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[CKChatController funCameraViewController](self, "funCameraViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v3 == v4;

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (void)entryViewContainerViewDidLayoutSubviews:(id)a3
{
  void *v4;
  double keyboardHeightFromPreviousLayout;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  double entryViewMaxYFromPreviousLayout;
  void *v11;
  CGFloat MaxY;
  id v13;
  CGRect v14;

  -[CKChatController sendMenuDelegate](self, "sendMenuDelegate", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "activeSendMenuPresentationForChatController:", self);
  v13 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "informSendMenuOfAnchorViewPositionChangeIfNecessary");
  if (objc_msgSend(MEMORY[0x1E0CEA6C8], "isInHardwareKeyboardMode"))
  {
    keyboardHeightFromPreviousLayout = self->_keyboardHeightFromPreviousLayout;
    -[CKChatController _keyboardHeightFromLayoutGuide](self, "_keyboardHeightFromLayoutGuide");
    if (vabdd_f64(keyboardHeightFromPreviousLayout, v6) > 0.01)
    {
      self->_keyboardHeightFromPreviousLayout = v6;
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "collectionView");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      -[CKScrollViewController updateScrollGeometryWithoutAnimationForReason:](self, "updateScrollGeometryWithoutAnimationForReason:", CFSTR("CandidateBarHeightChanged"));
      +[CKScrollViewAnimationProperties unanimated](CKScrollViewAnimationProperties, "unanimated");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "enforceTranscriptScrollIntentWithAnimationProperties:", v9);

    }
  }
  entryViewMaxYFromPreviousLayout = self->_entryViewMaxYFromPreviousLayout;
  -[CKChatController entryView](self, "entryView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "frame");
  MaxY = CGRectGetMaxY(v14);

  if (vabdd_f64(entryViewMaxYFromPreviousLayout, MaxY) > 0.01)
  {
    self->_entryViewMaxYFromPreviousLayout = MaxY;
    -[CKChatController updateEntryViewHeightIncludingAppStrip:animated:](self, "updateEntryViewHeightIncludingAppStrip:animated:", 1, 0);
  }

}

- (id)messageEntryViewActiveSendMenuPresentation:(id)a3
{
  void *v4;
  void *v5;

  -[CKChatController sendMenuDelegate](self, "sendMenuDelegate", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "activeSendMenuPresentationForChatController:", self);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (BOOL)_shouldValidatePayloadBeforeSendingPayload:(id)a3
{
  id v3;
  char v4;

  v3 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = objc_msgSend(v3, "requiresValidation");
  else
    v4 = 0;

  return v4;
}

- (id)createAlertControllerForAccountComposition:(id)a3 completion:(id)a4
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v25;
  void *v26;
  void *v27;
  id obj;
  id v29;
  id v30;
  id v31;
  _QWORD v33[6];
  id v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint8_t v40[128];
  uint8_t buf[4];
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v31 = a3;
  v30 = a4;
  CKFrameworkBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("SEND_WITH_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKAlertController alertControllerWithTitle:message:preferredStyle:](CKAlertController, "alertControllerWithTitle:message:preferredStyle:", v6, 0, 0);
  v29 = (id)objc_claimAutoreleasedReturnValue();

  -[CKCoreChatController conversation](self, "conversation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "chat");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "lastAddressedHandleID");
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKCoreChatController conversation](self, "conversation");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "chat");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "lastAddressedSIMID");
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D39738], "sharedInstance");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "ctSubscriptionInfo");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "__im_subscriptionContextForForSimID:phoneNumber:", v26, v27);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412802;
      v42 = v26;
      v43 = 2112;
      v44 = v27;
      v45 = 2112;
      v46 = v25;
      _os_log_impl(&dword_18DFCD000, v13, OS_LOG_TYPE_INFO, "FindAccountsForPrompt: lastSIM %@ lastHandle %@ found context %@", buf, 0x20u);
    }

  }
  if (!v25
    && -[CKChatController _lastAddressedHandleIsAvailableAsiMessageAlias:SIMID:](self, "_lastAddressedHandleIsAvailableAsiMessageAlias:SIMID:", v27, v26))
  {
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    objc_msgSend(MEMORY[0x1E0D39738], "sharedInstance");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "ctServiceSubscriptions");
    obj = (id)objc_claimAutoreleasedReturnValue();

    v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v37;
      v17 = MEMORY[0x1E0C809B0];
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v37 != v16)
            objc_enumerationMutation(obj);
          v19 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
          objc_msgSend(v19, "label", v25);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          if (v20)
            objc_msgSend(v19, "label");
          else
            objc_msgSend(v19, "phoneNumber");
          v21 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v21)
          {
            CKFrameworkBundle();
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "localizedStringForKey:value:table:", CFSTR("CURRENT_LINE"), &stru_1E276D870, CFSTR("ChatKit"));
            v21 = (void *)objc_claimAutoreleasedReturnValue();

          }
          v33[0] = v17;
          v33[1] = 3221225472;
          v33[2] = __74__CKChatController_createAlertControllerForAccountComposition_completion___block_invoke;
          v33[3] = &unk_1E274CBE8;
          v33[4] = self;
          v33[5] = v19;
          v34 = v31;
          v35 = v30;
          +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v21, 0, v33);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "addAction:", v23);

        }
        v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
      }
      while (v15);
    }

  }
  return v29;
}

void __74__CKChatController_createAlertControllerForAccountComposition_completion___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "conversation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "chat");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 40), "phoneNumber");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setLastAddressedHandleID:", v3);

  objc_msgSend(*(id *)(a1 + 40), "labelID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setLastAddressedSIMID:", v4);

  objc_msgSend(*(id *)(a1 + 32), "_validateAndSendComposition:completion:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

- (BOOL)_lastAddressedHandleIsAvailableAsiMessageAlias:(id)a3 SIMID:(id)a4
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;

  v5 = (void *)MEMORY[0x1E0D35738];
  v6 = a4;
  v7 = a3;
  objc_msgSend(v5, "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "iMessageAccountForLastAddressedHandle:simID:", v7, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9 != 0;
}

- (void)presentActionMenuForAccountSelection:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  const __CFString *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  CKChatController *v22;
  CKChatController *v23;
  _BYTE v24[12];
  __int16 v25;
  void *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[CKChatController createAlertControllerForAccountComposition:completion:](self, "createAlertControllerForAccountComposition:completion:", v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "sendingService");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "__ck_isiMessage");
  if ((objc_msgSend(v10, "__ck_isiMessage") & 1) != 0)
    v11 = 0;
  else
    v11 = objc_msgSend(v10, "__ck_isiMessageLite") ^ 1;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v8, "actions");
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = (void *)v13;
      v15 = CFSTR("NO");
      *(_DWORD *)v24 = 138412802;
      if (v11)
        v15 = CFSTR("YES");
      *(_QWORD *)&v24[4] = v15;
      v25 = 2112;
      v26 = v10;
      v27 = 2112;
      v28 = v13;
      _os_log_impl(&dword_18DFCD000, v12, OS_LOG_TYPE_INFO, "AccountSelection shouldShow %@ service %@ actions %@", v24, 0x20u);

    }
  }
  objc_msgSend(v8, "actions", *(_QWORD *)v24);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v16, "count"))
    v17 = v11;
  else
    v17 = 0;

  if (v17)
  {
    CKFrameworkBundle();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "localizedStringForKey:value:table:", CFSTR("CANCEL"), &stru_1E276D870, CFSTR("ChatKit"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v19, 1, 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "addAction:", v20);

    -[CKChatController effectPickerViewController](self, "effectPickerViewController");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21)
    {
      -[CKChatController effectPickerViewController](self, "effectPickerViewController");
      v22 = (CKChatController *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v22 = self;
    }
    v23 = v22;

    objc_msgSend(v8, "presentFromViewController:animated:completion:", v23, 1, 0);
  }
  else
  {
    -[CKChatController _validateAndSendComposition:completion:](self, "_validateAndSendComposition:completion:", v6, v7);
  }

}

- (void)disableRotationWhileRecordingAudioMessage
{
  void *v3;
  void *v4;
  void *v5;
  CKRotationLockUtility *v6;
  CKRotationLockUtility *rotationLockUtility;
  id v8;

  if (self->_rotationLockUtility)
    -[CKChatController enableRotationAfterRecording](self, "enableRotationAfterRecording");
  -[CKChatController view](self, "view");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "window");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "windowScene");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "keyWindow");
  v8 = (id)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v6 = -[CKRotationLockUtility initWithWindow:]([CKRotationLockUtility alloc], "initWithWindow:", v8);
    rotationLockUtility = self->_rotationLockUtility;
    self->_rotationLockUtility = v6;

  }
}

- (void)enableRotationAfterRecording
{
  CKRotationLockUtility *rotationLockUtility;

  -[CKRotationLockUtility releaseRotationLock](self->_rotationLockUtility, "releaseRotationLock");
  rotationLockUtility = self->_rotationLockUtility;
  self->_rotationLockUtility = 0;

}

- (void)messageEntryViewSafeAreaInsetsDidChange:(id)a3
{
  _QWORD block[5];

  if (-[CKChatController nextEntryViewSafeAreaInsetUpdateIsSynchronous](self, "nextEntryViewSafeAreaInsetUpdateIsSynchronous", a3))
  {
    self->_nextEntryViewSafeAreaInsetUpdateIsSynchronous = 0;
    -[CKChatController updateEntryViewHeightIncludingAppStrip:animated:](self, "updateEntryViewHeightIncludingAppStrip:animated:", 1, 0);
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __60__CKChatController_messageEntryViewSafeAreaInsetsDidChange___block_invoke;
    block[3] = &unk_1E274A208;
    block[4] = self;
    dispatch_async(MEMORY[0x1E0C80D38], block);
  }
}

uint64_t __60__CKChatController_messageEntryViewSafeAreaInsetsDidChange___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateEntryViewHeightIncludingAppStrip:animated:", 1, 0);
}

- (void)messageEntryView:(id)a3 didMoveToWindow:(id)a4
{
  -[CKChatController _updateEntryViewConstraintsIfNeeded](self, "_updateEntryViewConstraintsIfNeeded", a3, a4);
  -[CKChatController _setUpEntryViewAppCardLayoutConstraint](self, "_setUpEntryViewAppCardLayoutConstraint");
  -[CKChatController updateActiveEntryViewPositioningGuide](self, "updateActiveEntryViewPositioningGuide");
  -[CKChatController _updateEntryViewFrameIfNeeded:](self, "_updateEntryViewFrameIfNeeded:", 0);
  -[CKScrollViewController updateScrollGeometryWithoutAnimationForReason:](self, "updateScrollGeometryWithoutAnimationForReason:", CFSTR("EntryViewMovedToWindow"));
}

- (void)messageEntryViewWantsSendLaterPickerPresented:(id)a3
{
  id v3;

  -[CKCoreChatController inputController](self, "inputController", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "showSendLater");

}

- (void)messageEntryViewSendLaterPluginInfoUpdated:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a3;
  -[CKCoreChatController inputController](self, "inputController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "sendLaterPluginInfoUpdated");

  v6 = objc_msgSend(v4, "shouldShowAppStrip");
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __63__CKChatController_messageEntryViewSendLaterPluginInfoUpdated___block_invoke;
  v7[3] = &unk_1E274A208;
  v7[4] = self;
  -[CKChatController updateEntryViewHeightIncludingAppStrip:isContentChange:animated:completionHandler:](self, "updateEntryViewHeightIncludingAppStrip:isContentChange:animated:completionHandler:", v6, 1, 1, v7);
}

void __63__CKChatController_messageEntryViewSendLaterPluginInfoUpdated___block_invoke(uint64_t a1)
{
  CKTranscriptScrollIntentEntryViewChangedTrigger *v2;
  void *v3;
  CKTranscriptScrollIntentEntryViewChangedTrigger *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v2 = [CKTranscriptScrollIntentEntryViewChangedTrigger alloc];
  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CKTranscriptScrollIntentEntryViewChangedTrigger initWithEntryView:isTextChange:isShelfChange:isSendLaterPluginChange:](v2, "initWithEntryView:isTextChange:isShelfChange:isSendLaterPluginChange:", v3, 0, 0, 1);
  objc_msgSend(v5, "updateScrollIntentWithTrigger:", v4);

}

- (void)messageEntryViewWantsGenerativePlaygroundPluginPresented:(id)a3 presentationStyle:(unint64_t)a4
{
  void *v6;
  void *v7;
  CKTranscriptPluginPresentationConfiguration *v8;
  void *v9;
  void *v10;
  CKTranscriptPluginPresentationConfiguration *v11;
  void *v12;
  id v13;

  IMBalloonExtensionIDWithSuffix();
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D35770], "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "balloonPluginForBundleID:", v13);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = [CKTranscriptPluginPresentationConfiguration alloc];
  -[CKChatController entryView](self, "entryView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "sendMenuSourceView");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[CKTranscriptPluginPresentationConfiguration initWithSourceView:permittedArrowDirections:shouldDisableSnapshotView:](v8, "initWithSourceView:permittedArrowDirections:shouldDisableSnapshotView:", v10, 8, 0);

  -[CKCoreChatController inputController](self, "inputController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "showBrowserForPlugin:dataSource:style:presentationConfiguration:", v7, 0, a4, v11);

}

- (void)messageEntryViewWillPresentCustomizationPicker:(id)a3
{
  id v4;
  NSObject *v5;
  uint8_t v6[16];

  v4 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "Will present customization picker", v6, 2u);
    }

  }
  -[CKScrollViewController beginHoldingScrollGeometryUpdatesForReason:](self, "beginHoldingScrollGeometryUpdatesForReason:", CFSTR("LinkCustomizationPicker"));
  -[CKChatController requestShowKeyboardSnapshotForReason:](self, "requestShowKeyboardSnapshotForReason:", 32);

}

- (void)messageEntryViewDidPresentCustomizationPicker:(id)a3
{
  id v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_18DFCD000, v4, OS_LOG_TYPE_INFO, "Did present customization picker", v5, 2u);
    }

  }
}

- (void)messageEntryViewWillDismissCustomizationPicker:(id)a3
{
  id v4;
  NSObject *v5;
  uint8_t v6[16];

  v4 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "Will dismiss customization picker", v6, 2u);
    }

  }
  -[CKScrollViewController endHoldingScrollGeometryUpdatesForReason:](self, "endHoldingScrollGeometryUpdatesForReason:", CFSTR("LinkCustomizationPicker"));

}

- (void)messageEntryViewDidDismissCustomizationPicker:(id)a3
{
  id v4;
  NSObject *v5;
  uint8_t v6[16];

  v4 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "Did dismiss customization picker", v6, 2u);
    }

  }
  -[CKChatController requestDismissKeyboardSnapshotForReason:](self, "requestDismissKeyboardSnapshotForReason:", 32);

}

- (void)enableSendButtonSpinner
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __43__CKChatController_enableSendButtonSpinner__block_invoke;
  block[3] = &unk_1E274A208;
  block[4] = self;
  dispatch_async(MEMORY[0x1E0C80D38], block);
}

void __43__CKChatController_enableSendButtonSpinner__block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "configureForDisplayMode:", 4);

}

- (void)disableSendButtonSpinner
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __44__CKChatController_disableSendButtonSpinner__block_invoke;
  block[3] = &unk_1E274A208;
  block[4] = self;
  dispatch_async(MEMORY[0x1E0C80D38], block);
}

void __44__CKChatController_disableSendButtonSpinner__block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "configureForDisplayMode:", 1);

}

- (int64_t)_sharingAccessTypeFromOptionsGroups:(id)a3
{
  id v3;
  int64_t v4;

  v3 = a3;
  if (v3)
  {
    if (_sharingAccessTypeFromOptionsGroups___pred_CKSharingAccessTypeFromOptionsGroupsCloudKit != -1)
      dispatch_once(&_sharingAccessTypeFromOptionsGroups___pred_CKSharingAccessTypeFromOptionsGroupsCloudKit, &__block_literal_global_743);
    v4 = _sharingAccessTypeFromOptionsGroups___CKSharingAccessTypeFromOptionsGroups(v3);
  }
  else
  {
    v4 = 1;
  }

  return v4;
}

void *__56__CKChatController__sharingAccessTypeFromOptionsGroups___block_invoke()
{
  void *result;

  result = (void *)MEMORY[0x193FF3C24]("CKSharingAccessTypeFromOptionsGroups", CFSTR("CloudKit"));
  _sharingAccessTypeFromOptionsGroups___CKSharingAccessTypeFromOptionsGroups = result;
  return result;
}

- (int64_t)_sharingPermissionTypeFromOptionsGroups:(id)a3
{
  id v3;
  int64_t v4;

  v3 = a3;
  if (v3)
  {
    if (_sharingPermissionTypeFromOptionsGroups___pred_CKSharingPermissionTypeFromOptionsGroupsCloudKit != -1)
      dispatch_once(&_sharingPermissionTypeFromOptionsGroups___pred_CKSharingPermissionTypeFromOptionsGroupsCloudKit, &__block_literal_global_747);
    v4 = _sharingPermissionTypeFromOptionsGroups___CKSharingPermissionTypeFromOptionsGroups(v3);
  }
  else
  {
    v4 = 2;
  }

  return v4;
}

void *__60__CKChatController__sharingPermissionTypeFromOptionsGroups___block_invoke()
{
  void *result;

  result = (void *)MEMORY[0x193FF3C24]("CKSharingPermissionTypeFromOptionsGroups", CFSTR("CloudKit"));
  _sharingPermissionTypeFromOptionsGroups___CKSharingPermissionTypeFromOptionsGroups = result;
  return result;
}

- (BOOL)_sharingAllowOthersToInviteFromOptionsGroups:(id)a3
{
  id v3;
  char v4;

  v3 = a3;
  if (v3)
  {
    if (_sharingAllowOthersToInviteFromOptionsGroups___pred_CKSharingAllowOthersToInviteFromOptionsGroupsCloudKit != -1)
      dispatch_once(&_sharingAllowOthersToInviteFromOptionsGroups___pred_CKSharingAllowOthersToInviteFromOptionsGroupsCloudKit, &__block_literal_global_749);
    v4 = _sharingAllowOthersToInviteFromOptionsGroups___CKSharingAllowOthersToInviteFromOptionsGroups(v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void *__65__CKChatController__sharingAllowOthersToInviteFromOptionsGroups___block_invoke()
{
  void *result;

  result = (void *)MEMORY[0x193FF3C24]("CKSharingAllowOthersToInviteFromOptionsGroups", CFSTR("CloudKit"));
  _sharingAllowOthersToInviteFromOptionsGroups___CKSharingAllowOthersToInviteFromOptionsGroups = result;
  return result;
}

- (void)sendCollaborationCompositionAndSetSendingState:(id)a3
{
  id v4;

  v4 = a3;
  if (IMIsRunningInMessagesComposeViewService())
    -[CKChatController sendComposition:](self, "sendComposition:", v4);
  else
    -[CKChatController sendCompositionIfAllowed:](self, "sendCompositionIfAllowed:", v4);

  -[CKChatController setIsSettingUpCollaboration:](self, "setIsSettingUpCollaboration:", 0);
}

- (void)sendCompositionForFileProvider:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  objc_class *v8;
  void *v9;
  void *v10;
  _QWORD v11[5];
  id v12;
  id v13;
  objc_class *v14;

  v6 = a3;
  v7 = a4;
  v8 = -[CKChatController CKCloudSharingClass](self, "CKCloudSharingClass");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v6, "shelfPluginPayload");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "url");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke;
    v11[3] = &unk_1E274CD00;
    v11[4] = self;
    v12 = v6;
    v13 = v7;
    v14 = v8;
    -[objc_class existingShareForFileOrFolderURL:completionHandler:](v8, "existingShareForFileOrFolderURL:completionHandler:", v10, v11);

  }
}

void __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  _QWORD v32[5];
  id v33;
  id v34;
  _QWORD block[5];
  id v36;
  id v37;
  uint8_t buf[16];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (!v9)
  {
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_2;
    v25[3] = &unk_1E274CCD8;
    v16 = v8;
    v31 = *(_QWORD *)(a1 + 56);
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(void **)(a1 + 40);
    v26 = v16;
    v27 = v17;
    v28 = v18;
    v29 = v7;
    v30 = *(id *)(a1 + 48);
    dispatch_async(MEMORY[0x1E0C80D38], v25);

    v15 = v26;
    goto LABEL_14;
  }
  objc_msgSend(v9, "domain");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0C947D8]))
  {
    v12 = objc_msgSend(v10, "code");

    if (v12 == 12)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18DFCD000, v13, OS_LOG_TYPE_INFO, "Sending collaboration composition for file provider.", buf, 2u);
        }

      }
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_754;
      block[3] = &unk_1E274CC10;
      v14 = *(void **)(a1 + 40);
      block[4] = *(_QWORD *)(a1 + 32);
      v36 = v14;
      v37 = *(id *)(a1 + 48);
      dispatch_async(MEMORY[0x1E0C80D38], block);

      v15 = v36;
      goto LABEL_14;
    }
  }
  else
  {

  }
  IMLogHandleForCategory();
  v19 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_cold_1(v10, v19);

  v20 = *(void **)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 40);
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_755;
  v32[3] = &unk_1E274CC38;
  v22 = *(id *)(a1 + 48);
  v23 = *(_QWORD *)(a1 + 32);
  v24 = *(void **)(a1 + 40);
  v34 = v22;
  v32[4] = v23;
  v33 = v24;
  objc_msgSend(v20, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v21, v7, v10, v32);

  v15 = v34;
LABEL_14:

}

uint64_t __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_754(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_sendCompositionForFileProviderCloudDrive:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_755(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 == 1)
    return objc_msgSend(*(id *)(a1 + 32), "sendCompositionForFileProvider:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_2(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint8_t buf[4];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v16 = v3;
      _os_log_impl(&dword_18DFCD000, v2, OS_LOG_TYPE_INFO, "Querying for current user's status on share %@", buf, 0xCu);
    }

  }
  v4 = *(void **)(a1 + 72);
  v5 = *(void **)(a1 + 32);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_756;
  v9[3] = &unk_1E274CCB0;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(void **)(a1 + 48);
  v10 = v6;
  v11 = v7;
  v12 = v8;
  v13 = *(id *)(a1 + 56);
  v14 = *(id *)(a1 + 64);
  objc_msgSend(v4, "sharingStatusForShare:completionHandler:", v6, v9);

}

void __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_756(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[5];
  id v22;
  id v23;
  _QWORD block[5];
  id v25;
  id v26;
  id v27;
  id v28;
  _QWORD v29[5];
  id v30;
  id v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  unint64_t v35;
  __int16 v36;
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "recordID");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v33 = v7;
      v34 = 2048;
      v35 = a2;
      v36 = 2112;
      v37 = v5;
      _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "Received current user's status for share %@, status: %ld, error: %@", buf, 0x20u);

    }
  }
  if (v5)
  {
    IMLogHandleForCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_756_cold_1();

    v10 = *(void **)(a1 + 40);
    v9 = *(void **)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_757;
    v29[3] = &unk_1E274CC60;
    v29[4] = v10;
    v30 = v9;
    v31 = *(id *)(a1 + 64);
    objc_msgSend(v10, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v30, v11, v5, v29);

  }
  else if (a2 <= 4 && ((1 << a2) & 0x16) != 0)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v12, OS_LOG_TYPE_INFO, "Updating collaboration composition for file provider.", buf, 2u);
      }

    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_758;
    block[3] = &unk_1E274CC88;
    v13 = *(void **)(a1 + 48);
    block[4] = *(_QWORD *)(a1 + 40);
    v25 = v13;
    v26 = *(id *)(a1 + 32);
    v27 = *(id *)(a1 + 56);
    v28 = *(id *)(a1 + 64);
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v33 = 0;
        _os_log_impl(&dword_18DFCD000, v14, OS_LOG_TYPE_INFO, "Can't add people because you are not the owner or the share doesn't allow others to invite. Error: %@", buf, 0xCu);
      }

    }
    v15 = *(void **)(a1 + 40);
    v16 = *(_QWORD *)(a1 + 48);
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_759;
    v21[3] = &unk_1E274CC38;
    v17 = *(_QWORD *)(a1 + 56);
    v18 = *(id *)(a1 + 64);
    v19 = *(_QWORD *)(a1 + 40);
    v20 = *(void **)(a1 + 48);
    v23 = v18;
    v21[4] = v19;
    v22 = v20;
    objc_msgSend(v15, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v16, v17, 0, v21);

  }
}

uint64_t __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_757(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 == 1)
    return objc_msgSend(*(id *)(a1 + 32), "sendCompositionForFileProvider:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

uint64_t __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_758(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateAndSendCompositionForFileProvider:share:sharingURL:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

uint64_t __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_759(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 == 1)
    return objc_msgSend(*(id *)(a1 + 32), "sendCompositionForFileProvider:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

- (id)createAnalyticsDictionaryForCollaborationForType:(int64_t)a3 sharingURL:(id)a4
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[2];
  _QWORD v26[2];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a4;
  v6 = objc_alloc_init(MEMORY[0x1E0D39B30]);
  objc_msgSend(v6, "bundleIDsForCollaborationURL:", v5);
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v7 = (id)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
  if (v8)
  {
    v9 = v8;
    v20 = a3;
    v10 = *(_QWORD *)v22;
    v11 = CFSTR("NA");
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v22 != v10)
          objc_enumerationMutation(v7);
        v13 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
        v14 = objc_msgSend(objc_alloc(MEMORY[0x1E0CA5870]), "initWithBundleIdentifier:allowPlaceholder:error:", v13, 0, 0);
        if (v14)
        {
          v15 = (void *)v14;
          v11 = v13;

          goto LABEL_11;
        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
      if (v9)
        continue;
      break;
    }
LABEL_11:
    a3 = v20;
  }
  else
  {
    v11 = CFSTR("NA");
  }

  v16 = *MEMORY[0x1E0D38458];
  v25[0] = *MEMORY[0x1E0D38448];
  v25[1] = v16;
  v26[0] = v11;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v26[1] = v17;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, v25, 2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  return v18;
}

- (void)sendAnalyticsForElapsedSendTimeForType:(int64_t)a3 sharingURL:(id)a4 timeInterval:(double)a5
{
  void *v6;
  void *v7;
  void *v8;
  id v9;

  -[CKChatController createAnalyticsDictionaryForCollaborationForType:sharingURL:](self, "createAnalyticsDictionaryForCollaborationForType:sharingURL:", a3, a4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (id)objc_msgSend(v6, "mutableCopy");

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setObject:forKey:", v7, *MEMORY[0x1E0D38450]);

  objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "trackEvent:withDictionary:", *MEMORY[0x1E0D38550], v9);

}

- (void)_sendCollaborationCompositionForFileProvider:(id)a3 sharingURL:(id)a4 share:(id)a5 completion:(id)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void (*v22)(void *, void *, void *);
  id v23;
  id v24;
  void *v25;
  NSObject *v26;
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  id v31;
  id v32;
  _QWORD aBlock[4];
  id v34;
  id v35;
  CKChatController *v36;
  id v37;
  id v38;
  uint8_t buf[4];
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v27 = a5;
  v12 = a6;
  if (v11)
  {
    objc_msgSend(v10, "shelfPluginPayload");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "url");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __93__CKChatController__sendCollaborationCompositionForFileProvider_sharingURL_share_completion___block_invoke;
    aBlock[3] = &unk_1E274CD28;
    v15 = v13;
    v34 = v15;
    v16 = v11;
    v35 = v16;
    v36 = self;
    v37 = v10;
    v38 = v12;
    v17 = _Block_copy(aBlock);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v40 = v14;
        _os_log_impl(&dword_18DFCD000, v18, OS_LOG_TYPE_INFO, "Starting to perform _SWStartCollaborationAction action for url: %@", buf, 0xCu);
      }

    }
    if (_sendCollaborationCompositionForFileProvider_sharingURL_share_completion___pred_SWPerformActionForDocumentURLSharedWithYouCore != -1)
      dispatch_once(&_sendCollaborationCompositionForFileProvider_sharingURL_share_completion___pred_SWPerformActionForDocumentURLSharedWithYouCore, &__block_literal_global_774);
    v19 = (void *)MEMORY[0x1E0CD7448];
    objc_msgSend(v15, "collaborationMetadata", v27);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "actionWithMetadata:", v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    v22 = (void (*)(void *, void *, void *))_sendCollaborationCompositionForFileProvider_sharingURL_share_completion___SWPerformActionForDocumentURL;
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __93__CKChatController__sendCollaborationCompositionForFileProvider_sharingURL_share_completion___block_invoke_2;
    v28[3] = &unk_1E274CD50;
    v29 = v15;
    v30 = v27;
    v31 = v16;
    v32 = v17;
    v23 = v17;
    v24 = v15;
    v25 = _Block_copy(v28);
    v22(v14, v21, v25);

  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v26, OS_LOG_TYPE_INFO, "Received nil share URL from CloudSharing.", buf, 2u);
    }

  }
}

void __93__CKChatController__sendCollaborationCompositionForFileProvider_sharingURL_share_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  CKComposition *v17;
  void *v18;
  void *v19;
  CKComposition *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[5];
  CKComposition *v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
    objc_msgSend(*(id *)(a1 + 32), "setCollaborationMetadata:", v3);
  v4 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "ckURLByPercentEncodingFragment");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setUrl:", v5);

  v6 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setMessageGUID:", v7);

  v8 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "absoluteString");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "length"))
  {
    v10 = objc_alloc(MEMORY[0x1E0CB3498]);
    objc_msgSend(*(id *)(a1 + 40), "absoluteString");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_msgSend(v10, "initWithString:", v11);
    objc_msgSend(v8, "setText:", v12);

  }
  else
  {
    objc_msgSend(v8, "setText:", 0);
  }

  objc_msgSend(*(id *)(a1 + 32), "setPluginBundleID:", *MEMORY[0x1E0D375F8]);
  v13 = *(void **)(a1 + 48);
  v14 = *(void **)(a1 + 32);
  objc_msgSend(v14, "messageGUID");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "updateDataSourceForPluginPayload:forGUID:withCollaborationMetadata:shareURL:", v14, v15, v3, *(_QWORD *)(a1 + 40));
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = [CKComposition alloc];
  objc_msgSend(*(id *)(a1 + 56), "text");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 56), "subject");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[CKComposition initWithText:subject:shelfPluginPayload:](v17, "initWithText:subject:shelfPluginPayload:", v18, v19, v16);

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *(_QWORD *)(a1 + 40);
      objc_msgSend(v16, "collaborationMetadata");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v29 = v22;
      v30 = 2112;
      v31 = v23;
      _os_log_impl(&dword_18DFCD000, v21, OS_LOG_TYPE_INFO, "Sending the final composition for sharingURL: %@ with CollaborationMetadata:%@", buf, 0x16u);

    }
  }
  objc_msgSend(*(id *)(a1 + 48), "setShareWasCreated:", 1);
  objc_msgSend(*(id *)(a1 + 32), "collaborationMetadata");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "checkSendReadiness");

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 1384), "stopTimingForKey:", CFSTR("sendGelato"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 1384), "totalTimeForKey:", CFSTR("sendGelato"));
  objc_msgSend(*(id *)(a1 + 48), "sendAnalyticsForElapsedSendTimeForType:sharingURL:timeInterval:", 1, *(_QWORD *)(a1 + 40));
  if (objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread"))
  {
    objc_msgSend(*(id *)(a1 + 48), "sendCollaborationCompositionAndSetSendingState:", v20);
  }
  else
  {
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __93__CKChatController__sendCollaborationCompositionForFileProvider_sharingURL_share_completion___block_invoke_771;
    v26[3] = &unk_1E274A108;
    v26[4] = *(_QWORD *)(a1 + 48);
    v27 = v20;
    dispatch_sync(MEMORY[0x1E0C80D38], v26);

  }
  v25 = *(_QWORD *)(a1 + 64);
  if (v25)
    (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v25, 1);

}

uint64_t __93__CKChatController__sendCollaborationCompositionForFileProvider_sharingURL_share_completion___block_invoke_771(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "sendCollaborationCompositionAndSetSendingState:", *(_QWORD *)(a1 + 40));
}

void *__93__CKChatController__sendCollaborationCompositionForFileProvider_sharingURL_share_completion___block_invoke_773()
{
  void *result;

  result = (void *)MEMORY[0x193FF3C24]("SWPerformActionForDocumentURL", CFSTR("SharedWithYouCore"));
  _sendCollaborationCompositionForFileProvider_sharingURL_share_completion___SWPerformActionForDocumentURL = result;
  return result;
}

void __93__CKChatController__sendCollaborationCompositionForFileProvider_sharingURL_share_completion___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  id v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v5;
  else
    v7 = 0;
  v8 = v7;
  if (objc_msgSend(v8, "success")
    && (objc_msgSend(v8, "url"), (v9 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
    && (objc_msgSend(v8, "updatedMetadata"),
        v10 = (void *)objc_claimAutoreleasedReturnValue(),
        v10,
        v9,
        v10))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v8, "url");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "updatedMetadata");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138412546;
        v21 = v12;
        v22 = 2112;
        v23 = v13;
        _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "Updating the collaborationMetadata for url: %@ with metadata: %@", (uint8_t *)&v20, 0x16u);

      }
    }
    objc_msgSend(*(id *)(a1 + 32), "collaborationMetadata");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "updatedMetadata");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "updatedCollaborationMetadataWithUpdatedMetadata:ckShare:sharingURL:", v15, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v16)
    {
      IMLogHandleForCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        __93__CKChatController__sendCollaborationCompositionForFileProvider_sharingURL_share_completion___block_invoke_2_cold_1();

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        v20 = 138412290;
        v21 = v6;
        _os_log_impl(&dword_18DFCD000, v18, OS_LOG_TYPE_INFO, "Failed to update the collaborationMetadata. Error: %@", (uint8_t *)&v20, 0xCu);
      }

    }
    v19 = *(_QWORD *)(a1 + 56);
    objc_msgSend(*(id *)(a1 + 32), "collaborationMetadata");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v16);
  }

}

- (void)_sendCompositionForFileProviderCloudDrive:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  CKChatController *v16;
  id v17;
  id v18;

  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "shelfPluginPayload");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "url");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1E0D11688];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __73__CKChatController__sendCompositionForFileProviderCloudDrive_completion___block_invoke;
  v14[3] = &unk_1E274CDF0;
  v15 = v9;
  v16 = self;
  v17 = v6;
  v18 = v7;
  v11 = v7;
  v12 = v6;
  v13 = v9;
  objc_msgSend(v10, "sharingStatusForFileOrFolderURL:completionHandler:", v13, v14);

}

void __73__CKChatController__sendCompositionForFileProviderCloudDrive_completion___block_invoke(id *a1, unint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  id v9;
  unint64_t v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  _QWORD v20[5];
  id v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  uint8_t buf[4];
  id v27;
  __int16 v28;
  unint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (v5)
  {
    IMLogHandleForCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      __73__CKChatController__sendCompositionForFileProviderCloudDrive_completion___block_invoke_cold_1((uint64_t)a1);

    v8 = a1[4];
    v7 = a1[5];
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __73__CKChatController__sendCompositionForFileProviderCloudDrive_completion___block_invoke_782;
    v24[3] = &unk_1E274CD78;
    v9 = a1[6];
    v25 = a1[7];
    objc_msgSend(v7, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v9, v8, v5, v24);

  }
  else
  {
    if (a2 > 6)
    {
      v10 = 0;
      objc_msgSend(a1[5], "disableSendButtonSpinner", 0);
    }
    else
    {
      if (a2 == 3)
      {
        objc_msgSend(a1[5], "_startSharingForURLForFileProviderCloudDrive:completion:", a1[6], a1[7]);
        goto LABEL_13;
      }
      v10 = a2;
      objc_msgSend(a1[5], "disableSendButtonSpinner", CFSTR("CKCollaborationStatusErrorDomain"));
    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = a1[4];
        *(_DWORD *)buf = 138412546;
        v27 = v12;
        v28 = 2048;
        v29 = a2;
        _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "Unable to share %@ with CSUIShareItemStatus: %ld", buf, 0x16u);
      }

    }
    v13 = a1[5];
    v14 = a1[6];
    v15 = a1[4];
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", v19, v10, 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __73__CKChatController__sendCompositionForFileProviderCloudDrive_completion___block_invoke_783;
    v20[3] = &unk_1E274CDC8;
    v17 = a1[7];
    v18 = a1[5];
    v23 = v17;
    v20[4] = v18;
    v21 = a1[6];
    v22 = a1[4];
    objc_msgSend(v13, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v14, v15, v16, v20);

  }
LABEL_13:

}

uint64_t __73__CKChatController__sendCompositionForFileProviderCloudDrive_completion___block_invoke_782(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void __73__CKChatController__sendCompositionForFileProviderCloudDrive_completion___block_invoke_783(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  id v8;
  id v9;

  if (a2 == 2)
  {
    objc_msgSend(*(id *)(a1 + 32), "_startSharingForURLForFileProviderCloudDrive:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
  }
  else if (a2 == 3)
  {
    objc_msgSend(*(id *)(a1 + 32), "enableSendButtonSpinner");
    v4 = *(void **)(a1 + 32);
    v3 = *(void **)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __73__CKChatController__sendCompositionForFileProviderCloudDrive_completion___block_invoke_2;
    v7[3] = &unk_1E274CDA0;
    v7[4] = v4;
    v8 = v3;
    v9 = *(id *)(a1 + 56);
    objc_msgSend(v4, "_removeSubsharesAndSendFileProviderComposition:shareURL:completion:", v8, v5, v7);

  }
  else
  {
    v6 = *(_QWORD *)(a1 + 56);
    if (v6)
      (*(void (**)(uint64_t, _QWORD))(v6 + 16))(v6, 0);
  }
}

void __73__CKChatController__sendCompositionForFileProviderCloudDrive_completion___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "disableSendButtonSpinner");
  if (v7 && v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "_sendCollaborationCompositionForFileProvider:sharingURL:share:completion:", *(_QWORD *)(a1 + 40), v7, v5, *(_QWORD *)(a1 + 48));
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      (*(void (**)(uint64_t, _QWORD))(v6 + 16))(v6, 0);
  }

}

- (void)_startSharingForURLForFileProviderCloudDrive:(id)a3 completion:(id)a4
{
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int64_t v13;
  void *v14;
  int64_t v15;
  void *v16;
  _BOOL8 v17;
  NSObject *v18;
  const __CFString *v19;
  id v20;
  objc_class *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  _QWORD v26[5];
  id v27;
  id v28;
  id v29;
  uint8_t buf[4];
  int64_t v31;
  __int16 v32;
  int64_t v33;
  __int16 v34;
  const __CFString *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v23 = a4;
  objc_msgSend(v6, "shelfPluginPayload");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "url");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v31 = (int64_t)v24;
      _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "Sending composition for iCloudDrive. url = %@", buf, 0xCu);
    }

  }
  -[CKCoreChatController conversation](self, "conversation");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "recipientPhoneNumbers");
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKCoreChatController conversation](self, "conversation");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "recipientEmailAddresses");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "collaborationShareOptions");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "optionsGroups");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[CKChatController _sharingAccessTypeFromOptionsGroups:](self, "_sharingAccessTypeFromOptionsGroups:", v12);

  objc_msgSend(v11, "optionsGroups");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = -[CKChatController _sharingPermissionTypeFromOptionsGroups:](self, "_sharingPermissionTypeFromOptionsGroups:", v14);

  objc_msgSend(v11, "optionsGroups");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[CKChatController _sharingAllowOthersToInviteFromOptionsGroups:](self, "_sharingAllowOthersToInviteFromOptionsGroups:", v16);

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      v19 = CFSTR("NO");
      *(_DWORD *)buf = 134218498;
      v31 = v13;
      if (v17)
        v19 = CFSTR("YES");
      v32 = 2048;
      v33 = v15;
      v34 = 2112;
      v35 = v19;
      _os_log_impl(&dword_18DFCD000, v18, OS_LOG_TYPE_INFO, "Invoking the share creation with options: accessType: %ld, permissionType:%ld, allowOthersToInvite=%@", buf, 0x20u);
    }

  }
  v20 = objc_alloc_init(MEMORY[0x1E0D36AE8]);
  objc_msgSend(v20, "startTimingForKey:", CFSTR("shareFileOrFolderURL"));
  v21 = -[CKChatController CKCloudSharingClass](self, "CKCloudSharingClass");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __76__CKChatController__startSharingForURLForFileProviderCloudDrive_completion___block_invoke;
    v26[3] = &unk_1E274CE18;
    v26[4] = self;
    v27 = v20;
    v28 = v6;
    v29 = v23;
    -[objc_class shareFileOrFolderURL:emailAddresses:phoneNumbers:accessType:permissionType:allowOthersToInvite:completionHandler:](v21, "shareFileOrFolderURL:emailAddresses:phoneNumbers:accessType:permissionType:allowOthersToInvite:completionHandler:", v24, v10, v22, v13, v15, v17, v26);

  }
}

void __76__CKChatController__startSharingForURLForFileProviderCloudDrive_completion___block_invoke(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  double v10;
  double v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  _QWORD v20[5];
  id v21;
  id v22;
  id v23;
  id v24;
  _QWORD v25[5];
  id v26;
  id v27;
  uint8_t buf[4];
  double v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_msgSend(a1[4], "disableSendButtonSpinner");
  objc_msgSend(a1[5], "stopTimingForKey:", CFSTR("shareFileOrFolderURL"));
  objc_msgSend(a1[5], "totalTimeForKey:", CFSTR("shareFileOrFolderURL"));
  v11 = v10;
  IMLogHandleForCategory();
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v9)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      __76__CKChatController__startSharingForURLForFileProviderCloudDrive_completion___block_invoke_cold_1((uint64_t)v9, v13, v14, v11);

    v15 = a1[4];
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __76__CKChatController__startSharingForURLForFileProviderCloudDrive_completion___block_invoke_790;
    v25[3] = &unk_1E274CC38;
    v16 = a1[6];
    v17 = a1[7];
    v18 = a1[4];
    v27 = v17;
    v25[4] = v18;
    v26 = a1[6];
    objc_msgSend(v15, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v16, v7, v9, v25);

    v19 = v27;
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v29 = v11;
      _os_log_impl(&dword_18DFCD000, v13, OS_LOG_TYPE_INFO, "shareFileOrFolderURL finished in %f seconds", buf, 0xCu);
    }

    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = __76__CKChatController__startSharingForURLForFileProviderCloudDrive_completion___block_invoke_791;
    v20[3] = &unk_1E274CC88;
    v20[4] = a1[4];
    v21 = a1[6];
    v22 = v7;
    v23 = v8;
    v24 = a1[7];
    dispatch_async(MEMORY[0x1E0C80D38], v20);

    v19 = v21;
  }

}

uint64_t __76__CKChatController__startSharingForURLForFileProviderCloudDrive_completion___block_invoke_790(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 == 1)
    return objc_msgSend(*(id *)(a1 + 32), "_sendCompositionForFileProviderCloudDrive:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

uint64_t __76__CKChatController__startSharingForURLForFileProviderCloudDrive_completion___block_invoke_791(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_sendCollaborationCompositionForFileProvider:sharingURL:share:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

- (void)_updateAndSendCompositionForFileProvider:(id)a3 share:(id)a4 sharingURL:(id)a5 completion:(id)a6
{
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  int64_t v26;
  void *v27;
  _BOOL4 v28;
  NSObject *v29;
  const __CFString *v30;
  id v31;
  void *v32;
  objc_class *v33;
  id v34;
  CKChatController *v35;
  BOOL v36;
  int64_t v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  void *v51;
  void *v52;
  _QWORD v53[4];
  id v54;
  CKChatController *v55;
  id v56;
  id v57;
  id v58;
  id v59;
  _QWORD aBlock[5];
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  NSObject *v66;
  id v67;
  _BYTE *v68;
  objc_class *v69;
  int64_t v70;
  BOOL v71;
  _BYTE buf[24];
  id v73;
  __int16 v74;
  void *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  v12 = a4;
  v49 = a5;
  v50 = a6;
  v51 = v12;
  v52 = v11;
  if (v12)
  {
    if (v11)
    {
      -[CKCoreChatController conversation](self, "conversation");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "recipientPhoneNumbers");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = v14;
      if (v14)
      {
        v16 = v14;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99D20], "array");
        v16 = (id)objc_claimAutoreleasedReturnValue();
      }
      v18 = v16;

      -[CKCoreChatController conversation](self, "conversation");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "recipientEmailAddresses");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v20;
      if (v20)
      {
        v22 = v20;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99D20], "array");
        v22 = (id)objc_claimAutoreleasedReturnValue();
      }
      v23 = v22;

      objc_msgSend(v11, "shelfPluginPayload");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "containerSetupInfo");
      v46 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v11, "collaborationShareOptions");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "optionsGroups");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = -[CKChatController _sharingPermissionTypeFromOptionsGroups:](self, "_sharingPermissionTypeFromOptionsGroups:", v25);

      objc_msgSend(v48, "optionsGroups");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = -[CKChatController _sharingAllowOthersToInviteFromOptionsGroups:](self, "_sharingAllowOthersToInviteFromOptionsGroups:", v27);

      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          if (v28)
            v30 = CFSTR("YES");
          else
            v30 = CFSTR("NO");
          objc_msgSend(v18, "componentsJoinedByString:", CFSTR(", "));
          v31 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "componentsJoinedByString:", CFSTR(", "));
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 134218754;
          *(_QWORD *)&buf[4] = v26;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v30;
          *(_WORD *)&buf[22] = 2112;
          v73 = v31;
          v74 = 2112;
          v75 = v32;
          _os_log_impl(&dword_18DFCD000, v29, OS_LOG_TYPE_INFO, "Updating the share with options: permissionType:%ld, allowOthersToInvite=%@, new phone numbers: %@, new email addresses: %@", buf, 0x2Au);

        }
      }
      v33 = -[CKChatController CKCloudSharingClass](self, "CKCloudSharingClass");
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      LOBYTE(v73) = 0;
      LOBYTE(v73) = objc_msgSend(v51, "publicPermission") != 1;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke;
      aBlock[3] = &unk_1E274CEB8;
      v68 = buf;
      aBlock[4] = self;
      v34 = v52;
      v61 = v34;
      v35 = self;
      v36 = v28;
      v37 = v26;
      v38 = v49;
      v62 = v38;
      v39 = v18;
      v40 = v51;
      v63 = v40;
      v41 = v50;
      v67 = v41;
      v69 = v33;
      v47 = v46;
      v64 = v47;
      v45 = v23;
      v65 = v45;
      v17 = v39;
      v66 = v17;
      v70 = v37;
      v71 = v36;
      v42 = _Block_copy(aBlock);
      v43 = (void *)MEMORY[0x1E0D11688];
      v53[0] = MEMORY[0x1E0C809B0];
      v53[1] = 3221225472;
      v53[2] = __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_3;
      v53[3] = &unk_1E274CF08;
      v54 = v38;
      v55 = v35;
      v56 = v34;
      v58 = v41;
      v44 = v42;
      v59 = v44;
      v57 = v40;
      objc_msgSend(v43, "sharingStatusForFileOrFolderURL:completionHandler:", v54, v53);

      _Block_object_dispose(buf, 8);
    }
    else
    {
      IMLogHandleForCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        -[CKChatController _updateAndSendCompositionForFileProvider:share:sharingURL:completion:].cold.2(a2, v17);
    }
  }
  else
  {
    IMLogHandleForCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      -[CKChatController _updateAndSendCompositionForFileProvider:share:sharingURL:completion:].cold.1(a2, v17);
  }

}

void __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];
  id v12;
  id v13;
  id v14;
  uint8_t buf[16];

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v2, OS_LOG_TYPE_INFO, "Not calling addParticipants because it's a public share.", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "_sendCollaborationCompositionForFileProvider:sharingURL:share:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 88));
  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = *(_QWORD *)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
    v6 = *(_QWORD *)(a1 + 80);
    v7 = *(void **)(a1 + 104);
    v8 = *(_QWORD *)(a1 + 112);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[2] = __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_796;
    v11[3] = &unk_1E274CE90;
    v9 = *(void **)(a1 + 40);
    v11[4] = *(_QWORD *)(a1 + 32);
    v10 = *(unsigned __int8 *)(a1 + 120);
    v11[1] = 3221225472;
    v12 = v9;
    v14 = *(id *)(a1 + 88);
    v13 = *(id *)(a1 + 48);
    objc_msgSend(v7, "addParticipantsToShare:containerSetupInfo:emailAddresses:phoneNumbers:permissionType:allowOthersToInvite:completionHandler:", v3, v4, v5, v6, v8, v10, v11);

  }
}

void __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_796(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  id *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  _QWORD block[4];
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  _QWORD v32[5];
  id v33;
  id v34;
  id v35;
  id v36;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_msgSend(*(id *)(a1 + 32), "disableSendButtonSpinner");
  if (v9)
  {
    IMLogHandleForCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_796_cold_1();

    v11 = *(void **)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_797;
    v32[3] = &unk_1E274CE40;
    v13 = &v36;
    v14 = *(id *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void **)(a1 + 40);
    v36 = v14;
    v32[4] = v15;
    v33 = v16;
    v34 = v8;
    v35 = v7;
    v17 = v7;
    v18 = v8;
    objc_msgSend(v11, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v12, v17, v9, v32);

    v19 = v33;
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_2;
    block[3] = &unk_1E274CE68;
    v13 = &v26;
    v26 = v7;
    v20 = *(id *)(a1 + 48);
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(void **)(a1 + 40);
    v27 = v20;
    v28 = v21;
    v29 = v22;
    v30 = v8;
    v31 = *(id *)(a1 + 56);
    v23 = v7;
    v24 = v8;
    dispatch_async(MEMORY[0x1E0C80D38], block);

    v19 = v27;
  }

}

uint64_t __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_797(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 == 1)
    return objc_msgSend(*(id *)(a1 + 32), "_updateAndSendCompositionForFileProvider:share:sharingURL:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_2(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  v2 = *(id *)(a1 + 32);
  v3 = v2;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    v6 = v2;
    v5 = v4;

    v3 = v5;
  }
  v7 = v3;
  objc_msgSend(*(id *)(a1 + 48), "_sendCollaborationCompositionForFileProvider:sharingURL:share:completion:", *(_QWORD *)(a1 + 56), v3, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));

}

void __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_3(id *a1, unint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  _QWORD v18[5];
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  uint8_t buf[4];
  unint64_t v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (v5)
  {
    IMLogHandleForCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_3_cold_1((uint64_t)a1);

    v8 = a1[5];
    v7 = a1[6];
    v9 = a1[4];
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_799;
    v24[3] = &unk_1E274CD78;
    v25 = a1[8];
    objc_msgSend(v8, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v7, v9, v5, v24);

  }
  else if (a2 <= 6)
  {
    if (((1 << a2) & 0x63) != 0)
    {
      objc_msgSend(a1[5], "disableSendButtonSpinner");
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          v11 = a1[4];
          *(_DWORD *)buf = 134218242;
          v27 = a2;
          v28 = 2112;
          v29 = v11;
          _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, "_checkEnclosingShareForFileProviderUpdate received CSUIShareItemStatus: %ld for url: %@", buf, 0x16u);
        }

      }
      v12 = a1[5];
      v13 = a1[6];
      v14 = a1[4];
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("CKCollaborationStatusErrorDomain"), a2, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_800;
      v18[3] = &unk_1E274CEE0;
      v16 = a1[8];
      v17 = a1[5];
      v22 = v16;
      v18[4] = v17;
      v19 = a1[6];
      v20 = a1[7];
      v21 = a1[4];
      v23 = a1[9];
      objc_msgSend(v12, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v13, v14, v15, v18);

    }
    else
    {
      (*((void (**)(void))a1[9] + 2))();
    }
  }

}

uint64_t __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_799(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_800(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];
  id v8;
  id v9;

  switch(a2)
  {
    case 0:
      v3 = *(_QWORD *)(a1 + 64);
      if (v3)
        (*(void (**)(uint64_t, _QWORD))(v3 + 16))(v3, 0);
      break;
    case 1:
      objc_msgSend(*(id *)(a1 + 32), "_updateAndSendCompositionForFileProvider:share:sharingURL:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
      break;
    case 2:
      (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
      break;
    case 3:
      objc_msgSend(*(id *)(a1 + 32), "enableSendButtonSpinner");
      v5 = *(void **)(a1 + 32);
      v4 = *(void **)(a1 + 40);
      v6 = *(_QWORD *)(a1 + 56);
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_2_801;
      v7[3] = &unk_1E274CDA0;
      v7[4] = v5;
      v8 = v4;
      v9 = *(id *)(a1 + 64);
      objc_msgSend(v5, "_removeSubsharesAndSendFileProviderComposition:shareURL:completion:", v8, v6, v7);

      break;
    default:
      return;
  }
}

void __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_2_801(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "disableSendButtonSpinner");
  if (v6 && v5)
    objc_msgSend(*(id *)(a1 + 32), "_sendCollaborationCompositionForFileProvider:sharingURL:share:completion:", *(_QWORD *)(a1 + 40), v6, v5, *(_QWORD *)(a1 + 48));

}

- (void)_removeSubsharesAndSendFileProviderComposition:(id)a3 shareURL:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  _BOOL8 v24;
  NSObject *v25;
  const __CFString *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  const __CFString *v32;
  int64_t v33;
  int64_t v34;
  id v35;
  _QWORD v36[5];
  id v37;
  id v38;
  uint8_t buf[4];
  int64_t v40;
  __int16 v41;
  const __CFString *v42;
  __int16 v43;
  id v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v35 = a4;
  v9 = a5;
  objc_msgSend(v8, "collaborationShareOptions");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "optionsGroups");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = -[CKChatController _sharingPermissionTypeFromOptionsGroups:](self, "_sharingPermissionTypeFromOptionsGroups:", v11);

  objc_msgSend(v10, "optionsGroups");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = -[CKChatController _sharingAccessTypeFromOptionsGroups:](self, "_sharingAccessTypeFromOptionsGroups:", v12);

  -[CKCoreChatController conversation](self, "conversation");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "recipientPhoneNumbers");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (v14)
  {
    v16 = v14;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D20], "array");
    v16 = (id)objc_claimAutoreleasedReturnValue();
  }
  v17 = v16;

  -[CKCoreChatController conversation](self, "conversation");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "recipientEmailAddresses");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v19;
  if (v19)
  {
    v21 = v19;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D20], "array");
    v21 = (id)objc_claimAutoreleasedReturnValue();
  }
  v22 = v21;

  objc_msgSend(v10, "optionsGroups");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = -[CKChatController _sharingAllowOthersToInviteFromOptionsGroups:](self, "_sharingAllowOthersToInviteFromOptionsGroups:", v23);

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      v26 = CFSTR("NO");
      if (v24)
        v26 = CFSTR("YES");
      v32 = v26;
      objc_msgSend(v17, "componentsJoinedByString:", CFSTR(", "));
      v27 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "componentsJoinedByString:", CFSTR(", "));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218754;
      v40 = v34;
      v41 = 2112;
      v42 = v32;
      v43 = 2112;
      v44 = v27;
      v45 = 2112;
      v46 = v28;
      _os_log_impl(&dword_18DFCD000, v25, OS_LOG_TYPE_INFO, "_removeSubsharesAndSendFileProviderComposition permissionType:%ld, allowOthersToInvite=%@, new phone numbers: %@, new email addresses: %@", buf, 0x2Au);

    }
  }
  v29 = (void *)MEMORY[0x1E0D11688];
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 3221225472;
  v36[2] = __87__CKChatController__removeSubsharesAndSendFileProviderComposition_shareURL_completion___block_invoke;
  v36[3] = &unk_1E274CF58;
  v36[4] = self;
  v37 = v8;
  v38 = v9;
  v30 = v9;
  v31 = v8;
  objc_msgSend(v29, "shareFolderRemovingSubshares:emailAddresses:phoneNumbers:accessType:permissionType:allowOthersToInvite:completionHandler:", v35, v22, v17, v33, v34, v24, v36);

}

void __87__CKChatController__removeSubsharesAndSendFileProviderComposition_shareURL_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  id *v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  _QWORD v18[4];
  id v19;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v9)
  {
    IMLogHandleForCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      __87__CKChatController__removeSubsharesAndSendFileProviderComposition_shareURL_completion___block_invoke_cold_1();

    v11 = *(void **)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __87__CKChatController__removeSubsharesAndSendFileProviderComposition_shareURL_completion___block_invoke_802;
    v18[3] = &unk_1E274CD78;
    v13 = &v19;
    v19 = *(id *)(a1 + 48);
    objc_msgSend(v11, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v12, v7, v9, v18);
  }
  else
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __87__CKChatController__removeSubsharesAndSendFileProviderComposition_shareURL_completion___block_invoke_3;
    v14[3] = &unk_1E274CF30;
    v13 = &v17;
    v17 = *(id *)(a1 + 48);
    v15 = v7;
    v16 = v8;
    dispatch_async(MEMORY[0x1E0C80D38], v14);

  }
}

void __87__CKChatController__removeSubsharesAndSendFileProviderComposition_shareURL_completion___block_invoke_802(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  if (*(_QWORD *)(a1 + 32))
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __87__CKChatController__removeSubsharesAndSendFileProviderComposition_shareURL_completion___block_invoke_2;
    block[3] = &unk_1E274AED0;
    v2 = *(id *)(a1 + 32);
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
}

uint64_t __87__CKChatController__removeSubsharesAndSendFileProviderComposition_shareURL_completion___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __87__CKChatController__removeSubsharesAndSendFileProviderComposition_shareURL_completion___block_invoke_3(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

- (id)updateDataSourceForPluginPayload:(id)a3 forGUID:(id)a4 withCollaborationMetadata:(id)a5 shareURL:(id)a6
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v25;
  id v26;
  __int16 v27;
  id v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  if (!v9 || (v13 = objc_msgSend(v10, "length"), !v11) || !v13)
  {
    IMLogHandleForCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v25 = 138412802;
      v26 = v9;
      v27 = 2112;
      v28 = v10;
      v29 = 2112;
      v30 = v11;
      _os_log_error_impl(&dword_18DFCD000, v14, OS_LOG_TYPE_ERROR, "Not updating data source. pluginPayload: %@ messageGUID: %@ collaborationMetadata: %@", (uint8_t *)&v25, 0x20u);
    }

  }
  v15 = (void *)MEMORY[0x1E0CC11D8];
  objc_msgSend(v9, "data");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "linkWithDataRepresentationWithoutSubstitutingAttachments:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v17, "metadata");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setOriginalURL:", v12);
  objc_msgSend(v18, "setCollaborationMetadata:", v11);
  objc_msgSend(v17, "setMetadata:", v18);
  objc_msgSend(v17, "dataRepresentationWithOutOfLineAttachments:", 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setData:", v19);

  objc_msgSend(MEMORY[0x1E0D35770], "sharedInstance");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "dataSourceForPluginPayload:", v9);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D35770], "sharedInstance");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "messageGUID");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "insertDataSource:forGUID:", v21, v23);

  return v9;
}

- (void)_sendCollaborationCompositionForCloudKit:(id)a3 sharingURL:(id)a4 share:(id)a5 completion:(id)a6
{
  id v10;
  id v11;
  void (**v12)(id, uint64_t);
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  char isKindOfClass;
  void *v30;
  void *v31;
  CKComposition *v32;
  void *v33;
  void *v34;
  CKComposition *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  id v39;
  _QWORD block[5];
  CKComposition *v41;
  uint8_t buf[4];
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v39 = a5;
  v12 = (void (**)(id, uint64_t))a6;
  if (v11)
  {
    objc_msgSend(v10, "shelfPluginPayload");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "url");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "ckURLByPercentEncodingFragment");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setUrl:", v15);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setMessageGUID:", v16);

    objc_msgSend(v11, "absoluteString");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v17, "length"))
    {
      v18 = objc_alloc(MEMORY[0x1E0CB3498]);
      objc_msgSend(v11, "absoluteString");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = (void *)objc_msgSend(v18, "initWithString:", v19);
      objc_msgSend(v13, "setText:", v20);

    }
    else
    {
      objc_msgSend(v13, "setText:", 0);
    }

    objc_msgSend(v13, "setPluginBundleID:", *MEMORY[0x1E0D375F8]);
    objc_msgSend(v13, "messageGUID");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "collaborationMetadata");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController updateDataSourceForPluginPayload:forGUID:withCollaborationMetadata:shareURL:](self, "updateDataSourceForPluginPayload:forGUID:withCollaborationMetadata:shareURL:", v13, v22, v23, v11);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(MEMORY[0x1E0D35768], "isPayloadServiceManatee:", v24))
    {
      -[CKChatController shareMetadataWithDugongTokensForCKShare:shareURL:](self, "shareMetadataWithDugongTokensForCKShare:shareURL:", v39, v11);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "datasource");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "richLinkMetadata");
      v27 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v27, "specialization");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) != 0)
      {
        objc_msgSend(v27, "specialization");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "specialization");
        v31 = (void *)objc_claimAutoreleasedReturnValue();

        if ((objc_opt_respondsToSelector() & 1) != 0)
          objc_msgSend(v31, "setEncodedTokens:", v25);

      }
    }
    v32 = [CKComposition alloc];
    objc_msgSend(v10, "text");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "subject");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = -[CKComposition initWithText:subject:shelfPluginPayload:](v32, "initWithText:subject:shelfPluginPayload:", v33, v34, v24);

    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v13, "url");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v43 = v37;
        _os_log_impl(&dword_18DFCD000, v36, OS_LOG_TYPE_INFO, "Sending the final composition for CloudKit sharingURL: %@", buf, 0xCu);

      }
    }
    -[CKCoreChatController setShareWasCreated:](self, "setShareWasCreated:", 1);
    objc_msgSend(v13, "collaborationMetadata");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "checkSendReadiness");

    -[IMTimingCollection stopTimingForKey:](self->_timingCollectionSendGelato, "stopTimingForKey:", CFSTR("sendGelato"));
    -[IMTimingCollection totalTimeForKey:](self->_timingCollectionSendGelato, "totalTimeForKey:", CFSTR("sendGelato"));
    -[CKChatController sendAnalyticsForElapsedSendTimeForType:sharingURL:timeInterval:](self, "sendAnalyticsForElapsedSendTimeForType:sharingURL:timeInterval:", 2, v11);
    if (objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread"))
    {
      -[CKChatController sendCollaborationCompositionAndSetSendingState:](self, "sendCollaborationCompositionAndSetSendingState:", v35);
    }
    else
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __89__CKChatController__sendCollaborationCompositionForCloudKit_sharingURL_share_completion___block_invoke;
      block[3] = &unk_1E274A108;
      block[4] = self;
      v41 = v35;
      dispatch_sync(MEMORY[0x1E0C80D38], block);

    }
    if (v12)
      v12[2](v12, 1);

  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v21, OS_LOG_TYPE_INFO, "Received nil share URL from CloudSharing.", buf, 2u);
    }

  }
}

uint64_t __89__CKChatController__sendCollaborationCompositionForCloudKit_sharingURL_share_completion___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "sendCollaborationCompositionAndSetSendingState:", *(_QWORD *)(a1 + 40));
}

- (void)_sendCompositionForNewCloudKitShare:(id)a3 completion:(id)a4
{
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int64_t v14;
  void *v15;
  int64_t v16;
  void *v17;
  _BOOL4 v18;
  NSObject *v19;
  const __CFString *v20;
  objc_class *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  _QWORD v28[5];
  id v29;
  id v30;
  uint8_t buf[4];
  int64_t v32;
  __int16 v33;
  int64_t v34;
  __int16 v35;
  const __CFString *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v27 = a4;
  objc_msgSend(v6, "shelfPluginPayload");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "url");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v32 = (int64_t)v23;
      _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Sending collaboration composition for New CloudKit share. URL = %@", buf, 0xCu);
    }

  }
  -[CKCoreChatController conversation](self, "conversation");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "recipientPhoneNumbers");
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKCoreChatController conversation](self, "conversation");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "recipientEmailAddresses");
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "containerSetupInfo");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "cloudKitShare");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "collaborationShareOptions");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "optionsGroups");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[CKChatController _sharingAccessTypeFromOptionsGroups:](self, "_sharingAccessTypeFromOptionsGroups:", v13);

  objc_msgSend(v12, "optionsGroups");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[CKChatController _sharingPermissionTypeFromOptionsGroups:](self, "_sharingPermissionTypeFromOptionsGroups:", v15);

  objc_msgSend(v12, "optionsGroups");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[CKChatController _sharingAllowOthersToInviteFromOptionsGroups:](self, "_sharingAllowOthersToInviteFromOptionsGroups:", v17);

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v20 = CFSTR("NO");
      *(_DWORD *)buf = 134218498;
      v32 = v14;
      if (v18)
        v20 = CFSTR("YES");
      v33 = 2048;
      v34 = v16;
      v35 = 2112;
      v36 = v20;
      _os_log_impl(&dword_18DFCD000, v19, OS_LOG_TYPE_INFO, "Invoking the share creation with options: accessType: %ld permissionType:%ld, allowOthersToInvite=%@", buf, 0x20u);
    }

  }
  v21 = -[CKChatController CKCloudSharingClass](self, "CKCloudSharingClass");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __67__CKChatController__sendCompositionForNewCloudKitShare_completion___block_invoke;
    v28[3] = &unk_1E274CF58;
    v28[4] = self;
    v29 = v6;
    v30 = v27;
    LOBYTE(v22) = v18;
    -[objc_class completeShare:containerSetupInfo:emailAddresses:phoneNumbers:accessType:permissionType:allowOthersToInvite:completionHandler:](v21, "completeShare:containerSetupInfo:emailAddresses:phoneNumbers:accessType:permissionType:allowOthersToInvite:completionHandler:", v11, v24, v25, v26, v14, v16, v22, v28);

  }
}

void __67__CKChatController__sendCompositionForNewCloudKitShare_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _QWORD v17[5];
  id v18;
  id v19;
  id v20;
  id v21;
  _QWORD v22[5];
  id v23;
  id v24;
  uint8_t buf[4];
  id v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_msgSend(*(id *)(a1 + 32), "disableSendButtonSpinner");
  if (v9)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v26 = v9;
        v27 = 2112;
        v28 = v7;
        _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, "Error while creating the share URL for CloudKit: %@. Sharing URL: %@", buf, 0x16u);
      }

    }
    v11 = *(void **)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __67__CKChatController__sendCompositionForNewCloudKitShare_completion___block_invoke_811;
    v22[3] = &unk_1E274CC38;
    v13 = *(id *)(a1 + 48);
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(void **)(a1 + 40);
    v24 = v13;
    v22[4] = v14;
    v23 = v15;
    objc_msgSend(v11, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v12, v7, v9, v22);

  }
  else
  {
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __67__CKChatController__sendCompositionForNewCloudKitShare_completion___block_invoke_2;
    v17[3] = &unk_1E274CC88;
    v16 = *(void **)(a1 + 40);
    v17[4] = *(_QWORD *)(a1 + 32);
    v18 = v16;
    v19 = v7;
    v20 = v8;
    v21 = *(id *)(a1 + 48);
    dispatch_async(MEMORY[0x1E0C80D38], v17);

  }
}

uint64_t __67__CKChatController__sendCompositionForNewCloudKitShare_completion___block_invoke_811(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return objc_msgSend(*(id *)(a1 + 32), "_sendCompositionForNewCloudKitShare:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

uint64_t __67__CKChatController__sendCompositionForNewCloudKitShare_completion___block_invoke_2(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_18DFCD000, v2, OS_LOG_TYPE_INFO, "CloudSharing API returned without error. Calling send composition.", v4, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "_sendCollaborationCompositionForCloudKit:sharingURL:share:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

- (void)_updateAndSendCompositionForExistingCloudKitShare:(id)a3 share:(id)a4 completion:(id)a5
{
  id v9;
  id v10;
  id v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  const __CFString *v21;
  id v22;
  void *v23;
  objc_class *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  _BOOL4 v28;
  int64_t v29;
  void *v30;
  _QWORD v31[5];
  id v32;
  id v33;
  uint8_t buf[4];
  int64_t v35;
  __int16 v36;
  const __CFString *v37;
  __int16 v38;
  id v39;
  __int16 v40;
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  if (v10)
  {
    if (v9)
    {
      -[CKCoreChatController conversation](self, "conversation");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "recipientPhoneNumbers");
      v13 = objc_claimAutoreleasedReturnValue();

      -[CKCoreChatController conversation](self, "conversation");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "recipientEmailAddresses");
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "shelfPluginPayload");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "containerSetupInfo");
      v30 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "collaborationShareOptions");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "optionsGroups");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = -[CKChatController _sharingPermissionTypeFromOptionsGroups:](self, "_sharingPermissionTypeFromOptionsGroups:", v18);

      objc_msgSend(v17, "optionsGroups");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = -[CKChatController _sharingAllowOthersToInviteFromOptionsGroups:](self, "_sharingAllowOthersToInviteFromOptionsGroups:", v19);

      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          v27 = v15;
          if (v28)
            v21 = CFSTR("YES");
          else
            v21 = CFSTR("NO");
          -[NSObject componentsJoinedByString:](v13, "componentsJoinedByString:", CFSTR(", "));
          v22 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "componentsJoinedByString:", CFSTR(", "));
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 134218754;
          v35 = v29;
          v36 = 2112;
          v37 = v21;
          v38 = 2112;
          v39 = v22;
          v40 = 2112;
          v41 = v23;
          _os_log_impl(&dword_18DFCD000, v20, OS_LOG_TYPE_INFO, "Updating the share with options: permissionType:%ld, allowOthersToInvite=%@, new phone numbers: %@, new email addresses: %@", buf, 0x2Au);

          v15 = v27;
        }

      }
      v24 = -[CKChatController CKCloudSharingClass](self, "CKCloudSharingClass");
      if (objc_msgSend(v10, "publicPermission") == 1)
      {
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v31[0] = MEMORY[0x1E0C809B0];
          v31[1] = 3221225472;
          v31[2] = __87__CKChatController__updateAndSendCompositionForExistingCloudKitShare_share_completion___block_invoke;
          v31[3] = &unk_1E274CF58;
          v31[4] = self;
          v32 = v9;
          v33 = v11;
          -[objc_class addParticipantsToShare:containerSetupInfo:emailAddresses:phoneNumbers:permissionType:allowOthersToInvite:completionHandler:](v24, "addParticipantsToShare:containerSetupInfo:emailAddresses:phoneNumbers:permissionType:allowOthersToInvite:completionHandler:", v10, v30, v15, v13, v29, v28, v31);

        }
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v25 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18DFCD000, v25, OS_LOG_TYPE_INFO, "Not calling addParticipants because it's a public share.", buf, 2u);
          }

        }
        objc_msgSend(v10, "URL");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController _sendCollaborationCompositionForCloudKit:sharingURL:share:completion:](self, "_sendCollaborationCompositionForCloudKit:sharingURL:share:completion:", v9, v26, v10, v11);

      }
    }
    else
    {
      IMLogHandleForCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        -[CKChatController _updateAndSendCompositionForExistingCloudKitShare:share:completion:].cold.2(a2, v13);
    }
  }
  else
  {
    IMLogHandleForCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      -[CKChatController _updateAndSendCompositionForExistingCloudKitShare:share:completion:].cold.1(a2, v13);
  }

}

void __87__CKChatController__updateAndSendCompositionForExistingCloudKitShare_share_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD block[5];
  id v21;
  id v22;
  id v23;
  id v24;
  _QWORD v25[5];
  id v26;
  id v27;
  id v28;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_msgSend(*(id *)(a1 + 32), "disableSendButtonSpinner");
  if (v9)
  {
    IMLogHandleForCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_796_cold_1();

    v11 = *(void **)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __87__CKChatController__updateAndSendCompositionForExistingCloudKitShare_share_completion___block_invoke_812;
    v25[3] = &unk_1E274CDC8;
    v13 = *(id *)(a1 + 48);
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(void **)(a1 + 40);
    v28 = v13;
    v25[4] = v14;
    v26 = v15;
    v27 = v8;
    v16 = v8;
    objc_msgSend(v11, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v12, v7, v9, v25);

    v17 = v28;
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __87__CKChatController__updateAndSendCompositionForExistingCloudKitShare_share_completion___block_invoke_2;
    block[3] = &unk_1E274CC88;
    v18 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v21 = v18;
    v22 = v7;
    v23 = v8;
    v24 = *(id *)(a1 + 48);
    v19 = v8;
    dispatch_async(MEMORY[0x1E0C80D38], block);

    v17 = v21;
  }

}

uint64_t __87__CKChatController__updateAndSendCompositionForExistingCloudKitShare_share_completion___block_invoke_812(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 == 1)
    return objc_msgSend(*(id *)(a1 + 32), "_updateAndSendCompositionForExistingCloudKitShare:share:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

uint64_t __87__CKChatController__updateAndSendCompositionForExistingCloudKitShare_share_completion___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_sendCollaborationCompositionForCloudKit:sharingURL:share:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

- (void)sendCompositionForPendingCollaboration:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  char v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  const __CFString *v28;
  void *v29;
  NSObject *v30;
  NSObject *v31;
  void *v32;
  _QWORD *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  _QWORD v37[5];
  id v38;
  id v39;
  _QWORD v40[5];
  id v41;
  id v42;
  _QWORD aBlock[4];
  id v44;
  id v45;
  CKChatController *v46;
  id v47;
  id v48;
  id v49;
  uint8_t *v50;
  uint8_t buf[8];
  uint8_t *v52;
  uint64_t v53;
  char v54;
  uint8_t v55[4];
  const __CFString *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Sending collaboration composition for GroupActivity.", buf, 2u);
    }

  }
  objc_msgSend(v6, "shelfPluginPayload");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_alloc(MEMORY[0x1E0DA8830]);
  v35 = (void *)objc_msgSend(v10, "initWithTargetSerialQueue:synchronous:", MEMORY[0x1E0C80D38], 1);
  -[CKCoreChatController conversation](self, "conversation");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "recipientStrings");
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithArray:", v36);
  objc_msgSend(v9, "url");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "collaborationMetadata");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "collaborationShareOptions");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setUserSelectedShareOptions:", v15);

  v16 = objc_msgSend(v13, "isFileURL");
  v17 = 0;
  *(_QWORD *)buf = 0;
  v52 = buf;
  v53 = 0x2020000000;
  v54 = 0;
  if (v16)
    v17 = objc_msgSend(v13, "startAccessingSecurityScopedResource");
  v54 = v17;
  v18 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __70__CKChatController_sendCompositionForPendingCollaboration_completion___block_invoke;
  aBlock[3] = &unk_1E274CFD0;
  v19 = v9;
  v44 = v19;
  v50 = buf;
  v20 = v13;
  v45 = v20;
  v46 = self;
  v21 = v6;
  v47 = v21;
  v22 = v7;
  v49 = v22;
  v23 = v12;
  v48 = v23;
  v24 = _Block_copy(aBlock);
  if ((v16 & 1) != 0)
  {
    if (v52[24])
    {
      objc_msgSend(MEMORY[0x1E0CAAC80], "defaultManager");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "itemForURL:error:", v20, 0);
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      if (v26)
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v27 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
          {
            if (v52[24])
              v28 = CFSTR("YES");
            else
              v28 = CFSTR("NO");
            *(_DWORD *)v55 = 138412290;
            v56 = v28;
            _os_log_impl(&dword_18DFCD000, v27, OS_LOG_TYPE_INFO, "Payload appears to be for a file provider. Starting handshake with a file url. did startAccessingSecurityScopedResource: %@", v55, 0xCu);
          }

        }
        -[CKChatController enableSendButtonSpinner](self, "enableSendButtonSpinner");
        objc_msgSend(v19, "collaborationMetadata");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "startCollaborationWithFileURL:metadata:participants:timeout:completion:", v20, v29, v23, v24, 10.0);
        goto LABEL_30;
      }
      IMLogHandleForCategory();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        -[CKChatController sendCompositionForPendingCollaboration:completion:].cold.2();

      -[CKChatController disableSendButtonSpinner](self, "disableSendButtonSpinner");
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("CKCollaborationErrorDomain"), 2, 0);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v37[0] = v18;
      v37[1] = 3221225472;
      v37[2] = __70__CKChatController_sendCompositionForPendingCollaboration_completion___block_invoke_820;
      v37[3] = &unk_1E274CC38;
      v33 = v37;
      v39 = v22;
      v37[4] = self;
      v38 = v21;
      -[CKChatController presentCollaborationFailureAlertForComposition:sharingURL:error:completion:](self, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v38, 0, v32, v37);
    }
    else
    {
      IMLogHandleForCategory();
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        -[CKChatController sendCompositionForPendingCollaboration:completion:].cold.1();

      -[CKChatController disableSendButtonSpinner](self, "disableSendButtonSpinner");
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("CKCollaborationErrorDomain"), 1, 0);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v40[0] = v18;
      v40[1] = 3221225472;
      v40[2] = __70__CKChatController_sendCompositionForPendingCollaboration_completion___block_invoke_818;
      v40[3] = &unk_1E274CC38;
      v33 = v40;
      v42 = v22;
      v40[4] = self;
      v41 = v21;
      -[CKChatController presentCollaborationFailureAlertForComposition:sharingURL:error:completion:](self, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v41, 0, v32, v40);
    }

    v29 = (void *)v33[6];
    goto LABEL_30;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v55 = 0;
      _os_log_impl(&dword_18DFCD000, v30, OS_LOG_TYPE_INFO, "Payload appears to be for a generic 3rd party. Starting handshake with metadata.", v55, 2u);
    }

  }
  -[CKChatController enableSendButtonSpinner](self, "enableSendButtonSpinner");
  objc_msgSend(v19, "collaborationMetadata");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "startCollaborationWithMetadata:participants:timeout:completion:", v29, v23, v24, 10.0);
LABEL_30:

  _Block_object_dispose(buf, 8);
}

void __70__CKChatController_sendCompositionForPendingCollaboration_completion___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  CKComposition *v27;
  void *v28;
  void *v29;
  CKComposition *v30;
  void *v31;
  id v32;
  uint64_t v33;
  CKComposition *v34;
  void (**v35)(_QWORD);
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  _QWORD v48[4];
  id v49;
  void (**v50)(_QWORD);
  uint64_t v51;
  _QWORD aBlock[4];
  id v53;
  uint64_t v54;
  CKComposition *v55;
  id v56;
  _QWORD v57[5];
  id v58;
  id v59;
  uint8_t buf[4];
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v47 = a3;
  v46 = a4;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "collaborationMetadata");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v61 = (uint64_t)v9;
      _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Starting collaboration for pending collaboration with metadata: %@", buf, 0xCu);

    }
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24))
    objc_msgSend(*(id *)(a1 + 40), "stopAccessingSecurityScopedResource");
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "setUrl:", v7);
    v10 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setMessageGUID:", v11);

    v12 = *(void **)(a1 + 32);
    objc_msgSend(v7, "absoluteString");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v13, "length"))
    {
      v14 = objc_alloc(MEMORY[0x1E0CB3498]);
      objc_msgSend(v7, "absoluteString");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = (void *)objc_msgSend(v14, "initWithString:", v15);
      objc_msgSend(v12, "setText:", v16);

    }
    else
    {
      objc_msgSend(v12, "setText:", 0);
    }

    objc_msgSend(*(id *)(a1 + 32), "setPluginBundleID:", *MEMORY[0x1E0D375F8]);
    objc_msgSend(*(id *)(a1 + 32), "setCollaborationMetadata:", v47);
    v24 = *(void **)(a1 + 48);
    v25 = *(void **)(a1 + 32);
    objc_msgSend(v25, "messageGUID");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "updateDataSourceForPluginPayload:forGUID:withCollaborationMetadata:shareURL:", v25, v26, v47, v7);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    v27 = [CKComposition alloc];
    objc_msgSend(*(id *)(a1 + 56), "text");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 56), "subject");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = -[CKComposition initWithText:subject:shelfPluginPayload:](v27, "initWithText:subject:shelfPluginPayload:", v28, v29, v23);

    objc_msgSend(*(id *)(a1 + 48), "setShareWasCreated:", 1);
    objc_msgSend(*(id *)(a1 + 32), "collaborationMetadata");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "checkSendReadiness");

    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __70__CKChatController_sendCompositionForPendingCollaboration_completion___block_invoke_2;
    aBlock[3] = &unk_1E274CF80;
    v32 = v7;
    v33 = *(_QWORD *)(a1 + 48);
    v53 = v32;
    v54 = v33;
    v34 = v30;
    v55 = v34;
    v56 = *(id *)(a1 + 72);
    v35 = (void (**)(_QWORD))_Block_copy(aBlock);
    v36 = objc_msgSend(*(id *)(a1 + 64), "count");
    objc_msgSend(v47, "handleToIdentityMap");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "allKeys");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend(v38, "count");

    v40 = v36 + 1;
    if (v39 == v36 + 1)
    {
      v35[2](v35);
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v41 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134218240;
          v61 = v40;
          v62 = 2048;
          v63 = v39;
          _os_log_impl(&dword_18DFCD000, v41, OS_LOG_TYPE_INFO, "Did not receive all participant identities from sociallayerd, alerting the user. Expected: %lu, actual: %lu", buf, 0x16u);
        }

      }
      if (v39 == 1)
        v42 = 3;
      else
        v42 = 4;
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("CKCollaborationErrorDomain"), v42, 0, v46);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = *(void **)(a1 + 48);
      v45 = *(_QWORD *)(a1 + 56);
      v48[0] = MEMORY[0x1E0C809B0];
      v48[1] = 3221225472;
      v48[2] = __70__CKChatController_sendCompositionForPendingCollaboration_completion___block_invoke_816;
      v48[3] = &unk_1E274CFA8;
      v51 = v42;
      v49 = *(id *)(a1 + 72);
      v50 = v35;
      objc_msgSend(v44, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v45, v32, v43, v48);

    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v61 = (uint64_t)v46;
        _os_log_impl(&dword_18DFCD000, v17, OS_LOG_TYPE_INFO, "Received a nil shareURL when starting a pending collaboration. Error: %@", buf, 0xCu);
      }

    }
    v18 = *(void **)(a1 + 48);
    v19 = *(_QWORD *)(a1 + 56);
    v57[0] = MEMORY[0x1E0C809B0];
    v57[1] = 3221225472;
    v57[2] = __70__CKChatController_sendCompositionForPendingCollaboration_completion___block_invoke_814;
    v57[3] = &unk_1E274CC38;
    v20 = *(id *)(a1 + 72);
    v21 = *(_QWORD *)(a1 + 48);
    v22 = *(void **)(a1 + 56);
    v59 = v20;
    v57[4] = v21;
    v58 = v22;
    objc_msgSend(v18, "presentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v19, 0, v46, v57);

    v23 = v59;
  }

  objc_msgSend(*(id *)(a1 + 48), "disableSendButtonSpinner");
}

uint64_t __70__CKChatController_sendCompositionForPendingCollaboration_completion___block_invoke_814(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 == 1)
    return objc_msgSend(*(id *)(a1 + 32), "sendCompositionForPendingCollaboration:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

uint64_t __70__CKChatController_sendCompositionForPendingCollaboration_completion___block_invoke_2(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  _QWORD v6[5];
  id v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v9 = v3;
      _os_log_impl(&dword_18DFCD000, v2, OS_LOG_TYPE_INFO, "Sending the final composition for pending conversation for share URL: %@", buf, 0xCu);
    }

  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1384), "stopTimingForKey:", CFSTR("sendGelato"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 1384), "totalTimeForKey:", CFSTR("sendGelato"));
  objc_msgSend(*(id *)(a1 + 40), "sendAnalyticsForElapsedSendTimeForType:sharingURL:timeInterval:", 3, *(_QWORD *)(a1 + 32));
  if (objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread"))
  {
    objc_msgSend(*(id *)(a1 + 40), "sendCollaborationCompositionAndSetSendingState:", *(_QWORD *)(a1 + 48));
  }
  else
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __70__CKChatController_sendCompositionForPendingCollaboration_completion___block_invoke_815;
    v6[3] = &unk_1E274A108;
    v4 = *(void **)(a1 + 48);
    v6[4] = *(_QWORD *)(a1 + 40);
    v7 = v4;
    dispatch_sync(MEMORY[0x1E0C80D38], v6);

  }
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

uint64_t __70__CKChatController_sendCompositionForPendingCollaboration_completion___block_invoke_815(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "sendCollaborationCompositionAndSetSendingState:", *(_QWORD *)(a1 + 40));
}

uint64_t __70__CKChatController_sendCompositionForPendingCollaboration_completion___block_invoke_816(_QWORD *a1)
{
  uint64_t result;

  if (a1[6] != 3)
    return (*(uint64_t (**)(void))(a1[5] + 16))();
  result = a1[4];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

uint64_t __70__CKChatController_sendCompositionForPendingCollaboration_completion___block_invoke_818(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 == 1)
    return objc_msgSend(*(id *)(a1 + 32), "sendCompositionForPendingCollaboration:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

uint64_t __70__CKChatController_sendCompositionForPendingCollaboration_completion___block_invoke_820(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 == 1)
    return objc_msgSend(*(id *)(a1 + 32), "sendCompositionForPendingCollaboration:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

- (void)sendCompositionForCloudKit:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  NSObject *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  uint8_t v19[16];
  uint8_t buf[16];

  v6 = a3;
  v7 = a4;
  objc_msgSend(v6, "shelfPluginPayload");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "cloudKitShare");
  v9 = objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = (void *)v9;
    objc_msgSend(v6, "shelfPluginPayload");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "cloudKitShare");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "participants");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "count");

    if (v14 > 1)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v19 = 0;
          _os_log_impl(&dword_18DFCD000, v15, OS_LOG_TYPE_INFO, "Updating collaboration composition for existing Cloud Kit Share.", v19, 2u);
        }

      }
      objc_msgSend(v6, "shelfPluginPayload");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "cloudKitShare");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController _updateAndSendCompositionForExistingCloudKitShare:share:completion:](self, "_updateAndSendCompositionForExistingCloudKitShare:share:completion:", v6, v17, v7);

      goto LABEL_14;
    }
  }
  else
  {

  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v18, OS_LOG_TYPE_INFO, "There is no existing share for the shareURL.", buf, 2u);
    }

  }
  -[CKChatController _sendCompositionForNewCloudKitShare:completion:](self, "_sendCompositionForNewCloudKitShare:completion:", v6, v7);
LABEL_14:

}

- (void)sendCompositionForCollaboration:(id)a3 collaborationType:(int64_t)a4 completion:(id)a5
{
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  NSObject *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD v19[5];
  id v20;
  _QWORD v21[5];
  id v22;
  id v23;
  int64_t v24;
  _QWORD aBlock[5];
  id v26;
  uint8_t buf[4];
  int64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  v10 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __81__CKChatController_sendCompositionForCollaboration_collaborationType_completion___block_invoke;
  aBlock[3] = &unk_1E274C780;
  aBlock[4] = self;
  v11 = v9;
  v26 = v11;
  v12 = _Block_copy(aBlock);
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v28 = a4;
      _os_log_impl(&dword_18DFCD000, v13, OS_LOG_TYPE_INFO, "Collaboration type switch: %ld", buf, 0xCu);
    }

  }
  v21[0] = v10;
  v21[1] = 3221225472;
  v21[2] = __81__CKChatController_sendCompositionForCollaboration_collaborationType_completion___block_invoke_821;
  v21[3] = &unk_1E274CFF8;
  v21[4] = self;
  v22 = v8;
  v23 = v12;
  v24 = a4;
  v14 = v12;
  v15 = v8;
  v16 = _Block_copy(v21);
  objc_msgSend(v15, "shelfPluginPayload");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v10;
  v19[1] = 3221225472;
  v19[2] = __81__CKChatController_sendCompositionForCollaboration_collaborationType_completion___block_invoke_2;
  v19[3] = &unk_1E274C780;
  v19[4] = self;
  v20 = v16;
  v18 = v16;
  -[CKChatController _presentCollaborationAlertsIfNecessaryForPayload:collaborationType:sendBlock:completionHandler:](self, "_presentCollaborationAlertsIfNecessaryForPayload:collaborationType:sendBlock:completionHandler:", v17, a4, v18, v19);

}

uint64_t __81__CKChatController_sendCompositionForCollaboration_collaborationType_completion___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "setIsSettingUpCollaboration:", 0);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

uint64_t __81__CKChatController_sendCompositionForCollaboration_collaborationType_completion___block_invoke_821(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 56);
  switch(v1)
  {
    case 3:
      return objc_msgSend(*(id *)(result + 32), "sendCompositionForPendingCollaboration:completion:", *(_QWORD *)(result + 40), *(_QWORD *)(result + 48));
    case 2:
      return objc_msgSend(*(id *)(result + 32), "sendCompositionForCloudKit:completion:", *(_QWORD *)(result + 40), *(_QWORD *)(result + 48));
    case 1:
      return objc_msgSend(*(id *)(result + 32), "sendCompositionForFileProvider:completion:", *(_QWORD *)(result + 40), *(_QWORD *)(result + 48));
  }
  return result;
}

uint64_t __81__CKChatController_sendCompositionForCollaboration_collaborationType_completion___block_invoke_2(uint64_t result, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
  {
    v2 = result;
    result = objc_msgSend(*(id *)(result + 32), "isSettingUpCollaboration");
    if ((result & 1) == 0)
    {
      objc_msgSend(*(id *)(v2 + 32), "setIsSettingUpCollaboration:", 1);
      return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 40) + 16))();
    }
  }
  return result;
}

- (void)_presentCollaborationAlertsIfNecessaryForPayload:(id)a3 collaborationType:(int64_t)a4 sendBlock:(id)a5 completionHandler:(id)a6
{
  id v10;
  void (**v11)(id, uint64_t);
  id v12;

  v12 = a3;
  v10 = a5;
  v11 = (void (**)(id, uint64_t))a6;
  if (-[CKChatController _presentCollabInvalidFileProviderLocationAlertIfNecessaryForPayload:collaborationType:](self, "_presentCollabInvalidFileProviderLocationAlertIfNecessaryForPayload:collaborationType:", v12, a4))
  {
    v11[2](v11, 1);
  }
  else
  {
    -[CKChatController _presentCollabAddToMessagesGroupAlertIfNecessary:collaborationType:sendBlock:completionHandler:](self, "_presentCollabAddToMessagesGroupAlertIfNecessary:collaborationType:sendBlock:completionHandler:", v12, a4, v10, v11);
  }

}

- (BOOL)_presentCollabInvalidFileProviderLocationAlertIfNecessaryForPayload:(id)a3 collaborationType:(int64_t)a4
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  BOOL v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v22;

  if (a4 != 1)
    return 0;
  v5 = (void *)MEMORY[0x1E0CAAC80];
  v6 = a3;
  objc_msgSend(v5, "defaultManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "url");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v22 = 0;
  objc_msgSend(v7, "itemForURL:error:", v8, &v22);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v22;

  v11 = v9 == 0;
  if (!v9)
  {
    if (v10)
    {
      IMLogHandleForCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        -[CKChatController _presentCollabInvalidFileProviderLocationAlertIfNecessaryForPayload:collaborationType:].cold.1();

    }
    CKFrameworkBundle();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("ALERT_TITLE_COLLAB_INVALID_FILE_PROVIDER_LOCATION"), &stru_1E276D870, CFSTR("ChatKit"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    CKFrameworkBundle();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "localizedStringForKey:value:table:", CFSTR("ALERT_MESSAGE_COLLAB_INVALID_FILE_PROVIDER_LOCATION"), &stru_1E276D870, CFSTR("ChatKit"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    CKFrameworkBundle();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1E276D870, CFSTR("ChatKit"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    +[CKAlertController alertControllerWithTitle:message:preferredStyle:](CKAlertController, "alertControllerWithTitle:message:preferredStyle:", v14, v16, CKIsRunningInMacCatalyst() != 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v18, 0, &__block_literal_global_826);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "addAction:", v20);

    objc_msgSend(v19, "presentFromViewController:animated:completion:", self, 1, 0);
  }

  return v11;
}

- (void)_presentCollabAddToMessagesGroupAlertIfNecessary:(id)a3 collaborationType:(int64_t)a4 sendBlock:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  unint64_t v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD v19[5];
  id v20;
  id v21;

  v10 = a3;
  v11 = a5;
  v12 = a6;
  -[CKCoreChatController conversation](self, "conversation");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "recipientCount");

  if (v14 < 2)
  {
    if (a4 == 1)
    {
      v15 = objc_alloc(MEMORY[0x1E0D10EF8]);
      objc_msgSend(v10, "url");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (void *)objc_msgSend(v15, "initWithFileURL:documentType:", v16, *MEMORY[0x1E0CA5C90]);

      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = __115__CKChatController__presentCollabAddToMessagesGroupAlertIfNecessary_collaborationType_sendBlock_completionHandler___block_invoke;
      v19[3] = &unk_1E274D048;
      v19[4] = self;
      v20 = v12;
      v21 = v11;
      objc_msgSend(v17, "setCopyShareURLCompletionBlock:", v19);
      v18 = objc_alloc_init(MEMORY[0x1E0CB3828]);
      objc_msgSend(v18, "setMaxConcurrentOperationCount:", 1);
      objc_msgSend(v18, "addOperation:", v17);

    }
    else
    {
      objc_msgSend(v10, "url");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController _presentCollabAddToMessagesGroupAlert:sendBlock:completionHandler:](self, "_presentCollabAddToMessagesGroupAlert:sendBlock:completionHandler:", v17, v11, v12);
    }

  }
  else
  {
    (*((void (**)(id, _QWORD))v12 + 2))(v12, 0);
  }

}

void __115__CKChatController__presentCollabAddToMessagesGroupAlertIfNecessary_collaborationType_sendBlock_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    IMLogHandleForCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      __115__CKChatController__presentCollabAddToMessagesGroupAlertIfNecessary_collaborationType_sendBlock_completionHandler___block_invoke_cold_1();

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __115__CKChatController__presentCollabAddToMessagesGroupAlertIfNecessary_collaborationType_sendBlock_completionHandler___block_invoke_828;
    v9[3] = &unk_1E274D020;
    v9[4] = *(_QWORD *)(a1 + 32);
    v10 = v5;
    v11 = *(id *)(a1 + 48);
    v12 = *(id *)(a1 + 40);
    dispatch_async(MEMORY[0x1E0C80D38], v9);

  }
}

uint64_t __115__CKChatController__presentCollabAddToMessagesGroupAlertIfNecessary_collaborationType_sendBlock_completionHandler___block_invoke_828(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_presentCollabAddToMessagesGroupAlert:sendBlock:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

- (void)_presentCollabAddToMessagesGroupAlert:(id)a3 sendBlock:(id)a4 completionHandler:(id)a5
{
  id v8;
  NSObject *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  BOOL v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _BOOL4 v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  _BOOL4 v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  void (**v55)(id, _QWORD);
  id obj;
  id obja;
  CKChatController *v58;
  _QWORD v59[4];
  id v60;
  _QWORD v61[5];
  id v62;
  id v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint8_t v68[128];
  uint8_t buf[4];
  void *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v53 = a4;
  v55 = (void (**)(id, _QWORD))a5;
  v52 = v8;
  if (v8)
  {
    v58 = self;
    -[CKChatController _groupConversationContainingSharedURL:](self, "_groupConversationContainingSharedURL:", v8);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v54)
    {
LABEL_31:
      v55[2](v55, 0);
      goto LABEL_36;
    }
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v54, "chat");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "chatIdentifier");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v70 = v11;
        _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, "Presenting Group Collaboration alert for chat identifier: %@", buf, 0xCu);

      }
    }
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    objc_msgSend(v54, "recipients");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v68, 16);
    if (v12)
    {
      v13 = *(_QWORD *)v65;
      while (2)
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v65 != v13)
            objc_enumerationMutation(obj);
          objc_msgSend(*(id *)(*((_QWORD *)&v64 + 1) + 8 * i), "defaultIMHandle");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "ID");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          -[CKCoreChatController conversation](v58, "conversation");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "recipient");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "defaultIMHandle");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "ID");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = objc_msgSend(v16, "isEqualToString:", v20);

          if (v21)
          {
            if (IMOSLoggingEnabled())
            {
              OSLogHandleForIMFoundationCategory();
              v34 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18DFCD000, v34, OS_LOG_TYPE_INFO, "Recipient is already part of group conversation, sending separately", buf, 2u);
              }

            }
            goto LABEL_31;
          }
        }
        v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v64, v68, 16);
        if (v12)
          continue;
        break;
      }
    }

    -[CKCoreChatController conversation](v58, "conversation");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "recipient");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "name");
    v51 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v54, "displayName");
    obja = (id)objc_claimAutoreleasedReturnValue();
    if (!obja)
    {
      objc_msgSend(v54, "name");
      obja = (id)objc_claimAutoreleasedReturnValue();
    }
    v24 = CKIsRunningInMacCatalyst() == 0;
    v25 = (void *)MEMORY[0x1E0CB3940];
    CKFrameworkBundle();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = v26;
    if (v24)
    {
      objc_msgSend(v26, "localizedStringForKey:value:table:", CFSTR("ALERT_TITLE_ADD_TO_EXISTING_GROUP_CONVERSATION_IOS"), &stru_1E276D870, CFSTR("ChatKit"));
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "stringWithFormat:", v35, v51, obja);
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = objc_msgSend(v36, "userInterfaceLayoutDirection") == 1;

      if (v37)
        goto LABEL_19;
    }
    else
    {
      objc_msgSend(v26, "localizedStringForKey:value:table:", CFSTR("ALERT_TITLE_ADD_TO_EXISTING_GROUP_CONVERSATION_MAC"), &stru_1E276D870, CFSTR("ChatKit"));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "stringWithFormat:", v28, v51, obja);
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = objc_msgSend(v30, "userInterfaceLayoutDirection") == 1;

      if (v31)
      {
LABEL_19:
        objc_msgSend(CFSTR("\u200F"), "stringByAppendingString:", v29);
LABEL_20:
        v32 = objc_claimAutoreleasedReturnValue();
        v38 = (void *)v32;

        CKFrameworkBundle();
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v39, "localizedStringForKey:value:table:", CFSTR("ALERT_ACTION_ADD_TO_GROUP"), &stru_1E276D870, CFSTR("ChatKit"));
        v40 = (void *)objc_claimAutoreleasedReturnValue();

        CKFrameworkBundle();
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "localizedStringForKey:value:table:", CFSTR("ALERT_ACTION_SHARE_WITH_PARTICIPANT_ONLY"), &stru_1E276D870, CFSTR("ChatKit"));
        v42 = (void *)objc_claimAutoreleasedReturnValue();

        +[CKAlertController alertControllerWithTitle:message:preferredStyle:](CKAlertController, "alertControllerWithTitle:message:preferredStyle:", v38, 0, CKIsRunningInMacCatalyst() != 0);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = MEMORY[0x1E0C809B0];
        v61[0] = MEMORY[0x1E0C809B0];
        v61[1] = 3221225472;
        v61[2] = __86__CKChatController__presentCollabAddToMessagesGroupAlert_sendBlock_completionHandler___block_invoke;
        v61[3] = &unk_1E274D070;
        v61[4] = v58;
        v62 = v54;
        v45 = v53;
        v63 = v45;
        +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v40, 0, v61);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "addAction:", v46);

        v59[0] = v44;
        v59[1] = 3221225472;
        v59[2] = __86__CKChatController__presentCollabAddToMessagesGroupAlert_sendBlock_completionHandler___block_invoke_839;
        v59[3] = &unk_1E274B330;
        v60 = v45;
        +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v42, 0, v59);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "addAction:", v47);

        CKFrameworkBundle();
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "localizedStringForKey:value:table:", CFSTR("CANCEL"), &stru_1E276D870, CFSTR("ChatKit"));
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v49, 1, &__block_literal_global_841);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "addAction:", v50);

        objc_msgSend(v43, "presentFromViewController:animated:completion:", v58, 1, 0);
        v55[2](v55, 1);

LABEL_36:
        goto LABEL_37;
      }
    }
    objc_msgSend(CFSTR("\u200E"), "stringByAppendingString:", v29);
    goto LABEL_20;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v33, OS_LOG_TYPE_INFO, "Can't find a group conversation, URL is nil", buf, 2u);
    }

  }
  v55[2](v55, 0);
LABEL_37:

}

void __86__CKChatController__presentCollabAddToMessagesGroupAlert_sendBlock_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  int v15;
  void *v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(v15) = 0;
      _os_log_impl(&dword_18DFCD000, v4, OS_LOG_TYPE_INFO, "Add to group and share with recipient", (uint8_t *)&v15, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "recipient");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "rawAddress");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "conversation");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "chat");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "account");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "imHandleWithID:alreadyCanonical:", v7, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend(*(id *)(a1 + 32), "setConversation:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "conversation");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = v11;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v17, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "addRecipientHandles:", v13);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v15 = 138412290;
      v16 = v6;
      _os_log_impl(&dword_18DFCD000, v14, OS_LOG_TYPE_INFO, "CKChatController_Collaboration: Couldn't get handle from recipient: %@", (uint8_t *)&v15, 0xCu);
    }

  }
}

void __86__CKChatController__presentCollabAddToMessagesGroupAlert_sendBlock_completionHandler___block_invoke_839(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_18DFCD000, v4, OS_LOG_TYPE_INFO, "Share with recipient only", v5, 2u);
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void __86__CKChatController__presentCollabAddToMessagesGroupAlert_sendBlock_completionHandler___block_invoke_840(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "Cancel", v4, 2u);
    }

  }
}

- (id)_groupConversationContainingSharedURL:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  id v26;
  uint8_t v27[128];
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0D35900], "sharedController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = 0;
    objc_msgSend(v4, "collaborationHighlightForURL:error:", v3, &v26);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v26;

    if (v6 || !v5)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v6, "localizedDescription");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v29 = v5;
          v30 = 2112;
          v31 = v18;
          _os_log_impl(&dword_18DFCD000, v17, OS_LOG_TYPE_INFO, "Could not get collaboration highlight: %@ with error: %@", buf, 0x16u);

        }
      }
      v9 = 0;
      v10 = 0;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0D35900], "sharedController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "fetchAttributionsForHighlight:", v5);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      objc_msgSend(v21, "attributions");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 0;
      v10 = (void *)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
      if (v10)
      {
        v11 = 0;
        v12 = *(_QWORD *)v23;
        while (2)
        {
          for (i = 0; i != v10; i = (char *)i + 1)
          {
            if (*(_QWORD *)v23 != v12)
              objc_enumerationMutation(v8);
            v14 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
            if (objc_msgSend(v14, "isGroupConversation"))
            {
              objc_msgSend(v14, "conversationIdentifier");
              v15 = (void *)objc_claimAutoreleasedReturnValue();

              if (v11 >= 1)
              {
                if (IMOSLoggingEnabled())
                {
                  OSLogHandleForIMFoundationCategory();
                  v19 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_18DFCD000, v19, OS_LOG_TYPE_INFO, "Found more than 1 group where the url is shared, not returning a conversation", buf, 2u);
                  }

                }
                v9 = 0;
                v10 = 0;
                goto LABEL_31;
              }
              ++v11;
              v9 = v15;
            }
          }
          v10 = (void *)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
          if (v10)
            continue;
          break;
        }

        if (v9)
        {
          +[CKConversationList sharedConversationList](CKConversationList, "sharedConversationList");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "conversationForExistingChatWithGUID:", v9);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_31;
        }
        v10 = 0;
      }
      else
      {
LABEL_31:

      }
    }

  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v16, OS_LOG_TYPE_INFO, "No URL provided", buf, 2u);
      }

    }
    v10 = 0;
  }

  return v10;
}

- (void)_validateAndSendComposition:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  _BOOL4 v10;
  int v11;
  NSObject *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  int v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  CKComposition *v42;
  uint64_t v43;
  _QWORD v44[5];
  id v45;
  id v46;
  id v47;
  uint8_t buf[4];
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "addObserver:selector:name:object:", self, sel__passKitUIDismissed_, CFSTR("CKPluginExtensionStateObserverPassKitUIDismissed"), 0);

  objc_msgSend(v6, "shelfPluginPayload");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[CKChatController _shouldValidatePayloadBeforeSendingPayload:](self, "_shouldValidatePayloadBeforeSendingPayload:", v9);
  v11 = objc_msgSend(v9, "sendAsCopy");
  if (!objc_msgSend(v9, "supportsCollaboration") || (v11 & 1) != 0)
  {
    if (v10)
    {
      v13 = v9;
      +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "pluginBundleID");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "datasource");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (void *)objc_msgSend(v14, "newViewControllerForPluginIdentifier:dataSource:", v15, v16);

      objc_msgSend(v6, "text");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "string");
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v19, "stringByReplacingOccurrencesOfString:withString:", *MEMORY[0x1E0D362F8], &stru_1E276D870);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "stringByReplacingOccurrencesOfString:withString:", *MEMORY[0x1E0D36318], &stru_1E276D870);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[CKCoreChatController conversation](self, "conversation");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "senderIdentifier");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "setSender:", v23);

      }
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        -[CKCoreChatController conversation](self, "conversation");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "recipientStrings");
        v25 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v17, "setRecipients:", v25);
      }
      -[CKChatController enableSendButtonSpinner](self, "enableSendButtonSpinner");
      -[CKChatController entryView](self, "entryView");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "contentView");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "setClearPluginButtonEnabled:", 0);

      v44[0] = MEMORY[0x1E0C809B0];
      v44[1] = 3221225472;
      v44[2] = __59__CKChatController__validateAndSendComposition_completion___block_invoke;
      v44[3] = &unk_1E274D0E8;
      v44[4] = self;
      v45 = v6;
      v46 = v13;
      v47 = v7;
      v28 = v13;
      objc_msgSend(v17, "validatePayloadForSending:associatedText:completionHandler:", v28, v21, v44);

    }
    else
    {
      if (v11 && objc_msgSend(v9, "payloadCollaborationType") == 2)
        objc_msgSend(v6, "cleanupCKShareFromComposition");
      v29 = v6;
      objc_msgSend(v9, "sendAsCopyURL");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      if (v30)
      {
        v31 = objc_msgSend(v9, "sendAsCopy");

        if (v31)
        {
          objc_msgSend(v9, "sendAsCopyURL");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "setUrl:", v32);

          v42 = [CKComposition alloc];
          objc_msgSend(v29, "text");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "subject");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "bizIntent");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "shelfMediaObject");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "proofreadingInfo");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v43 = -[CKComposition initWithText:subject:shelfPluginPayload:bizIntent:shelfMediaObject:proofreadingInfo:](v42, "initWithText:subject:shelfPluginPayload:bizIntent:shelfMediaObject:proofreadingInfo:", v33, v34, v9, v35, v36, v37);

          v29 = (id)v43;
        }
      }
      objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = objc_msgSend(v38, "isExpressiveTextEnabled");

      if (v39)
      {
        -[CKChatController entryView](self, "entryView");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "contentView");
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "prepareTextEffectsForImmediateMessageSend");

      }
      -[CKChatController sendCompositionIfAllowed:](self, "sendCompositionIfAllowed:", v29);
      if (v7)
        (*((void (**)(id, uint64_t))v7 + 2))(v7, 1);

    }
  }
  else
  {
    -[CKChatController enableSendButtonSpinner](self, "enableSendButtonSpinner");
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v49 = objc_msgSend(v9, "payloadCollaborationType");
        _os_log_impl(&dword_18DFCD000, v12, OS_LOG_TYPE_INFO, "Sending collaboration item for type %ld", buf, 0xCu);
      }

    }
    -[CKChatController sendCompositionForCollaboration:collaborationType:completion:](self, "sendCompositionForCollaboration:collaborationType:completion:", v6, objc_msgSend(v9, "payloadCollaborationType"), v7);
  }

}

void __59__CKChatController__validateAndSendComposition_completion___block_invoke(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  _QWORD block[4];
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  char v19;

  v7 = a3;
  v8 = a4;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __59__CKChatController__validateAndSendComposition_completion___block_invoke_2;
  block[3] = &unk_1E274D0C0;
  v19 = a2;
  v13 = v7;
  v14 = v8;
  v9 = *(void **)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = v9;
  v18 = *(id *)(a1 + 56);
  v17 = *(id *)(a1 + 48);
  v10 = v8;
  v11 = v7;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

void __59__CKChatController__validateAndSendComposition_completion___block_invoke_2(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void (**v10)(_QWORD);
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD block[5];
  _QWORD aBlock[4];
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(void **)(a1 + 32);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 80));
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      v34 = v3;
      v35 = 2112;
      v36 = v4;
      v37 = 2112;
      v38 = v5;
      _os_log_impl(&dword_18DFCD000, v2, OS_LOG_TYPE_INFO, "Received payload validation for payload %@. shouldSend %@. localizedInvalidationDescription %@", buf, 0x20u);

    }
  }
  objc_msgSend(*(id *)(a1 + 48), "disableSendButtonSpinner");
  objc_msgSend(*(id *)(a1 + 48), "entryView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "contentView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setClearPluginButtonEnabled:", 1);

  if (*(_BYTE *)(a1 + 80))
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __59__CKChatController__validateAndSendComposition_completion___block_invoke_845;
    aBlock[3] = &unk_1E274CF80;
    v29 = *(id *)(a1 + 32);
    v8 = *(id *)(a1 + 56);
    v9 = *(_QWORD *)(a1 + 48);
    v30 = v8;
    v31 = v9;
    v32 = *(id *)(a1 + 72);
    v10 = (void (**)(_QWORD))_Block_copy(aBlock);
    objc_msgSend(*(id *)(a1 + 32), "pluginBundleID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    IMBalloonExtensionIDWithSuffix();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v11, "isEqualToString:", v12);

    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = *(void **)(a1 + 32);
        v16 = _Block_copy(v10);
        v17 = (void *)MEMORY[0x1E0CB37E8];
        +[CKPluginExtensionStateObserver sharedInstance](CKPluginExtensionStateObserver, "sharedInstance");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "numberWithBool:", objc_msgSend(v18, "passKitUIPresented"));
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v13);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138413058;
        v34 = v15;
        v35 = 2112;
        v36 = v16;
        v37 = 2112;
        v38 = v19;
        v39 = 2112;
        v40 = v20;
        _os_log_impl(&dword_18DFCD000, v14, OS_LOG_TYPE_INFO, "Preparing for send after payload validation. payload %@. sendBlock %@. passKitUIPresented %@. isSurf:%@", buf, 0x2Au);

      }
    }
    +[CKPluginExtensionStateObserver sharedInstance](CKPluginExtensionStateObserver, "sharedInstance");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "passKitUIPresented");

    if ((v22 & v13 & 1) != 0)
      objc_msgSend(*(id *)(a1 + 48), "setDeferredSendAnimationBlock:", v10);
    else
      v10[2](v10);

  }
  else if (*(_QWORD *)(a1 + 40))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 64), "pluginBundleID");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = *(void **)(a1 + 64);
        v26 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412802;
        v34 = v24;
        v35 = 2112;
        v36 = v25;
        v37 = 2112;
        v38 = v26;
        _os_log_impl(&dword_18DFCD000, v23, OS_LOG_TYPE_INFO, "Payload validation from plugin %@ for payload (%@) failed. reason %@", buf, 0x20u);

      }
    }
    objc_msgSend(*(id *)(a1 + 48), "showPayloadValidationAlertWithDescription:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __59__CKChatController__validateAndSendComposition_completion___block_invoke_848;
    block[3] = &unk_1E274A208;
    block[4] = *(_QWORD *)(a1 + 48);
    dispatch_async(MEMORY[0x1E0C80D38], block);
  }
}

void __59__CKChatController__validateAndSendComposition_completion___block_invoke_845(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  id v9;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __59__CKChatController__validateAndSendComposition_completion___block_invoke_2_846;
  v6[3] = &unk_1E274D098;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(void **)(a1 + 56);
  v7 = v3;
  v8 = v4;
  v9 = v5;
  +[CKComposition compositionWithShelfPluginPayload:completionHandler:](CKComposition, "compositionWithShelfPluginPayload:completionHandler:", v2, v6);

}

void __59__CKChatController__validateAndSendComposition_completion___block_invoke_2_846(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "compositionByAppendingComposition:", a2);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "sendCompositionIfAllowed:");
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v3, 1);

}

void __59__CKChatController__validateAndSendComposition_completion___block_invoke_848(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "updateEntryView");

}

- (void)showPayloadValidationAlertWithDescription:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[5];

  objc_msgSend(MEMORY[0x1E0CEA2E8], "alertControllerWithTitle:message:preferredStyle:", 0, a3, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CEA2E0];
  CKFrameworkBundle();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1E276D870, CFSTR("ChatKit"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __62__CKChatController_showPayloadValidationAlertWithDescription___block_invoke;
  v9[3] = &unk_1E274B0D8;
  v9[4] = self;
  objc_msgSend(v5, "actionWithTitle:style:handler:", v7, 0, v9);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addAction:", v8);

  -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v4, 1, 0);
}

uint64_t __62__CKChatController_showPayloadValidationAlertWithDescription___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissViewControllerAnimated:completion:", 1, 0);
}

- (void)checkForSensitivePhotosAndSendComposition:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  dispatch_group_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  NSObject *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  NSObject *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  void *v42;
  void *v43;
  id v44;
  id v45;
  CKChatController *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  _QWORD block[4];
  NSObject *v52;
  id v53;
  id v54;
  id v55;
  id v56;
  CKChatController *v57;
  _QWORD v58[4];
  id v59;
  void *v60;
  id v61;
  NSObject *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _QWORD v67[4];
  id v68;
  id v69;
  id v70;
  NSObject *v71;
  _QWORD v72[4];
  NSObject *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  _QWORD v78[4];
  NSObject *v79;
  id v80;
  id v81;
  id v82;
  id v83;
  _BYTE v84[128];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0D397A0], "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "shelfPluginPayload");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    v7 = 0;
  else
    v7 = objc_msgSend((id)objc_msgSend(v4, "balloonViewClass"), "isSubclassOfClass:", objc_opt_class()) ^ 1;

  if (!objc_msgSend(v5, "checksForSensitivityOnSend") || (v7 & 1) != 0)
  {
    -[CKChatController sendComposition:](self, "sendComposition:", v4);
  }
  else
  {
    v47 = v5;
    objc_msgSend(MEMORY[0x1E0D39798], "sharedManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKCoreChatController conversation](self, "conversation");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "chat");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "chatIdentifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v13 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v14 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    v15 = dispatch_group_create();
    v46 = self;
    -[CKCoreChatController inputController](self, "inputController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = MEMORY[0x1E0C809B0];
    v78[0] = MEMORY[0x1E0C809B0];
    v78[1] = 3221225472;
    v78[2] = __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke;
    v78[3] = &unk_1E274D138;
    v18 = v15;
    v79 = v18;
    v19 = v8;
    v80 = v19;
    v20 = v11;
    v81 = v20;
    v21 = v12;
    v82 = v21;
    v45 = v13;
    v83 = v45;
    objc_msgSend(v16, "requestPhotoBrowserToEnumerateSelectedImagesUsingBlock:", v78);

    objc_msgSend(v4, "mediaObjects");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v72[0] = v17;
    v72[1] = 3221225472;
    v72[2] = __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke_3;
    v72[3] = &unk_1E274D188;
    v23 = v18;
    v73 = v23;
    v50 = v19;
    v74 = v50;
    v49 = v20;
    v75 = v49;
    v48 = v21;
    v76 = v48;
    v24 = v14;
    v77 = v24;
    objc_msgSend(v22, "enumerateObjectsUsingBlock:", v72);

    objc_msgSend(v4, "shelfPluginPayload");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v26 = v25;
    else
      v26 = 0;
    v27 = v26;
    v28 = v27;
    if (v27)
    {
      objc_msgSend(v27, "mediaObjectFromPayload");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      if (v29 || (objc_msgSend(v4, "shelfMediaObject"), (v29 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
      {
        dispatch_group_enter(v23);
        objc_msgSend(v29, "fileURL");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v67[0] = MEMORY[0x1E0C809B0];
        v67[1] = 3221225472;
        v67[2] = __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke_5;
        v67[3] = &unk_1E274D160;
        v68 = v48;
        v69 = v29;
        v70 = v24;
        v71 = v23;
        v31 = v29;
        objc_msgSend(v50, "isSensitiveContent:withChatID:completionHandler:", v30, v49, v67);

      }
      else
      {
        objc_msgSend(v28, "__ck_photoCompositionMediaObjects");
        v31 = (id)objc_claimAutoreleasedReturnValue();
        v63 = 0u;
        v64 = 0u;
        v65 = 0u;
        v66 = 0u;
        v38 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v63, v84, 16);
        if (v38)
        {
          v39 = v38;
          v44 = v4;
          v40 = *(_QWORD *)v64;
          do
          {
            for (i = 0; i != v39; ++i)
            {
              if (*(_QWORD *)v64 != v40)
                objc_enumerationMutation(v31);
              v42 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * i);
              dispatch_group_enter(v23);
              objc_msgSend(v42, "fileURL");
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              v58[0] = MEMORY[0x1E0C809B0];
              v58[1] = 3221225472;
              v58[2] = __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke_6;
              v58[3] = &unk_1E274D160;
              v59 = v48;
              v60 = v42;
              v61 = v24;
              v62 = v23;
              objc_msgSend(v50, "isSensitiveContent:withChatID:completionHandler:", v43, v49, v58);

            }
            v39 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v63, v84, 16);
          }
          while (v39);
          v4 = v44;
        }
      }

    }
    dispatch_get_global_queue(25, 0);
    v32 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke_7;
    block[3] = &unk_1E274D1D8;
    v52 = v23;
    v53 = v48;
    v54 = v24;
    v55 = v4;
    v56 = v45;
    v57 = v46;
    v33 = v4;
    v34 = v45;
    v35 = v24;
    v36 = v48;
    v37 = v23;
    dispatch_async(v32, block);

    v4 = v33;
    v5 = v47;
  }

}

void __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v5 = a2;
  v6 = a3;
  objc_msgSend(v5, "fileURL");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    v8 = *(void **)(a1 + 40);
    objc_msgSend(v5, "fileURL");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke_2;
    v11[3] = &unk_1E274D110;
    v10 = *(_QWORD *)(a1 + 48);
    v12 = *(id *)(a1 + 56);
    v13 = v5;
    v14 = v6;
    v15 = *(id *)(a1 + 64);
    v16 = *(id *)(a1 + 32);
    objc_msgSend(v8, "isSensitiveContent:withChatID:completionHandler:", v9, v10, v11);

  }
}

void __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke_2(uint64_t a1, int a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "fileURL");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v4);

    if (*(_QWORD *)(a1 + 48))
      objc_msgSend(*(id *)(a1 + 56), "addObject:");
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke_3(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = a2;
  objc_msgSend(v3, "fileURL");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    v5 = *(void **)(a1 + 40);
    objc_msgSend(v3, "fileURL");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke_4;
    v8[3] = &unk_1E274D160;
    v7 = *(_QWORD *)(a1 + 48);
    v9 = *(id *)(a1 + 56);
    v10 = v3;
    v11 = *(id *)(a1 + 64);
    v12 = *(id *)(a1 + 32);
    objc_msgSend(v5, "isSensitiveContent:withChatID:completionHandler:", v6, v7, v8);

  }
}

void __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke_4(uint64_t a1, int a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "fileURL");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v4);

    objc_msgSend(*(id *)(a1 + 48), "addObject:", *(_QWORD *)(a1 + 40));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke_5(uint64_t a1, int a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "fileURL");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v4);

    objc_msgSend(*(id *)(a1 + 48), "addObject:", *(_QWORD *)(a1 + 40));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke_6(uint64_t a1, int a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "fileURL");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v4);

    objc_msgSend(*(id *)(a1 + 48), "addObject:", *(_QWORD *)(a1 + 40));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke_7(uint64_t a1)
{
  NSObject *v2;
  dispatch_time_t v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  _QWORD block[4];
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint8_t buf[16];

  v2 = *(NSObject **)(a1 + 32);
  v3 = dispatch_time(0, 5000000000);
  if (dispatch_group_wait(v2, v3) && IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v4, OS_LOG_TYPE_INFO, "Timed out waiting for media analysis to complete.", buf, 2u);
    }

  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke_858;
  block[3] = &unk_1E274D1B0;
  v8 = *(id *)(a1 + 40);
  v9 = *(id *)(a1 + 48);
  v10 = *(id *)(a1 + 56);
  v5 = *(id *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v11 = v5;
  v12 = v6;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

void __62__CKChatController_checkForSensitivePhotosAndSendComposition___block_invoke_858(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  if (objc_msgSend(a1[4], "count") || objc_msgSend(a1[5], "count"))
  {
    objc_msgSend(a1[6], "compositionWithExpressiveSendStyleID:", &stru_1E276D870);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    +[CKiOSCommSafetySendContext contextWithComposition:sensitiveMediaObjects:identifiersOfShelvedImages:](CKiOSCommSafetySendContext, "contextWithComposition:sensitiveMediaObjects:identifiersOfShelvedImages:");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    CKCommSafetyReceiveContextDictionary(v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(a1[8], "effectPickerIsPresented"))
      objc_msgSend(a1[8], "dismissEffectPickerAnimated:", 1);
    objc_msgSend(getUSUIInterventionViewControllerClass(), "viewControllerWithWorkflow:contextDictionary:", 1, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setInterventionDelegate:", a1[8]);
    v5 = a1[8];
    v6 = (void *)v5[176];
    v5[176] = v4;
    v7 = v4;

    objc_msgSend(a1[8], "presentViewController:animated:completion:", v7, 1, 0);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D397D8], "sharedInstance");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "logPrivatizedImageSentEvent:", 0);

    objc_msgSend(a1[8], "sendComposition:", a1[6]);
  }
}

- (void)presentCommSafetyInterventionIfNecessaryForFileURL:(id)a3 withSendContext:(id)a4 completion:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  id v17;
  CKChatController *v18;
  id v19;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  objc_msgSend(MEMORY[0x1E0D397A0], "sharedManager");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v11, "checksForSensitivityOnSend"))
  {
    objc_msgSend(MEMORY[0x1E0D39798], "sharedManager");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKCoreChatController conversation](self, "conversation");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "chat");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "chatIdentifier");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __98__CKChatController_presentCommSafetyInterventionIfNecessaryForFileURL_withSendContext_completion___block_invoke;
    v16[3] = &unk_1E274D228;
    v17 = v9;
    v18 = self;
    v19 = v10;
    objc_msgSend(v12, "isSensitiveContent:withChatID:completionHandler:", v8, v15, v16);

  }
  else
  {
    (*((void (**)(id, _QWORD))v10 + 2))(v10, 0);
  }

}

void __98__CKChatController_presentCommSafetyInterventionIfNecessaryForFileURL_withSendContext_completion___block_invoke(uint64_t a1, char a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  id v9;
  char v10;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __98__CKChatController_presentCommSafetyInterventionIfNecessaryForFileURL_withSendContext_completion___block_invoke_2;
  v6[3] = &unk_1E274D200;
  v10 = a2;
  v3 = *(id *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(a1 + 48);
  v7 = v3;
  v8 = v4;
  v9 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], v6);

}

void __98__CKChatController_presentCommSafetyInterventionIfNecessaryForFileURL_withSendContext_completion___block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;

  if (*(_BYTE *)(a1 + 56))
  {
    CKCommSafetyReceiveContextDictionary(*(void **)(a1 + 32));
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(getUSUIInterventionViewControllerClass(), "viewControllerWithWorkflow:contextDictionary:", 1, v6);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setInterventionDelegate:", *(_QWORD *)(a1 + 40));
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(v3 + 1408);
    *(_QWORD *)(v3 + 1408) = v2;
    v5 = v2;

    objc_msgSend(*(id *)(a1 + 40), "presentViewController:animated:completion:", v5, 1, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

- (void)setPreferredAudioMessageAppLaunchBehaviorForComposition:(id)a3
{
  void *v4;
  char v5;
  _BOOL4 v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;

  v11 = a3;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isAudioMessagesEntryViewRecordingEnabled");

  if ((v5 & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v6 = -[CKChatController audioMessageWasPlayedAndIsLatestMessage](self, "audioMessageWasPlayedAndIsLatestMessage");
      -[CKCoreChatController conversation](self, "conversation");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "chat");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = v8;
      if (v6)
      {
        v10 = 0;
LABEL_7:
        objc_msgSend(v8, "setPrefersTextResponseToIncomingAudioMessages:", v10);

        goto LABEL_8;
      }
    }
    else
    {
      -[CKCoreChatController conversation](self, "conversation");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "chat");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = v8;
    }
    v10 = 1;
    goto LABEL_7;
  }
LABEL_8:

}

- (void)_handleDictationStarted:(id)a3
{
  void *v4;
  int v5;

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isAudioMessagesEntryViewRecordingEnabled");

  if (v5)
    -[CKChatController setShouldShowAudioButtonInEntryView:](self, "setShouldShowAudioButtonInEntryView:", 0);
  -[CKChatController _updateEntryViewFrameIfNeeded:](self, "_updateEntryViewFrameIfNeeded:", 1);
}

- (void)_handleDictationEnded:(id)a3
{
  -[CKChatController _updateEntryViewFrameIfNeeded:](self, "_updateEntryViewFrameIfNeeded:", 1);
}

- (void)setShouldShowAudioButtonInEntryView:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  int v6;
  void *v7;
  id v8;

  v3 = a3;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isAudioMessagesEntryViewRecordingEnabled");

  if (v6)
  {
    -[CKCoreChatController conversation](self, "conversation");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "chat");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setShouldShowAudioButtonInEntryView:", v3);

  }
}

- (void)sendCompositionIfAllowed:(id)a3
{
  void *v4;
  char v5;
  void *v6;
  int v7;
  id v8;

  v8 = a3;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isAudioMessagesEntryViewRecordingEnabled");

  if ((v5 & 1) == 0)
    -[CKChatController setPreferredAudioMessageAppLaunchBehaviorForComposition:](self, "setPreferredAudioMessageAppLaunchBehaviorForComposition:", v8);
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isAudioMessagesEntryViewRecordingEnabled");

  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      -[CKChatController setShouldShowAudioButtonInEntryView:](self, "setShouldShowAudioButtonInEntryView:", 1);
  }
  -[CKChatController checkForSensitivePhotosAndSendComposition:](self, "checkForSensitivePhotosAndSendComposition:", v8);

}

- (void)didConfirmForInterventionViewController:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;

  v4 = a3;
  objc_msgSend(v4, "contextDictionary");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", CFSTR("CKCommSafetyContextKeyiOSSend"));
  v20 = (id)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v20;
  else
    v6 = 0;
  v7 = v6;
  objc_msgSend(v4, "contextDictionary");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKey:", CFSTR("CKCommSafetyContextKeyStickerDropSend"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = v9;
  else
    v10 = 0;
  v11 = v10;
  objc_msgSend(v4, "contextDictionary");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "objectForKey:", CFSTR("CKCommSafetyContextKeyAutomaticallyPlacedStickerSend"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v14 = v13;
  else
    v14 = 0;
  v15 = v14;
  objc_msgSend(v4, "contextDictionary");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v16, "objectForKey:", CFSTR("CKCommSafetyContextKeyStickerTapbackSend"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v18 = v17;
  else
    v18 = 0;
  v19 = v18;
  -[CKChatController _dismissInterventionController](self, "_dismissInterventionController");
  if (v7)
  {
    -[CKChatController handleiOSConfirmCommSafetySendContext:](self, "handleiOSConfirmCommSafetySendContext:", v7);
  }
  else if (v11)
  {
    -[CKChatController handleStickerDropConfirmCommSafetySendContext:](self, "handleStickerDropConfirmCommSafetySendContext:", v11);
  }
  else if (v19)
  {
    -[CKChatController handleStickerTapbackConfirmCommSafetySendContext:](self, "handleStickerTapbackConfirmCommSafetySendContext:", v19);
  }
  else if (v15)
  {
    -[CKChatController handleAutomaticallyPlacedStickerCommSafetySendContext:](self, "handleAutomaticallyPlacedStickerCommSafetySendContext:", v15);
  }

}

- (void)handleiOSConfirmCommSafetySendContext:(id)a3
{
  id v4;

  objc_msgSend(a3, "composition");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CKChatController sendComposition:](self, "sendComposition:", v4);

}

- (void)handleStickerTapbackConfirmCommSafetySendContext:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  objc_msgSend(v4, "stickerTapback");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "parentMessagePartChatItem");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKCoreChatController chat](self, "chat");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "sendTapback:forChatItem:", v7, v5);

}

- (void)handleAutomaticallyPlacedStickerCommSafetySendContext:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  id v17;

  v4 = a3;
  objc_msgSend(v4, "sticker");
  v17 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stickerReactionSession");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "chatItem");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "parentChatItem");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stickerFrame");
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  objc_msgSend(v4, "animationCompletionHandler");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKChatController _sendAutomaticallyPlacedSticker:stickerReactionSession:forChatItem:forParentChatItem:stickerFrame:animationCompletionHandler:](self, "_sendAutomaticallyPlacedSticker:stickerReactionSession:forChatItem:forParentChatItem:stickerFrame:animationCompletionHandler:", v17, v5, v6, v7, v16, v9, v11, v13, v15);
}

- (void)didRejectForInterventionViewController:(id)a3
{
  void *v4;

  objc_msgSend(a3, "contextDictionary");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _clearStagedSensitiveContentUsingContextDictionary:](self, "_clearStagedSensitiveContentUsingContextDictionary:", v4);

  -[CKChatController _dismissInterventionController](self, "_dismissInterventionController");
}

- (void)_clearStagedSensitiveContentUsingContextDictionary:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  CKComposition *v24;
  id v25;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "objectForKey:", CFSTR("CKCommSafetyContextKeyiOSSend"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "composition");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "sensitiveMediaObjects");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "identifiersOfShelvedImages");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "count"))
  {
    objc_msgSend(v6, "compositionByRemovingMediaObjects:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "shelfPluginPayload");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      objc_msgSend(v6, "shelfMediaObject");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v7, "containsObject:", v11);

      if (v12)
      {
        v24 = [CKComposition alloc];
        objc_msgSend(v9, "text");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "subject");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "bizIntent");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "proofreadingInfo");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = -[CKComposition initWithText:subject:shelfPluginPayload:bizIntent:shelfMediaObject:proofreadingInfo:](v24, "initWithText:subject:shelfPluginPayload:bizIntent:shelfMediaObject:proofreadingInfo:", v13, v23, 0, v14, 0, v15);
        v25 = v4;
        v17 = (void *)v16;

        v9 = v17;
        v4 = v25;
      }
    }
    -[CKChatController setComposition:](self, "setComposition:", v9);

  }
  -[CKCoreChatController inputController](self, "inputController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "requestPhotoBrowserToUnstageImages:", v8);

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      -[CKCoreChatController conversation](self, "conversation");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "chat");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "chatIdentifier");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v27 = v6;
      v28 = 2112;
      v29 = v22;
      _os_log_impl(&dword_18DFCD000, v19, OS_LOG_TYPE_INFO, "Not sending composition %@ for chat %@ since composition flagged as sensitive and user clicked Don't Send", buf, 0x16u);

    }
  }

}

- (void)_dismissInterventionController
{
  SCUIInterventionViewController *commSafetyInterventionController;

  -[SCUIInterventionViewController dismissModalViewControllerWithTransition:](self->_commSafetyInterventionController, "dismissModalViewControllerWithTransition:", 9);
  commSafetyInterventionController = self->_commSafetyInterventionController;
  self->_commSafetyInterventionController = 0;

}

- (id)mediaObjectsFromComposition:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  v3 = a3;
  objc_msgSend(v3, "mediaObjects");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "mutableCopy");

  objc_msgSend(v3, "shelfPluginPayload");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7;
  v9 = v8;
  if (v8)
  {
    if (objc_msgSend(v8, "payloadCollaborationType") == 1
      && objc_msgSend(v9, "sendAsCopy")
      && (objc_msgSend(v3, "shelfMediaObject"), v10 = (void *)objc_claimAutoreleasedReturnValue(),
                                                v10,
                                                v10))
    {
      objc_msgSend(v3, "shelfMediaObject");
      v11 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(v9, "mediaObjectFromPayload");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v12)
      {
        objc_msgSend(v9, "__ck_photoCompositionMediaObjects");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v13, "count"))
          objc_msgSend(v5, "addObjectsFromArray:", v13);
        goto LABEL_15;
      }
      objc_msgSend(v9, "mediaObjectFromPayload");
      v11 = objc_claimAutoreleasedReturnValue();
    }
    v13 = (void *)v11;
    if (v11)
    {
      objc_msgSend(v5, "addObject:", v11);
LABEL_15:

    }
  }
  v14 = (void *)objc_msgSend(v5, "copy");

  return v14;
}

- (void)flagSensitiveMediaObjects:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  BOOL v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  CKChatController *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  id obj;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0D397A0], "sharedManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "checksForSensitivityOnSend"))
  {
    v37 = v5;
    v38 = v4;
    -[CKChatController mediaObjectsFromComposition:](self, "mediaObjectsFromComposition:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(MEMORY[0x1E0D39798], "sharedManager");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = self;
    -[CKCoreChatController conversation](self, "conversation");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "chat");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "chatIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    obj = v6;
    v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v43;
      do
      {
        v14 = 0;
        v40 = v12;
        do
        {
          if (*(_QWORD *)v43 != v13)
            objc_enumerationMutation(obj);
          v15 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * v14);
          objc_msgSend(v15, "transfer");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "fileURL");
          v17 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v7, "cachedResultForContentAttachment:withChatID:", v17, v10);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "transfer");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "guid");
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          if (v18)
            v21 = v20 == 0;
          else
            v21 = 1;
          if (!v21)
          {
            v22 = v10;
            v23 = v7;
            if (objc_msgSend(v18, "BOOLValue"))
            {
              objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:", v17);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              if (v24)
              {
                v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D357D8]), "initWithIdentifier:imageData:", v20, v24);
                objc_msgSend(v39, "addObject:", v25);

              }
            }
            if (objc_msgSend(v18, "BOOLValue"))
              v26 = 2;
            else
              v26 = 0;
            objc_msgSend(MEMORY[0x1E0D35820], "sharedInstance");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v27, "transferForGUID:", v20);
            v28 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v28, "setCommSafetySensitive:", v26);
            v7 = v23;
            v10 = v22;
            v12 = v40;
          }

          ++v14;
        }
        while (v12 != v14);
        v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
      }
      while (v12);
    }

    if (objc_msgSend(v39, "count"))
    {
      v29 = (void *)MEMORY[0x1E0D357D0];
      -[CKCoreChatController conversation](v36, "conversation");
      v30 = v7;
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "chat");
      v32 = v10;
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "localTypingMessageGUID");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKCoreChatController chat](v36, "chat");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "registerEvent:eventType:messageGUID:chat:forImages:", 0, 0, v34, v35, v39);

      v10 = v32;
      v7 = v30;
    }

    v5 = v37;
    v4 = v38;
  }

}

- (void)messageEntryViewDidChange:(id)a3 isTextChange:(BOOL)a4 isShelfChange:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  void *v14;
  int v15;
  int v16;
  _BOOL8 v17;
  void *v18;
  char v19;
  void *v20;
  int v21;
  int v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  CKTranscriptScrollIntentEntryViewChangedTrigger *v27;
  BOOL v28;
  id v29;

  v5 = a5;
  v6 = a4;
  v29 = a3;
  -[CKChatController typingUpdater](self, "typingUpdater");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setNeedsUpdate");

  if (!-[CKChatController isAnimatingMessageSend](self, "isAnimatingMessageSend"))
    goto LABEL_3;
  objc_msgSend(v29, "contentView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "textView");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "text");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "length");

  if (v12)
  {
LABEL_3:
    v13 = objc_msgSend(v29, "isShowingAudioRecordingView");
    objc_msgSend(MEMORY[0x1E0D39840], "sharedInstance");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "isSendMenuEnabled");

    v16 = CKIsRunningInMacCatalyst();
    v17 = -[CKChatController hasFinishedRestoringDraftState](self, "hasFinishedRestoringDraftState")
       || CKIsRunningInMessagesViewService() != 0;
    -[CKCoreChatController delegate](self, "delegate");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_opt_respondsToSelector();

    if ((v19 & 1) != 0)
    {
      -[CKCoreChatController delegate](self, "delegate");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "hasDetailsNavigationController");

      if (!v5)
        goto LABEL_8;
    }
    else
    {
      v21 = 0;
      if (!v5)
      {
LABEL_8:
        if ((v13 | v21) == 1)
          goto LABEL_16;
        goto LABEL_15;
      }
    }
    if (v16)
      v22 = 0;
    else
      v22 = v15;
    if (((v22 | v13 | v21) & 1) != 0)
      goto LABEL_16;
LABEL_15:
    v17 = 0;
LABEL_16:
    -[CKChatController _updateEntryViewFrameIfNeeded:](self, "_updateEntryViewFrameIfNeeded:", v17);
  }
  -[CKCoreChatController _updateTitleAnimated:](self, "_updateTitleAnimated:", 1);
  if (-[CKScrollViewController isKeyboardVisible](self, "isKeyboardVisible"))
  {
    -[CKChatController entryView](self, "entryView");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "composition");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v24, "hasContent"))
    {
LABEL_21:

      goto LABEL_22;
    }
    -[CKChatController entryView](self, "entryView");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v25, "animatingLayoutChange"))
    {

      goto LABEL_21;
    }
    v28 = -[CKChatController isShowingEmojiKeyboard](self, "isShowingEmojiKeyboard");

    if (!v28)
      -[CKChatController updateAppStripVisibility:animated:](self, "updateAppStripVisibility:animated:", 1, 1);
  }
LABEL_22:
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = -[CKTranscriptScrollIntentEntryViewChangedTrigger initWithEntryView:isTextChange:isShelfChange:isSendLaterPluginChange:]([CKTranscriptScrollIntentEntryViewChangedTrigger alloc], "initWithEntryView:isTextChange:isShelfChange:isSendLaterPluginChange:", v29, v6, v5, 0);
  objc_msgSend(v26, "updateScrollIntentWithTrigger:", v27);

}

- (void)messageEntryViewRecordingDidChange:(id)a3
{
  void *v4;
  id v5;

  objc_msgSend(MEMORY[0x1E0CEABB8], "attemptRotationToDeviceOrientation", a3);
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stopPlayingAudio");

  -[CKChatController typingUpdater](self, "typingUpdater");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setNeedsUpdate");

}

- (id)inputContextHistoryForMessageEntryView:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint8_t v9[16];

  -[CKCoreChatController conversation](self, "conversation", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "isKnownSender") & 1) != 0)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "inputContextHistory");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "Not providing input context history because conversation is with an unknown sender.", v9, 2u);
    }

    v6 = 0;
  }

  return v6;
}

- (BOOL)messageEntryViewShouldBeginEditing:(id)a3
{
  void *v4;
  int v5;

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isEmojiTapbacksEnabled");

  if (v5)
    return !-[CKChatController isFullScreenBalloonViewOnScreen](self, "isFullScreenBalloonViewOnScreen");
  else
    return 1;
}

- (BOOL)_transcriptScrollsOnEntryViewActivation
{
  void *v2;
  unint64_t v3;

  -[CKChatController collectionView](self, "collectionView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "transcriptScrollIntent");

  if (CKIsRunningInMacCatalyst()
    || objc_msgSend(MEMORY[0x1E0CEA6C8], "isInHardwareKeyboardMode"))
  {
    return !v3 || v3 == 6;
  }
  else if (v3 <= 6)
  {
    return (0x47u >> v3) & 1;
  }
  else
  {
    return 0;
  }
}

- (void)messageEntryViewDidBeginEditing:(id)a3
{
  void *v4;

  if (-[CKChatController _wantsThreeColumnLayout](self, "_wantsThreeColumnLayout", a3)
    && !CKIsRunningInMacCatalyst())
  {
    -[CKChatController splitViewController](self, "splitViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "hideColumn:", 0);

  }
  -[CKChatController registerForTextInputPayloadHandling](self, "registerForTextInputPayloadHandling");
}

- (void)messageEntryViewDidBeginEditingNotAlreadyActive:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  CKTranscriptScrollIntentEntryViewActiveTrigger *v7;
  void *v8;
  void *v9;
  uint8_t v10[16];

  v4 = a3;
  if (-[CKChatController targetFirstResponder](self, "targetFirstResponder") == 1)
    -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 0);
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "Learned messageEntryViewDidBeginEditingNotAlreadyActive, updating scrollIntent.", v10, 2u);
    }

  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CKTranscriptScrollIntentEntryViewActiveTrigger initWithChatController:]([CKTranscriptScrollIntentEntryViewActiveTrigger alloc], "initWithChatController:", self);
  objc_msgSend(v6, "updateScrollIntentWithTrigger:", v7);

  -[CKChatController updateAppStripVisibility:animated:](self, "updateAppStripVisibility:animated:", 1, 0);
  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8
    || -[CKChatController entryViewWasActiveOnContextMenuPresentation](self, "entryViewWasActiveOnContextMenuPresentation"))
  {

  }
  else if (!CKIsRunningInMessagesTranscriptExtension())
  {
    -[CKChatController setupScrollingForKeyboardInteraction](self, "setupScrollingForKeyboardInteraction");
  }
  -[CKChatController setEntryViewWasActiveOnContextMenuPresentation:](self, "setEntryViewWasActiveOnContextMenuPresentation:", 0);
  -[CKChatController _setAvoidanceInsetsNeedsUpdate](self, "_setAvoidanceInsetsNeedsUpdate");
  if (CKIsRunningInMacCatalyst())
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "deselectAllBalloons");

  }
}

- (BOOL)messageEntryView:(id)a3 shouldInsertMediaObjects:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v6 = a4;
  v7 = a3;
  -[CKCoreChatController conversation](self, "conversation");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "composition");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "compositionByAppendingMediaObjects:", v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  LOBYTE(v6) = objc_msgSend(v8, "canSendComposition:error:", v10, 0);
  return (char)v6;
}

- (void)messageEntryView:(id)a3 didInsertPluginPayload:(id)a4
{
  void *v5;
  void *v6;
  int v7;
  void *v8;
  id v9;

  objc_msgSend(a4, "pluginBundleID", a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  IMBalloonExtensionIDWithSuffix();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "isEqualToString:", v6);

  if (CKIsRunningInMacCatalyst())
  {
    if (v7)
    {
      -[CKChatController viewControllerForChatInputModalPresentation](self, "viewControllerForChatInputModalPresentation");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "dismissViewControllerAnimated:completion:", 1, 0);

      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v9 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "postNotificationName:object:", CFSTR("CKAnimojiStickerPopoverWillHide"), 0);

    }
  }
}

- (void)messageEntryViewSendButtonHit:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];

  v4 = a3;
  -[CKChatController effectPickerWindow](self, "effectPickerWindow");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v5)
  {
    if (CKIsRunningInMacCatalyst())
    {
      -[CKChatController viewControllerForChatInputModalPresentation](self, "viewControllerForChatInputModalPresentation");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "dismissViewControllerAnimated:completion:", 1, 0);

    }
    +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "dismissViewControllerAnimated:completion:", 1, 0);

    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __50__CKChatController_messageEntryViewSendButtonHit___block_invoke;
    v8[3] = &unk_1E274C848;
    v8[4] = self;
    objc_msgSend(v4, "compositionWithAcceptedAutocorrection:", v8);
  }

}

uint64_t __50__CKChatController_messageEntryViewSendButtonHit___block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "selectAccountAndSendComposition:completion:", a2, 0);
}

- (void)selectAccountAndSendComposition:(id)a3 completion:(id)a4
{
  id v6;
  void *v7;
  char v8;
  id v9;

  v9 = a3;
  v6 = a4;
  -[CKCoreChatController chat](self, "chat");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isStewieChat");

  if ((v8 & 1) != 0 || !IMSharedHelperDeviceHasMultipleSubscriptions())
    -[CKChatController _validateAndSendComposition:completion:](self, "_validateAndSendComposition:completion:", v9, v6);
  else
    -[CKChatController presentActionMenuForAccountSelection:completion:](self, "presentActionMenuForAccountSelection:completion:", v9, v6);

}

- (void)messageEntryViewPopulatePreviousSentMessage:(id)a3
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  CKComposition *v20;
  void *v21;
  void *v22;
  CKComposition *v23;
  void *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  -[CKCoreChatController collectionViewController](self, "collectionViewController", a3);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "chatItems");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController lastPopulatedMessageGuidFromMe](self, "lastPopulatedMessageGuidFromMe");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5 == 0;

  if (!v5)
  {
    -[CKChatController entryView](self, "entryView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "composition");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController setOriginalComposition:](self, "setOriginalComposition:", v8);

  }
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  objc_msgSend(v4, "reverseObjectEnumerator", v4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v27;
    while (2)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v27 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v14, "IMChatItem");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v15, "isFromMe"))
          {
            objc_msgSend(v15, "guid");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            if ((v6 & 1) != 0)
            {
              -[CKChatController setLastPopulatedMessageGuidFromMe:](self, "setLastPopulatedMessageGuidFromMe:", v16);
              v18 = v14;
              -[CKChatController entryView](self, "entryView");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              v20 = [CKComposition alloc];
              objc_msgSend(v18, "text");
              v21 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18, "subject");
              v22 = (void *)objc_claimAutoreleasedReturnValue();

              v23 = -[CKComposition initWithText:subject:shelfPluginPayload:](v20, "initWithText:subject:shelfPluginPayload:", v21, v22, 0);
              objc_msgSend(v19, "setComposition:", v23);

              goto LABEL_17;
            }
            -[CKChatController lastPopulatedMessageGuidFromMe](self, "lastPopulatedMessageGuidFromMe");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v6 = objc_msgSend(v16, "isEqualToString:", v17);

          }
        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      if (v11)
        continue;
      break;
    }
  }
LABEL_17:

}

- (void)messageEntryViewPopulateNextSentMessage:(id)a3
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  CKComposition *v20;
  void *v21;
  void *v22;
  CKComposition *v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  -[CKChatController lastPopulatedMessageGuidFromMe](self, "lastPopulatedMessageGuidFromMe", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "chatItems");
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    if (v6)
    {
      v7 = v6;
      v8 = 0;
      v9 = *(_QWORD *)v26;
      while (2)
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v26 != v9)
            objc_enumerationMutation(v5);
          v11 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(v11, "IMChatItem");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v12, "isFromMe"))
            {
              objc_msgSend(v12, "guid");
              v13 = (void *)objc_claimAutoreleasedReturnValue();
              if ((v8 & 1) != 0)
              {
                -[CKChatController setLastPopulatedMessageGuidFromMe:](self, "setLastPopulatedMessageGuidFromMe:", v13);
                v18 = v11;
                -[CKChatController entryView](self, "entryView");
                v19 = (void *)objc_claimAutoreleasedReturnValue();
                v20 = [CKComposition alloc];
                objc_msgSend(v18, "text");
                v21 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v18, "subject");
                v22 = (void *)objc_claimAutoreleasedReturnValue();

                v23 = -[CKComposition initWithText:subject:shelfPluginPayload:](v20, "initWithText:subject:shelfPluginPayload:", v21, v22, 0);
                objc_msgSend(v19, "setComposition:", v23);

                return;
              }
              -[CKChatController lastPopulatedMessageGuidFromMe](self, "lastPopulatedMessageGuidFromMe");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              v8 = objc_msgSend(v13, "isEqualToString:", v14);

            }
          }
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
        if (v7)
          continue;
        break;
      }
    }

  }
  -[CKChatController setLastPopulatedMessageGuidFromMe:](self, "setLastPopulatedMessageGuidFromMe:", 0);
  -[CKChatController originalComposition](self, "originalComposition");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    -[CKChatController entryView](self, "entryView");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController originalComposition](self, "originalComposition");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "setComposition:", v17);

    -[CKChatController setOriginalComposition:](self, "setOriginalComposition:", 0);
  }
}

- (void)_passKitUIDismissed:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  _QWORD block[5];
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = (void *)MEMORY[0x1E0CB37E8];
      +[CKPluginExtensionStateObserver sharedInstance](CKPluginExtensionStateObserver, "sharedInstance");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "numberWithBool:", objc_msgSend(v7, "passKitUIPresented"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController deferredSendAnimationBlock](self, "deferredSendAnimationBlock");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = _Block_copy(v9);
      *(_DWORD *)buf = 138412546;
      v17 = v8;
      v18 = 2112;
      v19 = v10;
      _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "passKit UI dismissed. PassKitUIPresented %@. sendAnimationBlock %@", buf, 0x16u);

    }
  }
  -[CKChatController deferredSendAnimationBlock](self, "deferredSendAnimationBlock");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    +[CKPluginExtensionStateObserver sharedInstance](CKPluginExtensionStateObserver, "sharedInstance");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "passKitUIPresented");

    if ((v13 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "removeObserver:name:object:", self, CFSTR("CKPluginExtensionStateObserverPassKitUIDismissed"), 0);

      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __40__CKChatController__passKitUIDismissed___block_invoke;
      block[3] = &unk_1E274A208;
      block[4] = self;
      dispatch_async(MEMORY[0x1E0C80D38], block);
    }
  }

}

uint64_t __40__CKChatController__passKitUIDismissed___block_invoke(uint64_t a1)
{
  void (**v2)(void);

  objc_msgSend(*(id *)(a1 + 32), "deferredSendAnimationBlock");
  v2 = (void (**)(void))objc_claimAutoreleasedReturnValue();
  v2[2]();

  return objc_msgSend(*(id *)(a1 + 32), "setDeferredSendAnimationBlock:", 0);
}

- (void)messageEntryViewPlusButtonHit:(id)a3
{
  NSObject *v4;
  uint8_t v5[16];

  IMLogHandleForCategory();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_18DFCD000, v4, OS_LOG_TYPE_INFO, "Plus button hit", v5, 2u);
  }

  -[CKChatController _beginDeferringSystemNavigationPopGestureForPlusButton](self, "_beginDeferringSystemNavigationPopGestureForPlusButton");
}

- (unint64_t)preferredScreenEdgesDeferringSystemGestures
{
  unint64_t result;
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)CKChatController;
  result = -[CKChatController preferredScreenEdgesDeferringSystemGestures](&v4, sel_preferredScreenEdgesDeferringSystemGestures);
  if (self->_deferSystemNavigationPopGestureForPlusButton)
    result |= 2uLL;
  return result;
}

- (void)_beginDeferringSystemNavigationPopGestureForPlusButton
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint8_t v7[16];

  if (!self->_deferSystemNavigationPopGestureForPlusButton)
  {
    IMLogHandleForCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "Began deferring system navigation pop gesture for PlusButton", v7, 2u);
    }

    self->_deferSystemNavigationPopGestureForPlusButton = 1;
    -[CKChatController navigationController](self, "navigationController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "interactivePopGestureRecognizer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setDelaysTouchesBegan:", 0);

    -[CKChatController setNeedsUpdateOfScreenEdgesDeferringSystemGestures](self, "setNeedsUpdateOfScreenEdgesDeferringSystemGestures");
    -[CKCoreChatController delegate](self, "delegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "chatControllerDidChangeDeferringSystemNavigationPopGestureForPlusButton:", self);

  }
}

- (void)_endDeferringSystemNavigationPopGestureForPlusButton
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint8_t v7[16];

  if (self->_deferSystemNavigationPopGestureForPlusButton)
  {
    IMLogHandleForCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "Ended deferring system navigation pop gesture for PlusButton", v7, 2u);
    }

    self->_deferSystemNavigationPopGestureForPlusButton = 0;
    -[CKChatController navigationController](self, "navigationController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "interactivePopGestureRecognizer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setDelaysTouchesBegan:", 1);

    -[CKChatController setNeedsUpdateOfScreenEdgesDeferringSystemGestures](self, "setNeedsUpdateOfScreenEdgesDeferringSystemGestures");
    -[CKCoreChatController delegate](self, "delegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "chatControllerDidChangeDeferringSystemNavigationPopGestureForPlusButton:", self);

  }
}

- (CGSize)messageEntryViewMaxShelfPluginViewSize:(id)a3
{
  double v3;
  double v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  CGSize result;

  -[CKChatController balloonMaxWidth](self, "balloonMaxWidth", a3);
  v4 = v3;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "maxTranscriptPortraitHeight");
  v7 = v6;

  v8 = v4;
  v9 = v7;
  result.height = v9;
  result.width = v8;
  return result;
}

- (BOOL)messageEntryViewWidth:(double *)a3 andOffset:(double *)a4
{
  BOOL v4;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  void *v21;
  void *v22;
  double v23;
  void *v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  void *v29;
  double v30;
  double v31;
  void *v32;
  void *v33;
  double v34;
  double v35;
  void *v36;
  void *v37;
  double v38;
  void *v39;
  uint64_t v40;

  v4 = 0;
  if (a3 && a4)
  {
    -[CKChatController view](self, "view");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "window");
    v9 = objc_claimAutoreleasedReturnValue();
    v4 = v9 != 0;
    if (!v9)
    {
LABEL_24:

      return v4;
    }
    v10 = (void *)v9;
    -[CKChatController view](self, "view");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "superview");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      -[CKChatController splitViewController](self, "splitViewController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8)
      {
LABEL_6:
        v13 = 0.0;
        if (!-[CKChatController isCollapsed](self, "isCollapsed")
          && !objc_msgSend((id)*MEMORY[0x1E0CEB258], "userInterfaceLayoutDirection"))
        {
          if (-[CKChatController _wantsThreeColumnLayout](self, "_wantsThreeColumnLayout"))
          {
            objc_msgSend(v8, "viewControllerForColumn:", 2);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "view");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "bounds");
            v17 = v16;
            v19 = v18;

            objc_msgSend(v14, "view");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            -[CKChatController view](self, "view");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "window");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "convertPoint:toView:", v22, v17, v19);
            v13 = v23;

          }
          else
          {
            objc_msgSend(v8, "primaryColumnWidth");
            v28 = v27;
            if (CKPixelWidth_once_2 != -1)
              dispatch_once(&CKPixelWidth_once_2, &__block_literal_global_3336);
            v13 = v28 + *(double *)&CKPixelWidth_sPixel_2;
          }
        }
        goto LABEL_18;
      }
      -[CKChatController navigationController](self, "navigationController");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "presentingViewController");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "presentingViewController");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "splitViewController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v8, "isCollapsed"))
      {

        v8 = 0;
      }
      else if (v8)
      {
        goto LABEL_6;
      }
      v13 = 0.0;
LABEL_18:
      -[CKChatController view](self, "view");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "bounds");
      v31 = v30;
      -[CKChatController view](self, "view");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "window");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "bounds");
      v35 = v34;

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        if (v13 == 0.0 && v31 < v35)
        {
          -[CKChatController view](self, "view");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          -[CKChatController view](self, "view");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "origin");
          objc_msgSend(v36, "convertPoint:toView:", 0);
          v13 = v38;

        }
      }
      -[CKChatController view](self, "view");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "bounds");
      *(_QWORD *)a3 = v40;

      *a4 = v13;
      goto LABEL_24;
    }
    return 0;
  }
  return v4;
}

- (CGRect)messageEntryView:(id)a3 frameInThrowViewCoordinatesForView:(id)a4
{
  id v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  CGRect result;

  v5 = a4;
  -[CKChatController throwAnimationContainerSuperview:](self, "throwAnimationContainerSuperview:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bounds");
  objc_msgSend(v5, "convertRect:toView:", v6);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;

  v15 = v8;
  v16 = v10;
  v17 = v12;
  v18 = v14;
  result.size.height = v18;
  result.size.width = v17;
  result.origin.y = v16;
  result.origin.x = v15;
  return result;
}

- (void)openURLInExtensionContextForMode:(id)a3
{
  void *v3;
  id v4;

  -[CKChatController launchURLForMode:](self, "launchURLForMode:", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "openURL:options:completionHandler:", v4, MEMORY[0x1E0C9AA70], 0);

}

- (id)launchURLForMode:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v4 = a3;
  objc_msgSend(MEMORY[0x1E0D35798], "sharedRegistry");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "chat");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController entryView](self, "entryView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "composition");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "text");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "string");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "messagesURLWithChat:orHandles:withMessageText:", v7, 0, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", v12, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)MEMORY[0x1E0C99DE8];
  objc_msgSend(v13, "queryItems");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "arrayWithArray:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKChatController messageGUIDForTranscriptExtension](self, "messageGUIDForTranscriptExtension");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "length");

  if (v18)
  {
    v19 = (void *)MEMORY[0x1E0CB39D8];
    -[CKChatController messageGUIDForTranscriptExtension](self, "messageGUIDForTranscriptExtension");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "queryItemWithName:value:", CFSTR("message-guid"), v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "addObject:", v21);

  }
  objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("inputmode"), v4);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "addObject:", v22);

  objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("overlay"), CFSTR("1"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "addObject:", v23);

  objc_msgSend(v13, "setQueryItems:", v16);
  objc_msgSend(v13, "URL");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  return v24;
}

- (BOOL)shouldMessageEntryViewReportBrowserButtonHitToInputDelegate:(id)a3
{
  id v4;
  BOOL v5;
  void *v7;
  char v8;
  int v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  void *v13;
  char v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v4 = a3;
  if (CKIsRunningInMessagesTranscriptExtension())
  {
    -[CKChatController openURLInExtensionContextForMode:](self, "openURLInExtensionContextForMode:", CFSTR("apps"));
  }
  else
  {
    -[CKCoreChatController inputController](self, "inputController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isInputViewVisible");

    if ((v8 & 1) != 0)
    {
      v5 = 1;
      goto LABEL_4;
    }
    v9 = objc_msgSend(v4, "shouldShowAppStrip");
    v10 = v9 ^ 1u;
    CKSetShowAppStripInEntryView(v9 ^ 1);
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v11, "isAppStripInKeyboard"))
    {
      v12 = -[CKScrollViewController isKeyboardVisible](self, "isKeyboardVisible");

      if (v12)
      {
        -[CKCoreChatController inputController](self, "inputController");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "isInputViewVisible");

        if ((v14 & 1) == 0)
        {
          if (-[CKChatController isShowingEmojiKeyboard](self, "isShowingEmojiKeyboard"))
          {
            objc_msgSend(MEMORY[0x1E0CEA6F8], "sharedInputModeController");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CEA6F0], "keyboardInputModeWithIdentifier:", *MEMORY[0x1E0CEB8A8]);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "setCurrentInputMode:", v16);

            objc_msgSend(MEMORY[0x1E0CEA6F8], "sharedInputModeController");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            -[CKChatController savedKeyboardInputMode](self, "savedKeyboardInputMode");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "setCurrentInputMode:", v18);

            v10 = 1;
          }
          -[CKChatController updateAppStripVisibility:animated:](self, "updateAppStripVisibility:animated:", v10, 1);
        }
        goto LABEL_3;
      }
    }
    else
    {

    }
    objc_msgSend(v4, "setShowAppStrip:animated:completion:", v10, 0, 0);
    -[CKChatController _updateEntryViewFrameIfNeeded:](self, "_updateEntryViewFrameIfNeeded:", 1);
  }
LABEL_3:
  v5 = 0;
LABEL_4:

  return v5;
}

- (void)messageEntryView:(id)a3 shouldShowAppStrip:(BOOL)a4 animated:(BOOL)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  void *v8;
  char v9;
  id v10;

  v5 = a5;
  v6 = a4;
  v10 = a3;
  if (v6
    || (-[CKCoreChatController inputController](self, "inputController"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v9 = objc_msgSend(v8, "isInputViewVisible"),
        v8,
        (v9 & 1) == 0))
  {
    -[CKChatController updateAppStripVisibility:animated:](self, "updateAppStripVisibility:animated:", v6, v5);
  }

}

- (void)updateAppStripVisibility:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL8 v5;
  void *v7;
  int v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  BOOL v12;
  BOOL v13;
  id location;

  v4 = a4;
  v5 = a3;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isAppStripInKeyboard");

  if (v8 && (!v5 || CKShowAppStripInEntryView()))
  {
    location = 0;
    objc_initWeak(&location, self);
    -[CKChatController entryView](self, "entryView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __54__CKChatController_updateAppStripVisibility_animated___block_invoke;
    v10[3] = &unk_1E274D250;
    objc_copyWeak(&v11, &location);
    v12 = v5;
    v13 = v4;
    objc_msgSend(v9, "setShowAppStrip:animated:completion:", v5, v4, v10);

    objc_destroyWeak(&v11);
    objc_destroyWeak(&location);
  }
}

void __54__CKChatController_updateAppStripVisibility_animated___block_invoke(uint64_t a1, int a2)
{
  id WeakRetained;

  if (a2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "updateEntryViewHeightIncludingAppStrip:animated:", *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));

  }
}

- (void)contentInsetWillChange:(UIEdgeInsets)a3 withAnimationProperties:(id)a4
{
  objc_super v5;

  v5.receiver = self;
  v5.super_class = (Class)CKChatController;
  -[CKCoreChatController contentInsetWillChange:withAnimationProperties:](&v5, sel_contentInsetWillChange_withAnimationProperties_, a4, a3.top, a3.left, a3.bottom, a3.right);
  -[CKChatController setNextEntryViewSafeAreaInsetUpdateIsSynchronous:](self, "setNextEntryViewSafeAreaInsetUpdateIsSynchronous:", 1);
}

- (void)updateEntryViewHeightIncludingAppStrip:(BOOL)a3 isContentChange:(BOOL)a4 animated:(BOOL)a5 completionHandler:(id)a6
{
  _BOOL8 v6;
  _BOOL8 v7;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v20;

  v6 = a5;
  v7 = a4;
  v20 = a6;
  -[CKChatController view](self, "view");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "bounds");
  v11 = v10;

  -[CKChatController _maxEntryViewHeight](self, "_maxEntryViewHeight");
  v13 = v12;
  -[CKChatController entryView](self, "entryView");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "frame");
  v16 = v15;
  v18 = v17;

  if (v16 != v11 || v18 != v13)
    -[CKChatController _setEntryViewFrame:isContentChange:animated:completionHandler:](self, "_setEntryViewFrame:isContentChange:animated:completionHandler:", v7, v6, v20, *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), v11, v13);

}

- (void)updateEntryViewHeightIncludingAppStrip:(BOOL)a3 isContentChange:(BOOL)a4 animated:(BOOL)a5
{
  -[CKChatController updateEntryViewHeightIncludingAppStrip:isContentChange:animated:completionHandler:](self, "updateEntryViewHeightIncludingAppStrip:isContentChange:animated:completionHandler:", a3, a4, a5, &__block_literal_global_885);
}

- (void)updateEntryViewHeightIncludingAppStrip:(BOOL)a3 animated:(BOOL)a4
{
  -[CKChatController updateEntryViewHeightIncludingAppStrip:isContentChange:animated:](self, "updateEntryViewHeightIncludingAppStrip:isContentChange:animated:", a3, 1, a4);
}

- (void)messageEntryViewSwipeDownGestureRecognized:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  id v9;

  v9 = a3;
  if (CKIsRunningInMessages())
  {
    -[CKChatController inputViewController](self, "inputViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      -[CKCoreChatController inputController](self, "inputController");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "swipeDismissBrowser");

LABEL_5:
      -[CKChatController dismissKeyboard](self, "dismissKeyboard");
      goto LABEL_6;
    }
    objc_msgSend(v9, "contentView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "activeView");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isFirstResponder");

    if (v8)
      goto LABEL_5;
  }
LABEL_6:

}

- (void)updateTyping
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  -[CKChatController entryView](self, "entryView");
  v16 = (id)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v16, "isRecording"))
  {
    objc_msgSend(v16, "composition");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "shelfPluginPayload");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      objc_msgSend(v3, "pluginBundleID");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v5, "isEqualToIgnoringCase:", *MEMORY[0x1E0D375E0]))
      {

      }
      else
      {
        objc_msgSend(v3, "pluginBundleID");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        IMBalloonExtensionIDWithSuffix();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v6, "isEqualToIgnoringCase:", v7);

        if (!v8)
        {
          objc_msgSend(v16, "composition");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "shelfPluginPayload");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "pluginBundleID");
          v9 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v9 || (objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0D37588]) & 1) != 0)
            goto LABEL_9;
          objc_msgSend(MEMORY[0x1E0D35770], "sharedInstance");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "balloonPluginForBundleID:", v9);
          v10 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v10, "__ck_statusJPEGImageDataForTransportWithCompressionFactor:", 0.2);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          if (v14)
          {
            -[CKCoreChatController conversation](self, "conversation");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "setLocalUserIsComposing:typingIndicatorIcon:", v9, v14);

          }
LABEL_8:

LABEL_9:
          goto LABEL_10;
        }
      }
    }
    -[CKCoreChatController conversation](self, "conversation");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "composition");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setLocalUserIsTyping:", objc_msgSend(v10, "hasContent"));
    goto LABEL_8;
  }
  -[CKCoreChatController conversation](self, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setLocalUserIsRecording:", 1);
LABEL_10:

}

- (void)setEffectPickerIsPresented:(BOOL)a3
{
  _BOOL4 v3;
  void *v5;
  void *v6;
  id v7;

  if (((!self->_effectPickerIsPresented ^ a3) & 1) == 0)
  {
    v3 = a3;
    self->_effectPickerIsPresented = a3;
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    -[CKCoreChatController conversation](self, "conversation");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "chat");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      objc_msgSend(v7, "addContentAnimationPauseReasons:", 2);
      objc_msgSend(v6, "beginHoldingChatItemsUpdatesForReason:", *MEMORY[0x1E0D35378]);
    }
    else
    {
      objc_msgSend(v6, "endHoldingChatItemsUpdatesForReason:", *MEMORY[0x1E0D35378]);
      objc_msgSend(v7, "removeContentAnimationPauseReasons:", 2);
    }

  }
}

- (BOOL)gestureRecognizer:(id)a3 shouldRequireFailureOfGestureRecognizer:(id)a4
{
  id v5;
  id v6;
  char isKindOfClass;
  BOOL v8;

  v5 = a4;
  v6 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  v8 = 0;
  if ((isKindOfClass & 1) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v8 = 1;
  }

  return v8;
}

- (BOOL)gestureRecognizer:(id)a3 shouldReceiveTouch:(id)a4
{
  void *v5;
  char isKindOfClass;

  objc_msgSend(a4, "view", a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
    return 1;
  else
    return -[CKChatController isEditing](self, "isEditing") ^ 1;
}

- (BOOL)allowEffectPickerToBePresented
{
  void *v3;
  uint64_t v4;
  BOOL v5;
  void *v6;
  void *v7;
  void *v8;

  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4 == 1)
    return 1;
  -[CKChatController view](self, "view");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "window");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "windowScene");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (unint64_t)(objc_msgSend(v8, "interfaceOrientation") - 5) < 0xFFFFFFFFFFFFFFFELL;

  return v5;
}

- (CGRect)fullScreenBalloonViewControllerSafeAreaLayoutFrame:(id)a3
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  objc_super v26;
  CGRect result;

  v4 = a3;
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
  {
    -[CKChatController photosGridFullScreenBalloonViewControllerSafeAreaLayoutFrame:](self, "photosGridFullScreenBalloonViewControllerSafeAreaLayoutFrame:", v4);
    v6 = v5;
    v8 = v7;
    v10 = v9;
    v12 = v11;
  }
  else
  {
    v26.receiver = self;
    v26.super_class = (Class)CKChatController;
    -[CKCoreChatController fullScreenBalloonViewControllerSafeAreaLayoutFrame:](&v26, sel_fullScreenBalloonViewControllerSafeAreaLayoutFrame_, v4);
    v6 = v13;
    v8 = v14;
    v10 = v15;
    v17 = v16;

    -[CKChatController entryView](self, "entryView");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "bounds");
    v19 = v18;
    -[CKChatController view](self, "view");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "safeAreaInsets");
    v12 = v17 - (v19 - v21);

  }
  v22 = v6;
  v23 = v8;
  v24 = v10;
  v25 = v12;
  result.size.height = v25;
  result.size.width = v24;
  result.origin.y = v23;
  result.origin.x = v22;
  return result;
}

- (CGRect)fullScreenBalloonViewControllerSafeAreaLayoutFrameIgnoreEntryView:(id)a3
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  objc_super v17;
  CGRect result;

  v4 = a3;
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
  {
    -[CKChatController photosGridFullScreenBalloonViewControllerSafeAreaLayoutFrame:](self, "photosGridFullScreenBalloonViewControllerSafeAreaLayoutFrame:", v4);
  }
  else
  {
    v17.receiver = self;
    v17.super_class = (Class)CKChatController;
    -[CKCoreChatController fullScreenBalloonViewControllerSafeAreaLayoutFrame:](&v17, sel_fullScreenBalloonViewControllerSafeAreaLayoutFrame_, v4);
  }
  v9 = v5;
  v10 = v6;
  v11 = v7;
  v12 = v8;

  v13 = v9;
  v14 = v10;
  v15 = v11;
  v16 = v12;
  result.size.height = v16;
  result.size.width = v15;
  result.origin.y = v14;
  result.origin.x = v13;
  return result;
}

- (BOOL)clickInteractionShouldBegin:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  int v14;
  void *v15;
  int v16;
  BOOL v17;
  double v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  void *v24;
  void *v25;

  v4 = a3;
  -[CKChatController entryView](self, "entryView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "composition");
  v6 = objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v6, "shelfPluginPayload");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "datasource");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v6) = objc_msgSend(v8, "supportsDynamicSize");

  if ((v6 & 1) != 0)
    goto LABEL_7;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "shouldDisableSendButtonClickInteraction");

  if ((v10 & 1) != 0)
    goto LABEL_7;
  -[CKChatController entryView](self, "entryView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "hasRecording");

  if ((v12 & 1) != 0)
    goto LABEL_7;
  -[CKCoreChatController chat](self, "chat");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "supportsCapabilities:", 0x20000);

  if (!v14
    || (-[CKCoreChatController chat](self, "chat"),
        v15 = (void *)objc_claimAutoreleasedReturnValue(),
        v16 = objc_msgSend(v15, "canSend"),
        v15,
        !v16)
    || (IMIsRunningInMessagesTranscriptExtension() & 1) != 0)
  {
LABEL_7:
    v17 = 0;
  }
  else if (-[CKChatController allowEffectPickerToBePresented](self, "allowEffectPickerToBePresented"))
  {
    v17 = 1;
  }
  else
  {
    objc_msgSend(v4, "locationInCoordinateSpace:", 0);
    v20 = v19;
    v22 = v21;
    -[CKChatController entryView](self, "entryView");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "sendButton");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "hitTest:withEvent:", 0, v20, v22);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v25 == 0;

  }
  return v17;
}

- (void)showEffectPicker
{
  void *v3;
  void *v4;
  int v5;
  void *v6;
  id v7;

  if (CKIsRunningInMacCatalyst()
    || (-[CKChatController entryView](self, "entryView"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v3, "sendButton"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = objc_msgSend(v4, "isEnabled"),
        v4,
        v3,
        v5))
  {
    -[CKChatController _initializeEffectPicker](self, "_initializeEffectPicker");
    -[CKChatController effectPickerViewController](self, "effectPickerViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "presentPicker");

    self->_effectPickerIsPresented = 1;
    -[CKChatController view](self, "view");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setNeedsDisplay");

  }
}

- (void)dismissEffectPickerAnimated:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;

  v3 = a3;
  -[CKChatController effectPickerViewController](self, "effectPickerViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController effectPickerViewControllerClose:animated:](self, "effectPickerViewControllerClose:animated:", v5, v3);

  +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "dismissViewControllerAnimated:completion:", v3, 0);

  -[CKChatController setEffectPickerIsPresented:](self, "setEffectPickerIsPresented:", 0);
}

- (void)tapGestureRecognized:(id)a3
{
  void *v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  -[CKChatController entryView](self, "entryView", a3);
  v12 = (id)objc_claimAutoreleasedReturnValue();
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isEntryViewCollapsable");

  if (v5)
  {
    objc_msgSend(v12, "setEntryFieldCollapsed:animated:", 1, 1);
    objc_msgSend(v12, "minifyAppStrip");
  }
  else if (CKIsRunningInMacCatalyst())
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "hideTranscriptTimestampsIfNeeded");

    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "deselectAllBalloons");

    objc_msgSend(v12, "contentView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "textView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "resignFirstResponder");

    objc_msgSend(v12, "contentView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "textView");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setHideCaretUntilUserTypes:", 1);

  }
}

- (void)raiseGestureRecognized:(id)a3
{
  void *v4;
  char v5;
  id v6;

  v6 = a3;
  -[CKCoreChatController conversation](self, "conversation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isBlockedByCommunicationLimits");

  if ((v5 & 1) == 0)
    -[CKChatController __raiseGestureRecognized:](self, "__raiseGestureRecognized:", v6);

}

- (void)__raiseGestureRecognized:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  NSObject *v11;
  void *v12;
  void *v13;
  char v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint8_t v22[16];
  uint8_t v23[16];
  uint8_t buf[16];
  uint8_t v25[16];

  v4 = a3;
  objc_msgSend(MEMORY[0x1E0CEA6F8], "sharedInputModeController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "currentInputMode");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "identifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)*MEMORY[0x1E0CEB8A0];

  if (v7 != v8)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "canRaiseToListen");

    if (v10)
    {
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v11 = objc_claimAutoreleasedReturnValue();
      -[NSObject raiseGestureRecognized:](v11, "raiseGestureRecognized:", v4);
    }
    else
    {
      -[CKCoreChatController conversation](self, "conversation");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "chat");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "supportsCapabilities:", 0x10000);

      if ((v14 & 1) != 0)
      {
        if (objc_msgSend(v4, "isRecognized"))
        {
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v15 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18DFCD000, v15, OS_LOG_TYPE_INFO, "Starting audio recording invoked by raise to record gesture.", buf, 2u);
            }

          }
          -[CKChatController entryView](self, "entryView");
          v11 = objc_claimAutoreleasedReturnValue();
          -[NSObject startRecordingForRaiseGesture](v11, "startRecordingForRaiseGesture");
        }
        else
        {
          v16 = objc_msgSend(v4, "gestureState");
          v17 = IMOSLoggingEnabled();
          if (v16 == 2)
          {
            if (v17)
            {
              OSLogHandleForIMFoundationCategory();
              v18 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)v23 = 0;
                _os_log_impl(&dword_18DFCD000, v18, OS_LOG_TYPE_INFO, "Stopping audio recording invoked by raise to record gesture because of failure.", v23, 2u);
              }

            }
            -[CKChatController entryView](self, "entryView");
            v19 = objc_claimAutoreleasedReturnValue();
            v11 = v19;
            v20 = 1;
          }
          else
          {
            if (v17)
            {
              OSLogHandleForIMFoundationCategory();
              v21 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)v22 = 0;
                _os_log_impl(&dword_18DFCD000, v21, OS_LOG_TYPE_INFO, "Stopping audio recording invoked by raise to record gesture.", v22, 2u);
              }

            }
            -[CKChatController entryView](self, "entryView");
            v19 = objc_claimAutoreleasedReturnValue();
            v11 = v19;
            v20 = 0;
          }
          -[NSObject stopRecordingForRaiseGestureWithFailure:](v19, "stopRecordingForRaiseGestureWithFailure:", v20);
        }
      }
      else
      {
        if (!IMOSLoggingEnabled())
          goto LABEL_5;
        OSLogHandleForIMFoundationCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v25 = 0;
          _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "Ignoring raise gesture for audio recording because chat does not support capability.", v25, 2u);
        }
      }
    }

  }
LABEL_5:

}

- (void)updateRaiseGesture
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "applicationState") || !-[CKViewController appeared](self, "appeared"))
  {
    v5 = 0;
  }
  else
  {
    -[CKChatController imagePickerController](self, "imagePickerController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      v5 = 0;
    }
    else
    {
      -[CKChatController presentedViewController](self, "presentedViewController");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v5 = 0;
      }
      else if ((objc_msgSend(v8, "canRaiseToListen") & 1) != 0)
      {
        v5 = 1;
      }
      else
      {
        v5 = objc_msgSend(v8, "canRaiseToTalk");
      }

    }
  }

  -[CKChatController raiseGesture](self, "raiseGesture");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setEnabled:", v5);

}

- (void)_saveDraftState
{
  uint64_t v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  id v17;
  uint8_t buf[2];
  __int16 v19;

  -[CKCoreChatController conversation](self, "conversation");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (!v3 || (v17 = (id)v3, v5 = IMIsRunningInMessagesComposeViewService(), v4 = v17, v5))
  {

    return;
  }
  -[CKCoreChatController conversation](self, "conversation");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "chat");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "joinState");

  if (v8 != 1)
  {
    -[CKCoreChatController conversation](self, "conversation");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[CKChatController isAnimatingMessageSend](self, "isAnimatingMessageSend")
      || (+[CKConversationList sharedConversationList](CKConversationList, "sharedConversationList"),
          v10 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v10, "pendingConversation"),
          v11 = (void *)objc_claimAutoreleasedReturnValue(),
          v11,
          v10,
          v11 == v9))
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          v15 = "Skip saving draft state";
          v16 = buf;
          goto LABEL_13;
        }
LABEL_14:

      }
    }
    else
    {
      -[CKCoreChatController inputController](self, "inputController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "requestPhotoBrowserToPrepareForDraft");

      -[CKChatController composition](self, "composition");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setUnsentComposition:", v13);

      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          v19 = 0;
          v15 = "Conversation has unsent composition, saving draft state";
          v16 = (uint8_t *)&v19;
LABEL_13:
          _os_log_impl(&dword_18DFCD000, v14, OS_LOG_TYPE_INFO, v15, v16, 2u);
          goto LABEL_14;
        }
        goto LABEL_14;
      }
    }

  }
}

- (BOOL)_shouldRestoreDraftState
{
  void *v2;
  int v3;

  -[CKChatController composition](self, "composition");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "hasContent") & 1) != 0)
    LOBYTE(v3) = 0;
  else
    v3 = CKBalloonViewCacheNeedsPrewarm() ^ 1;

  return v3;
}

- (void)_restoreDraftState
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  uint8_t v14[16];
  uint8_t buf[16];

  if (-[CKChatController _shouldRestoreDraftState](self, "_shouldRestoreDraftState"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "Composition does not have content, trying to restore draft", buf, 2u);
      }

    }
    if ((IMIsRunningInMessagesComposeViewService() & 1) == 0)
    {
      -[CKCoreChatController inputController](self, "inputController");
      v4 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v4)
        -[CKChatController loadChatInputController](self, "loadChatInputController");
      -[CKCoreChatController conversation](self, "conversation");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "unsentComposition");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if ((objc_msgSend(v6, "hasContent") & 1) != 0
        || (objc_msgSend(v6, "bizIntent"), v7 = (void *)objc_claimAutoreleasedReturnValue(), v7, v7))
      {
        -[CKCoreChatController conversation](self, "conversation");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "chat");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "bizIntent");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "setBizIntent:", v10);

        -[CKChatController setComposition:](self, "setComposition:", v6);
        +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "invalidatePhotosViewController");

        -[CKCoreChatController inputController](self, "inputController");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "requestPhotoBrowserInitFromDraft:", v6);

        -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 1);
        self->_entryViewShouldBecomeTargetFirstResponderForPendingDraft = 1;
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v14 = 0;
            _os_log_impl(&dword_18DFCD000, v13, OS_LOG_TYPE_INFO, "Draft composition restored", v14, 2u);
          }

        }
      }
      -[CKChatController setHasFinishedRestoringDraftState:](self, "setHasFinishedRestoringDraftState:", 1);

    }
  }
}

- (id)getCurrentContext
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  id obj;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  -[CKCoreChatController conversation](self, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "chat");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "lastFinishedMessage");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = objc_alloc_init(MEMORY[0x1E0D88498]);
    objc_msgSend(v5, "time");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setDateSent:", v7);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v5, "isFromMe"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setOutgoing:", v8);

    if ((objc_msgSend(v5, "isFromMe") & 1) == 0)
    {
      v9 = objc_alloc_init(MEMORY[0x1E0D88310]);
      objc_msgSend(v5, "sender");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "ID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v5, "sender");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "fullName");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "setData:", v11);
      if (v13)
      {
        objc_msgSend(v9, "setDisplayText:", v13);
      }
      else
      {
        IMFormattedDisplayStringForIDInAddressBook();
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "setDisplayText:", v15);

      }
      CKSAPersonForAddress(v11);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setObject:", v16);

      objc_msgSend(v6, "setMsgSender:", v9);
    }
    -[CKCoreChatController conversation](self, "conversation");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "recipients");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v5, "isFromMe") & 1) != 0 || (unint64_t)objc_msgSend(v18, "count") >= 2)
    {
      v47 = v5;
      v48 = v4;
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v45 = v18;
      v20 = v18;
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v54, v59, 16);
      if (v21)
      {
        v22 = v21;
        v23 = *(_QWORD *)v55;
        do
        {
          for (i = 0; i != v22; ++i)
          {
            if (*(_QWORD *)v55 != v23)
              objc_enumerationMutation(v20);
            objc_msgSend(*(id *)(*((_QWORD *)&v54 + 1) + 8 * i), "rawAddress");
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "addObject:", v25);

          }
          v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v54, v59, 16);
        }
        while (v22);
      }
      v46 = v6;

      v26 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      obj = v19;
      v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
      if (v27)
      {
        v28 = v27;
        v29 = *(_QWORD *)v51;
        do
        {
          for (j = 0; j != v28; ++j)
          {
            if (*(_QWORD *)v51 != v29)
              objc_enumerationMutation(obj);
            v31 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * j);
            objc_msgSend(MEMORY[0x1E0D397A8], "sharedInstance");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "fetchCNContactForHandleWithID:", v31);
            v33 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(MEMORY[0x1E0D397A8], "fullNameForCNContact:", v33);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            v35 = objc_alloc_init(MEMORY[0x1E0D88310]);
            objc_msgSend(v35, "setData:", v31);
            if (v34)
            {
              objc_msgSend(v35, "setDisplayText:", v34);
            }
            else
            {
              IMFormattedDisplayStringForIDInAddressBook();
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v35, "setDisplayText:", v36);

            }
            CKSAPersonForAddress(v31);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v35, "setObject:", v37);

            objc_msgSend(v26, "addObject:", v35);
          }
          v28 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
        }
        while (v28);
      }

      v6 = v46;
      objc_msgSend(v46, "setMsgRecipients:", v26);

      v5 = v47;
      v4 = v48;
      v18 = v45;
    }
    v38 = (void *)MEMORY[0x1E0C99E98];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("x-apple-sms:guid=%lld"), objc_msgSend(v5, "messageID"));
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "URLWithString:", v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setIdentifier:", v40);

    objc_msgSend(v4, "guid");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setChatIdentifier:", v41);

    v42 = (void *)MEMORY[0x1E0C99D20];
    objc_msgSend(v6, "dictionary");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "arrayWithObject:", v43);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

- (void)setEditing:(BOOL)a3 animated:(BOOL)a4
{
  _BOOL8 v4;
  _BOOL8 v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void (**v21)(_QWORD);
  id v22;
  void (**v23)(void *, uint64_t);
  void *v24;
  void *v25;
  void *v26;
  id v27;
  _QWORD v28[5];
  id v29;
  _QWORD aBlock[5];
  BOOL v31;
  objc_super v32;

  v4 = a4;
  v5 = a3;
  if (-[CKChatController isEditing](self, "isEditing") == a3)
  {
    -[CKChatController navigationController](self, "navigationController");
    v27 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setToolbarHidden:animated:", v5 ^ 1, v4);

  }
  else
  {
    if (-[CKChatController wantsChromelessAppearance](self, "wantsChromelessAppearance"))
    {
      -[CKNavigationBarTitleController setEditing:](self->_navigationBarTitleController, "setEditing:", v5);
      -[CKChatController navigationItem](self, "navigationItem");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKNavigationBarTitleController titleView](self->_navigationBarTitleController, "titleView");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setTitleView:", v8);

      -[CKChatController navigationItem](self, "navigationItem");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKNavigationBarTitleController leftBarButtonItems](self->_navigationBarTitleController, "leftBarButtonItems");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setLeftBarButtonItems:", v10);

      -[CKChatController navigationItem](self, "navigationItem");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKNavigationBarTitleController rightBarButtonItems](self->_navigationBarTitleController, "rightBarButtonItems");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setRightBarButtonItems:", v12);

    }
    v32.receiver = self;
    v32.super_class = (Class)CKChatController;
    -[CKChatController setEditing:animated:](&v32, sel_setEditing_animated_, v5, v4);
    -[CKChatController _updateNavigationButtons](self, "_updateNavigationButtons");
    -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "setIsInEditingMode:", v5);

    if (v5)
    {
      -[CKChatController _updateToolbarItems](self, "_updateToolbarItems");
      -[CKChatController editingToolbarItems](self, "editingToolbarItems");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController setToolbarItems:animated:](self, "setToolbarItems:animated:", v14, 0);

      v15 = CKIsAppCardsEnabled();
      -[CKCoreChatController inputController](self, "inputController");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = v16;
      if (v15)
        objc_msgSend(v16, "dismissAppCardIfNecessaryAnimated:completion:", v4, 0);
      else
        objc_msgSend(v16, "forceDismissBrowserWithoutAnimation");

      -[CKChatController addOrRemoveEntryViewIfNeeded](self, "addOrRemoveEntryViewIfNeeded");
      -[CKChatController removeFooterView](self, "removeFooterView");
      -[CKChatController _hideCatchUpButtonIfNeededAndRemoveOnCompletion:](self, "_hideCatchUpButtonIfNeededAndRemoveOnCompletion:", 0);
    }
    else
    {
      if (-[CKViewController appeared](self, "appeared"))
      {
        -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
        -[CKChatController reloadInputViews](self, "reloadInputViews");
      }
      -[CKChatController _updateToolbarItems](self, "_updateToolbarItems");
      -[CKChatController addOrRemoveEntryViewIfNeeded](self, "addOrRemoveEntryViewIfNeeded");
      -[CKChatController reloadFooterViewIfNecessaryForNewConversation:](self, "reloadFooterViewIfNecessaryForNewConversation:", self);
      -[CKChatController _showCatchUpButtonIfNeeded](self, "_showCatchUpButtonIfNeeded");
    }
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "collectionView");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __40__CKChatController_setEditing_animated___block_invoke;
    aBlock[3] = &unk_1E274CA88;
    v31 = v5;
    aBlock[4] = self;
    v21 = (void (**)(_QWORD))_Block_copy(aBlock);
    v28[0] = v20;
    v28[1] = 3221225472;
    v28[2] = __40__CKChatController_setEditing_animated___block_invoke_2;
    v28[3] = &unk_1E274BE58;
    v28[4] = self;
    v22 = v19;
    v29 = v22;
    v23 = (void (**)(void *, uint64_t))_Block_copy(v28);
    +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "dismissViewControllerAnimated:completion:", v4, 0);

    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0CEABB0], "animateWithDuration:delay:options:animations:completion:", 4, v21, v23, 0.300000012, 0.0);
    }
    else
    {
      v21[2](v21);
      v23[2](v23, 1);
    }
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "setEditing:animated:", v5, v4);

    -[CKChatController navigationController](self, "navigationController");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setToolbarHidden:animated:", v5 ^ 1, v4);

  }
}

uint64_t __40__CKChatController_setEditing_animated___block_invoke(uint64_t result)
{
  if (!*(_BYTE *)(result + 40))
    return objc_msgSend(*(id *)(result + 32), "_updateEntryViewFrameIfNeeded:", 0);
  return result;
}

void __40__CKChatController_setEditing_animated___block_invoke_2(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "addOrRemoveEntryViewIfNeeded");
  objc_msgSend(*(id *)(a1 + 32), "updateScrollGeometryWithoutAnimationForReason:", CFSTR("CollectionViewEditModeChanged"));
  +[CKScrollViewAnimationProperties systemDefaultScrollAnimation](CKScrollViewAnimationProperties, "systemDefaultScrollAnimation");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "enforceTranscriptScrollIntentWithAnimationProperties:", v2);

}

- (id)editingToolbarItems
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  void *v14;
  void *v15;
  const __CFString *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA380]), "initWithBarButtonSystemItem:target:action:", 16, self, sel__deleteSelectedMessages_);
  objc_msgSend(v4, "setTag:", 0);
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "forwardImage");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA380]), "initWithImage:style:target:action:", v6, 0, self, sel__editingToolbarSelectedForward_);
  objc_msgSend(v7, "setTag:", 1);
  objc_msgSend(v3, "addObject:", v4);
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA380]), "initWithBarButtonSystemItem:target:action:", 5, 0, 0);
  -[CKCoreChatController chat](self, "chat");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "chatItems");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "arrayByApplyingSelector:", sel__item);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!IMSSMSReportSpamShouldShowReportMessagesForItems())
    goto LABEL_11;
  -[CKCoreChatController chat](self, "chat");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "messageCount");

  if (v13 < 2)
  {
    -[CKCoreChatController chat](self, "chat");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "messageCount");

    if (v18 != 1)
    {
      v19 = 0;
      goto LABEL_8;
    }
    CKFrameworkBundle();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    v16 = CFSTR("REPORT_SPAM_SMS_BUTTON_TITLE_SINGULAR");
  }
  else
  {
    CKFrameworkBundle();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    v16 = CFSTR("REPORT_SPAM_SMS_BUTTON_TITLE_MULTIPLE");
  }
  objc_msgSend(v14, "localizedStringForKey:value:table:", v16, &stru_1E276D870, CFSTR("ChatKit"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_8:
  if (objc_msgSend(v19, "length"))
  {
    v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA380]), "initWithTitle:style:target:action:", v19, 0, self, sel__reportSelectedMessages_);
    objc_msgSend(v20, "setTag:", 2);
    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA380]), "initWithBarButtonSystemItem:target:action:", 5, 0, 0);
    objc_msgSend(v3, "addObject:", v21);
    objc_msgSend(v3, "addObject:", v20);

  }
LABEL_11:
  objc_msgSend(v3, "addObject:", v8);
  if (-[CKChatController allowDebugItems](self, "allowDebugItems"))
  {
    -[CKChatController internalBarButtonItems](self, "internalBarButtonItems");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObjectsFromArray:", v22);

  }
  objc_msgSend(v3, "addObject:", v7);

  return v3;
}

- (id)_actionsToolbar
{
  return 0;
}

- (void)_updateToolbarItems
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (-[CKChatController isEditing](self, "isEditing"))
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "selectedItems");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "chatItems");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectsAtIndexes:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v4, "count"))
    {
      -[CKCoreChatController conversation](self, "conversation");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "isUserDeletable");

    }
    else
    {
      v8 = 0;
    }
    v34 = 0u;
    v35 = 0u;
    v9 = objc_msgSend(v4, "count") != 0;
    v36 = 0u;
    v37 = 0u;
    v10 = v6;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v35;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v35 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
          v8 = objc_msgSend(v15, "canDelete") & v8;
          v9 = objc_msgSend(v15, "canForward") & v9;
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
      }
      while (v12);
    }

    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "isTranscriptSharingEnabled");

    if (v17)
    {
      -[CKCoreChatController conversation](self, "conversation");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "chat");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "isStewieSharingChat");

      v8 = v8 & ~v20;
    }
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    -[CKChatController toolbarItems](self, "toolbarItems", 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v31;
      do
      {
        for (j = 0; j != v23; ++j)
        {
          if (*(_QWORD *)v31 != v24)
            objc_enumerationMutation(v21);
          v26 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * j);
          v27 = objc_msgSend(v26, "tag");
          v28 = v8;
          if (v27)
          {
            v29 = objc_msgSend(v26, "tag", v8);
            v28 = v9;
            if (v29 != 1)
            {
              if (objc_msgSend(v26, "tag", v9) != 2)
                continue;
              v28 = 1;
            }
          }
          objc_msgSend(v26, "setEnabled:", v28);
        }
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
      }
      while (v23);
    }

  }
}

- (void)_deleteSelectedMessages:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "deleteSelectedChatItems:", v4);

}

- (void)_editingToolbarSelectedForward:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  -[CKCoreChatController collectionViewController](self, "collectionViewController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "selectedItems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "chatItems");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectsAtIndexes:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v35;
    v12 = 1;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v35 != v11)
          objc_enumerationMutation(v8);
        v12 &= objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * i), "canForward");
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
    }
    while (v10);
  }
  else
  {
    v12 = 1;
  }

  if (objc_msgSend(v5, "count") && v12)
  {
    v14 = (void *)objc_opt_new();
    v29 = v4;
    objc_msgSend(v4, "chatItems");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "objectsAtIndexes:", v5);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v17 = v16;
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v31;
      do
      {
        for (j = 0; j != v19; ++j)
        {
          if (*(_QWORD *)v31 != v20)
            objc_enumerationMutation(v17);
          v22 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * j);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(v22, "aggregateChatItems");
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "addObjectsFromArray:", v23);

          }
          else
          {
            objc_msgSend(v14, "addObject:", v22);
          }
        }
        v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
      }
      while (v19);
    }

    -[CKChatController entryView](self, "entryView");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = objc_msgSend(v24, "shouldShowSubject");
    -[CKChatController chatInputTranscriptIdentifier](self, "chatInputTranscriptIdentifier");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    +[CKComposition compositionForMessageParts:preserveSubject:contextIdentifier:](CKComposition, "compositionForMessageParts:preserveSubject:contextIdentifier:", v14, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKChatController setEditing:animated:](self, "setEditing:animated:", 0, 1);
    -[CKCoreChatController delegate](self, "delegate");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "chatController:forwardComposition:", self, v27);

    v4 = v29;
  }

}

- (void)_reportSelectedMessages:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  -[CKCoreChatController collectionViewController](self, "collectionViewController", a3);
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "selectedItems");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "chatItems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectsAtIndexes:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "arrayByApplyingSelector:", sel_IMChatItem);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKCoreChatController chat](self, "chat");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "messagesToReportAsSpamFromChatItems:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKChatController showSMSReportSpamExtensionControllerForMessages:](self, "showSMSReportSpamExtensionControllerForMessages:", v9);
}

- (void)_editCancelButtonPressed
{
  if (-[CKChatController isEditing](self, "isEditing"))
  {
    -[CKChatController setEditing:animated:](self, "setEditing:animated:", 0, 1);
  }
  else if (CKIsRunningInMessagesTranscriptExtension())
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      -[CKChatController dismissViewControllerAnimated:completion:](self, "dismissViewControllerAnimated:completion:", 1, 0);
  }
}

- (void)_doneButtonPressed
{
  void *v3;
  char v4;
  id v5;

  -[CKCoreChatController delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    -[CKCoreChatController delegate](self, "delegate");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "doneButtonPressedForChatController:", self);

  }
}

- (int64_t)unreadCountForCurrentFilterModeForNavbarCanvasViewController:(id)a3
{
  void *v4;
  char v5;
  void *v6;
  int64_t v7;

  -[CKCoreChatController delegate](self, "delegate", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_respondsToSelector();

  if ((v5 & 1) == 0)
    return 0;
  -[CKCoreChatController delegate](self, "delegate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "unreadCountForCurrentFilterModeForChatController:", self);

  return v7;
}

- (BOOL)shouldShowChevronInNavbarCanvasViewController:(id)a3
{
  void *v4;
  void *v5;
  char v6;
  char v7;

  -[CKCoreChatController delegate](self, "delegate", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[CKCoreChatController delegate](self, "delegate");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "hasRecentlyDeletedFilterSelected");

    v7 = v6 ^ 1;
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

- (BOOL)shouldShowFacetimeButtonInNavbarCanvasViewController:(id)a3
{
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  char v10;

  if (CKIsRunningInMacCatalyst())
    return 0;
  -[CKCoreChatController delegate](self, "delegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[CKCoreChatController delegate](self, "delegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "hasRecentlyDeletedFilterSelected");

    if ((v7 & 1) != 0)
      return 0;
  }
  else
  {

  }
  if (-[CKChatController isShowingOscarChat](self, "isShowingOscarChat"))
    return 0;
  -[CKCoreChatController conversation](self, "conversation");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "chat");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "supportsCapabilities:", 1024);

  return v10;
}

- (void)recoverableDeleteConversation
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void *v13;
  id v14;
  id v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v16, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = MEMORY[0x1E0C809B0];
  v11 = 3221225472;
  v12 = __49__CKChatController_recoverableDeleteConversation__block_invoke;
  v13 = &unk_1E274A108;
  v14 = v5;
  v15 = v3;
  v6 = v3;
  v7 = v5;
  v8 = _Block_copy(&v10);
  v9 = (void *)objc_opt_new();
  objc_msgSend(v9, "presentRecoverableDeletionConfirmationsFromViewController:forConversations:alertControllerStyle:alertsCompletedBlock:cancelBlock:", self, v7, 1, v8, 0, v10, v11, v12, v13);

}

void __49__CKChatController_recoverableDeleteConversation__block_invoke(uint64_t a1)
{
  id v2;

  +[CKConversationList sharedConversationList](CKConversationList, "sharedConversationList");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "recoverableDeleteForConversations:deleteDate:synchronousQuery:completionHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0, 0);

}

- (void)layoutFooterView
{
  void *v3;
  double v4;
  double v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  id v15;

  -[CKChatController footerViewController](self, "footerViewController");
  v15 = (id)objc_claimAutoreleasedReturnValue();
  -[CKChatController view](self, "view");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "frame");
  v5 = v4;
  objc_msgSend(v15, "view");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "frame");
  v8 = v5 - v7;
  objc_msgSend(v3, "frame");
  v10 = v9;
  objc_msgSend(v15, "view");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "frame");
  v13 = v12;
  objc_msgSend(v15, "view");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setFrame:", 0.0, v8, v10, v13);

}

- (void)removeFooterView
{
  UIViewController *footerViewController;
  void *v4;
  UIViewController *v5;

  footerViewController = self->_footerViewController;
  if (footerViewController)
  {
    -[UIViewController willMoveToParentViewController:](footerViewController, "willMoveToParentViewController:", 0);
    -[UIViewController view](self->_footerViewController, "view");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "removeFromSuperview");

    -[UIViewController removeFromParentViewController](self->_footerViewController, "removeFromParentViewController");
    v5 = self->_footerViewController;
    self->_footerViewController = 0;

  }
}

- (void)reloadFooterViewIfNecessaryForNewConversation:(id)a3
{
  void *v4;
  int v5;
  void *v6;
  void *v7;
  int v8;
  CKTranscriptSharingFooterViewController *v9;
  UIViewController **p_footerViewController;
  void *v11;
  void *v12;
  id v13;

  v13 = a3;
  -[CKChatController removeFooterView](self, "removeFooterView");
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isTranscriptSharingEnabled");

  if (v5
    && (objc_msgSend(v13, "conversation"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v6, "chat"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v8 = objc_msgSend(v7, "isStewieSharingChat"),
        v7,
        v6,
        v8))
  {
    v9 = -[CKTranscriptSharingFooterViewController initWithChatController:]([CKTranscriptSharingFooterViewController alloc], "initWithChatController:", v13);
  }
  else
  {
    v9 = 0;
  }
  p_footerViewController = &self->_footerViewController;
  objc_storeStrong((id *)&self->_footerViewController, v9);
  if (self->_footerViewController)
  {
    -[CKChatController viewIfLoaded](self, "viewIfLoaded");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController addChildViewController:](self, "addChildViewController:", *p_footerViewController);
    -[UIViewController view](*p_footerViewController, "view");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addSubview:", v12);

    -[UIViewController didMoveToParentViewController:](*p_footerViewController, "didMoveToParentViewController:", self);
  }

}

- (BOOL)_isRunningPPT
{
  return objc_msgSend((id)*MEMORY[0x1E0CEB258], "isRunningTest");
}

- (void)setUpStyleForDarkEffect
{
  void *v3;
  NSObject *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  CKChatController *v9;
  void *v10;
  _BOOL8 v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint8_t v23[16];

  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    -[CKChatController setNeedsDarkEffectStyleCleanUp:](self, "setNeedsDarkEffectStyleCleanUp:", 1);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_18DFCD000, v4, OS_LOG_TYPE_INFO, "Setting style for dark effect", v23, 2u);
      }

    }
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isAppStripInKeyboard");

    if (v6)
    {
      -[CKChatController entryView](self, "entryView");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setStyle:", 1);

    }
    if (CKIsAppCardsEnabled())
    {
      -[CKChatController entryView](self, "entryView");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setStyle:", 1);

      -[CKChatController _viewControllerForModalPresentation](self, "_viewControllerForModalPresentation");
      v9 = (CKChatController *)objc_claimAutoreleasedReturnValue();
      if (v9 != self)
      {
        -[CKChatController traitCollection](self, "traitCollection");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "userInterfaceStyle") == 2;

        -[CKChatController setShowingDarkEffect:isInDarkMode:](v9, "setShowingDarkEffect:isInDarkMode:", 1, v11);
      }

    }
    -[CKCoreChatController conversation](self, "conversation");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "isBusinessConversation");

    if ((v13 & 1) == 0)
    {
      -[CKChatController currentNavigationBarBasedOnSizeClass](self, "currentNavigationBarBasedOnSizeClass");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setDarkEffectStyle:", 1);

      -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "conversationIdentityView");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "setStyle:", 1);

    }
    -[CKChatController _setBannersHidden:](self, "_setBannersHidden:", 1);
    if (!-[CKChatController wantsChromelessAppearance](self, "wantsChromelessAppearance"))
    {
      -[CKChatController navigationItem](self, "navigationItem");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "standardAppearance");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = (void *)objc_msgSend(v18, "copy");

      objc_msgSend(MEMORY[0x1E0CEA398], "effectWithStyle:", 18);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "setBackgroundEffect:", v20);
      -[CKChatController navigationItem](self, "navigationItem");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "setScrollEdgeAppearance:", v19);

      -[CKChatController navigationItem](self, "navigationItem");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "setStandardAppearance:", v19);

    }
  }
}

- (void)cleanUpDarkEffectStyle
{
  void *v3;
  CKChatController *v4;
  void *v5;
  _BOOL8 v6;
  void *v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  id v17;
  uint8_t buf[16];

  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    if (-[CKChatController needsDarkEffectStyleCleanUp](self, "needsDarkEffectStyleCleanUp"))
    {
      if (CKIsAppCardsEnabled())
      {
        -[CKChatController _viewControllerForModalPresentation](self, "_viewControllerForModalPresentation");
        v4 = (CKChatController *)objc_claimAutoreleasedReturnValue();
        if (v4 != self && (objc_opt_respondsToSelector() & 1) != 0)
        {
          -[CKChatController traitCollection](self, "traitCollection");
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          v6 = objc_msgSend(v5, "userInterfaceStyle") == 2;

          -[CKChatController setShowingDarkEffect:isInDarkMode:](v4, "setShowingDarkEffect:isInDarkMode:", 0, v6);
        }

      }
      -[CKChatController traitCollection](self, "traitCollection");
      v17 = (id)objc_claimAutoreleasedReturnValue();
      -[CKChatController entryView](self, "entryView");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setEntryViewTraitCollection:resetStyle:", v17, 1);

      -[CKMessageEntryBackgroundViewProtocol setEntryViewTraitCollection:](self->_keyboardCandidateBarBackgroundView, "setEntryViewTraitCollection:", v17);
      -[CKCoreChatController conversation](self, "conversation");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "isBusinessConversation");

      if ((v9 & 1) == 0)
      {
        -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "conversationIdentityView");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "setStyle:", 4);

        -[CKChatController currentNavigationBarBasedOnSizeClass](self, "currentNavigationBarBasedOnSizeClass");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "setDarkEffectStyle:", 0);

      }
      -[CKChatController _setBannersHidden:](self, "_setBannersHidden:", 0);
      if (!-[CKChatController wantsChromelessAppearance](self, "wantsChromelessAppearance"))
      {
        -[CKChatController _defaultTranscriptNavBarAppearance](self, "_defaultTranscriptNavBarAppearance");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController navigationItem](self, "navigationItem");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "setScrollEdgeAppearance:", v13);

        -[CKChatController navigationItem](self, "navigationItem");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "setStandardAppearance:", v13);

      }
      -[CKChatController setNeedsDarkEffectStyleCleanUp:](self, "setNeedsDarkEffectStyleCleanUp:", 0);

    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v16, OS_LOG_TYPE_INFO, "Skipping dark effect style clean up", buf, 2u);
      }

    }
  }
}

- (void)_setBannersHidden:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  id v7;

  v3 = a3;
  -[CKChatController nicknameBanner](self, "nicknameBanner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setHidden:", v3);

  -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setHidden:", v3);

  -[CKChatController suggestionBannerView](self, "suggestionBannerView");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setHidden:", v3);

}

- (id)_defaultTranscriptNavBarAppearance
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  -[CKChatController navigationItem](self, "navigationItem");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "standardAppearance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (CKIsRunningInMacCatalyst())
  {
    objc_msgSend(MEMORY[0x1E0CEA398], "effectWithStyle:", 4);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "chatNavbarColor");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setBackgroundColor:", v6);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA398], "effectWithStyle:", 8);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v9[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setBackgroundEffects:", v7);

  return v3;
}

- (void)updateStyleForCurrentEffect
{
  objc_class *v4;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v4 = (objc_class *)OUTLINED_FUNCTION_14();
  NSStringFromClass(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 134218242;
  v8 = a1;
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_8(&dword_18DFCD000, a2, v6, "<%p> ChatController (class: %@) does not respond to -setUpStyleForDarkEffect. Please file a radar.", (uint8_t *)&v7);

  OUTLINED_FUNCTION_13();
}

- (BOOL)transcriptCollectionViewController:(id)a3 shouldSetupFullscreenEffectUI:(id)a4
{
  NSObject *v5;
  void *v6;
  int v7;
  void *v8;
  objc_class *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a4, "effectIsDark", a3))
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      -[CKChatController setUpStyleForDarkEffect](self, "setUpStyleForDarkEffect");
    }
    else
    {
      IMLogHandleForCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        -[CKChatController updateStyleForCurrentEffect].cold.1((uint64_t)self, v5);

      objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "isInternalInstall");

      if (v7)
      {
        v8 = (void *)MEMORY[0x1E0CB3940];
        v9 = (objc_class *)objc_opt_class();
        NSStringFromClass(v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "stringWithFormat:", CFSTR("<%p> ChatController (class: %@) does not respond to -setUpStyleForDarkEffect. Please file a radar."), self, v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        v12 = (void *)MEMORY[0x1E0CB35C8];
        v17 = *MEMORY[0x1E0CB2938];
        v18[0] = v11;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, &v17, 1);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "errorWithDomain:code:userInfo:", CFSTR("CKChatControllerErrorDomain"), 0, v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "forceAutoBugCaptureWithSubType:errorPayload:", CFSTR("Unexpected method list for CKChatController"), v14);

      }
    }
  }
  else
  {
    -[CKChatController cleanUpDarkEffectStyle](self, "cleanUpDarkEffectStyle");
  }
  return 1;
}

- (BOOL)transcriptCollectionViewController:(id)a3 shouldCleanupFullscreenEffectUI:(id)a4
{
  -[CKChatController cleanUpDarkEffectStyle](self, "cleanUpDarkEffectStyle", a3, a4);
  return 1;
}

- (void)transcriptCollectionViewControllerWillBeginFullscreenEffectAnimationForOutgoingMessage:(id)a3
{
  -[CKChatController dismissEffectPickerAnimated:](self, "dismissEffectPickerAnimated:", 0);
}

- (id)transcriptCollectionViewControllerOuterEffectPresentingView:(id)a3
{
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)CKChatController;
  -[CKCoreChatController transcriptCollectionViewControllerOuterEffectPresentingView:](&v4, sel_transcriptCollectionViewControllerOuterEffectPresentingView_, a3);
  return (id)objc_claimAutoreleasedReturnValue();
}

- (id)_menuTitleForChatItem:(id)a3
{
  return (id)objc_msgSend(a3, "menuTitle");
}

- (BOOL)_smsEnabled
{
  return objc_msgSend(MEMORY[0x1E0D35918], "smsEnabled");
}

- (id)_interfaceActionsForChatItem:(id)a3
{
  id v4;
  void *v5;
  _BOOL4 v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  char isKindOfClass;
  void *v41;
  id WeakRetained;
  void *v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  __CFString *v75;
  void *v76;
  void *v77;
  id v78;
  void *v79;
  BOOL v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v86;
  CKChatController *v87;
  _QWORD v88[5];
  id v89;
  _QWORD v90[4];
  id v91;
  id v92;
  _QWORD v93[5];
  id v94;
  _QWORD v95[4];
  id v96;
  _QWORD v97[4];
  id v98;
  id v99;
  CKChatController *v100;
  id v101;
  _QWORD v102[4];
  id v103;
  _QWORD v104[4];
  id v105;
  id v106;
  _QWORD v107[4];
  id v108;
  _QWORD v109[4];
  id v110;
  id v111;
  _QWORD v112[4];
  id v113;
  id location[2];

  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  location[0] = 0;
  objc_initWeak(location, self);
  v6 = -[CKCoreChatController wantsReplyButton](self, "wantsReplyButton");
  v7 = MEMORY[0x1E0C809B0];
  if (v6 && objc_msgSend(v4, "canInlineReply"))
  {
    v8 = (void *)MEMORY[0x1E0CEA688];
    CKFrameworkBundle();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("INLINE_REPLY_ORB_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v112[0] = v7;
    v112[1] = 3221225472;
    v112[2] = __49__CKChatController__interfaceActionsForChatItem___block_invoke;
    v112[3] = &unk_1E274D298;
    objc_copyWeak(&v113, location);
    objc_msgSend(v8, "actionWithTitle:type:handler:", v10, 0, v112);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "setEnabled:", objc_msgSend(v4, "canInlineReply"));
    objc_msgSend(v5, "addObject:", v11);

    objc_destroyWeak(&v113);
  }
  if (objc_msgSend(v4, "canRetract"))
  {
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v12, "isScheduledMessagesCoreEnabled") & 1) != 0)
    {
      v13 = objc_msgSend(v4, "scheduleType");

      if (v13 == 2)
      {
        CKFrameworkBundle();
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("DELETE_SCHEDULED_ACTION"), &stru_1E276D870, CFSTR("ChatKit"));
        v15 = objc_claimAutoreleasedReturnValue();
LABEL_10:
        v16 = (void *)v15;

        v17 = (void *)MEMORY[0x1E0CEA688];
        v109[0] = v7;
        v109[1] = 3221225472;
        v109[2] = __49__CKChatController__interfaceActionsForChatItem___block_invoke_2;
        v109[3] = &unk_1E274D2C0;
        objc_copyWeak(&v111, location);
        v110 = v4;
        objc_msgSend(v17, "actionWithTitle:type:handler:", v16, 0, v109);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v18);

        objc_destroyWeak(&v111);
        goto LABEL_11;
      }
    }
    else
    {

    }
    CKFrameworkBundle();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("UNDO_SEND_ACTION"), &stru_1E276D870, CFSTR("ChatKit"));
    v15 = objc_claimAutoreleasedReturnValue();
    goto LABEL_10;
  }
LABEL_11:
  if (objc_msgSend(v4, "canCopy"))
  {
    v19 = (void *)MEMORY[0x1E0CEA688];
    CKFrameworkBundle();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("COPY"), &stru_1E276D870, CFSTR("ChatKit"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v107[0] = v7;
    v107[1] = 3221225472;
    v107[2] = __49__CKChatController__interfaceActionsForChatItem___block_invoke_3;
    v107[3] = &unk_1E274D2E8;
    v108 = v4;
    objc_msgSend(v19, "actionWithTitle:type:handler:", v21, 0, v107);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "addObject:", v22);

  }
  if (objc_msgSend(v4, "syndicationBehavior") == 1)
  {
    -[CKCoreChatController chat](self, "chat");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = objc_msgSend(v23, "isBusinessChat");

    if ((v24 & 1) == 0)
    {
      if (objc_msgSend(v4, "isHighlighted"))
      {
        CKFrameworkBundle();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "localizedStringForKey:value:table:", CFSTR("REMOVE_PIN_ACTION"), &stru_1E276D870, CFSTR("ChatKit"));
      }
      else
      {
        CKFrameworkBundle();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "localizedStringForKey:value:table:", CFSTR("ADD_PIN_ACTION"), &stru_1E276D870, CFSTR("ChatKit"));
      }
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      v27 = (void *)MEMORY[0x1E0CEA688];
      v104[0] = v7;
      v104[1] = 3221225472;
      v104[2] = __49__CKChatController__interfaceActionsForChatItem___block_invoke_4;
      v104[3] = &unk_1E274D310;
      v105 = v4;
      objc_copyWeak(&v106, location);
      objc_msgSend(v27, "actionWithTitle:type:handler:", v26, 0, v104);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "addObject:", v28);

      objc_destroyWeak(&v106);
    }
  }
  if (+[CKTranslatorUtilities shouldShowTranslateMenuOption:](CKTranslatorUtilities, "shouldShowTranslateMenuOption:", v4))
  {
    +[CKTranslationMenu translateActionForChatItem:forController:](CKTranslationMenu, "translateActionForChatItem:forController:", v4, self);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "addObject:", v29);

  }
  if (objc_msgSend(v4, "canExport"))
  {
    CKFrameworkBundle();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "localizedStringForKey:value:table:", CFSTR("BALLOON_EXPORT_CALLOUT"), &stru_1E276D870, CFSTR("ChatKit"));
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend(v32, "isRichAudioMessagesEnabled");

    if (v33)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        CKFrameworkBundle();
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "localizedStringForKey:value:table:", CFSTR("AUDIO_MESSAGE_SAVE"), &stru_1E276D870, CFSTR("ChatKit"));
        v35 = objc_claimAutoreleasedReturnValue();

        v31 = (void *)v35;
      }
    }
    v36 = (void *)MEMORY[0x1E0CEA688];
    v102[0] = v7;
    v102[1] = 3221225472;
    v102[2] = __49__CKChatController__interfaceActionsForChatItem___block_invoke_5;
    v102[3] = &unk_1E274D2E8;
    v103 = v4;
    objc_msgSend(v36, "actionWithTitle:type:handler:", v31, 0, v102);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "addObject:", v37);

  }
  if (objc_msgSend(v4, "canSendAsTextMessage"))
  {
    objc_msgSend(v4, "IMChatItem");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "IMChatItem");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) == 0)
    {
LABEL_37:

      goto LABEL_38;
    }
    objc_msgSend(v38, "message");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained(location);
    objc_msgSend(WeakRetained, "conversation");
    v43 = (void *)objc_claimAutoreleasedReturnValue();

    if (-[CKChatController _smsEnabled](self, "_smsEnabled")
      && objc_msgSend(v41, "isFromMe")
      && (objc_msgSend(v41, "isDelivered") & 1) == 0)
    {
      objc_msgSend(v41, "error");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v44)
      {
        if ((objc_msgSend(v43, "isGroupConversation") & 1) != 0)
          goto LABEL_36;
        v45 = objc_loadWeakRetained(location);
        objc_msgSend(v45, "collectionViewController");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "chatItems");
        v86 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v41, "guid");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v86, "__ck_indexesOfPartsOfMessageWithGUID:", v47);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v86, "objectsAtIndexes:", v48);
        v49 = (void *)objc_claimAutoreleasedReturnValue();

        -[CKCoreChatController textInputContextIdentifier](self, "textInputContextIdentifier");
        v50 = objc_claimAutoreleasedReturnValue();
        +[CKComposition compositionForMessageParts:preserveSubject:contextIdentifier:](CKComposition, "compositionForMessageParts:preserveSubject:contextIdentifier:", v49, 1, v50);
        v51 = (void *)objc_claimAutoreleasedReturnValue();

        LOBYTE(v50) = objc_msgSend(v43, "canSendComposition:error:", v51, 0);
        v7 = MEMORY[0x1E0C809B0];
        if ((v50 & 1) == 0)
          goto LABEL_36;
        objc_msgSend(v43, "fallbackSendString");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v52 = (void *)MEMORY[0x1E0CEA688];
        v97[0] = MEMORY[0x1E0C809B0];
        v97[1] = 3221225472;
        v97[2] = __49__CKChatController__interfaceActionsForChatItem___block_invoke_955;
        v97[3] = &unk_1E274D338;
        v98 = v41;
        v99 = v43;
        objc_copyWeak(&v101, location);
        v100 = self;
        objc_msgSend(v52, "actionWithTitle:type:handler:", v44, 0, v97);
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v53);

        objc_destroyWeak(&v101);
        v7 = MEMORY[0x1E0C809B0];
      }

    }
LABEL_36:

    goto LABEL_37;
  }
LABEL_38:
  objc_msgSend(v4, "visibleAssociatedMessageChatItems");
  v54 = (void *)objc_claimAutoreleasedReturnValue();

  if (v54)
  {
    v55 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(v4, "visibleAssociatedMessageChatItems");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v95[0] = v7;
    v95[1] = 3221225472;
    v95[2] = __49__CKChatController__interfaceActionsForChatItem___block_invoke_2_960;
    v95[3] = &unk_1E274B218;
    v57 = v55;
    v96 = v57;
    objc_msgSend(v56, "enumerateObjectsUsingBlock:", v95);

    if (objc_msgSend(v57, "count"))
    {
      v58 = (void *)MEMORY[0x1E0CEA688];
      CKFrameworkBundle();
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "localizedStringForKey:value:table:", CFSTR("BALLOON_STICKER_CALLOUT"), &stru_1E276D870, CFSTR("ChatKit"));
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      v93[0] = v7;
      v93[1] = 3221225472;
      v93[2] = __49__CKChatController__interfaceActionsForChatItem___block_invoke_3_963;
      v93[3] = &unk_1E274D360;
      v93[4] = self;
      v94 = v57;
      objc_msgSend(v58, "actionWithTitle:type:handler:", v60, 0, v93);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "addObject:", v61);

    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v4, "mediaObject");
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v62, "transfer");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v63, "attributionInfo");
    v64 = (void *)objc_claimAutoreleasedReturnValue();

    if (v64)
    {
      objc_msgSend(v64, "__ck_localizedAppNameForTranscriptAttribution");
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      if (v65)
      {
        v87 = self;
        v66 = v5;
        v67 = v7;
        v68 = (void *)MEMORY[0x1E0CEA688];
        v69 = (void *)MEMORY[0x1E0CB3940];
        CKFrameworkBundle();
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v70, "localizedStringForKey:value:table:", CFSTR("MEDIA_ATTRIBUTION_TITLE_FORMAT"), &stru_1E276D870, CFSTR("ChatKit"));
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v69, "stringWithFormat:", v71, v65);
        v72 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        v74 = objc_msgSend(v73, "userInterfaceLayoutDirection");

        if (v74 == 1)
          v75 = CFSTR("\u200F");
        else
          v75 = CFSTR("\u200E");
        -[__CFString stringByAppendingString:](v75, "stringByAppendingString:", v72);
        v76 = (void *)objc_claimAutoreleasedReturnValue();

        v90[0] = v67;
        v90[1] = 3221225472;
        v90[2] = __49__CKChatController__interfaceActionsForChatItem___block_invoke_4_966;
        v90[3] = &unk_1E274D310;
        v91 = v64;
        objc_copyWeak(&v92, location);
        objc_msgSend(v68, "actionWithTitle:type:handler:", v76, 0, v90);
        v77 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v66, "addObject:", v77);

        objc_destroyWeak(&v92);
        v7 = v67;
        v5 = v66;
        self = v87;
      }

    }
  }
  v78 = objc_loadWeakRetained(location);
  objc_msgSend(v78, "conversation");
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v79, "isPending") & 1) != 0)
  {

  }
  else
  {
    v80 = -[CKCoreChatController isInline](self, "isInline");

    if (!v80)
    {
      v81 = (void *)MEMORY[0x1E0CEA688];
      CKFrameworkBundle();
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v82, "localizedStringForKey:value:table:", CFSTR("BALLOON_MORE_CALLOUT"), &stru_1E276D870, CFSTR("ChatKit"));
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      v88[0] = v7;
      v88[1] = 3221225472;
      v88[2] = __49__CKChatController__interfaceActionsForChatItem___block_invoke_6_970;
      v88[3] = &unk_1E274D360;
      v88[4] = self;
      v89 = v4;
      objc_msgSend(v81, "actionWithTitle:type:handler:", v83, 0, v88);
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "addObject:", v84);

    }
  }
  objc_destroyWeak(location);

  return v5;
}

void __49__CKChatController__interfaceActionsForChatItem___block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setWantsInlineOverlay:", 1);

  *a3 = 1;
}

void __49__CKChatController__interfaceActionsForChatItem___block_invoke_2(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "actionRetractIsTappedForChatItem:", *(_QWORD *)(a1 + 32));

  *a3 = 1;
}

void __49__CKChatController__interfaceActionsForChatItem___block_invoke_3(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  void *v5;
  void *v6;

  objc_msgSend(MEMORY[0x1E0CEA810], "generalPasteboard");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "pasteboardItemProviders");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setItemProviders:", v6);

  *a3 = 1;
}

void __49__CKChatController__interfaceActionsForChatItem___block_invoke_4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = objc_msgSend(*(id *)(a1 + 32), "isHighlighted");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "conversation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "chat");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "IMChatItem");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "guid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(*(id *)(a1 + 32), "messagePartRange");
  if (v5)
    v13 = 0;
  else
    v13 = 4;
  objc_msgSend(v8, "sendSyndicationAction:forMessagePartGUID:syndicatedMessagePartRange:", v13, v10, v12, v11);

  *a3 = 1;
}

void __49__CKChatController__interfaceActionsForChatItem___block_invoke_5(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  __CFString *v15;
  CKMediaObjectExportManager *v16;
  id v17;
  _QWORD v18[4];
  id v19;

  v4 = *(id *)(a1 + 32);
  objc_msgSend(v4, "mediaObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v4, "sender");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)MEMORY[0x1E0CB3940];
    CKFrameworkBundle();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("AUDIO_MESSAGE_VOICE_MEMO_LABEL"), &stru_1E276D870, CFSTR("ChatKit"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v6, "hasName") & 1) != 0)
      objc_msgSend(v6, "name");
    else
      objc_msgSend(v6, "displayID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stringWithFormat:", v9, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "userInterfaceLayoutDirection");

    if (v14 == 1)
      v15 = CFSTR("\u200F");
    else
      v15 = CFSTR("\u200E");
    -[__CFString stringByAppendingString:](v15, "stringByAppendingString:", v12);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v10 = 0;
  }
  v16 = objc_alloc_init(CKMediaObjectExportManager);
  -[CKMediaObjectExportManager setMetricsSource:](v16, "setMetricsSource:", *MEMORY[0x1E0D38890]);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __49__CKChatController__interfaceActionsForChatItem___block_invoke_6;
  v18[3] = &unk_1E274B1A0;
  v19 = v5;
  v17 = v5;
  -[CKMediaObjectExportManager exportMediaObject:withFileName:completion:](v16, "exportMediaObject:withFileName:completion:", v17, v10, v18);
  *a3 = 1;

}

void __49__CKChatController__interfaceActionsForChatItem___block_invoke_6(uint64_t a1, int a2, void *a3)
{
  id v5;
  int v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  int v10;
  id v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = IMOSLoggingEnabled();
  if (a2)
  {
    if (v6)
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = *(void **)(a1 + 32);
        v10 = 138412290;
        v11 = v8;
        _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "Successfully exported media object: %@", (uint8_t *)&v10, 0xCu);
      }
LABEL_9:

    }
  }
  else if (v6)
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 138412546;
      v11 = v5;
      v12 = 2112;
      v13 = v9;
      _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "Error exporting media object. error: %@, mediaObject: %@", (uint8_t *)&v10, 0x16u);
    }
    goto LABEL_9;
  }

}

void __49__CKChatController__interfaceActionsForChatItem___block_invoke_955(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id WeakRetained;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (IMOSLoggingEnabled())
  {
    CKLogCStringForType(29);
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "guid");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v20 = v7;
      v21 = 2112;
      v22 = v8;
      _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "Manually downgrading message with GUID {%@} -- conversation:%@", buf, 0x16u);

    }
  }
  if (os_log_shim_legacy_logging_enabled() && _CKShouldLogExternal())
  {
    objc_msgSend(*(id *)(a1 + 32), "guid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = *(_QWORD *)(a1 + 40);
    _CKLogExternal();

  }
  objc_msgSend(*(id *)(a1 + 40), "chat", v14, v15);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "downgradeMessage:manualDowngrade:", *(_QWORD *)(a1 + 32), 1);

  objc_msgSend(*(id *)(a1 + 32), "__ck_downgradedMessage");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "collectionViewController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __49__CKChatController__interfaceActionsForChatItem___block_invoke_958;
  v16[3] = &unk_1E274A0B8;
  v16[4] = *(_QWORD *)(a1 + 48);
  v17 = v10;
  v18 = *(id *)(a1 + 40);
  v13 = v10;
  objc_msgSend(v12, "updateTranscript:animated:completion:", v16, 0, 0);

  *a3 = 1;
}

void __49__CKChatController__interfaceActionsForChatItem___block_invoke_958(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v1 = (void *)a1[4];
  v2 = a1[5];
  v3 = a1[6];
  objc_msgSend(MEMORY[0x1E0D35910], "smsService");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "sendMessage:forConversation:onService:newComposition:", v2, v3, v4, 0);

}

void __49__CKChatController__interfaceActionsForChatItem___block_invoke_2_960(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

void __49__CKChatController__interfaceActionsForChatItem___block_invoke_3_963(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  void *v5;

  objc_msgSend(*(id *)(a1 + 32), "fullScreenBalloonViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "presentStickerDetailControllerWithStickers:", *(_QWORD *)(a1 + 40));

  *a3 = 0;
}

void __49__CKChatController__interfaceActionsForChatItem___block_invoke_4_966(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  dispatch_time_t v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v5 = dispatch_time(0, 200000000);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __49__CKChatController__interfaceActionsForChatItem___block_invoke_5_967;
  v6[3] = &unk_1E274D388;
  v7 = *(id *)(a1 + 32);
  objc_copyWeak(&v8, (id *)(a1 + 40));
  dispatch_after(v5, MEMORY[0x1E0C80D38], v6);
  *a3 = 1;
  objc_destroyWeak(&v8);

}

void __49__CKChatController__interfaceActionsForChatItem___block_invoke_5_967(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id WeakRetained;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", *MEMORY[0x1E0D37F18]);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", *MEMORY[0x1E0D37F30]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v6, "longLongValue"));
    v3 = objc_claimAutoreleasedReturnValue();

    v6 = (id)v3;
  }
  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", *MEMORY[0x1E0D37F70]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_presentBrowserOrAppStoreForAdamID:url:identifier:", v6, v4, v2);

}

uint64_t __49__CKChatController__interfaceActionsForChatItem___block_invoke_6_970(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "actionMoreIsTappedForChatItem:", *(_QWORD *)(a1 + 40));
  *a3 = 1;
  return result;
}

- (void)actionCancelIsTappedForChatItem:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a3;
  objc_opt_class();
  v4 = v7;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[CKChatController currentTopChatItemForAggregateChatItem:](self, "currentTopChatItemForAggregateChatItem:", v7);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  -[CKCoreChatController conversation](self, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "IMChatItem");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "retractMessagePart:", v6);

}

- (void)actionRetractIsTappedForChatItem:(id)a3
{
  id v4;
  void *v5;
  dispatch_time_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void *v16;
  CKChatController *v17;
  id v18;

  v4 = a3;
  objc_opt_class();
  v5 = v4;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[CKChatController currentTopChatItemForAggregateChatItem:](self, "currentTopChatItemForAggregateChatItem:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v6 = dispatch_time(0, 500000000);
  v13 = MEMORY[0x1E0C809B0];
  v14 = 3221225472;
  v15 = __53__CKChatController_actionRetractIsTappedForChatItem___block_invoke;
  v16 = &unk_1E274A108;
  v17 = self;
  v18 = v5;
  v7 = v5;
  dispatch_after(v6, MEMORY[0x1E0C80D38], &v13);
  objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance", v13, v14, v15, v16, v17);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "trackEvent:", *MEMORY[0x1E0D38928]);

  -[CKChatController tipManager](self, "tipManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "undoOrEditMessageUsed");

  v10 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v4, "timeIntervalSinceMessageSent");
  objc_msgSend(v10, "numberWithDouble:");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "trackEvent:withStatistic:", *MEMORY[0x1E0D38930], v11);

}

void __53__CKChatController_actionRetractIsTappedForChatItem___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(*(id *)(a1 + 32), "transcriptCollectionViewControllerPlaybackForOutgoingEffectsIsAllowed:"))
  {
    objc_msgSend(v5, "impactEffectManager");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "playUndoSendAnimationForChatItem:", *(_QWORD *)(a1 + 40));

  }
  objc_msgSend(*(id *)(a1 + 32), "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "IMChatItem");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "retractMessagePart:", v4);

}

- (void)actionMoreIsTappedForChatItem:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  -[CKChatController setEditing:animated:](self, "setEditing:animated:", 1, 1);
  if (v8)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "selectChatItem:", v8);

  }
  -[CKChatController _updateToolbarItems](self, "_updateToolbarItems");
  -[CKChatController view](self, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "window");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "firstResponder");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "reloadInputViews");

}

- (id)_fullScreenBalloonViewControllerWithChatItem:(id)a3
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  +[CKFullScreenBalloonViewDisplayConfiguration tapbackPickerContext](CKFullScreenBalloonViewDisplayConfiguration, "tapbackPickerContext");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _fullScreenBalloonViewControllerWithChatItem:displayConfiguration:](self, "_fullScreenBalloonViewControllerWithChatItem:displayConfiguration:", v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

- (id)_fullScreenBalloonViewControllerWithChatItem:(id)a3 displayConfiguration:(id)a4
{
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void (**v17)(_QWORD, _QWORD);
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void (**v22)(_QWORD, _QWORD);
  void *v23;
  objc_class *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v31;
  id v32;
  uint8_t buf[4];
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v32 = a4;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v34 = v6;
      _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "_fullScreenBalloonViewControllerWithChatItem, chatItem = %@", buf, 0xCu);
    }

  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "balloonViewForChatItem:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isEmojiTapbacksEnabled");

  if (!v11)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v20 = objc_msgSend(v9, "canUseOpaqueMask");
      if (v20)
      {
        objc_msgSend(v9, "setCanUseOpaqueMask:", 0);
        objc_msgSend(v9, "prepareForDisplayIfNeeded");
        objc_msgSend(v9, "layoutIfNeeded");
        objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
      }
      objc_msgSend(v9, "snapshotViewAfterScreenUpdates:", 0);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (v20)
      {
        objc_msgSend(v9, "setCanUseOpaqueMask:", 1);
        objc_msgSend(v9, "prepareForDisplayIfNeeded");
        objc_msgSend(v9, "layoutIfNeeded");
      }
      goto LABEL_18;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v9, "stackView");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "currentAssetReference");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "asset");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "chatItem");
      v31 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "regionOfInterestForAssetReference:", v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "placeholderViewFactory");
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      if (v21)
      {
        objc_msgSend(v15, "placeholderViewFactory");
        v22 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, void *))v22)[2](v22, v15);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v15, "imageViewSpec");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
      goto LABEL_21;
    }
LABEL_17:
    v18 = 0;
LABEL_18:
    v19 = 0;
    v23 = 0;
    goto LABEL_22;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_17;
  objc_msgSend(v9, "stackView");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "currentAssetReference");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "asset");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "chatItem");
  v31 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "regionOfInterestForAssetReference:", v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "placeholderViewFactory");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    objc_msgSend(v15, "placeholderViewFactory");
    v17 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v17)[2](v17, v15);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v32, "setSnapshotView:", v18);
    objc_msgSend(v15, "imageViewSpec");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
LABEL_21:

  v23 = v6;
  v6 = (id)v31;
LABEL_22:
  v24 = (objc_class *)objc_opt_class();
  if (CKIsRunningInMessagesTranscriptExtension())
    v24 = (objc_class *)objc_opt_class();
  v25 = [v24 alloc];
  -[CKChatController _menuTitleForChatItem:](self, "_menuTitleForChatItem:", v6);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _interfaceActionsForChatItem:](self, "_interfaceActionsForChatItem:", v6);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController view](self, "view");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = (void *)objc_msgSend(v25, "initWithChatItem:title:interfaceActions:gradientReferenceView:displayConfiguration:pluginBalloonSnapshot:delegate:", v6, v26, v27, v28, v32, v18, self);

  objc_msgSend(v29, "setSupplementaryLayoutChatItem:", v23);
  objc_msgSend(v29, "setSupplementaryLayoutContext:", v19);

  return v29;
}

- (CGRect)fullScreenBalloonViewController:(id)a3 stickerBoundsForChatItem:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  CGRect result;

  v5 = a4;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "cellForAssociatedChatItem:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "associatedItemView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[CKChatController view](self, "view");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "bounds");
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v17 = v16;
    objc_msgSend(v8, "superview");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "convertRect:fromView:", v18, v11, v13, v15, v17);
    v20 = v19;
    v22 = v21;
    v24 = v23;
    v26 = v25;

  }
  else
  {
    v20 = *MEMORY[0x1E0C9D648];
    v22 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v24 = *(double *)(MEMORY[0x1E0C9D648] + 16);
    v26 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  }

  v27 = v20;
  v28 = v22;
  v29 = v24;
  v30 = v26;
  result.size.height = v30;
  result.size.width = v29;
  result.origin.y = v28;
  result.origin.x = v27;
  return result;
}

- (CGPoint)fullScreenBalloonViewController:(id)a3 stickerCenterForChatItem:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGPoint result;

  v5 = a4;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "cellForAssociatedChatItem:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "associatedItemView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    -[CKChatController view](self, "view");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "center");
    v11 = v10;
    v13 = v12;
    objc_msgSend(v8, "superview");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "convertPoint:fromView:", v14, v11, v13);
    v16 = v15;
    v18 = v17;

  }
  else
  {
    v16 = *MEMORY[0x1E0C9D538];
    v18 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  }

  v19 = v16;
  v20 = v18;
  result.y = v20;
  result.x = v19;
  return result;
}

- (BOOL)shouldShowFullScreenAcknowledgmentPickerForChatItem:(id)a3
{
  id v4;
  BOOL v5;
  objc_super v7;

  v4 = a3;
  if (-[CKChatController isShowingOscarChat](self, "isShowingOscarChat")
    || -[CKChatController isEditingMessage](self, "isEditingMessage"))
  {
    v5 = 0;
  }
  else
  {
    v7.receiver = self;
    v7.super_class = (Class)CKChatController;
    v5 = -[CKCoreChatController shouldShowFullScreenAcknowledgmentPickerForChatItem:](&v7, sel_shouldShowFullScreenAcknowledgmentPickerForChatItem_, v4);
  }

  return v5;
}

- (BOOL)shouldShowTapbackPickerForChatItem:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  BOOL v10;
  objc_super v12;

  v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_4;
  v5 = (void *)MEMORY[0x1E0D35820];
  v6 = v4;
  objc_msgSend(v5, "sharedInstance");
  v7 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "transferGUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)v7, "transferForGUID:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  LOBYTE(v7) = +[CKCommSafetyHelper shouldDisableTranscriptCapabilitiesForFileTransfer:](CKCommSafetyHelper, "shouldDisableTranscriptCapabilitiesForFileTransfer:", v9);
  if ((v7 & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
LABEL_4:
    v12.receiver = self;
    v12.super_class = (Class)CKChatController;
    v10 = -[CKCoreChatController shouldShowTapbackPickerForChatItem:](&v12, sel_shouldShowTapbackPickerForChatItem_, v4);
  }

  return v10;
}

- (BOOL)shouldDismissKeyboardWhenShowingFullScreenAcknowledgmentPickerForBalloonChatItem:(id)a3
{
  double MaxY;
  void *v5;
  double Height;
  void *v7;
  double v8;
  double v9;
  _BOOL4 v10;
  void *v11;
  int v12;
  int v13;
  int v14;
  void *v15;
  void *v16;
  int v17;
  CGRect v19;
  CGRect v20;

  -[CKChatController fullScreenBalloonViewController:balloonFrameForChatItem:](self, "fullScreenBalloonViewController:balloonFrameForChatItem:", 0, a3);
  MaxY = CGRectGetMaxY(v19);
  -[CKChatController view](self, "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "bounds");
  Height = CGRectGetHeight(v20);
  -[CKChatController collectionView](self, "collectionView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "contentInset");
  v9 = v8;

  v10 = -[CKChatController isCollapsed](self, "isCollapsed");
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "canPresentOverKeyboard") ^ 1;
  if (MaxY > Height - v9)
    v13 = 1;
  else
    v13 = v12;

  v14 = v13 | !v10;
  if (v14 == 1)
  {
    -[CKChatController entryView](self, "entryView");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "contentView");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "isActive");

    if (v17)
    {
      -[CKChatController setEntryViewWasActiveOnContextMenuPresentation:](self, "setEntryViewWasActiveOnContextMenuPresentation:", 1);
      -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 1);
    }
  }
  return v14;
}

- (void)fullScreenBalloonViewController:(id)a3 didTapToSaveSticker:(id)a4
{
  id v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v5 = a4;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __72__CKChatController_fullScreenBalloonViewController_didTapToSaveSticker___block_invoke;
  v7[3] = &unk_1E274A108;
  v7[4] = self;
  v8 = v5;
  v6 = v5;
  -[CKChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:](self, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:", 1, 0, v7);

}

uint64_t __72__CKChatController_fullScreenBalloonViewController_didTapToSaveSticker___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "saveStickerFromTapbackAttributionFlow:", *(_QWORD *)(a1 + 40));
}

- (void)fullScreenBalloonViewControllerWillTransitionToKeyboardInput:(id)a3
{
  -[CKChatController hideExistingKeyboardSnapshot](self, "hideExistingKeyboardSnapshot", a3);
  -[CKChatController updateActiveEntryViewPositioningGuide](self, "updateActiveEntryViewPositioningGuide");
}

- (void)fullScreenBalloonViewControllerWillReturnToSuggestionsPicker:(id)a3
{
  -[CKChatController revealExistingKeyboardSnapshot](self, "revealExistingKeyboardSnapshot", a3);
  -[CKChatController updateActiveEntryViewPositioningGuide](self, "updateActiveEntryViewPositioningGuide");
}

- (BOOL)showFullScreenAcknowledgmentPickerIfNeededForBalloonAtIndexPath:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  objc_super v13;
  uint8_t buf[16];

  v4 = a3;
  if (!v4)
  {
LABEL_8:
    LOBYTE(v7) = 0;
    goto LABEL_14;
  }
  if (!-[CKCoreChatController isInline](self, "isInline"))
  {
    -[CKChatController inlineReplyController](self, "inlineReplyController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "Not presenting tapback picker: inlineReplyController active", buf, 2u);
        }

      }
      goto LABEL_8;
    }
  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "chatItems");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectAtIndex:", objc_msgSend(v4, "item"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v13.receiver = self;
  v13.super_class = (Class)CKChatController;
  v7 = -[CKCoreChatController showFullScreenAcknowledgmentPickerIfNeededForBalloonAtIndexPath:](&v13, sel_showFullScreenAcknowledgmentPickerIfNeededForBalloonAtIndexPath_, v4);
  if (v7)
  {
    if (-[CKChatController shouldDismissKeyboardWhenShowingFullScreenAcknowledgmentPickerForBalloonChatItem:](self, "shouldDismissKeyboardWhenShowingFullScreenAcknowledgmentPickerForBalloonChatItem:", v10))
    {
      -[CKCoreChatController inputController](self, "inputController");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "dismissBrowserViewController");

      -[CKChatController dismissKeyboard](self, "dismissKeyboard");
    }
    -[CKChatController hideAssociatedCellsForChatItem:](self, "hideAssociatedCellsForChatItem:", v10);
    -[CKChatController updateActiveEntryViewPositioningGuide](self, "updateActiveEntryViewPositioningGuide");
  }

LABEL_14:
  return v7;
}

- (void)hideAssociatedCellsForChatItem:(id)a3
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isKindOfClass;
  int v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  id obj;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  objc_msgSend(a3, "visibleAssociatedMessageChatItems");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(obj);
        v7 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v6);
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();
        objc_opt_class();
        v9 = objc_opt_isKindOfClass();
        +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "longPressHidesAssociatedAcknowledgments");

        if ((isKindOfClass & 1) != 0 || (v9 & v11) != 0)
        {
          -[CKCoreChatController collectionViewController](self, "collectionViewController");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "cellForAssociatedChatItem:", v7);
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v13, "performHide:", 0);
        }
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v4);
  }

}

- (void)setIgnoresAutomaticScrollsTowardBottom:(BOOL)a3
{
  _BOOL8 v3;
  void *v4;
  id v5;

  v3 = a3;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "collectionView");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setIgnoresAutomaticScrollsTowardBottom:", v3);
}

- (void)showSMSReportSpamExtensionControllerForMessages:(id)a3
{
  id v4;
  objc_class *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  Class v29;
  objc_class *v30;
  CKChatController *v31;
  void *v32;
  objc_class *v33;
  id obj;
  id v35;
  void *v36;
  _QWORD v37[4];
  id v38;
  CKChatController *v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t buf[4];
  id v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (objc_class *)MEMORY[0x193FF3C18](CFSTR("ILMessageCommunication"), CFSTR("IdentityLookup"));
  v33 = (objc_class *)MEMORY[0x193FF3C18](CFSTR("ILMessageClassificationRequest"), CFSTR("IdentityLookup"));
  v6 = MEMORY[0x193FF3C18](CFSTR("ILClassificationUIExtensionHostViewController"), CFSTR("IdentityLookupUI"));
  if (v5 && v33 && v6)
  {
    v29 = (Class)v6;
    v32 = v4;
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "SMS Report Spam classes exist -- going to display controller", buf, 2u);
      }

    }
    v31 = self;
    -[CKCoreChatController chat](self, "chat", v29);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "participants");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "firstObject");
    v36 = (void *)objc_claimAutoreleasedReturnValue();

    v35 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    obj = v32;
    v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v42;
      do
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v42 != v11)
            objc_enumerationMutation(obj);
          v13 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * i);
          if (objc_msgSend(v13, "hasDataDetectorResults"))
          {
            objc_msgSend(v13, "body");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v14, "string");
            v15 = (void *)objc_claimAutoreleasedReturnValue();

          }
          else
          {
            objc_msgSend(v13, "plainBody");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
          }
          v16 = [v5 alloc];
          objc_msgSend(v36, "ID");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "im_stripCategoryLabel");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "time");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = (void *)objc_msgSend(v16, "initWithSender:dateReceived:messageBody:", v18, v19, v15);

          objc_msgSend(v35, "addObject:", v20);
        }
        v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
      }
      while (v10);
    }

    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v46 = v35;
        _os_log_impl(&dword_18DFCD000, v21, OS_LOG_TYPE_INFO, "Going to report the following communications: %@", buf, 0xCu);
      }

    }
    v22 = (void *)objc_msgSend([v33 alloc], "initWithMessageCommunications:", v35);
    v23 = [v30 alloc];
    objc_msgSend(v36, "ID");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "countryCode");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = (void *)objc_msgSend(v23, "initUnactivatedVCWithRequest:sender:isoCountryCode:", v22, v24, v25);

    objc_msgSend(v26, "setDelegate:", v31);
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 3221225472;
    v37[2] = __68__CKChatController_showSMSReportSpamExtensionControllerForMessages___block_invoke;
    v37[3] = &unk_1E274D3B0;
    v38 = v22;
    v39 = v31;
    v40 = v26;
    v27 = v26;
    v28 = v22;
    objc_msgSend(v27, "activateExtensionWithCompletion:", v37);

    v4 = v32;
  }

}

void __68__CKChatController_showSMSReportSpamExtensionControllerForMessages___block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  _QWORD block[4];
  id v6;
  uint64_t v7;
  id v8;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __68__CKChatController_showSMSReportSpamExtensionControllerForMessages___block_invoke_2;
  block[3] = &unk_1E274A0B8;
  v2 = *(id *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(a1 + 48);
  v6 = v2;
  v7 = v3;
  v8 = v4;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

uint64_t __68__CKChatController_showSMSReportSpamExtensionControllerForMessages___block_invoke_2(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v5 = 138412290;
      v6 = v3;
      _os_log_impl(&dword_18DFCD000, v2, OS_LOG_TYPE_INFO, "Going to display spam extension for message classification request: %@", (uint8_t *)&v5, 0xCu);
    }

  }
  return objc_msgSend(*(id *)(a1 + 40), "presentViewController:animated:completion:", *(_QWORD *)(a1 + 48), 1, 0);
}

- (BOOL)isFullScreenBalloonViewOnScreen
{
  void *v3;
  void *v4;
  char v5;
  objc_super v7;

  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[CKChatController inlineReplyController](self, "inlineReplyController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isFullScreenBalloonViewOnScreen");

    return v5;
  }
  else
  {
    v7.receiver = self;
    v7.super_class = (Class)CKChatController;
    return -[CKCoreChatController isFullScreenBalloonViewOnScreen](&v7, sel_isFullScreenBalloonViewOnScreen);
  }
}

- (CGRect)fullScreenBalloonViewController:(id)a3 balloonFrameForChatItem:(id)a4
{
  id v6;
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  void *v24;
  void *v25;
  char isKindOfClass;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  objc_super v39;
  CGRect result;

  v6 = a3;
  v7 = a4;
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
  {
    -[CKChatController photosGridFullScreenBalloonViewController:balloonFrameForChatItem:](self, "photosGridFullScreenBalloonViewController:balloonFrameForChatItem:", v6, v7);
LABEL_10:
    v16 = v8;
    v18 = v9;
    v20 = v10;
    v22 = v11;
    goto LABEL_11;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "balloonViewForChatItem:", v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKChatController view](self, "view");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "ck_identityTransformFrameInView:", v14);
    v16 = v15;
    v18 = v17;
    v20 = v19;
    v22 = v21;

  }
  else
  {
    objc_msgSend(v6, "supplementaryLayoutChatItem");
    v23 = objc_claimAutoreleasedReturnValue();
    if (!v23
      || (v24 = (void *)v23,
          objc_msgSend(v6, "supplementaryLayoutChatItem"),
          v25 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_opt_class(),
          isKindOfClass = objc_opt_isKindOfClass(),
          v25,
          v24,
          (isKindOfClass & 1) == 0))
    {
      v39.receiver = self;
      v39.super_class = (Class)CKChatController;
      -[CKCoreChatController fullScreenBalloonViewController:balloonFrameForChatItem:](&v39, sel_fullScreenBalloonViewController_balloonFrameForChatItem_, v6, v7);
      goto LABEL_10;
    }
    -[CKChatController view](self, "view");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "coordinateSpace");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "supplementaryLayoutChatItem");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "balloonViewForChatItem:", v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v30, "currentAssetFrameInCoordinateSpace:", v13);
    v16 = v31;
    v18 = v32;
    v20 = v33;
    v22 = v34;

  }
LABEL_11:

  v35 = v16;
  v36 = v18;
  v37 = v20;
  v38 = v22;
  result.size.height = v38;
  result.size.width = v37;
  result.origin.y = v36;
  result.origin.x = v35;
  return result;
}

- (void)fullScreenBalloonViewControllerHandleDismissTap:(id)a3
{
  id v4;
  objc_super v5;

  v4 = a3;
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
  {
    -[CKChatController photosGridFullScreenBalloonViewControllerHandleDismissTap:](self, "photosGridFullScreenBalloonViewControllerHandleDismissTap:", v4);
  }
  else
  {
    v5.receiver = self;
    v5.super_class = (Class)CKChatController;
    -[CKCoreChatController fullScreenBalloonViewControllerHandleDismissTap:](&v5, sel_fullScreenBalloonViewControllerHandleDismissTap_, v4);
  }

}

- (BOOL)fullScreenBalloonViewControllerShouldShowReplyButton:(id)a3
{
  id v4;
  unsigned __int8 v5;
  BOOL v6;
  objc_super v8;

  v4 = a3;
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
  {
    v5 = -[CKChatController photosGridFullScreenBalloonViewControllerShouldShowReplyButton:](self, "photosGridFullScreenBalloonViewControllerShouldShowReplyButton:", v4);
  }
  else
  {
    v8.receiver = self;
    v8.super_class = (Class)CKChatController;
    v5 = -[CKCoreChatController fullScreenBalloonViewControllerShouldShowReplyButton:](&v8, sel_fullScreenBalloonViewControllerShouldShowReplyButton_, v4);
  }
  v6 = v5;

  return v6;
}

- (BOOL)fullScreenBalloonViewControllerShouldShowHightlightButton:(id)a3 forChatItem:(id)a4
{
  id v6;
  id v7;
  unsigned __int8 v8;
  BOOL v9;
  objc_super v11;

  v6 = a4;
  v7 = a3;
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
  {
    v8 = -[CKChatController photosGridFullScreenBalloonViewControllerShouldShowHightlightButton:forChatItem:](self, "photosGridFullScreenBalloonViewControllerShouldShowHightlightButton:forChatItem:", v7, v6);
  }
  else
  {
    v11.receiver = self;
    v11.super_class = (Class)CKChatController;
    v8 = -[CKCoreChatController fullScreenBalloonViewControllerShouldShowHightlightButton:forChatItem:](&v11, sel_fullScreenBalloonViewControllerShouldShowHightlightButton_forChatItem_, v7, v6);
  }
  v9 = v8;

  return v9;
}

- (void)fullScreenBalloonViewController:(id)a3 sendMessageHighlight:(BOOL)a4 forChatItem:(id)a5
{
  _BOOL8 v5;
  id v8;
  id v9;
  objc_super v10;

  v5 = a4;
  v8 = a5;
  v9 = a3;
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
  {
    -[CKChatController photosGridFullScreenBalloonViewController:sendMessageHighlight:forChatItem:](self, "photosGridFullScreenBalloonViewController:sendMessageHighlight:forChatItem:", v9, v5, v8);
  }
  else
  {
    v10.receiver = self;
    v10.super_class = (Class)CKChatController;
    -[CKCoreChatController fullScreenBalloonViewController:sendMessageHighlight:forChatItem:](&v10, sel_fullScreenBalloonViewController_sendMessageHighlight_forChatItem_, v9, v5, v8);
  }

}

- (void)fullScreenBalloonViewController:(id)a3 willAppearAnimated:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  objc_super v13;

  v4 = a4;
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isEmojiTapbacksEnabled");

  if (v8)
  {
    if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
    {
      -[CKChatController photosGridFullScreenBalloonViewController:didAppearAnimated:](self, "photosGridFullScreenBalloonViewController:didAppearAnimated:", v6, v4);
    }
    else
    {
      -[CKChatController collectionView](self, "collectionView");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setTranscriptScrollIntent:", 8);

      v13.receiver = self;
      v13.super_class = (Class)CKChatController;
      -[CKCoreChatController fullScreenBalloonViewController:willAppearAnimated:](&v13, sel_fullScreenBalloonViewController_willAppearAnimated_, v6, v4);
      objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v9) = objc_msgSend(v10, "isEmojiTapbacksEnabled");

      if ((_DWORD)v9)
      {
        objc_msgSend(v6, "displayConfiguration");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = objc_msgSend(v11, "type");

        if (v12 == 1)
          -[CKChatController requestShowKeyboardSnapshotForReason:](self, "requestShowKeyboardSnapshotForReason:", 16);
      }
      -[CKChatController updateActiveEntryViewPositioningGuide](self, "updateActiveEntryViewPositioningGuide");
    }
  }

}

- (void)fullScreenBalloonViewController:(id)a3 didAppearAnimated:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  CGFloat v11;
  CGFloat v12;
  objc_super v13;
  objc_super v14;

  v4 = a4;
  v6 = a3;
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
  {
    -[CKChatController photosGridFullScreenBalloonViewController:didAppearAnimated:](self, "photosGridFullScreenBalloonViewController:didAppearAnimated:", v6, v4);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isEmojiTapbacksEnabled");

    if (v8)
    {
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "collectionView");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "contentOffset");
      self->_startingScrollOffset.x = v11;
      self->_startingScrollOffset.y = v12;

      v14.receiver = self;
      v14.super_class = (Class)CKChatController;
      -[CKCoreChatController fullScreenBalloonViewController:didAppearAnimated:](&v14, sel_fullScreenBalloonViewController_didAppearAnimated_, v6, v4);
      -[CKChatController beginHoldingAutorotationForKey:](self, "beginHoldingAutorotationForKey:", CFSTR("CKAutorotationFullScreenBubble"));
      -[CKChatController updateActiveEntryViewPositioningGuide](self, "updateActiveEntryViewPositioningGuide");
    }
    else
    {
      v13.receiver = self;
      v13.super_class = (Class)CKChatController;
      -[CKCoreChatController fullScreenBalloonViewController:didAppearAnimated:](&v13, sel_fullScreenBalloonViewController_didAppearAnimated_, v6, v4);
    }
  }

}

- (double)_currentScrollDelta
{
  void *v3;
  void *v4;
  double v5;
  double v6;

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "collectionView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "contentOffset");
  v6 = v5;

  return self->_startingScrollOffset.y - v6;
}

- (void)fullScreenBalloonViewController:(id)a3 willDisappearWithSendAnimation:(BOOL)a4 duration:(double)a5
{
  _BOOL8 v6;
  id v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  objc_super v18;

  v6 = a4;
  v8 = a3;
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
  {
    -[CKChatController photosGridFullScreenBalloonViewController:willDisappearWithSendAnimation:](self, "photosGridFullScreenBalloonViewController:willDisappearWithSendAnimation:", v8, v6);
  }
  else
  {
    v18.receiver = self;
    v18.super_class = (Class)CKChatController;
    -[CKCoreChatController fullScreenBalloonViewController:willDisappearWithSendAnimation:duration:](&v18, sel_fullScreenBalloonViewController_willDisappearWithSendAnimation_duration_, v8, v6, a5);
    -[CKChatController setIgnoresAutomaticScrollsTowardBottom:](self, "setIgnoresAutomaticScrollsTowardBottom:", 0);
    -[CKChatController _currentScrollDelta](self, "_currentScrollDelta");
    if (v9 != 0.0)
    {
      v10 = v9;
      -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "displayConfiguration");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "type");

      if (v13 == 2)
      {
        objc_msgSend(v8, "chatItem");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController updateChatItemBalloonViewAndStickerViews:hidden:](self, "updateChatItemBalloonViewAndStickerViews:hidden:", v14, 1);

      }
      objc_msgSend(v8, "displayConfiguration");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "shouldReturnToStartingScrollOffset");

      if (v16)
      {
        -[CKCoreChatController collectionViewController](self, "collectionViewController");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "verticallyScrollTranscriptByAmount:animated:duration:completion:", 1, 0, v10, a5);

      }
    }
  }

}

- (void)fullScreenBalloonViewController:(id)a3 sendMessageAcknowledgment:(int64_t)a4 forChatItem:(id)a5
{
  id v8;
  id v9;
  NSObject *v10;
  _QWORD v11[5];
  id v12;
  int64_t v13;

  v8 = a3;
  v9 = a5;
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
  {
    -[CKChatController photosGridFullScreenBalloonViewController:sendMessageAcknowledgment:forChatItem:](self, "photosGridFullScreenBalloonViewController:sendMessageAcknowledgment:forChatItem:", v8, a4, v9);
  }
  else
  {
    -[CKChatController revealAnimationGroup](self, "revealAnimationGroup");
    v10 = objc_claimAutoreleasedReturnValue();
    dispatch_group_enter(v10);

    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __90__CKChatController_fullScreenBalloonViewController_sendMessageAcknowledgment_forChatItem___block_invoke;
    v11[3] = &unk_1E274A420;
    v11[4] = self;
    v13 = a4;
    v12 = v9;
    -[CKChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:](self, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:", 1, 1, v11);

  }
}

void __90__CKChatController_fullScreenBalloonViewController_sendMessageAcknowledgment_forChatItem___block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  _QWORD block[5];
  id v7;
  uint64_t v8;

  objc_msgSend(*(id *)(a1 + 32), "revealAnimationGroup");
  v2 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[2] = __90__CKChatController_fullScreenBalloonViewController_sendMessageAcknowledgment_forChatItem___block_invoke_2;
  block[3] = &unk_1E274A420;
  v4 = *(void **)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  block[4] = *(_QWORD *)(a1 + 32);
  v8 = v3;
  block[1] = 3221225472;
  v7 = v4;
  dispatch_group_notify(v2, MEMORY[0x1E0C80D38], block);

  objc_msgSend(*(id *)(a1 + 32), "revealAnimationGroup");
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_group_leave(v5);

}

void __90__CKChatController_fullScreenBalloonViewController_sendMessageAcknowledgment_forChatItem___block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  char isKindOfClass;
  void *v7;
  void *v8;
  id v9;

  objc_msgSend(*(id *)(a1 + 32), "chat");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "sendMessageAcknowledgment:forChatItem:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));

  if ((objc_msgSend(*(id *)(a1 + 32), "showingInStandAloneWindow") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "delegate");
    v3 = objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      v4 = (void *)v3;
      objc_msgSend(*(id *)(a1 + 32), "delegate");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();

      if ((isKindOfClass & 1) != 0)
      {
        objc_msgSend(*(id *)(a1 + 32), "delegate");
        v9 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "conversationListController");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "conversation");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "updateConversationListForMessageSentToConversation:", v8);

      }
    }
  }
}

- (void)fullScreenBalloonViewControllerDidDisappear:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  void *v23;
  id v24;
  CKChatController *v25;

  v4 = a3;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isExpressiveTextEnabled");

  if (v6)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_msgSend(v7, "setTextEffectCoordinatorPaused:reason:", 0, CFSTR("fullscreen view controller did disappear"));

  }
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
  {
    -[CKChatController photosGridFullScreenBalloonViewControllerDidDisappear:](self, "photosGridFullScreenBalloonViewControllerDidDisappear:", v4);
  }
  else
  {
    objc_msgSend(v4, "supplementaryLayoutChatItem");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      v10 = v8;
    }
    else
    {
      objc_msgSend(v4, "chatItem");
      v10 = (id)objc_claimAutoreleasedReturnValue();
    }
    v11 = v10;

    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "chatItem");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "balloonViewForChatItem:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v14, "setInvisibleInkEffectPaused:", 0);
    if ((objc_msgSend(v4, "willPresentInlineReplies") & 1) == 0)
    {
      objc_msgSend(v4, "chatItem");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController updateChatItemBalloonViewAndStickerViews:hidden:](self, "updateChatItemBalloonViewAndStickerViews:hidden:", v15, 0);

    }
    v20 = MEMORY[0x1E0C809B0];
    v21 = 3221225472;
    v22 = __64__CKChatController_fullScreenBalloonViewControllerDidDisappear___block_invoke;
    v23 = &unk_1E274A108;
    v16 = v4;
    v24 = v16;
    v25 = self;
    v17 = _Block_copy(&v20);
    objc_msgSend(v16, "displayConfiguration", v20, v21, v22, v23);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "shouldShowStickers") ^ 1;

    -[CKChatController showAssociatedCellsForChatItem:animated:completion:](self, "showAssociatedCellsForChatItem:animated:completion:", v11, v19, v17);
  }

}

void __64__CKChatController_fullScreenBalloonViewControllerDidDisappear___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;
  objc_super v15;

  v2 = *(_QWORD *)(a1 + 32);
  v15.receiver = *(id *)(a1 + 40);
  v15.super_class = (Class)CKChatController;
  objc_msgSendSuper2(&v15, sel_fullScreenBalloonViewControllerDidDisappear_, v2);
  objc_msgSend(*(id *)(a1 + 40), "endHoldingAutorotationForKey:", CFSTR("CKAutorotationFullScreenBubble"));
  if (objc_msgSend(*(id *)(a1 + 40), "targetFirstResponder") == 1)
    objc_msgSend(*(id *)(a1 + 40), "becomeFirstResponder");
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEmojiTapbacksEnabled");

  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 40), "collectionViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "updateTranscriptScrollIntentToBottomOrHistoryBasedOnCurrentContentOffset");

    +[CKScrollViewAnimationProperties systemDefaultScrollAnimation](CKScrollViewAnimationProperties, "systemDefaultScrollAnimation");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "collectionViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "collectionView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "enforceTranscriptScrollIntentWithAnimationProperties:", v6);

  }
  objc_msgSend(*(id *)(a1 + 40), "setRevealAnimationGroup:", 0);
  if ((objc_msgSend(*(id *)(a1 + 40), "isAnimatingStickerReaction") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 40), "inputController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "endStickerReactionSession");

    objc_msgSend(*(id *)(a1 + 40), "updateActiveEntryViewPositioningGuide");
  }
  objc_msgSend(*(id *)(a1 + 32), "view");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "removeFromSuperview");

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "isEmojiTapbacksEnabled");

  if (v12)
  {
    objc_msgSend(*(id *)(a1 + 32), "displayConfiguration");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "type");

    if (v14 == 1)
      objc_msgSend(*(id *)(a1 + 40), "requestDismissKeyboardSnapshotForReason:", 16);
  }
}

- (void)showAssociatedCellsForChatItem:(id)a3 animated:(BOOL)a4 completion:(id)a5
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  char isKindOfClass;
  int v13;
  void *v14;
  int v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  dispatch_block_t block;
  void *v27;
  id v28;
  id obj;
  _BOOL4 v30;
  _QWORD aBlock[4];
  NSObject *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  _BYTE v43[128];
  uint64_t v44;

  v30 = a4;
  v44 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  block = a5;
  v27 = v6;
  v28 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  objc_msgSend(v6, "visibleAssociatedMessageChatItems");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v39;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v39 != v9)
          objc_enumerationMutation(obj);
        v11 = *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * i);
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();
        objc_opt_class();
        v13 = objc_opt_isKindOfClass();
        +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "longPressHidesAssociatedAcknowledgments");

        if ((isKindOfClass & 1) != 0 || (v13 & v15) != 0)
          objc_msgSend(v28, "addObject:", v11);
      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
    }
    while (v8);
  }

  -[CKChatController revealAnimationGroup](self, "revealAnimationGroup");
  v16 = objc_claimAutoreleasedReturnValue();
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v17 = v28;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v35;
    do
    {
      for (j = 0; j != v19; ++j)
      {
        if (*(_QWORD *)v35 != v20)
          objc_enumerationMutation(v17);
        v22 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * j);
        -[CKCoreChatController collectionViewController](self, "collectionViewController");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "cellForAssociatedChatItem:", v22);
        v24 = (void *)objc_claimAutoreleasedReturnValue();

        if (v24)
        {
          dispatch_group_enter(v16);
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 3221225472;
          aBlock[2] = __71__CKChatController_showAssociatedCellsForChatItem_animated_completion___block_invoke;
          aBlock[3] = &unk_1E274A208;
          v33 = v16;
          v25 = _Block_copy(aBlock);
          objc_msgSend(v24, "performRevealAnimated:completion:", v30, v25);

        }
      }
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
    }
    while (v19);
  }

  if (block)
    dispatch_group_notify(v16, MEMORY[0x1E0C80D38], block);

}

void __71__CKChatController_showAssociatedCellsForChatItem_animated_completion___block_invoke(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

- (OS_dispatch_group)revealAnimationGroup
{
  OS_dispatch_group *revealAnimationGroup;
  OS_dispatch_group *v4;
  OS_dispatch_group *v5;

  revealAnimationGroup = self->_revealAnimationGroup;
  if (!revealAnimationGroup)
  {
    v4 = (OS_dispatch_group *)dispatch_group_create();
    v5 = self->_revealAnimationGroup;
    self->_revealAnimationGroup = v4;

    revealAnimationGroup = self->_revealAnimationGroup;
  }
  return revealAnimationGroup;
}

- (void)fullScreenBalloonViewController:(id)a3 verticallyScrollTranscriptByAmount:(double)a4 animated:(BOOL)a5 duration:(double)a6 completion:(id)a7
{
  _BOOL8 v9;
  id v12;
  void *v13;
  id v14;

  v9 = a5;
  v14 = a3;
  v12 = a7;
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
  {
    -[CKChatController photosGridFullScreenBalloonViewController:verticallyScrollTranscriptByAmount:animated:duration:completion:](self, "photosGridFullScreenBalloonViewController:verticallyScrollTranscriptByAmount:animated:duration:completion:", v14, v9, v12, a4, a6);
  }
  else
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "verticallyScrollTranscriptByAmount:animated:duration:completion:", v9, v12, a4, a6);

  }
}

- (void)fullScreenBalloonViewController:(id)a3 stickerPackTappedWithAdamID:(id)a4
{
  id v6;
  id v7;
  dispatch_time_t v8;
  _QWORD v9[5];
  id v10;

  v6 = a3;
  v7 = a4;
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
  {
    -[CKChatController photosGridFullScreenBalloonViewController:stickerPackTappedWithAdamID:](self, "photosGridFullScreenBalloonViewController:stickerPackTappedWithAdamID:", v6, v7);
  }
  else
  {
    v8 = dispatch_time(0, 300000000);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __80__CKChatController_fullScreenBalloonViewController_stickerPackTappedWithAdamID___block_invoke;
    v9[3] = &unk_1E274A108;
    v9[4] = self;
    v10 = v7;
    dispatch_after(v8, MEMORY[0x1E0C80D38], v9);

  }
}

uint64_t __80__CKChatController_fullScreenBalloonViewController_stickerPackTappedWithAdamID___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_presentAppStoreForAdamID:", *(_QWORD *)(a1 + 40));
}

- (void)_presentAppStoreForAdamID:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v8 = 138412290;
      v9 = v4;
      _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "present app store for ID: %@", (uint8_t *)&v8, 0xCu);
    }

  }
  -[CKCoreChatController inputController](self, "inputController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "presentAppStoreForAdamID:", v4);

  objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "trackEvent:", *MEMORY[0x1E0D38498]);

}

- (void)fullScreenBalloonViewController:(id)a3 deleteStickerWithTransferGUID:(id)a4
{
  id v6;
  id v7;

  v7 = a3;
  v6 = a4;
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
    -[CKChatController photosGridFullScreenBalloonViewController:deleteStickerWithTransferGUID:](self, "photosGridFullScreenBalloonViewController:deleteStickerWithTransferGUID:", v7, v6);
  else
    -[CKChatController _deleteStickerWithTransferGUID:](self, "_deleteStickerWithTransferGUID:", v6);

}

- (void)fullScreenBalloonViewController:(id)a3 didRequestSaveSticker:(id)a4
{
  -[CKChatController saveStickerFromEmojiDetails:](self, "saveStickerFromEmojiDetails:", a4);
}

- (void)_deleteStickerWithTransferGUID:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  id v8;
  int v9;
  const char *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKCoreChatController chat](self, "chat");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "deleteTransfers:", v6);

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v9 = 136315138;
      v10 = "-[CKChatController _deleteStickerWithTransferGUID:]";
      _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "%s requesting purge of default snapshot", (uint8_t *)&v9, 0xCu);
    }

  }
  v8 = objc_alloc_init(MEMORY[0x1E0DAAD88]);
  objc_msgSend(v8, "deleteSnapshotsForApplicationIdentifier:", CFSTR("com.apple.MobileSMS"));
  objc_msgSend(v8, "invalidate");

}

- (void)fullScreenBalloonViewController:(id)a3 replyButtonPressedForChatItem:(id)a4
{
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  CKChatController *v10;

  v6 = a3;
  v7 = a4;
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
  {
    -[CKChatController photosGridFullScreenBalloonViewController:replyButtonPressedForChatItem:](self, "photosGridFullScreenBalloonViewController:replyButtonPressedForChatItem:", v6, v7);
  }
  else
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __82__CKChatController_fullScreenBalloonViewController_replyButtonPressedForChatItem___block_invoke;
    v8[3] = &unk_1E274A108;
    v9 = v7;
    v10 = self;
    -[CKChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:](self, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:", 1, 0, v8);

  }
}

uint64_t __82__CKChatController_fullScreenBalloonViewController_replyButtonPressedForChatItem___block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
    return objc_msgSend(*(id *)(result + 40), "showInlineReplyControllerForChatItem:presentKeyboard:", v1, 1);
  return result;
}

- (id)chatItems
{
  void *v2;
  void *v3;

  -[CKCoreChatController chat](self, "chat");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "chatItems");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (BOOL)_anyLegacyBannerIsVisible
{
  void *v3;
  BOOL v4;
  void *v5;

  -[CKChatController nicknameBanner](self, "nicknameBanner");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = 1;
  }
  else
  {
    -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v5 != 0;

  }
  return v4;
}

- (BOOL)_anySuggestionPresenterWantsToShowBanner
{
  void *v3;
  char v4;
  void *v5;

  -[CKChatController standardSuggestionPresenter](self, "standardSuggestionPresenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "wantsToShowBanner") & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    -[CKChatController foundInSuggestionPresenter](self, "foundInSuggestionPresenter");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v5, "wantsToShowBanner");

  }
  return v4;
}

- (BOOL)_wantsToShowCollaborationNotices
{
  void *v2;
  BOOL v3;

  -[CKChatController collaborationNoticeSuggestions](self, "collaborationNoticeSuggestions");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count") != 0;

  return v3;
}

- (void)suggestionPresenterWantsToShowBanner:(id)a3
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a3;
  -[CKChatController suggestionBannerView](self, "suggestionBannerView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4 == 0;

  objc_msgSend(v9, "banner");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController setSuggestionBannerView:](self, "setSuggestionBannerView:", v6);

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[CKChatController transitionContext](self, "transitionContext");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v7, "isParentChatControllerShowingBanner") ^ 1;

  }
  objc_msgSend(v9, "banner");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController addSuggestionBanner:animated:](self, "addSuggestionBanner:animated:", v8, v5);

}

- (void)suggestionPresenterWantsToHideBanner:(id)a3
{
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a3;
  -[CKChatController standardSuggestionPresenter](self, "standardSuggestionPresenter");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (v4 == v12)
  {

  }
  else
  {
    -[CKChatController foundInSuggestionPresenter](self, "foundInSuggestionPresenter");
    v5 = (id)objc_claimAutoreleasedReturnValue();

    v6 = v12;
    if (v5 != v12)
      goto LABEL_11;
  }
  -[CKChatController standardSuggestionPresenter](self, "standardSuggestionPresenter");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  if (v7 == v12)
    -[CKChatController foundInSuggestionPresenter](self, "foundInSuggestionPresenter");
  else
    -[CKChatController standardSuggestionPresenter](self, "standardSuggestionPresenter");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "banner");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController removeSuggestionsBanner:animated:](self, "removeSuggestionsBanner:animated:", v9, 1);

  -[CKChatController setSuggestionBannerView:](self, "setSuggestionBannerView:", 0);
  if (objc_msgSend(v8, "wantsToShowBanner"))
  {
    objc_msgSend(v12, "banner");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController setSuggestionBannerView:](self, "setSuggestionBannerView:", v10);

    objc_msgSend(v8, "banner");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController addSuggestionBanner:animated:](self, "addSuggestionBanner:animated:", v11, 1);

  }
  v6 = v12;
LABEL_11:

}

- (void)removeSuggestionsBanner:(id)a3 animated:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  NSLayoutConstraint *suggestionBannerTopConstraint;
  _QWORD v12[4];
  id v13;
  CKChatController *v14;
  _QWORD v15[4];
  id v16;
  CKChatController *v17;

  v4 = a4;
  v6 = a3;
  if (v4)
  {
    -[CKChatController view](self, "view");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "layoutIfNeeded");

    v8 = (void *)MEMORY[0x1E0CEABB0];
    v9 = MEMORY[0x1E0C809B0];
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __53__CKChatController_removeSuggestionsBanner_animated___block_invoke;
    v15[3] = &unk_1E274A108;
    v16 = v6;
    v17 = self;
    v12[0] = v9;
    v12[1] = 3221225472;
    v12[2] = __53__CKChatController_removeSuggestionsBanner_animated___block_invoke_2;
    v12[3] = &unk_1E274BE58;
    v13 = v16;
    v14 = self;
    objc_msgSend(v8, "animateWithDuration:animations:completion:", v15, v12, 0.3);

  }
  else
  {
    -[CKChatController suggestionBannerTopConstraint](self, "suggestionBannerTopConstraint");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "removeConstraint:", v10);

    suggestionBannerTopConstraint = self->_suggestionBannerTopConstraint;
    self->_suggestionBannerTopConstraint = 0;

    objc_msgSend(v6, "removeFromSuperview");
    -[CKChatController _updateTranscriptOffsetForBannerView](self, "_updateTranscriptOffsetForBannerView");
  }

}

uint64_t __53__CKChatController_removeSuggestionsBanner_animated___block_invoke(uint64_t a1)
{
  double v2;
  double v3;
  void *v4;
  void *v5;

  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
  objc_msgSend(*(id *)(a1 + 40), "suggestionBannerHeight");
  v3 = -v2;
  objc_msgSend(*(id *)(a1 + 40), "suggestionBannerTopConstraint");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setConstant:", v3);

  objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateConstraints");
  objc_msgSend(*(id *)(a1 + 40), "view");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "layoutIfNeeded");

  return objc_msgSend(*(id *)(a1 + 40), "_updateTranscriptOffsetForBannerView");
}

uint64_t __53__CKChatController_removeSuggestionsBanner_animated___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "suggestionBannerTopConstraint");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeConstraint:", v3);

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(v4 + 1536);
  *(_QWORD *)(v4 + 1536) = 0;

  return objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
}

- (void)addSuggestionBanner:(id)a3 animated:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  char v8;
  void *v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  double v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD v37[4];
  id v38;
  CKChatController *v39;
  uint8_t buf[4];
  id v41;
  __int16 v42;
  void *v43;
  uint64_t v44;

  v4 = a4;
  v44 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (v6)
  {
    v7 = (void *)CFPreferencesCopyAppValue(CFSTR("AppCanShowSiriSuggestionsBlacklist"), CFSTR("com.apple.suggestions"));
    v8 = objc_msgSend(v7, "containsObject:", CFSTR("com.apple.MobileSMS"));

    if ((v8 & 1) == 0)
    {
      objc_msgSend(v6, "superview");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      if (v9)
        -[CKChatController removeSuggestionsBanner:animated:](self, "removeSuggestionsBanner:animated:", v6, 0);
      objc_msgSend(v6, "intrinsicContentSize");
      self->_suggestionBannerHeight = v10;
      objc_msgSend(v6, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      -[CKChatController view](self, "view");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "addSubview:", v6);

      objc_msgSend(v6, "superview");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController view](self, "view");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12 == v13)
      {
        objc_msgSend(v6, "leadingAnchor");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController view](self, "view");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "leadingAnchor");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "constraintEqualToAnchor:", v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "setActive:", 1);

        objc_msgSend(v6, "trailingAnchor");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController view](self, "view");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "trailingAnchor");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "constraintEqualToAnchor:", v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "setActive:", 1);

        objc_msgSend(v6, "topAnchor");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController view](self, "view");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "safeAreaLayoutGuide");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "topAnchor");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        if (v4)
        {
          -[CKChatController suggestionBannerHeight](self, "suggestionBannerHeight");
          objc_msgSend(v25, "constraintEqualToAnchor:constant:", v28, -v29);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          -[CKChatController setSuggestionBannerTopConstraint:](self, "setSuggestionBannerTopConstraint:", v30);

          -[CKChatController suggestionBannerTopConstraint](self, "suggestionBannerTopConstraint");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "setActive:", 1);

          objc_msgSend(v6, "setAlpha:", 0.0);
          -[CKChatController view](self, "view");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "layoutIfNeeded");

          v33 = (void *)MEMORY[0x1E0CEABB0];
          v37[0] = MEMORY[0x1E0C809B0];
          v37[1] = 3221225472;
          v37[2] = __49__CKChatController_addSuggestionBanner_animated___block_invoke;
          v37[3] = &unk_1E274A108;
          v38 = v6;
          v39 = self;
          objc_msgSend(v33, "animateWithDuration:animations:", v37, 0.3);

        }
        else
        {
          objc_msgSend(v25, "constraintEqualToAnchor:constant:", v28, 0.0);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          -[CKChatController setSuggestionBannerTopConstraint:](self, "setSuggestionBannerTopConstraint:", v34);

          -[CKChatController suggestionBannerTopConstraint](self, "suggestionBannerTopConstraint");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "setActive:", 1);

          -[CKChatController view](self, "view");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "layoutIfNeeded");

          -[CKChatController _updateTranscriptOffsetForBannerView](self, "_updateTranscriptOffsetForBannerView");
        }
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v6, "superview");
            v15 = (id)objc_claimAutoreleasedReturnValue();
            -[CKChatController view](self, "view");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412546;
            v41 = v15;
            v42 = 2112;
            v43 = v16;
            _os_log_impl(&dword_18DFCD000, v14, OS_LOG_TYPE_INFO, "CKChatController - Not displaying suggestions banner, banner superview: %@ isn't the chat controller's view: %@ after insertion", buf, 0x16u);

          }
        }
        objc_msgSend(v6, "removeFromSuperview");
      }
    }
  }

}

uint64_t __49__CKChatController_addSuggestionBanner_animated___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
  objc_msgSend(*(id *)(a1 + 40), "suggestionBannerTopConstraint");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setConstant:", 0.0);

  objc_msgSend(*(id *)(a1 + 32), "setNeedsUpdateConstraints");
  objc_msgSend(*(id *)(a1 + 40), "view");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "layoutIfNeeded");

  return objc_msgSend(*(id *)(a1 + 40), "_updateTranscriptOffsetForBannerView");
}

- (void)_updateTranscriptOffsetForBannerView
{
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  id v14;

  -[CKChatController collectionView](self, "collectionView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "contentOffset");
  v5 = v4;
  v7 = v6;

  -[CKChatController collectionView](self, "collectionView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "contentInset");
  v10 = v9;

  -[CKScrollViewController updateScrollGeometryWithInheritedAnimationForReason:](self, "updateScrollGeometryWithInheritedAnimationForReason:", CFSTR("BannerChangedSize"));
  -[CKChatController collectionView](self, "collectionView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "contentInset");
  v13 = v12;

  -[CKChatController collectionView](self, "collectionView");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setContentOffset:", v5, v7 - (v13 - v10));

}

- (void)_handleChatItemDidChange:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  CKChatController *v17;
  id v18;
  uint64_t v19;

  v4 = a3;
  -[CKChatController checkSuggestionsForBanner](self, "checkSuggestionsForBanner");
  objc_msgSend(v4, "userInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "objectForKey:", *MEMORY[0x1E0D35330]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "chat");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "chatItems");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "count");

  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __45__CKChatController__handleChatItemDidChange___block_invoke;
  v15[3] = &unk_1E274D3D8;
  v16 = v7;
  v17 = self;
  v18 = v6;
  v19 = v11;
  v12 = v6;
  v14 = v7;
  objc_msgSend(v12, "enumerateIndexesUsingBlock:", v15);
  -[CKCoreChatController inputController](self, "inputController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "notifyBrowserViewControllerOfMatchingNewMessages:", v14);

}

void __45__CKChatController__handleChatItemDidChange___block_invoke(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  unint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 56) <= a2)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = objc_msgSend(*(id *)(a1 + 48), "count");
        v10 = *(_QWORD *)(a1 + 56);
        v12 = 134218496;
        v13 = a2;
        v14 = 2048;
        v15 = v9;
        v16 = 2048;
        v17 = v10;
        _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Index out of bounds for inserted index %ld. Inserted Index count = %ld, chat items count = %ld", (uint8_t *)&v12, 0x20u);
      }

    }
  }
  else
  {
    v4 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "conversation");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "chat");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "chatItems");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectAtIndex:", a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v7);

  }
}

- (void)_handleKeyTransparencyShouldRefresh:(id)a3
{
  id v3;

  -[CKCoreChatController chat](self, "chat", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "refreshServiceForSending");

}

- (BOOL)_hasExistingBannerMatchingStyle:(unint64_t)a3 withNicknames:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  NSObject *v11;
  BOOL v12;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  -[CKChatController nicknameBanner](self, "nicknameBanner");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7
    && objc_msgSend(v7, "style") == a3
    && (objc_msgSend(v8, "nicknameUpdates"),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v10 = objc_msgSend(v9, "isEqualToArray:", v6),
        v9,
        v10))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v14 = 138412290;
        v15 = v8;
        _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "Asked to represent identical banner, bailing! Existing is %@", (uint8_t *)&v14, 0xCu);
      }

    }
    v12 = 1;
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

- (void)clearHandlesFromScrutiny:(id)a3
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v7);
        objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "clearHandleFromScrutiny:", v8);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

}

- (BOOL)shouldNotShowGroupBanners
{
  void *v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;

  -[CKCoreChatController conversation](self, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "groupIdentityUpdateHandleID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    -[CKCoreChatController conversation](self, "conversation");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "isGroupConversation") && !-[CKCoreChatController isInline](self, "isInline"))
    {
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v7, "areBannersSupported"))
        v6 = IMIsRunningInScreenshotTesting_IsolatedTranscriptUI();
      else
        v6 = 1;

    }
    else
    {
      v6 = 1;
    }

  }
  else
  {
    v6 = 1;
  }

  return v6;
}

- (BOOL)showGroupBannerUpdateIfNeeded
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  if (-[CKChatController shouldNotShowGroupBanners](self, "shouldNotShowGroupBanners"))
    return 0;
  -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    -[CKCoreChatController conversation](self, "conversation");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "conversationVisualIdentityWithKeys:requestedNumberOfContactsToFetch:", MEMORY[0x1E0C9AA60], 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "groupPhoto");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "groupName");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "shouldShowGroupPhotoUpdateBanner")
      && objc_msgSend(v4, "shouldShowGroupNameUpdateBanner"))
    {
      if (objc_msgSend(v6, "length") && objc_msgSend(v7, "length"))
      {
        v8 = 3;
      }
      else if (objc_msgSend(v6, "length"))
      {
        v8 = 8;
      }
      else if (objc_msgSend(v7, "length"))
      {
        v8 = 7;
      }
      else
      {
        v8 = 6;
      }
    }
    else if (objc_msgSend(v4, "shouldShowGroupNameUpdateBanner") && objc_msgSend(v7, "length"))
    {
      v8 = 1;
    }
    else if (objc_msgSend(v4, "shouldShowGroupNameUpdateBanner") && !objc_msgSend(v7, "length"))
    {
      v8 = 5;
    }
    else if (objc_msgSend(v4, "shouldShowGroupPhotoUpdateBanner") && objc_msgSend(v6, "length"))
    {
      v8 = 2;
    }
    else
    {
      if (!objc_msgSend(v4, "shouldShowGroupPhotoUpdateBanner") || v6)
        goto LABEL_27;
      v8 = 4;
    }
    -[CKChatController createGroupUpdateWithType:](self, "createGroupUpdateWithType:", v8);
    v9 = objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      v10 = (void *)v9;
      v15[0] = v9;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController createBannerForGroupUpdates:](self, "createBannerForGroupUpdates:", v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController setGroupPhotoUpdateBanner:](self, "setGroupPhotoUpdateBanner:", v12);

    }
LABEL_27:

  }
  -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
    return -[CKChatController presentUpdateBanner](self, "presentUpdateBanner");
  return 0;
}

- (id)createGroupUpdateWithType:(int64_t)a3
{
  CKGroupUpdate *v5;
  void *v6;
  void *v7;
  CKGroupUpdate *v8;

  v5 = [CKGroupUpdate alloc];
  -[CKCoreChatController conversation](self, "conversation");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "groupIdentityUpdateHandleID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[CKGroupUpdate initWithType:handleID:](v5, "initWithType:handleID:", a3, v7);

  return v8;
}

- (BOOL)presentUpdateBanner
{
  void *v3;
  void *v4;
  void *v5;

  -[CKChatController view](self, "view");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addSubview:", v4);

  -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _presentBannerView:completion:](self, "_presentBannerView:completion:", v5, 0);

  return 1;
}

- (BOOL)accountCanCreateNickname
{
  void *v2;
  int v3;
  int v4;
  void *v5;
  int v6;

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isAllowMultiplePhoneNumbersSNaPEnabled");

  v4 = IMSharedHelperNickNameEnabled();
  if (v3)
  {
    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      LOBYTE(v6) = objc_msgSend(v5, "iCloudSignedInToUseNicknames");
LABEL_9:

      return v6;
    }
  }
  else if (v4)
  {
    objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "iCloudSignedInToUseNicknames"))
      v6 = objc_msgSend(MEMORY[0x1E0D358A8], "multiplePhoneNumbersTiedToAppleID") ^ 1;
    else
      LOBYTE(v6) = 0;
    goto LABEL_9;
  }
  LOBYTE(v6) = 0;
  return v6;
}

- (BOOL)_showOrHideNicknameBannerIfNeeded
{
  void *v3;
  char v4;
  void *v5;
  char v6;
  BOOL v7;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  CKNicknameBannerView *v24;
  CKNicknameBannerView *v25;
  void *v26;
  BOOL v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  _QWORD v41[5];
  _QWORD v42[4];
  id v43;
  id v44;
  _QWORD aBlock[4];
  id v46;
  id v47[2];
  char *v48;
  _BYTE buf[12];
  __int16 v50;
  void *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  -[CKCoreChatController chat](self, "chat");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isStewieChat");

  if ((v4 & 1) == 0 && !-[CKChatController isShowingOscarChat](self, "isShowingOscarChat"))
  {
    -[CKCoreChatController conversation](self, "conversation");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isWithMyself");

    if ((v6 & 1) == 0)
    {
      v48 = 0;
      -[CKCoreChatController _retrieveNicknameBannerUpdatesIfNeeded:](self, "_retrieveNicknameBannerUpdatesIfNeeded:", &v48);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (v9)
      {
        if (!v48 || -[CKChatController _wantsToShowCollaborationNotices](self, "_wantsToShowCollaborationNotices"))
        {
          -[CKChatController nicknameBanner](self, "nicknameBanner");
          v10 = (void *)objc_claimAutoreleasedReturnValue();

          if (v10)
          {
            -[CKChatController nicknameBanner](self, "nicknameBanner");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            v41[0] = MEMORY[0x1E0C809B0];
            v41[1] = 3221225472;
            v41[2] = __53__CKChatController__showOrHideNicknameBannerIfNeeded__block_invoke_7;
            v41[3] = &unk_1E274A208;
            v41[4] = self;
            -[CKChatController _dismissBannerView:completion:](self, "_dismissBannerView:completion:", v11, v41);

          }
          v7 = objc_msgSend(v9, "count") != 0;
          goto LABEL_14;
        }
        if (!-[CKChatController _hasExistingBannerMatchingStyle:withNicknames:](self, "_hasExistingBannerMatchingStyle:withNicknames:", v48, v9))
        {
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v12 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134218242;
              *(_QWORD *)&buf[4] = v48;
              v50 = 2112;
              v51 = v9;
              _os_log_impl(&dword_18DFCD000, v12, OS_LOG_TYPE_INFO, "Will present nickname banner with state %lu, and updates %@", buf, 0x16u);
            }

          }
          if (v48 == (char *)4)
          {
            v13 = 0;
          }
          else
          {
            -[CKCoreChatController conversation](self, "conversation");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            v13 = objc_msgSend(v14, "isGroupConversation");

          }
          *(_QWORD *)buf = 0;
          objc_initWeak((id *)buf, self);
          objc_msgSend(v9, "firstObject");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "contact");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = CKIsRunningInMacCatalyst();
          if (v40)
            v17 = 0;
          else
            v17 = v16 == 0;
          if (v17 && (unint64_t)(v48 - 4) >= 3)
          {
            +[CKNicknameUtility addContactOptionsMenuItemsWithTarget:update:](CKNicknameUtility, "addContactOptionsMenuItemsWithTarget:update:", self, v15);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v39 = 0;
            if (v48 == (char *)3 && v40)
            {
              +[CKNicknameUtility updateNameAndPhotoMenuItemsWithTarget:update:](CKNicknameUtility, "updateNameAndPhotoMenuItemsWithTarget:update:", self, v15);
              v39 = (void *)objc_claimAutoreleasedReturnValue();
            }
          }
          v18 = MEMORY[0x1E0C809B0];
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 3221225472;
          aBlock[2] = __53__CKChatController__showOrHideNicknameBannerIfNeeded__block_invoke;
          aBlock[3] = &unk_1E274D428;
          v47[1] = v48;
          objc_copyWeak(v47, (id *)buf);
          v19 = v9;
          v46 = v19;
          v38 = _Block_copy(aBlock);
          +[CKNicknameUtility bannerTitleTextWithUpdates:style:useNamedTitles:](CKNicknameUtility, "bannerTitleTextWithUpdates:style:useNamedTitles:", v19, v48, v13);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          +[CKNicknameUtility bannerSubtitleTextWithUpdates:style:](CKNicknameUtility, "bannerSubtitleTextWithUpdates:style:", v19, v48);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          +[CKNicknameUtility bannerActionButtonStringWithUpdates:style:](CKNicknameUtility, "bannerActionButtonStringWithUpdates:style:", v19, v48);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v42[0] = v18;
          v42[1] = 3221225472;
          v42[2] = __53__CKChatController__showOrHideNicknameBannerIfNeeded__block_invoke_4;
          v42[3] = &unk_1E274D450;
          objc_copyWeak(&v44, (id *)buf);
          v20 = v19;
          v43 = v20;
          v21 = _Block_copy(v42);
          +[CKNicknameUtility avatarContactsForUpdates:style:](CKNicknameUtility, "avatarContactsForUpdates:style:", v20, v48);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          +[CKNicknameUtility customImageForUpdate:style:](CKNicknameUtility, "customImageForUpdate:style:", v15, v48);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = [CKNicknameBannerView alloc];
          v25 = -[CKNicknameBannerView initWithStyle:updates:useNamedTitles:avatarImages:contacts:customImage:titleString:subtitleString:actionButtonTitle:actionButtonHandler:actionButtonMenuItems:xButtonHandler:](v24, "initWithStyle:updates:useNamedTitles:avatarImages:contacts:customImage:titleString:subtitleString:actionButtonTitle:actionButtonHandler:actionButtonMenuItems:xButtonHandler:", v48, v20, v13, 0, v22, v23, v37, v36, v35, v21, v39, v38);
          if (-[CKChatController _anySuggestionPresenterWantsToShowBanner](self, "_anySuggestionPresenterWantsToShowBanner"))
          {
            -[CKChatController suggestionBannerView](self, "suggestionBannerView");
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            v27 = v26 == 0;

            if (!v27)
            {
              -[CKChatController suggestionBannerView](self, "suggestionBannerView");
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              -[CKChatController removeSuggestionsBanner:animated:](self, "removeSuggestionsBanner:animated:", v28, 1);

            }
          }
          -[CKChatController nicknameBanner](self, "nicknameBanner");
          v29 = (void *)objc_claimAutoreleasedReturnValue();

          if (v29)
          {
            -[CKChatController nicknameBanner](self, "nicknameBanner");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "nicknameUpdates");
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "__imArrayByApplyingBlock:", &__block_literal_global_1023);
            v32 = (void *)objc_claimAutoreleasedReturnValue();

            -[CKChatController nicknameBanner](self, "nicknameBanner");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            -[CKChatController _replaceBannerView:withNewBannerView:placingHandlesUnderScrutiny:completion:](self, "_replaceBannerView:withNewBannerView:placingHandlesUnderScrutiny:completion:", v33, v25, v32, 0);

            -[CKChatController setNicknameBanner:](self, "setNicknameBanner:", v25);
          }
          else
          {
            -[CKChatController setNicknameBanner:](self, "setNicknameBanner:", v25);
            -[CKNicknameBannerView nicknameUpdates](v25, "nicknameUpdates");
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v34, "__imArrayByApplyingBlock:", &__block_literal_global_1024);
            v32 = (void *)objc_claimAutoreleasedReturnValue();

            -[CKChatController _presentBannerView:placingHandlesUnderScrutiny:completion:](self, "_presentBannerView:placingHandlesUnderScrutiny:completion:", v25, v32, 0);
          }

          objc_destroyWeak(&v44);
          objc_destroyWeak(v47);

          objc_destroyWeak((id *)buf);
          v7 = 1;
          goto LABEL_14;
        }
      }
      v7 = 0;
LABEL_14:

      return v7;
    }
  }
  return 0;
}

void __53__CKChatController__showOrHideNicknameBannerIfNeeded__block_invoke(id *a1, void *a2)
{
  id v3;
  uint64_t v4;
  id *v5;
  void *v6;
  id WeakRetained;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  id v16;
  _QWORD aBlock[4];
  id v18;
  id v19[2];

  v3 = a2;
  v4 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __53__CKChatController__showOrHideNicknameBannerIfNeeded__block_invoke_2;
  aBlock[3] = &unk_1E274D400;
  v19[1] = a1[6];
  v5 = a1 + 5;
  objc_copyWeak(v19, a1 + 5);
  v18 = a1[4];
  v6 = _Block_copy(aBlock);
  WeakRetained = objc_loadWeakRetained(v5);
  objc_msgSend(WeakRetained, "setNicknameBanner:", 0);

  v8 = objc_loadWeakRetained(v5);
  v14[0] = v4;
  v14[1] = 3221225472;
  v14[2] = __53__CKChatController__showOrHideNicknameBannerIfNeeded__block_invoke_3;
  v14[3] = &unk_1E274B308;
  v9 = v6;
  v15 = v9;
  objc_copyWeak(&v16, v5);
  objc_msgSend(v8, "_dismissBannerView:completion:", v3, v14);

  v10 = objc_loadWeakRetained(v5);
  if (!objc_msgSend(v10, "_anySuggestionPresenterWantsToShowBanner"))
    goto LABEL_4;
  v11 = objc_loadWeakRetained(v5);
  objc_msgSend(v11, "suggestionBannerView");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v10 = objc_loadWeakRetained(v5);
    objc_msgSend(v10, "suggestionBannerView");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "addSuggestionBanner:animated:", v13, 1);

LABEL_4:
  }
  objc_destroyWeak(&v16);

  objc_destroyWeak(v19);
}

void __53__CKChatController__showOrHideNicknameBannerIfNeeded__block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 == 5)
  {
    objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
    v15 = (id)objc_claimAutoreleasedReturnValue();
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "conversation");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "chat");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "participants");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "denyHandlesForNicknameSharing:", v6);

    goto LABEL_5;
  }
  if (v2 == 6)
  {
    v15 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v15, "nicknameBannerDidInteractWithOnboardingOffer");
LABEL_5:

    return;
  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v7 = *(id *)(a1 + 32);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v17;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v17 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v11);
        objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "handle");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "clearPendingNicknameUpdatesForHandle:forceClear:", v14, 1);

        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v9);
  }

}

void __53__CKChatController__showOrHideNicknameBannerIfNeeded__block_invoke_3(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;
  id v4;

  v1 = (id *)a1;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v1 += 5;
  WeakRetained = objc_loadWeakRetained(v1);
  objc_msgSend(WeakRetained, "setNicknameBanner:", 0);

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "updateScrollGeometryWithoutAnimationForReason:", CFSTR("BannerDismissed"));

  v4 = objc_loadWeakRetained(v1);
  objc_msgSend(v4, "updateFoundInSuggestionPresenter");

}

void __53__CKChatController__showOrHideNicknameBannerIfNeeded__block_invoke_4(uint64_t a1, void *a2, void *a3)
{
  id *v5;
  id v6;
  id v7;
  id WeakRetained;

  v5 = (id *)(a1 + 40);
  v6 = a3;
  v7 = a2;
  WeakRetained = objc_loadWeakRetained(v5);
  objc_msgSend(WeakRetained, "nicknameBannerView:actionButtonTapped:forUpdates:", v7, v6, *(_QWORD *)(a1 + 32));

}

uint64_t __53__CKChatController__showOrHideNicknameBannerIfNeeded__block_invoke_5(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "handle");
}

uint64_t __53__CKChatController__showOrHideNicknameBannerIfNeeded__block_invoke_6(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "handle");
}

uint64_t __53__CKChatController__showOrHideNicknameBannerIfNeeded__block_invoke_7(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setNicknameBanner:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "updateScrollGeometryWithoutAnimationForReason:", CFSTR("BannerDismissed"));
}

- (void)nicknameStoreDidChange:(id)a3
{
  -[CKChatController _showOrHideNicknameBannerIfNeeded](self, "_showOrHideNicknameBannerIfNeeded", a3);
  -[CKChatController _autoAcceptNicknameIfNeeded](self, "_autoAcceptNicknameIfNeeded");
}

- (void)_autoAcceptNicknameIfNeeded
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _BOOL4 v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  id v26;
  void *v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  -[CKCoreChatController conversation](self, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handles");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "firstObject");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "ID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!-[CKChatController shouldShowAvatarViewInNavBarCanvas](self, "shouldShowAvatarViewInNavBarCanvas"))
  {
    -[CKCoreChatController conversation](self, "conversation");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "isGroupConversation");

    if ((v8 & 1) == 0)
    {
      if (v6)
      {
        objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = (void *)MEMORY[0x1E0C99E60];
        v28[0] = v6;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v28, 1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "setWithArray:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "pendingNicknameForHandleIDs:", v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = v13 == 0;

        if (v14)
        {
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18DFCD000, v21, OS_LOG_TYPE_INFO, "Not auto-updating, no pending nickname available.", buf, 2u);
            }

          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v27 = v6;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v27, 1);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "createSharedProfileStateOracleForHandles:", v16);
          v17 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v17, "effectiveStateForContact") == 1 || objc_msgSend(v17, "effectiveStateForContact") == 3)
          {
            v22 = 0;
            v18 = (id)objc_msgSend(v17, "updateContactAndNicknamesForAutoUpdateWithError:", &v22);
            v19 = v22;
            if (IMOSLoggingEnabled())
            {
              OSLogHandleForIMFoundationCategory();
              v20 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412546;
                v24 = v6;
                v25 = 2112;
                v26 = v19;
                _os_log_impl(&dword_18DFCD000, v20, OS_LOG_TYPE_INFO, "Updated contact and nicknames for recipient: %@, error: %@", buf, 0x16u);
              }

            }
          }

        }
      }
    }
  }

}

- (void)_presentBannerView:(id)a3 completion:(id)a4
{
  -[CKChatController _presentBannerView:placingHandlesUnderScrutiny:completion:](self, "_presentBannerView:placingHandlesUnderScrutiny:completion:", a3, 0, a4);
}

- (void)_presentBannerView:(id)a3 placingHandlesUnderScrutiny:(id)a4 completion:(id)a5
{
  NSObject *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  int v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  char v37;
  void *v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  _QWORD v47[5];
  _QWORD v48[4];
  id v49;
  _QWORD v50[4];
  id v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint8_t v56[128];
  uint8_t buf[4];
  id v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v45 = a3;
  v44 = a4;
  v43 = a5;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v58 = v45;
      _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "Present update banner view %@", buf, 0xCu);
    }

  }
  if (objc_msgSend(v44, "count"))
  {
    v54 = 0u;
    v55 = 0u;
    v53 = 0u;
    v52 = 0u;
    v8 = v44;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v52, v56, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v53;
      while (2)
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v53 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * i);
          objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "handlesForNicknamesUnderScrutiny");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "ID");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v14, "containsObject:", v15);

          v17 = IMOSLoggingEnabled();
          if (v16)
          {
            if (v17)
            {
              OSLogHandleForIMFoundationCategory();
              v39 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
              {
                objc_msgSend(v12, "ID");
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412290;
                v58 = v40;
                _os_log_impl(&dword_18DFCD000, v39, OS_LOG_TYPE_INFO, "CKChatController - Skipping handling %@, under scrutiny;  now clearing from scrutiny",
                  buf,
                  0xCu);

              }
            }
            objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v41, "ignorePendingNicknameUpdatesForHandle:", v12);

            objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v42, "clearHandleFromScrutiny:", v12);

            goto LABEL_39;
          }
          if (v17)
          {
            OSLogHandleForIMFoundationCategory();
            v18 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(v12, "ID");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              v58 = v19;
              _os_log_impl(&dword_18DFCD000, v18, OS_LOG_TYPE_INFO, "Placing %@ under scrutiny", buf, 0xCu);

            }
          }
          objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "markHandleUnderScrutiny:", v12);

        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v52, v56, 16);
        if (v9)
          continue;
        break;
      }
    }

  }
  objc_msgSend(v45, "setAlpha:", 0.0);
  if (-[CKCoreChatController isShowingLockoutView](self, "isShowingLockoutView")
    && (-[CKCoreChatController lockoutViewController](self, "lockoutViewController"),
        v21 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v21, "view"),
        v8 = (id)objc_claimAutoreleasedReturnValue(),
        v21,
        v8))
  {
    -[CKChatController view](self, "view");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "insertSubview:belowSubview:", v45, v8);
  }
  else
  {
    -[CKChatController view](self, "view");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "addSubview:", v45);
    v8 = 0;
  }

  if (objc_msgSend(v44, "count"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v58 = v44;
        _os_log_impl(&dword_18DFCD000, v23, OS_LOG_TYPE_INFO, "Removing from scrutiny after presenting banner: %@", buf, 0xCu);
      }

    }
    -[CKChatController clearHandlesFromScrutiny:](self, "clearHandlesFromScrutiny:", v44);
  }
  -[CKChatController view](self, "view");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "bounds");
  v26 = v25;

  objc_msgSend(v45, "sizeThatFits:", v26, 1.79769313e308);
  v28 = v27;
  v30 = v29;
  -[CKScrollViewController navigationBarInsets](self, "navigationBarInsets");
  objc_msgSend(v45, "setFrame:", *MEMORY[0x1E0C9D648], v31, v28, v30);
  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v32)
  {
    -[CKChatController transitionCoordinator](self, "transitionCoordinator");
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    if (v33)
    {
      -[CKChatController transitionCoordinator](self, "transitionCoordinator");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = MEMORY[0x1E0C809B0];
      v50[0] = MEMORY[0x1E0C809B0];
      v50[1] = 3221225472;
      v50[2] = __78__CKChatController__presentBannerView_placingHandlesUnderScrutiny_completion___block_invoke;
      v50[3] = &unk_1E274B4D0;
      v36 = v45;
      v51 = v36;
      v37 = objc_msgSend(v34, "animateAlongsideTransition:completion:", v50, 0);

      if ((v37 & 1) == 0)
      {
        v38 = (void *)MEMORY[0x1E0CEABB0];
        v48[0] = v35;
        v48[1] = 3221225472;
        v48[2] = __78__CKChatController__presentBannerView_placingHandlesUnderScrutiny_completion___block_invoke_2;
        v48[3] = &unk_1E274A208;
        v49 = v36;
        v47[0] = v35;
        v47[1] = 3221225472;
        v47[2] = __78__CKChatController__presentBannerView_placingHandlesUnderScrutiny_completion___block_invoke_3;
        v47[3] = &unk_1E274A1B8;
        v47[4] = self;
        objc_msgSend(v38, "animateWithDuration:animations:completion:", v48, v47, 0.1);

      }
    }
    else
    {
      objc_msgSend(v45, "setAlpha:", 1.0);
      -[CKChatController _showCatchUpButtonIfNeeded](self, "_showCatchUpButtonIfNeeded");
    }
  }
LABEL_39:

}

uint64_t __78__CKChatController__presentBannerView_placingHandlesUnderScrutiny_completion___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

uint64_t __78__CKChatController__presentBannerView_placingHandlesUnderScrutiny_completion___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

uint64_t __78__CKChatController__presentBannerView_placingHandlesUnderScrutiny_completion___block_invoke_3(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_showCatchUpButtonIfNeeded");
}

- (void)_dismissBannerView:(id)a3 completion:(id)a4
{
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  char v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  CKChatController *v17;
  id v18;
  char v19;
  _QWORD v20[4];
  id v21;
  uint8_t buf[4];
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v23 = v6;
      _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Dismiss banner view %@", buf, 0xCu);
    }

  }
  -[CKChatController collectionView](self, "collectionView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "__ck_isScrolledToTop");

  v11 = MEMORY[0x1E0C809B0];
  v12 = (void *)MEMORY[0x1E0CEABB0];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __50__CKChatController__dismissBannerView_completion___block_invoke;
  v20[3] = &unk_1E274A208;
  v21 = v6;
  v15[0] = v11;
  v15[1] = 3221225472;
  v15[2] = __50__CKChatController__dismissBannerView_completion___block_invoke_2;
  v15[3] = &unk_1E274D4B8;
  v16 = v21;
  v17 = self;
  v19 = v10;
  v18 = v7;
  v13 = v7;
  v14 = v21;
  objc_msgSend(v12, "animateWithDuration:animations:completion:", v20, v15, 0.1);

}

uint64_t __50__CKChatController__dismissBannerView_completion___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

uint64_t __50__CKChatController__dismissBannerView_completion___block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
  objc_msgSend(*(id *)(a1 + 40), "updateScrollGeometryWithoutAnimationForReason:", CFSTR("BannerDismissed"));
  if (*(_BYTE *)(a1 + 56))
  {
    objc_msgSend(*(id *)(a1 + 40), "collectionView");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "__ck_scrollToTop:", 1);

  }
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(void))(v3 + 16))();
  return objc_msgSend(*(id *)(a1 + 40), "_showCatchUpButtonIfNeeded");
}

- (void)_replaceBannerView:(id)a3 withNewBannerView:(id)a4 placingHandlesUnderScrutiny:(id)a5 completion:(id)a6
{
  id v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  int v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  NSObject *v33;
  void *v34;
  char v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  NSObject *v42;
  void *v43;
  id v44;
  id v46;
  id v47;
  _QWORD v48[4];
  id v49;
  CKChatController *v50;
  id v51;
  _BYTE *v52;
  char v53;
  _QWORD v54[4];
  id v55;
  id v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE buf[24];
  uint64_t (*v62)(uint64_t, uint64_t);
  void (*v63)(uint64_t);
  id v64;
  _BYTE v65[128];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v47 = a4;
  v46 = a5;
  v44 = a6;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v47;
      _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, "Replace nickname banner view %@ with new banner view %@", buf, 0x16u);
    }

  }
  v43 = v9;
  if (v9 == v47)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v42, OS_LOG_TYPE_INFO, "Nickname banners are equal, not replacing", buf, 2u);
      }

    }
  }
  else
  {
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    v57 = 0u;
    v11 = v46;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v57, v65, 16);
    if (v12)
    {
      v13 = *(_QWORD *)v58;
      while (2)
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v58 != v13)
            objc_enumerationMutation(v11);
          v15 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * i);
          objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance", v43, v44);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "handlesForNicknamesUnderScrutiny");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "ID");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = objc_msgSend(v17, "containsObject:", v18);

          v20 = IMOSLoggingEnabled();
          if (v19)
          {
            if (v20)
            {
              OSLogHandleForIMFoundationCategory();
              v38 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
              {
                objc_msgSend(v15, "ID");
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = v39;
                _os_log_impl(&dword_18DFCD000, v38, OS_LOG_TYPE_INFO, "CKChatController - Skipping handling %@, under scrutiny;  now clearing from scrutiny",
                  buf,
                  0xCu);

              }
            }
            objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "ignorePendingNicknameUpdatesForHandle:", v15);

            objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v41, "clearHandleFromScrutiny:", v15);

            goto LABEL_34;
          }
          if (v20)
          {
            OSLogHandleForIMFoundationCategory();
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(v15, "ID");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v22;
              _os_log_impl(&dword_18DFCD000, v21, OS_LOG_TYPE_INFO, "Placing %@ under scrutiny", buf, 0xCu);

            }
          }
          objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "markHandleUnderScrutiny:", v15);

        }
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v57, v65, 16);
        if (v12)
          continue;
        break;
      }
    }

    -[CKChatController view](self, "view");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "bounds");
    v26 = v25;

    objc_msgSend(v47, "sizeThatFits:", v26, 1.79769313e308);
    v28 = v27;
    v30 = v29;
    -[CKScrollViewController navigationBarInsets](self, "navigationBarInsets");
    objc_msgSend(v47, "setFrame:", *MEMORY[0x1E0C9D648], v31, v28, v30);
    objc_msgSend(v47, "setAlpha:", 0.0);
    -[CKChatController view](self, "view");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "addSubview:", v47);

    if (objc_msgSend(v11, "count"))
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v11;
          _os_log_impl(&dword_18DFCD000, v33, OS_LOG_TYPE_INFO, "Removing from scrutiny after replacing banner: %@", buf, 0xCu);
        }

      }
      -[CKChatController clearHandlesFromScrutiny:](self, "clearHandlesFromScrutiny:", v11, v43);
    }
    -[CKChatController collectionView](self, "collectionView", v43);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend(v34, "__ck_isScrolledToTop");

    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v62 = __Block_byref_object_copy__11;
    v63 = __Block_byref_object_dispose__11;
    v64 = 0;
    v64 = v43;
    v36 = (void *)MEMORY[0x1E0CEABB0];
    v37 = MEMORY[0x1E0C809B0];
    v54[0] = MEMORY[0x1E0C809B0];
    v54[1] = 3221225472;
    v54[2] = __96__CKChatController__replaceBannerView_withNewBannerView_placingHandlesUnderScrutiny_completion___block_invoke;
    v54[3] = &unk_1E274A108;
    v55 = v64;
    v56 = v47;
    v48[0] = v37;
    v48[1] = 3221225472;
    v48[2] = __96__CKChatController__replaceBannerView_withNewBannerView_placingHandlesUnderScrutiny_completion___block_invoke_2;
    v48[3] = &unk_1E274D4E0;
    v52 = buf;
    v49 = v55;
    v50 = self;
    v53 = v35;
    v51 = v44;
    objc_msgSend(v36, "animateWithDuration:animations:completion:", v54, v48, 0.1);

    _Block_object_dispose(buf, 8);
  }
LABEL_34:

}

uint64_t __96__CKChatController__replaceBannerView_withNewBannerView_placingHandlesUnderScrutiny_completion___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
  return objc_msgSend(*(id *)(a1 + 40), "setAlpha:", 1.0);
}

uint64_t __96__CKChatController__replaceBannerView_withNewBannerView_placingHandlesUnderScrutiny_completion___block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  objc_msgSend(*(id *)(a1 + 40), "updateScrollGeometryWithoutAnimationForReason:", CFSTR("BannerChangedSize"));
  if (*(_BYTE *)(a1 + 64))
  {
    objc_msgSend(*(id *)(a1 + 40), "collectionView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "__ck_scrollToTop:", 1);

  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

- (void)groupPhotoUpdateBanner:(id)a3 dismissedUpdate:(id)a4
{
  id v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[5];

  v6 = a3;
  v7 = objc_msgSend(a4, "groupUpdateType");
  if ((v7 & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    -[CKCoreChatController conversation](self, "conversation");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setShouldShowGroupNameUpdateBanner:", 0);
LABEL_8:

    goto LABEL_9;
  }
  if (v7 <= 8)
  {
    if (((1 << v7) & 0x1C8) != 0)
    {
      -[CKCoreChatController conversation](self, "conversation");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setShouldShowGroupNameUpdateBanner:", 0);

LABEL_7:
      -[CKCoreChatController conversation](self, "conversation");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setShouldShowGroupPhotoUpdateBanner:", 0);
      goto LABEL_8;
    }
    if (((1 << v7) & 0x14) != 0)
      goto LABEL_7;
  }
LABEL_9:
  -[CKCoreChatController conversation](self, "conversation");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setGroupIdentityUpdateHandleID:", 0);

  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __59__CKChatController_groupPhotoUpdateBanner_dismissedUpdate___block_invoke;
  v11[3] = &unk_1E274A208;
  v11[4] = self;
  -[CKChatController _dismissBannerView:completion:](self, "_dismissBannerView:completion:", v6, v11);

}

uint64_t __59__CKChatController_groupPhotoUpdateBanner_dismissedUpdate___block_invoke(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setGroupPhotoUpdateBanner:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "updateScrollGeometryWithoutAnimationForReason:", CFSTR("GroupPhotoBannerChangedSize"));
}

- (void)nicknameBannerView:(id)a3 actionButtonTapped:(id)a4 forUpdates:(id)a5
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void (**v16)(void *, _QWORD);
  void *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];
  _QWORD v23[4];
  id v24;
  CKChatController *v25;
  id v26;
  id v27;
  _QWORD aBlock[4];
  id v29;
  id location;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  location = 0;
  objc_initWeak(&location, self);
  v11 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __69__CKChatController_nicknameBannerView_actionButtonTapped_forUpdates___block_invoke;
  aBlock[3] = &unk_1E274A208;
  v12 = v10;
  v29 = v12;
  v13 = _Block_copy(aBlock);
  v23[0] = v11;
  v23[1] = 3221225472;
  v23[2] = __69__CKChatController_nicknameBannerView_actionButtonTapped_forUpdates___block_invoke_2;
  v23[3] = &unk_1E274D530;
  objc_copyWeak(&v27, &location);
  v14 = v8;
  v24 = v14;
  v15 = v13;
  v25 = self;
  v26 = v15;
  v16 = (void (**)(void *, _QWORD))_Block_copy(v23);
  objc_msgSend(v12, "firstObject");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      v19 = objc_msgSend(v14, "style");
      *(_DWORD *)buf = 138412546;
      v32 = v17;
      v33 = 2048;
      v34 = v19;
      _os_log_impl(&dword_18DFCD000, v18, OS_LOG_TYPE_INFO, "Performing action for update %@, with style: %lu", buf, 0x16u);
    }

  }
  v20 = objc_msgSend(v14, "style");
  v21 = 4;
  switch(v20)
  {
    case 1:
      goto LABEL_10;
    case 2:
      v21 = 2;
LABEL_10:
      -[CKChatController updateContactQuietlyForNicknameUpdate:updateType:](self, "updateContactQuietlyForNicknameUpdate:updateType:", v17, v21);
      v16[2](v16, 0);
      break;
    case 4:
      -[CKChatController presentNicknameUpdatesViewControllerFromView:](self, "presentNicknameUpdatesViewControllerFromView:", v9, 4);
      break;
    case 5:
    case 6:
      if (objc_msgSend(v14, "style") == 6)
      {
        -[CKChatController nicknameBannerDidInteractWithOnboardingOffer](self, "nicknameBannerDidInteractWithOnboardingOffer");
        -[CKChatController showNicknameSharingOnboardingWithMemoji:](self, "showNicknameSharingOnboardingWithMemoji:", 1);
      }
      v22[0] = v11;
      v22[1] = 3221225472;
      v22[2] = __69__CKChatController_nicknameBannerView_actionButtonTapped_forUpdates___block_invoke_1026;
      v22[3] = &unk_1E274A208;
      v22[4] = self;
      ((void (**)(void *, _QWORD *))v16)[2](v16, v22);
      break;
    default:
      break;
  }

  objc_destroyWeak(&v27);
  objc_destroyWeak(&location);

}

void __69__CKChatController_nicknameBannerView_actionButtonTapped_forUpdates___block_invoke(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * v5);
        objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance", (_QWORD)v9);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "handle");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "clearPendingNicknameUpdatesForHandle:forceClear:", v8, 0);

        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }

}

void __69__CKChatController_nicknameBannerView_actionButtonTapped_forUpdates___block_invoke_2(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  _QWORD v9[5];
  void (**v10)(_QWORD);
  id v11;
  id v12;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "nicknameBanner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(void **)(a1 + 32);

  if (v5 == v6)
  {
    v7 = objc_loadWeakRetained((id *)(a1 + 56));
    v8 = *(_QWORD *)(a1 + 32);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __69__CKChatController_nicknameBannerView_actionButtonTapped_forUpdates___block_invoke_3;
    v9[3] = &unk_1E274D508;
    v10 = v3;
    v11 = *(id *)(a1 + 48);
    objc_copyWeak(&v12, (id *)(a1 + 56));
    v9[4] = *(_QWORD *)(a1 + 40);
    objc_msgSend(v7, "_dismissBannerView:completion:", v8, v9);

    objc_destroyWeak(&v12);
  }
  else
  {
    if (v3)
      v3[2](v3);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

uint64_t __69__CKChatController_nicknameBannerView_actionButtonTapped_forUpdates___block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "setNicknameBanner:", 0);

  objc_msgSend(*(id *)(a1 + 32), "updateScrollGeometryWithoutAnimationForReason:", CFSTR("BannerChangedSize"));
  return objc_msgSend(*(id *)(a1 + 32), "updateFoundInSuggestionPresenter");
}

void __69__CKChatController_nicknameBannerView_actionButtonTapped_forUpdates___block_invoke_1026(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "conversation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "chat");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "participants");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "chat");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "conversation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "lastAddressedHandle");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "allowHandlesForNicknameSharing:forChat:fromHandle:forceSend:", v4, v6, v8, 0);

}

- (void)presentNicknameUpdatesViewControllerFromView:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint8_t v10[16];

  v4 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "Presenting updates controller!", v10, 2u);
    }

  }
  -[CKCoreChatController _nicknameBannerUpdatesAndStyle:](self, "_nicknameBannerUpdatesAndStyle:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKNicknameUpdateListViewFactory listViewWithUpdates:delegate:](CKNicknameUpdateListViewFactory, "listViewWithUpdates:delegate:", v6, self);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController setNicknameUpdateController:](self, "setNicknameUpdateController:", v7);
  v8 = v7;
  if (CKIsRunningInMacCatalyst())
  {
    objc_msgSend(v8, "setModalPresentationStyle:", 7);
    objc_msgSend(v8, "popoverPresentationController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setSourceView:", v4);

  }
  -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v8, 1, 0);

}

- (void)nicknameBannerDidInteractWithOnboardingOffer
{
  void *v2;
  NSObject *v3;
  uint8_t v4[16];

  objc_msgSend(MEMORY[0x1E0D398E8], "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "wasSharingEverEnabled") & 1) == 0 && (objc_msgSend(v2, "sharingEnabled") & 1) == 0)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v4 = 0;
        _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "User interacted with outgoing share CTA. Disabling.", v4, 2u);
      }

    }
    objc_msgSend(v2, "setSharingEnabled:", 0);
  }

}

- (id)currentNicknameUpdates
{
  return -[CKCoreChatController _nicknameBannerUpdatesAndStyle:](self, "_nicknameBannerUpdatesAndStyle:", 0);
}

- (void)updateInterfaceSelectedAction:(unint64_t)a3 forUpdate:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  id v9;

  v6 = a4;
  -[CKChatController nicknameUpdateController](self, "nicknameUpdateController");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  -[CKChatController nicknameUpdateController](self, "nicknameUpdateController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "view");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController nicknameUpdatesViewController:selectedAction:forNicknameUpdate:sourceView:](self, "nicknameUpdatesViewController:selectedAction:forNicknameUpdate:sourceView:", v9, a3, v6, v8);

}

- (void)nicknameUpdatesViewController:(id)a3 selectedAction:(unint64_t)a4 forNicknameUpdate:(id)a5 sourceView:(id)a6
{
  id v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;

  v24 = a3;
  v10 = a5;
  v11 = a6;
  switch(a4)
  {
    case 0uLL:
      objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "handle");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "clearPendingNicknameUpdatesForHandle:forceClear:", v13, 1);
      goto LABEL_8;
    case 1uLL:
      objc_msgSend(v10, "contact");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:](self, "updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:", v14, v10, 2, 0, 3);

      objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "handle");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "ID");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "acceptPendingNicknameForHandleID:updateType:", v15, 2);
      goto LABEL_7;
    case 2uLL:
      objc_msgSend(v10, "contact");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:](self, "updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:", v16, v10, 4, 0, 3);

      objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "handle");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "ID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v17;
      v21 = v19;
      v22 = 4;
      goto LABEL_6;
    case 3uLL:
      objc_msgSend(v10, "contact");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:](self, "updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:", v23, v10, 6, 0, 3);

      objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "handle");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "ID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v17;
      v21 = v19;
      v22 = 6;
LABEL_6:
      objc_msgSend(v20, "acceptPendingNicknameForHandleID:updateType:", v21, v22);

      objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "handle");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "ID");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "markTransitionAsObservedForHandleID:isAutoUpdate:", v15, 0);
LABEL_7:

LABEL_8:
      break;
    case 4uLL:
      if (CKIsRunningInMacCatalyst())
        -[CKChatController macShowUnknownContactPopoverForNicknameUpdate:presentingViewController:sourceView:](self, "macShowUnknownContactPopoverForNicknameUpdate:presentingViewController:sourceView:", v10, v24, v11);
      else
        -[CKChatController updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:](self, "updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:", 0, v10, *MEMORY[0x1E0D38B20], 1, 1);
      -[CKChatController setCurrentNicknameUpdate:](self, "setCurrentNicknameUpdate:", v10);
      break;
    case 5uLL:
      if (CKIsRunningInMacCatalyst())
      {
        -[CKChatController macShowUnknownContactPopoverForNicknameUpdate:presentingViewController:sourceView:](self, "macShowUnknownContactPopoverForNicknameUpdate:presentingViewController:sourceView:", v10, v24, v11);
      }
      else
      {
        -[CKChatController setCurrentNicknameUpdate:](self, "setCurrentNicknameUpdate:", v10);
        -[CKChatController selectContact](self, "selectContact");
      }
      break;
    default:
      break;
  }

}

- (BOOL)shouldShowBanners
{
  void *v3;
  void *v4;
  void *v5;
  int v6;
  BOOL v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v14;
  uint64_t v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  -[CKCoreChatController chat](self, "chat");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3 && (objc_msgSend(v3, "allowedToShowConversation") & 1) == 0)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0C99D68], "date");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "timeIntervalSince1970");
        v11 = v10;
        -[CKCoreChatController chat](self, "chat");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = 134218242;
        v15 = v11;
        v16 = 2112;
        v17 = v12;
        _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Bypassing checking checkSuggestionsForBanner due to downtime being on and chat containing nonallowlisted participants:   - %f %@", (uint8_t *)&v14, 0x16u);

      }
    }
    goto LABEL_11;
  }
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "stewieEnabled");

  if (v6 && objc_msgSend(v4, "isStewieChat"))
  {
    -[CKChatController _presentTranscriptSharingBannerIfNecessary](self, "_presentTranscriptSharingBannerIfNecessary");
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  v7 = 1;
LABEL_12:

  return v7;
}

- (void)_updateSuggestionsBanners
{
  NSObject *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (-[CKChatController _anyLegacyBannerIsVisible](self, "_anyLegacyBannerIsVisible")
    || -[CKChatController _wantsToShowCollaborationNotices](self, "_wantsToShowCollaborationNotices"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        LOWORD(v7) = 0;
        _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "Bypassing checkSuggestionsForBanner, another banner is already up", (uint8_t *)&v7, 2u);
      }

    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0C99D68], "date");
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "timeIntervalSince1970");
        v7 = 134217984;
        v8 = v6;
        _os_log_impl(&dword_18DFCD000, v4, OS_LOG_TYPE_INFO, "Handling _updateSuggestionsBanners - %f ", (uint8_t *)&v7, 0xCu);

      }
    }
    -[CKChatController updateFoundInSuggestionPresenter](self, "updateFoundInSuggestionPresenter");
  }
}

- (void)checkSuggestionsForBanner
{
  NSObject *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (-[CKChatController shouldShowBanners](self, "shouldShowBanners"))
  {
    if (-[CKChatController _supportsCollaborationNotices](self, "_supportsCollaborationNotices")
      && -[CKChatController shouldFetchCollaborationNotices](self, "shouldFetchCollaborationNotices"))
    {
      -[CKChatController _fetchCollaborationNotices](self, "_fetchCollaborationNotices");
      -[CKChatController setShouldFetchCollaborationNotices:](self, "setShouldFetchCollaborationNotices:", 0);
    }
    else if (-[CKChatController _anyLegacyBannerIsVisible](self, "_anyLegacyBannerIsVisible")
           || -[CKChatController _wantsToShowCollaborationNotices](self, "_wantsToShowCollaborationNotices"))
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v3 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        {
          LOWORD(v7) = 0;
          _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "Bypassing checkSuggestionsForBanner, another banner is already up", (uint8_t *)&v7, 2u);
        }

      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v4 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(MEMORY[0x1E0C99D68], "date");
          v5 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "timeIntervalSince1970");
          v7 = 134217984;
          v8 = v6;
          _os_log_impl(&dword_18DFCD000, v4, OS_LOG_TYPE_INFO, "Handling checkSuggestionsForBanner - %f ", (uint8_t *)&v7, 0xCu);

        }
      }
      -[CKChatController _updateSuggestionsBanners](self, "_updateSuggestionsBanners");
    }
  }
}

- (BOOL)_supportsCollaborationNotices
{
  return !CKIsRunningInMessagesViewService()
      && CKIsRunningInMessagesNotificationExtension() == 0;
}

- (void)_handleCollaborationNoticesChanged:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend(v4, "object");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setWithArray:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (void *)MEMORY[0x1E0C99E60];
  objc_msgSend(MEMORY[0x1E0D35798], "sharedRegistry");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "chat");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "allGUIDsForChat:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setWithArray:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v9) = objc_msgSend(v7, "intersectsSet:", v13);
  v14 = IMOSLoggingEnabled();
  if ((_DWORD)v9)
  {
    if (v14)
    {
      OSLogHandleForIMFoundationCategory();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        v17 = 138412290;
        v18 = v13;
        _os_log_impl(&dword_18DFCD000, v15, OS_LOG_TYPE_INFO, "Fetching CollaborationNotices in response to change notification for guids: %@.", (uint8_t *)&v17, 0xCu);
      }

    }
    -[CKChatController setShouldFetchCollaborationNotices:](self, "setShouldFetchCollaborationNotices:", 1);
    -[CKChatController checkSuggestionsForBanner](self, "checkSuggestionsForBanner");
  }
  else if (v14)
  {
    OSLogHandleForIMFoundationCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      LOWORD(v17) = 0;
      _os_log_impl(&dword_18DFCD000, v16, OS_LOG_TYPE_INFO, "Ignoring CollaborationNotices change notification, not relevant to displayed chat.", (uint8_t *)&v17, 2u);
    }

  }
}

- (void)_handleContactStoreBatchLoadCompleteNotification:(id)a3
{
  id v4;
  NSObject *v5;
  uint8_t v6[16];

  v4 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "Fetching CollaborationNotices in response to contact store load completion", v6, 2u);
    }

  }
  -[CKChatController setShouldFetchCollaborationNotices:](self, "setShouldFetchCollaborationNotices:", 1);
  -[CKChatController checkSuggestionsForBanner](self, "checkSuggestionsForBanner");

}

- (void)_fetchCollaborationNotices
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_18DFCD000, v0, v1, "Received CollaborationNoticesChanged notification in unsupported process.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void __46__CKChatController__fetchCollaborationNotices__block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __46__CKChatController__fetchCollaborationNotices__block_invoke_2;
  v6[3] = &unk_1E274A108;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], v6);

}

uint64_t __46__CKChatController__fetchCollaborationNotices__block_invoke_2(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id *v4;
  void *v5;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v7 = 138412290;
      v8 = v3;
      _os_log_impl(&dword_18DFCD000, v2, OS_LOG_TYPE_INFO, "Received CollaborationNotices: %@", (uint8_t *)&v7, 0xCu);
    }

  }
  v5 = *(void **)(a1 + 40);
  v4 = (id *)(a1 + 40);
  objc_msgSend(v5, "_processCollaborationNoticesForBanner:", *(v4 - 1));
  return objc_msgSend(*v4, "_updateSuggestionsBanners");
}

- (void)_processCollaborationNoticesForBanner:(id)a3
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v16;
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v16 != v9)
          objc_enumerationMutation(v6);
        v11 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * i);
        if (-[CKChatController _noticeIsExpired:](self, "_noticeIsExpired:", v11, (_QWORD)v15))
        {
          objc_msgSend(MEMORY[0x1E0D357C8], "sharedInstance");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "dismissNotice:", v11);

          goto LABEL_11;
        }
        objc_opt_class();
        +[CKCollaborationNoticeSuggestion suggestionWithNotice:delegate:wantsInlineReplyStyle:](CKCollaborationNoticeSuggestion, "suggestionWithNotice:delegate:wantsInlineReplyStyle:", v11, self, objc_opt_isKindOfClass() & 1);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v12);

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v8)
        continue;
      break;
    }
  }

  v13 = (void *)objc_msgSend(v5, "copy");
  -[CKChatController setCollaborationNoticeSuggestions:](self, "setCollaborationNoticeSuggestions:", v13);

  -[CKChatController _showOrHideNicknameBannerIfNeeded](self, "_showOrHideNicknameBannerIfNeeded");
LABEL_11:

}

- (void)setCollaborationNoticeSuggestions:(id)a3
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t v22[128];
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_storeStrong((id *)&self->_collaborationNoticeSuggestions, a3);
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = objc_msgSend(v5, "count");
      -[CKChatController standardSuggestionPresenter](self, "standardSuggestionPresenter");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218242;
      v24 = v7;
      v25 = 2112;
      v26 = v8;
      _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "setCollaborationNoticeSuggestions invoked with %lu suggestions. standardSuggestionPresenter %@", buf, 0x16u);

    }
  }
  -[CKChatController standardSuggestionPresenter](self, "standardSuggestionPresenter");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setSuggestions:", v5);

  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v10 = v5;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v19;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v19 != v12)
          objc_enumerationMutation(v10);
        objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * v13), "notice", (_QWORD)v18);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "dateViewed");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v15 == 0;

        if (v16)
        {
          objc_msgSend(MEMORY[0x1E0D357C8], "sharedInstance");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "markAsViewedForNotice:", v14);

        }
        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v11);
  }

}

- (BOOL)_noticeIsExpired:(id)a3
{
  id v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  uint64_t v11;
  BOOL v12;

  v3 = a3;
  objc_msgSend(v3, "date");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "timeIntervalSinceNow");
  v6 = v5;

  objc_msgSend(v3, "dateViewed");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_msgSend(v3, "dateViewed");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceNow");
    v10 = -v9;

  }
  else
  {
    v10 = 0.0;
  }

  v11 = IMGetCachedDomainIntForKeyWithDefaultValue();
  v12 = v10 >= (double)IMGetCachedDomainIntForKeyWithDefaultValue() || -v6 >= (double)v11;

  return v12;
}

- (void)dismissCollaborationNoticeBannersIfNecessary
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  _BOOL4 v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  -[CKChatController standardSuggestionPresenter](self, "standardSuggestionPresenter");
  v19 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "banner");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController suggestionBannerView](self, "suggestionBannerView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 != v4)
  {

    return;
  }
  -[CKChatController suggestionBannerView](self, "suggestionBannerView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "window");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    -[CKChatController standardSuggestionPresenter](self, "standardSuggestionPresenter");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "suggestions");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v9 = v8;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (!v10)
      goto LABEL_17;
    v11 = v10;
    v12 = *(_QWORD *)v21;
    while (1)
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v21 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v13);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v15 = v14;
          objc_msgSend(v15, "notice");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v16, "wantsEphemeralDismissal"))
          {

            goto LABEL_13;
          }
          objc_msgSend(v15, "notice");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = -[CKChatController _noticeIsExpired:](self, "_noticeIsExpired:", v17);

          if (v18)
LABEL_13:
            -[CKChatController dismissCollaborationNoticeSuggestion:](self, "dismissCollaborationNoticeSuggestion:", v15);

        }
        ++v13;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (!v11)
      {
LABEL_17:

        return;
      }
    }
  }
}

- (void)dismissCollaborationNoticeSuggestion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;

  v4 = a3;
  -[CKChatController standardSuggestionPresenter](self, "standardSuggestionPresenter");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeSuggestion:", v4);

  objc_msgSend(MEMORY[0x1E0D357C8], "sharedInstance");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "notice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "dismissNotice:", v6);
}

- (id)_newCollaborationPayloadFromPayload:(id)a3 shareURL:(id)a4 updatedMetadata:(id)a5
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v6 = a5;
  v7 = a3;
  +[CKBrowserItemPayload browserItemPayloadFromIMPluginPayload:](CKBrowserItemPayload, "browserItemPayloadFromIMPluginPayload:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  StringGUID();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setMessageGUID:", v9);

  StringGUID();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setPluginSessionGUID:", v10);

  objc_msgSend(v8, "setAttachments:", 0);
  objc_msgSend(v8, "setPayloadCollaborationType:", objc_msgSend(v7, "payloadCollaborationType"));
  objc_msgSend(v8, "setCollaborationMetadata:", v6);

  objc_msgSend(v7, "cloudKitShare");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "setCloudKitShare:", v11);
  return v8;
}

- (void)addToCollaboration:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD block[5];
  id v35;
  _QWORD v36[4];
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  _BYTE buf[12];
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "notice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "senderHandle");
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "notice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "metadata");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "contentURL");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "notice");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "metadata");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "messageGUID");
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v32;
      v43 = 2112;
      v44 = v8;
      v45 = 2112;
      v46 = v33;
      _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "Adding handle: %@ to share URL: %@ with messageGUID: %@", buf, 0x20u);
    }

  }
  objc_msgSend(MEMORY[0x1E0D35770], "sharedInstance");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "existingDataSourceForMessageGUID:bundleID:", v33, *MEMORY[0x1E0D375F8]);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v31, "pluginPayload");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)MEMORY[0x1E0CC11D8];
  objc_msgSend(v13, "data");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "linkWithDataRepresentationWithoutSubstitutingAttachments:", v15);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v30, "metadata");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "collaborationMetadata");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "containerSetupInfo");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v18, "containerOptions");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setAccountOverrideInfo:", 0);

  objc_msgSend(v18, "containerOptions");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setPersonaIdentifier:", 0);

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v13;
      v43 = 2112;
      v44 = v18;
      _os_log_impl(&dword_18DFCD000, v21, OS_LOG_TYPE_INFO, "Adding - PluginPayload: %@, Container Setup Info: %@", buf, 0x16u);
    }

  }
  *(_QWORD *)buf = 0;
  objc_initWeak((id *)buf, self);
  -[CKCoreChatController chat](self, "chat");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "guid");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = MEMORY[0x1E0C809B0];
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 3221225472;
  v36[2] = __39__CKChatController_addToCollaboration___block_invoke;
  v36[3] = &unk_1E274D5F8;
  v25 = v16;
  v37 = v25;
  objc_copyWeak(&v41, (id *)buf);
  v26 = v13;
  v38 = v26;
  v27 = v8;
  v39 = v27;
  v28 = v4;
  v40 = v28;
  -[CKChatController addParticipant:toCollaboration:forChatGUID:containerSetupInfo:completionHandler:](self, "addParticipant:toCollaboration:forChatGUID:containerSetupInfo:completionHandler:", v32, v27, v23, v18, v36);

  block[0] = v24;
  block[1] = 3221225472;
  block[2] = __39__CKChatController_addToCollaboration___block_invoke_2_1034;
  block[3] = &unk_1E274A108;
  block[4] = self;
  v35 = v28;
  v29 = v28;
  dispatch_async(MEMORY[0x1E0C80D38], block);

  objc_destroyWeak(&v41);
  objc_destroyWeak((id *)buf);

}

void __39__CKChatController_addToCollaboration___block_invoke(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id WeakRetained;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;

  v5 = a3;
  v6 = v5;
  if (a2)
  {
    if (v5)
    {
      v7 = v5;
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "collaborationMetadata");
      v7 = (id)objc_claimAutoreleasedReturnValue();
    }
    v8 = v7;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    v10 = (void *)objc_msgSend(WeakRetained, "_newCollaborationPayloadFromPayload:shareURL:updatedMetadata:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v8);

    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __39__CKChatController_addToCollaboration___block_invoke_2;
    v16[3] = &unk_1E274D5A8;
    v17 = *(id *)(a1 + 48);
    objc_copyWeak(&v20, (id *)(a1 + 64));
    v11 = v10;
    v18 = v11;
    v12 = v8;
    v19 = v12;
    +[CKComposition compositionWithShelfPluginPayload:completionHandler:](CKComposition, "compositionWithShelfPluginPayload:completionHandler:", v11, v16);

    objc_destroyWeak(&v20);
  }
  else
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __39__CKChatController_addToCollaboration___block_invoke_1032;
    v13[3] = &unk_1E274D5D0;
    objc_copyWeak(&v15, (id *)(a1 + 64));
    v14 = *(id *)(a1 + 56);
    dispatch_async(MEMORY[0x1E0C80D38], v13);

    objc_destroyWeak(&v15);
  }

}

void __39__CKChatController_addToCollaboration___block_invoke_2(id *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD block[4];
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = a2;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __39__CKChatController_addToCollaboration___block_invoke_3;
  block[3] = &unk_1E274D580;
  v6 = a1[4];
  objc_copyWeak(&v10, a1 + 7);
  v7 = a1[5];
  v8 = a1[6];
  v9 = v3;
  v4 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], block);

  objc_destroyWeak(&v10);
}

void __39__CKChatController_addToCollaboration___block_invoke_3(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  CKComposition *v11;
  void *v12;
  void *v13;
  CKComposition *v14;
  id v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v16 = 138412290;
      v17 = v3;
      _os_log_impl(&dword_18DFCD000, v2, OS_LOG_TYPE_INFO, "Sending the final composition for sharingURL: %@", (uint8_t *)&v16, 0xCu);
    }

  }
  v4 = (id *)(a1 + 64);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v6 = *(void **)(a1 + 40);
  objc_msgSend(v6, "messageGUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "updateDataSourceForPluginPayload:forGUID:withCollaborationMetadata:shareURL:", v6, v7, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "datasource");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setPayloadInShelf:", 1);

  objc_msgSend(v8, "datasource");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "payloadWillEnterShelf");

  v11 = [CKComposition alloc];
  objc_msgSend(*(id *)(a1 + 56), "text");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 56), "subject");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[CKComposition initWithText:subject:shelfPluginPayload:](v11, "initWithText:subject:shelfPluginPayload:", v12, v13, v8);

  v15 = objc_loadWeakRetained(v4);
  objc_msgSend(v15, "sendCompositionIfAllowed:", v14);

}

void __39__CKChatController_addToCollaboration___block_invoke_1032(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "createCollaborationFailureAlertForNotice:", *(_QWORD *)(a1 + 32));

}

void __39__CKChatController_addToCollaboration___block_invoke_2_1034(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "standardSuggestionPresenter");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeSuggestion:", *(_QWORD *)(a1 + 40));

}

- (void)removeFromCollaboration:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD block[5];
  id v32;
  _QWORD v33[4];
  id v34;
  id v35;
  _BYTE buf[12];
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "notice");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "senderHandle");
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "notice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "metadata");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "contentURL");
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "notice");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "metadata");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "messageGUID");
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v29;
      v37 = 2112;
      v38 = v28;
      v39 = 2112;
      v40 = v30;
      _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, "Removing handle: %@ from share URL: %@ with messageGUID: %@", buf, 0x20u);
    }

  }
  objc_msgSend(MEMORY[0x1E0D35770], "sharedInstance");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "existingDataSourceForMessageGUID:bundleID:", v30, *MEMORY[0x1E0D375F8]);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v27, "pluginPayload");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0CC11D8];
  objc_msgSend(v12, "data");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "linkWithDataRepresentationWithoutSubstitutingAttachments:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v15, "metadata");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "collaborationMetadata");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "containerSetupInfo");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v18, "containerOptions");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setAccountOverrideInfo:", 0);

  objc_msgSend(v18, "containerOptions");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setPersonaIdentifier:", 0);

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v12;
      v37 = 2112;
      v38 = v18;
      _os_log_impl(&dword_18DFCD000, v21, OS_LOG_TYPE_INFO, "Removing - PluginPayload: %@, Container Setup Info: %@", buf, 0x16u);
    }

  }
  *(_QWORD *)buf = 0;
  objc_initWeak((id *)buf, self);
  -[CKCoreChatController chat](self, "chat");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "guid");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = MEMORY[0x1E0C809B0];
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 3221225472;
  v33[2] = __44__CKChatController_removeFromCollaboration___block_invoke;
  v33[3] = &unk_1E274D620;
  objc_copyWeak(&v35, (id *)buf);
  v25 = v4;
  v34 = v25;
  -[CKChatController removeParticipant:fromCollaboration:forChatGUID:containerSetupInfo:completionHandler:](self, "removeParticipant:fromCollaboration:forChatGUID:containerSetupInfo:completionHandler:", v29, v28, v23, v18, v33);

  block[0] = v24;
  block[1] = 3221225472;
  block[2] = __44__CKChatController_removeFromCollaboration___block_invoke_3;
  block[3] = &unk_1E274A108;
  block[4] = self;
  v32 = v25;
  v26 = v25;
  dispatch_async(MEMORY[0x1E0C80D38], block);

  objc_destroyWeak(&v35);
  objc_destroyWeak((id *)buf);

}

void __44__CKChatController_removeFromCollaboration___block_invoke(uint64_t a1, char a2)
{
  _QWORD v3[4];
  id v4;
  id v5;

  if ((a2 & 1) == 0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __44__CKChatController_removeFromCollaboration___block_invoke_2;
    v3[3] = &unk_1E274D5D0;
    objc_copyWeak(&v5, (id *)(a1 + 40));
    v4 = *(id *)(a1 + 32);
    dispatch_async(MEMORY[0x1E0C80D38], v3);

    objc_destroyWeak(&v5);
  }
}

void __44__CKChatController_removeFromCollaboration___block_invoke_2(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "createCollaborationFailureAlertForNotice:", *(_QWORD *)(a1 + 32));

}

void __44__CKChatController_removeFromCollaboration___block_invoke_3(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "standardSuggestionPresenter");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeSuggestion:", *(_QWORD *)(a1 + 40));

}

- (void)collaborationNoticeSuggestionWillDismiss:(id)a3
{
  id v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v4 = a3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __61__CKChatController_collaborationNoticeSuggestionWillDismiss___block_invoke;
  v6[3] = &unk_1E274A108;
  v6[4] = self;
  v7 = v4;
  v5 = v4;
  dispatch_async(MEMORY[0x1E0C80D38], v6);

}

uint64_t __61__CKChatController_collaborationNoticeSuggestionWillDismiss___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "dismissCollaborationNoticeSuggestion:", *(_QWORD *)(a1 + 40));
}

- (void)_satelliteStateChangedNotification:(id)a3
{
  id v4;
  void *v5;
  int v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  uint8_t v11[16];
  objc_super v12;

  v4 = a3;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "stewieEnabled");

  if (v6)
  {
    v12.receiver = self;
    v12.super_class = (Class)CKChatController;
    -[CKCoreChatController _satelliteStateChangedNotification:](&v12, sel__satelliteStateChangedNotification_, v4);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "Satellite state changed, determining whether to show or hide entry view and updating chat items.", v11, 2u);
      }

    }
    -[CKChatController addOrRemoveEntryViewIfNeeded](self, "addOrRemoveEntryViewIfNeeded");
    -[CKCoreChatController chat](self, "chat");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_reloadChatItemsForSatelliteStateChangeIfRequired:", CFSTR("Satellite status changed"));

    -[CKCoreChatController conversation](self, "conversation");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isStewieConversation");

    if (v10)
      -[CKChatController checkSuggestionsForBanner](self, "checkSuggestionsForBanner");
  }

}

- (void)_presentTranscriptSharingBannerIfNecessary
{
  void *v3;
  char v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;

  objc_msgSend(MEMORY[0x1E0D357A0], "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isStewieEmergencyActive");

  if ((v4 & 1) == 0)
  {
    -[CKChatController standardSuggestionPresenter](self, "standardSuggestionPresenter");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "suggestions");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "count");

    if (!v15)
      return;
    -[CKChatController standardSuggestionPresenter](self, "standardSuggestionPresenter");
    v16 = (id)objc_claimAutoreleasedReturnValue();
    -[CKChatController transcriptSharingBannerSuggestion](self, "transcriptSharingBannerSuggestion");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "removeSuggestion:", v12);
    goto LABEL_7;
  }
  -[CKCoreChatController chat](self, "chat");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "transcriptSharingState");

  if (v6)
  {
    -[CKChatController standardSuggestionPresenter](self, "standardSuggestionPresenter");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "suggestions");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "count");

    if (!v9)
    {
      +[CKTranscriptSharingSuggestion bannerWithState:](CKTranscriptSharingSuggestion, "bannerWithState:", v6);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController setTranscriptSharingBannerSuggestion:](self, "setTranscriptSharingBannerSuggestion:", v10);

      -[CKChatController transcriptSharingBannerSuggestion](self, "transcriptSharingBannerSuggestion");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setDelegate:", self);

      -[CKChatController standardSuggestionPresenter](self, "standardSuggestionPresenter");
      v16 = (id)objc_claimAutoreleasedReturnValue();
      -[CKChatController transcriptSharingBannerSuggestion](self, "transcriptSharingBannerSuggestion");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "addSuggestion:", v12);
LABEL_7:

    }
  }
}

- (void)transcriptSharingBannerWillDismiss:(id)a3
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[CKCoreChatController chat](self, "chat");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "updateTranscriptSharingState:", 0);

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __55__CKChatController_transcriptSharingBannerWillDismiss___block_invoke;
  v7[3] = &unk_1E274A108;
  v7[4] = self;
  v8 = v4;
  v6 = v4;
  dispatch_async(MEMORY[0x1E0C80D38], v7);

}

void __55__CKChatController_transcriptSharingBannerWillDismiss___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "standardSuggestionPresenter");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeSuggestion:", *(_QWORD *)(a1 + 40));

}

- (void)transcriptStopSharingButtonTapped:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  CKChatController *v19;
  id v20;

  v4 = a3;
  CKFrameworkBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("TS_ALERT_TITLE_STOP_SHARING"), &stru_1E276D870, CFSTR("TranscriptSharing-SYDROB_FEATURES"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKAlertController alertControllerWithTitle:message:preferredStyle:](CKAlertController, "alertControllerWithTitle:message:preferredStyle:", v6, 0, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  CKFrameworkBundle();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("TS_STOP_SHARING_ACTION_ALERT"), &stru_1E276D870, CFSTR("TranscriptSharing-SYDROB_FEATURES"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = MEMORY[0x1E0C809B0];
  v16 = 3221225472;
  v17 = __54__CKChatController_transcriptStopSharingButtonTapped___block_invoke;
  v18 = &unk_1E274B818;
  v19 = self;
  v20 = v4;
  v10 = v4;
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v9, 2, &v15);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "addAction:", v11, v15, v16, v17, v18, v19);
  CKFrameworkBundle();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("CANCEL"), &stru_1E276D870, CFSTR("ChatKit"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v13, 1, 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "addAction:", v14);
  objc_msgSend(v7, "presentFromViewController:animated:completion:", self, 1, 0);

}

void __54__CKChatController_transcriptStopSharingButtonTapped___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "chat");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "updateTranscriptSharingState:", 3);

  objc_msgSend(*(id *)(a1 + 32), "standardSuggestionPresenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeSuggestion:", *(_QWORD *)(a1 + 40));

  +[CKTranscriptSharingSuggestion bannerWithState:](CKTranscriptSharingSuggestion, "bannerWithState:", 3);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setDelegate:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 32), "standardSuggestionPresenter");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addSuggestion:", v6);

  objc_msgSend(*(id *)(a1 + 32), "chat");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stopTranscriptSharingWithChat");

}

- (void)updateFoundInSuggestionPresenter
{
  void *v2;
  void *v3;
  __int128 v4;
  int v5;
  uint64_t i;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  __int128 v43;
  void *v44;
  uint64_t v45;
  id obj;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t buf[4];
  id v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  void *v59;
  void *v60;
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  -[CKCoreChatController chat](self, "chat");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "chatItems");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "reverseObjectEnumerator");
  obj = (id)objc_claimAutoreleasedReturnValue();

  v49 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
  if (v49)
  {
    v48 = *(_QWORD *)v51;
    v45 = *MEMORY[0x1E0C96740];
    v5 = 20;
    *(_QWORD *)&v4 = 138412546;
    v43 = v4;
    do
    {
      for (i = 0; i != v49; ++i)
      {
        if (*(_QWORD *)v51 != v48)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & (v5 > 0)) == 1)
        {
          v8 = v7;
          objc_msgSend(v8, "message");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "guid");
          v10 = (void *)objc_claimAutoreleasedReturnValue();

          if (v10)
          {
            v11 = objc_alloc_init(MEMORY[0x1E0CA6B50]);
            objc_msgSend(v8, "message");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "sender");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = objc_msgSend(v13, "hasName");

            if (v14)
            {
              objc_msgSend(v8, "message");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v15, "sender");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v16, "name");
              v17 = (void *)objc_claimAutoreleasedReturnValue();

            }
            else
            {
              v17 = 0;
            }
            v18 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            objc_msgSend(v8, "message");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "sender");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "ID");
            v21 = (void *)objc_claimAutoreleasedReturnValue();

            if (v21)
            {
              objc_msgSend(v8, "message");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v22, "sender");
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v23, "ID");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v18, "addObject:", v24);

            }
            else if (IMOSLoggingEnabled())
            {
              OSLogHandleForIMFoundationCategory();
              v25 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
              {
                objc_msgSend(v8, "message");
                v26 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = v43;
                v55 = v8;
                v56 = 2112;
                v57 = (uint64_t)v26;
                _os_log_impl(&dword_18DFCD000, v25, OS_LOG_TYPE_INFO, "sending id is nil. partChatItem: %@ =, message: %@", buf, 0x16u);

              }
            }
            v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CA6B10]), "initWithDisplayName:handles:handleIdentifier:", v17, v18, v45);
            v60 = v27;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v60, 1);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "setAuthors:", v28);

            if (objc_msgSend(v8, "isFromMe"))
              objc_msgSend(v11, "setAccountHandles:", v18);
            objc_msgSend(v8, "message", v43);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v29, "time");
            v30 = (void *)objc_claimAutoreleasedReturnValue();

            if (v30)
            {
              objc_msgSend(v8, "message");
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v31, "time");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "setContentCreationDate:", v32);

            }
            v33 = objc_alloc(MEMORY[0x1E0CA6B48]);
            -[CKCoreChatController chat](self, "chat");
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v34, "guid");
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            v36 = (void *)objc_msgSend(v33, "initWithUniqueIdentifier:domainIdentifier:attributeSet:", v10, v35, v11);

            if (v36)
            {
              objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v37, "bundleIdentifier");
              v38 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v36, "setBundleID:", v38);

              objc_msgSend(v44, "addObject:", v36);
            }

          }
          --v5;
        }
        else if (v5 < 1)
        {
          goto LABEL_31;
        }
      }
      v49 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v61, 16);
    }
    while (v49);
  }
  else
  {
    v5 = 20;
  }
LABEL_31:

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      v40 = objc_msgSend(v44, "count");
      -[CKChatController foundInSuggestionPresenter](self, "foundInSuggestionPresenter");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218498;
      v55 = (id)(20 - v5);
      v56 = 2048;
      v57 = v40;
      v58 = 2112;
      v59 = v41;
      _os_log_impl(&dword_18DFCD000, v39, OS_LOG_TYPE_INFO, "checkCSSearchableItemSuggestionsForBanner for %lu sliced searchables from %lu. foundInSuggestionPresenter %@", buf, 0x20u);

    }
  }
  -[CKChatController foundInSuggestionPresenter](self, "foundInSuggestionPresenter", v43);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "addSuggestionsFromSearchableItems:options:filter:", v44, 0, &__block_literal_global_1051);

}

id __52__CKChatController_updateFoundInSuggestionPresenter__block_invoke(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  int v12;
  id v14;
  uint8_t buf[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v14 = (id)objc_opt_new();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v3 = v2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        MEMORY[0x193FF3C18](CFSTR("SGRealtimeEvent"), CFSTR("CoreSuggestions"));
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v8 = v7;
          if (objc_msgSend(v8, "state") == 4 || objc_msgSend(v8, "state") == 5)
          {
            if (IMOSLoggingEnabled())
            {
              OSLogHandleForIMFoundationCategory();
              v9 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, "Filtered out Duplicate event", buf, 2u);
              }
              goto LABEL_12;
            }
            goto LABEL_20;
          }
          objc_msgSend(v8, "event");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "isNaturalLanguageEvent");

          if (v12)
          {
            if (IMOSLoggingEnabled())
            {
              OSLogHandleForIMFoundationCategory();
              v9 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, "Filtered out Natural Language event", buf, 2u);
              }
LABEL_12:

            }
LABEL_20:

            continue;
          }
          goto LABEL_26;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v8 = v7;
          if (objc_msgSend(v8, "updatedFields"))
          {
            if (IMOSLoggingEnabled())
            {
              OSLogHandleForIMFoundationCategory();
              v10 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, "Filtered out Suggestions realtime contact", buf, 2u);
              }

            }
            goto LABEL_20;
          }
LABEL_26:

        }
        objc_msgSend(v14, "addObject:", v7);
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v4);
  }

  return v14;
}

- (BOOL)canShowBusinessOnboarding
{
  return 0;
}

- (CKOnboardingController)onboardingController
{
  CKOnboardingController *onboardingController;
  CKOnboardingController *v4;
  CKOnboardingController *v5;

  onboardingController = self->_onboardingController;
  if (!onboardingController)
  {
    v4 = objc_alloc_init(CKOnboardingController);
    v5 = self->_onboardingController;
    self->_onboardingController = v4;

    -[CKOnboardingController setDelegate:](self->_onboardingController, "setDelegate:", self);
    onboardingController = self->_onboardingController;
  }
  return onboardingController;
}

- (id)presentingViewControllerForOnboardingController:(id)a3
{
  id v4;
  id v5;
  NSObject *v6;
  CKChatController *v7;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKChatController onboardingController](self, "onboardingController");
  v5 = (id)objc_claimAutoreleasedReturnValue();

  if (v5 == v4)
  {
    v7 = self;
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v9 = 138412290;
        v10 = v4;
        _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "Unexpected instance of onboardingController %@", (uint8_t *)&v9, 0xCu);
      }

    }
    v7 = 0;
  }

  return v7;
}

- (void)onboardingControllerDidFinish:(id)a3
{
  -[CKChatController setOnboardingController:](self, "setOnboardingController:", 0);
}

- (BOOL)_shouldShowNicknameOnboardingFlow
{
  void *v2;
  int v3;

  if (IMSharedHelperNickNameEnabled())
  {
    objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v2, "iCloudSignedInToUseNicknames"))
      v3 = objc_msgSend(MEMORY[0x1E0D358A8], "multiplePhoneNumbersTiedToAppleID") ^ 1;
    else
      LOBYTE(v3) = 0;

  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3;
}

- (BOOL)showNicknameSharingOnboardingWithMemoji:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  char v6;
  void *v7;
  char v8;

  v3 = a3;
  if (!-[CKChatController _shouldShowNicknameOnboardingFlow](self, "_shouldShowNicknameOnboardingFlow"))
    return 0;
  objc_msgSend(MEMORY[0x1E0D398E8], "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "sharingEnabled");
  if ((v6 & 1) == 0)
  {
    -[CKChatController onboardingController](self, "onboardingController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "presentNicknameSharingSetupFlowWithMemoji:forUserInitiatedEdit:", v3, 1);

  }
  v8 = v6 ^ 1;

  return v8;
}

- (id)_meContact
{
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0D397A8], "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D397A8], "keysForNicknameHandling");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fetchMeContactWithKeys:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (id)textDroppableView:(id)a3 proposalForDrop:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;

  v5 = a4;
  -[CKChatController entryView](self, "entryView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "displayMode") == 2)
  {

LABEL_4:
    v9 = 0;
    goto LABEL_8;
  }
  -[CKChatController entryView](self, "entryView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "displayMode");

  if (v8 == 3)
    goto LABEL_4;
  if (objc_msgSend(v5, "isSameView"))
    v9 = 3;
  else
    v9 = 2;
LABEL_8:
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAAC0]), "initWithDropOperation:", v9);
  objc_msgSend(v10, "setDropAction:", 0);
  IMLogHandleForCategory();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    -[CKChatController textDroppableView:proposalForDrop:].cold.1();

  return v10;
}

- (void)textPasteConfigurationSupporting:(id)a3 transformPasteItem:(id)a4
{
  id v6;
  id v7;
  CKComposition *v8;
  CKComposition *dropComposition;
  void *v10;
  _TtC7ChatKit27CKCompositionBuilderContext *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  id v16;
  _QWORD v17[5];
  id v18;

  v6 = a3;
  v7 = a4;
  if (!self->_dropComposition)
  {
    +[CKComposition composition](CKComposition, "composition");
    v8 = (CKComposition *)objc_claimAutoreleasedReturnValue();
    dropComposition = self->_dropComposition;
    self->_dropComposition = v8;

  }
  -[CKCoreChatController conversation](self, "conversation");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_alloc_init(_TtC7ChatKit27CKCompositionBuilderContext);
  -[CKCompositionBuilderContext setIsInLockdownMode:](v11, "setIsInLockdownMode:", objc_msgSend(MEMORY[0x1E0D397F8], "deviceIsLockedDown"));
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "isExpressiveTextEnabled");

  if (v13)
  {
    objc_msgSend(v10, "chat");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKCompositionBuilderContext setSupportsExpressiveText:](v11, "setSupportsExpressiveText:", objc_msgSend(v14, "supportsCapabilities:", 0x100000));

  }
  -[CKCompositionBuilderContext setConversationSupportsInlineAdaptiveImageGlyphs:](v11, "setConversationSupportsInlineAdaptiveImageGlyphs:", objc_msgSend(v10, "supportsInlineAdaptiveImageGlyphs"));
  objc_msgSend(v7, "itemProvider");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __72__CKChatController_textPasteConfigurationSupporting_transformPasteItem___block_invoke;
  v17[3] = &unk_1E274D688;
  v17[4] = self;
  v18 = v7;
  v16 = v7;
  +[CKComposition requestCompositionFromItemProvider:builderContext:completion:](CKComposition, "requestCompositionFromItemProvider:builderContext:completion:", v15, v11, v17);

}

void __72__CKChatController_textPasteConfigurationSupporting_transformPasteItem___block_invoke(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  NSObject *v10;

  v4 = a2;
  if (v4)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1288), "compositionByAppendingComposition:", v4);
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 1288);
    *(_QWORD *)(v6 + 1288) = v5;

    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isAudioMessagesEntryViewRecordingEnabled");

    if (v9)
    {
      if (objc_msgSend(v4, "isAudioComposition"))
        objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 1288), a2);
    }
  }
  IMLogHandleForCategory();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    __72__CKChatController_textPasteConfigurationSupporting_transformPasteItem___block_invoke_cold_1();

  objc_msgSend(*(id *)(a1 + 40), "setNoResult");
}

- (id)textPasteConfigurationSupporting:(id)a3 combineItemAttributedStrings:(id)a4 forRange:(id)a5
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  int v15;
  int v16;
  CKComposition *dropComposition;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  _BOOL4 v24;
  void *v25;
  void *v26;
  void *v27;
  int v28;
  uint64_t *v29;
  char v30;
  uint64_t v31;
  void *v32;
  void *v33;
  NSObject *v34;
  _QWORD v36[4];
  id v37;
  _QWORD v38[4];
  id v39;
  _QWORD aBlock[7];
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  void (*v49)(uint64_t);
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a4;
  v11 = a5;
  if (self->_dropComposition)
  {
    -[CKChatController entryView](self, "entryView");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "pasteBoardTextFromComposition:", self->_dropComposition);
    v13 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "isAudioMessagesEntryViewRecordingEnabled");

    if (v15 && -[CKComposition isAudioComposition](self->_dropComposition, "isAudioComposition"))
    {

      v16 = 1;
    }
    else
    {
      if (v13)
      {
        dropComposition = self->_dropComposition;
        self->_dropComposition = 0;

        goto LABEL_29;
      }
      v16 = 0;
    }
    -[CKComposition shelfPluginPayload](self->_dropComposition, "shelfPluginPayload");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v22)
    {

    }
    else
    {
      -[CKComposition shelfMediaObject](self->_dropComposition, "shelfMediaObject");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = v23 == 0;

      if ((v24 & ~v16 & 1) != 0)
      {
LABEL_28:
        v13 = 0;
        goto LABEL_29;
      }
    }
    v45 = 0;
    v46 = &v45;
    v47 = 0x3032000000;
    v48 = __Block_byref_object_copy__11;
    v49 = __Block_byref_object_dispose__11;
    v50 = 0;
    -[CKChatController entryView](self, "entryView");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "composition");
    v50 = (id)objc_claimAutoreleasedReturnValue();

    v41 = 0;
    v42 = &v41;
    v43 = 0x2020000000;
    v44 = 0;
    objc_msgSend((id)v46[5], "shelfPluginPayload");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v25) = v26 != 0;

    v44 = (char)v25;
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v27, "isAudioMessagesEntryViewRecordingEnabled");

    if (v28)
    {
      v29 = v42;
      v30 = *((_BYTE *)v42 + 24) != 0;
      if (!*((_BYTE *)v42 + 24) && ((v16 ^ 1) & 1) == 0)
      {
        v30 = objc_msgSend((id)v46[5], "hasContent");
        v29 = v42;
      }
      *((_BYTE *)v29 + 24) = v30;
    }
    v31 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __91__CKChatController_textPasteConfigurationSupporting_combineItemAttributedStrings_forRange___block_invoke;
    aBlock[3] = &unk_1E274D6D8;
    aBlock[4] = self;
    aBlock[5] = &v41;
    aBlock[6] = &v45;
    v32 = _Block_copy(aBlock);
    v33 = v32;
    if (*((_BYTE *)v42 + 24))
    {
      v38[0] = v31;
      v38[1] = 3221225472;
      v38[2] = __91__CKChatController_textPasteConfigurationSupporting_combineItemAttributedStrings_forRange___block_invoke_3;
      v38[3] = &unk_1E274AED0;
      v39 = v32;
      v36[0] = v31;
      v36[1] = 3221225472;
      v36[2] = __91__CKChatController_textPasteConfigurationSupporting_combineItemAttributedStrings_forRange___block_invoke_4;
      v36[3] = &unk_1E274AED0;
      v37 = v39;
      -[CKChatController presentReplaceCompositionAlertWithConfirmationBlock:cancelBlock:](self, "presentReplaceCompositionAlertWithConfirmationBlock:cancelBlock:", v38, v36);

    }
    else
    {
      (*((void (**)(void *, uint64_t))v32 + 2))(v32, 1);
    }

    _Block_object_dispose(&v41, 8);
    _Block_object_dispose(&v45, 8);

    goto LABEL_28;
  }
  v13 = objc_alloc_init(MEMORY[0x1E0CB3778]);
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v18 = v10;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
  if (v19)
  {
    v20 = *(_QWORD *)v52;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v52 != v20)
          objc_enumerationMutation(v18);
        objc_msgSend(v13, "appendAttributedString:", *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * v21++));
      }
      while (v19 != v21);
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v51, v55, 16);
    }
    while (v19);
  }

LABEL_29:
  IMLogHandleForCategory();
  v34 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    -[CKChatController textPasteConfigurationSupporting:combineItemAttributedStrings:forRange:].cold.1(a2, v34);

  return v13;
}

void __91__CKChatController_textPasteConfigurationSupporting_combineItemAttributedStrings_forRange___block_invoke(uint64_t a1, char a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  _QWORD block[5];
  id v15;
  id location;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) || (a2 & 1) != 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v6 = *(void **)(v5 + 40);
    v7 = *(void **)(*(_QWORD *)(a1 + 32) + 1288);
    if (v6)
    {
      objc_msgSend(v6, "compositionByAppendingComposition:", v7);
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v10 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v8;
    }
    else
    {
      v11 = v7;
      v10 = *(void **)(v5 + 40);
      *(_QWORD *)(v5 + 40) = v11;
    }

    if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1288), "isAudioComposition"))
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 1288));
    location = 0;
    objc_initWeak(&location, *(id *)(a1 + 32));
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __91__CKChatController_textPasteConfigurationSupporting_combineItemAttributedStrings_forRange___block_invoke_2;
    block[3] = &unk_1E274D6B0;
    objc_copyWeak(&v15, &location);
    block[4] = *(_QWORD *)(a1 + 48);
    dispatch_async(MEMORY[0x1E0C80D38], block);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(void **)(v12 + 1288);
    *(_QWORD *)(v12 + 1288) = 0;

    objc_destroyWeak(&v15);
    objc_destroyWeak(&location);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 1288);
    *(_QWORD *)(v3 + 1288) = 0;

  }
}

void __91__CKChatController_textPasteConfigurationSupporting_combineItemAttributedStrings_forRange___block_invoke_2(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "entryView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setComposition:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));

}

uint64_t __91__CKChatController_textPasteConfigurationSupporting_combineItemAttributedStrings_forRange___block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __91__CKChatController_textPasteConfigurationSupporting_combineItemAttributedStrings_forRange___block_invoke_4(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_18DFCD000, v2, OS_LOG_TYPE_INFO, "Do not replace composition, return.", v4, 2u);
    }

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (id)textPasteConfigurationSupporting:(id)a3 performPasteOfAttributedString:(id)a4 toRange:(id)a5
{
  id v8;
  NSObject *v9;
  void *v10;

  v8 = a3;
  objc_msgSend(v8, "handlePastedString:toRange:", a4, a5);
  IMLogHandleForCategory();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    -[CKChatController textPasteConfigurationSupporting:performPasteOfAttributedString:toRange:].cold.1(a2, v9);

  objc_msgSend(v8, "selectedTextRange");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

- (void)_dragInteractionDidCancelLiftWithoutDragging:(id)a3
{
  id v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;

  v4 = a3;
  WeakRetained = objc_loadWeakRetained(&self->_currentDragPreviewContainer);

  if (WeakRetained)
  {
    -[CKChatController _transcriptStickerCellContainingInteraction:](self, "_transcriptStickerCellContainingInteraction:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      -[CKChatController collectionView](self, "collectionView");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "setScrollEnabled:", 0);

      v8 = objc_loadWeakRetained(&self->_currentDragPreviewContainer);
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = __65__CKChatController__dragInteractionDidCancelLiftWithoutDragging___block_invoke;
      v9[3] = &unk_1E274A108;
      v9[4] = self;
      v10 = v4;
      objc_msgSend(v8, "_animateLiftCancellationAlongsideAnimator:completion:", 0, v9);

      objc_storeWeak(&self->_currentDragPreviewContainer, 0);
    }

  }
}

void __65__CKChatController__dragInteractionDidCancelLiftWithoutDragging___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "collectionView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setScrollEnabled:", 1);

  objc_msgSend(*(id *)(a1 + 32), "_transcriptStickerCellContainingInteraction:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, "setStickerViewHidden:", 0);
    v3 = v4;
  }

}

- (void)_dragInteraction:(id)a3 prepareForSession:(id)a4 completion:(id)a5
{
  void (**v6)(_QWORD);
  void *v7;
  int v8;
  id v9;

  v9 = a3;
  v6 = (void (**)(_QWORD))a5;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isStickerRepositioningEnabled");

  if (v8)
    objc_msgSend(v9, "_setLiftMoveHysteresis:", 0.0);
  v6[2](v6);

}

- (id)_dragInteraction:(id)a3 sessionPropertiesForSession:(id)a4
{
  id v6;
  id v7;
  id v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  double v23;
  double v24;
  void *v25;
  double v26;

  v6 = a3;
  v7 = a4;
  v8 = objc_alloc_init(MEMORY[0x1E0CEAD00]);
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isStickerRepositioningEnabled");

  if (v10 && objc_msgSend(v7, "hasItemsConformingToTypeIdentifiers:", &unk_1E286F370))
  {
    objc_msgSend(v8, "set_wantsElasticEffects:", 1);
    objc_msgSend(v8, "set_resizable:", 1);
    objc_msgSend(v8, "set_rotatable:", 1);
    -[CKChatController _transcriptStickerCellContainingInteraction:](self, "_transcriptStickerCellContainingInteraction:", v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (v11)
    {
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "chatItemForCell:", v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v13 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        v14 = (void *)MEMORY[0x1E0D39B18];
        v15 = v13;
        -[CKChatController collectionView](self, "collectionView");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "bounds");
        objc_msgSend(v14, "calculatedRecentsItemWidthFromStickersUltraExtensionForStickerChatItem:collectionViewWidth:", v15, v17);
        v19 = v18;
        v21 = v20;

      }
      else
      {
        v21 = 48.0;
        v19 = 48.0;
      }

    }
    else
    {
      v21 = 48.0;
      v19 = 48.0;
    }
    objc_msgSend(v8, "set_minimumResizableSize:", v19, v21);
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "stickerDropPreviewMaxDimension");
    v24 = v23;
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "stickerDropPreviewMaxDimension");
    objc_msgSend(v8, "set_maximumResizableSize:", v24, v26);

  }
  return v8;
}

- (BOOL)dragInteraction:(id)a3 sessionIsRestrictedToDraggingApplication:(id)a4
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t i;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a4;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v6) = objc_msgSend(v5, "isStickerRepositioningEnabled");

  if ((_DWORD)v6)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    objc_msgSend(v4, "items", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v6)
    {
      v8 = *(_QWORD *)v12;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v12 != v8)
            objc_enumerationMutation(v7);
          if ((objc_msgSend(MEMORY[0x1E0D39B18], "dragItemIsRepositioningSticker:", *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i)) & 1) != 0)
          {
            LOBYTE(v6) = 1;
            goto LABEL_12;
          }
        }
        v6 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_12:

  }
  return v6;
}

- (id)dragInteraction:(id)a3 itemsForAddingToSession:(id)a4 withTouchAtPoint:(CGPoint)a5
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  objc_msgSend(a4, "items");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v24;
    v12 = (void *)MEMORY[0x1E0C9AA60];
LABEL_3:
    v13 = 0;
    while (1)
    {
      if (*(_QWORD *)v24 != v11)
        objc_enumerationMutation(v8);
      if ((objc_msgSend(MEMORY[0x1E0D39B18], "dragItemIsRepositioningSticker:", *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v13)) & 1) != 0)break;
      if (v10 == ++v13)
      {
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
        if (v10)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:

    -[CKChatController _dragItemsForInteraction:](self, "_dragItemsForInteraction:", v7);
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v8 = (id)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v20;
      while (2)
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v20 != v16)
            objc_enumerationMutation(v8);
          if (objc_msgSend(MEMORY[0x1E0D39B18], "dragItemIsRepositioningSticker:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v17), (_QWORD)v19))
          {

            v12 = (void *)MEMORY[0x1E0C9AA60];
            goto LABEL_19;
          }
          ++v17;
        }
        while (v15 != v17);
        v15 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
        if (v15)
          continue;
        break;
      }
    }

    v8 = v8;
    v12 = v8;
  }
LABEL_19:

  return v12;
}

- (id)dragInteraction:(id)a3 previewForLiftingItem:(id)a4 session:(id)a5
{
  id v7;
  id v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  char isKindOfClass;
  void *v30;
  void *v31;
  id v32;
  void (**v33)(_QWORD, _QWORD);
  uint64_t v34;
  void *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  id v40;
  void *v41;
  float64x2_t v42;
  void *v43;
  double v44;
  double v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  void *v56;
  id v57;
  id v58;
  void *v59;
  float64x2_t v60;
  float64_t v61;
  float64x2_t v62;
  float64_t v63;
  float64x2_t v64;
  double v65;
  float64x2_t v66;
  float64x2_t v67;
  uint64_t v69;
  void *v70;
  void *v71;
  id v72;
  void *v73;
  void *v74;
  NSObject *v75;
  void *v76;
  float64x2_t v78;
  float64_t v79;
  float64x2_t v80;
  float64_t v81;
  double v82;
  float64_t v83;
  float64_t v84;
  float64_t v85;
  double v86;
  id v87;
  float64_t v88;
  char v89[56];

  v7 = a3;
  v8 = a4;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v9, "isStickerRepositioningEnabled"))
  {
    v10 = objc_msgSend(MEMORY[0x1E0D39B18], "dragItemIsRepositioningSticker:", v8);

    if (v10)
    {
      objc_msgSend(v8, "localObject");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "objectForKey:", CFSTR("kStickerDragItemImageViewKey"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        v13 = objc_alloc_init(MEMORY[0x1E0CEA568]);
        v14 = objc_alloc_init(MEMORY[0x1E0CEA390]);
        objc_msgSend(v13, "setShadowPath:", v14);

        objc_msgSend(MEMORY[0x1E0CEA478], "clearColor");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setBackgroundColor:", v15);

        v16 = (void *)MEMORY[0x193FF3C18](CFSTR("_MSStickerDragPreviewContainerView"), CFSTR("Messages"));
        if (v16 && (objc_opt_respondsToSelector() & 1) != 0)
        {
          objc_msgSend(v16, "shadowPropertiesForDrag");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (v17 && (objc_opt_respondsToSelector() & 1) != 0)
            objc_msgSend(v13, "_setShadowProperties:", v17);

        }
        objc_msgSend(v12, "superview");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "center");
        objc_msgSend(v18, "convertPoint:toView:", v18);
        v20 = v19;
        v22 = v21;
        v23 = objc_alloc(MEMORY[0x1E0CEA570]);
        -[CKChatController stickerPreviewTransform](self, "stickerPreviewTransform");
        v24 = (void *)objc_msgSend(v23, "initWithContainer:center:transform:", v18, v89, v20, v22);
        v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA90]), "initWithView:parameters:target:", v12, v13, v24);
        v26 = (void *)objc_msgSend(objc_alloc((Class)v16), "initWithIsDropAnimation:", 0);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v27 = objc_msgSend(v12, "currentFrameIndex");
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
LABEL_38:
            objc_msgSend(v25, "_setPreviewContainer:", v26);
            -[CKChatController setCurrentDragPreviewContainer:](self, "setCurrentDragPreviewContainer:", v26);
            -[CKChatController _transcriptStickerCellContainingInteraction:](self, "_transcriptStickerCellContainingInteraction:", v7);
            v74 = (void *)objc_claimAutoreleasedReturnValue();
            if (v74)
            {
              IMLogHandleForCategory();
              v75 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
                -[CKChatController dragInteraction:previewForLiftingItem:session:].cold.1();

              objc_msgSend(v74, "setGestureRecognizersEnabled:", 0);
            }

            goto LABEL_46;
          }
          v72 = v12;
          v27 = 0;
        }
        -[CKChatController setInitialFrameIndexForCurrentDrag:](self, "setInitialFrameIndexForCurrentDrag:", v27);
        objc_msgSend(v12, "image");
        v73 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v26, "setImage:", v73);
        goto LABEL_38;
      }
      v25 = 0;
LABEL_46:

      goto LABEL_47;
    }
  }
  else
  {

  }
  objc_msgSend(v8, "localObject");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(v8, "localObject");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v12, "stackView");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "currentAssetReference");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "regionOfInterestForAssetReference:", v31);
      v32 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "placeholderViewFactory");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      if (v25)
      {
        objc_msgSend(v32, "placeholderViewFactory");
        v33 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, id))v33)[2](v33, v32);
        v34 = objc_claimAutoreleasedReturnValue();

        if (v34)
        {
          v87 = v7;
          -[CKChatController view](self, "view");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "rectInCoordinateSpace:", v35);
          v79 = v37;
          v81 = v36;
          v83 = v39;
          v85 = v38;

          v40 = objc_alloc(MEMORY[0x1E0CEA8C0]);
          -[CKChatController view](self, "view");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = *(float64x2_t *)(MEMORY[0x1E0C9D648] + 16);
          v43 = (void *)v34;
          if (CKMainScreenScale_once_13 != -1)
          {
            v78 = *(float64x2_t *)(MEMORY[0x1E0C9D648] + 16);
            dispatch_once(&CKMainScreenScale_once_13, &__block_literal_global_3337);
            v42 = v78;
          }
          v44 = *(double *)&CKMainScreenScale_sMainScreenScale_13;
          if (*(double *)&CKMainScreenScale_sMainScreenScale_13 == 0.0)
            v44 = 1.0;
          v45 = 1.0 / v44;
          v46.f64[0] = v81;
          v46.f64[1] = v79;
          v47 = vmulq_n_f64(v42, v44);
          v48 = vmulq_n_f64(v46, v44);
          v49.f64[0] = v85;
          v49.f64[1] = v83;
          v50 = vsubq_f64(vmulq_n_f64(v49, v44), v47);
          __asm { FMOV            V2.2D, #0.5 }
          v56 = (void *)objc_msgSend(v40, "initWithContainer:center:", v41, vmulq_n_f64(vaddq_f64(v48, vrndmq_f64(vmulq_f64(v50, _Q2))), v45), *(_OWORD *)&v78);

          v57 = objc_alloc_init(MEMORY[0x1E0CEA8B8]);
          v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA90]), "initWithView:parameters:target:", v43, v57, v56);

          v7 = v87;
        }
        else
        {
          v25 = 0;
        }
      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v12, "shouldProvideDragPreview"))
        goto LABEL_45;
      -[CKChatController dragPreviewParametersForBalloonView:](self, "dragPreviewParametersForBalloonView:", v12);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v58 = objc_alloc(MEMORY[0x1E0CEA8C0]);
      objc_msgSend(v12, "superview");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "frame");
      v64 = *(float64x2_t *)(MEMORY[0x1E0C9D648] + 16);
      if (CKMainScreenScale_once_13 != -1)
      {
        v86 = v63;
        v88 = v62.f64[0];
        v82 = v61;
        v84 = v60.f64[0];
        v80 = *(float64x2_t *)(MEMORY[0x1E0C9D648] + 16);
        dispatch_once(&CKMainScreenScale_once_13, &__block_literal_global_3337);
        v64 = v80;
        v61 = v82;
        v60.f64[0] = v84;
        v63 = v86;
        v62.f64[0] = v88;
      }
      if (*(double *)&CKMainScreenScale_sMainScreenScale_13 == 0.0)
        v65 = 1.0;
      else
        v65 = *(double *)&CKMainScreenScale_sMainScreenScale_13;
      v60.f64[1] = v61;
      v66 = vmulq_n_f64(v60, v65);
      v62.f64[1] = v63;
      v67 = vsubq_f64(vmulq_n_f64(v62, v65), vmulq_n_f64(v64, v65));
      __asm { FMOV            V2.2D, #0.5 }
      v31 = (void *)objc_msgSend(v58, "initWithContainer:center:", v59, vmulq_n_f64(vaddq_f64(v66, vrndmq_f64(vmulq_f64(v67, _Q2))), 1.0 / v65));

      objc_msgSend(v12, "attachmentBalloonViewPreview");
      v69 = objc_claimAutoreleasedReturnValue();
      v70 = (void *)v69;
      if (v69)
        v71 = (void *)v69;
      else
        v71 = v12;
      v32 = v71;

      v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA90]), "initWithView:parameters:target:", v32, v30, v31);
    }

    if (v25)
      goto LABEL_46;
LABEL_45:
    objc_msgSend(v12, "setCanUseOpaqueMask:", 0);
    objc_msgSend(v12, "prepareForDisplayIfNeeded");
    -[CKChatController dragPreviewParametersForBalloonView:](self, "dragPreviewParametersForBalloonView:", v12);
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEAA90]), "initWithView:parameters:", v12, v76);

    goto LABEL_46;
  }
  v25 = 0;
LABEL_47:

  return v25;
}

- (void)dragInteraction:(id)a3 sessionWillBegin:(id)a4
{
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  -[CKChatController setDragSession:](self, "setDragSession:", a4);
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isStickerRepositioningEnabled");

  v8 = v11;
  if (v7)
  {
    -[CKChatController _transcriptStickerCellContainingInteraction:](self, "_transcriptStickerCellContainingInteraction:", v11);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9)
    {
      objc_msgSend(v9, "setHidden:", 1);
      objc_msgSend(v10, "setStickerViewHidden:", 1);
    }

    v8 = v11;
  }

}

- (void)dragInteraction:(id)a3 session:(id)a4 didEndWithOperation:(unint64_t)a5
{
  id v6;
  void *v7;
  NSObject *v8;

  v6 = a3;
  -[CKChatController setDragSession:](self, "setDragSession:", 0);
  -[CKChatController setCurrentDragPreviewContainer:](self, "setCurrentDragPreviewContainer:", 0);
  -[CKChatController _transcriptStickerCellContainingInteraction:](self, "_transcriptStickerCellContainingInteraction:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    IMLogHandleForCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      -[CKChatController dragInteraction:session:didEndWithOperation:].cold.1();

    objc_msgSend(v7, "setGestureRecognizersEnabled:", 1);
  }

}

- (id)dragInteraction:(id)a3 previewForCancellingItem:(id)a4 withDefault:(id)a5
{
  id v7;
  id v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  _OWORD v32[3];
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v7 = a3;
  v8 = a5;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isStickerRepositioningEnabled");

  if (v10)
  {
    -[CKChatController _transcriptStickerCellContainingInteraction:](self, "_transcriptStickerCellContainingInteraction:", v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11;
    if (v11)
    {
      objc_msgSend(v11, "associatedItemView");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController view](self, "view");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "frameInView:", v14);
      v16 = v15;
      v18 = v17;
      v20 = v19;
      v22 = v21;

      v23 = v16 + v20 * 0.5;
      v34 = 0u;
      v35 = 0u;
      v24 = v18 + v22 * 0.5;
      v33 = 0u;
      objc_msgSend(v12, "associatedItemView");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = v25;
      if (v25)
      {
        objc_msgSend(v25, "transform");
      }
      else
      {
        v34 = 0u;
        v35 = 0u;
        v33 = 0u;
      }

      v28 = objc_alloc(MEMORY[0x1E0CEA570]);
      -[CKChatController view](self, "view");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v32[0] = v33;
      v32[1] = v34;
      v32[2] = v35;
      v30 = (void *)objc_msgSend(v28, "initWithContainer:center:transform:", v29, v32, v23, v24);
      objc_msgSend(v8, "retargetedPreviewWithTarget:", v30);
      v27 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v27 = 0;
    }

  }
  else
  {
    v27 = 0;
  }

  return v27;
}

- (void)dragInteraction:(id)a3 item:(id)a4 willAnimateCancelWithAnimator:(id)a5
{
  id v7;
  id v8;
  void *v9;
  int v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[5];
  id v14;
  _QWORD v15[5];

  v7 = a3;
  v8 = a5;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isStickerRepositioningEnabled");

  if (v10)
  {
    v11 = MEMORY[0x1E0C809B0];
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __71__CKChatController_dragInteraction_item_willAnimateCancelWithAnimator___block_invoke;
    v15[3] = &unk_1E274A208;
    v15[4] = self;
    objc_msgSend(v8, "addAnimations:", v15);
    -[CKChatController collectionView](self, "collectionView");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setScrollEnabled:", 0);

    v13[0] = v11;
    v13[1] = 3221225472;
    v13[2] = __71__CKChatController_dragInteraction_item_willAnimateCancelWithAnimator___block_invoke_2;
    v13[3] = &unk_1E274D700;
    v13[4] = self;
    v14 = v7;
    objc_msgSend(v8, "addCompletion:", v13);

  }
}

uint64_t __71__CKChatController_dragInteraction_item_willAnimateCancelWithAnimator___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_clearBalloonViewOverlays");
}

void __71__CKChatController_dragInteraction_item_willAnimateCancelWithAnimator___block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  if (!a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "collectionView");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setScrollEnabled:", 1);

    objc_msgSend(*(id *)(a1 + 32), "_transcriptStickerCellContainingInteraction:", *(_QWORD *)(a1 + 40));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "setHidden:", 0);
      objc_msgSend(v5, "setStickerViewHidden:", 0);
      v4 = v5;
    }

  }
}

- (BOOL)dragManager:(id)a3 shouldCancelDraggingForItem:(id)a4 toDragTarget:(id)a5 dropArea:(int)a6
{
  return 1;
}

- (BOOL)dragManager:(id)a3 canScaleItem:(id)a4
{
  return 0;
}

- (BOOL)dragManager:(id)a3 canRotateItem:(id)a4
{
  return 0;
}

- (BOOL)dragManager:(id)a3 canPeelItem:(id)a4
{
  return 1;
}

- (id)_dragItemsForInteraction:(id)a3
{
  id v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, void *, uint64_t, _BYTE *);
  void *v19;
  id v20;
  CKChatController *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  id v35;

  v4 = a3;
  if (!-[CKChatController isShowingOscarChat](self, "isShowingOscarChat"))
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "disableTranscriptInteractions");

    if ((v6 & 1) == 0)
    {
      -[CKChatController collectionView](self, "collectionView");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "visibleCells");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "isStickerRepositioningEnabled");

      if (v11)
      {
        -[CKChatController _dragItemsIfRepositioningForInteraction:](self, "_dragItemsIfRepositioningForInteraction:", v4);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v7, "count"))
        {
LABEL_11:

          goto LABEL_12;
        }

      }
      v30 = 0;
      v31 = &v30;
      v32 = 0x3032000000;
      v33 = __Block_byref_object_copy__11;
      v34 = __Block_byref_object_dispose__11;
      v35 = 0;
      v24 = 0;
      v25 = &v24;
      v26 = 0x3032000000;
      v27 = __Block_byref_object_copy__11;
      v28 = __Block_byref_object_dispose__11;
      v29 = 0;
      v16 = MEMORY[0x1E0C809B0];
      v17 = 3221225472;
      v18 = __45__CKChatController__dragItemsForInteraction___block_invoke;
      v19 = &unk_1E274D728;
      v20 = v4;
      v21 = self;
      v22 = &v30;
      v23 = &v24;
      objc_msgSend(v9, "enumerateObjectsUsingBlock:", &v16);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v7 = 0;
      }
      else
      {
        -[CKCoreChatController collectionViewController](self, "collectionViewController", v16, v17, v18, v19);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "chatItems");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "objectAtIndex:", objc_msgSend((id)v31[5], "item"));
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        -[CKChatController _dragItemsFromChatItem:balloonView:](self, "_dragItemsFromChatItem:balloonView:", v14, v25[5]);
        v7 = (void *)objc_claimAutoreleasedReturnValue();

      }
      _Block_object_dispose(&v24, 8);

      _Block_object_dispose(&v30, 8);
      goto LABEL_11;
    }
  }
  v7 = 0;
LABEL_12:

  return v7;
}

void __45__CKChatController__dragItemsForInteraction___block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  int v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v14 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v14, "balloonView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v7 = objc_msgSend(v14, "isReplyContextPreview") ^ 1;
    else
      v7 = 1;
    objc_msgSend(v6, "interactions");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "containsObject:", *(_QWORD *)(a1 + 32));

    if (v9 && v7)
    {
      objc_msgSend(*(id *)(a1 + 40), "collectionView");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "indexPathForCell:", v14);
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v13 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v11;

      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v6);
      *a4 = 1;
    }

  }
}

- (id)_itemProvidersFromDragItems:(id)a3
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v9), "itemProvider", (_QWORD)v13);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addObject:", v10);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v7);
  }

  v11 = (void *)objc_msgSend(v4, "copy");
  return v11;
}

- (id)_dragItemsFromChatItem:(id)a3 balloonView:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  char isKindOfClass;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  char v21;
  void *v22;
  void *v23;
  int v24;
  _QWORD v26[4];
  id v27;
  id v28;
  id location;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "balloonViewForChatItem:", v6);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      if ((isKindOfClass & 1) != 0)
      {
        objc_msgSend(v9, "stackView");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "currentAssetReference");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "asset");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "chatItem");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "dragItemProvider");
        v15 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v15 = 0;
      }
      v21 = isKindOfClass ^ 1;

      if (v15)
      {
LABEL_12:
        v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA558]), "initWithItemProvider:", v15);
        objc_msgSend(v22, "setLocalObject:", v7);
        if ((v21 & 1) != 0)
        {
          location = 0;
          objc_initWeak(&location, self);
          v26[0] = MEMORY[0x1E0C809B0];
          v26[1] = 3221225472;
          v26[2] = __55__CKChatController__dragItemsFromChatItem_balloonView___block_invoke_2;
          v26[3] = &unk_1E274D770;
          objc_copyWeak(&v28, &location);
          v27 = v7;
          objc_msgSend(v22, "setPreviewProvider:", v26);

          objc_destroyWeak(&v28);
          objc_destroyWeak(&location);
        }
        v30[0] = v22;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v30, 1);
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_21;
      }
LABEL_20:
      v16 = 0;
LABEL_21:

      goto LABEL_22;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v17 = v6;
      objc_msgSend(MEMORY[0x1E0D35820], "sharedInstance");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "transferGUID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "transferForGUID:", v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v20, "commSafetySensitive"))
      {

        v16 = 0;
        goto LABEL_22;
      }
      objc_msgSend(v17, "dragItemProvider");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend(v23, "isAudioMessagesEntryViewRecordingEnabled");

      if (v24 && objc_msgSend(v7, "isAudioMessage"))
        objc_msgSend(v15, "registerItemForTypeIdentifier:loadHandler:", CFSTR("com.apple.messages.audioMessage"), &__block_literal_global_1097);

    }
    else
    {
      objc_msgSend(v6, "dragItemProvider");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v21 = 1;
    if (v15)
      goto LABEL_12;
    goto LABEL_20;
  }
  objc_msgSend(MEMORY[0x1E0C99D20], "array");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_22:

  return v16;
}

void __55__CKChatController__dragItemsFromChatItem_balloonView___block_invoke(uint64_t a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);
  id v5;

  v3 = (void *)MEMORY[0x1E0C99D50];
  v4 = a2;
  objc_msgSend(v3, "data");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, id, _QWORD))a2)[2](v4, v5, 0);

}

id __55__CKChatController__dragItemsFromChatItem_balloonView___block_invoke_2(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;

  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));

  if (WeakRetained)
  {
    v4 = objc_loadWeakRetained(v2);
    objc_msgSend(v4, "dragPreviewParametersForBalloonView:", *(_QWORD *)(a1 + 32));
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(*(id *)(a1 + 32), "shouldProvideDragPreview"))
    {
      objc_msgSend(*(id *)(a1 + 32), "attachmentBalloonViewPreview");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = v6;
      if (!v6)
        v7 = *(void **)(a1 + 32);
      v8 = v7;

      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA560]), "initWithView:parameters:", v8, v5);
    }
    else
    {
      v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA560]), "initWithView:parameters:", *(_QWORD *)(a1 + 32), v5);
    }

  }
  else
  {
    v9 = 0;
  }
  return v9;
}

- (id)dragPreviewParametersForBalloonView:(id)a3
{
  id v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  double v20;
  void *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v3 = a3;
  v4 = objc_alloc_init(MEMORY[0x1E0CEA568]);
  objc_msgSend(v3, "bounds");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "dragBalloonTailCropWidth");
  v15 = v14;

  if (v3)
  {
    objc_msgSend(v3, "balloonDescriptor");
    v16 = -0.0;
    if (!BYTE3(v23))
      v16 = v15;
  }
  else
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
    v16 = v15;
  }
  v17 = v6 + v16;
  v18 = (void *)MEMORY[0x1E0CEA390];
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors", v23, v24, v25, v26, v27);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "dragBalloonCornerRadius");
  objc_msgSend(v18, "bezierPathWithRoundedRect:cornerRadius:", v17, v8, v10 - v15, v12, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "setVisiblePath:", v21);
  return v4;
}

- (BOOL)dropInteraction:(id)a3 canHandleSession:(id)a4
{
  id v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  int v25;
  int v26;
  int v27;
  NSObject *v28;
  BOOL v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = a4;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isAudioMessagesEntryViewRecordingEnabled");

  if (v7)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    objc_msgSend(v5, "items");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v36;
LABEL_4:
      v12 = 0;
      while (1)
      {
        if (*(_QWORD *)v36 != v11)
          objc_enumerationMutation(v8);
        objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * v12), "itemProvider");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "hasItemConformingToTypeIdentifier:", CFSTR("com.apple.messages.audioMessage"));

        if ((v14 & 1) != 0)
          goto LABEL_32;
        if (v10 == ++v12)
        {
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
          if (v10)
            goto LABEL_4;
          break;
        }
      }
    }

  }
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "isStickerRepositioningEnabled");

  if (v16)
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    objc_msgSend(v5, "items", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v32;
LABEL_14:
      v20 = 0;
      while (1)
      {
        if (*(_QWORD *)v32 != v19)
          objc_enumerationMutation(v8);
        if ((objc_msgSend(MEMORY[0x1E0D39B18], "dragItemIsRepositioningSticker:", *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * v20)) & 1) != 0)break;
        if (v18 == ++v20)
        {
          v18 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
          if (v18)
            goto LABEL_14;
          goto LABEL_20;
        }
      }
LABEL_32:
      v29 = 1;
      goto LABEL_37;
    }
LABEL_20:

  }
  objc_msgSend(v5, "localDragSession");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController dragSession](self, "dragSession");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "localContext");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v23 = v22;
  else
    v23 = 0;
  v24 = v23;
  v25 = objc_msgSend(v24, "isEqualToString:", CFSTR("CKConversationListDragContext"));
  v26 = objc_msgSend(v24, "isEqualToString:", CFSTR("CKMessageEntryContentViewDragContext"));

  if (v8 && (v8 == v21 ? (v27 = 1) : (v27 = v25), (v27 | v26) == 1))
  {
    IMLogHandleForCategory();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      -[CKChatController dropInteraction:canHandleSession:].cold.2();
    v29 = 0;
  }
  else
  {
    IMLogHandleForCategory();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      -[CKChatController dropInteraction:canHandleSession:].cold.1();
    v29 = 1;
  }

LABEL_37:
  return v29;
}

- (void)dropInteraction:(id)a3 sessionDidEnter:(id)a4
{
  id v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;

  v5 = a4;
  -[CKChatController dropSession](self, "dropSession");
  v6 = (id)objc_claimAutoreleasedReturnValue();

  IMLogHandleForCategory();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
  if (v6 == v5)
  {
    if (v8)
      -[CKChatController dropInteraction:sessionDidEnter:].cold.1();

  }
  else
  {
    if (v8)
      -[CKChatController dropInteraction:sessionDidEnter:].cold.2();

    -[CKChatController setDropSession:](self, "setDropSession:", v5);
  }

}

- (id)dropInteraction:(id)a3 sessionDidUpdate:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  void *v30;
  void *v32;
  void *v33;
  NSObject *v34;
  NSObject *v35;
  uint8_t v36[16];

  v6 = a3;
  v7 = a4;
  -[CKChatController entryView](self, "entryView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "displayMode") == 2)
  {

LABEL_4:
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA590]), "initWithDropOperation:", 0);
    goto LABEL_5;
  }
  -[CKChatController entryView](self, "entryView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "displayMode");

  if (v10 == 3)
    goto LABEL_4;
  -[CKChatController entryView](self, "entryView");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "window");
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  if (v33)
  {
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA590]), "initWithDropOperation:", 2);
    v12 = 1;
    goto LABEL_6;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_18DFCD000, v34, OS_LOG_TYPE_INFO, "Drop proposal is forbidden because the entry view is not in a window. UIDragPreviewTarget requires that its container (the entry view in this case) be in a window.", v36, 2u);
    }

  }
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA590]), "initWithDropOperation:", 1);
  IMLogHandleForCategory();
  v35 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    -[CKChatController dropInteraction:sessionDidUpdate:].cold.4();

LABEL_5:
  v12 = 0;
LABEL_6:
  if (!-[CKChatController _dropSessionIsNewSticker:](self, "_dropSessionIsNewSticker:", v7)
    && !objc_msgSend(MEMORY[0x1E0D39B18], "dropSessionIsRepositioningSticker:", v7))
  {
    goto LABEL_30;
  }
  -[CKChatController _selectedBalloonFromTouchForDropSession:](self, "_selectedBalloonFromTouchForDropSession:", v7);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(v14, "isScheduledMessagesCoreEnabled");

    if (!v15)
      goto LABEL_19;
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "chatItems");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "objectAtIndex:", objc_msgSend(v13, "row"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v18, "canAttachStickers") & 1) == 0)
    {
      IMLogHandleForCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        -[CKChatController dropInteraction:sessionDidUpdate:].cold.3();

      v20 = objc_msgSend(objc_alloc(MEMORY[0x1E0CEA590]), "initWithDropOperation:", 1);
      v12 = 0;
      v11 = (void *)v20;
    }
    v21 = (uint64_t)v11;

    v11 = v16;
  }
  else
  {
    IMLogHandleForCategory();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      -[CKChatController dropInteraction:sessionDidUpdate:].cold.2();

    v21 = objc_msgSend(objc_alloc(MEMORY[0x1E0CEA590]), "initWithDropOperation:", 1);
  }

  v11 = (void *)v21;
LABEL_19:
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v23, "isStickerRepositioningEnabled");

  if (!v24)
  {
    objc_msgSend(v11, "_setPreferredBadgeStyle:", 1);

    if (!v12)
      goto LABEL_30;
LABEL_29:
    -[CKChatController _selectedBalloonFromTouchForDropSession:](self, "_selectedBalloonFromTouchForDropSession:", v7);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController _setOverlayForBalloonViewAtIndexPath:](self, "_setOverlayForBalloonViewAtIndexPath:", v30);

    goto LABEL_30;
  }
  -[CKChatController _originalIndexPathForRepositioningDropSession:](self, "_originalIndexPathForRepositioningDropSession:", v7);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  if (v25)
  {
    v26 = objc_msgSend(v13, "section");
    if (v26 != objc_msgSend(v25, "section") || (v27 = objc_msgSend(v13, "item"), v27 != objc_msgSend(v25, "item")))
    {
      IMLogHandleForCategory();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        -[CKChatController dropInteraction:sessionDidUpdate:].cold.1();

      v29 = objc_msgSend(objc_alloc(MEMORY[0x1E0CEA590]), "initWithDropOperation:", 1);
      -[CKChatController _clearBalloonViewOverlays](self, "_clearBalloonViewOverlays");
      LOBYTE(v12) = 0;
      v11 = (void *)v29;
    }
  }

  objc_msgSend(v11, "_setPreferredBadgeStyle:", 1);
  if ((v12 & 1) != 0)
    goto LABEL_29;
LABEL_30:

  return v11;
}

- (void)dropInteraction:(id)a3 performDrop:(id)a4
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  NSObject *v13;

  v5 = a4;
  IMLogHandleForCategory();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    -[CKChatController dropInteraction:performDrop:].cold.2(v6, v7, v8);

  if (-[CKChatController _dropSessionIsNewSticker:](self, "_dropSessionIsNewSticker:", v5)
    || objc_msgSend(MEMORY[0x1E0D39B18], "dropSessionIsRepositioningSticker:", v5)
    && (objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags"),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v10 = objc_msgSend(v9, "isStickerRepositioningEnabled"),
        v9,
        v10))
  {
    -[CKChatController _sendNewStickerFromDropSession:](self, "_sendNewStickerFromDropSession:", v5);
  }
  else
  {
    objc_msgSend(v5, "items");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController _itemProvidersFromDragItems:](self, "_itemProvidersFromDragItems:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    IMLogHandleForCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      -[CKChatController dropInteraction:performDrop:].cold.1(v12, v13);

    if (objc_msgSend(v12, "count"))
      -[CKChatController appendCompositionFromItemProviders:](self, "appendCompositionFromItemProviders:", v12);

  }
}

- (void)dropInteraction:(id)a3 item:(id)a4 willAnimateDropWithAnimator:(id)a5
{
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[5];
  _QWORD v13[5];

  v6 = a5;
  IMLogHandleForCategory();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    -[CKChatController dropInteraction:item:willAnimateDropWithAnimator:].cold.1(v7, v8, v9);

  v10 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __69__CKChatController_dropInteraction_item_willAnimateDropWithAnimator___block_invoke;
  v13[3] = &unk_1E274A208;
  v13[4] = self;
  objc_msgSend(v6, "addAnimations:", v13);
  -[CKChatController collectionView](self, "collectionView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setScrollEnabled:", 0);

  v12[0] = v10;
  v12[1] = 3221225472;
  v12[2] = __69__CKChatController_dropInteraction_item_willAnimateDropWithAnimator___block_invoke_2;
  v12[3] = &unk_1E274C9E8;
  v12[4] = self;
  objc_msgSend(v6, "addCompletion:", v12);

}

uint64_t __69__CKChatController_dropInteraction_item_willAnimateDropWithAnimator___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_clearBalloonViewOverlays");
}

void __69__CKChatController_dropInteraction_item_willAnimateDropWithAnimator___block_invoke_2(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;

  objc_msgSend(*(id *)(a1 + 32), "collectionView");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setScrollEnabled:", 1);

  IMLogHandleForCategory();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    __69__CKChatController_dropInteraction_item_willAnimateDropWithAnimator___block_invoke_2_cold_1(v2, v3, v4);

}

- (void)dropInteraction:(id)a3 concludeDrop:(id)a4
{
  NSObject *v4;

  IMLogHandleForCategory();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    -[CKChatController dropInteraction:concludeDrop:].cold.1();

}

- (void)dropInteraction:(id)a3 sessionDidEnd:(id)a4
{
  NSObject *v5;
  void *v6;

  IMLogHandleForCategory();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    -[CKChatController dropInteraction:sessionDidEnd:].cold.1();

  -[CKChatController setDropSession:](self, "setDropSession:", 0);
  -[CKCoreChatController inputController](self, "inputController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stickerDropAnimationFinished");

}

- (id)dropInteraction:(id)a3 previewForDroppingItem:(id)a4 withDefault:(id)a5
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  NSObject *v33;
  NSObject *v34;
  uint8_t v36[16];
  CGAffineTransform v37;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  IMLogHandleForCategory();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    -[CKChatController dropInteraction:previewForDroppingItem:withDefault:].cold.3();

  if (objc_msgSend(MEMORY[0x1E0D39B18], "dragItemIsSticker:", v9)
    || (objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags"),
        v13 = (void *)objc_claimAutoreleasedReturnValue(),
        v14 = objc_msgSend(v13, "isStickerRepositioningEnabled"),
        v13,
        v14)
    && objc_msgSend(MEMORY[0x1E0D39B18], "dragItemIsRepositioningSticker:", v9))
  {
    -[CKChatController _stickerDragPreviewForDragItem:defaultPreview:](self, "_stickerDragPreviewForDragItem:defaultPreview:", v9, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[CKChatController entryView](self, "entryView");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "window");
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
    {
      -[CKChatController dropSession](self, "dropSession");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController view](self, "view");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "locationInView:", v18);
      v20 = v19;
      v22 = v21;

      IMLogHandleForCategory();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        -[CKChatController dropInteraction:previewForDroppingItem:withDefault:].cold.2(v23, v24, v25, v26, v27, v28, v29, v30);

      v31 = objc_alloc(MEMORY[0x1E0CEA570]);
      CGAffineTransformMakeScale(&v37, 0.00000011920929, 0.00000011920929);
      v32 = (void *)objc_msgSend(v31, "initWithContainer:center:transform:", v15, &v37, v20, v22);
      objc_msgSend(v10, "retargetedPreviewWithTarget:", v32);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v36 = 0;
          _os_log_impl(&dword_18DFCD000, v33, OS_LOG_TYPE_INFO, "Drop preview generation failed because the entry view is not in a window. UIDragPreviewTarget requires that its container (the entry view in this case) be in a window.", v36, 2u);
        }

      }
      v12 = 0;
    }
    IMLogHandleForCategory();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      -[CKChatController dropInteraction:previewForDroppingItem:withDefault:].cold.1();

  }
  return v12;
}

- (BOOL)_dropSessionIsTargetingEntryView:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  CGPoint v13;
  CGRect v14;

  v4 = a3;
  -[CKChatController entryView](self, "entryView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "contentView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "textView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "locationInView:", v7);
  v9 = v8;
  v11 = v10;

  objc_msgSend(v7, "bounds");
  v13.x = v9;
  v13.y = v11;
  LOBYTE(v5) = CGRectContainsPoint(v14, v13);

  return (char)v5;
}

- (void)_clearBalloonViewOverlays
{
  void *v2;
  void *v3;
  id v4;

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "collectionView");
  v4 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "visibleCells");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", &__block_literal_global_1106);

}

void __45__CKChatController__clearBalloonViewOverlays__block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v3, "balloonView");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "showOverlay:", 0);

  }
}

- (void)_setOverlayForBalloonViewAtIndexPath:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v4 = a3;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "collectionView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "visibleCells");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __57__CKChatController__setOverlayForBalloonViewAtIndexPath___block_invoke;
  v10[3] = &unk_1E274D7B8;
  v11 = v6;
  v12 = v4;
  v8 = v4;
  v9 = v6;
  objc_msgSend(v7, "enumerateObjectsUsingBlock:", v10);

}

void __57__CKChatController__setOverlayForBalloonViewAtIndexPath___block_invoke(uint64_t a1, void *a2)
{
  char v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a2;
  v3 = objc_opt_respondsToSelector();
  v4 = v10;
  if ((v3 & 1) != 0)
  {
    v5 = v10;
    objc_msgSend(*(id *)(a1 + 32), "indexPathForCell:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *(void **)(a1 + 40);
    if (v7)
      v8 = objc_msgSend(v7, "isEqual:", v6);
    else
      v8 = 0;
    objc_msgSend(v5, "balloonView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "showOverlay:", v8);

    v4 = v10;
  }

}

- (void)detailsAdapter:(id)a3 wantsToStageComposition:(id)a4
{
  id v6;

  v6 = a4;
  -[CKChatController _detailsAdapterWantsDismiss:](self, "_detailsAdapterWantsDismiss:", a3);
  -[CKChatController setComposition:](self, "setComposition:", v6);

}

- (void)_detailsAdapterWantsDismiss:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  id v13;

  objc_msgSend(a3, "detailsController");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  if (CKIsRunningInMacCatalyst())
  {
    -[CKCoreChatController delegate](self, "delegate");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      -[CKCoreChatController delegate](self, "delegate");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v5, "hasDetailsNavigationController") & 1) != 0)
      {
        -[CKCoreChatController delegate](self, "delegate");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_opt_respondsToSelector();

        v8 = v13;
        if ((v7 & 1) != 0)
        {
          -[CKCoreChatController delegate](self, "delegate");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "dismissDetailsNavigationController");

LABEL_12:
          v8 = v13;
          goto LABEL_13;
        }
        goto LABEL_13;
      }

    }
LABEL_11:

    goto LABEL_12;
  }
  v8 = v13;
  if (!v13)
    goto LABEL_13;
  -[CKChatController presentedViewController](self, "presentedViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_11;
  -[CKChatController presentedViewController](self, "presentedViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "viewControllers");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "containsObject:", v13);

  v8 = v13;
  if (v12)
  {
    -[CKChatController dismissDetailsControllerAnimated:](self, "dismissDetailsControllerAnimated:", 1);
    goto LABEL_12;
  }
LABEL_13:

}

- (void)detailsAdapter:(id)a3 shouldComposeConversationWithRecipientAddresses:(id)a4
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  char v15;
  void *v16;
  id v17;

  v17 = a4;
  objc_msgSend(a3, "detailsController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (CKIsRunningInMacCatalyst())
  {
    -[CKCoreChatController delegate](self, "delegate");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      -[CKCoreChatController delegate](self, "delegate");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v8, "hasDetailsNavigationController") & 1) != 0)
      {
        -[CKCoreChatController delegate](self, "delegate");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_opt_respondsToSelector();

        if ((v10 & 1) == 0)
          goto LABEL_12;
        -[CKCoreChatController delegate](self, "delegate");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "dismissDetailsNavigationController");
      }
      else
      {

      }
    }
LABEL_11:

    goto LABEL_12;
  }
  if (!v6)
    goto LABEL_12;
  -[CKChatController presentedViewController](self, "presentedViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_11;
  -[CKChatController presentedViewController](self, "presentedViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "viewControllers");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "containsObject:", v6);

  if (v13)
    -[CKChatController dismissDetailsControllerAnimated:](self, "dismissDetailsControllerAnimated:", 1);
LABEL_12:
  -[CKCoreChatController delegate](self, "delegate");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_opt_respondsToSelector();

  if ((v15 & 1) != 0)
  {
    -[CKCoreChatController delegate](self, "delegate");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "chatController:shouldComposeConversationWithRecipientAddresses:", self, v17);

  }
}

- (id)presentingViewControllerForGroupAlertsFromDetailsAdapter:(id)a3
{
  CKChatController *v4;

  if (CKIsRunningInMacCatalyst())
    v4 = self;
  else
    v4 = 0;
  return v4;
}

- (void)detailsAdapterWantsToPresentKTContactVerificationUI:(id)a3
{
  void *v4;
  id v5;

  -[CKCoreChatController conversation](self, "conversation", a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "chat");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKKeyTransparencyErrorUtilities showKTContactVerificationUIForIMChat:fromViewController:](CKKeyTransparencyErrorUtilities, "showKTContactVerificationUIForIMChat:fromViewController:", v4, self);

}

- (void)detailsAdapterWantsToPresentReportToAppleUI:(id)a3
{
  +[CKKeyTransparencyErrorUtilities showReportToAppleUIFromViewController:](CKKeyTransparencyErrorUtilities, "showReportToAppleUIFromViewController:", self);
}

- (void)detailsAdapterWillDismiss:(id)a3
{
  id v3;

  +[CKLinkIntentsManager sharedManager](CKLinkIntentsManager, "sharedManager", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "purgeDependencies");

}

- (void)detailsAdapterDidDismiss:(id)a3
{
  void *v4;
  void *v5;

  -[CKCoreChatController conversation](self, "conversation", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "chat");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "fetchKTStatus");

  if (-[CKChatController _shouldRestoreFirstResponderAfterDetailsViewDismiss](self, "_shouldRestoreFirstResponderAfterDetailsViewDismiss"))
  {
    -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
  }
}

- (void)dismissDetailsNavigationController
{
  void *v3;
  char v4;
  id v5;

  -[CKCoreChatController delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_opt_respondsToSelector();

  if ((v4 & 1) != 0)
  {
    -[CKCoreChatController delegate](self, "delegate");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "dismissDetailsNavigationController");

  }
}

- (void)dismissDetailsViewAndShowConversationList
{
  id v2;

  -[CKCoreChatController delegate](self, "delegate");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dismissDetailsViewAndShowConversationList");

}

- (BOOL)isDetailsNavigationControllerDetached
{
  void *v2;
  char v3;

  -[CKCoreChatController delegate](self, "delegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isDetailsNavigationControllerDetached");

  return v3;
}

- (BOOL)_shouldRestoreFirstResponderAfterDetailsViewDismiss
{
  void *v3;
  char v4;
  char v5;
  char v6;
  char v7;
  void *v8;
  void *v9;
  char v10;

  -[CKCoreChatController conversation](self, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hasLeftGroupChat");
  v5 = objc_msgSend(v3, "isReadOnlyChat");
  v6 = objc_msgSend(v3, "isBusinessChatDisabled");
  v7 = -[CKChatController isFirstResponder](self, "isFirstResponder");
  -[CKChatController entryView](self, "entryView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "contentView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isActive");

  return (v4 | v7 | v10 | v6 | v5) ^ 1;
}

- (void)keyTransparencyConversationViewControllerDidComplete:(id)a3
{
  void *v4;
  void *v5;

  -[CKCoreChatController conversation](self, "conversation", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "chat");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "fetchKTStatus");

  -[CKChatController dismissViewControllerAnimated:completion:](self, "dismissViewControllerAnimated:completion:", 1, &__block_literal_global_1112);
}

- (void)showModalInlineReplyControllerForChatItem:(id)a3 fromViewController:(id)a4
{
  void *v6;
  id v7;

  v7 = a4;
  -[CKChatController modalInlineReplyControllerForChatItem:](self, "modalInlineReplyControllerForChatItem:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    objc_msgSend(v7, "presentViewController:animated:completion:", v6, 1, 0);

}

- (id)modalInlineReplyControllerForChatItem:(id)a3
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  CKInlineReplyChatController *v18;
  void *v19;
  CKInlineReplyChatController *v20;
  int v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {

LABEL_4:
    if (!IMOSLoggingEnabled())
    {
LABEL_8:
      v7 = 0;
      goto LABEL_9;
    }
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LOWORD(v21) = 0;
      _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "Inline reply controller already presented/presenting, bailing!", (uint8_t *)&v21, 2u);
    }
LABEL_7:

    goto LABEL_8;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    goto LABEL_4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (!IMOSLoggingEnabled())
      goto LABEL_8;
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LOWORD(v21) = 0;
      _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "Grid asked to present non-message part item, bailing", (uint8_t *)&v21, 2u);
    }
    goto LABEL_7;
  }
  v9 = v4;
  +[CKUtilities threadIdentifierForMessagePart:](CKUtilities, "threadIdentifierForMessagePart:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKUtilities threadOriginatorForMessagePart:](CKUtilities, "threadOriginatorForMessagePart:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D35780], "configureMessageSummaryInfoForChatItem:", v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "message");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "guid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v21 = 138412546;
      v22 = v10;
      v23 = 2112;
      v24 = v11;
      _os_log_impl(&dword_18DFCD000, v15, OS_LOG_TYPE_INFO, "Creating reply modal for grid with thread identifier %@ originator %@", (uint8_t *)&v21, 0x16u);
    }

  }
  -[CKCoreChatController chat](self, "chat");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "loadInlineRepliesForThreadIdentifier:threadOriginator:messageGuid:", v10, v11, v14);

  -[CKChatController _transcriptOverlayTransitionContextForModalPresentation](self, "_transcriptOverlayTransitionContextForModalPresentation");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setNavBarContext:", 2);
  v18 = [CKInlineReplyChatController alloc];
  -[CKCoreChatController conversation](self, "conversation");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[CKInlineReplyChatController initWithConversation:threadIdentifier:threadOriginator:transitionContext:originatorMessageSummaryInfo:parentChatController:](v18, "initWithConversation:threadIdentifier:threadOriginator:transitionContext:originatorMessageSummaryInfo:parentChatController:", v19, v10, v11, v17, v12, self);

  -[CKChatController setSendMenuDelegate:](v20, "setSendMenuDelegate:", self);
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA7B8]), "initWithRootViewController:", v20);
  objc_msgSend(v7, "setModalPresentationStyle:", 6);
  if (CKIsRunningInMacCatalyst())
    objc_msgSend(v7, "setNavigationBarHidden:", 1);

LABEL_9:
  return v7;
}

- (void)showInlineReplyControllerForChatItem:(id)a3 presentKeyboard:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  id v7;

  v4 = a4;
  v6 = a3;
  +[CKInlineReplyTransitionProperties defaultProperties](CKInlineReplyTransitionProperties, "defaultProperties");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  -[CKChatController showInlineReplyControllerForChatItem:presentKeyboard:replyTransitionProperties:](self, "showInlineReplyControllerForChatItem:presentKeyboard:replyTransitionProperties:", v6, v4, v7);

}

- (void)showInlineReplyControllerForChatItem:(id)a3 presentKeyboard:(BOOL)a4 replyTransitionProperties:(id)a5
{
  _BOOL8 v6;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t i;
  id v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  CKInlineReplyChatController *v28;
  void *v29;
  CKInlineReplyChatController *v30;
  id v31;
  void *v32;
  _BOOL4 v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  _BOOL4 v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  void *v53;
  uint64_t v54;

  v6 = a4;
  v54 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a5;
  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {

  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_6;
  }
  if (!CKIsRunningInMacCatalyst())
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v21, OS_LOG_TYPE_INFO, "Inline reply controller already presented/presenting, bailing!", buf, 2u);
      }

    }
    goto LABEL_37;
  }
  -[CKChatController dismissInlineReplyController:](self, "dismissInlineReplyController:", 0);
LABEL_6:
  if ((objc_msgSend(v8, "canInlineReply") & 1) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[CKScrollViewController beginHoldingScrollGeometryUpdatesForReason:](self, "beginHoldingScrollGeometryUpdatesForReason:", CFSTR("MainTranscriptWhileInlineReplyControllerVisible"));
      -[CKChatController collectionView](self, "collectionView");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setScrollEnabled:", 0);

      -[CKChatController collectionView](self, "collectionView");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "endHoldingContentOffsetUpdatesForAllReasons");

      objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "isExpressiveTextEnabled");

      if (v14)
      {
        -[CKCoreChatController collectionViewController](self, "collectionViewController");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "updateTextEffectsState:", &__block_literal_global_1116);

      }
      if (objc_msgSend(v8, "itemIsReplyContextPreview"))
      {
        -[CKCoreChatController collectionViewController](self, "collectionViewController");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "chatItems");
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        for (i = objc_msgSend(v17, "indexOfObject:", v8); i < objc_msgSend(v17, "count"); ++i)
        {
          objc_msgSend(v17, "objectAtIndex:", i);
          v19 = (id)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v19, "itemIsReply") & 1) != 0)
            goto LABEL_24;

        }
        v19 = 0;
LABEL_24:

      }
      else
      {
        v19 = v8;
      }
      -[CKChatController _threadIdentifierForMessagePart:](self, "_threadIdentifierForMessagePart:", v19);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController _threadOriginatorForMessagePart:](self, "_threadOriginatorForMessagePart:", v19);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0D35780], "configureMessageSummaryInfoForChatItem:", v19);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "message");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "guid");
      v48 = (void *)objc_claimAutoreleasedReturnValue();

      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          v51 = v22;
          v52 = 2112;
          v53 = v49;
          _os_log_impl(&dword_18DFCD000, v24, OS_LOG_TYPE_INFO, "Creating reply overlay,\n\tthreadIdentifier: %@\n\toriginator: %@", buf, 0x16u);
        }

      }
      -[CKCoreChatController chat](self, "chat");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "loadInlineRepliesForThreadIdentifier:threadOriginator:messageGuid:", v22, v49, v48);

      -[CKChatController _transcriptOverlayTransitionContextForAnchoredMessagePart:threadIdentifier:presentKeyboard:](self, "_transcriptOverlayTransitionContextForAnchoredMessagePart:threadIdentifier:presentKeyboard:", v19, v22, v6);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "setNavBarContext:", 1);
      -[CKChatController collaborationNoticeSuggestions](self, "collaborationNoticeSuggestions");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "setIsParentChatControllerShowingBanner:", objc_msgSend(v27, "count") != 0);

      objc_msgSend(v26, "setReplyTransitionProperties:", v9);
      v28 = [CKInlineReplyChatController alloc];
      -[CKCoreChatController conversation](self, "conversation");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = -[CKInlineReplyChatController initWithConversation:threadIdentifier:threadOriginator:transitionContext:originatorMessageSummaryInfo:parentChatController:](v28, "initWithConversation:threadIdentifier:threadOriginator:transitionContext:originatorMessageSummaryInfo:parentChatController:", v29, v22, v49, v26, v47, self);

      -[CKChatController setMessageGUIDForTranscriptExtension:](v30, "setMessageGUIDForTranscriptExtension:", v48);
      -[CKInlineReplyChatController setInteractionDelegate:](v30, "setInteractionDelegate:", self);
      -[CKInlineReplyChatController setTranscriptOverlayTransitionDelegate:](v30, "setTranscriptOverlayTransitionDelegate:", self);
      v31 = v8;
      objc_msgSend(v31, "messageItem");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = objc_msgSend(v32, "scheduleType") == 2;

      if (v33)
      {
        -[CKCoreChatController inputController](self, "inputController");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "sendLaterPluginInfo");
        v35 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v31, "time");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "setSelectedDate:", v36);

        -[CKChatController entryView](self, "entryView");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "setSendLaterPluginInfo:animated:", v35, 0);

      }
      -[CKChatController entryView](self, "entryView");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController setEntryView:](v30, "setEntryView:", v38);

      -[CKScrollViewController keyboardFrame](self, "keyboardFrame");
      -[CKScrollViewController primeWithKeyboardFrame:](v30, "primeWithKeyboardFrame:");
      -[CKChatController setSendMenuDelegate:](v30, "setSendMenuDelegate:", self);
      if (-[CKScrollViewController isKeyboardFloating](self, "isKeyboardFloating"))
        -[CKInlineReplyChatController setShouldReloadInsetsForFloatingKeyboard:](v30, "setShouldReloadInsetsForFloatingKeyboard:", 1);
      -[CKChatController entryView](self, "entryView");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "setDelegate:", v30);

      -[CKChatController entryView](self, "entryView");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v40, "setClickInteractionDelegate:", v30);

      -[CKCoreChatController inputController](self, "inputController");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "setDelegate:", v30);

      -[CKChatController setInlineReplyController:](self, "setInlineReplyController:", v30);
      -[CKChatController presentTranscriptOverlayViewController:](self, "presentTranscriptOverlayViewController:", v30);
      -[CKChatController traitCollection](self, "traitCollection");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend(v42, "userInterfaceStyle") == 2;

      -[CKChatController entryView](self, "entryView");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = v44;
      if (v43)
        v46 = 7;
      else
        v46 = 8;
      objc_msgSend(v44, "setStyle:", v46);

      -[CKChatController _hideCatchUpButtonIfNeededAndRemoveOnCompletion:](self, "_hideCatchUpButtonIfNeededAndRemoveOnCompletion:", 0);
    }
  }
  else
  {
    IMLogHandleForCategory();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      -[CKChatController showInlineReplyControllerForChatItem:presentKeyboard:replyTransitionProperties:].cold.1();

  }
LABEL_37:

}

uint64_t __99__CKChatController_showInlineReplyControllerForChatItem_presentKeyboard_replyTransitionProperties___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setInTransition:", 1);
}

- (void)showMessageEditingViewControllerForChatItem:(id)a3 presentKeyboard:(BOOL)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void *v8;
  CKMessageEditingViewController *v9;
  void *v10;
  CKMessageEditingViewController *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  void *v17;
  id v18;

  v4 = a4;
  v6 = a3;
  -[CKChatController tipManager](self, "tipManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "undoOrEditMessageUsed");

  if (!CKIsAppCardsEnabled())
  {
    -[CKCoreChatController inputController](self, "inputController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "forceDismissBrowserWithoutAnimation");

  }
  -[CKChatController updateAppStripVisibility:animated:](self, "updateAppStripVisibility:animated:", 0, 0);
  -[CKChatController hideAcknowledgmentsAssociatedWithChatItem:](self, "hideAcknowledgmentsAssociatedWithChatItem:", v6);
  -[CKChatController _transcriptOverlayTransitionContextForAnchoredMessagePart:threadIdentifier:presentKeyboard:](self, "_transcriptOverlayTransitionContextForAnchoredMessagePart:threadIdentifier:presentKeyboard:", v6, 0, v4);
  v18 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setNavBarContext:", 3);
  v9 = [CKMessageEditingViewController alloc];
  -[CKCoreChatController conversation](self, "conversation");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[CKMessageEditingViewController initWithTransitionContext:conversation:](v9, "initWithTransitionContext:conversation:", v18, v10);

  -[CKMessageEditingViewController setTranscriptOverlayTransitionDelegate:](v11, "setTranscriptOverlayTransitionDelegate:", self);
  -[CKMessageEditingViewController setInteractionDelegate:](v11, "setInteractionDelegate:", self);
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "balloonViewForChatItem:", v6);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "IMChatItem");
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v14, "guid");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "frame");
  v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D4D8E8]), "initWithEditedMessageGuid:editedMessageHeight:", v15, v16);
  objc_msgSend(v12, "setMessageEditingContext:", v17);
  -[CKChatController presentTranscriptOverlayViewController:](self, "presentTranscriptOverlayViewController:", v11);
  -[CKChatController setMessageEditingViewController:](self, "setMessageEditingViewController:", v11);
  -[CKChatController _hideCatchUpButtonIfNeededAndRemoveOnCompletion:](self, "_hideCatchUpButtonIfNeededAndRemoveOnCompletion:", 0);

}

- (void)hideAcknowledgmentsAssociatedWithChatItem:(id)a3
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v16 = a3;
  objc_msgSend(v16, "visibleAssociatedMessageChatItems");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "indexOfObjectPassingTest:", &__block_literal_global_1120);

  v6 = v16;
  if (v5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(v16, "visibleAssociatedMessageChatItems");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectAtIndex:", v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "cellForAssociatedChatItem:", v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "collectionView");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "indexPathForCell:", v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      objc_msgSend(MEMORY[0x1E0CB36B8], "indexSetWithIndex:", objc_msgSend(v13, "item"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setHiddenAssociatedItemsForMessageEditing:", v14);

    }
    v6 = v16;
  }

}

uint64_t __62__CKChatController_hideAcknowledgmentsAssociatedWithChatItem___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  char isKindOfClass;

  v2 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

- (void)showAcknowledgmentsAssociatedWithChatItem:(id)a3
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v18 = a3;
  objc_msgSend(v18, "visibleAssociatedMessageChatItems");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "indexOfObjectPassingTest:", &__block_literal_global_1122);

  v6 = v18;
  if (v5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(v18, "visibleAssociatedMessageChatItems");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectAtIndex:", v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "cellForAssociatedChatItem:", v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "collectionView");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "indexPathForCell:", v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "hiddenAssociatedItems");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = (void *)objc_msgSend(v15, "mutableCopy");

      objc_msgSend(v16, "removeIndex:", objc_msgSend(v13, "item"));
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "setHiddenAssociatedItemsForMessageEditing:", v16);

    }
    v6 = v18;
  }

}

uint64_t __62__CKChatController_showAcknowledgmentsAssociatedWithChatItem___block_invoke(uint64_t a1, void *a2)
{
  id v2;
  char isKindOfClass;

  v2 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

- (void)presentTranscriptOverlayViewController:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;

  v4 = a3;
  objc_msgSend(v4, "transitionContext");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  -[CKChatController addChildViewController:](self, "addChildViewController:", v4);
  -[CKChatController view](self, "view");
  v5 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "view");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v5, "addSubview:", v6);

  objc_msgSend(v4, "didMoveToParentViewController:", self);
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v5) = objc_msgSend(v7, "isEntryViewInputAccessory");

  if ((v5 & 1) == 0)
  {
    -[CKChatController view](self, "view");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController entryViewContainerView](self, "entryViewContainerView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "bringSubviewToFront:", v9);

  }
  v10 = objc_msgSend(v12, "navBarContext");
  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setNavBarContext:", v10);

}

- (id)_transcriptOverlayTransitionContextForAnchoredMessagePart:(id)a3 threadIdentifier:(id)a4 presentKeyboard:(BOOL)a5
{
  _BOOL4 v5;
  id v7;
  CKTranscriptOverlayTransitionContext *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v5 = a5;
  v7 = a3;
  v8 = objc_alloc_init(CKTranscriptOverlayTransitionContext);
  objc_msgSend(v7, "IMChatItem");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "guid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKTranscriptOverlayTransitionContext setAnchorChatItemGUID:](v8, "setAnchorChatItemGUID:", v10);

  -[CKChatController _visibleChatItemsToScreenFrameMap](self, "_visibleChatItemsToScreenFrameMap");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKTranscriptOverlayTransitionContext setVisibleChatItemToFrameMap:](v8, "setVisibleChatItemToFrameMap:", v11);

  if (v5)
  {
    -[CKTranscriptOverlayTransitionContext setPresentWithKeyboard:](v8, "setPresentWithKeyboard:", 1);
  }
  else
  {
    -[CKChatController entryView](self, "entryView");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "contentView");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKTranscriptOverlayTransitionContext setPresentWithKeyboard:](v8, "setPresentWithKeyboard:", objc_msgSend(v13, "isActive"));

  }
  -[CKChatController entryView](self, "entryView");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "contentView");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKTranscriptOverlayTransitionContext setKeyboardWasUpInMainTranscript:](v8, "setKeyboardWasUpInMainTranscript:", objc_msgSend(v15, "isActive"));

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "view");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "frame");
  -[CKTranscriptOverlayTransitionContext setParentCollectionViewFrame:](v8, "setParentCollectionViewFrame:");

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "marginInsets");
  -[CKTranscriptOverlayTransitionContext setTranscriptMarginInsets:](v8, "setTranscriptMarginInsets:");

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "view");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "safeAreaInsets");
  -[CKTranscriptOverlayTransitionContext setTranscriptSafeAreaInsets:](v8, "setTranscriptSafeAreaInsets:");

  if (CKIsRunningInMessagesTranscriptExtension())
    -[CKTranscriptOverlayTransitionContext setWantsUnanimatedPresentation:](v8, "setWantsUnanimatedPresentation:", 1);
  return v8;
}

- (id)_transcriptOverlayTransitionContextForModalPresentation
{
  CKTranscriptOverlayTransitionContext *v2;

  v2 = objc_alloc_init(CKTranscriptOverlayTransitionContext);
  -[CKTranscriptOverlayTransitionContext setWantsModalPresentation:](v2, "setWantsModalPresentation:", 1);
  -[CKTranscriptOverlayTransitionContext setPresentWithKeyboard:](v2, "setPresentWithKeyboard:", 1);
  return v2;
}

- (id)_visibleChatItemsToScreenFrameMap
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  _QWORD v14[5];
  id v15;
  _QWORD v16[5];
  id v17;

  v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "chatItems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __53__CKChatController__visibleChatItemsToScreenFrameMap__block_invoke;
  v16[3] = &unk_1E274D860;
  v16[4] = self;
  v7 = v3;
  v17 = v7;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v16);

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "associatedChatItems");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v6;
  v14[1] = 3221225472;
  v14[2] = __53__CKChatController__visibleChatItemsToScreenFrameMap__block_invoke_2;
  v14[3] = &unk_1E274D860;
  v14[4] = self;
  v10 = v7;
  v15 = v10;
  objc_msgSend(v9, "enumerateObjectsUsingBlock:", v14);

  v11 = v15;
  v12 = v10;

  return v12;
}

void __53__CKChatController__visibleChatItemsToScreenFrameMap__block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD v32[4];

  v5 = a2;
  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", a3, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "collectionView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "collectionViewLayout");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "layoutAttributesForItemAtIndexPath:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "view");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "frame");
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  objc_msgSend(*(id *)(a1 + 32), "collectionView");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "convertRect:fromView:", v19, v12, v14, v16, v18);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;

  objc_msgSend(v5, "IMChatItem");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "guid");
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v29 && objc_msgSend(v5, "supportsInlineReplyTransition"))
  {
    v30 = *(void **)(a1 + 40);
    v32[0] = v21;
    v32[1] = v23;
    v32[2] = v25;
    v32[3] = v27;
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v32, "{CGRect={CGPoint=dd}{CGSize=dd}}");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "setObject:forKey:", v31, v29);

  }
}

void __53__CKChatController__visibleChatItemsToScreenFrameMap__block_invoke_2(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD v32[4];

  v5 = a2;
  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", a3, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "collectionView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "collectionViewLayout");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "layoutAttributesForItemAtIndexPath:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "view");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "frame");
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  objc_msgSend(*(id *)(a1 + 32), "collectionView");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "convertRect:fromView:", v19, v12, v14, v16, v18);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;

  objc_msgSend(v5, "IMChatItem");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "guid");
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v29 && objc_msgSend(v5, "supportsInlineReplyTransition"))
  {
    v30 = *(void **)(a1 + 40);
    v32[0] = v21;
    v32[1] = v23;
    v32[2] = v25;
    v32[3] = v27;
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v32, "{CGRect={CGPoint=dd}{CGSize=dd}}");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "setObject:forKey:", v31, v29);

  }
}

- (id)_threadIdentifierForMessagePart:(id)a3
{
  return +[CKUtilities threadIdentifierForMessagePart:](CKUtilities, "threadIdentifierForMessagePart:", a3);
}

- (id)_threadOriginatorForMessagePart:(id)a3
{
  return +[CKUtilities threadOriginatorForMessagePart:](CKUtilities, "threadOriginatorForMessagePart:", a3);
}

- (void)dismissInlineReplyController:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  id v6;

  v3 = a3;
  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[CKChatController setInlineReplyController:](self, "setInlineReplyController:", 0);
  -[CKCoreChatController chat](self, "chat");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dismissInlineReplies");

  -[CKChatController dismissTranscriptOverlayViewController:presentKeyboard:](self, "dismissTranscriptOverlayViewController:presentKeyboard:", v6, v3);
  -[CKChatController _showCatchUpButtonIfNeeded](self, "_showCatchUpButtonIfNeeded");

}

- (void)dismissMessageEditingViewController:(BOOL)a3
{
  _BOOL8 v3;
  void *v5;
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;

  v3 = a3;
  -[CKChatController messageEditingViewController](self, "messageEditingViewController");
  v21 = (id)objc_claimAutoreleasedReturnValue();
  -[CKChatController setMessageEditingViewController:](self, "setMessageEditingViewController:", 0);
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "messageEditingContext");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setMessageEditingContext:", 0);
  objc_msgSend(v5, "balloonMaxWidth");
  v9 = v8;
  objc_msgSend(v5, "marginInsets");
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  -[CKChatController traitCollection](self, "traitCollection");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "invalidateChatItemLayoutWithNewBalloonMaxWidth:marginInsets:traitCollection:", v18, v9, v11, v13, v15, v17);

  objc_msgSend(v5, "updateTranscriptScrollIntentToBottomOrHistoryBasedOnCurrentContentOffset");
  -[CKChatController dismissTranscriptOverlayViewController:presentKeyboard:](self, "dismissTranscriptOverlayViewController:presentKeyboard:", v21, v3);
  objc_msgSend(v7, "editedMessageGuid");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "chatItemForGUID:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKChatController showAcknowledgmentsAssociatedWithChatItem:](self, "showAcknowledgmentsAssociatedWithChatItem:", v20);
  -[CKChatController _showCatchUpButtonIfNeeded](self, "_showCatchUpButtonIfNeeded");

}

- (void)dismissTranscriptOverlayViewController:(id)a3 presentKeyboard:(BOOL)a4
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  double v32;
  double v33;
  void *v34;
  void *v35;
  double v36;
  double v37;
  dispatch_time_t v38;
  _QWORD block[5];
  _QWORD v40[5];
  _QWORD v41[5];

  v5 = a3;
  -[CKChatController standardSuggestionPresenter](self, "standardSuggestionPresenter");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "banner");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setHidden:", 0);

  -[CKChatController standardSuggestionPresenter](self, "standardSuggestionPresenter");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "banner");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setAlpha:", 1.0);

  if (v5)
  {
    objc_msgSend(v5, "willMoveToParentViewController:", 0);
    -[CKChatController removeChildViewController:](self, "removeChildViewController:", v5);
    objc_msgSend(v5, "view");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "removeFromSuperview");

  }
  -[CKChatController entryView](self, "entryView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setDelegate:", self);

  -[CKChatController entryView](self, "entryView");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setClickInteractionDelegate:", self);

  -[CKChatController traitCollection](self, "traitCollection");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController entryView](self, "entryView");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setEntryViewTraitCollection:resetStyle:", v13, 1);

  -[CKMessageEntryBackgroundViewProtocol setEntryViewTraitCollection:](self->_keyboardCandidateBarBackgroundView, "setEntryViewTraitCollection:", v13);
  -[CKCoreChatController inputController](self, "inputController");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setDelegate:", self);

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_opt_new();
  objc_msgSend(v16, "setHiddenItems:", v17);

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (void *)objc_opt_new();
  objc_msgSend(v18, "setHiddenAssociatedItems:", v19);

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (void *)objc_opt_new();
  objc_msgSend(v20, "setHiddenBalloonViews:", v21);

  -[CKChatController collectionView](self, "collectionView");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "setScrollEnabled:", 1);

  -[CKChatController collectionView](self, "collectionView");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "endHoldingContentOffsetUpdatesForReason:", CFSTR("TranscriptOverlayViewController"));

  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "backButtonView");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setAlpha:", 1.0);

  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "unifiedCallButton");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setAlpha:", 1.0);

  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setNavBarContext:", 0);

  -[CKScrollViewController endHoldingScrollGeometryUpdatesForReason:](self, "endHoldingScrollGeometryUpdatesForReason:", CFSTR("MainTranscriptWhileInlineReplyControllerVisible"));
  if (-[CKScrollViewController isKeyboardFloating](self, "isKeyboardFloating"))
    -[CKScrollViewController inputAccessoryViewFrameUpdatedForFloatingKeyboard](self, "inputAccessoryViewFrameUpdatedForFloatingKeyboard");
  -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  v30 = MEMORY[0x1E0C809B0];
  if (v29)
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "replyTranscriptUpdateBannerAnimateInTime");
    v33 = v32;

    v41[0] = v30;
    v41[1] = 3221225472;
    v41[2] = __75__CKChatController_dismissTranscriptOverlayViewController_presentKeyboard___block_invoke;
    v41[3] = &unk_1E274A208;
    v41[4] = self;
    objc_msgSend(MEMORY[0x1E0CEABB0], "animateWithDuration:animations:completion:", v41, 0, v33);
  }
  -[CKChatController nicknameBanner](self, "nicknameBanner");
  v34 = (void *)objc_claimAutoreleasedReturnValue();

  if (v34)
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "replyTranscriptUpdateBannerAnimateInTime");
    v37 = v36;

    v40[0] = v30;
    v40[1] = 3221225472;
    v40[2] = __75__CKChatController_dismissTranscriptOverlayViewController_presentKeyboard___block_invoke_2;
    v40[3] = &unk_1E274A208;
    v40[4] = self;
    objc_msgSend(MEMORY[0x1E0CEABB0], "animateWithDuration:animations:completion:", v40, 0, v37);
  }
  v38 = dispatch_time(0, 100000000);
  block[0] = v30;
  block[1] = 3221225472;
  block[2] = __75__CKChatController_dismissTranscriptOverlayViewController_presentKeyboard___block_invoke_3;
  block[3] = &unk_1E274A208;
  block[4] = self;
  dispatch_after(v38, MEMORY[0x1E0C80D38], block);

}

void __75__CKChatController_dismissTranscriptOverlayViewController_presentKeyboard___block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "groupPhotoUpdateBanner");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setAlpha:", 1.0);

}

void __75__CKChatController_dismissTranscriptOverlayViewController_presentKeyboard___block_invoke_2(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "nicknameBanner");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setAlpha:", 1.0);

}

void __75__CKChatController_dismissTranscriptOverlayViewController_presentKeyboard___block_invoke_3(uint64_t a1)
{
  int v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "collectionView");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(*(id *)(a1 + 32), "transcriptWasScrolledToBottomBeforeInlinePresentation");
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v3, "setTranscriptWasScrolledToBottomBeforeInlinePresentation:", 0);
    objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "scrollTranscriptToEntryViewInsertionTimeWithAnimation:", 1);
  }
  else
  {
    objc_msgSend(v3, "collectionViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "updateTranscriptScrollIntentToBottomOrHistoryBasedOnCurrentContentOffset");

    +[CKScrollViewAnimationProperties systemDefaultScrollAnimation](CKScrollViewAnimationProperties, "systemDefaultScrollAnimation");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "enforceTranscriptScrollIntentWithAnimationProperties:", v4);
  }

}

- (void)messageEditingViewControllerRequestsDismissal:(id)a3 presentKeyboard:(BOOL)a4
{
  -[CKChatController dismissMessageEditingViewController:](self, "dismissMessageEditingViewController:", a4);
}

- (void)messageEditingViewController:(id)a3 confirmedEditWithComposition:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  id v29;
  uint8_t buf[16];

  v6 = a3;
  v7 = a4;
  if (v7)
  {
    v29 = v6;
    objc_msgSend(v6, "transitionContext");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "anchorChatItemGUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "chatItemForGUID:", v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = v11;
    objc_msgSend(v12, "messageItem");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v12, "index");
    -[CKCoreChatController conversation](self, "conversation");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "editMessageItem:partIndex:withNewComposition:", v13, v14, v7);
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "isProofreadingEnabled");

    if (v17)
    {
      -[CKCoreChatController conversation](self, "conversation");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "chat");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "setProofreadingInfo:", 0);

    }
    objc_msgSend(v13, "historyForMessagePart:", v14);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend(v20, "count") - 1;
    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = *MEMORY[0x1E0D38588];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v21);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "trackEvent:withCount:", v23, v24);

    v25 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v12, "timeIntervalSinceMessageSent");
    objc_msgSend(v25, "numberWithDouble:");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "trackEvent:withStatistic:", *MEMORY[0x1E0D38930], v26);

    v6 = v29;
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v28, OS_LOG_TYPE_INFO, "Confirmed edit with no changes to the original message, aborting edit.", buf, 2u);
    }

  }
}

- (void)messageEditingViewControllerIsAnimatingIn:(id)a3
{
  id v4;
  int v5;
  id v6;

  v4 = a3;
  -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 3);
  -[CKChatController reloadInputViews](self, "reloadInputViews");
  v5 = objc_msgSend(v4, "becomeFirstResponder");

  if (v5)
    -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 4);
  -[CKCoreChatController inputController](self, "inputController");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setShouldBlurForMessageEditing:", 1);

}

- (void)messageEditingViewControllerIsAnimatingOut:(id)a3
{
  id v4;

  -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 1);
  if (-[CKChatController becomeFirstResponder](self, "becomeFirstResponder"))
    -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 4);
  -[CKCoreChatController inputController](self, "inputController");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setShouldBlurForMessageEditing:", 0);

}

- (void)messageEditingViewControllerWillAnimateOut:(id)a3
{
  -[CKCoreChatController beginPinningInputViewsForReason:](self, "beginPinningInputViewsForReason:", CFSTR("ExitingMessageEditing"));
}

- (void)messageEditingViewControllerDidFinishAnimatingOut:(id)a3
{
  -[CKCoreChatController endPinningInputViewsForReason:](self, "endPinningInputViewsForReason:", CFSTR("ExitingMessageEditing"));
}

- (id)messageEditingViewController:(id)a3 originalMessageCompositionForMessageWithGuid:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  CKComposition *v15;

  v5 = a4;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "chatItemForGUID:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = v7;
  v9 = objc_msgSend(v8, "index");
  objc_msgSend(v8, "message");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "messageSubject");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "text");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "__im_messagePartMatchingPartIndex:", v9);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "messagePartBody");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = -[CKComposition initWithText:subject:]([CKComposition alloc], "initWithText:subject:", v14, v11);

  return v15;
}

- (void)messageEditingViewController:(id)a3 didUpdateFrameForBalloonView:(id)a4
{
  id v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  void *v12;
  char v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  id v25;

  v6 = a4;
  objc_msgSend(a3, "transitionContext");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "anchorChatItemGUID");
  v25 = (id)objc_claimAutoreleasedReturnValue();

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "frame");
  v10 = v9;

  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D4D8E8]), "initWithEditedMessageGuid:editedMessageHeight:", v25, v10);
  objc_msgSend(v8, "messageEditingContext");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v11, "isEqualToContext:", v12);

  if ((v13 & 1) == 0)
  {
    objc_msgSend(v8, "setMessageEditingContext:", v11);
    objc_msgSend(v8, "balloonMaxWidth");
    v15 = v14;
    objc_msgSend(v8, "marginInsets");
    v17 = v16;
    v19 = v18;
    v21 = v20;
    v23 = v22;
    -[CKChatController traitCollection](self, "traitCollection");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "invalidateChatItemLayoutWithNewBalloonMaxWidth:marginInsets:traitCollection:", v24, v15, v17, v19, v21, v23);

  }
  -[CKChatController scrollTranscriptToAlignWithMessageEditingBalloonView](self, "scrollTranscriptToAlignWithMessageEditingBalloonView");

}

- (void)scrollTranscriptToAlignWithMessageEditingBalloonView
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19[2];
  id location;

  -[CKChatController messageEditingViewController](self, "messageEditingViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "transitionContext");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "anchorChatItemGUID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v4, "balloonViewForAlignment");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "chatItemForGUID:", v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = v9;
    objc_msgSend(v10, "message");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)objc_msgSend(v10, "index");
    location = 0;
    objc_initWeak(&location, self);
    -[CKChatController collectionView](self, "collectionView");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __72__CKChatController_scrollTranscriptToAlignWithMessageEditingBalloonView__block_invoke;
    v16[3] = &unk_1E274D888;
    objc_copyWeak(v19, &location);
    v14 = v11;
    v17 = v14;
    v19[1] = v12;
    v15 = v7;
    v18 = v15;
    objc_msgSend(v13, "performContentOffsetUpdateTemporarilyOverridingHoldStatus:", v16);

    objc_destroyWeak(v19);
    objc_destroyWeak(&location);

  }
}

void __72__CKChatController_scrollTranscriptToAlignWithMessageEditingBalloonView__block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "scrollToMessage:atSpecificMessagePartIndex:highlight:withInlineReplyOverlay:alignedWithView:allowOverScroll:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), 0, 0, *(_QWORD *)(a1 + 40), 1);

}

- (UIEdgeInsets)messageEditingViewController:(id)a3 contentInsetsForChatItemGuid:(id)a4
{
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  UIEdgeInsets result;

  v5 = a4;
  v6 = *MEMORY[0x1E0CEB4B0];
  v7 = *(double *)(MEMORY[0x1E0CEB4B0] + 8);
  v8 = *(double *)(MEMORY[0x1E0CEB4B0] + 16);
  v9 = *(double *)(MEMORY[0x1E0CEB4B0] + 24);
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "chatItemForGUID:", v5);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "cellForChatItem:", v11);
    v13 = objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        -[NSObject contentAlignmentInsets](v13, "contentAlignmentInsets");
        v6 = v14;
        v7 = v15;
        v8 = v16;
        v9 = v17;
        goto LABEL_12;
      }
      IMLogHandleForCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        -[CKChatController messageEditingViewController:contentInsetsForChatItemGuid:].cold.3((uint64_t)v13, v18);
    }
    else
    {
      IMLogHandleForCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        -[CKChatController messageEditingViewController:contentInsetsForChatItemGuid:].cold.2();
    }

    goto LABEL_12;
  }
  IMLogHandleForCategory();
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    -[CKChatController messageEditingViewController:contentInsetsForChatItemGuid:].cold.1();
LABEL_12:

  v19 = v6;
  v20 = v7;
  v21 = v8;
  v22 = v9;
  result.right = v22;
  result.bottom = v21;
  result.left = v20;
  result.top = v19;
  return result;
}

- (UIEdgeInsets)transcriptContentInsetsForMessageEditingViewController:(id)a3
{
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  UIEdgeInsets result;

  -[CKChatController collectionView](self, "collectionView", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "contentInset");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  v12 = v5;
  v13 = v7;
  v14 = v9;
  v15 = v11;
  result.right = v15;
  result.bottom = v14;
  result.left = v13;
  result.top = v12;
  return result;
}

- (BOOL)messageEditingViewController:(id)a3 balloonHasTailForChatItemGuid:(id)a4
{
  id v5;
  void *v6;
  void *v7;

  v5 = a4;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "chatItemForGUID:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  LOBYTE(v6) = objc_msgSend(v7, "hasTail");
  return (char)v6;
}

- (char)messageEditingViewController:(id)a3 colorForChatItemGuid:(id)a4
{
  id v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  char v10;

  v5 = a4;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isPriusEnabled");

  if (v7)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "chatItemForGUID:", v5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v10 = objc_msgSend(v9, "color");
    else
      v10 = 1;

  }
  else
  {
    v10 = 1;
  }

  return v10;
}

- (id)proofReadingInfoForMessageEditingViewController:(id)a3
{
  void *v3;
  void *v4;
  void *v5;

  -[CKCoreChatController conversation](self, "conversation", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "chat");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "proofreadingInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

- (void)inlineReplyControllerRequestsDismissal:(id)a3 presentKeyboard:(BOOL)a4
{
  -[CKChatController dismissInlineReplyController:](self, "dismissInlineReplyController:", a4);
  -[CKChatController _registerSendProgressDelegate](self, "_registerSendProgressDelegate");
}

- (void)transcriptOverlayViewController:(id)a3 visibleGUIDsDidChange:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[5];
  id v13;
  id v14;

  v5 = a4;
  v6 = (void *)objc_opt_new();
  v7 = (void *)objc_opt_new();
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __74__CKChatController_transcriptOverlayViewController_visibleGUIDsDidChange___block_invoke;
  v12[3] = &unk_1E274B840;
  v12[4] = self;
  v13 = v6;
  v14 = v7;
  v8 = v7;
  v11 = v6;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v12);

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setHiddenItems:", v11);

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setHiddenAssociatedItems:", v8);

}

void __74__CKChatController_transcriptOverlayViewController_visibleGUIDsDidChange___block_invoke(id *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  objc_msgSend(a1[4], "collectionViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "chatItemForGUID:", v13);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    if (objc_msgSend(v4, "supportsInlineReplyTransition"))
    {
      objc_msgSend(a1[4], "collectionViewController");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "chatItems");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "indexOfObject:", v4);

      objc_msgSend(a1[5], "addIndex:", v7);
    }
  }
  else
  {
    objc_msgSend(a1[4], "collectionViewController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "associatedChatItemForGUID:", v13);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      objc_msgSend(a1[4], "collectionViewController");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "associatedChatItems");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "indexOfObject:", v9);

      objc_msgSend(a1[6], "addIndex:", v12);
    }

  }
}

- (CGRect)inlineReplyController:(id)a3 gradientFrameWithInsets:(UIEdgeInsets)a4
{
  double bottom;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CGRect result;

  bottom = a4.bottom;
  -[CKChatController collectionView](self, "collectionView", a3, a4.top, a4.left, a4.bottom, a4.right);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "contentInset");
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;

  if (v12 >= bottom)
    v15 = v12;
  else
    v15 = bottom;
  -[CKCoreChatController gradientFrameWithInsets:](self, "gradientFrameWithInsets:", v8, v10, v15, v14);
  result.size.height = v19;
  result.size.width = v18;
  result.origin.y = v17;
  result.origin.x = v16;
  return result;
}

- (void)inlineReplyControllerIsAppearing:(id)a3
{
  void *v4;
  NSObject *v5;

  -[CKChatController collectionView](self, "collectionView", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  switch(objc_msgSend(v4, "transcriptScrollIntent"))
  {
    case 0:
    case 3:
    case 6:
      -[CKChatController setTranscriptWasScrolledToBottomBeforeInlinePresentation:](self, "setTranscriptWasScrolledToBottomBeforeInlinePresentation:", 1);
      break;
    case 4:
      IMLogHandleForCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        -[CKChatController inlineReplyControllerIsAppearing:].cold.1();

      break;
    default:
      break;
  }
  objc_msgSend(v4, "setTranscriptScrollIntent:", 4);

}

- (void)transcriptOverlayViewControllerWillAnimateIn:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  void *v14;
  _QWORD v15[5];
  _QWORD v16[5];

  v4 = a3;
  -[CKChatController groupPhotoUpdateBanner](self, "groupPhotoUpdateBanner");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = MEMORY[0x1E0C809B0];
  if (v5)
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "replyTranscriptUpdateBannerAnimateOutTime");
    v9 = v8;

    v16[0] = v6;
    v16[1] = 3221225472;
    v16[2] = __65__CKChatController_transcriptOverlayViewControllerWillAnimateIn___block_invoke;
    v16[3] = &unk_1E274A208;
    v16[4] = self;
    objc_msgSend(MEMORY[0x1E0CEABB0], "animateWithDuration:animations:completion:", v16, 0, v9);
  }
  -[CKChatController nicknameBanner](self, "nicknameBanner");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "replyTranscriptUpdateBannerAnimateOutTime");
    v13 = v12;

    v15[0] = v6;
    v15[1] = 3221225472;
    v15[2] = __65__CKChatController_transcriptOverlayViewControllerWillAnimateIn___block_invoke_2;
    v15[3] = &unk_1E274A208;
    v15[4] = self;
    objc_msgSend(MEMORY[0x1E0CEABB0], "animateWithDuration:animations:completion:", v15, 0, v13);
  }
  if (objc_msgSend(v4, "wantsBackingTranscriptToIgnoreContentOffsetChanges"))
  {
    -[CKChatController collectionView](self, "collectionView");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "beginHoldingContentOffsetUpdatesForReason:", CFSTR("TranscriptOverlayViewController"));

  }
}

void __65__CKChatController_transcriptOverlayViewControllerWillAnimateIn___block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "groupPhotoUpdateBanner");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setAlpha:", 0.0);

}

void __65__CKChatController_transcriptOverlayViewControllerWillAnimateIn___block_invoke_2(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "nicknameBanner");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setAlpha:", 0.0);

}

- (void)transcriptOverlayViewControllerIsAnimatingIn:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "backButtonView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setAlpha:", 0.0);

  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "unifiedCallButton");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setAlpha:", 0.0);

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "updateTargetAlphaForVisibleChatItems");

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v12 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "collectionView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "theme");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "transcriptOverlayBackingCollectionViewOpacity");
  objc_msgSend(v9, "setAlpha:");

}

- (void)transcriptOverlayViewControllerDidAnimateIn:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[5];
  _QWORD v8[5];

  v7[4] = self;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __64__CKChatController_transcriptOverlayViewControllerDidAnimateIn___block_invoke;
  v8[3] = &unk_1E274A208;
  v8[4] = self;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __64__CKChatController_transcriptOverlayViewControllerDidAnimateIn___block_invoke_2;
  v7[3] = &unk_1E274A1B8;
  objc_msgSend(MEMORY[0x1E0CEABB0], "animateWithDuration:animations:completion:", v8, v7, 0.3);
  -[CKChatController entryViewContainerView](self, "entryViewContainerView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setNeedsLayout");

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "updateTextEffectsState:", &__block_literal_global_1128);
  -[CKCoreChatController collectionViewController](self->_inlineReplyController, "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "updateTextEffectsState:", &__block_literal_global_1129);

}

void __64__CKChatController_transcriptOverlayViewControllerDidAnimateIn___block_invoke(uint64_t a1)
{
  void *v1;
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "standardSuggestionPresenter");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "banner");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setAlpha:", 0.0);

}

void __64__CKChatController_transcriptOverlayViewControllerDidAnimateIn___block_invoke_2(uint64_t a1)
{
  void *v1;
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "standardSuggestionPresenter");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "banner");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setHidden:", 1);

}

uint64_t __64__CKChatController_transcriptOverlayViewControllerDidAnimateIn___block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setInTransition:", 0);
}

void __64__CKChatController_transcriptOverlayViewControllerDidAnimateIn___block_invoke_4(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  objc_msgSend(v2, "setInTransition:", 0);
  objc_msgSend(v2, "setIsReady:", 1);

}

- (void)transcriptOverlayViewControllerWillAnimateOut:(id)a3
{
  void *v4;
  id v5;

  if (self->_inlineReplyController == a3)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "updateTextEffectsState:", &__block_literal_global_1130);
    -[CKCoreChatController collectionViewController](self->_inlineReplyController, "collectionViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "updateTextEffectsState:", &__block_literal_global_1131);

  }
}

uint64_t __66__CKChatController_transcriptOverlayViewControllerWillAnimateOut___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setInTransition:", 1);
}

uint64_t __66__CKChatController_transcriptOverlayViewControllerWillAnimateOut___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setInTransition:", 1);
}

- (void)transcriptOverlayViewControllerIsAnimatingOut:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "backButtonView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setAlpha:", 1.0);

  -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "unifiedCallButton");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setAlpha:", 1.0);

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "updateTargetAlphaForVisibleChatItems");

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "collectionView");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setAlpha:", 1.0);

}

- (void)transcriptOverlayViewControllerDidAnimateOut:(id)a3
{
  void *v4;
  id v5;

  if (self->_inlineReplyController == a3)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "updateTextEffectsState:", &__block_literal_global_1132);
    -[CKCoreChatController collectionViewController](self->_inlineReplyController, "collectionViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "updateTextEffectsState:", &__block_literal_global_1133);

  }
}

uint64_t __65__CKChatController_transcriptOverlayViewControllerDidAnimateOut___block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setInTransition:", 0);
}

uint64_t __65__CKChatController_transcriptOverlayViewControllerDidAnimateOut___block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setInTransition:", 0);
}

- (void)inlineReplyController:(id)a3 setTargetFirstResponder:(int64_t)a4
{
  -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", a4);
}

- (BOOL)inlineReplyController:(id)a3 containerWidth:(double *)a4 offset:(double *)a5
{
  return -[CKChatController messageEntryViewWidth:andOffset:](self, "messageEntryViewWidth:andOffset:", a4, a5);
}

- (void)inlineReplyController:(id)a3 setIsShowingPreview:(BOOL)a4
{
  -[CKChatController setIsShowingPreview:](self, "setIsShowingPreview:", a4);
}

- (void)inlineReplyController:(id)a3 messageEntryView:(id)a4 didMoveToWindow:(id)a5
{
  -[CKChatController messageEntryView:didMoveToWindow:](self, "messageEntryView:didMoveToWindow:", a4, a5);
}

- (void)inlineReplyController:(id)a3 appCardDidChangeEntryViewAlignmentHeight:(double)a4 animated:(BOOL)a5
{
  -[CKChatController appCardDidChangeEntryViewAlignmentHeight:animated:](self, "appCardDidChangeEntryViewAlignmentHeight:animated:", a5, a4);
}

- (UIEdgeInsets)parentTranscriptContentInsetsForInlineReplyController:(id)a3
{
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  UIEdgeInsets result;

  -[CKChatController collectionView](self, "collectionView", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "contentInset");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  v12 = v5;
  v13 = v7;
  v14 = v9;
  v15 = v11;
  result.right = v15;
  result.bottom = v14;
  result.left = v13;
  result.top = v12;
  return result;
}

- (void)imagePickerController:(id)a3 didFinishPickingMediaWithInfo:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id location;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "objectForKey:", *MEMORY[0x1E0CEB6D8]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "localIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v9)
  {
    v10 = (void *)MEMORY[0x1E0CD1390];
    objc_msgSend(v8, "localIdentifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v18[0] = v11;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "fetchAssetsWithLocalIdentifiers:options:", v12, 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "firstObject");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
    {
      location = 0;
      objc_initWeak(&location, self);
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = __72__CKChatController_imagePickerController_didFinishPickingMediaWithInfo___block_invoke;
      v15[3] = &unk_1E274D950;
      objc_copyWeak(&v16, &location);
      +[CKComposition mediaObjectFromPhotosAsset:completion:](CKComposition, "mediaObjectFromPhotosAsset:completion:", v14, v15);
      objc_destroyWeak(&v16);
      objc_destroyWeak(&location);
    }

  }
}

void __72__CKChatController_imagePickerController_didFinishPickingMediaWithInfo___block_invoke(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  id v7;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "composition");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "compositionByAppendingMediaObject:", v3);
  v7 = (id)objc_claimAutoreleasedReturnValue();

  v6 = objc_loadWeakRetained(v2);
  objc_msgSend(v6, "setComposition:", v7);

}

- (void)appendCompositionFromItemProviders:(id)a3
{
  id v4;
  _QWORD v5[5];
  id v6;
  id location;

  v4 = a3;
  location = 0;
  objc_initWeak(&location, self);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __55__CKChatController_appendCompositionFromItemProviders___block_invoke;
  v5[3] = &unk_1E274D998;
  objc_copyWeak(&v6, &location);
  v5[4] = self;
  +[CKComposition requestCompositionFromItemProviders:completion:](CKComposition, "requestCompositionFromItemProviders:completion:", v4, v5);
  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);

}

void __55__CKChatController_appendCompositionFromItemProviders___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD block[4];
  id v6;
  uint64_t v7;
  id v8;

  v3 = a2;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __55__CKChatController_appendCompositionFromItemProviders___block_invoke_2;
  block[3] = &unk_1E274C7A8;
  v6 = v3;
  v4 = v3;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  v7 = *(_QWORD *)(a1 + 32);
  dispatch_async(MEMORY[0x1E0C80D38], block);
  objc_destroyWeak(&v8);

}

void __55__CKChatController_appendCompositionFromItemProviders___block_invoke_2(id *a1)
{
  void *v2;
  int v3;
  id *v4;
  id WeakRetained;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  char isKindOfClass;
  void *v13;
  _BOOL4 v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  char v20;
  id v21;
  id v22;
  _QWORD v23[5];
  id v24;
  uint64_t v25;
  id *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  id v30;

  v25 = 0;
  v26 = (id *)&v25;
  v27 = 0x3032000000;
  v28 = __Block_byref_object_copy__11;
  v29 = __Block_byref_object_dispose__11;
  v30 = 0;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isAudioMessagesEntryViewRecordingEnabled");

  if (v3)
  {
    if (objc_msgSend(a1[4], "isAudioComposition"))
      v4 = a1 + 4;
    else
      v4 = v26 + 5;
    objc_storeStrong(v26 + 5, *v4);
  }
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  objc_msgSend(WeakRetained, "composition");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v26[5], "isAudioComposition") & 1) == 0)
  {
    v7 = a1[4];
    if (v6)
    {
      objc_msgSend(v6, "compositionByAppendingComposition:", a1[4]);
      v7 = (id)objc_claimAutoreleasedReturnValue();
    }
    objc_storeStrong(v26 + 5, v7);
    if (v6)

    objc_msgSend(a1[4], "collaborationShareOptions");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26[5], "compositionWithCollaborationShareOptions:", v8);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = v26[5];
    v26[5] = (id)v9;

  }
  objc_msgSend(a1[5], "delegate");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(a1[5], "delegate");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v13 = 0;
  }
  if ((objc_msgSend(v13, "isComposingMessage") & 1) != 0)
  {
    v14 = 0;
  }
  else
  {
    objc_msgSend(a1[5], "composition");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "shelfPluginPayload");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v16 != 0;

  }
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "isAudioMessagesEntryViewRecordingEnabled");

  if (v18)
  {
    if (!v14)
    {
      if (!objc_msgSend(v26[5], "isAudioComposition"))
        goto LABEL_22;
      objc_msgSend(a1[5], "composition");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "hasContent");

      if ((v20 & 1) == 0)
        goto LABEL_22;
    }
LABEL_24:
    v22 = a1[5];
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __55__CKChatController_appendCompositionFromItemProviders___block_invoke_3;
    v23[3] = &unk_1E274D6B0;
    objc_copyWeak(&v24, a1 + 6);
    v23[4] = &v25;
    objc_msgSend(v22, "presentReplaceCompositionAlertWithConfirmationBlock:cancelBlock:", v23, &__block_literal_global_1136);
    objc_destroyWeak(&v24);
    goto LABEL_25;
  }
  if (v14)
    goto LABEL_24;
LABEL_22:
  v21 = objc_loadWeakRetained(a1 + 6);
  objc_msgSend(v21, "setComposition:", v26[5]);

LABEL_25:
  _Block_object_dispose(&v25, 8);

}

void __55__CKChatController_appendCompositionFromItemProviders___block_invoke_3(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setComposition:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));

}

void __55__CKChatController_appendCompositionFromItemProviders___block_invoke_4()
{
  NSObject *v0;
  uint8_t v1[16];

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v0 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl(&dword_18DFCD000, v0, OS_LOG_TYPE_INFO, "Do not replace composition. Return early.", v1, 2u);
    }

  }
}

- (id)presentedControllerDoneButtonItem
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA380]), "initWithBarButtonSystemItem:target:action:", 0, self, sel_dismissPresentedViewController_);
}

- (void)dismissPresentedViewController:(id)a3
{
  -[CKChatController dismissViewControllerAnimated:completion:](self, "dismissViewControllerAnimated:completion:", 1, 0);
}

- (void)startDeferredEditingPayload:(id)a3 forConversation:(id)a4
{
  id v6;
  id v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id location;

  v6 = a3;
  v7 = a4;
  location = 0;
  objc_initWeak(&location, self);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __64__CKChatController_startDeferredEditingPayload_forConversation___block_invoke;
  v9[3] = &unk_1E274D9C0;
  v9[4] = self;
  objc_copyWeak(&v11, &location);
  v8 = v6;
  v10 = v8;
  +[CKComposition compositionWithShelfPluginPayload:completionHandler:](CKComposition, "compositionWithShelfPluginPayload:completionHandler:", v8, v9);

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);

}

void __64__CKChatController_startDeferredEditingPayload_forConversation___block_invoke(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v5 = a2;
  v6 = a3;
  objc_msgSend(a1[4], "conversation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setUnsentComposition:", v5);

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __64__CKChatController_startDeferredEditingPayload_forConversation___block_invoke_2;
  v8[3] = &unk_1E274D5D0;
  objc_copyWeak(&v10, a1 + 6);
  v9 = a1[5];
  objc_msgSend(a1[4], "setDeferredPresentationBlock:", v8);

  objc_destroyWeak(&v10);
}

void __64__CKChatController_startDeferredEditingPayload_forConversation___block_invoke_2(uint64_t a1)
{
  void *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "inputController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "startEditingPayload:", *(_QWORD *)(a1 + 32));

}

- (void)startCommitPayload:(id)a3 forConversation:(id)a4
{
  id v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v5 = a3;
  objc_msgSend(v5, "setIsFromMe:", 1);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __55__CKChatController_startCommitPayload_forConversation___block_invoke;
  v7[3] = &unk_1E274D9E8;
  v7[4] = self;
  v8 = v5;
  v6 = v5;
  +[CKComposition compositionWithShelfPluginPayload:completionHandler:](CKComposition, "compositionWithShelfPluginPayload:completionHandler:", v6, v7);

}

void __55__CKChatController_startCommitPayload_forConversation___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "chatInputSentComposition:", a2);
  +[CKBalloonPluginManager sharedInstance](CKBalloonPluginManager, "sharedInstance");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "pluginBundleID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateInteractionTimeForPlugin:", v3);

}

- (void)willDismissFunCamera:(id)a3
{
  id v4;
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKChatController setIsShowingCamera:](self, "setIsShowingCamera:", 0);
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = 136315138;
      v7 = "-[CKChatController willDismissFunCamera:]";
      _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "reloadEntryViewIfNeeded called from %s", (uint8_t *)&v6, 0xCu);
    }

  }
  -[CKChatController reloadEntryViewIfNeeded](self, "reloadEntryViewIfNeeded");
  -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");

}

- (void)didDismissFunCamera:(id)a3
{
  -[CKChatController setFunCameraViewController:](self, "setFunCameraViewController:", 0);
}

- (void)stageAssetArchive:(id)a3 skipShelf:(BOOL)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  BOOL v16;
  id location;

  v8 = a3;
  v9 = a5;
  location = 0;
  objc_initWeak(&location, self);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __66__CKChatController_stageAssetArchive_skipShelf_completionHandler___block_invoke;
  v12[3] = &unk_1E274DA10;
  objc_copyWeak(&v15, &location);
  v10 = v8;
  v13 = v10;
  v16 = a4;
  v11 = v9;
  v14 = v11;
  -[CKChatController setDeferredPresentationBlock:](self, "setDeferredPresentationBlock:", v12);

  objc_destroyWeak(&v15);
  objc_destroyWeak(&location);

}

void __66__CKChatController_stageAssetArchive_skipShelf_completionHandler___block_invoke(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  NSObject *v5;
  id v6;
  int v7;
  id v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "inputController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v4, "stageAssetArchive:skipShelf:completionHandler:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40));
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = objc_loadWeakRetained(v2);
      v7 = 138412546;
      v8 = v6;
      v9 = 2112;
      v10 = v4;
      _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "Failed to dispatch to input controller %@ %@ -stageAssetArchive:skipShelf:completionHandler: as it doesn't implement that method!", (uint8_t *)&v7, 0x16u);

    }
  }

}

- (void)presentPhotosApp
{
  id v2;

  -[CKCoreChatController inputController](self, "inputController");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "presentPluginWithBundleID:appLaunchPayload:", *MEMORY[0x1E0D375E8], 0);

}

- (void)controller:(id)a3 didCompleteClassificationRequest:(id)a4 withResponse:(id)a5
{
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  CKChatController *v15;
  uint8_t buf[16];

  v8 = a3;
  v9 = a4;
  v10 = a5;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "didCompleteClassificationRequest -- di", buf, 2u);
    }

  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __77__CKChatController_controller_didCompleteClassificationRequest_withResponse___block_invoke;
  v13[3] = &unk_1E274A108;
  v14 = v8;
  v15 = self;
  v12 = v8;
  dispatch_async(MEMORY[0x1E0C80D38], v13);

}

uint64_t __77__CKChatController_controller_didCompleteClassificationRequest_withResponse___block_invoke(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __77__CKChatController_controller_didCompleteClassificationRequest_withResponse___block_invoke_2;
  v3[3] = &unk_1E274A208;
  v1 = *(void **)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, v3);
}

uint64_t __77__CKChatController_controller_didCompleteClassificationRequest_withResponse___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "becomeFirstResponder");
}

- (UIView)recipientsVirtualToolbarItem
{
  void *v3;
  UIView *v4;
  UIView *v5;

  -[CKChatController macRecipientsController](self, "macRecipientsController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "view");
  v4 = (UIView *)objc_claimAutoreleasedReturnValue();

  if (v4 && self->_recipientsVirtualToolbarItem != v4)
    objc_storeStrong((id *)&self->_recipientsVirtualToolbarItem, v4);
  v5 = self->_recipientsVirtualToolbarItem;

  return v5;
}

- (void)dismissBusinessOnboardingIfShowing
{
  if (-[CKChatController isShowingBusinessOnboarding](self, "isShowingBusinessOnboarding"))
    -[CKChatController dismissViewControllerAnimated:completion:](self, "dismissViewControllerAnimated:completion:", 0, 0);
}

- (void)dismissTipIfPresented
{
  id v2;

  -[CKChatController tipManager](self, "tipManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dismissTipIfPresented");

}

- (BOOL)isShowingBusinessOnboarding
{
  void *v2;
  char isKindOfClass;

  -[CKChatController presentedViewController](self, "presentedViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

- (BOOL)isTesting
{
  return (IMIsRunningInUnitTesting() & 1) != 0
      || -[CKChatController _isRunningPPT](self, "_isRunningPPT")
      || CKRegistrationBypassEnabled() != 0;
}

- (void)inputController:(id)a3 willDismissPresentationController:(id)a4
{
  -[CKChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:](self, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:", 1, 0, 0);
  if (!-[CKChatController isAnimatingStickerReaction](self, "isAnimatingStickerReaction"))
    -[CKChatController setIgnoresAutomaticScrollsTowardBottom:](self, "setIgnoresAutomaticScrollsTowardBottom:", 0);
}

- (void)_dismissFullScreenBubbleViewControllerAnimated:(BOOL)a3 withSendAnimation:(BOOL)a4 completion:(id)a5
{
  _BOOL8 v5;
  _BOOL8 v6;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;

  v5 = a4;
  v6 = a3;
  v11 = a5;
  -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "displayConfiguration");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "shouldDismissAppCardOnExit");

  -[CKChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:dismissAppCard:completion:](self, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:dismissAppCard:completion:", v6, v5, v10, v11);
}

- (void)_dismissFullScreenBubbleViewControllerAnimated:(BOOL)a3 withSendAnimation:(BOOL)a4 dismissAppCard:(BOOL)a5 completion:(id)a6
{
  _BOOL4 v6;
  _BOOL8 v7;
  _BOOL8 v8;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  objc_super v20;
  _QWORD v21[5];
  _QWORD aBlock[5];
  id v23;
  uint8_t buf[4];
  const char *v25;
  uint64_t v26;

  v6 = a5;
  v7 = a4;
  v8 = a3;
  v26 = *MEMORY[0x1E0C80C00];
  v10 = a6;
  -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    v12 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __111__CKChatController__dismissFullScreenBubbleViewControllerAnimated_withSendAnimation_dismissAppCard_completion___block_invoke;
    aBlock[3] = &unk_1E274DA38;
    aBlock[4] = self;
    v23 = v10;
    v13 = _Block_copy(aBlock);
    if (!-[CKCoreChatController isInline](self, "isInline"))
    {
      -[CKChatController navbarCanvasViewController](self, "navbarCanvasViewController");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setNavBarContext:", 0);

      v15 = (void *)MEMORY[0x1E0CEABB0];
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "replyTranscriptBackgroundBlurAnimationTime");
      v21[0] = v12;
      v21[1] = 3221225472;
      v21[2] = __111__CKChatController__dismissFullScreenBubbleViewControllerAnimated_withSendAnimation_dismissAppCard_completion___block_invoke_2;
      v21[3] = &unk_1E274A208;
      v21[4] = self;
      objc_msgSend(v15, "animateWithDuration:animations:", v21);

    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[CKCoreChatController inputController](self, "inputController");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "showKeyboard");

    }
    else if (-[CKChatController entryViewWasActiveOnContextMenuPresentation](self, "entryViewWasActiveOnContextMenuPresentation"))
    {
      -[CKChatController showKeyboard](self, "showKeyboard");
    }
    else if (v6)
    {
      -[CKCoreChatController inputController](self, "inputController");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "dismissAppCardIfNecessaryAnimated:completion:", 1, 0);

    }
    v20.receiver = self;
    v20.super_class = (Class)CKChatController;
    -[CKCoreChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:](&v20, sel__dismissFullScreenBubbleViewControllerAnimated_withSendAnimation_completion_, v8, v7, v13);

  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "-[CKChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:dismissAppCard:completion:]";
      _os_log_impl(&dword_18DFCD000, v18, OS_LOG_TYPE_INFO, "[%s] called but fullScreenBalloonViewController is nil", buf, 0xCu);
    }

  }
}

void __111__CKChatController__dismissFullScreenBubbleViewControllerAnimated_withSendAnimation_dismissAppCard_completion___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  if (CKIsRunningInMacCatalyst())
  {
    objc_msgSend(*(id *)(a1 + 32), "entryView");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "contentView");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "makeActive");

  }
}

void __111__CKChatController__dismissFullScreenBubbleViewControllerAnimated_withSendAnimation_dismissAppCard_completion___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "navbarCanvasViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "backButtonView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAlpha:", 1.0);

  objc_msgSend(*(id *)(a1 + 32), "navbarCanvasViewController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "unifiedCallButton");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setAlpha:", 1.0);

}

- (BOOL)_isRunningInMacCatalyst
{
  return CKIsRunningInMacCatalyst() != 0;
}

- (BOOL)_wantsThreeColumnLayout
{
  void *v2;
  char v3;

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "wantsUniversalThreeColumn");

  return v3;
}

- (void)registerForTextinputPayloadHandlingForCheckInForConversation:(id)a3
{
  void *v4;
  int v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a3;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isZelkovaEnabled");

  if (v5)
  {
    objc_msgSend(v13, "chat");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isGroupChat");

    if ((v7 & 1) == 0)
    {
      objc_msgSend(v13, "senderIdentifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "recipients");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "firstObject");
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (v10)
      {
        objc_msgSend(v10, "rawAddress");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v11 = 0;
      }
      -[CKCoreChatController inputController](self, "inputController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "registerForTextInputPayloadHandlingForSenderHandleID:receiverHandleID:", v8, v11);

    }
  }

}

- (void)learnMoreButtonTapped
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  objc_msgSend((id)*MEMORY[0x1E0D375D0], "stringByAppendingFormat:", CFSTR(":%@:%@"), CFSTR("0000000000"), *MEMORY[0x1E0D37500]);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D39A00], "sharedCoordinator");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "appPayloadID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D39A00], "sharedCoordinator");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "appPayload");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKCoreChatController inputController](self, "inputController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "handleTextInputPayload:withPayloadID:forPlugin:", v6, v4, v8);

}

- (void)didRequestSendResponseForAction:(id)a3
{
  objc_class *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v4 = (objc_class *)MEMORY[0x1E0D35870];
  v5 = a3;
  v6 = [v4 alloc];
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "suggestedActionBody");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v6, "initWithSender:time:text:messageSubject:fileTransferGUIDs:flags:error:guid:subject:balloonBundleID:payloadData:expressiveSendStyleID:threadIdentifier:scheduleType:scheduleState:", 0, v7, v8, 0, 0, 5, 0, v9, 0, 0, 0, 0, 0, 0, 0);

  -[CKCoreChatController chat](self, "chat");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sendMessage:", v11);

}

- (void)didRequestLocationPush:(BOOL)a3
{
  id v3;

  -[CKCoreChatController inputController](self, "inputController", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "showLocationPlugin");

}

- (void)didRequestComposeText:(id)a3 text:(id)a4
{
  id v6;
  objc_class *v7;
  id v8;
  void *v9;
  CKComposition *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = (objc_class *)MEMORY[0x1E0CB3498];
  v8 = a4;
  v9 = (void *)objc_msgSend([v7 alloc], "initWithString:", v8);

  v10 = -[CKComposition initWithText:subject:]([CKComposition alloc], "initWithText:subject:", v9, 0);
  -[CKCoreChatController chat](self, "chat");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "participants");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v12, "count") != 1)
  {

    goto LABEL_5;
  }
  -[CKCoreChatController chat](self, "chat");
  v21 = v9;
  v13 = v6;
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "participants");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "firstObject");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "ID");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "isEqualToString:", v13);

  v6 = v13;
  v9 = v21;

  if (!v18)
  {
LABEL_5:
    -[CKCoreChatController delegate](self, "delegate");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v22[0] = v6;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "chatController:shouldComposeConversationWithRecipientAddresses:composition:", self, v20, v10);

    goto LABEL_6;
  }
  -[CKChatController setComposition:](self, "setComposition:", v10);
LABEL_6:

}

- (void)didRequestComposeAudio:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKCoreChatController chat](self, "chat");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "participants");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "count") != 1)
  {

    goto LABEL_5;
  }
  -[CKCoreChatController chat](self, "chat");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "participants");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "firstObject");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "ID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isEqualToString:", v4);

  if (!v11)
  {
LABEL_5:
    -[CKCoreChatController delegate](self, "delegate");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v16, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "chatController:shouldComposeAudioMessageWithRecipientAddresses:", self, v15);

    goto LABEL_6;
  }
  -[CKCoreChatController inputController](self, "inputController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "entryView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "startRecordingForAudioButtonInEntryView");

LABEL_6:
}

- (void)didRequestComposeVideo:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKCoreChatController chat](self, "chat");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "participants");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "count") != 1)
  {

    goto LABEL_5;
  }
  -[CKCoreChatController chat](self, "chat");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "participants");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "firstObject");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "ID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isEqualToString:", v4);

  if (!v11)
  {
LABEL_5:
    -[CKCoreChatController delegate](self, "delegate");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v15[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "chatController:shouldComposeVideoMessageWithRecipientAddresses:", self, v14);

    goto LABEL_6;
  }
  -[CKCoreChatController inputController](self, "inputController");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "showFunCamera");

LABEL_6:
}

- (void)didRequestCreateCalendarEvent:(id)a3
{
  id v4;

  if (a3)
  {
    v4 = a3;
    objc_msgSend(v4, "setEditViewDelegate:", self);
    -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v4, 1, 0);

  }
}

- (void)didRequestOpenWebView:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  char v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  void *v26;
  _QWORD v27[5];
  _QWORD v28[5];
  _QWORD v29[5];
  void *v30;
  _QWORD v31[2];
  _QWORD v32[2];
  void *v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(v4, "url");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "URLWithString:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7)
    goto LABEL_18;
  objc_msgSend(v7, "scheme");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "isEqualToString:", CFSTR("http")))
  {

LABEL_5:
    gotLoadHelper_x8__OBJC_CLASS___SFSafariViewController(v9);
    v13 = (void *)objc_msgSend(objc_alloc(*(Class *)(v12 + 1536)), "initWithURL:", v7);
    objc_msgSend(v13, "setDelegate:", self);
    objc_msgSend(v13, "setModalPresentationStyle:", 2);
    objc_msgSend(v13, "sheetPresentationController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController view](self, "view");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "bounds");
    v17 = v16;

    v18 = MEMORY[0x1E0C809B0];
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __42__CKChatController_didRequestOpenWebView___block_invoke;
    v29[3] = &__block_descriptor_40_e64_d16__0___UISheetPresentationControllerDetentResolutionContext__8l;
    v29[4] = v17;
    objc_msgSend(MEMORY[0x1E0CEA9A8], "customDetentWithIdentifier:resolver:", CFSTR("OpenWebViewControllerFullDetent"), v29);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = v18;
    v28[1] = 3221225472;
    v28[2] = __42__CKChatController_didRequestOpenWebView___block_invoke_2;
    v28[3] = &__block_descriptor_40_e64_d16__0___UISheetPresentationControllerDetentResolutionContext__8l;
    v28[4] = v17;
    objc_msgSend(MEMORY[0x1E0CEA9A8], "customDetentWithIdentifier:resolver:", CFSTR("OpenWebViewControllerTallDetent"), v28);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v27[0] = v18;
    v27[1] = 3221225472;
    v27[2] = __42__CKChatController_didRequestOpenWebView___block_invoke_3;
    v27[3] = &__block_descriptor_40_e64_d16__0___UISheetPresentationControllerDetentResolutionContext__8l;
    v27[4] = v17;
    objc_msgSend(MEMORY[0x1E0CEA9A8], "customDetentWithIdentifier:resolver:", CFSTR("OpenWebViewControllerHalfDetent"), v27);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v4, "mode");
    if (v22 == 2)
    {
      v32[0] = v20;
      v32[1] = v19;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v32, 2);
      v23 = objc_claimAutoreleasedReturnValue();
    }
    else if (v22 == 1)
    {
      v31[0] = v21;
      v31[1] = v19;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v31, 2);
      v23 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (v22)
      {
        v30 = v19;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v30, 1);
      }
      else
      {
        v33 = v19;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v33, 1);
      }
      v23 = objc_claimAutoreleasedReturnValue();
    }
    v26 = (void *)v23;
    objc_msgSend(v14, "setPrefersGrabberVisible:", 0);
    objc_msgSend(v14, "setDetents:", v26);
    -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v13, 1, 0);
    -[CKChatController setIsWebViewVisible:](self, "setIsWebViewVisible:", 1);

    goto LABEL_18;
  }
  objc_msgSend(v7, "scheme");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("https"));

  if ((v11 & 1) != 0)
    goto LABEL_5;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v7, "scheme");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136315394;
      v35 = "-[CKChatController didRequestOpenWebView:]";
      v36 = 2112;
      v37 = v25;
      _os_log_impl(&dword_18DFCD000, v24, OS_LOG_TYPE_INFO, "[%s] called with an invalid URL scheme: %@", buf, 0x16u);

    }
  }
LABEL_18:

}

double __42__CKChatController_didRequestOpenWebView___block_invoke(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

double __42__CKChatController_didRequestOpenWebView___block_invoke_2(uint64_t a1)
{
  return *(double *)(a1 + 32) * 0.75;
}

double __42__CKChatController_didRequestOpenWebView___block_invoke_3(uint64_t a1)
{
  return *(double *)(a1 + 32) * 0.5;
}

- (void)didRequestSendDeviceDetails
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  CKComposition *v15;
  void *v16;
  void *v17;
  id v18;

  v18 = (id)MGCopyAnswer();
  v3 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "systemName");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "systemVersion");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@ %@"), v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "systemVersion");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "stringWithFormat:", CFSTR("Apple Messages %@"), v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@\n%@"), v8, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKSuggestedActionsHandler pluginPayloadForShelfCardWithTitle:summary:userInfo:](_TtC7ChatKit25CKSuggestedActionsHandler, "pluginPayloadForShelfCardWithTitle:summary:userInfo:", v18, v13, &unk_1E2871BA0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = -[CKComposition initWithText:subject:shelfPluginPayload:]([CKComposition alloc], "initWithText:subject:shelfPluginPayload:", 0, 0, v14);
  -[CKChatController composition](self, "composition");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "compositionByAppendingComposition:", v15);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController setComposition:](self, "setComposition:", v17);

}

- (void)didRequestSettings
{
  -[CKChatController _presentDetailsViewControllerAnimated:](self, "_presentDetailsViewControllerAnimated:", 1);
}

- (void)safariViewControllerDidFinish:(id)a3
{
  -[CKChatController setIsWebViewVisible:](self, "setIsWebViewVisible:", 0);
}

- (void)eventEditViewController:(id)a3 didCompleteWithAction:(int64_t)a4
{
  objc_msgSend(a3, "dismissViewControllerAnimated:completion:", 1, 0);
}

- (CKChatControllerSendMenuDelegate)sendMenuDelegate
{
  return (CKChatControllerSendMenuDelegate *)objc_loadWeakRetained((id *)&self->_sendMenuDelegate);
}

- (void)setSendMenuDelegate:(id)a3
{
  objc_storeWeak((id *)&self->_sendMenuDelegate, a3);
}

- (CKMentionsController)mentionsController
{
  return self->_mentionsController;
}

- (void)setMentionsController:(id)a3
{
  objc_storeStrong((id *)&self->_mentionsController, a3);
}

- (CKExternalPluginViewControllerProvider)externalPluginControllerProvider
{
  return (CKExternalPluginViewControllerProvider *)objc_loadWeakRetained((id *)&self->_externalPluginControllerProvider);
}

- (void)setExternalPluginControllerProvider:(id)a3
{
  objc_storeWeak((id *)&self->_externalPluginControllerProvider, a3);
}

- (BOOL)isAnimatingMessageSend
{
  return self->_isAnimatingMessageSend;
}

- (void)setIsAnimatingMessageSend:(BOOL)a3
{
  self->_isAnimatingMessageSend = a3;
}

- (BOOL)isDeferringSystemNavigationPopGestureForPlusButton
{
  return self->_deferSystemNavigationPopGestureForPlusButton;
}

- (void)setDeferSystemNavigationPopGestureForPlusButton:(BOOL)a3
{
  self->_deferSystemNavigationPopGestureForPlusButton = a3;
}

- (BOOL)shouldShowDoneButton
{
  return self->_shouldShowDoneButton;
}

- (void)setShouldShowDoneButton:(BOOL)a3
{
  self->_shouldShowDoneButton = a3;
}

- (BOOL)wasKeyboardShowingWithApp
{
  return self->_wasKeyboardShowingWithApp;
}

- (void)setWasKeyboardShowingWithApp:(BOOL)a3
{
  self->_wasKeyboardShowingWithApp = a3;
}

- (BOOL)recipientsAreHEIFCapable
{
  return self->_recipientsAreHEIFCapable;
}

- (void)setRecipientsAreHEIFCapable:(BOOL)a3
{
  self->_recipientsAreHEIFCapable = a3;
}

- (BOOL)isSettingUpCollaboration
{
  return self->_isSettingUpCollaboration;
}

- (void)setIsSettingUpCollaboration:(BOOL)a3
{
  self->_isSettingUpCollaboration = a3;
}

- (NSString)messageGUIDForTranscriptExtension
{
  return self->_messageGUIDForTranscriptExtension;
}

- (void)setMessageGUIDForTranscriptExtension:(id)a3
{
  objc_storeStrong((id *)&self->_messageGUIDForTranscriptExtension, a3);
}

- (int64_t)collaborationFailureCount
{
  return self->_collaborationFailureCount;
}

- (void)setCollaborationFailureCount:(int64_t)a3
{
  self->_collaborationFailureCount = a3;
}

- (IMTimingCollection)timingCollectionSendGelato
{
  return self->_timingCollectionSendGelato;
}

- (void)setTimingCollectionSendGelato:(id)a3
{
  objc_storeStrong((id *)&self->_timingCollectionSendGelato, a3);
}

- (CKDetailsContactsManager)detailsContactsManager
{
  return self->_detailsContactsManager;
}

- (void)setDetailsContactsManager:(id)a3
{
  objc_storeStrong((id *)&self->_detailsContactsManager, a3);
}

- (CKMediaObject)mediaObjectToDownload
{
  return self->_mediaObjectToDownload;
}

- (void)setMediaObjectToDownload:(id)a3
{
  objc_storeStrong((id *)&self->_mediaObjectToDownload, a3);
}

- (SCUIInterventionViewController)commSafetyInterventionController
{
  return self->_commSafetyInterventionController;
}

- (void)setCommSafetyInterventionController:(id)a3
{
  objc_storeStrong((id *)&self->_commSafetyInterventionController, a3);
}

- (BOOL)isEntryViewResizeAnimationRunning
{
  return self->_entryViewResizeAnimationRunning;
}

- (void)setEntryViewResizeAnimationRunning:(BOOL)a3
{
  self->_entryViewResizeAnimationRunning = a3;
}

- (BOOL)isTransitioningSize
{
  return self->_transitioningSize;
}

- (void)setTransitioningSize:(BOOL)a3
{
  self->_transitioningSize = a3;
}

- (CGSize)lastLaidOutSize
{
  double width;
  double height;
  CGSize result;

  width = self->_lastLaidOutSize.width;
  height = self->_lastLaidOutSize.height;
  result.height = height;
  result.width = width;
  return result;
}

- (void)setLastLaidOutSize:(CGSize)a3
{
  self->_lastLaidOutSize = a3;
}

- (BOOL)needToEnforceScrollIntent
{
  return self->_needToEnforceScrollIntent;
}

- (void)setNeedToEnforceScrollIntent:(BOOL)a3
{
  self->_needToEnforceScrollIntent = a3;
}

- (int64_t)lastKnownDeviceOrientation
{
  return self->_lastKnownDeviceOrientation;
}

- (void)setLastKnownDeviceOrientation:(int64_t)a3
{
  self->_lastKnownDeviceOrientation = a3;
}

- (NSNumber)transcriptBottomContentOffsetAtSuspend
{
  return self->_transcriptBottomContentOffsetAtSuspend;
}

- (void)setTranscriptBottomContentOffsetAtSuspend:(id)a3
{
  objc_storeStrong((id *)&self->_transcriptBottomContentOffsetAtSuspend, a3);
}

- (BOOL)firstLayoutAfterResume
{
  return self->_firstLayoutAfterResume;
}

- (void)setFirstLayoutAfterResume:(BOOL)a3
{
  self->_firstLayoutAfterResume = a3;
}

- (double)keyboardHeightFromPreviousLayout
{
  return self->_keyboardHeightFromPreviousLayout;
}

- (void)setKeyboardHeightFromPreviousLayout:(double)a3
{
  self->_keyboardHeightFromPreviousLayout = a3;
}

- (double)entryViewMaxYFromPreviousLayout
{
  return self->_entryViewMaxYFromPreviousLayout;
}

- (void)setEntryViewMaxYFromPreviousLayout:(double)a3
{
  self->_entryViewMaxYFromPreviousLayout = a3;
}

- (int64_t)targetFirstResponder
{
  return self->_targetFirstResponder;
}

- (BOOL)entryViewShouldBecomeTargetFirstResponderForPendingDraft
{
  return self->_entryViewShouldBecomeTargetFirstResponderForPendingDraft;
}

- (void)setEntryViewShouldBecomeTargetFirstResponderForPendingDraft:(BOOL)a3
{
  self->_entryViewShouldBecomeTargetFirstResponderForPendingDraft = a3;
}

- (CKMessageEntryViewController)entryViewController
{
  return self->_entryViewController;
}

- (void)setEntryViewController:(id)a3
{
  objc_storeStrong((id *)&self->_entryViewController, a3);
}

- (BOOL)suppressEntryViewKeyboardNotifications
{
  return self->_suppressEntryViewKeyboardNotifications;
}

- (void)setSuppressEntryViewKeyboardNotifications:(BOOL)a3
{
  self->_suppressEntryViewKeyboardNotifications = a3;
}

- (CKMessageEntryViewContainerView)entryViewContainerView
{
  return self->_entryViewContainerView;
}

- (void)setEntryViewContainerView:(id)a3
{
  objc_storeStrong((id *)&self->_entryViewContainerView, a3);
}

- (CKMessageEntryBackgroundViewProtocol)keyboardCandidateBarBackgroundView
{
  return self->_keyboardCandidateBarBackgroundView;
}

- (void)setKeyboardCandidateBarBackgroundView:(id)a3
{
  objc_storeStrong((id *)&self->_keyboardCandidateBarBackgroundView, a3);
}

- (IMScheduledUpdater)autorotationUpdater
{
  return self->_autorotationUpdater;
}

- (void)setAutorotationUpdater:(id)a3
{
  objc_storeStrong((id *)&self->_autorotationUpdater, a3);
}

- (CKScheduledUpdater)typingUpdater
{
  return self->_typingUpdater;
}

- (void)setTypingUpdater:(id)a3
{
  objc_storeStrong((id *)&self->_typingUpdater, a3);
}

- (CKNavbarCanvasViewController)navbarCanvasViewController
{
  return self->_navbarCanvasViewController;
}

- (void)setNavbarCanvasViewController:(id)a3
{
  objc_storeStrong((id *)&self->_navbarCanvasViewController, a3);
}

- (UIViewController)footerViewController
{
  return self->_footerViewController;
}

- (void)setFooterViewController:(id)a3
{
  objc_storeStrong((id *)&self->_footerViewController, a3);
}

- (SGFoundInSuggestionPresenter)foundInSuggestionPresenter
{
  return self->_foundInSuggestionPresenter;
}

- (void)setFoundInSuggestionPresenter:(id)a3
{
  objc_storeStrong((id *)&self->_foundInSuggestionPresenter, a3);
}

- (SGSuggestionPresenter)standardSuggestionPresenter
{
  return self->_standardSuggestionPresenter;
}

- (void)setStandardSuggestionPresenter:(id)a3
{
  objc_storeStrong((id *)&self->_standardSuggestionPresenter, a3);
}

- (double)suggestionBannerHeight
{
  return self->_suggestionBannerHeight;
}

- (void)setSuggestionBannerHeight:(double)a3
{
  self->_suggestionBannerHeight = a3;
}

- (NSLayoutConstraint)suggestionBannerTopConstraint
{
  return self->_suggestionBannerTopConstraint;
}

- (void)setSuggestionBannerTopConstraint:(id)a3
{
  objc_storeStrong((id *)&self->_suggestionBannerTopConstraint, a3);
}

- (SGBannerProtocol)suggestionBannerView
{
  return self->_suggestionBannerView;
}

- (void)setSuggestionBannerView:(id)a3
{
  objc_storeStrong((id *)&self->_suggestionBannerView, a3);
}

- (BOOL)didDisplayFirstUnreadMessage
{
  return self->_didDisplayFirstUnreadMessage;
}

- (void)setDidDisplayFirstUnreadMessage:(BOOL)a3
{
  self->_didDisplayFirstUnreadMessage = a3;
}

- (BOOL)didComputeInitiallyVisibleIndexPaths
{
  return self->_didComputeInitiallyVisibleIndexPaths;
}

- (void)setDidComputeInitiallyVisibleIndexPaths:(BOOL)a3
{
  self->_didComputeInitiallyVisibleIndexPaths = a3;
}

- (BOOL)isCatchUpButtonNeededOnFirstLoad
{
  return self->_isCatchUpButtonNeededOnFirstLoad;
}

- (void)setIsCatchUpButtonNeededOnFirstLoad:(BOOL)a3
{
  self->_isCatchUpButtonNeededOnFirstLoad = a3;
}

- (double)firstUnreadMessageCellOriginY
{
  return self->_firstUnreadMessageCellOriginY;
}

- (void)setFirstUnreadMessageCellOriginY:(double)a3
{
  self->_firstUnreadMessageCellOriginY = a3;
}

- (NSString)firstUnreadMessageGUID
{
  return self->_firstUnreadMessageGUID;
}

- (void)setFirstUnreadMessageGUID:(id)a3
{
  objc_storeStrong((id *)&self->_firstUnreadMessageGUID, a3);
}

- (NSString)firstUnreadMessageGUIDForTextEffects
{
  return self->_firstUnreadMessageGUIDForTextEffects;
}

- (void)setFirstUnreadMessageGUIDForTextEffects:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 1568);
}

- (UIView)catchUpButton
{
  return self->_catchUpButton;
}

- (void)setCatchUpButton:(id)a3
{
  objc_storeStrong((id *)&self->_catchUpButton, a3);
}

- (_TtC7ChatKit22CKCatchUpButtonManager)catchUpButtonManager
{
  return self->_catchUpButtonManager;
}

- (void)setCatchUpButtonManager:(id)a3
{
  objc_storeStrong((id *)&self->_catchUpButtonManager, a3);
}

- (NSLayoutConstraint)catchUpButtonTopConstraint
{
  return self->_catchUpButtonTopConstraint;
}

- (void)setCatchUpButtonTopConstraint:(id)a3
{
  objc_storeStrong((id *)&self->_catchUpButtonTopConstraint, a3);
}

- (CGPoint)contentOffsetForFirstUnreadMessage
{
  double x;
  double y;
  CGPoint result;

  x = self->_contentOffsetForFirstUnreadMessage.x;
  y = self->_contentOffsetForFirstUnreadMessage.y;
  result.y = y;
  result.x = x;
  return result;
}

- (void)setContentOffsetForFirstUnreadMessage:(CGPoint)a3
{
  self->_contentOffsetForFirstUnreadMessage = a3;
}

- (NSIndexPath)indexPathForFirstUnreadMessage
{
  return self->_indexPathForFirstUnreadMessage;
}

- (void)setIndexPathForFirstUnreadMessage:(id)a3
{
  objc_storeStrong((id *)&self->_indexPathForFirstUnreadMessage, a3);
}

- (id)scrollBlock
{
  return self->_scrollBlock;
}

- (void)setScrollBlock:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 1608);
}

- (BOOL)viewDidMoveToWindowAndNeedsToScrollToInsertionTime
{
  return self->_viewDidMoveToWindowAndNeedsToScrollToInsertionTime;
}

- (void)setViewDidMoveToWindowAndNeedsToScrollToInsertionTime:(BOOL)a3
{
  self->_viewDidMoveToWindowAndNeedsToScrollToInsertionTime = a3;
}

- (BOOL)entryViewWasActiveBeforePresentingDataDetector
{
  return self->_entryViewWasActiveBeforePresentingDataDetector;
}

- (void)setEntryViewWasActiveBeforePresentingDataDetector:(BOOL)a3
{
  self->_entryViewWasActiveBeforePresentingDataDetector = a3;
}

- (BOOL)nextEntryViewSafeAreaInsetUpdateIsSynchronous
{
  return self->_nextEntryViewSafeAreaInsetUpdateIsSynchronous;
}

- (void)setNextEntryViewSafeAreaInsetUpdateIsSynchronous:(BOOL)a3
{
  self->_nextEntryViewSafeAreaInsetUpdateIsSynchronous = a3;
}

- (CKMacToolbarController)macToolbarController
{
  return (CKMacToolbarController *)objc_loadWeakRetained((id *)&self->_macToolbarController);
}

- (void)setMacToolbarController:(id)a3
{
  objc_storeWeak((id *)&self->_macToolbarController, a3);
}

- (UIMenu)macFaceTimeButtonMenu
{
  return self->_macFaceTimeButtonMenu;
}

- (void)setMacFaceTimeButtonMenu:(id)a3
{
  objc_storeStrong((id *)&self->_macFaceTimeButtonMenu, a3);
}

- (CKMacMenuToolbarItem)macFaceTimeStartCallToolbarItem
{
  return self->_macFaceTimeStartCallToolbarItem;
}

- (void)setMacFaceTimeStartCallToolbarItem:(id)a3
{
  objc_storeStrong((id *)&self->_macFaceTimeStartCallToolbarItem, a3);
}

- (CKMacToolbarItem)macFaceTimeJoinedCallToolbarItem
{
  return self->_macFaceTimeJoinedCallToolbarItem;
}

- (void)setMacFaceTimeJoinedCallToolbarItem:(id)a3
{
  objc_storeStrong((id *)&self->_macFaceTimeJoinedCallToolbarItem, a3);
}

- (CKMacToolbarItem)macFaceTimeJoinCallToolbarItem
{
  return self->_macFaceTimeJoinCallToolbarItem;
}

- (void)setMacFaceTimeJoinCallToolbarItem:(id)a3
{
  objc_storeStrong((id *)&self->_macFaceTimeJoinCallToolbarItem, a3);
}

- (CKMacBarButtonToolbarItem)detailsToolbarItem
{
  return self->_detailsToolbarItem;
}

- (void)setDetailsToolbarItem:(id)a3
{
  objc_storeStrong((id *)&self->_detailsToolbarItem, a3);
}

- (void)setRecipientsVirtualToolbarItem:(id)a3
{
  objc_storeStrong((id *)&self->_recipientsVirtualToolbarItem, a3);
}

- (CKMacToolBarImageProperties)macToolbarFaceTimeButtonProps
{
  return self->_macToolbarFaceTimeButtonProps;
}

- (void)setMacToolbarFaceTimeButtonProps:(id)a3
{
  objc_storeStrong((id *)&self->_macToolbarFaceTimeButtonProps, a3);
}

- (CKMacToolBarImageProperties)macToolbarDetailsButtonProps
{
  return self->_macToolbarDetailsButtonProps;
}

- (void)setMacToolbarDetailsButtonProps:(id)a3
{
  objc_storeStrong((id *)&self->_macToolbarDetailsButtonProps, a3);
}

- (int64_t)macJoinStyle
{
  return self->_macJoinStyle;
}

- (void)setMacJoinStyle:(int64_t)a3
{
  self->_macJoinStyle = a3;
}

- (NSLayoutConstraint)entryViewFauxKeyboardLayoutConstraint
{
  return self->_entryViewFauxKeyboardLayoutConstraint;
}

- (NSLayoutConstraint)entryViewKeyboardLayoutConstraint
{
  return self->_entryViewKeyboardLayoutConstraint;
}

- (NSLayoutConstraint)entryViewKeyboardSnapshotLayoutConstraint
{
  return self->_entryViewKeyboardSnapshotLayoutConstraint;
}

- (NSLayoutConstraint)entryViewAppCardLayoutConstraint
{
  return self->_entryViewAppCardLayoutConstraint;
}

- (NSLayoutConstraint)entryViewLeadingLayoutConstraint
{
  return self->_entryViewLeadingLayoutConstraint;
}

- (NSLayoutConstraint)entryViewTrailingLayoutConstraint
{
  return self->_entryViewTrailingLayoutConstraint;
}

- (UIViewController)appCardBackgroundViewController
{
  return self->_appCardBackgroundViewController;
}

- (void)setAppCardBackgroundViewController:(id)a3
{
  objc_storeStrong((id *)&self->_appCardBackgroundViewController, a3);
}

- (NSArray)appCardBackgroundViewConstraints
{
  return self->_appCardBackgroundViewConstraints;
}

- (void)setAppCardBackgroundViewConstraints:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 1752);
}

- (BOOL)primeTranscriptWithInitialScrollGeometries
{
  return self->_primeTranscriptWithInitialScrollGeometries;
}

- (void)setPrimeTranscriptWithInitialScrollGeometries:(BOOL)a3
{
  self->_primeTranscriptWithInitialScrollGeometries = a3;
}

- (CGPoint)initialContentOffset
{
  double x;
  double y;
  CGPoint result;

  x = self->_initialContentOffset.x;
  y = self->_initialContentOffset.y;
  result.y = y;
  result.x = x;
  return result;
}

- (void)setInitialContentOffset:(CGPoint)a3
{
  self->_initialContentOffset = a3;
}

- (UIEdgeInsets)initialContentInset
{
  double top;
  double left;
  double bottom;
  double right;
  UIEdgeInsets result;

  top = self->_initialContentInset.top;
  left = self->_initialContentInset.left;
  bottom = self->_initialContentInset.bottom;
  right = self->_initialContentInset.right;
  result.right = right;
  result.bottom = bottom;
  result.left = left;
  result.top = top;
  return result;
}

- (void)setInitialContentInset:(UIEdgeInsets)a3
{
  self->_initialContentInset = a3;
}

- (CKComposition)initialComposition
{
  return self->_initialComposition;
}

- (void)setInitialComposition:(id)a3
{
  objc_storeStrong((id *)&self->_initialComposition, a3);
}

- (BOOL)shouldDisableEntryView
{
  return self->_shouldDisableEntryView;
}

- (void)setShouldDisableEntryView:(BOOL)a3
{
  self->_shouldDisableEntryView = a3;
}

- (BOOL)shouldUpdateEntryViewPasteConfiguration
{
  return self->_shouldUpdateEntryViewPasteConfiguration;
}

- (void)setShouldUpdateEntryViewPasteConfiguration:(BOOL)a3
{
  self->_shouldUpdateEntryViewPasteConfiguration = a3;
}

- (CKRaiseGesture)raiseGesture
{
  return self->_raiseGesture;
}

- (void)setRaiseGesture:(id)a3
{
  objc_storeStrong((id *)&self->_raiseGesture, a3);
}

- (BOOL)hasFinishedRestoringDraftState
{
  return self->_hasFinishedRestoringDraftState;
}

- (void)setHasFinishedRestoringDraftState:(BOOL)a3
{
  self->_hasFinishedRestoringDraftState = a3;
}

- (BOOL)needsDarkEffectStyleCleanUp
{
  return self->_needsDarkEffectStyleCleanUp;
}

- (void)setNeedsDarkEffectStyleCleanUp:(BOOL)a3
{
  self->_needsDarkEffectStyleCleanUp = a3;
}

- (CKComposition)compositionBeingTrimmed
{
  return self->_compositionBeingTrimmed;
}

- (void)setCompositionBeingTrimmed:(id)a3
{
  objc_storeStrong((id *)&self->_compositionBeingTrimmed, a3);
}

- (CKAudioTrimViewController)audioTrimController
{
  return self->_audioTrimController;
}

- (void)setAudioTrimController:(id)a3
{
  objc_storeStrong((id *)&self->_audioTrimController, a3);
}

- (CKVideoTrimController)videoTrimController
{
  return self->_videoTrimController;
}

- (void)setVideoTrimController:(id)a3
{
  objc_storeStrong((id *)&self->_videoTrimController, a3);
}

- (IMPluginPayload)extensionPayloadBeingSent
{
  return self->_extensionPayloadBeingSent;
}

- (void)setExtensionPayloadBeingSent:(id)a3
{
  objc_storeStrong((id *)&self->_extensionPayloadBeingSent, a3);
}

- (CKThrowAnimationManager)throwAnimationManager
{
  return self->_throwAnimationManager;
}

- (void)setThrowAnimationManager:(id)a3
{
  objc_storeStrong((id *)&self->_throwAnimationManager, a3);
}

- (id)deferredSendAnimationBlock
{
  return self->_deferredSendAnimationBlock;
}

- (void)setDeferredSendAnimationBlock:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 1816);
}

- (UIImagePickerController)imagePickerController
{
  return self->_imagePickerController;
}

- (void)setImagePickerController:(id)a3
{
  objc_storeStrong((id *)&self->_imagePickerController, a3);
}

- (CKVideoMessageRecordingViewController)videoMessageRecordingViewController
{
  return self->_videoMessageRecordingViewController;
}

- (void)setVideoMessageRecordingViewController:(id)a3
{
  objc_storeStrong((id *)&self->_videoMessageRecordingViewController, a3);
}

- (BOOL)isShowingVideoMessageRecordingView
{
  return self->_showingVideoMessageRecordingView;
}

- (void)setShowingVideoMessageRecordingView:(BOOL)a3
{
  self->_showingVideoMessageRecordingView = a3;
}

- (UIViewController)collaborationPopoverController
{
  return self->_collaborationPopoverController;
}

- (void)setCollaborationPopoverController:(id)a3
{
  objc_storeStrong((id *)&self->_collaborationPopoverController, a3);
}

- (CKQLPreviewControllerDataSource)qlPreviewDataSource
{
  return self->_qlPreviewDataSource;
}

- (void)setQlPreviewDataSource:(id)a3
{
  objc_storeStrong((id *)&self->_qlPreviewDataSource, a3);
}

- (CKQLPreviewController)previewController
{
  return self->_previewController;
}

- (void)setPreviewController:(id)a3
{
  objc_storeStrong((id *)&self->_previewController, a3);
}

- (UIView)previewSourceView
{
  return (UIView *)objc_loadWeakRetained((id *)&self->_previewSourceView);
}

- (void)setPreviewSourceView:(id)a3
{
  objc_storeWeak((id *)&self->_previewSourceView, a3);
}

- (BOOL)isShowingPreview
{
  return self->_isShowingPreview;
}

- (void)setIsShowingPreview:(BOOL)a3
{
  self->_isShowingPreview = a3;
}

- (BOOL)entryViewWasActiveOnPreview
{
  return self->_entryViewWasActiveOnPreview;
}

- (void)setEntryViewWasActiveOnPreview:(BOOL)a3
{
  self->_entryViewWasActiveOnPreview = a3;
}

- (BOOL)entryViewWasActiveOnContextMenuPresentation
{
  return self->_entryViewWasActiveOnContextMenuPresentation;
}

- (void)setEntryViewWasActiveOnContextMenuPresentation:(BOOL)a3
{
  self->_entryViewWasActiveOnContextMenuPresentation = a3;
}

- (CKInvisibleInkEffectController)previewInvisibleInkEffectController
{
  return self->_previewInvisibleInkEffectController;
}

- (void)setPreviewInvisibleInkEffectController:(id)a3
{
  objc_storeStrong((id *)&self->_previewInvisibleInkEffectController, a3);
}

- (UIView)previewRevealView
{
  return self->_previewRevealView;
}

- (void)setPreviewRevealView:(id)a3
{
  objc_storeStrong((id *)&self->_previewRevealView, a3);
}

- (UITapGestureRecognizer)tapGestureRecognizer
{
  return self->_tapGestureRecognizer;
}

- (void)setTapGestureRecognizer:(id)a3
{
  objc_storeStrong((id *)&self->_tapGestureRecognizer, a3);
}

- (BOOL)isShowingEmojiKeyboard
{
  return self->_isShowingEmojiKeyboard;
}

- (void)setIsShowingEmojiKeyboard:(BOOL)a3
{
  self->_isShowingEmojiKeyboard = a3;
}

- (UIKeyboardInputMode)savedKeyboardInputMode
{
  return self->_savedKeyboardInputMode;
}

- (void)setSavedKeyboardInputMode:(id)a3
{
  objc_storeStrong((id *)&self->_savedKeyboardInputMode, a3);
}

- (CKEffectPickerViewController)effectPickerViewController
{
  return (CKEffectPickerViewController *)self->_effectPickerViewController;
}

- (void)setEffectPickerViewController:(id)a3
{
  objc_storeStrong((id *)&self->_effectPickerViewController, a3);
}

- (UIWindow)effectPickerWindow
{
  return self->_effectPickerWindow;
}

- (void)setEffectPickerWindow:(id)a3
{
  objc_storeStrong((id *)&self->_effectPickerWindow, a3);
}

- (BOOL)effectPickerIsPresented
{
  return self->_effectPickerIsPresented;
}

- (int64_t)notificationBannerType
{
  return self->_notificationBannerType;
}

- (void)setNotificationBannerType:(int64_t)a3
{
  self->_notificationBannerType = a3;
}

- (UIView)notificationBannerView
{
  return self->_notificationBannerView;
}

- (void)setNotificationBannerView:(id)a3
{
  objc_storeStrong((id *)&self->_notificationBannerView, a3);
}

- (CKScheduledUpdater)transcriptInlineNotificationUpdater
{
  return self->_transcriptInlineNotificationUpdater;
}

- (void)setTranscriptInlineNotificationUpdater:(id)a3
{
  objc_storeStrong((id *)&self->_transcriptInlineNotificationUpdater, a3);
}

- (CADisplayLink)stickerTranscriptScrollDisplayLink
{
  return self->_stickerTranscriptScrollDisplayLink;
}

- (void)setStickerTranscriptScrollDisplayLink:(id)a3
{
  objc_storeStrong((id *)&self->_stickerTranscriptScrollDisplayLink, a3);
}

- (double)stickerTranscriptScrollDelta
{
  return self->_stickerTranscriptScrollDelta;
}

- (void)setStickerTranscriptScrollDelta:(double)a3
{
  self->_stickerTranscriptScrollDelta = a3;
}

- (BOOL)scrollDownIsValid
{
  return self->_scrollDownIsValid;
}

- (void)setScrollDownIsValid:(BOOL)a3
{
  self->_scrollDownIsValid = a3;
}

- (void)setRevealAnimationGroup:(id)a3
{
  objc_storeStrong((id *)&self->_revealAnimationGroup, a3);
}

- (UIDragSession)dragSession
{
  return self->_dragSession;
}

- (void)setDragSession:(id)a3
{
  objc_storeStrong((id *)&self->_dragSession, a3);
}

- (UIDropSession)dropSession
{
  return self->_dropSession;
}

- (void)setDropSession:(id)a3
{
  objc_storeStrong((id *)&self->_dropSession, a3);
}

- (id)currentDragPreviewContainer
{
  return objc_loadWeakRetained(&self->_currentDragPreviewContainer);
}

- (void)setCurrentDragPreviewContainer:(id)a3
{
  objc_storeWeak(&self->_currentDragPreviewContainer, a3);
}

- (CKFunCameraViewController)funCameraViewController
{
  return self->_funCameraViewController;
}

- (void)setFunCameraViewController:(id)a3
{
  objc_storeStrong((id *)&self->_funCameraViewController, a3);
}

- (BOOL)isShowingCamera
{
  return self->_isShowingCamera;
}

- (void)setIsShowingCamera:(BOOL)a3
{
  self->_isShowingCamera = a3;
}

- (id)deferredPresentationBlock
{
  return self->_deferredPresentationBlock;
}

- (void)setDeferredPresentationBlock:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 2000);
}

- (CKNicknameBannerView)nicknameBanner
{
  return self->_nicknameBanner;
}

- (void)setNicknameBanner:(id)a3
{
  objc_storeStrong((id *)&self->_nicknameBanner, a3);
}

- (UIViewController)nicknameUpdateController
{
  return self->_nicknameUpdateController;
}

- (void)setNicknameUpdateController:(id)a3
{
  objc_storeStrong((id *)&self->_nicknameUpdateController, a3);
}

- (void)setContactPicker:(id)a3
{
  objc_storeStrong((id *)&self->_contactPicker, a3);
}

- (CKNicknameUpdate)currentNicknameUpdate
{
  return self->_currentNicknameUpdate;
}

- (void)setCurrentNicknameUpdate:(id)a3
{
  objc_storeStrong((id *)&self->_currentNicknameUpdate, a3);
}

- (void)setOnboardingController:(id)a3
{
  objc_storeStrong((id *)&self->_onboardingController, a3);
}

- (UIView)lockoutView
{
  return self->_lockoutView;
}

- (void)setLockoutView:(id)a3
{
  objc_storeStrong((id *)&self->_lockoutView, a3);
}

- (UIView)keyboardSnapshotView
{
  return self->_keyboardSnapshotView;
}

- (void)setKeyboardSnapshotView:(id)a3
{
  objc_storeStrong((id *)&self->_keyboardSnapshotView, a3);
}

- (unint64_t)keyboardSnapshotReason
{
  return self->_keyboardSnapshotReason;
}

- (void)setKeyboardSnapshotReason:(unint64_t)a3
{
  self->_keyboardSnapshotReason = a3;
}

- (NSArray)collaborationNoticeSuggestions
{
  return self->_collaborationNoticeSuggestions;
}

- (CKTranscriptSharingSuggestion)transcriptSharingBannerSuggestion
{
  return self->_transcriptSharingBannerSuggestion;
}

- (void)setTranscriptSharingBannerSuggestion:(id)a3
{
  objc_storeStrong((id *)&self->_transcriptSharingBannerSuggestion, a3);
}

- (STConversationContext)conversationContext
{
  return self->_conversationContext;
}

- (void)setConversationContext:(id)a3
{
  objc_storeStrong((id *)&self->_conversationContext, a3);
}

- (CKTapbackPickerContainerAccessoryView)pickerContainerAccessoryView
{
  return (CKTapbackPickerContainerAccessoryView *)objc_loadWeakRetained((id *)&self->_pickerContainerAccessoryView);
}

- (void)setPickerContainerAccessoryView:(id)a3
{
  objc_storeWeak((id *)&self->_pickerContainerAccessoryView, a3);
}

- (int64_t)acknowledgmentToSend
{
  return self->_acknowledgmentToSend;
}

- (void)setAcknowledgmentToSend:(int64_t)a3
{
  self->_acknowledgmentToSend = a3;
}

- (BOOL)wantsStickerDetails
{
  return self->_wantsStickerDetails;
}

- (void)setWantsStickerDetails:(BOOL)a3
{
  self->_wantsStickerDetails = a3;
}

- (BOOL)wantsEmojiDetails
{
  return self->_wantsEmojiDetails;
}

- (void)setWantsEmojiDetails:(BOOL)a3
{
  self->_wantsEmojiDetails = a3;
}

- (BOOL)wantsInlineOverlay
{
  return self->_wantsInlineOverlay;
}

- (void)setWantsInlineOverlay:(BOOL)a3
{
  self->_wantsInlineOverlay = a3;
}

- (BOOL)dismissingContextMenu
{
  return self->_dismissingContextMenu;
}

- (void)setDismissingContextMenu:(BOOL)a3
{
  self->_dismissingContextMenu = a3;
}

- (CKNavigationBarTitleController)navigationBarTitleController
{
  return self->_navigationBarTitleController;
}

- (void)setNavigationBarTitleController:(id)a3
{
  objc_storeStrong((id *)&self->_navigationBarTitleController, a3);
}

- (UIViewController)walletOrderImportViewController
{
  return (UIViewController *)objc_loadWeakRetained((id *)&self->_walletOrderImportViewController);
}

- (void)setWalletOrderImportViewController:(id)a3
{
  objc_storeWeak((id *)&self->_walletOrderImportViewController, a3);
}

- (CKMessageEditingViewController)messageEditingViewController
{
  return self->_messageEditingViewController;
}

- (void)setMessageEditingViewController:(id)a3
{
  objc_storeStrong((id *)&self->_messageEditingViewController, a3);
}

- (CKInlineReplyChatController)inlineReplyController
{
  return self->_inlineReplyController;
}

- (void)setInlineReplyController:(id)a3
{
  objc_storeStrong((id *)&self->_inlineReplyController, a3);
}

- (BOOL)transcriptWasScrolledToBottomBeforeInlinePresentation
{
  return self->_transcriptWasScrolledToBottomBeforeInlinePresentation;
}

- (void)setTranscriptWasScrolledToBottomBeforeInlinePresentation:(BOOL)a3
{
  self->_transcriptWasScrolledToBottomBeforeInlinePresentation = a3;
}

- (CKGroupUpdateBannerView)groupPhotoUpdateBanner
{
  return self->_groupPhotoUpdateBanner;
}

- (void)setGroupPhotoUpdateBanner:(id)a3
{
  objc_storeStrong((id *)&self->_groupPhotoUpdateBanner, a3);
}

- (CKMacRecipientsController)macRecipientsController
{
  return self->_macRecipientsController;
}

- (void)setMacRecipientsController:(id)a3
{
  objc_storeStrong((id *)&self->_macRecipientsController, a3);
}

- (CKBusinessMacToolbarViewController)businessMacToolbarController
{
  return self->_businessMacToolbarController;
}

- (void)setBusinessMacToolbarController:(id)a3
{
  objc_storeStrong((id *)&self->_businessMacToolbarController, a3);
}

- (NSString)lastPopulatedMessageGuidFromMe
{
  return self->_lastPopulatedMessageGuidFromMe;
}

- (void)setLastPopulatedMessageGuidFromMe:(id)a3
{
  objc_storeStrong((id *)&self->_lastPopulatedMessageGuidFromMe, a3);
}

- (CKComposition)originalComposition
{
  return self->_originalComposition;
}

- (void)setOriginalComposition:(id)a3
{
  objc_storeStrong((id *)&self->_originalComposition, a3);
}

- (NSString)shareSheetHostBundleIdentifier
{
  return self->_shareSheetHostBundleIdentifier;
}

- (void)setShareSheetHostBundleIdentifier:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 2184);
}

- (CGRect)photoGridTapbackSnapshotRect
{
  double x;
  double y;
  double width;
  double height;
  CGRect result;

  x = self->_photoGridTapbackSnapshotRect.origin.x;
  y = self->_photoGridTapbackSnapshotRect.origin.y;
  width = self->_photoGridTapbackSnapshotRect.size.width;
  height = self->_photoGridTapbackSnapshotRect.size.height;
  result.size.height = height;
  result.size.width = width;
  result.origin.y = y;
  result.origin.x = x;
  return result;
}

- (void)setPhotoGridTapbackSnapshotRect:(CGRect)a3
{
  self->_photoGridTapbackSnapshotRect = a3;
}

- (NSString)photoGridDisplayedChatItemGUID
{
  return self->_photoGridDisplayedChatItemGUID;
}

- (void)setPhotoGridDisplayedChatItemGUID:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 2192);
}

- (CKAggregateAttachmentMessagePartChatItem)photoGridMomentShareChatItem
{
  return (CKAggregateAttachmentMessagePartChatItem *)objc_loadWeakRetained((id *)&self->_photoGridMomentShareChatItem);
}

- (void)setPhotoGridMomentShareChatItem:(id)a3
{
  objc_storeWeak((id *)&self->_photoGridMomentShareChatItem, a3);
}

- (CKAttachmentMessagePartChatItem)photoGridClickyOrbChatItem
{
  return self->_photoGridClickyOrbChatItem;
}

- (void)setPhotoGridClickyOrbChatItem:(id)a3
{
  objc_storeStrong((id *)&self->_photoGridClickyOrbChatItem, a3);
}

- (CKMediaObjectAssetDataSourceManager)photoGridDataSourceManager
{
  return (CKMediaObjectAssetDataSourceManager *)objc_loadWeakRetained((id *)&self->_photoGridDataSourceManager);
}

- (void)setPhotoGridDataSourceManager:(id)a3
{
  objc_storeWeak((id *)&self->_photoGridDataSourceManager, a3);
}

- (int64_t)momentShareFetchGeneration
{
  return self->_momentShareFetchGeneration;
}

- (void)setMomentShareFetchGeneration:(int64_t)a3
{
  self->_momentShareFetchGeneration = a3;
}

- (BOOL)isTransitioningFromQLPreviewToGrid
{
  return self->_isTransitioningFromQLPreviewToGrid;
}

- (void)setIsTransitioningFromQLPreviewToGrid:(BOOL)a3
{
  self->_isTransitioningFromQLPreviewToGrid = a3;
}

- (_TtC7ChatKit16CKChatTipManager)tipManager
{
  return self->_tipManager;
}

- (void)setTipManager:(id)a3
{
  objc_storeStrong((id *)&self->_tipManager, a3);
}

- (BOOL)audioMessageWasPlayedAndIsLatestMessage
{
  return self->_audioMessageWasPlayedAndIsLatestMessage;
}

- (void)setAudioMessageWasPlayedAndIsLatestMessage:(BOOL)a3
{
  self->_audioMessageWasPlayedAndIsLatestMessage = a3;
}

- (CKRotationLockUtility)rotationLockUtility
{
  return self->_rotationLockUtility;
}

- (void)setRotationLockUtility:(id)a3
{
  objc_storeStrong((id *)&self->_rotationLockUtility, a3);
}

- (BOOL)shouldFetchCollaborationNotices
{
  return self->_shouldFetchCollaborationNotices;
}

- (void)setShouldFetchCollaborationNotices:(BOOL)a3
{
  self->_shouldFetchCollaborationNotices = a3;
}

- (NSMutableDictionary)activeDropPreviews
{
  return self->_activeDropPreviews;
}

- (void)setActiveDropPreviews:(id)a3
{
  objc_storeStrong((id *)&self->_activeDropPreviews, a3);
}

- (int64_t)initialFrameIndexForCurrentDrag
{
  return self->_initialFrameIndexForCurrentDrag;
}

- (void)setInitialFrameIndexForCurrentDrag:(int64_t)a3
{
  self->_initialFrameIndexForCurrentDrag = a3;
}

- (id)insertItemsCallback
{
  return self->_insertItemsCallback;
}

- (void)setInsertItemsCallback:(id)a3
{
  objc_setProperty_nonatomic_copy(self, a2, a3, 2264);
}

- (CKBrowserDragManager)browserDragManager
{
  return self->_browserDragManager;
}

- (void)setBrowserDragManager:(id)a3
{
  objc_storeStrong((id *)&self->_browserDragManager, a3);
}

- (BOOL)isAnimatingStickerReaction
{
  return self->_animatingStickerReaction;
}

- (void)setAnimatingStickerReaction:(BOOL)a3
{
  self->_animatingStickerReaction = a3;
}

- (CKNavBarUnifiedCallButton)wolfFaceTimeButton
{
  return self->_wolfFaceTimeButton;
}

- (void)setWolfFaceTimeButton:(id)a3
{
  objc_storeStrong((id *)&self->_wolfFaceTimeButton, a3);
}

- (_TtC7ChatKit25CKSuggestedActionsHandler)suggestedActionsHandler
{
  return self->_suggestedActionsHandler;
}

- (void)setSuggestedActionsHandler:(id)a3
{
  objc_storeStrong((id *)&self->_suggestedActionsHandler, a3);
}

- (BOOL)isWebViewVisible
{
  return self->_isWebViewVisible;
}

- (void)setIsWebViewVisible:(BOOL)a3
{
  self->_isWebViewVisible = a3;
}

- (NSNumber)frozenEntryViewHeightDuringDismissAnimation
{
  return self->_frozenEntryViewHeightDuringDismissAnimation;
}

- (void)setFrozenEntryViewHeightDuringDismissAnimation:(id)a3
{
  objc_storeStrong((id *)&self->_frozenEntryViewHeightDuringDismissAnimation, a3);
}

- (NSMutableDictionary)fileURLKeyToGuidMapping
{
  return self->_fileURLKeyToGuidMapping;
}

- (void)setFileURLKeyToGuidMapping:(id)a3
{
  objc_storeStrong((id *)&self->_fileURLKeyToGuidMapping, a3);
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_fileURLKeyToGuidMapping, 0);
  objc_storeStrong((id *)&self->_frozenEntryViewHeightDuringDismissAnimation, 0);
  objc_storeStrong((id *)&self->_suggestedActionsHandler, 0);
  objc_storeStrong((id *)&self->_wolfFaceTimeButton, 0);
  objc_storeStrong((id *)&self->_browserDragManager, 0);
  objc_storeStrong(&self->_insertItemsCallback, 0);
  objc_storeStrong((id *)&self->_activeDropPreviews, 0);
  objc_storeStrong((id *)&self->_rotationLockUtility, 0);
  objc_storeStrong((id *)&self->_tipManager, 0);
  objc_destroyWeak((id *)&self->_photoGridDataSourceManager);
  objc_storeStrong((id *)&self->_photoGridClickyOrbChatItem, 0);
  objc_destroyWeak((id *)&self->_photoGridMomentShareChatItem);
  objc_storeStrong((id *)&self->_photoGridDisplayedChatItemGUID, 0);
  objc_storeStrong((id *)&self->_shareSheetHostBundleIdentifier, 0);
  objc_storeStrong((id *)&self->_originalComposition, 0);
  objc_storeStrong((id *)&self->_lastPopulatedMessageGuidFromMe, 0);
  objc_storeStrong((id *)&self->_businessMacToolbarController, 0);
  objc_storeStrong((id *)&self->_macRecipientsController, 0);
  objc_storeStrong((id *)&self->_groupPhotoUpdateBanner, 0);
  objc_storeStrong((id *)&self->_inlineReplyController, 0);
  objc_storeStrong((id *)&self->_messageEditingViewController, 0);
  objc_destroyWeak((id *)&self->_walletOrderImportViewController);
  objc_storeStrong((id *)&self->_navigationBarTitleController, 0);
  objc_destroyWeak((id *)&self->_pickerContainerAccessoryView);
  objc_storeStrong((id *)&self->_conversationContext, 0);
  objc_storeStrong((id *)&self->_transcriptSharingBannerSuggestion, 0);
  objc_storeStrong((id *)&self->_collaborationNoticeSuggestions, 0);
  objc_storeStrong((id *)&self->_keyboardSnapshotView, 0);
  objc_storeStrong((id *)&self->_lockoutView, 0);
  objc_storeStrong((id *)&self->_onboardingController, 0);
  objc_storeStrong((id *)&self->_currentNicknameUpdate, 0);
  objc_storeStrong((id *)&self->_contactPicker, 0);
  objc_storeStrong((id *)&self->_nicknameUpdateController, 0);
  objc_storeStrong((id *)&self->_nicknameBanner, 0);
  objc_storeStrong(&self->_deferredPresentationBlock, 0);
  objc_storeStrong((id *)&self->_funCameraViewController, 0);
  objc_destroyWeak(&self->_currentDragPreviewContainer);
  objc_storeStrong((id *)&self->_dropSession, 0);
  objc_storeStrong((id *)&self->_dragSession, 0);
  objc_storeStrong((id *)&self->_revealAnimationGroup, 0);
  objc_storeStrong((id *)&self->_stickerTranscriptScrollDisplayLink, 0);
  objc_storeStrong((id *)&self->_transcriptInlineNotificationUpdater, 0);
  objc_storeStrong((id *)&self->_notificationBannerView, 0);
  objc_storeStrong((id *)&self->_effectPickerWindow, 0);
  objc_storeStrong((id *)&self->_effectPickerViewController, 0);
  objc_storeStrong((id *)&self->_savedKeyboardInputMode, 0);
  objc_storeStrong((id *)&self->_tapGestureRecognizer, 0);
  objc_storeStrong((id *)&self->_previewRevealView, 0);
  objc_storeStrong((id *)&self->_previewInvisibleInkEffectController, 0);
  objc_destroyWeak((id *)&self->_previewSourceView);
  objc_storeStrong((id *)&self->_previewController, 0);
  objc_storeStrong((id *)&self->_qlPreviewDataSource, 0);
  objc_storeStrong((id *)&self->_collaborationPopoverController, 0);
  objc_storeStrong((id *)&self->_videoMessageRecordingViewController, 0);
  objc_storeStrong((id *)&self->_imagePickerController, 0);
  objc_storeStrong(&self->_deferredSendAnimationBlock, 0);
  objc_storeStrong((id *)&self->_throwAnimationManager, 0);
  objc_storeStrong((id *)&self->_extensionPayloadBeingSent, 0);
  objc_storeStrong((id *)&self->_videoTrimController, 0);
  objc_storeStrong((id *)&self->_audioTrimController, 0);
  objc_storeStrong((id *)&self->_compositionBeingTrimmed, 0);
  objc_storeStrong((id *)&self->_raiseGesture, 0);
  objc_storeStrong((id *)&self->_initialComposition, 0);
  objc_storeStrong((id *)&self->_appCardBackgroundViewConstraints, 0);
  objc_storeStrong((id *)&self->_appCardBackgroundViewController, 0);
  objc_storeStrong((id *)&self->_entryViewTrailingLayoutConstraint, 0);
  objc_storeStrong((id *)&self->_entryViewLeadingLayoutConstraint, 0);
  objc_storeStrong((id *)&self->_entryViewAppCardLayoutConstraint, 0);
  objc_storeStrong((id *)&self->_entryViewKeyboardSnapshotLayoutConstraint, 0);
  objc_storeStrong((id *)&self->_entryViewKeyboardLayoutConstraint, 0);
  objc_storeStrong((id *)&self->_entryViewFauxKeyboardLayoutConstraint, 0);
  objc_storeStrong((id *)&self->_macToolbarDetailsButtonProps, 0);
  objc_storeStrong((id *)&self->_macToolbarFaceTimeButtonProps, 0);
  objc_storeStrong((id *)&self->_recipientsVirtualToolbarItem, 0);
  objc_storeStrong((id *)&self->_detailsToolbarItem, 0);
  objc_storeStrong((id *)&self->_macFaceTimeJoinCallToolbarItem, 0);
  objc_storeStrong((id *)&self->_macFaceTimeJoinedCallToolbarItem, 0);
  objc_storeStrong((id *)&self->_macFaceTimeStartCallToolbarItem, 0);
  objc_storeStrong((id *)&self->_macFaceTimeButtonMenu, 0);
  objc_destroyWeak((id *)&self->_macToolbarController);
  objc_storeStrong(&self->_scrollBlock, 0);
  objc_storeStrong((id *)&self->_indexPathForFirstUnreadMessage, 0);
  objc_storeStrong((id *)&self->_catchUpButtonTopConstraint, 0);
  objc_storeStrong((id *)&self->_catchUpButtonManager, 0);
  objc_storeStrong((id *)&self->_catchUpButton, 0);
  objc_storeStrong((id *)&self->_firstUnreadMessageGUIDForTextEffects, 0);
  objc_storeStrong((id *)&self->_firstUnreadMessageGUID, 0);
  objc_storeStrong((id *)&self->_suggestionBannerView, 0);
  objc_storeStrong((id *)&self->_suggestionBannerTopConstraint, 0);
  objc_storeStrong((id *)&self->_standardSuggestionPresenter, 0);
  objc_storeStrong((id *)&self->_foundInSuggestionPresenter, 0);
  objc_storeStrong((id *)&self->_footerViewController, 0);
  objc_storeStrong((id *)&self->_navbarCanvasViewController, 0);
  objc_storeStrong((id *)&self->_typingUpdater, 0);
  objc_storeStrong((id *)&self->_autorotationUpdater, 0);
  objc_storeStrong((id *)&self->_keyboardCandidateBarBackgroundView, 0);
  objc_storeStrong((id *)&self->_entryViewContainerView, 0);
  objc_storeStrong((id *)&self->_entryViewController, 0);
  objc_storeStrong((id *)&self->_transcriptBottomContentOffsetAtSuspend, 0);
  objc_storeStrong((id *)&self->_commSafetyInterventionController, 0);
  objc_storeStrong((id *)&self->_mediaObjectToDownload, 0);
  objc_storeStrong((id *)&self->_detailsContactsManager, 0);
  objc_storeStrong((id *)&self->_timingCollectionSendGelato, 0);
  objc_storeStrong((id *)&self->_messageGUIDForTranscriptExtension, 0);
  objc_destroyWeak((id *)&self->_externalPluginControllerProvider);
  objc_storeStrong((id *)&self->_mentionsController, 0);
  objc_destroyWeak((id *)&self->_sendMenuDelegate);
  objc_storeStrong((id *)&self->_dropComposition, 0);
}

- (id)selectedChatItems
{
  void *v2;
  void *v3;

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "selectedChatItems");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (id)selectedChatItemsIncludingTapbackedChatItem
{
  void *v3;
  uint64_t v4;
  void *v5;
  CKChatController *v6;
  CKChatController *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  -[CKChatController selectedChatItems](self, "selectedChatItems");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v3, "count"))
  {
    -[CKChatController inlineReplyController](self, "inlineReplyController");
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)v4;
    if (v4)
      v6 = (CKChatController *)v4;
    else
      v6 = self;
    v7 = v6;

    -[CKChatController clickyOrbChatItem](v7, "clickyOrbChatItem");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      -[CKChatController clickyOrbChatItem](v7, "clickyOrbChatItem");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      v15[0] = v9;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 1);
      v10 = v3;
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      -[CKCoreChatController fullScreenBalloonViewController](v7, "fullScreenBalloonViewController");
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "chatItem");
      v11 = objc_claimAutoreleasedReturnValue();
      v10 = (void *)v11;
      if (v11)
      {
        v14 = v11;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v14, 1);
        v12 = objc_claimAutoreleasedReturnValue();

        v3 = (void *)v12;
      }
    }

  }
  return v3;
}

- (BOOL)hasSelectedChatItems
{
  void *v2;
  BOOL v3;

  -[CKChatController selectedChatItems](self, "selectedChatItems");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count") != 0;

  return v3;
}

- (BOOL)hasSelectedChatItemsIncludingAssociatedTapback
{
  void *v2;
  BOOL v3;

  -[CKChatController selectedChatItemsIncludingTapbackedChatItem](self, "selectedChatItemsIncludingTapbackedChatItem");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count") != 0;

  return v3;
}

- (id)selectedMessagePartItem
{
  uint64_t v3;
  void *v4;
  CKChatController *v5;
  CKChatController *v6;
  void *v7;
  void *v8;
  id v9;

  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v3)
    v5 = (CKChatController *)v3;
  else
    v5 = self;
  v6 = v5;

  -[CKChatController selectedChatItemsIncludingTapbackedChatItem](v6, "selectedChatItemsIncludingTapbackedChatItem");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v7, "count") == 1)
  {
    objc_msgSend(v7, "firstObject");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v9 = v8;
    else
      v9 = 0;

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (id)lastOutgoingMessagePartItem
{
  uint64_t v3;
  void *v4;
  CKChatController *v5;
  CKChatController *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v11[5];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v3)
    v5 = (CKChatController *)v3;
  else
    v5 = self;
  v6 = v5;

  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = __Block_byref_object_copy__17;
  v16 = __Block_byref_object_dispose__17;
  v17 = 0;
  -[CKCoreChatController collectionViewController](v6, "collectionViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "chatItems");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __66__CKChatController_ChatItemSelection__lastOutgoingMessagePartItem__block_invoke;
  v11[3] = &unk_1E274DF98;
  v11[4] = &v12;
  objc_msgSend(v8, "enumerateObjectsWithOptions:usingBlock:", 2, v11);

  v9 = (id)v13[5];
  _Block_object_dispose(&v12, 8);

  return v9;
}

void __66__CKChatController_ChatItemSelection__lastOutgoingMessagePartItem__block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  char isKindOfClass;
  void *v8;
  id v9;
  id v10;

  v10 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v8 = v10;
  if ((isKindOfClass & 1) != 0)
  {
    v9 = v10;
    if (objc_msgSend(v9, "itemIsFromMe") && (objc_msgSend(v9, "itemIsReplyContextPreview") & 1) == 0)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
      *a4 = 1;
    }

    v8 = v10;
  }

}

- (BOOL)allowDebugItems
{
  void *v2;
  char v3;
  void *v4;
  char v5;

  objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isInternalInstall");

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "BOOLForKey:", CFSTR("showTranscriptDebugButton"));

  return v3 & v5;
}

- (NSArray)internalBarButtonItems
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  if (!-[CKChatController allowDebugItems](self, "allowDebugItems"))
    return (NSArray *)MEMORY[0x1E0C9AA60];
  objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("wrench.and.screwdriver.fill"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _makeInternalMenu](self, "_makeInternalMenu");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA380]), "initWithImage:menu:", v3, v4);
  objc_msgSend(v5, "setTag:", 100);
  objc_msgSend(MEMORY[0x1E0CEA380], "flexibleSpaceItem");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = v5;
  v9[1] = v6;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return (NSArray *)v7;
}

- (id)_makeInternalMenu
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id location;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  location = 0;
  objc_initWeak(&location, self);
  v2 = (void *)MEMORY[0x1E0CEA2A8];
  v3 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __44__CKChatController_Debug___makeInternalMenu__block_invoke;
  v15[3] = &unk_1E274A4C0;
  objc_copyWeak(&v16, &location);
  objc_msgSend(v2, "actionWithTitle:image:identifier:handler:", CFSTR("Show GUID Summary"), 0, 0, v15);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CEA2A8];
  v10 = v3;
  v11 = 3221225472;
  v12 = __44__CKChatController_Debug___makeInternalMenu__block_invoke_2;
  v13 = &unk_1E274A4C0;
  objc_copyWeak(&v14, &location);
  objc_msgSend(v5, "actionWithTitle:image:identifier:handler:", CFSTR("Chat Item Summary"), 0, 0, &v10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v6;
  v18[1] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 2, v10, v11, v12, v13);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CEA740], "menuWithTitle:image:identifier:options:children:", CFSTR("[Internal]"), 0, 0, 1, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_destroyWeak(&v14);
  objc_destroyWeak(&v16);
  objc_destroyWeak(&location);
  return v8;
}

void __44__CKChatController_Debug___makeInternalMenu__block_invoke(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  id v3;
  id v4;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_debugSelectedGuidSummary");
  v4 = (id)objc_claimAutoreleasedReturnValue();

  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v3, "_presentAlertForDebugSummary:", v4);

}

void __44__CKChatController_Debug___makeInternalMenu__block_invoke_2(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  id v16;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "collectionViewController");
  v14 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v14, "selectedItems");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "chatItems");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectsAtIndexes:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __44__CKChatController_Debug___makeInternalMenu__block_invoke_3;
  v15[3] = &unk_1E274F378;
  v7 = v6;
  v16 = v7;
  objc_msgSend(v3, "enumerateIndexesUsingBlock:", v15);
  v8 = objc_loadWeakRetained(v1);
  objc_msgSend(v8, "view");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "window");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "windowScene");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "delegate");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v13 = (void *)objc_msgSend(v7, "copy");
    objc_msgSend(v12, "showInspectorViewForChatItems:parallelIndexes:", v5, v13);

  }
}

void __44__CKChatController_Debug___makeInternalMenu__block_invoke_3(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

}

- (void)_presentAlertForDebugSummary:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;

  v4 = a3;
  objc_msgSend(MEMORY[0x1E0CEA2E8], "alertControllerWithTitle:message:preferredStyle:", &stru_1E276D870, v4, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CEA2E0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __56__CKChatController_Debug___presentAlertForDebugSummary___block_invoke;
  v10[3] = &unk_1E274B0D8;
  v11 = v4;
  v7 = v4;
  objc_msgSend(v6, "actionWithTitle:style:handler:", CFSTR("Copy"), 0, v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CEA2E0], "actionWithTitle:style:handler:", CFSTR("Cancel"), 1, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addAction:", v8);
  objc_msgSend(v5, "addAction:", v9);
  -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v5, 1, 0);

}

void __56__CKChatController_Debug___presentAlertForDebugSummary___block_invoke(uint64_t a1)
{
  id v2;

  objc_msgSend(MEMORY[0x1E0CEA810], "generalPasteboard");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setString:", *(_QWORD *)(a1 + 32));

}

- (id)_debugSelectedGuidSummary
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "selectedItems");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "chatItems");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectsAtIndexes:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "count"))
  {
    v7 = 0;
    do
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", v7);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "IMChatItem");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "guid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "appendString:", v10);

      if (v7 < objc_msgSend(v5, "count") - 1)
        objc_msgSend(v6, "appendString:", CFSTR("\n\n"));

      ++v7;
    }
    while (v7 < objc_msgSend(v5, "count"));
  }
  v11 = (void *)objc_msgSend(v6, "copy");

  return v11;
}

- (id)_internalMenuForChatItem:(id)a3
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id *v41;
  id *v42;
  id *v43;
  void *v44;
  void *v45;
  _QWORD v46[4];
  id v47;
  _QWORD v48[4];
  id v49;
  _QWORD v50[4];
  id v51;
  id v52;
  _QWORD v53[4];
  id v54;
  id v55;
  id location;
  _QWORD v57[3];

  v57[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  location = 0;
  objc_initWeak(&location, self);
  v5 = objc_alloc(MEMORY[0x1E0D39930]);
  objc_msgSend(v4, "IMChatItem");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "guid");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v5, "initWithEncodedMessagePartGUID:", v7);
  objc_msgSend(v8, "messageGUID");
  v9 = objc_claimAutoreleasedReturnValue();

  v10 = (void *)MEMORY[0x1E0CEA2A8];
  CKFrameworkBundle();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("Message Details"), &stru_1E276D870, CFSTR("ChatKit"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("info.circle"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v53[0] = MEMORY[0x1E0C809B0];
  v53[1] = 3221225472;
  v53[2] = __52__CKChatController_Debug___internalMenuForChatItem___block_invoke;
  v53[3] = &unk_1E274B010;
  v41 = &v55;
  objc_copyWeak(&v55, &location);
  v14 = v4;
  v54 = v14;
  objc_msgSend(v10, "actionWithTitle:image:identifier:handler:", v12, v13, 0, v53);
  v44 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = (void *)MEMORY[0x1E0CEA2A8];
  objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("info.circle"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v50[0] = MEMORY[0x1E0C809B0];
  v50[1] = 3221225472;
  v50[2] = __52__CKChatController_Debug___internalMenuForChatItem___block_invoke_2;
  v50[3] = &unk_1E274B010;
  v43 = &v52;
  objc_copyWeak(&v52, &location);
  v17 = v14;
  v51 = v17;
  objc_msgSend(v15, "actionWithTitle:image:identifier:handler:", CFSTR("Chat Item Details"), v16, 0, v50);
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  v18 = (void *)v9;
  v19 = (void *)MEMORY[0x1E0CEA2A8];
  CKFrameworkBundle();
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("Copy GUID"), &stru_1E276D870, CFSTR("ChatKit"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("tag"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v48[0] = MEMORY[0x1E0C809B0];
  v48[1] = 3221225472;
  v48[2] = __52__CKChatController_Debug___internalMenuForChatItem___block_invoke_101;
  v48[3] = &unk_1E274B178;
  v23 = v18;
  v49 = v23;
  objc_msgSend(v19, "actionWithTitle:image:identifier:handler:", v21, v22, 0, v48);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  v25 = (void *)MEMORY[0x1E0CEA2A8];
  CKFrameworkBundle();
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "localizedStringForKey:value:table:", CFSTR("Copy Link"), &stru_1E276D870, CFSTR("ChatKit"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("link"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 3221225472;
  v46[2] = __52__CKChatController_Debug___internalMenuForChatItem___block_invoke_2_106;
  v46[3] = &unk_1E274B178;
  v29 = v23;
  v47 = v29;
  objc_msgSend(v25, "actionWithTitle:image:identifier:handler:", v27, v28, 0, v46);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  v31 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(v17, "message");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v25) = v32 == 0;

  if ((v25 & 1) == 0)
    objc_msgSend(v31, "addObject:", v44, &v55, &v52);
  objc_msgSend(v31, "addObject:", v45, v41);
  objc_msgSend(v31, "addObject:", v24);
  objc_msgSend(v31, "addObject:", v30);
  v33 = (void *)MEMORY[0x1E0CEA740];
  objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("apple.logo"));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = (void *)objc_msgSend(v31, "copy");
  objc_msgSend(v33, "menuWithTitle:image:identifier:options:children:", CFSTR("Internal"), v34, 0, 0, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  v37 = (void *)MEMORY[0x1E0CEA740];
  v57[0] = v36;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v57, 1);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "menuWithTitle:image:identifier:options:children:", &stru_1E276D870, 0, 0, 1, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();

  objc_destroyWeak(v43);
  objc_destroyWeak(v42);

  objc_destroyWeak(&location);
  return v39;
}

void __52__CKChatController_Debug___internalMenuForChatItem___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char isKindOfClass;
  void *v9;
  id v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "view");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "window");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "windowScene");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "delegate");
  v10 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "message");
  v6 = objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = (void *)v6;
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) != 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "message");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "showInspectorViewForMessage:", v9);

    }
  }

}

void __52__CKChatController_Debug___internalMenuForChatItem___block_invoke_2(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "collectionViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "chatItems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "indexOfObject:", *(_QWORD *)(a1 + 32));

  if (v6 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = &unk_1E2870540;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v8 = objc_loadWeakRetained(v2);
  objc_msgSend(v8, "view");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "window");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "windowScene");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "delegate");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v16[0] = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v16, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v15, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "showInspectorViewForChatItems:parallelIndexes:", v13, v14);

  }
}

void __52__CKChatController_Debug___internalMenuForChatItem___block_invoke_101(uint64_t a1)
{
  id v2;

  objc_msgSend(MEMORY[0x1E0CEA810], "generalPasteboard");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setString:", *(_QWORD *)(a1 + 32));

}

void __52__CKChatController_Debug___internalMenuForChatItem___block_invoke_2_106(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(MEMORY[0x1E0CEA810], "generalPasteboard");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("sms://open?message-guid=%@"), *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setURL:", v3);

}

- (void)effectPickerViewControllerClose:(id)a3 animated:(BOOL)a4
{
  -[CKChatController effectPickerViewControllerClose:keepingSideMountContainer:animated:](self, "effectPickerViewControllerClose:keepingSideMountContainer:animated:", a3, 0, a4);
}

- (void)effectPickerViewControllerClose:(id)a3 keepingSideMountContainer:(BOOL)a4 animated:(BOOL)a5
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD block[5];
  BOOL v18;
  _QWORD v19[5];

  v7 = a3;
  -[CKChatController effectPickerViewController](self, "effectPickerViewController");
  v8 = (id)objc_claimAutoreleasedReturnValue();

  if (v8 == v7)
  {
    -[CKChatController entryView](self, "entryView");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "composition");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "isAudioComposition");

    if ((v11 & 1) == 0)
    {
      -[CKChatController entryView](self, "entryView");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "contentView");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setHidden:", 0);

    }
    -[CKChatController effectPickerViewController](self, "effectPickerViewController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setDelegate:", 0);

    -[CKChatController setEffectPickerViewController:](self, "setEffectPickerViewController:", 0);
    -[CKChatController setEffectPickerIsPresented:](self, "setEffectPickerIsPresented:", 0);
    if (CKIsRunningInMacCatalyst())
    {
      objc_msgSend(v7, "effectPreviewOverlayView");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "removeFromSuperview");

      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = __107__CKChatController_ImpactEffectPicker__effectPickerViewControllerClose_keepingSideMountContainer_animated___block_invoke;
      v19[3] = &unk_1E274A208;
      v19[4] = self;
      objc_msgSend(v7, "dismissViewControllerAnimated:completion:", 0, v19);
      objc_msgSend(MEMORY[0x1E0CEA6C8], "activeKeyboard");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "setTypingEnabled:", 1);

    }
    else
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __107__CKChatController_ImpactEffectPicker__effectPickerViewControllerClose_keepingSideMountContainer_animated___block_invoke_2;
      block[3] = &unk_1E274CA88;
      v18 = a5;
      block[4] = self;
      dispatch_async(MEMORY[0x1E0C80D38], block);
    }
  }

}

uint64_t __107__CKChatController_ImpactEffectPicker__effectPickerViewControllerClose_keepingSideMountContainer_animated___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "refreshMacToolbar");
}

uint64_t __107__CKChatController_ImpactEffectPicker__effectPickerViewControllerClose_keepingSideMountContainer_animated___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v5[4];
  id v6;
  _QWORD v7[5];
  id location;

  if (*(_BYTE *)(a1 + 40))
  {
    location = 0;
    objc_initWeak(&location, *(id *)(a1 + 32));
    v2 = (void *)MEMORY[0x1E0CEABB0];
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __107__CKChatController_ImpactEffectPicker__effectPickerViewControllerClose_keepingSideMountContainer_animated___block_invoke_3;
    v7[3] = &unk_1E274A208;
    v7[4] = *(_QWORD *)(a1 + 32);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __107__CKChatController_ImpactEffectPicker__effectPickerViewControllerClose_keepingSideMountContainer_animated___block_invoke_4;
    v5[3] = &unk_1E274DCB8;
    objc_copyWeak(&v6, &location);
    objc_msgSend(v2, "animateWithDuration:delay:options:animations:completion:", 32, v7, v5, 0.2, 0.0);
    objc_destroyWeak(&v6);
    objc_destroyWeak(&location);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_resetEffectPickerViewController");
  }
  objc_msgSend(MEMORY[0x1E0CEA6C8], "activeKeyboard");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setTypingEnabled:", 1);

  return objc_msgSend(*(id *)(a1 + 32), "requestDismissKeyboardSnapshotForReason:", 4);
}

void __107__CKChatController_ImpactEffectPicker__effectPickerViewControllerClose_keepingSideMountContainer_animated___block_invoke_3(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "effectPickerWindow");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setAlpha:", 0.0);

}

void __107__CKChatController_ImpactEffectPicker__effectPickerViewControllerClose_keepingSideMountContainer_animated___block_invoke_4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_resetEffectPickerViewController");

}

- (void)_resetEffectPickerViewController
{
  void *v3;
  void *v4;
  void *v5;

  -[CKChatController effectPickerWindow](self, "effectPickerWindow");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAlpha:", 0.0);

  -[CKChatController effectPickerWindow](self, "effectPickerWindow");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setRootViewController:", 0);

  -[CKChatController effectPickerWindow](self, "effectPickerWindow");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setHidden:", 1);

  -[CKChatController setEffectPickerWindow:](self, "setEffectPickerWindow:", 0);
}

- (void)effectPickerViewController:(id)a3 effectWithIdentifierSelected:(id)a4
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  CKChatController *v12;

  v5 = a4;
  -[CKChatController entryView](self, "entryView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "contentView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setHidden:", 0);

  objc_msgSend(v6, "audioMessageAppDelegate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "audioMessageDidSendMessage");

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __96__CKChatController_ImpactEffectPicker__effectPickerViewController_effectWithIdentifierSelected___block_invoke;
  v10[3] = &unk_1E274D688;
  v11 = v5;
  v12 = self;
  v9 = v5;
  objc_msgSend(v6, "compositionWithAcceptedAutocorrection:", v10);

}

void __96__CKChatController_ImpactEffectPicker__effectPickerViewController_effectWithIdentifierSelected___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  objc_msgSend(a2, "compositionWithExpressiveSendStyleID:", *(_QWORD *)(a1 + 32));
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "selectAccountAndSendComposition:completion:", v4, &__block_literal_global_62);
  objc_msgSend(MEMORY[0x1E0CEA6C8], "activeKeyboard");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setTypingEnabled:", 1);

}

- (id)effectsPresenterViewController
{
  CKChatController *v3;
  NSObject *p_super;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (-[CKChatController isMainTranscript](self, "isMainTranscript"))
  {
    v3 = self;
  }
  else
  {
    if (!-[CKChatController isInlineReply](self, "isInlineReply"))
    {
      IMLogHandleForCategory();
      p_super = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
        -[CKChatController(ImpactEffectPicker) effectsPresenterViewController].cold.2(p_super, v8, v9, v10, v11, v12, v13, v14);
      goto LABEL_14;
    }
    -[CKChatController parentViewController](self, "parentViewController");
    v3 = (CKChatController *)objc_claimAutoreleasedReturnValue();
  }
  p_super = &v3->super.super.super.super.super.super;
  if (!-[CKChatController isChatControllerShowingStandaloneWindow:](self, "isChatControllerShowingStandaloneWindow:", v3))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[NSObject delegate](p_super, "delegate");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_15;
    }
    IMLogHandleForCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      -[CKChatController(ImpactEffectPicker) effectsPresenterViewController].cold.1(v15, v16, v17, v18, v19, v20, v21, v22);

LABEL_14:
    v7 = 0;
    goto LABEL_15;
  }
  -[NSObject delegate](p_super, "delegate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "window");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "rootViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_15:
  return v7;
}

- (BOOL)isMainTranscript
{
  void *v2;
  char isKindOfClass;

  -[CKCoreChatController delegate](self, "delegate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

- (BOOL)isInlineReply
{
  void *v3;
  char isKindOfClass;
  void *v5;

  -[CKCoreChatController delegate](self, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    isKindOfClass = 0;
  }
  else
  {
    -[CKChatController parentViewController](self, "parentViewController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

  }
  return isKindOfClass & 1;
}

- (BOOL)isChatControllerShowingStandaloneWindow:(id)a3
{
  void *v3;
  char isKindOfClass;

  objc_msgSend(a3, "delegate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

- (id)_recipientHandle
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  -[CKCoreChatController conversation](self, "conversation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2 && (objc_msgSend(v2, "recipient"), (v4 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v5 = v4;
    objc_msgSend(v4, "defaultIMHandle");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)toggleUnreadState:(id)a3
{
  CKChatController *v4;
  id v5;

  v5 = a3;
  v4 = self;
  if (v4 && (objc_opt_respondsToSelector() & 1) != 0)
    -[CKChatController keyCommandToggleUnreadState](v4, "keyCommandToggleUnreadState");

}

- (BOOL)shouldQuickLookSelectedChatItem
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  BOOL v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  -[CKChatController selectedChatItems](self, "selectedChatItems");
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        if (-[CKChatController shouldQuickLookChatItem:](self, "shouldQuickLookChatItem:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i), (_QWORD)v10))
        {
          v8 = 1;
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        continue;
      break;
    }
  }
  v8 = 0;
LABEL_11:

  return v8;
}

- (BOOL)shouldPageSelectedChatItem
{
  void *v2;
  void *v3;
  char isKindOfClass;

  -[CKChatController selectedChatItems](self, "selectedChatItems");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "count") == 1)
  {
    objc_msgSend(v2, "firstObject");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

  }
  else
  {
    isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

- (BOOL)shouldViewDetailsForSelectedChatItem
{
  void *v2;
  void *v3;
  char isKindOfClass;

  -[CKChatController selectedChatItems](self, "selectedChatItems");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "count") == 1)
  {
    objc_msgSend(v2, "firstObject");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

  }
  else
  {
    isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

- (BOOL)shouldQuickLookChatItem:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  BOOL v6;

  v3 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      goto LABEL_7;
LABEL_9:
    v6 = 0;
    goto LABEL_10;
  }
  objc_msgSend(v3, "mediaObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (!v4 || !objc_msgSend(v4, "shouldBeQuickLooked") || (objc_msgSend(v5, "shouldShowViewer") & 1) == 0)
  {

    goto LABEL_9;
  }

LABEL_7:
  v6 = 1;
LABEL_10:

  return v6;
}

- (void)quickLookSelectedChatItem
{
  CKChatController *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  CKChatController *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v2 = self;
  v28 = *MEMORY[0x1E0C80C00];
  -[CKChatController selectedChatItems](self, "selectedChatItems");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v24;
    v7 = *MEMORY[0x1E0D387C8];
    v8 = 0x1E0D39000uLL;
    v22 = v2;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v24 != v6)
          objc_enumerationMutation(v3);
        v10 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        if (-[CKChatController shouldQuickLookChatItem:](v2, "shouldQuickLookChatItem:", v10))
        {
          objc_msgSend(v10, "mediaObject");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "transfer");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v12, "isRestoring"))
          {
            objc_msgSend(v11, "fileURL");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "path");
            v14 = v5;
            v15 = v6;
            v16 = v7;
            v17 = v3;
            v18 = v8;
            v19 = (void *)objc_claimAutoreleasedReturnValue();

            +[CKSyncController sharedInstance](CKSyncController, "sharedInstance");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "prioritizeAttachmentAtPath:", v19);

            v8 = v18;
            v3 = v17;
            v7 = v16;
            v6 = v15;
            v5 = v14;
            v2 = v22;
          }
          -[CKChatController showViewerForMediaObject:](v2, "showViewerForMediaObject:", v11);
          objc_msgSend(*(id *)(v8 + 2392), "sharedInstance");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "trackEvent:", v7);

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v5);
  }

}

- (void)scrollTranscriptPageUp
{
  -[CKChatController scrollTranscriptPageUpDirection:toBounds:](self, "scrollTranscriptPageUpDirection:toBounds:", 1, 0);
}

- (void)scrollTranscriptPageDown
{
  -[CKChatController scrollTranscriptPageUpDirection:toBounds:](self, "scrollTranscriptPageUpDirection:toBounds:", 0, 0);
}

- (void)scrollTranscriptEnd
{
  -[CKChatController scrollTranscriptPageUpDirection:toBounds:](self, "scrollTranscriptPageUpDirection:toBounds:", 0, 1);
}

- (void)scrollTranscriptPageUpDirection:(BOOL)a3 toBounds:(BOOL)a4
{
  _BOOL4 v4;
  _BOOL4 v5;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  id v23;

  v4 = a4;
  v5 = a3;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "collectionView");
  v23 = (id)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v23, "_isAnimatingScroll") & 1) != 0)
    goto LABEL_20;
  v8 = 1;
  if (v4 && !v5)
  {
    -[CKChatController entryView](self, "entryView", 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "sendLaterPluginInfo");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
      v8 = 6;
    else
      v8 = 0;
  }
  objc_msgSend(v23, "setTranscriptScrollIntent:", v8);
  objc_msgSend(v23, "bounds");
  v12 = v11;
  objc_msgSend(v23, "contentInset");
  v15 = v12 - (v13 + v14);
  objc_msgSend(v23, "__ck_bottomOffset");
  v17 = v16;
  if (v5)
  {
    v18 = 0.0;
    if (v4)
      goto LABEL_13;
    objc_msgSend(v23, "contentOffset");
    v18 = fmax(v19 - v15, 0.0);
  }
  else
  {
    v18 = v16;
    if (!v4)
    {
      objc_msgSend(v23, "contentOffset");
      v18 = fmin(v17, v15 + v20);
    }
  }
  if (v18 >= 20.0)
  {
    objc_msgSend(v23, "setContentOffset:animated:", 1, 0.0, v18);
    goto LABEL_15;
  }
LABEL_13:
  objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForItem:inSection:", 0, 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "scrollToItemAtIndexPath:atScrollPosition:animated:", v21, 1, 1);

LABEL_15:
  if (v18 <= 0.0 || v18 >= v17)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v22, "loadMessagesIfNeededSkipValidation");

  }
LABEL_20:

}

- (void)validateCommand:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  objc_super v11;

  v4 = a3;
  if ((char *)objc_msgSend(v4, "action") == sel_keyCommandApplyTextStyle_)
  {
    -[CKChatController entryView](self, "entryView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "contentView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "canApplyTextStyleFromKeyCommand");
  }
  else
  {
    if ((char *)objc_msgSend(v4, "action") != sel_keyCommandApplyTextEffect_)
    {
      v11.receiver = self;
      v11.super_class = (Class)CKChatController;
      -[CKChatController validateCommand:](&v11, sel_validateCommand_, v4);
      goto LABEL_10;
    }
    -[CKChatController entryView](self, "entryView");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "contentView");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "canApplyTextEffectFromKeyCommand");
  }
  v8 = v7;

  v9 = objc_msgSend(v4, "attributes");
  if (v8)
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
  else
    v10 = v9 | 1;
  objc_msgSend(v4, "setAttributes:", v10);
LABEL_10:

}

- (void)keyCommandApplyTextEffect:(id)a3
{
  char isKindOfClass;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v5 = v11;
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(v11, "propertyList");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v7 = objc_msgSend(v6, "integerValue");
      -[CKChatController messageEditingViewController](self, "messageEditingViewController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (v8)
      {
        -[CKChatController messageEditingViewController](self, "messageEditingViewController");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "modifySelectedTextByTogglingTextEffectType:", v7);
      }
      else
      {
        -[CKChatController entryView](self, "entryView");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "contentView");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "applyTextEffect:", v7);

      }
    }

    v5 = v11;
  }

}

- (void)keyCommandApplyTextStyle:(id)a3
{
  char isKindOfClass;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v5 = v11;
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(v11, "propertyList");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v7 = objc_msgSend(v6, "unsignedIntegerValue");
      -[CKChatController messageEditingViewController](self, "messageEditingViewController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (v8)
      {
        -[CKChatController messageEditingViewController](self, "messageEditingViewController");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "modifySelectedTextByTogglingTextStyle:", v7);
      }
      else
      {
        -[CKChatController entryView](self, "entryView");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "contentView");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "applyTextStyle:", v7);

      }
    }

    v5 = v11;
  }

}

- (void)askToShareScreenFromBuddyMenu:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  -[CKCoreChatController conversation](self, "conversation", a3);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    -[CKChatController detailsContactsManager](self, "detailsContactsManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "recipient");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "inviteEntityToShareTheirScreen:", v5);

  }
}

- (void)inviteToShareScreenFromBuddyMenu:(id)a3
{
  void *v4;
  void *v5;
  id v6;

  -[CKCoreChatController conversation](self, "conversation", a3);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    -[CKChatController detailsContactsManager](self, "detailsContactsManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "recipient");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "shareMyScreenWithEntity:", v5);

  }
}

- (void)spacePressed:(id)a3
{
  id v4;
  _QWORD v5[5];

  -[CKChatController selectedChatItems](self, "selectedChatItems", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __42__CKChatController_MenuBar__spacePressed___block_invoke;
  v5[3] = &unk_1E27500C0;
  v5[4] = self;
  objc_msgSend(v4, "enumerateObjectsWithOptions:usingBlock:", 2, v5);

}

void __42__CKChatController_MenuBar__spacePressed___block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char isKindOfClass;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "balloonViewForChatItem:", v15);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v15 || !v7)
      goto LABEL_11;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_msgSend(v7, "pausePlayback");
    v8 = *(void **)(a1 + 32);
    objc_msgSend(v8, "collectionViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "transcriptCollectionViewController:balloonView:tappedForChatItem:", v9, v7, v15);
    goto LABEL_10;
  }
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v11 = v15;
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "balloonViewForChatItem:", v15);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_11:
      *a4 = 1;

      v11 = v15;
      goto LABEL_12;
    }
    objc_msgSend(v7, "currentAssetReference");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = *(void **)(a1 + 32);
    objc_msgSend(v13, "collectionViewController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "transcriptCollectionViewController:didTapPhotoStackForChatItem:assetReference:", v14, v15, v9);

LABEL_10:
    goto LABEL_11;
  }
LABEL_12:

}

- (void)keyCommandReplyAlternate:(id)a3
{
  -[CKChatController keyCommandReply:withModifier:](self, "keyCommandReply:withModifier:", a3, 1);
}

- (void)keyCommandReply:(id)a3
{
  -[CKChatController keyCommandReply:withModifier:](self, "keyCommandReply:withModifier:", a3, 0);
}

- (id)_chatItemForReplyingToChatItem:(id)a3 explicitlySelected:(BOOL)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;

  v4 = a4;
  v6 = a3;
  objc_opt_class();
  v7 = v6;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v7 = v6;
    if (v4)
    {
      -[CKChatController currentTopChatItemForAggregateChatItem:](self, "currentTopChatItemForAggregateChatItem:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }

  return v7;
}

- (void)keyCommandReply:(id)a3 withModifier:(BOOL)a4
{
  void (**v6)(_QWORD);
  void *v7;
  void *v8;
  _QWORD v9[5];
  BOOL v10;

  if (!-[CKChatController isShowingOscarChat](self, "isShowingOscarChat", a3))
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = __58__CKChatController_MenuBar__keyCommandReply_withModifier___block_invoke;
    v9[3] = &unk_1E274CA88;
    v10 = a4;
    v9[4] = self;
    v6 = (void (**)(_QWORD))_Block_copy(v9);
    -[CKChatController inlineReplyController](self, "inlineReplyController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      -[CKChatController inlineReplyController](self, "inlineReplyController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "dismissController");

    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        -[CKChatController dismissController](self, "dismissController");
      }
      else if (-[CKChatController isFullScreenBalloonViewOnScreen](self, "isFullScreenBalloonViewOnScreen"))
      {
        -[CKChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:](self, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:", 1, 0, v6);
      }
      else
      {
        v6[2](v6);
      }
    }

  }
}

void __58__CKChatController_MenuBar__keyCommandReply_withModifier___block_invoke(uint64_t a1)
{
  int v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  id v10;
  uint8_t buf[8];
  _QWORD v12[6];
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v2 = CKIsRunningInMacCatalyst();
  if (*(_BYTE *)(a1 + 40)
    || (objc_msgSend(*(id *)(a1 + 32), "selectedChatItems"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v3, "count"),
        v3,
        v4 != 1))
  {
    v14 = 0;
    v15 = &v14;
    v16 = 0x3032000000;
    v17 = __Block_byref_object_copy__28;
    v18 = __Block_byref_object_dispose__28;
    v19 = 0;
    objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "chatItems");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __58__CKChatController_MenuBar__keyCommandReply_withModifier___block_invoke_72;
    v12[3] = &unk_1E27500E8;
    v13 = *(_BYTE *)(a1 + 40);
    v12[4] = *(_QWORD *)(a1 + 32);
    v12[5] = &v14;
    objc_msgSend(v8, "enumerateObjectsWithOptions:usingBlock:", 2, v12);

    if (v15[5])
    {
      objc_msgSend(*(id *)(a1 + 32), "showInlineReplyControllerForChatItem:presentKeyboard:");
    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, "CKChatController_MenuBar: Unable to identify a visible cell that's eligible for reply", buf, 2u);
      }

    }
    _Block_object_dispose(&v14, 8);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "selectedChatItems");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "firstObject");
    v10 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 32), "_chatItemForReplyingToChatItem:explicitlySelected:", v10, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "canInlineReply"))
      objc_msgSend(*(id *)(a1 + 32), "showInlineReplyControllerForChatItem:presentKeyboard:", v6, v2 == 0);

  }
}

void __58__CKChatController_MenuBar__keyCommandReply_withModifier___block_invoke_72(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  char isKindOfClass;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v13 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v7 = v13;
  if ((isKindOfClass & 1) != 0)
  {
    v8 = v13;
    v9 = v8;
    if (!*(_BYTE *)(a1 + 48))
    {
      if (!objc_msgSend(v8, "itemIsFromMe"))
        goto LABEL_8;
      if (!*(_BYTE *)(a1 + 48))
        goto LABEL_11;
    }
    if (!objc_msgSend(v9, "itemIsReply"))
    {
LABEL_11:

      v7 = v13;
      goto LABEL_12;
    }
LABEL_8:
    if (objc_msgSend(v9, "canInlineReply"))
    {
      objc_msgSend(*(id *)(a1 + 32), "_chatItemForReplyingToChatItem:explicitlySelected:", v9, 0);
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v12 = *(void **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = v10;

    }
    *a4 = 1;
    goto LABEL_11;
  }
LABEL_12:

}

- (void)keyCommandTapback:(id)a3
{
  id v4;
  uint64_t v5;
  void *v6;
  CKChatController *v7;
  CKChatController *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  _QWORD v21[5];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;

  v4 = a3;
  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  if (v5)
    v7 = (CKChatController *)v5;
  else
    v7 = self;
  v8 = v7;

  -[CKCoreChatController collectionViewController](v8, "collectionViewController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "collectionView");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[CKChatController isFullScreenBalloonViewOnScreen](v8, "isFullScreenBalloonViewOnScreen"))
  {
    -[CKChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:](v8, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:", 1, 0, 0);
  }
  else
  {
    if (!CKIsRunningInMacCatalyst()
      && (-[CKChatController clickyOrbChatItem](v8, "clickyOrbChatItem"),
          (v18 = objc_claimAutoreleasedReturnValue()) != 0)
      && (v19 = (void *)v18,
          objc_msgSend(v10, "contextMenuInteraction"),
          v20 = (void *)objc_claimAutoreleasedReturnValue(),
          v20,
          v19,
          v20))
    {
      objc_msgSend(v10, "contextMenuInteraction");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "dismissMenu");
    }
    else
    {
      -[CKChatController selectedChatItems](self, "selectedChatItems");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v11, "count") == 1)
      {
        objc_msgSend(v11, "firstObject");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v12, "itemIsReplyContextPreview") & 1) == 0
          && (objc_msgSend(v12, "isEditedMessageHistory") & 1) == 0)
        {
          objc_msgSend(v9, "selectedItems");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "firstIndex");

          objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForItem:inSection:", v14, 0);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          -[CKChatController showFullScreenAcknowledgmentPickerIfNeededForBalloonAtIndexPath:](v8, "showFullScreenAcknowledgmentPickerIfNeededForBalloonAtIndexPath:", v15);

        }
      }
      else
      {
        objc_msgSend(v9, "chatItems");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 0;
        v23 = &v22;
        v24 = 0x3032000000;
        v25 = __Block_byref_object_copy__28;
        v26 = __Block_byref_object_dispose__28;
        v27 = 0;
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3221225472;
        v21[2] = __47__CKChatController_MenuBar__keyCommandTapback___block_invoke;
        v21[3] = &unk_1E274DF98;
        v21[4] = &v22;
        objc_msgSend(v12, "enumerateObjectsWithOptions:usingBlock:", 2, v21);
        objc_msgSend(v9, "cellForChatItem:", v23[5]);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "indexPathForCell:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKChatController showFullScreenAcknowledgmentPickerIfNeededForBalloonAtIndexPath:](v8, "showFullScreenAcknowledgmentPickerIfNeededForBalloonAtIndexPath:", v17);

        _Block_object_dispose(&v22, 8);
      }

    }
  }

}

void __47__CKChatController_MenuBar__keyCommandTapback___block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  char isKindOfClass;
  void *v8;
  id v9;
  id v10;

  v10 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v8 = v10;
  if ((isKindOfClass & 1) != 0)
  {
    v9 = v10;
    if ((objc_msgSend(v9, "itemIsFromMe") & 1) == 0 && (objc_msgSend(v9, "itemIsReplyContextPreview") & 1) == 0)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
      *a4 = 1;
    }

    v8 = v10;
  }

}

- (void)_legacyKeyCommandSelectTapback:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint8_t v13[16];

  v4 = a3;
  -[CKCoreChatController fullScreenBalloonViewController](self, "fullScreenBalloonViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(v4, "input");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "intValue");

    v8 = v7 + 1999;
    if ((v8 & 0xFFFFFFFFFFFFFFF8) == 0x7D0)
    {
      objc_msgSend(v5, "chatItem");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "selectedType");

      if (v8 == v10)
        v8 = CKDeselectedAcknowledgmentTypeForAcknowledgmentType(v8);
      objc_msgSend(v5, "chatItem");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController fullScreenBalloonViewController:sendMessageAcknowledgment:forChatItem:](self, "fullScreenBalloonViewController:sendMessageAcknowledgment:forChatItem:", v5, v8, v11);

    }
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_18DFCD000, v12, OS_LOG_TYPE_INFO, "CKChatController_MenuBar: Attempted to select tapback without a fullScreenBalloonViewController", v13, 2u);
    }

  }
}

- (void)_configureEditMessageCommand:(id)a3
{
  void *v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;

  v26 = a3;
  -[CKChatController currentChatController](self, "currentChatController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "supportsMessageEditing");

  if ((v6 & 1) == 0)
  {
    v10 = objc_msgSend(v26, "attributes") | 1;
    goto LABEL_5;
  }
  objc_msgSend(v4, "messageEditingViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    CKFrameworkBundle();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("CANCEL_EDIT"), &stru_1E276D870, CFSTR("ChatKit"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setTitle:", v9);

    v10 = objc_msgSend(v26, "attributes") & 0xFFFFFFFFFFFFFFFELL;
LABEL_5:
    objc_msgSend(v26, "setAttributes:", v10);
    goto LABEL_6;
  }
  v11 = -[CKChatController hasSelectedChatItemsIncludingAssociatedTapback](self, "hasSelectedChatItemsIncludingAssociatedTapback");
  CKFrameworkBundle();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v11)
  {
    objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("EDIT_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setTitle:", v14);

    -[CKChatController selectedMessagePartItem](self, "selectedMessagePartItem");
  }
  else
  {
    objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("EDIT_LAST_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "setTitle:", v15);

    -[CKChatController lastOutgoingMessagePartItem](self, "lastOutgoingMessagePartItem");
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (v16
    && (objc_msgSend(v4, "conversation"),
        v17 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v17, "chat"),
        v18 = (void *)objc_claimAutoreleasedReturnValue(),
        v19 = objc_msgSend(v18, "supportsCapabilities:", 1),
        v18,
        v17,
        (v19 & 1) != 0))
  {
    v20 = objc_msgSend(v16, "canEditMessageText");
    v21 = objc_msgSend(v26, "attributes");
    v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
    v23 = v21 | 1;
    v24 = v26;
    if ((v20 & 1) != 0)
      v25 = v22;
    else
      v25 = v23;
  }
  else
  {
    v25 = objc_msgSend(v26, "attributes") | 1;
    v24 = v26;
  }
  objc_msgSend(v24, "setAttributes:", v25);

LABEL_6:
}

- (void)keyCommandEditMessage:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  id v8;
  id v9;
  void (**v10)(_QWORD);
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  void *v15;
  id v16;
  id v17;
  uint8_t buf[16];

  v4 = a3;
  -[CKChatController currentChatController](self, "currentChatController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "messageEditingViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "Edit Message Shortcut pressed. Dismissing message editing.", buf, 2u);
      }

    }
    objc_msgSend(v5, "messageEditingViewController");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "dismissAndRejectChanges");
  }
  else
  {
    -[CKChatController _chatItemToEdit](self, "_chatItemToEdit");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      v12 = MEMORY[0x1E0C809B0];
      v13 = 3221225472;
      v14 = __51__CKChatController_MenuBar__keyCommandEditMessage___block_invoke;
      v15 = &unk_1E274A108;
      v9 = v5;
      v16 = v9;
      v8 = v8;
      v17 = v8;
      v10 = (void (**)(_QWORD))_Block_copy(&v12);
      if (objc_msgSend(v9, "isFullScreenBalloonViewOnScreen", v12, v13, v14, v15))
        objc_msgSend(v9, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:", 1, 0, v10);
      else
        v10[2](v10);

    }
    else if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "Unable to identify an eligible item for editing. No op.", buf, 2u);
      }

    }
  }

}

uint64_t __51__CKChatController_MenuBar__keyCommandEditMessage___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  uint8_t v8[16];

  objc_msgSend(*(id *)(a1 + 32), "collectionView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "contextMenuInteraction");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "collectionView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "contextMenuInteraction");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "dismissMenu");

  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "Edit Message Shortcut pressed. Showing message editing.", v8, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "showMessageEditingViewControllerForChatItem:presentKeyboard:", *(_QWORD *)(a1 + 40), 1);
}

- (id)_chatItemToEdit
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  -[CKChatController selectedMessagePartItem](self, "selectedMessagePartItem");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    -[CKChatController lastOutgoingMessagePartItem](self, "lastOutgoingMessagePartItem");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6 && objc_msgSend(v6, "canEditMessageText"))
      v4 = v7;
    else
      v4 = 0;

    goto LABEL_9;
  }
  v4 = v3;
  if ((objc_msgSend(v3, "canEditMessageText") & 1) != 0)
  {
LABEL_9:
    v5 = v4;
    v4 = v5;
    goto LABEL_10;
  }
  v5 = 0;
LABEL_10:

  return v5;
}

- (id)currentChatController
{
  void *v3;
  void *v4;
  id v5;

  -[CKChatController inlineReplyController](self, "inlineReplyController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (!v3)
    v3 = self;
  v5 = v3;

  return v5;
}

- (void)keyCommandPrint:(id)a3
{
  id v3;

  -[CKCoreChatController collectionViewController](self, "collectionViewController", a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "performSelector:", sel_printTranscript);

}

- (void)keyCommandDeleteConversation:(id)a3
{
  void *v4;
  char v5;
  void *v6;
  id v7;

  v7 = a3;
  -[CKCoreChatController delegate](self, "delegate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_respondsToSelector();

  if ((v5 & 1) != 0)
  {
    -[CKCoreChatController delegate](self, "delegate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "keyCommandDeleteConversation:", v7);

  }
  else
  {
    -[CKChatController recoverableDeleteConversation](self, "recoverableDeleteConversation");
  }

}

- (void)_cancelDeletion:(id)a3
{
  if (a3)
    (*((void (**)(id, _QWORD))a3 + 2))(a3, 0);
}

- (void)keyCommandPage:(id)a3
{
  id v4;
  id v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v4 = a3;
  -[CKChatController selectedChatItems](self, "selectedChatItems");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __44__CKChatController_MenuBar__keyCommandPage___block_invoke;
  v7[3] = &unk_1E274D860;
  v7[4] = self;
  v8 = v4;
  v5 = v4;
  objc_msgSend(v6, "enumerateObjectsWithOptions:usingBlock:", 2, v7);

}

void __44__CKChatController_MenuBar__keyCommandPage___block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  void *v8;
  id *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  int v14;
  NSObject *v15;

  v6 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "balloonViewForChatItem:", v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v10 = *(void **)(a1 + 40);
      v9 = (id *)(a1 + 40);
      objc_msgSend(v10, "input");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0CEB7C8]);

      if (v12)
      {
        objc_msgSend(v8, "pageRightAnimated:", 1);
      }
      else
      {
        objc_msgSend(*v9, "input");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "isEqualToString:", *MEMORY[0x1E0CEB7B0]);

        if (v14)
        {
          objc_msgSend(v8, "pageLeftAnimated:", 1);
        }
        else
        {
          IMLogHandleForCategory();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            __44__CKChatController_MenuBar__keyCommandPage___block_invoke_cold_1(v9, v15);

        }
      }
    }
    *a4 = 1;

  }
}

- (void)keyCommandShowDetails:(id)a3
{
  id v4;
  _QWORD v5[5];

  -[CKChatController selectedChatItems](self, "selectedChatItems", a3);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __51__CKChatController_MenuBar__keyCommandShowDetails___block_invoke;
  v5[3] = &unk_1E27500C0;
  v5[4] = self;
  objc_msgSend(v4, "enumerateObjectsWithOptions:usingBlock:", 2, v5);

}

void __51__CKChatController_MenuBar__keyCommandShowDetails___block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "balloonViewForChatItem:", v11);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v7, "currentAssetReference");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(void **)(a1 + 32);
      objc_msgSend(v9, "collectionViewController");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "transcriptCollectionViewController:didTapPhotoStackButtonForChatItem:assetReference:", v10, v11, v8);

    }
    *a4 = 1;

  }
}

- (void)escButtonPressed:(id)a3
{
  uint64_t v4;
  void *v5;
  CKChatController *v6;
  void *v7;
  void *v8;
  CKChatController *v9;

  -[CKChatController inlineReplyController](self, "inlineReplyController", a3);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)v4;
  if (v4)
    v6 = (CKChatController *)v4;
  else
    v6 = self;
  v9 = v6;

  if (-[CKChatController isFullScreenBalloonViewOnScreen](v9, "isFullScreenBalloonViewOnScreen"))
  {
    -[CKChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:](v9, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:", 1, 0, 0);
  }
  else
  {
    -[CKChatController messageEditingViewController](v9, "messageEditingViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      -[CKChatController messageEditingViewController](v9, "messageEditingViewController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "dismissAndRejectChanges");

    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        -[CKChatController dismissController](v9, "dismissController");
    }
  }

}

- (void)delete:(id)a3
{
  id v4;
  id v5;

  v4 = a3;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "deleteSelectedChatItems:", v4);

}

- (void)copy:(id)a3
{
  id v4;
  NSObject *v5;
  void *v6;
  uint8_t v7[16];

  v4 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "Copying selected transcript balloons to pasteboard", v7, 2u);
    }

  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "copySelectedChatItemsToPasteboard");

}

- (void)purgeAttachmentsForChat:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;

  -[CKCoreChatController chat](self, "chat", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "guid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  +[CKAlertController alertControllerWithTitle:message:preferredStyle:](CKAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Purge attachments for this chat?"), CFSTR("This will delete attachment files on disk but you can re-download them. Be sure to imtool kim after running this."), 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  CKFrameworkBundle();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1E276D870, CFSTR("ChatKit"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __53__CKChatController_MenuBar__purgeAttachmentsForChat___block_invoke;
  v14[3] = &unk_1E274B0D8;
  v15 = v5;
  v9 = v5;
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v8, 0, v14);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addAction:", v10);

  CKFrameworkBundle();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("Cancel"), &stru_1E276D870, CFSTR("ChatKit"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v12, 0, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addAction:", v13);

  objc_msgSend(v6, "presentFromViewController:animated:completion:", self, 1, 0);
}

void __53__CKChatController_MenuBar__purgeAttachmentsForChat___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v7 = 138412290;
      v8 = v5;
      _os_log_impl(&dword_18DFCD000, v4, OS_LOG_TYPE_INFO, "Purging attachments for chatGUID: %@", (uint8_t *)&v7, 0xCu);
    }

  }
  objc_msgSend(MEMORY[0x1E0D357F0], "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "purgeAttachmentsForChatGUID:", *(_QWORD *)(a1 + 32));

}

- (void)showMessageHistoryViewController
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  CKMessageHistoryViewController *v13;

  v13 = objc_alloc_init(CKMessageHistoryViewController);
  -[CKMessageHistoryViewController setMessageHistoryDelegate:](v13, "setMessageHistoryDelegate:", self);
  -[CKCoreChatController conversation](self, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKMessageHistoryViewController setMessageHistoryDataSource:](v13, "setMessageHistoryDataSource:", v3);
  objc_msgSend(MEMORY[0x1E0CEA508], "currentDevice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "userInterfaceIdiom");

  if (v5 == 1)
  {
    -[CKMessageHistoryViewController setModalPresentationStyle:](v13, "setModalPresentationStyle:", 7);
    -[CKChatController navigationController](self, "navigationController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "navigationBar");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKMessageHistoryViewController presentationController](v13, "presentationController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setSourceView:", v7);

    -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v13, 1, 0);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CEA2E8], "alertControllerWithTitle:message:preferredStyle:", 0, 0, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_setSeparatedHeaderContentViewController:", v13);
    v9 = (void *)MEMORY[0x1E0CEA2E0];
    CKFrameworkBundle();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("CANCEL"), &stru_1E276D870, CFSTR("ChatKit"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "actionWithTitle:style:handler:", v11, 1, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "addAction:", v12);
    -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v7, 1, 0);

  }
}

- (void)messageHistoryViewController:(id)a3 didSelectDate:(id)a4 withMessages:(id)a5
{
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v6 = a5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  v8 = v6;
  if (v7)
  {
    v9 = v7;
    v10 = *(_QWORD *)v17;
LABEL_3:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v17 != v10)
        objc_enumerationMutation(v6);
      v12 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v11);
      if (objc_msgSend(v12, "messagePartCount", (_QWORD)v16) > 0)
        break;
      if (v9 == ++v11)
      {
        v9 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        if (v9)
          goto LABEL_3;
        v8 = v6;
        goto LABEL_12;
      }
    }
    v8 = v12;

    if (!v8)
      goto LABEL_13;
    objc_msgSend(v8, "guid");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKCoreChatController conversation](self, "conversation");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (id)objc_msgSend(v14, "ensureMessageWithGUIDIsLoaded:", v13);
    -[CKChatController scrollToMessageGUID:partIndex:highlight:scrollPosition:](self, "scrollToMessageGUID:partIndex:highlight:scrollPosition:", v13, 0x7FFFFFFFFFFFFFFFLL, 1, 1);

  }
LABEL_12:

LABEL_13:
}

- (id)dateOfNewestVisibleMessageForMessageHistoryViewController:(id)a3
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  __objc2_class **v11;
  uint64_t i;
  void *v13;
  unint64_t v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  __objc2_class **v21;
  id v22;
  id v23;
  void *v25;
  void *v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v27 = a3;
  -[CKChatController collectionView](self, "collectionView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "chatItems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = v4;
  objc_msgSend(v4, "indexPathsForVisibleItems");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    v10 = *(_QWORD *)v29;
    v11 = off_1E2733000;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v29 != v10)
          objc_enumerationMutation(v6);
        v13 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
        if (!objc_msgSend(v13, "section"))
        {
          v14 = objc_msgSend(v13, "item");
          if (v14 < objc_msgSend(v5, "count"))
          {
            objc_msgSend(v5, "objectAtIndex:", v14);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v16 = v15;
              objc_msgSend(v16, "time");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v18 = v17;
              if (v17 && (!v9 || objc_msgSend(v17, "compare:", v9) == 1))
              {
                v19 = v18;
                v20 = v9;
                v21 = v11;
                v22 = v19;

                v23 = v22;
                v11 = v21;
                v9 = v23;
              }

            }
          }
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    }
    while (v8);
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

- (void)sendAnimationManagerWillStartAnimation:(id)a3 context:(id)a4
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  void (**v11)(_QWORD);
  void *v12;
  BOOL v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  _QWORD v27[4];
  id v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  _QWORD v32[5];
  _QWORD aBlock[4];
  id v34;
  CKChatController *v35;
  uint64_t v36;
  _QWORD v37[6];
  CGRect v38;

  v5 = a4;
  v6 = MEMORY[0x1E0C809B0];
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = __82__CKChatController_SendAnimation__sendAnimationManagerWillStartAnimation_context___block_invoke;
  v37[3] = &unk_1E274A208;
  v37[4] = self;
  objc_msgSend(MEMORY[0x1E0CEABB0], "performWithoutAnimation:", v37);
  -[CKChatController entryView](self, "entryView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController collectionView](self, "collectionView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "placeholderHeight");
  aBlock[0] = v6;
  aBlock[1] = 3221225472;
  aBlock[2] = __82__CKChatController_SendAnimation__sendAnimationManagerWillStartAnimation_context___block_invoke_2;
  aBlock[3] = &unk_1E274A420;
  v36 = v9;
  v10 = v7;
  v34 = v10;
  v35 = self;
  v11 = (void (**)(_QWORD))_Block_copy(aBlock);
  if (-[CKChatController _shouldHideNavigationBarForSendAnimationContext:](self, "_shouldHideNavigationBarForSendAnimationContext:", v5))
  {
    v32[0] = v6;
    v32[1] = 3221225472;
    v32[2] = __82__CKChatController_SendAnimation__sendAnimationManagerWillStartAnimation_context___block_invoke_3;
    v32[3] = &unk_1E274A208;
    v32[4] = self;
    objc_msgSend(MEMORY[0x1E0CEABB0], "animateWithDuration:delay:options:animations:completion:", 0x10000, v32, 0, 0.2, 0.0);
  }
  -[CKChatController throwAnimationManager](self, "throwAnimationManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "sourceRect");
  v13 = CGRectEqualToRect(v38, *MEMORY[0x1E0C9D648]);

  if (!v13)
    objc_msgSend(v8, "beginHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerSendAnimation"));
  objc_msgSend(v8, "setScrollEnabled:", 0);
  -[CKChatController _contentInsetForSendAnimation](self, "_contentInsetForSendAnimation");
  objc_msgSend(v8, "setContentInset:");
  objc_msgSend(v5, "messages");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "firstObject");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "scheduleType");

  if (v16 == 2)
  {
    objc_msgSend(v8, "__ck_bottomOffset");
    v18 = v17;
    v20 = v19;
  }
  else
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "latestScheduledMessageIndexPath");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "__ck_bottomOffsetHidingIndexPath:", v22);
    v18 = v23;
    v20 = v24;

  }
  v25 = (void *)MEMORY[0x1E0CEABB0];
  v27[0] = v6;
  v27[1] = 3221225472;
  v27[2] = __82__CKChatController_SendAnimation__sendAnimationManagerWillStartAnimation_context___block_invoke_4;
  v27[3] = &unk_1E2754720;
  v28 = v8;
  v29 = v18;
  v30 = v20;
  v31 = !v13;
  v26 = v8;
  objc_msgSend(v25, "animateWithDuration:animations:", v27, 0.3);
  v11[2](v11);

}

void __82__CKChatController_SendAnimation__sendAnimationManagerWillStartAnimation_context___block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "invalidateCompositionForReason:", 1);

}

uint64_t __82__CKChatController_SendAnimation__sendAnimationManagerWillStartAnimation_context___block_invoke_2(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "frame");
  return objc_msgSend(*(id *)(a1 + 40), "_setEntryViewFrame:animated:", 0);
}

void __82__CKChatController_SendAnimation__sendAnimationManagerWillStartAnimation_context___block_invoke_3(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "currentNavigationBarBasedOnSizeClass");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setAlpha:", 0.0);

}

uint64_t __82__CKChatController_SendAnimation__sendAnimationManagerWillStartAnimation_context___block_invoke_4(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "setContentOffset:", *(double *)(a1 + 40), *(double *)(a1 + 48));
  if (*(_BYTE *)(a1 + 56))
    return objc_msgSend(*(id *)(a1 + 32), "beginHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerSendAnimation"));
  return result;
}

- (UIEdgeInsets)_contentInsetForSendAnimation
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  UIEdgeInsets result;

  -[CKChatController entryView](self, "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController collectionView](self, "collectionView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "contentInset");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  objc_msgSend(v3, "bounds");
  v12 = v11;
  objc_msgSend(v3, "placeholderHeight");
  v14 = v8 - (v12 - v13);
  -[CKScrollViewController navigationBarInsetsWithoutPalette](self, "navigationBarInsetsWithoutPalette");
  v16 = v15;
  -[CKChatController _currentlyVisibleBannerHeight](self, "_currentlyVisibleBannerHeight");
  v18 = v16 + v17;

  v19 = v18;
  v20 = v6;
  v21 = v14;
  v22 = v10;
  result.right = v22;
  result.bottom = v21;
  result.left = v20;
  result.top = v19;
  return result;
}

- (void)sendAnimationManagerDidStopAnimation:(id)a3 context:(id)a4
{
  void *v5;
  void *v6;
  _QWORD v7[5];

  if (-[CKChatController _shouldHideNavigationBarForSendAnimationContext:](self, "_shouldHideNavigationBarForSendAnimationContext:", a4))
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __80__CKChatController_SendAnimation__sendAnimationManagerDidStopAnimation_context___block_invoke;
    v7[3] = &unk_1E274A208;
    v7[4] = self;
    objc_msgSend(MEMORY[0x1E0CEABB0], "animateWithDuration:delay:options:animations:completion:", 0x20000, v7, 0, 0.2, 0.0);
  }
  -[CKScrollViewController endHoldingScrollGeometryUpdatesForReason:](self, "endHoldingScrollGeometryUpdatesForReason:", CFSTR("ThrowAnimation"));
  -[CKChatController setIsAnimatingMessageSend:](self, "setIsAnimatingMessageSend:", 1);
  -[CKChatController _fullscreenEffectsManager](self, "_fullscreenEffectsManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "endHoldingUpdatesForKey:", CFSTR("CKFullscreenUpdatesSendAnimation"));

  -[CKChatController collectionView](self, "collectionView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "endHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerSendAnimation"));

  -[CKChatController setThrowAnimationManager:](self, "setThrowAnimationManager:", 0);
  -[CKChatController _finishSendAnimation](self, "_finishSendAnimation");
}

void __80__CKChatController_SendAnimation__sendAnimationManagerDidStopAnimation_context___block_invoke(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "currentNavigationBarBasedOnSizeClass");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setAlpha:", 1.0);

}

- (id)_fullscreenEffectsManager
{
  void *v2;
  void *v3;

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fullscreenEffectManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

- (void)_finishSendAnimation
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  int v35;
  void *v36;
  void *v37;
  int v38;
  void *v39;
  void *v40;
  void *v41;

  -[CKCoreChatController conversation](self, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setIgnoringTypingUpdates:", 0);

  if (!-[CKChatController isAnimatingMessageSend](self, "isAnimatingMessageSend"))
    return;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setHiddenItems:", 0);

  -[CKCoreChatController conversation](self, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "chat");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "guid");
  v7 = objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    v8 = (void *)v7;
    -[CKCoreChatController conversation](self, "conversation");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "chat");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "guid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[CKConversationList sharedConversationList](CKConversationList, "sharedConversationList");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "pendingConversation");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "chat");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "guid");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = objc_msgSend(v10, "isEqualToString:", v14);

    if (!v38)
      goto LABEL_7;
    +[CKConversationList sharedConversationList](CKConversationList, "sharedConversationList");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "unpendConversation");
  }
  else
  {

  }
LABEL_7:
  -[CKCoreChatController conversation](self, "conversation");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController conversation](self, "conversation");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    +[CKConversationList sharedConversationList](CKConversationList, "sharedConversationList");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "chat");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "conversationForExistingChat:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
    {
      v21 = v20;

      v15 = v21;
    }

  }
  -[CKChatController _didSendCompositionInConversation:](self, "_didSendCompositionInConversation:", v15);
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "collectionView");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController setSendingMessage:](self, "setSendingMessage:", 0);
  -[CKChatController setIsAnimatingMessageSend:](self, "setIsAnimatingMessageSend:", 0);
  -[CKChatController endHoldingAutorotationForKey:](self, "endHoldingAutorotationForKey:", CFSTR("CKHoldingRotationReasonThrowAnimation"));
  objc_msgSend(v23, "endDisablingTranscriptDynamicsForReason:", CFSTR("MessageSendAnimation"));
  objc_msgSend(v23, "setScrollEnabled:", 1);
  -[CKCoreChatController conversation](self, "conversation");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "chat");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "guid");
  v26 = objc_claimAutoreleasedReturnValue();
  if (!v26)
  {

    goto LABEL_15;
  }
  v27 = (void *)v26;
  -[CKCoreChatController conversation](self, "conversation");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v37, "chat");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "guid");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKConversationList sharedConversationList](CKConversationList, "sharedConversationList");
  v41 = v15;
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "pendingConversation");
  v39 = v22;
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "chat");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "guid");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = objc_msgSend(v28, "isEqualToString:", v32);

  v22 = v39;
  v15 = v41;

  if (v35)
  {
    +[CKConversationList sharedConversationList](CKConversationList, "sharedConversationList");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "unpendConversation");
LABEL_15:

  }
  -[CKChatController _updateNavigationButtons](self, "_updateNavigationButtons");
  objc_msgSend(v22, "chat");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "endHoldingChatItemsUpdatesForReason:", *MEMORY[0x1E0D353B8]);
  objc_msgSend(MEMORY[0x1E0CEABB8], "attemptRotationToDeviceOrientation");
  if (objc_msgSend(v23, "transcriptScrollIntent") == 3)
  {
    IMLogHandleForCategory();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      -[CKChatController(SendAnimation) _finishSendAnimation].cold.1(v34);

    objc_msgSend(v22, "updateTranscriptScrollIntentToBottomOrHistoryBasedOnCurrentContentOffset");
  }

}

- (BOOL)_shouldHideNavigationBarForSendAnimationContext:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[9];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;

  v4 = a3;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  objc_msgSend(v4, "containerView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _convertedNavigationBarFrameInSendAnimationContainerView:](self, "_convertedNavigationBarFrameInSendAnimationContainerView:", v5);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;

  objc_msgSend(v4, "framesOfAddedChatItems");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __83__CKChatController_SendAnimation___shouldHideNavigationBarForSendAnimationContext___block_invoke;
  v16[3] = &unk_1E2754748;
  v16[5] = v7;
  v16[6] = v9;
  v16[7] = v11;
  v16[8] = v13;
  v16[4] = &v17;
  objc_msgSend(v14, "enumerateObjectsUsingBlock:", v16);
  LOBYTE(v5) = *((_BYTE *)v18 + 24);

  _Block_object_dispose(&v17, 8);
  return (char)v5;
}

void __83__CKChatController_SendAnimation___shouldHideNavigationBarForSendAnimationContext___block_invoke(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  double MinY;
  CGRect v7;

  objc_msgSend(a2, "CGRectValue");
  MinY = CGRectGetMinY(v7);
  if (MinY < CGRectGetMaxY(*(CGRect *)(a1 + 40)))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
}

- (CGRect)_convertedNavigationBarFrameInSendAnimationContainerView:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  CGRect result;

  v4 = a3;
  -[CKChatController currentNavigationBarBasedOnSizeClass](self, "currentNavigationBarBasedOnSizeClass");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "superview");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "frame");
  objc_msgSend(v6, "convertRect:toView:", v4);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;

  v15 = v8;
  v16 = v10;
  v17 = v12;
  v18 = v14;
  result.size.height = v18;
  result.size.width = v17;
  result.origin.y = v16;
  result.origin.x = v15;
  return result;
}

- (BOOL)throwAnimationUsesAnimatedReloadForMessages:(id)a3
{
  id v3;
  void *v4;
  char v5;
  BOOL v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isDiffableTranscriptDataSourceEnabled");

  if ((v5 & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v7 = v3;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v16;
      while (2)
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v16 != v10)
            objc_enumerationMutation(v7);
          objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * i), "balloonBundleID", (_QWORD)v15);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "length");

          if (v13)
          {
            v6 = 0;
            goto LABEL_13;
          }
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v9)
          continue;
        break;
      }
    }
    v6 = 1;
LABEL_13:

  }
  return v6;
}

- (void)throwAnimationManager:(id)a3 canNowSendMessages:(id)a4
{
  id v5;
  _BOOL8 v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  CKChatController *v11;

  v5 = a4;
  v6 = -[CKChatController throwAnimationUsesAnimatedReloadForMessages:](self, "throwAnimationUsesAnimatedReloadForMessages:", v5);
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __76__CKChatController_SendAnimation__throwAnimationManager_canNowSendMessages___block_invoke;
  v9[3] = &unk_1E274A108;
  v10 = v5;
  v11 = self;
  v8 = v5;
  objc_msgSend(v7, "updateTranscript:animated:completion:", v9, v6, 0);

}

void __76__CKChatController_SendAnimation__throwAnimationManager_canNowSendMessages___block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i);
        v8 = *(void **)(a1 + 40);
        objc_msgSend(v8, "conversation", (_QWORD)v10);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "sendMessage:forConversation:newComposition:", v7, v9, 0);

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

}

- (CGRect)throwAnimationWindowFrame:(id)a3
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGRect result;

  -[CKChatController navigationController](self, "navigationController", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "view");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "frame");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;

  v13 = v6;
  v14 = v8;
  v15 = v10;
  v16 = v12;
  result.size.height = v16;
  result.size.width = v15;
  result.origin.y = v14;
  result.origin.x = v13;
  return result;
}

- (double)throwAnimationFinalFrameOffset:(id)a3
{
  return 0.0;
}

- (id)throwAnimationContainerSuperview:(id)a3
{
  void *v3;
  void *v4;

  -[CKChatController view](self, "view", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "window");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (double)throwAnimationManagerTopHeaderHeight:(id)a3
{
  double v4;
  double v5;
  double v6;

  -[CKScrollViewController navigationBarInsetsWithoutPalette](self, "navigationBarInsetsWithoutPalette", a3);
  v5 = v4;
  -[CKChatController _currentlyVisibleBannerHeight](self, "_currentlyVisibleBannerHeight");
  return v5 + v6;
}

- (void)throwAnimationManagerPrepareForThrowAnimation:(id)a3 context:(id)a4
{
  void *v5;
  void *v6;
  id v7;

  -[CKChatController setIsAnimatingMessageSend:](self, "setIsAnimatingMessageSend:", 1, a4);
  -[CKChatController collectionView](self, "collectionView");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "beginDisablingTranscriptDynamicsForReason:", CFSTR("MessageSendAnimation"));
  -[CKChatController beginHoldingAutorotationForKey:](self, "beginHoldingAutorotationForKey:", CFSTR("CKHoldingRotationReasonThrowAnimation"));
  -[CKScrollViewController beginHoldingScrollGeometryUpdatesForReason:](self, "beginHoldingScrollGeometryUpdatesForReason:", CFSTR("ThrowAnimation"));
  -[CKCoreChatController chat](self, "chat");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "beginHoldingChatItemsUpdatesForReason:", *MEMORY[0x1E0D353B8]);
  -[CKChatController _fullscreenEffectsManager](self, "_fullscreenEffectsManager");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "beginHoldingUpdatesForKey:", CFSTR("CKFullscreenUpdatesSendAnimation"));

}

- (BOOL)wantsOverKeyboardAnimationForSendAnimationContext:(id)a3
{
  return 1;
}

- (id)audioMessageThrowBalloonsForSendAnimationContext:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  void *v28;
  id v29;
  CKThrowBalloonViewAttributes *v30;
  void *v31;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "messages");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "chatItems");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "__ck_indexesOfPartsOfMessages:", v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectAtIndexedSubscript:", objc_msgSend(v8, "firstIndex"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  CKBalloonViewForClass((objc_class *)objc_msgSend(v9, "balloonViewClass"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "configureForMessagePart:", v9);
  objc_msgSend(v10, "setCanUseOpaqueMask:", 0);
  objc_msgSend(v10, "prepareForDisplayIfNeeded");
  v11 = objc_alloc(MEMORY[0x1E0CEABB0]);
  -[CKChatController throwAnimationManager](self, "throwAnimationManager");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "audioMessageSourceRect");
  v13 = (void *)objc_msgSend(v11, "initWithFrame:");

  objc_msgSend(MEMORY[0x1E0CEA478], "clearColor");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setBackgroundColor:", v14);

  objc_msgSend(v4, "containerView");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v15, "addSubview:", v13);
  v16 = *MEMORY[0x1E0C9D538];
  v17 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  -[CKChatController throwAnimationManager](self, "throwAnimationManager");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "audioMessageSourceRect");
  v20 = v19;
  v22 = v21;

  objc_msgSend(v9, "size");
  v24 = v20 - v23;
  objc_msgSend(v9, "size");
  objc_msgSend(v10, "setFrame:", v24, 0.0, v25, v26);
  objc_msgSend(v10, "layoutIfNeeded");
  objc_msgSend(v13, "addSubview:", v10);
  -[CKChatController throwAnimationManager](self, "throwAnimationManager");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "audioRecordingPillViewSnapshot");
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v28, "setFrame:", v16, v17, v20, v22);
  objc_msgSend(v13, "insertSubview:aboveSubview:", v28, v10);
  v29 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v29, "setObject:forKeyedSubscript:", v13, CFSTR("CKSendAnimationSupplementaryViewTextViewContainerView"));
  objc_msgSend(v29, "setObject:forKeyedSubscript:", v28, CFSTR("CKSendAnimationSupplementaryViewAudioMessagePillViewSnapshot"));
  v30 = objc_alloc_init(CKThrowBalloonViewAttributes);
  -[CKThrowBalloonViewAttributes setSupplementaryViews:](v30, "setSupplementaryViews:", v29);
  -[CKThrowBalloonViewAttributes setThrowBalloonView:](v30, "setThrowBalloonView:", v10);
  v33[0] = v30;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v33, 1);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  return v31;
}

- (id)throwBalloonsForSendAnimationContext:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  void *v18;
  double v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  char isKindOfClass;
  id v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  double *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  double v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v47;
  char v48;
  char v49;
  void *v50;
  void *v51;
  int v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  _QWORD v57[5];
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  BOOL v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t);
  void (*v76)(uint64_t);
  id v77;
  _QWORD v78[4];
  uint64_t v79;
  double *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;

  v4 = a3;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController entryView](self, "entryView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "contentView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "containerView");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "contentView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "pluginView");
  v55 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKChatController composition](self, "composition");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "shelfPluginPayload");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "pluginBundleID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0D375E0]);

  objc_msgSend(v10, "pluginBundleID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  IMBalloonExtensionIDWithSuffix();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v12, "isEqualToString:", v13)
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v48 = objc_msgSend(v10, "shouldSendAsMediaObject");
  }
  else
  {
    v48 = 0;
  }

  objc_msgSend(v6, "waveformView");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "waveformImageView");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "bounds");
  v17 = v16;
  v50 = v14;
  objc_msgSend(v14, "waveformImageView");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "sizeThatFits:", *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8));
  v47 = v17 > v19;

  objc_msgSend(v4, "messages");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "lastObject");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = v5;
  objc_msgSend(v5, "chatItems");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "__ck_indexesOfPartsOfMessages:", v20);
  v53 = v21;
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v52 = objc_msgSend(v21, "isAudioMessage");
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v23, "isAudioMessagesEntryViewRecordingEnabled");

  if (v24)
  {
    v25 = objc_msgSend(v54, "firstIndex");
    if (v25 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v26 = v25;
      if (v25 < objc_msgSend(v22, "count"))
      {
        objc_msgSend(v22, "objectAtIndexedSubscript:", v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          CKBalloonViewForClass((objc_class *)objc_msgSend(v27, "balloonViewClass"));
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();

          if (v52 && (isKindOfClass & 1) != 0)
          {
            -[CKChatController audioMessageThrowBalloonsForSendAnimationContext:](self, "audioMessageThrowBalloonsForSendAnimationContext:", v4);
            v30 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_21;
          }
        }
        else
        {

        }
      }
    }
  }
  v79 = 0;
  v80 = (double *)&v79;
  v81 = 0x3010000000;
  v83 = 0;
  v84 = 0;
  v82 = &unk_18E8EEE6F;
  objc_msgSend(v7, "bounds");
  objc_msgSend(v7, "convertRect:toView:", v56);
  v83 = v31;
  v84 = v32;
  objc_msgSend(v7, "contentOffset");
  v80[5] = v80[5] - v33;
  objc_msgSend(v4, "messages");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v34, "firstObject");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = objc_msgSend(v35, "scheduleType");

  if (objc_msgSend(v6, "shouldShowSubject")
    && (objc_msgSend(v53, "subject"), v37 = (void *)objc_claimAutoreleasedReturnValue(), v37, !v37)
    || v55
    || v36 == 2)
  {
    objc_msgSend(v7, "textView");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "frame");
    v80[5] = v42 + v80[5];

  }
  else if (objc_msgSend(v4, "shouldUseQuickReplySourceRect"))
  {
    objc_msgSend(v4, "quickReplySourceRect");
    v38 = v80;
    *((_QWORD *)v80 + 4) = v39;
    *((_QWORD *)v38 + 5) = v40;
  }
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "balloonMaskTailSizeForTailShape:", 1);
  v45 = v44;

  v78[0] = 0;
  v78[1] = v78;
  v78[2] = 0x2020000000;
  v78[3] = 0;
  v72 = 0;
  v73 = &v72;
  v74 = 0x3032000000;
  v75 = __Block_byref_object_copy__37;
  v76 = __Block_byref_object_dispose__37;
  v77 = 0;
  v77 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v57[0] = MEMORY[0x1E0C809B0];
  v57[1] = 3221225472;
  v57[2] = __72__CKChatController_SendAnimation__throwBalloonsForSendAnimationContext___block_invoke;
  v57[3] = &unk_1E2754770;
  v68 = v49;
  v69 = v48;
  v64 = &v72;
  v65 = v78;
  v57[4] = self;
  v58 = v56;
  v59 = v6;
  v67 = v45;
  v60 = v4;
  v66 = &v79;
  v70 = v52;
  v71 = v47;
  v61 = v54;
  v62 = v7;
  v63 = v55;
  objc_msgSend(v22, "enumerateObjectsAtIndexes:options:usingBlock:", v61, 0, v57);
  v30 = (id)v73[5];

  _Block_object_dispose(&v72, 8);
  _Block_object_dispose(v78, 8);
  _Block_object_dispose(&v79, 8);
LABEL_21:

  return v30;
}

void __72__CKChatController_SendAnimation__throwBalloonsForSendAnimationContext___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  void *v5;
  CKThrowBalloonViewAttributes *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  double v19;
  int v20;
  void *v21;
  void *v22;
  double v23;
  double v24;
  CGFloat v25;
  double v26;
  double v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  void *v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  double v37;
  CGFloat v38;
  double v39;
  CGFloat v40;
  double MaxY;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  void *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  _BOOL4 v60;
  int isKindOfClass;
  _BOOL4 v62;
  void *v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  void *v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  void *v81;
  double v82;
  double v83;
  double v84;
  double v85;
  int v86;
  id v87;
  double Height;
  void *v89;
  void *v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double Width;
  double v96;
  uint64_t v97;
  void *v98;
  void *v99;
  int v100;
  void *v101;
  double v102;
  double v103;
  double v104;
  void *v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  int v114;
  void *v115;
  void *v116;
  double v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  id v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  id v139;
  void *v140;
  void *v141;
  void *v142;
  double v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  double v149;
  void *v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  void *v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  void *v168;
  void *v169;
  double v170;
  void *v171;
  CGFloat rect;
  double rect_8;
  double rect_16;
  double rect_16a;
  void *rect_16b;
  double rect_24;
  double rect_24a;
  void *rect_24b;
  id v180;
  _OWORD v182[5];
  _OWORD v183[5];
  double v184;
  char v185[9];
  CGRect v186;
  CGRect v187;
  CGRect v188;
  CGRect v189;
  CGRect v190;
  CGRect v191;
  CGRect v192;

  v4 = a2;
  if (!*(_BYTE *)(a1 + 120) && !*(_BYTE *)(a1 + 121) || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    v185[0] = 0;
    v184 = 1.0;
    v6 = objc_alloc_init(CKThrowBalloonViewAttributes);
    v180 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v7 = v4;
    CKBalloonViewForClass((objc_class *)objc_msgSend(v7, "balloonViewClass"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(*(id *)(a1 + 32), "entryView");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "contentView");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "pluginSnapshotViewForPluginAtIndex:isFromTextAttachment:startingScaleMultiplier:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24), v185, &v184);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "transcriptIdentifier");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "configureForTranscriptPlugin:context:", v7, v13);

        objc_msgSend(v8, "setPluginSnapshotViewForThrowAnimation:", v11);
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          objc_msgSend(v8, "configureForTranscriptPlugin:", v7);
      }
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24);
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        objc_msgSend(v8, "configureForMessagePart:", v7);
      else
        objc_msgSend(v8, "configureForChatItem:", v7);
    }
    objc_msgSend(v8, "setCanUseOpaqueMask:", 0);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      objc_msgSend(*(id *)(a1 + 40), "addSubview:", v8);
    objc_msgSend(v7, "size");
    v15 = v14;
    v17 = v16;
    objc_msgSend(v8, "prepareForDisplayIfNeeded");
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
      objc_msgSend(v7, "balloonDescriptor");
    else
      memset(v183, 0, sizeof(v183));
    objc_msgSend(v18, "balloonMaskSizeWithBalloonDescriptor:", v183);
    objc_msgSend(v8, "setWantsSkinnyMask:", v15 < v19);

    v20 = objc_msgSend(v7, "itemIsReplyContextPreview");
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v21;
    if (v20)
      objc_msgSend(v21, "textReplyPreviewBalloonMinHeight");
    else
      objc_msgSend(v21, "textBalloonMinHeight");
    objc_msgSend(v8, "setWantsMultilineMask:", v17 > v23);

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      rect_16 = v15;
      rect_24 = v17;
      objc_msgSend(v8, "setFrame:", *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8), v15, v17);
      objc_msgSend(v8, "layoutIfNeeded");
      objc_msgSend(v8, "bounds");
      v25 = v24;
      rect = v24;
      v27 = v26;
      v29 = v28;
      v31 = v30;
      objc_msgSend(v8, "textView");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "frame");
      v34 = v33;
      v36 = v35;
      v38 = v37;
      v40 = v39;
      v170 = v35 - v27;
      v186.origin.x = v25;
      v186.origin.y = v27;
      v186.size.width = v29;
      v186.size.height = v31;
      MaxY = CGRectGetMaxY(v186);
      v187.origin.x = v34;
      v187.origin.y = v36;
      v187.size.width = v38;
      v187.size.height = v40;
      rect_8 = MaxY - CGRectGetMaxY(v187);
      v188.origin.x = rect;
      v188.origin.y = v27;
      v188.size.width = v29;
      v188.size.height = v31;
      CGRectGetMaxX(v188);
      v189.origin.x = v34;
      v189.origin.y = v36;
      v189.size.width = v38;
      v189.size.height = v40;
      CGRectGetMaxX(v189);

      objc_msgSend(*(id *)(a1 + 48), "coverViewWidth");
      v43 = v42;
      v44 = *(double *)(a1 + 112);
      if (objc_msgSend(*(id *)(a1 + 56), "shouldUseQuickReplySourceRect"))
      {
        objc_msgSend(*(id *)(a1 + 56), "quickReplySourceRect");
        v46 = v45;
      }
      else
      {
        v46 = v43 + v44;
      }
      v47 = v170;
      v15 = rect_16;
      v17 = rect_24;
    }
    else
    {
      v47 = *MEMORY[0x1E0CEB4B0];
      rect_8 = *(double *)(MEMORY[0x1E0CEB4B0] + 16);
      v46 = *(double *)(MEMORY[0x1E0C9D648] + 16);
    }
    if (*(_BYTE *)(a1 + 122))
    {
      objc_msgSend(*(id *)(a1 + 48), "waveformView");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "frame");
      v50 = v49;
      v52 = v51;
      v54 = v53;
      v56 = v55;
      if (*(_BYTE *)(a1 + 123))
        v57 = 8;
      else
        v57 = 4;
      objc_msgSend(v8, "setWaveformContentMode:", v57);

    }
    else
    {
      v58 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
      v50 = *(double *)(v58 + 32);
      v52 = *(double *)(v58 + 40) - v47;
      v56 = v17;
      v54 = v15;
    }
    if (objc_msgSend(*(id *)(a1 + 64), "firstIndex") == a3)
    {
      objc_msgSend(*(id *)(a1 + 72), "pluginView");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      v60 = v59 != 0;

    }
    else
    {
      v60 = 0;
    }
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v62 = v185[0] != 0;
    if (v60)
    {
      v63 = *(void **)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 80), "frame");
      v65 = v64;
      v67 = v66;
      v69 = v68;
      v71 = v70;
      objc_msgSend(*(id *)(a1 + 80), "superview");
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "convertRect:fromView:", v72, v65, v67, v69, v71);
      v74 = v73;
      v76 = v75;
      v78 = v77;
      v80 = v79;

      v81 = v8;
      v82 = v74;
      v83 = v76;
      v84 = v78;
      v85 = v80;
LABEL_41:
      objc_msgSend(v81, "setFrame:", v82, v83, v84, v85);
      objc_msgSend(v8, "layoutIfNeeded");
      objc_msgSend(v8, "prepareForDisplayIfNeeded");
LABEL_42:
      -[CKThrowBalloonViewAttributes setSupplementaryViews:](v6, "setSupplementaryViews:", v180);
      -[CKThrowBalloonViewAttributes setThrowBalloonView:](v6, "setThrowBalloonView:", v8);
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "addObject:", v6);

      goto LABEL_43;
    }
    v86 = isKindOfClass;
    if (objc_msgSend(v8, "isAudioMessage"))
    {
      objc_msgSend(*(id *)(a1 + 40), "convertRect:fromView:", *(_QWORD *)(a1 + 48), v50, v52, v54, v56);
      v81 = v8;
      goto LABEL_41;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      rect_16a = v15;
      rect_24a = v17;
      v87 = v8;
      v190.origin.x = v50;
      v190.origin.y = v52;
      v190.size.width = v54;
      v190.size.height = v56;
      Height = CGRectGetHeight(v190);
      v89 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEABB0]), "initWithFrame:", v50, v52, v46, Height);
      objc_msgSend(MEMORY[0x1E0CEA478], "clearColor");
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v89, "setBackgroundColor:", v90);

      objc_msgSend(*(id *)(a1 + 40), "addSubview:", v89);
      objc_msgSend(v180, "setObject:forKeyedSubscript:", v89, CFSTR("CKSendAnimationSupplementaryViewTextViewContainerView"));
      objc_msgSend(v87, "frame");
      v92 = v91;
      v94 = v93;
      v191.origin.x = v50;
      v191.origin.y = v52;
      v191.size.width = v46;
      v191.size.height = Height;
      Width = CGRectGetWidth(v191);
      objc_msgSend(v87, "frame");
      v96 = Width - CGRectGetWidth(v192);
      v97 = objc_msgSend(objc_alloc(MEMORY[0x1E0CEABB0]), "initWithFrame:", v96, 0.0, v92, v94);
      objc_msgSend(v89, "addSubview:", v97);
      objc_msgSend(v87, "setFrame:", v96, 0.0, v92, v94);
      v171 = v89;
      objc_msgSend(v89, "addSubview:", v87);
      objc_msgSend(v87, "prepareForDisplayIfNeeded");
      CKBalloonViewForClass((objc_class *)objc_msgSend(v7, "balloonViewClass"));
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v98, "configureForMessagePart:", v7);
      if (objc_msgSend(v98, "balloonStyle") - 3 <= 1)
        objc_msgSend(v98, "setBalloonStyle:", 0);
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      if (v7)
        objc_msgSend(v7, "balloonDescriptor");
      else
        memset(v182, 0, sizeof(v182));
      objc_msgSend(v99, "balloonMaskSizeWithBalloonDescriptor:", v182, v97);
      objc_msgSend(v98, "setWantsSkinnyMask:", rect_16a < v113);

      v114 = objc_msgSend(v7, "itemIsReplyContextPreview");
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v115 = (void *)objc_claimAutoreleasedReturnValue();
      v116 = v115;
      if (v114)
        objc_msgSend(v115, "textReplyPreviewBalloonMinHeight");
      else
        objc_msgSend(v115, "textBalloonMinHeight");
      objc_msgSend(v98, "setWantsMultilineMask:", rect_24a > v117);

      objc_msgSend(v98, "setColor:", 8);
      objc_msgSend(v98, "setCanUseOpaqueMask:", 0);
      objc_msgSend(v98, "prepareForDisplayIfNeeded");
      objc_msgSend(v98, "textView");
      v118 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CEA478], "labelColor");
      v119 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "sendAnimationTextWithColor:", v119);
      v120 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v118, "setAttributedText:", v120);

      objc_msgSend(v98, "setFrame:", v96, 0.0, v92, v94);
      objc_msgSend(v98, "layoutIfNeeded");
      objc_msgSend(v171, "insertSubview:aboveSubview:", v98, v87);
      objc_msgSend(v180, "setObject:forKeyedSubscript:", v98, CFSTR("CKSendAnimationSupplementaryViewWhiteTextFadeView"));
      objc_msgSend(v87, "textView");
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v121, "text");
      v122 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v119) = objc_msgSend(v122, "_isNaturallyRTL");

      if ((_DWORD)v119)
      {
        objc_msgSend(v87, "textView");
        v123 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v123, "setHidden:", 1);

        objc_msgSend(v98, "textView");
        v124 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v124, "setHidden:", 1);

        v125 = objc_alloc_init(MEMORY[0x1E0CEAB18]);
        objc_msgSend(v7, "transcriptText");
        v126 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v125, "setAttributedText:", v126);

        objc_msgSend(MEMORY[0x1E0CEA478], "clearColor");
        v127 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v125, "setBackgroundColor:", v127);

        objc_msgSend(v125, "setTextAlignment:", 2);
        objc_msgSend(v87, "textView");
        v128 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v128, "textContainerInset");
        objc_msgSend(v125, "setTextContainerInset:");

        objc_msgSend(*(id *)(a1 + 48), "contentView");
        v129 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v129, "textView");
        rect_24b = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(rect_24b, "bounds");
        objc_msgSend(rect_24b, "convertRect:toView:", v171);
        v131 = v130;
        v132 = v47;
        v134 = v133;
        v136 = v135;
        v138 = v137;
        rect_16b = v125;
        objc_msgSend(v125, "setFrame:");
        objc_msgSend(v171, "addSubview:", v125);
        v139 = objc_alloc_init(MEMORY[0x1E0CEAB18]);
        objc_msgSend(MEMORY[0x1E0CEA478], "labelColor");
        v140 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "sendAnimationTextWithColor:", v140);
        v141 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v139, "setAttributedText:", v141);

        objc_msgSend(MEMORY[0x1E0CEA478], "clearColor");
        v142 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v139, "setBackgroundColor:", v142);

        v143 = v134;
        v47 = v132;
        objc_msgSend(v139, "setFrame:", v131, v143, v136, v138);
        objc_msgSend(v139, "setTextAlignment:", 2);
        objc_msgSend(v87, "textView");
        v144 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v144, "textContainerInset");
        objc_msgSend(v139, "setTextContainerInset:");

        objc_msgSend(v171, "addSubview:", v139);
        objc_msgSend(v180, "setObject:forKeyedSubscript:", v139, CFSTR("CKSendAnimationSupplementaryViewWhiteTextFadeViewRTL"));
        objc_msgSend(v180, "setObject:forKeyedSubscript:", rect_16b, CFSTR("CKSendAnimationSupplementaryViewBlueTextFadeViewRTL"));

      }
      if (objc_msgSend(*(id *)(a1 + 56), "shouldUseQuickReplySourceRect"))
      {
        objc_msgSend(*(id *)(a1 + 32), "throwAnimationManager");
        v145 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v145, "quickReplySnapshot");
        v146 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(*(id *)(a1 + 32), "view");
        v147 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "collectionView");
        v148 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v147, "insertSubview:belowSubview:", v146, v148);

        objc_msgSend(v180, "setObject:forKeyedSubscript:", v146, CFSTR("CKSendAnimationSupplementaryViewQuickReplySnapshot"));
      }
      else
      {
        v149 = v47;
        objc_msgSend(*(id *)(a1 + 48), "sendButton");
        v150 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v150, "button");
        v146 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v146, "frame");
        v152 = v151;
        v154 = v153;
        v156 = v155;
        v158 = v157;
        objc_msgSend(v146, "superview");
        v159 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v171, "convertRect:fromView:", v159, v152, v154, v156, v158);
        v161 = v160;
        v163 = v162;
        v165 = v164;
        v167 = v166;

        objc_msgSend(v146, "snapshotViewAfterScreenUpdates:", 0);
        v168 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v168, "setFrame:", v161, v163, v165, v167);
        objc_msgSend(v171, "insertSubview:aboveSubview:", v168, v98);
        objc_msgSend(v180, "setObject:forKeyedSubscript:", v168, CFSTR("CKSendAnimationSupplementaryViewSendButtonSnapshot"));
        if (objc_msgSend(*(id *)(a1 + 64), "lastIndex") != a3)
          objc_msgSend(v168, "setHidden:", 1);

        v47 = v149;
      }

      *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40) = v56
                                                                   - (rect_8
                                                                    + v47)
                                                                   + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8)
                                                                               + 40);

      goto LABEL_42;
    }
    v100 = v86 & v62;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_opt_class();
      if (!(v100 & 1 | ((objc_opt_isKindOfClass() & 1) == 0)))
      {
LABEL_51:
        v101 = v8;
        v102 = v50;
        v103 = v52;
        v104 = v54;
LABEL_62:
        objc_msgSend(v101, "setFrame:", v102, v103, v104, v56);
        objc_msgSend(v8, "layoutIfNeeded");
        objc_msgSend(v8, "prepareForDisplayIfNeeded");
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40) = v56
                                                                     - (rect_8
                                                                      + v47)
                                                                     + *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 104)
                                                                                             + 8)
                                                                                 + 40);
        goto LABEL_42;
      }
    }
    else if (!v100)
    {
      goto LABEL_51;
    }
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "coverViewWidth");
    objc_msgSend(v105, "composeBalloonMaxWidthForEntryContentViewWidth:");
    v106 = v15;
    v108 = v107 / v15;

    v109 = v106 * v108;
    v110 = v17 * v108;
    if (v108 >= 1.0)
    {
      v110 = v56;
      v109 = v54;
    }
    if (v184 >= 1.0)
      v56 = v110;
    else
      v56 = v17 * v184;
    if (v184 >= 1.0)
      v111 = v109;
    else
      v111 = v106 * v184;
    objc_msgSend(*(id *)(a1 + 48), "marginInsets", v109, v110);
    v102 = v50 + v112;
    v101 = v8;
    v103 = v52;
    v104 = v111;
    goto LABEL_62;
  }
  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v6 = (CKThrowBalloonViewAttributes *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "addObject:", v6);
LABEL_43:

}

- (id)previewItemsForMediaObject:(id)a3 currentItemIndex:(int64_t *)a4 containsRestoring:(BOOL *)a5
{
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  _QWORD v24[4];
  id v25;
  id v26;
  _QWORD aBlock[4];
  id v28;
  id v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v8 = a3;
  if (v8)
  {
    v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v36 = 0;
    v37 = &v36;
    v38 = 0x2020000000;
    v39 = 0x7FFFFFFFFFFFFFFFLL;
    v32 = 0;
    v33 = &v32;
    v34 = 0x2020000000;
    v35 = 0;
    v10 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __93__CKChatController_QuickLook__previewItemsForMediaObject_currentItemIndex_containsRestoring___block_invoke;
    aBlock[3] = &unk_1E2755420;
    v11 = v9;
    v28 = v11;
    v12 = v8;
    v29 = v12;
    v30 = &v36;
    v31 = &v32;
    v13 = _Block_copy(aBlock);
    -[CKChatController _chatItemForMediaObject:](self, "_chatItemForMediaObject:", v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v15 = v14;
      objc_msgSend(v15, "layoutGroupIdentifier");
      v16 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v16 = 0;
    }
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "chatItems");
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    v24[0] = v10;
    v24[1] = 3221225472;
    v24[2] = __93__CKChatController_QuickLook__previewItemsForMediaObject_currentItemIndex_containsRestoring___block_invoke_2;
    v24[3] = &unk_1E2755448;
    v20 = v16;
    v25 = v20;
    v21 = v13;
    v26 = v21;
    objc_msgSend(v19, "enumerateObjectsUsingBlock:", v24);
    if (a4)
      *a4 = v37[3];
    if (a5)
      *a5 = *((_BYTE *)v33 + 24);
    v22 = v26;
    v17 = v11;

    _Block_object_dispose(&v32, 8);
    _Block_object_dispose(&v36, 8);
  }
  else
  {
    v17 = 0;
  }

  return v17;
}

void __93__CKChatController_QuickLook__previewItemsForMediaObject_currentItemIndex_containsRestoring___block_invoke(uint64_t a1, void *a2)
{
  int v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  int v9;
  id v10;

  v10 = a2;
  v3 = objc_msgSend(v10, "shouldBeQuickLooked");
  v4 = v10;
  if (v3)
  {
    objc_msgSend(v10, "transfer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "isRestoring");
    if ((v6 & 1) != 0 || objc_msgSend(v5, "isFileDataReady"))
    {
      objc_msgSend(*(id *)(a1 + 32), "addObject:", v10);
      objc_msgSend(v10, "transferGUID");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "transferGUID");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v7, "isEqualToString:", v8);

      if (v9)
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "count") - 1;
      if (v6)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    }

    v4 = v10;
  }

}

void __93__CKChatController_QuickLook__previewItemsForMediaObject_currentItemIndex_containsRestoring___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((objc_msgSend(v3, "itemIsReplyContextPreview") & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (!objc_msgSend(*(id *)(a1 + 32), "length")
        || (v4 = *(void **)(a1 + 32),
            objc_msgSend(v3, "layoutGroupIdentifier"),
            v5 = (void *)objc_claimAutoreleasedReturnValue(),
            LODWORD(v4) = objc_msgSend(v4, "isEqualToString:", v5),
            v5,
            (_DWORD)v4))
      {
        objc_msgSend(v3, "mediaObject");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_16:

      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if (!objc_msgSend(*(id *)(a1 + 32), "length")
          || (v7 = *(void **)(a1 + 32),
              objc_msgSend(v3, "layoutGroupIdentifier"),
              v8 = (void *)objc_claimAutoreleasedReturnValue(),
              LODWORD(v7) = objc_msgSend(v7, "isEqualToString:", v8),
              v8,
              (_DWORD)v7))
        {
          objc_msgSend(v3, "mediaObjects");
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = 0u;
          v14 = 0u;
          v15 = 0u;
          v16 = 0u;
          v9 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
          if (v9)
          {
            v10 = v9;
            v11 = *(_QWORD *)v14;
            do
            {
              v12 = 0;
              do
              {
                if (*(_QWORD *)v14 != v11)
                  objc_enumerationMutation(v6);
                (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
                ++v12;
              }
              while (v10 != v12);
              v10 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
            }
            while (v10);
          }
          goto LABEL_16;
        }
      }
    }
  }

}

- (void)updateQLPreviewControllerIfVisible
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  uint64_t v12;

  -[CKChatController navigationController](self, "navigationController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "visibleViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = v4;
    v12 = 0x7FFFFFFFFFFFFFFFLL;
    v11 = 0;
    objc_msgSend(v5, "currentPreviewItem");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController previewItemsForMediaObject:currentItemIndex:containsRestoring:](self, "previewItemsForMediaObject:currentItemIndex:containsRestoring:", v6, &v12, &v11);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "dataSource");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setPreviewItems:", v7);

    if (v11)
    {
      CKFrameworkBundle();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("RESTORING"), &stru_1E276D870, CFSTR("ChatKit"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setLoadingTextForMissingFiles:", v10);

    }
    else
    {
      objc_msgSend(v5, "setLoadingTextForMissingFiles:", &stru_1E276D870);
    }
    objc_msgSend(v5, "reloadData");
    objc_msgSend(v5, "setCurrentPreviewItemIndex:", v12);
    objc_msgSend(v5, "refreshCurrentPreviewItem");

  }
}

- (void)updateQLPreviewControllerBarButtonItemsIfVisible
{
  id v2;

  -[CKChatController previewController](self, "previewController");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "updateBarButtonItems");

}

- (BOOL)_displayMediaObjectFullscreen:(id)a3
{
  return 0;
}

- (BOOL)_displayPreviewItemForMediaObject:(id)a3
{
  id v4;
  void *v5;
  int v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  void *v10;
  CKQLPreviewController *v11;
  void *v12;
  CKQLPreviewControllerDataSource *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  objc_super v21;
  char v22;
  uint64_t v23;

  v4 = a3;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isSizeConstrained");

  if (v6)
  {
    v7 = -[CKChatController _displayMediaObjectFullscreen:](self, "_displayMediaObjectFullscreen:", v4);

  }
  else
  {
    v23 = 0x7FFFFFFFFFFFFFFFLL;
    v22 = 0;
    -[CKChatController previewItemsForMediaObject:currentItemIndex:containsRestoring:](self, "previewItemsForMediaObject:currentItemIndex:containsRestoring:", v4, &v23, &v22);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = objc_msgSend(v8, "count");
    if (v9)
    {
      -[CKChatController previewController](self, "previewController");
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v10 && !CKIsRunningInMacCatalyst())
      {
        v11 = objc_alloc_init(CKQLPreviewController);
        -[CKChatController setPreviewController:](self, "setPreviewController:", v11);

      }
      -[CKChatController previewController](self, "previewController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setDelegate:", self);
      v13 = objc_alloc_init(CKQLPreviewControllerDataSource);
      -[CKChatController setQlPreviewDataSource:](self, "setQlPreviewDataSource:", v13);

      -[CKChatController qlPreviewDataSource](self, "qlPreviewDataSource");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "setPreviewItems:", v8);

      -[CKChatController qlPreviewDataSource](self, "qlPreviewDataSource");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setDataSource:", v15);

      objc_msgSend(v12, "reloadData");
      objc_msgSend(v12, "setCurrentPreviewItemIndex:", v23);
      objc_msgSend(v12, "refreshCurrentPreviewItem");
      if (!CKIsRunningInMacCatalyst())
      {
        objc_msgSend(v12, "setModalPresentationStyle:", 0);
        if (v22)
        {
          CKFrameworkBundle();
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("RESTORING"), &stru_1E276D870, CFSTR("ChatKit"));
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "setLoadingTextForMissingFiles:", v17);

        }
      }
      -[CKChatController entryView](self, "entryView");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "contentView");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController setEntryViewWasActiveOnPreview:](self, "setEntryViewWasActiveOnPreview:", objc_msgSend(v19, "isActive"));

      v21.receiver = self;
      v21.super_class = (Class)CKChatController;
      -[CKChatController becomeFirstResponder](&v21, sel_becomeFirstResponder);
      if (CKIsRunningInMacCatalyst())
        objc_msgSend(v12, "presentPreview");
      else
        -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v12, 1, 0);

    }
    v7 = v9 != 0;

  }
  return v7;
}

- (void)_showReaderForAggregateChatItem:(id)a3 balloonView:(id)a4
{
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a4;
  +[CKReaderViewController readerViewControllerForChatItem:](CKReaderViewController, "readerViewControllerForChatItem:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setDelegate:", self);
  if (CKIsRunningInMacCatalyst())
  {
    objc_msgSend(v6, "setModalPresentationStyle:", 7);
    objc_msgSend(v6, "popoverPresentationController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setSourceView:", v9);

    -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v6, 1, 0);
  }
  else
  {
    -[CKChatController showViewController:sender:](self, "showViewController:sender:", v6, self);
    -[CKCoreChatController inputController](self, "inputController");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "dismissAppCardIfNecessary");

  }
}

- (BOOL)_canReloadEntryView
{
  void *v2;
  void *v3;
  BOOL v4;

  -[CKChatController entryView](self, "entryView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "window");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 != 0;

  return v4;
}

- (void)readerViewControllerWillDismiss:(id)a3
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;

  v3 = a3;
  +[CKReaderViewController readerScrollPositionCache](CKReaderViewController, "readerScrollPositionCache");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB3B18];
  v5 = objc_msgSend(v3, "visibleRange");
  objc_msgSend(v4, "valueWithRange:", v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "messageGUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "setObject:forKey:", v7, v8);
}

- (void)_dismissPresentedViewController:(id)a3
{
  int v4;
  void *v5;
  void *v6;

  v4 = CKIsRunningInMacCatalyst();
  -[CKChatController presentedViewController](self, "presentedViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v4)
    objc_msgSend(v5, "dismissPreview");
  else
    objc_msgSend(v5, "dismissViewControllerAnimated:completion:", 1, 0);

  -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
}

- (void)showViewerForMediaObject:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  int isKindOfClass;
  int v8;
  void *v9;
  void *v10;
  NSObject *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  objc_class *v18;
  __CFString *v19;
  void *v20;
  void *v21;
  objc_class *v22;
  __CFString *v23;
  void *v24;
  int v25;
  void *v26;
  int v27;
  const __CFString *v28;
  __int16 v29;
  const __CFString *v30;
  __int16 v31;
  const __CFString *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  -[CKChatController navigationController](self, "navigationController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "visibleViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v8 = objc_msgSend(v6, "conformsToProtocol:", &unk_1EE2B0E00);
  -[CKChatController previewController](self, "previewController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "presentingViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = CFSTR("NO");
      if ((isKindOfClass & 1) != 0)
        v13 = CFSTR("YES");
      else
        v13 = CFSTR("NO");
      if (v8)
        v14 = CFSTR("YES");
      else
        v14 = CFSTR("NO");
      v27 = 138412802;
      v28 = v13;
      v29 = 2112;
      v30 = v14;
      if (v10)
        v12 = CFSTR("YES");
      v31 = 2112;
      v32 = v12;
      _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_INFO, "isChatControllerOnTop={%@} isAppCardOnTop={%@} isPreviewControllerAlreadyPresented={%@}", (uint8_t *)&v27, 0x20u);
    }

  }
  if (((isKindOfClass | v8) & (v10 == 0)) != 0)
  {
    -[CKChatController entryView](self, "entryView");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "contentView");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController setEntryViewWasActiveOnPreview:](self, "setEntryViewWasActiveOnPreview:", objc_msgSend(v16, "isActive"));

    if (CKIsRunningInMacCatalyst())
    {
      if (objc_msgSend(v4, "shouldBeQuickLooked"))
LABEL_16:
        -[CKChatController _displayPreviewItemForMediaObject:](self, "_displayPreviewItemForMediaObject:", v4);
    }
    else
    {
      if (objc_msgSend(v4, "mediaType") != 5)
      {
        if (objc_msgSend(v4, "mediaType") == 4)
        {
          -[CKChatController _showVCardViewerForMediaObject:](self, "_showVCardViewerForMediaObject:", v4);
          goto LABEL_21;
        }
        if (objc_msgSend(v4, "mediaType") == 7)
        {
          -[CKChatController _showPassbookCardViewForMediaObject:](self, "_showPassbookCardViewForMediaObject:", v4);
          goto LABEL_21;
        }
        if (objc_msgSend(v4, "mediaType") == 9)
        {
          -[CKChatController _showWalletOrderImportViewForMediaObject:](self, "_showWalletOrderImportViewForMediaObject:", v4);
          goto LABEL_21;
        }
        if (!objc_msgSend(v4, "shouldBeQuickLooked"))
          goto LABEL_21;
        goto LABEL_16;
      }
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v24, "opensLocationsInMapsApp");

      if (v25)
      {
        objc_msgSend(v4, "mapItem");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "openInMapsWithLaunchOptions:", 0);

      }
      else
      {
        -[CKChatController _showMapViewerForMediaObject:](self, "_showMapViewerForMediaObject:", v4);
      }
    }
  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      v18 = (objc_class *)objc_opt_class();
      NSStringFromClass(v18);
      v19 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
      -[CKChatController navigationController](self, "navigationController");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "topViewController");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = (objc_class *)objc_opt_class();
      NSStringFromClass(v22);
      v23 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v27 = 138412546;
      v28 = v19;
      v29 = 2112;
      v30 = v23;
      _os_log_impl(&dword_18DFCD000, v17, OS_LOG_TYPE_INFO, "Criteria not met to show mediaObject. Transcript/AppCard isn't visibleViewController. visibleVC={%@} topVC={%@}", (uint8_t *)&v27, 0x16u);

    }
  }
LABEL_21:

}

- (void)showAlternateViewerForMediaObject:(id)a3
{
  void *v4;
  int v5;
  id v6;

  v6 = a3;
  if (objc_msgSend(v6, "mediaType") == 5)
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "showsPlaceCardForBalloonViewTitleTap");

    if (v5)
      -[CKChatController _showVCardViewerForMediaObject:](self, "_showVCardViewerForMediaObject:", v6);
  }

}

- (void)_showPassbookCardViewForMediaObject:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  objc_super v11;

  v4 = a3;
  if (objc_msgSend((id)MEMORY[0x193FF3C18](CFSTR("PKPassLibrary"), CFSTR("PassKit")), "isPassLibraryAvailable"))
  {
    objc_msgSend(v4, "pass");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    +[CKPassKitHelper addPassesViewControllerForPass:](CKPassKitHelper, "addPassesViewControllerForPass:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      objc_msgSend(v6, "performSelector:withObject:", sel_setDelegate_, self);
      -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", -[CKChatController entryViewWasActiveOnPreview](self, "entryViewWasActiveOnPreview"));
      v11.receiver = self;
      v11.super_class = (Class)CKChatController;
      -[CKChatController becomeFirstResponder](&v11, sel_becomeFirstResponder);
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "collectionView");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "beginHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerQuickLook"));

      -[CKChatController navigationController](self, "navigationController");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "presentViewController:animated:completion:", v7, 1, 0);

    }
  }

}

- (void)addPassesViewControllerDidFinish:(id)a3
{
  void *v4;
  _QWORD v5[5];

  -[CKChatController navigationController](self, "navigationController", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __64__CKChatController_QuickLook__addPassesViewControllerDidFinish___block_invoke;
  v5[3] = &unk_1E274A208;
  v5[4] = self;
  objc_msgSend(v4, "dismissViewControllerAnimated:completion:", 1, v5);

}

void __64__CKChatController_QuickLook__addPassesViewControllerDidFinish___block_invoke(uint64_t a1)
{
  int v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "entryViewWasActiveOnPreview");
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v3, "setEntryViewWasActiveOnPreview:", 0);
    v3 = *(void **)(a1 + 32);
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(v3, "setTargetFirstResponder:", v4);
  objc_msgSend(*(id *)(a1 + 32), "becomeFirstResponder");
  objc_msgSend(*(id *)(a1 + 32), "firstResponder");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "reloadInputViews");

  objc_msgSend(*(id *)(a1 + 32), "collectionViewController");
  v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "collectionView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "endHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerQuickLook"));

}

- (void)_showWalletOrderImportViewForMediaObject:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id FKOrderImportPreviewControllerProviderClass;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void (*v20)(_QWORD);
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  dispatch_time_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  _QWORD v40[5];
  id v41;
  id v42;
  _QWORD v43[5];
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE buf[24];
  void *v49;
  uint64_t *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  getFKOrderImportPreviewControllerProviderClass();
  v5 = (void *)objc_opt_class();
  if ((objc_opt_respondsToSelector() & 1) != 0
    && objc_msgSend(v5, "canProvidePreviewControllerForMessages"))
  {
    v44 = 0;
    v45 = &v44;
    v46 = 0x2050000000;
    v6 = (void *)getFKOrderMessagesPreviewMetadataClass_softClass;
    v47 = getFKOrderMessagesPreviewMetadataClass_softClass;
    v7 = MEMORY[0x1E0C809B0];
    if (!getFKOrderMessagesPreviewMetadataClass_softClass)
    {
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __getFKOrderMessagesPreviewMetadataClass_block_invoke;
      v49 = &unk_1E274A178;
      v50 = &v44;
      __getFKOrderMessagesPreviewMetadataClass_block_invoke((uint64_t)buf);
      v6 = (void *)v45[3];
    }
    v8 = objc_retainAutorelease(v6);
    _Block_object_dispose(&v44, 8);
    v9 = (void *)objc_opt_class();
    if ((objc_opt_respondsToSelector() & 1) != 0
      && (objc_msgSend(v4, "fileURL"),
          v10 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v9, "walletDeepLinkForExistingOrderAtURL:", v10),
          v11 = (id)objc_claimAutoreleasedReturnValue(),
          v10,
          v11))
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v11, "absoluteString");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v13;
          _os_log_impl(&dword_18DFCD000, v12, OS_LOG_TYPE_INFO, "Order file is already tracked, viewing in Wallet with url: %@", buf, 0xCu);

        }
      }
      objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "openURL:", v11);

    }
    else
    {
      FKOrderImportPreviewControllerProviderClass = getFKOrderImportPreviewControllerProviderClass();
      objc_msgSend(v4, "fileURL");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 0;
      v43[0] = v7;
      v43[1] = 3221225472;
      v43[2] = __72__CKChatController_QuickLook___showWalletOrderImportViewForMediaObject___block_invoke;
      v43[3] = &unk_1E2755470;
      v43[4] = self;
      objc_msgSend(FKOrderImportPreviewControllerProviderClass, "makeViewControllerWithOrderURL:completion:error:", v16, v43, &v42);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v42;

      if (v11)
      {
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v4, "fileURL");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = v19;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v11;
            _os_log_impl(&dword_18DFCD000, v18, OS_LOG_TYPE_INFO, "Failed to create Add to Wallet VC for order at %@: %@", buf, 0x16u);

          }
        }
        if (objc_msgSend(v11, "code") == 1)
        {
          v20 = (void (*)(_QWORD))MEMORY[0x193FF3C24]("PKCreateAlertControllerForWalletUninstalled", CFSTR("PassKitUI"));
          _showWalletOrderImportViewForMediaObject__makeWalletUninstalledAlert = (uint64_t)v20;
          if (v20)
          {
            v20(0);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            -[CKChatController navigationController](self, "navigationController");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v22, "presentViewController:animated:completion:", v21, 1, 0);

          }
          else if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v39 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18DFCD000, v39, OS_LOG_TYPE_INFO, "Unable to show Wallet Uninstalled alert because weak-link of PKCreateAlertControllerForWalletUninstalled() failed.", buf, 2u);
            }

          }
        }
        else
        {
          v28 = (void *)MEMORY[0x1E0CEA2E8];
          CKFrameworkBundle();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "localizedStringForKey:value:table:", CFSTR("WALLET_ORDER_INVALID_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          CKFrameworkBundle();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "localizedStringForKey:value:table:", CFSTR("WALLET_ORDER_INVALID_DESCRIPTION"), &stru_1E276D870, CFSTR("ChatKit"));
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v28, "alertControllerWithTitle:message:preferredStyle:", v30, v32, 1);
          v33 = (void *)objc_claimAutoreleasedReturnValue();

          v34 = (void *)MEMORY[0x1E0CEA2E0];
          CKFrameworkBundle();
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "localizedStringForKey:value:table:", CFSTR("DISMISS"), &stru_1E276D870, CFSTR("ChatKit"));
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "actionWithTitle:style:handler:", v36, 0, 0);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "addAction:", v37);

          -[CKChatController navigationController](self, "navigationController");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "presentViewController:animated:completion:", v33, 1, 0);

        }
      }
      else if (v17)
      {
        -[CKChatController setWalletOrderImportViewController:](self, "setWalletOrderImportViewController:", v17);
        objc_msgSend(v17, "presentationController");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "setDelegate:", self);

        -[CKCoreChatController collectionViewController](self, "collectionViewController");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "collectionView");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "beginHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerQuickLook"));

        -[CKCoreChatController delegate](self, "delegate");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "updateSupportedInterfaceOrientations:", 2);

        v27 = dispatch_time(0, 100000000);
        v40[0] = v7;
        v40[1] = 3221225472;
        v40[2] = __72__CKChatController_QuickLook___showWalletOrderImportViewForMediaObject___block_invoke_135;
        v40[3] = &unk_1E274A108;
        v40[4] = self;
        v41 = v17;
        dispatch_after(v27, MEMORY[0x1E0C80D38], v40);

      }
    }

  }
}

void __72__CKChatController_QuickLook___showWalletOrderImportViewForMediaObject___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  int v5;
  NSObject *v6;
  id *v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  uint8_t buf[4];
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = IMOSLoggingEnabled();
  if (v4)
  {
    if (v5)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v12 = v4;
        _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "CKChatController_QuickLook failed to add order file to Wallet: %@", buf, 0xCu);
      }
LABEL_9:

    }
  }
  else if (v5)
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "Finished adding order file to Wallet", buf, 2u);
    }
    goto LABEL_9;
  }
  v8 = *(void **)(a1 + 32);
  v7 = (id *)(a1 + 32);
  objc_msgSend(v8, "_walletOrderImportControllerDismissed");
  objc_msgSend(*v7, "navigationController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __72__CKChatController_QuickLook___showWalletOrderImportViewForMediaObject___block_invoke_122;
  v10[3] = &unk_1E274A208;
  v10[4] = *v7;
  objc_msgSend(v9, "dismissViewControllerAnimated:completion:", 1, v10);

}

void __72__CKChatController_QuickLook___showWalletOrderImportViewForMediaObject___block_invoke_122(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stopForcingOrientation");

}

void __72__CKChatController_QuickLook___showWalletOrderImportViewForMediaObject___block_invoke_135(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "navigationController");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "presentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);

}

- (void)_showMapViewerForMediaObject:(id)a3
{
  id v4;
  __CFString *v5;
  objc_class *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  int v23;
  const __CFString *v24;
  __int16 v25;
  const __CFString *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (_showMapViewerForMediaObject___pred_CLLocationCoordinate2DIsValidCoreLocation != -1)
    dispatch_once(&_showMapViewerForMediaObject___pred_CLLocationCoordinate2DIsValidCoreLocation, &__block_literal_global_109);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = (__CFString *)v4;
    if ((((uint64_t (*)(uint64_t))_showMapViewerForMediaObject___CLLocationCoordinate2DIsValid)(-[__CFString coordinate](v5, "coordinate")) & 1) != 0)
    {
      v6 = (objc_class *)MEMORY[0x193FF3C18](CFSTR("MUPlaceViewController"), CFSTR("MapsUI"));
      if (v6)
      {
        v7 = [v6 alloc];
        -[__CFString mapItem](v5, "mapItem");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = (void *)objc_msgSend(v7, "initWithMapItem:", v8);

        +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "usesPopovers");

        if (v11)
        {
          -[CKChatController entryView](self, "entryView");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "contentView");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "isActive");

          -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", v14);
          v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA380]), "initWithBarButtonSystemItem:target:action:", 0, self, sel_dismissPresentedViewController_);
          objc_msgSend(v9, "navigationItem");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "setLeftBarButtonItem:", v15);

          v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA7B8]), "initWithRootViewController:", v9);
          objc_msgSend(v17, "navigationBar");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "theme");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "setBarStyle:", objc_msgSend(v20, "navBarStyle"));

          objc_msgSend(v17, "setModalPresentationStyle:", 3);
          -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v17, 1, 0);

        }
        else
        {
          -[CKChatController showViewController:sender:](self, "showViewController:sender:", v9, self);
        }

      }
      else if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          v23 = 138412546;
          v24 = CFSTR("MUPlaceViewController");
          v25 = 2112;
          v26 = CFSTR("MapsUI");
          _os_log_impl(&dword_18DFCD000, v22, OS_LOG_TYPE_INFO, "Failed weak linking %@ from %@.", (uint8_t *)&v23, 0x16u);
        }

      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          v23 = 138412290;
          v24 = v5;
          _os_log_impl(&dword_18DFCD000, v21, OS_LOG_TYPE_INFO, "The location for this media object is invalid. [%@]", (uint8_t *)&v23, 0xCu);
        }

      }
      -[CKChatController _showVCardViewerForMediaObject:](self, "_showVCardViewerForMediaObject:", v5);
    }

  }
}

void *__60__CKChatController_QuickLook___showMapViewerForMediaObject___block_invoke()
{
  void *result;

  result = (void *)MEMORY[0x193FF3C24]("CLLocationCoordinate2DIsValid", CFSTR("CoreLocation"));
  _showMapViewerForMediaObject___CLLocationCoordinate2DIsValid = result;
  return result;
}

- (void)_showVCardViewerForMediaObject:(id)a3
{
  id v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint8_t buf[4];
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "data");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  if (!v5)
    v5 = objc_alloc_init(MEMORY[0x1E0C99D50]);
  v17 = 0;
  objc_msgSend(MEMORY[0x1E0C972A8], "contactsWithData:error:", v5, &v17);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v17;
  if (!v6 || !objc_msgSend(v6, "count"))
  {
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v20 = v7;
        _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Couldn't get contacts out of vcard data: %@", buf, 0xCu);
      }

    }
    v9 = objc_alloc_init(MEMORY[0x1E0C97360]);
    v18 = v9;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v18, 1);
    v10 = objc_claimAutoreleasedReturnValue();

    v6 = (void *)v10;
  }
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C97540]), "initWithContacts:contactStore:", v6, 0);
  v12 = objc_alloc_init(MEMORY[0x1E0CEA7B0]);
  objc_msgSend(v12, "configureWithTransparentBackground");
  objc_msgSend(v11, "viewController");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "navigationItem");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setStandardAppearance:", v12);

  -[CKCoreChatController inputController](self, "inputController");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "dismissAppCardIfNecessary");

  objc_msgSend(v11, "viewController");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController showViewController:sender:](self, "showViewController:sender:", v16, self);

}

- (void)_showVCalViewerForMediaObject:(id)a3
{
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a3;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v4, "showsVCalViewer") || !EKEventStoreClass())
    goto LABEL_5;
  v5 = EKICSPreviewControllerClass();

  if (v5)
  {
    v4 = objc_alloc_init((Class)EKEventStoreClass());
    v6 = objc_alloc((Class)EKICSPreviewControllerClass());
    objc_msgSend(v10, "data");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v6, "initWithData:eventStore:options:", v7, v4, 2147483649);

    objc_msgSend(v8, "viewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController showViewController:sender:](self, "showViewController:sender:", v9, self);

LABEL_5:
  }

}

- (void)restoreEntryViewAfterPreview
{
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint8_t v6[16];
  uint8_t buf[16];

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v3, OS_LOG_TYPE_INFO, "Calling restoreEntryViewAfterPreview", buf, 2u);
    }

  }
  if (-[CKChatController isShowingPreview](self, "isShowingPreview"))
  {
    -[CKChatController setIsShowingPreview:](self, "setIsShowingPreview:", 0);
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_18DFCD000, v4, OS_LOG_TYPE_INFO, "restoreEntryViewAfterPreview: Setting showing preview to NO", v6, 2u);
      }

    }
    if (-[CKChatController entryViewWasActiveOnPreview](self, "entryViewWasActiveOnPreview"))
    {
      -[CKChatController setEntryViewWasActiveOnPreview:](self, "setEntryViewWasActiveOnPreview:", 0);
      v5 = 1;
    }
    else
    {
      v5 = 0;
    }
    -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", v5);
    -[CKChatController addOrRemoveEntryViewIfNeeded](self, "addOrRemoveEntryViewIfNeeded");
    -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
  }
}

- (BOOL)previewController:(id)a3 shouldDetectMachineReadableCodeForPreviewItem:(id)a4
{
  void *v4;
  BOOL v5;

  -[CKCoreChatController chat](self, "chat", a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isFiltered") == 0;

  return v5;
}

- (id)excludedActivityTypesForPreviewController:(id)a3
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  uint8_t v8[16];
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(v3, "currentPreviewItem");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_msgSend(v4, "mediaType") & 0xFFFFFFFE) == 2)
  {
    v9[0] = *MEMORY[0x1E0D96E08];
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled())
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_18DFCD000, v6, OS_LOG_TYPE_INFO, "Will exclude system UIActivityTypeSaveToCameraRoll from ShareSheet.", v8, 2u);
      }

    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

- (id)additionalActivitiesTypesForPreviewController:(id)a3
{
  id v3;
  void *v4;
  id v5;
  CKSaveToPhotosActivity *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  const __CFString *v10;
  int v12;
  const __CFString *v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(v3, "currentPreviewItem");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = v4;
    if ((objc_msgSend(v5, "mediaType") & 0xFFFFFFFE) == 2)
    {
      v6 = -[CKSaveToPhotosActivity initWithMediaObject:presenterViewController:]([CKSaveToPhotosActivity alloc], "initWithMediaObject:presenterViewController:", v5, v3);
      v14[0] = v6;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v14, 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v7 = 0;
    }

  }
  else
  {
    v7 = 0;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = objc_msgSend(v7, "count");
      v10 = &stru_1E276D870;
      if (!v9)
        v10 = CFSTR(" NOT");
      v12 = 138412290;
      v13 = v10;
      _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Will%@ present additional activities on ShareSheet.", (uint8_t *)&v12, 0xCu);
    }

  }
  return v7;
}

- (BOOL)previewController:(id)a3 shouldOpenURL:(id)a4 forPreviewItem:(id)a5
{
  return 1;
}

- (void)previewControllerWillDismiss:(id)a3
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  id v17;

  v4 = a3;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "presentsQuickLookController");

  if (v6)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "collectionView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "chatItems");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "currentPreviewItem");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v9, "__ck_indexOfMediaObject:", v10);

    if (v11 != 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", v11, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "cellForItemAtIndexPath:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v13)
      {
        objc_msgSend(v8, "beginDisablingTranscriptDynamicsForReason:", CFSTR("QuickLookAppearanceAnimation"));
        -[CKChatController collectionView](self, "collectionView");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15[0] = MEMORY[0x1E0C809B0];
        v15[1] = 3221225472;
        v15[2] = __60__CKChatController_QuickLook__previewControllerWillDismiss___block_invoke;
        v15[3] = &unk_1E274A108;
        v16 = v8;
        v17 = v12;
        objc_msgSend(v14, "performContentOffsetUpdateTemporarilyOverridingHoldStatus:", v15);

      }
    }

  }
}

void __60__CKChatController_QuickLook__previewControllerWillDismiss___block_invoke(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  v2 = (void *)MEMORY[0x1E0CD28B0];
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __60__CKChatController_QuickLook__previewControllerWillDismiss___block_invoke_2;
  v3[3] = &unk_1E274A208;
  v4 = *(id *)(a1 + 32);
  objc_msgSend(v2, "setCompletionBlock:", v3);
  objc_msgSend(*(id *)(a1 + 32), "scrollToItemAtIndexPath:atScrollPosition:animated:", *(_QWORD *)(a1 + 40), 2, 0);
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");

}

uint64_t __60__CKChatController_QuickLook__previewControllerWillDismiss___block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "endDisablingTranscriptDynamicsForReason:", CFSTR("QuickLookAppearanceAnimation"));
}

- (void)previewControllerDidDismiss:(id)a3
{
  id v4;
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = 136315138;
      v7 = "-[CKChatController(QuickLook) previewControllerDidDismiss:]";
      _os_log_impl(&dword_18DFCD000, v5, OS_LOG_TYPE_INFO, "Dismissing %s", (uint8_t *)&v6, 0xCu);
    }

  }
  -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", 0);
  -[CKChatController setPreviewController:](self, "setPreviewController:", 0);
  -[CKChatController restoreEntryViewAfterPreview](self, "restoreEntryViewAfterPreview");

}

- (BOOL)previewController:(id)a3 canShareItem:(id)a4
{
  id v4;
  char v5;

  v4 = a4;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v5 = objc_msgSend(v4, "canShareItem");
  else
    v5 = 1;

  return v5;
}

- (void)previewController:(id)a3 willTransitionToState:(int64_t)a4
{
  id v6;
  void *v7;
  int v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  uint8_t v13[16];

  v6 = a3;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "presentsQuickLookController");

  if (v8)
  {
    if (a4 == 3)
    {
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "collectionView");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "window");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "layoutIfNeeded");

LABEL_10:
      goto LABEL_11;
    }
    if (a4 == 1)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v13 = 0;
          _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, "willTransitionToState: Setting showing preview to YES", v13, 2u);
        }

      }
      -[CKChatController setIsShowingPreview:](self, "setIsShowingPreview:", 1);
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "collectionView");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "beginHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerQuickLook"));
      goto LABEL_10;
    }
  }
LABEL_11:

}

- (void)previewController:(id)a3 didTransitionToState:(int64_t)a4
{
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  if (a4 == 3)
  {
    objc_msgSend(a3, "currentPreviewItem");
    v17 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "chatItems");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v6, "__ck_indexOfMediaObject:", v17);

      if (v7 != 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", v7, 0);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        -[CKCoreChatController collectionViewController](self, "collectionViewController");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "collectionView");
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v10, "cellForItemAtIndexPath:", v8);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11)
        {
          objc_msgSend(v10, "cellForItemAtIndexPath:", v8);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "balloonView");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "setCanUseOpaqueMask:", objc_msgSend(v14, "transcriptCanUseOpaqueMask"));

          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            objc_msgSend(v13, "removeTransitionView");

        }
      }
    }
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "collectionView");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "endHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerQuickLook"));

  }
}

- (CGRect)previewController:(id)a3 frameForPreviewItem:(id)a4 inSourceView:(id *)a5
{
  double v5;
  double v6;
  double v7;
  double v8;
  CGRect result;

  v5 = 0.0;
  v6 = 0.0;
  v7 = 1.0;
  v8 = 1.0;
  result.size.height = v8;
  result.size.width = v7;
  result.origin.y = v6;
  result.origin.x = v5;
  return result;
}

- (id)previewController:(id)a3 transitionImageForPreviewItem:(id)a4 contentRect:(CGRect *)a5
{
  return 0;
}

- (id)previewController:(id)a3 transitionViewForPreviewItem:(id)a4 uncroppedSourceFrame:(CGRect *)a5
{
  id v8;
  id v9;
  NSObject *v10;
  objc_class *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  NSObject *v28;
  objc_class *v29;
  id v30;
  void *v31;
  double v32;
  double v33;
  __int128 v34;
  CGSize v35;
  NSObject *v36;
  objc_class *v37;
  void *v38;
  double v39;
  double v40;
  double v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  NSObject *v48;
  objc_class *v49;
  void *v50;
  objc_class *v51;
  void *v52;
  void *v54;
  void *v55;
  uint8_t v56[4];
  void *v57;
  __int16 v58;
  id v59;
  _BYTE buf[32];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = (objc_class *)objc_opt_class();
      NSStringFromClass(v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v9;
      _os_log_impl(&dword_18DFCD000, v10, OS_LOG_TYPE_INFO, "QuickLook did request preview view for transition to item <%@: %p>.", buf, 0x16u);

    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_16;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v13, OS_LOG_TYPE_INFO, "> Item is found to be a CKMediaObject.", buf, 2u);
    }

  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "collectionView");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "chatItems");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "__ck_indexOfMediaObject:", v9);

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl(&dword_18DFCD000, v18, OS_LOG_TYPE_INFO, "> Media Object is found to be at row {%ld) in the transcript.", buf, 0xCu);
    }

  }
  if (v17 != 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathForRow:inSection:", v17, 0);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "cellForItemAtIndexPath:", v55);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "balloonView");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "setHidden:", 0);
    objc_msgSend(v22, "setCanUseOpaqueMask:", 0);
    objc_msgSend(v22, "prepareForDisplayIfNeeded");
    objc_msgSend(v21, "layoutIfNeeded");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v23 = v22;
      objc_msgSend(v23, "uncroppedSourceFrame");
      a5->origin.x = v24;
      a5->origin.y = v25;
      a5->size.width = v26;
      a5->size.height = v27;
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v23, "uncroppedSourceView");
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = (objc_class *)objc_opt_class();
          NSStringFromClass(v29);
          v30 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "uncroppedSourceView");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v30;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v31;
          _os_log_impl(&dword_18DFCD000, v28, OS_LOG_TYPE_INFO, "> For a CKAttachmentBalloonView, we are returning <%@: %p>.", buf, 0x16u);

        }
      }
      objc_msgSend(v23, "uncroppedSourceView", v54);
      v20 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_47;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v34 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
        *(_OWORD *)buf = *MEMORY[0x1E0C9D648];
        *(_OWORD *)&buf[16] = v34;
        objc_msgSend(v22, "transitionViewForCurrentItem:sourceFrame:", v9, buf);
        v20 = (id)objc_claimAutoreleasedReturnValue();
        v35 = *(CGSize *)&buf[16];
        a5->origin = *(CGPoint *)buf;
        a5->size = v35;
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            v37 = (objc_class *)objc_opt_class();
            NSStringFromClass(v37);
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v56 = 138412546;
            v57 = v38;
            v58 = 2048;
            v59 = v20;
            _os_log_impl(&dword_18DFCD000, v36, OS_LOG_TYPE_INFO, "> For a CKPhotoStackBalloonView, we are returning <%@: %p>.", v56, 0x16u);

          }
        }
        goto LABEL_47;
      }
      if (!IMOSLoggingEnabled())
        goto LABEL_46;
      OSLogHandleForIMFoundationCategory();
      v48 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
      {
        v51 = (objc_class *)objc_opt_class();
        NSStringFromClass(v51);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v52;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v22;
        _os_log_impl(&dword_18DFCD000, v48, OS_LOG_TYPE_INFO, "> For all other balloonView types, we are returning <%@: %p>.", buf, 0x16u);

      }
      goto LABEL_45;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v9, "originalSize");
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
LABEL_38:
        if (!IMOSLoggingEnabled())
        {
LABEL_46:
          v20 = v22;
LABEL_47:

          goto LABEL_48;
        }
        OSLogHandleForIMFoundationCategory();
        v48 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
        {
          v49 = (objc_class *)objc_opt_class();
          NSStringFromClass(v49);
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v50;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v22;
          _os_log_impl(&dword_18DFCD000, v48, OS_LOG_TYPE_INFO, "> For a CKImageBalloonView, we are returning <%@: %p>.", buf, 0x16u);

        }
LABEL_45:

        goto LABEL_46;
      }
      objc_msgSend(v9, "pxSize");
    }
    v39 = v32;
    v40 = v33;
    objc_msgSend(v22, "bounds");
    a5->origin.x = AdaptSizeToRect(v41, v42, v43, v44, v39, v40);
    a5->origin.y = v45;
    a5->size.width = v46;
    a5->size.height = v47;
    goto LABEL_38;
  }

LABEL_16:
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
    }

  }
  v20 = 0;
LABEL_48:

  return v20;
}

- (int64_t)previewController:(id)a3 editingModeForPreviewItem:(id)a4
{
  return 0;
}

- (id)_previewingViewControllerForHitView:(id)a3 indexPath:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  _BOOL4 v16;
  CKQLPreviewController *v17;
  void *v18;
  void *v19;
  void *v20;
  char v21;
  CKQLPreviewControllerDataSource *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  objc_class *v36;
  id v37;
  void *v38;
  void *v39;
  NSObject *v41;
  void *v42;
  _BYTE buf[12];
  __int16 v44;
  const __CFString *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "balloonViewForIndexPath:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || !IMEnableTranscriptClickyOrb())
        goto LABEL_36;
    }
  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "chatItems");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v7 || objc_msgSend(v7, "section") || (v12 = objc_msgSend(v7, "item"), v12 >= objc_msgSend(v11, "count")))
  {
LABEL_35:

LABEL_36:
    v30 = 0;
    goto LABEL_37;
  }
  objc_msgSend(v11, "objectAtIndex:", objc_msgSend(v7, "item"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v13, "dataSource");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "stackView");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "currentAssetReference");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController _previewViewControllerForAssetReference:dataSource:previewDelegate:previewMode:](self, "_previewViewControllerForAssetReference:dataSource:previewDelegate:previewMode:", v33, v31, self, 2);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "setChatItem:", v13);

    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
LABEL_34:

        goto LABEL_35;
      }
      v34 = v13;
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "transcriptIdentifier");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "contentViewControllerForContext:", v35);
      v30 = (void *)objc_claimAutoreleasedReturnValue();

    }
    goto LABEL_26;
  }
  objc_msgSend(v13, "mediaObject");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v14, "shouldBeQuickLooked"))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (_previewingViewControllerForHitView_indexPath___pred_CLLocationCoordinate2DIsValidCoreLocation != -1)
        dispatch_once(&_previewingViewControllerForHitView_indexPath___pred_CLLocationCoordinate2DIsValidCoreLocation, &__block_literal_global_172_0);
      if (((uint64_t (*)(uint64_t))_previewingViewControllerForHitView_indexPath___CLLocationCoordinate2DIsValid)(objc_msgSend(v14, "coordinate")))
      {
        v36 = (objc_class *)MEMORY[0x193FF3C18](CFSTR("MUPlaceViewController"), CFSTR("MapsUI"));
        if (v36)
        {
          v37 = [v36 alloc];
          objc_msgSend(v14, "mapItem");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = (void *)objc_msgSend(v37, "initWithMapItem:", v38);

          objc_msgSend(v14, "title");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "setTitle:", v39);

        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v41 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              *(_QWORD *)&buf[4] = CFSTR("MUPlaceViewController");
              v44 = 2112;
              v45 = CFSTR("MapsUI");
              _os_log_impl(&dword_18DFCD000, v41, OS_LOG_TYPE_INFO, "Failed weak linking %@ from %@.", buf, 0x16u);
            }

          }
          v30 = 0;
        }
        goto LABEL_20;
      }
    }

    goto LABEL_34;
  }
  *(_QWORD *)buf = 0;
  -[CKChatController previewItemsForMediaObject:currentItemIndex:containsRestoring:](self, "previewItemsForMediaObject:currentItemIndex:containsRestoring:", v14, buf, 0);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController previewController](self, "previewController");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15 == 0;

  if (v16)
  {
    v17 = objc_alloc_init(CKQLPreviewController);
    -[CKChatController setPreviewController:](self, "setPreviewController:", v17);

    -[CKChatController previewController](self, "previewController");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "setDelegate:", self);

  }
  -[CKChatController qlPreviewDataSource](self, "qlPreviewDataSource");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "previewItems");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v42, "isEqualToArray:", v20);

  if ((v21 & 1) == 0)
  {
    v22 = objc_alloc_init(CKQLPreviewControllerDataSource);
    -[CKChatController setQlPreviewDataSource:](self, "setQlPreviewDataSource:", v22);

    -[CKChatController qlPreviewDataSource](self, "qlPreviewDataSource");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "setPreviewItems:", v42);

  }
  -[CKChatController previewController](self, "previewController");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController qlPreviewDataSource](self, "qlPreviewDataSource");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setDataSource:", v25);

  -[CKChatController previewController](self, "previewController");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "setCurrentPreviewItemIndex:", *(_QWORD *)buf);

  -[CKChatController previewController](self, "previewController");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "refreshCurrentPreviewItem");

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v6, "invisibleInkEffectEnabled"))
  {
    objc_msgSend(v6, "invisibleInkEffectController");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController setPreviewInvisibleInkEffectController:](self, "setPreviewInvisibleInkEffectController:", v28);
    if ((objc_msgSend(v28, "isSuspended") & 1) == 0)
    {
      CKBalloonViewForClass((objc_class *)objc_msgSend(v13, "balloonViewClass"));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "configureForMessagePart:", v13);
      objc_msgSend(v29, "setInvisibleInkEffectEnabled:", 0);
      objc_msgSend(v29, "setCanUseOpaqueMask:", 0);
      objc_msgSend(v29, "prepareForDisplayIfNeeded");
      -[CKChatController setPreviewRevealView:](self, "setPreviewRevealView:", v29);

    }
  }
  -[CKChatController previewController](self, "previewController");
  v30 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_20:
LABEL_26:

LABEL_37:
  return v30;
}

void *__77__CKChatController_QuickLook___previewingViewControllerForHitView_indexPath___block_invoke()
{
  void *result;

  result = (void *)MEMORY[0x193FF3C24]("CLLocationCoordinate2DIsValid", CFSTR("CoreLocation"));
  _previewingViewControllerForHitView_indexPath___CLLocationCoordinate2DIsValid = result;
  return result;
}

- (id)_previewingViewControllerForLocation:(CGPoint)a3 inSourceView:(id)a4
{
  double y;
  double x;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void *v17;

  y = a3.y;
  x = a3.x;
  v7 = a4;
  objc_msgSend(v7, "hitTest:withEvent:", 0, x, y);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v8, "superview");
    v9 = objc_claimAutoreleasedReturnValue();

    v8 = (void *)v9;
  }
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "collectionView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "convertPoint:fromView:", v7, x, y);
  v13 = v12;
  v15 = v14;

  objc_msgSend(v11, "indexPathForItemAtPoint:", v13, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _previewingViewControllerForHitView:indexPath:](self, "_previewingViewControllerForHitView:indexPath:", v8, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

- (id)previewingContext:(id)a3 viewControllerForLocation:(CGPoint)a4
{
  double y;
  double x;
  id v7;
  void *v8;
  char v9;
  void *v10;
  void *v11;

  y = a4.y;
  x = a4.x;
  v7 = a3;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "disableTranscriptOrb");

  if ((v9 & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    objc_msgSend(v7, "sourceView");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController _previewingViewControllerForLocation:inSourceView:](self, "_previewingViewControllerForLocation:inSourceView:", v11, x, y);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v10;
}

- (void)willPresentPreviewViewController:(id)a3 forLocation:(CGPoint)a4 inSourceView:(id)a5
{
  double y;
  double x;
  id v9;
  id v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  char v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;

  y = a4.y;
  x = a4.x;
  v9 = a5;
  v10 = a3;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "collectionView");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "convertPoint:fromView:", v9, x, y);
  v14 = v13;
  v16 = v15;

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "collectionView");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "indexPathForItemAtPoint:", v14, v16);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "collectionView");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "cellForItemAtIndexPath:", v19);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  v23 = v22;
  -[CKScrollViewController beginHoldingScrollGeometryUpdatesForReason:](self, "beginHoldingScrollGeometryUpdatesForReason:", CFSTR("PreviewController"));
  v24 = objc_opt_respondsToSelector();
  v25 = v23;
  if ((v24 & 1) != 0)
  {
    objc_msgSend(v23, "balloonView");
    v31 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "setCanUseOpaqueMask:", 0);
    objc_msgSend(v31, "prepareForDisplayIfNeeded");

    v25 = v31;
  }
  v32 = v25;
  -[CKChatController setPreviewSourceView:](self, "setPreviewSourceView:", v25);
  objc_msgSend(v10, "presentationController");
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v26, "setSourceView:", v32);
  objc_msgSend(v32, "bounds");
  objc_msgSend(v26, "setSourceRect:");
  -[CKChatController entryView](self, "entryView");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "contentView");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController setEntryViewWasActiveOnPreview:](self, "setEntryViewWasActiveOnPreview:", objc_msgSend(v28, "isActive"));

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "collectionView");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "beginHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerQuickLook"));

}

- (void)previewingContext:(id)a3 commitViewController:(id)a4
{
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  objc_super v18;
  uint8_t buf[16];

  v6 = a3;
  v7 = a4;
  objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "trackEvent:", *MEMORY[0x1E0D387C8]);

  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_INFO, "commitViewController: Setting showing preview to YES", buf, 2u);
    }

  }
  -[CKChatController setIsShowingPreview:](self, "setIsShowingPreview:", 1);
  -[CKChatController previewController](self, "previewController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController previewController](self, "previewController");
  v11 = (id)objc_claimAutoreleasedReturnValue();

  if (v11 != v7)
  {
    -[CKChatController restoreEntryViewAfterPreview](self, "restoreEntryViewAfterPreview");
    -[CKChatController previewSourceView](self, "previewSourceView");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      -[CKCoreChatController collectionViewController](self, "collectionViewController");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController previewSourceView](self, "previewSourceView");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "indexPathForBalloonView:", v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (v15)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v12, "pluginViewController");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v16, "conformsToProtocol:", &unk_1EE31CDC0)
            && (objc_opt_respondsToSelector() & 1) != 0)
          {
            v17 = objc_msgSend(v16, "handlePresentationAction");

            if ((v17 & 1) != 0)
              goto LABEL_19;
            goto LABEL_18;
          }

        }
      }

    }
LABEL_18:
    -[CKChatController showViewController:sender:](self, "showViewController:sender:", v7, self);
LABEL_19:

    goto LABEL_20;
  }
  v18.receiver = self;
  v18.super_class = (Class)CKChatController;
  -[CKChatController becomeFirstResponder](&v18, sel_becomeFirstResponder);
  if (CKIsRunningInMacCatalyst())
    objc_msgSend(v10, "presentPreview");
  else
    -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v10, 1, 0);
LABEL_20:

}

- (void)didDismissPreviewViewController:(id)a3 committing:(BOOL)a4
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  -[CKScrollViewController endHoldingScrollGeometryUpdatesForReason:](self, "endHoldingScrollGeometryUpdatesForReason:", CFSTR("PreviewController"));
  -[CKChatController previewSourceView](self, "previewSourceView");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setCanUseOpaqueMask:", objc_msgSend(v6, "transcriptCanUseOpaqueMask"));

    objc_msgSend(v11, "prepareForDisplayIfNeeded");
  }
  -[CKChatController setPreviewSourceView:](self, "setPreviewSourceView:", 0);
  -[CKChatController previewInvisibleInkEffectController](self, "previewInvisibleInkEffectController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "returnBorrowedEffectView");

  -[CKChatController previewInvisibleInkEffectController](self, "previewInvisibleInkEffectController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setSuspended:", 0);

  -[CKChatController setPreviewInvisibleInkEffectController:](self, "setPreviewInvisibleInkEffectController:", 0);
  if (!a4)
  {
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "collectionView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "endHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerQuickLook"));

  }
}

- (id)previewActionsForPreviewController:(id)a3
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  void *v31;
  CKChatController *v32;
  id v33;
  _QWORD v34[4];
  id v35;
  _QWORD v36[4];
  id v37;

  v4 = (void *)MEMORY[0x1E0C99DE8];
  v5 = a3;
  objc_msgSend(v4, "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "currentPreviewItem");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v8 = v7;
    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "chatItems");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "__ck_indexOfMediaObject:", v8);

    -[CKCoreChatController collectionViewController](self, "collectionViewController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "chatItems");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "objectAtIndex:", v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v14, "canCopy"))
    {
      v15 = (void *)MEMORY[0x1E0CEA898];
      CKFrameworkBundle();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("COPY"), &stru_1E276D870, CFSTR("ChatKit"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v36[0] = MEMORY[0x1E0C809B0];
      v36[1] = 3221225472;
      v36[2] = __66__CKChatController_QuickLook__previewActionsForPreviewController___block_invoke;
      v36[3] = &unk_1E2755498;
      v37 = v8;
      objc_msgSend(v15, "actionWithTitle:style:handler:", v17, 0, v36);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addObject:", v18);

    }
    if (objc_msgSend(v14, "canExport"))
    {
      v19 = (void *)MEMORY[0x1E0CEA898];
      CKFrameworkBundle();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("BALLOON_EXPORT_CALLOUT"), &stru_1E276D870, CFSTR("ChatKit"));
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v34[0] = MEMORY[0x1E0C809B0];
      v34[1] = 3221225472;
      v34[2] = __66__CKChatController_QuickLook__previewActionsForPreviewController___block_invoke_2;
      v34[3] = &unk_1E2755498;
      v35 = v8;
      objc_msgSend(v19, "actionWithTitle:style:handler:", v21, 0, v34);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addObject:", v22);

    }
    if (objc_msgSend(v14, "canForward"))
    {
      v23 = (void *)MEMORY[0x1E0CEA898];
      CKFrameworkBundle();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "localizedStringForKey:value:table:", CFSTR("FORWARD"), &stru_1E276D870, CFSTR("ChatKit"));
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = MEMORY[0x1E0C809B0];
      v29 = 3221225472;
      v30 = __66__CKChatController_QuickLook__previewActionsForPreviewController___block_invoke_315;
      v31 = &unk_1E27554C0;
      v32 = self;
      v33 = v14;
      objc_msgSend(v23, "actionWithTitle:style:handler:", v25, 0, &v28);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addObject:", v26, v28, v29, v30, v31, v32);

    }
  }

  return v6;
}

void __66__CKChatController_QuickLook__previewActionsForPreviewController___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CEA810], "generalPasteboard");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "pasteboardItemProvider");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setItemProviders:", v4);

}

void __66__CKChatController_QuickLook__previewActionsForPreviewController___block_invoke_2(uint64_t a1)
{
  CKMediaObjectExportManager *v2;
  _QWORD v3[4];
  id v4;

  v2 = -[CKMediaObjectExportManager initWithMediaObject:]([CKMediaObjectExportManager alloc], "initWithMediaObject:", *(_QWORD *)(a1 + 32));
  -[CKMediaObjectExportManager setMetricsSource:](v2, "setMetricsSource:", *MEMORY[0x1E0D388A8]);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __66__CKChatController_QuickLook__previewActionsForPreviewController___block_invoke_3;
  v3[3] = &unk_1E274B1A0;
  v4 = *(id *)(a1 + 32);
  -[CKMediaObjectExportManager exportQueuedMediaObjectsWithCompletion:](v2, "exportQueuedMediaObjectsWithCompletion:", v3);

}

void __66__CKChatController_QuickLook__previewActionsForPreviewController___block_invoke_3(uint64_t a1, int a2, void *a3)
{
  id v5;
  int v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  int v10;
  id v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = IMOSLoggingEnabled();
  if (a2)
  {
    if (v6)
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = *(void **)(a1 + 32);
        v10 = 138412290;
        v11 = v8;
        _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "Successfully quick saved media object: %@", (uint8_t *)&v10, 0xCu);
      }
LABEL_9:

    }
  }
  else if (v6)
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 138412546;
      v11 = v5;
      v12 = 2112;
      v13 = v9;
      _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_INFO, "Error quick saving media object. error: %@, mediaObject: %@", (uint8_t *)&v10, 0x16u);
    }
    goto LABEL_9;
  }

}

void __66__CKChatController_QuickLook__previewActionsForPreviewController___block_invoke_315(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "setIsShowingPreview:", 0);
  v8[0] = *(_QWORD *)(a1 + 40);
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "shouldShowSubject");
  objc_msgSend(*(id *)(a1 + 32), "textInputContextIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKComposition compositionForMessageParts:preserveSubject:contextIdentifier:](CKComposition, "compositionForMessageParts:preserveSubject:contextIdentifier:", v2, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "chatController:forwardComposition:", *(_QWORD *)(a1 + 32), v6);

}

- (BOOL)shouldShowReplyButtonForMediaObject:(id)a3 previewController:(id)a4
{
  void *v5;
  void *v6;
  char v7;

  -[CKChatController _chatItemForMediaObject:](self, "_chatItemForMediaObject:", a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[CKCoreChatController conversation](self, "conversation");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "canReplyToChatItem:", v5);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

- (void)replyButtonTappedForMediaObject:(id)a3 previewController:(id)a4
{
  void *v6;
  id v7;

  v7 = a4;
  -[CKChatController _chatItemForMediaObject:](self, "_chatItemForMediaObject:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
    -[CKChatController showModalInlineReplyControllerForChatItem:fromViewController:](self, "showModalInlineReplyControllerForChatItem:fromViewController:", v6, v7);

}

- (BOOL)shouldHideInteractionOptions
{
  void *v3;
  char v4;
  void *v5;
  int v6;
  void *v7;
  int v8;

  -[CKCoreChatController conversation](self, "conversation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hasLeftGroupChat");

  -[CKCoreChatController conversation](self, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isReadOnlyChat");

  -[CKCoreChatController conversation](self, "conversation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isBusinessChatDisabled");

  return (-[CKChatController isEditing](self, "isEditing") & 1) != 0
      || (v4 & 1) != 0
      || (!-[CKCoreChatController shouldDisplayTextEntry](self, "shouldDisplayTextEntry") | v8 | v6) == 1;
}

- (BOOL)previewControllerIsInGroupConversation:(id)a3
{
  void *v3;
  char v4;

  -[CKCoreChatController conversation](self, "conversation", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isGroupConversation");

  return v4;
}

- (void)sendMessageAcknowledgment:(int64_t)a3 chatItem:(id)a4 previewController:(id)a5
{
  id v7;
  id v8;

  v7 = a4;
  -[CKCoreChatController chat](self, "chat");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "sendMessageAcknowledgment:forChatItem:", a3, v7);

}

- (id)contextualCKChatItemsForPreviewController:(id)a3
{
  void *v3;
  void *v4;

  -[CKCoreChatController collectionViewController](self, "collectionViewController", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "chatItems");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)previewControllerDidCancelDismiss:(id)a3
{
  void *v4;
  id v5;

  -[CKChatController entryView](self, "entryView", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "endDeferringEntryFieldCollapsedStateChanges");

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "endHoldingUpdatesAfterQuicklookCancelsDismiss");

}

- (id)_chatItemForMediaObject:(id)a3
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v31 = a3;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "chatItems");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v30 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
  if (!v30)
    goto LABEL_22;
  v6 = *(_QWORD *)v37;
  v26 = *(_QWORD *)v37;
  v27 = v5;
  do
  {
    for (i = 0; i != v30; ++i)
    {
      if (*(_QWORD *)v37 != v6)
        objc_enumerationMutation(v5);
      v8 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v9 = v8;
        objc_msgSend(v9, "mediaObject");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "transferGUID");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "transferGUID");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v11, "isEqualToString:", v12);

        if ((v13 & 1) != 0)
          goto LABEL_23;
        goto LABEL_8;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v28 = v8;
        v14 = v8;
        v32 = 0u;
        v33 = 0u;
        v34 = 0u;
        v35 = 0u;
        v29 = v14;
        objc_msgSend(v14, "aggregateChatItems");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
        if (!v16)
        {
LABEL_18:

          v6 = v26;
          v5 = v27;
          v8 = v28;
LABEL_8:

          continue;
        }
        v17 = v16;
        v18 = *(_QWORD *)v33;
LABEL_12:
        v19 = 0;
        while (1)
        {
          if (*(_QWORD *)v33 != v18)
            objc_enumerationMutation(v15);
          v20 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * v19);
          objc_msgSend(v20, "mediaObject", v26, v27);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "transferGUID");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "transferGUID");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = objc_msgSend(v22, "isEqualToString:", v23);

          if ((v24 & 1) != 0)
            break;
          if (v17 == ++v19)
          {
            v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
            if (v17)
              goto LABEL_12;
            goto LABEL_18;
          }
        }
        v9 = v20;

        v6 = v26;
        v5 = v27;
        if (v9)
          goto LABEL_23;
      }
    }
    v30 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
  }
  while (v30);
LABEL_22:
  v9 = 0;
LABEL_23:

  return v9;
}

- (BOOL)respondsToSelector:(SEL)a3
{
  BOOL v3;
  void *v4;
  objc_super v6;

  if (sel_animateRevealWithInteractionProgress_forPreviewingAtLocation_inSourceView_containerView_ == a3)
  {
    -[CKChatController previewRevealView](self, "previewRevealView");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v4 != 0;

  }
  else
  {
    v6.receiver = self;
    v6.super_class = (Class)CKChatController;
    return -[CKChatController respondsToSelector:](&v6, sel_respondsToSelector_);
  }
  return v3;
}

- (void)animateRevealWithInteractionProgress:(id)a3 forPreviewingAtLocation:(CGPoint)a4 inSourceView:(id)a5 containerView:(id)a6
{
  id v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;

  v24 = a3;
  v8 = a5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_msgSend(v24, "didEnd") & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "keyWindow");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "bounds");
    objc_msgSend(v8, "convertRect:toView:", v10);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    -[CKChatController previewRevealView](self, "previewRevealView");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "addSubview:", v19);

    -[CKChatController previewRevealView](self, "previewRevealView");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setFrame:", v12, v14, v16, v18);

    -[CKChatController previewRevealView](self, "previewRevealView");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController previewInvisibleInkEffectController](self, "previewInvisibleInkEffectController");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "borrowEffectView");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "addSubview:", v23);

    objc_msgSend(v24, "addProgressObserver:", self);
  }
  else
  {
    -[CKChatController setPreviewRevealView:](self, "setPreviewRevealView:", 0);
  }

}

- (void)interactionProgressDidUpdate:(id)a3
{
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  float v11;
  CGFloat v12;
  void *v13;
  CGAffineTransform v14;

  v4 = (void *)MEMORY[0x1E0CD27D0];
  v5 = *MEMORY[0x1E0CD3048];
  v6 = a3;
  objc_msgSend(v4, "functionWithName:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "percentComplete");
  v9 = v8;

  *(float *)&v10 = v9;
  objc_msgSend(v7, "_solveForInput:", v10);
  v12 = v11 * 0.0175 + 1.0;
  -[CKChatController previewRevealView](self, "previewRevealView");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  CGAffineTransformMakeScale(&v14, v12, v12);
  objc_msgSend(v13, "setTransform:", &v14);

}

- (void)interactionProgress:(id)a3 didEnd:(BOOL)a4
{
  void *v5;
  id v6;

  v6 = a3;
  -[CKChatController previewRevealView](self, "previewRevealView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "removeFromSuperview");

  -[CKChatController setPreviewRevealView:](self, "setPreviewRevealView:", 0);
  objc_msgSend(v6, "removeProgressObserver:", self);

}

- (void)presentCollaborationPopoverUI
{
  uint64_t v3;
  void *v4;
  void *v5;
  int v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  CKFullscreenBrowserNavigationController *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[5];
  _QWORD aBlock[5];

  v3 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __64__CKChatController_Collaboration__presentCollaborationPopoverUI__block_invoke;
  aBlock[3] = &unk_1E2756190;
  aBlock[4] = self;
  v4 = _Block_copy(aBlock);
  if (CKIsRunningInMacCatalyst()
    && (objc_msgSend(MEMORY[0x1E0D11698], "instancesRespondToSelector:", sel_initWithCollaborationSharingOptions_layoutMargins_userDidChangeOption_contentSizeDidChange_) & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v6 = objc_msgSend(MEMORY[0x1E0D11698], "instancesRespondToSelector:", sel_initWithCollaborationSharingOptionsView_userDidChangeOption_);
    v7 = objc_alloc(MEMORY[0x1E0D11698]);
    -[CKChatController composition](self, "composition");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "collaborationShareOptions");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v6)
    {
      v5 = (void *)objc_msgSend(v7, "initWithCollaborationSharingOptionsView:userDidChangeOption:", v9, v4);
    }
    else
    {
      objc_msgSend(v9, "optionsGroups");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v18[0] = v3;
      v18[1] = 3221225472;
      v18[2] = __64__CKChatController_Collaboration__presentCollaborationPopoverUI__block_invoke_2;
      v18[3] = &unk_1E27561B8;
      v18[4] = self;
      v5 = (void *)objc_msgSend(v7, "initWithSharingOptionsView:userDidChangeOption:", v11, v18);

    }
  }
  objc_msgSend(v5, "setModalPresentationStyle:", 1);
  objc_msgSend(v5, "setModalTransitionStyle:", 0);
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA380]), "initWithBarButtonSystemItem:target:action:", 0, self, sel__dismissCollaborationPopoverUI);
  objc_msgSend(v5, "navigationItem");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setRightBarButtonItem:", v12);

  v14 = -[CKFullscreenBrowserNavigationController initWithRootViewController:]([CKFullscreenBrowserNavigationController alloc], "initWithRootViewController:", v5);
  -[CKFullscreenBrowserNavigationController navigationBar](v14, "navigationBar");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setTranslucent:", 0);
  objc_msgSend(v15, "_setShadowAlpha:", 0.0);
  objc_msgSend(MEMORY[0x1E0CEA478], "systemGroupedBackgroundColor");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "_setBackgroundColor:", v16);

  +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "presentViewController:fromViewController:presentationHandler:dismissalHandler:animated:completion:", v14, self, 0, 0, 1, 0);

}

void __64__CKChatController_Collaboration__presentCollaborationPopoverUI__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v6 = *(void **)(a1 + 32);
  v7 = a5;
  objc_msgSend(v6, "composition");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "shelfPluginPayload");
  v12 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "setSkipConfigurePlugin:", 0);
  objc_msgSend(v7, "summary");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setCollaborationOptionsSummary:", v9);

  objc_msgSend(*(id *)(a1 + 32), "composition");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "compositionByAppendingText:shelfPluginPayload:shelfMediaObject:collaborationShareOptions:", 0, v12, 0, v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "setComposition:", v11);
}

void __64__CKChatController_Collaboration__presentCollaborationPopoverUI__block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v7;
  id v8;

  objc_msgSend(MEMORY[0x1E0CD7420], "shareOptionsWithOptionsGroups:", a5);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "composition");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "compositionWithCollaborationShareOptions:", v8);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setComposition:", v7);

}

- (void)_dismissCollaborationPopoverUI
{
  id v2;

  +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, 0);

}

- (void)presentCollaborationFailureAlertForComposition:(id)a3 sharingURL:(id)a4 error:(id)a5 completion:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  _QWORD block[5];
  id v15;
  id v16;
  id v17;
  id v18;

  v13 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  if (objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread"))
  {
    -[CKChatController _actuallyPresentCollaborationFailureAlertForComposition:sharingURL:error:completion:](self, "_actuallyPresentCollaborationFailureAlertForComposition:sharingURL:error:completion:", v13, v10, v11, v12);
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __110__CKChatController_Collaboration__presentCollaborationFailureAlertForComposition_sharingURL_error_completion___block_invoke;
    block[3] = &unk_1E274CC88;
    block[4] = self;
    v15 = v13;
    v16 = v10;
    v17 = v11;
    v18 = v12;
    dispatch_sync(MEMORY[0x1E0C80D38], block);

  }
}

uint64_t __110__CKChatController_Collaboration__presentCollaborationFailureAlertForComposition_sharingURL_error_completion___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_actuallyPresentCollaborationFailureAlertForComposition:sharingURL:error:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

- (void)_actuallyPresentCollaborationFailureAlertForComposition:(id)a3 sharingURL:(id)a4 error:(id)a5 completion:(id)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  const __CFString *v29;
  void *v30;
  int v31;
  void *v32;
  void *v33;
  void *v34;
  const __CFString *v35;
  void *v36;
  int v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  char v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  BOOL v53;
  __CFString *v54;
  uint64_t v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  __CFString *v66;
  void *v67;
  void *v68;
  void *v69;
  int v70;
  void *v71;
  void *v72;
  void *v73;
  const __CFString *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  const __CFString *v80;
  void *v81;
  void *v82;
  id v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  __CFString *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  id v99;
  id v100;
  void *v101;
  void *v102;
  uint64_t v103;
  __CFString *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  void *v110;
  void *v111;
  void *v112;
  uint64_t v113;
  void *v114;
  id v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  uint64_t v123;
  __CFString *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  id v130;
  id v131;
  void *v132;
  void *v133;
  void *v134;
  uint64_t v135;
  __CFString *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  uint64_t v142;
  __CFString *v143;
  void *v144;
  void *v145;
  const __CFString *v146;
  NSObject *v147;
  void *v148;
  void *v149;
  void *v150;
  id v151;
  void *v152;
  void *v153;
  void *v154;
  uint64_t v155;
  __CFString *v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  id v160;
  id v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  uint64_t v172;
  __CFString *v173;
  void *v174;
  uint64_t v175;
  void *v176;
  NSObject *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  uint64_t v189;
  void *v190;
  CKChatController *v191;
  id v192;

  v10 = a3;
  v192 = a4;
  v11 = a5;
  v12 = a6;
  objc_msgSend(v10, "sourceApplicationID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "isEqual:", CFSTR("com.apple.FaceTime"));

  if (v14)
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", CFSTR("sms://"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    TUOpenURL();

  }
  v16 = v192;
  v190 = v12;
  v191 = self;
  if (!v11)
    goto LABEL_17;
  objc_msgSend(v11, "domain");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "isEqualToString:", *MEMORY[0x1E0C947D8]);

  if (v18)
  {
    -[CKChatController composition](self, "composition");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "shelfPluginPayload");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v20, "collaborationMetadata");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "initiatorHandle");
    v22 = objc_claimAutoreleasedReturnValue();

    v23 = objc_msgSend(v11, "code");
    v187 = (void *)v22;
    if (v23 <= 109)
    {
      switch(v23)
      {
        case 3:
        case 4:
          CKFrameworkBundle();
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = v20;
          objc_msgSend(v24, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_NO_INTERNET_CONNECTION_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          CKFrameworkBundle();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = v27;
          v29 = CFSTR("COLLABORATION_ERROR_NO_INTERNET_CONNECTION_MESSAGE");
          goto LABEL_45;
        case 6:
          CKFrameworkBundle();
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = v20;
          objc_msgSend(v76, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_ICLOUD_UNAVAILABLE_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          CKFrameworkBundle();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = v27;
          v29 = CFSTR("COLLABORATION_ERROR_TRY_AGAIN_LATER");
          goto LABEL_45;
        case 7:
        case 23:
        case 34:
          goto LABEL_24;
        case 9:
          CKFrameworkBundle();
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          v78 = v20;
          objc_msgSend(v77, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_NOT_AUTHENTICATED_ALERT_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          CKFrameworkBundle();
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = v79;
          v80 = CFSTR("COLLABORATION_ERROR_NOT_AUTHENTICATED_ALERT_MESSAGE");
          goto LABEL_57;
        case 18:
          objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
          v81 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v81, "appNameFromSharingURL:", v192);
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          if (v82)
          {
            v179 = v81;
            v184 = v20;
            v83 = v10;
            v84 = (void *)MEMORY[0x1E0CB3940];
            CKFrameworkBundle();
            v85 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v85, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_INCOMPATIBLE_VERSION_ALERT_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v87, "appNameFromSharingURL:", v192);
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v84, "stringWithFormat:", v86, v88);
            v89 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
            v90 = (void *)objc_claimAutoreleasedReturnValue();
            v91 = objc_msgSend(v90, "userInterfaceLayoutDirection");

            if (v91 == 1)
              v92 = CFSTR("\u200F");
            else
              v92 = CFSTR("\u200E");
            -[__CFString stringByAppendingString:](v92, "stringByAppendingString:", v89);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = v83;
            v16 = v192;
            v20 = v184;
            v81 = v179;
          }
          else
          {
            CKFrameworkBundle();
            v89 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v89, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_UNKNOWN_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
            v26 = (void *)objc_claimAutoreleasedReturnValue();
          }

          CKFrameworkBundle();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v28, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_INCOMPATIBLE_VERSION_ALERT_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v41 = 2;
          v44 = 1;
          goto LABEL_93;
        case 25:
          goto LABEL_21;
        case 27:
          CKFrameworkBundle();
          v93 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = v20;
          objc_msgSend(v93, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_LIMIT_EXCEEDED_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          CKFrameworkBundle();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = v27;
          v29 = CFSTR("COLLABORATION_ERROR_LIMIT_EXCEEDED_MESSAGE");
          goto LABEL_45;
        case 29:
          CKFrameworkBundle();
          v94 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = v20;
          objc_msgSend(v94, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_TOO_MANY_PARTICIPANTS_ALERT_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          CKFrameworkBundle();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = v27;
          v29 = CFSTR("COLLABORATION_ERROR_TOO_MANY_PARTICIPANTS_ALERT_MESSAGE");
LABEL_45:
          v20 = v25;
          objc_msgSend(v27, "localizedStringForKey:value:table:", v29, &stru_1E276D870, CFSTR("ChatKit"));
          v95 = objc_claimAutoreleasedReturnValue();
          goto LABEL_53;
        case 32:
          v185 = v20;
          v96 = (void *)MEMORY[0x1E0CB3940];
          CKFrameworkBundle();
          v97 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v97, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_RESTRICTION_ENABLED_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
          v98 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v96, "stringWithFormat:", v98, v22);
          v99 = v11;
          v100 = v10;
          v101 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
          v102 = (void *)objc_claimAutoreleasedReturnValue();
          v103 = objc_msgSend(v102, "userInterfaceLayoutDirection");

          if (v103 == 1)
            v104 = CFSTR("\u200F");
          else
            v104 = CFSTR("\u200E");
          -[__CFString stringByAppendingString:](v104, "stringByAppendingString:", v101);
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          v10 = v100;
          v11 = v99;
          v105 = (void *)MEMORY[0x1E0CB3940];
          CKFrameworkBundle();
          v106 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v106, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_RESTRICTION_ENABLED_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
          v107 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v105, "stringWithFormat:", v107, v22);
          v28 = (void *)objc_claimAutoreleasedReturnValue();

          v16 = v192;
          objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
          v108 = (void *)objc_claimAutoreleasedReturnValue();
          v109 = objc_msgSend(v108, "userInterfaceLayoutDirection");

          v53 = v109 == 1;
          v20 = v185;
          if (v53)
            v54 = CFSTR("\u200F");
          else
            v54 = CFSTR("\u200E");
          goto LABEL_52;
        case 33:
          CKFrameworkBundle();
          v110 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v110, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_PARTICIPANT_MAY_NEED_VERIFICATION_ALERT_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          CKFrameworkBundle();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v28, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_PARTICIPANT_MAY_NEED_VERIFICATION_ALERT_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v44 = 0;
          v41 = 3;
          goto LABEL_93;
        case 36:
          CKFrameworkBundle();
          v111 = (void *)objc_claimAutoreleasedReturnValue();
          v78 = v20;
          objc_msgSend(v111, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_ACCOUNT_TEMPORARILY_UNAVAILABLE_ALERT_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          CKFrameworkBundle();
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = v79;
          v80 = CFSTR("COLLABORATION_ERROR_ACCOUNT_TEMPORARILY_UNAVAILABLE_ALERT_MESSAGE");
          goto LABEL_57;
        default:
          goto LABEL_58;
      }
    }
    if (v23 == 110)
    {
      CKFrameworkBundle();
      v112 = (void *)objc_claimAutoreleasedReturnValue();
      v78 = v20;
      objc_msgSend(v112, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_PRIVATE_MANATEE_UNAVAILABLE_ALERT_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      CKFrameworkBundle();
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = v79;
      v80 = CFSTR("COLLABORATION_ERROR_PRIVATE_MANATEE_UNAVAILABLE_ALERT_MESSAGE");
LABEL_57:
      v20 = v78;
      objc_msgSend(v79, "localizedStringForKey:value:table:", v80, &stru_1E276D870, CFSTR("ChatKit"));
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v44 = 1;
      v41 = 1;
    }
    else
    {
      if (v23 == 111)
      {
LABEL_24:
        v183 = v20;
        objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "appNameFromSharingURL:", v192);
        v55 = objc_claimAutoreleasedReturnValue();
        v56 = (void *)v55;
        if (v55)
        {
          v180 = (void *)v55;
          v57 = v10;
          v58 = (void *)MEMORY[0x1E0CB3940];
          CKFrameworkBundle();
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v59, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_COULD_NOT_START_COLLABORATION_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v61, "appNameFromSharingURL:", v192);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v58, "stringWithFormat:", v60, v62);
          v63 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          v65 = objc_msgSend(v64, "userInterfaceLayoutDirection");

          if (v65 == 1)
            v66 = CFSTR("\u200F");
          else
            v66 = CFSTR("\u200E");
          -[__CFString stringByAppendingString:](v66, "stringByAppendingString:", v63);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = v57;
          v56 = v180;
        }
        else
        {
          CKFrameworkBundle();
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v63, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_UNKNOWN_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
          v40 = (void *)objc_claimAutoreleasedReturnValue();
        }

        v44 = 0;
        v26 = 0;
        v41 = 3;
      }
      else
      {
        if (v23 == 140)
        {
LABEL_21:
          CKFrameworkBundle();
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          v46 = v20;
          objc_msgSend(v45, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_NOT_ENOUGH_SPACE_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          v47 = (void *)MEMORY[0x1E0CB3940];
          CKFrameworkBundle();
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v48, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_NOT_ENOUGH_SPACE_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB34E8], "stringFromByteCount:countStyle:", objc_msgSend(v10, "mediaObjectsFileSize"), 3);
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v47, "stringWithFormat:", v49, v50);
          v28 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          v52 = objc_msgSend(v51, "userInterfaceLayoutDirection");

          v53 = v52 == 1;
          v20 = v46;
          if (v53)
            v54 = CFSTR("\u200F");
          else
            v54 = CFSTR("\u200E");
LABEL_52:
          -[__CFString stringByAppendingString:](v54, "stringByAppendingString:", v28);
          v95 = objc_claimAutoreleasedReturnValue();
LABEL_53:
          v40 = (void *)v95;
          v44 = 0;
          v41 = 0;
          goto LABEL_93;
        }
LABEL_58:
        v183 = v20;
        objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "appNameFromSharingURL:", v192);
        v113 = objc_claimAutoreleasedReturnValue();
        v114 = (void *)v113;
        if (v113)
        {
          v181 = (void *)v113;
          v115 = v10;
          v116 = (void *)MEMORY[0x1E0CB3940];
          CKFrameworkBundle();
          v117 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v117, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_COULD_NOT_START_COLLABORATION_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
          v118 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
          v119 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v119, "appNameFromSharingURL:", v192);
          v120 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v116, "stringWithFormat:", v118, v120);
          v121 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
          v122 = (void *)objc_claimAutoreleasedReturnValue();
          v123 = objc_msgSend(v122, "userInterfaceLayoutDirection");

          if (v123 == 1)
            v124 = CFSTR("\u200F");
          else
            v124 = CFSTR("\u200E");
          -[__CFString stringByAppendingString:](v124, "stringByAppendingString:", v121);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = v115;
          v114 = v181;
        }
        else
        {
          CKFrameworkBundle();
          v121 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v121, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_UNKNOWN_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
          v40 = (void *)objc_claimAutoreleasedReturnValue();
        }

        v44 = 0;
        v41 = 0;
        v26 = 0;
      }
      v20 = v183;
    }
LABEL_93:

    v43 = 0;
    self = v191;
    goto LABEL_94;
  }
  objc_msgSend(v11, "domain");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend(v30, "isEqualToString:", CFSTR("CKCollaborationErrorDomain"));

  if (v31)
  {
    switch(objc_msgSend(v11, "code"))
    {
      case 1:
        CKFrameworkBundle();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_URL_INACCESSABLE_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
        v26 = (void *)objc_claimAutoreleasedReturnValue();

        CKFrameworkBundle();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = v33;
        v35 = CFSTR("COLLABORATION_ERROR_URL_INACCESSABLE_MESSAGE");
        goto LABEL_28;
      case 2:
        CKFrameworkBundle();
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v67, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_MISSING_FILE_FOR_URL_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
        v26 = (void *)objc_claimAutoreleasedReturnValue();

        CKFrameworkBundle();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v34 = v33;
        v35 = CFSTR("COLLABORATION_ERROR_MISSING_FILE_FOR_URL_MESSAGE");
LABEL_28:
        objc_msgSend(v33, "localizedStringForKey:value:table:", v35, &stru_1E276D870, CFSTR("ChatKit"));
        v40 = (void *)objc_claimAutoreleasedReturnValue();

        v43 = 0;
        v44 = 0;
        v41 = 0;
        goto LABEL_94;
      case 3:
        -[CKCoreChatController conversation](self, "conversation");
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v68, "chat");
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        v70 = objc_msgSend(v69, "isGroupChat");

        if (v70)
        {
          CKFrameworkBundle();
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v71, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_ALL_RECIPIENTS_CANNOT_JOIN_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          CKFrameworkBundle();
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          v73 = v72;
          v74 = CFSTR("COLLABORATION_ERROR_ALL_RECIPIENTS_CANNOT_JOIN_MESSAGE");
LABEL_32:
          objc_msgSend(v72, "localizedStringForKey:value:table:", v74, &stru_1E276D870, CFSTR("ChatKit"));
          v40 = (void *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          -[CKCoreChatController conversation](self, "conversation");
          v125 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v125, "recipient");
          v126 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v126, "abbreviatedDisplayName");
          v127 = (void *)objc_claimAutoreleasedReturnValue();

          v128 = (void *)MEMORY[0x1E0CB3940];
          CKFrameworkBundle();
          v129 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v129, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_SINGLE_RECIPIENT_CANNOT_JOIN_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
          v130 = v11;
          v131 = v10;
          v132 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v128, "stringWithFormat:", v132, v127);
          v133 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
          v134 = (void *)objc_claimAutoreleasedReturnValue();
          v135 = objc_msgSend(v134, "userInterfaceLayoutDirection");

          if (v135 == 1)
            v136 = CFSTR("\u200F");
          else
            v136 = CFSTR("\u200E");
          -[__CFString stringByAppendingString:](v136, "stringByAppendingString:", v133);
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          self = v191;
          v137 = (void *)MEMORY[0x1E0CB3940];
          CKFrameworkBundle();
          v138 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v138, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_SINGLE_RECIPIENT_CANNOT_JOIN_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
          v139 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v137, "stringWithFormat:", v139, v127);
          v140 = (void *)objc_claimAutoreleasedReturnValue();

          v10 = v131;
          v11 = v130;
          v16 = v192;
          objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
          v141 = (void *)objc_claimAutoreleasedReturnValue();
          v142 = objc_msgSend(v141, "userInterfaceLayoutDirection");

          if (v142 == 1)
            v143 = CFSTR("\u200F");
          else
            v143 = CFSTR("\u200E");
          -[__CFString stringByAppendingString:](v143, "stringByAppendingString:", v140);
          v40 = (void *)objc_claimAutoreleasedReturnValue();

        }
        v44 = 0;
        v41 = 0;
        v43 = 1;
        break;
      case 4:
        CKFrameworkBundle();
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v75, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_SOME_RECIPIENTS_CANNOT_JOIN_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
        v26 = (void *)objc_claimAutoreleasedReturnValue();

        CKFrameworkBundle();
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        v73 = v72;
        v74 = CFSTR("COLLABORATION_ERROR_SOME_RECIPIENTS_CANNOT_JOIN_MESSAGE");
        goto LABEL_32;
      default:
        goto LABEL_17;
    }
    goto LABEL_94;
  }
  objc_msgSend(v11, "domain");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend(v36, "isEqualToString:", CFSTR("CKCollaborationStatusErrorDomain"));

  if (!v37)
  {
    IMLogHandleForCategory();
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      -[CKChatController(Collaboration) _actuallyPresentCollaborationFailureAlertForComposition:sharingURL:error:completion:].cold.3();

LABEL_17:
    v43 = 0;
    v44 = 0;
    v41 = 0;
    v40 = 0;
    v26 = 0;
    goto LABEL_94;
  }
  switch(objc_msgSend(v11, "code"))
  {
    case 0:
      CKFrameworkBundle();
      v144 = (void *)objc_claimAutoreleasedReturnValue();
      v145 = v144;
      v146 = CFSTR("COLLABORATION_ERROR_ITEM_CANNOT_BE_SHARED_TITLE");
      goto LABEL_76;
    case 1:
    case 5:
      CKFrameworkBundle();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_FOLDER_UNMODIFIABLE_SUBITEM_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      CKFrameworkBundle();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_FOLDER_UNMODIFIABLE_SUBITEM_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = 4;
      goto LABEL_86;
    case 2:
      CKFrameworkBundle();
      v144 = (void *)objc_claimAutoreleasedReturnValue();
      v145 = v144;
      v146 = CFSTR("COLLABORATION_ERROR_ITEM_IS_ALREADY_SHARED_BY_ANOTHER_TITLE");
      goto LABEL_76;
    case 3:
      IMLogHandleForCategory();
      v147 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
        -[CKChatController(Collaboration) _actuallyPresentCollaborationFailureAlertForComposition:sharingURL:error:completion:].cold.2();

      goto LABEL_74;
    case 4:
      CKFrameworkBundle();
      v144 = (void *)objc_claimAutoreleasedReturnValue();
      v145 = v144;
      v146 = CFSTR("COLLABORATION_ERROR_ITEM_IS_ALREADY_SHARED_BY_ME_TITLE");
LABEL_76:
      objc_msgSend(v144, "localizedStringForKey:value:table:", v146, &stru_1E276D870, CFSTR("ChatKit"));
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_77;
    case 6:
      CKFrameworkBundle();
      v158 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v158, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_FOLDER_HAS_SHARED_SUBITEM_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      CKFrameworkBundle();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_FOLDER_HAS_SHARED_SUBITEM_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = 5;
LABEL_86:

      v44 = 2;
      if (v40)
        goto LABEL_87;
      goto LABEL_78;
    default:
LABEL_74:
      v26 = 0;
LABEL_77:
      v41 = 0;
      v44 = 0;
LABEL_78:
      objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
      v188 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v188, "appNameFromSharingURL:", v192);
      v186 = (void *)objc_claimAutoreleasedReturnValue();
      if (v186)
      {
        v148 = (void *)MEMORY[0x1E0CB3940];
        CKFrameworkBundle();
        v182 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v182, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_COULD_NOT_START_COLLABORATION_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
        v149 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
        v150 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v150, "appNameFromSharingURL:", v192);
        v151 = v10;
        v152 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v148, "stringWithFormat:", v149, v152);
        v153 = (void *)objc_claimAutoreleasedReturnValue();

        self = v191;
        objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
        v154 = (void *)objc_claimAutoreleasedReturnValue();
        v155 = objc_msgSend(v154, "userInterfaceLayoutDirection");

        v53 = v155 == 1;
        v10 = v151;
        if (v53)
          v156 = CFSTR("\u200F");
        else
          v156 = CFSTR("\u200E");
        -[__CFString stringByAppendingString:](v156, "stringByAppendingString:", v153);
        v157 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        CKFrameworkBundle();
        v153 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v153, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_UNKNOWN_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
        v157 = objc_claimAutoreleasedReturnValue();
      }
      v40 = (void *)v157;

LABEL_87:
      v43 = 0;
      break;
  }
LABEL_94:
  v159 = -[CKChatController collaborationFailureCount](self, "collaborationFailureCount");
  -[CKChatController setCollaborationFailureCount:](self, "setCollaborationFailureCount:", v159 + 1);
  if ((v43 & 1) != 0 || v159 < 3)
  {
    if (v26)
    {
      if (v40)
        goto LABEL_109;
    }
    else
    {
      CKFrameworkBundle();
      v176 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v176, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_OCCURRED_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      if (v40)
        goto LABEL_109;
    }
    v160 = v11;
    v161 = v10;
    CKFrameworkBundle();
    v163 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v163, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_UNKNOWN_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
    v175 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v160 = v11;
    v161 = v10;
    CKFrameworkBundle();
    v162 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v162, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_OCCURRED_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
    v189 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
    v163 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v163, "appNameFromSharingURL:", v16);
    v164 = (void *)objc_claimAutoreleasedReturnValue();
    if (v164)
    {
      v165 = (void *)MEMORY[0x1E0CB3940];
      CKFrameworkBundle();
      v166 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v166, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_COULD_NOT_START_COLLABORATION_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
      v167 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
      v168 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v168, "appNameFromSharingURL:", v16);
      v169 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v165, "stringWithFormat:", v167, v169);
      v170 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
      v171 = (void *)objc_claimAutoreleasedReturnValue();
      v172 = objc_msgSend(v171, "userInterfaceLayoutDirection");

      if (v172 == 1)
        v173 = CFSTR("\u200F");
      else
        v173 = CFSTR("\u200E");
      -[__CFString stringByAppendingString:](v173, "stringByAppendingString:", v170);
      v175 = objc_claimAutoreleasedReturnValue();
      v16 = v192;
    }
    else
    {
      CKFrameworkBundle();
      v174 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v174, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_UNKNOWN_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
      v175 = objc_claimAutoreleasedReturnValue();
      v170 = v40;
      v40 = v174;
    }

    v44 = 0;
    v41 = 0;
    v26 = (void *)v189;
  }

  v40 = (void *)v175;
  v10 = v161;
  v11 = v160;
  self = v191;
LABEL_109:
  IMLogHandleForCategory();
  v177 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v177, OS_LOG_TYPE_ERROR))
    -[CKChatController(Collaboration) _actuallyPresentCollaborationFailureAlertForComposition:sharingURL:error:completion:].cold.1();

  +[CKAlertController alertControllerWithTitle:message:preferredStyle:](CKAlertController, "alertControllerWithTitle:message:preferredStyle:", v26, v40, 1);
  v178 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v178, "setWantsWindowedPresentation:", 0);
  -[CKChatController _addDefaultButtonToSharingErrorAlertController:sharingURL:defaultButtonAction:completion:](self, "_addDefaultButtonToSharingErrorAlertController:sharingURL:defaultButtonAction:completion:", v178, v16, v41, v190);
  -[CKChatController _addOtherButtonToSharingErrorAlertController:otherButtonAction:completion:](self, "_addOtherButtonToSharingErrorAlertController:otherButtonAction:completion:", v178, v44, v190);

  objc_msgSend(v178, "presentFromViewController:animated:completion:", self, 1, 0);
}

- (void)_addOtherButtonToSharingErrorAlertController:(id)a3 otherButtonAction:(int64_t)a4 completion:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  void *v18;
  CKChatController *v19;
  id v20;

  v8 = a3;
  v9 = a5;
  if (a4 == 2)
  {
    CKFrameworkBundle();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    v12 = CFSTR("CANCEL");
  }
  else
  {
    if (a4 != 1)
      goto LABEL_7;
    CKFrameworkBundle();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    v12 = CFSTR("NOT_NOW");
  }
  objc_msgSend(v10, "localizedStringForKey:value:table:", v12, &stru_1E276D870, CFSTR("ChatKit"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    v15 = MEMORY[0x1E0C809B0];
    v16 = 3221225472;
    v17 = __109__CKChatController_Collaboration___addOtherButtonToSharingErrorAlertController_otherButtonAction_completion___block_invoke;
    v18 = &unk_1E2755940;
    v19 = self;
    v20 = v9;
    +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v13, 1, &v15);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "addAction:", v14, v15, v16, v17, v18, v19);

  }
LABEL_7:

}

uint64_t __109__CKChatController_Collaboration___addOtherButtonToSharingErrorAlertController_otherButtonAction_completion___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "configureForDisplayMode:", 1);

  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "sendButton");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setEnabled:", 1);

  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "updateEntryView");

  if (_IMWillLog())
    _IMAlwaysLog();
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

- (void)_addDefaultButtonToSharingErrorAlertController:(id)a3 sharingURL:(id)a4 defaultButtonAction:(int64_t)a5 completion:(id)a6
{
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  const __CFString *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, void *);
  void *v23;
  id v24;
  CKChatController *v25;
  id v26;
  int64_t v27;

  v10 = a3;
  v11 = a4;
  v12 = a6;
  switch(a5)
  {
    case 0:
      CKFrameworkBundle();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      v15 = CFSTR("OK");
      goto LABEL_8;
    case 1:
      CKFrameworkBundle();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      v15 = CFSTR("GO_TO_SETTINGS");
      goto LABEL_8;
    case 2:
      CKFrameworkBundle();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      v15 = CFSTR("GO_TO_APP_STORE");
      goto LABEL_8;
    case 3:
      CKFrameworkBundle();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      v15 = CFSTR("TRY_AGAIN");
      goto LABEL_8;
    case 4:
    case 5:
      CKFrameworkBundle();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      v15 = CFSTR("SHARE_ANYWAY");
LABEL_8:
      objc_msgSend(v13, "localizedStringForKey:value:table:", v15, &stru_1E276D870, CFSTR("ChatKit"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      break;
    default:
      v16 = 0;
      break;
  }
  v20 = MEMORY[0x1E0C809B0];
  v21 = 3221225472;
  v22 = __124__CKChatController_Collaboration___addDefaultButtonToSharingErrorAlertController_sharingURL_defaultButtonAction_completion___block_invoke;
  v23 = &unk_1E27561E0;
  v24 = v11;
  v25 = self;
  v26 = v12;
  v27 = a5;
  v17 = v12;
  v18 = v11;
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v16, 0, &v20);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "addAction:", v19, v20, v21, v22, v23);

}

void __124__CKChatController_Collaboration___addDefaultButtonToSharingErrorAlertController_sharingURL_defaultButtonAction_completion___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint8_t buf[8];
  id v21;

  v3 = a2;
  switch(*(_QWORD *)(a1 + 56))
  {
    case 1:
      objc_msgSend(MEMORY[0x1E0CA5878], "defaultWorkspace");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", CFSTR("prefs:root=APPLE_ACCOUNT&path=APPLE_ACCOUNT_CONTACT"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 0;
      objc_msgSend(v4, "openSensitiveURL:withOptions:error:", v5, 0, &v21);
      v6 = v21;

      IMLogHandleForCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = v7;
      if (v6)
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          __124__CKChatController_Collaboration___addDefaultButtonToSharingErrorAlertController_sharingURL_defaultButtonAction_completion___block_invoke_cold_3();
      }
      else if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18DFCD000, v8, OS_LOG_TYPE_INFO, "Opened user apple account settings page ok", buf, 2u);
      }
      goto LABEL_19;
    case 2:
      objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "appStoreURLFromSharingURL:", *(_QWORD *)(a1 + 32));
      v6 = (id)objc_claimAutoreleasedReturnValue();

      if (v6)
      {
        objc_msgSend(MEMORY[0x1E0CA5878], "defaultWorkspace");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = 0;
        objc_msgSend(v10, "openSensitiveURL:withOptions:error:", v6, 0, &v19);
        v8 = v19;

        IMLogHandleForCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = v11;
        if (v8)
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            __124__CKChatController_Collaboration___addDefaultButtonToSharingErrorAlertController_sharingURL_defaultButtonAction_completion___block_invoke_cold_2();
        }
        else if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18DFCD000, v12, OS_LOG_TYPE_INFO, "Opened App Store updates page ok", buf, 2u);
        }

      }
      else
      {
        IMLogHandleForCategory();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          __124__CKChatController_Collaboration___addDefaultButtonToSharingErrorAlertController_sharingURL_defaultButtonAction_completion___block_invoke_cold_1();
      }
LABEL_19:

      goto LABEL_20;
    case 3:
      v13 = 1;
      goto LABEL_21;
    case 4:
      v13 = 2;
      goto LABEL_21;
    case 5:
      v13 = 3;
      goto LABEL_21;
    default:
LABEL_20:
      v13 = 0;
LABEL_21:
      objc_msgSend(*(id *)(a1 + 40), "entryView");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "configureForDisplayMode:", 1);

      objc_msgSend(*(id *)(a1 + 40), "entryView");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "sendButton");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "setEnabled:", 1);

      objc_msgSend(*(id *)(a1 + 40), "entryView");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "updateEntryView");

      if (_IMWillLog())
        _IMAlwaysLog();
      v18 = *(_QWORD *)(a1 + 48);
      if (v18)
        (*(void (**)(uint64_t, uint64_t))(v18 + 16))(v18, v13);

      return;
  }
}

- (id)shareMetadataWithDugongTokensForCKShare:(id)a3 shareURL:(id)a4
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  uint64_t v19;
  id v21;
  id v22;
  id obj;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v21 = a3;
  v22 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  objc_msgSend(v21, "participants");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v25 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        objc_msgSend(v8, "userIdentity");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "lookupInfo");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "phoneNumber");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v11;
        if (v11)
        {
          v13 = v11;
        }
        else
        {
          objc_msgSend(v8, "userIdentity");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "lookupInfo");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "emailAddress");
          v13 = (id)objc_claimAutoreleasedReturnValue();

        }
        objc_msgSend(v8, "invitationToken");
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = (void *)v16;
        if (v13)
          v18 = v16 == 0;
        else
          v18 = 1;
        if (!v18)
        {
          if (MEMORY[0x193FF3B1C](v13))
          {
            IMCanonicalizeFormattedString();
            v19 = objc_claimAutoreleasedReturnValue();

            v13 = (id)v19;
          }
          objc_msgSend(v22, "setObject:forKey:", v17, v13);
        }

      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v5);
  }

  return v22;
}

- (void)addParticipant:(id)a3 toCollaboration:(id)a4 forChatGUID:(id)a5 containerSetupInfo:(id)a6 completionHandler:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  _QWORD v22[5];
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;

  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __120__CKChatController_GroupCollaboration__addParticipant_toCollaboration_forChatGUID_containerSetupInfo_completionHandler___block_invoke;
  v22[3] = &unk_1E2756208;
  v22[4] = self;
  v23 = v12;
  v24 = v13;
  v25 = v15;
  v26 = v14;
  v27 = v16;
  v17 = v14;
  v18 = v16;
  v19 = v15;
  v20 = v13;
  v21 = v12;
  -[CKChatController _isShareBearURL:completionHandler:](self, "_isShareBearURL:completionHandler:", v20, v22);

}

uint64_t __120__CKChatController_GroupCollaboration__addParticipant_toCollaboration_forChatGUID_containerSetupInfo_completionHandler___block_invoke(_QWORD *a1, int a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (void *)a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[9];
  if (a2)
    return objc_msgSend(v3, "_addParticipant:toShareBearURL:containerSetupInfo:completionHandler:", v4, v5, a1[7], v6);
  else
    return objc_msgSend(v3, "_addParticipant:toShareURL:forChatGUID:completionHandler:", v4, v5, a1[8], v6);
}

- (void)removeParticipant:(id)a3 fromCollaboration:(id)a4 forChatGUID:(id)a5 containerSetupInfo:(id)a6 completionHandler:(id)a7
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  _QWORD v22[5];
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;

  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __125__CKChatController_GroupCollaboration__removeParticipant_fromCollaboration_forChatGUID_containerSetupInfo_completionHandler___block_invoke;
  v22[3] = &unk_1E2756208;
  v22[4] = self;
  v23 = v12;
  v24 = v13;
  v25 = v15;
  v26 = v14;
  v27 = v16;
  v17 = v14;
  v18 = v16;
  v19 = v15;
  v20 = v13;
  v21 = v12;
  -[CKChatController _isShareBearURL:completionHandler:](self, "_isShareBearURL:completionHandler:", v20, v22);

}

uint64_t __125__CKChatController_GroupCollaboration__removeParticipant_fromCollaboration_forChatGUID_containerSetupInfo_completionHandler___block_invoke(_QWORD *a1, int a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (void *)a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[9];
  if (a2)
    return objc_msgSend(v3, "_removeParticipant:fromShareBearURL:containerSetupInfo:completionHandler:", v4, v5, a1[7], v6);
  else
    return objc_msgSend(v3, "_removeParticipant:fromShareURL:forChatGUID:completionHandler:", v4, v5, a1[8], v6);
}

- (void)_addParticipant:(id)a3 toShareBearURL:(id)a4 containerSetupInfo:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  objc_class *v14;
  _QWORD v15[4];
  id v16;
  CKChatController *v17;
  id v18;
  id v19;
  id v20;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = -[CKChatController CKCloudSharingClass](self, "CKCloudSharingClass");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __108__CKChatController_GroupCollaboration___addParticipant_toShareBearURL_containerSetupInfo_completionHandler___block_invoke;
    v15[3] = &unk_1E2756230;
    v20 = v13;
    v16 = v11;
    v17 = self;
    v18 = v10;
    v19 = v12;
    -[objc_class ckMetadataFromShareURL:containerSetupInfo:completionHandler:](v14, "ckMetadataFromShareURL:containerSetupInfo:completionHandler:", v16, v19, v15);

  }
}

void __108__CKChatController_GroupCollaboration___addParticipant_toShareBearURL_containerSetupInfo_completionHandler___block_invoke(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (v5 || (objc_msgSend(v10, "share"), v6 = (void *)objc_claimAutoreleasedReturnValue(), v6, !v6))
  {
    if (_IMWillLog())
      _IMAlwaysLog();
    (*(void (**)(_QWORD, _QWORD))(a1[8] + 16))(a1[8], 0);
  }
  else
  {
    if (_IMWillLog())
    {
      v9 = a1[4];
      _IMAlwaysLog();
    }
    v7 = (void *)a1[5];
    objc_msgSend(v10, "share", v9);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "_addParticipantToShare:withHandle:toCollaboration:containerSetupInfo:completionHandler:", v8, a1[6], a1[4], a1[7], a1[8]);

  }
}

- (void)_addParticipantToShare:(id)a3 withHandle:(id)a4 toCollaboration:(id)a5 containerSetupInfo:(id)a6 completionHandler:(id)a7
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  int IsEmail;
  void *v36;
  objc_class *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v47;
  _QWORD v48[4];
  id v49;
  id v50;
  id v51;
  id v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[128];
  _BYTE v62[128];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v47 = a6;
  v14 = a7;
  v15 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v16 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(MEMORY[0x1E0D397A8], "sharedInstance");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "fetchCNContactForHandleWithID:", v12);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    v42 = v14;
    v43 = v13;
    v44 = v12;
    v45 = v11;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    objc_msgSend(v18, "phoneNumbers");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v57, v62, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v58;
      do
      {
        v23 = 0;
        do
        {
          if (*(_QWORD *)v58 != v22)
            objc_enumerationMutation(v19);
          objc_msgSend(*(id *)(*((_QWORD *)&v57 + 1) + 8 * v23), "value");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "stringValue");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          IMNormalizeFormattedString();
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v15, "addObject:", v26);
          ++v23;
        }
        while (v21 != v23);
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v57, v62, 16);
      }
      while (v21);
    }

    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    objc_msgSend(v18, "emailAddresses");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v53, v61, 16);
    v11 = v45;
    if (v28)
    {
      v29 = v28;
      v30 = *(_QWORD *)v54;
      do
      {
        v31 = 0;
        do
        {
          if (*(_QWORD *)v54 != v30)
            objc_enumerationMutation(v27);
          objc_msgSend(*(id *)(*((_QWORD *)&v53 + 1) + 8 * v31), "value");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          IMNormalizeFormattedString();
          v33 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v16, "addObject:", v33);
          ++v31;
        }
        while (v29 != v31);
        v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v53, v61, 16);
      }
      while (v29);
    }

    v13 = v43;
    v12 = v44;
    v14 = v42;
  }
  if (!objc_msgSend(v15, "count") && !objc_msgSend(v16, "count"))
  {
    IMNormalizeFormattedString();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    IsEmail = IMStringIsEmail();

    if (IsEmail)
      v36 = v16;
    else
      v36 = v15;
    objc_msgSend(v36, "addObject:", v12);
  }
  v37 = -[CKChatController CKCloudSharingClass](self, "CKCloudSharingClass");
  v48[0] = MEMORY[0x1E0C809B0];
  v48[1] = 3221225472;
  v48[2] = __127__CKChatController_GroupCollaboration___addParticipantToShare_withHandle_toCollaboration_containerSetupInfo_completionHandler___block_invoke;
  v48[3] = &unk_1E274CE18;
  v49 = v13;
  v50 = v16;
  v51 = v15;
  v52 = v14;
  v38 = v14;
  v39 = v15;
  v40 = v16;
  v41 = v13;
  -[objc_class addParticipantsToShare:containerSetupInfo:emailAddresses:phoneNumbers:completionHandler:](v37, "addParticipantsToShare:containerSetupInfo:emailAddresses:phoneNumbers:completionHandler:", v11, v47, v40, v39, v48);

}

void __127__CKChatController_GroupCollaboration___addParticipantToShare_withHandle_toCollaboration_containerSetupInfo_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if ((!v7 || !v8) && _IMWillLog())
    _IMAlwaysLog();
  if (v9)
  {
    IMLogHandleForCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      __127__CKChatController_GroupCollaboration___addParticipantToShare_withHandle_toCollaboration_containerSetupInfo_completionHandler___block_invoke_cold_1();

    if (_IMWillLog())
      _IMAlwaysLog();
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 0);
  }
  else
  {
    if (_IMWillLog())
      _IMAlwaysLog();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), 1);
  }

}

- (void)_removeParticipant:(id)a3 fromShareBearURL:(id)a4 containerSetupInfo:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  objc_class *v32;
  CKChatController *v33;
  id v34;
  id v35;
  id v36;
  _QWORD v37[4];
  id v38;
  id v39;
  CKChatController *v40;
  id v41;
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(MEMORY[0x1E0D397A8], "sharedInstance");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "fetchCNContactForHandleWithID:", v10);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    v33 = self;
    v34 = v13;
    v35 = v12;
    v36 = v11;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    objc_msgSend(v16, "phoneNumbers");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v48;
      do
      {
        v21 = 0;
        do
        {
          if (*(_QWORD *)v48 != v20)
            objc_enumerationMutation(v17);
          objc_msgSend(*(id *)(*((_QWORD *)&v47 + 1) + 8 * v21), "value");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "stringValue");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          IMNormalizeFormattedString();
          v24 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v14, "addObject:", v24);
          ++v21;
        }
        while (v19 != v21);
        v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
      }
      while (v19);
    }

    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    objc_msgSend(v16, "emailAddresses");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
    if (v26)
    {
      v27 = v26;
      v28 = *(_QWORD *)v44;
      do
      {
        v29 = 0;
        do
        {
          if (*(_QWORD *)v44 != v28)
            objc_enumerationMutation(v25);
          objc_msgSend(*(id *)(*((_QWORD *)&v43 + 1) + 8 * v29), "value");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          IMNormalizeFormattedString();
          v31 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v14, "addObject:", v31);
          ++v29;
        }
        while (v27 != v29);
        v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v43, v51, 16);
      }
      while (v27);
    }

    v12 = v35;
    v11 = v36;
    self = v33;
    v13 = v34;
  }
  if (!objc_msgSend(v14, "count"))
    objc_msgSend(v14, "addObject:", v10);
  v32 = -[CKChatController CKCloudSharingClass](self, "CKCloudSharingClass");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 3221225472;
    v37[2] = __113__CKChatController_GroupCollaboration___removeParticipant_fromShareBearURL_containerSetupInfo_completionHandler___block_invoke;
    v37[3] = &unk_1E2756230;
    v42 = v13;
    v38 = v10;
    v39 = v14;
    v40 = self;
    v41 = v12;
    -[objc_class ckMetadataFromShareURL:containerSetupInfo:completionHandler:](v32, "ckMetadataFromShareURL:containerSetupInfo:completionHandler:", v11, v41, v37);

  }
}

void __113__CKChatController_GroupCollaboration___removeParticipant_fromShareBearURL_containerSetupInfo_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  int v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v26;
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = _IMWillLog();
  if (!v5 || v6)
  {
    if (v7)
      _IMAlwaysLog();
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), 0);
  }
  else
  {
    if (v7)
    {
      v29 = *(_QWORD *)(a1 + 32);
      _IMAlwaysLog();
    }
    objc_msgSend(v5, "share", v29);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "participants");
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v9 = (id)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
    if (v31)
    {
      v10 = *(_QWORD *)v41;
      v34 = v8;
      v35 = v5;
      v30 = *(_QWORD *)v41;
      v33 = v9;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v41 != v10)
            objc_enumerationMutation(v9);
          v12 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * v11);
          objc_msgSend(v12, "userIdentity");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "lookupInfo");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "phoneNumber");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = v15;
          v32 = v12;
          if (v15)
          {
            v17 = v15;
          }
          else
          {
            objc_msgSend(v12, "userIdentity");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v18, "lookupInfo");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v19, "emailAddress");
            v17 = (id)objc_claimAutoreleasedReturnValue();

          }
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v20 = *(id *)(a1 + 40);
          v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
          if (v21)
          {
            v22 = v21;
            v23 = *(_QWORD *)v37;
            while (2)
            {
              for (i = 0; i != v22; ++i)
              {
                if (*(_QWORD *)v37 != v23)
                  objc_enumerationMutation(v20);
                v25 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
                objc_msgSend(v17, "lowercaseString");
                v26 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v25, "lowercaseString");
                v27 = (void *)objc_claimAutoreleasedReturnValue();
                v28 = objc_msgSend(v26, "isEqualToString:", v27);

                if (v28)
                {
                  v8 = v34;
                  objc_msgSend(v34, "removeParticipant:", v32);

                  v9 = v33;
                  objc_msgSend(*(id *)(a1 + 48), "_updateShare:containerSetupInfo:completionHandler:", v34, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
                  v5 = v35;
                  v6 = 0;
                  goto LABEL_30;
                }
              }
              v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
              if (v22)
                continue;
              break;
            }
          }

          ++v11;
          v8 = v34;
          v5 = v35;
          v9 = v33;
          v10 = v30;
        }
        while (v11 != v31);
        v6 = 0;
        v31 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
      }
      while (v31);
    }

    if (_IMWillLog())
      _IMAlwaysLog();
    (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64));
LABEL_30:

  }
}

- (void)_addParticipant:(id)a3 toShareURL:(id)a4 forChatGUID:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;
  char v25;
  _QWORD aBlock[4];
  id v27;

  v10 = a3;
  v11 = a4;
  v12 = a6;
  v13 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __97__CKChatController_GroupCollaboration___addParticipant_toShareURL_forChatGUID_completionHandler___block_invoke;
  aBlock[3] = &unk_1E2756258;
  v14 = v12;
  v27 = v14;
  v15 = a5;
  v20[0] = v13;
  v20[1] = 3221225472;
  v20[2] = __97__CKChatController_GroupCollaboration___addParticipant_toShareURL_forChatGUID_completionHandler___block_invoke_2;
  v20[3] = &unk_1E27562A8;
  v25 = 0;
  v21 = v10;
  v22 = v11;
  v23 = v14;
  v24 = _Block_copy(aBlock);
  v16 = v24;
  v17 = v11;
  v18 = v10;
  v19 = v14;
  -[CKChatController _collaborationMetadataForURL:forChatGUID:completionHandler:](self, "_collaborationMetadataForURL:forChatGUID:completionHandler:", v17, v15, v20);

}

void __97__CKChatController_GroupCollaboration___addParticipant_toShareURL_forChatGUID_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  int v6;
  id v7;

  v7 = a2;
  v5 = a3;
  if (_IMWillLog())
    _IMAlwaysLog();
  v6 = _IMWillLog();
  if (!v7 || v5)
  {
    if (v6)
      _IMAlwaysLog();
  }
  else if (v6)
  {
    _IMAlwaysLog();
  }
  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));

}

void __97__CKChatController_GroupCollaboration___addParticipant_toShareURL_forChatGUID_completionHandler___block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  id v10;
  id v11;
  NSObject *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  char v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v4 = objc_alloc(MEMORY[0x1E0C99E60]);
    v20[0] = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_msgSend(v4, "initWithArray:", v5);

    v7 = objc_alloc(MEMORY[0x1E0DA8830]);
    v8 = MEMORY[0x1E0C80D38];
    v9 = (void *)objc_msgSend(v7, "initWithTargetSerialQueue:synchronous:", MEMORY[0x1E0C80D38], 0);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __97__CKChatController_GroupCollaboration___addParticipant_toShareURL_forChatGUID_completionHandler___block_invoke_236;
    v13[3] = &unk_1E2756280;
    v19 = *(_BYTE *)(a1 + 64);
    v14 = v9;
    v15 = v6;
    v16 = *(id *)(a1 + 40);
    v17 = v3;
    v18 = *(id *)(a1 + 56);
    v10 = v6;
    v11 = v9;
    dispatch_async(v8, v13);

  }
  else
  {
    IMLogHandleForCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      __97__CKChatController_GroupCollaboration___addParticipant_toShareURL_forChatGUID_completionHandler___block_invoke_2_cold_1();

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

uint64_t __97__CKChatController_GroupCollaboration___addParticipant_toShareURL_forChatGUID_completionHandler___block_invoke_236(uint64_t a1)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 72);
  v3 = _IMWillLog();
  if (v2)
  {
    if (v3)
      _IMAlwaysLog();
    return objc_msgSend(*(id *)(a1 + 32), "addParticipantHandles:withFileURL:metadata:timeout:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 10.0);
  }
  else
  {
    if (v3)
      _IMAlwaysLog();
    return objc_msgSend(*(id *)(a1 + 32), "addParticipantHandles:withMetadata:timeout:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 10.0);
  }
}

- (void)_removeParticipant:(id)a3 fromShareURL:(id)a4 forChatGUID:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[5];
  id v19;
  id v20;
  id v21;
  id v22;
  char v23;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __102__CKChatController_GroupCollaboration___removeParticipant_fromShareURL_forChatGUID_completionHandler___block_invoke;
  v18[3] = &unk_1E27562F8;
  v18[4] = self;
  v19 = v12;
  v21 = v11;
  v22 = v13;
  v23 = 0;
  v20 = v10;
  v14 = v11;
  v15 = v10;
  v16 = v13;
  v17 = v12;
  -[CKChatController _highlightForShareURL:completionHandler:](self, "_highlightForShareURL:completionHandler:", v14, v18);

}

void __102__CKChatController_GroupCollaboration___removeParticipant_fromShareURL_forChatGUID_completionHandler___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  void *v18;
  id v19;
  id v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD block[4];
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  char v38;
  _QWORD aBlock[4];
  id v40;
  id v41;
  id v42;
  id v43;
  _QWORD v44[3];

  v44[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "_attributionFromHighlight:forChatGUID:", a2, *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "uniqueIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "collaborationMetadata");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __102__CKChatController_GroupCollaboration___removeParticipant_fromShareURL_forChatGUID_completionHandler___block_invoke_2;
  aBlock[3] = &unk_1E27562D0;
  v7 = v4;
  v40 = v7;
  v43 = *(id *)(a1 + 64);
  v41 = *(id *)(a1 + 48);
  v42 = *(id *)(a1 + 40);
  v8 = _Block_copy(aBlock);
  if (v5)
  {
    objc_msgSend(v5, "handleToIdentityMap");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9)
    {
      objc_msgSend(v9, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48));
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = (void *)v11;
      if (v11)
      {
        v13 = (void *)MEMORY[0x1E0C99E60];
        v44[0] = v11;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v44, 1);
        v31 = v12;
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setWithArray:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        v16 = objc_alloc(MEMORY[0x1E0DA8830]);
        v17 = MEMORY[0x1E0C80D38];
        v18 = (void *)objc_msgSend(v16, "initWithTargetSerialQueue:synchronous:", MEMORY[0x1E0C80D38], 0);
        block[0] = v6;
        block[1] = 3221225472;
        block[2] = __102__CKChatController_GroupCollaboration___removeParticipant_fromShareURL_forChatGUID_completionHandler___block_invoke_249;
        block[3] = &unk_1E2756280;
        v38 = *(_BYTE *)(a1 + 72);
        v33 = v18;
        v34 = v15;
        v35 = *(id *)(a1 + 56);
        v36 = v5;
        v37 = v8;
        v19 = v15;
        v20 = v18;
        dispatch_async(v17, block);

        v12 = v31;
      }
      else
      {
        IMLogHandleForCategory();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          __102__CKChatController_GroupCollaboration___removeParticipant_fromShareURL_forChatGUID_completionHandler___block_invoke_cold_3(v23, v24, v25, v26, v27, v28, v29, v30);

        (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
      }

    }
    else
    {
      IMLogHandleForCategory();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        __102__CKChatController_GroupCollaboration___removeParticipant_fromShareURL_forChatGUID_completionHandler___block_invoke_cold_2();

      (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    }

  }
  else
  {
    IMLogHandleForCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      __97__CKChatController_GroupCollaboration___addParticipant_toShareURL_forChatGUID_completionHandler___block_invoke_2_cold_1();

    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }

}

void __102__CKChatController_GroupCollaboration___removeParticipant_fromShareURL_forChatGUID_completionHandler___block_invoke_2(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (_IMWillLog())
    _IMAlwaysLog();
  if (v9 && !v5 && a1[4])
  {
    if (_IMWillLog())
    {
      v8 = a1[5];
      _IMAlwaysLog();
    }
    objc_msgSend(MEMORY[0x1E0D35798], "sharedRegistry", v8);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "existingChatWithGUID:", a1[6]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
      objc_msgSend(v7, "sendUpdatedCollaborationMetadata:forMessageGUID:", v9, a1[4]);
    (*(void (**)(void))(a1[7] + 16))();

  }
  else
  {
    if (_IMWillLog())
      _IMAlwaysLog();
    (*(void (**)(_QWORD))(a1[7] + 16))(a1[7]);
  }

}

uint64_t __102__CKChatController_GroupCollaboration___removeParticipant_fromShareURL_forChatGUID_completionHandler___block_invoke_249(uint64_t a1)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 72);
  v3 = _IMWillLog();
  if (v2)
  {
    if (v3)
      _IMAlwaysLog();
    return objc_msgSend(*(id *)(a1 + 32), "removeParticipantIdentities:withFileURL:metadata:timeout:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 10.0);
  }
  else
  {
    if (v3)
      _IMAlwaysLog();
    return objc_msgSend(*(id *)(a1 + 32), "removeParticipantIdentities:withMetadata:timeout:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 10.0);
  }
}

- (Class)CKCloudSharingClass
{
  if (CKCloudSharingClass_onceToken != -1)
    dispatch_once(&CKCloudSharingClass_onceToken, &__block_literal_global_145);
  return (Class)(id)CKCloudSharingClass_CKCloudSharingClass;
}

uint64_t __59__CKChatController_GroupCollaboration__CKCloudSharingClass__block_invoke()
{
  uint64_t result;

  result = MEMORY[0x193FF3C18](CFSTR("CSCloudSharing"), CFSTR("CloudSharing"));
  CKCloudSharingClass_CKCloudSharingClass = result;
  return result;
}

- (void)_updateShare:(id)a3 containerSetupInfo:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  objc_class *v11;
  _QWORD v12[4];
  id v13;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = -[CKChatController CKCloudSharingClass](self, "CKCloudSharingClass");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __90__CKChatController_GroupCollaboration___updateShare_containerSetupInfo_completionHandler___block_invoke;
    v12[3] = &unk_1E2756320;
    v13 = v10;
    -[objc_class updateShare:containerSetupInfo:completionHandler:](v11, "updateShare:containerSetupInfo:completionHandler:", v8, v9, v12);

  }
}

void __90__CKChatController_GroupCollaboration___updateShare_containerSetupInfo_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  int v9;
  id v10;

  v10 = a2;
  v7 = a3;
  v8 = a4;
  v9 = _IMWillLog();
  if (!v7 || v8)
  {
    if (v9)
      _IMAlwaysLog();
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0, 0);
  }
  else
  {
    if (v9)
      _IMAlwaysLog();
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 1, 0);
  }

}

- (void)_highlightForShareURL:(id)a3 completionHandler:(id)a4
{
  id v5;
  void (**v6)(id, _QWORD);
  void *v7;
  void *v8;
  id v9;
  BOOL v10;
  NSObject *v11;
  void *v12;
  _QWORD v13[4];
  void (**v14)(id, _QWORD);
  id v15;

  v5 = a3;
  v6 = (void (**)(id, _QWORD))a4;
  objc_msgSend(MEMORY[0x1E0D35900], "sharedController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0;
  objc_msgSend(v7, "collaborationHighlightForURL:error:", v5, &v15);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v15;

  if (v9)
    v10 = 1;
  else
    v10 = v8 == 0;
  if (v10)
  {
    IMLogHandleForCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      -[CKChatController(GroupCollaboration) _highlightForShareURL:completionHandler:].cold.1();

    v6[2](v6, 0);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D35900], "sharedController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __80__CKChatController_GroupCollaboration___highlightForShareURL_completionHandler___block_invoke;
    v13[3] = &unk_1E2756348;
    v14 = v6;
    objc_msgSend(v12, "fetchAttributionsForHighlight:completionHandler:", v8, v13);

  }
}

uint64_t __80__CKChatController_GroupCollaboration___highlightForShareURL_completionHandler___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

- (id)_attributionFromHighlight:(id)a3 forChatGUID:(id)a4
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  id v17;
  NSObject *v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  objc_msgSend(v5, "attributions");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "count");

  if (v8)
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    objc_msgSend(v5, "attributions");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v21;
LABEL_4:
      v13 = 0;
      while (1)
      {
        if (*(_QWORD *)v21 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v13);
        objc_msgSend(v14, "conversationIdentifier");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "isEqualToString:", v6);

        if (v16)
          break;
        if (v11 == ++v13)
        {
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
          if (v11)
            goto LABEL_4;
          goto LABEL_10;
        }
      }
      v17 = v14;
      if (_IMWillLog())
        _IMAlwaysLog();

      if (v17)
        goto LABEL_19;
    }
    else
    {
LABEL_10:

    }
    IMLogHandleForCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      -[CKChatController(GroupCollaboration) _attributionFromHighlight:forChatGUID:].cold.2();
  }
  else
  {
    IMLogHandleForCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      -[CKChatController(GroupCollaboration) _attributionFromHighlight:forChatGUID:].cold.1();
  }

  v17 = 0;
LABEL_19:

  return v17;
}

- (void)_collaborationMetadataForURL:(id)a3 forChatGUID:(id)a4 completionHandler:(id)a5
{
  id v7;
  id v8;
  void (**v9)(id, _QWORD);
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  id v15;
  void (**v16)(id, _QWORD);
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;

  v7 = a3;
  v8 = a4;
  v9 = (void (**)(id, _QWORD))a5;
  objc_msgSend(MEMORY[0x1E0D35900], "sharedController");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = 0;
  objc_msgSend(v10, "collaborationHighlightForURL:error:", v7, &v22);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v22;

  if (v12 || !v11)
  {
    IMLogHandleForCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      -[CKChatController(GroupCollaboration) _highlightForShareURL:completionHandler:].cold.1();

    v9[2](v9, 0);
  }
  objc_msgSend(MEMORY[0x1E0D35900], "sharedController");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __99__CKChatController_GroupCollaboration___collaborationMetadataForURL_forChatGUID_completionHandler___block_invoke;
  v18[3] = &unk_1E2756370;
  v20 = v8;
  v21 = v9;
  v19 = v7;
  v15 = v8;
  v16 = v9;
  v17 = v7;
  objc_msgSend(v14, "fetchAttributionsForHighlight:completionHandler:", v11, v18);

}

void __99__CKChatController_GroupCollaboration___collaborationMetadataForURL_forChatGUID_completionHandler___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  NSObject *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "attributions");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");

  if (!v5)
  {
    IMLogHandleForCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      __99__CKChatController_GroupCollaboration___collaborationMetadataForURL_forChatGUID_completionHandler___block_invoke_cold_2();

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  objc_msgSend(v3, "attributions");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v18;
LABEL_7:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v18 != v10)
        objc_enumerationMutation(v7);
      v12 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * v11);
      objc_msgSend(v12, "conversationIdentifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "isEqualToString:", *(_QWORD *)(a1 + 40));

      if (v14)
        break;
      if (v9 == ++v11)
      {
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        if (v9)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    objc_msgSend(v12, "collaborationMetadata");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (_IMWillLog())
      _IMAlwaysLog();

    if (v15)
      goto LABEL_20;
  }
  else
  {
LABEL_13:

  }
  IMLogHandleForCategory();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    __99__CKChatController_GroupCollaboration___collaborationMetadataForURL_forChatGUID_completionHandler___block_invoke_cold_1();

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), 0);
  v15 = 0;
LABEL_20:
  (*(void (**)(_QWORD, void *))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v15);

}

- (void)_isShareBearURL:(id)a3 completionHandler:(id)a4
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v5 = a3;
  v6 = a4;
  v7 = (void *)MEMORY[0x1E0CA5838];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __74__CKChatController_GroupCollaboration___isShareBearURL_completionHandler___block_invoke;
  v10[3] = &unk_1E2756398;
  v11 = v5;
  v12 = v6;
  v8 = v6;
  v9 = v5;
  objc_msgSend(v7, "getAppLinkWithURL:completionHandler:", v9, v10);

}

void __74__CKChatController_GroupCollaboration___isShareBearURL_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  void (*v12)(void);

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    IMLogHandleForCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      __74__CKChatController_GroupCollaboration___isShareBearURL_completionHandler___block_invoke_cold_1();

  }
  objc_msgSend(v5, "targetApplicationRecord");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "bundleIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v9) = objc_msgSend(v10, "isEqualToString:", CFSTR("com.apple.CloudKit.ShareBear"));
  v11 = _IMWillLog();
  if ((_DWORD)v9)
  {
    if (v11)
      _IMAlwaysLog();
    v12 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  else
  {
    if (v11)
      _IMAlwaysLog();
    v12 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  v12();

}

- (void)createCollaborationFailureAlertForNotice:(id)a3
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  CKChatController *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  __CFString *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  __CFString *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  _QWORD v50[4];
  id v51;
  CKChatController *v52;
  uint64_t v53;

  v4 = a3;
  CKFrameworkBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("FAILED_COLLABORATION_UPDATE_ALERT_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
  v6 = objc_claimAutoreleasedReturnValue();

  v49 = v4;
  if (!v4)
  {
    v24 = self;
    v15 = 0;
    v16 = 0;
    goto LABEL_14;
  }
  objc_msgSend(v4, "notice");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "metadata");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "contentTitle");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "notice");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "metadata");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "bundleIdentifier");
  v12 = objc_claimAutoreleasedReturnValue();

  v53 = 0;
  objc_msgSend(MEMORY[0x1E0CA5898], "bundleRecordWithBundleIdentifier:allowPlaceholder:error:", v12, 0, &v53);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  v15 = 0;
  v16 = 0;
  if (!v53)
  {
    v48 = v6;
    objc_msgSend(v13, "localizedName");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "notice");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "metadata");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "type");

    if (v19 == 8)
    {
      v20 = (void *)MEMORY[0x1E0CB3940];
      CKFrameworkBundle();
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "localizedStringForKey:value:table:", CFSTR("FAILED_COLLABORATION_ADD_UPDATE_ALERT_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "stringWithFormat:", v22, v9, v15);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_8:
      objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend(v31, "userInterfaceLayoutDirection");

      if (v32 == 1)
        v33 = CFSTR("\u200F");
      else
        v33 = CFSTR("\u200E");
      -[__CFString stringByAppendingString:](v33, "stringByAppendingString:", v23);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = v48;

      goto LABEL_13;
    }
    objc_msgSend(v4, "notice");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "metadata");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend(v26, "type");

    if (v27 == 9)
    {
      v28 = (void *)MEMORY[0x1E0CB3940];
      CKFrameworkBundle();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "localizedStringForKey:value:table:", CFSTR("FAILED_COLLABORATION_REMOVE_UPDATE_ALERT_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "stringWithFormat:", v30, v9, v15);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_8;
    }
    v16 = 0;
    v6 = v48;
  }
LABEL_13:
  v4 = (id)v12;
  v24 = self;

LABEL_14:
  v34 = (void *)v6;
  +[CKAlertController alertControllerWithTitle:message:preferredStyle:](CKAlertController, "alertControllerWithTitle:message:preferredStyle:", v6, v16, 1);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v15, "length"))
  {
    v36 = (void *)MEMORY[0x1E0CB3940];
    CKFrameworkBundle();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "localizedStringForKey:value:table:", CFSTR("FAILED_COLLABORATION_OPEN_IN_APP"), &stru_1E276D870, CFSTR("ChatKit"));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "stringWithFormat:", v38, v15);
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = objc_msgSend(v40, "userInterfaceLayoutDirection");

    if (v41 == 1)
      v42 = CFSTR("\u200F");
    else
      v42 = CFSTR("\u200E");
    -[__CFString stringByAppendingString:](v42, "stringByAppendingString:", v39);
    v43 = (void *)objc_claimAutoreleasedReturnValue();

    v50[0] = MEMORY[0x1E0C809B0];
    v50[1] = 3221225472;
    v50[2] = __81__CKChatController_GroupCollaboration__createCollaborationFailureAlertForNotice___block_invoke;
    v50[3] = &unk_1E274B818;
    v51 = v4;
    v52 = v24;
    +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v43, 0, v50);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "addAction:", v44);

  }
  CKFrameworkBundle();
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1E276D870, CFSTR("ChatKit"));
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v46, 0, &__block_literal_global_285_1);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v35, "addAction:", v47);

  objc_msgSend(v35, "presentFromViewController:animated:completion:", v24, 1, 0);
}

void __81__CKChatController_GroupCollaboration__createCollaborationFailureAlertForNotice___block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "length"))
  {
    objc_msgSend(MEMORY[0x1E0CA5878], "defaultWorkspace");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "openApplicationWithBundleID:", *(_QWORD *)(a1 + 32));

  }
  objc_msgSend(*(id *)(a1 + 40), "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "configureForDisplayMode:", 1);

  objc_msgSend(*(id *)(a1 + 40), "entryView");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateEntryView");

}

- (void)createCollaborationFailureAlertForFailedMetadataLoadWithFallback:(BOOL)a3 URL:(id)a4
{
  _BOOL4 v4;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  CKChatController *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  __CFString *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  _BOOL4 v29;
  void *v30;
  _QWORD v31[5];

  v4 = a3;
  v6 = a4;
  CKFrameworkBundle();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("FAILED_COLLABORATION_METADATA_ALERT_MESSAGE_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "appNameFromSharingURL:", v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    v29 = v4;
    v30 = v8;
    v11 = self;
    v12 = (void *)MEMORY[0x1E0CB3940];
    CKFrameworkBundle();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("FAILED_COLLABORATION_METADATA_ALERT_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "appNameFromSharingURL:", v6);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stringWithFormat:", v14, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "userInterfaceLayoutDirection");

    if (v19 == 1)
      v20 = CFSTR("\u200F");
    else
      v20 = CFSTR("\u200E");
    -[__CFString stringByAppendingString:](v20, "stringByAppendingString:", v17);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    self = v11;
    v8 = v30;
    v4 = v29;
  }
  else
  {
    CKFrameworkBundle();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("COLLABORATION_ERROR_UNKNOWN_MESSAGE"), &stru_1E276D870, CFSTR("ChatKit"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
  }

  if (v4)
  {
    CKFrameworkBundle();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "localizedStringForKey:value:table:", CFSTR("FAILED_COLLABORATION_FALLBACK_SENDASCOPY"), &stru_1E276D870, CFSTR("ChatKit"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v21, "stringByAppendingString:", v23);
    v24 = objc_claimAutoreleasedReturnValue();

    v21 = (void *)v24;
  }
  CKFrameworkBundle();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1E276D870, CFSTR("ChatKit"));
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  +[CKAlertController alertControllerWithTitle:message:preferredStyle:](CKAlertController, "alertControllerWithTitle:message:preferredStyle:", v8, v21, 1);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __109__CKChatController_GroupCollaboration__createCollaborationFailureAlertForFailedMetadataLoadWithFallback_URL___block_invoke;
  v31[3] = &unk_1E274B0D8;
  v31[4] = self;
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v26, 0, v31);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "addAction:", v28);

  objc_msgSend(v27, "presentFromViewController:animated:completion:", self, 1, 0);
}

void __109__CKChatController_GroupCollaboration__createCollaborationFailureAlertForFailedMetadataLoadWithFallback_URL___block_invoke(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "configureForDisplayMode:", 1);

  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "updateEntryView");

}

- (void)presentReplaceCompositionAlertWithConfirmationBlock:(id)a3 cancelBlock:(id)a4
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  _QWORD v22[4];
  id v23;
  _QWORD v24[4];
  id v25;

  v5 = a3;
  v6 = a4;
  CKFrameworkBundle();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("SHELF_REPLACE_ITEM_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  CKFrameworkBundle();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("SHELF_REPLACE_ITEM"), &stru_1E276D870, CFSTR("ChatKit"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKAlertController alertControllerWithTitle:message:preferredStyle:](CKAlertController, "alertControllerWithTitle:message:preferredStyle:", v8, v10, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  CKFrameworkBundle();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("SHELF_REPLACE_ITEM_OK_ACTION_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = MEMORY[0x1E0C809B0];
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __104__CKChatController_GroupCollaboration__presentReplaceCompositionAlertWithConfirmationBlock_cancelBlock___block_invoke;
  v24[3] = &unk_1E274B330;
  v25 = v5;
  v15 = v5;
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v13, 0, v24);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "addAction:", v16);

  CKFrameworkBundle();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "localizedStringForKey:value:table:", CFSTR("SHELF_REPLACE_ITEM_CANCEL_ACTION_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = v14;
  v22[1] = 3221225472;
  v22[2] = __104__CKChatController_GroupCollaboration__presentReplaceCompositionAlertWithConfirmationBlock_cancelBlock___block_invoke_2;
  v22[3] = &unk_1E274B330;
  v23 = v6;
  v19 = v6;
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v18, 0, v22);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "addAction:", v20);

  objc_msgSend(v11, "presentFromViewController:animated:completion:", self, 1, 0);
}

uint64_t __104__CKChatController_GroupCollaboration__presentReplaceCompositionAlertWithConfirmationBlock_cancelBlock___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t __104__CKChatController_GroupCollaboration__presentReplaceCompositionAlertWithConfirmationBlock_cancelBlock___block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

- (BOOL)shouldShowTips
{
  void *v3;
  uint64_t v4;
  char v5;

  if (-[CKChatController _anyLegacyBannerIsVisible](self, "_anyLegacyBannerIsVisible")
    || -[CKChatController _anySuggestionPresenterWantsToShowBanner](self, "_anySuggestionPresenterWantsToShowBanner")
    || (-[CKChatController traitCollection](self, "traitCollection"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v3, "verticalSizeClass"),
        v3,
        v4 == 1))
  {
    v5 = 0;
  }
  else
  {
    objc_opt_class();
    v5 = objc_opt_isKindOfClass() ^ 1;
  }
  return v5 & 1;
}

- (void)determineIfSendMenuShouldElevateCheckInWithCompletion:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v4 = a3;
  if (-[CKChatController _shouldCheckWithSafetyMonitor](self, "_shouldCheckWithSafetyMonitor"))
  {
    -[CKChatController _recipientHandleID](self, "_recipientHandleID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "length"))
    {
      objc_msgSend(MEMORY[0x1E0D39A00], "sharedCoordinator");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = __89__CKChatController_SafetyMonitor__determineIfSendMenuShouldElevateCheckInWithCompletion___block_invoke;
      v7[3] = &unk_1E274C308;
      v8 = v4;
      objc_msgSend(v6, "checkPreferredHandlesCacheForReceiverWith:completion:", v5, v7);

    }
  }
  else
  {
    (*((void (**)(id, _QWORD))v4 + 2))(v4, 0);
  }

}

void __89__CKChatController_SafetyMonitor__determineIfSendMenuShouldElevateCheckInWithCompletion___block_invoke(uint64_t a1, char a2)
{
  _QWORD v3[4];
  id v4;
  char v5;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __89__CKChatController_SafetyMonitor__determineIfSendMenuShouldElevateCheckInWithCompletion___block_invoke_2;
  v3[3] = &unk_1E274C610;
  v4 = *(id *)(a1 + 32);
  v5 = a2;
  dispatch_async(MEMORY[0x1E0C80D38], v3);

}

uint64_t __89__CKChatController_SafetyMonitor__determineIfSendMenuShouldElevateCheckInWithCompletion___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

- (void)updateSendMenuShouldElevateCheckIn
{
  _QWORD v2[5];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __69__CKChatController_SafetyMonitor__updateSendMenuShouldElevateCheckIn__block_invoke;
  v2[3] = &unk_1E274A1B8;
  v2[4] = self;
  -[CKChatController determineIfSendMenuShouldElevateCheckInWithCompletion:](self, "determineIfSendMenuShouldElevateCheckInWithCompletion:", v2);
}

void __69__CKChatController_SafetyMonitor__updateSendMenuShouldElevateCheckIn__block_invoke(uint64_t a1, uint64_t a2)
{
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "conversation");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setElevateCheckIn:", a2);

}

- (void)showCheckInTips:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  v4 = a3;
  if (-[CKChatController _shouldCheckWithSafetyMonitor](self, "_shouldCheckWithSafetyMonitor"))
  {
    -[CKChatController _sendertHandleID](self, "_sendertHandleID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 0;
    v12 = &v11;
    v13 = 0x3032000000;
    v14 = __Block_byref_object_copy__52;
    v15 = __Block_byref_object_dispose__52;
    v16 = 0;
    -[CKChatController _recipientHandleID](self, "_recipientHandleID");
    v16 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "length") && objc_msgSend((id)v12[5], "length"))
    {
      objc_msgSend(MEMORY[0x1E0D39A00], "sharedCoordinator");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = v12[5];
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = __51__CKChatController_SafetyMonitor__showCheckInTips___block_invoke;
      v8[3] = &unk_1E2757550;
      v9 = v4;
      v10 = &v11;
      objc_msgSend(v6, "shouldShowTipKitSuggestionForInitiator:andReceiver:completion:", v5, v7, v8);

    }
    _Block_object_dispose(&v11, 8);

  }
  else
  {
    (*((void (**)(id, _QWORD, _QWORD))v4 + 2))(v4, 0, 0);
  }

}

void __51__CKChatController_SafetyMonitor__showCheckInTips___block_invoke(uint64_t a1, char a2)
{
  id v4;
  uint64_t v5;
  _QWORD block[4];
  id v7;
  uint64_t v8;
  char v9;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __51__CKChatController_SafetyMonitor__showCheckInTips___block_invoke_2;
  block[3] = &unk_1E2757528;
  v4 = *(id *)(a1 + 32);
  v9 = a2;
  v5 = *(_QWORD *)(a1 + 40);
  v7 = v4;
  v8 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

uint64_t __51__CKChatController_SafetyMonitor__showCheckInTips___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

- (BOOL)_shouldCheckWithSafetyMonitor
{
  void *v3;
  int v4;
  void *v5;
  char v6;
  void *v8;
  void *v9;
  char v10;

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isZelkovaEnabled");

  if (!v4)
    return 0;
  -[CKCoreChatController conversation](self, "conversation");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isGroupConversation");

  if ((v6 & 1) != 0)
    return 0;
  -[CKCoreChatController conversation](self, "conversation");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "sendingService");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "__ck_isSMS");

  return v10 ^ 1;
}

- (id)_recipientHandleID
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  -[CKCoreChatController conversation](self, "conversation", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "recipients");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        if ((objc_msgSend(v9, "isMe") & 1) == 0)
        {
          objc_msgSend(v9, "defaultIMHandle");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "ID");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "im_stripCategoryLabel");
          v12 = objc_claimAutoreleasedReturnValue();

          v6 = (void *)v12;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (id)_sendertHandleID
{
  void *v2;
  void *v3;
  void *v4;

  -[CKCoreChatController conversation](self, "conversation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "senderIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "im_stripCategoryLabel");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (void)_kickPhotoKit
{
  _QWORD block[5];

  if (CKIsRunningInMessages())
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __45__CKChatController_MediaInput___kickPhotoKit__block_invoke;
    block[3] = &unk_1E274A208;
    block[4] = self;
    if (_kickPhotoKit_onceToken != -1)
      dispatch_once(&_kickPhotoKit_onceToken, block);
  }
}

void __45__CKChatController_MediaInput___kickPhotoKit__block_invoke(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  dispatch_get_global_queue(17, 0);
  v2 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __45__CKChatController_MediaInput___kickPhotoKit__block_invoke_2;
  block[3] = &unk_1E274A208;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v2, block);

}

void __45__CKChatController_MediaInput___kickPhotoKit__block_invoke_2(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(MEMORY[0x1E0CD16F8], "sharedPhotoLibrary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "registerChangeObserver:", *(_QWORD *)(a1 + 32));

  objc_msgSend(MEMORY[0x1E0CD16F8], "sharedPhotoLibrary");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "unregisterChangeObserver:", *(_QWORD *)(a1 + 32));

}

- (void)showMediaPicker:(id)a3 animated:(BOOL)a4
{
  id v5;
  void *v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  objc_super v16;
  _QWORD v17[5];
  _QWORD aBlock[5];

  v5 = a3;
  -[CKChatController setImagePickerController:](self, "setImagePickerController:", v5);
  -[CKChatController updateRaiseGesture](self, "updateRaiseGesture");
  -[CKChatController entryView](self, "entryView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "contentView");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isActive");

  v9 = objc_msgSend(v5, "sourceType");
  if (!CKIsRunningInMessagesViewService())
  {
    if (v9 == 1)
    {
      +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "canPresentOverKeyboard");

      -[CKChatController beginHoldingAutorotationForKey:](self, "beginHoldingAutorotationForKey:", CFSTR("CKAutorotationHoldImagePicker"));
      if (!v11)
        goto LABEL_3;
    }
    else
    {
      -[CKChatController beginHoldingAutorotationForKey:](self, "beginHoldingAutorotationForKey:", CFSTR("CKAutorotationHoldImagePicker"));
    }
    v12 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __57__CKChatController_MediaInput__showMediaPicker_animated___block_invoke;
    aBlock[3] = &unk_1E274B4F8;
    aBlock[4] = self;
    v13 = _Block_copy(aBlock);
    v17[0] = v12;
    v17[1] = 3221225472;
    v17[2] = __57__CKChatController_MediaInput__showMediaPicker_animated___block_invoke_2;
    v17[3] = &unk_1E274B520;
    v17[4] = self;
    v14 = _Block_copy(v17);
    +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "presentViewController:fromViewController:presentationHandler:dismissalHandler:animated:completion:", v5, self, v13, v14, 1, 0);

    goto LABEL_9;
  }
  -[CKChatController beginHoldingAutorotationForKey:](self, "beginHoldingAutorotationForKey:", CFSTR("CKAutorotationHoldImagePicker"));
LABEL_3:
  v16.receiver = self;
  v16.super_class = (Class)CKChatController;
  -[CKChatController becomeFirstResponder](&v16, sel_becomeFirstResponder);
  -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v5, 1, 0);
  -[CKChatController setTargetFirstResponder:](self, "setTargetFirstResponder:", v8);
LABEL_9:

}

void __57__CKChatController_MediaInput__showMediaPicker_animated___block_invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;

  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "photoButton");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "button");
  v22 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v22, "frame");
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  objc_msgSend(*(id *)(a1 + 32), "view");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "superview");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "convertRect:fromView:", v17, v9, v11, v13, v15);
  *a2 = v18;
  a2[1] = v19;
  a2[2] = v20;
  a2[3] = v21;

  objc_msgSend(*(id *)(a1 + 32), "view");
  *a3 = (id)objc_claimAutoreleasedReturnValue();

}

void __57__CKChatController_MediaInput__showMediaPicker_animated___block_invoke_2(uint64_t a1)
{
  void *v2;
  void *v3;
  char v4;

  objc_msgSend(*(id *)(a1 + 32), "hideMediaPickerAnimated:", 0);
  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "contentView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isActive");

  if ((v4 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "becomeFirstResponder");
}

- (void)hideMediaPickerAnimated:(BOOL)a3
{
  -[CKChatController hideMediaPickerAnimated:completion:](self, "hideMediaPickerAnimated:completion:", a3, 0);
}

- (void)hideMediaPickerAnimated:(BOOL)a3 completion:(id)a4
{
  _BOOL8 v4;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  __CFString **v10;
  __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  void *v20;
  CKChatController *v21;
  id v22;

  v4 = a3;
  v6 = a4;
  -[CKChatController imagePickerController](self, "imagePickerController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    v9 = objc_msgSend(v7, "sourceType");
    v10 = CKScrollViewHoldingScrollGeometryReasonTypePhotoLibraryOverlay;
    if (v9 == 1)
      v10 = CKScrollViewHoldingScrollGeometryReasonTypeCameraOverlay;
    v11 = *v10;
    objc_msgSend(v8, "presentingViewController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    -[CKScrollViewController endHoldingScrollGeometryUpdatesForReason:](self, "endHoldingScrollGeometryUpdatesForReason:", v11);
    if (v12)
    {
      v17 = MEMORY[0x1E0C809B0];
      v18 = 3221225472;
      v19 = __67__CKChatController_MediaInput__hideMediaPickerAnimated_completion___block_invoke;
      v20 = &unk_1E274DA38;
      v21 = self;
      v22 = v6;
      v13 = _Block_copy(&v17);
      +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance", v17, v18, v19, v20);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "presentedViewController");
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (v15 == v8)
        +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance");
      else
        objc_msgSend(v8, "presentingViewController");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "dismissViewControllerAnimated:completion:", v4, v13);

    }
  }
  -[CKChatController endHoldingAutorotationForKey:](self, "endHoldingAutorotationForKey:", CFSTR("CKAutorotationHoldImagePicker"));
  -[CKChatController setImagePickerController:](self, "setImagePickerController:", 0);
  -[CKChatController updateRaiseGesture](self, "updateRaiseGesture");

}

void __67__CKChatController_MediaInput__hideMediaPickerAnimated_completion___block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  objc_msgSend(*(id *)(a1 + 32), "entryView");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "contentView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isActive");

  if ((v5 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "becomeFirstResponder");
}

- (void)prewarmCamera:(id)a3
{
  CKVideoMessageRecordingViewController *v4;
  void *v5;
  void *v6;
  CKVideoMessageRecordingViewController *v7;

  v4 = [CKVideoMessageRecordingViewController alloc];
  -[CKChatController entryView](self, "entryView");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "photoButton");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[CKVideoMessageRecordingViewController initWithPresentationView:](v4, "initWithPresentationView:", v6);

  -[CKVideoMessageRecordingViewController setVideoMessageDelegate:](v7, "setVideoMessageDelegate:", self);
  -[CKChatController setVideoMessageRecordingViewController:](self, "setVideoMessageRecordingViewController:", v7);

}

- (void)actionMenuGestureRecognizerButtonDidTouchDownButton:(id)a3
{
  -[CKChatController prewarmCamera:](self, "prewarmCamera:", 0);
}

- (BOOL)actionMenuGestureRecognizerButtonShouldShowHint:(id)a3
{
  return 0;
}

- (BOOL)actionMenuGestureRecognizerButtonIsShowingHint:(id)a3
{
  return 0;
}

- (BOOL)actionMenuGestureRecognizerButtonShouldRecognizeGesture:(id)a3
{
  void *v3;
  void *v4;
  void *v5;
  char v6;

  -[CKCoreChatController conversation](self, "conversation", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "sendingService");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "__ck_isiMessage"))
  {
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "cameraIsAllowlisted");

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)actionMenuGestureRecognizerButtonGestureDidBegin:(id)a3
{
  void *v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  void *v13;
  void *v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  BOOL v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v27;
  void *v28;
  id v29;
  CGRect v30;
  CGRect v31;

  if (objc_msgSend(MEMORY[0x1E0CEA508], "__ck_currentDeviceIsPadOrMac", a3))
  {
    objc_msgSend(MEMORY[0x1E0CEA950], "mainScreen");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "bounds");
    v6 = v5;
    v8 = v7;
    v10 = v9;
    v12 = v11;

    -[CKChatController view](self, "view");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "window");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "bounds");
    v16 = v15;
    v18 = v17;
    v20 = v19;
    v22 = v21;

    v30.origin.x = v6;
    v30.origin.y = v8;
    v30.size.width = v10;
    v30.size.height = v12;
    v31.origin.x = v16;
    v31.origin.y = v18;
    v31.size.width = v20;
    v31.size.height = v22;
    v23 = CGRectEqualToRect(v30, v31);
    if ((IMGetAppBoolForKey() & 1) != 0 || v23)
      goto LABEL_7;
LABEL_9:
    -[CKChatController addMedia:](self, "addMedia:", 0);
    return;
  }
  if ((IMGetAppBoolForKey() & 1) == 0)
  {
    -[CKChatController view](self, "view");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "window");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "windowScene");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend(v26, "interfaceOrientation") - 1;

    if (v27 > 1)
      goto LABEL_9;
  }
LABEL_7:
  if (!-[CKChatController isShowingVideoMessageRecordingView](self, "isShowingVideoMessageRecordingView"))
  {
    -[CKChatController setShowingVideoMessageRecordingView:](self, "setShowingVideoMessageRecordingView:", 1);
    -[CKChatController beginHoldingAutorotationForKey:](self, "beginHoldingAutorotationForKey:", CFSTR("CKAutorotationHoldQuickCamera"));
    -[CKChatController videoMessageRecordingViewController](self, "videoMessageRecordingViewController");
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v28)
      -[CKChatController prewarmCamera:](self, "prewarmCamera:", 0);
    -[CKChatController videoMessageRecordingViewController](self, "videoMessageRecordingViewController");
    v29 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "presentWithCompletion:", 0);

  }
}

- (void)ckVideoMessageRecordingViewControllerRecordingCanceled:(id)a3
{
  -[CKChatController dismissVideoMessageRecordingViewController](self, "dismissVideoMessageRecordingViewController", a3);
  objc_msgSend(MEMORY[0x1E0CEABB8], "attemptRotationToDeviceOrientation");
}

- (void)ckVideoMessageRecordingViewController:(id)a3 mediaObjectCaptured:(id)a4 error:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, void *);
  void *v19;
  id v20;
  id v21;
  uint8_t buf[4];
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[CKChatController entryView](self, "entryView");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
    goto LABEL_12;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    +[CKComposition expirableCompositionWithMediaObject:](CKComposition, "expirableCompositionWithMediaObject:", v9);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      if (IMOSLoggingEnabled())
      {
        OSLogHandleForIMFoundationCategory();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v23 = v9;
          _os_log_impl(&dword_18DFCD000, v14, OS_LOG_TYPE_INFO, "Tried to send an attachment from video message recorder which wasn't an image or a movie: %@", buf, 0xCu);
        }

      }
      goto LABEL_12;
    }
    +[CKComposition quickImageCompositionWithMediaObject:](CKComposition, "quickImageCompositionWithMediaObject:", v9);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if (!v12)
  {
LABEL_12:
    v13 = 0;
    goto LABEL_13;
  }
  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = __96__CKChatController_MediaInput__ckVideoMessageRecordingViewController_mediaObjectCaptured_error___block_invoke;
  v19 = &unk_1E274D688;
  v13 = v12;
  v20 = v13;
  v21 = v11;
  objc_msgSend(v21, "compositionWithAcceptedAutocorrection:", &v16);

LABEL_13:
  -[CKChatController becomeFirstResponder](self, "becomeFirstResponder", v16, v17, v18, v19);
  objc_msgSend(v11, "contentView");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "makeActive");

  -[CKChatController dismissVideoMessageRecordingViewController](self, "dismissVideoMessageRecordingViewController");
  objc_msgSend(MEMORY[0x1E0CEABB8], "attemptRotationToDeviceOrientation");

}

void __96__CKChatController_MediaInput__ckVideoMessageRecordingViewController_mediaObjectCaptured_error___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(a2, "compositionByAppendingComposition:", v3);
    v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = v3;
  }
  v5 = v4;
  objc_msgSend(*(id *)(a1 + 40), "setComposition:", v4);

}

- (void)dismissVideoMessageRecordingViewController
{
  void *v3;

  -[CKChatController videoMessageRecordingViewController](self, "videoMessageRecordingViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dismissWithCompletion:", 0);

  -[CKChatController setVideoMessageRecordingViewController:](self, "setVideoMessageRecordingViewController:", 0);
  -[CKChatController endHoldingAutorotationForKey:](self, "endHoldingAutorotationForKey:", CFSTR("CKAutorotationHoldQuickCamera"));
  -[CKChatController setShowingVideoMessageRecordingView:](self, "setShowingVideoMessageRecordingView:", 0);
}

- (void)transcriptCollectionViewController:(id)a3 didTapPhotoStackButtonForChatItem:(id)a4 assetReference:(id)a5
{
  -[CKChatController _presentGridForChatItem:assetReference:](self, "_presentGridForChatItem:assetReference:", a4, a5);
}

- (void)transcriptCollectionViewController:(id)a3 didPinchPhotoStackForChatItem:(id)a4 assetReference:(id)a5
{
  -[CKChatController _presentGridForChatItem:assetReference:](self, "_presentGridForChatItem:assetReference:", a4, a5);
}

- (void)transcriptCollectionViewController:(id)a3 didTapPhotoStackAdditionalItemsForChatItem:(id)a4
{
  -[CKChatController _presentGridForChatItem:assetReference:](self, "_presentGridForChatItem:assetReference:", a4, 0);
}

- (void)transcriptCollectionViewController:(id)a3 didTapPhotoStackForChatItem:(id)a4 assetReference:(id)a5
{
  -[CKChatController _presentViewerForChatItem:assetReference:](self, "_presentViewerForChatItem:assetReference:", a4, a5);
}

- (void)transcriptCollectionViewController:(id)a3 didTapPhotoStackButtonForPendingMomentShareChatItem:(id)a4
{
  -[CKChatController _presentGridForPendingMomentShareChatItem:](self, "_presentGridForPendingMomentShareChatItem:", a4);
}

- (void)transcriptCollectionViewController:(id)a3 didTapPendingMomentShareForChatItem:(id)a4
{
  -[CKChatController _presentGridForPendingMomentShareChatItem:](self, "_presentGridForPendingMomentShareChatItem:", a4);
}

- (void)photoGridDisplayedChatItemChanged:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;

  v4 = a3;
  -[CKChatController photosGridViewController](self, "photosGridViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    -[CKChatController photoGridMomentShareChatItem](self, "photoGridMomentShareChatItem");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      -[CKChatController _tapbackStatusManagerForChatItem:](self, "_tapbackStatusManagerForChatItem:", v4);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      -[CKChatController setPhotoGridMomentShareChatItem:](self, "setPhotoGridMomentShareChatItem:", v4);
      objc_msgSend(v5, "viewModel");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = __69__CKChatController_PhotosSupport__photoGridDisplayedChatItemChanged___block_invoke;
      v12[3] = &unk_1E2759628;
      v13 = v7;
      v9 = v7;
      objc_msgSend(v8, "performChanges:", v12);

    }
    else
    {
      -[CKChatController photoGridDataSourceManager](self, "photoGridDataSourceManager");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "dataSource");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setMediaObjectDataSource:", v11);

    }
  }

}

void __69__CKChatController_PhotosSupport__photoGridDisplayedChatItemChanged___block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "setTapbackStatusManager:", *(_QWORD *)(a1 + 32));

}

- (void)_presentGridForPendingMomentShareChatItem:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  _QWORD v12[5];
  id v13;

  v4 = a3;
  objc_msgSend(v4, "momentShareURL");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0D357F0], "sharedInstance");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "message");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "guid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKCoreChatController chat](self, "chat");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "guid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "upgradeCompleteMyMomentLinkToStackWithMessageGUID:chatGUID:", v8, v10);

    -[CKChatController setMomentShareFetchGeneration:](self, "setMomentShareFetchGeneration:", -[CKChatController momentShareFetchGeneration](self, "momentShareFetchGeneration") + 1);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __77__CKChatController_PhotosSupport___presentGridForPendingMomentShareChatItem___block_invoke;
    v12[3] = &unk_1E2759650;
    v12[4] = self;
    v13 = v4;
    -[CKChatController _gridViewNavigationControllerForMomentShareURL:chatItem:tapbackManager:completionHandler:](self, "_gridViewNavigationControllerForMomentShareURL:chatItem:tapbackManager:completionHandler:", v5, v13, 0, v12);

  }
  else
  {
    IMLogHandleForCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      -[CKTranscriptCollectionViewController didTapUnavailableMomentShareBalloonView:].cold.1();

  }
}

void __77__CKChatController_PhotosSupport___presentGridForPendingMomentShareChatItem___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;

  v5 = a2;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "_presentGridViewNavigationController:", v5);
  }
  else if (a3 != 1)
  {
    IMLogHandleForCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      __77__CKChatController_PhotosSupport___presentGridForPendingMomentShareChatItem___block_invoke_cold_1(a1, a3, v6);

  }
}

- (void)_presentGridForChatItem:(id)a3 assetReference:(id)a4
{
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;

  v6 = a3;
  v7 = a4;
  -[CKChatController setPhotoGridMomentShareChatItem:](self, "setPhotoGridMomentShareChatItem:", 0);
  -[CKChatController setPhotoGridDataSourceManager:](self, "setPhotoGridDataSourceManager:", 0);
  -[CKChatController setPhotoGridDisplayedChatItemGUID:](self, "setPhotoGridDisplayedChatItemGUID:", 0);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __74__CKChatController_PhotosSupport___presentGridForChatItem_assetReference___block_invoke;
  v10[3] = &unk_1E2759678;
  v10[4] = self;
  v11 = v6;
  v12 = v7;
  v8 = v7;
  v9 = v6;
  -[CKChatController _gridViewNavigationControllerForChatItem:assetReference:completionHandler:](self, "_gridViewNavigationControllerForChatItem:assetReference:completionHandler:", v9, v8, v10);

}

void __74__CKChatController_PhotosSupport___presentGridForChatItem_assetReference___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;

  v5 = a2;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "_presentGridViewNavigationController:", v5);
  }
  else if (a3 != 1)
  {
    IMLogHandleForCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      __74__CKChatController_PhotosSupport___presentGridForChatItem_assetReference___block_invoke_cold_1(a1, a3);

  }
}

- (void)_presentGridViewNavigationController:(id)a3
{
  id v4;

  v4 = a3;
  -[CKScrollViewController beginHoldingScrollGeometryUpdatesForReason:](self, "beginHoldingScrollGeometryUpdatesForReason:", CFSTR("ShowingPhotoGridOverlay"));
  -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v4, 1, &__block_literal_global_233);

}

- (void)_gridViewNavigationControllerForMomentShareURL:(id)a3 chatItem:(id)a4 tapbackManager:(id)a5 completionHandler:(id)a6
{
  id v10;
  id v11;
  id v12;
  id v13;
  int64_t v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  _QWORD v23[5];
  id v24;
  id v25;
  id v26;
  id v27;
  int64_t v28;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = -[CKChatController momentShareFetchGeneration](self, "momentShareFetchGeneration");
  IMLogHandleForCategory();
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    -[CKChatController(PhotosSupport) _gridViewNavigationControllerForMomentShareURL:chatItem:tapbackManager:completionHandler:].cold.1();

  -[CKCoreChatController chat](self, "chat");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "momentShareCache");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "absoluteString");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __124__CKChatController_PhotosSupport___gridViewNavigationControllerForMomentShareURL_chatItem_tapbackManager_completionHandler___block_invoke;
  v23[3] = &unk_1E27596A0;
  v27 = v13;
  v28 = v14;
  v23[4] = self;
  v24 = v10;
  v25 = v11;
  v26 = v12;
  v19 = v12;
  v20 = v11;
  v21 = v10;
  v22 = v13;
  objc_msgSend(v17, "momentShareForURLString:completionHandler:", v18, v23);

}

void __124__CKChatController_PhotosSupport___gridViewNavigationControllerForMomentShareURL_chatItem_tapbackManager_completionHandler___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void (*v17)(void);
  char IsPermanent;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  void *v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(*(id *)(a1 + 32), "momentShareFetchGeneration");
  if (*(_QWORD *)(a1 + 72) != v7)
  {
    v14 = v7;
    IMLogHandleForCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)v22 = 134218240;
      *(_QWORD *)&v22[4] = v16;
      *(_WORD *)&v22[12] = 2048;
      *(_QWORD *)&v22[14] = v14;
      _os_log_impl(&dword_18DFCD000, v15, OS_LOG_TYPE_DEFAULT, "Cancelled fetch with generation: %td, current: %td", v22, 0x16u);
    }

    v17 = *(void (**)(void))(*(_QWORD *)(a1 + 64) + 16);
    goto LABEL_20;
  }
  IMLogHandleForCategory();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (!v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v20 = *(_QWORD *)(a1 + 40);
      v21 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)v22 = 138412802;
      *(_QWORD *)&v22[4] = v20;
      *(_WORD *)&v22[12] = 2048;
      *(_QWORD *)&v22[14] = v21;
      *(_WORD *)&v22[22] = 2112;
      v23 = v6;
      _os_log_error_impl(&dword_18DFCD000, v9, OS_LOG_TYPE_ERROR, "Failed to fetch moment share for URL: %@, generation: %td, error: %@", v22, 0x20u);
    }

    IsPermanent = IMMomentShareCacheErrorIsPermanent();
    IMLogHandleForCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      __124__CKChatController_PhotosSupport___gridViewNavigationControllerForMomentShareURL_chatItem_tapbackManager_completionHandler___block_invoke_cold_1(IsPermanent, v19);

    v17 = *(void (**)(void))(*(_QWORD *)(a1 + 64) + 16);
LABEL_20:
    v17();
    goto LABEL_21;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    __124__CKChatController_PhotosSupport___gridViewNavigationControllerForMomentShareURL_chatItem_tapbackManager_completionHandler___block_invoke_cold_3(a1, (_QWORD *)(a1 + 72), v9);

  v10 = v5;
  if (objc_msgSend(v10, "status") == 2)
  {
    IMLogHandleForCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v22 = 138412290;
      *(_QWORD *)&v22[4] = v10;
      _os_log_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_DEFAULT, "Will accept moment share: %@", v22, 0xCu);
    }

    *(_QWORD *)v22 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v22[8] = 3221225472;
    *(_QWORD *)&v22[16] = ___AcceptMomentShareIfNecessary_block_invoke;
    v23 = &unk_1E274B1A0;
    v24 = v10;
    objc_msgSend(v24, "acceptMomentShareWithCompletion:", v22);

  }
  IMLogHandleForCategory();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    __124__CKChatController_PhotosSupport___gridViewNavigationControllerForMomentShareURL_chatItem_tapbackManager_completionHandler___block_invoke_cold_2();

  objc_msgSend(*(id *)(a1 + 32), "_gridViewNavigationControllerForMomentShare:chatItem:tapbackManager:", v10, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

LABEL_21:
}

- (id)_gridViewNavigationControllerForMomentShare:(id)a3 chatItem:(id)a4 tapbackManager:(id)a5
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, void *);
  void *v23;
  CKChatController *v24;
  id v25;
  _QWORD v26[5];
  id v27;

  v8 = a4;
  v9 = a5;
  v10 = a3;
  if (objc_msgSend(v10, "status") == 1)
    v11 = 3;
  else
    v11 = 2;
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D7B250]), "initWithMomentShare:activityType:sourceType:", v10, v11, 1);

  v13 = objc_alloc_init(MEMORY[0x1E0D7B258]);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v12, "createSession");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    +[CKCMMAssetActionManager assetActionManagerWithCMMSession:chatItem:presentedFromInlineReply:chatActionHelper:performerDelegate:](CKCMMAssetActionManager, "assetActionManagerWithCMMSession:chatItem:presentedFromInlineReply:chatActionHelper:performerDelegate:", v14, v8, -[CKCoreChatController isInline](self, "isInline"), self, self);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_opt_class();
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __103__CKChatController_PhotosSupport___gridViewNavigationControllerForMomentShare_chatItem_tapbackManager___block_invoke;
    v26[3] = &unk_1E27596C8;
    v26[4] = self;
    v27 = v9;
    objc_msgSend(v13, "workflowViewControllerWithSession:embedInNavigationControllerOfClass:assetActionManager:assetCollectionActionManager:photosViewConfigurationBlock:", v14, v16, v15, 0, v26);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v18 = objc_opt_class();
    v20 = MEMORY[0x1E0C809B0];
    v21 = 3221225472;
    v22 = __103__CKChatController_PhotosSupport___gridViewNavigationControllerForMomentShare_chatItem_tapbackManager___block_invoke_2;
    v23 = &unk_1E27596C8;
    v24 = self;
    v25 = v9;
    objc_msgSend(v13, "workflowViewControllerWithContext:embedInNavigationControllerOfClass:photosViewConfigurationBlock:", v12, v18, &v20);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(v17, "setModalPresentationStyle:", 3, v20, v21, v22, v23, v24);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    -[CKChatController _configureGridControllerForStackTransition:chatItem:](self, "_configureGridControllerForStackTransition:chatItem:", v17, v8);

  return v17;
}

void __103__CKChatController_PhotosSupport___gridViewNavigationControllerForMomentShare_chatItem_tapbackManager___block_invoke(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  _ApplyCommonGridConfiguration(v3, *(void **)(a1 + 32));
  objc_msgSend(v3, "setAllowsDragAndDrop:", 0);
  objc_msgSend(v3, "setAllowedBehaviors:", objc_msgSend(v3, "allowedBehaviors") | 0x200);
  if (objc_msgSend(*(id *)(a1 + 32), "isInline"))
    objc_msgSend(v3, "setAllowedActions:", objc_msgSend(v3, "allowedActions") & 0xFFFFFFFFFFFEFFDFLL);
  objc_msgSend(v3, "setAllowedBehaviors:", objc_msgSend(v3, "allowedBehaviors") & 0xFFFFFFFFFFFFFFBFLL);
  objc_msgSend(v3, "setTapbackStatusManager:", *(_QWORD *)(a1 + 40));

}

void __103__CKChatController_PhotosSupport___gridViewNavigationControllerForMomentShare_chatItem_tapbackManager___block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  _ApplyCommonGridConfiguration(v4, v3);
  objc_msgSend(v4, "setAllowsDragAndDrop:", 0);
  objc_msgSend(v4, "setTapbackStatusManager:", *(_QWORD *)(a1 + 40));

}

- (void)_gridViewNavigationControllerForChatItem:(id)a3 assetReference:(id)a4 completionHandler:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;
  id v19;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  -[CKChatController setMomentShareFetchGeneration:](self, "setMomentShareFetchGeneration:", -[CKChatController momentShareFetchGeneration](self, "momentShareFetchGeneration") + 1);
  -[CKChatController _tapbackStatusManagerForChatItem:](self, "_tapbackStatusManagerForChatItem:", v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "momentShareURL");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __109__CKChatController_PhotosSupport___gridViewNavigationControllerForChatItem_assetReference_completionHandler___block_invoke;
    v15[3] = &unk_1E27596F0;
    v15[4] = self;
    v16 = v8;
    v17 = v9;
    v18 = v11;
    v19 = v10;
    -[CKChatController _gridViewNavigationControllerForMomentShareURL:chatItem:tapbackManager:completionHandler:](self, "_gridViewNavigationControllerForMomentShareURL:chatItem:tapbackManager:completionHandler:", v12, v16, v18, v15);

  }
  else
  {
    IMLogHandleForCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      -[CKChatController(PhotosSupport) _gridViewNavigationControllerForChatItem:assetReference:completionHandler:].cold.1();

    -[CKChatController _regularGridViewNavigationControllerForChatItem:assetReference:tapbackManager:](self, "_regularGridViewNavigationControllerForChatItem:assetReference:tapbackManager:", v8, v9, v11);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    (*((void (**)(id, void *, _QWORD))v10 + 2))(v10, v14, 0);

  }
}

void __109__CKChatController_PhotosSupport___gridViewNavigationControllerForChatItem_assetReference_completionHandler___block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v5 = a2;
  v6 = v5;
  if (v5 || a3 != 3)
  {
    if (v5)
    {
      objc_msgSend(*(id *)(a1 + 32), "setPhotoGridMomentShareChatItem:", *(_QWORD *)(a1 + 40));
      v9 = *(void **)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 40), "IMChatItem");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "guid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setPhotoGridDisplayedChatItemGUID:", v11);

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      __109__CKChatController_PhotosSupport___gridViewNavigationControllerForChatItem_assetReference_completionHandler___block_invoke_cold_1();

    objc_msgSend(*(id *)(a1 + 32), "_regularGridViewNavigationControllerForChatItem:assetReference:tapbackManager:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

  }
}

- (id)_regularGridViewNavigationControllerForChatItem:(id)a3 assetReference:(id)a4 tapbackManager:(id)a5
{
  id v7;
  id v8;
  CKMediaObjectAssetDataSourceManager *v9;
  void *v10;
  void *v11;
  void *v12;
  CKMediaObjectAssetActionManager *v13;
  id v14;
  CKMediaObjectImageProvider *v15;
  void *v16;
  CKImportStatusManager *v17;
  void *v18;
  BOOL v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  CKMediaObjectAssetActionManager *v28;
  void *v29;

  v7 = a3;
  v8 = a5;
  objc_msgSend(v7, "dataSource");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[CKMediaObjectAssetDataSourceManager initWithDataSource:]([CKMediaObjectAssetDataSourceManager alloc], "initWithDataSource:", v29);
  objc_msgSend(v7, "IMChatItem");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "guid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController setPhotoGridDisplayedChatItemGUID:](self, "setPhotoGridDisplayedChatItemGUID:", v11);

  -[CKChatController setPhotoGridDataSourceManager:](self, "setPhotoGridDataSourceManager:", v9);
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D7B920]), "initWithDataSourceManager:", v9);
  v13 = -[CKMediaObjectAssetActionManager initWithChatItem:presentedFromInlineReply:chatActionHelper:selectionManager:]([CKMediaObjectAssetActionManager alloc], "initWithChatItem:presentedFromInlineReply:chatActionHelper:selectionManager:", v7, -[CKCoreChatController isInline](self, "isInline"), self, v12);
  v14 = objc_alloc(MEMORY[0x1E0D7B818]);
  v15 = objc_alloc_init(CKMediaObjectImageProvider);
  v28 = v13;
  v16 = (void *)objc_msgSend(v14, "initWithDataSourceManager:mediaProvider:selectionManager:assetActionManager:assetCollectionActionManager:", v9, v15, v12, v13, 0);

  v17 = objc_alloc_init(CKImportStatusManager);
  objc_msgSend(v16, "setAssetImportStatusManager:", v17);

  _ApplyCommonGridConfiguration(v16, self);
  objc_msgSend(v16, "setTapbackStatusManager:", v8);

  objc_msgSend(v16, "setAllowedActions:", objc_msgSend(v16, "allowedActions") | 0x1A000);
  objc_msgSend(v16, "setAllowedActions:", objc_msgSend(v16, "allowedActions") & 0xFFFFFFFFFFFFFB7FLL);
  objc_msgSend(v16, "setAllowedBehaviors:", objc_msgSend(v16, "allowedBehaviors") | 0x80);
  if (-[CKCoreChatController isInline](self, "isInline")
    || (objc_msgSend(v7, "message"),
        v18 = (void *)objc_claimAutoreleasedReturnValue(),
        v19 = -[CKChatController _allowsMultipleSelectionForMessage:](self, "_allowsMultipleSelectionForMessage:", v18),
        v18,
        !v19))
  {
    objc_msgSend(v16, "setAllowedActions:", objc_msgSend(v16, "allowedActions") & 0xFFFFFFFFFFFFFFDFLL);
  }
  objc_msgSend(v16, "setWantsTabBarHidden:", 1);
  objc_msgSend(v16, "setPrefersActionsInToolbar:", 1);
  objc_msgSend(v7, "message");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v20, "isFromMe") & 1) != 0)
  {
    v21 = 0;
  }
  else
  {
    v22 = (void *)MEMORY[0x1E0D358C0];
    objc_msgSend(v7, "IMChatItem");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "photosSyndicationIdentifiersForMessage:transcriptChatItem:", v20, v23);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v24 = -[CKPhotosGridFooterViewModel initAssetsDataSourceManager:syndicationIdentifiers:]([CKPhotosGridFooterViewModel alloc], "initAssetsDataSourceManager:syndicationIdentifiers:", v9, v21);
  objc_msgSend(v16, "setFooterViewModel:", v24);
  objc_msgSend(v16, "setFooterVisibilityStyle:", 2);
  v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D7B810]), "initWithConfiguration:", v16);
  objc_msgSend(v25, "setCk_chatController:", self);
  v26 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA7B8]), "initWithRootViewController:", v25);
  objc_msgSend(v26, "setModalPresentationStyle:", 3);
  -[CKChatController _configureGridControllerForStackTransition:chatItem:](self, "_configureGridControllerForStackTransition:chatItem:", v26, v7);

  return v26;
}

- (BOOL)_allowsMultipleSelectionForMessage:(id)a3
{
  id v3;
  void *v4;
  int v5;
  BOOL v6;

  v3 = a3;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isScheduledMessagesEnabled");

  v6 = !v5 || objc_msgSend(v3, "scheduleType") != 2 || objc_msgSend(v3, "scheduleState") != 1;
  return v6;
}

- (void)_configureGridControllerForStackTransition:(id)a3 chatItem:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v6 = a4;
  v7 = a3;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "balloonViewForChatItem:", v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v9, "stackView");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v10 = 0;
  }
  v12 = v10;
  objc_msgSend(v10, "gridTransitioningDelegate");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setTransitioningDelegate:", v11);

}

- (void)_presentViewerForChatItem:(id)a3 assetReference:(id)a4
{
  id v6;
  id v7;
  void *v8;
  char isKindOfClass;
  void *v10;
  void *v11;
  NSObject *v12;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "asset");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    -[CKScrollViewController beginHoldingScrollGeometryUpdatesForReason:](self, "beginHoldingScrollGeometryUpdatesForReason:", CFSTR("ShowingPhotoGridOverlay"));
    objc_msgSend(v6, "dataSource");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController _previewViewControllerForAssetReference:dataSource:previewDelegate:previewMode:](self, "_previewViewControllerForAssetReference:dataSource:previewDelegate:previewMode:", v7, v10, self, 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "setChatItem:", v6);
    -[CKChatController presentViewController:animated:completion:](self, "presentViewController:animated:completion:", v11, 1, 0);

  }
  else if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = 136315138;
      v14 = "-[CKChatController(PhotosSupport) _presentViewerForChatItem:assetReference:]";
      _os_log_impl(&dword_18DFCD000, v12, OS_LOG_TYPE_INFO, "%s got non-CKMediaObjectBackedAsset PXDisplayAsset!", (uint8_t *)&v13, 0xCu);
    }

  }
}

- (id)_tapbackStatusManagerForChatItem:(id)a3
{
  id v4;
  CKMediaObjectTapbackManager *v5;
  void *v6;

  v4 = a3;
  v5 = objc_alloc_init(CKMediaObjectTapbackManager);
  -[CKMediaObjectTapbackManager setChatItem:](v5, "setChatItem:", v4);

  -[CKChatController view](self, "view");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKMediaObjectTapbackManager setGradientReferenceView:](v5, "setGradientReferenceView:", v6);

  -[CKMediaObjectTapbackManager setOriginatedFromGridView:](v5, "setOriginatedFromGridView:", 1);
  -[CKMediaObjectTapbackManager setInvertTapbackTailDirection:](v5, "setInvertTapbackTailDirection:", 1);
  return v5;
}

- (void)presentedPreviewControllerDidSelectNavigateToGrid
{
  void *v3;
  void *v4;
  char isKindOfClass;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[5];
  id v15;
  id v16;

  -[CKChatController previewController](self, "previewController");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    -[CKChatController previewController](self, "previewController");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "chatItem");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) != 0)
    {
      -[CKChatController previewController](self, "previewController");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "chatItem");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "dataSource");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "currentPreviewItem");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "assetReferenceForMediaObject:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = __84__CKChatController_PhotosSupport__presentedPreviewControllerDidSelectNavigateToGrid__block_invoke;
      v14[3] = &unk_1E2759678;
      v14[4] = self;
      v15 = v7;
      v16 = v10;
      v11 = v10;
      v12 = v7;
      -[CKChatController _gridViewNavigationControllerForChatItem:assetReference:completionHandler:](self, "_gridViewNavigationControllerForChatItem:assetReference:completionHandler:", v12, v11, v14);

    }
  }
  else
  {

  }
}

void __84__CKChatController_PhotosSupport__presentedPreviewControllerDidSelectNavigateToGrid__block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD v15[5];
  id v16;

  v5 = a2;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "previewController");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "view");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "window");
    v8 = objc_claimAutoreleasedReturnValue();

    -[NSObject snapshotViewAfterScreenUpdates:](v8, "snapshotViewAfterScreenUpdates:", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "view");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject bounds](v8, "bounds");
    objc_msgSend(v10, "convertRect:fromCoordinateSpace:", v8);
    objc_msgSend(v9, "setFrame:");

    objc_msgSend(*(id *)(a1 + 32), "view");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "addSubview:", v9);

    objc_msgSend(*(id *)(a1 + 32), "setIsTransitioningFromQLPreviewToGrid:", 1);
    objc_msgSend(*(id *)(a1 + 32), "previewController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "dismissViewControllerAnimated:completion:", 0, 0);

    v13 = *(void **)(a1 + 32);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __84__CKChatController_PhotosSupport__presentedPreviewControllerDidSelectNavigateToGrid__block_invoke_2;
    v15[3] = &unk_1E274A108;
    v15[4] = v13;
    v16 = v9;
    v14 = v9;
    objc_msgSend(v13, "presentViewController:animated:completion:", v5, 1, v15);

LABEL_6:
    goto LABEL_7;
  }
  if (a3 != 1)
  {
    IMLogHandleForCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      __84__CKChatController_PhotosSupport__presentedPreviewControllerDidSelectNavigateToGrid__block_invoke_cold_1(a1, a3);
    goto LABEL_6;
  }
LABEL_7:

}

uint64_t __84__CKChatController_PhotosSupport__presentedPreviewControllerDidSelectNavigateToGrid__block_invoke_2(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setIsTransitioningFromQLPreviewToGrid:", 0);
  return objc_msgSend(*(id *)(a1 + 40), "removeFromSuperview");
}

- (void)presentedPreviewControllerDidSelectDismissToGrid
{
  id v2;

  -[CKChatController previewController](self, "previewController");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, 0);

}

- (id)_previewViewControllerForAssetReference:(id)a3 photosViewController:(id)a4 previewMode:(int64_t)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;

  v8 = a4;
  v9 = a3;
  objc_msgSend(v8, "viewModel");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "currentDataSource");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  -[CKChatController _previewViewControllerForAssetReference:dataSource:previewDelegate:previewMode:](self, "_previewViewControllerForAssetReference:dataSource:previewDelegate:previewMode:", v9, v11, v8, a5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

- (id)_previewViewControllerForAssetReference:(id)a3 dataSource:(id)a4 previewDelegate:(id)a5 previewMode:(int64_t)a6
{
  id v10;
  id v11;
  id v12;
  CKQLPreviewController *v13;
  CKQLPreviewControllerDataSource *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  CKQLPreviewController *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  char *v23;
  void *v24;
  void *v25;
  objc_super v27[2];
  __int128 v28;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = objc_alloc_init(CKQLPreviewController);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    -[CKQLPreviewController setChatControllerPreviewDelegate:](v13, "setChatControllerPreviewDelegate:", self);
  -[QLPreviewController setDelegate:](v13, "setDelegate:", v12);
  v14 = objc_alloc_init(CKQLPreviewControllerDataSource);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v11, "mediaObjects");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKQLPreviewControllerDataSource setPreviewItems:](v14, "setPreviewItems:", v15);

    -[QLPreviewController setDataSource:](v13, "setDataSource:", v14);
    -[CKChatController setQlPreviewDataSource:](self, "setQlPreviewDataSource:", v14);
    if (v10)
    {
      objc_msgSend(v10, "indexPath");
      v16 = v28;
    }
    else
    {
      v16 = 0;
      v27[1] = 0u;
      v28 = 0u;
    }
    -[QLPreviewController setCurrentPreviewItemIndex:](v13, "setCurrentPreviewItemIndex:", v16);
    -[CKChatController setPreviewController:](self, "setPreviewController:", v13);
    -[CKChatController entryView](self, "entryView");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "contentView");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController setEntryViewWasActiveOnPreview:](self, "setEntryViewWasActiveOnPreview:", objc_msgSend(v20, "isActive"));

    if (!-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
    {
      v27[0].receiver = self;
      v27[0].super_class = (Class)CKChatController;
      -[objc_super becomeFirstResponder](v27, sel_becomeFirstResponder);
    }
    v21 = objc_alloc(MEMORY[0x1E0CEA380]);
    objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("square.grid.2x2"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (a6 == 2)
      v23 = sel_presentedPreviewControllerDidSelectNavigateToGrid;
    else
      v23 = sel_presentedPreviewControllerDidSelectDismissToGrid;
    v24 = (void *)objc_msgSend(v21, "initWithImage:style:target:action:", v22, 0, self, v23);
    -[CKQLPreviewController navigationItem](v13, "navigationItem");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "setRightBarButtonItem:", v24);

    v18 = v13;
  }
  else
  {
    IMLogHandleForCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      -[CKChatController(PhotosSupport) _previewViewControllerForAssetReference:dataSource:previewDelegate:previewMode:].cold.1((uint64_t)v11, v17);

    v18 = 0;
  }

  return v18;
}

- (void)_presentPreviewViewControllerFromPhotosViewController:(id)a3 assetReference:(id)a4
{
  id v6;
  id v7;
  void *v8;
  NSObject *v9;

  v6 = a3;
  v7 = a4;
  -[CKChatController _previewViewControllerForAssetReference:photosViewController:previewMode:](self, "_previewViewControllerForAssetReference:photosViewController:previewMode:", v7, v6, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    objc_msgSend(v6, "presentViewController:animated:completion:", v8, 1, 0);
  }
  else
  {
    IMLogHandleForCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      -[CKChatController(PhotosSupport) _presentPreviewViewControllerFromPhotosViewController:assetReference:].cold.1();

  }
}

- (BOOL)photosViewController:(id)a3 didPickAssetReference:(id)a4
{
  id v6;
  id v7;

  v6 = a3;
  v7 = a4;
  -[CKChatController _presentPreviewViewControllerFromPhotosViewController:assetReference:](self, "_presentPreviewViewControllerFromPhotosViewController:assetReference:", v6, v7);

  return 1;
}

- (void)_showTapbackReplyOverlayFromPhotosViewController:(id)a3 assetReference:(id)a4 presentTapbackKeyboardInput:(BOOL)a5
{
  _BOOL8 v5;
  id v8;
  id v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  id v20;
  void (**v21)(_QWORD, _QWORD);
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  int v31;
  void *v32;
  void *v33;
  uint8_t v34[16];

  v5 = a5;
  v8 = a4;
  v9 = a3;
  objc_msgSend(v9, "regionOfInterestForAssetReference:image:shouldSnapshotPlaceholder:", v8, 0, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "view");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "rectInCoordinateSpace:", v11);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;

  objc_msgSend(v10, "placeholderViewFactory");
  v20 = (id)objc_claimAutoreleasedReturnValue();

  if (v20)
  {
    objc_msgSend(v10, "placeholderViewFactory");
    v21 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v21)[2](v21, v10);
    v20 = (id)objc_claimAutoreleasedReturnValue();

  }
  -[CKChatController setPhotoGridTapbackSnapshotRect:](self, "setPhotoGridTapbackSnapshotRect:", v13, v15, v17, v19);
  -[CKChatController photoGridMomentShareChatItem](self, "photoGridMomentShareChatItem");
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  if (v22)
  {
    -[CKChatController photoGridMomentShareChatItem](self, "photoGridMomentShareChatItem");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "dataSource");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "chatItemForAssetReference:", v8);
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    if (v25)
      goto LABEL_8;
    -[CKChatController photoGridMomentShareChatItem](self, "photoGridMomentShareChatItem");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "dataSource");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "temporaryChatItemForAssetReference:", v8);
    v25 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(v8, "asset");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "chatItem");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
  }

LABEL_8:
  -[CKChatController _fullScreenBalloonViewControllerForPhotosGridViewWithChatItem:snapshotView:presentTapbackKeyboardInput:](self, "_fullScreenBalloonViewControllerForPhotosGridViewWithChatItem:snapshotView:presentTapbackKeyboardInput:", v25, v20, v5);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKCoreChatController setFullScreenBalloonViewController:](self, "setFullScreenBalloonViewController:", v28);
  IMLogHandleForCategory();
  v29 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v34 = 0;
    _os_log_impl(&dword_18DFCD000, v29, OS_LOG_TYPE_DEFAULT, "_fullScreenBalloonViewController has been set", v34, 2u);
  }

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend(v30, "isEmojiTapbacksEnabled");

  if (v31)
  {
    objc_msgSend(v28, "setModalPresentationStyle:", 6);
    -[CKChatController presentedViewController](self, "presentedViewController");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "presentViewController:animated:completion:", v28, 0, 0);
  }
  else
  {
    objc_msgSend(v28, "setModalPresentationStyle:", 3);
    +[CKAdaptivePresentationController sharedInstance](CKAdaptivePresentationController, "sharedInstance");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController presentedViewController](self, "presentedViewController");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "presentViewController:fromViewController:presentationHandler:dismissalHandler:animated:completion:", v28, v33, 0, 0, 0, 0);

  }
}

- (void)photosViewController:(id)a3 didDoubleTapAssetReference:(id)a4
{
  id v6;
  id v7;

  v7 = a3;
  v6 = a4;
  if (-[CKCoreChatController _shouldAllowReply](self, "_shouldAllowReply"))
    -[CKChatController _showTapbackReplyOverlayFromPhotosViewController:assetReference:presentTapbackKeyboardInput:](self, "_showTapbackReplyOverlayFromPhotosViewController:assetReference:presentTapbackKeyboardInput:", v7, v6, 0);

}

- (id)photosViewController:(id)a3 dragItemProviderForAssetReference:(id)a4
{
  void *v4;
  void *v5;
  void *v6;

  objc_msgSend(a4, "asset", a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v4, "chatItem");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "dragItemProvider");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

- (void)actionManager:(id)a3 presentInlineReplyControllerForChatItem:(id)a4
{
  void *v5;
  id v6;

  -[CKChatController modalInlineReplyControllerForChatItem:](self, "modalInlineReplyControllerForChatItem:", a4);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  -[CKChatController photosGridViewController](self, "photosGridViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && v6)
    objc_msgSend(v5, "presentViewController:animated:completion:", v6, 1, 0);

}

- (void)retractScheduledChatItem:(id)a3
{
  id v4;
  void *v5;
  char isKindOfClass;
  NSObject *v7;
  void *v8;

  v4 = a3;
  objc_msgSend(v4, "IMChatItem");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    -[CKCoreChatController conversation](self, "conversation");
    v7 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "IMChatItem");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject retractMessagePart:](v7, "retractMessagePart:", v8);

  }
  else
  {
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      -[CKChatController(PhotosSupport) retractScheduledChatItem:].cold.1();
  }

}

- (void)retractScheduledChatItems:(id)a3 fromAggregateChatItem:(id)a4
{
  id v6;
  id v7;
  void *v8;
  char isKindOfClass;
  NSObject *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  char v18;
  NSObject *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  CKChatController *v23;
  void *v24;
  id v25;
  uint8_t buf;
  _BYTE v27[15];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(v7, "IMChatItem");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    v23 = self;
    v24 = v7;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v10 = objc_claimAutoreleasedReturnValue();
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v25 = v6;
    v11 = v6;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v29 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
          objc_msgSend(v16, "IMChatItem");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          v18 = objc_opt_isKindOfClass();

          if ((v18 & 1) != 0)
          {
            objc_msgSend(v16, "IMChatItem");
            v19 = objc_claimAutoreleasedReturnValue();
            -[NSObject addObject:](v10, "addObject:", v19);
          }
          else
          {
            IMLogHandleForCategory();
            v19 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              -[CKChatController(PhotosSupport) retractScheduledChatItems:fromAggregateChatItem:].cold.2(&buf, v27, v19);
          }

        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
      }
      while (v13);
    }

    -[CKCoreChatController conversation](v23, "conversation");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v24;
    objc_msgSend(v24, "IMChatItem");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21 && -[NSObject count](v10, "count"))
    {
      objc_msgSend(v20, "retractScheduledMessageParts:fromAggregateChatItem:", v10, v21);
    }
    else
    {
      IMLogHandleForCategory();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        -[CKChatController(PhotosSupport) retractScheduledChatItems:fromAggregateChatItem:].cold.1();

    }
    v6 = v25;
  }
  else
  {
    IMLogHandleForCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      -[CKChatController(PhotosSupport) retractScheduledChatItems:fromAggregateChatItem:].cold.3();
  }

}

- (void)deleteMediaObjectAttachmentGUIDs:(id)a3 originalStackCount:(int64_t)a4
{
  id v6;
  NSObject *v7;
  void *v8;
  unint64_t v9;
  int v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  IMLogHandleForCategory();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 138412290;
    v11 = v6;
    _os_log_impl(&dword_18DFCD000, v7, OS_LOG_TYPE_DEFAULT, "deleting media object attachments %@", (uint8_t *)&v10, 0xCu);
  }

  -[CKCoreChatController chat](self, "chat");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "deleteTransfers:", v6);

  v9 = a4 - objc_msgSend(v6, "count");
  if (v9 <= objc_msgSend(MEMORY[0x1E0D35890], "_attachmentStackAggregationThreshold"))
    -[CKChatController dismissViewControllerAnimated:completion:](self, "dismissViewControllerAnimated:completion:", 1, 0);

}

- (id)_assetReferenceForDisplayedGridChatItem:(id)a3 selectionSnapshot:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  char isKindOfClass;
  void *v19;
  _OWORD v20[2];
  uint8_t buf[4];
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  -[CKChatController photosGridViewController](self, "photosGridViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "viewModel");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "currentDataSource");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v11 = v10;
    objc_msgSend(v6, "mediaObject");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject assetReferenceForMediaObject:](v11, "assetReferenceForMediaObject:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v13)
    {
      IMLogHandleForCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        -[CKChatController(PhotosSupport) _assetReferenceForDisplayedGridChatItem:selectionSnapshot:].cold.1(v12, v14);

    }
    goto LABEL_14;
  }
  -[CKChatController photoGridMomentShareChatItem](self, "photoGridMomentShareChatItem");
  v15 = objc_claimAutoreleasedReturnValue();
  if (!v15
    || (v16 = (void *)v15,
        objc_opt_class(),
        isKindOfClass = objc_opt_isKindOfClass(),
        v16,
        (isKindOfClass & 1) == 0))
  {
    IMLogHandleForCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      -[CKChatController(PhotosSupport) _assetReferenceForDisplayedGridChatItem:selectionSnapshot:].cold.2((uint64_t)v10, v11);
    goto LABEL_13;
  }
  if (v7)
    objc_msgSend(v7, "cursorIndexPath");
  else
    memset(v20, 0, sizeof(v20));
  objc_msgSend(v10, "assetReferenceAtItemIndexPath:", v20);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v13)
  {
    IMLogHandleForCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if (v7)
        objc_msgSend(v7, "cursorIndexPath");
      PXSimpleIndexPathDescription();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v22 = v19;
      _os_log_error_impl(&dword_18DFCD000, v11, OS_LOG_TYPE_ERROR, "nil asset reference for data source at index path %{public}@", buf, 0xCu);

    }
LABEL_13:
    v13 = 0;
LABEL_14:

  }
  return v13;
}

- (void)actionManager:(id)a3 quickLookChatItem:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;

  v6 = a4;
  v7 = a3;
  -[CKChatController photosGridViewController](self, "photosGridViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "selectionManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "selectionSnapshot");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _assetReferenceForDisplayedGridChatItem:selectionSnapshot:](self, "_assetReferenceForDisplayedGridChatItem:selectionSnapshot:", v6, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    -[CKChatController _presentPreviewViewControllerFromPhotosViewController:assetReference:](self, "_presentPreviewViewControllerFromPhotosViewController:assetReference:", v8, v11);
  }
  else
  {
    IMLogHandleForCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      -[CKChatController(PhotosSupport) actionManager:quickLookChatItem:].cold.1();

  }
}

- (void)actionManager:(id)a3 tapbackChatItem:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;

  v6 = a4;
  v7 = a3;
  -[CKChatController photosGridViewController](self, "photosGridViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "selectionManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v9, "selectionSnapshot");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _assetReferenceForDisplayedGridChatItem:selectionSnapshot:](self, "_assetReferenceForDisplayedGridChatItem:selectionSnapshot:", v6, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    -[CKChatController _showTapbackReplyOverlayFromPhotosViewController:assetReference:presentTapbackKeyboardInput:](self, "_showTapbackReplyOverlayFromPhotosViewController:assetReference:presentTapbackKeyboardInput:", v8, v11, 0);
  }
  else
  {
    IMLogHandleForCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      -[CKChatController(PhotosSupport) actionManager:tapbackChatItem:].cold.1();

  }
}

- (id)actionManager:(id)a3 tapbackElementsForChatItem:(id)a4
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  NSObject *v16;
  void *v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  _QWORD v27[4];
  id v28;
  id location[2];

  v6 = a3;
  v7 = a4;
  -[CKChatController photosGridViewController](self, "photosGridViewController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "selectionManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "selectionSnapshot");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _assetReferenceForDisplayedGridChatItem:selectionSnapshot:](self, "_assetReferenceForDisplayedGridChatItem:selectionSnapshot:", v7, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  location[0] = 0;
  objc_initWeak(location, self);
  if (v11)
  {
    v12 = MEMORY[0x1E0C809B0];
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = __76__CKChatController_PhotosSupport__actionManager_tapbackElementsForChatItem___block_invoke;
    v27[3] = &unk_1E2759718;
    objc_copyWeak(&v28, location);
    v23[0] = v12;
    v23[1] = 3221225472;
    v23[2] = __76__CKChatController_PhotosSupport__actionManager_tapbackElementsForChatItem___block_invoke_2;
    v23[3] = &unk_1E2759740;
    objc_copyWeak(&v26, location);
    v18 = v8;
    v13 = v8;
    v24 = v13;
    v14 = v11;
    v25 = v14;
    v19[0] = v12;
    v19[1] = 3221225472;
    v19[2] = __76__CKChatController_PhotosSupport__actionManager_tapbackElementsForChatItem___block_invoke_3;
    v19[3] = &unk_1E2759740;
    objc_copyWeak(&v22, location);
    v20 = v13;
    v21 = v14;
    -[CKChatController buildTapbackMenuElementsForChatItem:sendHandler:emojiKeyboardHandler:detailsHandler:](self, "buildTapbackMenuElementsForChatItem:sendHandler:emojiKeyboardHandler:detailsHandler:", v7, v27, v23, v19);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_destroyWeak(&v22);
    objc_destroyWeak(&v26);
    objc_destroyWeak(&v28);
    v8 = v18;
  }
  else
  {
    IMLogHandleForCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      -[CKChatController(PhotosSupport) actionManager:tapbackChatItem:].cold.1();

    v15 = (void *)MEMORY[0x1E0C9AA60];
  }
  objc_destroyWeak(location);

  return v15;
}

void __76__CKChatController_PhotosSupport__actionManager_tapbackElementsForChatItem___block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id *v6;
  id v7;
  id v8;
  id WeakRetained;

  v6 = (id *)(a1 + 32);
  v7 = a3;
  v8 = a2;
  WeakRetained = objc_loadWeakRetained(v6);
  objc_msgSend(WeakRetained, "sendTapback:chatItem:isRemoval:", v8, v7, a4);

}

void __76__CKChatController_PhotosSupport__actionManager_tapbackElementsForChatItem___block_invoke_2(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_showTapbackReplyOverlayFromPhotosViewController:assetReference:presentTapbackKeyboardInput:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 1);

}

void __76__CKChatController_PhotosSupport__actionManager_tapbackElementsForChatItem___block_invoke_3(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_showTapbackReplyOverlayFromPhotosViewController:assetReference:presentTapbackKeyboardInput:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);

}

- (void)actionManager:(id)a3 copyChatItems:(id)a4
{
  id v5;
  id v6;

  v5 = a4;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "copyChatItemsToPasteboard:", v5);

}

- (void)actionManager:(id)a3 forwardChatItems:(id)a4
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v5 = a4;
  if (-[CKChatController photosGridViewPresented](self, "photosGridViewPresented"))
    -[CKChatController dismissViewControllerAnimated:completion:](self, "dismissViewControllerAnimated:completion:", 0, 0);
  -[CKChatController entryView](self, "entryView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "shouldShowSubject");
  -[CKChatController chatInputTranscriptIdentifier](self, "chatInputTranscriptIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKComposition compositionForMessageParts:preserveSubject:contextIdentifier:](CKComposition, "compositionForMessageParts:preserveSubject:contextIdentifier:", v5, v7, v8);
  v10 = (id)objc_claimAutoreleasedReturnValue();

  -[CKCoreChatController delegate](self, "delegate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "chatController:forwardComposition:", self, v10);

}

- (void)selectAllForActionManager:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v4 = a3;
  -[CKChatController photosGridViewController](self, "photosGridViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "viewModel");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v12 = objc_msgSend(v6, "isInSelectMode");
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __61__CKChatController_PhotosSupport__selectAllForActionManager___block_invoke;
  v8[3] = &unk_1E2759768;
  v8[4] = &v9;
  objc_msgSend(v6, "performChanges:", v8);
  if (!*((_BYTE *)v10 + 24))
  {
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      -[CKChatController(PhotosSupport) selectAllForActionManager:].cold.1();

  }
  _Block_object_dispose(&v9, 8);

}

void __61__CKChatController_PhotosSupport__selectAllForActionManager___block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  void *v6;

  v3 = a2;
  v4 = v3;
  v6 = v3;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v5 = objc_msgSend(v3, "canEnterSelectMode");
    v4 = v6;
    if (v5)
    {
      objc_msgSend(v6, "setIsInSelectMode:", 1);
      v4 = v6;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    objc_msgSend(v4, "selectAll");
    v4 = v6;
  }

}

- (BOOL)actionPerformer:(id)a3 transitionToViewController:(id)a4 transitionType:(int64_t)a5
{
  id v8;
  id v9;
  void *v10;
  BOOL v11;
  void *v12;

  v8 = a3;
  v9 = a4;
  if (a5 == 1)
  {
    -[CKChatController presentedViewController](self, "presentedViewController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "navigationController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v11 = v10 != 0;
    if (v10)
    {
      v11 = 1;
      objc_msgSend(v10, "pushViewController:animated:", v9, 1);
    }
  }
  else
  {
    if (a5 != 2)
    {
      v11 = 0;
      goto LABEL_8;
    }
    -[CKChatController presentedViewController](self, "presentedViewController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 1;
    objc_msgSend(v10, "presentViewController:animated:completion:", v9, 1, 0);
  }

LABEL_8:
  return v11;
}

- (BOOL)photosGridViewPresented
{
  void *v2;
  BOOL v3;

  -[CKChatController photosGridViewController](self, "photosGridViewController");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

- (id)photosGridViewController
{
  id v3;
  void *v4;
  char isKindOfClass;
  void *v6;
  void *v7;
  uint64_t v8;
  void *i;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  -[CKChatController presentedViewController](self, "presentedViewController");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    -[CKChatController presentedViewController](self, "presentedViewController");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) == 0)
      return 0;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    -[CKChatController presentedViewController](self, "presentedViewController", 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "viewControllers");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v3 = (id)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v3)
    {
      v8 = *(_QWORD *)v13;
      while (2)
      {
        for (i = 0; i != v3; i = (char *)i + 1)
        {
          if (*(_QWORD *)v13 != v8)
            objc_enumerationMutation(v7);
          v10 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v3 = v10;
            goto LABEL_14;
          }
        }
        v3 = (id)objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v3)
          continue;
        break;
      }
    }
LABEL_14:

  }
  return v3;
}

- (id)_fullScreenBalloonViewControllerForPhotosGridViewWithChatItem:(id)a3 snapshotView:(id)a4 presentTapbackKeyboardInput:(BOOL)a5
{
  _BOOL4 v5;
  id v8;
  id v9;
  void *v10;
  CKFullScreenBalloonViewControllerPhone *v11;
  void *v12;
  void *v13;
  void *v14;
  CKFullScreenBalloonViewControllerPhone *v15;

  v5 = a5;
  v8 = a4;
  v9 = a3;
  if (v5)
    +[CKFullScreenBalloonViewDisplayConfiguration tapbackKeyboardInputContext](CKFullScreenBalloonViewDisplayConfiguration, "tapbackKeyboardInputContext");
  else
    +[CKFullScreenBalloonViewDisplayConfiguration tapbackPickerContext](CKFullScreenBalloonViewDisplayConfiguration, "tapbackPickerContext");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = [CKFullScreenBalloonViewControllerPhone alloc];
  objc_msgSend(v9, "menuTitle");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController _interfaceActionsForChatItem:](self, "_interfaceActionsForChatItem:", v9);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController view](self, "view");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = -[CKFullScreenBalloonViewControllerPhone initWithChatItem:title:interfaceActions:gradientReferenceView:displayConfiguration:pluginBalloonSnapshot:delegate:](v11, "initWithChatItem:title:interfaceActions:gradientReferenceView:displayConfiguration:pluginBalloonSnapshot:delegate:", v9, v12, v13, v14, v10, v8, self);

  return v15;
}

- (id)currentTopChatItemForAggregateChatItem:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v4 = a3;
  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "balloonViewForChatItem:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  v7 = v4;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v6, "stackView");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "currentAssetReference");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "asset");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "chatItem");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v7;
}

- (void)photosGridFullScreenBalloonViewController:(id)a3 sendMessageAcknowledgment:(int64_t)a4 forChatItem:(id)a5
{
  objc_super v5;

  v5.receiver = self;
  v5.super_class = (Class)CKChatController;
  -[CKCoreChatController fullScreenBalloonViewController:sendMessageAcknowledgment:forChatItem:](&v5, sel_fullScreenBalloonViewController_sendMessageAcknowledgment_forChatItem_, a3, a4, a5);
}

- (void)photosGridFullScreenBalloonViewControllerHandleDismissTap:(id)a3
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)CKChatController;
  -[CKCoreChatController fullScreenBalloonViewControllerHandleDismissTap:](&v3, sel_fullScreenBalloonViewControllerHandleDismissTap_, a3);
}

- (void)photosGridFullScreenBalloonViewController:(id)a3 verticallyScrollTranscriptByAmount:(double)a4 animated:(BOOL)a5 duration:(double)a6 completion:(id)a7
{
  if (a7)
    (*((void (**)(id, double, double))a7 + 2))(a7, a4, a6);
}

- (void)photosGridFullScreenBalloonViewController:(id)a3 replyButtonPressedForChatItem:(id)a4
{
  id v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;

  v6 = a3;
  v7 = a4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __107__CKChatController_PhotosSupport__photosGridFullScreenBalloonViewController_replyButtonPressedForChatItem___block_invoke;
  v10[3] = &unk_1E274A0B8;
  v10[4] = self;
  v11 = v7;
  v12 = v6;
  v8 = v6;
  v9 = v7;
  -[CKChatController _dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:](self, "_dismissFullScreenBubbleViewControllerAnimated:withSendAnimation:completion:", 1, 0, v10);

}

uint64_t __107__CKChatController_PhotosSupport__photosGridFullScreenBalloonViewController_replyButtonPressedForChatItem___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "showModalInlineReplyControllerForChatItem:fromViewController:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

- (BOOL)photosGridFullScreenBalloonViewControllerShouldShowReplyButton:(id)a3
{
  objc_super v4;

  v4.receiver = self;
  v4.super_class = (Class)CKChatController;
  return -[CKCoreChatController fullScreenBalloonViewControllerShouldShowReplyButton:](&v4, sel_fullScreenBalloonViewControllerShouldShowReplyButton_, a3);
}

- (CGRect)photosGridFullScreenBalloonViewControllerSafeAreaLayoutFrame:(id)a3
{
  void *v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGRect result;

  -[CKChatController presentedViewController](self, "presentedViewController", a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "safeAreaLayoutGuide");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "layoutFrame");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;

  v13 = v6;
  v14 = v8;
  v15 = v10;
  v16 = v12;
  result.size.height = v16;
  result.size.width = v15;
  result.origin.y = v14;
  result.origin.x = v13;
  return result;
}

- (BOOL)photosGridFullScreenBalloonViewControllerShouldShowHightlightButton:(id)a3 forChatItem:(id)a4
{
  return 0;
}

- (id)photosViewController:(id)a3 configurationForContextMenuInteraction:(id)a4 assetReference:(id)a5
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  id v26;
  id v27;
  id location;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = v8;
  location = 0;
  objc_initWeak(&location, self);
  v12 = (void *)MEMORY[0x1E0CEA4B0];
  v13 = MEMORY[0x1E0C809B0];
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __110__CKChatController_PhotosSupport__photosViewController_configurationForContextMenuInteraction_assetReference___block_invoke;
  v24[3] = &unk_1E2759790;
  objc_copyWeak(&v27, &location);
  v14 = v10;
  v25 = v14;
  v15 = v11;
  v26 = v15;
  v20[0] = v13;
  v20[1] = 3221225472;
  v20[2] = __110__CKChatController_PhotosSupport__photosViewController_configurationForContextMenuInteraction_assetReference___block_invoke_2;
  v20[3] = &unk_1E27597B8;
  objc_copyWeak(&v23, &location);
  v16 = v14;
  v21 = v16;
  v17 = v15;
  v22 = v17;
  objc_msgSend(v12, "configurationWithIdentifier:previewProvider:actionProvider:", 0, v24, v20);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  objc_destroyWeak(&v23);
  objc_destroyWeak(&v27);
  objc_destroyWeak(&location);

  return v18;
}

id __110__CKChatController_PhotosSupport__photosViewController_configurationForContextMenuInteraction_assetReference___block_invoke(uint64_t a1)
{
  id WeakRetained;
  void *v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_previewViewControllerForAssetReference:photosViewController:previewMode:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id __110__CKChatController_PhotosSupport__photosViewController_configurationForContextMenuInteraction_assetReference___block_invoke_2(id *a1)
{
  id WeakRetained;
  void *v3;
  CKMediaObjectAssetActionManager *v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (!WeakRetained)
    goto LABEL_5;
  objc_msgSend(a1[4], "asset");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v8 = 0;
LABEL_10:

    goto LABEL_11;
  }
  objc_msgSend(a1[4], "asset");
  v4 = (CKMediaObjectAssetActionManager *)objc_claimAutoreleasedReturnValue();
  -[CKMediaObjectAssetActionManager chatItem](v4, "chatItem");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    v8 = 0;
LABEL_9:

    goto LABEL_10;
  }
  objc_msgSend(a1[5], "viewModel");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isInSelectMode");

  if ((v7 & 1) == 0)
  {
    objc_msgSend(a1[4], "asset");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "chatItem");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    v4 = -[CKMediaObjectAssetActionManager initWithChatItem:presentedFromInlineReply:chatActionHelper:selectionManager:]([CKMediaObjectAssetActionManager alloc], "initWithChatItem:presentedFromInlineReply:chatActionHelper:selectionManager:", v3, objc_msgSend(WeakRetained, "isInline"), WeakRetained, 0);
    objc_msgSend(WeakRetained, "setPhotoGridClickyOrbChatItem:", v3);
    -[PXActionManager setPerformerDelegate:](v4, "setPerformerDelegate:", WeakRetained);
    -[CKMediaObjectAssetActionManager actionContextMenu](v4, "actionContextMenu");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
LABEL_5:
  v8 = 0;
LABEL_11:

  return v8;
}

- (void)photosViewController:(id)a3 commitPreviewViewControllerForContextMenuInteraction:(id)a4
{
  void *v5;
  id v6;

  v6 = a3;
  -[CKChatController previewController](self, "previewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
    objc_msgSend(v6, "presentViewController:animated:completion:", v5, 0, 0);

}

- (id)photosViewController:(id)a3 accessoriesForContextMenuInteraction:(id)a4 assetReference:(id)a5
{
  CKChatController *v7;
  id v8;
  void *v9;
  char isKindOfClass;
  void *v11;
  void *v12;
  CKChatController *v13;
  void *v14;

  v7 = (CKChatController *)a3;
  v8 = a5;
  objc_msgSend(v8, "asset");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0
    && (objc_msgSend(v8, "asset"),
        v11 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v11, "chatItem"),
        v12 = (void *)objc_claimAutoreleasedReturnValue(),
        v11,
        v12))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v13 = v7;
    else
      v13 = self;
    -[CKChatController contextMenuAccessoryViewsForChatItem:containingViewController:](self, "contextMenuAccessoryViewsForChatItem:containingViewController:", v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

- (void)photosViewController:(id)a3 contextMenuInteraction:(id)a4 willEndForConfiguration:(id)a5 animator:(id)a6
{
  void *v7;
  int64_t v8;
  void *v9;

  if (-[CKChatController acknowledgmentToSend](self, "acknowledgmentToSend", a3, a4, a5, a6))
  {
    -[CKCoreChatController chat](self, "chat");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = -[CKChatController acknowledgmentToSend](self, "acknowledgmentToSend");
    -[CKChatController photoGridClickyOrbChatItem](self, "photoGridClickyOrbChatItem");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "sendMessageAcknowledgment:forChatItem:", v8, v9);

    -[CKChatController setAcknowledgmentToSend:](self, "setAcknowledgmentToSend:", 0);
  }
  -[CKChatController setPhotoGridClickyOrbChatItem:](self, "setPhotoGridClickyOrbChatItem:", 0);
}

- (id)photosViewController:(id)a3 contextMenuInteraction:(id)a4 styleForMenuWithConfiguration:(id)a5
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  double v20;
  double v21;
  void *v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  void *v27;
  double v28;
  double v29;
  double v30;
  double v31;

  v5 = a3;
  objc_msgSend(MEMORY[0x1E0CEACE0], "defaultStyle");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v5;
  objc_msgSend(v7, "view");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "layoutMargins");
  v10 = v9;
  v12 = v11;
  v14 = v13;

  objc_msgSend(v7, "view");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "window");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "safeAreaInsets");
  v18 = v17;
  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "messageAcknowledgmentPickerBarSize");
  v21 = v20;

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v16) = objc_msgSend(v22, "isEmojiTapbacksEnabled");

  +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23;
  if ((_DWORD)v16)
  {
    objc_msgSend(v23, "attributionViewHeight");
    v26 = v25;
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "attributionViewMinPadding");
  }
  else
  {
    objc_msgSend(v23, "messageAcknowledgementVotingViewHeight");
    v26 = v29;
    +[CKUIBehavior sharedBehaviors](CKUIBehavior, "sharedBehaviors");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "messageAcknowledgementVotingViewMinPadding");
  }
  v30 = v26 + v28;

  objc_msgSend(v6, "preferredEdgeInsets");
  objc_msgSend(v6, "setPreferredEdgeInsets:", fmax(v31, v18 + v21 + v30), v10, v12, v14);

  return v6;
}

- (id)addContactOptionsMenuWithNicknameUpdate:(id)a3
{
  objc_class *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v4 = (objc_class *)MEMORY[0x1E0C99DE8];
  v5 = a3;
  v6 = objc_alloc_init(v4);
  -[CKChatController createNewContactActionWithNicknameUpdate:](self, "createNewContactActionWithNicknameUpdate:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "addObject:", v7);

  -[CKChatController addToExistingContactActionWithNicknameUpdate:](self, "addToExistingContactActionWithNicknameUpdate:", v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "addObject:", v8);
  v9 = (void *)MEMORY[0x1E0CEA740];
  v10 = (void *)objc_msgSend(v6, "copy");
  objc_msgSend(v9, "menuWithTitle:children:", &stru_1E276D870, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

- (id)createNewContactActionWithNicknameUpdate:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  _QWORD aBlock[4];
  id v13;
  id v14;
  id location;

  v4 = a3;
  CKFrameworkBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("CREATE_NEW_CONTACT"), &stru_1E276D870, CFSTR("ChatKit"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("person.crop.circle"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  location = 0;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __71__CKChatController_Contacts__createNewContactActionWithNicknameUpdate___block_invoke;
  aBlock[3] = &unk_1E274B010;
  objc_copyWeak(&v14, &location);
  v8 = v4;
  v13 = v8;
  v9 = _Block_copy(aBlock);
  objc_msgSend(MEMORY[0x1E0CEA2A8], "actionWithTitle:image:identifier:handler:", v6, v7, v6, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);

  return v10;
}

void __71__CKChatController_Contacts__createNewContactActionWithNicknameUpdate___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "createContactWithNicknameUpdate:", *(_QWORD *)(a1 + 32));

}

- (id)addToExistingContactActionWithNicknameUpdate:(id)a3
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  _QWORD aBlock[4];
  id v13;
  id v14;
  id location;

  v4 = a3;
  CKFrameworkBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("ADD_TO_EXISTING_CONTACT"), &stru_1E276D870, CFSTR("ChatKit"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CEA638], "systemImageNamed:", CFSTR("person.crop.circle.badge.plus"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  location = 0;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __75__CKChatController_Contacts__addToExistingContactActionWithNicknameUpdate___block_invoke;
  aBlock[3] = &unk_1E274B010;
  objc_copyWeak(&v14, &location);
  v8 = v4;
  v13 = v8;
  v9 = _Block_copy(aBlock);
  objc_msgSend(MEMORY[0x1E0CEA2A8], "actionWithTitle:image:identifier:handler:", v6, v7, v6, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);

  return v10;
}

void __75__CKChatController_Contacts__addToExistingContactActionWithNicknameUpdate___block_invoke(uint64_t a1)
{
  uint64_t v1;
  id *v2;
  id WeakRetained;
  id v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setCurrentNicknameUpdate:", v1);

  v4 = objc_loadWeakRetained(v2);
  objc_msgSend(v4, "selectContact");

}

- (void)showUpdatePromptForNicknameUpdate:(id)a3 sourceView:(id)a4 completionBlock:(id)a5
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  void *v48;
  id v49;
  void *v50;
  _QWORD v51[4];
  id v52;
  _QWORD v53[5];
  id v54;
  id v55;
  id v56;
  _QWORD v57[5];
  id v58;
  id v59;
  id v60;
  _QWORD v61[5];
  id v62;
  id v63;
  id v64;

  v8 = a3;
  v9 = a5;
  v49 = a4;
  CKFrameworkBundle();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("UPDATE_PHOTO_AND_NAME_TITLE"), &stru_1E276D870, CFSTR("ChatKit"));
  v50 = (void *)objc_claimAutoreleasedReturnValue();

  +[CKAlertController alertControllerWithTitle:message:preferredStyle:](CKAlertController, "alertControllerWithTitle:message:preferredStyle:", v50, 0, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "nickname");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController contactForNickname:](self, "contactForNickname:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  CKFrameworkBundle();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("NAME_AND_PHOTO"), &stru_1E276D870, CFSTR("ChatKit"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v61[0] = MEMORY[0x1E0C809B0];
  v61[1] = 3221225472;
  v61[2] = __91__CKChatController_Contacts__showUpdatePromptForNicknameUpdate_sourceView_completionBlock___block_invoke;
  v61[3] = &unk_1E274CBE8;
  v61[4] = self;
  v16 = v13;
  v62 = v16;
  v17 = v8;
  v63 = v17;
  v18 = v9;
  v64 = v18;
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v15, 0, v61);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "addAction:", v19);

  CKFrameworkBundle();
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("PHOTO_ONLY"), &stru_1E276D870, CFSTR("ChatKit"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v57[0] = MEMORY[0x1E0C809B0];
  v57[1] = 3221225472;
  v57[2] = __91__CKChatController_Contacts__showUpdatePromptForNicknameUpdate_sourceView_completionBlock___block_invoke_2;
  v57[3] = &unk_1E274CBE8;
  v57[4] = self;
  v22 = v16;
  v58 = v22;
  v23 = v17;
  v59 = v23;
  v24 = v18;
  v60 = v24;
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v21, 0, v57);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "addAction:", v25);

  CKFrameworkBundle();
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "localizedStringForKey:value:table:", CFSTR("NAME_ONLY"), &stru_1E276D870, CFSTR("ChatKit"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v53[0] = MEMORY[0x1E0C809B0];
  v53[1] = 3221225472;
  v53[2] = __91__CKChatController_Contacts__showUpdatePromptForNicknameUpdate_sourceView_completionBlock___block_invoke_3;
  v53[3] = &unk_1E274CBE8;
  v53[4] = self;
  v54 = v22;
  v55 = v23;
  v28 = v24;
  v56 = v28;
  v29 = v23;
  v30 = v22;
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v27, 0, v53);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "addAction:", v31);

  CKFrameworkBundle();
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v32, "localizedStringForKey:value:table:", CFSTR("CANCEL"), &stru_1E276D870, CFSTR("ChatKit"));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v51[0] = MEMORY[0x1E0C809B0];
  v51[1] = 3221225472;
  v51[2] = __91__CKChatController_Contacts__showUpdatePromptForNicknameUpdate_sourceView_completionBlock___block_invoke_4;
  v51[3] = &unk_1E274B330;
  v52 = v28;
  v34 = v28;
  +[CKAlertAction actionWithTitle:style:handler:](CKAlertAction, "actionWithTitle:style:handler:", v33, 1, v51);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "addAction:", v35);

  objc_msgSend(v11, "popoverPresentationController");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController view](self, "view");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "setSourceView:", v37);

  objc_msgSend(v11, "popoverPresentationController");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController view](self, "view");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "frame");
  v41 = v40;
  v43 = v42;
  v45 = v44;
  v47 = v46;
  objc_msgSend(v49, "superview");
  v48 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v39, "convertRect:fromView:", v48, v41, v43, v45, v47);
  objc_msgSend(v38, "setSourceRect:");

  objc_msgSend(v11, "presentFromViewController:animated:completion:", self, 1, 0);
}

uint64_t __91__CKChatController_Contacts__showUpdatePromptForNicknameUpdate_sourceView_completionBlock___block_invoke(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 6, 0, 3);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

uint64_t __91__CKChatController_Contacts__showUpdatePromptForNicknameUpdate_sourceView_completionBlock___block_invoke_2(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 4, 0, 3);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

uint64_t __91__CKChatController_Contacts__showUpdatePromptForNicknameUpdate_sourceView_completionBlock___block_invoke_3(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 2, 0, 3);
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

uint64_t __91__CKChatController_Contacts__showUpdatePromptForNicknameUpdate_sourceView_completionBlock___block_invoke_4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

- (void)updateContactQuietlyForNicknameUpdate:(id)a3 updateType:(unint64_t)a4
{
  id v6;
  void *v7;
  id v8;

  v6 = a3;
  objc_msgSend(v6, "nickname");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[CKChatController contactForNickname:](self, "contactForNickname:", v7);
  v8 = (id)objc_claimAutoreleasedReturnValue();

  -[CKChatController updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:](self, "updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:", v8, v6, a4, 0, 3);
}

- (id)updateOptionsMenuForContact:(id)a3 withNicknameUpdate:(id)a4 withCompletionBlock:(id)a5
{
  objc_class *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v8 = (objc_class *)MEMORY[0x1E0C99DE8];
  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = objc_alloc_init(v8);
  -[CKChatController nameAndPhotoForContact:andNicknameUpdate:withCompletionBlock:](self, "nameAndPhotoForContact:andNicknameUpdate:withCompletionBlock:", v11, v10, v9);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "addObject:", v13);

  -[CKChatController nameOnlyForContact:andNicknameUpdate:withCompletionBlock:](self, "nameOnlyForContact:andNicknameUpdate:withCompletionBlock:", v11, v10, v9);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "addObject:", v14);

  -[CKChatController photoOnlyForContact:andNicknameUpdate:withCompletionBlock:](self, "photoOnlyForContact:andNicknameUpdate:withCompletionBlock:", v11, v10, v9);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "addObject:", v15);
  v16 = (void *)MEMORY[0x1E0CEA740];
  v17 = (void *)objc_msgSend(v12, "copy");
  objc_msgSend(v16, "menuWithTitle:children:", &stru_1E276D870, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  return v18;
}

- (id)nameAndPhotoForContact:(id)a3 andNicknameUpdate:(id)a4 withCompletionBlock:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  _QWORD aBlock[4];
  id v20;
  id v21;
  id v22;
  id v23;
  id location;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  CKFrameworkBundle();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("NAME_AND_PHOTO"), &stru_1E276D870, CFSTR("ChatKit"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  location = 0;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __91__CKChatController_Contacts__nameAndPhotoForContact_andNicknameUpdate_withCompletionBlock___block_invoke;
  aBlock[3] = &unk_1E2759E78;
  objc_copyWeak(&v23, &location);
  v13 = v8;
  v20 = v13;
  v14 = v9;
  v21 = v14;
  v15 = v10;
  v22 = v15;
  v16 = _Block_copy(aBlock);
  objc_msgSend(MEMORY[0x1E0CEA2A8], "actionWithTitle:image:identifier:handler:", v12, 0, v12, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_destroyWeak(&v23);
  objc_destroyWeak(&location);

  return v17;
}

uint64_t __91__CKChatController_Contacts__nameAndPhotoForContact_andNicknameUpdate_withCompletionBlock___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 6, 0, 3);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

- (id)nameOnlyForContact:(id)a3 andNicknameUpdate:(id)a4 withCompletionBlock:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  _QWORD aBlock[4];
  id v20;
  id v21;
  id v22;
  id v23;
  id location;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  CKFrameworkBundle();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("NAME_ONLY"), &stru_1E276D870, CFSTR("ChatKit"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  location = 0;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __87__CKChatController_Contacts__nameOnlyForContact_andNicknameUpdate_withCompletionBlock___block_invoke;
  aBlock[3] = &unk_1E2759E78;
  objc_copyWeak(&v23, &location);
  v13 = v8;
  v20 = v13;
  v14 = v9;
  v21 = v14;
  v15 = v10;
  v22 = v15;
  v16 = _Block_copy(aBlock);
  objc_msgSend(MEMORY[0x1E0CEA2A8], "actionWithTitle:image:identifier:handler:", v12, 0, v12, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_destroyWeak(&v23);
  objc_destroyWeak(&location);

  return v17;
}

uint64_t __87__CKChatController_Contacts__nameOnlyForContact_andNicknameUpdate_withCompletionBlock___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 2, 0, 3);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

- (id)photoOnlyForContact:(id)a3 andNicknameUpdate:(id)a4 withCompletionBlock:(id)a5
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  _QWORD aBlock[4];
  id v20;
  id v21;
  id v22;
  id v23;
  id location;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  CKFrameworkBundle();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("PHOTO_ONLY"), &stru_1E276D870, CFSTR("ChatKit"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  location = 0;
  objc_initWeak(&location, self);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __88__CKChatController_Contacts__photoOnlyForContact_andNicknameUpdate_withCompletionBlock___block_invoke;
  aBlock[3] = &unk_1E2759E78;
  objc_copyWeak(&v23, &location);
  v13 = v8;
  v20 = v13;
  v14 = v9;
  v21 = v14;
  v15 = v10;
  v22 = v15;
  v16 = _Block_copy(aBlock);
  objc_msgSend(MEMORY[0x1E0CEA2A8], "actionWithTitle:image:identifier:handler:", v12, 0, v12, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_destroyWeak(&v23);
  objc_destroyWeak(&location);

  return v17;
}

uint64_t __88__CKChatController_Contacts__photoOnlyForContact_andNicknameUpdate_withCompletionBlock___block_invoke(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 4, 0, 3);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

- (id)contactForNickname:(id)a3
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = (void *)MEMORY[0x1E0D397A8];
  v4 = a3;
  objc_msgSend(v3, "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "handle");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "fetchCNContactForHandleWithID:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D397A8], "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D397A8], "keysForNicknameHandling");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "completedContact:withKeys:", v7, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

- (void)createContactWithNicknameUpdate:(id)a3
{
  if (a3)
    -[CKChatController updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:](self, "updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:", 0, a3, *MEMORY[0x1E0D38B20], 1, 1);
}

- (void)updateContact:(id)a3 withNicknameUpdate:(id)a4 updateType:(unint64_t)a5 addHandleToContact:(BOOL)a6 presentationMode:(unint64_t)a7
{
  _BOOL8 v8;
  id v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  NSObject *v28;
  int v29;
  id v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v8 = a6;
  v33 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v13 = a4;
  if (v13)
  {
    -[CKCoreChatController createMutableContact:withNicknameUpdate:updateType:addHandleToContact:](self, "createMutableContact:withNicknameUpdate:updateType:addHandleToContact:", v12, v13, a5, v8);
    v14 = objc_claimAutoreleasedReturnValue();
    switch(a7)
    {
      case 0uLL:
        if (IMOSLoggingEnabled())
        {
          OSLogHandleForIMFoundationCategory();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            LOWORD(v29) = 0;
            _os_log_impl(&dword_18DFCD000, v15, OS_LOG_TYPE_INFO, "CKContactController_Nicknames: invalid presentation mode for updating contact!", (uint8_t *)&v29, 2u);
          }
          goto LABEL_6;
        }
        goto LABEL_20;
      case 1uLL:
        objc_msgSend(MEMORY[0x1E0C974D8], "viewControllerForNewContact:", v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0D397A8], "sharedInstance");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "getContactStore");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "setContactStore:", v25);

        objc_msgSend(v16, "setDelegate:", self);
        v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA7B8]), "initWithRootViewController:", v16);
        -[CKChatController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_19;
      case 2uLL:
        objc_msgSend(MEMORY[0x1E0C974D8], "viewControllerForUpdatingContact:withPropertiesFromContact:", v12, v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0D397A8], "sharedInstance");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "getContactStore");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "setContactStore:", v18);

        objc_msgSend(v16, "setDelegate:", self);
        v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA7B8]), "initWithRootViewController:", v16);
        -[CKChatController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_19:
        v26 = v20;
        objc_msgSend(v20, "presentViewController:animated:completion:", v19, 1, 0);

        goto LABEL_20;
      case 3uLL:
        -[CKCoreChatController saveContact:shouldUpdate:](self, "saveContact:shouldUpdate:", v14, v12 != 0);
        if ((~(_BYTE)a5 & 6) == 0)
        {
          if (IMOSLoggingEnabled())
          {
            OSLogHandleForIMFoundationCategory();
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              LOWORD(v29) = 0;
              _os_log_impl(&dword_18DFCD000, v21, OS_LOG_TYPE_INFO, "Contact update mode silent with name and photo update", (uint8_t *)&v29, 2u);
            }

          }
LABEL_17:
          objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "handle");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "clearPendingNicknameUpdatesForHandle:forceClear:", v23, 1);

          goto LABEL_20;
        }
        v27 = IMOSLoggingEnabled();
        if ((a5 & 2) == 0)
        {
          if (v27)
          {
            OSLogHandleForIMFoundationCategory();
            v28 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              LOWORD(v29) = 0;
              _os_log_impl(&dword_18DFCD000, v28, OS_LOG_TYPE_INFO, "Contact update mode silent", (uint8_t *)&v29, 2u);
            }

          }
          goto LABEL_17;
        }
        if (v27)
        {
          OSLogHandleForIMFoundationCategory();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            LOWORD(v29) = 0;
            _os_log_impl(&dword_18DFCD000, v15, OS_LOG_TYPE_INFO, "Contact update mode silent with name update", (uint8_t *)&v29, 2u);
          }
LABEL_6:

        }
        break;
      default:
        goto LABEL_20;
    }
    goto LABEL_20;
  }
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v29 = 138412546;
      v30 = v12;
      v31 = 2112;
      v32 = 0;
      _os_log_impl(&dword_18DFCD000, v14, OS_LOG_TYPE_INFO, "CKChatController_Nicknames: unable to update contact %@ with nickname update %@", (uint8_t *)&v29, 0x16u);
    }
LABEL_20:

  }
}

- (void)contactViewController:(id)a3 didCompleteWithContact:(id)a4
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[5];

  objc_msgSend(a3, "presentingViewController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __75__CKChatController_Contacts__contactViewController_didCompleteWithContact___block_invoke;
  v10[3] = &unk_1E274A208;
  v10[4] = self;
  objc_msgSend(v6, "dismissViewControllerAnimated:completion:", 1, v10);

  if (a4)
  {
    objc_msgSend(MEMORY[0x1E0D358A8], "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[CKChatController currentNicknameUpdate](self, "currentNicknameUpdate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handle");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "clearPendingNicknameUpdatesForHandle:forceClear:", v9, 1);

  }
  -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
}

uint64_t __75__CKChatController_Contacts__contactViewController_didCompleteWithContact___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_showOrHideNicknameBannerIfNeeded");
}

- (void)selectContact
{
  void *v3;
  id v4;

  -[CKChatController viewControllerToPresentFrom](self, "viewControllerToPresentFrom");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  -[CKChatController contactPicker](self, "contactPicker");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "presentViewController:animated:completion:", v3, 1, 0);

}

- (id)viewControllerToPresentFrom
{
  CKChatController *v2;
  void *v3;
  uint64_t v4;

  v2 = self;
  -[CKChatController presentedViewController](v2, "presentedViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    -[CKChatController presentedViewController](v2, "presentedViewController");
    v4 = objc_claimAutoreleasedReturnValue();

    v2 = (CKChatController *)v4;
  }
  return v2;
}

- (void)dismissPickerWithCompletion:(id)a3
{
  id v4;
  void *v5;
  id v6;

  v4 = a3;
  -[CKChatController contactPicker](self, "contactPicker");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "presentingViewController");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dismissViewControllerAnimated:completion:", 1, v4);

}

- (void)contactPickerDidCancel:(id)a3
{
  -[CKChatController dismissPickerWithCompletion:](self, "dismissPickerWithCompletion:", 0);
}

- (void)contactPicker:(id)a3 didSelectContact:(id)a4
{
  id v5;
  id v6;
  _QWORD v7[5];
  id v8;

  v5 = a4;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __61__CKChatController_Contacts__contactPicker_didSelectContact___block_invoke;
  v7[3] = &unk_1E274A108;
  v7[4] = self;
  v8 = v5;
  v6 = v5;
  -[CKChatController dismissPickerWithCompletion:](self, "dismissPickerWithCompletion:", v7);

}

void __61__CKChatController_Contacts__contactPicker_didSelectContact___block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v1, "currentNicknameUpdate");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "updateContact:withNicknameUpdate:updateType:addHandleToContact:presentationMode:", v2, v3, 6, 1, 2);

}

- (void)_walletOrderImportControllerDismissed
{
  void *v3;
  void *v4;
  id v5;

  -[CKChatController setWalletOrderImportViewController:](self, "setWalletOrderImportViewController:", 0);
  -[CKChatController becomeFirstResponder](self, "becomeFirstResponder");
  -[CKChatController firstResponder](self, "firstResponder");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "reloadInputViews");

  -[CKCoreChatController collectionViewController](self, "collectionViewController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "collectionView");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "endHoldingContentOffsetUpdatesForReason:", CFSTR("ChatControllerQuickLook"));

}

- (int64_t)entryViewPositioningGuideForCurrentTapbackPickerPresentation
{
  CKChatController *v2;
  int64_t v3;

  v2 = self;
  v3 = sub_18E556CD4();

  return v3;
}

- (void)previewController:(id)a3 sendTapback:(id)a4 targetChatItem:(id)a5 isRemoval:(BOOL)a6
{
  -[CKCoreChatController sendTapback:chatItem:isRemoval:](self, sel_sendTapback_chatItem_isRemoval_, a4, a5, a6);
}

- (BOOL)previewController:(id)a3 shouldShowTapbackAttributionForChatItem:(id)a4
{
  return -[CKCoreChatController shouldShowTapbackAttributionForChatItem:](self, sel_shouldShowTapbackAttributionForChatItem_, a4);
}

- (BOOL)previewController:(id)a3 shouldShowTapbackPickerForChatItem:(id)a4
{
  return -[CKChatController shouldShowTapbackPickerForChatItem:](self, sel_shouldShowTapbackPickerForChatItem_, a4);
}

- (BOOL)previewControllerShouldEnableStickerTapbacks:(id)a3
{
  return -[CKCoreChatController chatSupportsStickerTapbacks](self, sel_chatSupportsStickerTapbacks, a3);
}

- (id)pickerAccessoryViewForChatItem:(id)a3 containingViewController:(id)a4
{
  id v6;
  id v7;
  CKChatController *v8;
  char *v9;

  v6 = a3;
  v7 = a4;
  v8 = self;
  v9 = sub_18E556F48(v6, v7);

  return v9;
}

- (void)tapbackPickerBalloonParentView:(id)a3 didInsertTapback:(id)a4
{
  id v6;
  id v7;
  CKChatController *v8;

  v6 = a3;
  v7 = a4;
  v8 = self;
  CKChatController.tapbackPickerBalloonParentView(_:didInsertTapback:)((uint64_t)v6, v7);

}

- (void)tapbackPickerBalloonParentView:(id)a3 requestedPresentPlugin:(id)a4 payloadID:(id)a5
{
  uint64_t v7;
  id v8;
  CKChatInputController *v9;
  CKChatInputController *v10;
  void *v11;
  void *v12;
  CKChatController *v13;

  if (a4)
    v7 = sub_18E76887C();
  else
    v7 = 0;
  sub_18E768984();
  v8 = a3;
  v13 = self;
  v9 = -[CKCoreChatController inputController](v13, sel_inputController);
  if (v9)
  {
    v10 = v9;
    if (v7)
      v11 = (void *)sub_18E768864();
    else
      v11 = 0;
    v12 = (void *)sub_18E768954();
    -[CKChatInputController _presentPluginIfNecessaryWithPayload:withPayloadID:](v10, sel__presentPluginIfNecessaryWithPayload_withPayloadID_, v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

}

- (void)tapbackPickerBalloonParentViewRequestedAppCardDismiss:(id)a3
{
  id v4;
  CKChatController *v5;

  v4 = a3;
  v5 = self;
  _sSo16CKChatControllerC7ChatKitE53tapbackPickerBalloonParentViewRequestedAppCardDismissyyAC07TapbackfghI0CF_0();

}

- (id)textInputContextIdentifierForPreviewController:(void *)a3
{
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;

  v4 = a3;
  v5 = a1;
  v6 = objc_msgSend(v5, sel_textInputContextIdentifier);
  if (v6)
  {
    v7 = v6;
    sub_18E768984();

    v8 = (void *)sub_18E768954();
    swift_bridgeObjectRelease();
  }
  else
  {

    v8 = 0;
  }
  return v8;
}

- (id)tapbackMenuElementsForChatItem:(id)a3
{
  id v4;
  CKChatController *v5;
  void *v6;

  v4 = a3;
  v5 = self;
  sub_18E557CD0((uint64_t)v4);

  sub_18E00F31C(0, (unint64_t *)&unk_1EE109A60);
  v6 = (void *)sub_18E768AC8();
  swift_bridgeObjectRelease();
  return v6;
}

- (id)buildTapbackMenuElementsForChatItem:(id)a3 sendHandler:(id)a4 emojiKeyboardHandler:(id)a5 detailsHandler:(id)a6
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  CKChatController *v17;
  void *v18;

  v10 = _Block_copy(a4);
  v11 = _Block_copy(a5);
  v12 = _Block_copy(a6);
  if (v10)
  {
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v10;
    v10 = sub_18E55A8F4;
    if (v11)
      goto LABEL_3;
LABEL_6:
    v14 = 0;
    if (v12)
      goto LABEL_4;
LABEL_7:
    v15 = 0;
    goto LABEL_8;
  }
  v13 = 0;
  if (!v11)
    goto LABEL_6;
LABEL_3:
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v11;
  v11 = sub_18E55AD4C;
  if (!v12)
    goto LABEL_7;
LABEL_4:
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v12;
  v12 = sub_18E52A888;
LABEL_8:
  v16 = a3;
  v17 = self;
  sub_18E558128(v16, (unint64_t)v10, v13, (uint64_t)v11, v14, (uint64_t)v12, v15);
  sub_18E011A40((uint64_t)v12);
  sub_18E011A40((uint64_t)v11);
  sub_18E011A40((uint64_t)v10);

  sub_18E00F31C(0, (unint64_t *)&unk_1EE109A60);
  v18 = (void *)sub_18E768AC8();
  swift_bridgeObjectRelease();
  return v18;
}

- (void)tapbackPickerViewController:(id)a3 didSelectTapback:(id)a4
{
  id v6;
  id v7;
  CKChatController *v8;

  v6 = a3;
  v7 = a4;
  v8 = self;
  CKChatController.tapbackPickerViewController(_:didSelectTapback:)((uint64_t)v6, v7);

}

- (void)tapbackPickerViewController:(id)a3 didDeselectTapback:(id)a4
{
  id v6;
  id v7;
  CKChatController *v8;

  v6 = a3;
  v7 = a4;
  v8 = self;
  CKChatController.tapbackPickerViewController(_:didDeselectTapback:)((uint64_t)v6, v7);

}

- (id)contextualCKChatItemsForTapbackPickerViewController:(id)a3
{
  id v4;
  CKChatController *v5;
  CKCoreTranscriptControllerProtocol *v6;
  id v7;
  uint64_t v8;
  void *v9;

  v4 = a3;
  v5 = self;
  v6 = -[CKCoreChatController collectionViewController](v5, sel_collectionViewController);
  v7 = -[CKCoreTranscriptControllerProtocol chatItems](v6, sel_chatItems);

  v8 = sub_18E768AE0();
  sub_18E55662C(v8);

  swift_bridgeObjectRelease();
  sub_18E00F31C(0, (unint64_t *)&qword_1EE0FA970);
  v9 = (void *)sub_18E768AC8();
  swift_bridgeObjectRelease();
  return v9;
}

- (id)smartEmojiResponses:(id)a3 chatItem:(id)a4
{
  id v6;
  id v7;
  CKChatController *v8;
  void *v9;

  v6 = a3;
  v7 = a4;
  v8 = self;
  sub_18E618438(a4);

  v9 = (void *)sub_18E768AC8();
  swift_bridgeObjectRelease();
  return v9;
}

- (NSArray)keyCommands
{
  CKChatController *v2;
  char **v3;
  void *v4;

  v2 = self;
  v3 = CKChatController.keyCommands.getter();

  if (v3)
  {
    sub_18E5F20C0();
    v4 = (void *)sub_18E768AC8();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  return (NSArray *)v4;
}

- (void)keyCommandDelete:(id)a3
{
  -[CKChatController delete:](self, sel_delete_, a3);
}

- (void)keyCommandSelectTapback:(id)a3
{
  id v4;
  CKChatController *v5;

  v4 = a3;
  v5 = self;
  sub_18E5F1DB8((uint64_t)v4);

}

void __111__CKChatController_ClickyOrbConformance___exportActionForChatItem_shouldUseTopMostChatItemIfAggregateChatItem___block_invoke_212_cold_1(uint64_t a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[24];

  *(_DWORD *)v3 = 138412546;
  *(_QWORD *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 2112;
  *(_QWORD *)&v3[14] = *(_QWORD *)(a2 + 32);
  OUTLINED_FUNCTION_1(&dword_18DFCD000, a2, a3, "Error saving media objects: %@. mediaObjects: %@", *(_QWORD *)v3, *(_QWORD *)&v3[8], *(_QWORD *)&v3[16]);
  OUTLINED_FUNCTION_2();
}

void __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_1(&dword_18DFCD000, v0, v1, "Failed to commit sticker: %@ after drop animation, because previewContainer was nil for preview: %@");
  OUTLINED_FUNCTION_2();
}

void __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_104_cold_1(_QWORD *a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[24];

  *(_DWORD *)v3 = 138412546;
  *(_QWORD *)&v3[4] = *a1;
  *(_WORD *)&v3[12] = 2112;
  *(_QWORD *)&v3[14] = *(_QWORD *)(a2 + 40);
  OUTLINED_FUNCTION_1(&dword_18DFCD000, a2, a3, "Missing stickerPackGUID for sticker: %@ loaded from drag item: %@. Aborting sticker send to avoid a blastdoor explosion for the recipient.", *(_QWORD *)v3, *(_QWORD *)&v3[8], *(_QWORD *)&v3[16]);
  OUTLINED_FUNCTION_2();
}

void __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_104_cold_2(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_4(&dword_18DFCD000, a2, a3, "Sticker pack GUID is an empty string for sticker: %@. This means the sticker may arrive without attribution for the recipient.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_2();
}

void __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_114_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_18DFCD000, v0, v1, "Error loading _MSMessageMediaPayload from item provider: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void __96__CKChatController_CKChatController_Stickers___sendStickerForDragItem_previewSize_dropLocation___block_invoke_125_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_18DFCD000, v0, v1, "Failed to copy dropped sticker with error: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

- (void)presentationControllerDidDismiss:(NSObject *)a3 .cold.1(uint64_t a1, void *a2, NSObject *a3)
{
  void *v6;
  void *v7;
  void *v8;
  int v9;
  const __CFString *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  const __CFString *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a2, "entryView");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "recursiveDescription");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a2, "entryView");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isFirstResponder");
  v10 = CFSTR("NO");
  v11 = 138412802;
  v12 = a1;
  v13 = 2112;
  if (v9)
    v10 = CFSTR("YES");
  v14 = v7;
  v15 = 2112;
  v16 = v10;
  _os_log_error_impl(&dword_18DFCD000, a3, OS_LOG_TYPE_ERROR, "Returned to transcript without an entry view window. PresentationController: %@, entryView.recursiveDescription: %@, entryView.isFirstResponder: %@", (uint8_t *)&v11, 0x20u);

}

void __147__CKChatController_scrollToMessageGUID_atSpecificMessagePartIndex_highlight_withInlineReplyOverlay_alignedWithView_allowOverScroll_scrollPosition___block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_18DFCD000, v0, v1, "Could not scroll to requested message, index path not found", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)transcriptCollectionViewController:balloonView:didRequestReaderViewControllerForChatItem:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_18DFCD000, v0, v1, "Requested reader view for chat item that was not an audio chat item.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)_updateCatchUpButtonVisibilityResumingFromBackground:(NSObject *)a3 .cold.1(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5;
  uint8_t v6[12];
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "item");
  OUTLINED_FUNCTION_6();
  v7 = 2048;
  v8 = a2;
  OUTLINED_FUNCTION_8(&dword_18DFCD000, a3, v5, "Index path of first unread message (%ld) is larger than number of items in collection view (%ld).", v6);
  OUTLINED_FUNCTION_1_0();
}

- (void)_animationPropertiesToUseInUpdateForReasons:followingHoldForReason:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, v0, v1, "Unexpectedly handling scroll geometry update triggered for multiple reasons: %@", v2);
  OUTLINED_FUNCTION_2();
}

- (void)_animationPropertiesToUseInUpdateForReasons:followingHoldForReason:.cold.2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_18DFCD000, v0, v1, "Unexpectedly handling scroll geometry update for no reasons.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)_maxEntryViewHeight
{
  int v4;
  double v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = 134217984;
  v5 = a2;
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, a1, a4, "entryView: The bottom of the entry view is above the top inset of the view controller. Forcing the entry view height to its fitting size: %f", (uint8_t *)&v4);
  OUTLINED_FUNCTION_2();
}

- (void)_updateFauxKeyboardLayoutGuideIfNeededForKeyboardAppearanceNotification:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, v0, v1, "Keyboard frame not included in notification: %@", v2);
  OUTLINED_FUNCTION_2();
}

- (void)sendSticker:(void *)a1 withDragTarget:(NSObject *)a2 draggedSticker:.cold.1(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "description");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, a2, v4, "Creating media object for sticker: %@ failed", v5);

  OUTLINED_FUNCTION_1_0();
}

+ (void)donateStickerToRecents:(void *)a1 .cold.1(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "description");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, a2, v4, "Missing data for sticker: %@", v5);

  OUTLINED_FUNCTION_1_0();
}

+ (void)donateStickerToRecents:(void *)a1 .cold.2(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "fileURL");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, a2, v4, "Unable to get representation from %@", v5);

  OUTLINED_FUNCTION_1_0();
}

+ (void)donateStickerToRecentsWithIdentifier:representations:stickerEffectType:externalURI:name:accessibilityLabel:metadata:ckAttributionInfo:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_18DFCD000, v0, v1, "Unable to donate sticker to recents; weak linked facade classes are nil",
    v2,
    v3,
    v4,
    v5,
    v6);
  OUTLINED_FUNCTION_3();
}

void __154__CKChatController_donateStickerToRecentsWithIdentifier_representations_stickerEffectType_externalURI_name_accessibilityLabel_metadata_ckAttributionInfo___block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, v0, v1, "Unable to donate sticker to recents: %@", v2);
  OUTLINED_FUNCTION_2();
}

- (void)_sendAutomaticallyPlacedSticker:stickerReactionSession:forChatItem:forParentChatItem:stickerFrame:animationCompletionHandler:.cold.2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_18DFCD000, v0, v1, "Unable to send sticker for nil message part chat item", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)_sendAutomaticallyPlacedSticker:stickerReactionSession:forChatItem:forParentChatItem:stickerFrame:animationCompletionHandler:.cold.3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_18DFCD000, v0, v1, "React with a sticker - could find backing balloonView. sending sticker but will not animate properly", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void __145__CKChatController__sendAutomaticallyPlacedSticker_stickerReactionSession_forChatItem_forParentChatItem_stickerFrame_animationCompletionHandler___block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_18DFCD000, v0, v1, "React with a sticker - could find backing sticker view. Cannot animate. Bailing", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_cold_1(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "description");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, a2, v4, "Failed to get existing shared info: %@", v5);

  OUTLINED_FUNCTION_1_0();
}

void __62__CKChatController_sendCompositionForFileProvider_completion___block_invoke_756_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, v0, v1, "Failed to get user's currentStatus, error: %@", v2);
  OUTLINED_FUNCTION_2();
}

void __93__CKChatController__sendCollaborationCompositionForFileProvider_sharingURL_share_completion___block_invoke_2_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_18DFCD000, v0, v1, "Metadata was not updated and is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void __73__CKChatController__sendCompositionForFileProviderCloudDrive_completion___block_invoke_cold_1(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v3 = 138412546;
  v4 = v1;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_8(&dword_18DFCD000, v2, (uint64_t)v2, "_sendCompositionForFileProviderCloudDrive: Received unexpected error getting sharing status for url: %@, error: %@", (uint8_t *)&v3);
  OUTLINED_FUNCTION_2();
}

void __76__CKChatController__startSharingForURLForFileProviderCloudDrive_completion___block_invoke_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, double a4)
{
  int v4;
  uint64_t v5;
  __int16 v6;
  double v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = 138412546;
  v5 = a1;
  v6 = 2048;
  v7 = a4;
  OUTLINED_FUNCTION_8(&dword_18DFCD000, a2, a3, "Error while creating the share URL: %@, in %f seconds", (uint8_t *)&v4);
  OUTLINED_FUNCTION_2();
}

- (void)_updateAndSendCompositionForFileProvider:(const char *)a1 share:(NSObject *)a2 sharingURL:completion:.cold.1(const char *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  NSStringFromSelector(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, a2, v4, "share is unexpectedly nil in %@", v5);

  OUTLINED_FUNCTION_1_0();
}

- (void)_updateAndSendCompositionForFileProvider:(const char *)a1 share:(NSObject *)a2 sharingURL:completion:.cold.2(const char *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  NSStringFromSelector(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, a2, v4, "composition is unexpectedly nil in %@", v5);

  OUTLINED_FUNCTION_1_0();
}

void __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_796_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, v0, v1, "addParticipantsToShare to share failed: %@", v2);
  OUTLINED_FUNCTION_2();
}

void __89__CKChatController__updateAndSendCompositionForFileProvider_share_sharingURL_completion___block_invoke_3_cold_1(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v3 = 138412546;
  v4 = v1;
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_8(&dword_18DFCD000, v2, (uint64_t)v2, "_checkCloudSharingStatusUpdateAndSendCompositionForFileProvider: Received unexpected error while getting sharing status for url: %@, error: %@", (uint8_t *)&v3);
  OUTLINED_FUNCTION_2();
}

void __87__CKChatController__removeSubsharesAndSendFileProviderComposition_shareURL_completion___block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, v0, v1, "shareFolderRemovingSubshares failed: %@", v2);
  OUTLINED_FUNCTION_2();
}

- (void)_updateAndSendCompositionForExistingCloudKitShare:(const char *)a1 share:(NSObject *)a2 completion:.cold.1(const char *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  NSStringFromSelector(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, a2, v4, "share is unexpectedly nil in %@", v5);

  OUTLINED_FUNCTION_1_0();
}

- (void)_updateAndSendCompositionForExistingCloudKitShare:(const char *)a1 share:(NSObject *)a2 completion:.cold.2(const char *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  NSStringFromSelector(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, a2, v4, "composition is unexpectedly nil in %@", v5);

  OUTLINED_FUNCTION_1_0();
}

- (void)sendCompositionForPendingCollaboration:completion:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_18DFCD000, v0, v1, "sendCompositionForPendingCollaboration: we have a URL (which should only happen for 3rd party file providers) but we were unable to begin accessing the URL, which prevents us from starting collaboration.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)sendCompositionForPendingCollaboration:completion:.cold.2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_18DFCD000, v0, v1, "sendCompositionForPendingCollaboration: we have a url (which should only happen for 3rd party file providers) and we were able to access it, but FileProvider does not have a record of it.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)_presentCollabInvalidFileProviderLocationAlertIfNecessaryForPayload:collaborationType:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, v0, v1, "Received an error retrieving an FPItem for the staged URL. Presenting an alert to the user informing them that the item is not currently in iCloud. Error: %@", v2);
  OUTLINED_FUNCTION_2();
}

void __115__CKChatController__presentCollabAddToMessagesGroupAlertIfNecessary_collaborationType_sendBlock_completionHandler___block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, v0, v1, "failed to get url with error: %@", v2);
  OUTLINED_FUNCTION_2();
}

- (void)textDroppableView:proposalForDrop:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_1(&dword_18DFCD000, v0, v1, "Created drop proposal", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void __72__CKChatController_textPasteConfigurationSupporting_transformPasteItem___block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_1(&dword_18DFCD000, v0, v1, "Created new drop composition", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)textPasteConfigurationSupporting:(const char *)a1 combineItemAttributedStrings:(NSObject *)a2 forRange:.cold.1(const char *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  NSStringFromSelector(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_9(&dword_18DFCD000, a2, v4, "returned from %@", v5);

  OUTLINED_FUNCTION_1_0();
}

- (void)textPasteConfigurationSupporting:(const char *)a1 performPasteOfAttributedString:(NSObject *)a2 toRange:.cold.1(const char *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  NSStringFromSelector(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_9(&dword_18DFCD000, a2, v4, "performed paste in %@", v5);

  OUTLINED_FUNCTION_1_0();
}

- (void)dragInteraction:previewForLiftingItem:session:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_10(&dword_18DFCD000, v0, v1, "%s disabling gesture recognizer for sticker lift: %@", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2();
}

- (void)dragInteraction:session:didEndWithOperation:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_10(&dword_18DFCD000, v0, v1, "%s re-enabling gesture recognizer for sticker lift: %@", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2();
}

- (void)dropInteraction:canHandleSession:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_1(&dword_18DFCD000, v0, v1, "DropInteraction returned YES for canHandleSession", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dropInteraction:canHandleSession:.cold.2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_1(&dword_18DFCD000, v0, v1, "DropInteraction returned NO for canHandleSession", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dropInteraction:sessionDidEnter:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_1(&dword_18DFCD000, v0, v1, "DropInteraction session did enter with existing dropSession", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dropInteraction:sessionDidEnter:.cold.2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_1(&dword_18DFCD000, v0, v1, "DropInteraction session did enter with new dropSession", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dropInteraction:sessionDidUpdate:.cold.1()
{
  NSObject *v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_8(&dword_18DFCD000, v0, (uint64_t)v0, "The drop session is for repositioning a sticker, and it is targeting a different balloon. Original: %@ Selected: %@", v1);
  OUTLINED_FUNCTION_2();
}

- (void)dropInteraction:sessionDidUpdate:.cold.2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_1(&dword_18DFCD000, v0, v1, "The drop session is for a sticker, and it is not targeting a balloon. Drop operation is forbidden to prevent the sticker animation from beginning.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dropInteraction:sessionDidUpdate:.cold.3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_1(&dword_18DFCD000, v0, v1, "The drop session is for a sticker, and it is targeting a messageItem that doesn't support stickers. Drop operation is forbidden to prevent the sticker animation from beginning.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dropInteraction:sessionDidUpdate:.cold.4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_1(&dword_18DFCD000, v0, v1, "DropInteraction updated with UIDropOperationForbidden", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dropInteraction:(void *)a1 performDrop:(NSObject *)a2 .cold.1(void *a1, NSObject *a2)
{
  uint64_t v3;
  uint8_t v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "count");
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_9(&dword_18DFCD000, a2, v3, "Perform drop with %ld itemProviders", v4);
  OUTLINED_FUNCTION_1_0();
}

- (void)dropInteraction:(uint64_t)a3 performDrop:.cold.2(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 136315138;
  v4 = "-[CKChatController dropInteraction:performDrop:]";
  OUTLINED_FUNCTION_9(&dword_18DFCD000, a1, a3, "%s", (uint8_t *)&v3);
  OUTLINED_FUNCTION_2();
}

- (void)dropInteraction:(NSObject *)a1 item:(uint64_t)a2 willAnimateDropWithAnimator:(uint64_t)a3 .cold.1(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 136315138;
  v4 = "-[CKChatController dropInteraction:item:willAnimateDropWithAnimator:]";
  OUTLINED_FUNCTION_9(&dword_18DFCD000, a1, a3, "%s", (uint8_t *)&v3);
  OUTLINED_FUNCTION_2();
}

void __69__CKChatController_dropInteraction_item_willAnimateDropWithAnimator___block_invoke_2_cold_1(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 136315138;
  v4 = "-[CKChatController dropInteraction:item:willAnimateDropWithAnimator:]_block_invoke_2";
  OUTLINED_FUNCTION_9(&dword_18DFCD000, a1, a3, "%s animation completion fired", (uint8_t *)&v3);
  OUTLINED_FUNCTION_2();
}

- (void)dropInteraction:concludeDrop:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_1(&dword_18DFCD000, v0, v1, "Drag session concluded", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dropInteraction:sessionDidEnd:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_1(&dword_18DFCD000, v0, v1, "Drag session ended", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dropInteraction:previewForDroppingItem:withDefault:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_1(&dword_18DFCD000, v0, v1, "DropInteraction returned preview for dropping item", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)dropInteraction:(uint64_t)a3 previewForDroppingItem:(uint64_t)a4 withDefault:(uint64_t)a5 .cold.2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_10(&dword_18DFCD000, a1, a3, "retargetedPosition = (%.2f, %.2f)", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_2();
}

- (void)dropInteraction:previewForDroppingItem:withDefault:.cold.3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_1(&dword_18DFCD000, v0, v1, "previewForDroppingItem:withDefault", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)showInlineReplyControllerForChatItem:presentKeyboard:replyTransitionProperties:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_18DFCD000, v0, v1, "Not showing inline reply controller for a chat item which does not support replies", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

- (void)messageEditingViewController:contentInsetsForChatItemGuid:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, v0, v1, "Could not determine content insets, could not find chat item with guid: %@", v2);
  OUTLINED_FUNCTION_2();
}

- (void)messageEditingViewController:contentInsetsForChatItemGuid:.cold.2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, v0, v1, "Could not determine content insets, could not find cell for chat item with guid: %@", v2);
  OUTLINED_FUNCTION_2();
}

- (void)messageEditingViewController:(uint64_t)a1 contentInsetsForChatItemGuid:(NSObject *)a2 .cold.3(uint64_t a1, NSObject *a2)
{
  objc_class *v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = (objc_class *)OUTLINED_FUNCTION_14();
  NSStringFromClass(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_0_2(&dword_18DFCD000, a2, v5, "Could not determine content insets, collection view cell was of an unexpected type: %@", v6);

  OUTLINED_FUNCTION_1_0();
}

- (void)inlineReplyControllerIsAppearing:.cold.1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_18DFCD000, v0, v1, "While presenting inline overlay, the main transcript unexpectedly encountered an existing scroll intent for inline reply overlay.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void __44__CKChatController_MenuBar__keyCommandPage___block_invoke_cold_1(id *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*a1, "input");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl(&dword_18DFCD000, a2, OS_LOG_TYPE_ERROR, "Unexpected input key for paging key command %@", (uint8_t *)&v4, 0xCu);

}

void __124__CKChatController_Collaboration___addDefaultButtonToSharingErrorAlertController_sharingURL_defaultButtonAction_completion___block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_4(&dword_18DFCD000, v0, v1, "Failed to find app store url for sharing url: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void __124__CKChatController_Collaboration___addDefaultButtonToSharingErrorAlertController_sharingURL_defaultButtonAction_completion___block_invoke_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_18DFCD000, v0, v1, "Failed to open App Store updates page: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void __124__CKChatController_Collaboration___addDefaultButtonToSharingErrorAlertController_sharingURL_defaultButtonAction_completion___block_invoke_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4(&dword_18DFCD000, v0, v1, "Unable to open user apple account settings page: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void __127__CKChatController_GroupCollaboration___addParticipantToShare_withHandle_toCollaboration_containerSetupInfo_completionHandler___block_invoke_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_1(&dword_18DFCD000, v0, v1, "Error while adding participant to share: %@ - error: %@");
  OUTLINED_FUNCTION_2();
}

void __97__CKChatController_GroupCollaboration___addParticipant_toShareURL_forChatGUID_completionHandler___block_invoke_2_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_18DFCD000, v0, v1, "Failed to get collaboration metadata", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void __102__CKChatController_GroupCollaboration___removeParticipant_fromShareURL_forChatGUID_completionHandler___block_invoke_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0(&dword_18DFCD000, v0, v1, "Failed to get handle identity map", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void __102__CKChatController_GroupCollaboration___removeParticipant_fromShareURL_forChatGUID_completionHandler___block_invoke_cold_3(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_4(&dword_18DFCD000, a1, a3, "Failed to get identity to remove: %@", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_2();
}

void __99__CKChatController_GroupCollaboration___collaborationMetadataForURL_forChatGUID_completionHandler___block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_4(&dword_18DFCD000, v0, v1, "Did not find an attribution for URL: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void __99__CKChatController_GroupCollaboration___collaborationMetadataForURL_forChatGUID_completionHandler___block_invoke_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_4(&dword_18DFCD000, v0, v1, "Did not get any attributions from URL: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2();
}

void __74__CKChatController_GroupCollaboration___isShareBearURL_completionHandler___block_invoke_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_1(&dword_18DFCD000, v0, v1, "Unable to get app link for url: %@, error: %@");
  OUTLINED_FUNCTION_2();
}

void __77__CKChatController_PhotosSupport___presentGridForPendingMomentShareChatItem___block_invoke_cold_1(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v4;
  __CFString *v5;
  id v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  v5 = CFSTR("No Error");
  if (a2 == 3)
    v5 = CFSTR("Permanent");
  v6 = OUTLINED_FUNCTION_11_2(a2, v5);
  v8 = 138412546;
  v9 = v4;
  v10 = 2114;
  v11 = v6;
  OUTLINED_FUNCTION_8(&dword_18DFCD000, a3, v7, "No grid view controller for chat item: %@ (error: %{public}@)", (uint8_t *)&v8);

}

void __74__CKChatController_PhotosSupport___presentGridForChatItem_assetReference___block_invoke_cold_1(uint64_t a1, uint64_t a2)
{
  __CFString *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = CFSTR("No Error");
  if (a2 == 3)
    v2 = CFSTR("Permanent");
  v3 = OUTLINED_FUNCTION_11_2(a2, v2);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_9_0(&dword_18DFCD000, v4, v5, "No grid view controller for chat item: %@, asset reference: %@ (error: %{public}@)", v6, v7, v8, v9, v10);

  OUTLINED_FUNCTION_2_2();
}

void __124__CKChatController_PhotosSupport___gridViewNavigationControllerForMomentShareURL_chatItem_tapbackManager_completionHandler___block_invoke_cold_1(char a1, NSObject *a2)
{
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2[0] = 67109120;
  v2[1] = a1 & 1;
  _os_log_debug_impl(&dword_18DFCD000, a2, OS_LOG_TYPE_DEBUG, "Failed to create and return a CMM grid view navigation controller (permanent: %d)", (uint8_t *)v2, 8u);
  OUTLINED_FUNCTION_3();
}

void __124__CKChatController_PhotosSupport___gridViewNavigationControllerForMomentShareURL_chatItem_tapbackManager_completionHandler___block_invoke_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_1(&dword_18DFCD000, v0, v1, "Create and return a CMM grid view navigation controller", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void __124__CKChatController_PhotosSupport___gridViewNavigationControllerForMomentShareURL_chatItem_tapbackManager_completionHandler___block_invoke_cold_3(uint64_t a1, _QWORD *a2, NSObject *a3)
{
  _BYTE v3[24];

  *(_DWORD *)v3 = 138412546;
  *(_QWORD *)&v3[4] = *(_QWORD *)(a1 + 40);
  *(_WORD *)&v3[12] = 2048;
  *(_QWORD *)&v3[14] = *a2;
  OUTLINED_FUNCTION_10_0(&dword_18DFCD000, (uint64_t)a2, a3, "Did fetch moment share for URL: %@, generation: %td", *(_QWORD *)v3, *(_QWORD *)&v3[8], *(_QWORD *)&v3[16]);
  OUTLINED_FUNCTION_2();
}

void __109__CKChatController_PhotosSupport___gridViewNavigationControllerForChatItem_assetReference_completionHandler___block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_1(&dword_18DFCD000, v0, v1, "Create and return a standard grid view navigation controller as fallback", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void __84__CKChatController_PhotosSupport__presentedPreviewControllerDidSelectNavigateToGrid__block_invoke_cold_1(uint64_t a1, uint64_t a2)
{
  __CFString *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v10;

  v2 = CFSTR("No Error");
  if (a2 == 3)
    v2 = CFSTR("Permanent");
  v3 = OUTLINED_FUNCTION_11_2(a2, v2);
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_9_0(&dword_18DFCD000, v4, v5, "No grid view controller for QL for chat item: %@, asset reference: %@ (error: %{public}@)", v6, v7, v8, v9, v10);

  OUTLINED_FUNCTION_2_2();
}

@end
