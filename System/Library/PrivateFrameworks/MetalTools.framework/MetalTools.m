void sub_22CD9B734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::VertexEncoderClass>>(uint64_t a1, unint64_t *a2, id *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  objc_msgSend(a3[2], "setVertexBytes:length:atIndex:", a1, 248, a4);
  result = objc_msgSend(a3[2], "setVertexBytes:length:atIndex:", a1 + 744, 248, a5);
  v10 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v11 = __clz(__rbit64(v10));
        v12 = v10 & ~(3 << (v11 & 0x3E));
        *a2 = v12;
        v13 = *(_QWORD *)(a1 + ((4 * v11) & 0x1F8) + 248);
        if (!v13)
          break;
        result = objc_msgSend(a3, "useResource:usage:stages:", v13, (v10 >> (v11 & 0x3E)) & 3, 1);
        v10 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v10 &= ~(3 << (v11 & 0x3E));
    }
    while (v12);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::FragmentEncoderClass>>(uint64_t a1, unint64_t *a2, id *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  objc_msgSend(a3[2], "setFragmentBytes:length:atIndex:", a1, 248, a4);
  result = objc_msgSend(a3[2], "setFragmentBytes:length:atIndex:", a1 + 744, 248, a5);
  v10 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v11 = __clz(__rbit64(v10));
        v12 = v10 & ~(3 << (v11 & 0x3E));
        *a2 = v12;
        v13 = *(_QWORD *)(a1 + ((4 * v11) & 0x1F8) + 248);
        if (!v13)
          break;
        result = objc_msgSend(a3, "useResource:usage:stages:", v13, (v10 >> (v11 & 0x3E)) & 3, 2);
        v10 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v10 &= ~(3 << (v11 & 0x3E));
    }
    while (v12);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::TileEncoderClass>>(uint64_t a1, unint64_t *a2, id *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  objc_msgSend(a3[2], "setTileBytes:length:atIndex:", a1, 248, a4);
  result = objc_msgSend(a3[2], "setTileBytes:length:atIndex:", a1 + 744, 248, a5);
  v10 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v11 = __clz(__rbit64(v10));
        v12 = v10 & ~(3 << (v11 & 0x3E));
        *a2 = v12;
        v13 = *(_QWORD *)(a1 + ((4 * v11) & 0x1F8) + 248);
        if (!v13)
          break;
        result = objc_msgSend(a3, "useResource:usage:stages:", v13, (v10 >> (v11 & 0x3E)) & 3, 2);
        v10 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v10 &= ~(3 << (v11 & 0x3E));
    }
    while (v12);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::ObjectEncoderClass>>(uint64_t a1, unint64_t *a2, id *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  objc_msgSend(a3[2], "setObjectBytes:length:atIndex:", a1, 248, a4);
  result = objc_msgSend(a3[2], "setObjectBytes:length:atIndex:", a1 + 744, 248, a5);
  v10 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v11 = __clz(__rbit64(v10));
        v12 = v10 & ~(3 << (v11 & 0x3E));
        *a2 = v12;
        v13 = *(_QWORD *)(a1 + ((4 * v11) & 0x1F8) + 248);
        if (!v13)
          break;
        result = objc_msgSend(a3, "useResource:usage:stages:", v13, (v10 >> (v11 & 0x3E)) & 3, 8);
        v10 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v10 &= ~(3 << (v11 & 0x3E));
    }
    while (v12);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::MeshEncoderClass>>(uint64_t a1, unint64_t *a2, id *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  objc_msgSend(a3[2], "setMeshBytes:length:atIndex:", a1, 248, a4);
  result = objc_msgSend(a3[2], "setMeshBytes:length:atIndex:", a1 + 744, 248, a5);
  v10 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v11 = __clz(__rbit64(v10));
        v12 = v10 & ~(3 << (v11 & 0x3E));
        *a2 = v12;
        v13 = *(_QWORD *)(a1 + ((4 * v11) & 0x1F8) + 248);
        if (!v13)
          break;
        result = objc_msgSend(a3, "useResource:usage:stages:", v13, (v10 >> (v11 & 0x3E)) & 3, 16);
        v10 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v10 &= ~(3 << (v11 & 0x3E));
    }
    while (v12);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::VertexEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;

  v12 = *a2;
  v13 = a3;
  result = MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::VertexEncoderClass>::setResources(&v13, a1, (uint64_t)&v12, a4, a5);
  v8 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v9 = __clz(__rbit64(v8));
        v10 = v8 & ~(3 << (v9 & 0x3E));
        *a2 = v10;
        v11 = *(_QWORD *)(a1 + ((4 * v9) & 0x1F8) + 248);
        if (!v11)
          break;
        result = objc_msgSend(v13, "useResource:usage:stages:", v11, (v8 >> (v9 & 0x3E)) & 3, 1);
        v8 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v8 &= ~(3 << (v9 & 0x3E));
    }
    while (v10);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::VertexEncoderClass>::setResources(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v9 = objc_msgSend((id)objc_msgSend(*a1, "commandBuffer"), "encodeBuffers:offsets:withRange:resultOffset:", a2 + 248, a2 + 496, 0, 31, &v11);
  objc_msgSend(*((id *)*a1 + 2), "setVertexBuffer:offset:atIndex:", v9, v11, 0);
  objc_msgSend(*((id *)*a1 + 2), "setVertexBytes:length:atIndex:", a2 + 992, 124, a4);
  return objc_msgSend(*((id *)*a1 + 2), "setVertexBytes:length:atIndex:", a2 + 744, 248, a5);
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::FragmentEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;

  v12 = *a2;
  v13 = a3;
  result = MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::FragmentEncoderClass>::setResources(&v13, a1, (uint64_t)&v12, a4, a5);
  v8 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v9 = __clz(__rbit64(v8));
        v10 = v8 & ~(3 << (v9 & 0x3E));
        *a2 = v10;
        v11 = *(_QWORD *)(a1 + ((4 * v9) & 0x1F8) + 248);
        if (!v11)
          break;
        result = objc_msgSend(v13, "useResource:usage:stages:", v11, (v8 >> (v9 & 0x3E)) & 3, 2);
        v8 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v8 &= ~(3 << (v9 & 0x3E));
    }
    while (v10);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::FragmentEncoderClass>::setResources(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v9 = objc_msgSend((id)objc_msgSend(*a1, "commandBuffer"), "encodeBuffers:offsets:withRange:resultOffset:", a2 + 248, a2 + 496, 0, 31, &v11);
  objc_msgSend(*((id *)*a1 + 2), "setFragmentBuffer:offset:atIndex:", v9, v11, 0);
  objc_msgSend(*((id *)*a1 + 2), "setFragmentBytes:length:atIndex:", a2 + 992, 124, a4);
  return objc_msgSend(*((id *)*a1 + 2), "setFragmentBytes:length:atIndex:", a2 + 744, 248, a5);
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::TileEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;

  v12 = *a2;
  v13 = a3;
  result = MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::TileEncoderClass>::setResources(&v13, a1, (uint64_t)&v12, a4, a5);
  v8 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v9 = __clz(__rbit64(v8));
        v10 = v8 & ~(3 << (v9 & 0x3E));
        *a2 = v10;
        v11 = *(_QWORD *)(a1 + ((4 * v9) & 0x1F8) + 248);
        if (!v11)
          break;
        result = objc_msgSend(v13, "useResource:usage:stages:", v11, (v8 >> (v9 & 0x3E)) & 3, 2);
        v8 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v8 &= ~(3 << (v9 & 0x3E));
    }
    while (v10);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::TileEncoderClass>::setResources(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v9 = objc_msgSend((id)objc_msgSend(*a1, "commandBuffer"), "encodeBuffers:offsets:withRange:resultOffset:", a2 + 248, a2 + 496, 0, 31, &v11);
  objc_msgSend(*((id *)*a1 + 2), "setTileBuffer:offset:atIndex:", v9, v11, 0);
  objc_msgSend(*((id *)*a1 + 2), "setTileBytes:length:atIndex:", a2 + 992, 124, a4);
  return objc_msgSend(*((id *)*a1 + 2), "setTileBytes:length:atIndex:", a2 + 744, 248, a5);
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::ObjectEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;

  v12 = *a2;
  v13 = a3;
  result = MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::ObjectEncoderClass>::setResources(&v13, a1, (uint64_t)&v12, a4, a5);
  v8 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v9 = __clz(__rbit64(v8));
        v10 = v8 & ~(3 << (v9 & 0x3E));
        *a2 = v10;
        v11 = *(_QWORD *)(a1 + ((4 * v9) & 0x1F8) + 248);
        if (!v11)
          break;
        result = objc_msgSend(v13, "useResource:usage:stages:", v11, (v8 >> (v9 & 0x3E)) & 3, 8);
        v8 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v8 &= ~(3 << (v9 & 0x3E));
    }
    while (v10);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::ObjectEncoderClass>::setResources(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v9 = objc_msgSend((id)objc_msgSend(*a1, "commandBuffer"), "encodeBuffers:offsets:withRange:resultOffset:", a2 + 248, a2 + 496, 0, 31, &v11);
  objc_msgSend(*((id *)*a1 + 2), "setObjectBuffer:offset:atIndex:", v9, v11, 0);
  objc_msgSend(*((id *)*a1 + 2), "setObjectBytes:length:atIndex:", a2 + 992, 124, a4);
  return objc_msgSend(*((id *)*a1 + 2), "setObjectBytes:length:atIndex:", a2 + 744, 248, a5);
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::MeshEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;

  v12 = *a2;
  v13 = a3;
  result = MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::MeshEncoderClass>::setResources(&v13, a1, (uint64_t)&v12, a4, a5);
  v8 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v9 = __clz(__rbit64(v8));
        v10 = v8 & ~(3 << (v9 & 0x3E));
        *a2 = v10;
        v11 = *(_QWORD *)(a1 + ((4 * v9) & 0x1F8) + 248);
        if (!v11)
          break;
        result = objc_msgSend(v13, "useResource:usage:stages:", v11, (v8 >> (v9 & 0x3E)) & 3, 16);
        v8 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v8 &= ~(3 << (v9 & 0x3E));
    }
    while (v10);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::MeshEncoderClass>::setResources(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v9 = objc_msgSend((id)objc_msgSend(*a1, "commandBuffer"), "encodeBuffers:offsets:withRange:resultOffset:", a2 + 248, a2 + 496, 0, 31, &v11);
  objc_msgSend(*((id *)*a1 + 2), "setMeshBuffer:offset:atIndex:", v9, v11, 0);
  objc_msgSend(*((id *)*a1 + 2), "setMeshBytes:length:atIndex:", a2 + 992, 124, a4);
  return objc_msgSend(*((id *)*a1 + 2), "setMeshBytes:length:atIndex:", a2 + 744, 248, a5);
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::VertexEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;

  v10 = *a2;
  v11 = a3;
  result = MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::VertexEncoderClass>::setResources((uint64_t)&v11, a1, &v10);
  v6 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v7 = __clz(__rbit64(v6));
        v8 = v6 & ~(3 << (v7 & 0x3E));
        *a2 = v8;
        v9 = *(_QWORD *)(a1 + ((4 * v7) & 0x1F8) + 248);
        if (!v9)
          break;
        result = objc_msgSend(v11, "useResource:usage:stages:", v9, (v6 >> (v7 & 0x3E)) & 3, 1);
        v6 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v6 &= ~(3 << (v7 & 0x3E));
    }
    while (v8);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::VertexEncoderClass>::setResources(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t i;
  unint64_t v7;

  for (i = *a3; *a3; i = *a3)
  {
    v7 = __clz(__rbit64(i));
    *a3 = i & ~(3 << (v7 & 0x3E));
    objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "setVertexBuffer:offset:attributeStride:atIndex:", objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "baseObject"), *(_QWORD *)(a2 + 8 * (v7 >> 1) + 496) + objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "offset"), *(_QWORD *)(a2 + 8 * (v7 >> 1) + 744), v7 >> 1);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "setVertexBytes:length:atIndex:", a2 + 1120, 496, 31);
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::FragmentEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;

  v10 = *a2;
  v11 = a3;
  result = MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::FragmentEncoderClass>::setResources((uint64_t)&v11, a1, &v10);
  v6 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v7 = __clz(__rbit64(v6));
        v8 = v6 & ~(3 << (v7 & 0x3E));
        *a2 = v8;
        v9 = *(_QWORD *)(a1 + ((4 * v7) & 0x1F8) + 248);
        if (!v9)
          break;
        result = objc_msgSend(v11, "useResource:usage:stages:", v9, (v6 >> (v7 & 0x3E)) & 3, 2);
        v6 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v6 &= ~(3 << (v7 & 0x3E));
    }
    while (v8);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::FragmentEncoderClass>::setResources(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t i;
  unint64_t v7;

  for (i = *a3; *a3; i = *a3)
  {
    v7 = __clz(__rbit64(i));
    *a3 = i & ~(3 << (v7 & 0x3E));
    objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "setFragmentBuffer:offset:atIndex:", objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "baseObject"), *(_QWORD *)(a2 + 8 * (v7 >> 1) + 496) + objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "offset"), v7 >> 1);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "setFragmentBytes:length:atIndex:", a2 + 1120, 496, 31);
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::TileEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;

  v10 = *a2;
  v11 = a3;
  result = MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::TileEncoderClass>::setResources((uint64_t)&v11, a1, &v10);
  v6 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v7 = __clz(__rbit64(v6));
        v8 = v6 & ~(3 << (v7 & 0x3E));
        *a2 = v8;
        v9 = *(_QWORD *)(a1 + ((4 * v7) & 0x1F8) + 248);
        if (!v9)
          break;
        result = objc_msgSend(v11, "useResource:usage:stages:", v9, (v6 >> (v7 & 0x3E)) & 3, 2);
        v6 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v6 &= ~(3 << (v7 & 0x3E));
    }
    while (v8);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::TileEncoderClass>::setResources(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t i;
  unint64_t v7;

  for (i = *a3; *a3; i = *a3)
  {
    v7 = __clz(__rbit64(i));
    *a3 = i & ~(3 << (v7 & 0x3E));
    objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "setTileBuffer:offset:atIndex:", objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "baseObject"), *(_QWORD *)(a2 + 8 * (v7 >> 1) + 496) + objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "offset"), v7 >> 1);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "setTileBytes:length:atIndex:", a2 + 1120, 496, 31);
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::ObjectEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;

  v10 = *a2;
  v11 = a3;
  result = MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::ObjectEncoderClass>::setResources((uint64_t)&v11, a1, &v10);
  v6 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v7 = __clz(__rbit64(v6));
        v8 = v6 & ~(3 << (v7 & 0x3E));
        *a2 = v8;
        v9 = *(_QWORD *)(a1 + ((4 * v7) & 0x1F8) + 248);
        if (!v9)
          break;
        result = objc_msgSend(v11, "useResource:usage:stages:", v9, (v6 >> (v7 & 0x3E)) & 3, 8);
        v6 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v6 &= ~(3 << (v7 & 0x3E));
    }
    while (v8);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::ObjectEncoderClass>::setResources(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t i;
  unint64_t v7;

  for (i = *a3; *a3; i = *a3)
  {
    v7 = __clz(__rbit64(i));
    *a3 = i & ~(3 << (v7 & 0x3E));
    objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "setObjectBuffer:offset:atIndex:", objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "baseObject"), *(_QWORD *)(a2 + 8 * (v7 >> 1) + 496) + objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "offset"), v7 >> 1);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "setObjectBytes:length:atIndex:", a2 + 1120, 496, 31);
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::MeshEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;

  v10 = *a2;
  v11 = a3;
  result = MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::MeshEncoderClass>::setResources((uint64_t)&v11, a1, &v10);
  v6 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v7 = __clz(__rbit64(v6));
        v8 = v6 & ~(3 << (v7 & 0x3E));
        *a2 = v8;
        v9 = *(_QWORD *)(a1 + ((4 * v7) & 0x1F8) + 248);
        if (!v9)
          break;
        result = objc_msgSend(v11, "useResource:usage:stages:", v9, (v6 >> (v7 & 0x3E)) & 3, 16);
        v6 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v6 &= ~(3 << (v7 & 0x3E));
    }
    while (v8);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::MeshEncoderClass>::setResources(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t i;
  unint64_t v7;

  for (i = *a3; *a3; i = *a3)
  {
    v7 = __clz(__rbit64(i));
    *a3 = i & ~(3 << (v7 & 0x3E));
    objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "setMeshBuffer:offset:atIndex:", objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "baseObject"), *(_QWORD *)(a2 + 8 * (v7 >> 1) + 496) + objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "offset"), v7 >> 1);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "setMeshBytes:length:atIndex:", a2 + 1120, 496, 31);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22CD9F3C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<unsigned long>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F793E68, MEMORY[0x24BEDAAF0]);
}

void sub_22CD9F4A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void sub_22CD9F9AC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t newFunctionLogLocationFromDebugLocation(uint64_t a1)
{
  return objc_msgSend(objc_alloc(MEMORY[0x24BDDD780]), "initWithDebugLocation:", a1);
}

void *newNonToolchainInlinedStackTraceFromDebugLocation(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  if (!a1)
    return 0;
  v1 = a1;
  v2 = (void *)objc_opt_new();
  do
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDD780]), "initWithDebugLocation:", v1);
    v4 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v3, "URL"), "standardizedURL"), "path");
    if ((objc_msgSend(v4, "containsString:", CFSTR(".xctoolchain/")) & 1) == 0
      && (objc_msgSend(v4, "containsString:", CFSTR("GPUCompiler.framework/")) & 1) == 0
      && (!objc_msgSend(v2, "count")
       || (objc_msgSend((id)objc_msgSend(v3, "description"), "isEqual:", objc_msgSend((id)objc_msgSend(v2, "lastObject"), "description")) & 1) == 0))
    {
      objc_msgSend(v2, "addObject:", v3);
    }

    v1 = (void *)objc_msgSend(v1, "inlinedAt");
  }
  while (v1);
  return v2;
}

void *newRuntimeStackTrace(id **a1)
{
  void *v2;
  id *v3;
  id *v4;
  char v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a1[1] == *a1)
    return 0;
  v2 = (void *)objc_opt_new();
  v3 = *a1;
  v4 = a1[1];
  if ((char *)v4 - (char *)*a1 == 8)
  {
    v5 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*v3, "scope"), "name"), "containsString:", CFSTR("air.vertexFetchFunction"));
    v3 = *a1;
    if ((v5 & 1) != 0)
    {
      v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDD780]), "initWithDebugLocation:", *v3);
      objc_msgSend(v2, "addObject:", v6);

      return v2;
    }
    v4 = a1[1];
  }
  for (; v3 != v4; ++v3)
  {
    v7 = newNonToolchainInlinedStackTraceFromDebugLocation(*v3);
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
          if ((objc_msgSend((id)objc_msgSend(v12, "functionName"), "containsString:", CFSTR("air.")) & 1) == 0
            && (!objc_msgSend(v2, "count")
             || (objc_msgSend((id)objc_msgSend(v12, "description"), "isEqual:", objc_msgSend((id)objc_msgSend(v2, "lastObject"), "description")) & 1) == 0))
          {
            objc_msgSend(v2, "addObject:", v12);
          }
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v9);
    }

  }
  return v2;
}

uint64_t MTLGPUDebugReadReportBuffer(void *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  MTLGPUDebugBufferErrorLog *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  MTLGPUDebugTextureErrorLog *v24;
  MTLGPUDebugStackOverflowErrorLog *v25;
  MTLGPUDebugTrapErrorLog *v26;
  MTLGPUDebugAccelerationStructureErrorLog *v27;
  uint64_t v29;
  void *v31;
  void *v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[2];
  id v39;
  id v40;
  uint64_t v41;
  _BYTE v42[128];
  _QWORD v43[3];

  v43[1] = *MEMORY[0x24BDAC8D0];
  v31 = (void *)objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithArray:", objc_msgSend((id)objc_msgSend(a1, "baseObject"), "logs"));
  v32 = a1;
  v4 = objc_msgSend(a1, "device");
  v5 = 0;
  v6 = v4 + 264;
  v43[0] = 0x100000000;
  v29 = v4 + 88;
  do
  {
    v7 = *((unsigned int *)v43 + v5);
    if (((*a2 >> v7) & 1) != 0)
    {
      v8 = objc_alloc_init(MTLGPUDebugBufferErrorLog);
      v9 = (int *)&a2[32 * v7];
      resolvedSharedPacketData<GPUDebugBadAccessPacket>::resolvedSharedPacketData(v38, (uint64_t)(v9 + 2), a3, v32, v8);
      v10 = *((unsigned __int16 *)v9 + 24);
      v11 = *((_QWORD *)v9 + 3);
      -[MTLGPUDebugBufferErrorLog setOperation:](v8, "setOperation:", *((unsigned __int16 *)v9 + 25));
      v12 = *(_QWORD *)(v6 + 20);
      if ((v12 & 0x800000) != 0)
      {
        if ((_DWORD)v7)
          LODWORD(v13) = 0;
        else
          v13 = (v12 >> 27) & 1;
      }
      else
      {
        LODWORD(v13) = 1;
      }
      if ((_DWORD)v7)
        v14 = 3;
      else
        v14 = 1;
      -[MTLGPUDebugBufferErrorLog setAddressSpace:](v8, "setAddressSpace:", v14);
      if (!(_DWORD)v7 && (*(_BYTE *)(v6 + 22) & 0x80) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v29 + 296) + ((v11 >> 41) & 0x7FFFF8));
        v11 &= 0xFFFFFFFFFFFuLL;
      }
      else
      {
        v15 = 0;
      }
      -[MTLGPUDebugBufferErrorLog setBuffer:](v8, "setBuffer:", v15);
      -[MTLGPUDebugBufferErrorLog setOffset:](v8, "setOffset:", v11);
      if (-[MTLGPUDebugBufferErrorLog buffer](v8, "buffer") && v41 && (*(_QWORD *)(v6 + 20) & 0x200000001) != 0)
      {
        v16 = -[MTLGPUDebugBufferErrorLog buffer](v8, "buffer");
        -[MTLGPUDebugBufferErrorLog setSpecifiedUsage:](v8, "setSpecifiedUsage:", objc_msgSend(v32, "resourceUsageForBuffer:stage:", v16, v41));
      }
      if ((_DWORD)v13
        && (v17 = (_DWORD)v7 != 0,
            v36 = 0u,
            v37 = 0u,
            v34 = 0u,
            v35 = 0u,
            v18 = v40,
            (v19 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v34, v42, 16)) != 0))
      {
        v20 = *(_QWORD *)v35;
LABEL_21:
        v21 = 0;
        while (1)
        {
          if (*(_QWORD *)v35 != v20)
            objc_enumerationMutation(v18);
          v22 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * v21);
          if (objc_msgSend(v22, "type") == v17 && objc_msgSend(v22, "index") == v10)
            break;
          if (v19 == ++v21)
          {
            v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
            v22 = 0;
            if (v19)
              goto LABEL_21;
            break;
          }
        }
      }
      else
      {
        v22 = 0;
      }
      -[MTLGPUDebugBufferErrorLog setArgument:](v8, "setArgument:", v22);
      objc_msgSend(v31, "addObject:", v8);

      resolvedSharedPacketData<GPUDebugBadAccessPacket>::~resolvedSharedPacketData((uint64_t)v38);
    }
    ++v5;
  }
  while (v5 != 2);
  v23 = *a2;
  if ((*a2 & 4) != 0)
  {
    v24 = objc_alloc_init(MTLGPUDebugTextureErrorLog);
    resolvedSharedPacketData<GPUDebugBadTexturePacket>::resolvedSharedPacketData(v38, (uint64_t)(a2 + 66), a3, v32, v24);
    -[MTLGPUDebugTextureErrorLog setErrorReason:](v24, "setErrorReason:", *((unsigned __int8 *)a2 + 300));
    -[MTLGPUDebugTextureErrorLog setExpectedTextureType:](v24, "setExpectedTextureType:", *((unsigned __int8 *)a2 + 292));
    -[MTLGPUDebugTextureErrorLog setActualTextureType:](v24, "setActualTextureType:", *((unsigned __int8 *)a2 + 293));
    objc_msgSend(v31, "addObject:", v24);

    resolvedSharedPacketData<GPUDebugBadTexturePacket>::~resolvedSharedPacketData((uint64_t)v38);
    v23 = *a2;
  }
  if ((v23 & 0x10) != 0)
  {
    v25 = objc_alloc_init(MTLGPUDebugStackOverflowErrorLog);
    resolvedSharedPacketData<GPUDebugStackPacket>::resolvedSharedPacketData(v38, (uint64_t)(a2 + 124), a3, v32, v25);
    -[MTLGPUDebugStackOverflowErrorLog setFunctionName:](v25, "setFunctionName:", objc_msgSend(v39, "stringForID:", a2[131]));
    objc_msgSend(v31, "addObject:", v25);

    resolvedSharedPacketData<GPUDebugStackPacket>::~resolvedSharedPacketData((uint64_t)v38);
    v23 = *a2;
  }
  if ((v23 & 8) != 0)
  {
    v26 = objc_alloc_init(MTLGPUDebugTrapErrorLog);
    resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::resolvedSharedPacketData(v38, (uint64_t)(a2 + 96), a3, v32, v26);
    -[MTLGPUDebugTrapErrorLog setFunctionName:](v26, "setFunctionName:", objc_msgSend(v39, "stringForID:", a2[103]));
    objc_msgSend(v31, "addObject:", v26);

    resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::~resolvedSharedPacketData((uint64_t)v38);
    v23 = *a2;
  }
  if ((v23 & 0x20) != 0)
  {
    v27 = objc_alloc_init(MTLGPUDebugAccelerationStructureErrorLog);
    resolvedSharedPacketData<GPUDebugAccelerationStructurePacket>::resolvedSharedPacketData(v38, (uint64_t)(a2 + 152), a3, v32, v27);
    -[MTLGPUDebugAccelerationStructureErrorLog setFunctionName:](v27, "setFunctionName:", objc_msgSend(v39, "stringForID:", a2[159]));
    -[MTLGPUDebugAccelerationStructureErrorLog setExpectedAccelerationStructureType:](v27, "setExpectedAccelerationStructureType:", *((_QWORD *)a2 + 80));
    -[MTLGPUDebugAccelerationStructureErrorLog setActualAccelerationStructureType:](v27, "setActualAccelerationStructureType:", *((_QWORD *)a2 + 81));
    objc_msgSend(v31, "addObject:", v27);

    resolvedSharedPacketData<GPUDebugAccelerationStructurePacket>::~resolvedSharedPacketData((uint64_t)v38);
  }
  return objc_msgSend((id)objc_msgSend(v32, "baseObject"), "setLogs:", v31);
}

void sub_22CDA0468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::~resolvedSharedPacketData((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *GPUDebugFunctionInfo::GPUDebugFunctionInfo(uint64_t *a1, void *a2)
{
  uint64_t v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;

  *a1 = (uint64_t)CFSTR("<unnamed>");
  a1[1] = (uint64_t)CFSTR("<unknown>");
  a1[2] = (uint64_t)CFSTR("<unknown>");
  if (objc_msgSend(a2, "label"))
  {
    v4 = objc_msgSend(a2, "label");
  }
  else
  {
    if (!objc_msgSend(a2, "name"))
      goto LABEL_6;
    v4 = objc_msgSend(a2, "name");
  }
  *a1 = v4;
LABEL_6:
  switch(objc_msgSend(a2, "functionType"))
  {
    case 1:
      v5 = CFSTR("vertex");
      goto LABEL_9;
    case 2:
      v5 = CFSTR("fragment");
LABEL_9:
      v6 = CFSTR("draw");
      goto LABEL_11;
    case 3:
      v5 = CFSTR("kernel");
      v6 = CFSTR("dispatch");
LABEL_11:
      a1[1] = (uint64_t)v5;
      a1[2] = (uint64_t)v6;
      return a1;
    case 5:
      v7 = CFSTR("visible");
      goto LABEL_16;
    case 6:
      v7 = CFSTR("intersection");
      goto LABEL_16;
    case 7:
      v7 = CFSTR("mesh");
      goto LABEL_16;
    case 8:
      v7 = CFSTR("object");
LABEL_16:
      a1[1] = (uint64_t)v7;
      break;
    default:
      return a1;
  }
  return a1;
}

_QWORD *resolvedSharedPacketData<GPUDebugBadAccessPacket>::resolvedSharedPacketData(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  void **v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  id *v31;
  id *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  id *v47;
  id *v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id **v58;

  *(_OWORD *)(a1 + 7) = 0u;
  v10 = (void **)(a1 + 7);
  v58 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 24);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)(a2 + 28));
  v11 = *(void **)(a2 + 8);
  *a1 = v11;
  a1[2] = objc_msgSend(v11, "debugInstrumentationData");
  switch(a3)
  {
    case 1:
      v14 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v14, "label"), objc_msgSend(v14, "UID"));
      goto LABEL_5;
    case 2:
    case 3:
      v12 = *(id *)a2;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v12, "label"), objc_msgSend(v12, "UID"));
LABEL_5:
        v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_14;
        v18 = *(id *)a2;
        if (objc_msgSend(*(id *)a2, "tileFunctionData"))
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          v19 = (void *)objc_msgSend(v18, "tileFunctionData");
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          v19 = (void *)objc_msgSend(v18, "fragmentFunctionData");
        }
        a1[1] = objc_msgSend(v19, "function");
        v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v18, "label"), objc_msgSend(v18, "UID"));
        v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      v20 = objc_msgSend((id)a1[2], "debugLocationForID:", *((unsigned int *)a1 + 11));
      *v10 = (void *)v20;
      if (v20)
      {
        v21 = a1[10];
        v22 = (uint64_t *)a1[9];
        if ((unint64_t)v22 >= v21)
        {
          v24 = ((char *)v22 - (char *)*v58) >> 3;
          if ((unint64_t)(v24 + 1) >> 61)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v25 = v21 - (_QWORD)*v58;
          v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1))
            v26 = v24 + 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v27);
            v20 = (uint64_t)*v10;
          }
          else
          {
            v28 = 0;
          }
          v29 = (uint64_t *)&v28[8 * v24];
          v30 = &v28[8 * v27];
          *v29 = v20;
          v23 = v29 + 1;
          v32 = (id *)a1[8];
          v31 = (id *)a1[9];
          if (v31 != v32)
          {
            do
            {
              v33 = (uint64_t)*--v31;
              *--v29 = v33;
            }
            while (v31 != v32);
            v31 = *v58;
          }
          a1[8] = v29;
          a1[9] = v23;
          a1[10] = v30;
          if (v31)
            operator delete(v31);
        }
        else
        {
          *v22 = v20;
          v23 = v22 + 1;
        }
        a1[9] = v23;
      }
      if (objc_msgSend((id)*a1, "imageType") == 1)
        goto LABEL_54;
      v34 = 0;
      break;
    case 7:
      v16 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v16, "label"), objc_msgSend(v16, "UID"));
      v15 = 16;
      goto LABEL_13;
    case 8:
      v17 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v17, "label"), objc_msgSend(v17, "UID"));
      v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    v35 = *(_DWORD *)(a2 + 4 * v34 + 44);
    if (v35 != -1)
    {
      if (v35 == 0x7FFFFFFF)
        break;
      v36 = objc_msgSend((id)a1[2], "debugLocationForID:");
      v37 = v36;
      v39 = (uint64_t *)a1[9];
      v38 = a1[10];
      if ((unint64_t)v39 >= v38)
      {
        v41 = ((char *)v39 - (char *)*v58) >> 3;
        if ((unint64_t)(v41 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v42 = v38 - (_QWORD)*v58;
        v43 = v42 >> 2;
        if (v42 >> 2 <= (unint64_t)(v41 + 1))
          v43 = v41 + 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v44);
        else
          v45 = 0;
        v46 = (uint64_t *)&v45[8 * v41];
        *v46 = v37;
        v40 = v46 + 1;
        v48 = (id *)a1[8];
        v47 = (id *)a1[9];
        if (v47 != v48)
        {
          do
          {
            v49 = (uint64_t)*--v47;
            *--v46 = v49;
          }
          while (v47 != v48);
          v47 = *v58;
        }
        a1[8] = v46;
        a1[9] = v40;
        a1[10] = &v45[8 * v44];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v39 = v36;
        v40 = v39 + 1;
      }
      a1[9] = v40;
    }
    ++v34;
  }
  while (v34 != 20);
LABEL_54:
  v50 = (id)a1[3];
  objc_msgSend(a5, "setImage:", *a1);
  objc_msgSend(a5, "setCallIndex:", *((unsigned int *)a1 + 12));
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  v51 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  v52 = newRuntimeStackTrace(v58);
  v53 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  v54 = v51;
  if (v53 == 1)
  {
    v55 = objc_msgSend(a4, "device", v51);
    v54 = v52;
    if ((*(_BYTE *)(v55 + 285) & 2) == 0)
      v54 = v51;
  }
  objc_msgSend(a5, "setErrorStackTrace:", v54);
  if (v51)
    v56 = objc_msgSend(v51, "objectAtIndexedSubscript:", 0);
  else
    v56 = 0;
  objc_msgSend(a5, "setDebugLocation:", v56);

  objc_msgSend(a5, "setFunction:", a1[1]);
  objc_msgSend(a5, "setType:", 0);
  objc_msgSend(a5, "setPipelineIdentifier:", a1[3]);
  return a1;
}

void sub_22CDA16AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  void *v14;

  v14 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t resolvedSharedPacketData<GPUDebugBadAccessPacket>::~resolvedSharedPacketData(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *resolvedSharedPacketData<GPUDebugBadTexturePacket>::resolvedSharedPacketData(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  void **v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  id *v31;
  id *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  id *v47;
  id *v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id **v58;

  *(_OWORD *)(a1 + 7) = 0u;
  v10 = (void **)(a1 + 7);
  v58 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 16);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)(a2 + 20));
  v11 = *(void **)(a2 + 8);
  *a1 = v11;
  a1[2] = objc_msgSend(v11, "debugInstrumentationData");
  switch(a3)
  {
    case 1:
      v14 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v14, "label"), objc_msgSend(v14, "UID"));
      goto LABEL_5;
    case 2:
    case 3:
      v12 = *(id *)a2;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v12, "label"), objc_msgSend(v12, "UID"));
LABEL_5:
        v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_14;
        v18 = *(id *)a2;
        if (objc_msgSend(*(id *)a2, "tileFunctionData"))
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          v19 = (void *)objc_msgSend(v18, "tileFunctionData");
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          v19 = (void *)objc_msgSend(v18, "fragmentFunctionData");
        }
        a1[1] = objc_msgSend(v19, "function");
        v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v18, "label"), objc_msgSend(v18, "UID"));
        v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      v20 = objc_msgSend((id)a1[2], "debugLocationForID:", *((unsigned int *)a1 + 11));
      *v10 = (void *)v20;
      if (v20)
      {
        v21 = a1[10];
        v22 = (uint64_t *)a1[9];
        if ((unint64_t)v22 >= v21)
        {
          v24 = ((char *)v22 - (char *)*v58) >> 3;
          if ((unint64_t)(v24 + 1) >> 61)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v25 = v21 - (_QWORD)*v58;
          v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1))
            v26 = v24 + 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v27);
            v20 = (uint64_t)*v10;
          }
          else
          {
            v28 = 0;
          }
          v29 = (uint64_t *)&v28[8 * v24];
          v30 = &v28[8 * v27];
          *v29 = v20;
          v23 = v29 + 1;
          v32 = (id *)a1[8];
          v31 = (id *)a1[9];
          if (v31 != v32)
          {
            do
            {
              v33 = (uint64_t)*--v31;
              *--v29 = v33;
            }
            while (v31 != v32);
            v31 = *v58;
          }
          a1[8] = v29;
          a1[9] = v23;
          a1[10] = v30;
          if (v31)
            operator delete(v31);
        }
        else
        {
          *v22 = v20;
          v23 = v22 + 1;
        }
        a1[9] = v23;
      }
      if (objc_msgSend((id)*a1, "imageType") == 1)
        goto LABEL_54;
      v34 = 0;
      break;
    case 7:
      v16 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v16, "label"), objc_msgSend(v16, "UID"));
      v15 = 16;
      goto LABEL_13;
    case 8:
      v17 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v17, "label"), objc_msgSend(v17, "UID"));
      v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    v35 = *(_DWORD *)(a2 + 4 * v34 + 40);
    if (v35 != -1)
    {
      if (v35 == 0x7FFFFFFF)
        break;
      v36 = objc_msgSend((id)a1[2], "debugLocationForID:");
      v37 = v36;
      v39 = (uint64_t *)a1[9];
      v38 = a1[10];
      if ((unint64_t)v39 >= v38)
      {
        v41 = ((char *)v39 - (char *)*v58) >> 3;
        if ((unint64_t)(v41 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v42 = v38 - (_QWORD)*v58;
        v43 = v42 >> 2;
        if (v42 >> 2 <= (unint64_t)(v41 + 1))
          v43 = v41 + 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v44);
        else
          v45 = 0;
        v46 = (uint64_t *)&v45[8 * v41];
        *v46 = v37;
        v40 = v46 + 1;
        v48 = (id *)a1[8];
        v47 = (id *)a1[9];
        if (v47 != v48)
        {
          do
          {
            v49 = (uint64_t)*--v47;
            *--v46 = v49;
          }
          while (v47 != v48);
          v47 = *v58;
        }
        a1[8] = v46;
        a1[9] = v40;
        a1[10] = &v45[8 * v44];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v39 = v36;
        v40 = v39 + 1;
      }
      a1[9] = v40;
    }
    ++v34;
  }
  while (v34 != 20);
LABEL_54:
  v50 = (id)a1[3];
  objc_msgSend(a5, "setImage:", *a1);
  objc_msgSend(a5, "setCallIndex:", *((unsigned int *)a1 + 12));
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  v51 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  v52 = newRuntimeStackTrace(v58);
  v53 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  v54 = v51;
  if (v53 == 1)
  {
    v55 = objc_msgSend(a4, "device", v51);
    v54 = v52;
    if ((*(_BYTE *)(v55 + 285) & 2) == 0)
      v54 = v51;
  }
  objc_msgSend(a5, "setErrorStackTrace:", v54);
  if (v51)
    v56 = objc_msgSend(v51, "objectAtIndexedSubscript:", 0);
  else
    v56 = 0;
  objc_msgSend(a5, "setDebugLocation:", v56);

  objc_msgSend(a5, "setFunction:", a1[1]);
  objc_msgSend(a5, "setType:", 0);
  objc_msgSend(a5, "setPipelineIdentifier:", a1[3]);
  return a1;
}

void sub_22CDA1D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  void *v14;

  v14 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t resolvedSharedPacketData<GPUDebugBadTexturePacket>::~resolvedSharedPacketData(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *resolvedSharedPacketData<GPUDebugStackPacket>::resolvedSharedPacketData(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  void **v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  id *v31;
  id *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  id *v47;
  id *v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id **v58;

  *(_OWORD *)(a1 + 7) = 0u;
  v10 = (void **)(a1 + 7);
  v58 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 16);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)(a2 + 20));
  v11 = *(void **)(a2 + 8);
  *a1 = v11;
  a1[2] = objc_msgSend(v11, "debugInstrumentationData");
  switch(a3)
  {
    case 1:
      v14 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v14, "label"), objc_msgSend(v14, "UID"));
      goto LABEL_5;
    case 2:
    case 3:
      v12 = *(id *)a2;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v12, "label"), objc_msgSend(v12, "UID"));
LABEL_5:
        v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_14;
        v18 = *(id *)a2;
        if (objc_msgSend(*(id *)a2, "tileFunctionData"))
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          v19 = (void *)objc_msgSend(v18, "tileFunctionData");
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          v19 = (void *)objc_msgSend(v18, "fragmentFunctionData");
        }
        a1[1] = objc_msgSend(v19, "function");
        v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v18, "label"), objc_msgSend(v18, "UID"));
        v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      v20 = objc_msgSend((id)a1[2], "debugLocationForID:", *((unsigned int *)a1 + 11));
      *v10 = (void *)v20;
      if (v20)
      {
        v21 = a1[10];
        v22 = (uint64_t *)a1[9];
        if ((unint64_t)v22 >= v21)
        {
          v24 = ((char *)v22 - (char *)*v58) >> 3;
          if ((unint64_t)(v24 + 1) >> 61)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v25 = v21 - (_QWORD)*v58;
          v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1))
            v26 = v24 + 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v27);
            v20 = (uint64_t)*v10;
          }
          else
          {
            v28 = 0;
          }
          v29 = (uint64_t *)&v28[8 * v24];
          v30 = &v28[8 * v27];
          *v29 = v20;
          v23 = v29 + 1;
          v32 = (id *)a1[8];
          v31 = (id *)a1[9];
          if (v31 != v32)
          {
            do
            {
              v33 = (uint64_t)*--v31;
              *--v29 = v33;
            }
            while (v31 != v32);
            v31 = *v58;
          }
          a1[8] = v29;
          a1[9] = v23;
          a1[10] = v30;
          if (v31)
            operator delete(v31);
        }
        else
        {
          *v22 = v20;
          v23 = v22 + 1;
        }
        a1[9] = v23;
      }
      if (objc_msgSend((id)*a1, "imageType") == 1)
        goto LABEL_54;
      v34 = 0;
      break;
    case 7:
      v16 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v16, "label"), objc_msgSend(v16, "UID"));
      v15 = 16;
      goto LABEL_13;
    case 8:
      v17 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v17, "label"), objc_msgSend(v17, "UID"));
      v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    v35 = *(_DWORD *)(a2 + 4 * v34 + 32);
    if (v35 != -1)
    {
      if (v35 == 0x7FFFFFFF)
        break;
      v36 = objc_msgSend((id)a1[2], "debugLocationForID:");
      v37 = v36;
      v39 = (uint64_t *)a1[9];
      v38 = a1[10];
      if ((unint64_t)v39 >= v38)
      {
        v41 = ((char *)v39 - (char *)*v58) >> 3;
        if ((unint64_t)(v41 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v42 = v38 - (_QWORD)*v58;
        v43 = v42 >> 2;
        if (v42 >> 2 <= (unint64_t)(v41 + 1))
          v43 = v41 + 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v44);
        else
          v45 = 0;
        v46 = (uint64_t *)&v45[8 * v41];
        *v46 = v37;
        v40 = v46 + 1;
        v48 = (id *)a1[8];
        v47 = (id *)a1[9];
        if (v47 != v48)
        {
          do
          {
            v49 = (uint64_t)*--v47;
            *--v46 = v49;
          }
          while (v47 != v48);
          v47 = *v58;
        }
        a1[8] = v46;
        a1[9] = v40;
        a1[10] = &v45[8 * v44];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v39 = v36;
        v40 = v39 + 1;
      }
      a1[9] = v40;
    }
    ++v34;
  }
  while (v34 != 20);
LABEL_54:
  v50 = (id)a1[3];
  objc_msgSend(a5, "setImage:", *a1);
  objc_msgSend(a5, "setCallIndex:", *((unsigned int *)a1 + 12));
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  v51 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  v52 = newRuntimeStackTrace(v58);
  v53 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  v54 = v51;
  if (v53 == 1)
  {
    v55 = objc_msgSend(a4, "device", v51);
    v54 = v52;
    if ((*(_BYTE *)(v55 + 285) & 2) == 0)
      v54 = v51;
  }
  objc_msgSend(a5, "setErrorStackTrace:", v54);
  if (v51)
    v56 = objc_msgSend(v51, "objectAtIndexedSubscript:", 0);
  else
    v56 = 0;
  objc_msgSend(a5, "setDebugLocation:", v56);

  objc_msgSend(a5, "setFunction:", a1[1]);
  objc_msgSend(a5, "setType:", 0);
  objc_msgSend(a5, "setPipelineIdentifier:", a1[3]);
  return a1;
}

void sub_22CDA234C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  void *v14;

  v14 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t resolvedSharedPacketData<GPUDebugStackPacket>::~resolvedSharedPacketData(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::resolvedSharedPacketData(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  void **v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  id *v31;
  id *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  id *v47;
  id *v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id **v58;

  *(_OWORD *)(a1 + 7) = 0u;
  v10 = (void **)(a1 + 7);
  v58 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 16);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)(a2 + 20));
  v11 = *(void **)(a2 + 8);
  *a1 = v11;
  a1[2] = objc_msgSend(v11, "debugInstrumentationData");
  switch(a3)
  {
    case 1:
      v14 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v14, "label"), objc_msgSend(v14, "UID"));
      goto LABEL_5;
    case 2:
    case 3:
      v12 = *(id *)a2;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v12, "label"), objc_msgSend(v12, "UID"));
LABEL_5:
        v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_14;
        v18 = *(id *)a2;
        if (objc_msgSend(*(id *)a2, "tileFunctionData"))
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          v19 = (void *)objc_msgSend(v18, "tileFunctionData");
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          v19 = (void *)objc_msgSend(v18, "fragmentFunctionData");
        }
        a1[1] = objc_msgSend(v19, "function");
        v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v18, "label"), objc_msgSend(v18, "UID"));
        v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      v20 = objc_msgSend((id)a1[2], "debugLocationForID:", *((unsigned int *)a1 + 11));
      *v10 = (void *)v20;
      if (v20)
      {
        v21 = a1[10];
        v22 = (uint64_t *)a1[9];
        if ((unint64_t)v22 >= v21)
        {
          v24 = ((char *)v22 - (char *)*v58) >> 3;
          if ((unint64_t)(v24 + 1) >> 61)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v25 = v21 - (_QWORD)*v58;
          v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1))
            v26 = v24 + 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v27);
            v20 = (uint64_t)*v10;
          }
          else
          {
            v28 = 0;
          }
          v29 = (uint64_t *)&v28[8 * v24];
          v30 = &v28[8 * v27];
          *v29 = v20;
          v23 = v29 + 1;
          v32 = (id *)a1[8];
          v31 = (id *)a1[9];
          if (v31 != v32)
          {
            do
            {
              v33 = (uint64_t)*--v31;
              *--v29 = v33;
            }
            while (v31 != v32);
            v31 = *v58;
          }
          a1[8] = v29;
          a1[9] = v23;
          a1[10] = v30;
          if (v31)
            operator delete(v31);
        }
        else
        {
          *v22 = v20;
          v23 = v22 + 1;
        }
        a1[9] = v23;
      }
      if (objc_msgSend((id)*a1, "imageType") == 1)
        goto LABEL_54;
      v34 = 0;
      break;
    case 7:
      v16 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v16, "label"), objc_msgSend(v16, "UID"));
      v15 = 16;
      goto LABEL_13;
    case 8:
      v17 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v17, "label"), objc_msgSend(v17, "UID"));
      v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    v35 = *(_DWORD *)(a2 + 4 * v34 + 32);
    if (v35 != -1)
    {
      if (v35 == 0x7FFFFFFF)
        break;
      v36 = objc_msgSend((id)a1[2], "debugLocationForID:");
      v37 = v36;
      v39 = (uint64_t *)a1[9];
      v38 = a1[10];
      if ((unint64_t)v39 >= v38)
      {
        v41 = ((char *)v39 - (char *)*v58) >> 3;
        if ((unint64_t)(v41 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v42 = v38 - (_QWORD)*v58;
        v43 = v42 >> 2;
        if (v42 >> 2 <= (unint64_t)(v41 + 1))
          v43 = v41 + 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v44);
        else
          v45 = 0;
        v46 = (uint64_t *)&v45[8 * v41];
        *v46 = v37;
        v40 = v46 + 1;
        v48 = (id *)a1[8];
        v47 = (id *)a1[9];
        if (v47 != v48)
        {
          do
          {
            v49 = (uint64_t)*--v47;
            *--v46 = v49;
          }
          while (v47 != v48);
          v47 = *v58;
        }
        a1[8] = v46;
        a1[9] = v40;
        a1[10] = &v45[8 * v44];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v39 = v36;
        v40 = v39 + 1;
      }
      a1[9] = v40;
    }
    ++v34;
  }
  while (v34 != 20);
LABEL_54:
  v50 = (id)a1[3];
  objc_msgSend(a5, "setImage:", *a1);
  objc_msgSend(a5, "setCallIndex:", *((unsigned int *)a1 + 12));
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  v51 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  v52 = newRuntimeStackTrace(v58);
  v53 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  v54 = v51;
  if (v53 == 1)
  {
    v55 = objc_msgSend(a4, "device", v51);
    v54 = v52;
    if ((*(_BYTE *)(v55 + 285) & 2) == 0)
      v54 = v51;
  }
  objc_msgSend(a5, "setErrorStackTrace:", v54);
  if (v51)
    v56 = objc_msgSend(v51, "objectAtIndexedSubscript:", 0);
  else
    v56 = 0;
  objc_msgSend(a5, "setDebugLocation:", v56);

  objc_msgSend(a5, "setFunction:", a1[1]);
  objc_msgSend(a5, "setType:", 0);
  objc_msgSend(a5, "setPipelineIdentifier:", a1[3]);
  return a1;
}

void sub_22CDA2994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  void *v14;

  v14 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::~resolvedSharedPacketData(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *resolvedSharedPacketData<GPUDebugAccelerationStructurePacket>::resolvedSharedPacketData(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  void **v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  id *v31;
  id *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  id *v47;
  id *v48;
  uint64_t v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id **v58;

  *(_OWORD *)(a1 + 7) = 0u;
  v10 = (void **)(a1 + 7);
  v58 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 16);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)(a2 + 20));
  v11 = *(void **)(a2 + 8);
  *a1 = v11;
  a1[2] = objc_msgSend(v11, "debugInstrumentationData");
  switch(a3)
  {
    case 1:
      v14 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v14, "label"), objc_msgSend(v14, "UID"));
      goto LABEL_5;
    case 2:
    case 3:
      v12 = *(id *)a2;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v12, "label"), objc_msgSend(v12, "UID"));
LABEL_5:
        v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_14;
        v18 = *(id *)a2;
        if (objc_msgSend(*(id *)a2, "tileFunctionData"))
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          v19 = (void *)objc_msgSend(v18, "tileFunctionData");
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          v19 = (void *)objc_msgSend(v18, "fragmentFunctionData");
        }
        a1[1] = objc_msgSend(v19, "function");
        v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v18, "label"), objc_msgSend(v18, "UID"));
        v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      v20 = objc_msgSend((id)a1[2], "debugLocationForID:", *((unsigned int *)a1 + 11));
      *v10 = (void *)v20;
      if (v20)
      {
        v21 = a1[10];
        v22 = (uint64_t *)a1[9];
        if ((unint64_t)v22 >= v21)
        {
          v24 = ((char *)v22 - (char *)*v58) >> 3;
          if ((unint64_t)(v24 + 1) >> 61)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v25 = v21 - (_QWORD)*v58;
          v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1))
            v26 = v24 + 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v27);
            v20 = (uint64_t)*v10;
          }
          else
          {
            v28 = 0;
          }
          v29 = (uint64_t *)&v28[8 * v24];
          v30 = &v28[8 * v27];
          *v29 = v20;
          v23 = v29 + 1;
          v32 = (id *)a1[8];
          v31 = (id *)a1[9];
          if (v31 != v32)
          {
            do
            {
              v33 = (uint64_t)*--v31;
              *--v29 = v33;
            }
            while (v31 != v32);
            v31 = *v58;
          }
          a1[8] = v29;
          a1[9] = v23;
          a1[10] = v30;
          if (v31)
            operator delete(v31);
        }
        else
        {
          *v22 = v20;
          v23 = v22 + 1;
        }
        a1[9] = v23;
      }
      if (objc_msgSend((id)*a1, "imageType") == 1)
        goto LABEL_54;
      v34 = 0;
      break;
    case 7:
      v16 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v16, "label"), objc_msgSend(v16, "UID"));
      v15 = 16;
      goto LABEL_13;
    case 8:
      v17 = *(id *)a2;
      a1[4] = objc_msgSend((id)objc_msgSend(*(id *)a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      v13 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline: \"%@\", UID: \"%@\""), objc_msgSend(v17, "label"), objc_msgSend(v17, "UID"));
      v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    v35 = *(_DWORD *)(a2 + 4 * v34 + 48);
    if (v35 != -1)
    {
      if (v35 == 0x7FFFFFFF)
        break;
      v36 = objc_msgSend((id)a1[2], "debugLocationForID:");
      v37 = v36;
      v39 = (uint64_t *)a1[9];
      v38 = a1[10];
      if ((unint64_t)v39 >= v38)
      {
        v41 = ((char *)v39 - (char *)*v58) >> 3;
        if ((unint64_t)(v41 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v42 = v38 - (_QWORD)*v58;
        v43 = v42 >> 2;
        if (v42 >> 2 <= (unint64_t)(v41 + 1))
          v43 = v41 + 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v44);
        else
          v45 = 0;
        v46 = (uint64_t *)&v45[8 * v41];
        *v46 = v37;
        v40 = v46 + 1;
        v48 = (id *)a1[8];
        v47 = (id *)a1[9];
        if (v47 != v48)
        {
          do
          {
            v49 = (uint64_t)*--v47;
            *--v46 = v49;
          }
          while (v47 != v48);
          v47 = *v58;
        }
        a1[8] = v46;
        a1[9] = v40;
        a1[10] = &v45[8 * v44];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v39 = v36;
        v40 = v39 + 1;
      }
      a1[9] = v40;
    }
    ++v34;
  }
  while (v34 != 20);
LABEL_54:
  v50 = (id)a1[3];
  objc_msgSend(a5, "setImage:", *a1);
  objc_msgSend(a5, "setCallIndex:", *((unsigned int *)a1 + 12));
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  v51 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  v52 = newRuntimeStackTrace(v58);
  v53 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  v54 = v51;
  if (v53 == 1)
  {
    v55 = objc_msgSend(a4, "device", v51);
    v54 = v52;
    if ((*(_BYTE *)(v55 + 285) & 2) == 0)
      v54 = v51;
  }
  objc_msgSend(a5, "setErrorStackTrace:", v54);
  if (v51)
    v56 = objc_msgSend(v51, "objectAtIndexedSubscript:", 0);
  else
    v56 = 0;
  objc_msgSend(a5, "setDebugLocation:", v56);

  objc_msgSend(a5, "setFunction:", a1[1]);
  objc_msgSend(a5, "setType:", 0);
  objc_msgSend(a5, "setPipelineIdentifier:", a1[3]);
  return a1;
}

void sub_22CDA2FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  void *v14;

  v14 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t resolvedSharedPacketData<GPUDebugAccelerationStructurePacket>::~resolvedSharedPacketData(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_22CDA9EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void emitKernelTelemetry(MTLTelemetryDevice *a1)
{
  MTLTelemetryKernelDistributionRec *kernelDistribution;
  int var3;
  uint64_t var2;
  double v5;
  double v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  double v11;
  double v12;
  int var0;
  int var1;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  OS_os_log *v23;
  MTLTelemetryKernelDistributionRec *v24;
  int v25;
  uint64_t v26;
  double v27;
  double v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  double v33;
  double v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint8_t buf[4];
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  double v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  double v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  double v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  double v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  int v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  if (*MEMORY[0x24BDDDAC8])
  {
    if (*MEMORY[0x24BDDDAC8] != 1)
      return;
    kernelDistribution = a1->kernelDistribution;
    var3 = kernelDistribution->var0.var3;
    var2 = kernelDistribution->var0.var2;
    v5 = 0.0;
    v6 = 0.0;
    if (var3)
      v6 = (float)((float)var2 / (float)var3);
    v7 = kernelDistribution->var1.var3;
    v8 = kernelDistribution->var1.var2;
    if (v7)
      v5 = (float)((float)v8 / (float)v7);
    v9 = kernelDistribution->var2.var3;
    v10 = kernelDistribution->var2.var2;
    v11 = 0.0;
    v12 = 0.0;
    if (v9)
      v12 = (float)((float)v10 / (float)v9);
    var0 = kernelDistribution->var0.var0;
    var1 = kernelDistribution->var0.var1;
    v16 = kernelDistribution->var1.var0;
    v15 = kernelDistribution->var1.var1;
    v17 = kernelDistribution->var2.var0;
    v18 = kernelDistribution->var2.var1;
    v19 = kernelDistribution->var3.var0;
    v20 = kernelDistribution->var3.var1;
    v21 = kernelDistribution->var3.var3;
    v22 = kernelDistribution->var3.var2;
    if (v21)
      v11 = (float)((float)v22 / (float)v21);
    printf("\n\nKernel, minPBAllocation=%d, maxPBAllocation=%d, avgPBAllocation=%f, totalPBAllocation=%lld, countPBAllocation=%d, minSPMRenderCount=%d, maxSPMRenderCount=%d, avgSPMRenderCount=%f, totalSPMRenderCount=%lld, countSPMRenderCount=%d, minTiledSceneBytes=%d, maxTiledSceneBytes=%d, avgTiledSceneBytes=%f, totalTiledSceneBytes=%lld, countTiledSceneBytes=%d, minRenderCount=%d, maxRenderCount=%d, avgRenderCount=%f, totalRenderCount=%lld, countRenderCount=%d", var0, var1, v6, var2, var3, v16, v15, v5, v8, v7, v17, v18, v12,
      v10,
      v9,
      v19,
      v20,
      v11,
      v22,
      v21);
  }
  v23 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
  if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_DEFAULT))
  {
    v24 = a1->kernelDistribution;
    v25 = v24->var0.var3;
    v26 = v24->var0.var2;
    v27 = 0.0;
    v28 = 0.0;
    if (v25)
      v28 = (float)((float)v26 / (float)v25);
    v29 = v24->var1.var3;
    v30 = v24->var1.var2;
    if (v29)
      v27 = (float)((float)v30 / (float)v29);
    v31 = v24->var2.var3;
    v32 = v24->var2.var2;
    v33 = 0.0;
    v34 = 0.0;
    if (v31)
      v34 = (float)((float)v32 / (float)v31);
    v36 = v24->var0.var0;
    v35 = v24->var0.var1;
    v38 = v24->var1.var0;
    v37 = v24->var1.var1;
    v40 = v24->var2.var0;
    v39 = v24->var2.var1;
    v41 = v24->var3.var0;
    v42 = v24->var3.var1;
    v43 = v24->var3.var3;
    v44 = v24->var3.var2;
    if (v43)
      v33 = (float)((float)v44 / (float)v43);
    *(_DWORD *)buf = 67113984;
    v46 = v36;
    v47 = 1024;
    v48 = v35;
    v49 = 2048;
    v50 = v28;
    v51 = 2048;
    v52 = v26;
    v53 = 1024;
    v54 = v25;
    v55 = 1024;
    v56 = v38;
    v57 = 1024;
    v58 = v37;
    v59 = 2048;
    v60 = v27;
    v61 = 2048;
    v62 = v30;
    v63 = 1024;
    v64 = v29;
    v65 = 1024;
    v66 = v40;
    v67 = 1024;
    v68 = v39;
    v69 = 2048;
    v70 = v34;
    v71 = 2048;
    v72 = v32;
    v73 = 1024;
    v74 = v31;
    v75 = 1024;
    v76 = v41;
    v77 = 1024;
    v78 = v42;
    v79 = 2048;
    v80 = v33;
    v81 = 2048;
    v82 = v44;
    v83 = 1024;
    v84 = v43;
    _os_log_impl(&dword_22CD98000, (os_log_t)v23, OS_LOG_TYPE_DEFAULT, "Kernel, minPBAllocation=%d, maxPBAllocation=%d, avgPBAllocation=%f, totalPBAllocation=%lld, countPBAllocation=%d, minSPMRenderCount=%d, maxSPMRenderCount=%d, avgSPMRenderCount=%f, totalSPMRenderCount=%lld, countSPMRenderCount=%d, minTiledSceneBytes=%d, maxTiledSceneBytes=%d, avgTiledSceneBytes=%f, totalTiledSceneBytes=%lld, countTiledSceneBytes=%d, minRenderCount=%d, maxRenderCount=%d, avgRenderCount=%f, totalRenderCount=%lld, countRenderCount=%d", buf, 0x9Au);
  }
}

uint64_t getKernelTelemetryState(MTLTelemetryKernelStateRec *a1)
{
  mach_port_t v2;
  const __CFDictionary *v3;
  uint64_t result;
  io_registry_entry_t v5;
  const __CFAllocator *v6;
  const __CFDictionary *CFProperty;
  const __CFDictionary *v8;
  const __CFNumber *Value;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;

  v2 = *MEMORY[0x24BDD8B18];
  v3 = IOServiceMatching("AGXAccelerator");
  result = IOServiceGetMatchingService(v2, v3);
  if ((_DWORD)result)
  {
    v5 = result;
    v6 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    CFProperty = (const __CFDictionary *)IORegistryEntryCreateCFProperty(result, CFSTR("InternalStatistics"), (CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
    if (CFProperty)
    {
      v8 = CFProperty;
      Value = (const __CFNumber *)CFDictionaryGetValue(CFProperty, CFSTR("Allocated PB Size"));
      if (Value)
        CFNumberGetValue(Value, kCFNumberSInt32Type, a1);
      CFRelease(v8);
    }
    v10 = (const __CFDictionary *)IORegistryEntryCreateCFProperty(v5, CFSTR("PerformanceStatistics"), v6, 0);
    if (v10)
    {
      v11 = v10;
      v12 = (const __CFNumber *)CFDictionaryGetValue(v10, CFSTR("SplitSceneCount"));
      if (v12)
        CFNumberGetValue(v12, kCFNumberSInt32Type, &a1->spmRenderCount);
      v13 = (const __CFNumber *)CFDictionaryGetValue(v11, CFSTR("CommandBufferRenderCount"));
      if (v13)
        CFNumberGetValue(v13, kCFNumberSInt32Type, &a1->renderCount);
      v14 = (const __CFNumber *)CFDictionaryGetValue(v11, CFSTR("TiledSceneBytes"));
      if (v14)
        CFNumberGetValue(v14, kCFNumberSInt32Type, &a1->tiledSceneBytes);
      CFRelease(v11);
    }
    return IOObjectRelease(v5);
  }
  return result;
}

void MTLGPUDebugStageBufferHandles::clear(MTLGPUDebugStageBufferHandles *this)
{
  uint64_t v2;
  __int128 v3;
  MTLGPUDebugResource **resources;

  v2 = 0;
  this->handles[30] = 0;
  *(_OWORD *)&this->handles[26] = 0u;
  *(_OWORD *)&this->handles[28] = 0u;
  *(_OWORD *)&this->handles[22] = 0u;
  *(_OWORD *)&this->handles[24] = 0u;
  *(_OWORD *)&this->handles[18] = 0u;
  *(_OWORD *)&this->handles[20] = 0u;
  *(_OWORD *)&this->handles[14] = 0u;
  *(_OWORD *)&this->handles[16] = 0u;
  *(_OWORD *)&this->handles[10] = 0u;
  *(_OWORD *)&this->handles[12] = 0u;
  *(_OWORD *)&this->handles[6] = 0u;
  *(_OWORD *)&this->handles[8] = 0u;
  *(_OWORD *)&this->handles[2] = 0u;
  *(_OWORD *)&this->handles[4] = 0u;
  *(_OWORD *)this->handles = 0u;
  *(_OWORD *)this->offsets = 0u;
  *(_OWORD *)&this->offsets[2] = 0u;
  *(_OWORD *)&this->offsets[4] = 0u;
  *(_OWORD *)&this->offsets[6] = 0u;
  *(_OWORD *)&this->offsets[8] = 0u;
  *(_OWORD *)&this->offsets[10] = 0u;
  *(_OWORD *)&this->offsets[12] = 0u;
  *(_OWORD *)&this->offsets[14] = 0u;
  *(_OWORD *)&this->offsets[16] = 0u;
  *(_OWORD *)&this->offsets[18] = 0u;
  *(_OWORD *)&this->offsets[20] = 0u;
  *(_OWORD *)&this->offsets[22] = 0u;
  *(_OWORD *)&this->offsets[24] = 0u;
  *(_OWORD *)&this->offsets[26] = 0u;
  *(_OWORD *)&this->offsets[28] = 0u;
  this->strides[30] = -1;
  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  *(_OWORD *)&this->strides[26] = v3;
  *(_OWORD *)&this->strides[28] = v3;
  *(_OWORD *)&this->strides[22] = v3;
  *(_OWORD *)&this->strides[24] = v3;
  *(_OWORD *)&this->strides[18] = v3;
  *(_OWORD *)&this->strides[20] = v3;
  *(_OWORD *)&this->strides[14] = v3;
  *(_OWORD *)&this->strides[16] = v3;
  *(_OWORD *)&this->strides[10] = v3;
  *(_OWORD *)&this->strides[12] = v3;
  *(_OWORD *)&this->strides[6] = v3;
  *(_OWORD *)&this->strides[8] = v3;
  *(_OWORD *)&this->strides[2] = v3;
  *(_OWORD *)&this->strides[4] = v3;
  *(_OWORD *)this->strides = v3;
  resources = this->resources;
  this->offsets[30] = 0;
  do
  {

    resources[v2++] = 0;
  }
  while (v2 != 31);
  this->needsFlush = 1;
}

unint64_t MTLGPUDebugStageBufferHandles::setBuffer(MTLGPUDebugStageBufferHandles *this, MTLGPUDebugBuffer *a2, char *a3, uint64_t a4)
{
  return MTLGPUDebugStageBufferHandles::setBuffer(this, a2, a3, (void *)0xFFFFFFFFFFFFFFFFLL, a4);
}

unint64_t MTLGPUDebugStageBufferHandles::setBuffer(MTLGPUDebugStageBufferHandles *this, MTLGPUDebugBuffer *a2, char *a3, void *a4, uint64_t a5)
{
  id *v10;
  char *v11;
  unint64_t result;
  char *v13;

  this->needsFlush = 1;
  v10 = (id *)&this->handles[a5];

  v10[31] = a2;
  v10[62] = a3;
  v10[93] = a4;
  *v10 = (id)-[MTLGPUDebugBuffer handleForOffset:](a2, "handleForOffset:", a3);
  v11 = (char *)this + 4 * a5;
  *((_DWORD *)v11 + 248) = -[MTLGPUDebugBuffer length](a2, "length") - (_DWORD)a3;
  result = -[MTLGPUDebugBuffer underlyingGPUAddress](a2, "underlyingGPUAddress");
  v13 = (char *)this + 16 * a5;
  *((_QWORD *)v13 + 140) = &a3[result];
  *((_QWORD *)v13 + 141) = &a3[result + *((unsigned int *)v11 + 248)];
  return result;
}

uint64_t MTLGPUDebugStageBufferHandles::setBufferOffset(MTLGPUDebugStageBufferHandles *this, unint64_t a2, uint64_t a3)
{
  return MTLGPUDebugStageBufferHandles::setBufferOffset(this, a2, 0xFFFFFFFFFFFFFFFFLL, a3);
}

uint64_t MTLGPUDebugStageBufferHandles::setBufferOffset(MTLGPUDebugStageBufferHandles *this, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t *v7;
  char *v8;
  uint64_t result;
  char *v10;

  this->needsFlush = 1;
  v7 = &this->handles[a4];
  v7[62] = a2;
  v7[93] = a3;
  *v7 = objc_msgSend((id)v7[31], "handleForOffset:", a2);
  v8 = (char *)this + 4 * a4;
  *((_DWORD *)v8 + 248) = objc_msgSend((id)v7[31], "length") - a2;
  result = objc_msgSend((id)v7[31], "underlyingGPUAddress");
  v10 = (char *)this + 16 * a4;
  *((_QWORD *)v10 + 140) = result + a2;
  *((_QWORD *)v10 + 141) = result + a2 + *((unsigned int *)v8 + 248);
  return result;
}

id MTLGPUDebugStageBufferHandles::setResource(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  id result;
  uint64_t v8;

  *(_BYTE *)(a1 + 1616) = 1;
  v6 = a1 + 8 * a3;
  *(_QWORD *)(v6 + 496) = 0;
  *(_QWORD *)v6 = objc_msgSend(a2, "handleForOffset:", 0);

  result = a2;
  *(_QWORD *)(v6 + 248) = result;
  *(_DWORD *)(a1 + 4 * a3 + 992) = 0;
  v8 = a1 + 16 * a3;
  *(_QWORD *)(v8 + 1128) = 0;
  *(_QWORD *)(v8 + 1120) = 0;
  return result;
}

MTLGPUDebugThreadgroupLengths *MTLGPUDebugThreadgroupLengths::setThreadgroupMemoryLength(MTLGPUDebugThreadgroupLengths *this, unsigned int a2, uint64_t a3)
{
  this->needsFlush = 1;
  this->threadgroupSizes[a3] = a2;
  return this;
}

unint64_t MTLGPUDebugThreadgroupLengths::setupTableEntries(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  if (a3)
  {
    if (!v3)
    {
LABEL_6:
      *(_DWORD *)(a1 + 372) = 0;
      *(_DWORD *)(a1 + 376) = a3;
      return (a3 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    do
    {
LABEL_5:
      v4 = __clz(__rbit32(v3));
      v3 &= ~(1 << v4);
      *a2 = v3;
      v5 = *(unsigned int *)(a1 + 4 * v4);
      v6 = a1 + 8 * v4;
      *(_DWORD *)(v6 + 124) = a3;
      *(_DWORD *)(v6 + 128) = v5;
      a3 += v5;
    }
    while (v3);
    goto LABEL_6;
  }
  if (v3)
    goto LABEL_5;
  return 0;
}

MTLGPUDebugTileThreadgroup *MTLGPUDebugTileThreadgroup::setThreadgroupMemoryLength(MTLGPUDebugTileThreadgroup *this, unsigned int a2, unsigned int a3, uint64_t a4)
{
  GPUDebugThreadgroupTableEntry *v4;

  this->needsFlush = 1;
  v4 = &this->entries[a4];
  v4->offset = a3;
  v4->length = a2;
  return this;
}

uint64_t MTLGPUDebugTileThreadgroup::setupTableEntries(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = 0;
  do
  {
    v4 = __clz(__rbit32(v2));
    v2 &= ~(1 << v4);
    v5 = *(_DWORD *)(a1 + 8 * v4 + 4) + *(_DWORD *)(a1 + 8 * v4);
    if (v3 <= v5)
      v3 = v5;
  }
  while (v2);
  *a2 = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 252) = v3;
  return (v3 + 15) & 0xFFFFFFF0;
}

void emitSamplerDistribution(MTLTelemetryDevice *a1, MTLTelemetrySamplerDistributionRec *a2)
{
  MTLTelemetryDevice *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  MTLTelemetrySamplerDistributionRec *samplerDistribution;
  const char *v8;
  const char *v9;
  _DWORD *v10;
  unsigned int v11;
  unint64_t v12;
  float v13;
  float v14;
  unsigned int v15;
  unint64_t v16;
  _DWORD *v17;
  unsigned int v18;
  unint64_t v19;
  float v20;
  float v21;
  unsigned int v22;
  unint64_t v23;
  float *v24;
  unsigned int v25;
  float v26;
  float v27;
  float v28;
  unsigned int v29;
  float v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  _DWORD *v43;
  int v44;
  int v45;
  unsigned int v46;
  unint64_t v47;
  float v48;
  NSObject *v49;
  const char *v50;
  const char *v51;
  unint64_t *v52;
  unsigned int v53;
  float v54;
  float v55;
  unsigned int v56;
  unint64_t v57;
  _DWORD *v58;
  unsigned int v59;
  unint64_t v60;
  float v61;
  float v62;
  unsigned int v63;
  unint64_t v64;
  float *v65;
  unsigned int v66;
  float v67;
  float v68;
  float v69;
  unsigned int v70;
  float v71;
  unsigned int var0;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  float v81;
  float v82;
  float v83;
  float v84;
  _DWORD *v85;
  int v86;
  int v87;
  unsigned int v88;
  unint64_t v89;
  float v90;
  uint64_t v91;
  unint64_t v92;
  const char *v93;
  const char *v94;
  const char *v95;
  const char *v96;
  uint64_t v98;
  uint8_t buf[4];
  const char *v100;
  __int16 v101;
  const char *v102;
  __int16 v103;
  unsigned int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  double v110;
  __int16 v111;
  unint64_t v112;
  __int16 v113;
  unsigned int v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  double v120;
  __int16 v121;
  unint64_t v122;
  __int16 v123;
  unsigned int v124;
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  double v130;
  __int16 v131;
  unint64_t v132;
  __int16 v133;
  unsigned int v134;
  __int16 v135;
  int v136;
  __int16 v137;
  int v138;
  __int16 v139;
  double v140;
  __int16 v141;
  unint64_t v142;
  __int16 v143;
  unsigned int v144;
  __int16 v145;
  double v146;
  __int16 v147;
  double v148;
  __int16 v149;
  double v150;
  __int16 v151;
  double v152;
  __int16 v153;
  unsigned int v154;
  __int16 v155;
  double v156;
  __int16 v157;
  double v158;
  __int16 v159;
  double v160;
  __int16 v161;
  double v162;
  __int16 v163;
  unsigned int v164;
  __int16 v165;
  int v166;
  __int16 v167;
  int v168;
  __int16 v169;
  double v170;
  __int16 v171;
  unint64_t v172;
  __int16 v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;

  v2 = a1;
  v3 = 0;
  v4 = 0;
  v175 = *MEMORY[0x24BDAC8D0];
  do
  {
    v5 = 0;
    v91 = (int)v4;
    v6 = -1280;
    v98 = v4;
    do
    {
      samplerDistribution = v2->samplerDistribution;
      if (!*(unsigned int *)((char *)&samplerDistribution->var1[v3 / 0x500 + 1][0].var0 + v6))
        goto LABEL_47;
      if (*MEMORY[0x24BDDDAC8])
      {
        if (*MEMORY[0x24BDDDAC8] != 1)
          goto LABEL_47;
        v8 = "unknown";
        if (v4 <= 6)
          v8 = off_24F794498[v91];
        v95 = v8;
        v9 = "unknown";
        if ((v5 & 0xFFFFFFF8) == 0)
          v9 = off_24F7944D0[v5];
        v93 = v9;
        v10 = (unsigned int *)((char *)&samplerDistribution->var0 + v3 + v6);
        v11 = v10[328];
        v12 = *((_QWORD *)v10 + 163);
        v13 = 0.0;
        v14 = 0.0;
        if (v11)
          v14 = (float)v12 / (float)v11;
        v15 = v10[334];
        v16 = *((_QWORD *)v10 + 166);
        if (v15)
          v13 = (float)v16 / (float)v15;
        v17 = (unsigned int *)((char *)&samplerDistribution->var0 + v3 + v6);
        v18 = v17[340];
        v19 = *((_QWORD *)v17 + 169);
        v20 = 0.0;
        v21 = 0.0;
        if (v18)
          v21 = (float)v19 / (float)v18;
        v22 = v17[346];
        v23 = *((_QWORD *)v17 + 172);
        if (v22)
          v20 = (float)v23 / (float)v22;
        v24 = (float *)((char *)&samplerDistribution->var0 + v3 + v6);
        v25 = *((_DWORD *)v24 + 351);
        v26 = v24[350];
        v27 = 0.0;
        v28 = 0.0;
        if (v25)
          v28 = v26 / (float)v25;
        v29 = *((_DWORD *)v24 + 355);
        v30 = v24[354];
        if (v29)
          v27 = v30 / (float)v29;
        v31 = v10[324];
        v32 = v10[325];
        v33 = v10[330];
        v34 = v10[331];
        v35 = v17[336];
        v36 = v17[337];
        v37 = v17[342];
        v38 = v17[343];
        v39 = v24[348];
        v40 = v24[349];
        v41 = v24[352];
        v42 = v24[353];
        v43 = (unsigned int *)((char *)&samplerDistribution->var0 + v3 + v6);
        v44 = v43[356];
        v45 = v43[357];
        v46 = v43[360];
        v47 = *((_QWORD *)v43 + 179);
        if (v46)
          v48 = (float)v47 / (float)v46;
        else
          v48 = 0.0;
        printf("\n\nSampler, wrapMode=%s, compareFunc=%s, total=%u, minMipFilter=%u, maxMipFilter=%u, avgMipFilter=%f, totalMipFilter=%llu, countMipFilter=%u, minTriLinearFilter=%u, maxTriLinearFilter=%u, avgTriLinearFilter=%f, totalTriLinearFilter=%llu, countTriLinearFilter=%u, minNormalizedCoords=%u, maxNormalizedCoords=%u, avgNormalizedCoords=%f, totalNormalizedCoords=%llu, countNormalizedCoords=%u, minMaxAniso=%u, maxMaxAniso=%u, avgMaxAniso=%f, totalMaxAniso=%llu, countMaxAniso=%u, minLodMinClamp=%.2f, maxLodMinClamp=%.2f, avgLodMinClamp=%f, totalLodMinClamp=%.2f, countLodMinClamp=%u, minLodMaxClamp=%.2f, maxLodMaxClamp=%.2f, avgLodMaxClamp=%f, totalLodMaxClamp=%.2f, countLodMaxClamp=%u, minLodAvg=%u, maxLodAvg=%u, avgLodAvg=%f, totalLodAvg=%llu, countLodAvg=%u", v95, v93, samplerDistribution->var0, v31, v32, v14, v12, v11, v33, v34,
          v13,
          v16,
          v15,
          v35,
          v36,
          v21,
          v19,
          v18,
          v37,
          v38,
          v20,
          v23,
          v22,
          v39,
          v40,
          v28,
          v26,
          v25,
          v41,
          v42,
          v27,
          v30,
          v29,
          v44,
          v45,
          v48,
          v47,
          v46);
        v2 = a1;
        v4 = v98;
      }
      v49 = -[MTLTelemetryDevice telemetryLog](v2, "telemetryLog");
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        v50 = "unknown";
        if (v4 <= 6)
          v50 = off_24F794498[v91];
        v96 = v50;
        v51 = "unknown";
        if ((v5 & 0xFFFFFFF8) == 0)
          v51 = off_24F7944D0[v5];
        v94 = v51;
        v52 = (unint64_t *)((char *)&samplerDistribution->var0 + v3 + v6);
        v53 = *((_DWORD *)v52 + 328);
        v54 = 0.0;
        v55 = 0.0;
        if (v53)
          v55 = (float)v52[163] / (float)v53;
        v92 = v52[163];
        v56 = *((_DWORD *)v52 + 334);
        v57 = v52[166];
        if (v56)
          v54 = (float)v57 / (float)v56;
        v58 = (unsigned int *)((char *)&samplerDistribution->var0 + v3 + v6);
        v59 = v58[340];
        v60 = *((_QWORD *)v58 + 169);
        v61 = 0.0;
        v62 = 0.0;
        if (v59)
          v62 = (float)v60 / (float)v59;
        v63 = v58[346];
        v64 = *((_QWORD *)v58 + 172);
        if (v63)
          v61 = (float)v64 / (float)v63;
        v65 = (float *)((char *)&samplerDistribution->var0 + v3 + v6);
        v66 = *((_DWORD *)v65 + 351);
        v67 = v65[350];
        v68 = 0.0;
        v69 = 0.0;
        if (v66)
          v69 = v67 / (float)v66;
        v70 = *((_DWORD *)v65 + 355);
        v71 = v65[354];
        if (v70)
          v68 = v71 / (float)v70;
        var0 = v2->samplerDistribution->var0;
        v73 = *((unsigned int *)v52 + 324);
        v74 = *((_DWORD *)v52 + 325);
        v75 = *((_DWORD *)v52 + 330);
        v76 = *((_DWORD *)v52 + 331);
        v77 = v58[336];
        v78 = v58[337];
        v79 = v58[342];
        v80 = v58[343];
        v81 = v65[348];
        v82 = v65[349];
        v83 = v65[352];
        v84 = v65[353];
        v85 = (unsigned int *)((char *)&samplerDistribution->var0 + v3 + v6);
        v86 = v85[356];
        v87 = v85[357];
        v88 = v85[360];
        v89 = *((_QWORD *)v85 + 179);
        if (v88)
          v90 = (float)v89 / (float)v88;
        else
          v90 = 0.0;
        *(_DWORD *)buf = 136324610;
        v176 = v73;
        v100 = v96;
        v101 = 2080;
        v102 = v94;
        v103 = 1024;
        v104 = var0;
        v105 = 1024;
        v106 = v73;
        v107 = 1024;
        v108 = v74;
        v109 = 2048;
        v110 = v55;
        v111 = 2048;
        v112 = v92;
        v113 = 1024;
        v114 = v53;
        v115 = 1024;
        v116 = v75;
        v117 = 1024;
        v118 = v76;
        v119 = 2048;
        v120 = v54;
        v121 = 2048;
        v122 = v57;
        v123 = 1024;
        v124 = v56;
        v125 = 1024;
        v126 = v77;
        v127 = 1024;
        v128 = v78;
        v129 = 2048;
        v130 = v62;
        v131 = 2048;
        v132 = v60;
        v133 = 1024;
        v134 = v59;
        v135 = 1024;
        v136 = v79;
        v137 = 1024;
        v138 = v80;
        v139 = 2048;
        v140 = v61;
        v141 = 2048;
        v142 = v64;
        v143 = 1024;
        v144 = v63;
        v145 = 2048;
        v146 = v81;
        v147 = 2048;
        v148 = v82;
        v149 = 2048;
        v150 = v69;
        v151 = 2048;
        v152 = v67;
        v153 = 1024;
        v154 = v66;
        v155 = 2048;
        v156 = v83;
        v157 = 2048;
        v158 = v84;
        v159 = 2048;
        v160 = v68;
        v161 = 2048;
        v162 = v71;
        v163 = 1024;
        v164 = v70;
        v165 = 1024;
        v166 = v86;
        v167 = 1024;
        v168 = v87;
        v169 = 2048;
        v170 = v90;
        v171 = 2048;
        v172 = v89;
        v173 = 1024;
        v174 = v88;
        _os_log_impl(&dword_22CD98000, v49, OS_LOG_TYPE_DEFAULT, "Sampler, wrapMode=%s, compareFunc=%s, total=%u, minMipFilter=%u, maxMipFilter=%u, avgMipFilter=%f, totalMipFilter=%llu, countMipFilter=%u, minTriLinearFilter=%u, maxTriLinearFilter=%u, avgTriLinearFilter=%f, totalTriLinearFilter=%llu, countTriLinearFilter=%u, minNormalizedCoords=%u, maxNormalizedCoords=%u, avgNormalizedCoords=%f, totalNormalizedCoords=%llu, countNormalizedCoords=%u, minMaxAniso=%u, maxMaxAniso=%u, avgMaxAniso=%f, totalMaxAniso=%llu, countMaxAniso=%u, minLodMinClamp=%.2f, maxLodMinClamp=%.2f, avgLodMinClamp=%f, totalLodMinClamp=%.2f, countLodMinClamp=%u, minLodMaxClamp=%.2f, maxLodMaxClamp=%.2f, avgLodMaxClamp=%f, totalLodMaxClamp=%.2f, countLodMaxClamp=%u, minLodAvg=%u, maxLodAvg=%u, avgLodAvg=%f, totalLodAvg=%llu, countLodAvg=%u", buf, 0x136u);
        v2 = a1;
        v4 = v98;
      }
LABEL_47:
      ++v5;
      v6 += 160;
    }
    while (v6);
    ++v4;
    v3 += 1280;
  }
  while (v4 != 7);
}

void sub_22CDAF0F8(_Unwind_Exception *exception_object)
{
  os_unfair_lock_s *v1;

  if (v1)
    os_unfair_lock_unlock(v1);
  _Unwind_Resume(exception_object);
}

void sub_22CDAF190(_Unwind_Exception *exception_object)
{
  os_unfair_lock_s *v1;

  if (v1)
    os_unfair_lock_unlock(v1);
  _Unwind_Resume(exception_object);
}

void sub_22CDB0F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDB107C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<objc_object  {objcproto15MTLResidencySet}*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22CDB11B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void addBufferForUsageValidation(MTLLegacySVHeap *a1, MTLLegacySVBuffer *a2)
{
  BOOL *p_enableResourceUsageValidation;
  unsigned int v5;
  unsigned int v6;
  vector<unsigned int, std::allocator<unsigned int>> *p_bufferIndices;
  unsigned int *end;
  unsigned int *value;
  unsigned int *v10;
  unsigned int *begin;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;

  if (*((_BYTE *)&a1->super.super._externalReferences + 4))
  {
    p_enableResourceUsageValidation = &a1->_enableResourceUsageValidation;
    os_unfair_lock_lock((os_unfair_lock_t)&a1->_enableResourceUsageValidation);
    v5 = -[MTLLegacySVBuffer bufferIndex](a2, "bufferIndex");
    v6 = v5;
    p_bufferIndices = &a1->_bufferIndices;
    end = p_bufferIndices->__end_;
    value = p_bufferIndices->__end_cap_.__value_;
    if (end >= value)
    {
      begin = p_bufferIndices->__begin_;
      v12 = end - p_bufferIndices->__begin_;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v14 = (char *)value - (char *)begin;
      if (v14 >> 1 > v13)
        v13 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&p_bufferIndices->__end_cap_, v15);
        begin = p_bufferIndices->__begin_;
        end = p_bufferIndices->__end_;
      }
      else
      {
        v16 = 0;
      }
      v17 = (unsigned int *)&v16[4 * v12];
      v18 = (unsigned int *)&v16[4 * v15];
      *v17 = v6;
      v10 = v17 + 1;
      while (end != begin)
      {
        v19 = *--end;
        *--v17 = v19;
      }
      p_bufferIndices->__begin_ = v17;
      p_bufferIndices->__end_ = v10;
      p_bufferIndices->__end_cap_.__value_ = v18;
      if (begin)
        operator delete(begin);
    }
    else
    {
      *end = v5;
      v10 = end + 1;
    }
    p_bufferIndices->__end_ = v10;
    os_unfair_lock_unlock((os_unfair_lock_t)p_enableResourceUsageValidation);
  }
}

void sub_22CDB15DC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void addTextureForUsageValidation(MTLLegacySVHeap *a1, MTLLegacySVTexture *a2)
{
  os_unfair_lock_s *p_textureLock;
  unsigned int v5;
  unsigned int v6;
  vector<unsigned int, std::allocator<unsigned int>> *p_textureIndices;
  unsigned int *end;
  unsigned int *value;
  unsigned int *v10;
  unsigned int *begin;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;

  if (*((_BYTE *)&a1->super.super._externalReferences + 4))
  {
    p_textureLock = &a1->_textureLock;
    os_unfair_lock_lock(&a1->_textureLock);
    v5 = -[MTLLegacySVTexture gpuIdentifier](a2, "gpuIdentifier");
    v6 = v5;
    p_textureIndices = &a1->_textureIndices;
    end = p_textureIndices->__end_;
    value = p_textureIndices->__end_cap_.__value_;
    if (end >= value)
    {
      begin = p_textureIndices->__begin_;
      v12 = end - p_textureIndices->__begin_;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v14 = (char *)value - (char *)begin;
      if (v14 >> 1 > v13)
        v13 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&p_textureIndices->__end_cap_, v15);
        begin = p_textureIndices->__begin_;
        end = p_textureIndices->__end_;
      }
      else
      {
        v16 = 0;
      }
      v17 = (unsigned int *)&v16[4 * v12];
      v18 = (unsigned int *)&v16[4 * v15];
      *v17 = v6;
      v10 = v17 + 1;
      while (end != begin)
      {
        v19 = *--end;
        *--v17 = v19;
      }
      p_textureIndices->__begin_ = v17;
      p_textureIndices->__end_ = v10;
      p_textureIndices->__end_cap_.__value_ = v18;
      if (begin)
        operator delete(begin);
    }
    else
    {
      *end = v5;
      v10 = end + 1;
    }
    p_textureIndices->__end_ = v10;
    os_unfair_lock_unlock(p_textureLock);
  }
}

void sub_22CDB1830(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDB1A30(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

__int32 *std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(__int32 *a1, __int32 *a2, __int32 *a3)
{
  __int32 *result;
  __int32 *v6;

  result = wmemchr(a1, *a3, a2 - a1);
  if (!result)
    result = a2;
  v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      if (*v6 != *a3)
        *result++ = *v6;
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

void sub_22CDB1B18(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDB1B90(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDB1C08(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDB1D78(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void sub_22CDB2A20(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDB2AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  os_unfair_lock_s *v11;

  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void sub_22CDB2B98(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDB2C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  os_unfair_lock_s *v11;

  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void sub_22CDB2D20(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDB2DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  os_unfair_lock_s *v11;

  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void sub_22CDB2E98(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDB2F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  os_unfair_lock_s *v11;

  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<NSData *,unsigned long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void sub_22CDB4FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDB50D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDB5274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDB5414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDB5510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDB5900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<objc_object  {objcproto11MTLResource}*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22CDB5978(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<objc_object  {objcproto7MTLHeap}*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22CDB59EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<objc_object  {objcproto23MTLVisibleFunctionTable}*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22CDB5A60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<objc_object  {objcproto28MTLIntersectionFunctionTable}*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22CDB5AD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_22CDB5FA0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

id unwrapAccelerationStructureDescriptor(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t k;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t m;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t n;
  void *v35;
  unint64_t v36;
  void *v37;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[128];
  _BYTE v61[128];
  _BYTE v62[128];
  _BYTE v63[128];
  _BYTE v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v1 = (void *)objc_msgSend(a1, "copy");
  v2 = (void *)objc_opt_class();
  v39 = v1;
  if (objc_msgSend(v2, "isSubclassOfClass:", objc_opt_class()))
  {
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v3 = (void *)objc_msgSend(v1, "geometryDescriptors");
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v56, v64, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v57;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v57 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * i);
          objc_msgSend(v8, "setPrimitiveDataBuffer:", objc_msgSend((id)objc_msgSend(v8, "primitiveDataBuffer"), "baseObject"));
          v9 = (void *)objc_opt_class();
          if (objc_msgSend(v9, "isSubclassOfClass:", objc_opt_class()))
          {
            objc_msgSend(v8, "setVertexBuffer:", objc_msgSend((id)objc_msgSend(v8, "vertexBuffer"), "baseObject"));
            objc_msgSend(v8, "setIndexBuffer:", objc_msgSend((id)objc_msgSend(v8, "indexBuffer"), "baseObject"));
            objc_msgSend(v8, "setTransformationMatrixBuffer:", objc_msgSend((id)objc_msgSend(v8, "transformationMatrixBuffer"), "baseObject"));
          }
          else
          {
            v10 = (void *)objc_opt_class();
            if (objc_msgSend(v10, "isSubclassOfClass:", objc_opt_class()))
            {
              v54 = 0u;
              v55 = 0u;
              v52 = 0u;
              v53 = 0u;
              v11 = (void *)objc_msgSend(v8, "vertexBuffers");
              v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v52, v63, 16);
              if (v12)
              {
                v13 = v12;
                v14 = *(_QWORD *)v53;
                do
                {
                  for (j = 0; j != v13; ++j)
                  {
                    if (*(_QWORD *)v53 != v14)
                      objc_enumerationMutation(v11);
                    objc_msgSend(*(id *)(*((_QWORD *)&v52 + 1) + 8 * j), "setBuffer:", objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v52 + 1) + 8 * j), "buffer"), "baseObject"));
                  }
                  v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v52, v63, 16);
                }
                while (v13);
              }
              objc_msgSend(v8, "setIndexBuffer:", objc_msgSend((id)objc_msgSend(v8, "indexBuffer"), "baseObject"));
              objc_msgSend(v8, "setTransformationMatrixBuffer:", objc_msgSend((id)objc_msgSend(v8, "transformationMatrixBuffer"), "baseObject"));
            }
            else
            {
              v16 = (void *)objc_opt_class();
              if (objc_msgSend(v16, "isSubclassOfClass:", objc_opt_class()))
              {
                v50 = 0u;
                v51 = 0u;
                v48 = 0u;
                v49 = 0u;
                v17 = (void *)objc_msgSend(v8, "boundingBoxBuffers");
                v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v48, v62, 16);
                if (v18)
                {
                  v19 = v18;
                  v20 = *(_QWORD *)v49;
                  do
                  {
                    for (k = 0; k != v19; ++k)
                    {
                      if (*(_QWORD *)v49 != v20)
                        objc_enumerationMutation(v17);
                      objc_msgSend(*(id *)(*((_QWORD *)&v48 + 1) + 8 * k), "setBuffer:", objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v48 + 1) + 8 * k), "buffer"), "baseObject"));
                    }
                    v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v48, v62, 16);
                  }
                  while (v19);
                }
              }
              else
              {
                v22 = (void *)objc_opt_class();
                if (objc_msgSend(v22, "isSubclassOfClass:", objc_opt_class()))
                {
                  objc_msgSend(v8, "setBoundingBoxBuffer:", objc_msgSend((id)objc_msgSend(v8, "boundingBoxBuffer"), "baseObject"));
                }
                else
                {
                  v23 = (void *)objc_opt_class();
                  if (objc_msgSend(v23, "isSubclassOfClass:", objc_opt_class()))
                  {
                    objc_msgSend(v8, "setControlPointBuffer:", objc_msgSend((id)objc_msgSend(v8, "controlPointBuffer"), "baseObject"));
                    objc_msgSend(v8, "setRadiusBuffer:", objc_msgSend((id)objc_msgSend(v8, "radiusBuffer"), "baseObject"));
                    objc_msgSend(v8, "setIndexBuffer:", objc_msgSend((id)objc_msgSend(v8, "indexBuffer"), "baseObject"));
                  }
                  else
                  {
                    v24 = (void *)objc_opt_class();
                    if (objc_msgSend(v24, "isSubclassOfClass:", objc_opt_class()))
                    {
                      v46 = 0u;
                      v47 = 0u;
                      v44 = 0u;
                      v45 = 0u;
                      v25 = (void *)objc_msgSend(v8, "controlPointBuffers");
                      v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v44, v61, 16);
                      if (v26)
                      {
                        v27 = v26;
                        v28 = *(_QWORD *)v45;
                        do
                        {
                          for (m = 0; m != v27; ++m)
                          {
                            if (*(_QWORD *)v45 != v28)
                              objc_enumerationMutation(v25);
                            objc_msgSend(*(id *)(*((_QWORD *)&v44 + 1) + 8 * m), "setBuffer:", objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v44 + 1) + 8 * m), "buffer"), "baseObject"));
                          }
                          v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v44, v61, 16);
                        }
                        while (v27);
                      }
                      v42 = 0u;
                      v43 = 0u;
                      v40 = 0u;
                      v41 = 0u;
                      v30 = (void *)objc_msgSend(v8, "radiusBuffers");
                      v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v40, v60, 16);
                      if (v31)
                      {
                        v32 = v31;
                        v33 = *(_QWORD *)v41;
                        do
                        {
                          for (n = 0; n != v32; ++n)
                          {
                            if (*(_QWORD *)v41 != v33)
                              objc_enumerationMutation(v30);
                            objc_msgSend(*(id *)(*((_QWORD *)&v40 + 1) + 8 * n), "setBuffer:", objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v40 + 1) + 8 * n), "buffer"), "baseObject"));
                          }
                          v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v40, v60, 16);
                        }
                        while (v32);
                      }
                      objc_msgSend(v8, "setIndexBuffer:", objc_msgSend((id)objc_msgSend(v8, "indexBuffer"), "baseObject"));
                    }
                  }
                }
              }
            }
          }
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v56, v64, 16);
      }
      while (v5);
    }
  }
  else
  {
    v35 = (void *)objc_opt_class();
    if (objc_msgSend(v35, "isSubclassOfClass:", objc_opt_class()))
    {
      objc_msgSend(v1, "setInstanceDescriptorBuffer:", objc_msgSend((id)objc_msgSend(v1, "instanceDescriptorBuffer"), "baseObject"));
      if (objc_msgSend((id)objc_msgSend(v1, "instancedAccelerationStructures"), "count"))
      {
        v36 = 0;
        do
        {
          objc_msgSend((id)objc_msgSend(v1, "instancedAccelerationStructures"), "setObject:atIndexedSubscript:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "instancedAccelerationStructures"), "objectAtIndexedSubscript:", v36), "baseObject"), v36);
          ++v36;
        }
        while (v36 < objc_msgSend((id)objc_msgSend(v1, "instancedAccelerationStructures"), "count"));
      }
      objc_msgSend(v1, "setMotionTransformBuffer:", objc_msgSend((id)objc_msgSend(v1, "motionTransformBuffer"), "baseObject"));
    }
    else
    {
      v37 = (void *)objc_opt_class();
      if (objc_msgSend(v37, "isSubclassOfClass:", objc_opt_class()))
      {
        objc_msgSend(v1, "setInstanceDescriptorBuffer:", objc_msgSend((id)objc_msgSend(v1, "instanceDescriptorBuffer"), "baseObject"));
        objc_msgSend(v1, "setInstanceCountBuffer:", objc_msgSend((id)objc_msgSend(v1, "instanceCountBuffer"), "baseObject"));
        objc_msgSend(v1, "setMotionTransformBuffer:", objc_msgSend((id)objc_msgSend(v1, "motionTransformBuffer"), "baseObject"));
        objc_msgSend(v1, "setMotionTransformCountBuffer:", objc_msgSend((id)objc_msgSend(v1, "motionTransformCountBuffer"), "baseObject"));
      }
    }
  }
  return v39;
}

void sub_22CDB7824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDB7918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLAccelerationStructureTypeFromDescriptor(MTLAccelerationStructureDescriptor *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 2;
  else
    return 0;
}

const __CFString *MTLAccelerationStructureStringFromType(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Unknown");
  if (a1 == 2)
    v1 = CFSTR("MTLInstanceAccelerationStructure");
  if (a1 == 1)
    return CFSTR("MTLPrimitiveAccelerationStructure");
  else
    return v1;
}

uint64_t MTLGPUDebugBufferHandleToOffset(uint64_t a1)
{
  return a1 << 44;
}

void MTLGPUDebugSetBufferForResourceHandle(MTLGPUDebugDevice *a1, uint64_t a2, MTLGPUDebugBuffer *a3)
{
  id *v6;
  id v7;
  _QWORD *v8;

  v6 = (id *)((char *)a1 + 296);
  std::mutex::lock((std::mutex *)((char *)a1 + 296));
  objc_msgSend(v6[15], "setArgumentBuffer:offset:", v6[16], objc_msgSend(v6[15], "encodedLength") * a2);
  v7 = v6[15];
  objc_msgSend(v7, "setBuffer:offset:atIndex:", -[MTLToolsObject baseObject](a3, "baseObject"), -[MTLGPUDebugBuffer offset](a3, "offset"), 0);
  if ((*((_BYTE *)a1 + 285) & 4) != 0)
  {
    v8 = (_QWORD *)objc_msgSend(v7, "constantDataAtIndex:", 1);
    *v8 = -[MTLGPUDebugBuffer bufferEndAddress](a3, "bufferEndAddress");
  }
  std::mutex::unlock((std::mutex *)v6);
}

void sub_22CDB826C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

MTLGPUDebugTexture *CreateTexture(void *a1, uint64_t a2)
{
  MTLGPUDebugTexture *v3;

  v3 = -[MTLGPUDebugTexture initWithTextureView:parentBuffer:heap:device:]([MTLGPUDebugTexture alloc], "initWithTextureView:parentBuffer:heap:device:", a1, a2, 0, *(_QWORD *)(a2 + 24));

  return v3;
}

uint64_t MTLGPUDebugLog(void)
{
  if (MTLGPUDebugLog(void)::onceToken != -1)
    dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
  return MTLGPUDebugLog(void)::logObject;
}

os_log_t ___Z14MTLGPUDebugLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.Metal", "GPUDebug");
  MTLGPUDebugLog(void)::logObject = (uint64_t)result;
  return result;
}

void MetalBuffer::MetalBuffer(MetalBuffer *this, MetalBufferHeap *a2, unsigned int a3)
{
  this->heap = a2;
  this->index = a3;
}

{
  this->heap = a2;
  this->index = a3;
}

void MetalBuffer::free(MetalBuffer *this)
{
  MetalBufferHeap::freeBuffer((uint64_t)this->heap, (uint64_t)this);
}

void MetalBufferHeap::freeBuffer(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;

  std::mutex::lock((std::mutex *)a1);
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(int *)(a1 + 112) + 1;
  *(_DWORD *)(a1 + 112) = v5;
  *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * v5) = v4;
  *(_QWORD *)(a1 + 128) -= *(_QWORD *)(a1 + 136);
  *(_QWORD *)a2 = 0;
  std::mutex::unlock((std::mutex *)a1);
}

uint64_t MetalBuffer::getMTLBuffer(MetalBuffer *this)
{
  return *(_QWORD *)(*((_QWORD *)this->heap + 8) + 8 * this->index);
}

uint64_t MetalBufferHeap::init(uint64_t this, MTLGPUDebugDevice *a2, uint64_t a3)
{
  *(_QWORD *)(this + 136) = a3;
  *(_QWORD *)(this + 144) = a2;
  return this;
}

void MetalBufferHeap::grow(MetalBufferHeap *this, unsigned int a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  std::vector<unsigned int>::size_type v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t v10[4];
  _DWORD v11[7];

  *(_QWORD *)&v11[5] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 8);
  v5 = *((_QWORD *)this + 9);
  v3 = (char *)this + 64;
  v6 = (v5 - v4) >> 3;
  if (v6 != a2)
  {
    v7 = a2;
    std::vector<objc_object  {objcproto9MTLBuffer}*>::resize((uint64_t)v3, a2);
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 88), v7);
    for (; v6 < (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3; ++v6)
    {
      *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v6) = objc_msgSend(*((id *)this + 18), "newInternalBufferWithLength:options:", *((_QWORD *)this + 17), 256);
      *((_QWORD *)this + 15) += *((_QWORD *)this + 17);
      if (MTLGPUDebugLog(void)::onceToken != -1)
        dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
      v8 = MTLGPUDebugLog(void)::logObject;
      if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_DEBUG))
        MetalBufferHeap::grow(v10, (unint64_t *)this + 15, (double *)v11, v8);
      v9 = *((int *)this + 28) + 1;
      *((_DWORD *)this + 28) = v9;
      *(_DWORD *)(*((_QWORD *)this + 11) + 4 * v9) = v6;
    }
  }
}

void std::vector<objc_object  {objcproto9MTLBuffer}*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<objc_object  {objcproto9MTLBuffer}*>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

std::mutex *MetalBufferHeap::allocBuffer(std::mutex *this)
{
  NSObject *v2;

  std::mutex::lock(this);
  if ((*(_DWORD *)&this[1].__m_.__opaque[40] & 0x80000000) != 0)
    MetalBufferHeap::grow((MetalBufferHeap *)this, ((unint64_t)(*(_QWORD *)this[1].__m_.__opaque - this[1].__m_.__sig) >> 3) + 1);
  this[2].__m_.__sig += *(_QWORD *)this[2].__m_.__opaque;
  if (MTLGPUDebugLog(void)::onceToken != -1)
    dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
  v2 = MTLGPUDebugLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_DEBUG))
    MetalBufferHeap::allocBuffer((unint64_t *)&this[2], (uint64_t)this, v2);
  --*(_DWORD *)&this[1].__m_.__opaque[40];
  std::mutex::unlock(this);
  return this;
}

void sub_22CDB8FEC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void MetalBufferHeap::~MetalBufferHeap(std::mutex *this)
{
  id *sig;
  id *v3;
  void *v4;
  void *v5;

  sig = (id *)this[1].__m_.__sig;
  v3 = *(id **)this[1].__m_.__opaque;
  while (sig != v3)

  v4 = *(void **)&this[1].__m_.__opaque[16];
  if (v4)
  {
    *(_QWORD *)&this[1].__m_.__opaque[24] = v4;
    operator delete(v4);
  }
  v5 = (void *)this[1].__m_.__sig;
  if (v5)
  {
    *(_QWORD *)this[1].__m_.__opaque = v5;
    operator delete(v5);
  }
  std::mutex::~mutex(this);
}

void GPUDebugBufferDescriptorHeap::init(GPUDebugBufferDescriptorHeap *this, MTLGPUDebugDevice *a2, unsigned int a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;

  v6 = objc_alloc_init(MEMORY[0x24BDDD4C0]);
  v7 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v8 = (void *)MEMORY[0x22E309364]();
  objc_msgSend(v6, "setIndex:", 0);
  objc_msgSend(v6, "setAccess:", 1);
  objc_msgSend(v6, "setArrayLength:", 1);
  objc_msgSend(v6, "setDataType:", 60);
  objc_msgSend(v7, "addObject:", (id)objc_msgSend(v6, "copy"));
  objc_msgSend(v6, "setIndex:", 1);
  objc_msgSend(v6, "setAccess:", 0);
  objc_msgSend(v6, "setArrayLength:", 1);
  objc_msgSend(v6, "setDataType:", 33);
  objc_msgSend(v7, "addObject:", (id)objc_msgSend(v6, "copy"));
  objc_autoreleasePoolPop(v8);
  v9 = (void *)MEMORY[0x22E309364]();
  *((_QWORD *)this + 15) = objc_msgSend(-[MTLToolsObject baseObject](a2, "baseObject"), "newArgumentEncoderWithArguments:", v7);
  objc_autoreleasePoolPop(v9);

  *((_QWORD *)this + 16) = -[MTLGPUDebugDevice newInternalBufferWithLength:options:](a2, "newInternalBufferWithLength:options:", objc_msgSend(*((id *)this + 15), "encodedLength") * a3, 256);
  if (MTLGPUDebugLog(void)::onceToken != -1)
    dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
  v10 = MTLGPUDebugLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_DEBUG))
    GPUDebugBufferDescriptorHeap::init((id *)this + 16, v10);
  *((_QWORD *)this + 14) = 0;
  objc_msgSend(*((id *)this + 15), "setArgumentBuffer:offset:", *((_QWORD *)this + 16), 0);
  -[MTLGPUDebugBuffer initWithBuffer:device:]([MTLGPUDebugBuffer alloc], "initWithBuffer:device:", *((_QWORD *)a2 + 81), a2);
  std::mutex::lock((std::mutex *)this);
  v11 = (void *)*((_QWORD *)this + 15);
  v12 = *((_QWORD *)this + 16);
  objc_msgSend(v11, "encodedLength");
  objc_msgSend(v11, "setArgumentBuffer:offset:", v12, 0);
  v13 = (void *)*((_QWORD *)this + 15);
  objc_msgSend(v13, "setBuffer:offset:atIndex:", *((_QWORD *)a2 + 81), 0, 0);
  *(_QWORD *)objc_msgSend(v13, "constantDataAtIndex:", 1) = -1;
  std::mutex::unlock((std::mutex *)this);
}

void sub_22CDB928C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t GPUDebugBufferDescriptorHeap::createHandle(std::mutex *this, MTLGPUDebugBuffer *a2)
{
  uint64_t v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;

  std::mutex::lock(this);
  v4 = *(_QWORD *)this[1].__m_.__opaque;
  if (this[1].__m_.__sig == v4)
  {
    v5 = *(_QWORD *)&this[1].__m_.__opaque[40];
    *(_QWORD *)&this[1].__m_.__opaque[40] = v5 + 1;
    if (MTLGPUDebugLog(void)::onceToken != -1)
      dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
    v6 = MTLGPUDebugLog(void)::logObject;
    if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_DEBUG))
      GPUDebugBufferDescriptorHeap::createHandle(v5, v6, v7);
    v8 = *(_QWORD *)&this[1].__m_.__opaque[16];
    if (v5 >= (*(_QWORD *)&this[1].__m_.__opaque[24] - v8) >> 3)
    {
      std::vector<objc_object  {objcproto9MTLBuffer}*>::resize((uint64_t)&this[1].__m_.__opaque[16], v5 + 1);
      v8 = *(_QWORD *)&this[1].__m_.__opaque[16];
    }
    *(_QWORD *)(v8 + 8 * v5) = a2;
  }
  else
  {
    v5 = *(unsigned int *)(v4 - 4);
    *(_QWORD *)(*(_QWORD *)&this[1].__m_.__opaque[16] + 8 * v5) = a2;
    *(_QWORD *)this[1].__m_.__opaque -= 4;
  }
  std::mutex::unlock(this);
  return v5;
}

void sub_22CDB938C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void GPUDebugBufferDescriptorHeap::freeBufferHandle(std::mutex *this, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  _DWORD *v6;
  char *sig;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;

  std::mutex::lock(this);
  *(_QWORD *)(*(_QWORD *)&this[1].__m_.__opaque[16] + 8 * a2) = 0;
  v4 = *(_QWORD *)&this[1].__m_.__opaque[8];
  v5 = *(char **)this[1].__m_.__opaque;
  if ((unint64_t)v5 >= v4)
  {
    sig = (char *)this[1].__m_.__sig;
    v8 = (v5 - sig) >> 2;
    if ((unint64_t)(v8 + 1) >> 62)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v9 = v4 - (_QWORD)sig;
    v10 = (uint64_t)(v4 - (_QWORD)sig) >> 1;
    if (v10 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&this[1].__m_.__opaque[8], v11);
      sig = (char *)this[1].__m_.__sig;
      v5 = *(char **)this[1].__m_.__opaque;
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[4 * v8];
    v14 = &v12[4 * v11];
    *(_DWORD *)v13 = a2;
    v6 = v13 + 4;
    while (v5 != sig)
    {
      v15 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    this[1].__m_.__sig = (uint64_t)v13;
    *(_QWORD *)this[1].__m_.__opaque = v6;
    *(_QWORD *)&this[1].__m_.__opaque[8] = v14;
    if (sig)
      operator delete(sig);
  }
  else
  {
    *(_DWORD *)v5 = a2;
    v6 = v5 + 4;
  }
  *(_QWORD *)this[1].__m_.__opaque = v6;
  std::mutex::unlock(this);
}

void sub_22CDB9494(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t GPUDebugConstantBufferCache::init(uint64_t this, MTLGPUDebugDevice *a2)
{
  *(_QWORD *)(this + 112) = a2;
  return this;
}

void GPUDebugConstantBufferCache::getOrCreateBuffer(GPUDebugConstantBufferCache *this@<X0>, NSData *a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  NSObject *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];

  v6 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *(_QWORD *)this += -[NSData length](a2, "length");
  if (MTLGPUDebugLog(void)::onceToken != -1)
    dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
  v7 = MTLGPUDebugLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_DEBUG))
    GPUDebugConstantBufferCache::getOrCreateBuffer((uint64_t *)this, v7, v8);
  v9 = (_BYTE *)*((_QWORD *)this + 14);
  if ((v9[286] & 0x80) != 0)
    v10 = objc_msgSend(v9, "newBufferWithLength:options:", -[NSData length](a2, "length"), 0);
  else
    v10 = objc_msgSend(v9, "newInternalBufferWithLength:options:", -[NSData length](a2, "length"), 0);
  v11 = v10;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = ___ZN27GPUDebugConstantBufferCache17getOrCreateBufferEP6NSData_block_invoke;
  v12[3] = &unk_24F7945C8;
  v12[4] = v10;
  -[NSData enumerateByteRangesUsingBlock:](a2, "enumerateByteRangesUsingBlock:", v12);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = v11;
  std::mutex::unlock(v6);
}

void sub_22CDB95F4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void GPUDebugConstantBufferCache::releaseBuffer(GPUDebugConstantBufferCache *this, KeyBufferPair *a2)
{
  std::mutex *v4;

  if (a2->buffer)
  {
    v4 = (std::mutex *)((char *)this + 8);
    std::mutex::lock((std::mutex *)((char *)this + 8));
    *(_QWORD *)this -= -[MTLBuffer length](a2->buffer, "length");

    a2->buffer = 0;
    std::mutex::unlock(v4);
  }
}

void sub_22CDB96BC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void GlobalResidentBufferList::useBuffers(GlobalResidentBufferList *this, MTLGPUDebugRenderCommandEncoder *a2)
{
  std::mutex *v4;
  uint64_t i;
  uint64_t v6;

  if (*(_DWORD *)&a2->_tileStageActive != *(_DWORD *)this)
  {
    v4 = (std::mutex *)((char *)this + 8);
    std::mutex::lock((std::mutex *)((char *)this + 8));
    for (i = *((_QWORD *)this + 10);
          (GlobalResidentBufferList *)i != (GlobalResidentBufferList *)((char *)this + 72);
          i = *(_QWORD *)(i + 8))
    {
      v6 = *(_QWORD *)(i + 16);
      -[MTLGPUDebugRenderCommandEncoder useResource:usage:](a2, "useResource:usage:", v6, 1);
      -[MTLToolsCommandEncoder addRetainedObject:](a2, "addRetainedObject:", v6);
    }
    *(_DWORD *)&a2->_tileStageActive = *(_DWORD *)this;
    std::mutex::unlock(v4);
  }
}

void sub_22CDB9790(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void GlobalResidentBufferList::useBuffers(GlobalResidentBufferList *this, MTLGPUDebugComputeCommandEncoder *a2)
{
  std::mutex *v4;
  uint64_t i;
  uint64_t v6;

  if (*(_DWORD *)&a2->_enableUseResourceValidation != *(_DWORD *)this)
  {
    v4 = (std::mutex *)((char *)this + 8);
    std::mutex::lock((std::mutex *)((char *)this + 8));
    for (i = *((_QWORD *)this + 10);
          (GlobalResidentBufferList *)i != (GlobalResidentBufferList *)((char *)this + 72);
          i = *(_QWORD *)(i + 8))
    {
      v6 = *(_QWORD *)(i + 16);
      -[MTLGPUDebugComputeCommandEncoder useResource:usage:](a2, "useResource:usage:", v6, 1);
      -[MTLToolsCommandEncoder addRetainedObject:](a2, "addRetainedObject:", v6);
    }
    *(_DWORD *)&a2->_enableUseResourceValidation = *(_DWORD *)this;
    std::mutex::unlock(v4);
  }
}

void sub_22CDB9864(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void GlobalResidentBufferList::addBuffer(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  ++*(_DWORD *)a1;
  v5 = operator new(0x18uLL);
  v6 = *(_QWORD **)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  *v5 = a1 + 72;
  v5[1] = v6;
  v5[2] = a2;
  *v6 = v5;
  *(_QWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 88) = v7 + 1;
  std::mutex::unlock(v4);
}

void sub_22CDB98E0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void GlobalResidentBufferList::removeBuffer(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  uint64_t v4;

  v4 = a2;
  v3 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  std::list<objc_object  {objcproto9MTLBuffer}*>::remove(a1 + 72, &v4);
  std::mutex::unlock(v3);
}

void sub_22CDB993C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::list<objc_object  {objcproto9MTLBuffer}*>::remove(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10[3];

  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 != (_QWORD *)a1)
  {
    do
    {
      v6 = (_QWORD *)v2[1];
      v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (_QWORD *)a1)
        {
          v8 = 1;
LABEL_8:
          v6 = (_QWORD *)a1;
        }
        else
        {
          while (1)
          {
            v7 = v6[2];
            v8 = v7 == v5;
            if (v7 != v5)
              break;
            v6 = (_QWORD *)v6[1];
            if (v6 == (_QWORD *)a1)
              goto LABEL_8;
          }
        }
        std::list<objc_object  {objcproto9MTLBuffer}*>::splice((uint64_t)v10, v10, a1, v2, v6);
        if (!v8)
          v6 = (_QWORD *)v6[1];
      }
      v2 = v6;
    }
    while (v6 != (_QWORD *)a1);
  }
  return std::__list_imp<objc_object  {objcproto9MTLBuffer}*>::clear(v10);
}

void sub_22CDB9A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<objc_object  {objcproto9MTLBuffer}*>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22CDBA554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void instrumentationHeapInit(MTLGPUDebugDevice *a1)
{
  unint64_t *v2;
  unint64_t v3;
  MTLGPUDebugDevice *v4;
  MTLGPUDebugDevice ***v5;
  MTLGPUDebugDevice **v6;

  v2 = (unint64_t *)((char *)a1 + 688);
  v4 = a1;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<instrumentationHeapInit(MTLGPUDebugDevice *)::$_0 &&>>);
  }
}

void indirectCommandBufferPipelineInit(MTLGPUDebugDevice *a1)
{
  unint64_t *v1;
  unint64_t v2;
  MTLGPUDebugDevice **v3;
  MTLGPUDebugDevice *v4;
  MTLGPUDebugDevice ****v5;
  MTLGPUDebugDevice ***v6;

  v4 = a1;
  v1 = (unint64_t *)((char *)a1 + 696);
  v3 = &v4;
  v2 = atomic_load(v1);
  if (v2 != -1)
  {
    v6 = &v3;
    v5 = &v6;
    std::__call_once(v1, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<indirectCommandBufferPipelineInit(MTLGPUDebugDevice *)::$_0 &&>>);
  }
}

void LogInstrumentationFailures(MTLGPUDebugImageData *a1, MTLDebugInstrumentationData *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  int v12;
  const char *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    -[MTLGPUDebugImageData functionType](a1, "functionType");
    v4 = objc_msgSend((id)MTLFunctionTypeString(), "UTF8String");
    if (-[MTLDebugInstrumentationData hasArgumentLimitsInstrumentationFailures](a2, "hasArgumentLimitsInstrumentationFailures"))
    {
      if (MTLGPUDebugLog(void)::onceToken != -1)
        dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
      v5 = MTLGPUDebugLog(void)::logObject;
      if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_INFO))
      {
        v14 = 136315394;
        v15 = v4;
        v16 = 2080;
        v17 = -[NSString UTF8String](-[MTLGPUDebugImageData loadedImageName](a1, "loadedImageName"), "UTF8String");
        v6 = "Fatal failure when instrumenting %s \"%s\":\n"
             "\tFunction is not instrumented and faults will not be detected.";
        v7 = v5;
        v8 = 22;
LABEL_19:
        _os_log_impl(&dword_22CD98000, v7, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v14, v8);
      }
    }
    else if ((-[MTLDebugInstrumentationData hasArgumentBufferInstrumentationFailures](a2, "hasArgumentBufferInstrumentationFailures") & 1) != 0|| -[MTLDebugInstrumentationData hasGlobalConstantsInstrumentationFailures](a2, "hasGlobalConstantsInstrumentationFailures"))
    {
      if (MTLGPUDebugLog(void)::onceToken != -1)
        dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
      v9 = MTLGPUDebugLog(void)::logObject;
      if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_INFO))
      {
        v10 = -[NSString UTF8String](-[MTLGPUDebugImageData loadedImageName](a1, "loadedImageName"), "UTF8String");
        if (-[MTLDebugInstrumentationData hasArgumentBufferInstrumentationFailures](a2, "hasArgumentBufferInstrumentationFailures"))v11 = "\n\tFaults from argument buffers will not be detected.";
        else
          v11 = "";
        v12 = -[MTLDebugInstrumentationData hasGlobalConstantsInstrumentationFailures](a2, "hasGlobalConstantsInstrumentationFailures");
        v14 = 136315906;
        v13 = "\n\tFaults from reading global constant variables will not be detected.";
        v15 = v4;
        if (!v12)
          v13 = "";
        v16 = 2080;
        v17 = v10;
        v18 = 2080;
        v19 = v11;
        v20 = 2080;
        v21 = v13;
        v6 = "Partial failure when instrumenting %s \"%s\":%s%s";
        v7 = v9;
        v8 = 42;
        goto LABEL_19;
      }
    }
  }
}

uint64_t MTLGPUDebugSetValidationChecksOptions(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v11;
  unsigned __int8 v12;
  id v13;
  void *v14;
  const void *v15;
  void *v16;
  const void *v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  int v23;
  NSObject *v24;
  _QWORD v29[2];
  uint64_t (*v30)(uint64_t, _QWORD *);
  void *v31;
  id v32;
  _QWORD v33[2];
  uint64_t (*v34)(uint64_t, _QWORD *);
  void *v35;
  id v36;
  char data;
  CC_SHA256_CTX __p;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  unsigned __int8 md[16];
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v39 = 1;
  v11 = operator new(0x20uLL);
  *(_QWORD *)__p.hash = v11 + 4;
  *(_QWORD *)&__p.hash[2] = v11 + 4;
  *v11 = "all";
  v11[1] = 1;
  v11[2] = "none";
  v11[3] = 2;
  *(_QWORD *)__p.count = v11;
  v12 = MTLGetEnvCase<MTLShaderValidationState>("MTL_SHADER_VALIDATION_DEFAULT_STATE", &v39, (const char ***)&__p);
  if (*(_QWORD *)__p.count)
  {
    *(_QWORD *)__p.hash = *(_QWORD *)__p.count;
    operator delete(*(void **)__p.count);
  }
  if ((v12 & 1) == 0)
    v39 = 1;
  v13 = (id)objc_opt_new();
  objc_msgSend(v13, "appendString:", CFSTR("[METAL SHADER VALIDATION] Processing new pipeline"));
  CC_SHA256_Init(&__p);
  v14 = (void *)objc_msgSend(a2, "baseObject");
  v15 = (const void *)objc_msgSend(v14, "bitCodeHash");
  data = objc_msgSend(v14, "bitcodeType");
  CC_SHA256_Update(&__p, v15, 8u);
  CC_SHA256_Update(&__p, (const void *)objc_msgSend((id)objc_msgSend(v14, "name"), "UTF8String"), objc_msgSend((id)objc_msgSend(v14, "name"), "length"));
  CC_SHA256_Update(&__p, &data, 1u);
  if (a3)
  {
    v16 = (void *)objc_msgSend(a3, "baseObject");
    v17 = (const void *)objc_msgSend(v16, "bitCodeHash");
    md[0] = 0;
    md[0] = objc_msgSend(v16, "bitcodeType");
    CC_SHA256_Update(&__p, v17, 8u);
    CC_SHA256_Update(&__p, (const void *)objc_msgSend((id)objc_msgSend(v16, "name"), "UTF8String"), objc_msgSend((id)objc_msgSend(v16, "name"), "length"));
    CC_SHA256_Update(&__p, md, 1u);
  }
  if (a4)
  {
    v18 = (void *)objc_msgSend(a4, "baseObject");
    v19 = (const void *)objc_msgSend(v18, "bitCodeHash");
    md[0] = 0;
    md[0] = objc_msgSend(v18, "bitcodeType");
    CC_SHA256_Update(&__p, v19, 8u);
    CC_SHA256_Update(&__p, (const void *)objc_msgSend((id)objc_msgSend(v18, "name"), "UTF8String"), objc_msgSend((id)objc_msgSend(v18, "name"), "length"));
    CC_SHA256_Update(&__p, md, 1u);
  }
  if (a5)
    CC_SHA256_Update(&__p, (const void *)objc_msgSend(a5, "UTF8String"), objc_msgSend(a5, "length"));
  CC_SHA256_Final(md, &__p);
  v40 = *(_OWORD *)md;
  v41 = v43;
  v20 = _MTLRequestHashToString();
  if (MTLGetEnvDefault())
  {
    if (a5)
      objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("\npipeline label: \"%@\""), a5));
    objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("\n\t{ function1: \"%@\" - label: \"%@\" }"), objc_msgSend(a2, "name"), objc_msgSend(a2, "label")));
    if (a3)
      objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("\n\t{ function2: \"%@\" - label: \"%@\" }"), objc_msgSend(a3, "name"), objc_msgSend(a3, "label")));
    if (a4)
      objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("\n\t{ function3: \"%@\" - label: \"%@\" }"), objc_msgSend(a4, "name"), objc_msgSend(a4, "label")));
    objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("\n\t{ Shader Validation UID: \"%@\" }"), v20));
  }
  v32 = v13;
  v33[0] = MEMORY[0x24BDAC760];
  v33[1] = 3221225472;
  v34 = ___ZL37MTLGPUDebugSetValidationChecksOptionsP17MTLGPUDebugDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_2;
  v35 = &unk_24F794730;
  v36 = v13;
  v29[0] = MEMORY[0x24BDAC760];
  v29[1] = 3221225472;
  v30 = ___ZL37MTLGPUDebugSetValidationChecksOptionsP17MTLGPUDebugDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_3;
  v31 = &unk_24F794730;
  v21 = *(void **)(a1 + 656);
  if (!v21)
  {
LABEL_27:
    v22 = *(void **)(a1 + 664);
    if (!v22)
      goto LABEL_38;
    if (!a5)
      goto LABEL_31;
    goto LABEL_29;
  }
  if (!a5 || (objc_msgSend(*(id *)(a1 + 656), "containsObject:", a5) & 1) == 0)
  {
    if (v20)
      LODWORD(v21) = objc_msgSend(v21, "containsObject:", v20);
    else
      LODWORD(v21) = 0;
    goto LABEL_27;
  }
  v22 = *(void **)(a1 + 664);
  if (!v22)
    goto LABEL_41;
  LODWORD(v21) = 1;
LABEL_29:
  if ((objc_msgSend(v22, "containsObject:", a5) & 1) != 0)
  {
    v23 = 1;
    goto LABEL_33;
  }
LABEL_31:
  if (!v20)
  {
LABEL_38:
    if ((v21 & 1) != 0)
      goto LABEL_41;
    goto LABEL_52;
  }
  v23 = objc_msgSend(v22, "containsObject:", v20);
LABEL_33:
  if ((_DWORD)v21 && v23)
  {
    objc_msgSend(v13, "appendString:", CFSTR("\nWarning: Pipeline requested to have shader validation checks both enabled and disabled."));
    if (v39 != 2)
    {
      if (v39 == 1)
        goto LABEL_62;
LABEL_63:
      *a7 |= 0x800000000uLL;
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if ((_DWORD)v21)
  {
LABEL_41:
    if (a6 == 2)
      objc_msgSend(v13, "appendString:", CFSTR("\nWarning: Pipeline requested to have shader validation checks both enabled and disabled."));
    if (v39 == 1)
    goto LABEL_62;
  }
  if (v23)
  {
    if (a6 == 1)
      objc_msgSend(v13, "appendString:", CFSTR("\nWarning: Pipeline requested to have shader validation checks both enabled and disabled."));
    if (v39 == 2)
    goto LABEL_64;
  }
LABEL_52:
  if (a6 == 2)
  {
    if (v39 == 2)
  }
  else
  {
    if (a6 == 1)
    {
      if (v39 == 1)
      goto LABEL_62;
    }
    if (v39 != 2)
    {
      if (v39 == 1)
      {
LABEL_62:
        v34((uint64_t)v33, a7);
        goto LABEL_65;
      }
      goto LABEL_63;
    }
  }
LABEL_64:
  v30((uint64_t)v29, a7);
LABEL_65:
  if (MTLGPUDebugLog(void)::onceToken != -1)
    dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
  v24 = MTLGPUDebugLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_DEBUG))
    MTLGPUDebugSetValidationChecksOptions(v13, v24);
  return v20;
}

void sub_22CDBC1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *DebugCompileOptions(MTLGPUDebugDevice *a1, MTLCompileOptions *a2)
{
  id v2;
  void *v3;
  const __CFString *v4;

  if (a2)
    v2 = -[MTLToolsDevice unwrapMTLCompileOptions:](a1, "unwrapMTLCompileOptions:", a2);
  else
    v2 = objc_alloc_init(MEMORY[0x24BDDD528]);
  v3 = v2;
  if (objc_msgSend(v2, "additionalCompilerArguments"))
    v4 = (const __CFString *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@ -debug-info-kind=line-tables-only"), objc_msgSend(v3, "additionalCompilerArguments"));
  else
    v4 = CFSTR("-debug-info-kind=line-tables-only");
  objc_msgSend(v3, "setAdditionalCompilerArguments:", v4);
  return v3;
}

char *MTLGetEnvCase<MTLBoundsCheck::FailMode>(const char *a1, _DWORD *a2, const char ***a3)
{
  char *result;
  const char **v7;
  const char **v8;
  const char *v9;
  FILE **v10;
  const char **v11;
  const char **v12;
  const char *v13;

  result = getenv(a1);
  if (result)
  {
    v7 = *a3;
    v8 = a3[1];
    if (*a3 == v8)
    {
LABEL_6:
      v10 = (FILE **)MEMORY[0x24BDAC8D8];
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Invalid option for %s, valid options are:\n", a1);
      v11 = *a3;
      v12 = a3[1];
      if (*a3 != v12)
      {
        do
        {
          v13 = *v11;
          v11 += 2;
          fprintf(*v10, "\t%s\n", v13);
        }
        while (v11 != v12);
      }
      return 0;
    }
    else
    {
      v9 = result;
      while (strcmp(v9, *v7))
      {
        v7 += 2;
        if (v7 == v8)
          goto LABEL_6;
      }
      *a2 = *((_DWORD *)v7 + 2);
      return (char *)1;
    }
  }
  return result;
}

uint64_t MTLGPUDebugParsePerPSOList(const std::string *a1)
{
  id v2;
  uint64_t *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[13];
  char v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = objc_alloc_init(MEMORY[0x24BDBCEF0]);
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = (uint64_t *)a1;
  else
    v3 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  v4 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v3);
  if (MTLGPUDebugLog(void)::onceToken != -1)
    dispatch_once(&MTLGPUDebugLog(void)::onceToken, &__block_literal_global_0);
  v5 = MTLGPUDebugLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLGPUDebugLog(void)::logObject, OS_LOG_TYPE_DEBUG))
    MTLGPUDebugParsePerPSOList(v4, v5, v6);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v18, a1, 24);
  if (!*(_DWORD *)((char *)&v18[4] + *(_QWORD *)(v18[0] - 24)))
  {
    *(_QWORD *)&v7 = 138412290;
    v14 = v7;
    while (1)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v18, (uint64_t)&v15, 0x2Cu);
      if (SHIBYTE(v17) < 0)
        break;
      if (HIBYTE(v17))
      {
        v11 = &v15;
LABEL_18:
        v12 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v11, v14);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v14;
          v22 = v12;
          _os_log_debug_impl(&dword_22CD98000, v5, OS_LOG_TYPE_DEBUG, "[METAL SHADER VALIDATION] Storing PSO: \"%@\"", buf, 0xCu);
        }
        if (v17 >= 0)
          v13 = &v15;
        else
          v13 = v15;
        objc_msgSend(v2, "addObject:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v13));
        if ((SHIBYTE(v17) & 0x80000000) == 0)
          goto LABEL_25;
        goto LABEL_24;
      }
LABEL_25:
      if (*(_DWORD *)((char *)&v18[4] + *(_QWORD *)(v18[0] - 24)))
        goto LABEL_9;
    }
    if (v16)
    {
      v11 = v15;
      goto LABEL_18;
    }
LABEL_24:
    operator delete(v15);
    goto LABEL_25;
  }
LABEL_9:
  v8 = objc_msgSend(v2, "copy", v14);
  v18[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v18[2] = v9;
  v18[3] = MEMORY[0x24BEDB848] + 16;
  if (v19 < 0)
    operator delete((void *)v18[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22E3090E8](&v20);
  return v8;
}

void sub_22CDBFF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

_QWORD *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  a1[16] = MEMORY[0x24BEDB858] + 104;
  a1[2] = v5 + 64;
  v7 = a1 + 2;
  v8 = (uint64_t)(a1 + 3);
  v9 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v11;
  a1[1] = 0;
  v12 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v12, a1 + 3);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  a1[2] = v13;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *a1 = v15;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *a1 = v5 + 24;
  a1[16] = v6;
  a1[2] = v5 + 64;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3);
  return a1;
}

void sub_22CDC00A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x22E3090E8](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x22E30904C](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_22CDC01F8(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x22CDC01C4);
  }
  __cxa_rethrow();
}

void sub_22CDC023C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22E3090E8](a1 + 128);
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_22CDC0344(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<instrumentationHeapInit(MTLGPUDebugDevice *)::$_0 &&>>(uint64_t ***a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **a1;
  v2 = *v1;
  v3 = *v1 + 112;
  *(_QWORD *)(v3 + 136) = 0x200000;
  *(_QWORD *)(v3 + 144) = v2;
  if ((*(_BYTE *)(v2 + 286) & 0x80) != 0)
  {
    GPUDebugBufferDescriptorHeap::init((GPUDebugBufferDescriptorHeap *)(v2 + 296), (MTLGPUDebugDevice *)v2, 0xFFFFFu);
    v2 = *v1;
  }
  *(_QWORD *)(v2 + 544) = v2;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<indirectCommandBufferPipelineInit(MTLGPUDebugDevice *)::$_0 &&>>(id ****a1)
{
  id **v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;

  v1 = **a1;
  v2 = (void *)objc_msgSend(**v1, "baseObject");
  v3 = (void *)objc_msgSend(v2, "newLibraryWithURL:error:", objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.gpusw.MetalTools")), "URLForResource:withExtension:", CFSTR("MTLGPUDebugICBSupport"), CFSTR("metallib")), 0);
  v12 = (id)objc_msgSend(v3, "newFunctionWithName:", CFSTR("ICB_Inherit_PSO_Vertex"));
  v11 = (void *)objc_msgSend(v3, "newFunctionWithName:", CFSTR("ICB_Inherit_None_Vertex"));
  v4 = (void *)objc_msgSend(v3, "newFunctionWithName:", CFSTR("ICB_Inherit_Buffers_Vertex"));
  v5 = objc_alloc_init(MEMORY[0x24BDDD6B8]);
  objc_msgSend(v5, "setRasterizationEnabled:", 0);
  objc_msgSend(v5, "setSupportIndirectCommandBuffers:", 1);
  objc_msgSend(v5, "setVertexFunction:", v12);
  *((_QWORD *)**v1 + 88) = objc_msgSend(v2, "newRenderPipelineStateWithDescriptor:error:", v5, 0);
  objc_msgSend(v5, "setVertexFunction:", v11);
  *((_QWORD *)**v1 + 89) = objc_msgSend(v2, "newRenderPipelineStateWithDescriptor:error:", v5, 0);
  objc_msgSend(v5, "setVertexFunction:", v4);
  *((_QWORD *)**v1 + 90) = objc_msgSend(v2, "newRenderPipelineStateWithDescriptor:error:", v5, 0);
  v6 = (void *)objc_msgSend(v3, "newFunctionWithName:", CFSTR("ICB_Inherit_PSO_Kernel"));
  v7 = (void *)objc_msgSend(v3, "newFunctionWithName:", CFSTR("ICB_Inherit_None_Kernel"));
  v8 = (void *)objc_msgSend(v3, "newFunctionWithName:", CFSTR("ICB_Inherit_Buffers_Kernel"));
  v9 = (void *)objc_msgSend(v3, "newFunctionWithName:", CFSTR("ICB_Inherit_Both_Kernel"));
  v10 = objc_alloc_init(MEMORY[0x24BDDD550]);
  objc_msgSend(v10, "setSupportIndirectCommandBuffers:", 1);
  objc_msgSend(v10, "setComputeFunction:", v6);
  *((_QWORD *)**v1 + 92) = objc_msgSend(v2, "newComputePipelineStateWithDescriptor:options:reflection:error:", v10, 0, 0, 0);
  objc_msgSend(v10, "setComputeFunction:", v7);
  *((_QWORD *)**v1 + 93) = objc_msgSend(v2, "newComputePipelineStateWithDescriptor:options:reflection:error:", v10, 0, 0, 0);
  objc_msgSend(v10, "setComputeFunction:", v8);
  *((_QWORD *)**v1 + 94) = objc_msgSend(v2, "newComputePipelineStateWithDescriptor:options:reflection:error:", v10, 0, 0, 0);
  objc_msgSend(v10, "setComputeFunction:", v9);
  *((_QWORD *)**v1 + 95) = objc_msgSend(v2, "newComputePipelineStateWithDescriptor:options:reflection:error:", v10, 0, 0, 0);

  v13 = objc_alloc_init(MEMORY[0x24BDDD590]);
  objc_msgSend(v13, "setDepthWriteEnabled:", 0);
  objc_msgSend(v13, "setDepthCompareFunction:", 7);
  objc_msgSend((id)objc_msgSend(v13, "frontFaceStencil"), "setReadMask:", 0);
  objc_msgSend((id)objc_msgSend(v13, "frontFaceStencil"), "setWriteMask:", 0);
  objc_msgSend((id)objc_msgSend(v13, "backFaceStencil"), "setReadMask:", 0);
  objc_msgSend((id)objc_msgSend(v13, "backFaceStencil"), "setWriteMask:", 0);
  *((_QWORD *)**v1 + 91) = objc_msgSend(v2, "newDepthStencilStateWithDescriptor:", v13);

}

char *MTLGetEnvCase<MTLShaderValidationState>(const char *a1, _QWORD *a2, const char ***a3)
{
  char *result;
  const char **v7;
  const char **v8;
  const char *v9;
  FILE **v10;
  const char **v11;
  const char **v12;
  const char *v13;

  result = getenv(a1);
  if (result)
  {
    v7 = *a3;
    v8 = a3[1];
    if (*a3 == v8)
    {
LABEL_6:
      v10 = (FILE **)MEMORY[0x24BDAC8D8];
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Invalid option for %s, valid options are:\n", a1);
      v11 = *a3;
      v12 = a3[1];
      if (*a3 != v12)
      {
        do
        {
          v13 = *v11;
          v11 += 2;
          fprintf(*v10, "\t%s\n", v13);
        }
        while (v11 != v12);
      }
      return 0;
    }
    else
    {
      v9 = result;
      while (strcmp(v9, *v7))
      {
        v7 += 2;
        if (v7 == v8)
          goto LABEL_6;
      }
      *a2 = v7[1];
      return (char *)1;
    }
  }
  return result;
}

uint64_t ___ZL37MTLGPUDebugSetValidationChecksOptionsP17MTLGPUDebugDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_2(uint64_t a1, _QWORD *a2)
{
  *a2 |= 0x800000000uLL;
  return objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("\nEnabling checks."));
}

uint64_t ___ZL37MTLGPUDebugSetValidationChecksOptionsP17MTLGPUDebugDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  *a2 |= 0x1000000000uLL;
  return objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("\nDisabling checks."));
}

_QWORD *std::__list_imp<objc_object  {objcproto9MTLBuffer}*>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::vector<objc_object  {objcproto9MTLBuffer}*>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v5;
  unsigned int *value;
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

uint64_t std::list<objc_object  {objcproto9MTLBuffer}*>::splice(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4 != a5)
  {
    v5 = (_QWORD *)*a5;
    if (result != a3)
    {
      v6 = 1;
      if (v5 != a4)
      {
        v7 = a4;
        do
        {
          v7 = (_QWORD *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(_QWORD *)(a3 + 16) -= v6;
      *(_QWORD *)(result + 16) += v6;
    }
    v8 = *a4;
    *(_QWORD *)(v8 + 8) = v5[1];
    *(_QWORD *)v5[1] = v8;
    v9 = *a2;
    *(_QWORD *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void *unwrapLinkedFunctions(MTLLinkedFunctions *a1)
{
  void *v2;
  void *v3;
  NSDictionary *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 0;
  v2 = (void *)objc_msgSend(MEMORY[0x24BDDD638], "linkedFunctions");
  objc_msgSend(v2, "setFunctions:", unwrapArray(-[MTLLinkedFunctions functions](a1, "functions")));
  objc_msgSend(v2, "setBinaryFunctions:", unwrapArray(-[MTLLinkedFunctions binaryFunctions](a1, "binaryFunctions")));
  objc_msgSend(v2, "setPrivateFunctions:", unwrapArray(-[MTLLinkedFunctions privateFunctions](a1, "privateFunctions")));
  if (-[MTLLinkedFunctions groups](a1, "groups"))
  {
    v3 = (void *)objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v4 = -[MTLLinkedFunctions groups](a1, "groups", 0);
    v5 = -[NSDictionary countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v11;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v11 != v7)
            objc_enumerationMutation(v4);
          objc_msgSend(v3, "setValue:forKey:", unwrapArray((NSArray *)-[NSDictionary objectForKeyedSubscript:](-[MTLLinkedFunctions groups](a1, "groups"), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v8))), *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v8));
          ++v8;
        }
        while (v6 != v8);
        v6 = -[NSDictionary countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v6);
    }
    objc_msgSend(v2, "setGroups:", v3);
  }
  return v2;
}

void *unwrapArray(NSArray *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 0;
  v2 = (void *)objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", -[NSArray count](a1, "count"));
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(a1);
        objc_msgSend(v2, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * i), "baseObject"));
      }
      v4 = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }
  return v2;
}

void sub_22CDC922C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDC9338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDC949C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<objc_object  {objcproto17MTLFunctionHandle}*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22CDC9538(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<objc_object  {objcproto9MTLBuffer}*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22CDC95AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLLegacySVBufferHandleToOffset(uint64_t a1)
{
  return a1 << 40;
}

void MTLLegacySVSetBufferForResourceHandle(MTLLegacySVDevice *a1, uint64_t a2, MTLLegacySVBuffer *a3)
{
  id *v5;
  id v6;
  _DWORD *v7;

  v5 = (id *)((char *)a1 + 296);
  std::mutex::lock((std::mutex *)((char *)a1 + 296));
  objc_msgSend(v5[15], "setArgumentBuffer:offset:", v5[16], objc_msgSend(v5[15], "encodedLength") * a2);
  v6 = v5[15];
  objc_msgSend(v6, "setBuffer:offset:atIndex:", -[MTLToolsObject baseObject](a3, "baseObject"), -[MTLLegacySVBuffer offset](a3, "offset"), 0);
  v7 = (_DWORD *)objc_msgSend(v6, "constantDataAtIndex:", 1);
  *v7 = -[MTLLegacySVBuffer length](a3, "length");
  std::mutex::unlock((std::mutex *)v5);
}

void sub_22CDCDDAC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

MTLLegacySVTexture *CreateTexture(void *a1, uint64_t a2)
{
  MTLLegacySVTexture *v3;

  v3 = -[MTLLegacySVTexture initWithTextureView:parentBuffer:heap:device:]([MTLLegacySVTexture alloc], "initWithTextureView:parentBuffer:heap:device:", a1, a2, 0, *(_QWORD *)(a2 + 24));

  return v3;
}

uint64_t MTLToolsGetAssociatedObject()
{
  return 0;
}

void emitDepthStencilDistribution(MTLTelemetryDevice *a1, MTLTelemetryDepthStateDistributionRec *a2, MTLTelemetryStencilStateDistributionRec *a3, MTLTelemetryStencilStateDistributionRec *a4)
{
  unsigned int var0;
  uint64_t v6;
  unsigned int (*var1)[8];
  unsigned int (*v8)[8];
  _DWORD *v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  int *v13;
  unsigned int v14;
  OS_os_log *v15;
  int v16;
  uint64_t v17;
  const char *v18;
  unsigned int v19;
  OS_os_log *v20;
  unsigned int v21;
  OS_os_log *v22;
  unsigned int v23;
  unsigned int v24;
  OS_os_log *v25;
  unsigned int v26;
  unsigned int v27;
  OS_os_log *v28;
  unsigned int v29;
  OS_os_log *v30;
  unsigned int v31;
  unsigned int v32;
  OS_os_log *v33;
  unsigned int v34;
  unsigned int (*v36)[8];
  unsigned int (*v37)[8];
  uint64_t v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  _BYTE v42[10];
  unsigned int v43;
  __int16 v44;
  unsigned int v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  var0 = a2->var0;
  if (a2->var0)
  {
    v6 = 0;
    var1 = a3->var1;
    v8 = a4->var1;
    v9 = (_DWORD *)MEMORY[0x24BDDDAC8];
    while (1)
    {
      v10 = "unknown";
      if ((v6 & 0xFFFFFFF8) == 0)
        v10 = off_24F794958[(int)v6];
      v38 = v6;
      v11 = &a2->var0 + v6;
      v14 = v11[1];
      v13 = (int *)(v11 + 1);
      v12 = v14;
      if (!v14)
        goto LABEL_11;
      if (!*v9)
        goto LABEL_9;
      if (*v9 == 1)
        break;
LABEL_11:
      v17 = 0;
      v36 = v8;
      v37 = var1;
      do
      {
        v18 = "unknown";
        if ((v17 & 0xFFFFFFF8) == 0)
          v18 = off_24F794998[v17];
        v19 = (*var1)[-64];
        if (v19)
        {
          if (*v9)
          {
            if (*v9 != 1)
              goto LABEL_20;
            printf("\n\nFrontFaceStencilFail, compareMode=%s, operation=%s, total=%u, count=%u", v10, v18, var0, v19);
          }
          v20 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
          if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT))
          {
            v21 = (*var1)[-64];
            *(_DWORD *)buf = 136315906;
            v40 = v10;
            v41 = 2080;
            *(_QWORD *)v42 = v18;
            *(_WORD *)&v42[8] = 1024;
            v43 = var0;
            v44 = 1024;
            v45 = v21;
            _os_log_impl(&dword_22CD98000, (os_log_t)v20, OS_LOG_TYPE_DEFAULT, "FrontFaceStencilFail, compareMode=%s, operation=%s, total=%u, count=%u", buf, 0x22u);
          }
        }
LABEL_20:
        if (!*(_DWORD *)var1)
          goto LABEL_26;
        if (*v9)
        {
          if (*v9 != 1)
            goto LABEL_26;
          printf("\n\nFrontFaceDepthFail, compareMode=%s, operation=%s, total=%u, count=%u", v10, v18, var0, *(_DWORD *)var1);
        }
        v22 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
        if (os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_DEFAULT))
        {
          v23 = *(_DWORD *)var1;
          *(_DWORD *)buf = 136315906;
          v40 = v10;
          v41 = 2080;
          *(_QWORD *)v42 = v18;
          *(_WORD *)&v42[8] = 1024;
          v43 = var0;
          v44 = 1024;
          v45 = v23;
          _os_log_impl(&dword_22CD98000, (os_log_t)v22, OS_LOG_TYPE_DEFAULT, "FrontFaceDepthFail, compareMode=%s, operation=%s, total=%u, count=%u", buf, 0x22u);
        }
LABEL_26:
        v24 = (*var1)[64];
        if (!v24)
          goto LABEL_32;
        if (*v9)
        {
          if (*v9 != 1)
            goto LABEL_32;
          printf("\n\nFrontFaceDepthStencilPass, compareMode=%s, operation=%s, total=%u, count=%u", v10, v18, var0, v24);
        }
        v25 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
        if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_DEFAULT))
        {
          v26 = (*var1)[64];
          *(_DWORD *)buf = 136315906;
          v40 = v10;
          v41 = 2080;
          *(_QWORD *)v42 = v18;
          *(_WORD *)&v42[8] = 1024;
          v43 = var0;
          v44 = 1024;
          v45 = v26;
          _os_log_impl(&dword_22CD98000, (os_log_t)v25, OS_LOG_TYPE_DEFAULT, "FrontFaceDepthStencilPass, compareMode=%s, operation=%s, total=%u, count=%u", buf, 0x22u);
        }
LABEL_32:
        v27 = (*v8)[-64];
        if (!v27)
          goto LABEL_38;
        if (*v9)
        {
          if (*v9 != 1)
            goto LABEL_38;
          printf("\n\nBackFaceStencilFail, compareMode=%s, operation=%s, total=%u, count=%u", v10, v18, var0, v27);
        }
        v28 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
        if (os_log_type_enabled((os_log_t)v28, OS_LOG_TYPE_DEFAULT))
        {
          v29 = (*v8)[-64];
          *(_DWORD *)buf = 136315906;
          v40 = v10;
          v41 = 2080;
          *(_QWORD *)v42 = v18;
          *(_WORD *)&v42[8] = 1024;
          v43 = var0;
          v44 = 1024;
          v45 = v29;
          _os_log_impl(&dword_22CD98000, (os_log_t)v28, OS_LOG_TYPE_DEFAULT, "BackFaceStencilFail, compareMode=%s, operation=%s, total=%u, count=%u", buf, 0x22u);
        }
LABEL_38:
        if (!*(_DWORD *)v8)
          goto LABEL_44;
        if (*v9)
        {
          if (*v9 != 1)
            goto LABEL_44;
          printf("\n\nBackFaceDepthFail, compareMode=%s, operation=%s, total=%u, count=%u", v10, v18, var0, *(_DWORD *)v8);
        }
        v30 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
        if (os_log_type_enabled((os_log_t)v30, OS_LOG_TYPE_DEFAULT))
        {
          v31 = *(_DWORD *)v8;
          *(_DWORD *)buf = 136315906;
          v40 = v10;
          v41 = 2080;
          *(_QWORD *)v42 = v18;
          *(_WORD *)&v42[8] = 1024;
          v43 = var0;
          v44 = 1024;
          v45 = v31;
          _os_log_impl(&dword_22CD98000, (os_log_t)v30, OS_LOG_TYPE_DEFAULT, "BackFaceDepthFail, compareMode=%s, operation=%s, total=%u, count=%u", buf, 0x22u);
        }
LABEL_44:
        v32 = (*v8)[64];
        if (!v32)
          goto LABEL_50;
        if (*v9)
        {
          if (*v9 != 1)
            goto LABEL_50;
          printf("\n\nBackFaceDepthStencilPass, compareMode=%s, operation=%s, total=%u, count=%u", v10, v18, var0, v32);
        }
        v33 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
        if (os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_DEFAULT))
        {
          v34 = (*v8)[64];
          *(_DWORD *)buf = 136315906;
          v40 = v10;
          v41 = 2080;
          *(_QWORD *)v42 = v18;
          *(_WORD *)&v42[8] = 1024;
          v43 = var0;
          v44 = 1024;
          v45 = v34;
          _os_log_impl(&dword_22CD98000, (os_log_t)v33, OS_LOG_TYPE_DEFAULT, "BackFaceDepthStencilPass, compareMode=%s, operation=%s, total=%u, count=%u", buf, 0x22u);
        }
LABEL_50:
        ++v17;
        var1 = (unsigned int (*)[8])((char *)var1 + 4);
        v8 = (unsigned int (*)[8])((char *)v8 + 4);
      }
      while (v17 != 8);
      v6 = v38 + 1;
      var1 = v37 + 1;
      v8 = v36 + 1;
      if (v38 == 7)
        return;
    }
    printf("\n\nDepthState, compareMode=%s, total=%u, count=%u", v10, var0, v12);
LABEL_9:
    v15 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
    if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *v13;
      *(_DWORD *)buf = 136315650;
      v40 = v10;
      v41 = 1024;
      *(_DWORD *)v42 = var0;
      *(_WORD *)&v42[4] = 1024;
      *(_DWORD *)&v42[6] = v16;
      _os_log_impl(&dword_22CD98000, (os_log_t)v15, OS_LOG_TYPE_DEFAULT, "DepthState, compareMode=%s, total=%u, count=%u", buf, 0x18u);
    }
    goto LABEL_11;
  }
}

void sub_22CDD0968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD0A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD0C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD3258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD331C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD33E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD34DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD35F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD42D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD43CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD44C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD45C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD46C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD47CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD48A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *buildBaseVector@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;

  result = std::vector<objc_object  {objcproto28MTLIntersectionFunctionTable}*>::vector(a3, a2);
  if (a2)
  {
    v7 = 0;
    do
    {
      result = (_QWORD *)objc_msgSend(*(id *)(a1 + 8 * v7), "baseObject");
      *(_QWORD *)(*a3 + 8 * v7++) = result;
    }
    while (a2 != v7);
  }
  return result;
}

void sub_22CDD4918(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_22CDD49E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD4AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD4C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD4D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD4E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD5028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<objc_object  {objcproto22MTLRenderPipelineState}*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22CDD50A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_22CDD5288(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD5330(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 & 0x7FFFFFFF, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD53D4(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 & 0x7FFFFFFF, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD5478(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 & 0x7FFFFFFF, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD559C(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 & 0x7FFFFFFF, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD56B8(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 & 0x7FFFFFFF, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD57A0(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 & 0x7FFFFFFF, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD5878(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 & 0x7FFFFFFF, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD591C(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 & 0x7FFFFFFF, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD59C0(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD5A78(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD5B20(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD5BC8(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD5C80(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD5D28(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD5DE0(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 & 0x7FFFFFFF, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD5E84(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD5F3C(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 & 0x7FFFFFFF, v1));
  _Unwind_Resume(a1);
}

void sub_22CDD6928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CDD69F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<objc_object  {objcproto13MTLAllocation}*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22CDD6C20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_22CDD72B4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDD7388(_Unwind_Exception *exception_object)
{
  os_unfair_lock_s *v1;

  if (v1)
    os_unfair_lock_unlock(v1);
  _Unwind_Resume(exception_object);
}

void sub_22CDD751C(_Unwind_Exception *exception_object)
{
  os_unfair_lock_s *v1;

  if (v1)
    os_unfair_lock_unlock(v1);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::`anonymous namespace'::BufferUsageTable::addResource(id *a1, void *a2, void *a3, char a4)
{
  void *i;
  unsigned int v9;
  uint64_t result;
  unsigned int v11;

  for (i = a3; ; i = a3)
  {
    v9 = objc_msgSend(i, "bufferIndex");
    if (objc_msgSend(*a1, "length") > v9 >> 2)
      break;
  }
  result = objc_msgSend(a3, "bufferIndex");
  v11 = result;
  if ((_DWORD)result)
  {
    if ((a4 & 4) != 0)
      a4 = a4 & 2 | 1;
    result = objc_msgSend(*a1, "contents");
    *(_BYTE *)(result + (v11 >> 2)) |= a4 << (2 * (v11 & 3));
  }
  return result;
}

void sub_22CDD76B0(_Unwind_Exception *exception_object)
{
  os_unfair_lock_s *v1;

  if (v1)
    os_unfair_lock_unlock(v1);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::`anonymous namespace'::BufferUsageTable::addResource(id *a1, void *a2, char a3)
{
  uint64_t result;
  unsigned int v6;

  result = objc_msgSend(a2, "accelerationStructureHandle");
  v6 = result;
  if ((_DWORD)result)
  {
    if ((a3 & 4) != 0)
      a3 = a3 & 2 | 1;
    result = objc_msgSend(*a1, "contents");
    *(_BYTE *)(result + (v6 >> 2)) |= a3 << (2 * (v6 & 3));
  }
  return result;
}

void sub_22CDD7864(_Unwind_Exception *exception_object)
{
  os_unfair_lock_s *v1;

  if (v1)
    os_unfair_lock_unlock(v1);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::`anonymous namespace'::TextureUsageTable::addResource(id *a1, void *a2, void *a3, char a4)
{
  void *i;
  unsigned int v9;
  uint64_t result;
  unsigned int v11;

  for (i = a3; ; i = a3)
  {
    v9 = objc_msgSend(i, "gpuIdentifier");
    if (objc_msgSend(*a1, "length") > v9 >> 2)
      break;
  }
  result = objc_msgSend(a3, "gpuIdentifier");
  v11 = result;
  if ((_DWORD)result)
  {
    if ((a4 & 4) != 0)
      a4 = a4 & 2 | 1;
    result = objc_msgSend(*a1, "contents");
    *(_BYTE *)(result + (v11 >> 2)) |= a4 << (2 * (v11 & 3));
  }
  return result;
}

void sub_22CDD7DF0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDD7F30(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDD8008(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDD81B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12)
{
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

void sub_22CDD92C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22CDD9B3C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table((uint64_t)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::`anonymous namespace'::ResourceUsageTable::realloc(id *a1, void *a2, unint64_t a3)
{
  void *v6;

  if (objc_msgSend(*a1, "length") <= a3)
  {
    v6 = (void *)objc_msgSend(a2, "newInternalBufferWithLength:options:", a3, 0);
    memcpy((void *)objc_msgSend(v6, "contents"), (const void *)objc_msgSend(*a1, "contents"), objc_msgSend(*a1, "length"));

    *a1 = v6;
  }
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LOBYTE(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_2(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LOBYTE(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_3(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LOBYTE(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_4(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LOBYTE(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_5(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LOBYTE(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_6(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LOBYTE(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_7(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LOBYTE(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_8(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LOBYTE(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_9(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LOBYTE(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_10(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LOBYTE(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_11(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LOBYTE(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_112_GLOBAL__N_114HeapUsageTable5applyERNS0_16BufferUsageTableES3_S3_S3_RNS0_17TextureUsageTableES5_S5_S5__block_invoke_12(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LOBYTE(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_BYTE)v8 << (2 * (v6 & 3));
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

id *`anonymous namespace'::`anonymous namespace'::ResourceUsageTable::~ResourceUsageTable(id *a1)
{

  *a1 = 0;
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,`anonymous namespace'::EncoderResourceUsage>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,`anonymous namespace'::EncoderResourceUsage>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table((uint64_t)v2 + 24);
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F793E70, MEMORY[0x24BEDAB00]);
}

void sub_22CDDA7D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__emplace_unique_impl<unsigned long,MTLLegacySVResidencySet *&>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *inserted;
  char v10;

  v6 = operator new(0x20uLL);
  v7 = *a2;
  v8 = *a3;
  v6[2] = *a2;
  v6[3] = v8;
  *v6 = 0;
  v6[1] = v7;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique(a1, v6);
  if ((v10 & 1) == 0)
    operator delete(v6);
  return inserted;
}

void sub_22CDDA934(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = a2;
  v5 = a2 + 2;
  v4 = a2[2];
  *(v5 - 1) = v4;
  v6 = std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v4, v5);
  if (v6)
    return v6;
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *i;
  unint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  _BOOL8 v12;
  size_t v13;
  unint64_t v14;
  size_t v15;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
      v5 = v3 <= a2 ? a2 % v3 : a2;
    else
      v5 = (v3 - 1) & a2;
    v6 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
    if (v6)
    {
      for (i = (_QWORD *)*v6; i; i = (_QWORD *)*i)
      {
        v8 = i[1];
        if (v8 == a2)
        {
          if (i[2] == *a3)
            return i;
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v3)
              v8 %= v3;
          }
          else
          {
            v8 &= v3 - 1;
          }
          if (v8 != v5)
            break;
        }
      }
    }
  }
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v10 = *(float *)(a1 + 32);
  if (!v3 || (float)(v10 * (float)v3) < v9)
  {
    v11 = 2 * v3;
    v12 = v3 < 3 || (v3 & (v3 - 1)) != 0;
    v13 = v12 | v11;
    v14 = vcvtps_u32_f32(v9 / v10);
    if (v13 <= v14)
      v15 = v14;
    else
      v15 = v13;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v15);
  }
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique_perform[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>>>::__emplace_unique_key_args<unsigned long,unsigned long,MTLLegacySVResidencySet *>(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CDDAFB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLLegacySVResidencySet *>>>::__emplace_unique_key_args<unsigned long,unsigned long,MTLLegacySVResidencySet *&>(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CDDB1D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<_MTLResource *,std::hash<_MTLResource *>,std::equal_to<_MTLResource *>,std::allocator<_MTLResource *>>::__emplace_unique_key_args<_MTLResource *,_MTLResource *>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CDDB428(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<_MTLHeap *,std::hash<_MTLHeap *>,std::equal_to<_MTLHeap *>,std::allocator<_MTLHeap *>>::__emplace_unique_key_args<_MTLHeap *,_MTLHeap *>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CDDB678(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void emitTextureDistribution(void *a1, uint64_t a2)
{
  _QWORD *v2;
  const char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t Name;
  int v8;
  const char *v9;
  const char *v10;
  unsigned int v11;
  unint64_t v12;
  float v13;
  float v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  float v19;
  float v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  float v25;
  float v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  float v31;
  NSObject *v32;
  const char *v33;
  unsigned int v34;
  unint64_t v35;
  float v36;
  float v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  float v41;
  float v42;
  unsigned int v43;
  unsigned int v44;
  float v45;
  float v46;
  unsigned int v47;
  unsigned int v48;
  float v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _QWORD *v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v77;
  uint64_t v78;
  uint8_t buf[4];
  const char *v80;
  __int16 v81;
  const char *v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  double v92;
  __int16 v93;
  unint64_t v94;
  __int16 v95;
  unsigned int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  double v102;
  __int16 v103;
  unint64_t v104;
  __int16 v105;
  unsigned int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  double v112;
  __int16 v113;
  unint64_t v114;
  __int16 v115;
  unsigned int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  double v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  unsigned int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  __int16 v131;
  double v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  unsigned int v136;
  __int16 v137;
  int v138;
  __int16 v139;
  int v140;
  __int16 v141;
  double v142;
  __int16 v143;
  uint64_t v144;
  __int16 v145;
  unsigned int v146;
  __int16 v147;
  int v148;
  __int16 v149;
  int v150;
  __int16 v151;
  double v152;
  __int16 v153;
  uint64_t v154;
  __int16 v155;
  unsigned int v156;
  __int16 v157;
  int v158;
  __int16 v159;
  int v160;
  __int16 v161;
  int v162;
  __int16 v163;
  int v164;
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a2 + 16);
  if (v2)
  {
    v3 = "unknown";
    do
    {
      v4 = 0;
      v5 = v2 + 13;
      v77 = v2;
      do
      {
        v6 = 0;
        v64 = (int)v4;
        v63 = v5;
        v78 = v4;
        do
        {
          Name = MTLPixelFormatGetName();
          v8 = *((_DWORD *)v5 - 20);
          if (!v8)
            goto LABEL_49;
          v9 = (const char *)Name;
          if (*MEMORY[0x24BDDDAC8])
          {
            if (*MEMORY[0x24BDDDAC8] != 1)
              goto LABEL_49;
            v10 = "unknown";
            if (v4 <= 3)
              v10 = off_24F794A48[v64];
            if ((v6 & 0xFFFFFFF8) == 0)
              v3 = off_24F794A68[v6];
            v11 = *((_DWORD *)v5 - 10);
            v12 = *(v5 - 6);
            v13 = 0.0;
            v14 = 0.0;
            if (v11)
              v14 = (float)v12 / (float)v11;
            v15 = *((_DWORD *)v5 - 4);
            v16 = *(v5 - 3);
            if (v15)
              v13 = (float)v16 / (float)v15;
            v17 = *((_DWORD *)v5 + 2);
            v18 = *v5;
            v19 = 0.0;
            v20 = 0.0;
            if (v17)
              v20 = (float)v18 / (float)v17;
            v21 = *((_DWORD *)v5 + 8);
            v22 = v5[3];
            if (v21)
              v19 = (float)v22 / (float)v21;
            v23 = *((_DWORD *)v5 + 14);
            v24 = v5[6];
            v25 = 0.0;
            v26 = 0.0;
            if (v23)
              v26 = (float)v24 / (float)v23;
            v27 = *((_DWORD *)v5 + 20);
            v28 = v5[9];
            if (v27)
              v25 = (float)v28 / (float)v27;
            v29 = *((_DWORD *)v5 + 26);
            v30 = v5[12];
            if (v29)
              v31 = (float)v30 / (float)v29;
            else
              v31 = 0.0;
            printf("\n\nTexture, category=%s, format=%s, type=%s, total=%u, minWidth=%u, maxWidth=%u, avgWidth=%f, totalWidth=%llu, countWidth=%u, minHeight=%u, maxHeight=%u, avgHeight=%f, totalHeight=%llu, countHeight=%u, minDepth=%u, maxDepth=%u, avgDepth=%f, totalDepth=%llu, countDepth=%u, minMipLevels=%u, maxMipLevels=%u, avgMipLevels=%f, totalMipLevels=%llu, countMipLevels=%u, minSamples=%u, maxSamples=%u, avgSamples=%f, totalSamples=%llu, countSamples=%u, minArrayLength=%u, maxArrayLength=%u, avgArrayLength=%f, totalArrayLength=%llu, countArrayLength=%u, minBytesPerRow=%u, maxBytesPerRow=%u, avgBytesPerRow=%f, totalBytesPerRow=%llu, countBytesPerRow=%u, frameBufferCount=%u, renderTargetCount=%u, shaderWriteCount=%u, linearAlignLess64Count=%u", v10, v9, v3, v8, *((_DWORD *)v5 - 14), *((_DWORD *)v5 - 13), v14, v12, v11, *((_DWORD *)v5 - 8),
              *((_DWORD *)v5 - 7),
              v13,
              v16,
              v15,
              *((_DWORD *)v5 - 2),
              *((_DWORD *)v5 - 1),
              v20,
              v18,
              v17,
              *((_DWORD *)v5 + 4),
              *((_DWORD *)v5 + 5),
              v19,
              v22,
              v21,
              *((_DWORD *)v5 + 10),
              *((_DWORD *)v5 + 11),
              v26,
              v24,
              v23,
              *((_DWORD *)v5 + 16),
              *((_DWORD *)v5 + 17),
              v25,
              v28,
              v27,
              *((_DWORD *)v5 + 22),
              *((_DWORD *)v5 + 23),
              v31,
              v30,
              v29,
              *((_DWORD *)v5 - 19),
              *((_DWORD *)v5 - 17),
              *((_DWORD *)v5 - 18),
              *((_DWORD *)v5 - 16));
            v2 = v77;
            v4 = v78;
            v3 = "unknown";
          }
          v32 = objc_msgSend(a1, "telemetryLog");
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            v33 = "unknown";
            if (v4 <= 3)
              v33 = off_24F794A48[v64];
            if ((v6 & 0xFFFFFFF8) == 0)
              v3 = off_24F794A68[v6];
            v34 = *((_DWORD *)v5 - 10);
            v35 = *(v5 - 6);
            v36 = 0.0;
            v37 = 0.0;
            if (v34)
              v37 = (float)v35 / (float)v34;
            v38 = *((_DWORD *)v5 - 4);
            v39 = *(v5 - 3);
            if (v38)
              v36 = (float)v39 / (float)v38;
            v40 = *((_DWORD *)v5 + 2);
            v41 = 0.0;
            v42 = 0.0;
            if (v40)
              v42 = (float)(unint64_t)*v5 / (float)v40;
            v43 = *((_DWORD *)v5 + 8);
            if (v43)
              v41 = (float)(unint64_t)v5[3] / (float)v43;
            v44 = *((_DWORD *)v5 + 14);
            v45 = 0.0;
            v46 = 0.0;
            if (v44)
              v46 = (float)(unint64_t)v5[6] / (float)v44;
            v47 = *((_DWORD *)v5 + 20);
            if (v47)
              v45 = (float)(unint64_t)v5[9] / (float)v47;
            v48 = *((_DWORD *)v5 + 26);
            v75 = *v5;
            v73 = v5[6];
            v74 = v5[3];
            v71 = v5[12];
            v72 = v5[9];
            if (v48)
              v49 = (float)(unint64_t)v5[12] / (float)v48;
            else
              v49 = 0.0;
            v51 = *((_DWORD *)v5 - 14);
            v50 = *((_DWORD *)v5 - 13);
            v52 = *((_DWORD *)v5 - 8);
            v53 = *((_DWORD *)v5 - 7);
            v54 = *((_DWORD *)v5 - 2);
            v55 = *((_DWORD *)v5 - 1);
            v57 = *((_DWORD *)v5 + 4);
            v56 = *((_DWORD *)v5 + 5);
            v58 = *((_DWORD *)v5 + 10);
            v59 = *((_DWORD *)v5 + 11);
            v61 = *((_DWORD *)v5 + 16);
            v60 = *((_DWORD *)v5 + 17);
            v65 = *((_DWORD *)v5 + 22);
            v66 = *((_DWORD *)v5 + 23);
            v62 = *((_DWORD *)v5 - 20);
            v67 = *((_DWORD *)v5 - 19);
            v68 = *((_DWORD *)v5 - 17);
            v69 = *((_DWORD *)v5 - 18);
            v70 = *((_DWORD *)v5 - 16);
            v80 = v33;
            v82 = v9;
            v84 = v3;
            v86 = v62;
            v88 = v51;
            v90 = v50;
            v94 = v35;
            v96 = v34;
            v98 = v52;
            v100 = v53;
            v104 = v39;
            v106 = v38;
            v108 = v54;
            v110 = v55;
            v114 = v75;
            v116 = v40;
            v118 = v57;
            v120 = v56;
            v124 = v74;
            v126 = v43;
            v128 = v58;
            v130 = v59;
            v134 = v73;
            v136 = v44;
            v138 = v61;
            v140 = v60;
            v144 = v72;
            v146 = v47;
            v148 = v65;
            v150 = v66;
            v154 = v71;
            v156 = v48;
            v158 = v67;
            v160 = v68;
            v162 = v69;
            v164 = v70;
            *(_DWORD *)buf = 136325890;
            v81 = 2080;
            v83 = 2080;
            v85 = 1024;
            v87 = 1024;
            v89 = 1024;
            v91 = 2048;
            v92 = v37;
            v93 = 2048;
            v95 = 1024;
            v97 = 1024;
            v99 = 1024;
            v101 = 2048;
            v102 = v36;
            v103 = 2048;
            v105 = 1024;
            v107 = 1024;
            v109 = 1024;
            v111 = 2048;
            v112 = v42;
            v113 = 2048;
            v115 = 1024;
            v117 = 1024;
            v119 = 1024;
            v121 = 2048;
            v122 = v41;
            v123 = 2048;
            v125 = 1024;
            v127 = 1024;
            v129 = 1024;
            v131 = 2048;
            v132 = v46;
            v133 = 2048;
            v135 = 1024;
            v137 = 1024;
            v139 = 1024;
            v141 = 2048;
            v142 = v45;
            v143 = 2048;
            v145 = 1024;
            v147 = 1024;
            v149 = 1024;
            v151 = 2048;
            v152 = v49;
            v153 = 2048;
            v155 = 1024;
            v157 = 1024;
            v159 = 1024;
            v161 = 1024;
            v163 = 1024;
            _os_log_impl(&dword_22CD98000, v32, OS_LOG_TYPE_DEFAULT, "Texture, category=%s, format=%s, type=%s, total=%u, minWidth=%u, maxWidth=%u, avgWidth=%f, totalWidth=%llu, countWidth=%u, minHeight=%u, maxHeight=%u, avgHeight=%f, totalHeight=%llu, countHeight=%u, minDepth=%u, maxDepth=%u, avgDepth=%f, totalDepth=%llu, countDepth=%u, minMipLevels=%u, maxMipLevels=%u, avgMipLevels=%f, totalMipLevels=%llu, countMipLevels=%u, minSamples=%u, maxSamples=%u, avgSamples=%f, totalSamples=%llu, countSamples=%u, minArrayLength=%u, maxArrayLength=%u, avgArrayLength=%f, totalArrayLength=%llu, countArrayLength=%u, minBytesPerRow=%u, maxBytesPerRow=%u, avgBytesPerRow=%f, totalBytesPerRow=%llu, countBytesPerRow=%u, frameBufferCount=%u, renderTargetCount=%u, shaderWriteCount=%u, linearAlignLess64Count=%u", buf, 0x148u);
            v2 = v77;
            v4 = v78;
            v3 = "unknown";
          }
LABEL_49:
          ++v6;
          v5 += 24;
        }
        while (v6 != 8);
        ++v4;
        v5 = v63 + 192;
      }
      while (v4 != 4);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::piecewise_construct_t const&,std::tuple<MTLPixelFormat const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x1818uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  bzero(i + 3, 0x1800uLL);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CDDCFE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *BinaryBuffer::Append<NSString *>(AppendBuffer *a1, char a2, id *a3)
{
  id v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t *v9;
  void **v10;
  char *v11;
  const void *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  id v16;
  const void *v17;
  size_t *p_src;
  AppendBuffer *v19;
  StreamBuffer *p_stream;
  size_t v21;
  char v23;
  uint64_t __src;
  char v25;
  _BYTE v26[2];
  _BYTE v27[6];
  char *v28;
  void **v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v23 = a2;
  v29 = (void **)&v28;
  v26[0] = 1;
  v26[1] = a2;
  v28 = v27;
  v5 = *a3;
  v6 = objc_msgSend(*a3, "lengthOfBytesUsingEncoding:", 4);
  v7 = v6;
  v8 = v28;
  v9 = (uint64_t *)(v28 + 1);
  v10 = v29;
  if (v28 + 1 <= (char *)v29)
  {
    *v28 = 116;
    v10 = v29;
  }
  v11 = v8 + 9;
  if (v11 <= (char *)v10)
    *v9 = v6;
  v28 = v11;
  v12 = (const void *)objc_msgSend(v5, "UTF8String");
  v13 = &v28[v7];
  v14 = (unint64_t)v29;
  if (&v28[v7] <= (char *)v29)
  {
    memcpy(v28, v12, v7);
    v14 = (unint64_t)v29;
  }
  v15 = v13 + 1;
  if ((unint64_t)(v13 + 1) <= v14)
  {
    *v13 = 16;
    v14 = (unint64_t)v29;
  }
  v28 = v13 + 1;
  if ((unint64_t)v15 <= v14)
  {
    v21 = v15 - v26;
    p_src = (size_t *)v26;
    v19 = a1;
    p_stream = &a1->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &v23, 1uLL);
    v16 = *a3;
    __src = objc_msgSend(v16, "lengthOfBytesUsingEncoding:", 4);
    v25 = 116;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v25, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    v17 = (const void *)objc_msgSend(v16, "UTF8String");
    AppendBuffer::WriteBytes(a1, &a1->stream, v17, __src);
    LOBYTE(__src) = 16;
    p_src = (size_t *)&__src;
    v19 = a1;
    p_stream = &a1->stream;
    v21 = 1;
  }
  return AppendBuffer::WriteBytes(v19, p_stream, p_src, v21);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE __src[3];
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  _QWORD v50[3];

  v50[2] = *MEMORY[0x24BDAC8D0];
  v50[1] = v50;
  __src[0] = 1;
  __src[1] = a2;
  v11 = *a3;
  __src[2] = 109;
  v23 = v11;
  v12 = *a4;
  v24 = 100;
  v25 = v12;
  v13 = *a5;
  v26 = 100;
  v27 = v13;
  v14 = *a6;
  v28 = 100;
  v29 = v14;
  v30 = 25664;
  v15 = a7[1];
  v31 = *a7;
  v32 = 100;
  v33 = v15;
  v16 = a7[2];
  v34 = 100;
  v35 = v16;
  v36 = 27984;
  v37 = *a8;
  v17 = *a9;
  v38 = 100;
  v39 = v17;
  v18 = *a10;
  v40 = 100;
  v41 = v18;
  v42 = 25664;
  v19 = a11[1];
  v43 = *a11;
  v44 = 100;
  v45 = v19;
  v20 = a11[2];
  v46 = 100;
  v47 = v20;
  v48 = 4176;
  v50[0] = &v49;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x7CuLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 *v21;
  __int16 *v22;
  uint64_t *p_src;
  AppendBuffer *v24;
  StreamBuffer *p_stream;
  size_t v26;
  char v30;
  uint64_t __src;
  char v32;
  _BYTE v33[3];
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  __int16 v41;
  __int16 *v42;
  __int16 **v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v30 = a2;
  v43 = &v42;
  v33[0] = 1;
  v33[1] = a2;
  v17 = *a3;
  v33[2] = 109;
  v34 = v17;
  v18 = *a4;
  v35 = 100;
  v36 = v18;
  v19 = *a5;
  v37 = 100;
  v38 = v19;
  v20 = *a6;
  v39 = 100;
  v40 = v20;
  v42 = &v41;
  BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>((uint64_t)a1, (uint64_t)v33, a7, a8, a9, a10, a11, a12);
  v21 = (__int16 *)((char *)v42 + 1);
  v22 = (__int16 *)v43;
  if ((char *)v42 + 1 <= (char *)v43)
  {
    *(_BYTE *)v42 = 16;
    v22 = (__int16 *)v43;
  }
  v42 = v21;
  if (v21 <= v22)
  {
    v26 = (char *)v21 - v33;
    p_src = (uint64_t *)v33;
    v24 = a1;
    p_stream = &a1->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &v30, 1uLL);
    __src = *a3;
    v32 = 109;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v32, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    __src = *a4;
    v32 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v32, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    __src = *a5;
    v32 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v32, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    __src = *a6;
    v32 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v32, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>(a1, &a1->stream, a7, a8, a9, a10, a11, a12);
    LOBYTE(__src) = 16;
    p_src = &__src;
    v24 = a1;
    p_stream = &a1->stream;
    v26 = 1;
  }
  return AppendBuffer::WriteBytes(v24, p_stream, p_src, v26);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,MTLSize,objc_object  {objcproto10MTLTexture},unsigned long,unsigned long,objc_object  {objcproto10MTLTexture}*>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE __src[3];
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _BYTE v35[3];
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  _QWORD v55[3];

  v55[2] = *MEMORY[0x24BDAC8D0];
  v55[1] = v55;
  __src[0] = 1;
  __src[1] = a2;
  v11 = *a3;
  __src[2] = 109;
  v24 = v11;
  v12 = *a4;
  v25 = 100;
  v26 = v12;
  v13 = *a5;
  v27 = 100;
  v28 = v13;
  v29 = 25664;
  v14 = a6[1];
  v30 = *a6;
  v31 = 100;
  v32 = v14;
  v15 = a6[2];
  v33 = 100;
  v34 = v15;
  qmemcpy(v35, "P@d", sizeof(v35));
  v16 = a7[1];
  v36 = *a7;
  v37 = 100;
  v38 = v16;
  v17 = a7[2];
  v39 = 100;
  v40 = v17;
  v41 = 27984;
  v42 = *a8;
  v18 = *a9;
  v43 = 100;
  v44 = v18;
  v19 = *a10;
  v45 = 100;
  v46 = v19;
  v47 = 25664;
  v20 = a11[1];
  v48 = *a11;
  v49 = 100;
  v50 = v20;
  v21 = a11[2];
  v51 = 100;
  v52 = v21;
  v53 = 4176;
  v55[0] = &v54;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x90uLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,MTLSize,objc_object  {objcproto10MTLTexture},unsigned long,unsigned long,objc_object  {objcproto10MTLTexture}*,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  uint64_t *p_src;
  AppendBuffer *v23;
  StreamBuffer *p_stream;
  size_t v25;
  char v29;
  uint64_t __src;
  char v31;
  _BYTE v32[3];
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  _BYTE v45[6];
  _BYTE *v46;
  _QWORD *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v29 = a2;
  v47 = &v46;
  v32[0] = 1;
  v32[1] = a2;
  v17 = *a3;
  v32[2] = 109;
  v33 = v17;
  v35 = *a4;
  v37 = *a5;
  v38 = 25664;
  v18 = a6[1];
  v39 = *a6;
  v34 = 100;
  v36 = 100;
  v40 = 100;
  v41 = v18;
  v19 = a6[2];
  v42 = 100;
  v43 = v19;
  v44 = 80;
  v46 = v45;
  BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>((uint64_t)a1, (uint64_t)v32, a7, a8, a9, a10, a11, a12);
  v20 = v46 + 1;
  v21 = v47;
  if (v46 + 1 <= (_BYTE *)v47)
  {
    *v46 = 16;
    v21 = v47;
  }
  v46 = v20;
  if (v20 <= (_BYTE *)v21)
  {
    v25 = v20 - v32;
    p_src = (uint64_t *)v32;
    v23 = a1;
    p_stream = &a1->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &v29, 1uLL);
    __src = *a3;
    v31 = 109;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v31, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    __src = *a4;
    v31 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v31, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    __src = *a5;
    v31 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v31, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLOrigin,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>(a1, &a1->stream, a6, a7, a8, a9, a10, a11, a12);
    LOBYTE(__src) = 16;
    p_src = &__src;
    v23 = a1;
    p_stream = &a1->stream;
    v25 = 1;
  }
  return AppendBuffer::WriteBytes(v23, p_stream, p_src, v25);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  uint64_t *p_src;
  AppendBuffer *v23;
  StreamBuffer *p_stream;
  size_t v25;
  char v28;
  uint64_t __src;
  char v30;
  _BYTE v31[3];
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  _BYTE v37[3];
  _BYTE *v38;
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v28 = a2;
  v39 = &v38;
  v31[0] = 1;
  v31[1] = a2;
  v17 = *a3;
  v31[2] = 109;
  v32 = v17;
  v18 = *a4;
  v33 = 100;
  v34 = v18;
  v19 = *a5;
  v35 = 100;
  v36 = v19;
  v38 = v37;
  BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,MTLOrigin,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>((uint64_t)a1, (uint64_t)v31, a6, a7, a8, a9, a10, a11);
  v20 = v38 + 1;
  v21 = v39;
  if (v38 + 1 <= (_BYTE *)v39)
  {
    *v38 = 16;
    v21 = v39;
  }
  v38 = v20;
  if (v20 <= (_BYTE *)v21)
  {
    v25 = v20 - v31;
    p_src = (uint64_t *)v31;
    v23 = a1;
    p_stream = &a1->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &v28, 1uLL);
    __src = *a3;
    v30 = 109;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v30, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    __src = *a4;
    v30 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v30, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    __src = *a5;
    v30 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v30, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLOrigin,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(a1, &a1->stream, a6, a7, a8, a9, a10, a11);
    LOBYTE(__src) = 16;
    p_src = &__src;
    v23 = a1;
    p_stream = &a1->stream;
    v25 = 1;
  }
  return AppendBuffer::WriteBytes(v23, p_stream, p_src, v25);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE __src[3];
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _BYTE v36[3];
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  _BYTE v53[3];
  _QWORD v54[3];

  v54[2] = *MEMORY[0x24BDAC8D0];
  v54[1] = v54;
  __src[0] = 1;
  __src[1] = a2;
  v12 = *a3;
  __src[2] = 109;
  v25 = v12;
  v13 = *a4;
  v26 = 100;
  v27 = v13;
  v14 = *a5;
  v28 = 100;
  v29 = v14;
  v30 = 25664;
  v15 = a6[1];
  v31 = *a6;
  v32 = 100;
  v33 = v15;
  v16 = a6[2];
  v34 = 100;
  v35 = v16;
  qmemcpy(v36, "P@d", sizeof(v36));
  v17 = a7[1];
  v37 = *a7;
  v38 = 100;
  v39 = v17;
  v18 = a7[2];
  v40 = 100;
  v41 = v18;
  v42 = 27984;
  v43 = *a8;
  v19 = *a9;
  v44 = 100;
  v45 = v19;
  v20 = *a10;
  v46 = 100;
  v47 = v20;
  v21 = *a11;
  v48 = 100;
  v49 = v21;
  v22 = *a12;
  v50 = 100;
  v51 = v22;
  v52 = 16;
  v54[0] = v53;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x85uLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,_NSRange,unsigned char>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, char *a5)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE __src[3];
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  char v16;
  _BYTE v17[6];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v18[1] = v18;
  __src[0] = 1;
  __src[1] = a2;
  v5 = *a3;
  __src[2] = 109;
  v9 = v5;
  v10 = 25664;
  v6 = a4[1];
  v11 = *a4;
  v12 = 100;
  v13 = v6;
  v14 = 24912;
  v15 = *a5;
  v16 = 16;
  v18[0] = v17;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x22uLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,_NSRange,unsigned int>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE __src[3];
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  char v16;
  _BYTE v17[3];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v18[1] = v18;
  __src[0] = 1;
  __src[1] = a2;
  v5 = *a3;
  __src[2] = 109;
  v9 = v5;
  v10 = 25664;
  v6 = a4[1];
  v11 = *a4;
  v12 = 100;
  v13 = v6;
  v14 = 25424;
  v15 = *a5;
  v16 = 16;
  v18[0] = v17;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x25uLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLRegion,void const*,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE __src[3];
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _BYTE v22[3];
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BYTE v28[3];
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _BYTE v34[3];
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  int v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x24BDAC8D0];
  v40[1] = v40;
  __src[0] = 1;
  __src[1] = a2;
  v8 = *a3;
  __src[2] = 109;
  v17 = v8;
  v9 = *a4;
  v18 = 100;
  v19 = v9;
  v10 = *a5;
  v20 = 100;
  v21 = v10;
  qmemcpy(v22, "@@d", sizeof(v22));
  v11 = a6[1];
  v23 = *a6;
  v24 = 100;
  v25 = v11;
  v26 = 100;
  v12 = a6[3];
  v27 = a6[2];
  qmemcpy(v28, "P@d", sizeof(v28));
  v29 = v12;
  v30 = 100;
  v13 = a6[5];
  v31 = a6[4];
  v32 = 100;
  v33 = v13;
  qmemcpy(v34, "PPm", sizeof(v34));
  v35 = *a7;
  v14 = *a8;
  v36 = 100;
  v37 = v14;
  v38 = 16;
  v40[0] = &v39;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x6CuLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLRegion,MTLClearColor>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  _BYTE *v13;
  _QWORD *v14;
  uint64_t *p_src;
  AppendBuffer *v16;
  StreamBuffer *p_stream;
  size_t v18;
  char v20;
  uint64_t __src;
  char v22;
  _BYTE v23[2];
  _BYTE v24[6];
  _BYTE *v25;
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  v26 = &v25;
  v23[0] = 1;
  v23[1] = a2;
  v25 = v24;
  BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLRegion,MTLClearColor>((uint64_t)a1, (uint64_t)v23, a3, a4, a5, a6, a7);
  v13 = v25 + 1;
  v14 = v26;
  if (v25 + 1 <= (_BYTE *)v26)
  {
    *v25 = 16;
    v14 = v26;
  }
  v25 = v13;
  if (v13 <= (_BYTE *)v14)
  {
    v18 = v13 - v23;
    p_src = (uint64_t *)v23;
    v16 = a1;
    p_stream = &a1->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &v20, 1uLL);
    __src = *a3;
    v22 = 109;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v22, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    __src = *a4;
    v22 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v22, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    __src = *a5;
    v22 = 100;
    AppendBuffer::WriteBytes(a1, &a1->stream, &v22, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 8uLL);
    BinaryBuffer::WriteValue<AppendBuffer::StreamBuffer>(a1, &a1->stream, a6);
    BinaryBuffer::WriteValue<AppendBuffer::StreamBuffer>(a1, &a1->stream, a7);
    LOBYTE(__src) = 16;
    p_src = &__src;
    v16 = a1;
    p_stream = &a1->stream;
    v18 = 1;
  }
  return AppendBuffer::WriteBytes(v16, p_stream, p_src, v18);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLRegion,MTLClearColor,MTLPixelFormat>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  char *p_src;
  AppendBuffer *v19;
  StreamBuffer *p_stream;
  size_t v21;
  char v23;
  char __src;
  _BYTE v25[3];
  uint64_t v26;
  _BYTE v27[5];
  _BYTE *v28;
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v23 = a2;
  v29 = &v28;
  v25[0] = 1;
  v25[1] = a2;
  v15 = *a3;
  v25[2] = 109;
  v26 = v15;
  v28 = v27;
  BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,unsigned long,unsigned long,MTLRegion,MTLClearColor,MTLPixelFormat>((uint64_t)a1, (uint64_t)v25, a4, a5, a6, a7, a8);
  v16 = v28 + 1;
  v17 = v29;
  if (v28 + 1 <= (_BYTE *)v29)
  {
    *v28 = 16;
    v17 = v29;
  }
  v28 = v16;
  if (v16 <= (_BYTE *)v17)
  {
    v21 = v16 - v25;
    p_src = v25;
    v19 = a1;
    p_stream = &a1->stream;
  }
  else
  {
    __src = 1;
    AppendBuffer::WriteBytes(a1, &a1->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(a1, &a1->stream, &v23, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLRegion,MTLClearColor,MTLPixelFormat>(a1, &a1->stream, a3, a4, a5, a6, a7, a8);
    __src = 16;
    p_src = &__src;
    v19 = a1;
    p_stream = &a1->stream;
    v21 = 1;
  }
  return AppendBuffer::WriteBytes(v19, p_stream, p_src, v21);
}

void *BinaryBuffer::Append<objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,objc_object  {objcproto10MTLTexture},unsigned long,unsigned long,unsigned long,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE __src[3];
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  _BYTE v36[5];
  _QWORD v37[3];

  v37[2] = *MEMORY[0x24BDAC8D0];
  v37[1] = v37;
  __src[0] = 1;
  __src[1] = a2;
  v10 = *a3;
  __src[2] = 109;
  v20 = v10;
  v11 = *a4;
  v21 = 100;
  v22 = v11;
  v12 = *a5;
  v23 = 100;
  v24 = v12;
  v13 = *a6;
  v25 = 109;
  v26 = v13;
  v14 = *a7;
  v27 = 100;
  v28 = v14;
  v15 = *a8;
  v29 = 100;
  v30 = v15;
  v16 = *a9;
  v31 = 100;
  v32 = v16;
  v17 = *a10;
  v33 = 100;
  v34 = v17;
  v35 = 16;
  v37[0] = v36;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x4BuLL);
}

void *BinaryBuffer::Append<MTLRegion,unsigned long,unsigned long,BOOL,objc_object  {objcproto9MTLBuffer}*,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _BYTE *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE __src[2];
  _BYTE v16[3];
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _BYTE v22[3];
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BYTE v28[3];
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  _BYTE v39[3];
  _QWORD v40[3];

  v40[2] = *MEMORY[0x24BDAC8D0];
  v40[1] = v40;
  __src[0] = 1;
  __src[1] = a2;
  qmemcpy(v16, "@@d", sizeof(v16));
  v8 = a3[1];
  v17 = *a3;
  v19 = v8;
  v9 = a3[3];
  v21 = a3[2];
  qmemcpy(v22, "P@d", sizeof(v22));
  v18 = 100;
  v20 = 100;
  v23 = v9;
  v24 = 100;
  v10 = a3[5];
  v25 = a3[4];
  v26 = 100;
  v27 = v10;
  qmemcpy(v28, "PPd", sizeof(v28));
  v29 = *a4;
  v11 = *a5;
  v30 = 100;
  v31 = v11;
  LOBYTE(v11) = *a6;
  v32 = 97;
  v33 = v11;
  v12 = *a7;
  v34 = 109;
  v35 = v12;
  v13 = *a8;
  v36 = 100;
  v37 = v13;
  v38 = 16;
  v40[0] = v39;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x65uLL);
}

void *BinaryBuffer::Append<MTLSize,MTLSize>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE __src[2];
  __int16 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v17[3];
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int16 v23;
  unint64_t v24;
  char v25;
  __int16 v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v27[1] = v27;
  __src[0] = 1;
  __src[1] = a2;
  v11 = 25664;
  v5 = a4[1];
  v12 = *a4;
  v13 = 100;
  v14 = v5;
  v6 = a4[2];
  v15 = 100;
  v16 = v6;
  qmemcpy(v17, "P@d", sizeof(v17));
  v7 = a5[1];
  v18 = *a5;
  v19 = 100;
  v20 = v7;
  v8 = a5[2];
  v21 = 100;
  v22 = v8;
  v23 = -27568;
  v24 = (unint64_t)*(unsigned int *)(a1 + 32) * a3 / *(unsigned int *)(a1 + 36);
  v25 = 16;
  v27[0] = &v26;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x46uLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,unsigned long,MTLSize>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE __src[3];
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  char v26;
  _BYTE v27[5];
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  v28[1] = v28;
  __src[0] = 1;
  __src[1] = a2;
  v6 = *a4;
  __src[2] = 109;
  v14 = v6;
  v7 = *a5;
  v15 = 100;
  v16 = v7;
  v17 = 25664;
  v8 = a6[1];
  v18 = *a6;
  v19 = 100;
  v20 = v8;
  v9 = a6[2];
  v21 = 100;
  v22 = v9;
  v23 = 80;
  v10 = *(unsigned int *)(a1 + 32);
  v11 = *(unsigned int *)(a1 + 36);
  v24 = -108;
  v25 = v10 * a3 / v11;
  v26 = 16;
  v28[0] = v27;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x3BuLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE __src[3];
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  __int16 v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v18[1] = v18;
  __src[0] = 1;
  __src[1] = a2;
  v5 = *a4;
  __src[2] = 109;
  v11 = v5;
  v6 = *a5;
  v12 = 100;
  v13 = v6;
  v7 = *(unsigned int *)(a1 + 32);
  v8 = *(unsigned int *)(a1 + 36);
  v14 = -108;
  v15 = v7 * a3 / v8;
  v16 = 16;
  v18[0] = &v17;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x1EuLL);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE __src[3];
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  char v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v22[1] = v22;
  __src[0] = 1;
  __src[1] = a2;
  v6 = *a4;
  __src[2] = 109;
  v13 = v6;
  v7 = *a5;
  v14 = 100;
  v15 = v7;
  v8 = *a6;
  v16 = 100;
  v17 = v8;
  v9 = *(unsigned int *)(a1 + 32);
  v10 = *(unsigned int *)(a1 + 36);
  v18 = -108;
  v19 = v9 * a3 / v10;
  v20 = 16;
  v22[0] = &v21;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x27uLL);
}

void *BinaryBuffer::Append<unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE __src[3];
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  __int16 v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v18[1] = v18;
  __src[0] = 1;
  __src[1] = a2;
  v5 = *a4;
  __src[2] = 100;
  v11 = v5;
  v6 = *a5;
  v12 = 100;
  v13 = v6;
  v7 = *(unsigned int *)(a1 + 32);
  v8 = *(unsigned int *)(a1 + 36);
  v14 = -108;
  v15 = v7 * a3 / v8;
  v16 = 16;
  v18[0] = &v17;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x1EuLL);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto9MTLBuffer}* const>,BinaryBuffer::Array<unsigned long const>,_NSRange>(AppendBuffer *this, char a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  AppendBuffer *v10;
  _QWORD *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t *v14;
  int *v15;
  uint64_t v16;
  int *v17;
  _BYTE *v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  int *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  int *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  unint64_t *v34;
  int *v35;
  int *v36;
  uint64_t *p_src;
  StreamBuffer *p_stream;
  size_t v39;
  char v41;
  uint64_t __src;
  char v43;
  _BYTE v44[3];
  _BYTE v45[9];
  int v46;
  int *v47;
  int *v48;
  uint64_t v49;

  v10 = this;
  v49 = *MEMORY[0x24BDAC8D0];
  v41 = a2;
  v11 = &v47;
  v48 = (int *)&v47;
  v44[0] = 1;
  v44[1] = a2;
  v12 = v45;
  v44[2] = 32;
  v47 = (int *)v45;
  v13 = *(_QWORD *)(a4 + 8);
  if (v13)
  {
    v14 = *(uint64_t **)a4;
    v15 = &v46;
    do
    {
      v16 = *v14;
      v17 = v48;
      if (v15 - 2 <= v48)
      {
        *((_BYTE *)v15 - 9) = 109;
        v17 = v48;
      }
      if (v15 <= v17)
        *((_QWORD *)v15 - 1) = v16;
      v47 = v15;
      v15 = (int *)((char *)v15 + 9);
      ++v14;
      --v13;
    }
    while (v13);
    v11 = v48;
    v12 = (char *)v15 - 9;
  }
  if (v12 + 1 <= (_BYTE *)v11)
  {
    *v12 = 48;
    v11 = v48;
  }
  v47 = (int *)(v12 + 1);
  v18 = v12 + 2;
  if (v12 + 2 <= (_BYTE *)v11)
    v12[1] = 32;
  if (a5[1])
  {
    v19 = 0;
    v20 = (int *)(v12 + 11);
    do
    {
      v21 = *(_QWORD *)(*a5 + 8 * v19);
      v22 = v48;
      if (v20 - 2 <= v48)
      {
        *((_BYTE *)v20 - 9) = 100;
        v22 = v48;
      }
      if (v20 <= v22)
        *((_QWORD *)v20 - 1) = v21;
      ++v19;
      v20 = (int *)((char *)v20 + 9);
    }
    while (a5[1] > v19);
    v18 = (char *)v20 - 9;
  }
  v23 = (unint64_t)v48;
  if (v18 + 1 <= (_BYTE *)v48)
  {
    *v18 = 48;
    v23 = (unint64_t)v48;
  }
  if ((unint64_t)(v18 + 2) <= v23)
  {
    v18[1] = 64;
    v23 = (unint64_t)v48;
  }
  v24 = *a6;
  if ((unint64_t)(v18 + 3) <= v23)
  {
    v18[2] = 100;
    v23 = (unint64_t)v48;
  }
  if ((unint64_t)(v18 + 11) <= v23)
  {
    *(_QWORD *)(v18 + 3) = v24;
    v23 = (unint64_t)v48;
  }
  v25 = a6[1];
  if ((unint64_t)(v18 + 12) <= v23)
  {
    v18[11] = 100;
    v23 = (unint64_t)v48;
  }
  if ((unint64_t)(v18 + 20) <= v23)
  {
    *(_QWORD *)(v18 + 12) = v25;
    v23 = (unint64_t)v48;
  }
  if ((unint64_t)(v18 + 21) <= v23)
  {
    v18[20] = 80;
    v23 = (unint64_t)v48;
  }
  v27 = LODWORD(this[1]._vptr$AppendBuffer);
  v26 = HIDWORD(this[1]._vptr$AppendBuffer);
  if ((unint64_t)(v18 + 22) <= v23)
  {
    v18[21] = -108;
    v23 = (unint64_t)v48;
  }
  v28 = v18 + 30;
  if ((unint64_t)(v18 + 30) <= v23)
  {
    *(_QWORD *)(v18 + 22) = v27 * a3 / v26;
    v23 = (unint64_t)v48;
  }
  v29 = (int *)(v18 + 31);
  if ((unint64_t)v29 <= v23)
  {
    *v28 = 16;
    v23 = (unint64_t)v48;
  }
  v47 = v29;
  if ((unint64_t)v29 <= v23)
  {
    v39 = (char *)v29 - v44;
    p_src = (uint64_t *)v44;
    p_stream = &this->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v10, &v10->stream, &v41, 1uLL);
    LOBYTE(__src) = 32;
    AppendBuffer::WriteBytes(v10, &v10->stream, &__src, 1uLL);
    if (*(_QWORD *)(a4 + 8))
    {
      v30 = 0;
      do
      {
        __src = *(_QWORD *)(*(_QWORD *)a4 + 8 * v30);
        v43 = 109;
        AppendBuffer::WriteBytes(v10, &v10->stream, &v43, 1uLL);
        AppendBuffer::WriteBytes(v10, &v10->stream, &__src, 8uLL);
        ++v30;
      }
      while (*(_QWORD *)(a4 + 8) > v30);
    }
    LOBYTE(__src) = 48;
    AppendBuffer::WriteBytes(v10, &v10->stream, &__src, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<unsigned long const>,_NSRange>(v10, &v10->stream, a5, a6);
    v32 = LODWORD(v10[1]._vptr$AppendBuffer);
    v31 = HIDWORD(v10[1]._vptr$AppendBuffer);
    v33 = v47;
    v34 = (unint64_t *)((char *)v47 + 1);
    v35 = v48;
    if ((int *)((char *)v47 + 1) <= v48)
    {
      *(_BYTE *)v47 = -108;
      v35 = v48;
    }
    v36 = (int *)((char *)v33 + 9);
    if (v36 <= v35)
      *v34 = v32 * a3 / v31;
    v47 = v36;
    LOBYTE(__src) = 16;
    p_src = &__src;
    this = v10;
    p_stream = &v10->stream;
    v39 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v39);
}

void *BinaryBuffer::Append<objc_object  {objcproto15MTLSamplerState}*,float,float,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, int *a5, int *a6, uint64_t *a7)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE __src[3];
  uint64_t v15;
  char v16;
  int v17;
  char v18;
  int v19;
  char v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  v26[1] = v26;
  __src[0] = 1;
  __src[1] = a2;
  v7 = *a4;
  __src[2] = 109;
  v15 = v7;
  v8 = *a5;
  v16 = 106;
  v17 = v8;
  v9 = *a6;
  v18 = 106;
  v19 = v9;
  v10 = *a7;
  v20 = 100;
  v21 = v10;
  v11 = *(unsigned int *)(a1 + 32);
  v12 = *(unsigned int *)(a1 + 36);
  v22 = -108;
  v23 = v11 * a3 / v12;
  v24 = 16;
  v26[0] = &v25;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x28uLL);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto15MTLSamplerState}* const>,_NSRange>(AppendBuffer *this, char a2, uint64_t a3, uint64_t **a4, uint64_t *a5)
{
  AppendBuffer *v8;
  int *v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t *v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  int *v21;
  unint64_t v22;
  uint64_t v23;
  int *v24;
  unint64_t *v25;
  int *v26;
  int *v27;
  char *p_src;
  StreamBuffer *p_stream;
  size_t v30;
  char v32;
  char __src;
  _BYTE v34[3];
  _BYTE v35[9];
  int v36;
  int *v37;
  int *v38;
  uint64_t v39;

  v8 = this;
  v39 = *MEMORY[0x24BDAC8D0];
  v32 = a2;
  v9 = (int *)&v37;
  v38 = (int *)&v37;
  v34[0] = 1;
  v34[1] = a2;
  v10 = v35;
  v34[2] = 32;
  v37 = (int *)v35;
  v11 = a4[1];
  if (v11)
  {
    v12 = *a4;
    v13 = &v36;
    do
    {
      v14 = *v12;
      v15 = v38;
      if (v13 - 2 <= v38)
      {
        *((_BYTE *)v13 - 9) = 109;
        v15 = v38;
      }
      if (v13 <= v15)
        *((_QWORD *)v13 - 1) = v14;
      v37 = v13;
      v13 = (int *)((char *)v13 + 9);
      ++v12;
      v11 = (uint64_t *)((char *)v11 - 1);
    }
    while (v11);
    v9 = v38;
    v10 = (char *)v13 - 9;
  }
  if (v10 + 1 <= (_BYTE *)v9)
  {
    *v10 = 48;
    v9 = v38;
  }
  if (v10 + 2 <= (_BYTE *)v9)
  {
    v10[1] = 64;
    v9 = v38;
  }
  v16 = *a5;
  if (v10 + 3 <= (_BYTE *)v9)
  {
    v10[2] = 100;
    v9 = v38;
  }
  if (v10 + 11 <= (_BYTE *)v9)
  {
    *(_QWORD *)(v10 + 3) = v16;
    v9 = v38;
  }
  v17 = a5[1];
  if (v10 + 12 <= (_BYTE *)v9)
  {
    v10[11] = 100;
    v9 = v38;
  }
  if (v10 + 20 <= (_BYTE *)v9)
  {
    *(_QWORD *)(v10 + 12) = v17;
    v9 = v38;
  }
  if (v10 + 21 <= (_BYTE *)v9)
  {
    v10[20] = 80;
    v9 = v38;
  }
  v19 = LODWORD(this[1]._vptr$AppendBuffer);
  v18 = HIDWORD(this[1]._vptr$AppendBuffer);
  if (v10 + 22 <= (_BYTE *)v9)
  {
    v10[21] = -108;
    v9 = v38;
  }
  v20 = v10 + 30;
  if (v10 + 30 <= (_BYTE *)v9)
  {
    *(_QWORD *)(v10 + 22) = v19 * a3 / v18;
    v9 = v38;
  }
  v21 = (int *)(v10 + 31);
  if (v21 <= v9)
  {
    *v20 = 16;
    v9 = v38;
  }
  v37 = v21;
  if (v21 <= v9)
  {
    v30 = (char *)v21 - v34;
    p_src = v34;
    p_stream = &this->stream;
  }
  else
  {
    __src = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v8, &v8->stream, &v32, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto15MTLSamplerState}* const>,_NSRange>(v8, &v8->stream, a4, a5);
    v23 = LODWORD(v8[1]._vptr$AppendBuffer);
    v22 = HIDWORD(v8[1]._vptr$AppendBuffer);
    v24 = v37;
    v25 = (unint64_t *)((char *)v37 + 1);
    v26 = v38;
    if ((int *)((char *)v37 + 1) <= v38)
    {
      *(_BYTE *)v37 = -108;
      v26 = v38;
    }
    v27 = (int *)((char *)v24 + 9);
    if (v27 <= v26)
      *v25 = v23 * a3 / v22;
    v37 = v27;
    __src = 16;
    p_src = &__src;
    this = v8;
    p_stream = &v8->stream;
    v30 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v30);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto15MTLSamplerState}* const>,float const*,float const,_NSRange>(AppendBuffer *this, char a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  AppendBuffer *v12;
  int *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  int *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  unint64_t *v32;
  int *v33;
  int *v34;
  uint64_t *p_src;
  StreamBuffer *p_stream;
  size_t v37;
  char v39;
  uint64_t __src;
  char v41;
  _BYTE v42[3];
  _BYTE v43[9];
  int v44;
  int *v45;
  int *v46;
  uint64_t v47;

  v12 = this;
  v47 = *MEMORY[0x24BDAC8D0];
  v39 = a2;
  v13 = (int *)&v45;
  v46 = (int *)&v45;
  v42[0] = 1;
  v42[1] = a2;
  v14 = v43;
  v42[2] = 32;
  v45 = (int *)v43;
  v15 = *(_QWORD *)(a4 + 8);
  if (v15)
  {
    v16 = *(uint64_t **)a4;
    v17 = &v44;
    do
    {
      v18 = *v16;
      v19 = v46;
      if (v17 - 2 <= v46)
      {
        *((_BYTE *)v17 - 9) = 109;
        v19 = v46;
      }
      if (v17 <= v19)
        *((_QWORD *)v17 - 1) = v18;
      v45 = v17;
      v17 = (int *)((char *)v17 + 9);
      ++v16;
      --v15;
    }
    while (v15);
    v13 = v46;
    v14 = (char *)v17 - 9;
  }
  if (v14 + 1 <= (_BYTE *)v13)
  {
    *v14 = 48;
    v13 = v46;
  }
  v20 = *a5;
  if (v14 + 2 <= (_BYTE *)v13)
  {
    v14[1] = 109;
    v13 = v46;
  }
  if (v14 + 10 <= (_BYTE *)v13)
  {
    *(_QWORD *)(v14 + 2) = v20;
    v13 = v46;
  }
  v45 = (int *)(v14 + 10);
  v21 = *a6;
  if (v14 + 11 <= (_BYTE *)v13)
  {
    v14[10] = 109;
    v13 = v46;
  }
  if (v14 + 19 <= (_BYTE *)v13)
  {
    *(_QWORD *)(v14 + 11) = v21;
    v13 = v46;
  }
  if (v14 + 20 <= (_BYTE *)v13)
  {
    v14[19] = 64;
    v13 = v46;
  }
  v22 = *a7;
  if (v14 + 21 <= (_BYTE *)v13)
  {
    v14[20] = 100;
    v13 = v46;
  }
  if (v14 + 29 <= (_BYTE *)v13)
  {
    *(_QWORD *)(v14 + 21) = v22;
    v13 = v46;
  }
  v23 = a7[1];
  if (v14 + 30 <= (_BYTE *)v13)
  {
    v14[29] = 100;
    v13 = v46;
  }
  if (v14 + 38 <= (_BYTE *)v13)
  {
    *(_QWORD *)(v14 + 30) = v23;
    v13 = v46;
  }
  if (v14 + 39 <= (_BYTE *)v13)
  {
    v14[38] = 80;
    v13 = v46;
  }
  v25 = LODWORD(this[1]._vptr$AppendBuffer);
  v24 = HIDWORD(this[1]._vptr$AppendBuffer);
  if (v14 + 40 <= (_BYTE *)v13)
  {
    v14[39] = -108;
    v13 = v46;
  }
  v26 = v14 + 48;
  if (v14 + 48 <= (_BYTE *)v13)
  {
    *((_QWORD *)v14 + 5) = v25 * a3 / v24;
    v13 = v46;
  }
  v27 = (int *)(v14 + 49);
  if (v27 <= v13)
  {
    *v26 = 16;
    v13 = v46;
  }
  v45 = v27;
  if (v27 <= v13)
  {
    v37 = (char *)v27 - v42;
    p_src = (uint64_t *)v42;
    p_stream = &this->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v12, &v12->stream, &v39, 1uLL);
    LOBYTE(__src) = 32;
    AppendBuffer::WriteBytes(v12, &v12->stream, &__src, 1uLL);
    if (*(_QWORD *)(a4 + 8))
    {
      v28 = 0;
      do
      {
        __src = *(_QWORD *)(*(_QWORD *)a4 + 8 * v28);
        v41 = 109;
        AppendBuffer::WriteBytes(v12, &v12->stream, &v41, 1uLL);
        AppendBuffer::WriteBytes(v12, &v12->stream, &__src, 8uLL);
        ++v28;
      }
      while (*(_QWORD *)(a4 + 8) > v28);
    }
    LOBYTE(__src) = 48;
    AppendBuffer::WriteBytes(v12, &v12->stream, &__src, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,float const*,float const*,_NSRange>(v12, &v12->stream, a5, a6, a7);
    v30 = LODWORD(v12[1]._vptr$AppendBuffer);
    v29 = HIDWORD(v12[1]._vptr$AppendBuffer);
    v31 = v45;
    v32 = (unint64_t *)((char *)v45 + 1);
    v33 = v46;
    if ((int *)((char *)v45 + 1) <= v46)
    {
      *(_BYTE *)v45 = -108;
      v33 = v46;
    }
    v34 = (int *)((char *)v31 + 9);
    if (v34 <= v33)
      *v32 = v30 * a3 / v29;
    v45 = v34;
    LOBYTE(__src) = 16;
    p_src = &__src;
    this = v12;
    p_stream = &v12->stream;
    v37 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v37);
}

void *BinaryBuffer::Append<MTLRegion>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE __src[2];
  _BYTE v11[3];
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _BYTE v17[3];
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int16 v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  v28[1] = v28;
  __src[0] = 1;
  __src[1] = a2;
  qmemcpy(v11, "@@d", sizeof(v11));
  v4 = a4[1];
  v12 = *a4;
  v14 = v4;
  v5 = a4[3];
  v16 = a4[2];
  qmemcpy(v17, "P@d", sizeof(v17));
  v13 = 100;
  v15 = 100;
  v18 = v5;
  v19 = 100;
  v6 = a4[5];
  v20 = a4[4];
  v21 = 100;
  v22 = v6;
  v23 = 20560;
  v7 = *(unsigned int *)(a1 + 32);
  v8 = *(unsigned int *)(a1 + 36);
  v24 = -108;
  v25 = v7 * a3 / v8;
  v26 = 16;
  v28[0] = &v27;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x48uLL);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto7MTLHeap}* const>,unsigned long>(AppendBuffer *this, char a2, uint64_t a3, uint64_t **a4, uint64_t *a5)
{
  AppendBuffer *v8;
  int *v9;
  _BYTE *v10;
  uint64_t *v11;
  uint64_t *v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  int *v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t *v24;
  int *v25;
  int *v26;
  char *p_src;
  StreamBuffer *p_stream;
  size_t v29;
  char v31;
  char __src;
  _BYTE v33[3];
  _BYTE v34[9];
  int v35;
  int *v36;
  int *v37;
  uint64_t v38;

  v8 = this;
  v38 = *MEMORY[0x24BDAC8D0];
  v31 = a2;
  v9 = (int *)&v36;
  v37 = (int *)&v36;
  v33[0] = 1;
  v33[1] = a2;
  v10 = v34;
  v33[2] = 32;
  v36 = (int *)v34;
  v11 = a4[1];
  if (v11)
  {
    v12 = *a4;
    v13 = &v35;
    do
    {
      v14 = *v12;
      v15 = v37;
      if (v13 - 2 <= v37)
      {
        *((_BYTE *)v13 - 9) = 109;
        v15 = v37;
      }
      if (v13 <= v15)
        *((_QWORD *)v13 - 1) = v14;
      v36 = v13;
      v13 = (int *)((char *)v13 + 9);
      ++v12;
      v11 = (uint64_t *)((char *)v11 - 1);
    }
    while (v11);
    v9 = v37;
    v10 = (char *)v13 - 9;
  }
  if (v10 + 1 <= (_BYTE *)v9)
  {
    *v10 = 48;
    v9 = v37;
  }
  v16 = *a5;
  if (v10 + 2 <= (_BYTE *)v9)
  {
    v10[1] = 100;
    v9 = v37;
  }
  if (v10 + 10 <= (_BYTE *)v9)
  {
    *(_QWORD *)(v10 + 2) = v16;
    v9 = v37;
  }
  v18 = LODWORD(this[1]._vptr$AppendBuffer);
  v17 = HIDWORD(this[1]._vptr$AppendBuffer);
  if (v10 + 11 <= (_BYTE *)v9)
  {
    v10[10] = -108;
    v9 = v37;
  }
  v19 = v10 + 19;
  if (v10 + 19 <= (_BYTE *)v9)
  {
    *(_QWORD *)(v10 + 11) = v18 * a3 / v17;
    v9 = v37;
  }
  v20 = (int *)(v10 + 20);
  if (v20 <= v9)
  {
    *v19 = 16;
    v9 = v37;
  }
  v36 = v20;
  if (v20 <= v9)
  {
    v29 = (char *)v20 - v33;
    p_src = v33;
    p_stream = &this->stream;
  }
  else
  {
    __src = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v8, &v8->stream, &v31, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto7MTLHeap}* const>,unsigned long>(v8, &v8->stream, a4, a5);
    v22 = LODWORD(v8[1]._vptr$AppendBuffer);
    v21 = HIDWORD(v8[1]._vptr$AppendBuffer);
    v23 = v36;
    v24 = (unint64_t *)((char *)v36 + 1);
    v25 = v37;
    if ((int *)((char *)v36 + 1) <= v37)
    {
      *(_BYTE *)v36 = -108;
      v25 = v37;
    }
    v26 = (int *)((char *)v23 + 9);
    if (v26 <= v25)
      *v24 = v22 * a3 / v21;
    v36 = v26;
    __src = 16;
    p_src = &__src;
    this = v8;
    p_stream = &v8->stream;
    v29 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v29);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto11MTLResource}* const>,unsigned long,unsigned long>(AppendBuffer *this, char a2, uint64_t a3, uint64_t **a4, uint64_t *a5, uint64_t *a6)
{
  AppendBuffer *v10;
  int *v11;
  _BYTE *v12;
  uint64_t *v13;
  uint64_t *v14;
  int *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  int *v23;
  unint64_t v24;
  uint64_t v25;
  int *v26;
  unint64_t *v27;
  int *v28;
  int *v29;
  char *p_src;
  StreamBuffer *p_stream;
  size_t v32;
  char v34;
  char __src;
  _BYTE v36[3];
  _BYTE v37[9];
  int v38;
  int *v39;
  int *v40;
  uint64_t v41;

  v10 = this;
  v41 = *MEMORY[0x24BDAC8D0];
  v34 = a2;
  v11 = (int *)&v39;
  v40 = (int *)&v39;
  v36[0] = 1;
  v36[1] = a2;
  v12 = v37;
  v36[2] = 32;
  v39 = (int *)v37;
  v13 = a4[1];
  if (v13)
  {
    v14 = *a4;
    v15 = &v38;
    do
    {
      v16 = *v14;
      v17 = v40;
      if (v15 - 2 <= v40)
      {
        *((_BYTE *)v15 - 9) = 109;
        v17 = v40;
      }
      if (v15 <= v17)
        *((_QWORD *)v15 - 1) = v16;
      v39 = v15;
      v15 = (int *)((char *)v15 + 9);
      ++v14;
      v13 = (uint64_t *)((char *)v13 - 1);
    }
    while (v13);
    v11 = v40;
    v12 = (char *)v15 - 9;
  }
  if (v12 + 1 <= (_BYTE *)v11)
  {
    *v12 = 48;
    v11 = v40;
  }
  v18 = *a5;
  if (v12 + 2 <= (_BYTE *)v11)
  {
    v12[1] = 100;
    v11 = v40;
  }
  if (v12 + 10 <= (_BYTE *)v11)
  {
    *(_QWORD *)(v12 + 2) = v18;
    v11 = v40;
  }
  v19 = *a6;
  if (v12 + 11 <= (_BYTE *)v11)
  {
    v12[10] = 100;
    v11 = v40;
  }
  if (v12 + 19 <= (_BYTE *)v11)
  {
    *(_QWORD *)(v12 + 11) = v19;
    v11 = v40;
  }
  v21 = LODWORD(this[1]._vptr$AppendBuffer);
  v20 = HIDWORD(this[1]._vptr$AppendBuffer);
  if (v12 + 20 <= (_BYTE *)v11)
  {
    v12[19] = -108;
    v11 = v40;
  }
  v22 = v12 + 28;
  if (v12 + 28 <= (_BYTE *)v11)
  {
    *(_QWORD *)(v12 + 20) = v21 * a3 / v20;
    v11 = v40;
  }
  v23 = (int *)(v12 + 29);
  if (v23 <= v11)
  {
    *v22 = 16;
    v11 = v40;
  }
  v39 = v23;
  if (v23 <= v11)
  {
    v32 = (char *)v23 - v36;
    p_src = v36;
    p_stream = &this->stream;
  }
  else
  {
    __src = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v10, &v10->stream, &v34, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto11MTLResource}* const>,unsigned long,unsigned long>(v10, &v10->stream, a4, a5, a6);
    v25 = LODWORD(v10[1]._vptr$AppendBuffer);
    v24 = HIDWORD(v10[1]._vptr$AppendBuffer);
    v26 = v39;
    v27 = (unint64_t *)((char *)v39 + 1);
    v28 = v40;
    if ((int *)((char *)v39 + 1) <= v40)
    {
      *(_BYTE *)v39 = -108;
      v28 = v40;
    }
    v29 = (int *)((char *)v26 + 9);
    if (v29 <= v28)
      *v27 = v25 * a3 / v24;
    v39 = v29;
    __src = 16;
    p_src = &__src;
    this = v10;
    p_stream = &v10->stream;
    v32 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v32);
}

void *BinaryBuffer::Append<MTLPrimitiveType,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE __src[3];
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  char v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v22[1] = v22;
  __src[0] = 1;
  __src[1] = a2;
  v6 = *a4;
  __src[2] = 100;
  v13 = v6;
  v7 = *a5;
  v14 = 100;
  v15 = v7;
  v8 = *a6;
  v16 = 100;
  v17 = v8;
  v9 = *(unsigned int *)(a1 + 32);
  v10 = *(unsigned int *)(a1 + 36);
  v18 = -108;
  v19 = v9 * a3 / v10;
  v20 = 16;
  v22[0] = &v21;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x27uLL);
}

void *BinaryBuffer::Append<MTLPrimitiveType,unsigned long,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE __src[3];
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  v26[1] = v26;
  __src[0] = 1;
  __src[1] = a2;
  v7 = *a4;
  __src[2] = 100;
  v15 = v7;
  v8 = *a5;
  v16 = 100;
  v17 = v8;
  v9 = *a6;
  v18 = 100;
  v19 = v9;
  v10 = *a7;
  v20 = 100;
  v21 = v10;
  v11 = *(unsigned int *)(a1 + 32);
  v12 = *(unsigned int *)(a1 + 36);
  v22 = -108;
  v23 = v11 * a3 / v12;
  v24 = 16;
  v26[0] = &v25;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x30uLL);
}

void *BinaryBuffer::Append<MTLPrimitiveType,unsigned long,unsigned long,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE __src[3];
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _BYTE v29[7];
  _QWORD v30[3];

  v30[2] = *MEMORY[0x24BDAC8D0];
  v30[1] = v30;
  __src[0] = 1;
  __src[1] = a2;
  v8 = *a4;
  __src[2] = 100;
  v17 = v8;
  v9 = *a5;
  v18 = 100;
  v19 = v9;
  v10 = *a6;
  v20 = 100;
  v21 = v10;
  v11 = *a7;
  v22 = 100;
  v23 = v11;
  v12 = *a8;
  v24 = 100;
  v25 = v12;
  v13 = *(unsigned int *)(a1 + 32);
  v14 = *(unsigned int *)(a1 + 36);
  v26 = -108;
  v27 = v13 * a3 / v14;
  v28 = 16;
  v30[0] = v29;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x39uLL);
}

void *BinaryBuffer::Append<MTLPrimitiveType,objc_object  {objcproto9MTLBuffer}*,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE __src[3];
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  char v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v22[1] = v22;
  __src[0] = 1;
  __src[1] = a2;
  v6 = *a4;
  __src[2] = 100;
  v13 = v6;
  v7 = *a5;
  v14 = 109;
  v15 = v7;
  v8 = *a6;
  v16 = 100;
  v17 = v8;
  v9 = *(unsigned int *)(a1 + 32);
  v10 = *(unsigned int *)(a1 + 36);
  v18 = -108;
  v19 = v9 * a3 / v10;
  v20 = 16;
  v22[0] = &v21;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x27uLL);
}

void *BinaryBuffer::Append<MTLPrimitiveType,unsigned long,MTLIndexType,objc_object  {objcproto9MTLBuffer}*,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE __src[3];
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _BYTE v29[7];
  _QWORD v30[3];

  v30[2] = *MEMORY[0x24BDAC8D0];
  v30[1] = v30;
  __src[0] = 1;
  __src[1] = a2;
  v8 = *a4;
  __src[2] = 100;
  v17 = v8;
  v9 = *a5;
  v18 = 100;
  v19 = v9;
  v10 = *a6;
  v20 = 100;
  v21 = v10;
  v11 = *a7;
  v22 = 109;
  v23 = v11;
  v12 = *a8;
  v24 = 100;
  v25 = v12;
  v13 = *(unsigned int *)(a1 + 32);
  v14 = *(unsigned int *)(a1 + 36);
  v26 = -108;
  v27 = v13 * a3 / v14;
  v28 = 16;
  v30[0] = v29;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x39uLL);
}

void *BinaryBuffer::Append<MTLPrimitiveType,unsigned long,MTLIndexType,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE __src[3];
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _BYTE v33[6];
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  v34[1] = v34;
  __src[0] = 1;
  __src[1] = a2;
  v9 = *a4;
  __src[2] = 100;
  v19 = v9;
  v10 = *a5;
  v20 = 100;
  v21 = v10;
  v11 = *a6;
  v22 = 100;
  v23 = v11;
  v12 = *a7;
  v24 = 109;
  v25 = v12;
  v13 = *a8;
  v26 = 100;
  v27 = v13;
  v14 = *a9;
  v28 = 100;
  v29 = v14;
  v15 = *(unsigned int *)(a1 + 32);
  v16 = *(unsigned int *)(a1 + 36);
  v30 = -108;
  v31 = v15 * a3 / v16;
  v32 = 16;
  v34[0] = v33;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x42uLL);
}

void *BinaryBuffer::Append<MTLPrimitiveType,unsigned long,MTLIndexType,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE __src[3];
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  int v41;
  _QWORD v42[3];

  v42[2] = *MEMORY[0x24BDAC8D0];
  v42[1] = v42;
  __src[0] = 1;
  __src[1] = a2;
  v11 = *a4;
  __src[2] = 100;
  v23 = v11;
  v12 = *a5;
  v24 = 100;
  v25 = v12;
  v13 = *a6;
  v26 = 100;
  v27 = v13;
  v14 = *a7;
  v28 = 109;
  v29 = v14;
  v15 = *a8;
  v30 = 100;
  v31 = v15;
  v16 = *a9;
  v32 = 100;
  v33 = v16;
  v17 = *a10;
  v34 = 100;
  v35 = v17;
  v18 = *a11;
  v36 = 100;
  v37 = v18;
  v19 = *(unsigned int *)(a1 + 32);
  v20 = *(unsigned int *)(a1 + 36);
  v38 = -108;
  v39 = v19 * a3 / v20;
  v40 = 16;
  v42[0] = &v41;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x54uLL);
}

void *BinaryBuffer::Append<MTLPrimitiveType,MTLIndexType,objc_object  {objcproto9MTLBuffer}*,unsigned long,objc_object  {objcproto9MTLBuffer},unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE __src[3];
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _BYTE v33[6];
  _QWORD v34[3];

  v34[2] = *MEMORY[0x24BDAC8D0];
  v34[1] = v34;
  __src[0] = 1;
  __src[1] = a2;
  v9 = *a4;
  __src[2] = 100;
  v19 = v9;
  v10 = *a5;
  v20 = 100;
  v21 = v10;
  v11 = *a6;
  v22 = 109;
  v23 = v11;
  v12 = *a7;
  v24 = 100;
  v25 = v12;
  v13 = *a8;
  v26 = 109;
  v27 = v13;
  v14 = *a9;
  v28 = 100;
  v29 = v14;
  v15 = *(unsigned int *)(a1 + 32);
  v16 = *(unsigned int *)(a1 + 36);
  v30 = -108;
  v31 = v15 * a3 / v16;
  v32 = 16;
  v34[0] = v33;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x42uLL);
}

void *BinaryBuffer::Append<unsigned long,unsigned long,unsigned long,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE __src[3];
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  _BYTE v37[5];
  _QWORD v38[3];

  v38[2] = *MEMORY[0x24BDAC8D0];
  v38[1] = v38;
  __src[0] = 1;
  __src[1] = a2;
  v10 = *a4;
  __src[2] = 100;
  v21 = v10;
  v11 = *a5;
  v22 = 100;
  v23 = v11;
  v12 = *a6;
  v24 = 100;
  v25 = v12;
  v13 = *a7;
  v26 = 109;
  v27 = v13;
  v14 = *a8;
  v28 = 100;
  v29 = v14;
  v15 = *a9;
  v30 = 100;
  v31 = v15;
  v16 = *a10;
  v32 = 100;
  v33 = v16;
  v17 = *(unsigned int *)(a1 + 32);
  v18 = *(unsigned int *)(a1 + 36);
  v34 = -108;
  v35 = v17 * a3 / v18;
  v36 = 16;
  v38[0] = v37;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x4BuLL);
}

void *BinaryBuffer::Append<unsigned long,unsigned long,unsigned long,objc_object  {objcproto9MTLBuffer}*,unsigned long,objc_object  {objcproto9MTLBuffer},unsigned long,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE __src[3];
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  _BYTE v45[3];
  _QWORD v46[3];

  v46[2] = *MEMORY[0x24BDAC8D0];
  v46[1] = v46;
  __src[0] = 1;
  __src[1] = a2;
  v12 = *a4;
  __src[2] = 100;
  v25 = v12;
  v13 = *a5;
  v26 = 100;
  v27 = v13;
  v14 = *a6;
  v28 = 100;
  v29 = v14;
  v15 = *a7;
  v30 = 109;
  v31 = v15;
  v16 = *a8;
  v32 = 100;
  v33 = v16;
  v17 = *a9;
  v34 = 109;
  v35 = v17;
  v18 = *a10;
  v36 = 100;
  v37 = v18;
  v19 = *a11;
  v38 = 100;
  v39 = v19;
  v20 = *a12;
  v40 = 100;
  v41 = v20;
  v21 = *(unsigned int *)(a1 + 32);
  v22 = *(unsigned int *)(a1 + 36);
  v42 = -108;
  v43 = v21 * a3 / v22;
  v44 = 16;
  v46[0] = v45;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x5DuLL);
}

void *BinaryBuffer::Append<unsigned long,objc_object  {objcproto9MTLBuffer}*,unsigned long,objc_object  {objcproto9MTLBuffer},unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE __src[3];
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _BYTE v29[7];
  _QWORD v30[3];

  v30[2] = *MEMORY[0x24BDAC8D0];
  v30[1] = v30;
  __src[0] = 1;
  __src[1] = a2;
  v8 = *a4;
  __src[2] = 100;
  v17 = v8;
  v9 = *a5;
  v18 = 109;
  v19 = v9;
  v10 = *a6;
  v20 = 100;
  v21 = v10;
  v11 = *a7;
  v22 = 109;
  v23 = v11;
  v12 = *a8;
  v24 = 100;
  v25 = v12;
  v13 = *(unsigned int *)(a1 + 32);
  v14 = *(unsigned int *)(a1 + 36);
  v26 = -108;
  v27 = v13 * a3 / v14;
  v28 = 16;
  v30[0] = v29;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x39uLL);
}

void *BinaryBuffer::Append<unsigned long,objc_object  {objcproto9MTLBuffer}*,unsigned long,objc_object  {objcproto9MTLBuffer},unsigned long,objc_object  {objcproto9MTLBuffer},unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE __src[3];
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  _BYTE v37[5];
  _QWORD v38[3];

  v38[2] = *MEMORY[0x24BDAC8D0];
  v38[1] = v38;
  __src[0] = 1;
  __src[1] = a2;
  v10 = *a4;
  __src[2] = 100;
  v21 = v10;
  v11 = *a5;
  v22 = 109;
  v23 = v11;
  v12 = *a6;
  v24 = 100;
  v25 = v12;
  v13 = *a7;
  v26 = 109;
  v27 = v13;
  v14 = *a8;
  v28 = 100;
  v29 = v14;
  v15 = *a9;
  v30 = 109;
  v31 = v15;
  v16 = *a10;
  v32 = 100;
  v33 = v16;
  v17 = *(unsigned int *)(a1 + 32);
  v18 = *(unsigned int *)(a1 + 36);
  v34 = -108;
  v35 = v17 * a3 / v18;
  v36 = 16;
  v38[0] = v37;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x4BuLL);
}

void *BinaryBuffer::Append<float,float,float,float>(uint64_t a1, char a2, uint64_t a3, int *a4, int *a5, int *a6, int *a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE __src[3];
  int v15;
  char v16;
  int v17;
  char v18;
  int v19;
  char v20;
  int v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  v26[1] = v26;
  __src[0] = 1;
  __src[1] = a2;
  v7 = *a4;
  __src[2] = 106;
  v15 = v7;
  v8 = *a5;
  v16 = 106;
  v17 = v8;
  v9 = *a6;
  v18 = 106;
  v19 = v9;
  v10 = *a7;
  v20 = 106;
  v21 = v10;
  v11 = *(unsigned int *)(a1 + 32);
  v12 = *(unsigned int *)(a1 + 36);
  v22 = -108;
  v23 = v11 * a3 / v12;
  v24 = 16;
  v26[0] = &v25;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x20uLL);
}

void *BinaryBuffer::Append<float,float,float>(uint64_t a1, char a2, uint64_t a3, int *a4, int *a5, int *a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE __src[3];
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  char v18;
  unint64_t v19;
  char v20;
  _BYTE v21[5];
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v22[1] = v22;
  __src[0] = 1;
  __src[1] = a2;
  v6 = *a4;
  __src[2] = 106;
  v13 = v6;
  v7 = *a5;
  v14 = 106;
  v15 = v7;
  v8 = *a6;
  v16 = 106;
  v17 = v8;
  v9 = *(unsigned int *)(a1 + 32);
  v10 = *(unsigned int *)(a1 + 36);
  v18 = -108;
  v19 = v9 * a3 / v10;
  v20 = 16;
  v22[0] = v21;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x1BuLL);
}

void *BinaryBuffer::Append<MTLScissorRect>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE __src[2];
  __int16 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  char v21;
  _BYTE v22[6];
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  v23[1] = v23;
  __src[0] = 1;
  __src[1] = a2;
  v10 = 25664;
  v4 = a4[1];
  v11 = *a4;
  v12 = 100;
  v13 = v4;
  v14 = 100;
  v5 = a4[3];
  v15 = a4[2];
  v16 = 100;
  v17 = v5;
  v18 = 80;
  v6 = *(unsigned int *)(a1 + 32);
  v7 = *(unsigned int *)(a1 + 36);
  v19 = -108;
  v20 = v6 * a3 / v7;
  v21 = 16;
  v23[0] = v22;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x32uLL);
}

void *BinaryBuffer::Append<unsigned int,unsigned int>(uint64_t a1, char a2, uint64_t a3, int *a4, int *a5)
{
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE __src[3];
  int v11;
  char v12;
  int v13;
  char v14;
  unint64_t v15;
  char v16;
  __int16 v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v18[1] = v18;
  __src[0] = 1;
  __src[1] = a2;
  v5 = *a4;
  __src[2] = 99;
  v11 = v5;
  v6 = *a5;
  v12 = 99;
  v13 = v6;
  v7 = *(unsigned int *)(a1 + 32);
  v8 = *(unsigned int *)(a1 + 36);
  v14 = -108;
  v15 = v7 * a3 / v8;
  v16 = 16;
  v18[0] = &v17;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x16uLL);
}

void *BinaryBuffer::Append<MTLViewport>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE __src[2];
  __int16 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int16 v21;
  unint64_t v22;
  char v23;
  int v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  v4 = a4[1];
  v10 = *a4;
  v12 = v4;
  v5 = a4[3];
  v14 = a4[2];
  v16 = v5;
  v6 = a4[5];
  v18 = a4[4];
  v25[1] = v25;
  __src[0] = 1;
  __src[1] = a2;
  v9 = 27456;
  v11 = 107;
  v13 = 107;
  v15 = 107;
  v17 = 107;
  v19 = 107;
  v20 = v6;
  v21 = -27568;
  v22 = (unint64_t)*(unsigned int *)(a1 + 32) * a3 / *(unsigned int *)(a1 + 36);
  v23 = 16;
  v25[0] = &v24;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x44uLL);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<MTLViewport const>,unsigned long>(AppendBuffer *this, char a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  AppendBuffer *v8;
  char **v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t *v31;
  char **v32;
  char *v33;
  uint64_t *p_src;
  StreamBuffer *p_stream;
  size_t v36;
  char v38;
  uint64_t __src;
  char v40;
  _BYTE v41[2];
  char v42;
  _BYTE v43[5];
  _BYTE v44[5];
  char *v45;
  char **v46;
  uint64_t v47;

  v8 = this;
  v47 = *MEMORY[0x24BDAC8D0];
  v38 = a2;
  v9 = &v45;
  v46 = &v45;
  v41[0] = 1;
  v41[1] = a2;
  v45 = &v42;
  v42 = 32;
  v10 = a4[1];
  if (v10)
  {
    v11 = v44;
    v12 = (uint64_t *)(*a4 + 24);
    do
    {
      v13 = (unint64_t)v46;
      if (v11 - 55 <= (char *)v46)
      {
        *(v11 - 56) = 64;
        v13 = (unint64_t)v46;
      }
      v14 = *(v12 - 3);
      if ((unint64_t)(v11 - 54) <= v13)
      {
        *(v11 - 55) = 107;
        v13 = (unint64_t)v46;
      }
      if ((unint64_t)(v11 - 46) <= v13)
      {
        *(_QWORD *)(v11 - 54) = v14;
        v13 = (unint64_t)v46;
      }
      v15 = *(v12 - 2);
      if ((unint64_t)(v11 - 45) <= v13)
      {
        *(v11 - 46) = 107;
        v13 = (unint64_t)v46;
      }
      if ((unint64_t)(v11 - 37) <= v13)
      {
        *(_QWORD *)(v11 - 45) = v15;
        v13 = (unint64_t)v46;
      }
      v16 = *(v12 - 1);
      if ((unint64_t)(v11 - 36) <= v13)
      {
        *(v11 - 37) = 107;
        v13 = (unint64_t)v46;
      }
      if ((unint64_t)(v11 - 28) <= v13)
      {
        *(_QWORD *)(v11 - 36) = v16;
        v13 = (unint64_t)v46;
      }
      v45 = v11 - 28;
      v17 = *v12;
      if ((unint64_t)(v11 - 27) <= v13)
      {
        *(v11 - 28) = 107;
        v13 = (unint64_t)v46;
      }
      if ((unint64_t)(v11 - 19) <= v13)
      {
        *(_QWORD *)(v11 - 27) = v17;
        v13 = (unint64_t)v46;
      }
      v18 = v12[1];
      if ((unint64_t)(v11 - 18) <= v13)
      {
        *(v11 - 19) = 107;
        v13 = (unint64_t)v46;
      }
      if ((unint64_t)(v11 - 10) <= v13)
      {
        *(_QWORD *)(v11 - 18) = v18;
        v13 = (unint64_t)v46;
      }
      v19 = v12[2];
      if ((unint64_t)(v11 - 9) <= v13)
      {
        *(v11 - 10) = 107;
        v13 = (unint64_t)v46;
      }
      if ((unint64_t)(v11 - 1) <= v13)
      {
        *(_QWORD *)(v11 - 9) = v19;
        v13 = (unint64_t)v46;
      }
      if ((unint64_t)v11 <= v13)
        *(v11 - 1) = 80;
      v45 = v11;
      v11 += 56;
      v12 += 6;
      --v10;
    }
    while (v10);
    v9 = v46;
    v20 = v11 - 56;
  }
  else
  {
    v20 = v43;
  }
  if (v20 + 1 <= (char *)v9)
  {
    *v20 = 48;
    v9 = v46;
  }
  v21 = *a5;
  if (v20 + 2 <= (char *)v9)
  {
    v20[1] = 100;
    v9 = v46;
  }
  if (v20 + 10 <= (char *)v9)
  {
    *(_QWORD *)(v20 + 2) = v21;
    v9 = v46;
  }
  v23 = LODWORD(this[1]._vptr$AppendBuffer);
  v22 = HIDWORD(this[1]._vptr$AppendBuffer);
  if (v20 + 11 <= (char *)v9)
  {
    v20[10] = -108;
    v9 = v46;
  }
  v24 = v20 + 19;
  if (v20 + 19 <= (char *)v9)
  {
    *(_QWORD *)(v20 + 11) = v23 * a3 / v22;
    v9 = v46;
  }
  v25 = v20 + 20;
  if (v25 <= (char *)v9)
  {
    *v24 = 16;
    v9 = v46;
  }
  v45 = v25;
  if (v25 <= (char *)v9)
  {
    v36 = v25 - v41;
    p_src = (uint64_t *)v41;
    p_stream = &this->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v8, &v8->stream, &v38, 1uLL);
    LOBYTE(__src) = 32;
    AppendBuffer::WriteBytes(v8, &v8->stream, &__src, 1uLL);
    if (a4[1])
    {
      v26 = 0;
      v27 = 0;
      do
      {
        BinaryBuffer::WriteValue<AppendBuffer::StreamBuffer>(v8, &v8->stream, (uint64_t *)(*a4 + v26));
        ++v27;
        v26 += 48;
      }
      while (a4[1] > v27);
    }
    LOBYTE(__src) = 48;
    AppendBuffer::WriteBytes(v8, &v8->stream, &__src, 1uLL);
    __src = *a5;
    v40 = 100;
    AppendBuffer::WriteBytes(v8, &v8->stream, &v40, 1uLL);
    AppendBuffer::WriteBytes(v8, &v8->stream, &__src, 8uLL);
    v29 = LODWORD(v8[1]._vptr$AppendBuffer);
    v28 = HIDWORD(v8[1]._vptr$AppendBuffer);
    v30 = v45;
    v31 = (unint64_t *)(v45 + 1);
    v32 = v46;
    if (v45 + 1 <= (char *)v46)
    {
      *v45 = -108;
      v32 = v46;
    }
    v33 = v30 + 9;
    if (v33 <= (char *)v32)
      *v31 = v29 * a3 / v28;
    v45 = v33;
    LOBYTE(__src) = 16;
    p_src = &__src;
    this = v8;
    p_stream = &v8->stream;
    v36 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v36);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<MTLScissorRect const>,unsigned long>(AppendBuffer *this, char a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  AppendBuffer *v8;
  _BYTE **v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  unint64_t *v29;
  _BYTE **v30;
  _BYTE *v31;
  uint64_t *p_src;
  StreamBuffer *p_stream;
  size_t v34;
  char v36;
  uint64_t __src;
  char v38;
  _BYTE v39[3];
  _BYTE v40[5];
  _BYTE v41[7];
  _BYTE *v42;
  _BYTE **v43;
  uint64_t v44;

  v8 = this;
  v44 = *MEMORY[0x24BDAC8D0];
  v36 = a2;
  v9 = &v42;
  v43 = &v42;
  v39[0] = 1;
  v39[1] = a2;
  v39[2] = 32;
  v10 = a4[1];
  if (v10)
  {
    v11 = v41;
    v12 = (uint64_t *)(*a4 + 16);
    do
    {
      v13 = (unint64_t)v43;
      if (v11 - 37 <= (_BYTE *)v43)
      {
        *(v11 - 38) = 64;
        v13 = (unint64_t)v43;
      }
      v14 = *(v12 - 2);
      if ((unint64_t)(v11 - 36) <= v13)
      {
        *(v11 - 37) = 100;
        v13 = (unint64_t)v43;
      }
      if ((unint64_t)(v11 - 28) <= v13)
      {
        *(_QWORD *)(v11 - 36) = v14;
        v13 = (unint64_t)v43;
      }
      v42 = v11 - 28;
      v15 = *(v12 - 1);
      if ((unint64_t)(v11 - 27) <= v13)
      {
        *(v11 - 28) = 100;
        v13 = (unint64_t)v43;
      }
      if ((unint64_t)(v11 - 19) <= v13)
      {
        *(_QWORD *)(v11 - 27) = v15;
        v13 = (unint64_t)v43;
      }
      v16 = *v12;
      if ((unint64_t)(v11 - 18) <= v13)
      {
        *(v11 - 19) = 100;
        v13 = (unint64_t)v43;
      }
      if ((unint64_t)(v11 - 10) <= v13)
      {
        *(_QWORD *)(v11 - 18) = v16;
        v13 = (unint64_t)v43;
      }
      v17 = v12[1];
      if ((unint64_t)(v11 - 9) <= v13)
      {
        *(v11 - 10) = 100;
        v13 = (unint64_t)v43;
      }
      if ((unint64_t)(v11 - 1) <= v13)
      {
        *(_QWORD *)(v11 - 9) = v17;
        v13 = (unint64_t)v43;
      }
      if ((unint64_t)v11 <= v13)
        *(v11 - 1) = 80;
      v42 = v11;
      v11 += 38;
      v12 += 4;
      --v10;
    }
    while (v10);
    v9 = v43;
    v18 = v11 - 38;
  }
  else
  {
    v18 = v40;
  }
  if (v18 + 1 <= (_BYTE *)v9)
  {
    *v18 = 48;
    v9 = v43;
  }
  v19 = *a5;
  if (v18 + 2 <= (_BYTE *)v9)
  {
    v18[1] = 100;
    v9 = v43;
  }
  if (v18 + 10 <= (_BYTE *)v9)
  {
    *(_QWORD *)(v18 + 2) = v19;
    v9 = v43;
  }
  v21 = LODWORD(this[1]._vptr$AppendBuffer);
  v20 = HIDWORD(this[1]._vptr$AppendBuffer);
  if (v18 + 11 <= (_BYTE *)v9)
  {
    v18[10] = -108;
    v9 = v43;
  }
  v22 = v18 + 19;
  if (v18 + 19 <= (_BYTE *)v9)
  {
    *(_QWORD *)(v18 + 11) = v21 * a3 / v20;
    v9 = v43;
  }
  v23 = v18 + 20;
  if (v23 <= (_BYTE *)v9)
  {
    *v22 = 16;
    v9 = v43;
  }
  v42 = v23;
  if (v23 <= (_BYTE *)v9)
  {
    v34 = v23 - v39;
    p_src = (uint64_t *)v39;
    p_stream = &this->stream;
  }
  else
  {
    LOBYTE(__src) = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v8, &v8->stream, &v36, 1uLL);
    LOBYTE(__src) = 32;
    AppendBuffer::WriteBytes(v8, &v8->stream, &__src, 1uLL);
    if (a4[1])
    {
      v24 = 0;
      v25 = 0;
      do
      {
        BinaryBuffer::WriteValue<AppendBuffer::StreamBuffer>(v8, &v8->stream, (uint64_t *)(*a4 + v24));
        ++v25;
        v24 += 32;
      }
      while (a4[1] > v25);
    }
    LOBYTE(__src) = 48;
    AppendBuffer::WriteBytes(v8, &v8->stream, &__src, 1uLL);
    __src = *a5;
    v38 = 100;
    AppendBuffer::WriteBytes(v8, &v8->stream, &v38, 1uLL);
    AppendBuffer::WriteBytes(v8, &v8->stream, &__src, 8uLL);
    v27 = LODWORD(v8[1]._vptr$AppendBuffer);
    v26 = HIDWORD(v8[1]._vptr$AppendBuffer);
    v28 = v42;
    v29 = (unint64_t *)(v42 + 1);
    v30 = v43;
    if (v42 + 1 <= (_BYTE *)v43)
    {
      *v42 = -108;
      v30 = v43;
    }
    v31 = v28 + 9;
    if (v31 <= (_BYTE *)v30)
      *v29 = v27 * a3 / v26;
    v42 = v31;
    LOBYTE(__src) = 16;
    p_src = &__src;
    this = v8;
    p_stream = &v8->stream;
    v34 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v34);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto11MTLResource}* const>,unsigned long,unsigned long,unsigned long>(AppendBuffer *this, char a2, uint64_t a3, uint64_t **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  AppendBuffer *v12;
  int *v13;
  _BYTE *v14;
  uint64_t *v15;
  uint64_t *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  int *v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  unint64_t *v30;
  int *v31;
  int *v32;
  char *p_src;
  StreamBuffer *p_stream;
  size_t v35;
  char v37;
  char __src;
  _BYTE v39[3];
  _BYTE v40[9];
  int v41;
  int *v42;
  int *v43;
  uint64_t v44;

  v12 = this;
  v44 = *MEMORY[0x24BDAC8D0];
  v37 = a2;
  v13 = (int *)&v42;
  v43 = (int *)&v42;
  v39[0] = 1;
  v39[1] = a2;
  v14 = v40;
  v39[2] = 32;
  v42 = (int *)v40;
  v15 = a4[1];
  if (v15)
  {
    v16 = *a4;
    v17 = &v41;
    do
    {
      v18 = *v16;
      v19 = v43;
      if (v17 - 2 <= v43)
      {
        *((_BYTE *)v17 - 9) = 109;
        v19 = v43;
      }
      if (v17 <= v19)
        *((_QWORD *)v17 - 1) = v18;
      v42 = v17;
      v17 = (int *)((char *)v17 + 9);
      ++v16;
      v15 = (uint64_t *)((char *)v15 - 1);
    }
    while (v15);
    v13 = v43;
    v14 = (char *)v17 - 9;
  }
  if (v14 + 1 <= (_BYTE *)v13)
  {
    *v14 = 48;
    v13 = v43;
  }
  v20 = *a5;
  if (v14 + 2 <= (_BYTE *)v13)
  {
    v14[1] = 100;
    v13 = v43;
  }
  if (v14 + 10 <= (_BYTE *)v13)
  {
    *(_QWORD *)(v14 + 2) = v20;
    v13 = v43;
  }
  v21 = *a6;
  if (v14 + 11 <= (_BYTE *)v13)
  {
    v14[10] = 100;
    v13 = v43;
  }
  if (v14 + 19 <= (_BYTE *)v13)
  {
    *(_QWORD *)(v14 + 11) = v21;
    v13 = v43;
  }
  v22 = *a7;
  if (v14 + 20 <= (_BYTE *)v13)
  {
    v14[19] = 100;
    v13 = v43;
  }
  if (v14 + 28 <= (_BYTE *)v13)
  {
    *(_QWORD *)(v14 + 20) = v22;
    v13 = v43;
  }
  v24 = LODWORD(this[1]._vptr$AppendBuffer);
  v23 = HIDWORD(this[1]._vptr$AppendBuffer);
  if (v14 + 29 <= (_BYTE *)v13)
  {
    v14[28] = -108;
    v13 = v43;
  }
  v25 = v14 + 37;
  if (v14 + 37 <= (_BYTE *)v13)
  {
    *(_QWORD *)(v14 + 29) = v24 * a3 / v23;
    v13 = v43;
  }
  v26 = (int *)(v14 + 38);
  if (v26 <= v13)
  {
    *v25 = 16;
    v13 = v43;
  }
  v42 = v26;
  if (v26 <= v13)
  {
    v35 = (char *)v26 - v39;
    p_src = v39;
    p_stream = &this->stream;
  }
  else
  {
    __src = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v12, &v12->stream, &v37, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto11MTLResource}* const>,unsigned long,unsigned long,unsigned long>(v12, &v12->stream, a4, a5, a6, a7);
    v28 = LODWORD(v12[1]._vptr$AppendBuffer);
    v27 = HIDWORD(v12[1]._vptr$AppendBuffer);
    v29 = v42;
    v30 = (unint64_t *)((char *)v42 + 1);
    v31 = v43;
    if ((int *)((char *)v42 + 1) <= v43)
    {
      *(_BYTE *)v42 = -108;
      v31 = v43;
    }
    v32 = (int *)((char *)v29 + 9);
    if (v32 <= v31)
      *v30 = v28 * a3 / v27;
    v42 = v32;
    __src = 16;
    p_src = &__src;
    this = v12;
    p_stream = &v12->stream;
    v35 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v35);
}

void *BinaryBuffer::Append<objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE __src[3];
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  v26[1] = v26;
  __src[0] = 1;
  __src[1] = a2;
  v7 = *a4;
  __src[2] = 109;
  v15 = v7;
  v8 = *a5;
  v16 = 100;
  v17 = v8;
  v9 = *a6;
  v18 = 100;
  v19 = v9;
  v10 = *a7;
  v20 = 100;
  v21 = v10;
  v11 = *(unsigned int *)(a1 + 32);
  v12 = *(unsigned int *)(a1 + 36);
  v22 = -108;
  v23 = v11 * a3 / v12;
  v24 = 16;
  v26[0] = &v25;
  return AppendBuffer::WriteBytes((AppendBuffer *)a1, (StreamBuffer *)(a1 + 8), __src, 0x30uLL);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto9MTLBuffer}* const>,BinaryBuffer::Array<unsigned long const>,unsigned long const,_NSRange>(AppendBuffer *this, char a2, uint64_t a3, uint64_t **a4, _QWORD *a5, _QWORD *a6, uint64_t *a7)
{
  AppendBuffer *v12;
  _QWORD *v13;
  _BYTE *v14;
  uint64_t *v15;
  uint64_t *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  _BYTE *v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  int *v24;
  unint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  int *v28;
  uint64_t v29;
  int *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  unint64_t *v41;
  int *v42;
  int *v43;
  char *p_src;
  StreamBuffer *p_stream;
  size_t v46;
  char v48;
  char __src;
  _BYTE v50[3];
  _BYTE v51[9];
  int v52;
  int *v53;
  int *v54;
  uint64_t v55;

  v12 = this;
  v55 = *MEMORY[0x24BDAC8D0];
  v48 = a2;
  v13 = &v53;
  v54 = (int *)&v53;
  v50[0] = 1;
  v50[1] = a2;
  v14 = v51;
  v50[2] = 32;
  v53 = (int *)v51;
  v15 = a4[1];
  if (v15)
  {
    v16 = *a4;
    v17 = &v52;
    do
    {
      v18 = *v16;
      v19 = v54;
      if (v17 - 2 <= v54)
      {
        *((_BYTE *)v17 - 9) = 109;
        v19 = v54;
      }
      if (v17 <= v19)
        *((_QWORD *)v17 - 1) = v18;
      v53 = v17;
      v17 = (int *)((char *)v17 + 9);
      ++v16;
      v15 = (uint64_t *)((char *)v15 - 1);
    }
    while (v15);
    v13 = v54;
    v14 = (char *)v17 - 9;
  }
  if (v14 + 1 <= (_BYTE *)v13)
  {
    *v14 = 48;
    v13 = v54;
  }
  v20 = v14 + 2;
  if (v14 + 2 <= (_BYTE *)v13)
    v14[1] = 32;
  if (a5[1])
  {
    v21 = 0;
    v22 = (int *)(v14 + 11);
    do
    {
      v23 = *(_QWORD *)(*a5 + 8 * v21);
      v24 = v54;
      if (v22 - 2 <= v54)
      {
        *((_BYTE *)v22 - 9) = 100;
        v24 = v54;
      }
      if (v22 <= v24)
        *((_QWORD *)v22 - 1) = v23;
      ++v21;
      v22 = (int *)((char *)v22 + 9);
    }
    while (a5[1] > v21);
    v20 = (char *)v22 - 9;
  }
  v25 = (unint64_t)v54;
  if (v20 + 1 <= (_BYTE *)v54)
  {
    *v20 = 48;
    v25 = (unint64_t)v54;
  }
  v53 = (int *)(v20 + 1);
  v26 = v20 + 2;
  if ((unint64_t)(v20 + 2) <= v25)
    v20[1] = 32;
  if (a6[1])
  {
    v27 = 0;
    v28 = (int *)(v20 + 11);
    do
    {
      v29 = *(_QWORD *)(*a6 + 8 * v27);
      v30 = v54;
      if (v28 - 2 <= v54)
      {
        *((_BYTE *)v28 - 9) = 100;
        v30 = v54;
      }
      if (v28 <= v30)
        *((_QWORD *)v28 - 1) = v29;
      ++v27;
      v28 = (int *)((char *)v28 + 9);
    }
    while (a6[1] > v27);
    v26 = (char *)v28 - 9;
  }
  v31 = (unint64_t)v54;
  if (v26 + 1 <= (_BYTE *)v54)
  {
    *v26 = 48;
    v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 2) <= v31)
  {
    v26[1] = 64;
    v31 = (unint64_t)v54;
  }
  v32 = *a7;
  if ((unint64_t)(v26 + 3) <= v31)
  {
    v26[2] = 100;
    v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 11) <= v31)
  {
    *(_QWORD *)(v26 + 3) = v32;
    v31 = (unint64_t)v54;
  }
  v33 = a7[1];
  if ((unint64_t)(v26 + 12) <= v31)
  {
    v26[11] = 100;
    v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 20) <= v31)
  {
    *(_QWORD *)(v26 + 12) = v33;
    v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 21) <= v31)
  {
    v26[20] = 80;
    v31 = (unint64_t)v54;
  }
  v35 = LODWORD(this[1]._vptr$AppendBuffer);
  v34 = HIDWORD(this[1]._vptr$AppendBuffer);
  if ((unint64_t)(v26 + 22) <= v31)
  {
    v26[21] = -108;
    v31 = (unint64_t)v54;
  }
  v36 = v26 + 30;
  if ((unint64_t)(v26 + 30) <= v31)
  {
    *(_QWORD *)(v26 + 22) = v35 * a3 / v34;
    v31 = (unint64_t)v54;
  }
  v37 = (int *)(v26 + 31);
  if ((unint64_t)v37 <= v31)
  {
    *v36 = 16;
    v31 = (unint64_t)v54;
  }
  v53 = v37;
  if ((unint64_t)v37 <= v31)
  {
    v46 = (char *)v37 - v50;
    p_src = v50;
    p_stream = &this->stream;
  }
  else
  {
    __src = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v12, &v12->stream, &v48, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto9MTLBuffer}* const>,BinaryBuffer::Array<unsigned long const>,unsigned long const,_NSRange>(v12, &v12->stream, a4, a5, a6, a7);
    v39 = LODWORD(v12[1]._vptr$AppendBuffer);
    v38 = HIDWORD(v12[1]._vptr$AppendBuffer);
    v40 = v53;
    v41 = (unint64_t *)((char *)v53 + 1);
    v42 = v54;
    if ((int *)((char *)v53 + 1) <= v54)
    {
      *(_BYTE *)v53 = -108;
      v42 = v54;
    }
    v43 = (int *)((char *)v40 + 9);
    if (v43 <= v42)
      *v41 = v39 * a3 / v38;
    v53 = v43;
    __src = 16;
    p_src = &__src;
    this = v12;
    p_stream = &v12->stream;
    v46 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v46);
}

void *BinaryBuffer::Append<BinaryBuffer::Array<objc_object  {objcproto15MTLSamplerState}* const>,BinaryBuffer::Array<float const>,float const,_NSRange>(AppendBuffer *this, char a2, uint64_t a3, uint64_t **a4, _QWORD *a5, _QWORD *a6, uint64_t *a7)
{
  AppendBuffer *v12;
  _QWORD *v13;
  _BYTE *v14;
  uint64_t *v15;
  uint64_t *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  _BYTE *v20;
  unint64_t v21;
  int *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  int *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  unint64_t *v41;
  int *v42;
  int *v43;
  char *p_src;
  StreamBuffer *p_stream;
  size_t v46;
  char v48;
  char __src;
  _BYTE v50[3];
  _BYTE v51[9];
  int v52;
  int *v53;
  int *v54;
  uint64_t v55;

  v12 = this;
  v55 = *MEMORY[0x24BDAC8D0];
  v48 = a2;
  v13 = &v53;
  v54 = (int *)&v53;
  v50[0] = 1;
  v50[1] = a2;
  v14 = v51;
  v50[2] = 32;
  v53 = (int *)v51;
  v15 = a4[1];
  if (v15)
  {
    v16 = *a4;
    v17 = &v52;
    do
    {
      v18 = *v16;
      v19 = v54;
      if (v17 - 2 <= v54)
      {
        *((_BYTE *)v17 - 9) = 109;
        v19 = v54;
      }
      if (v17 <= v19)
        *((_QWORD *)v17 - 1) = v18;
      v53 = v17;
      v17 = (int *)((char *)v17 + 9);
      ++v16;
      v15 = (uint64_t *)((char *)v15 - 1);
    }
    while (v15);
    v13 = v54;
    v14 = (char *)v17 - 9;
  }
  if (v14 + 1 <= (_BYTE *)v13)
  {
    *v14 = 48;
    v13 = v54;
  }
  v20 = v14 + 2;
  if (v14 + 2 <= (_BYTE *)v13)
    v14[1] = 32;
  if (a5[1])
  {
    v21 = 0;
    v22 = (int *)(v14 + 3);
    do
    {
      v23 = *(_DWORD *)(*a5 + 4 * v21);
      v24 = (unint64_t)v54;
      if (v22 <= v54)
      {
        *((_BYTE *)v22 - 1) = 106;
        v24 = (unint64_t)v54;
      }
      if ((unint64_t)(v22 + 1) <= v24)
        *v22 = v23;
      ++v21;
      v22 = (int *)((char *)v22 + 5);
    }
    while (a5[1] > v21);
    v20 = (char *)v22 - 1;
  }
  v25 = (unint64_t)v54;
  if (v20 + 1 <= (_BYTE *)v54)
  {
    *v20 = 48;
    v25 = (unint64_t)v54;
  }
  v53 = (int *)(v20 + 1);
  v26 = v20 + 2;
  if ((unint64_t)(v20 + 2) <= v25)
    v20[1] = 32;
  if (a6[1])
  {
    v27 = 0;
    v28 = (int *)(v20 + 3);
    do
    {
      v29 = *(_DWORD *)(*a6 + 4 * v27);
      v30 = (unint64_t)v54;
      if (v28 <= v54)
      {
        *((_BYTE *)v28 - 1) = 106;
        v30 = (unint64_t)v54;
      }
      if ((unint64_t)(v28 + 1) <= v30)
        *v28 = v29;
      ++v27;
      v28 = (int *)((char *)v28 + 5);
    }
    while (a6[1] > v27);
    v26 = (char *)v28 - 1;
  }
  v31 = (unint64_t)v54;
  if (v26 + 1 <= (_BYTE *)v54)
  {
    *v26 = 48;
    v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 2) <= v31)
  {
    v26[1] = 64;
    v31 = (unint64_t)v54;
  }
  v32 = *a7;
  if ((unint64_t)(v26 + 3) <= v31)
  {
    v26[2] = 100;
    v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 11) <= v31)
  {
    *(_QWORD *)(v26 + 3) = v32;
    v31 = (unint64_t)v54;
  }
  v33 = a7[1];
  if ((unint64_t)(v26 + 12) <= v31)
  {
    v26[11] = 100;
    v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 20) <= v31)
  {
    *(_QWORD *)(v26 + 12) = v33;
    v31 = (unint64_t)v54;
  }
  if ((unint64_t)(v26 + 21) <= v31)
  {
    v26[20] = 80;
    v31 = (unint64_t)v54;
  }
  v35 = LODWORD(this[1]._vptr$AppendBuffer);
  v34 = HIDWORD(this[1]._vptr$AppendBuffer);
  if ((unint64_t)(v26 + 22) <= v31)
  {
    v26[21] = -108;
    v31 = (unint64_t)v54;
  }
  v36 = v26 + 30;
  if ((unint64_t)(v26 + 30) <= v31)
  {
    *(_QWORD *)(v26 + 22) = v35 * a3 / v34;
    v31 = (unint64_t)v54;
  }
  v37 = (int *)(v26 + 31);
  if ((unint64_t)v37 <= v31)
  {
    *v36 = 16;
    v31 = (unint64_t)v54;
  }
  v53 = v37;
  if ((unint64_t)v37 <= v31)
  {
    v46 = (char *)v37 - v50;
    p_src = v50;
    p_stream = &this->stream;
  }
  else
  {
    __src = 1;
    AppendBuffer::WriteBytes(this, &this->stream, &__src, 1uLL);
    AppendBuffer::WriteBytes(v12, &v12->stream, &v48, 1uLL);
    BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto15MTLSamplerState}* const>,BinaryBuffer::Array<float const>,float const,_NSRange>(v12, &v12->stream, a4, a5, a6, a7);
    v39 = LODWORD(v12[1]._vptr$AppendBuffer);
    v38 = HIDWORD(v12[1]._vptr$AppendBuffer);
    v40 = v53;
    v41 = (unint64_t *)((char *)v53 + 1);
    v42 = v54;
    if ((int *)((char *)v53 + 1) <= v54)
    {
      *(_BYTE *)v53 = -108;
      v42 = v54;
    }
    v43 = (int *)((char *)v40 + 9);
    if (v43 <= v42)
      *v41 = v39 * a3 / v38;
    v53 = v43;
    __src = 16;
    p_src = &__src;
    this = v12;
    p_stream = &v12->stream;
    v46 = 1;
  }
  return AppendBuffer::WriteBytes(this, p_stream, p_src, v46);
}

void *BinaryBuffer::Append<MTLSparseTextureMappingMode,MTLRegion,unsigned long,unsigned long>(AppendBuffer *a1, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __src[3];
  uint64_t v13;
  _BYTE v14[3];
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _BYTE v20[3];
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _BYTE v26[3];
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  _BYTE v31[6];
  _QWORD v32[3];

  v32[2] = *MEMORY[0x24BDAC8D0];
  v32[1] = v32;
  __src[0] = 1;
  __src[1] = a2;
  v6 = *a3;
  __src[2] = 100;
  v13 = v6;
  qmemcpy(v14, "@@d", sizeof(v14));
  v7 = a4[1];
  v15 = *a4;
  v16 = 100;
  v17 = v7;
  v18 = 100;
  v8 = a4[3];
  v19 = a4[2];
  qmemcpy(v20, "P@d", sizeof(v20));
  v21 = v8;
  v22 = 100;
  v9 = a4[5];
  v23 = a4[4];
  v24 = 100;
  v25 = v9;
  qmemcpy(v26, "PPd", sizeof(v26));
  v27 = *a5;
  v10 = *a6;
  v28 = 100;
  v29 = v10;
  v30 = 16;
  v32[0] = v31;
  return AppendBuffer::WriteBytes(a1, &a1->stream, __src, 0x5AuLL);
}

void *StringBuffer::Append<char [12],char [6],char [2]>(AppendBuffer *a1, char *__s, const char *a3, const char *a4)
{
  StreamBuffer *p_stream;
  size_t v9;
  size_t v10;
  size_t v11;

  p_stream = &a1->stream;
  v9 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v9);
  v10 = strlen(a3);
  AppendBuffer::WriteBytes(a1, p_stream, a3, v10);
  v11 = strlen(a4);
  return AppendBuffer::WriteBytes(a1, p_stream, a4, v11);
}

void *StringBuffer::Append<char [12],void const*,char [2]>(AppendBuffer *a1, char *__s, const void **a3, const char *a4)
{
  StreamBuffer *p_stream;
  size_t v9;
  int v10;
  size_t v11;
  char __str[32];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  p_stream = &a1->stream;
  v9 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v9);
  v10 = snprintf(__str, 0x20uLL, "%p", *a3);
  AppendBuffer::WriteBytes(a1, p_stream, __str, v10);
  v11 = strlen(a4);
  return AppendBuffer::WriteBytes(a1, p_stream, a4, v11);
}

void *StringBuffer::Append<char [10],NSString *,char [2]>(AppendBuffer *a1, char *__s, id *a3, const char *a4)
{
  StreamBuffer *p_stream;
  size_t v9;
  size_t v10;

  p_stream = &a1->stream;
  v9 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v9);
  AppendBuffer::WriteBytes(a1, p_stream, (const void *)objc_msgSend(*a3, "UTF8String"), objc_msgSend(*a3, "lengthOfBytesUsingEncoding:", 4));
  v10 = strlen(a4);
  return AppendBuffer::WriteBytes(a1, p_stream, a4, v10);
}

void *StringBuffer::Append<char [2],NSString const*,char [3],unsigned long>(AppendBuffer *a1, char *__s, id *a3, const char *a4, _QWORD *a5)
{
  StreamBuffer *p_stream;
  size_t v11;
  size_t v12;
  int v13;
  char __str[32];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  p_stream = &a1->stream;
  v11 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v11);
  AppendBuffer::WriteBytes(a1, p_stream, (const void *)objc_msgSend(*a3, "UTF8String"), objc_msgSend(*a3, "lengthOfBytesUsingEncoding:", 4));
  v12 = strlen(a4);
  AppendBuffer::WriteBytes(a1, p_stream, a4, v12);
  v13 = snprintf(__str, 0x20uLL, "%llu", *a5);
  return AppendBuffer::WriteBytes(a1, p_stream, __str, v13);
}

void *StringBuffer::Append<char const*,char [14],char const*,char [2]>(AppendBuffer *a1, const char **a2, const char *a3, const char **a4, const char *a5)
{
  StreamBuffer *p_stream;
  const char *v10;
  size_t v11;
  size_t v12;
  const char *v13;
  size_t v14;
  size_t v15;

  p_stream = &a1->stream;
  v10 = *a2;
  v11 = strlen(*a2);
  AppendBuffer::WriteBytes(a1, p_stream, v10, v11);
  v12 = strlen(a3);
  AppendBuffer::WriteBytes(a1, p_stream, a3, v12);
  v13 = *a4;
  v14 = strlen(v13);
  AppendBuffer::WriteBytes(a1, p_stream, v13, v14);
  v15 = strlen(a5);
  return AppendBuffer::WriteBytes(a1, p_stream, a5, v15);
}

void *StringBuffer::Append<char [10],unsigned long long>(AppendBuffer *a1, char *__s, _QWORD *a3)
{
  StreamBuffer *p_stream;
  size_t v7;
  int v8;
  char __str[32];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  p_stream = &a1->stream;
  v7 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v7);
  v8 = snprintf(__str, 0x20uLL, "%llu", *a3);
  return AppendBuffer::WriteBytes(a1, p_stream, __str, v8);
}

void *StringBuffer::Append<char [14],NSData *,char [2]>(AppendBuffer *a1, char *__s, id *a3, const char *a4)
{
  StreamBuffer *p_stream;
  size_t v9;
  size_t v10;

  p_stream = &a1->stream;
  v9 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v9);
  AppendBuffer::WriteBytes(a1, p_stream, (const void *)objc_msgSend(*a3, "bytes"), objc_msgSend(*a3, "length"));
  v10 = strlen(a4);
  return AppendBuffer::WriteBytes(a1, p_stream, a4, v10);
}

void *StringBuffer::Append<char [24],unsigned long,char [11],unsigned long,char [2]>(AppendBuffer *a1, char *__s, _QWORD *a3, const char *a4, _QWORD *a5, const char *a6)
{
  StreamBuffer *p_stream;
  size_t v13;
  int v14;
  size_t v15;
  int v16;
  size_t v17;
  char __str[32];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  p_stream = &a1->stream;
  v13 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v13);
  v14 = snprintf(__str, 0x20uLL, "%llu", *a3);
  AppendBuffer::WriteBytes(a1, p_stream, __str, v14);
  v15 = strlen(a4);
  AppendBuffer::WriteBytes(a1, p_stream, a4, v15);
  v16 = snprintf(__str, 0x20uLL, "%llu", *a5);
  AppendBuffer::WriteBytes(a1, p_stream, __str, v16);
  v17 = strlen(a6);
  return AppendBuffer::WriteBytes(a1, p_stream, a6, v17);
}

void *StringBuffer::Append<char [24],unsigned long long,char [14]>(AppendBuffer *a1, char *__s, _QWORD *a3, const char *a4)
{
  StreamBuffer *p_stream;
  size_t v9;
  int v10;
  size_t v11;
  char __str[32];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  p_stream = &a1->stream;
  v9 = strlen(__s);
  AppendBuffer::WriteBytes(a1, p_stream, __s, v9);
  v10 = snprintf(__str, 0x20uLL, "%llu", *a3);
  AppendBuffer::WriteBytes(a1, p_stream, __str, v10);
  v11 = strlen(a4);
  return AppendBuffer::WriteBytes(a1, p_stream, a4, v11);
}

void *StringBuffer::Append<char const*,char [10],NSString *,char [3]>(AppendBuffer *a1, const char **a2, const char *a3, id *a4, const char *a5)
{
  StreamBuffer *p_stream;
  const char *v10;
  size_t v11;
  size_t v12;
  size_t v13;

  p_stream = &a1->stream;
  v10 = *a2;
  v11 = strlen(*a2);
  AppendBuffer::WriteBytes(a1, p_stream, v10, v11);
  v12 = strlen(a3);
  AppendBuffer::WriteBytes(a1, p_stream, a3, v12);
  AppendBuffer::WriteBytes(a1, p_stream, (const void *)objc_msgSend(*a4, "UTF8String"), objc_msgSend(*a4, "lengthOfBytesUsingEncoding:", 4));
  v13 = strlen(a5);
  return AppendBuffer::WriteBytes(a1, p_stream, a5, v13);
}

uint64_t AppendBuffer::Flush(AppendBuffer *this)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytesNoCopy:length:freeWhenDone:", this->stream.bytes, this->stream.pWrite - this->stream.bytes, 1);
  this->stream.pWrite = 0;
  this->stream.pEnd = 0;
  this->stream.bytes = 0;
  return result;
}

uint64_t AppendBuffer::GetCurrentOffset(AppendBuffer *this)
{
  return this->stream.pWrite - this->stream.bytes;
}

void *AppendBuffer::WriteBytes(AppendBuffer *this, const void *__src, size_t __n)
{
  return AppendBuffer::WriteBytes(this, &this->stream, __src, __n);
}

uint64_t AppendBuffer::FlushToBase64(AppendBuffer *this, BOOL *a2, unint64_t *a3)
{
  void *v5;
  void *v6;
  size_t v7;
  BOOL v8;
  BOOL v9;
  void *v10;
  uint64_t v11;

  v5 = (void *)(*((uint64_t (**)(AppendBuffer *))this->_vptr$AppendBuffer + 2))(this);
  v6 = (void *)objc_msgSend(MEMORY[0x24BDBCEC8], "dataWithLength:", objc_msgSend(v5, "length"));
  v7 = compression_encode_buffer((uint8_t *)objc_msgSend(v6, "bytes"), objc_msgSend(v6, "length"), (const uint8_t *)objc_msgSend(v5, "bytes"), objc_msgSend(v5, "length"), 0, COMPRESSION_LZ4_RAW);
  objc_msgSend(v6, "setLength:", v7);
  v8 = v7 == 0;
  v9 = v7 != 0;
  if (v8)
    v10 = v5;
  else
    v10 = v6;
  v11 = objc_msgSend(v10, "base64EncodedDataWithOptions:", 0);
  *a2 = v9;
  *a3 = objc_msgSend(v5, "length");
  return v11;
}

void *AppendBuffer::WriteBytes(AppendBuffer *this, StreamBuffer *a2, const void *__src, size_t __n)
{
  char *pEnd;
  char *pWrite;
  char *bytes;
  BOOL v10;
  int64_t v11;
  size_t v12;
  size_t v13;
  char *v14;
  void *result;

  pWrite = a2->pWrite;
  pEnd = a2->pEnd;
  bytes = a2->bytes;
  if (a2->bytes)
    v10 = &pWrite[__n] > pEnd;
  else
    v10 = 1;
  if (v10)
  {
    v11 = pWrite - bytes;
    v12 = pEnd - bytes;
    if (v12 <= __n)
      v12 = __n;
    v13 = (*MEMORY[0x24BDB03C8] + 2 * v12 - 1) & -*MEMORY[0x24BDB03C8];
    v14 = (char *)malloc_type_realloc(bytes, v13, 0xA3CEF07CuLL);
    a2->bytes = v14;
    pWrite = &v14[v11];
    a2->pEnd = &v14[v13];
  }
  result = memcpy(pWrite, __src, __n);
  a2->pWrite = &pWrite[__n];
  return result;
}

void BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = *(_QWORD *)(a2 + 1024);
  v9 = (_BYTE *)(v8 + 1);
  v10 = *(_QWORD *)(a2 + 1032);
  if (v8 + 1 <= v10)
  {
    *(_BYTE *)v8 = 64;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  *(_QWORD *)(a2 + 1024) = v9;
  v11 = *a3;
  if (v8 + 2 <= v10)
  {
    *v9 = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 10 <= v10)
  {
    *(_QWORD *)(v8 + 2) = v11;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v12 = a3[1];
  if (v8 + 11 <= v10)
  {
    *(_BYTE *)(v8 + 10) = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 19 <= v10)
  {
    *(_QWORD *)(v8 + 11) = v12;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v13 = a3[2];
  if (v8 + 20 <= v10)
  {
    *(_BYTE *)(v8 + 19) = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 28 <= v10)
  {
    *(_QWORD *)(v8 + 20) = v13;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v14 = (_BYTE *)(v8 + 29);
  if (v8 + 29 <= v10)
  {
    *(_BYTE *)(v8 + 28) = 80;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  *(_QWORD *)(a2 + 1024) = v14;
  v15 = *a4;
  if (v8 + 30 <= v10)
  {
    *v14 = 109;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 38 <= v10)
  {
    *(_QWORD *)(v8 + 30) = v15;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v16 = *a5;
  if (v8 + 39 <= v10)
  {
    *(_BYTE *)(v8 + 38) = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 47 <= v10)
  {
    *(_QWORD *)(v8 + 39) = v16;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v17 = *a6;
  if (v8 + 48 <= v10)
  {
    *(_BYTE *)(v8 + 47) = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 56 <= v10)
  {
    *(_QWORD *)(v8 + 48) = v17;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v18 = (_BYTE *)(v8 + 57);
  if (v8 + 57 <= v10)
  {
    *(_BYTE *)(v8 + 56) = 64;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  *(_QWORD *)(a2 + 1024) = v18;
  v19 = *a7;
  if (v8 + 58 <= v10)
  {
    *v18 = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 66 <= v10)
  {
    *(_QWORD *)(v8 + 58) = v19;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v20 = a7[1];
  if (v8 + 67 <= v10)
  {
    *(_BYTE *)(v8 + 66) = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 75 <= v10)
  {
    *(_QWORD *)(v8 + 67) = v20;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v21 = a7[2];
  if (v8 + 76 <= v10)
  {
    *(_BYTE *)(v8 + 75) = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 84 <= v10)
  {
    *(_QWORD *)(v8 + 76) = v21;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 85 <= v10)
  {
    *(_BYTE *)(v8 + 84) = 80;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v22 = *a8;
  v23 = (_QWORD *)(v8 + 86);
  if (v8 + 86 <= v10)
  {
    *(_BYTE *)(v8 + 85) = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v24 = v8 + 94;
  if (v24 <= v10)
    *v23 = v22;
  *(_QWORD *)(a2 + 1024) = v24;
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v17;
  char __src;

  LOBYTE(v17) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v17, 1uLL);
  v17 = *a3;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  v17 = a3[1];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  v17 = a3[2];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  LOBYTE(v17) = 80;
  AppendBuffer::WriteBytes(a1, a2, &v17, 1uLL);
  v17 = *a4;
  __src = 109;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  v17 = *a5;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  v17 = *a6;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  return BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLOrigin,unsigned long>(a1, a2, a7, a8);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLOrigin,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9;
  char __src;

  LOBYTE(v9) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v9, 1uLL);
  v9 = *a3;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v9, 8uLL);
  v9 = a3[1];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v9, 8uLL);
  v9 = a3[2];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v9, 8uLL);
  LOBYTE(v9) = 80;
  AppendBuffer::WriteBytes(a1, a2, &v9, 1uLL);
  v9 = *a4;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  return AppendBuffer::WriteBytes(a1, a2, &v9, 8uLL);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLOrigin,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v18;
  char __src;

  LOBYTE(v18) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v18, 1uLL);
  v18 = *a3;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v18, 8uLL);
  v18 = a3[1];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v18, 8uLL);
  v18 = a3[2];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v18, 8uLL);
  LOBYTE(v18) = 80;
  AppendBuffer::WriteBytes(a1, a2, &v18, 1uLL);
  return BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLSize,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLOrigin,unsigned long>(a1, a2, a4, a5, a6, a7, a8, a9);
}

void BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,MTLOrigin,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = *(_QWORD *)(a2 + 1024);
  v9 = (_BYTE *)(v8 + 1);
  v10 = *(_QWORD *)(a2 + 1032);
  if (v8 + 1 <= v10)
  {
    *(_BYTE *)v8 = 64;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  *(_QWORD *)(a2 + 1024) = v9;
  v11 = *a3;
  if (v8 + 2 <= v10)
  {
    *v9 = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 10 <= v10)
  {
    *(_QWORD *)(v8 + 2) = v11;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v12 = a3[1];
  if (v8 + 11 <= v10)
  {
    *(_BYTE *)(v8 + 10) = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 19 <= v10)
  {
    *(_QWORD *)(v8 + 11) = v12;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v13 = a3[2];
  if (v8 + 20 <= v10)
  {
    *(_BYTE *)(v8 + 19) = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 28 <= v10)
  {
    *(_QWORD *)(v8 + 20) = v13;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 29 <= v10)
  {
    *(_BYTE *)(v8 + 28) = 80;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v14 = (_BYTE *)(v8 + 30);
  if (v8 + 30 <= v10)
  {
    *(_BYTE *)(v8 + 29) = 64;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  *(_QWORD *)(a2 + 1024) = v14;
  v15 = *a4;
  if (v8 + 31 <= v10)
  {
    *v14 = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 39 <= v10)
  {
    *(_QWORD *)(v8 + 31) = v15;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v16 = a4[1];
  if (v8 + 40 <= v10)
  {
    *(_BYTE *)(v8 + 39) = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 48 <= v10)
  {
    *(_QWORD *)(v8 + 40) = v16;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v17 = a4[2];
  if (v8 + 49 <= v10)
  {
    *(_BYTE *)(v8 + 48) = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 57 <= v10)
  {
    *(_QWORD *)(v8 + 49) = v17;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v18 = (_BYTE *)(v8 + 58);
  if (v8 + 58 <= v10)
  {
    *(_BYTE *)(v8 + 57) = 80;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  *(_QWORD *)(a2 + 1024) = v18;
  v19 = *a5;
  if (v8 + 59 <= v10)
  {
    *v18 = 109;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 67 <= v10)
  {
    *(_QWORD *)(v8 + 59) = v19;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v20 = *a6;
  if (v8 + 68 <= v10)
  {
    *(_BYTE *)(v8 + 67) = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 76 <= v10)
  {
    *(_QWORD *)(v8 + 68) = v20;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v21 = *a7;
  if (v8 + 77 <= v10)
  {
    *(_BYTE *)(v8 + 76) = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  if (v8 + 85 <= v10)
  {
    *(_QWORD *)(v8 + 77) = v21;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v22 = *a8;
  v23 = (_QWORD *)(v8 + 86);
  if (v8 + 86 <= v10)
  {
    *(_BYTE *)(v8 + 85) = 100;
    v10 = *(_QWORD *)(a2 + 1032);
  }
  v24 = v8 + 94;
  if (v24 <= v10)
    *v23 = v22;
  *(_QWORD *)(a2 + 1024) = v24;
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLOrigin,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v17;
  char __src;

  LOBYTE(v17) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v17, 1uLL);
  v17 = *a3;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  v17 = a3[1];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  v17 = a3[2];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v17, 8uLL);
  LOBYTE(v17) = 80;
  AppendBuffer::WriteBytes(a1, a2, &v17, 1uLL);
  return BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(a1, a2, a4, a5, a6, a7, a8);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,MTLSize,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v15;
  char __src;

  LOBYTE(v15) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  v15 = *a3;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
  v15 = a3[1];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
  v15 = a3[2];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
  LOBYTE(v15) = 80;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  v15 = *a4;
  __src = 109;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
  v15 = *a5;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
  v15 = *a6;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
  v15 = *a7;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  return AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
}

void BinaryBuffer::WriteValue<BinaryBuffer::ScratchBuffer>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;

  v3 = *(_QWORD *)(a2 + 1024);
  v4 = *(_QWORD *)(a2 + 1032);
  if (v3 + 1 <= v4)
  {
    *(_BYTE *)v3 = 64;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  v5 = (_BYTE *)(v3 + 2);
  if (v3 + 2 <= v4)
  {
    *(_BYTE *)(v3 + 1) = 64;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  *(_QWORD *)(a2 + 1024) = v5;
  v6 = *a3;
  if (v3 + 3 <= v4)
  {
    *v5 = 100;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  if (v3 + 11 <= v4)
  {
    *(_QWORD *)(v3 + 3) = v6;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  v7 = a3[1];
  if (v3 + 12 <= v4)
  {
    *(_BYTE *)(v3 + 11) = 100;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  if (v3 + 20 <= v4)
  {
    *(_QWORD *)(v3 + 12) = v7;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  v8 = a3[2];
  if (v3 + 21 <= v4)
  {
    *(_BYTE *)(v3 + 20) = 100;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  if (v3 + 29 <= v4)
  {
    *(_QWORD *)(v3 + 21) = v8;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  if (v3 + 30 <= v4)
  {
    *(_BYTE *)(v3 + 29) = 80;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  v9 = (_BYTE *)(v3 + 31);
  if (v3 + 31 <= v4)
  {
    *(_BYTE *)(v3 + 30) = 64;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  *(_QWORD *)(a2 + 1024) = v9;
  v10 = a3[3];
  if (v3 + 32 <= v4)
  {
    *v9 = 100;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  if (v3 + 40 <= v4)
  {
    *(_QWORD *)(v3 + 32) = v10;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  v11 = a3[4];
  if (v3 + 41 <= v4)
  {
    *(_BYTE *)(v3 + 40) = 100;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  if (v3 + 49 <= v4)
  {
    *(_QWORD *)(v3 + 41) = v11;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  v12 = a3[5];
  if (v3 + 50 <= v4)
  {
    *(_BYTE *)(v3 + 49) = 100;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  if (v3 + 58 <= v4)
  {
    *(_QWORD *)(v3 + 50) = v12;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  v13 = (_BYTE *)(v3 + 59);
  if (v3 + 59 <= v4)
  {
    *(_BYTE *)(v3 + 58) = 80;
    v4 = *(_QWORD *)(a2 + 1032);
  }
  v14 = v3 + 60;
  if (v14 <= v4)
    *v13 = 80;
  *(_QWORD *)(a2 + 1024) = v14;
}

void *BinaryBuffer::WriteValue<AppendBuffer::StreamBuffer>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3)
{
  uint64_t v7;
  char __src;

  LOBYTE(v7) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  LOBYTE(v7) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  v7 = *a3;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  v7 = a3[1];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  v7 = a3[2];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  LOBYTE(v7) = 80;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  LOBYTE(v7) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  v7 = a3[3];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  v7 = a3[4];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  v7 = a3[5];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  LOBYTE(v7) = 80;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  LOBYTE(v7) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
}

{
  uint64_t v7;
  char __src;

  LOBYTE(v7) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  v7 = *a3;
  __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  v7 = a3[1];
  __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  v7 = a3[2];
  __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  v7 = a3[3];
  __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  LOBYTE(v7) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
}

{
  uint64_t v7;
  char __src;

  LOBYTE(v7) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  v7 = *a3;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  v7 = a3[1];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  v7 = a3[2];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  v7 = a3[3];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  LOBYTE(v7) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
}

{
  uint64_t v7;
  char __src;

  LOBYTE(v7) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
  v7 = *a3;
  __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  v7 = a3[1];
  __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  v7 = a3[2];
  __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  v7 = a3[3];
  __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  v7 = a3[4];
  __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  v7 = a3[5];
  __src = 107;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v7, 8uLL);
  LOBYTE(v7) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v7, 1uLL);
}

void BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLRegion,MTLClearColor>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t v24;

  v9 = *a3;
  v10 = *(_QWORD *)(a2 + 1024);
  v11 = *(_QWORD *)(a2 + 1032);
  if (v10 + 1 <= v11)
  {
    *(_BYTE *)v10 = 109;
    v11 = *(_QWORD *)(a2 + 1032);
  }
  if (v10 + 9 <= v11)
  {
    *(_QWORD *)(v10 + 1) = v9;
    v11 = *(_QWORD *)(a2 + 1032);
  }
  v12 = *a4;
  if (v10 + 10 <= v11)
  {
    *(_BYTE *)(v10 + 9) = 100;
    v11 = *(_QWORD *)(a2 + 1032);
  }
  if (v10 + 18 <= v11)
  {
    *(_QWORD *)(v10 + 10) = v12;
    v11 = *(_QWORD *)(a2 + 1032);
  }
  v13 = *a5;
  v14 = (_QWORD *)(v10 + 19);
  if (v10 + 19 <= v11)
  {
    *(_BYTE *)(v10 + 18) = 100;
    v11 = *(_QWORD *)(a2 + 1032);
  }
  v15 = v10 + 27;
  if (v15 <= v11)
    *v14 = v13;
  *(_QWORD *)(a2 + 1024) = v15;
  BinaryBuffer::WriteValue<BinaryBuffer::ScratchBuffer>(a1, a2, a6);
  v16 = *(_QWORD *)(a2 + 1024);
  v17 = *(_QWORD *)(a2 + 1032);
  if (v16 + 1 <= v17)
  {
    *(_BYTE *)v16 = 64;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  v18 = *a7;
  if (v16 + 2 <= v17)
  {
    *(_BYTE *)(v16 + 1) = 107;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  v19 = (_BYTE *)(v16 + 10);
  if (v16 + 10 <= v17)
  {
    *(_QWORD *)(v16 + 2) = v18;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  *(_QWORD *)(a2 + 1024) = v19;
  v20 = a7[1];
  if (v16 + 11 <= v17)
  {
    *v19 = 107;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  if (v16 + 19 <= v17)
  {
    *(_QWORD *)(v16 + 11) = v20;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  v21 = a7[2];
  if (v16 + 20 <= v17)
  {
    *(_BYTE *)(v16 + 19) = 107;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  if (v16 + 28 <= v17)
  {
    *(_QWORD *)(v16 + 20) = v21;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  v22 = a7[3];
  if (v16 + 29 <= v17)
  {
    *(_BYTE *)(v16 + 28) = 107;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  v23 = (_BYTE *)(v16 + 37);
  if (v16 + 37 <= v17)
  {
    *(_QWORD *)(v16 + 29) = v22;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  v24 = v16 + 38;
  if (v24 <= v17)
    *v23 = 80;
  *(_QWORD *)(a2 + 1024) = v24;
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,objc_object  {objcproto10MTLTexture}*,unsigned long,unsigned long,MTLRegion,MTLClearColor,MTLPixelFormat>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v16;
  char __src;

  v16 = *a3;
  __src = 109;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v16, 8uLL);
  v16 = *a4;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v16, 8uLL);
  v16 = *a5;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v16, 8uLL);
  BinaryBuffer::WriteValue<AppendBuffer::StreamBuffer>(a1, a2, a6);
  BinaryBuffer::WriteValue<AppendBuffer::StreamBuffer>(a1, a2, a7);
  v16 = *a8;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  return AppendBuffer::WriteBytes(a1, a2, &v16, 8uLL);
}

void BinaryBuffer::WriteArguments<BinaryBuffer::ScratchBuffer,unsigned long,unsigned long,MTLRegion,MTLClearColor,MTLPixelFormat>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v10 = *a3;
  v11 = *(_QWORD *)(a2 + 1024);
  v12 = *(_QWORD *)(a2 + 1032);
  if (v11 + 1 <= v12)
  {
    *(_BYTE *)v11 = 100;
    v12 = *(_QWORD *)(a2 + 1032);
  }
  if (v11 + 9 <= v12)
  {
    *(_QWORD *)(v11 + 1) = v10;
    v12 = *(_QWORD *)(a2 + 1032);
  }
  v13 = *a4;
  v14 = (_QWORD *)(v11 + 10);
  if (v11 + 10 <= v12)
  {
    *(_BYTE *)(v11 + 9) = 100;
    v12 = *(_QWORD *)(a2 + 1032);
  }
  v15 = v11 + 18;
  if (v15 <= v12)
    *v14 = v13;
  *(_QWORD *)(a2 + 1024) = v15;
  BinaryBuffer::WriteValue<BinaryBuffer::ScratchBuffer>(a1, a2, a5);
  v16 = *(_QWORD *)(a2 + 1024);
  v17 = *(_QWORD *)(a2 + 1032);
  if (v16 + 1 <= v17)
  {
    *(_BYTE *)v16 = 64;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  v18 = *a6;
  if (v16 + 2 <= v17)
  {
    *(_BYTE *)(v16 + 1) = 107;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  v19 = (_BYTE *)(v16 + 10);
  if (v16 + 10 <= v17)
  {
    *(_QWORD *)(v16 + 2) = v18;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  *(_QWORD *)(a2 + 1024) = v19;
  v20 = a6[1];
  if (v16 + 11 <= v17)
  {
    *v19 = 107;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  if (v16 + 19 <= v17)
  {
    *(_QWORD *)(v16 + 11) = v20;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  v21 = a6[2];
  if (v16 + 20 <= v17)
  {
    *(_BYTE *)(v16 + 19) = 107;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  if (v16 + 28 <= v17)
  {
    *(_QWORD *)(v16 + 20) = v21;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  v22 = a6[3];
  if (v16 + 29 <= v17)
  {
    *(_BYTE *)(v16 + 28) = 107;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  if (v16 + 37 <= v17)
  {
    *(_QWORD *)(v16 + 29) = v22;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  if (v16 + 38 <= v17)
  {
    *(_BYTE *)(v16 + 37) = 80;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  v23 = *a7;
  v24 = (_QWORD *)(v16 + 39);
  if (v16 + 39 <= v17)
  {
    *(_BYTE *)(v16 + 38) = 100;
    v17 = *(_QWORD *)(a2 + 1032);
  }
  v25 = v16 + 47;
  if (v25 <= v17)
    *v24 = v23;
  *(_QWORD *)(a2 + 1024) = v25;
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<unsigned long const>,_NSRange>(AppendBuffer *a1, StreamBuffer *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v8;
  uint64_t v10;
  char __src;

  LOBYTE(v10) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  if (a3[1])
  {
    v8 = 0;
    do
    {
      v10 = *(_QWORD *)(*a3 + 8 * v8);
      __src = 100;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
      ++v8;
    }
    while (a3[1] > v8);
  }
  LOBYTE(v10) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  LOBYTE(v10) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  v10 = *a4;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  v10 = a4[1];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  LOBYTE(v10) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto15MTLSamplerState}* const>,_NSRange>(AppendBuffer *a1, StreamBuffer *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v8;
  uint64_t v10;
  char __src;

  LOBYTE(v10) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  if (a3[1])
  {
    v8 = 0;
    do
    {
      v10 = *(_QWORD *)(*a3 + 8 * v8);
      __src = 109;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
      ++v8;
    }
    while (a3[1] > v8);
  }
  LOBYTE(v10) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  LOBYTE(v10) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  v10 = *a4;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  v10 = a4[1];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  LOBYTE(v10) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,float const*,float const*,_NSRange>(AppendBuffer *a1, StreamBuffer *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  char __src;

  v10 = *a3;
  __src = 109;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  v10 = *a4;
  __src = 109;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  LOBYTE(v10) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  v10 = *a5;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  v10 = a5[1];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  LOBYTE(v10) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto7MTLHeap}* const>,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v8;
  uint64_t v10;
  char __src;

  LOBYTE(v10) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  if (a3[1])
  {
    v8 = 0;
    do
    {
      v10 = *(_QWORD *)(*a3 + 8 * v8);
      __src = 109;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
      ++v8;
    }
    while (a3[1] > v8);
  }
  LOBYTE(v10) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  v10 = *a4;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  return AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto11MTLResource}* const>,unsigned long,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t v10;
  uint64_t v12;
  char __src;

  LOBYTE(v12) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v12, 1uLL);
  if (a3[1])
  {
    v10 = 0;
    do
    {
      v12 = *(_QWORD *)(*a3 + 8 * v10);
      __src = 109;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v12, 8uLL);
      ++v10;
    }
    while (a3[1] > v10);
  }
  LOBYTE(v12) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v12, 1uLL);
  v12 = *a4;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v12, 8uLL);
  v12 = *a5;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  return AppendBuffer::WriteBytes(a1, a2, &v12, 8uLL);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto11MTLResource}* const>,unsigned long,unsigned long,unsigned long>(AppendBuffer *a1, StreamBuffer *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v12;
  uint64_t v14;
  char __src;

  LOBYTE(v14) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v14, 1uLL);
  if (a3[1])
  {
    v12 = 0;
    do
    {
      v14 = *(_QWORD *)(*a3 + 8 * v12);
      __src = 109;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v14, 8uLL);
      ++v12;
    }
    while (a3[1] > v12);
  }
  LOBYTE(v14) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v14, 1uLL);
  v14 = *a4;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v14, 8uLL);
  v14 = *a5;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v14, 8uLL);
  v14 = *a6;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  return AppendBuffer::WriteBytes(a1, a2, &v14, 8uLL);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto9MTLBuffer}* const>,BinaryBuffer::Array<unsigned long const>,unsigned long const,_NSRange>(AppendBuffer *a1, StreamBuffer *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char __src;

  LOBYTE(v15) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  if (a3[1])
  {
    v12 = 0;
    do
    {
      v15 = *(_QWORD *)(*a3 + 8 * v12);
      __src = 109;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
      ++v12;
    }
    while (a3[1] > v12);
  }
  LOBYTE(v15) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  LOBYTE(v15) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  if (a4[1])
  {
    v13 = 0;
    do
    {
      v15 = *(_QWORD *)(*a4 + 8 * v13);
      __src = 100;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
      ++v13;
    }
    while (a4[1] > v13);
  }
  LOBYTE(v15) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  return BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<unsigned long const>,_NSRange>(a1, a2, a5, a6);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<objc_object  {objcproto15MTLSamplerState}* const>,BinaryBuffer::Array<float const>,float const,_NSRange>(AppendBuffer *a1, StreamBuffer *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char __src;

  LOBYTE(v15) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  if (a3[1])
  {
    v12 = 0;
    do
    {
      v15 = *(_QWORD *)(*a3 + 8 * v12);
      __src = 109;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v15, 8uLL);
      ++v12;
    }
    while (a3[1] > v12);
  }
  LOBYTE(v15) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  LOBYTE(v15) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  if (a4[1])
  {
    v13 = 0;
    do
    {
      LODWORD(v15) = *(_DWORD *)(*a4 + 4 * v13);
      __src = 106;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v15, 4uLL);
      ++v13;
    }
    while (a4[1] > v13);
  }
  LOBYTE(v15) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v15, 1uLL);
  return BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<float const>,_NSRange>(a1, a2, a5, a6);
}

void *BinaryBuffer::WriteArguments<AppendBuffer::StreamBuffer,BinaryBuffer::Array<float const>,_NSRange>(AppendBuffer *a1, StreamBuffer *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v8;
  uint64_t v10;
  char __src;

  LOBYTE(v10) = 32;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  if (a3[1])
  {
    v8 = 0;
    do
    {
      LODWORD(v10) = *(_DWORD *)(*a3 + 4 * v8);
      __src = 106;
      AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
      AppendBuffer::WriteBytes(a1, a2, &v10, 4uLL);
      ++v8;
    }
    while (a3[1] > v8);
  }
  LOBYTE(v10) = 48;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  LOBYTE(v10) = 64;
  AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
  v10 = *a4;
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  v10 = a4[1];
  __src = 100;
  AppendBuffer::WriteBytes(a1, a2, &__src, 1uLL);
  AppendBuffer::WriteBytes(a1, a2, &v10, 8uLL);
  LOBYTE(v10) = 80;
  return AppendBuffer::WriteBytes(a1, a2, &v10, 1uLL);
}

void sub_22CDEC838(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDEC90C(_Unwind_Exception *exception_object)
{
  os_unfair_lock_s *v1;

  if (v1)
    os_unfair_lock_unlock(v1);
  _Unwind_Resume(exception_object);
}

void sub_22CDECAA0(_Unwind_Exception *exception_object)
{
  os_unfair_lock_s *v1;

  if (v1)
    os_unfair_lock_unlock(v1);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::BufferUsageTable::addResource(id *this, MTLGPUDebugDevice *a2, MTLGPUDebugBuffer *a3, char a4)
{
  MTLGPUDebugBuffer *i;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;

  for (i = a3; ; i = a3)
  {
    v9 = -[MTLGPUDebugBuffer bufferIndex](i, "bufferIndex");
    if (objc_msgSend(*this, "length") > v9 >> 2)
      break;
  }
  v10 = -[MTLGPUDebugBuffer bufferIndex](a3, "bufferIndex");
  if ((a4 & 4) != 0)
    a4 = a4 & 2 | 1;
  result = objc_msgSend(*this, "contents");
  *(_BYTE *)(result + (v10 >> 2)) |= a4 << (2 * (v10 & 3));
  return result;
}

void sub_22CDECD08(_Unwind_Exception *exception_object)
{
  os_unfair_lock_s *v1;

  if (v1)
    os_unfair_lock_unlock(v1);
  _Unwind_Resume(exception_object);
}

unint64_t `anonymous namespace'::TextureTypeTable::addResource(id *this, MTLGPUDebugDevice *a2, MTLGPUDebugTexture *a3)
{
  MTLGPUDebugTexture *i;
  unsigned int v7;
  unsigned int v8;
  unint64_t result;
  char v10;

  for (i = a3; ; i = a3)
  {
    v7 = -[MTLGPUDebugTexture gpuIdentifier](i, "gpuIdentifier");
    if (objc_msgSend(*this, "length") > v7 >> 1)
      break;
  }
  v8 = -[MTLGPUDebugTexture gpuIdentifier](a3, "gpuIdentifier");
  result = -[MTLToolsTexture textureType](a3, "textureType");
  if (v8)
  {
    v10 = result;
    result = objc_msgSend(*this, "contents");
    *(_BYTE *)(result + (v8 >> 1)) |= v10 << (4 * (v8 & 1));
  }
  return result;
}

void sub_22CDED284(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDED3C4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDED49C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDED648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12)
{
  std::mutex::unlock(a12);
  _Unwind_Resume(a1);
}

void sub_22CDEE780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22CDEF024(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table((uint64_t)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v7 = *a2++;
      v6 = v7;
      v8 = v7;
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      if ((v9 & 4) != 0)
        LODWORD(v10) = v9 & 2 | 1;
      else
        v10 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      result = objc_msgSend(**(id **)(v5 + 32), "contents");
      *(_BYTE *)(result + (v6 >> 2)) |= (_DWORD)v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_2(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v7 = *a2++;
      v6 = v7;
      v8 = v7;
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      if ((v9 & 4) != 0)
        LODWORD(v10) = v9 & 2 | 1;
      else
        v10 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      result = objc_msgSend(**(id **)(v5 + 32), "contents");
      *(_BYTE *)(result + (v6 >> 2)) |= (_DWORD)v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_3(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LODWORD(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_DWORD)v8 << (2 * (v6 & 3));
        v9 = *a2;
        if ((_DWORD)v9)
        {
          v10 = a2[2];
          result = objc_msgSend(**(id **)(v5 + 48), "contents");
          *(_BYTE *)(result + (v9 >> 1)) |= (_BYTE)v10 << (4 * (v9 & 1));
        }
      }
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_4(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v7 = *a2++;
      v6 = v7;
      v8 = v7;
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      if ((v9 & 4) != 0)
        LODWORD(v10) = v9 & 2 | 1;
      else
        v10 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      result = objc_msgSend(**(id **)(v5 + 32), "contents");
      *(_BYTE *)(result + (v6 >> 2)) |= (_DWORD)v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_5(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v7 = *a2++;
      v6 = v7;
      v8 = v7;
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      if ((v9 & 4) != 0)
        LODWORD(v10) = v9 & 2 | 1;
      else
        v10 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      result = objc_msgSend(**(id **)(v5 + 32), "contents");
      *(_BYTE *)(result + (v6 >> 2)) |= (_DWORD)v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_6(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LODWORD(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_DWORD)v8 << (2 * (v6 & 3));
        v9 = *a2;
        if ((_DWORD)v9)
        {
          v10 = a2[2];
          result = objc_msgSend(**(id **)(v5 + 48), "contents");
          *(_BYTE *)(result + (v9 >> 1)) |= (_BYTE)v10 << (4 * (v9 & 1));
        }
      }
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_7(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v7 = *a2++;
      v6 = v7;
      v8 = v7;
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      if ((v9 & 4) != 0)
        LODWORD(v10) = v9 & 2 | 1;
      else
        v10 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      result = objc_msgSend(**(id **)(v5 + 32), "contents");
      *(_BYTE *)(result + (v6 >> 2)) |= (_DWORD)v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_8(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v7 = *a2++;
      v6 = v7;
      v8 = v7;
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      if ((v9 & 4) != 0)
        LODWORD(v10) = v9 & 2 | 1;
      else
        v10 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      result = objc_msgSend(**(id **)(v5 + 32), "contents");
      *(_BYTE *)(result + (v6 >> 2)) |= (_DWORD)v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_9(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LODWORD(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_DWORD)v8 << (2 * (v6 & 3));
        v9 = *a2;
        if ((_DWORD)v9)
        {
          v10 = a2[2];
          result = objc_msgSend(**(id **)(v5 + 48), "contents");
          *(_BYTE *)(result + (v9 >> 1)) |= (_BYTE)v10 << (4 * (v9 & 1));
        }
      }
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_10(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v7 = *a2++;
      v6 = v7;
      v8 = v7;
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      if ((v9 & 4) != 0)
        LODWORD(v10) = v9 & 2 | 1;
      else
        v10 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      result = objc_msgSend(**(id **)(v5 + 32), "contents");
      *(_BYTE *)(result + (v6 >> 2)) |= (_DWORD)v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_11(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v7 = *a2++;
      v6 = v7;
      v8 = v7;
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      if ((v9 & 4) != 0)
        LODWORD(v10) = v9 & 2 | 1;
      else
        v10 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
      result = objc_msgSend(**(id **)(v5 + 32), "contents");
      *(_BYTE *)(result + (v6 >> 2)) |= (_DWORD)v10 << (2 * (v8 & 3));
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_114HeapUsageTable5applyERNS_16BufferUsageTableES2_S2_S2_RNS_17TextureUsageTableES4_S4_S4_RNS_16TextureTypeTableES6_S6_S6__block_invoke_12(uint64_t result, unsigned int *a2, int a3)
{
  int v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      v6 = *a2;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        if ((v7 & 4) != 0)
          LODWORD(v8) = v7 & 2 | 1;
        else
          v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
        result = objc_msgSend(**(id **)(v5 + 32), "contents");
        *(_BYTE *)(result + (v6 >> 2)) |= (_DWORD)v8 << (2 * (v6 & 3));
        v9 = *a2;
        if ((_DWORD)v9)
        {
          v10 = a2[2];
          result = objc_msgSend(**(id **)(v5 + 48), "contents");
          *(_BYTE *)(result + (v9 >> 1)) |= (_BYTE)v10 << (4 * (v9 & 1));
        }
      }
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  return result;
}

void `anonymous namespace'::ResourceUsageTable::~ResourceUsageTable(id *this)
{

  *this = 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,MTLGPUDebugResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLGPUDebugResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLGPUDebugResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLGPUDebugResidencySet *>>>::__emplace_unique_impl<unsigned long,MTLGPUDebugResidencySet *&>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *inserted;
  char v10;

  v6 = operator new(0x20uLL);
  v7 = *a2;
  v8 = *a3;
  v6[2] = *a2;
  v6[3] = v8;
  *v6 = 0;
  v6[1] = v7;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique(a1, v6);
  if ((v10 & 1) == 0)
    operator delete(v6);
  return inserted;
}

void sub_22CDEFC6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>>>::__emplace_unique_key_args<unsigned long,unsigned long,MTLGPUDebugResidencySet *>(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CDEFE94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLGPUDebugResidencySet *>>>::__emplace_unique_key_args<unsigned long,unsigned long,MTLGPUDebugResidencySet *&>(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CDF00BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLLegacySVLog(void)
{
  if (MTLLegacySVLog(void)::onceToken != -1)
    dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
  return MTLLegacySVLog(void)::logObject;
}

os_log_t ___Z14MTLLegacySVLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.Metal", "GPUDebug");
  MTLLegacySVLog(void)::logObject = (uint64_t)result;
  return result;
}

void LegacySVMetalBuffer::LegacySVMetalBuffer(LegacySVMetalBuffer *this, LegacySVMetalBufferHeap *a2, unsigned int a3)
{
  this->heap = a2;
  this->index = a3;
}

{
  this->heap = a2;
  this->index = a3;
}

void LegacySVMetalBuffer::free(LegacySVMetalBuffer *this)
{
  LegacySVMetalBufferHeap::freeBuffer((uint64_t)this->heap, (uint64_t)this);
}

void LegacySVMetalBufferHeap::freeBuffer(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;

  std::mutex::lock((std::mutex *)a1);
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(int *)(a1 + 112) + 1;
  *(_DWORD *)(a1 + 112) = v5;
  *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * v5) = v4;
  *(_QWORD *)(a1 + 128) -= *(_QWORD *)(a1 + 136);
  *(_QWORD *)a2 = 0;
  std::mutex::unlock((std::mutex *)a1);
}

uint64_t LegacySVMetalBuffer::getMTLBuffer(LegacySVMetalBuffer *this)
{
  return *(_QWORD *)(*((_QWORD *)this->heap + 8) + 8 * this->index);
}

uint64_t LegacySVMetalBufferHeap::init(uint64_t this, MTLLegacySVDevice *a2, uint64_t a3)
{
  *(_QWORD *)(this + 136) = a3;
  *(_QWORD *)(this + 144) = a2;
  return this;
}

void LegacySVMetalBufferHeap::grow(LegacySVMetalBufferHeap *this, unsigned int a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  std::vector<unsigned int>::size_type v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t v10[4];
  _DWORD v11[7];

  *(_QWORD *)&v11[5] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 8);
  v5 = *((_QWORD *)this + 9);
  v3 = (char *)this + 64;
  v6 = (v5 - v4) >> 3;
  if (v6 != a2)
  {
    v7 = a2;
    std::vector<objc_object  {objcproto9MTLBuffer}*>::resize((uint64_t)v3, a2);
    std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 88), v7);
    for (; v6 < (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 3; ++v6)
    {
      *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v6) = objc_msgSend(*((id *)this + 18), "newInternalBufferWithLength:options:", *((_QWORD *)this + 17), 256);
      *((_QWORD *)this + 15) += *((_QWORD *)this + 17);
      if (MTLLegacySVLog(void)::onceToken != -1)
        dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
      v8 = MTLLegacySVLog(void)::logObject;
      if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_DEBUG))
        MetalBufferHeap::grow(v10, (unint64_t *)this + 15, (double *)v11, v8);
      v9 = *((int *)this + 28) + 1;
      *((_DWORD *)this + 28) = v9;
      *(_DWORD *)(*((_QWORD *)this + 11) + 4 * v9) = v6;
    }
  }
}

std::mutex *LegacySVMetalBufferHeap::allocBuffer(std::mutex *this)
{
  NSObject *v2;

  std::mutex::lock(this);
  if ((*(_DWORD *)&this[1].__m_.__opaque[40] & 0x80000000) != 0)
    LegacySVMetalBufferHeap::grow((LegacySVMetalBufferHeap *)this, ((unint64_t)(*(_QWORD *)this[1].__m_.__opaque - this[1].__m_.__sig) >> 3) + 1);
  this[2].__m_.__sig += *(_QWORD *)this[2].__m_.__opaque;
  if (MTLLegacySVLog(void)::onceToken != -1)
    dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
  v2 = MTLLegacySVLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_DEBUG))
    MetalBufferHeap::allocBuffer((unint64_t *)&this[2], (uint64_t)this, v2);
  --*(_DWORD *)&this[1].__m_.__opaque[40];
  std::mutex::unlock(this);
  return this;
}

void sub_22CDF0404(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void LegacySVMetalBufferHeap::~LegacySVMetalBufferHeap(std::mutex *this)
{
  id *sig;
  id *v3;
  void *v4;
  void *v5;

  sig = (id *)this[1].__m_.__sig;
  v3 = *(id **)this[1].__m_.__opaque;
  while (sig != v3)

  v4 = *(void **)&this[1].__m_.__opaque[16];
  if (v4)
  {
    *(_QWORD *)&this[1].__m_.__opaque[24] = v4;
    operator delete(v4);
  }
  v5 = (void *)this[1].__m_.__sig;
  if (v5)
  {
    *(_QWORD *)this[1].__m_.__opaque = v5;
    operator delete(v5);
  }
  std::mutex::~mutex(this);
}

void LegacySVBufferDescriptorHeap::init(LegacySVBufferDescriptorHeap *this, MTLLegacySVBuffer **a2, unsigned int a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  unint64_t Handle;
  void *v12;

  v6 = objc_alloc_init(MEMORY[0x24BDDD4C0]);
  v7 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v8 = (void *)MEMORY[0x22E309364]();
  objc_msgSend(v6, "setIndex:", 0);
  objc_msgSend(v6, "setAccess:", 1);
  objc_msgSend(v6, "setArrayLength:", 1);
  objc_msgSend(v6, "setDataType:", 60);
  objc_msgSend(v7, "addObject:", (id)objc_msgSend(v6, "copy"));
  objc_msgSend(v6, "setIndex:", 1);
  objc_msgSend(v6, "setAccess:", 0);
  objc_msgSend(v6, "setArrayLength:", 1);
  objc_msgSend(v6, "setDataType:", 33);
  objc_msgSend(v7, "addObject:", (id)objc_msgSend(v6, "copy"));
  objc_autoreleasePoolPop(v8);
  v9 = (void *)MEMORY[0x22E309364]();
  *((_QWORD *)this + 15) = objc_msgSend((id)objc_msgSend(a2, "baseObject"), "newArgumentEncoderWithArguments:", v7);
  objc_autoreleasePoolPop(v9);

  *((_QWORD *)this + 16) = objc_msgSend(a2, "newInternalBufferWithLength:options:", objc_msgSend(*((id *)this + 15), "encodedLength") * a3, 256);
  if (MTLLegacySVLog(void)::onceToken != -1)
    dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
  v10 = MTLLegacySVLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_DEBUG))
    GPUDebugBufferDescriptorHeap::init((id *)this + 16, v10);
  *((_QWORD *)this + 14) = 1;
  objc_msgSend(*((id *)this + 15), "setArgumentBuffer:offset:", *((_QWORD *)this + 16), 0);
  Handle = LegacySVBufferDescriptorHeap::createHandle((std::mutex *)this, a2[81]);
  std::mutex::lock((std::mutex *)this);
  objc_msgSend(*((id *)this + 15), "setArgumentBuffer:offset:", *((_QWORD *)this + 16), objc_msgSend(*((id *)this + 15), "encodedLength") * Handle);
  v12 = (void *)*((_QWORD *)this + 15);
  objc_msgSend(v12, "setBuffer:offset:atIndex:", a2[81], 0, 0);
  *(_DWORD *)objc_msgSend(v12, "constantDataAtIndex:", 1) = -1;
  std::mutex::unlock((std::mutex *)this);
}

void sub_22CDF06A0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t LegacySVBufferDescriptorHeap::createHandle(std::mutex *this, MTLLegacySVBuffer *a2)
{
  uint64_t v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;

  std::mutex::lock(this);
  v4 = *(_QWORD *)this[1].__m_.__opaque;
  if (this[1].__m_.__sig == v4)
  {
    v5 = *(_QWORD *)&this[1].__m_.__opaque[40];
    *(_QWORD *)&this[1].__m_.__opaque[40] = v5 + 1;
    if (MTLLegacySVLog(void)::onceToken != -1)
      dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
    v6 = MTLLegacySVLog(void)::logObject;
    if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_DEBUG))
      GPUDebugBufferDescriptorHeap::createHandle(v5, v6, v7);
    v8 = *(_QWORD *)&this[1].__m_.__opaque[16];
    if (v5 >= (*(_QWORD *)&this[1].__m_.__opaque[24] - v8) >> 3)
    {
      std::vector<objc_object  {objcproto9MTLBuffer}*>::resize((uint64_t)&this[1].__m_.__opaque[16], v5 + 1);
      v8 = *(_QWORD *)&this[1].__m_.__opaque[16];
    }
    *(_QWORD *)(v8 + 8 * v5) = a2;
  }
  else
  {
    v5 = *(unsigned int *)(v4 - 4);
    *(_QWORD *)(*(_QWORD *)&this[1].__m_.__opaque[16] + 8 * v5) = a2;
    *(_QWORD *)this[1].__m_.__opaque -= 4;
  }
  std::mutex::unlock(this);
  return v5;
}

void sub_22CDF07A0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void LegacySVBufferDescriptorHeap::freeBufferHandle(std::mutex *this, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  _DWORD *v6;
  char *sig;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;

  std::mutex::lock(this);
  *(_QWORD *)(*(_QWORD *)&this[1].__m_.__opaque[16] + 8 * a2) = 0;
  v4 = *(_QWORD *)&this[1].__m_.__opaque[8];
  v5 = *(char **)this[1].__m_.__opaque;
  if ((unint64_t)v5 >= v4)
  {
    sig = (char *)this[1].__m_.__sig;
    v8 = (v5 - sig) >> 2;
    if ((unint64_t)(v8 + 1) >> 62)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v9 = v4 - (_QWORD)sig;
    v10 = (uint64_t)(v4 - (_QWORD)sig) >> 1;
    if (v10 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&this[1].__m_.__opaque[8], v11);
      sig = (char *)this[1].__m_.__sig;
      v5 = *(char **)this[1].__m_.__opaque;
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[4 * v8];
    v14 = &v12[4 * v11];
    *(_DWORD *)v13 = a2;
    v6 = v13 + 4;
    while (v5 != sig)
    {
      v15 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    this[1].__m_.__sig = (uint64_t)v13;
    *(_QWORD *)this[1].__m_.__opaque = v6;
    *(_QWORD *)&this[1].__m_.__opaque[8] = v14;
    if (sig)
      operator delete(sig);
  }
  else
  {
    *(_DWORD *)v5 = a2;
    v6 = v5 + 4;
  }
  *(_QWORD *)this[1].__m_.__opaque = v6;
  std::mutex::unlock(this);
}

void sub_22CDF08A8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t LegacySVConstantBufferCache::init(uint64_t this, MTLLegacySVDevice *a2)
{
  *(_QWORD *)(this + 112) = a2;
  return this;
}

void LegacySVConstantBufferCache::getOrCreateBuffer(LegacySVConstantBufferCache *this@<X0>, NSData *a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  NSObject *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];

  v6 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *(_QWORD *)this += -[NSData length](a2, "length");
  if (MTLLegacySVLog(void)::onceToken != -1)
    dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
  v7 = MTLLegacySVLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_DEBUG))
    GPUDebugConstantBufferCache::getOrCreateBuffer((uint64_t *)this, v7, v8);
  v9 = (_BYTE *)*((_QWORD *)this + 14);
  if ((v9[286] & 0x80) != 0)
    v10 = objc_msgSend(v9, "newBufferWithLength:options:", -[NSData length](a2, "length"), 0);
  else
    v10 = objc_msgSend(v9, "newInternalBufferWithLength:options:", -[NSData length](a2, "length"), 0);
  v11 = v10;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 3221225472;
  v12[2] = ___ZN27LegacySVConstantBufferCache17getOrCreateBufferEP6NSData_block_invoke;
  v12[3] = &unk_24F7945C8;
  v12[4] = v10;
  -[NSData enumerateByteRangesUsingBlock:](a2, "enumerateByteRangesUsingBlock:", v12);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = v11;
  std::mutex::unlock(v6);
}

void sub_22CDF0A08(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void LegacySVConstantBufferCache::releaseBuffer(LegacySVConstantBufferCache *this, KeyBufferPair *a2)
{
  std::mutex *v4;

  if (a2->buffer)
  {
    v4 = (std::mutex *)((char *)this + 8);
    std::mutex::lock((std::mutex *)((char *)this + 8));
    *(_QWORD *)this -= -[MTLBuffer length](a2->buffer, "length");

    a2->buffer = 0;
    std::mutex::unlock(v4);
  }
}

void sub_22CDF0AD0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void LegacySVGlobalResidentBufferList::useBuffers(LegacySVGlobalResidentBufferList *this, MTLLegacySVRenderCommandEncoder *a2)
{
  std::mutex *v4;
  uint64_t i;
  uint64_t v6;

  if (*(_DWORD *)&a2->_tileStageActive != *(_DWORD *)this)
  {
    v4 = (std::mutex *)((char *)this + 8);
    std::mutex::lock((std::mutex *)((char *)this + 8));
    for (i = *((_QWORD *)this + 10);
          (LegacySVGlobalResidentBufferList *)i != (LegacySVGlobalResidentBufferList *)((char *)this + 72);
          i = *(_QWORD *)(i + 8))
    {
      v6 = *(_QWORD *)(i + 16);
      -[MTLLegacySVRenderCommandEncoder useResource:usage:](a2, "useResource:usage:", v6, 1);
      -[MTLToolsCommandEncoder addRetainedObject:](a2, "addRetainedObject:", v6);
    }
    *(_DWORD *)&a2->_tileStageActive = *(_DWORD *)this;
    std::mutex::unlock(v4);
  }
}

void sub_22CDF0BA4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void LegacySVGlobalResidentBufferList::useBuffers(LegacySVGlobalResidentBufferList *this, MTLLegacySVComputeCommandEncoder *a2)
{
  std::mutex *v4;
  uint64_t i;
  uint64_t v6;

  if (*(_DWORD *)&a2->_enableUseResourceValidation != *(_DWORD *)this)
  {
    v4 = (std::mutex *)((char *)this + 8);
    std::mutex::lock((std::mutex *)((char *)this + 8));
    for (i = *((_QWORD *)this + 10);
          (LegacySVGlobalResidentBufferList *)i != (LegacySVGlobalResidentBufferList *)((char *)this + 72);
          i = *(_QWORD *)(i + 8))
    {
      v6 = *(_QWORD *)(i + 16);
      -[MTLLegacySVComputeCommandEncoder useResource:usage:](a2, "useResource:usage:", v6, 1);
      -[MTLToolsCommandEncoder addRetainedObject:](a2, "addRetainedObject:", v6);
    }
    *(_DWORD *)&a2->_enableUseResourceValidation = *(_DWORD *)this;
    std::mutex::unlock(v4);
  }
}

void sub_22CDF0C78(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void LegacySVGlobalResidentBufferList::addBuffer(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  ++*(_DWORD *)a1;
  v5 = operator new(0x18uLL);
  v6 = *(_QWORD **)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  *v5 = a1 + 72;
  v5[1] = v6;
  v5[2] = a2;
  *v6 = v5;
  *(_QWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 88) = v7 + 1;
  std::mutex::unlock(v4);
}

void sub_22CDF0CF4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void LegacySVGlobalResidentBufferList::removeBuffer(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  uint64_t v4;

  v4 = a2;
  v3 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  std::list<objc_object  {objcproto9MTLBuffer}*>::remove(a1 + 72, &v4);
  std::mutex::unlock(v3);
}

void sub_22CDF0D50(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CDF1890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void instrumentationHeapInit(MTLLegacySVDevice *a1)
{
  unint64_t *v2;
  unint64_t v3;
  MTLLegacySVDevice *v4;
  MTLLegacySVDevice ***v5;
  MTLLegacySVDevice **v6;

  v2 = (unint64_t *)((char *)a1 + 688);
  v4 = a1;
  v3 = atomic_load(v2);
  if (v3 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(v2, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<instrumentationHeapInit(MTLLegacySVDevice *)::$_0 &&>>);
  }
}

void indirectCommandBufferPipelineInit(MTLLegacySVDevice *a1)
{
  unint64_t *v1;
  unint64_t v2;
  MTLLegacySVDevice **v3;
  MTLLegacySVDevice *v4;
  MTLLegacySVDevice ****v5;
  MTLLegacySVDevice ***v6;

  v4 = a1;
  v1 = (unint64_t *)((char *)a1 + 696);
  v3 = &v4;
  v2 = atomic_load(v1);
  if (v2 != -1)
  {
    v6 = &v3;
    v5 = &v6;
    std::__call_once(v1, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<indirectCommandBufferPipelineInit(MTLLegacySVDevice *)::$_0 &&>>);
  }
}

void LogInstrumentationFailures(MTLLegacySVImageData *a1, MTLDebugInstrumentationData *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  int v12;
  const char *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    -[MTLLegacySVImageData functionType](a1, "functionType");
    v4 = objc_msgSend((id)MTLFunctionTypeString(), "UTF8String");
    if (-[MTLDebugInstrumentationData hasArgumentLimitsInstrumentationFailures](a2, "hasArgumentLimitsInstrumentationFailures"))
    {
      if (MTLLegacySVLog(void)::onceToken != -1)
        dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
      v5 = MTLLegacySVLog(void)::logObject;
      if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_INFO))
      {
        v14 = 136315394;
        v15 = v4;
        v16 = 2080;
        v17 = -[NSString UTF8String](-[MTLLegacySVImageData loadedImageName](a1, "loadedImageName"), "UTF8String");
        v6 = "Fatal failure when instrumenting %s \"%s\":\n"
             "\tFunction is not instrumented and faults will not be detected.";
        v7 = v5;
        v8 = 22;
LABEL_19:
        _os_log_impl(&dword_22CD98000, v7, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v14, v8);
      }
    }
    else if ((-[MTLDebugInstrumentationData hasArgumentBufferInstrumentationFailures](a2, "hasArgumentBufferInstrumentationFailures") & 1) != 0|| -[MTLDebugInstrumentationData hasGlobalConstantsInstrumentationFailures](a2, "hasGlobalConstantsInstrumentationFailures"))
    {
      if (MTLLegacySVLog(void)::onceToken != -1)
        dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
      v9 = MTLLegacySVLog(void)::logObject;
      if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_INFO))
      {
        v10 = -[NSString UTF8String](-[MTLLegacySVImageData loadedImageName](a1, "loadedImageName"), "UTF8String");
        if (-[MTLDebugInstrumentationData hasArgumentBufferInstrumentationFailures](a2, "hasArgumentBufferInstrumentationFailures"))v11 = "\n\tFaults from argument buffers will not be detected.";
        else
          v11 = "";
        v12 = -[MTLDebugInstrumentationData hasGlobalConstantsInstrumentationFailures](a2, "hasGlobalConstantsInstrumentationFailures");
        v14 = 136315906;
        v13 = "\n\tFaults from reading global constant variables will not be detected.";
        v15 = v4;
        if (!v12)
          v13 = "";
        v16 = 2080;
        v17 = v10;
        v18 = 2080;
        v19 = v11;
        v20 = 2080;
        v21 = v13;
        v6 = "Partial failure when instrumenting %s \"%s\":%s%s";
        v7 = v9;
        v8 = 42;
        goto LABEL_19;
      }
    }
  }
}

void MTLLegacySVSetValidationChecksOptions(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v11;
  unsigned __int8 v12;
  id v13;
  void *v14;
  const void *v15;
  void *v16;
  const void *v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  int v23;
  NSObject *v24;
  _QWORD v28[2];
  uint64_t (*v29)(uint64_t, _QWORD *);
  void *v30;
  id v31;
  _QWORD v32[2];
  uint64_t (*v33)(uint64_t, _QWORD *);
  void *v34;
  id v35;
  char data;
  CC_SHA256_CTX __p;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  unsigned __int8 md[16];
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v38 = 1;
  v11 = operator new(0x20uLL);
  *(_QWORD *)__p.hash = v11 + 4;
  *(_QWORD *)&__p.hash[2] = v11 + 4;
  *v11 = "all";
  v11[1] = 1;
  v11[2] = "none";
  v11[3] = 2;
  *(_QWORD *)__p.count = v11;
  v12 = MTLGetEnvCase<MTLShaderValidationState>("MTL_SHADER_VALIDATION_DEFAULT_STATE", &v38, (const char ***)&__p);
  if (*(_QWORD *)__p.count)
  {
    *(_QWORD *)__p.hash = *(_QWORD *)__p.count;
    operator delete(*(void **)__p.count);
  }
  if ((v12 & 1) == 0)
    v38 = 1;
  v13 = (id)objc_opt_new();
  objc_msgSend(v13, "appendString:", CFSTR("[METAL SHADER VALIDATION] Processing new pipeline"));
  if (MTLGetEnvDefault())
  {
    v14 = (void *)objc_msgSend(a2, "baseObject");
    v15 = (const void *)objc_msgSend(v14, "bitCodeHash");
    data = objc_msgSend(v14, "bitcodeType");
    CC_SHA256_Init(&__p);
    CC_SHA256_Update(&__p, v15, 8u);
    CC_SHA256_Update(&__p, (const void *)objc_msgSend((id)objc_msgSend(v14, "name"), "UTF8String"), objc_msgSend((id)objc_msgSend(v14, "name"), "length"));
    CC_SHA256_Update(&__p, &data, 1u);
    if (a3)
    {
      v16 = (void *)objc_msgSend(a3, "baseObject");
      v17 = (const void *)objc_msgSend(v16, "bitCodeHash");
      md[0] = 0;
      md[0] = objc_msgSend(v16, "bitcodeType");
      CC_SHA256_Update(&__p, v17, 8u);
      CC_SHA256_Update(&__p, (const void *)objc_msgSend((id)objc_msgSend(v16, "name"), "UTF8String"), objc_msgSend((id)objc_msgSend(v16, "name"), "length"));
      CC_SHA256_Update(&__p, md, 1u);
    }
    if (a4)
    {
      v18 = (void *)objc_msgSend(a4, "baseObject");
      v19 = (const void *)objc_msgSend(v18, "bitCodeHash");
      md[0] = 0;
      md[0] = objc_msgSend(v18, "bitcodeType");
      CC_SHA256_Update(&__p, v19, 8u);
      CC_SHA256_Update(&__p, (const void *)objc_msgSend((id)objc_msgSend(v18, "name"), "UTF8String"), objc_msgSend((id)objc_msgSend(v18, "name"), "length"));
      CC_SHA256_Update(&__p, md, 1u);
    }
    CC_SHA256_Final(md, &__p);
    v39 = *(_OWORD *)md;
    v40 = v42;
    v20 = _MTLRequestHashToString();
    if (a5)
      objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("\npipeline label: \"%@\""), a5));
    objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("\n\t{ function1: \"%@\" - label: \"%@\" }"), objc_msgSend(a2, "name"), objc_msgSend(a2, "label")));
    if (a3)
      objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("\n\t{ function2: \"%@\" - label: \"%@\" }"), objc_msgSend(a3, "name"), objc_msgSend(a3, "label")));
    if (a4)
      objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("\n\t{ function3: \"%@\" - label: \"%@\" }"), objc_msgSend(a4, "name"), objc_msgSend(a4, "label")));
    objc_msgSend(v13, "appendString:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("\n\t{ Shader Validation UID: \"%@\" }"), v20));
  }
  else
  {
    v20 = 0;
  }
  v31 = v13;
  v32[0] = MEMORY[0x24BDAC760];
  v32[1] = 3221225472;
  v33 = ___ZL37MTLLegacySVSetValidationChecksOptionsP17MTLLegacySVDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_2;
  v34 = &unk_24F794730;
  v35 = v13;
  v28[0] = MEMORY[0x24BDAC760];
  v28[1] = 3221225472;
  v29 = ___ZL37MTLLegacySVSetValidationChecksOptionsP17MTLLegacySVDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_3;
  v30 = &unk_24F794730;
  v21 = *(void **)(a1 + 656);
  if (v21)
  {
    if (a5 && (objc_msgSend(*(id *)(a1 + 656), "containsObject:", a5) & 1) != 0)
    {
      LODWORD(v21) = 1;
    }
    else if (v20)
    {
      LODWORD(v21) = objc_msgSend(v21, "containsObject:", v20);
    }
    else
    {
      LODWORD(v21) = 0;
    }
  }
  v22 = *(void **)(a1 + 664);
  if (!v22)
    goto LABEL_35;
  if (!a5 || (objc_msgSend(*(id *)(a1 + 664), "containsObject:", a5) & 1) == 0)
  {
    if (v20)
    {
      v23 = objc_msgSend(v22, "containsObject:", v20);
      goto LABEL_31;
    }
LABEL_35:
    if ((_DWORD)v21)
      goto LABEL_42;
    goto LABEL_36;
  }
  v23 = 1;
LABEL_31:
  if ((v21 & v23) == 1)
  {
    objc_msgSend(v13, "appendString:", CFSTR("\nWarning: Pipeline requested to have shader validation checks both enabled and disabled."));
    if (v38 != 2)
    {
      if (v38 == 1)
        goto LABEL_58;
LABEL_59:
      *a7 |= 0x800000000uLL;
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if ((v21 & 1) != 0)
  {
LABEL_42:
    if (a6 == 2)
      objc_msgSend(v13, "appendString:", CFSTR("\nWarning: Pipeline requested to have shader validation checks both enabled and disabled."));
    if (v38 == 1)
    goto LABEL_58;
  }
  if (v23)
  {
    if (a6 == 1)
      objc_msgSend(v13, "appendString:", CFSTR("\nWarning: Pipeline requested to have shader validation checks both enabled and disabled."));
    if (v38 == 2)
    goto LABEL_60;
  }
LABEL_36:
  if (a6 == 2)
  {
    if (v38 == 2)
  }
  else
  {
    if (a6 == 1)
    {
      if (v38 == 1)
      goto LABEL_58;
    }
    if (v38 != 2)
    {
      if (v38 == 1)
      {
LABEL_58:
        v33((uint64_t)v32, a7);
        goto LABEL_61;
      }
      goto LABEL_59;
    }
  }
LABEL_60:
  v29((uint64_t)v28, a7);
LABEL_61:
  if (MTLLegacySVLog(void)::onceToken != -1)
    dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
  v24 = MTLLegacySVLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_DEBUG))
    MTLLegacySVSetValidationChecksOptions(v13, v24);
}

void sub_22CDF335C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLLegacySVParsePerPSOList(const std::string *a1)
{
  id v2;
  uint64_t *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[13];
  char v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = objc_alloc_init(MEMORY[0x24BDBCEF0]);
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = (uint64_t *)a1;
  else
    v3 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  v4 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v3);
  if (MTLLegacySVLog(void)::onceToken != -1)
    dispatch_once(&MTLLegacySVLog(void)::onceToken, &__block_literal_global_1);
  v5 = MTLLegacySVLog(void)::logObject;
  if (os_log_type_enabled((os_log_t)MTLLegacySVLog(void)::logObject, OS_LOG_TYPE_DEBUG))
    MTLGPUDebugParsePerPSOList(v4, v5, v6);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v18, a1, 24);
  if (!*(_DWORD *)((char *)&v18[4] + *(_QWORD *)(v18[0] - 24)))
  {
    *(_QWORD *)&v7 = 138412290;
    v14 = v7;
    while (1)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v18, (uint64_t)&v15, 0x2Cu);
      if (SHIBYTE(v17) < 0)
        break;
      if (HIBYTE(v17))
      {
        v11 = &v15;
LABEL_18:
        v12 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v11, v14);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v14;
          v22 = v12;
          _os_log_debug_impl(&dword_22CD98000, v5, OS_LOG_TYPE_DEBUG, "[METAL SHADER VALIDATION] Storing PSO: \"%@\"", buf, 0xCu);
        }
        if (v17 >= 0)
          v13 = &v15;
        else
          v13 = v15;
        objc_msgSend(v2, "addObject:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v13));
        if ((SHIBYTE(v17) & 0x80000000) == 0)
          goto LABEL_25;
        goto LABEL_24;
      }
LABEL_25:
      if (*(_DWORD *)((char *)&v18[4] + *(_QWORD *)(v18[0] - 24)))
        goto LABEL_9;
    }
    if (v16)
    {
      v11 = v15;
      goto LABEL_18;
    }
LABEL_24:
    operator delete(v15);
    goto LABEL_25;
  }
LABEL_9:
  v8 = objc_msgSend(v2, "copy", v14);
  v18[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v18[2] = v9;
  v18[3] = MEMORY[0x24BEDB848] + 16;
  if (v19 < 0)
    operator delete((void *)v18[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x22E3090E8](&v20);
  return v8;
}

void sub_22CDF6E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<instrumentationHeapInit(MTLLegacySVDevice *)::$_0 &&>>(uint64_t ***a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **a1;
  v2 = *v1;
  v3 = *v1 + 112;
  *(_QWORD *)(v3 + 136) = 0x200000;
  *(_QWORD *)(v3 + 144) = v2;
  if ((*(_BYTE *)(v2 + 286) & 0x80) != 0)
  {
    LegacySVBufferDescriptorHeap::init((LegacySVBufferDescriptorHeap *)(v2 + 296), (MTLLegacySVBuffer **)v2, 0xFFFFFu);
    v2 = *v1;
  }
  *(_QWORD *)(v2 + 544) = v2;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<indirectCommandBufferPipelineInit(MTLLegacySVDevice *)::$_0 &&>>(id ****a1)
{
  id **v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;

  v1 = **a1;
  v2 = (void *)objc_msgSend(**v1, "baseObject");
  v3 = (void *)objc_msgSend(v2, "newLibraryWithURL:error:", objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.gpusw.MetalTools")), "URLForResource:withExtension:", CFSTR("MTLLegacySVICBSupport"), CFSTR("metallib")), 0);
  v12 = (id)objc_msgSend(v3, "newFunctionWithName:", CFSTR("ICB_Inherit_PSO_Vertex"));
  v11 = (void *)objc_msgSend(v3, "newFunctionWithName:", CFSTR("ICB_Inherit_None_Vertex"));
  v4 = (void *)objc_msgSend(v3, "newFunctionWithName:", CFSTR("ICB_Inherit_Buffers_Vertex"));
  v5 = objc_alloc_init(MEMORY[0x24BDDD6B8]);
  objc_msgSend(v5, "setRasterizationEnabled:", 0);
  objc_msgSend(v5, "setSupportIndirectCommandBuffers:", 1);
  objc_msgSend(v5, "setVertexFunction:", v12);
  *((_QWORD *)**v1 + 88) = objc_msgSend(v2, "newRenderPipelineStateWithDescriptor:error:", v5, 0);
  objc_msgSend(v5, "setVertexFunction:", v11);
  *((_QWORD *)**v1 + 89) = objc_msgSend(v2, "newRenderPipelineStateWithDescriptor:error:", v5, 0);
  objc_msgSend(v5, "setVertexFunction:", v4);
  *((_QWORD *)**v1 + 90) = objc_msgSend(v2, "newRenderPipelineStateWithDescriptor:error:", v5, 0);
  v6 = (void *)objc_msgSend(v3, "newFunctionWithName:", CFSTR("ICB_Inherit_PSO_Kernel"));
  v7 = (void *)objc_msgSend(v3, "newFunctionWithName:", CFSTR("ICB_Inherit_None_Kernel"));
  v8 = (void *)objc_msgSend(v3, "newFunctionWithName:", CFSTR("ICB_Inherit_Buffers_Kernel"));
  v9 = (void *)objc_msgSend(v3, "newFunctionWithName:", CFSTR("ICB_Inherit_Both_Kernel"));
  v10 = objc_alloc_init(MEMORY[0x24BDDD550]);
  objc_msgSend(v10, "setSupportIndirectCommandBuffers:", 1);
  objc_msgSend(v10, "setComputeFunction:", v6);
  *((_QWORD *)**v1 + 92) = objc_msgSend(v2, "newComputePipelineStateWithDescriptor:options:reflection:error:", v10, 0, 0, 0);
  objc_msgSend(v10, "setComputeFunction:", v7);
  *((_QWORD *)**v1 + 93) = objc_msgSend(v2, "newComputePipelineStateWithDescriptor:options:reflection:error:", v10, 0, 0, 0);
  objc_msgSend(v10, "setComputeFunction:", v8);
  *((_QWORD *)**v1 + 94) = objc_msgSend(v2, "newComputePipelineStateWithDescriptor:options:reflection:error:", v10, 0, 0, 0);
  objc_msgSend(v10, "setComputeFunction:", v9);
  *((_QWORD *)**v1 + 95) = objc_msgSend(v2, "newComputePipelineStateWithDescriptor:options:reflection:error:", v10, 0, 0, 0);

  v13 = objc_alloc_init(MEMORY[0x24BDDD590]);
  objc_msgSend(v13, "setDepthWriteEnabled:", 0);
  objc_msgSend(v13, "setDepthCompareFunction:", 7);
  objc_msgSend((id)objc_msgSend(v13, "frontFaceStencil"), "setReadMask:", 0);
  objc_msgSend((id)objc_msgSend(v13, "frontFaceStencil"), "setWriteMask:", 0);
  objc_msgSend((id)objc_msgSend(v13, "backFaceStencil"), "setReadMask:", 0);
  objc_msgSend((id)objc_msgSend(v13, "backFaceStencil"), "setWriteMask:", 0);
  *((_QWORD *)**v1 + 91) = objc_msgSend(v2, "newDepthStencilStateWithDescriptor:", v13);

}

uint64_t ___ZL37MTLLegacySVSetValidationChecksOptionsP17MTLLegacySVDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_2(uint64_t a1, _QWORD *a2)
{
  *a2 |= 0x800000000uLL;
  return objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("\nEnabling checks."));
}

uint64_t ___ZL37MTLLegacySVSetValidationChecksOptionsP17MTLLegacySVDevicePU22objcproto11MTLFunction11objc_objectS2_S2_P8NSString19MTLShaderValidationS5_Rm_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  *a2 |= 0x1000000000uLL;
  return objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("\nDisabling checks."));
}

void emitParallellRenderEncoderDistribution(MTLTelemetryDevice *a1, MTLTelemetryStatisticUIRec *a2)
{
  unsigned int count;
  double v5;
  OS_os_log *v6;
  unsigned int max;
  unsigned int min;
  unsigned int v9;
  unint64_t total;
  double v11;
  uint8_t buf[4];
  unsigned int v13;
  __int16 v14;
  unsigned int v15;
  __int16 v16;
  double v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unsigned int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*MEMORY[0x24BDDDAC8])
  {
    if (*MEMORY[0x24BDDDAC8] != 1)
      return;
    count = a2->count;
    if (count)
      v5 = (float)((float)a2->total / (float)count);
    else
      v5 = 0.0;
    printf("\n\nParallellRenderEncoder, minEncodersPerParallellRender=%u, maxEncodersPerParallellRender=%u, avgEncodersPerParallellRender=%f, totalEncodersPerParallellRender=%llu, countEncodersPerParallellRender=%u", a2->min, a2->max, v5, a2->total, count);
  }
  v6 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
  if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_DEFAULT))
  {
    min = a2->min;
    max = a2->max;
    v9 = a2->count;
    total = a2->total;
    if (v9)
      v11 = (float)((float)total / (float)v9);
    else
      v11 = 0.0;
    *(_DWORD *)buf = 67110144;
    v13 = min;
    v14 = 1024;
    v15 = max;
    v16 = 2048;
    v17 = v11;
    v18 = 2048;
    v19 = total;
    v20 = 1024;
    v21 = v9;
    _os_log_impl(&dword_22CD98000, (os_log_t)v6, OS_LOG_TYPE_DEFAULT, "ParallellRenderEncoder, minEncodersPerParallellRender=%u, maxEncodersPerParallellRender=%u, avgEncodersPerParallellRender=%f, totalEncodersPerParallellRender=%llu, countEncodersPerParallellRender=%u", buf, 0x28u);
  }
}

unint64_t validateMTLBlitOption(unint64_t result, _MTLMessageContext *a2)
{
  if ((result > 4 || result == 3) && result != 0x20000000)
    return _MTLMessageContextPush_();
  return result;
}

id validateResourceAliasing(uint64_t a1, uint64_t a2, int a3)
{
  id result;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = (id)objc_msgSend(*(id *)a1, "heap");
  if (result)
  {
    v7 = result;
    result = (id)objc_msgSend(*(id *)a2, "heap");
    if (v7 == result)
    {
      result = *(id *)a1;
      if (*(_QWORD *)a1 != *(_QWORD *)a2)
      {
        result = (id)objc_msgSend(result, "doesAliasResource:");
        if ((_DWORD)result)
        {
          if (objc_msgSend(v7, "type") != 1)
            return (id)MTLReportFailure();
          if (!a3)
            return (id)MTLReportFailure();
          if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
            return (id)MTLReportFailure();
          if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
            return (id)MTLReportFailure();
          if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
            return (id)MTLReportFailure();
          if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
            return (id)MTLReportFailure();
          v8 = *(id *)a1;
          v9 = *(id *)a2;
          v10 = objc_msgSend(v8, "width");
          if (v10 != objc_msgSend(v9, "width"))
            return (id)MTLReportFailure();
          v11 = objc_msgSend(v8, "height");
          if (v11 != objc_msgSend(v9, "height"))
            return (id)MTLReportFailure();
          v12 = objc_msgSend(v8, "depth");
          result = (id)objc_msgSend(v9, "depth");
          if ((id)v12 != result)
            return (id)MTLReportFailure();
        }
      }
    }
  }
  return result;
}

const __CFString *MTLBlitOptionString(uint64_t a1)
{
  char v1;
  void *v2;
  void *v3;

  if (!a1)
    return CFSTR("MTLBlitOptionNone");
  v1 = a1;
  v2 = (void *)objc_msgSend(MEMORY[0x24BDD16A8], "string");
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "appendString:", CFSTR("MTLBlitOptionDepthFromDepthStencil"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        return (const __CFString *)v3;
      goto LABEL_9;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "appendString:", CFSTR("MTLBlitOptionStencilFromDepthStencil"));
  if ((v1 & 4) != 0)
LABEL_9:
    objc_msgSend(v3, "appendString:", CFSTR("MTLBlitOptionRowLinearPVRTC"));
  return (const __CFString *)v3;
}

void std::deque<objc_object *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<objc_object *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void sub_22CDFD408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t validateTextureRegion@<X0>(void *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;

  _MTLMessageContextBegin_();
  if (!a2)
    _MTLMessageContextPush_();
  if ((objc_msgSend(a2, "conformsToProtocol:", &unk_255C6E6C0) & 1) == 0)
    _MTLMessageContextPush_();
  if ((void *)objc_msgSend(a2, "device") != a1)
    _MTLMessageContextPush_();
  if (objc_msgSend(a2, "mipmapLevelCount") <= a3)
  {
    v14 = a3;
    v15 = objc_msgSend(a2, "mipmapLevelCount");
    _MTLMessageContextPush_();
  }
  v12 = objc_msgSend(a2, "numFaces", v14, v15);
  if (objc_msgSend(a2, "arrayLength") * v12 <= a4)
  {
    objc_msgSend(a2, "numFaces");
    objc_msgSend(a2, "arrayLength");
    _MTLMessageContextPush_();
  }
  if (!(a5[4] * a5[3] * a5[5]))
    _MTLMessageContextPush_();
  _MTLMessageContextEnd();
  *(_QWORD *)(a6 + 48) = 0;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)a6 = 0u;
  objc_msgSend(a1, "baseObject");
  objc_msgSend(a2, "pixelFormat");
  MTLPixelFormatGetInfoForDevice();
  objc_msgSend(a2, "pixelFormat");
  objc_msgSend(a2, "width");
  objc_msgSend(a2, "height");
  objc_msgSend(a2, "depth");
  objc_msgSend(a2, "sampleCount");
  MTLGetTextureLevelInfoForDeviceWithOptions();
  _MTLAdjustMTLSize();
  _MTLMessageContextBegin_();
  if (*a5)
    _MTLMessageContextPush_();
  if (a5[1])
    _MTLMessageContextPush_();
  if (a5[2])
    _MTLMessageContextPush_();
  if ((*(_BYTE *)(a6 + 9) & 4) != 0)
  {
    if (*a5 % *(_QWORD *)(a6 + 32))
      _MTLMessageContextPush_();
    if (a5[1] % *(_QWORD *)(a6 + 40))
      _MTLMessageContextPush_();
    if (a5[2] % *(_QWORD *)(a6 + 48))
      _MTLMessageContextPush_();
    if (0uLL % *(_QWORD *)(a6 + 32))
      _MTLMessageContextPush_();
    if (0uLL % *(_QWORD *)(a6 + 40))
      _MTLMessageContextPush_();
    if (0uLL % *(_QWORD *)(a6 + 48))
      _MTLMessageContextPush_();
  }
  return _MTLMessageContextEnd();
}

uint64_t validateBlitProtectionOptions(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((objc_msgSend(a2, "protectionOptions") & ~a1) != 0)
  {
    v10 = objc_msgSend(a2, "protectionOptions");
    v11 = a1;
    v9 = a4;
    _MTLMessageContextPush_();
  }
  result = objc_msgSend(a3, "protectionOptions", v9, v10, v11);
  if ((a1 & ~result) != 0)
  {
    objc_msgSend(a3, "protectionOptions");
    return _MTLMessageContextPush_();
  }
  return result;
}

void *ResourceIdentity::UnwindTexture(void *a1, MTLTextureType a2, int a3, char a4, int a5, _DWORD *a6, int *a7)
{
  void *v13;
  ResourceIdentity *v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  int v18;
  char v19;
  int v20;
  int v21;

  v13 = a1;
  v14 = (ResourceIdentity *)objc_msgSend(a1, "textureType");
  v15 = objc_msgSend(v13, "parentTexture");
  if (v15)
  {
    do
    {
      v16 = (void *)v15;
      a4 += objc_msgSend(v13, "parentRelativeLevel");
      a2 += objc_msgSend(v13, "parentRelativeSlice");
      v15 = objc_msgSend(v16, "parentTexture");
      v13 = v16;
    }
    while (v15);
  }
  else
  {
    v16 = v13;
  }
  *a6 = ResourceIdentity::PackViewInformation(v14, a2, a3, a4, a5, 0);
  v17 = objc_msgSend(v16, "textureType");
  v18 = objc_msgSend(v16, "arrayLength");
  v19 = objc_msgSend(v16, "mipmapLevelCount");
  if (v17 <= 6 && ((1 << v17) & 0x4A) != 0)
    v20 = 0x80000000;
  else
    v20 = (v17 == 8) << 31;
  if (v17 - 5 >= 2)
    v21 = 1;
  else
    v21 = 6;
  *a7 = (v19 - 1) & 0xF | ((v17 - 5 < 2) << 30) | v20 | (((v18 * v21) << 8) + 524032) & 0x7FF00;
  return v16;
}

unint64_t ResourceIdentity::PackViewInformation(ResourceIdentity *this, MTLTextureType a2, int a3, char a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;

  if ((unint64_t)this <= 6 && ((1 << (char)this) & 0x4A) != 0)
    v6 = 0x80000000;
  else
    v6 = (this == (ResourceIdentity *)8) << 31;
  v7 = (unint64_t)this - 5 < 2;
  v8 = v7 << 30;
  if ((v7 & a6) != 0)
    v9 = 6;
  else
    v9 = 1;
  return v8 & 0xC007FF00 | ((a2 & 0x7FF) << 19) | (16 * (a4 & 0xFu)) | (a5 - 1) & 0xF | v6 | (((a3 * v9) << 8) + 524032) & 0x7FF00;
}

void std::deque<objc_object *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<objc_object **>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<objc_object **>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<objc_object **>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<objc_object **>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_22CDFFD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<objc_object **>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<objc_object **>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<objc_object *>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<objc_object **>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<objc_object **>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t validateNewTexture(MTLDebugBuffer *a1, MTLTextureDescriptor *a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  MTLDevice *v12;
  NSUInteger v13;
  NSUInteger v14;
  uint64_t result;
  NSUInteger v16;
  uint64_t v17;
  uint64_t v18;
  NSUInteger v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v12 = -[MTLToolsObject device](a1, "device");
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      MTLReportFailure();
    if (!-[MTLTextureDescriptor usage](a2, "usage")
      && +[MTLDebugDevice complainAboutSloppyTextureUsage](MTLDebugDevice, "complainAboutSloppyTextureUsage"))
    {
      MTLReportFailure();
    }
    if (-[MTLTextureDescriptor storageMode](a2, "storageMode") == MTLStorageModeMemoryless)
      MTLReportFailure();
    if (-[MTLTextureDescriptor storageMode](a2, "storageMode") == MTLStorageModeShared)
    {
      -[MTLDevice originalObject](v12, "originalObject");
      MTLValidateFeatureSupport();
    }
  }
  else
  {
    MTLReportFailure();
  }
  -[MTLTextureDescriptor pixelFormat](a2, "pixelFormat");
  MTLPixelFormatGetInfoForDevice();
  -[MTLTextureDescriptor width](a2, "width");
  if (!a4)
    MTLReportFailure();
  if (-[MTLTextureDescriptor textureType](a2, "textureType", v17, v20) != MTLTextureType2D
    && -[MTLTextureDescriptor textureType](a2, "textureType") != MTLTextureType2DArray
    && -[MTLTextureDescriptor textureType](a2, "textureType") != MTLTextureTypeTextureBuffer)
  {
    -[MTLTextureDescriptor textureType](a2, "textureType");
    v18 = MTLTextureTypeString();
    MTLReportFailure();
  }
  v13 = -[MTLTextureDescriptor height](a2, "height", v18) * a4;
  v14 = a3 - a4 + v13 * -[MTLTextureDescriptor arrayLength](a2, "arrayLength");
  if (v14 > -[MTLDebugBuffer length](a1, "length"))
  {
    v16 = -[MTLTextureDescriptor height](a2, "height") * a4;
    v19 = a3 - a4 + v16 * -[MTLTextureDescriptor arrayLength](a2, "arrayLength");
    v21 = -[MTLDebugBuffer length](a1, "length");
    MTLReportFailure();
  }
  if ((((_DWORD)a5 - 1) & a3) != 0)
  {
    v21 = a5;
    v22 = a3;
    v19 = 0;
    MTLReportFailure();
  }
  if ((((_DWORD)a6 - 1) & a4) != 0
    && -[MTLTextureDescriptor textureType](a2, "textureType") != MTLTextureTypeTextureBuffer)
  {
    v21 = a6;
    v22 = a4;
    v19 = 0;
    MTLReportFailure();
  }
  result = -[MTLTextureDescriptor usage](a2, "usage", v19, v21, v22);
  if ((result & 0x20) != 0)
  {
    if ((-[MTLTextureDescriptor usage](a2, "usage") & 3) == 0)
      MTLReportFailure();
    result = -[MTLTextureDescriptor pixelFormat](a2, "pixelFormat");
    if (result != 53)
    {
      result = -[MTLTextureDescriptor pixelFormat](a2, "pixelFormat");
      if (result != 54)
      {
        result = -[MTLTextureDescriptor pixelFormat](a2, "pixelFormat");
        if (result != 103)
          return MTLReportFailure();
      }
    }
  }
  return result;
}

void emitBufferDistribution(MTLTelemetryDevice *a1, MTLTelemetryBufferDistributionRec *a2)
{
  unsigned int count;
  OS_os_log *v5;
  unsigned int max;
  unsigned int min;
  unsigned int v8;
  unint64_t total;
  double v10;
  uint8_t buf[4];
  unsigned int v12;
  __int16 v13;
  unsigned int v14;
  __int16 v15;
  double v16;
  __int16 v17;
  unint64_t v18;
  __int16 v19;
  unsigned int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  count = a2->var0.var0.count;
  if (count)
  {
    if (*MEMORY[0x24BDDDAC8])
    {
      if (*MEMORY[0x24BDDDAC8] != 1)
        return;
      printf("\n\nBuffer, minLength=%u, maxLength=%u, avgLength=%f, totalLength=%llu, countLength=%u", a2->var0.var0.min, a2->var0.var0.max, (float)((float)a2->var0.var0.total / (float)count), a2->var0.var0.total, count);
    }
    v5 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_DEFAULT))
    {
      min = a2->var0.var0.min;
      max = a2->var0.var0.max;
      v8 = a2->var0.var0.count;
      total = a2->var0.var0.total;
      if (v8)
        v10 = (float)((float)total / (float)v8);
      else
        v10 = 0.0;
      *(_DWORD *)buf = 67110144;
      v12 = min;
      v13 = 1024;
      v14 = max;
      v15 = 2048;
      v16 = v10;
      v17 = 2048;
      v18 = total;
      v19 = 1024;
      v20 = v8;
      _os_log_impl(&dword_22CD98000, (os_log_t)v5, OS_LOG_TYPE_DEFAULT, "Buffer, minLength=%u, maxLength=%u, avgLength=%f, totalLength=%llu, countLength=%u", buf, 0x28u);
    }
  }
}

uint64_t _MTLValidateResolveTexture(void *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, _QWORD *a9, char a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a3 >= 0xA)
    MTLReportFailure();
  if ((void *)objc_msgSend(a2, "device") != a1)
    MTLReportFailure();
  if (!objc_msgSend(a2, "textureType"))
    MTLReportFailure();
  if (objc_msgSend(a2, "textureType") == 1)
    MTLReportFailure();
  if (objc_msgSend(a2, "textureType") == 4)
    MTLReportFailure();
  if (objc_msgSend(a2, "textureType") == 9)
    MTLReportFailure();
  if (objc_msgSend(a2, "storageMode") == 3)
    MTLReportFailure();
  _MTLGetAttachmentSize();
  if (a4 || a5)
    MTLReportFailure();
  v16 = objc_msgSend(a2, "pixelFormat");
  v17 = objc_msgSend(a9, "pixelFormat");
  v18 = a2 + 9;
  if ((a2[10] & 0x80) != 0 || v16 == 253)
  {
    if ((a10 & 1) != 0)
      goto LABEL_22;
  }
  else
  {
    v22 = *v18;
    MTLReportFailure();
    if ((a10 & 1) != 0)
      goto LABEL_22;
  }
  if (v17 != v16)
  {
    v22 = a9[9];
    v26 = *v18;
    MTLReportFailure();
  }
LABEL_22:
  v19 = objc_msgSend(a2, "numFaces", v22, v26);
  v20 = objc_msgSend(a2, "arrayLength");
  if (v20 * v19 <= a6)
  {
    v23 = a6;
    v27 = v20 * v19;
    MTLReportFailure();
  }
  if (objc_msgSend(a2, "mipmapLevelCount", v23, v27) <= a8)
  {
    v24 = a8;
    v28 = objc_msgSend(a2, "mipmapLevelCount");
    MTLReportFailure();
  }
  objc_msgSend(a2, "pixelFormat", v24, v28);
  objc_msgSend(a2, "width");
  objc_msgSend(a2, "height");
  objc_msgSend(a2, "depth");
  objc_msgSend(a2, "sampleCount");
  MTLGetTextureLevelInfoForDeviceWithOptions();
  MTLReportFailure();
  if (objc_msgSend(a2, "sampleCount", a7, 0, a8) != 1)
  {
    v25 = objc_msgSend(a2, "sampleCount");
    MTLReportFailure();
  }
  result = objc_msgSend(a1, "supportsRenderToLinearTextures", v25);
  if ((result & 1) == 0)
  {
    result = objc_msgSend(a2, "buffer");
    if (result)
      return MTLReportFailure();
  }
  return result;
}

uint64_t _MTLValidateResolveTextureWithContext(void *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, _QWORD *a9, char a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a3 >= 0xA)
    _MTLMessageContextPush_();
  if ((void *)objc_msgSend(a2, "device") != a1)
    _MTLMessageContextPush_();
  if (!objc_msgSend(a2, "textureType"))
    _MTLMessageContextPush_();
  if (objc_msgSend(a2, "textureType") == 1)
    _MTLMessageContextPush_();
  if (objc_msgSend(a2, "textureType") == 4)
    _MTLMessageContextPush_();
  if (objc_msgSend(a2, "textureType") == 9)
    _MTLMessageContextPush_();
  if (objc_msgSend(a2, "storageMode") == 3)
    _MTLMessageContextPush_();
  _MTLGetAttachmentSize();
  if (a4 || a5)
    _MTLMessageContextPush_();
  v16 = objc_msgSend(a2, "pixelFormat");
  v17 = objc_msgSend(a9, "pixelFormat");
  v18 = a2 + 9;
  if ((a2[10] & 0x80) != 0 || v16 == 253)
  {
    if ((a10 & 1) != 0)
      goto LABEL_22;
  }
  else
  {
    v22 = *v18;
    _MTLMessageContextPush_();
    if ((a10 & 1) != 0)
      goto LABEL_22;
  }
  if (v17 != v16)
  {
    v22 = a9[9];
    v26 = *v18;
    _MTLMessageContextPush_();
  }
LABEL_22:
  v19 = objc_msgSend(a2, "numFaces", v22, v26);
  v20 = objc_msgSend(a2, "arrayLength");
  if (v20 * v19 <= a6)
  {
    v23 = a6;
    v27 = v20 * v19;
    _MTLMessageContextPush_();
  }
  if (objc_msgSend(a2, "mipmapLevelCount", v23, v27) <= a8)
  {
    v24 = a8;
    v28 = objc_msgSend(a2, "mipmapLevelCount");
    _MTLMessageContextPush_();
  }
  objc_msgSend(a2, "pixelFormat", v24, v28);
  objc_msgSend(a2, "width");
  objc_msgSend(a2, "height");
  objc_msgSend(a2, "depth");
  objc_msgSend(a2, "sampleCount");
  MTLGetTextureLevelInfoForDeviceWithOptions();
  _MTLMessageContextPush_();
  if (objc_msgSend(a2, "sampleCount", a7, 0, a8) != 1)
  {
    v25 = objc_msgSend(a2, "sampleCount");
    _MTLMessageContextPush_();
  }
  result = objc_msgSend(a1, "supportsRenderToLinearTextures", v25);
  if ((result & 1) == 0)
  {
    result = objc_msgSend(a2, "buffer");
    if (result)
      return _MTLMessageContextPush_();
  }
  return result;
}

uint64_t _MTLValidateDepthStencilStoreState(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;

  v5 = result;
  if (!a4 || result != 4 && a2 != 4)
  {
    if (result && a2)
    {
      v6 = 0;
      v7 = 0;
      v8 = &qword_22CEAB638;
      do
      {
        if (*(v8 - 1) == result && *v8 == a2)
          v7 = 1;
        if (v6 > 3)
          break;
        v8 += 2;
        ++v6;
      }
      while ((v7 & 1) == 0);
      if ((v7 & 1) == 0)
        result = MTLReportFailure();
    }
    if ((v5 & 0xFFFFFFFFFFFFFFFELL) != 2 && a3 == 1)
      return MTLReportFailure();
  }
  return result;
}

uint64_t _MTLValidateDepthStencilStoreStateWithContext(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;

  v5 = result;
  if (!a4 || result != 4 && a2 != 4)
  {
    if (result && a2)
    {
      v6 = 0;
      v7 = 0;
      v8 = &qword_22CEAB638;
      do
      {
        if (*(v8 - 1) == result && *v8 == a2)
          v7 = 1;
        if (v6 > 3)
          break;
        v8 += 2;
        ++v6;
      }
      while ((v7 & 1) == 0);
      if ((v7 & 1) == 0)
        result = _MTLMessageContextPush_();
    }
    if ((v5 & 0xFFFFFFFFFFFFFFFELL) != 2 && a3 == 1)
      return _MTLMessageContextPush_();
  }
  return result;
}

uint64_t _MTLIsInsideCompletionHandler()
{
  return *(unsigned __int8 *)gInsideCompletionHandler();
}

uint64_t validateRenderPassDescriptor(void *a1, void *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  char *v13;
  NSRange *v14;
  NSRange **v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _DWORD *v26;
  double v27;
  double v28;
  void *v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  void *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  float v42;
  float v43;
  float v44;
  double v45;
  double v46;
  float v47;
  float v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t i;
  void *v81;
  uint64_t v82;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t length_low;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 *v100;
  uint64_t v101;
  uint64_t texture;
  unint64_t level;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v113;
  int v115;
  int v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  AttachmentDescriptorSimple v121;
  _OWORD v122[2];
  int v123;
  char v124;
  __int16 v125;
  unint64_t v126;
  unint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  NSRange *v132[68];

  v132[65] = *(NSRange **)MEMORY[0x24BDAC8D0];
  v131 = 0;
  v129 = 0u;
  v130 = 0u;
  v128 = 0u;
  _MTLMessageContextBegin_();
  v126 = 0;
  v127 = 0;
  v7 = objc_msgSend(a1, "renderTargetArrayLength");
  v8 = 0;
  v9 = 0;
  v125 = 0;
  v124 = 1;
  v118 = -1;
  v120 = 0;
  memset(v122, 0, sizeof(v122));
  v123 = 1065353216;
  v10 = -1;
  do
  {
    v11 = (void *)objc_msgSend(*(id *)objc_msgSend(a1, "_descriptorPrivate"), "_descriptorAtIndex:", v8);
    if (v11)
    {
      v12 = objc_msgSend(v11, "_descriptorPrivate");
      if (*(_QWORD *)v12)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          _MTLMessageContextPush_();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v13 = *(char **)v12;
          if ((objc_msgSend(*(id *)v12, "requireUsage:", 4) & 1) == 0)
          {
            v100 = (__int128 *)objc_msgSend(v13, "usage");
            v108 = 4;
            v87 = v8;
            _MTLMessageContextPush_();
          }
          if (!*(_QWORD *)(objc_msgSend(a1, "_descriptorPrivate", v87, v100, v108) + 128)
            && (*(_BYTE *)(v12 + 48) & 1) != 0)
          {
            v88 = v8;
            _MTLMessageContextPush_();
          }
          v100 = &v128;
          validateAttachmentOnDevice(a2, (id *)v12, v8, (uint64_t *)&v127, v7, (_BYTE *)&v125 + 1, &v125, *(_BYTE *)(objc_msgSend(a1, "_descriptorPrivate", v88) + 43), &v124);
          if (MTLReportFailureTypeEnabled())
            validateStoreLoadTransition(v8, a3, (MTLRenderPassAttachmentDescriptorPrivate *)v12, a4, a5, v7);
          AttachmentDescriptorSimple::AttachmentDescriptorSimple(&v121, (const MTLRenderPassAttachmentDescriptorPrivate *)v12, *(_QWORD *)(v12 + 40), v7);
          v14 = std::__hash_table<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,std::__unordered_map_hasher<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,true>,std::__unordered_map_equal<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::equal_t,AttachmentDescriptorSimple::hash_t,true>,std::allocator<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>>>::find<AttachmentDescriptorSimple>(v122, (NSRange *)&v121);
          if (v14)
          {
            length_low = LODWORD(v14[4].length);
            v100 = (__int128 *)v8;
            _MTLMessageContextPush_();
          }
          v132[0] = (NSRange *)&v121;
          LODWORD(std::__hash_table<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,std::__unordered_map_hasher<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,true>,std::__unordered_map_equal<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::equal_t,AttachmentDescriptorSimple::hash_t,true>,std::allocator<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>>>::__emplace_unique_key_args<AttachmentDescriptorSimple,std::piecewise_construct_t const&,std::tuple<AttachmentDescriptorSimple const&>,std::tuple<>>((uint64_t)v122, (NSRange *)&v121, (uint64_t)&std::piecewise_construct, v132)[4].length) = v8;
          v132[v9 + 1] = (NSRange *)objc_msgSend(*(id *)v12, "pixelFormat");
          v15 = &v132[7 * v9 + 9];
          v16 = *(_OWORD *)(v13 + 72);
          v17 = *(_OWORD *)(v13 + 88);
          v18 = *(_OWORD *)(v13 + 104);
          v15[6] = (NSRange *)*((_QWORD *)v13 + 15);
          *((_OWORD *)v15 + 1) = v17;
          *((_OWORD *)v15 + 2) = v18;
          *(_OWORD *)v15 = v16;
          objc_msgSend(*(id *)v12, "sampleCount");
          if (v10 >= (unint64_t)objc_msgSend(v13, "width") >> *(_QWORD *)(v12 + 8))
            v10 = (unint64_t)objc_msgSend(v13, "width") >> *(_QWORD *)(v12 + 8);
          ++v120;
          ++v9;
          if (v118 >= (unint64_t)objc_msgSend(v13, "height", length_low) >> *(_QWORD *)(v12 + 8))
            v118 = (unint64_t)objc_msgSend(v13, "height") >> *(_QWORD *)(v12 + 8);
        }
      }
    }
    ++v8;
  }
  while (v8 != 8);
  if (!v124)
    _MTLMessageContextPush_();
  if (HIBYTE(v125) && (_BYTE)v125)
    _MTLMessageContextPush_();
  _MTLMessageContextEnd();
  v19 = objc_msgSend(a2, "maxFramebufferStorageBits");
  v20 = MTLPixelFormatComputeTotalSizeUsed();
  v21 = objc_msgSend(a2, "isLargeMRTSupported");
  if (v19 >= 8 * v20)
    v22 = 1;
  else
    v22 = v21;
  if ((v22 & 1) == 0)
  {
    v87 = v20 & 0x1FFFFFFFFFFFFFFFLL;
    v100 = (__int128 *)(v19 >> 3);
    MTLReportFailure();
  }
  if ((objc_msgSend(a2, "supportsSeparateVisibilityAndShadingRate", v87, v100) & 1) == 0)
    v126 = v127;
  v131 = 0;
  v129 = 0u;
  v130 = 0u;
  v128 = 0u;
  _MTLMessageContextBegin_();
  v113 = v20;
  v23 = (void *)objc_msgSend(*(id *)objc_msgSend(a1, "_descriptorPrivate"), "_descriptorAtIndex:", 8);
  v24 = v23;
  if (v23)
  {
    v25 = objc_msgSend(v23, "_descriptorPrivate");
    v26 = *(_DWORD **)v25;
    if (*(_QWORD *)v25)
    {
      v117 = v26[20];
      if ((objc_msgSend(v26, "requireUsage:", 4) & 1) == 0)
      {
        v90 = objc_msgSend(v26, "usage");
        v101 = 4;
        _MTLMessageContextPush_();
      }
      if (!*(_QWORD *)(objc_msgSend(a1, "_descriptorPrivate", v90, v101) + 128) && (*(_BYTE *)(v25 + 48) & 1) != 0)
        _MTLMessageContextPush_();
      v101 = (uint64_t)&v128;
      validateAttachmentOnDevice(a2, (id *)v25, 8uLL, (uint64_t *)&v126, v7, (_BYTE *)&v125 + 1, &v125, *(_BYTE *)(objc_msgSend(a1, "_descriptorPrivate") + 43), &v124);
      if (v10 >= (unint64_t)objc_msgSend(v26, "width") >> *(_QWORD *)(v25 + 8))
        v10 = (unint64_t)objc_msgSend(v26, "width") >> *(_QWORD *)(v25 + 8);
      ++v120;
      if (v118 >= (unint64_t)objc_msgSend(v26, "height") >> *(_QWORD *)(v25 + 8))
        v118 = (unint64_t)objc_msgSend(v26, "height") >> *(_QWORD *)(v25 + 8);
    }
    else
    {
      LOBYTE(v117) = 0;
    }
    objc_msgSend(v24, "clearDepth");
    if (v27 < 0.0 || (objc_msgSend(v24, "clearDepth"), v28 > 1.0))
    {
      objc_msgSend(v24, "clearDepth");
      v90 = v86;
      _MTLMessageContextPush_();
    }
  }
  else
  {
    LOBYTE(v117) = 0;
    v25 = 0;
    v26 = 0;
  }
  v29 = (void *)objc_msgSend(*(id *)objc_msgSend(a1, "_descriptorPrivate", v90, v101), "_descriptorAtIndex:", 9);
  if (v29)
  {
    v30 = objc_msgSend(v29, "_descriptorPrivate");
    v31 = *(_DWORD **)v30;
    if (*(_QWORD *)v30)
    {
      v115 = v31[20];
      if ((objc_msgSend(v31, "requireUsage:", 4) & 1) == 0)
      {
        v91 = objc_msgSend(v31, "usage");
        texture = 4;
        _MTLMessageContextPush_();
      }
      v32 = objc_msgSend(a1, "_descriptorPrivate", v91, texture);
      texture = (uint64_t)&v128;
      validateAttachmentOnDevice(a2, (id *)v30, 9uLL, (uint64_t *)&v126, v7, (_BYTE *)&v125 + 1, &v125, *(_BYTE *)(v32 + 43), &v124);
      if (v10 >= (unint64_t)objc_msgSend(v31, "width") >> *(_QWORD *)(v30 + 8))
        v10 = (unint64_t)objc_msgSend(v31, "width") >> *(_QWORD *)(v30 + 8);
      ++v120;
      if (v118 >= (unint64_t)objc_msgSend(v31, "height") >> *(_QWORD *)(v30 + 8))
        v118 = (unint64_t)objc_msgSend(v31, "height") >> *(_QWORD *)(v30 + 8);
    }
    else
    {
      LOBYTE(v115) = 0;
    }
  }
  else
  {
    LOBYTE(v115) = 0;
    v30 = 0;
    v31 = 0;
  }
  if (!v124)
    _MTLMessageContextPush_();
  if (HIBYTE(v125) && (_BYTE)v125)
    _MTLMessageContextPush_();
  _MTLMessageContextEnd();
  if (v10 <= 1)
    v33 = 1;
  else
    v33 = v10;
  v111 = v33;
  v34 = v118;
  if (v118 <= 1)
    v34 = 1;
  v119 = v34;
  v35 = *(void **)(objc_msgSend(a1, "_descriptorPrivate") + 16);
  v36 = *(_QWORD *)(objc_msgSend(a1, "_descriptorPrivate") + 24);
  v128 = 0u;
  v131 = 0;
  v129 = 0u;
  v130 = 0u;
  _MTLMessageContextBegin_();
  v37 = (void *)objc_msgSend(a1, "rasterizationRateMap");
  if (v37)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      _MTLMessageContextPush_();
    if (!(_QWORD)v128)
    {
      if ((void *)objc_msgSend(v37, "device") != a2)
        _MTLMessageContextPush_();
      objc_msgSend(v37, "screenSize");
      if (v35 > v121.texture)
      {
        objc_msgSend(v37, "screenSize");
        v91 = (uint64_t)v35;
        texture = (uint64_t)v121.texture;
        _MTLMessageContextPush_();
      }
      objc_msgSend(v37, "screenSize", v91, texture);
      if (v36 > v121.level)
      {
        objc_msgSend(v37, "screenSize");
        v92 = v36;
        level = v121.level;
        _MTLMessageContextPush_();
      }
      if (v7 > objc_msgSend(v37, "layerCount", v92, level))
      {
        v91 = v7;
        texture = objc_msgSend(v37, "layerCount");
        _MTLMessageContextPush_();
      }
      if (!(_QWORD)v128)
      {
        memset(&v121, 0, 24);
        objc_msgSend(v37, "screenSize");
        v38 = v35 ? v35 : v121.texture;
        v39 = v36 ? v36 : v121.level;
        v110 = v39;
        if (objc_msgSend(v37, "mutability", v91, texture) != 1)
        {
          v40 = (unint64_t)v38;
          v41 = 0;
          v42 = (float)v40;
          v43 = 0.0;
          v44 = 0.0;
          while (v41 < objc_msgSend(v37, "layerCount"))
          {
            *(float *)&v45 = v42;
            *(float *)&v46 = (float)v110;
            objc_msgSend(v37, "mapScreenToPhysicalCoordinates:forLayer:", v41, v45, v46);
            if (v43 <= v47)
              v43 = v47;
            if (v44 <= v48)
              v44 = v48;
            ++v41;
          }
          if (v120)
          {
            v84 = vcvtas_u32_f32(v43);
            if (v111 < v84)
            {
              v91 = v84;
              texture = v111;
              _MTLMessageContextPush_();
            }
          }
          if (v120)
          {
            v85 = vcvtas_u32_f32(v44);
            if (v119 < v85)
            {
              v91 = v85;
              texture = v119;
              _MTLMessageContextPush_();
            }
          }
        }
      }
    }
  }
  else
  {
    if ((unint64_t)v35 > v111)
    {
      v91 = (uint64_t)v35;
      texture = v111;
      _MTLMessageContextPush_();
    }
    if (v36 > v119)
    {
      v91 = v36;
      texture = v119;
      _MTLMessageContextPush_();
    }
  }
  v49 = objc_msgSend(a2, "supportsRenderPassWithoutRenderTarget", v91, texture);
  if ((v49 & 1) == 0)
  {
    if (v120)
      goto LABEL_105;
    goto LABEL_258;
  }
  if (!v120 && (!v36 || !v35))
LABEL_258:
    _MTLMessageContextPush_();
LABEL_105:
  if ((objc_msgSend(a2, "supportsSparseDepthAttachments") & 1) == 0)
  {
    if (v26 && objc_msgSend(v26, "isSparse"))
      _MTLMessageContextPush_();
    if (!v31)
    {
      v50 = 0;
      if (!v25)
        goto LABEL_121;
      goto LABEL_119;
    }
    if (objc_msgSend(v31, "isSparse"))
      _MTLMessageContextPush_();
  }
  v50 = 0;
  if (v26 && v31)
  {
    if ((objc_msgSend(a2, "supportsSeparateDepthStencil") & 1) == 0 && ((v117 & 0x40) == 0 || (v115 & 0x20) == 0))
      _MTLMessageContextPush_();
    v50 = 1;
  }
  if (v25)
  {
LABEL_119:
    if (v30)
      _MTLValidateDepthStencilStoreStateWithContext(*(_QWORD *)(v25 + 40), *(_QWORD *)(v30 + 40), *(_QWORD *)(v30 + 104), 1);
  }
LABEL_121:
  if (v117 & 0x40 | v115 & 0x20)
  {
    if (v50)
    {
      if (v26 != v31)
        _MTLMessageContextPush_();
      if (*(_QWORD *)(v25 + 8) != *(_QWORD *)(v30 + 8) || *(_QWORD *)(v25 + 16) != *(_QWORD *)(v30 + 16))
        _MTLMessageContextPush_();
      v60 = *(_QWORD *)(v25 + 112);
      if (v60)
      {
        v61 = *(_QWORD *)(v30 + 112);
        if (v61)
        {
          if (v60 != v61)
            _MTLMessageContextPush_();
        }
      }
    }
  }
  else if (v50)
  {
    v51 = *(_QWORD *)(v25 + 8);
    v52 = *(_QWORD *)(v30 + 8);
    v53 = objc_msgSend(v26, "width");
    if (v53 >> v51 <= 1)
      v54 = 1;
    else
      v54 = v53 >> v51;
    v55 = objc_msgSend(v26, "height");
    if (v55 >> v51 <= 1)
      v56 = 1;
    else
      v56 = v55 >> v51;
    v57 = objc_msgSend(v31, "width");
    if (v57 >> v52 <= 1)
      v58 = 1;
    else
      v58 = v57 >> v52;
    v59 = (unint64_t)objc_msgSend(v31, "height") >> v52;
    if (v59 <= 1)
      v59 = 1;
    if (v54 != v58 || v56 != v59)
    {
      v108 = v58;
      v109 = v59;
      v93 = v54;
      v104 = v56;
      _MTLMessageContextPush_();
    }
  }
  v62 = v127;
  if (v126)
    v63 = v126;
  else
    v63 = v127;
  if (objc_msgSend(a2, "supportsSeparateVisibilityAndShadingRate", v93, v104, v108, v109))
  {
    v64 = *(_QWORD *)(objc_msgSend(a1, "_descriptorPrivate") + 32);
    v65 = *(_QWORD *)(objc_msgSend(a1, "_descriptorPrivate") + 72);
    v66 = v128;
    if (v64 && (objc_msgSend(a2, "supportsTextureSampleCount:", v64) & 1) == 0)
    {
      v94 = v64;
      _MTLMessageContextPush_();
    }
    if (v65 && (objc_msgSend(a2, "supportsTextureSampleCount:", v65) & 1) == 0)
    {
      v94 = v65;
      _MTLMessageContextPush_();
    }
    if (v66 == (_QWORD)v128)
    {
      if (v64)
        v67 = v64;
      else
        v67 = v65;
      if (!v62)
        v62 = v67;
      if (!v63)
        v63 = v65;
      if (v62 | v63)
      {
        if (v62 && v63 && v63 < v62)
          _MTLMessageContextPush_();
        goto LABEL_179;
      }
LABEL_260:
      _MTLMessageContextPush_();
      v62 = 0;
      v63 = 0;
    }
  }
  else
  {
    if (*(_QWORD *)(objc_msgSend(a1, "_descriptorPrivate") + 32))
      _MTLMessageContextPush_();
    if (v120)
      v68 = 0;
    else
      v68 = v49;
    if (v68 == 1)
    {
      v62 = *(_QWORD *)(objc_msgSend(a1, "_descriptorPrivate") + 72);
      if (!v62)
        goto LABEL_260;
      if ((objc_msgSend(a2, "supportsTextureSampleCount:", v62) & 1) == 0)
      {
        v94 = v62;
        _MTLMessageContextPush_();
      }
      v63 = v62;
    }
  }
LABEL_179:
  if ((v49 & 1) == 0 && *(_QWORD *)(objc_msgSend(a1, "_descriptorPrivate") + 72))
    _MTLMessageContextPush_();
  _MTLMessageContextEnd();
  v131 = 0;
  v129 = 0u;
  v130 = 0u;
  v128 = 0u;
  _MTLMessageContextBegin_();
  v69 = v113 & 0x1FFFFFFFFFFFFFFFLL;
  if ((v113 & 0x1FFFFFFFFFFFFFFFuLL) <= objc_msgSend(a1, "imageblockSampleLength"))
    v69 = objc_msgSend(a1, "imageblockSampleLength");
  v70 = objc_msgSend(a1, "tileWidth", v94);
  v71 = objc_msgSend(a1, "tileHeight");
  v72 = v71;
  if (v70)
  {
    if (v70 == 32)
    {
      if (v71 != 16 && v71 != 32)
      {
        v95 = 32;
        v105 = v71;
        MTLReportFailure();
      }
      v73 = 32 * v72;
    }
    else if (v70 == 16)
    {
      if (v71 != 16)
      {
        v95 = 16;
        v105 = v71;
        MTLReportFailure();
      }
      v73 = 16 * v72;
    }
    else
    {
      v95 = v70;
      v105 = v71;
      MTLReportFailure();
      v73 = 0;
    }
  }
  else
  {
    if (v71)
    {
      v95 = 0;
      v105 = v71;
      MTLReportFailure();
    }
    v73 = objc_msgSend(a2, "minTilePixels", v95, v105);
  }
  v74 = objc_msgSend(a1, "threadgroupMemoryLength", v95, v105);
  if (!objc_msgSend(a2, "isLargeMRTSupported")
    || objc_msgSend(a1, "imageblockSampleLength")
    || objc_msgSend(a1, "threadgroupMemoryLength"))
  {
    v75 = (v69 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v75 >= 0x41)
      _MTLMessageContextPush_();
    v76 = v75 * v62;
    if (v76 >= 0x101)
      _MTLMessageContextPush_();
    v77 = v74 + v76 * v73;
    if (v77 > objc_msgSend(a2, "maxThreadgroupMemoryLength"))
    {
      v96 = v77;
      v106 = objc_msgSend(a2, "maxThreadgroupMemoryLength");
      _MTLMessageContextPush_();
    }
  }
  if (v62 == 4 && objc_msgSend(a1, "tileWidth") == 32 && objc_msgSend(a1, "tileHeight") == 32)
    _MTLMessageContextPush_();
  if (objc_msgSend(a1, "tileWidth", v96, v106) && objc_msgSend(a1, "tileWidth") != 16)
  {
    v79 = 0;
  }
  else
  {
    v78 = objc_msgSend(a1, "tileWidth");
    v79 = v78 == objc_msgSend(a1, "tileHeight");
  }
  if (v62 == 8 && !v79)
    _MTLMessageContextPush_();
  if (objc_msgSend(a1, "visibilityResultBuffer")
    && (void *)objc_msgSend((id)objc_msgSend(a1, "visibilityResultBuffer"), "device") != a2)
  {
    _MTLMessageContextPush_();
  }
  if (*(_QWORD *)(objc_msgSend(a1, "_descriptorPrivate") + 128)
    && *(_QWORD *)(objc_msgSend(a1, "_descriptorPrivate") + 128) != v63)
  {
    v97 = *(_QWORD *)(objc_msgSend(a1, "_descriptorPrivate") + 128);
    v107 = v63;
    _MTLMessageContextPush_();
  }
  for (i = 0; i != 4; ++i)
  {
    v81 = (void *)objc_msgSend((id)objc_msgSend(a1, "sampleBufferAttachments", v97, v107), "objectAtIndexedSubscript:", i);
    if (objc_msgSend(v81, "sampleBuffer"))
    {
      if (objc_msgSend(a2, "supportsCounterSampling:", 0))
      {
        v82 = objc_msgSend((id)objc_msgSend(v81, "sampleBuffer"), "sampleCount");
        if (objc_msgSend(v81, "startOfVertexSampleIndex") != -1
          && objc_msgSend(v81, "startOfVertexSampleIndex") >= (unint64_t)v82)
        {
          v97 = objc_msgSend(v81, "startOfVertexSampleIndex");
          v107 = v82;
          _MTLMessageContextPush_();
        }
        if (objc_msgSend(v81, "endOfVertexSampleIndex", v97) != -1
          && objc_msgSend(v81, "endOfVertexSampleIndex") >= (unint64_t)v82)
        {
          v98 = objc_msgSend(v81, "endOfVertexSampleIndex");
          v107 = v82;
          _MTLMessageContextPush_();
        }
        if (objc_msgSend(v81, "startOfFragmentSampleIndex", v98) != -1
          && objc_msgSend(v81, "startOfFragmentSampleIndex") >= (unint64_t)v82)
        {
          v99 = objc_msgSend(v81, "startOfFragmentSampleIndex");
          v107 = v82;
          _MTLMessageContextPush_();
        }
        if (objc_msgSend(v81, "endOfFragmentSampleIndex", v99) != -1
          && objc_msgSend(v81, "endOfFragmentSampleIndex") >= (unint64_t)v82)
        {
          v97 = objc_msgSend(v81, "endOfFragmentSampleIndex");
          v107 = v82;
          _MTLMessageContextPush_();
        }
      }
      else
      {
        if (objc_msgSend(v81, "startOfVertexSampleIndex") != -1)
          _MTLMessageContextPush_();
        if (objc_msgSend(v81, "endOfVertexSampleIndex") != -1)
          _MTLMessageContextPush_();
        if (objc_msgSend(v81, "startOfFragmentSampleIndex") != -1)
          _MTLMessageContextPush_();
        if (objc_msgSend(v81, "endOfFragmentSampleIndex") != -1)
          _MTLMessageContextPush_();
      }
    }
  }
  _MTLMessageContextEnd();
  return std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table((uint64_t)v122);
}

void sub_22CE08390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

unint64_t validateComputePassDescriptor(void *a1, void *a2)
{
  uint64_t i;
  void *v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  for (i = 0; i != 4; ++i)
  {
    v5 = (void *)objc_msgSend((id)objc_msgSend(a1, "sampleBufferAttachments", v8, v9), "objectAtIndexedSubscript:", i);
    result = objc_msgSend(v5, "sampleBuffer");
    if (!result)
      continue;
    if (objc_msgSend(a2, "supportsCounterSampling:", 0))
    {
      v7 = objc_msgSend((id)objc_msgSend(v5, "sampleBuffer"), "sampleCount");
      if (objc_msgSend(v5, "startOfEncoderSampleIndex") != -1
        && objc_msgSend(v5, "startOfEncoderSampleIndex") >= (unint64_t)v7)
      {
        v8 = objc_msgSend(v5, "startOfEncoderSampleIndex");
        v9 = v7;
        _MTLMessageContextPush_();
      }
      result = objc_msgSend(v5, "endOfEncoderSampleIndex", v8, v9);
      if (result != -1)
      {
        result = objc_msgSend(v5, "endOfEncoderSampleIndex");
        if (result >= v7)
        {
          v8 = objc_msgSend(v5, "endOfEncoderSampleIndex");
          v9 = v7;
LABEL_15:
          result = _MTLMessageContextPush_();
          continue;
        }
      }
    }
    else
    {
      if (objc_msgSend(v5, "startOfEncoderSampleIndex") != -1)
        _MTLMessageContextPush_();
      result = objc_msgSend(v5, "endOfEncoderSampleIndex");
      if (result != -1)
        goto LABEL_15;
    }
  }
  return result;
}

double validateStoreLoadTransition(int a1, _QWORD *a2, MTLRenderPassAttachmentDescriptorPrivate *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  NSRange *v11;
  NSRange *v12;
  NSRange *v13;
  NSRange *v14;
  BOOL v15;
  uint64_t i;
  uint64_t v18;
  _NSRange sliceRange;
  double result;
  char v21;
  AttachmentDescriptorSimple v22;

  AttachmentDescriptorSimple::AttachmentDescriptorSimple(&v22, a3, a3->var5, a6);
  v11 = std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__equal_range_multi<AttachmentDescriptorSimple>(a2, (NSRange *)&v22);
  if (v11 != v12)
  {
    v13 = v11;
    v14 = v12;
    do
    {
      if (v13[4].location)
        v15 = 0;
      else
        v15 = a3->var4 == 1;
      if (v15)
      {
        if (!objc_msgSend(a3->var0, "label"))
          objc_msgSend(MEMORY[0x24BDBCEF8], "null");
        MTLReportFailure();
      }
      v13 = (NSRange *)v13->location;
    }
    while (v13 != v14);
  }
  std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__emplace_multi<AttachmentDescriptorSimple const&>(a2, (uint64_t)&v22);
  for (i = 0; i != 448; i += 56)
  {
    if (AttachmentDescriptorSimple::equal_t::operator()((uint64_t)&v21, (NSRange *)(a4 + i), (NSRange *)&v22)
      && *(_QWORD *)(a4 + i + 48) == 1
      && a3->var4 == 0)
    {
      if (!objc_msgSend(a3->var0, "label"))
        objc_msgSend(MEMORY[0x24BDBCEF8], "null");
      MTLReportFailure();
    }
  }
  v18 = a5 + 56 * a1;
  sliceRange = v22.sliceRange;
  *(_OWORD *)v18 = *(_OWORD *)&v22.texture;
  *(_NSRange *)(v18 + 16) = sliceRange;
  result = *(double *)&v22.depthPlaneRange.location;
  *(_NSRange *)(v18 + 32) = v22.depthPlaneRange;
  *(_QWORD *)(v18 + 48) = v22.storeAction;
  return result;
}

void validateAttachmentOnDevice(void *a1, id *a2, unint64_t a3, uint64_t *a4, uint64_t a5, _BYTE *a6, _BYTE *a7, char a8, _BYTE *a9)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  __CFString *v20;
  unint64_t v21;
  __CFString *v22;
  uint64_t v23;
  __CFString *v24;
  _QWORD *v25;
  unint64_t v26;
  __CFString *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  if ((void *)objc_msgSend(*a2, "device") != a1)
    _MTLMessageContextPush_();
  objc_msgSend(*a2, "pixelFormat");
  MTLPixelFormatGetInfoForDevice();
  if (objc_msgSend(*a2, "storageMode") == 3)
  {
    if (objc_msgSend(*a2, "textureType") != 2
      && objc_msgSend(*a2, "textureType") != 4
      && objc_msgSend(*a2, "textureType") != 3
      && objc_msgSend(*a2, "textureType") != 8)
    {
      _MTLMessageContextPush_();
    }
    if (((unint64_t)a2[4] | 2) != 2)
      _MTLMessageContextPush_();
    v13 = (unint64_t)a2[5];
    if (v13 > 4 || ((1 << v13) & 0x15) == 0)
      _MTLMessageContextPush_();
  }
  if (a3 <= 7)
    v32 = a3;
  _MTLMessageContextPush_();
  if (!objc_msgSend(*a2, "textureType", 0, v32))
    _MTLMessageContextPush_();
  if (objc_msgSend(*a2, "textureType") == 1)
    _MTLMessageContextPush_();
  if (objc_msgSend(*a2, "textureType") == 9)
    _MTLMessageContextPush_();
  v14 = objc_msgSend(*a2, "numFaces");
  v15 = objc_msgSend(*a2, "arrayLength");
  v16 = v15 * v14;
  if ((unint64_t)a2[2] >= v15 * v14)
  {
    v33 = a3;
    v36 = v15 * v14;
    v28 = a2[2];
    _MTLMessageContextPush_();
  }
  v17 = (unint64_t)a2[1];
  if (v17 >= objc_msgSend(*a2, "mipmapLevelCount", v28, v33, v36))
  {
    v25 = a2[1];
    v34 = a3;
    v37 = objc_msgSend(*a2, "mipmapLevelCount");
    v29 = v25;
    _MTLMessageContextPush_();
  }
  objc_msgSend(*a2, "pixelFormat", v29, v34, v37);
  objc_msgSend(*a2, "width");
  objc_msgSend(*a2, "height");
  objc_msgSend(*a2, "depth");
  objc_msgSend(*a2, "sampleCount");
  MTLGetTextureLevelInfoForDeviceWithOptions();
  v35 = 0;
  v38 = a2[1];
  v30 = (uint64_t)a2[3];
  _MTLMessageContextPush_();
  if (a5)
  {
    if (objc_msgSend(*a2, "textureType", v30, 0, v38) == 7)
    {
      if ((char *)a2[3] + a5)
      {
        v35 = 0;
        v38 = a2[1];
        v30 = (uint64_t)a2[3] + a5;
        _MTLMessageContextPush_();
      }
      v18 = a6;
    }
    else
    {
      if ((unint64_t)a2[2] + a5 > v16)
      {
        v30 = (uint64_t)a2[2] + a5;
        v35 = v16;
        _MTLMessageContextPush_();
      }
      v18 = a7;
    }
    *v18 = 1;
  }
  if (((unint64_t)a2[5] & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    if (a3 == 9)
    {
      if ((objc_msgSend(a1, "supportsMSAAStencilResolve") & 1) != 0)
        goto LABEL_43;
      v19 = (unint64_t)a2[5];
      if (v19 <= 4)
      {
LABEL_41:
        v20 = off_24F7953D0[v19];
LABEL_89:
        v30 = -[__CFString UTF8String](v20, "UTF8String", v30, v35, v38);
        _MTLMessageContextPush_();
        goto LABEL_43;
      }
    }
    else
    {
      if (a3 != 8 || (objc_msgSend(a1, "supportsMSAADepthResolve") & 1) != 0)
      {
LABEL_43:
        if (!a2[14])
        {
          v26 = (unint64_t)a2[5];
          if (v26 > 4)
            v27 = CFSTR("Unknown");
          else
            v27 = off_24F7953D0[v26];
          v30 = -[__CFString UTF8String](v27, "UTF8String", v30);
          v35 = a3;
          _MTLMessageContextPush_();
        }
        goto LABEL_44;
      }
      v19 = (unint64_t)a2[5];
      if (v19 < 5)
        goto LABEL_41;
    }
    v20 = CFSTR("Unknown");
    goto LABEL_89;
  }
LABEL_44:
  if (a3 == 8)
  {
    if (a2[18] && (objc_msgSend(a1, "supportsMSAADepthResolveFilter") & 1) == 0)
    {
      v21 = (unint64_t)a2[18];
      if (v21 > 2)
        v22 = CFSTR("Unknown");
      else
        v22 = off_24F7953F8[v21];
      v30 = -[__CFString UTF8String](v22, "UTF8String", v30, v35);
      goto LABEL_92;
    }
  }
  else if (a3 == 9 && a2[13] == (id)1 && (objc_msgSend(a1, "supportsMSAAStencilResolveFilter") & 1) == 0)
  {
LABEL_92:
    _MTLMessageContextPush_();
  }
  _MTLGetAttachmentSize();
  v23 = objc_msgSend(*a2, "sampleCount");
  if (!*a4 || v23 == *a4)
    *a4 = v23;
  else
    *a9 = 0;
  if ((objc_msgSend(a1, "supportsRenderToLinearTextures", v30) & 1) == 0 && objc_msgSend(*a2, "buffer"))
  {
    v31 = a3;
    _MTLMessageContextPush_();
  }
  if (a2[14])
  {
    if ((char *)a2[5] - 2 >= (char *)3)
      _MTLMessageContextPush_();
    if (objc_msgSend(*a2, "textureType", v31) != 4 && objc_msgSend(*a2, "textureType") != 8)
      _MTLMessageContextPush_();
    if ((unint64_t)objc_msgSend(*a2, "sampleCount") <= 1)
    {
      objc_msgSend(*a2, "sampleCount");
      _MTLMessageContextPush_();
    }
    _MTLValidateResolveTextureWithContext(a1, (uint64_t *)a2[14], a3, 0, 0, (unint64_t)a2[16], (uint64_t)a2[17], (unint64_t)a2[15], *a2, a8);
  }
  if (((_BYTE)a2[6] & 1) != 0)
  {
    if (a3 == 8)
      v24 = CFSTR("the depth attachment");
    else
      v24 = CFSTR("the stencil attachment");
    if ((a3 & 0xFFFFFFFFFFFFFFFELL) != 8)
      v24 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithFormat:", CFSTR("color attachment %lu"), a3);
    if ((objc_msgSend(a1, "areProgrammableSamplePositionsSupported", v31) & 1) == 0)
      _MTLMessageContextPush_();
    switch((unint64_t)a2[5])
    {
      case 1uLL:
      case 3uLL:
      case 4uLL:
        break;
      default:
        _MTLMessageContextPush_();
        break;
    }

  }
}

void AttachmentDescriptorSimple::AttachmentDescriptorSimple(AttachmentDescriptorSimple *this, const MTLRenderPassAttachmentDescriptorPrivate *a2, unint64_t a3, unint64_t a4)
{
  NSUInteger var2;
  unint64_t var1;
  id var0;
  uint64_t v11;
  void *v12;
  NSUInteger v13;

  var1 = a2->var1;
  var2 = a2->var2;
  var0 = a2->var0;
  v11 = objc_msgSend(a2->var0, "parentTexture");
  if (v11)
  {
    do
    {
      v12 = (void *)v11;
      var1 += objc_msgSend(var0, "parentRelativeLevel");
      var2 += objc_msgSend(var0, "parentRelativeSlice");
      v11 = objc_msgSend(v12, "parentTexture");
      var0 = v12;
    }
    while (v11);
  }
  else
  {
    v12 = var0;
  }
  this->storeAction = a3;
  this->texture = v12;
  this->level = var1;
  if (a4 <= 1)
    v13 = 1;
  else
    v13 = a4;
  this->sliceRange.location = var2;
  this->sliceRange.length = v13;
  this->depthPlaneRange.location = a2->var3;
  this->depthPlaneRange.length = v13;
}

NSRange *std::__hash_table<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,std::__unordered_map_hasher<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,true>,std::__unordered_map_equal<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::equal_t,AttachmentDescriptorSimple::hash_t,true>,std::allocator<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>>>::find<AttachmentDescriptorSimple>(_QWORD *a1, NSRange *a2)
{
  int8x8_t v2;
  NSUInteger v4;
  uint8x8_t v5;
  unint64_t v6;
  NSUInteger v7;
  NSRange **v8;
  NSRange *v9;
  uint64_t v10;
  NSUInteger length;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v4 = a2->length ^ a2->location;
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = a2->length ^ a2->location;
    if (v4 >= *(_QWORD *)&v2)
      v7 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v4;
  }
  v8 = *(NSRange ***)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  v9 = *v8;
  if (*v8)
  {
    v10 = (uint64_t)(a1 + 4);
    do
    {
      length = v9->length;
      if (length == v4)
      {
        if (AttachmentDescriptorSimple::equal_t::operator()(v10, v9 + 1, a2))
          return v9;
      }
      else
      {
        if (v6 > 1)
        {
          if (length >= *(_QWORD *)&v2)
            length %= *(_QWORD *)&v2;
        }
        else
        {
          length &= *(_QWORD *)&v2 - 1;
        }
        if (length != v7)
          return 0;
      }
      v9 = (NSRange *)v9->location;
    }
    while (v9);
  }
  return v9;
}

BOOL AttachmentDescriptorSimple::equal_t::operator()(uint64_t a1, NSRange *a2, NSRange *a3)
{
  NSUInteger length;
  NSRange v6;
  BOOL v7;
  NSRange v9;

  if (a2->location != a3->location || a2->length != a3->length)
    return 0;
  v9.location = a3[1].location;
  v9.length = a3[1].length;
  length = NSIntersectionRange(a2[16], v9).length;
  v6 = NSIntersectionRange(a2[2], a3[2]);
  if (length)
    v7 = v6.length == 0;
  else
    v7 = 1;
  return !v7;
}

NSRange *std::__hash_table<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,std::__unordered_map_hasher<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,true>,std::__unordered_map_equal<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::equal_t,AttachmentDescriptorSimple::hash_t,true>,std::allocator<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>>>::__emplace_unique_key_args<AttachmentDescriptorSimple,std::piecewise_construct_t const&,std::tuple<AttachmentDescriptorSimple const&>,std::tuple<>>(uint64_t a1, NSRange *a2, uint64_t a3, NSRange **a4)
{
  NSUInteger v4;
  NSUInteger v7;
  unint64_t v8;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  NSRange *v13;
  unint64_t length;
  NSRange v15;
  NSRange v16;
  NSRange v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  NSRange **v25;
  unint64_t v26;

  v7 = a2->length ^ a2->location;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2->length ^ a2->location;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (NSRange *)*v12;
      if (*v12)
      {
        do
        {
          length = v13->length;
          if (length == v7)
          {
            if (AttachmentDescriptorSimple::equal_t::operator()(a1 + 32, v13 + 1, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (length >= v8)
                length %= v8;
            }
            else
            {
              length &= v8 - 1;
            }
            if (length != v4)
              break;
          }
          v13 = (NSRange *)v13->location;
        }
        while (v13);
      }
    }
  }
  v13 = (NSRange *)operator new(0x50uLL);
  v13->location = 0;
  v13->length = v7;
  v16 = (*a4)[1];
  v15 = (*a4)[2];
  v17 = **a4;
  v13[4].location = (*a4)[3].location;
  v13[2] = v16;
  v13[3] = v15;
  v13[1] = v17;
  LODWORD(v13[4].length) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v8 || (float)(v19 * (float)v8) < v18)
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v23);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(NSRange ***)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    v13->location = (NSUInteger)*v25;
LABEL_38:
    *v25 = v13;
    goto LABEL_39;
  }
  v13->location = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v24 + 8 * v4) = a1 + 16;
  if (v13->location)
  {
    v26 = *(_QWORD *)(v13->location + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8)
        v26 %= v8;
    }
    else
    {
      v26 &= v8 - 1;
    }
    v25 = (NSRange **)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_22CE0BFB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

NSRange *std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__equal_range_multi<AttachmentDescriptorSimple>(_QWORD *a1, NSRange *a2)
{
  NSRange *v4;
  NSRange *v5;
  uint64_t v6;
  NSRange *v7;

  v4 = std::__hash_table<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,std::__unordered_map_hasher<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,true>,std::__unordered_map_equal<AttachmentDescriptorSimple,std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>,AttachmentDescriptorSimple::equal_t,AttachmentDescriptorSimple::hash_t,true>,std::allocator<std::__hash_value_type<AttachmentDescriptorSimple,unsigned int>>>::find<AttachmentDescriptorSimple>(a1, a2);
  v5 = v4;
  if (v4)
  {
    v6 = (uint64_t)(a1 + 4);
    v7 = v4;
    do
      v7 = (NSRange *)v7->location;
    while (v7 && AttachmentDescriptorSimple::equal_t::operator()(v6, v7 + 1, a2));
  }
  return v5;
}

_QWORD *std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__emplace_multi<AttachmentDescriptorSimple const&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  unint64_t v6;
  NSRange *inserted;

  v4 = operator new(0x48uLL);
  v5 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
  *((_OWORD *)v4 + 2) = v5;
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 32);
  v4[8] = *(_QWORD *)(a2 + 48);
  v6 = v4[3] ^ v4[2];
  *v4 = 0;
  v4[1] = v6;
  inserted = std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__node_insert_multi_prepare((uint64_t)a1, v6, (NSRange *)v4 + 1);
  std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__node_insert_multi_perform(a1, v4, inserted);
  return v4;
}

void sub_22CE0C0A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

NSRange *std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, NSRange *a3)
{
  uint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  NSRange *v17;
  NSRange *location;
  int v19;
  NSUInteger length;
  NSUInteger v21;
  _BOOL4 v22;

  v6 = a1 + 32;
  v7 = *(float *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    v10 = 1;
    if (v8 >= 3)
      v10 = (v8 & (v8 - 1)) != 0;
    v11 = v10 | (2 * v8);
    v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__rehash<false>(a1, v13);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    v16 = a2;
    if (v8 <= a2)
      v16 = a2 % v8;
  }
  else
  {
    v16 = (v8 - 1) & a2;
  }
  v17 = *(NSRange **)(*(_QWORD *)a1 + 8 * v16);
  if (v17)
  {
    location = (NSRange *)v17->location;
    if (v17->location)
    {
      v19 = 0;
      do
      {
        length = location->length;
        if (v15 > 1)
        {
          v21 = location->length;
          if (length >= v8)
            v21 = length % v8;
        }
        else
        {
          v21 = length & (v8 - 1);
        }
        if (v21 != v16)
          break;
        v22 = length == a2 && AttachmentDescriptorSimple::equal_t::operator()(v6, location + 1, a3);
        if ((v19 & !v22 & 1) != 0)
          break;
        v19 |= v22;
        v17 = (NSRange *)v17->location;
        location = (NSRange *)v17->location;
      }
      while (v17->location);
    }
  }
  return v17;
}

_QWORD *std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__rehash<false>(uint64_t a1, size_t __n)
{
  NSUInteger prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::__do_rehash<false>(uint64_t a1, NSUInteger a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  NSRange *v7;
  NSUInteger length;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  NSRange *location;
  NSUInteger v13;
  NSRange *v14;
  NSRange *v15;
  _BOOL4 v16;
  NSRange *v17;
  unint64_t v18;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(NSRange **)(a1 + 16);
    if (v7)
    {
      length = v7->length;
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (length >= a2)
          length %= a2;
      }
      else
      {
        length &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * length) = a1 + 16;
      location = (NSRange *)v7->location;
      if (v7->location)
      {
        v18 = v9.u32[0];
        do
        {
          v13 = location->length;
          if (v10 > 1)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == length)
          {
            v7 = location;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
          {
            v14 = (NSRange *)location->location;
            if (location->location)
            {
              v15 = location;
              while (1)
              {
                v16 = AttachmentDescriptorSimple::equal_t::operator()(a1 + 32, location + 1, v14 + 1);
                v17 = (NSRange *)v15->location;
                if (!v16)
                  break;
                v14 = (NSRange *)v17->location;
                v15 = (NSRange *)v15->location;
                if (!v17->location)
                  goto LABEL_32;
              }
              v14 = (NSRange *)v15->location;
              v17 = v15;
LABEL_32:
              v10 = v18;
            }
            else
            {
              v17 = location;
            }
            v7->location = (NSUInteger)v14;
            v17->location = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = location;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = location;
            length = v13;
          }
          location = (NSRange *)v7->location;
        }
        while (v7->location);
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

const char *initLifetimeOptions(void)::$_0::__invoke()
{
  const char *result;

  result = getenv("MTL_DEBUG_LAYER_VALIDATE_UNRETAINED_RESOURCES");
  if (result)
  {
    result = (const char *)atoi(result);
    checkLifetimeOfExternallyReferencedObjects = result & 1;
    checkLifetimeOfInternallyReferencedObjects = (result & 2) != 0;
    checkLifetimeBeforeCommit = (result & 4) != 0;
  }
  return result;
}

_QWORD *std::__hash_table<AttachmentDescriptorSimple,AttachmentDescriptorSimple::hash_t,AttachmentDescriptorSimple::equal_t,std::allocator<AttachmentDescriptorSimple>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

_QWORD *std::__hash_table<objc_object  {objcproto25MTLDebugResourcePurgeable}*,std::hash<objc_object  {objcproto25MTLDebugResourcePurgeable}>,std::equal_to<objc_object  {objcproto25MTLDebugResourcePurgeable}>,std::allocator<objc_object  {objcproto25MTLDebugResourcePurgeable}>>::__emplace_unique_key_args<objc_object  {objcproto25MTLDebugResourcePurgeable},objc_object  {objcproto25MTLDebugResourcePurgeable}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CE0C8A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::__emplace_unique_key_args<MTLToolsObject *,MTLToolsObject * const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CE0CAF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::swap(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  v5 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = *(void **)a2;
  *(_QWORD *)a2 = v4;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v11;
  v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  if (*(_QWORD *)(a1 + 24))
  {
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14)
        v15 %= v14;
    }
    else
    {
      v15 &= v14 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
  }
  if (v11)
  {
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16)
        v17 %= v16;
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v17) = a2 + 16;
  }
}

uint64_t *std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::__erase_unique<MTLToolsObject *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::find<MTLToolsObject *>(a1, a2);
  if (result)
  {
    std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::find<MTLToolsObject *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void emitComputePipelineUsage(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _DWORD *v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  int v19;
  NSObject *v20;
  int v21;
  int v22;
  uint64_t v23;
  void *context;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    v6 = (_DWORD *)MEMORY[0x24BDDDAC8];
    while (1)
    {
      v7 = *((_DWORD *)v5 + 6);
      if (v7)
      {
        if (!*v6)
          goto LABEL_7;
        if (*v6 == 1)
          break;
      }
LABEL_9:
      v5 = (uint64_t *)*v5;
      if (!v5)
        goto LABEL_10;
    }
    printf("\n\nComputePipelineUsage, pipelineID=%u, kernelID=%u, usageCount=%u", *((_DWORD *)v5 + 4), *((_DWORD *)v5 + 5), v7);
LABEL_7:
    v8 = objc_msgSend(a1, "telemetryLog");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *((_DWORD *)v5 + 4);
      v10 = *((_DWORD *)v5 + 5);
      v11 = *((_DWORD *)v5 + 6);
      *(_DWORD *)buf = 67109632;
      v30 = v9;
      v31 = 1024;
      v32 = v10;
      v33 = 1024;
      LODWORD(v34) = v11;
      _os_log_impl(&dword_22CD98000, v8, OS_LOG_TYPE_DEFAULT, "ComputePipelineUsage, pipelineID=%u, kernelID=%u, usageCount=%u", buf, 0x14u);
    }
    goto LABEL_9;
  }
LABEL_10:
  context = (void *)MEMORY[0x22E309364]();
  v12 = *(uint64_t **)(a3 + 16);
  if (v12)
  {
    while (1)
    {
      v13 = (void *)objc_msgSend(MEMORY[0x24BDD16A8], "string");
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v14 = (void *)v12[4];
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v25, v35, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v26;
        do
        {
          for (i = 0; i != v16; ++i)
          {
            if (*(_QWORD *)v26 != v17)
              objc_enumerationMutation(v14);
            objc_msgSend(v13, "appendFormat:", CFSTR("%s=%u, "), objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * i), "UTF8String"), objc_msgSend((id)objc_msgSend((id)v12[4], "objectForKey:", *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * i)), "unsignedIntegerValue"));
          }
          v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v25, v35, 16);
        }
        while (v16);
      }
      if ((unint64_t)objc_msgSend(v13, "length") >= 2)
        objc_msgSend(v13, "deleteCharactersInRange:", objc_msgSend(v13, "length") - 2, 2);
      v19 = *((_DWORD *)v12 + 6);
      if (!v19)
        goto LABEL_26;
      if (!*MEMORY[0x24BDDDAC8])
        goto LABEL_24;
      if (*MEMORY[0x24BDDDAC8] == 1)
        break;
LABEL_26:
      v12 = (uint64_t *)*v12;
      if (!v12)
        goto LABEL_27;
    }
    printf("\n\nKernelUsage, kernelID=%u, usageCount=%u%s", *((_DWORD *)v12 + 4), v19, (const char *)objc_msgSend(v13, "UTF8String"));
LABEL_24:
    v20 = objc_msgSend(a1, "telemetryLog");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *((_DWORD *)v12 + 4);
      v22 = *((_DWORD *)v12 + 6);
      v23 = objc_msgSend(v13, "UTF8String");
      *(_DWORD *)buf = 67109634;
      v30 = v21;
      v31 = 1024;
      v32 = v22;
      v33 = 2080;
      v34 = v23;
      _os_log_impl(&dword_22CD98000, v20, OS_LOG_TYPE_DEFAULT, "KernelUsage, kernelID=%u, usageCount=%u%s", buf, 0x18u);
    }
    goto LABEL_26;
  }
LABEL_27:
  objc_autoreleasePoolPop(context);
}

void emitComputePipelineStats(void *a1, uint64_t a2, _DWORD *a3)
{
  void *v6;
  uint64_t *i;
  _QWORD *v8;
  _DWORD *v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint8_t buf[4];
  _BYTE v18[10];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v6 = (void *)objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("ComputeFunctionStats, "));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v8 = i + 2;
    if (*((char *)i + 39) < 0)
      v8 = (_QWORD *)*v8;
    objc_msgSend(v6, "appendFormat:", CFSTR("min%s=%u, max%s=%u, avg%s=%f, total%s=%llu, count%s=%u, "), v8, *((unsigned int *)i + 10), v8, *((unsigned int *)i + 11), v8, (float)((float)(unint64_t)i[6] / (float)*((unsigned int *)i + 14)), v8, i[6], v8, *((unsigned int *)i + 14));
  }
  objc_msgSend(v6, "deleteCharactersInRange:", objc_msgSend(v6, "length") - 2, 2);
  v9 = (_DWORD *)MEMORY[0x24BDDDAC8];
  if (*MEMORY[0x24BDDDAC8])
  {
    if (*MEMORY[0x24BDDDAC8] != 1)
      goto LABEL_10;
    printf("\n\n%s", (const char *)objc_msgSend(v6, "UTF8String"));
  }
  v10 = objc_msgSend(a1, "telemetryLog");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v18 = objc_msgSend(v6, "UTF8String");
    _os_log_impl(&dword_22CD98000, v10, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
LABEL_10:
  if (!*a3)
    return;
  if (*v9)
  {
    if (*v9 != 1)
      return;
    printf("\n\nComputePipeline, total=%u, kernelRegisterSpill=%u, threadgroupBarrier=%u, deviceMemoryAtomics=%u, threadgroupMemoryAtomics=%u", *a3, a3[1], a3[2], a3[3], a3[4]);
  }
  v11 = objc_msgSend(a1, "telemetryLog");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *a3;
    v13 = a3[1];
    v14 = a3[2];
    v15 = a3[3];
    v16 = a3[4];
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)v18 = v12;
    *(_WORD *)&v18[4] = 1024;
    *(_DWORD *)&v18[6] = v13;
    v19 = 1024;
    v20 = v14;
    v21 = 1024;
    v22 = v15;
    v23 = 1024;
    v24 = v16;
    _os_log_impl(&dword_22CD98000, v11, OS_LOG_TYPE_DEFAULT, "ComputePipeline, total=%u, kernelRegisterSpill=%u, threadgroupBarrier=%u, deviceMemoryAtomics=%u, threadgroupMemoryAtomics=%u", buf, 0x20u);
  }
}

void sub_22CE116B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_QWORD *)((char *)v11 + 20) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_22CE118F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v11[4] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_22CE11B14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_22CE11D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_22CE11E4C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t validateArg(MTLArgumentType a1, unint64_t a2, MTLDebugFunctionArgument *a3)
{
  uint64_t result;

  result = MTLReportFailureTypeEnabled();
  if ((_DWORD)result && a3->isValid && !a3->hasBeenUsed)
  {
    argumentTypeToString(a1);
    return MTLReportFailure();
  }
  return result;
}

void sub_22CE13D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t validateBuiltinArguments(MTLDebugComputePipelineState *a1, MTLSize *a2, MTLSize *a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSUInteger v8;
  unint64_t *maxThreadPositionInGrid;
  const __CFString *v10;
  NSUInteger v11;
  uint64_t i;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  id obj;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  NSUInteger depth;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = (id)-[MTLComputePipelineReflection builtInArguments](-[MTLDebugComputePipelineState reflection](a1, "reflection"), "builtInArguments");
  result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v25;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v25 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * v6);
        v28 = xmmword_22CEAB6B8;
        depth = 1;
        switch(objc_msgSend(v7, "builtInType", v15, v16, v17, v18, v19))
        {
          case 5:
            v8 = a3->height * a2->height;
            maxThreadPositionInGrid = a1->_maxThreadPositionInGrid;
            *(_QWORD *)&v28 = a3->width * a2->width;
            *((_QWORD *)&v28 + 1) = v8;
            depth = a3->depth * a2->depth;
            v10 = CFSTR("thread_position_in_grid");
            goto LABEL_16;
          case 6:
            v11 = a3->height * a2->height;
            maxThreadPositionInGrid = a1->_maxThreadsPerGrid;
            *(_QWORD *)&v28 = a3->width * a2->width;
            *((_QWORD *)&v28 + 1) = v11;
            depth = a3->depth * a2->depth;
            v10 = CFSTR("threads_per_grid");
            goto LABEL_16;
          case 7:
            maxThreadPositionInGrid = a1->_maxThreadPositionInThreadgroup;
            v28 = *(_OWORD *)&a2->width;
            depth = a2->depth;
            v10 = CFSTR("thread_position_in_threadgroup");
            goto LABEL_16;
          case 8:
            maxThreadPositionInGrid = a1->_maxThreadIndexInThreadgroup;
            v28 = a2->height * a2->width * a3->depth;
            depth = 0;
            v10 = CFSTR("thread_index_in_threadgroup");
            goto LABEL_16;
          case 9:
            maxThreadPositionInGrid = a1->_maxThreadsPerThreadgroup;
            v28 = *(_OWORD *)&a2->width;
            depth = a2->depth;
            v10 = CFSTR("threads_per_threadgroup");
            goto LABEL_16;
          case 10:
            maxThreadPositionInGrid = a1->_maxThreadgroupPositionInGrid;
            v28 = *(_OWORD *)&a3->width;
            depth = a3->depth;
            v10 = CFSTR("threadgroup_position_in_grid");
            goto LABEL_16;
          case 11:
            maxThreadPositionInGrid = a1->_maxThreadgroupsPerGrid;
            v28 = *(_OWORD *)&a3->width;
            depth = a3->depth;
            v10 = CFSTR("threadgroups_per_grid");
LABEL_16:
            for (i = 0; i != 3; ++i)
            {
              v13 = *((_QWORD *)&v28 + i);
              v14 = maxThreadPositionInGrid[i];
              if (v13 > v14)
              {
                v18 = objc_msgSend(v7, "name");
                v19 = v10;
                v16 = v13;
                v17 = v14;
                v15 = i;
                MTLReportFailure();
              }
            }
            break;
          case 12:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
            break;
          default:
            v15 = objc_msgSend(v7, "name");
            MTLReportFailure();
            break;
        }
        ++v6;
      }
      while (v6 != v4);
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

unint64_t validateComputeFunctionArguments(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  MTLArgumentType v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  int v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  const __CFString *v63;
  const char *v64;
  unint64_t result;
  const __CFString *v66;
  const __CFString *v67;
  const __CFString *v68;
  const __CFString *v69;
  const __CFString *v70;
  const __CFString *v71;
  const __CFString *v72;
  const __CFString *v73;
  const __CFString *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t Name;
  const char *v87;
  uint64_t v88;
  const char *v89;
  const char *v90;
  const char *v91;
  const char *v92;
  const char *v93;
  const char *v94;
  uint64_t v95;
  const __CFString *v96;
  const char *v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  const char *v102;
  void *v103;
  id obj;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  char v110;
  uint64_t v115;
  _BYTE v116[12];
  uint64_t v117;
  const char *v118;
  const char *v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  _BYTE *v124;
  uint64_t v125;
  void *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _BYTE v131[128];
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  v14 = objc_msgSend(a1, "requiresRaytracingEmulation");
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  obj = a3;
  v107 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v127, v131, 16);
  v103 = a1;
  if (v107)
  {
    *(_DWORD *)&v116[8] = 0;
    *(_QWORD *)v116 = a11;
    v15 = 5;
    if (v14)
      v15 = 6;
    v108 = a7;
    v109 = v15;
    v105 = ~(unint64_t)a7;
    v106 = *(_QWORD *)v128;
    v110 = v14;
    do
    {
      v16 = 0;
      do
      {
        v17 = a7;
        if (*(_QWORD *)v128 != v106)
          objc_enumerationMutation(obj);
        v18 = *(void **)(*((_QWORD *)&v127 + 1) + 8 * v16);
        v115 = v16;
        if (objc_msgSend(v18, "isActive", v66, v75, v84, v93, v94, v95, v96, v97))
        {
          v19 = objc_msgSend(v18, "type");
          v20 = objc_msgSend(v18, "name");
          v21 = objc_msgSend(v18, "arrayLength");
          v22 = objc_msgSend(v18, "index");
          if (v21)
          {
            v102 = (const char *)v20;
            v23 = v19 > MTLArgumentTypeIntersectionFunctionTable || ((1 << v19) & 0xF03000F) == 0;
            if (!v23)
            {
              v24 = v22;
              v25 = v21;
              v26 = 0;
              v27 = a6;
              v28 = a8;
              v30 = a4;
              v29 = a5;
              v125 = 88 * v22;
              v126 = v18;
              a7 = v17;
              v31 = 88 * v22;
              v121 = v22;
              v122 = v25;
              while (2)
              {
                v32 = (uint64_t)&v26[v24];
                switch(v19)
                {
                  case MTLArgumentTypeBuffer:
                    v33 = (_BYTE *)(v30 + v31);
                    if ((a11 & 1) != 0)
                      goto LABEL_17;
                    if (!*v33)
                    {
                      v94 = v102;
                      v95 = (uint64_t)v26;
                      v84 = "buffer";
                      v93 = &v26[v24];
                      v66 = CFSTR("Compute");
                      v75 = a2;
                      MTLReportFailure();
                      v25 = v122;
                      v33 = (_BYTE *)(v30 + v31);
LABEL_17:
                      if (!*v33)
                        goto LABEL_113;
                    }
                    v123 = v33;
                    v52 = v30 + v31;
                    v53 = *(_QWORD *)(v30 + v31 + 8);
                    if (v53 == 4)
                      v54 = v110;
                    else
                      v54 = 0;
                    if (v53 && (v54 & 1) == 0)
                    {
                      v94 = v102;
                      v95 = (uint64_t)v26;
                      v84 = "buffer";
                      v93 = (const char *)v32;
                      v66 = CFSTR("Compute");
                      v75 = a2;
                      MTLReportFailure();
                    }
                    v120 = (const char *)v32;
                    v55 = *(_QWORD *)(v52 + 40);
                    v56 = objc_msgSend(v126, "bufferAlignment", v66, v75, v84);
                    if (v56 <= 1)
                      v57 = 1;
                    else
                      v57 = v56;
                    if (v55 % v57)
                    {
                      v95 = objc_msgSend(v126, "bufferAlignment");
                      v96 = *(const __CFString **)(v52 + 40);
                      v93 = "buffer";
                      v94 = v120;
                      v82 = a2;
                      v91 = v102;
                      v73 = CFSTR("Compute");
                      MTLReportFailure();
                    }
                    v58 = *(_QWORD *)(v30 + v125 + 32) - *(_QWORD *)(v52 + 40);
                    if (v58 < objc_msgSend(v126, "bufferDataSize", v73, v82, v91)
                      && objc_msgSend(v126, "bufferDataSize") != -1)
                    {
                      v63 = *(const __CFString **)(v52 + 40);
                      v64 = *(const char **)(v30 + v125 + 32);
                      objc_msgSend(v126, "bufferDataSize");
                      v96 = v63;
                      v97 = v64;
                      v94 = "buffer";
                      v95 = (uint64_t)v120;
                      v92 = v102;
                      v93 = v26;
                      v74 = CFSTR("Compute");
                      v83 = a2;
                      MTLReportFailure();
                    }
                    v31 = v125;
                    if (objc_msgSend(v126, "access", v74, v83, v92) && !*(_QWORD *)(v30 + v125 + 16))
                    {
                      v75 = a2;
                      v84 = v120;
                      v66 = CFSTR("Compute");
                      MTLReportFailure();
                    }
                    v59 = *(void **)(v30 + v125 + 16);
                    a7 = v108;
                    if (!v59)
                      goto LABEL_111;
                    if (objc_msgSend(v126, "access") != 2 && (objc_msgSend(v59, "protectionOptions") & v105) != 0)
                    {
                      v93 = (const char *)objc_msgSend(v59, "protectionOptions");
                      v94 = v108;
                      v75 = a2;
                      v84 = v120;
                      v66 = CFSTR("Compute");
                      MTLReportFailure();
                    }
                    if (!objc_msgSend(v126, "access", v66, v75, v84))
                    {
LABEL_111:
                      v24 = v121;
                      v25 = v122;
                      goto LABEL_112;
                    }
                    v60 = *(void **)(v30 + v125 + 16);
                    if (((unint64_t)v108 & ~objc_msgSend(v60, "protectionOptions")) != 0)
                    {
                      v93 = (const char *)objc_msgSend(v60, "protectionOptions");
                      v94 = v108;
                      v75 = a2;
                      v84 = v120;
                      v66 = CFSTR("Compute");
                      MTLReportFailure();
                    }
                    goto LABEL_110;
                  case MTLArgumentTypeThreadgroupMemory:
                    if (!*(_BYTE *)(v28 + v31))
                    {
                      v94 = v102;
                      v95 = (uint64_t)v26;
                      v84 = "threadgroupMemory";
                      v93 = &v26[v24];
                      v66 = CFSTR("Compute");
                      v75 = a2;
                      MTLReportFailure();
                    }
                    v42 = v28 + v31;
                    if (*(_QWORD *)(v28 + v31 + 8) != 3)
                    {
                      v94 = v102;
                      v95 = (uint64_t)v26;
                      v84 = "threadgroupMemory";
                      v93 = (const char *)v32;
                      v66 = CFSTR("Compute");
                      v75 = a2;
                      MTLReportFailure();
                    }
                    v43 = *(_QWORD *)(v42 + 56);
                    if (v43 < objc_msgSend(v126, "threadgroupMemoryDataSize", v66, v75, v84))
                    {
                      v96 = (const __CFString *)v102;
                      v97 = v26;
                      v94 = "threadgroupMemory";
                      v95 = v32;
                      v84 = *(const char **)(v42 + 56);
                      v93 = (const char *)objc_msgSend(v126, "threadgroupMemoryDataSize");
                      v66 = CFSTR("Compute");
                      v75 = a2;
                      MTLReportFailure();
                    }
                    v33 = (_BYTE *)(a8 + 88 * v32);
                    *(_QWORD *)&v116[4] += *(_QWORD *)(v42 + 56);
                    v24 = v121;
                    v25 = v122;
                    v31 = v125;
                    goto LABEL_113;
                  case MTLArgumentTypeTexture:
                    v118 = &v26[v24];
                    v33 = (_BYTE *)(a5 + 88 * v32);
                    if (*(_QWORD *)(v29 + v31 + 16))
                    {
                      v117 = v29 + v31;
                      v123 = (_BYTE *)(a5 + 88 * v32);
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) == 0)
                        MTLReportFailure();
                      v34 = v29 + v31;
                      v35 = *(_DWORD **)(v117 + 16);
                      if (!*(_BYTE *)v117)
                      {
                        v94 = v102;
                        v95 = (uint64_t)v26;
                        v84 = "texture";
                        v93 = &v26[v24];
                        v66 = CFSTR("Compute");
                        v75 = a2;
                        MTLReportFailure();
                        v34 = v29 + v31;
                      }
                      if (*(_QWORD *)(v29 + v125 + 8) != 1)
                      {
                        v94 = v102;
                        v95 = (uint64_t)v26;
                        v84 = "texture";
                        v93 = &v26[v24];
                        v66 = CFSTR("Compute");
                        v75 = a2;
                        MTLReportFailure();
                        v34 = v29 + v31;
                      }
                      v36 = objc_msgSend(*(id *)(v34 + 16), "textureType", v66, v75, v84);
                      if (v36 != objc_msgSend(v126, "textureType"))
                      {
                        objc_msgSend(*(id *)(v117 + 16), "textureType");
                        v61 = MTLTextureTypeString();
                        objc_msgSend(v126, "textureType");
                        v96 = (const __CFString *)v102;
                        v97 = v26;
                        v94 = v118;
                        v95 = MTLTextureTypeString();
                        v85 = v61;
                        v93 = "texture";
                        v67 = CFSTR("Compute");
                        v76 = a2;
                        MTLReportFailure();
                      }
                      v37 = objc_msgSend(v35, "usage", v67, v76, v85);
                      if (objc_msgSend(v126, "access"))
                      {
                        v38 = (*(_QWORD *)&v37 & 0x10000) != 0 ? 16 : 2;
                        if ((v35[20] & v38) == 0)
                        {
                          objc_msgSend(*(id *)(v117 + 16), "pixelFormat");
                          Name = MTLPixelFormatGetName();
                          v93 = v118;
                          v68 = CFSTR("Compute");
                          v77 = a2;
                          MTLReportFailure();
                        }
                      }
                      v39 = v126;
                      if (objc_msgSend(v126, "access", v68, v77, Name) && objc_msgSend(v35, "isSparse"))
                      {
                        v78 = a2;
                        v87 = v118;
                        v69 = CFSTR("Compute");
                        MTLReportFailure();
                      }
                      objc_msgSend(v126, "textureDataType", v69, v78, v87);
                      v31 = v125;
                      if ((_MTLCompatibleTextureDataTypeAndPixelFormatInfo() & 1) == 0)
                      {
                        objc_msgSend(*(id *)(v117 + 16), "pixelFormat");
                        v100 = MTLPixelFormatGetName();
                        v62 = objc_msgSend(*(id *)(v117 + 16), "label");
                        if (!v62)
                          v62 = objc_msgSend(MEMORY[0x24BDBCEF8], "null");
                        v99 = (const char *)v62;
                        objc_msgSend(v126, "textureDataType");
                        v98 = MTLDataTypeString();
                        objc_msgSend(*(id *)(v117 + 16), "pixelFormat");
                        MTLPixelFormatGetName();
                        objc_msgSend(*(id *)(v117 + 16), "pixelFormat");
                        MTLPixelFormatCompatibilityString();
                        v39 = v126;
                        v97 = "texture";
                        v95 = (uint64_t)v118;
                        v96 = (const __CFString *)v98;
                        v93 = "texture";
                        v94 = v99;
                        v79 = a2;
                        v88 = v100;
                        v70 = CFSTR("Compute");
                        MTLReportFailure();
                      }
                      if ((unint64_t)objc_msgSend(v39, "access", v70, v79, v88) <= 1
                        && (objc_msgSend(v35, "requireUsage:", 1) & 1) == 0)
                      {
                        v94 = (const char *)objc_msgSend(v35, "usage");
                        v95 = 1;
                        v89 = v102;
                        v93 = v118;
                        v71 = CFSTR("Compute");
                        v80 = a2;
                        MTLReportFailure();
                      }
                      if ((unint64_t)(objc_msgSend(v39, "access", v71, v80, v89) - 1) <= 1
                        && (objc_msgSend(v35, "requireUsage:", 2) & 1) == 0)
                      {
                        v94 = (const char *)objc_msgSend(v35, "usage");
                        v95 = 2;
                        v90 = v102;
                        v93 = v118;
                        v72 = CFSTR("Compute");
                        v81 = a2;
                        MTLReportFailure();
                      }
                      if (objc_msgSend(v39, "access", v72, v81, v90) == 1)
                      {
                        objc_msgSend(v35, "pixelFormat");
                        if ((MTLReadWriteTextureIsSupported() & 1) == 0)
                        {
                          v84 = v102;
                          v93 = v118;
                          v66 = CFSTR("Compute");
                          v75 = a2;
                          MTLReportFailure();
                        }
                      }
                      v40 = *(void **)(v117 + 16);
                      if (!v40)
                        goto LABEL_110;
                      if (objc_msgSend(v39, "access") != 2 && (objc_msgSend(v40, "protectionOptions") & v105) != 0)
                      {
                        v93 = (const char *)objc_msgSend(v40, "protectionOptions");
                        v94 = a7;
                        v75 = a2;
                        v84 = v118;
                        v66 = CFSTR("Compute");
                        MTLReportFailure();
                      }
                      if (objc_msgSend(v39, "access", v66, v75, v84))
                      {
                        v41 = *(void **)(v117 + 16);
                        v24 = v121;
                        if (((unint64_t)a7 & ~objc_msgSend(v41, "protectionOptions")) != 0)
                        {
                          v93 = (const char *)objc_msgSend(v41, "protectionOptions");
                          v94 = a7;
                          v75 = a2;
                          v84 = v118;
                          v66 = CFSTR("Compute");
                          MTLReportFailure();
                        }
                        v25 = v122;
                      }
                      else
                      {
LABEL_110:
                        v24 = v121;
                        v25 = v122;
                      }
LABEL_112:
                      v33 = v123;
                    }
                    goto LABEL_113;
                  case MTLArgumentTypeSampler:
                    if (!*(_BYTE *)(v27 + v31))
                    {
                      v94 = v102;
                      v95 = (uint64_t)v26;
                      v84 = "sampler";
                      v93 = &v26[v24];
                      v66 = CFSTR("Compute");
                      v75 = a2;
                      MTLReportFailure();
                      v25 = v122;
                    }
                    v33 = (_BYTE *)(a6 + 88 * v32);
                    if (*(_QWORD *)(v27 + v31 + 8) == 2)
                      goto LABEL_113;
                    v94 = v102;
                    v95 = (uint64_t)v26;
                    v84 = "sampler";
                    v93 = &v26[v24];
                    v66 = CFSTR("Compute");
                    v75 = a2;
                    MTLReportFailure();
                    v33 = (_BYTE *)(a6 + 88 * v32);
                    goto LABEL_84;
                  default:
                    if (v19 - 16 < 2)
                      goto LABEL_114;
                    v33 = (_BYTE *)(a4 + 88 * v32);
                    if ((a11 & 1) != 0)
                      goto LABEL_21;
                    if (*(_BYTE *)(v30 + v31))
                      goto LABEL_71;
                    v94 = v102;
                    v95 = (uint64_t)v26;
                    v84 = argumentTypeToString(v19);
                    v93 = &v26[v24];
                    v66 = CFSTR("Compute");
                    v75 = a2;
                    MTLReportFailure();
                    v25 = v122;
                    v33 = (_BYTE *)(a4 + 88 * v32);
LABEL_21:
                    if (*(_BYTE *)(v30 + v31))
                    {
LABEL_71:
                      v119 = &v26[v24];
                      v44 = v19 - 25;
                      v45 = 5;
                      if (v19 == MTLArgumentTypeIntersectionFunctionTable)
                        v45 = 6;
                      v46 = v44 >= 2;
                      v47 = v44 >= 2 && v19 != MTLArgumentTypeIntersectionFunctionTable;
                      v48 = 4;
                      if (v46)
                        v48 = v45;
                      v49 = *(_QWORD *)(v30 + v31 + 8);
                      v23 = !v47 || v49 != 6;
                      v50 = v109;
                      if (v23)
                        v50 = v48;
                      if (v49 != v50)
                      {
                        v124 = v33;
                        v51 = argumentTypeToString(v19);
                        v95 = (uint64_t)v26;
                        v96 = MTLDebugFunctionArgumentTypeToString(*(_QWORD *)(v30 + v31 + 8));
                        v93 = v119;
                        v94 = v102;
                        v84 = v51;
                        v24 = v121;
                        v66 = CFSTR("Compute");
                        v75 = a2;
                        MTLReportFailure();
                        v33 = v124;
LABEL_84:
                        v25 = v122;
                      }
                    }
LABEL_113:
                    v33[1] = 1;
LABEL_114:
                    ++v26;
                    v30 += 88;
                    v27 += 88;
                    v29 += 88;
                    v28 += 88;
                    if ((const char *)v25 == v26)
                      goto LABEL_122;
                    continue;
                }
              }
            }
            abort();
          }
        }
        a7 = v17;
LABEL_122:
        v16 = v115 + 1;
      }
      while (v115 + 1 != v107);
      v107 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v127, v131, 16);
    }
    while (v107);
  }
  else
  {
    *(_QWORD *)&v116[4] = 0;
  }
  result = objc_msgSend(v103, "maxThreadgroupMemoryLength", v66, v75, v84);
  if (a10 + a9 + *(_QWORD *)&v116[4] > result)
  {
    objc_msgSend(v103, "maxThreadgroupMemoryLength");
    return MTLReportFailure();
  }
  return result;
}

uint64_t enumerateFunctionArgumentWithArray(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  char v8;

  v8 = 0;
  if (a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      while (!*(_BYTE *)(v5 + 88 * v6))
      {
        if (++v6 >= a2)
          return result;
      }
      result = (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
      ++v6;
      if (v8)
        v7 = 1;
      else
        v7 = v6 >= a2;
    }
    while (!v7);
  }
  return result;
}

void sub_22CE18380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CE18508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CE18704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *argumentTypeToString(MTLArgumentType a1)
{
  const char *result;

  result = "buffer";
  switch(a1)
  {
    case MTLArgumentTypeBuffer:
      return result;
    case MTLArgumentTypeThreadgroupMemory:
      result = "threadgroupMemory";
      break;
    case MTLArgumentTypeTexture:
      result = "texture";
      break;
    case MTLArgumentTypeSampler:
      result = "sampler";
      break;
    default:
      switch(a1)
      {
        case MTLArgumentTypeVisibleFunctionTable:
          result = "visibleFunctionTable";
          break;
        case MTLArgumentTypePrimitiveAccelerationStructure:
          result = "primitiveAccelerationStructure";
          break;
        case MTLArgumentTypeInstanceAccelerationStructure:
          result = "instanceAccelerationStructure";
          break;
        case MTLArgumentTypeIntersectionFunctionTable:
          result = "intersectionFunctionTable";
          break;
        default:
          abort();
      }
      return result;
  }
  return result;
}

{
  const char *result;

  result = "buffer";
  switch(a1)
  {
    case MTLArgumentTypeBuffer:
      return result;
    case MTLArgumentTypeThreadgroupMemory:
      result = "local memory";
      break;
    case MTLArgumentTypeTexture:
      result = "texture";
      break;
    case MTLArgumentTypeSampler:
      result = "sampler";
      break;
    default:
      switch(a1)
      {
        case MTLArgumentTypeVisibleFunctionTable:
          result = "visibleFunctionTable";
          break;
        case MTLArgumentTypePrimitiveAccelerationStructure:
          result = "primitiveAccelerationStructure";
          break;
        case MTLArgumentTypeInstanceAccelerationStructure:
          result = "instanceAccelerationStructure";
          break;
        case MTLArgumentTypeIntersectionFunctionTable:
          result = "intersectionFunctionTable";
          break;
        default:
          abort();
      }
      return result;
  }
  return result;
}

void std::__tree<unsigned int>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<unsigned int>::destroy(a1, *a2);
    std::__tree<unsigned int>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<unsigned int>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_22CE1B058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

void sub_22CE1B494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

NSObject *createTimerWithInterval(dispatch_queue_t queue, void *a2, double a3)
{
  NSObject *v5;
  double v6;
  dispatch_time_t v7;

  v5 = dispatch_source_create(MEMORY[0x24BDACA18], 0, 0, queue);
  if (v5)
  {
    v6 = a3 * 1000000000.0;
    v7 = dispatch_time(0, (uint64_t)v6);
    dispatch_source_set_timer(v5, v7, (unint64_t)v6, 0x5F5E100uLL);
    dispatch_source_set_event_handler(v5, a2);
    dispatch_resume(v5);
  }
  return v5;
}

void sub_22CE1C4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::unordered_map<MTLPixelFormat,MTLTelemetryTextureDistribution>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::pair<MTLPixelFormat const,MTLTelemetryTextureDistribution> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_22CE1C83C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryTextureDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::pair<MTLPixelFormat const,MTLTelemetryTextureDistribution> const&>(uint64_t a1, unint64_t *a2, const void *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x1818uLL);
  *i = 0;
  i[1] = v6;
  memcpy(i + 2, a3, 0x1808uLL);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CE1CA5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::pair<MTLPixelFormat const,MTLTelemetryRenderTargetDistribution> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_22CE1CACC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::pair<MTLPixelFormat const,MTLTelemetryRenderTargetDistribution> const&>(uint64_t a1, unint64_t *a2, const void *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x44118uLL);
  *i = 0;
  i[1] = v6;
  memcpy(i + 2, a3, 0x44108uLL);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CE1CCF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<MTLPixelFormat,MTLTelemetryBlitDistribution>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::pair<MTLPixelFormat const,MTLTelemetryBlitDistribution> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_22CE1CD64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::pair<MTLPixelFormat const,MTLTelemetryBlitDistribution> const&>(uint64_t a1, unint64_t *a2, const void *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x1608uLL);
  *i = 0;
  i[1] = v6;
  memcpy(i + 2, a3, 0x15F8uLL);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CE1CF84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned int,MTLTelemetryRenderPipelineUsageRec>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryRenderPipelineUsageRec> const&>(a1, i + 4, (_OWORD *)i + 1);
  return a1;
}

void sub_22CE1CFF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryRenderPipelineUsageRec> const&>(uint64_t a1, unsigned int *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_OWORD *)v10 + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_22CE1D214(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned int,MTLTelemetryRenderFuncUsageRec>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryRenderFuncUsageRec> const&>(a1, i + 4, (_OWORD *)i + 1);
  return a1;
}

void sub_22CE1D284(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryRenderFuncUsageRec> const&>(uint64_t a1, unsigned int *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  v12 = a3[1];
  *((_OWORD *)v10 + 1) = *a3;
  *((_OWORD *)v10 + 2) = v12;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_22CE1D4A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned int,MTLTelemetryComputePipelineUsageRec>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryComputePipelineUsageRec> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_22CE1D514(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryComputePipelineUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryComputePipelineUsageRec> const&>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = *(_QWORD *)a3;
  *((_DWORD *)v10 + 6) = *(_DWORD *)(a3 + 8);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_22CE1D73C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned int,MTLTelemetryKernelUsageRec>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryKernelUsageRec> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_22CE1D7AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryKernelUsageRec>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,MTLTelemetryKernelUsageRec> const&>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x28uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
  v10[4] = *(_QWORD *)(a3 + 16);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_22CE1D9D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_DWORD *)i + 10) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_22CE1DC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

unint64_t checkBuffer(unint64_t result, void *a2, unint64_t a3, char a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2)
  {
    v8 = result;
    if ((objc_msgSend(a2, "conformsToProtocol:", &unk_255C54558) & 1) == 0)
    {
      v9 = a5;
      MTLReportFailure();
    }
    if (objc_msgSend(a2, "device", v9) != v8)
    {
      v10 = a5;
      MTLReportFailure();
    }
    result = objc_msgSend(a2, "length", v10);
    if (result <= a3)
    {
      objc_msgSend(a2, "length");
      return MTLReportFailure();
    }
  }
  else if ((a4 & 1) == 0 || a3)
  {
    return MTLReportFailure();
  }
  return result;
}

uint64_t checkAccelerationStructure(uint64_t result, void *a2, char a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  if (!a2)
  {
    if ((a3 & 1) != 0)
      return result;
    return MTLReportFailure();
  }
  v6 = result;
  if ((objc_msgSend(a2, "conformsToProtocol:", &unk_255C5AD20) & 1) == 0)
  {
    v7 = a4;
    MTLReportFailure();
  }
  result = objc_msgSend(a2, "device", v7);
  if (result != v6)
    return MTLReportFailure();
  return result;
}

uint64_t checkMotionParameter(void *a1, void *a2)
{
  float v3;
  float v4;
  uint64_t result;
  float v6;

  if ((objc_msgSend(a1, "supportsPrimitiveMotionBlur") & 1) == 0)
    MTLReportFailure();
  objc_msgSend(a2, "motionEndTime");
  v4 = v3;
  result = objc_msgSend(a2, "motionStartTime");
  if (v4 < v6)
  {
    objc_msgSend(a2, "motionStartTime");
    objc_msgSend(a2, "motionEndTime");
    return MTLReportFailure();
  }
  return result;
}

unint64_t MTLTransformTypeStride(uint64_t a1)
{
  if (a1)
    return (unint64_t)(a1 == 1) << 6;
  else
    return 48;
}

uint64_t checkPrimitiveData(unint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  checkBuffer(a1, (void *)objc_msgSend(a2, "primitiveDataBuffer"), objc_msgSend(a2, "primitiveDataBufferOffset"), 1, (uint64_t)CFSTR("primitiveDataBuffer"));
  result = objc_msgSend(a2, "primitiveDataBuffer");
  if (result)
  {
    if (!objc_msgSend(a2, "primitiveDataElementSize"))
      MTLReportFailure();
    v6 = objc_msgSend(a2, "primitiveDataElementSize");
    if (v6 > objc_msgSend(a2, "primitiveDataStride"))
    {
      v13 = objc_msgSend(a2, "primitiveDataElementSize");
      v17 = objc_msgSend(a2, "primitiveDataStride");
      MTLReportFailure();
    }
    v7 = objc_msgSend(a2, "primitiveDataBufferOffset", v13, v17);
    if (v7 > objc_msgSend((id)objc_msgSend(a2, "primitiveDataBuffer"), "length"))
    {
      v14 = objc_msgSend(a2, "primitiveDataBufferOffset");
      v18 = objc_msgSend((id)objc_msgSend(a2, "primitiveDataBuffer"), "length");
      MTLReportFailure();
    }
    v8 = objc_msgSend((id)objc_msgSend(a2, "primitiveDataBuffer", v14, v18), "length");
    v9 = objc_msgSend(a2, "primitiveDataBufferOffset");
    v10 = v9 + objc_msgSend(a2, "primitiveDataStride") * (a3 - 1);
    if (v8 < v10 + objc_msgSend(a2, "primitiveDataElementSize"))
    {
      v11 = objc_msgSend((id)objc_msgSend(a2, "primitiveDataBuffer"), "length");
      v12 = objc_msgSend(a2, "primitiveDataBufferOffset");
      v21 = objc_msgSend(a2, "primitiveDataStride");
      v22 = objc_msgSend(a2, "primitiveDataElementSize");
      v19 = a3;
      v20 = v12;
      v15 = v11;
      MTLReportFailure();
    }
    if ((objc_msgSend(a2, "primitiveDataBufferOffset", v15, v19, v20, v21, v22) & 3) != 0)
    {
      v16 = objc_msgSend(a2, "primitiveDataBufferOffset");
      MTLReportFailure();
    }
    result = objc_msgSend(a2, "primitiveDataStride", v16);
    if ((result & 3) != 0)
    {
      objc_msgSend(a2, "primitiveDataStride");
      return MTLReportFailure();
    }
  }
  return result;
}

uint64_t checkAccelerationStructureDescriptor(void *a1, void *a2, int a3)
{
  return checkAccelerationStructureDescriptorWithRefitOptions(a1, a2, a3, 3);
}

uint64_t checkAccelerationStructureDescriptorWithRefitOptions(void *a1, void *a2, int a3, int a4)
{
  void *v5;
  void *v7;
  char v8;
  unint64_t v9;
  uint64_t result;
  void *v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  MTLAttributeFormat v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  MTLAttributeFormat v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  MTLAttributeFormat v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t j;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t m;
  void *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  MTLAttributeFormat v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  MTLAttributeFormat v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  MTLAttributeFormat v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t k;
  void *v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  MTLAttributeFormat v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  MTLAttributeFormat v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t n;
  void *v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t ii;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  char v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t i;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  void *v229;
  int v230;
  id obj;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  _BYTE v265[128];
  _BYTE v266[128];
  _BYTE v267[128];
  _BYTE v268[128];
  _BYTE v269[128];
  _BYTE v270[128];
  _BYTE v271[128];
  uint64_t v272;

  v272 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return MTLReportFailure();
  v5 = a2;
  v7 = (void *)objc_opt_class();
  if (!objc_msgSend(v7, "isSubclassOfClass:", objc_opt_class()))
  {
    v11 = (void *)objc_opt_class();
    if (objc_msgSend(v11, "isSubclassOfClass:", objc_opt_class()))
    {
      v12 = objc_msgSend(v5, "usage");
      v13 = objc_msgSend(v5, "instanceCount");
      if ((v12 & 4) != 0)
      {
        if (!(v13 >> 30))
          goto LABEL_259;
      }
      else if (!(v13 >> 24))
      {
        goto LABEL_259;
      }
      v165 = objc_msgSend(v5, "instanceCount");
      MTLReportFailure();
LABEL_259:
      if ((isValidMTLAccelerationStructureInstanceDescriptorType((MTLAccelerationStructureInstanceDescriptorType)objc_msgSend(v5, "instanceDescriptorType", v165)) & 1) == 0)
      {
        v189 = objc_msgSend(v5, "instanceDescriptorType");
        MTLReportFailure();
      }
      v136 = MTLAccelerationStructureInstanceDescriptorSize((MTLAccelerationStructureInstanceDescriptorType)objc_msgSend(v5, "instanceDescriptorType", v189));
      if (objc_msgSend(v5, "instanceDescriptorStride") < v136)
      {
        v190 = objc_msgSend(v5, "instanceDescriptorStride");
        v207 = v136;
        MTLReportFailure();
      }
      if ((objc_msgSend(v5, "instanceDescriptorStride", v190, v207) & 3) != 0)
      {
        v191 = objc_msgSend(v5, "instanceDescriptorStride");
        v208 = 4;
        MTLReportFailure();
      }
      result = objc_msgSend(v5, "instanceTransformationMatrixLayout", v191, v208);
      if (result == 1)
      {
        result = objc_msgSend(a1, "supportsRayTracingMatrixLayout");
        if ((result & 1) == 0)
          result = MTLReportFailure();
      }
      if (!a3)
        return result;
      checkBuffer((unint64_t)a1, (void *)objc_msgSend(v5, "instanceDescriptorBuffer"), objc_msgSend(v5, "instanceDescriptorBufferOffset"), 0, (uint64_t)CFSTR("instance descriptor buffer"));
      if ((objc_msgSend(v5, "instanceDescriptorBufferOffset") & 3) != 0)
      {
        v192 = objc_msgSend(v5, "instanceDescriptorBufferOffset");
        v209 = 4;
        MTLReportFailure();
      }
      v137 = objc_msgSend((id)objc_msgSend(v5, "instanceDescriptorBuffer", v192, v209), "length");
      v138 = objc_msgSend(v5, "instanceDescriptorBufferOffset");
      v139 = objc_msgSend(v5, "instanceDescriptorStride");
      if (v137 < v138 + objc_msgSend(v5, "instanceCount") * v139)
      {
        v159 = objc_msgSend((id)objc_msgSend(v5, "instanceDescriptorBuffer"), "length");
        v160 = objc_msgSend(v5, "instanceDescriptorBufferOffset");
        v222 = objc_msgSend(v5, "instanceDescriptorStride");
        v224 = objc_msgSend(v5, "instanceCount");
        v193 = v159;
        v210 = v160;
        MTLReportFailure();
      }
      v239 = 0u;
      v240 = 0u;
      v237 = 0u;
      v238 = 0u;
      v140 = (void *)objc_msgSend(v5, "instancedAccelerationStructures", v193, v210, v222, v224);
      v141 = objc_msgSend(v140, "countByEnumeratingWithState:objects:count:", &v237, v265, 16);
      if (v141)
      {
        v142 = v141;
        v143 = *(_QWORD *)v238;
        do
        {
          for (i = 0; i != v142; ++i)
          {
            if (*(_QWORD *)v238 != v143)
              objc_enumerationMutation(v140);
            checkAccelerationStructure((uint64_t)a1, *(void **)(*((_QWORD *)&v237 + 1) + 8 * i), 0, (uint64_t)CFSTR("Instanced acceleration structure"));
          }
          v142 = objc_msgSend(v140, "countByEnumeratingWithState:objects:count:", &v237, v265, 16);
        }
        while (v142);
      }
      if (!objc_msgSend(v5, "instanceCount"))
        goto LABEL_329;
      if (objc_msgSend(v5, "instanceDescriptorType") == 3 || objc_msgSend(v5, "instanceDescriptorType") == 4)
      {
        if (!objc_msgSend(v5, "instancedAccelerationStructures"))
          goto LABEL_329;
      }
      else if (objc_msgSend((id)objc_msgSend(v5, "instancedAccelerationStructures"), "count"))
      {
        goto LABEL_329;
      }
      MTLReportFailure();
LABEL_329:
      if (objc_msgSend(v5, "instanceDescriptorType") == 2
        || (result = objc_msgSend(v5, "instanceDescriptorType"), result == 4))
      {
        if (objc_msgSend(v5, "motionTransformType") == 1
          && (objc_msgSend(a1, "supportsRayTracingPerComponentMotionInterpolation") & 1) == 0)
        {
          MTLReportFailure();
        }
        v155 = objc_msgSend(v5, "motionTransformType");
        if (v155)
          v156 = (unint64_t)(v155 == 1) << 6;
        else
          v156 = 48;
        if (objc_msgSend(v5, "motionTransformStride"))
        {
          if ((objc_msgSend(v5, "motionTransformStride") & 3) != 0)
          {
            v194 = objc_msgSend(v5, "motionTransformStride");
            v211 = 4;
            MTLReportFailure();
          }
          if (objc_msgSend(v5, "motionTransformStride", v194, v211) < v156)
          {
            v206 = objc_msgSend(v5, "motionTransformStride");
            v221 = v156;
            MTLReportFailure();
          }
          v156 = objc_msgSend(v5, "motionTransformStride", v206, v221);
        }
        checkBuffer((unint64_t)a1, (void *)objc_msgSend(v5, "motionTransformBuffer"), objc_msgSend(v5, "motionTransformBufferOffset"), 0, (uint64_t)CFSTR("motion transform buffer"));
        if ((objc_msgSend(v5, "motionTransformBufferOffset") & 3) != 0)
        {
          v194 = objc_msgSend(v5, "motionTransformBufferOffset");
          v211 = 4;
          MTLReportFailure();
        }
        v157 = objc_msgSend((id)objc_msgSend(v5, "motionTransformBuffer", v194, v211), "length");
        v158 = objc_msgSend(v5, "motionTransformBufferOffset");
        result = objc_msgSend(v5, "motionTransformCount");
        if (v157 < v158 + result * v156)
        {
          objc_msgSend((id)objc_msgSend(v5, "motionTransformBuffer"), "length");
          objc_msgSend(v5, "motionTransformBufferOffset");
          objc_msgSend(v5, "motionTransformCount");
          return MTLReportFailure();
        }
      }
      return result;
    }
    v133 = (void *)objc_opt_class();
    if (objc_msgSend(v133, "isSubclassOfClass:", objc_opt_class()))
    {
      v134 = objc_msgSend(v5, "usage");
      v135 = objc_msgSend(v5, "maxInstanceCount");
      if ((v134 & 4) != 0)
      {
        if (v135 >> 30)
        {
LABEL_351:
          v165 = objc_msgSend(v5, "maxInstanceCount");
          MTLReportFailure();
        }
      }
      else if (v135 >> 24)
      {
        goto LABEL_351;
      }
      if (objc_msgSend(v5, "instanceDescriptorType", v165) != 3 && objc_msgSend(v5, "instanceDescriptorType") != 4)
      {
        v195 = objc_msgSend(v5, "instanceDescriptorType");
        MTLReportFailure();
      }
      v145 = MTLAccelerationStructureInstanceDescriptorSize((MTLAccelerationStructureInstanceDescriptorType)objc_msgSend(v5, "instanceDescriptorType", v195));
      if (objc_msgSend(v5, "instanceDescriptorStride") < v145)
      {
        v196 = objc_msgSend(v5, "instanceDescriptorStride");
        v207 = v145;
        MTLReportFailure();
      }
      if ((objc_msgSend(v5, "instanceDescriptorStride", v196, v207) & 3) != 0)
      {
        v197 = objc_msgSend(v5, "instanceDescriptorStride");
        v212 = 4;
        MTLReportFailure();
      }
      result = objc_msgSend(v5, "instanceTransformationMatrixLayout", v197, v212);
      if (result == 1)
      {
        result = objc_msgSend(a1, "supportsRayTracingMatrixLayout");
        if ((result & 1) == 0)
          result = MTLReportFailure();
      }
      if (a3)
      {
        checkBuffer((unint64_t)a1, (void *)objc_msgSend(v5, "instanceDescriptorBuffer"), objc_msgSend(v5, "instanceDescriptorBufferOffset"), 0, (uint64_t)CFSTR("instance descriptor buffer"));
        if ((objc_msgSend(v5, "instanceDescriptorBufferOffset") & 0x3F) != 0)
        {
          v198 = objc_msgSend(v5, "instanceDescriptorBufferOffset");
          v213 = 64;
          MTLReportFailure();
        }
        v146 = objc_msgSend((id)objc_msgSend(v5, "instanceDescriptorBuffer", v198, v213), "length");
        v147 = objc_msgSend(v5, "instanceDescriptorBufferOffset");
        v148 = objc_msgSend(v5, "instanceDescriptorStride");
        if (v146 < v147 + objc_msgSend(v5, "maxInstanceCount") * v148)
        {
          v161 = objc_msgSend((id)objc_msgSend(v5, "instanceDescriptorBuffer"), "length");
          v162 = objc_msgSend(v5, "instanceDescriptorBufferOffset");
          v222 = objc_msgSend(v5, "instanceDescriptorStride");
          v224 = objc_msgSend(v5, "maxInstanceCount");
          v199 = v161;
          v214 = v162;
          MTLReportFailure();
        }
        checkBuffer((unint64_t)a1, (void *)objc_msgSend(v5, "instanceCountBuffer", v199, v214, v222, v224), objc_msgSend(v5, "instanceCountBufferOffset"), 0, (uint64_t)CFSTR("instance count buffer"));
        if ((objc_msgSend(v5, "instanceCountBufferOffset") & 3) != 0)
        {
          v200 = objc_msgSend(v5, "instanceCountBufferOffset");
          v215 = 4;
          MTLReportFailure();
        }
        v149 = objc_msgSend((id)objc_msgSend(v5, "instanceCountBuffer", v200, v215), "length");
        if (v149 < objc_msgSend(v5, "instanceCountBufferOffset") + 4)
        {
          v201 = objc_msgSend((id)objc_msgSend(v5, "instanceCountBuffer"), "length");
          v216 = objc_msgSend(v5, "instanceCountBufferOffset");
          MTLReportFailure();
        }
        if (objc_msgSend(v5, "instanceDescriptorType", v201, v216) == 2
          || (result = objc_msgSend(v5, "instanceDescriptorType"), result == 4))
        {
          if (objc_msgSend(v5, "motionTransformType") == 1
            && (objc_msgSend(a1, "supportsRayTracingPerComponentMotionInterpolation") & 1) == 0)
          {
            MTLReportFailure();
          }
          v150 = objc_msgSend(v5, "motionTransformType");
          if (v150)
            v151 = (unint64_t)(v150 == 1) << 6;
          else
            v151 = 48;
          if (objc_msgSend(v5, "motionTransformStride"))
          {
            if ((objc_msgSend(v5, "motionTransformStride") & 3) != 0)
            {
              v202 = objc_msgSend(v5, "motionTransformStride");
              v217 = 4;
              MTLReportFailure();
            }
            if (objc_msgSend(v5, "motionTransformStride", v202, v217) < v151)
            {
              v203 = objc_msgSend(v5, "motionTransformStride");
              v218 = v151;
              MTLReportFailure();
            }
            v151 = objc_msgSend(v5, "motionTransformStride", v203, v218);
          }
          checkBuffer((unint64_t)a1, (void *)objc_msgSend(v5, "motionTransformBuffer"), objc_msgSend(v5, "motionTransformBufferOffset"), 0, (uint64_t)CFSTR("motion transform buffer"));
          if ((objc_msgSend(v5, "motionTransformBufferOffset") & 3) != 0)
          {
            v202 = objc_msgSend(v5, "motionTransformBufferOffset");
            v217 = 4;
            MTLReportFailure();
          }
          v152 = objc_msgSend((id)objc_msgSend(v5, "motionTransformBuffer", v202, v217), "length");
          v153 = objc_msgSend(v5, "motionTransformBufferOffset");
          if (v152 < v153 + objc_msgSend(v5, "maxMotionTransformCount") * v151)
          {
            v163 = objc_msgSend((id)objc_msgSend(v5, "motionTransformBuffer"), "length");
            v164 = objc_msgSend(v5, "motionTransformBufferOffset");
            v223 = v151;
            v225 = objc_msgSend(v5, "maxMotionTransformCount");
            v204 = v163;
            v219 = v164;
            MTLReportFailure();
          }
          checkBuffer((unint64_t)a1, (void *)objc_msgSend(v5, "motionTransformCountBuffer", v204, v219, v223, v225), objc_msgSend(v5, "motionTransformCountBufferOffset"), 0, (uint64_t)CFSTR("motion transform count buffer"));
          if ((objc_msgSend(v5, "motionTransformCountBufferOffset") & 3) != 0)
          {
            v205 = objc_msgSend(v5, "motionTransformCountBufferOffset");
            v220 = 4;
            MTLReportFailure();
          }
          v154 = objc_msgSend((id)objc_msgSend(v5, "motionTransformCountBuffer", v205, v220), "length");
          result = objc_msgSend(v5, "motionTransformCountBufferOffset");
          if (v154 < result + 4)
          {
            objc_msgSend((id)objc_msgSend(v5, "motionTransformCountBuffer"), "length");
            objc_msgSend(v5, "motionTransformCountBufferOffset");
            return MTLReportFailure();
          }
        }
      }
      return result;
    }
    return MTLReportFailure();
  }
  if (!objc_msgSend((id)objc_msgSend(v5, "geometryDescriptors"), "count"))
  {
    v165 = objc_msgSend((id)objc_msgSend(v5, "geometryDescriptors"), "count");
    MTLReportFailure();
  }
  v8 = objc_msgSend(v5, "usage", v165);
  v9 = objc_msgSend((id)objc_msgSend(v5, "geometryDescriptors"), "count");
  if ((v8 & 4) != 0)
  {
    if (v9 >> 30)
    {
LABEL_347:
      v166 = objc_msgSend((id)objc_msgSend(v5, "geometryDescriptors"), "count");
      MTLReportFailure();
    }
  }
  else if (v9 >> 24)
  {
    goto LABEL_347;
  }
  v263 = 0u;
  v264 = 0u;
  v261 = 0u;
  v262 = 0u;
  obj = (id)objc_msgSend(v5, "geometryDescriptors", v166);
  v233 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v261, v271, 16);
  v14 = 0;
  if (!v233)
    goto LABEL_249;
  v230 = a4 & a3;
  v232 = *(_QWORD *)v262;
  v228 = a4;
  v229 = v5;
  do
  {
    v15 = 0;
    do
    {
      if (*(_QWORD *)v262 != v232)
        objc_enumerationMutation(obj);
      v234 = v15;
      v235 = v14;
      v16 = *(void **)(*((_QWORD *)&v261 + 1) + 8 * v15);
      objc_msgSend((id)objc_msgSend(v5, "geometryDescriptors"), "objectAtIndexedSubscript:", 0);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        MTLReportFailure();
      v17 = (void *)objc_opt_class();
      if (objc_msgSend(v17, "isSubclassOfClass:", objc_opt_class()))
      {
        if ((unint64_t)objc_msgSend(v16, "intersectionFunctionTableOffset") >> 24)
        {
          v167 = objc_msgSend(v16, "intersectionFunctionTableOffset");
          MTLReportFailure();
        }
        v18 = objc_msgSend(v16, "vertexFormat", v167);
        v19 = objc_msgSend(v16, "vertexStride");
        if ((unint64_t)MTLAttributeFormatComponentCount(v18) <= 1)
          MTLReportFailure();
        v20 = MTLAttributeFormatSize(v18);
        if (v19 && v20 > v19)
        {
          v168 = v19;
          v207 = v20;
          MTLReportFailure();
        }
        v21 = MTLAttributeFormatAlignment(v18);
        if (v19 % v21)
        {
          v168 = v19;
          v207 = v21;
          MTLReportFailure();
        }
        v22 = (void *)objc_msgSend(v16, "transformationMatrixBuffer", v168);
        v23 = objc_msgSend(v16, "transformationMatrixBufferOffset");
        checkBuffer((unint64_t)a1, v22, v23, 1, (uint64_t)CFSTR("Transformation buffer"));
        if (v22)
        {
          if (v23 + 48 > objc_msgSend(v22, "length"))
          {
            v169 = v23;
            v207 = objc_msgSend(v22, "length");
            MTLReportFailure();
          }
          if ((v23 & 3) != 0)
          {
            v169 = v23;
            MTLReportFailure();
          }
        }
        if (objc_msgSend(v16, "transformationMatrixLayout", v169) == 1
          && (objc_msgSend(a1, "supportsRayTracingMatrixLayout") & 1) == 0)
        {
          MTLReportFailure();
        }
        if (v230)
        {
          checkBuffer((unint64_t)a1, (void *)objc_msgSend(v16, "vertexBuffer"), objc_msgSend(v16, "vertexBufferOffset"), 0, (uint64_t)CFSTR("vertex buffer"));
          if ((objc_msgSend(v16, "vertexBufferOffset") & 3) != 0)
          {
            v170 = objc_msgSend(v16, "vertexBufferOffset");
            v207 = 4;
            MTLReportFailure();
          }
          if (objc_msgSend(v16, "indexBuffer", v170))
          {
            checkBuffer((unint64_t)a1, (void *)objc_msgSend(v16, "indexBuffer"), objc_msgSend(v16, "indexBufferOffset"), 1, (uint64_t)CFSTR("index buffer"));
            v24 = objc_msgSend(v16, "indexType");
            if (v24)
              v25 = 4;
            else
              v25 = 2;
            if (((v25 - 1) & objc_msgSend(v16, "indexBufferOffset")) != 0)
            {
              v171 = objc_msgSend(v16, "indexBufferOffset");
              v207 = v25;
              MTLReportFailure();
            }
            v26 = 3 * objc_msgSend(v16, "triangleCount", v171);
            v27 = 1;
            if (v24)
              v27 = 2;
            v28 = (v26 << v27) + objc_msgSend(v16, "indexBufferOffset");
            if (v28 > objc_msgSend((id)objc_msgSend(v16, "indexBuffer"), "length"))
            {
              v29 = 3 * objc_msgSend(v16, "triangleCount");
              v222 = objc_msgSend(v16, "indexBufferOffset");
              v224 = objc_msgSend((id)objc_msgSend(v16, "indexBuffer"), "length");
              v170 = v29;
              v207 = v25;
              goto LABEL_246;
            }
          }
          else
          {
            v72 = objc_msgSend(v16, "vertexBufferOffset");
            if (v72 > objc_msgSend((id)objc_msgSend(v16, "vertexBuffer"), "length"))
            {
              v171 = objc_msgSend(v16, "vertexBufferOffset");
              v207 = objc_msgSend((id)objc_msgSend(v16, "vertexBuffer"), "length");
              MTLReportFailure();
            }
            v73 = objc_msgSend(v16, "vertexStride", v171);
            v74 = objc_msgSend(v16, "vertexFormat");
            if (!v73)
              v73 = MTLAttributeFormatSize(v74);
            v75 = 3 * v73 * objc_msgSend(v16, "triangleCount");
            v76 = objc_msgSend((id)objc_msgSend(v16, "vertexBuffer"), "length");
            if (v76 - objc_msgSend(v16, "vertexBufferOffset") < v75)
            {
              v128 = 3 * objc_msgSend(v16, "triangleCount");
              v222 = objc_msgSend(v16, "vertexBufferOffset");
              v224 = objc_msgSend((id)objc_msgSend(v16, "vertexBuffer"), "length");
              v170 = v128;
              v207 = v73;
LABEL_246:
              MTLReportFailure();
            }
          }
        }
        v58 = objc_msgSend(v16, "triangleCount", v170, v207, v222, v224);
        goto LABEL_131;
      }
      v30 = (void *)objc_opt_class();
      if (objc_msgSend(v30, "isSubclassOfClass:", objc_opt_class()))
      {
        if ((unint64_t)objc_msgSend(v16, "intersectionFunctionTableOffset") >> 24)
        {
          v167 = objc_msgSend(v16, "intersectionFunctionTableOffset");
          MTLReportFailure();
        }
        checkMotionParameter(a1, v5);
        v31 = objc_msgSend(v5, "motionKeyframeCount");
        if (v31 != objc_msgSend((id)objc_msgSend(v16, "vertexBuffers"), "count"))
        {
          v167 = objc_msgSend(v5, "motionKeyframeCount");
          v207 = objc_msgSend((id)objc_msgSend(v16, "vertexBuffers"), "count");
          MTLReportFailure();
        }
        v32 = objc_msgSend(v16, "vertexFormat", v167);
        v33 = objc_msgSend(v16, "vertexStride");
        if ((unint64_t)MTLAttributeFormatComponentCount(v32) <= 1)
          MTLReportFailure();
        v34 = MTLAttributeFormatSize(v32);
        if (v33 && v34 > v33)
        {
          v172 = v33;
          v207 = v34;
          MTLReportFailure();
        }
        v35 = MTLAttributeFormatAlignment(v32);
        if (v33 % v35)
        {
          v172 = v33;
          v207 = v35;
          MTLReportFailure();
        }
        v36 = (void *)objc_msgSend(v16, "transformationMatrixBuffer", v172);
        v37 = objc_msgSend(v16, "transformationMatrixBufferOffset");
        checkBuffer((unint64_t)a1, v36, v37, 1, (uint64_t)CFSTR("Transformation buffer"));
        if (v36)
        {
          if (v37 + 48 > objc_msgSend(v36, "length"))
          {
            v173 = v37;
            v207 = objc_msgSend(v36, "length");
            MTLReportFailure();
          }
          if ((v37 & 3) != 0)
          {
            v173 = v37;
            MTLReportFailure();
          }
        }
        if (objc_msgSend(v16, "transformationMatrixLayout", v173) == 1
          && (objc_msgSend(a1, "supportsRayTracingMatrixLayout") & 1) == 0)
        {
          MTLReportFailure();
        }
        v38 = objc_msgSend(v16, "vertexStride");
        v39 = objc_msgSend(v16, "vertexFormat");
        if (!v38)
          v38 = MTLAttributeFormatSize(v39);
        v40 = objc_msgSend(v16, "triangleCount");
        if (a3)
        {
          v226 = v40;
          v259 = 0u;
          v260 = 0u;
          v257 = 0u;
          v258 = 0u;
          v41 = (void *)objc_msgSend(v16, "vertexBuffers");
          v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v257, v270, 16);
          if (v42)
          {
            v43 = v42;
            v44 = *(_QWORD *)v258;
            do
            {
              for (j = 0; j != v43; ++j)
              {
                if (*(_QWORD *)v258 != v44)
                  objc_enumerationMutation(v41);
                v46 = *(void **)(*((_QWORD *)&v257 + 1) + 8 * j);
                checkBuffer((unint64_t)a1, (void *)objc_msgSend(v46, "buffer", v174), objc_msgSend(v46, "offset"), 0, (uint64_t)CFSTR("vertex buffer"));
                if ((objc_msgSend(v46, "offset") & 3) != 0)
                {
                  v174 = objc_msgSend(v46, "offset");
                  v207 = 4;
                  MTLReportFailure();
                }
              }
              v43 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v257, v270, 16);
            }
            while (v43);
          }
          if (objc_msgSend(v16, "indexBuffer", v174))
          {
            checkBuffer((unint64_t)a1, (void *)objc_msgSend(v16, "indexBuffer"), objc_msgSend(v16, "indexBufferOffset"), 1, (uint64_t)CFSTR("index buffer"));
            v47 = objc_msgSend(v16, "indexType");
            if (v47)
              v48 = 4;
            else
              v48 = 2;
            if (((v48 - 1) & objc_msgSend(v16, "indexBufferOffset")) != 0)
            {
              v174 = objc_msgSend(v16, "indexBufferOffset");
              v207 = v48;
              MTLReportFailure();
            }
            v49 = 3 * objc_msgSend(v16, "triangleCount", v174);
            v50 = 1;
            if (v47)
              v50 = 2;
            v51 = (v49 << v50) + objc_msgSend(v16, "indexBufferOffset");
            if (v51 > objc_msgSend((id)objc_msgSend(v16, "indexBuffer"), "length"))
            {
              v52 = 3 * objc_msgSend(v16, "triangleCount");
              v222 = objc_msgSend(v16, "indexBufferOffset");
              v224 = objc_msgSend((id)objc_msgSend(v16, "indexBuffer"), "length");
              v207 = v48;
              MTLReportFailure();
              v53 = objc_msgSend(v16, "triangleCount", v52);
              goto LABEL_183;
            }
          }
          else
          {
            v255 = 0u;
            v256 = 0u;
            v253 = 0u;
            v254 = 0u;
            v92 = (void *)objc_msgSend(v16, "vertexBuffers");
            v93 = objc_msgSend(v92, "countByEnumeratingWithState:objects:count:", &v253, v269, 16);
            if (v93)
            {
              v94 = v93;
              v95 = 3 * v38 * v226;
              v96 = *(_QWORD *)v254;
              do
              {
                for (k = 0; k != v94; ++k)
                {
                  if (*(_QWORD *)v254 != v96)
                    objc_enumerationMutation(v92);
                  v98 = *(void **)(*((_QWORD *)&v253 + 1) + 8 * k);
                  v99 = objc_msgSend(v98, "offset", v174);
                  if (v99 > objc_msgSend((id)objc_msgSend(v98, "buffer"), "length"))
                  {
                    v183 = objc_msgSend(v98, "offset");
                    v207 = objc_msgSend((id)objc_msgSend(v98, "buffer"), "length");
                    MTLReportFailure();
                  }
                  v100 = objc_msgSend((id)objc_msgSend(v98, "buffer", v183), "length");
                  if (v100 - objc_msgSend(v98, "offset") < v95)
                  {
                    v227 = 3 * objc_msgSend(v16, "triangleCount");
                    v222 = objc_msgSend(v98, "offset");
                    v224 = objc_msgSend((id)objc_msgSend(v98, "buffer"), "length");
                    v174 = v227;
                    v207 = v38;
                    MTLReportFailure();
                  }
                }
                v94 = objc_msgSend(v92, "countByEnumeratingWithState:objects:count:", &v253, v269, 16);
              }
              while (v94);
            }
          }
        }
        v53 = objc_msgSend(v16, "triangleCount", v174);
LABEL_183:
        v77 = v53;
        LOBYTE(a4) = v228;
        v5 = v229;
        if ((v228 & 2) == 0)
          goto LABEL_185;
        goto LABEL_184;
      }
      v54 = (void *)objc_opt_class();
      if (objc_msgSend(v54, "isSubclassOfClass:", objc_opt_class()))
      {
        if ((unint64_t)objc_msgSend(v16, "boundingBoxStride") <= 0x17)
        {
          v167 = objc_msgSend(v16, "boundingBoxStride");
          v207 = 24;
          MTLReportFailure();
        }
        if ((objc_msgSend(v16, "boundingBoxStride", v167) & 3) != 0)
        {
          v175 = objc_msgSend(v16, "boundingBoxStride");
          v207 = 4;
          MTLReportFailure();
        }
        if (a3)
        {
          checkBuffer((unint64_t)a1, (void *)objc_msgSend(v16, "boundingBoxBuffer"), objc_msgSend(v16, "boundingBoxBufferOffset"), 0, (uint64_t)CFSTR("bounding box buffer"));
          if ((objc_msgSend(v16, "boundingBoxBufferOffset") & 3) != 0)
          {
            v175 = objc_msgSend(v16, "boundingBoxBufferOffset");
            v207 = 4;
            MTLReportFailure();
          }
          v55 = objc_msgSend((id)objc_msgSend(v16, "boundingBoxBuffer", v175), "length");
          v56 = objc_msgSend(v16, "boundingBoxBufferOffset");
          v57 = objc_msgSend(v16, "boundingBoxStride");
          if (v55 < v56 + objc_msgSend(v16, "boundingBoxCount") * v57)
          {
            v129 = objc_msgSend((id)objc_msgSend(v16, "boundingBoxBuffer"), "length");
            v130 = objc_msgSend(v16, "boundingBoxBufferOffset");
            v222 = objc_msgSend(v16, "boundingBoxStride");
            v224 = objc_msgSend(v16, "boundingBoxCount");
            v175 = v129;
            v207 = v130;
            MTLReportFailure();
          }
        }
        v58 = objc_msgSend(v16, "boundingBoxCount", v175);
        goto LABEL_131;
      }
      v59 = (void *)objc_opt_class();
      if (objc_msgSend(v59, "isSubclassOfClass:", objc_opt_class()))
      {
        checkMotionParameter(a1, v5);
        v60 = objc_msgSend(v5, "motionKeyframeCount");
        if (v60 != objc_msgSend((id)objc_msgSend(v16, "boundingBoxBuffers"), "count"))
        {
          v167 = objc_msgSend(v5, "motionKeyframeCount");
          v207 = objc_msgSend((id)objc_msgSend(v16, "boundingBoxBuffers"), "count");
          MTLReportFailure();
        }
        if ((unint64_t)objc_msgSend(v16, "boundingBoxStride", v167) <= 0x17)
        {
          v176 = objc_msgSend(v16, "boundingBoxStride");
          v207 = 24;
          MTLReportFailure();
        }
        if ((objc_msgSend(v16, "boundingBoxStride", v176) & 3) != 0)
        {
          v177 = objc_msgSend(v16, "boundingBoxStride");
          v207 = 4;
          MTLReportFailure();
        }
        v251 = 0u;
        v252 = 0u;
        v249 = 0u;
        v250 = 0u;
        v61 = (void *)objc_msgSend(v16, "boundingBoxBuffers", v177);
        v62 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v249, v268, 16);
        if (v62)
        {
          v63 = v62;
          v64 = *(_QWORD *)v250;
          do
          {
            for (m = 0; m != v63; ++m)
            {
              if (*(_QWORD *)v250 != v64)
                objc_enumerationMutation(v61);
              if (a3)
              {
                v66 = *(void **)(*((_QWORD *)&v249 + 1) + 8 * m);
                checkBuffer((unint64_t)a1, (void *)objc_msgSend(v66, "buffer"), objc_msgSend(v66, "offset"), 0, (uint64_t)CFSTR("bounding box buffer"));
                if ((objc_msgSend(v66, "offset") & 3) != 0)
                {
                  v178 = objc_msgSend(v16, "boundingBoxStride");
                  v207 = 4;
                  MTLReportFailure();
                }
                v67 = objc_msgSend((id)objc_msgSend(v66, "buffer", v178), "length");
                v68 = objc_msgSend(v66, "offset");
                v69 = objc_msgSend(v16, "boundingBoxStride");
                if (v67 < v68 + objc_msgSend(v16, "boundingBoxCount") * v69)
                {
                  v70 = objc_msgSend((id)objc_msgSend(v66, "buffer"), "length");
                  v71 = objc_msgSend(v66, "offset");
                  v222 = objc_msgSend(v16, "boundingBoxStride");
                  v224 = objc_msgSend(v16, "boundingBoxCount");
                  v178 = v70;
                  v207 = v71;
                  MTLReportFailure();
                }
              }
            }
            v63 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v249, v268, 16);
          }
          while (v63);
        }
        v53 = objc_msgSend(v16, "boundingBoxCount", v178);
        goto LABEL_183;
      }
      v78 = (void *)objc_opt_class();
      if (objc_msgSend(v78, "isSubclassOfClass:", objc_opt_class()))
      {
        if ((unint64_t)objc_msgSend(v16, "intersectionFunctionTableOffset") >> 24)
        {
          v167 = objc_msgSend(v16, "intersectionFunctionTableOffset");
          MTLReportFailure();
        }
        checkCurveBasis(objc_msgSend(v16, "curveBasis", v167), objc_msgSend(v16, "segmentControlPointCount"));
        if (objc_msgSend(v16, "curveType") && objc_msgSend(v16, "curveType") != 1)
          MTLReportFailure();
        if (objc_msgSend(v16, "endCaps") && objc_msgSend(v16, "endCaps") != 1 && objc_msgSend(v16, "endCaps") != 2)
          MTLReportFailure();
        v79 = objc_msgSend(v16, "controlPointFormat");
        v80 = objc_msgSend(v16, "controlPointStride");
        if ((unint64_t)MTLAttributeFormatComponentCount(v79) <= 1)
          MTLReportFailure();
        v81 = MTLAttributeFormatSize(v79);
        if (v80 && v81 > v80)
        {
          v179 = v80;
          v207 = v81;
          MTLReportFailure();
        }
        v82 = MTLAttributeFormatAlignment(v79);
        if (v80 % v82)
        {
          v179 = v80;
          v207 = v82;
          MTLReportFailure();
        }
        v83 = objc_msgSend(v16, "radiusFormat", v179);
        v84 = objc_msgSend(v16, "radiusStride");
        if (MTLAttributeFormatComponentCount(v83) != 1)
          MTLReportFailure();
        v85 = MTLAttributeFormatSize(v83);
        if (v84 && v85 > v84)
        {
          v180 = v84;
          v207 = v85;
          MTLReportFailure();
        }
        v86 = MTLAttributeFormatAlignment(v83);
        if (v84 % v86)
        {
          v180 = v84;
          v207 = v86;
          MTLReportFailure();
        }
        if (v230)
        {
          checkBuffer((unint64_t)a1, (void *)objc_msgSend(v16, "controlPointBuffer"), objc_msgSend(v16, "controlPointBufferOffset"), 0, (uint64_t)CFSTR("control point buffer"));
          checkBuffer((unint64_t)a1, (void *)objc_msgSend(v16, "radiusBuffer"), objc_msgSend(v16, "radiusBufferOffset"), 0, (uint64_t)CFSTR("radius buffer"));
          checkBuffer((unint64_t)a1, (void *)objc_msgSend(v16, "indexBuffer"), objc_msgSend(v16, "indexBufferOffset"), 0, (uint64_t)CFSTR("index buffer"));
          if ((objc_msgSend(v16, "controlPointBufferOffset") & 3) != 0)
          {
            v180 = objc_msgSend(v16, "controlPointBufferOffset");
            v207 = 4;
            MTLReportFailure();
          }
          if ((objc_msgSend(v16, "radiusBufferOffset", v180) & 3) != 0)
          {
            v181 = objc_msgSend(v16, "radiusBufferOffset");
            v207 = 4;
            MTLReportFailure();
          }
          v87 = objc_msgSend(v16, "indexType", v181);
          if (v87)
            v88 = 4;
          else
            v88 = 2;
          if (((v88 - 1) & objc_msgSend(v16, "indexBufferOffset")) != 0)
          {
            v182 = objc_msgSend(v16, "indexBufferOffset");
            v207 = v88;
            MTLReportFailure();
          }
          v89 = objc_msgSend(v16, "segmentCount", v182);
          v90 = 1;
          if (v87)
            v90 = 2;
          v91 = (v89 << v90) + objc_msgSend(v16, "indexBufferOffset");
          if (v91 > objc_msgSend((id)objc_msgSend(v16, "indexBuffer"), "length"))
            goto LABEL_247;
        }
        goto LABEL_242;
      }
      v101 = (void *)objc_opt_class();
      if (objc_msgSend(v101, "isSubclassOfClass:", objc_opt_class()))
      {
        if ((unint64_t)objc_msgSend(v16, "intersectionFunctionTableOffset") >> 24)
        {
          v167 = objc_msgSend(v16, "intersectionFunctionTableOffset");
          MTLReportFailure();
        }
        checkCurveBasis(objc_msgSend(v16, "curveBasis", v167), objc_msgSend(v16, "segmentControlPointCount"));
        if (objc_msgSend(v16, "curveType") && objc_msgSend(v16, "curveType") != 1)
          MTLReportFailure();
        if (objc_msgSend(v16, "endCaps") && objc_msgSend(v16, "endCaps") != 1 && objc_msgSend(v16, "endCaps") != 2)
          MTLReportFailure();
        checkMotionParameter(a1, v5);
        v102 = objc_msgSend(v5, "motionKeyframeCount");
        if (v102 != objc_msgSend((id)objc_msgSend(v16, "controlPointBuffers"), "count"))
        {
          v184 = objc_msgSend(v5, "motionKeyframeCount");
          v207 = objc_msgSend((id)objc_msgSend(v16, "controlPointBuffers"), "count");
          MTLReportFailure();
        }
        v103 = objc_msgSend(v16, "controlPointFormat", v184);
        v104 = objc_msgSend(v16, "controlPointStride");
        if ((unint64_t)MTLAttributeFormatComponentCount(v103) <= 1)
          MTLReportFailure();
        v105 = MTLAttributeFormatSize(v103);
        if (v104 && v105 > v104)
        {
          v185 = v104;
          v207 = v105;
          MTLReportFailure();
        }
        v106 = MTLAttributeFormatAlignment(v103);
        if (v104 % v106)
        {
          v185 = v104;
          v207 = v106;
          MTLReportFailure();
        }
        v107 = objc_msgSend(v16, "radiusFormat", v185);
        v108 = objc_msgSend(v16, "radiusStride");
        if (MTLAttributeFormatComponentCount(v107) != 1)
          MTLReportFailure();
        v109 = MTLAttributeFormatSize(v107);
        if (v108 && v109 > v108)
        {
          v180 = v108;
          v207 = v109;
          MTLReportFailure();
        }
        v110 = MTLAttributeFormatAlignment(v107);
        if (v108 % v110)
        {
          v180 = v108;
          v207 = v110;
          MTLReportFailure();
        }
        if (a3)
        {
          v111 = objc_msgSend((id)objc_msgSend(v16, "controlPointBuffers"), "count");
          if (v111 != objc_msgSend((id)objc_msgSend(v16, "radiusBuffers"), "count"))
          {
            v180 = objc_msgSend((id)objc_msgSend(v16, "controlPointBuffers"), "count");
            v207 = objc_msgSend((id)objc_msgSend(v16, "radiusBuffers"), "count");
            MTLReportFailure();
          }
          v247 = 0u;
          v248 = 0u;
          v245 = 0u;
          v246 = 0u;
          v112 = (void *)objc_msgSend(v16, "controlPointBuffers", v180);
          v113 = objc_msgSend(v112, "countByEnumeratingWithState:objects:count:", &v245, v267, 16);
          if (v113)
          {
            v114 = v113;
            v115 = *(_QWORD *)v246;
            do
            {
              for (n = 0; n != v114; ++n)
              {
                if (*(_QWORD *)v246 != v115)
                  objc_enumerationMutation(v112);
                v117 = *(void **)(*((_QWORD *)&v245 + 1) + 8 * n);
                checkBuffer((unint64_t)a1, (void *)objc_msgSend(v117, "buffer", v186), objc_msgSend(v117, "offset"), 0, (uint64_t)CFSTR("control point buffer"));
                if ((objc_msgSend(v117, "offset") & 3) != 0)
                {
                  v186 = objc_msgSend(v117, "offset");
                  v207 = 4;
                  MTLReportFailure();
                }
              }
              v114 = objc_msgSend(v112, "countByEnumeratingWithState:objects:count:", &v245, v267, 16);
            }
            while (v114);
          }
          v243 = 0u;
          v244 = 0u;
          v241 = 0u;
          v242 = 0u;
          v118 = (void *)objc_msgSend(v16, "radiusBuffers", v186);
          v119 = objc_msgSend(v118, "countByEnumeratingWithState:objects:count:", &v241, v266, 16);
          if (v119)
          {
            v120 = v119;
            v121 = *(_QWORD *)v242;
            do
            {
              for (ii = 0; ii != v120; ++ii)
              {
                if (*(_QWORD *)v242 != v121)
                  objc_enumerationMutation(v118);
                v123 = *(void **)(*((_QWORD *)&v241 + 1) + 8 * ii);
                checkBuffer((unint64_t)a1, (void *)objc_msgSend(v123, "buffer", v187), objc_msgSend(v123, "offset"), 0, (uint64_t)CFSTR("radius buffer"));
                if ((objc_msgSend(v123, "offset") & 3) != 0)
                {
                  v187 = objc_msgSend(v123, "offset");
                  v207 = 4;
                  MTLReportFailure();
                }
              }
              v120 = objc_msgSend(v118, "countByEnumeratingWithState:objects:count:", &v241, v266, 16);
            }
            while (v120);
          }
          checkBuffer((unint64_t)a1, (void *)objc_msgSend(v16, "indexBuffer", v187), objc_msgSend(v16, "indexBufferOffset"), 1, (uint64_t)CFSTR("index buffer"));
          v124 = objc_msgSend(v16, "indexType");
          if (v124)
            v88 = 4;
          else
            v88 = 2;
          if (((v88 - 1) & objc_msgSend(v16, "indexBufferOffset")) != 0)
          {
            v188 = objc_msgSend(v16, "indexBufferOffset");
            v207 = v88;
            MTLReportFailure();
          }
          v125 = objc_msgSend(v16, "segmentCount", v188);
          v126 = 1;
          if (v124)
            v126 = 2;
          v127 = (v125 << v126) + objc_msgSend(v16, "indexBufferOffset");
          if (v127 > objc_msgSend((id)objc_msgSend(v16, "indexBuffer"), "length"))
          {
LABEL_247:
            v131 = objc_msgSend(v16, "segmentCount");
            v222 = objc_msgSend(v16, "indexBufferOffset");
            v224 = objc_msgSend((id)objc_msgSend(v16, "indexBuffer"), "length");
            v180 = v131;
            v207 = v88;
            MTLReportFailure();
          }
        }
LABEL_242:
        v58 = objc_msgSend(v16, "segmentCount", v180);
LABEL_131:
        v77 = v58;
        if ((a4 & 2) == 0)
          goto LABEL_185;
LABEL_184:
        checkPrimitiveData((unint64_t)a1, v16, v77);
        goto LABEL_185;
      }
      MTLReportFailure();
      v77 = 0;
      if ((a4 & 2) != 0)
        goto LABEL_184;
LABEL_185:
      v14 = v77 + v235;
      v15 = v234 + 1;
    }
    while (v234 + 1 != v233);
    v132 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v261, v271, 16);
    v233 = v132;
  }
  while (v132);
LABEL_249:
  result = objc_msgSend(v5, "usage");
  if ((result & 4) != 0)
  {
    if (v14 >> 30)
      return MTLReportFailure();
  }
  else if (v14 >> 28)
  {
    return MTLReportFailure();
  }
  return result;
}

uint64_t checkCurveBasis(uint64_t result, uint64_t a2)
{
  switch(result)
  {
    case 0:
      if ((unint64_t)(a2 - 5) <= 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_10;
      break;
    case 1:
      if (a2 != 4)
        goto LABEL_10;
      break;
    case 2:
      if (a2 != 2)
        goto LABEL_10;
      break;
    case 3:
      if ((unint64_t)(a2 - 5) <= 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_10;
      break;
    default:
LABEL_10:
      result = MTLReportFailure();
      break;
  }
  return result;
}

const __CFString *MTLDebugStageToString(unint64_t a1)
{
  if (a1 > 6)
    return CFSTR("Unknown");
  else
    return off_24F795598[a1];
}

uint64_t MTLRenderStagesToDebugStage(uint64_t a1)
{
  unint64_t v1;
  __int128 v2;

  *((_QWORD *)&v2 + 1) = a1;
  *(_QWORD *)&v2 = a1 - 2;
  v1 = v2 >> 1;
  if (v1 > 7)
    return 2;
  else
    return qword_22CEAB728[v1];
}

BOOL MTLDebugStageIsRenderStage(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  BOOL v3;

  switch(a1)
  {
    case 2:
      return a2 < 2;
    case 3:
      v3 = (a2 & 0xFFFFFFFFFFFFFFFDLL) == 0;
      goto LABEL_8;
    case 4:
      v3 = (a2 & 0xFFFFFFFFFFFFFFFBLL) == 0;
      goto LABEL_8;
    case 5:
      v3 = (a2 & 0xFFFFFFFFFFFFFFF7) == 0;
      goto LABEL_8;
    case 6:
      v3 = (a2 & 0xFFFFFFFFFFFFFFEFLL) == 0;
LABEL_8:
      result = v3;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void emitRenderPipelineUsage(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _DWORD *v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  int v20;
  const char *v21;
  NSObject *v22;
  int v23;
  const char *v24;
  int v25;
  uint64_t v26;
  void *context;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  _BYTE v35[10];
  _BYTE v36[6];
  uint64_t v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    v6 = (_DWORD *)MEMORY[0x24BDDDAC8];
    while (1)
    {
      v7 = *((_DWORD *)v5 + 7);
      if (v7)
      {
        if (!*v6)
          goto LABEL_7;
        if (*v6 == 1)
          break;
      }
LABEL_9:
      v5 = (uint64_t *)*v5;
      if (!v5)
        goto LABEL_10;
    }
    printf("\n\nRenderPipelineUsage, pipelineID=%u, vertexShaderID=%u, fragmentShaderID=%u, usageCount=%u", *((_DWORD *)v5 + 4), *((_DWORD *)v5 + 5), *((_DWORD *)v5 + 6), v7);
LABEL_7:
    v8 = objc_msgSend(a1, "telemetryLog");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *((_DWORD *)v5 + 4);
      v10 = *((_DWORD *)v5 + 5);
      v11 = *((_DWORD *)v5 + 6);
      v12 = *((_DWORD *)v5 + 7);
      *(_DWORD *)buf = 67109888;
      v33 = v9;
      v34 = 1024;
      *(_DWORD *)v35 = v10;
      *(_WORD *)&v35[4] = 1024;
      *(_DWORD *)&v35[6] = v11;
      *(_WORD *)v36 = 1024;
      *(_DWORD *)&v36[2] = v12;
      _os_log_impl(&dword_22CD98000, v8, OS_LOG_TYPE_DEFAULT, "RenderPipelineUsage, pipelineID=%u, vertexShaderID=%u, fragmentShaderID=%u, usageCount=%u", buf, 0x1Au);
    }
    goto LABEL_9;
  }
LABEL_10:
  context = (void *)MEMORY[0x22E309364]();
  v13 = *(uint64_t **)(a3 + 16);
  if (v13)
  {
    while (1)
    {
      v14 = (void *)objc_msgSend(MEMORY[0x24BDD16A8], "string");
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v15 = (void *)v13[5];
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v28, v38, 16);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)v29;
        do
        {
          for (i = 0; i != v17; ++i)
          {
            if (*(_QWORD *)v29 != v18)
              objc_enumerationMutation(v15);
            objc_msgSend(v14, "appendFormat:", CFSTR("%s=%u, "), objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * i), "UTF8String"), objc_msgSend((id)objc_msgSend((id)v13[5], "objectForKey:", *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * i)), "unsignedIntegerValue"));
          }
          v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v28, v38, 16);
        }
        while (v17);
      }
      if ((unint64_t)objc_msgSend(v14, "length") >= 2)
        objc_msgSend(v14, "deleteCharactersInRange:", objc_msgSend(v14, "length") - 2, 2);
      v20 = *((_DWORD *)v13 + 8);
      if (!v20)
        goto LABEL_32;
      if (!*MEMORY[0x24BDDDAC8])
        goto LABEL_27;
      if (*MEMORY[0x24BDDDAC8] == 1)
        break;
LABEL_32:
      v13 = (uint64_t *)*v13;
      if (!v13)
        goto LABEL_33;
    }
    if (v13[3] == 1)
      v21 = "vertex";
    else
      v21 = "fragment";
    printf("\n\nFunctionUsage, functionID=%u, type=%s, usageCount=%u, %s", *((_DWORD *)v13 + 4), v21, v20, (const char *)objc_msgSend(v14, "UTF8String"));
LABEL_27:
    v22 = objc_msgSend(a1, "telemetryLog");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v23 = *((_DWORD *)v13 + 4);
      if (v13[3] == 1)
        v24 = "vertex";
      else
        v24 = "fragment";
      v25 = *((_DWORD *)v13 + 8);
      v26 = objc_msgSend(v14, "UTF8String");
      *(_DWORD *)buf = 67109890;
      v33 = v23;
      v34 = 2080;
      *(_QWORD *)v35 = v24;
      *(_WORD *)&v35[8] = 1024;
      *(_DWORD *)v36 = v25;
      *(_WORD *)&v36[4] = 2080;
      v37 = v26;
      _os_log_impl(&dword_22CD98000, v22, OS_LOG_TYPE_DEFAULT, "FunctionUsage, functionID=%u, type=%s, usageCount=%u, %s", buf, 0x22u);
    }
    goto LABEL_32;
  }
LABEL_33:
  objc_autoreleasePoolPop(context);
}

void emitRenderPipelineStats(void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  void *v8;
  void *v9;
  uint64_t *i;
  _QWORD *v11;
  _DWORD *v12;
  NSObject *v13;
  void *v14;
  uint64_t *j;
  _QWORD *v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  unsigned int v24;
  NSObject *v25;
  unsigned int v26;
  unint64_t v27;
  double v28;
  double v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  uint8_t buf[4];
  _BYTE v55[10];
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  double v93;
  __int16 v94;
  unint64_t v95;
  __int16 v96;
  unsigned int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  double v103;
  __int16 v104;
  unint64_t v105;
  __int16 v106;
  unsigned int v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v8 = (void *)MEMORY[0x22E309364]();
  v9 = (void *)objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("VertexFunctionStats, "));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    v11 = i + 2;
    if (*((char *)i + 39) < 0)
      v11 = (_QWORD *)*v11;
    objc_msgSend(v9, "appendFormat:", CFSTR("min%s=%u, max%s=%u, avg%s=%f, total%s=%llu, count%s=%u, "), v11, *((unsigned int *)i + 10), v11, *((unsigned int *)i + 11), v11, (float)((float)(unint64_t)i[6] / (float)*((unsigned int *)i + 14)), v11, i[6], v11, *((unsigned int *)i + 14));
  }
  if ((unint64_t)objc_msgSend(v9, "length") > 1)
    objc_msgSend(v9, "deleteCharactersInRange:", objc_msgSend(v9, "length") - 2, 2);
  v12 = (_DWORD *)MEMORY[0x24BDDDAC8];
  if (*MEMORY[0x24BDDDAC8])
  {
    if (*MEMORY[0x24BDDDAC8] != 1)
      goto LABEL_12;
    printf("\n\n%s", (const char *)objc_msgSend(v9, "UTF8String"));
  }
  v13 = objc_msgSend(a1, "telemetryLog");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v55 = objc_msgSend(v9, "UTF8String");
    _os_log_impl(&dword_22CD98000, v13, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
LABEL_12:
  v14 = (void *)objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", CFSTR("FragmentFunctionStats, "));
  for (j = *(uint64_t **)(a3 + 16); j; j = (uint64_t *)*j)
  {
    v16 = j + 2;
    if (*((char *)j + 39) < 0)
      v16 = (_QWORD *)*v16;
    objc_msgSend(v14, "appendFormat:", CFSTR("min%s=%u, max%s=%u, avg%s=%f, total%s=%llu, count%s=%u, "), v16, *((unsigned int *)j + 10), v16, *((unsigned int *)j + 11), v16, (float)((float)(unint64_t)j[6] / (float)*((unsigned int *)j + 14)), v16, j[6], v16, *((unsigned int *)j + 14));
  }
  if ((unint64_t)objc_msgSend(v14, "length") > 1)
    objc_msgSend(v14, "deleteCharactersInRange:", objc_msgSend(v14, "length") - 2, 2);
  if (*v12)
  {
    if (*v12 != 1)
      goto LABEL_23;
    printf("\n\n%s", (const char *)objc_msgSend(v14, "UTF8String"));
  }
  v17 = objc_msgSend(a1, "telemetryLog");
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v18 = objc_msgSend(v14, "UTF8String");
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v55 = v18;
    _os_log_impl(&dword_22CD98000, v17, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
LABEL_23:
  objc_autoreleasePoolPop(v8);
  v19 = a4[30];
  if (!v19)
    return;
  if (*v12)
  {
    if (*v12 != 1)
      return;
    v20 = a4[22];
    v21 = *((_QWORD *)a4 + 10);
    v22 = 0.0;
    v23 = 0.0;
    if (v20)
      v23 = (float)((float)v21 / (float)v20);
    v24 = a4[16];
    if (v24)
      v22 = (float)((float)*((unint64_t *)a4 + 7) / (float)v24);
    printf("\n\nRenderPipeline, total=%u, color0Blend=%u, color1Blend=%u, color2Blend=%u, color3Blend=%u, color4Blend=%u, color5Blend=%u, color6Blend=%u, color7Blend=%u, alphaTest=%u, alphaToOne=%u, alphaToCoverage=%u, fragmentUsesDiscard=%u, fragmentWritesSampleMask=%u, fragmentWritesDepth=%u, vertexRegisterSpill=%u, fragmentRegisterSpill=%u, fragmentReadsFramebufferValues=%u, minRasterSampleCount=%u, maxRasterSampleCount=%u, avgRasterSampleCount=%f, totalRasterSampleCount=%llu, countRasterSampleCount=%u, minColorSampleCount=%u, maxColorSampleCount=%u, avgColorSampleCount=%f, totalColorSampleCount=%llu, countColorSampleCount=%u", v19, *a4, a4[1], a4[2], a4[3], a4[4], a4[5], a4[6], a4[7], a4[8], a4[9],
      a4[10],
      a4[24],
      a4[25],
      a4[26],
      a4[27],
      a4[28],
      a4[29],
      a4[18],
      a4[19],
      v23,
      v21,
      v20,
      a4[12],
      a4[13],
      v22,
      *((_QWORD *)a4 + 7),
      v24);
  }
  v25 = objc_msgSend(a1, "telemetryLog");
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = a4[22];
    v27 = *((_QWORD *)a4 + 10);
    v28 = 0.0;
    v29 = 0.0;
    if (v26)
      v29 = (float)((float)v27 / (float)v26);
    v30 = a4[29];
    v31 = a4[30];
    v33 = *a4;
    v32 = a4[1];
    v35 = a4[2];
    v34 = a4[3];
    v37 = a4[4];
    v36 = a4[5];
    v39 = a4[6];
    v38 = a4[7];
    v41 = a4[8];
    v40 = a4[9];
    v42 = a4[10];
    v44 = a4[24];
    v43 = a4[25];
    v46 = a4[26];
    v45 = a4[27];
    v47 = a4[28];
    v49 = a4[18];
    v48 = a4[19];
    v51 = a4[12];
    v50 = a4[13];
    v52 = a4[16];
    v53 = *((_QWORD *)a4 + 7);
    if (v52)
      v28 = (float)((float)v53 / (float)v52);
    *(_DWORD *)buf = 67116032;
    *(_DWORD *)v55 = v31;
    *(_WORD *)&v55[4] = 1024;
    *(_DWORD *)&v55[6] = v33;
    v56 = 1024;
    v57 = v32;
    v58 = 1024;
    v59 = v35;
    v60 = 1024;
    v61 = v34;
    v62 = 1024;
    v63 = v37;
    v64 = 1024;
    v65 = v36;
    v66 = 1024;
    v67 = v39;
    v68 = 1024;
    v69 = v38;
    v70 = 1024;
    v71 = v41;
    v72 = 1024;
    v73 = v40;
    v74 = 1024;
    v75 = v42;
    v76 = 1024;
    v77 = v44;
    v78 = 1024;
    v79 = v43;
    v80 = 1024;
    v81 = v46;
    v82 = 1024;
    v83 = v45;
    v84 = 1024;
    v85 = v47;
    v86 = 1024;
    v87 = v30;
    v88 = 1024;
    v89 = v49;
    v90 = 1024;
    v91 = v48;
    v92 = 2048;
    v93 = v29;
    v94 = 2048;
    v95 = v27;
    v96 = 1024;
    v97 = v26;
    v98 = 1024;
    v99 = v51;
    v100 = 1024;
    v101 = v50;
    v102 = 2048;
    v103 = v28;
    v104 = 2048;
    v105 = v53;
    v106 = 1024;
    v107 = v52;
    _os_log_impl(&dword_22CD98000, v25, OS_LOG_TYPE_DEFAULT, "RenderPipeline, total=%u, color0Blend=%u, color1Blend=%u, color2Blend=%u, color3Blend=%u, color4Blend=%u, color5Blend=%u, color6Blend=%u, color7Blend=%u, alphaTest=%u, alphaToOne=%u, alphaToCoverage=%u, fragmentUsesDiscard=%u, fragmentWritesSampleMask=%u, fragmentWritesDepth=%u, vertexRegisterSpill=%u, fragmentRegisterSpill=%u, fragmentReadsFramebufferValues=%u, minRasterSampleCount=%u, maxRasterSampleCount=%u, avgRasterSampleCount=%f, totalRasterSampleCount=%llu, countRasterSampleCount=%u, minColorSampleCount=%u, maxColorSampleCount=%u, avgColorSampleCount=%f, totalColorSampleCount=%llu, countColorSampleCount=%u", buf, 0xBAu);
  }
}

void sub_22CE25864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryRenderPipelineUsageRec>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 7) = 0;
  *(_QWORD *)((char *)v11 + 20) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_22CE25B1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLTelemetryRenderFuncUsageRec>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_22CE25D44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_22CE26E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CE26ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CE26F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<objc_object  {objcproto10MTLTexture}*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22CE274A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<objc_object  {objcproto15MTLSamplerState}*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22CE27518(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void addBufferForUsageValidation(MTLGPUDebugHeap *a1, MTLGPUDebugBuffer *a2)
{
  BOOL *p_enableResourceUsageValidation;
  unsigned int v5;
  unsigned int v6;
  vector<unsigned int, std::allocator<unsigned int>> *p_bufferIndices;
  unsigned int *end;
  unsigned int *value;
  unsigned int *v10;
  unsigned int *begin;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;

  if (*((_BYTE *)&a1->super.super._externalReferences + 4))
  {
    p_enableResourceUsageValidation = &a1->_enableResourceUsageValidation;
    os_unfair_lock_lock((os_unfair_lock_t)&a1->_enableResourceUsageValidation);
    v5 = -[MTLGPUDebugBuffer bufferIndex](a2, "bufferIndex");
    v6 = v5;
    p_bufferIndices = &a1->_bufferIndices;
    end = p_bufferIndices->__end_;
    value = p_bufferIndices->__end_cap_.__value_;
    if (end >= value)
    {
      begin = p_bufferIndices->__begin_;
      v12 = end - p_bufferIndices->__begin_;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v14 = (char *)value - (char *)begin;
      if (v14 >> 1 > v13)
        v13 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&p_bufferIndices->__end_cap_, v15);
        begin = p_bufferIndices->__begin_;
        end = p_bufferIndices->__end_;
      }
      else
      {
        v16 = 0;
      }
      v17 = (unsigned int *)&v16[4 * v12];
      v18 = (unsigned int *)&v16[4 * v15];
      *v17 = v6;
      v10 = v17 + 1;
      while (end != begin)
      {
        v19 = *--end;
        *--v17 = v19;
      }
      p_bufferIndices->__begin_ = v17;
      p_bufferIndices->__end_ = v10;
      p_bufferIndices->__end_cap_.__value_ = v18;
      if (begin)
        operator delete(begin);
    }
    else
    {
      *end = v5;
      v10 = end + 1;
    }
    p_bufferIndices->__end_ = v10;
    os_unfair_lock_unlock((os_unfair_lock_t)p_enableResourceUsageValidation);
  }
}

void sub_22CE2777C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void addTextureForUsageValidation(MTLGPUDebugHeap *a1, MTLGPUDebugTexture *a2)
{
  os_unfair_lock_s *p_textureLock;
  unsigned int v5;
  unint64_t v6;
  vector<std::pair<unsigned int, MTLTextureType>, std::allocator<std::pair<unsigned int, MTLTextureType>>> *p_textureIndicesAndTypes;
  char *value;
  char *end;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *begin;

  if (*((_BYTE *)&a1->super.super._externalReferences + 4))
  {
    p_textureLock = &a1->_textureLock;
    os_unfair_lock_lock(&a1->_textureLock);
    v5 = -[MTLGPUDebugTexture gpuIdentifier](a2, "gpuIdentifier");
    v6 = -[MTLToolsTexture textureType](a2, "textureType");
    p_textureIndicesAndTypes = &a1->_textureIndicesAndTypes;
    value = (char *)p_textureIndicesAndTypes->__end_cap_.__value_;
    end = (char *)p_textureIndicesAndTypes->__end_;
    if (end >= value)
    {
      v11 = (end - (char *)p_textureIndicesAndTypes->__begin_) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
      v13 = value - (char *)p_textureIndicesAndTypes->__begin_;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<NSData *,unsigned long>>>((uint64_t)&p_textureIndicesAndTypes->__end_cap_, v14);
      else
        v15 = 0;
      v16 = &v15[16 * v11];
      v17 = &v15[16 * v14];
      *(_QWORD *)v16 = v5;
      *((_QWORD *)v16 + 1) = v6;
      v10 = v16 + 16;
      begin = (char *)p_textureIndicesAndTypes->__begin_;
      v18 = (char *)p_textureIndicesAndTypes->__end_;
      if (v18 != p_textureIndicesAndTypes->__begin_)
      {
        do
        {
          *((_OWORD *)v16 - 1) = *((_OWORD *)v18 - 1);
          v16 -= 16;
          v18 -= 16;
        }
        while (v18 != begin);
        v18 = (char *)p_textureIndicesAndTypes->__begin_;
      }
      p_textureIndicesAndTypes->__begin_ = v16;
      p_textureIndicesAndTypes->__end_ = v10;
      p_textureIndicesAndTypes->__end_cap_.__value_ = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *(_QWORD *)end = v5;
      *((_QWORD *)end + 1) = v6;
      v10 = end + 16;
    }
    p_textureIndicesAndTypes->__end_ = v10;
    os_unfair_lock_unlock(p_textureLock);
  }
}

void sub_22CE279F8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CE27C68(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CE27CEC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CE27D64(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CE27DDC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CE27F4C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void MemberRef::~MemberRef(MemberRef *this)
{
  uint64_t v2;
  void **v3;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (void **)*((_QWORD *)this + 2);
    std::vector<MemberRef>::__destroy_vector::operator()[abi:ne180100](&v3);
    MEMORY[0x22E309118](v2, 0x20C40960023A9);
  }

}

NSUInteger initMemberWithArrayType(MemberRef *a1, MTLArrayType *a2)
{
  MTLDataType v4;
  int v5;
  StructType *v6;
  NSUInteger result;

  v4 = -[MTLArrayType elementType](a2, "elementType");
  if ((uint64_t)v4 > (uint64_t)MTLDataTypeRenderPipeline)
  {
    switch(v4)
    {
      case MTLDataTypeVisibleFunctionTable:
        v5 = 8;
        goto LABEL_24;
      case MTLDataTypeIntersectionFunctionTable:
        v5 = 9;
        goto LABEL_24;
      case MTLDataTypePrimitiveAccelerationStructure:
        v5 = 10;
        goto LABEL_24;
      case MTLDataTypeInstanceAccelerationStructure:
        v5 = 11;
        goto LABEL_24;
      default:
        if (v4 == MTLDataTypeComputePipeline)
        {
          v5 = 6;
        }
        else
        {
          if (v4 != MTLDataTypeIndirectCommandBuffer)
            goto LABEL_26;
          v5 = 7;
        }
        break;
    }
    goto LABEL_24;
  }
  if ((uint64_t)v4 > (uint64_t)MTLDataTypeTexture)
  {
    switch(v4)
    {
      case MTLDataTypeSampler:
        v5 = 2;
        goto LABEL_24;
      case MTLDataTypePointer:
        v5 = 3;
        goto LABEL_24;
      case MTLDataTypeRenderPipeline:
        v5 = 5;
        goto LABEL_24;
    }
LABEL_26:
    *(_DWORD *)a1 = 0;
    goto LABEL_25;
  }
  switch(v4)
  {
    case MTLDataTypeStruct:
      *(_DWORD *)a1 = 4;
      v6 = (StructType *)operator new();
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = 0;
      *(_QWORD *)v6 = 0;
      *((_QWORD *)a1 + 2) = v6;
      *((_DWORD *)a1 + 2) = StructType::initWithStructType(v6, -[MTLArrayType elementStructType](a2, "elementStructType"));
      break;
    case MTLDataTypeArray:
      initMemberWithArrayType(a1, -[MTLArrayType elementArrayType](a2, "elementArrayType"));
      break;
    case MTLDataTypeTexture:
      v5 = 1;
LABEL_24:
      *(_DWORD *)a1 = v5;
      break;
    default:
      goto LABEL_26;
  }
LABEL_25:
  result = -[MTLArrayType arrayLength](a2, "arrayLength");
  *((_DWORD *)a1 + 3) *= (_DWORD)result;
  return result;
}

uint64_t StructType::initWithStructType(StructType *this, MTLStructType *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  StructType *v13;

  v4 = -[NSArray count](-[MTLStructType members](a2, "members"), "count");
  std::vector<MemberRef>::resize((uint64_t)this, v4);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = -[NSArray objectAtIndexedSubscript:](-[MTLStructType members](a2, "members"), "objectAtIndexedSubscript:", v6);
      v8 = *(_QWORD *)this;
      v9 = (int *)(*(_QWORD *)this + v5);
      v9[1] = objc_msgSend(v7, "indirectArgumentIndex");
      v9[2] = 1;
      v10 = objc_msgSend(v7, "dataType");
      if (v10 > 78)
        break;
      if (v10 > 58)
      {
        switch(v10)
        {
          case ';':
            v11 = 2;
            break;
          case '<':
            *v9 = 3;
            if (objc_msgSend((id)objc_msgSend(v7, "pointerType"), "elementIsArgumentBuffer"))
              *(_QWORD *)(v8 + v5 + 24) = (id)objc_msgSend((id)objc_msgSend(v7, "pointerType"), "elementStructType");
            goto LABEL_28;
          case 'N':
            v11 = 5;
            break;
          default:
LABEL_30:
            *v9 = 0;
            goto LABEL_28;
        }
        goto LABEL_27;
      }
      switch(v10)
      {
        case 1:
          v12 = v8 + v5;
          *(_DWORD *)(v8 + v5) = 4;
          v13 = (StructType *)operator new();
          *((_QWORD *)v13 + 1) = 0;
          *((_QWORD *)v13 + 2) = 0;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v12 + 16) = v13;
          v9[2] = StructType::initWithStructType(v13, (MTLStructType *)objc_msgSend(v7, "structType"));
          break;
        case 2:
          initMemberWithArrayType((MemberRef *)v9, (MTLArrayType *)objc_msgSend(v7, "arrayType"));
          break;
        case 58:
          *v9 = 1;
          break;
        default:
          goto LABEL_30;
      }
LABEL_28:
      ++v6;
      v5 += 32;
      if (v4 == v6)
        return (*(_DWORD *)(*(_QWORD *)this + 32 * v4 - 28)
                            + *(_DWORD *)(*(_QWORD *)this + 32 * v4 - 20) * *(_DWORD *)(*(_QWORD *)this + 32 * v4 - 24));
    }
    switch(v10)
    {
      case 's':
        v11 = 8;
        break;
      case 't':
        v11 = 9;
        break;
      case 'u':
        v11 = 10;
        break;
      case 'v':
        v11 = 11;
        break;
      default:
        if (v10 == 79)
        {
          v11 = 6;
        }
        else
        {
          if (v10 != 80)
            goto LABEL_30;
          v11 = 7;
        }
        break;
    }
LABEL_27:
    *v9 = v11;
    goto LABEL_28;
  }
  return (*(_DWORD *)(*(_QWORD *)this + 32 * v4 - 28)
                      + *(_DWORD *)(*(_QWORD *)this + 32 * v4 - 20) * *(_DWORD *)(*(_QWORD *)this + 32 * v4 - 24));
}

void std::vector<MemberRef>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (v3 - *(_QWORD *)a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 32 * a2;
      while (v3 != v5)
        MemberRef::~MemberRef((MemberRef *)(v3 - 32));
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<MemberRef>::__append((char **)a1, a2 - v4);
  }
}

uint64_t StructType::findMemberContainingIndex(StructType *this, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, _MTLMessageContext *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  _DWORD *v11;
  unsigned int v12;

  v6 = *(_QWORD *)this;
  if ((_DWORD)a3 != (_DWORD)a4)
  {
    v7 = a4;
    while (1)
    {
      v8 = (a3 + v7) >> 1;
      v9 = (_DWORD *)(v6 + 32 * v8);
      v10 = v9[1];
      if (v10 <= a2)
      {
        if (v10 + v9[2] * v9[3] - 1 >= a2)
          return (a3 + v7) >> 1;
        LODWORD(a3) = v8 + 1;
      }
      else
      {
        v7 = (v8 - 1);
      }
      if ((_DWORD)a3 == (_DWORD)v7)
        goto LABEL_9;
    }
  }
  v7 = a3;
LABEL_9:
  v11 = (_DWORD *)(v6 + 32 * v7);
  v12 = v11[1];
  if (v12 > a2 || v12 + v11[3] * v11[2] - 1 < a2)
    _MTLMessageContextPush_();
  return v7;
}

_DWORD *StructType::findMemberAtIndex(StructType *this, unsigned int a2, unsigned int a3, _MTLMessageContext *a4)
{
  unsigned int v6;
  StructType *v7;
  int64_t var0;
  uint64_t v9;
  unsigned int MemberContainingIndex;
  uint64_t v11;
  _DWORD *result;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  v6 = a2;
  v7 = this;
  var0 = a4->var0;
  v9 = ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 5) - 1;
  while (1)
  {
    MemberContainingIndex = StructType::findMemberContainingIndex(this, a2, 0, v9, a3, a4);
    if (a4->var0 != var0)
      break;
    v11 = MemberContainingIndex;
    result = (_DWORD *)(*(_QWORD *)v7 + 32 * MemberContainingIndex);
    v13 = result[2];
    v14 = result[3];
    if (v14)
      v14 = (v6 - result[1]) / v13;
    if (*result != 4)
      return result;
    v15 = *(_QWORD *)v7 + 32 * v11;
    v7 = *(StructType **)(v15 + 16);
    LODWORD(v15) = *(_DWORD *)(v15 + 4) + v14 * v13;
    v6 -= v15;
    a3 += v15;
    v9 = ((*((_QWORD *)v7 + 1) - *(_QWORD *)v7) >> 5) - 1;
    this = v7;
    a2 = v6;
  }
  return 0;
}

uint64_t StructType::indexRangeIsValueType(StructType *a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, _MTLMessageContext *a6)
{
  unsigned int v8;
  StructType *v9;
  uint64_t v10;
  int64_t var0;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t MemberContainingIndex;
  uint64_t v21;
  uint64_t result;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  StructType *v49;
  uint64_t v51;

  v8 = a2;
  v9 = a1;
  LODWORD(v10) = 0;
  var0 = a6->var0;
  v12 = ((*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 5) - 1;
  LODWORD(v13) = v12;
  do
  {
    v14 = (v13 + v10 + 1) >> 1;
    v15 = (_DWORD *)(*(_QWORD *)a1 + 32 * v14);
    v16 = v15[1];
    v17 = v16 + v15[3] * v15[2] - 1;
    if (v17 >= a3)
      v18 = (v13 + v10 + 1) >> 1;
    else
      v18 = v13;
    if (v16 <= a3)
      v13 = v18;
    else
      v13 = (v14 - 1);
    if (v16 <= a2)
      v19 = v14;
    else
      v19 = v10;
    if (v17 < a2)
      v10 = (v14 + 1);
    else
      v10 = v19;
    v43 = v12 == (_DWORD)v13 - (_DWORD)v10;
    v12 = v13 - v10;
  }
  while (!v43);
  if (v13 >= v10 || (result = _MTLMessageContextPush_(), a6->var0 == var0))
  {
    v49 = v9;
    MemberContainingIndex = StructType::findMemberContainingIndex(v9, v8, v10, v13, a4, a6);
    LODWORD(v21) = MemberContainingIndex;
    result = StructType::findMemberContainingIndex(v9, a3, MemberContainingIndex, v13, a4, a6);
    if (a6->var0 == var0)
    {
      v23 = result;
      if (v21 <= result)
      {
        v47 = v8;
        v45 = result;
        do
        {
          v51 = *(_QWORD *)v9;
          v24 = (unsigned int *)(*(_QWORD *)v9 + 32 * v21);
          if (*v24 == 4)
          {
            v27 = v24[2];
            v26 = v24 + 2;
            v25 = v27;
            v28 = *(v26 - 1);
            v29 = v28 + a4;
            if (v8 >= v28)
              v30 = v8 - v28;
            else
              v30 = 0;
            v31 = v28 + v26[1] * v25 - 1;
            if (v31 >= a3)
              v31 = a3;
            v32 = v31 - v28;
            v33 = v30 / v25;
            v34 = (v31 - v28) / v25;
            v35 = v30 / v25 + 1;
            v36 = *((_QWORD *)v26 + 1);
            if (v35 >= v34)
            {
              v37 = a5;
              v38 = v33 * v25;
              v39 = v30 % v25;
              v40 = v32 - v33 * v25;
              v41 = v25 - 1;
              if (v41 >= v40)
                v42 = v40;
              else
                v42 = v41;
              v46 = v29;
              result = StructType::indexRangeIsValueType(v36, v39, v42, (v38 + v29), v37, a6);
              v43 = v33 == v34 || v30 == v38;
              a5 = v37;
              v23 = v45;
              v8 = v47;
              v9 = v49;
              if (!v43)
                result = StructType::indexRangeIsValueType(*((_QWORD *)v26 + 1), 0, v32 - *v26 * v34, *v26 * v34 + v46, a5, a6);
            }
            else
            {
              result = StructType::indexRangeIsValueType(v36, 0, v25 - 1, v29 + v35 * v25, a5, a6);
              v8 = v47;
              v9 = v49;
            }
          }
          else if (*v24 != (_DWORD)a5)
          {
            MemberRef::typeToString(a5);
            MemberRef::typeToString(*v24);
            result = _MTLMessageContextPush_();
          }
          if ((_DWORD)v21 == v23)
          {
            LODWORD(v21) = v21 + 1;
          }
          else
          {
            v44 = *(_DWORD *)(v51 + 32 * v21 + 4)
                + *(_DWORD *)(v51 + 32 * v21 + 12) * *(_DWORD *)(v51 + 32 * v21 + 8);
            v21 = (v21 + 1);
            if (v44 != *(_DWORD *)(*(_QWORD *)v9 + 32 * v21 + 4))
              result = _MTLMessageContextPush_();
          }
        }
        while (v21 <= v23);
      }
    }
  }
  return result;
}

__CFString *MemberRef::typeToString(unsigned int a1)
{
  if (a1 >= 0xC)
    abort();
  return off_24F7955F8[a1];
}

StructType *StructType::indexRangeIsValueType(StructType *result, unint64_t *a2, uint64_t a3, _MTLMessageContext *a4)
{
  unint64_t v4;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = a2[1];
  if (v4)
  {
    v6 = (_DWORD *)(*(_QWORD *)result + 32 * (((*((_QWORD *)result + 1) - *(_QWORD *)result) >> 5) - 1));
    v7 = (v6[1] + v6[3] * v6[2] - 1);
    v8 = *a2;
    v9 = v4 + v8 - 1;
    if (v8 < *(unsigned int *)(*(_QWORD *)result + 4) || v9 > v7)
      return (StructType *)_MTLMessageContextPush_();
    else
      return (StructType *)StructType::indexRangeIsValueType(result, v8, v9, 0, a3, a4);
  }
  return result;
}

uint64_t StructType::indexIsValueType(StructType *a1, unint64_t a2, uint64_t a3, _MTLMessageContext *a4)
{
  _DWORD *v4;
  unint64_t v5;

  v4 = (_DWORD *)(*(_QWORD *)a1 + 32 * (((*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 5) - 1));
  v5 = (v4[1] + v4[3] * v4[2] - 1);
  if (*(unsigned int *)(*(_QWORD *)a1 + 4) > a2 || v5 < a2)
    return _MTLMessageContextPush_();
  else
    return StructType::indexRangeIsValueType(a1, a2, a2, 0, a3, a4);
}

void sub_22CE2BB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CE2BD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CE2BFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<MemberRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        MemberRef::~MemberRef((MemberRef *)(v4 - 32));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<MemberRef>::__append(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  int64x2_t v21;
  char *v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  uint64_t v26;

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (uint64_t)&v6[-v7] >> 5)
  {
    if (a2)
    {
      v14 = v7 + 32 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 12) = 1;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        v7 += 32;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = (char *)v7;
  }
  else
  {
    v8 = v7 - (_QWORD)*a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v26 = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MemberRef>>(result, v12);
    else
      v13 = 0;
    v15 = &v13[32 * v10];
    v16 = &v15[32 * a2];
    v17 = v15;
    do
    {
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_DWORD *)v17 + 3) = 1;
      *((_QWORD *)v17 + 2) = 0;
      *((_QWORD *)v17 + 3) = 0;
      v17 += 32;
    }
    while (v17 != v16);
    v19 = *a1;
    v18 = (unint64_t)a1[1];
    if ((char *)v18 == *a1)
    {
      v21 = vdupq_n_s64(v18);
    }
    else
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 16);
        *((_OWORD *)v15 - 2) = *(_OWORD *)(v18 - 32);
        *((_OWORD *)v15 - 1) = v20;
        v15 -= 32;
        v18 -= 32;
      }
      while ((char *)v18 != v19);
      v21 = *(int64x2_t *)a1;
    }
    *a1 = v15;
    a1[1] = v16;
    v24 = v21;
    v22 = a1[2];
    a1[2] = &v13[32 * v12];
    v25 = v22;
    v23 = v21.i64[0];
    return std::__split_buffer<MemberRef>::~__split_buffer((uint64_t)&v23);
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MemberRef>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__split_buffer<MemberRef>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    MemberRef::~MemberRef((MemberRef *)(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void CheckerboardRenderTargetPipelineCache::init(CheckerboardRenderTargetPipelineCache *this, MTLDebugDevice *a2)
{
  void *v4;
  MTLLibrary *v5;
  id v6;

  v4 = (void *)MEMORY[0x22E309364]();
  v5 = (MTLLibrary *)objc_msgSend(-[MTLToolsObject baseObject](a2, "baseObject"), "newLibraryWithURL:error:", objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.gpusw.MetalTools")), "URLForResource:withExtension:", CFSTR("MTLDebugShaders"), CFSTR("metallib")), 0);
  this->_library = v5;
  this->_vertexFunction = (MTLFunction *)-[MTLLibrary newFunctionWithName:](v5, "newFunctionWithName:", CFSTR("simple_vertex"));
  this->_fConstants = (MTLFunctionConstantValues *)objc_alloc_init(MEMORY[0x24BDDD5A0]);
  v6 = objc_alloc_init(MEMORY[0x24BDDD590]);
  objc_msgSend(v6, "setDepthCompareFunction:", 7);
  objc_msgSend(v6, "setDepthWriteEnabled:", 0);
  this->_depthStencilState[0] = (MTLDepthStencilState *)objc_msgSend((id)-[MTLLibrary device](this->_library, "device"), "newDepthStencilStateWithDescriptor:", v6);
  objc_msgSend(v6, "setDepthWriteEnabled:", 1);
  this->_depthStencilState[1] = (MTLDepthStencilState *)objc_msgSend((id)-[MTLLibrary device](this->_library, "device"), "newDepthStencilStateWithDescriptor:", v6);

  objc_autoreleasePoolPop(v4);
}

unint64_t _validateTextureBufferDescriptor(void *a1, void *a2)
{
  unint64_t v4;
  char v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = objc_msgSend(a1, "width");
  if (v4 > objc_msgSend(a2, "maxTextureBufferWidth"))
  {
    v8 = objc_msgSend(a1, "width");
    v14 = objc_msgSend(a2, "maxTextureBufferWidth");
    _MTLMessageContextPush_();
  }
  if (objc_msgSend(a1, "height", v8, v14) != 1)
  {
    v9 = objc_msgSend(a1, "height");
    _MTLMessageContextPush_();
  }
  if (objc_msgSend(a1, "depth", v9) != 1)
  {
    v10 = objc_msgSend(a1, "depth");
    _MTLMessageContextPush_();
  }
  if (objc_msgSend(a1, "mipmapLevelCount", v10) != 1)
  {
    v11 = objc_msgSend(a1, "mipmapLevelCount");
    _MTLMessageContextPush_();
  }
  if (objc_msgSend(a1, "sampleCount", v11) != 1)
  {
    v12 = objc_msgSend(a1, "sampleCount");
    _MTLMessageContextPush_();
  }
  if (objc_msgSend(a1, "arrayLength", v12) != 1)
  {
    v13 = objc_msgSend(a1, "arrayLength");
    _MTLMessageContextPush_();
  }
  if (!objc_msgSend(a1, "usage", v13))
    _MTLMessageContextPush_();
  if ((objc_msgSend(a1, "usage") & 4) != 0)
    _MTLMessageContextPush_();
  v5 = objc_msgSend(a1, "usage");
  if (!(objc_msgSend(a1, "usage") & 2 | v5 & 1))
    _MTLMessageContextPush_();
  objc_msgSend(a1, "pixelFormat");
  MTLPixelFormatGetInfoForDevice();
  result = objc_msgSend(a1, "pixelFormat");
  v7 = result - 62;
  if (result - 62 > 0x3F)
    goto LABEL_29;
  if (((1 << v7) & 0xE03D0E0000001D0FLL) != 0)
    return result;
  if (((1 << v7) & 0x70000000) != 0)
  {
    result = objc_msgSend(a1, "usage");
    if ((result & 2) != 0)
    {
      result = objc_msgSend(a2, "supportsPacked32TextureBufferWrites");
      if ((result & 1) == 0)
        return _MTLMessageContextPush_();
    }
    return result;
  }
  if (result != 80)
  {
LABEL_29:
    if (result > 0x3C || ((1 << result) & 0x10E0000743D07402) == 0)
      return _MTLMessageContextPush_();
    return result;
  }
  result = objc_msgSend(a1, "usage");
  if ((result & 2) != 0)
    return _MTLMessageContextPush_();
  return result;
}

void sub_22CE305A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22CE315EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CheckerboardRenderTargetPipelineCache::getColorPipelineState(uint64_t a1, void *a2, unint64_t *a3)
{
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  char v14;
  char v15;
  uint64_t i;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  _OWORD v21[3];
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v26[8];

  v5 = 0;
  v6 = 0;
  v24 = 0;
  v25 = 0;
  v23 = *a3;
  do
  {
    v7 = (void *)objc_msgSend((id)objc_msgSend(a2, "colorAttachments"), "objectAtIndexedSubscript:", v6);
    v8 = objc_msgSend((id)objc_msgSend(v7, "texture"), "pixelFormat");
    v9 = objc_msgSend(v7, "storeAction");
    v26[v6] = v8;
    if (v8 && !v9)
    {
      v22 = 0;
      memset(v21, 0, sizeof(v21));
      objc_msgSend(*(id *)(a1 + 8), "device");
      MTLPixelFormatGetInfoForDevice();
      v24 &= ~(3 << v5);
    }
    ++v6;
    v5 += 2;
  }
  while (v6 != 8);
  v25 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "depthAttachment"), "texture"), "pixelFormat");
  if (v25)
  {
    if (objc_msgSend((id)objc_msgSend(a2, "depthAttachment"), "storeAction"))
    {
      if (!v24)
        return 0;
    }
    else
    {
      v24 |= 0x10000uLL;
    }
  }
  else if (!v24)
  {
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v11 = std::__hash_table<std::__hash_value_type<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*>,std::__unordered_map_hasher<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,MTLDebugCheckerboardFillHashKey::Hash,std::equal_to<MTLDebugCheckerboardFillHashKey>,true>,std::__unordered_map_equal<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}*>>::find<MTLDebugCheckerboardFillHashKey>((_QWORD *)(a1 + 48), &v23);
  if (v11)
  {
    v10 = v11[13];
  }
  else
  {
    *(_QWORD *)&v21[0] = v24;
    objc_msgSend(*(id *)(a1 + 40), "setConstantValue:type:atIndex:", v21, 33, 0);
    objc_msgSend(*(id *)(a1 + 40), "setConstantValue:type:atIndex:", (char *)v21 + 4, 33, 1);
    v12 = (void *)objc_msgSend(*(id *)(a1 + 8), "newFunctionWithName:constantValues:error:", CFSTR("fill_checkboard_fragment"), *(_QWORD *)(a1 + 40), 0);
    v13 = objc_alloc_init(MEMORY[0x24BDDD6B8]);
    objc_msgSend(v13, "setVertexFunction:", *(_QWORD *)(a1 + 16));
    objc_msgSend(v13, "setFragmentFunction:", v12);
    v14 = 0;
    v15 = 0;
    for (i = 0; i != 8; ++i)
    {
      v17 = (void *)objc_msgSend((id)objc_msgSend(v13, "colorAttachments"), "objectAtIndexedSubscript:", i);
      objc_msgSend(v17, "setPixelFormat:", v26[i]);
      if (((v24 >> v15) & 3) != 0)
        v18 = (v23 >> v14) & 0xF;
      else
        v18 = 0;
      objc_msgSend(v17, "setWriteMask:", v18);
      v15 += 2;
      v14 += 4;
    }
    objc_msgSend(v13, "setDepthAttachmentPixelFormat:", v25);
    v20 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "device"), "newRenderPipelineStateWithDescriptor:error:", v13, 0);
    std::__hash_table<std::__hash_value_type<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*>,std::__unordered_map_hasher<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,MTLDebugCheckerboardFillHashKey::Hash,std::equal_to<MTLDebugCheckerboardFillHashKey>,true>,std::__unordered_map_equal<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}*>>::__emplace_unique_key_args<MTLDebugCheckerboardFillHashKey,MTLDebugCheckerboardFillHashKey&,objc_object  {objcproto22MTLRenderPipelineState}&>(a1 + 48, &v23, (uint64_t)&v23, &v20);

    v10 = v20;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  return v10;
}

void sub_22CE3558C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*>,std::__unordered_map_hasher<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,MTLDebugCheckerboardFillHashKey::Hash,std::equal_to<MTLDebugCheckerboardFillHashKey>,true>,std::__unordered_map_equal<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}*>>::find<MTLDebugCheckerboardFillHashKey>(_QWORD *a1, _QWORD *a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = _MTLHashState();
  v5 = a1[1];
  if (!v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v5 <= v4)
      v9 = v4 % v5;
  }
  else
  {
    v9 = ((_DWORD)v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if (MTLDebugCheckerboardFillHashKey::operator==(v11 + 2, a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= v5)
            v12 %= v5;
        }
        else
        {
          v12 &= v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

BOOL MTLDebugCheckerboardFillHashKey::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2])
    return 0;
  v2 = 0;
  v3 = a1 + 3;
  do
  {
    v4 = v3[v2];
    v5 = a2[v2 + 3];
    result = v4 == v5;
    if (v4 != v5)
      break;
  }
  while (v2++ != 7);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*>,std::__unordered_map_hasher<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,MTLDebugCheckerboardFillHashKey::Hash,std::equal_to<MTLDebugCheckerboardFillHashKey>,true>,std::__unordered_map_equal<MTLDebugCheckerboardFillHashKey,objc_object  {objcproto22MTLRenderPipelineState}*,std::equal_to,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto22MTLRenderPipelineState}*>>::__emplace_unique_key_args<MTLDebugCheckerboardFillHashKey,MTLDebugCheckerboardFillHashKey&,objc_object  {objcproto22MTLRenderPipelineState}&>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  _QWORD *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v9 = _MTLHashState();
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v11 <= v9)
        v4 = v9 % v11;
    }
    else
    {
      v4 = ((_DWORD)v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if (MTLDebugCheckerboardFillHashKey::operator==(v15 + 2, a2))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  v15 = operator new(0x70uLL);
  *v15 = 0;
  v15[1] = v10;
  v17 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v15 + 3) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v15 + 4) = v17;
  *((_OWORD *)v15 + 5) = *(_OWORD *)(a3 + 64);
  v18 = *(_QWORD *)(a3 + 80);
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v15 + 2) = v19;
  v20 = *a4;
  v15[12] = v18;
  v15[13] = v20;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v11 || (float)(v22 * (float)v11) < v21)
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v26);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= v10)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = ((_DWORD)v11 - 1) & v10;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *v15 = *v28;
LABEL_38:
    *v28 = v15;
    goto LABEL_39;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v27 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v29 = *(_QWORD *)(*v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v29 >= v11)
        v29 %= v11;
    }
    else
    {
      v29 &= v11 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_22CE36544(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void CheckerboardRenderTargetPipelineCache::~CheckerboardRenderTargetPipelineCache(CheckerboardRenderTargetPipelineCache *this)
{
  __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *>>> *i;

  for (i = &this->_cache.__table_.__p1_; ; i[13].__value_.__next_)
  {
    i = (__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<MTLDebugCheckerboardFillHashKey, id<MTLRenderPipelineState>>, void *>>> *)i->__value_.__next_;
    if (!i)
      break;
  }

  std::__hash_table<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::__unordered_map_hasher<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,GPUDebugConstantBufferCache::Key::Hash,std::equal_to<GPUDebugConstantBufferCache::Key>,true>,std::__unordered_map_equal<GPUDebugConstantBufferCache::Key,std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>,std::equal_to<GPUDebugConstantBufferCache::Key>,GPUDebugConstantBufferCache::Key::Hash,true>,std::allocator<std::__hash_value_type<GPUDebugConstantBufferCache::Key,GPUDebugConstantBufferCache::Value>>>::~__hash_table((uint64_t)&this->_cache);
}

_QWORD *std::__hash_table<MTLDebugCommandBuffer *,std::hash<MTLDebugCommandBuffer *>,std::equal_to<MTLDebugCommandBuffer *>,std::allocator<MTLDebugCommandBuffer *>>::__emplace_unique_key_args<MTLDebugCommandBuffer *,MTLDebugCommandBuffer * const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CE36804(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

const __CFString *MTLDebugFunctionArgumentTypeToString(unint64_t a1)
{
  if (a1 > 6)
    return &stru_24F795D30;
  else
    return off_24F795748[a1];
}

const __CFString *argumentFormattedDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  const __CFString *v10;
  const __CFString *result;
  void *v12;
  const __CFString *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  const __CFString *v20;
  void *v21;
  const __CFString *v22;
  void *v23;
  const __CFString *v24;
  double v25;
  _QWORD v26[4];
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[9];
  _QWORD v30[6];
  _QWORD v31[9];

  v31[8] = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 4;
  v4 = objc_msgSend(CFSTR("\n"), "stringByPaddingToLength:withString:startingAtIndex:", a1 + 4, CFSTR(" "), 0);
  if (!*(_BYTE *)a2)
    return CFSTR("<null>");
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4;
  switch(v6)
  {
    case 0:
      v8 = (void *)MEMORY[0x24BDD17C8];
      v31[0] = v4;
      v31[1] = CFSTR("buffer =");
      v19 = *(void **)(a2 + 16);
      if (v19)
        v20 = (const __CFString *)objc_msgSend(v19, "formattedDescription:", v3);
      else
        v20 = CFSTR("<null>");
      v31[2] = v20;
      v31[3] = v7;
      v31[4] = CFSTR("bufferOffset =");
      v31[5] = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", *(_QWORD *)(a2 + 40));
      v31[6] = CFSTR("bufferAttributeStride =");
      v31[7] = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", *(_QWORD *)(a2 + 48));
      v14 = (void *)MEMORY[0x24BDBCE30];
      v15 = v31;
      v16 = 8;
      goto LABEL_31;
    case 1:
      v8 = (void *)MEMORY[0x24BDD17C8];
      v30[0] = v4;
      v30[1] = CFSTR("texture =");
      v21 = *(void **)(a2 + 16);
      if (v21)
        v22 = (const __CFString *)objc_msgSend(v21, "formattedDescription:", v3);
      else
        v22 = CFSTR("<null>");
      v30[2] = v22;
      v30[3] = v7;
      v30[4] = CFSTR("baseLevel =");
      v30[5] = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", *(_QWORD *)(a2 + 24));
      v14 = (void *)MEMORY[0x24BDBCE30];
      v15 = v30;
      v16 = 6;
      goto LABEL_31;
    case 2:
      v8 = (void *)MEMORY[0x24BDD17C8];
      if (*(_BYTE *)(a2 + 72))
      {
        v29[0] = v4;
        v29[1] = CFSTR("sampler =");
        v17 = *(void **)(a2 + 16);
        if (v17)
          v18 = (const __CFString *)objc_msgSend(v17, "formattedDescription:", v3);
        else
          v18 = CFSTR("<null>");
        v29[2] = v18;
        v29[3] = v7;
        v29[4] = CFSTR("lodMinClamp =");
        LODWORD(v5) = *(_DWORD *)(a2 + 76);
        v29[5] = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v5);
        v29[6] = v7;
        v29[7] = CFSTR("lodMaxClamp =");
        LODWORD(v25) = *(_DWORD *)(a2 + 80);
        v29[8] = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v25);
        v14 = (void *)MEMORY[0x24BDBCE30];
        v15 = v29;
        v16 = 9;
      }
      else
      {
        v28[0] = v4;
        v28[1] = CFSTR("sampler =");
        v23 = *(void **)(a2 + 16);
        if (v23)
          v24 = (const __CFString *)objc_msgSend(v23, "formattedDescription:", v3);
        else
          v24 = CFSTR("<null>");
        v28[2] = v24;
        v14 = (void *)MEMORY[0x24BDBCE30];
        v15 = v28;
LABEL_30:
        v16 = 3;
      }
LABEL_31:
      result = (const __CFString *)objc_msgSend(v8, "stringWithFormat:", CFSTR("%@"), objc_msgSend((id)objc_msgSend(v14, "arrayWithObjects:count:", v15, v16), "componentsJoinedByString:", CFSTR(" ")));
      break;
    case 3:
      v8 = (void *)MEMORY[0x24BDD17C8];
      v27[0] = v4;
      v27[1] = CFSTR("threadgroupMemoryLength =");
      v27[2] = objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", *(_QWORD *)(a2 + 56));
      v14 = (void *)MEMORY[0x24BDBCE30];
      v15 = v27;
      goto LABEL_30;
    case 4:
    case 5:
    case 6:
      v8 = (void *)MEMORY[0x24BDD17C8];
      v26[0] = v4;
      v9 = v6 - 4;
      if (v9 > 2)
        v10 = &stru_24F795D30;
      else
        v10 = off_24F795780[v9];
      v26[1] = v10;
      v26[2] = CFSTR("=");
      v12 = *(void **)(a2 + 16);
      if (v12)
        v13 = (const __CFString *)objc_msgSend(v12, "formattedDescription:", v3);
      else
        v13 = CFSTR("<null>");
      v26[3] = v13;
      v14 = (void *)MEMORY[0x24BDBCE30];
      v15 = v26;
      v16 = 4;
      goto LABEL_31;
    default:
      return &stru_24F795D30;
  }
  return result;
}

void emitDispatchDistribution(MTLTelemetryDevice *a1, MTLTelemetryDispatchDistributionRec *a2)
{
  int *v4;
  int v5;
  MTLTelemetryStatisticUIRec *computeEncoderDispatchDistribution;
  unsigned int min;
  unsigned int max;
  unsigned int count;
  unint64_t total;
  float v11;
  OS_os_log *v12;
  MTLTelemetryStatisticUIRec *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  float v18;
  MTLTelemetryStatisticUIRec *commandBufferDispatchDistribution;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  float v24;
  OS_os_log *v25;
  MTLTelemetryStatisticUIRec *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  float v31;
  unsigned int v32;
  float v33;
  float v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  float v38;
  float v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  float v44;
  float v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  double v50;
  double v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  unsigned int v64;
  OS_os_log *v65;
  unsigned int v66;
  double v67;
  double v68;
  unsigned int v69;
  unsigned int v70;
  double v71;
  double v72;
  unsigned int v73;
  unsigned int v74;
  double v75;
  double v76;
  unsigned int v77;
  unsigned int v78;
  double v79;
  double v80;
  unsigned int v81;
  unsigned int v82;
  double v83;
  double v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  NSObject *log;
  uint8_t buf[4];
  unsigned int v118;
  __int16 v119;
  unsigned int v120;
  __int16 v121;
  double v122;
  __int16 v123;
  unint64_t v124;
  __int16 v125;
  unsigned int v126;
  __int16 v127;
  unsigned int v128;
  __int16 v129;
  unsigned int v130;
  __int16 v131;
  double v132;
  __int16 v133;
  unint64_t v134;
  __int16 v135;
  unsigned int v136;
  __int16 v137;
  unsigned int v138;
  __int16 v139;
  unsigned int v140;
  __int16 v141;
  double v142;
  __int16 v143;
  unint64_t v144;
  __int16 v145;
  unsigned int v146;
  __int16 v147;
  unsigned int v148;
  __int16 v149;
  unsigned int v150;
  __int16 v151;
  double v152;
  __int16 v153;
  unint64_t v154;
  __int16 v155;
  unsigned int v156;
  __int16 v157;
  unsigned int v158;
  __int16 v159;
  unsigned int v160;
  __int16 v161;
  double v162;
  __int16 v163;
  unint64_t v164;
  __int16 v165;
  unsigned int v166;
  __int16 v167;
  unsigned int v168;
  __int16 v169;
  unsigned int v170;
  __int16 v171;
  double v172;
  __int16 v173;
  unint64_t v174;
  __int16 v175;
  unsigned int v176;
  __int16 v177;
  unsigned int v178;
  __int16 v179;
  unsigned int v180;
  __int16 v181;
  double v182;
  __int16 v183;
  unint64_t v184;
  __int16 v185;
  unsigned int v186;
  __int16 v187;
  unsigned int v188;
  __int16 v189;
  unsigned int v190;
  __int16 v191;
  double v192;
  __int16 v193;
  unint64_t v194;
  __int16 v195;
  unsigned int v196;
  __int16 v197;
  unsigned int v198;
  __int16 v199;
  unsigned int v200;
  __int16 v201;
  double v202;
  __int16 v203;
  unint64_t v204;
  __int16 v205;
  unsigned int v206;
  __int16 v207;
  unsigned int v208;
  __int16 v209;
  unsigned int v210;
  __int16 v211;
  double v212;
  __int16 v213;
  unint64_t v214;
  __int16 v215;
  unsigned int v216;
  uint64_t v217;

  v217 = *MEMORY[0x24BDAC8D0];
  v4 = (int *)MEMORY[0x24BDDDAC8];
  v5 = *MEMORY[0x24BDDDAC8];
  if (*MEMORY[0x24BDDDAC8])
  {
    if (v5 != 1)
      goto LABEL_13;
    computeEncoderDispatchDistribution = a1->computeEncoderDispatchDistribution;
    min = computeEncoderDispatchDistribution->min;
    max = computeEncoderDispatchDistribution->max;
    count = computeEncoderDispatchDistribution->count;
    total = computeEncoderDispatchDistribution->total;
    if (count)
      v11 = (float)total / (float)count;
    else
      v11 = 0.0;
    printf("\n\nDispatchesPerComputeEncoder, minDispatches=%u, maxDispatches=%u, avgDispatches=%f, totalDispatches=%llu, countDispatches=%u", min, max, v11, total, count);
  }
  v12 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
  if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = a1->computeEncoderDispatchDistribution;
    v15 = v13->min;
    v14 = v13->max;
    v16 = v13->count;
    v17 = v13->total;
    if (v16)
      v18 = (float)v17 / (float)v16;
    else
      v18 = 0.0;
    *(_DWORD *)buf = 67110144;
    v118 = v15;
    v119 = 1024;
    v120 = v14;
    v121 = 2048;
    v122 = v18;
    v123 = 2048;
    v124 = v17;
    v125 = 1024;
    v126 = v16;
    _os_log_impl(&dword_22CD98000, (os_log_t)v12, OS_LOG_TYPE_DEFAULT, "DispatchesPerComputeEncoder, minDispatches=%u, maxDispatches=%u, avgDispatches=%f, totalDispatches=%llu, countDispatches=%u", buf, 0x28u);
  }
  v5 = *v4;
LABEL_13:
  if (v5)
  {
    if (v5 != 1)
      goto LABEL_24;
    commandBufferDispatchDistribution = a1->commandBufferDispatchDistribution;
    v20 = commandBufferDispatchDistribution->min;
    v21 = commandBufferDispatchDistribution->max;
    v22 = commandBufferDispatchDistribution->count;
    v23 = commandBufferDispatchDistribution->total;
    if (v22)
      v24 = (float)v23 / (float)v22;
    else
      v24 = 0.0;
    printf("\n\nComputeDispatchesPerCommandBuffer, minDispatches=%u, maxDispatches=%u, avgDispatches=%f, totalDispatches=%llu, countDispatches=%u", v20, v21, v24, v23, v22);
  }
  v25 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
  if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = a1->commandBufferDispatchDistribution;
    v28 = v26->min;
    v27 = v26->max;
    v29 = v26->count;
    v30 = v26->total;
    if (v29)
      v31 = (float)v30 / (float)v29;
    else
      v31 = 0.0;
    *(_DWORD *)buf = 67110144;
    v118 = v28;
    v119 = 1024;
    v120 = v27;
    v121 = 2048;
    v122 = v31;
    v123 = 2048;
    v124 = v30;
    v125 = 1024;
    v126 = v29;
    _os_log_impl(&dword_22CD98000, (os_log_t)v25, OS_LOG_TYPE_DEFAULT, "ComputeDispatchesPerCommandBuffer, minDispatches=%u, maxDispatches=%u, avgDispatches=%f, totalDispatches=%llu, countDispatches=%u", buf, 0x28u);
  }
LABEL_24:
  if (!a2->var0)
    return;
  if (*v4)
  {
    if (*v4 != 1)
      return;
    v32 = a2->var1.count;
    v33 = 0.0;
    v34 = 0.0;
    if (v32)
      v34 = (float)a2->var1.total / (float)v32;
    v35 = a2->var2.count;
    if (v35)
      v33 = (float)a2->var2.total / (float)v35;
    v36 = a2->var3.count;
    v37 = a2->var3.total;
    v38 = 0.0;
    v39 = 0.0;
    if (v36)
      v39 = (float)v37 / (float)v36;
    v40 = a2->var4.count;
    v41 = a2->var4.total;
    if (v40)
      v38 = (float)v41 / (float)v40;
    v42 = a2->var5.count;
    v43 = a2->var5.total;
    v44 = 0.0;
    v45 = 0.0;
    if (v42)
      v45 = (float)v43 / (float)v42;
    v46 = a2->var6.count;
    v47 = a2->var6.total;
    if (v46)
      v44 = (float)v47 / (float)v46;
    v48 = a2->var7.count;
    v49 = a2->var7.total;
    v50 = 0.0;
    v51 = 0.0;
    if (v48)
      v51 = (float)((float)v49 / (float)v48);
    v52 = a2->var8.count;
    v53 = a2->var8.total;
    if (v52)
      v50 = (float)((float)v53 / (float)v52);
    v54 = a2->var9.count;
    v55 = a2->var9.total;
    v56 = 0.0;
    v57 = 0.0;
    if (v54)
      v57 = (float)((float)v55 / (float)v54);
    v58 = v34;
    v59 = v33;
    v60 = v39;
    v61 = v38;
    v62 = v45;
    v63 = v44;
    v64 = a2->var10.count;
    if (v64)
      v56 = (float)((float)a2->var10.total / (float)v64);
    printf("\n\nDispatch, minThreadGroupsPerGridWidth=%u, maxThreadGroupsPerGridWidth=%u, avgThreadGroupsPerGridWidth=%f, totalThreadGroupsPerGridWidth=%llu, countThreadGroupsPerGridWidth=%u, minThreadGroupsPerGridHeight=%u, maxThreadGroupsPerGridHeight=%u, avgThreadGroupsPerGridHeight=%f, totalThreadGroupsPerGridHeight=%llu, countThreadGroupsPerGridHeight=%u, minThreadGroupsPerGridDepth=%u, maxThreadGroupsPerGridDepth=%u, avgThreadGroupsPerGridDepth=%f, totalThreadGroupsPerGridDepth=%llu, countThreadGroupsPerGridDepth=%u, minThreadsPerGridWidth=%u, maxThreadsPerGridWidth=%u, avgThreadsPerGridWidth=%f, totalThreadsPerGridWidth=%llu, countThreadsPerGridWidth=%u, minThreadsPerGridHeight=%u, maxThreadsPerGridHeight=%u, avgThreadsPerGridHeight=%f, totalThreadsPerGridHeight=%llu, countThreadsPerGridHeight=%u, minThreadsPerGridDepth=%u, maxThreadsPerGridDepth=%u, avgThreadsPerGridDepth=%f, totalThreadsPerGridDepth=%llu, countThreadsPerGridDepth=%u, minThreadsPerGroupWidth=%u, maxThreadsPerGroupWidth=%u, avgThreadsPerGroupWidth=%f, totalThreadsPerGroupWidth=%llu, countThreadsPerGroupWidth=%u, minThreadsPerGroupHeight=%u, maxThreadsPerGroupHeight=%u, avgThreadsPerGroupHeight=%f, totalThreadsPerGroupHeight=%llu, countThreadsPerGroupHeight=%u, minThreadsPerGroupDepth=%u, maxThreadsPerGroupDepth=%u, avgThreadsPerGroupDepth=%f, totalThreadsPerGroupDepth=%llu, countThreadsPerGroupDepth=%u, minThreadGroupMemoryLength=%u, maxThreadGroupMemoryLength=%u, avgThreadGroupMemoryLength=%f, totalThreadGroupMemoryLength=%llu, countThreadGroupMemoryLength=%u", a2->var1.min, a2->var1.max, v58,
      a2->var1.total,
      v32,
      a2->var2.min,
      a2->var2.max,
      v59,
      a2->var2.total,
      v35,
      a2->var3.min,
      a2->var3.max,
      v60,
      v37,
      v36,
      a2->var4.min,
      a2->var4.max,
      v61,
      v41,
      v40,
      a2->var5.min,
      a2->var5.max,
      v62,
      v43,
      v42,
      a2->var6.min,
      a2->var6.max,
      v63,
      v47,
      v46,
      a2->var7.min,
      a2->var7.max,
      v51,
      v49,
      v48,
      a2->var8.min,
      a2->var8.max,
      v50,
      v53,
      v52,
      a2->var9.min,
      a2->var9.max,
      v57,
      v55,
      v54,
      a2->var10.min,
      a2->var10.max,
      v56,
      a2->var10.total,
      v64);
  }
  v65 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
  if (os_log_type_enabled((os_log_t)v65, OS_LOG_TYPE_DEFAULT))
  {
    v66 = a2->var1.count;
    v67 = 0.0;
    v68 = 0.0;
    if (v66)
      v68 = (float)((float)a2->var1.total / (float)v66);
    v69 = a2->var2.count;
    if (v69)
      v67 = (float)((float)a2->var2.total / (float)v69);
    v109 = a2->var2.total;
    v113 = a2->var1.total;
    v70 = a2->var3.count;
    v71 = 0.0;
    v72 = 0.0;
    if (v70)
      v72 = (float)((float)a2->var3.total / (float)v70);
    v107 = a2->var3.total;
    v73 = a2->var4.count;
    if (v73)
      v71 = (float)((float)a2->var4.total / (float)v73);
    v74 = a2->var5.count;
    v75 = 0.0;
    v76 = 0.0;
    if (v74)
      v76 = (float)((float)a2->var5.total / (float)v74);
    v77 = a2->var6.count;
    if (v77)
      v75 = (float)((float)a2->var6.total / (float)v77);
    v78 = a2->var7.count;
    v79 = 0.0;
    v80 = 0.0;
    if (v78)
      v80 = (float)((float)a2->var7.total / (float)v78);
    v81 = a2->var8.count;
    if (v81)
      v79 = (float)((float)a2->var8.total / (float)v81);
    v110 = a2->var8.total;
    v111 = a2->var7.total;
    v112 = a2->var6.total;
    v114 = a2->var5.total;
    v115 = a2->var4.total;
    log = v65;
    v82 = a2->var9.count;
    v83 = 0.0;
    v84 = 0.0;
    if (v82)
      v84 = (float)((float)a2->var9.total / (float)v82);
    v108 = a2->var9.total;
    v85 = a2->var1.min;
    v86 = a2->var1.max;
    v87 = a2->var2.min;
    v88 = a2->var2.max;
    v90 = a2->var3.min;
    v89 = a2->var3.max;
    v92 = a2->var4.min;
    v91 = a2->var4.max;
    v93 = a2->var5.min;
    v94 = a2->var5.max;
    v96 = a2->var6.min;
    v95 = a2->var6.max;
    v98 = a2->var7.min;
    v97 = a2->var7.max;
    v100 = a2->var8.min;
    v99 = a2->var8.max;
    v103 = a2->var9.min;
    v104 = a2->var9.max;
    v105 = a2->var10.min;
    v106 = a2->var10.max;
    v101 = a2->var10.count;
    v102 = a2->var10.total;
    if (v101)
      v83 = (float)((float)v102 / (float)v101);
    v118 = v85;
    v120 = v86;
    v124 = v113;
    v126 = v66;
    v128 = v87;
    v130 = v88;
    v134 = v109;
    v136 = v69;
    v138 = v90;
    v140 = v89;
    v144 = v107;
    *(_DWORD *)buf = 67121664;
    v146 = v70;
    v119 = 1024;
    v148 = v92;
    v121 = 2048;
    v122 = v68;
    v123 = 2048;
    v125 = 1024;
    v127 = 1024;
    v129 = 1024;
    v131 = 2048;
    v132 = v67;
    v133 = 2048;
    v135 = 1024;
    v137 = 1024;
    v139 = 1024;
    v141 = 2048;
    v142 = v72;
    v143 = 2048;
    v145 = 1024;
    v147 = 1024;
    v149 = 1024;
    v150 = v91;
    v151 = 2048;
    v152 = v71;
    v153 = 2048;
    v154 = v115;
    v155 = 1024;
    v156 = v73;
    v157 = 1024;
    v158 = v93;
    v159 = 1024;
    v160 = v94;
    v161 = 2048;
    v162 = v76;
    v163 = 2048;
    v164 = v114;
    v165 = 1024;
    v166 = v74;
    v167 = 1024;
    v168 = v96;
    v169 = 1024;
    v170 = v95;
    v171 = 2048;
    v172 = v75;
    v173 = 2048;
    v174 = v112;
    v175 = 1024;
    v176 = v77;
    v177 = 1024;
    v178 = v98;
    v179 = 1024;
    v180 = v97;
    v181 = 2048;
    v182 = v80;
    v183 = 2048;
    v184 = v111;
    v185 = 1024;
    v186 = v78;
    v187 = 1024;
    v188 = v100;
    v189 = 1024;
    v190 = v99;
    v191 = 2048;
    v192 = v79;
    v193 = 2048;
    v194 = v110;
    v195 = 1024;
    v196 = v81;
    v197 = 1024;
    v198 = v103;
    v199 = 1024;
    v200 = v104;
    v201 = 2048;
    v202 = v84;
    v203 = 2048;
    v204 = v108;
    v205 = 1024;
    v206 = v82;
    v207 = 1024;
    v208 = v105;
    v209 = 1024;
    v210 = v106;
    v211 = 2048;
    v212 = v83;
    v213 = 2048;
    v214 = v102;
    v215 = 1024;
    v216 = v101;
    _os_log_impl(&dword_22CD98000, log, OS_LOG_TYPE_DEFAULT, "Dispatch, minThreadGroupsPerGridWidth=%u, maxThreadGroupsPerGridWidth=%u, avgThreadGroupsPerGridWidth=%f, totalThreadGroupsPerGridWidth=%llu, countThreadGroupsPerGridWidth=%u, minThreadGroupsPerGridHeight=%u, maxThreadGroupsPerGridHeight=%u, avgThreadGroupsPerGridHeight=%f, totalThreadGroupsPerGridHeight=%llu, countThreadGroupsPerGridHeight=%u, minThreadGroupsPerGridDepth=%u, maxThreadGroupsPerGridDepth=%u, avgThreadGroupsPerGridDepth=%f, totalThreadGroupsPerGridDepth=%llu, countThreadGroupsPerGridDepth=%u, minThreadsPerGridWidth=%u, maxThreadsPerGridWidth=%u, avgThreadsPerGridWidth=%f, totalThreadsPerGridWidth=%llu, countThreadsPerGridWidth=%u, minThreadsPerGridHeight=%u, maxThreadsPerGridHeight=%u, avgThreadsPerGridHeight=%f, totalThreadsPerGridHeight=%llu, countThreadsPerGridHeight=%u, minThreadsPerGridDepth=%u, maxThreadsPerGridDepth=%u, avgThreadsPerGridDepth=%f, totalThreadsPerGridDepth=%llu, countThreadsPerGridDepth=%u, minThreadsPerGroupWidth=%u, maxThreadsPerGroupWidth=%u, avgThreadsPerGroupWidth=%f, totalThreadsPerGroupWidth=%llu, countThreadsPerGroupWidth=%u, minThreadsPerGroupHeight=%u, maxThreadsPerGroupHeight=%u, avgThreadsPerGroupHeight=%f, totalThreadsPerGroupHeight=%llu, countThreadsPerGroupHeight=%u, minThreadsPerGroupDepth=%u, maxThreadsPerGroupDepth=%u, avgThreadsPerGroupDepth=%f, totalThreadsPerGroupDepth=%llu, countThreadsPerGroupDepth=%u, minThreadGroupMemoryLength=%u, maxThreadGroupMemoryLength=%u, avgThreadGroupMemoryLength=%f, totalThreadGroupMemoryLength=%llu, countThreadGroupMemoryLength=%u", buf, 0x17Eu);
  }
}

void sub_22CE39B70(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CE39C04(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CE39CBC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t newArgumentEncoder(void *a1, uint64_t a2, _QWORD *a3, void *a4, void *a5)
{
  void *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  MTLDebugArgumentEncoder *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    v10 = (void *)objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", objc_msgSend(a5, "count"));
    if (v10 && objc_msgSend(a5, "count"))
    {
      v11 = 0;
      do
      {
        objc_msgSend(v10, "setObject:atIndexedSubscript:", objc_msgSend((id)objc_msgSend(a5, "objectAtIndexedSubscript:", v11), "baseObject"), v11);
        ++v11;
      }
      while (v11 < objc_msgSend(a5, "count"));
    }
  }
  else
  {
    v10 = 0;
  }
  v12 = (void *)objc_msgSend(a1, "baseObject");
  if (a4)
    v13 = (void *)objc_msgSend(v12, "reflectionWithOptions:pipelineLibrary:", 3, objc_msgSend(a4, "baseObject"));
  else
    v13 = (void *)objc_msgSend(v12, "reflectionWithOptions:binaryArchives:", 3, v10);
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v14 = (void *)objc_msgSend(v13, "arguments");
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v35;
LABEL_13:
    v18 = 0;
    while (1)
    {
      if (*(_QWORD *)v35 != v17)
        objc_enumerationMutation(v14);
      v19 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * v18);
      if (!objc_msgSend(v19, "type") && objc_msgSend(v19, "index") == a2)
        break;
      if (v16 == ++v18)
      {
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
        if (v16)
          goto LABEL_13;
        goto LABEL_20;
      }
    }
    if (!v19)
      goto LABEL_20;
  }
  else
  {
LABEL_20:
    v27 = objc_msgSend(a1, "name");
    v29 = a2;
    MTLReportFailure();
    v19 = 0;
  }
  if ((objc_msgSend((id)objc_msgSend(v19, "dataTypeDescription", v27, v29), "elementIsIndirectArgumentBuffer") & 1) == 0)
  {
    v26 = objc_msgSend(v19, "name");
    v31 = objc_msgSend(a1, "name");
    v32 = objc_msgSend(v19, "name");
    v28 = v26;
    v30 = a2;
    MTLReportFailure();
  }
  v33 = 0;
  v20 = (void *)objc_msgSend(a1, "baseObject", v28, v30, v31, v32);
  if (a4)
    v21 = objc_msgSend(v20, "newArgumentEncoderWithBufferIndex:reflection:pipelineLibrary:", a2, &v33, a4);
  else
    v21 = objc_msgSend(v20, "newArgumentEncoderWithBufferIndex:reflection:binaryArchives:", a2, &v33, v10);
  v22 = (void *)v21;
  if (a3)
    *a3 = v33;
  v23 = [MTLDebugArgumentEncoder alloc];
  v24 = -[MTLDebugArgumentEncoder initWithBaseObject:structType:parent:](v23, "initWithBaseObject:structType:parent:", v22, objc_msgSend(v33, "bufferStructType"), a1);

  return v24;
}

uint64_t validateNewFunctionWithConstantArguments(NSString *a1, MTLFunctionConstantValues *a2)
{
  uint64_t result;

  if (!a1)
    MTLReportFailure();
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    if (a2)
      return result;
    return MTLReportFailure();
  }
  result = MTLReportFailure();
  if (!a2)
    return MTLReportFailure();
  return result;
}

uint64_t _validateUniqueNames(uint64_t a1, _QWORD *a2, void *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  void **v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v23 = a4;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  result = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
  v8 = result;
  if (result)
  {
    v9 = *(_QWORD *)v20;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v20 != v9)
          objc_enumerationMutation(a3);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * v10), "name", v14, v15, v16), "UTF8String"));
        v11 = std::__hash_table<std::__hash_value_type<std::string,char const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
        if (a1)
        {
          if (v11)
          {
            if (v18 >= 0)
              v12 = __p;
            else
              v12 = (void **)__p[0];
            v15 = v23;
            v16 = *((_QWORD *)v11 + 5);
            v14 = v12;
            _MTLMessageContextPush_();
            goto LABEL_14;
          }
        }
        else if (v11)
        {
          if (v18 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          v15 = v23;
          v16 = *((_QWORD *)v11 + 5);
          v14 = v13;
          MTLReportFailure();
          goto LABEL_14;
        }
        std::__hash_table<std::__hash_value_type<std::string,char const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char const*>>>::__emplace_unique_key_args<std::string,std::string&,char const*&>((uint64_t)a2, (unsigned __int8 *)__p, (uint64_t)__p, &v23);
LABEL_14:
        if (v18 < 0)
          operator delete(__p[0]);
        ++v10;
      }
      while (v8 != v10);
      result = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
      v8 = result;
    }
    while (result);
  }
  return result;
}

void sub_22CE3A8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t validateLinkedFunctionsHaveUniqueNames(MTLFunctionDescriptor *a1)
{
  __int128 v2;
  uint64_t v3;

  LODWORD(v3) = 1065353216;
  _validateUniqueNames(0, &v2, (void *)-[MTLFunctionDescriptor privateFunctions](a1, "privateFunctions", 0, 0, 0, 0, v3), (uint64_t)"privateFunctions");
  return std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v2);
}

void sub_22CE3A9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,char const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char const*>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,char const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char const*>>>::__emplace_unique_key_args<std::string,std::string&,char const*&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,char const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char const*>>>::__construct_node_hash<std::string&,char const*&>(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_22CE3B288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,char const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,char const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,char const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,char const*>>>::__construct_node_hash<std::string&,char const*&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  std::string *v11;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)a5 = v10;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  v11 = (std::string *)(v10 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v10[4] = *(_QWORD *)(a3 + 16);
  }
  v10[5] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
}

void sub_22CE3B344(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLTelemetryStatisticUIRec>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void InitResourceIdentifier(MTLLegacySVTexture *a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  v2 = -[MTLToolsObject baseObject](a1->super.super.super._device, "baseObject");
  if ((objc_msgSend((id)objc_msgSend(v2, "vendorName"), "containsString:", CFSTR("IG")) & 1) != 0
    || objc_msgSend((id)objc_msgSend(v2, "vendorName"), "containsString:", CFSTR("Intel")))
  {
    v3 = (void *)objc_msgSend(v2, "newBufferWithLength:options:", 8, 0);
    v4 = objc_alloc_init(MEMORY[0x24BDDD4C0]);
    objc_msgSend(v4, "setIndex:", 0);
    objc_msgSend(v4, "setDataType:", 58);
    objc_msgSend(v4, "setAccess:", 1);
    v6[0] = v4;
    v5 = (void *)objc_msgSend(v2, "newArgumentEncoderWithArguments:", objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v6, 1));

    objc_msgSend(v5, "setArgumentBuffer:offset:", v3, 0);
    objc_msgSend(v5, "setTexture:atIndex:", -[MTLLegacySVTexture baseObject](a1, "baseObject"), 0);

    a1->_identifier = *(_QWORD *)objc_msgSend(v3, "contents");
  }
  else
  {
    a1->_identifier = -[MTLToolsTexture uniqueIdentifier](a1, "uniqueIdentifier");
  }
}

uint64_t _MTLDebugValidateBuffer(uint64_t a1, void *a2)
{
  uint64_t result;

  if (!a2)
    return _MTLMessageContextPush_();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    _MTLMessageContextPush_();
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    result = objc_msgSend(a2, "device");
    if (result != a1)
      return _MTLMessageContextPush_();
  }
  return result;
}

uint64_t _MTLDebugValidateIndexBuffer(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  char v13;
  uint64_t v14;

  _MTLMessageContextBegin_();
  _MTLDebugValidateBuffer(a1, a3);
  if (a2)
  {
    if (a2 == 1)
    {
      v13 = 0;
      v14 = 4;
      if (!a6)
        goto LABEL_10;
    }
    else
    {
      _MTLMessageContextPush_();
      v14 = 0;
      v13 = 1;
      if (!a6)
        goto LABEL_10;
    }
  }
  else
  {
    v13 = 0;
    v14 = 2;
    if (!a6)
    {
LABEL_10:
      if ((v13 & 1) != 0)
        return _MTLMessageContextEnd();
      goto LABEL_11;
    }
  }
  if (a5 + v14 * a7 > (unint64_t)objc_msgSend(a3, "length"))
  {
    objc_msgSend(a3, "length");
    _MTLMessageContextPush_();
    if (a7)
      goto LABEL_10;
  }
  else if (a7)
  {
    goto LABEL_10;
  }
  _MTLMessageContextPush_();
  if ((v13 & 1) != 0)
    return _MTLMessageContextEnd();
LABEL_11:
  if (((v14 - 1) & a5) != 0)
    _MTLMessageContextPush_();
  return _MTLMessageContextEnd();
}

unint64_t _MTLDebugValidateIndexBufferWithContext(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t v17;

  v14 = *a8;
  result = _MTLDebugValidateBuffer(a1, a3);
  if (a2)
  {
    if (a2 == 1)
    {
      v16 = 0;
      v17 = 4;
      if (!a6)
        goto LABEL_11;
    }
    else
    {
      result = _MTLMessageContextPush_();
      v17 = 0;
      v16 = 1;
      if (!a6)
        goto LABEL_11;
    }
  }
  else
  {
    v16 = 0;
    v17 = 2;
    if (!a6)
    {
LABEL_11:
      if ((v16 & 1) != 0)
        return result;
      goto LABEL_12;
    }
  }
  if (*a8 == v14 && (result = objc_msgSend(a3, "length"), a5 + v17 * a7 > result))
  {
    objc_msgSend(a3, "length");
    result = _MTLMessageContextPush_();
    if (a7)
      goto LABEL_11;
  }
  else if (a7)
  {
    goto LABEL_11;
  }
  result = _MTLMessageContextPush_();
  if ((v16 & 1) != 0)
    return result;
LABEL_12:
  if (((v17 - 1) & a5) != 0)
    return _MTLMessageContextPush_();
  return result;
}

uint64_t _MTLDebugValidatePatchIndexBuffer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _MTLMessageContextBegin_();
  if (a2)
  {
    _MTLDebugValidateBuffer(a1, a2);
    if (!a5)
      goto LABEL_7;
    if (a4 + 4 * (a7 + a6) > (unint64_t)objc_msgSend(a2, "length"))
    {
      objc_msgSend(a2, "length");
      _MTLMessageContextPush_();
    }
    if (a7)
    {
      if (a9)
        goto LABEL_7;
    }
    else
    {
      _MTLMessageContextPush_();
      if (a9)
        goto LABEL_7;
    }
    _MTLMessageContextPush_();
LABEL_7:
    if ((a4 & 3) != 0)
      goto LABEL_11;
    return _MTLMessageContextEnd();
  }
  if (a4)
LABEL_11:
    _MTLMessageContextPush_();
  return _MTLMessageContextEnd();
}

unint64_t _MTLDebugValidatePatchIndexBufferWithContext(unint64_t result, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v15;

  if (a2)
  {
    v15 = *a10;
    result = _MTLDebugValidateBuffer(result, a2);
    if (!a5)
      goto LABEL_8;
    if (*a10 == v15)
    {
      result = objc_msgSend(a2, "length");
      if (a4 + 4 * (a7 + a6) > result)
      {
        objc_msgSend(a2, "length");
        result = _MTLMessageContextPush_();
      }
    }
    if (a7)
    {
      if (a9)
        goto LABEL_8;
    }
    else
    {
      result = _MTLMessageContextPush_();
      if (a9)
        goto LABEL_8;
    }
    result = _MTLMessageContextPush_();
LABEL_8:
    if ((a4 & 3) != 0)
      return _MTLMessageContextPush_();
    return result;
  }
  if (a4)
    return _MTLMessageContextPush_();
  return result;
}

char *std::vector<MTLViewport>::assign(char **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  char *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 4) >= a2)
  {
    v16 = (a1[1] - result) / 48;
    if (v16 >= a2)
      v17 = a2;
    else
      v17 = (a1[1] - result) / 48;
    for (; v17; --v17)
    {
      v18 = *a3;
      v19 = a3[2];
      *((_OWORD *)result + 1) = a3[1];
      *((_OWORD *)result + 2) = v19;
      *(_OWORD *)result = v18;
      result += 48;
    }
    if (a2 <= v16)
    {
      a1[1] = &(*a1)[48 * a2];
    }
    else
    {
      v20 = a1[1];
      v21 = &v20[48 * (a2 - v16)];
      v22 = -48 * v16 + 48 * a2;
      do
      {
        v23 = *a3;
        v24 = a3[2];
        *((_OWORD *)v20 + 1) = a3[1];
        *((_OWORD *)v20 + 2) = v24;
        *(_OWORD *)v20 = v23;
        v20 += 48;
        v22 -= 48;
      }
      while (v22);
      a1[1] = v21;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 > 0x555555555555555)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v9;
    result = std::vector<MTLViewport>::__vallocate[abi:ne180100](a1, v10);
    v11 = a1[1];
    v12 = &v11[48 * a2];
    v13 = 48 * a2;
    do
    {
      v14 = *a3;
      v15 = a3[2];
      *((_OWORD *)v11 + 1) = a3[1];
      *((_OWORD *)v11 + 2) = v15;
      *(_OWORD *)v11 = v14;
      v11 += 48;
      v13 -= 48;
    }
    while (v13);
    a1[1] = v12;
  }
  return result;
}

char *std::vector<MTLScissorRect>::assign(char **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 5)
  {
    v14 = (a1[1] - result) >> 5;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (a1[1] - result) >> 5;
    for (; v15; --v15)
    {
      v16 = a3[1];
      *(_OWORD *)result = *a3;
      *((_OWORD *)result + 1) = v16;
      result += 32;
    }
    if (a2 <= v14)
    {
      a1[1] = &(*a1)[32 * a2];
    }
    else
    {
      v17 = a1[1];
      v18 = &v17[32 * (a2 - v14)];
      v19 = 32 * a2 - 32 * v14;
      do
      {
        v20 = a3[1];
        *(_OWORD *)v17 = *a3;
        *((_OWORD *)v17 + 1) = v20;
        v17 += 32;
        v19 -= 32;
      }
      while (v19);
      a1[1] = v18;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 59)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 4;
    if (v6 >> 4 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<MTLScissorRect>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[32 * a2];
    v12 = 32 * a2;
    do
    {
      v13 = a3[1];
      *(_OWORD *)v10 = *a3;
      *((_OWORD *)v10 + 1) = v13;
      v10 += 32;
      v12 -= 32;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

uint64_t hasMemorylessAttachments(MTLRenderPassDescriptor *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = 0;
  while (1)
  {
    v3 = (void *)objc_msgSend(*(id *)-[MTLRenderPassDescriptor _descriptorPrivate](a1, "_descriptorPrivate"), "_descriptorAtIndex:", v2);
    if (v3)
    {
      v4 = *(void **)objc_msgSend(v3, "_descriptorPrivate");
      if (v4)
      {
        if (objc_msgSend(v4, "storageMode") == 3)
          break;
      }
    }
    if (++v2 == 8)
    {
      v5 = 0;
      goto LABEL_8;
    }
  }
  v5 = 1;
LABEL_8:
  v6 = (void *)objc_msgSend(*(id *)-[MTLRenderPassDescriptor _descriptorPrivate](a1, "_descriptorPrivate"), "_descriptorAtIndex:", 8);
  if (v6)
  {
    v7 = *(void **)objc_msgSend(v6, "_descriptorPrivate");
    if (v7)
    {
      if (objc_msgSend(v7, "storageMode") == 3)
        v5 = 1;
      else
        v5 = v5;
    }
  }
  v8 = (void *)objc_msgSend(*(id *)-[MTLRenderPassDescriptor _descriptorPrivate](a1, "_descriptorPrivate"), "_descriptorAtIndex:", 9);
  if (v8)
  {
    v9 = *(void **)objc_msgSend(v8, "_descriptorPrivate");
    if (v9)
    {
      if (objc_msgSend(v9, "storageMode") == 3)
        return 1;
      else
        return v5;
    }
  }
  return v5;
}

uint64_t validateArg(MTLArgumentType a1, unint64_t a2, MTLDebugFunctionArgument *a3, _MTLMessageContext *a4)
{
  uint64_t result;

  result = MTLReportFailureTypeEnabled();
  if ((_DWORD)result && a3->isValid && !a3->hasBeenUsed)
  {
    argumentTypeToString(a1);
    return _MTLMessageContextPush_();
  }
  return result;
}

void sub_22CE3FC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t validateFunctionArguments(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void *a11, void *a12, const char *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t result;
  void *v24;
  uint64_t v25;
  void *v26;
  MTLArgumentType v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t *v37;
  _DWORD *v38;
  const char *v39;
  void *v40;
  void *v41;
  MTLDebugRenderTargetAttachmentInfo *v42;
  uint64_t v43;
  const char *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  const char **v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  const __CFString **v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  const char **v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  id *v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  int v73;
  MTLDebugRenderTargetAttachmentInfo *v74;
  uint64_t v75;
  const char *v76;
  char v77;
  MTLDebugRenderTargetAttachmentInfo *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t i;
  uint64_t v85;
  int v86;
  int v87;
  void *v88;
  id v89;
  _BYTE *v90;
  const char *v91;
  const __CFString *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  _QWORD *v98;
  void *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t Name;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  const char *v135;
  uint64_t v136;
  const __CFString *v137;
  const char *v138;
  uint64_t v139;
  int v140;
  char v141;
  const char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  MTLArgumentType v153;
  id *v154;
  uint64_t v155;
  uint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  _BYTE v176[128];
  _BYTE v177[128];
  _BYTE v178[128];
  uint64_t v179;

  v179 = *MEMORY[0x24BDAC8D0];
  v168 = 0u;
  v169 = 0u;
  v170 = 0u;
  v171 = 0u;
  result = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v168, v177, 16);
  v149 = result;
  if (result)
  {
    v150 = a7;
    v157 = 0;
    v146 = ~(unint64_t)a13;
    v24 = a12;
    v148 = *(_QWORD *)v169;
    v162 = a5;
    do
    {
      v25 = 0;
      do
      {
        if (*(_QWORD *)v169 != v148)
          objc_enumerationMutation(a4);
        v26 = *(void **)(*((_QWORD *)&v168 + 1) + 8 * v25);
        v155 = v25;
        if (objc_msgSend(v26, "isActive", v107, v116, v125, v134, v135, v136, v137, v138))
        {
          v27 = objc_msgSend(v26, "type");
          v28 = objc_msgSend(v26, "name");
          v29 = objc_msgSend(v26, "arrayLength");
          v30 = objc_msgSend(v26, "index");
          if (v29)
          {
            v163 = v26;
            v31 = v27 > 0x22 || ((1 << v27) & 0x40F03000FLL) == 0;
            if (v31)
LABEL_193:
              abort();
            v32 = 0;
            v33 = v27 - 25;
            v153 = v27;
            v160 = v27 - 25;
            v161 = v29;
            v159 = v30;
            while (1)
            {
              v34 = (uint64_t)&v32[v30];
              switch(v27)
              {
                case MTLArgumentTypeBuffer:
                  v35 = (_BYTE *)(a5 + 88 * v34);
                  if ((a19 & 1) != 0)
                    goto LABEL_21;
                  if (!*v35)
                  {
                    v135 = (const char *)v28;
                    v136 = (uint64_t)v32;
                    v125 = "buffer";
                    v134 = &v32[v30];
                    v107 = a2;
                    v116 = a3;
                    _MTLMessageContextPush_();
                    v35 = (_BYTE *)(a5 + 88 * v34);
                    v24 = a12;
                    v30 = v159;
                    v33 = v160;
                    v29 = v161;
LABEL_21:
                    if (!*v35)
                      goto LABEL_91;
                  }
                  v158 = v35;
                  if (*(_QWORD *)(a5 + 88 * v34 + 8))
                  {
                    v135 = (const char *)v28;
                    v136 = (uint64_t)v32;
                    v125 = "buffer";
                    v134 = (const char *)v34;
                    v107 = a2;
                    v116 = a3;
                    _MTLMessageContextPush_();
                  }
                  v54 = objc_msgSend(a1, "supportsUnalignedVertexFetch", v107, v116, v125);
                  if (!a17 || !v54 || !*(_BYTE *)(a17 + v34))
                  {
                    v55 = v162 + 88 * v34;
                    v58 = *(_QWORD *)(v55 + 40);
                    v56 = (const __CFString **)(v55 + 40);
                    v57 = v58;
                    v59 = objc_msgSend(v163, "bufferAlignment");
                    v60 = v59 <= 1 ? 1 : v59;
                    if (v57 % v60)
                    {
                      v136 = objc_msgSend(v163, "bufferAlignment");
                      v137 = *v56;
                      v134 = "buffer";
                      v135 = (const char *)v34;
                      v117 = a3;
                      v126 = v28;
                      v108 = a2;
                      _MTLMessageContextPush_();
                    }
                  }
                  v61 = v162 + 88 * v34;
                  v63 = *(_QWORD *)(v61 + 32);
                  v62 = (const char **)(v61 + 32);
                  v64 = v63 - (_QWORD)v62[1];
                  if (v64 < objc_msgSend(v163, "bufferDataSize", v108, v117, v126)
                    && objc_msgSend(v163, "bufferDataSize") != -1)
                  {
                    v92 = (const __CFString *)v62[1];
                    v93 = *v62;
                    objc_msgSend(v163, "bufferDataSize");
                    v137 = v92;
                    v138 = v93;
                    v135 = "buffer";
                    v136 = v34;
                    v127 = v28;
                    v134 = v32;
                    v109 = a2;
                    v118 = a3;
                    _MTLMessageContextPush_();
                  }
                  a5 = v162;
                  if (objc_msgSend(v163, "access", v109, v118, v127) && !*(_QWORD *)(v162 + 88 * v34 + 16))
                  {
                    v116 = a3;
                    v125 = (const char *)v34;
                    v107 = a2;
                    _MTLMessageContextPush_();
                  }
                  v65 = v162 + 88 * v34;
                  v68 = *(void **)(v65 + 16);
                  v67 = (id *)(v65 + 16);
                  v66 = v68;
                  v27 = v153;
                  if (v68)
                  {
                    if (objc_msgSend(v163, "access") != 2 && (objc_msgSend(v66, "protectionOptions") & v146) != 0)
                    {
                      v134 = (const char *)objc_msgSend(v66, "protectionOptions");
                      v135 = a13;
                      v116 = a3;
                      v125 = (const char *)v34;
                      v107 = a2;
                      _MTLMessageContextPush_();
                    }
                    if (objc_msgSend(v163, "access", v107, v116, v125))
                    {
                      v69 = *v67;
                      if (((unint64_t)a13 & ~objc_msgSend(*v67, "protectionOptions")) != 0)
                        goto LABEL_75;
                    }
                  }
                  goto LABEL_86;
                case MTLArgumentTypeThreadgroupMemory:
                  v49 = a14;
                  v35 = (_BYTE *)(a14 + 88 * v34);
                  if (*v35)
                    goto LABEL_47;
                  v135 = (const char *)v28;
                  v136 = (uint64_t)v32;
                  v125 = "local memory";
                  v134 = &v32[v30];
                  v107 = a2;
                  v116 = a3;
                  _MTLMessageContextPush_();
                  v49 = a14;
                  v35 = (_BYTE *)(a14 + 88 * v34);
                  v33 = v160;
                  v29 = v161;
                  if (*v35)
                  {
LABEL_47:
                    v50 = v35;
                    if (*(_QWORD *)(v49 + 88 * v34 + 8) != 3)
                    {
                      v135 = (const char *)v28;
                      v136 = (uint64_t)v32;
                      v125 = "local memory";
                      v134 = (const char *)v34;
                      v107 = a2;
                      v116 = a3;
                      _MTLMessageContextPush_();
                      v49 = a14;
                    }
                    v51 = v49 + 88 * v34;
                    v53 = *(_QWORD *)(v51 + 56);
                    v52 = (const char **)(v51 + 56);
                    if (v53 < objc_msgSend(v163, "threadgroupMemoryDataSize", v107, v116, v125))
                    {
                      v137 = (const __CFString *)v28;
                      v138 = v32;
                      v135 = "local memory";
                      v136 = v34;
                      v125 = *v52;
                      v134 = (const char *)objc_msgSend(v163, "threadgroupMemoryDataSize");
                      v107 = a2;
                      v116 = a3;
                      _MTLMessageContextPush_();
                    }
                    ++v157;
                    v29 = v161;
                    a5 = v162;
                    v30 = v159;
                    v33 = v160;
                    v35 = v50;
                  }
                  else
                  {
                    v30 = v159;
                  }
                  goto LABEL_83;
                case MTLArgumentTypeTexture:
                  v35 = (_BYTE *)(a6 + 88 * v34);
                  if (!*((_QWORD *)v35 + 2))
                    goto LABEL_91;
                  v154 = (id *)(v35 + 16);
                  v158 = (_BYTE *)(a6 + 88 * v34);
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) == 0)
                  {
                    v116 = a3;
                    v125 = (const char *)v34;
                    v107 = a2;
                    goto LABEL_85;
                  }
                  v38 = *v154;
                  if ((objc_msgSend(*v154, "usage") & 4) != 0 && (objc_msgSend(v38, "usage") & 1) != 0)
                  {
                    if (a8)
                    {
                      v39 = 0;
                      do
                      {
                        v40 = (void *)objc_msgSend(a8, "_descriptorAtIndex:", v39, v107, v116, v125);
                        if (v40)
                        {
                          v41 = v40;
                          if (objc_msgSend(v40, "texture"))
                          {
                            if (objc_msgSend(v41, "storeAction") == 1
                              && objc_msgSend((id)objc_msgSend(a9, "objectAtIndexedSubscript:", v39), "writeMask"))
                            {
                              v42 = -[MTLDebugRenderTargetAttachmentInfo initWithDesc:renderTargetArrayLength:]([MTLDebugRenderTargetAttachmentInfo alloc], "initWithDesc:renderTargetArrayLength:", objc_msgSend(v41, "_descriptorPrivate"), a10);
                              v43 = -[MTLDebugRenderTargetAttachmentInfo intersectsTexture:](v42, "intersectsTexture:", v38);
                              if (v43)
                              {
                                v44 = "resolve";
                                if (v43 != 2)
                                {
                                  if (v43 != 1)
                                    goto LABEL_193;
                                  v44 = "color";
                                }
                                v138 = v39;
                                v136 = (uint64_t)v32;
                                v137 = (const __CFString *)v44;
                                v134 = (const char *)v34;
                                v135 = (const char *)v28;
                                v116 = a3;
                                v125 = "texture";
                                v107 = a2;
                                MTLReportFailure();
                              }

                            }
                          }
                        }
                        ++v39;
                      }
                      while (v39 != (const char *)8);
                      v45 = (void *)objc_msgSend(a8, "_descriptorAtIndex:", 8);
                      v46 = (void *)objc_msgSend(a8, "_descriptorAtIndex:", 9);
                      v47 = objc_msgSend(v38, "pixelFormat");
                      if (a11)
                      {
                        v143 = v47;
                        v140 = objc_msgSend(a11, "isDepthWriteEnabled");
                        if (writesStencilTexture((MTLStencilDescriptor *)objc_msgSend(a11, "backFaceStencil")))
                          LOBYTE(v48) = 0;
                        else
                          LODWORD(v48) = !writesStencilTexture((MTLStencilDescriptor *)objc_msgSend(a11, "frontFaceStencil"));
                        v47 = v143;
                      }
                      else
                      {
                        v140 = 0;
                        LOBYTE(v48) = 1;
                      }
                      v144 = (v47 - 253) & 0xFFFFFFFFFFFFFFF7;
                      if (v45
                        && objc_msgSend(v45, "texture")
                        && objc_msgSend(v45, "storeAction") == 1
                        && ((v140 ^ 1) & 1) == 0
                        && v144)
                      {
                        v141 = (char)v48;
                        v48 = v46;
                        v74 = -[MTLDebugRenderTargetAttachmentInfo initWithDesc:renderTargetArrayLength:]([MTLDebugRenderTargetAttachmentInfo alloc], "initWithDesc:renderTargetArrayLength:", objc_msgSend(v45, "_descriptorPrivate"), a10);
                        v75 = -[MTLDebugRenderTargetAttachmentInfo intersectsTexture:](v74, "intersectsTexture:", v38);
                        if (v75)
                        {
                          v76 = "resolve";
                          if (v75 != 2)
                          {
                            if (v75 != 1)
                              goto LABEL_193;
                            v76 = "depth";
                          }
                          v137 = (const __CFString *)v76;
                          v138 = v76;
                          v135 = (const char *)v28;
                          v136 = (uint64_t)v32;
                          v125 = "texture";
                          v134 = (const char *)v34;
                          v107 = a2;
                          v116 = a3;
                          MTLReportFailure();
                        }

                        v46 = v48;
                        LOBYTE(v48) = v141;
                      }
                      if (v46 && objc_msgSend(v46, "texture"))
                      {
                        v77 = objc_msgSend(v46, "storeAction") == 1 ? (char)v48 : 1;
                        if ((v77 & 1) == 0 && !v144)
                        {
                          v78 = -[MTLDebugRenderTargetAttachmentInfo initWithDesc:renderTargetArrayLength:]([MTLDebugRenderTargetAttachmentInfo alloc], "initWithDesc:renderTargetArrayLength:", objc_msgSend(v46, "_descriptorPrivate"), a10);
                          v79 = -[MTLDebugRenderTargetAttachmentInfo intersectsTexture:](v78, "intersectsTexture:", v38);
                          if (v79)
                          {
                            v80 = "resolve";
                            if (v79 != 2)
                            {
                              if (v79 != 1)
                                goto LABEL_193;
                              v80 = "stencil";
                            }
                            v137 = (const __CFString *)v80;
                            v138 = v80;
                            v135 = (const char *)v28;
                            v136 = (uint64_t)v32;
                            v125 = "texture";
                            v134 = (const char *)v34;
                            v107 = a2;
                            v116 = a3;
                            MTLReportFailure();
                          }

                        }
                      }
                    }
                    v174 = 0u;
                    v175 = 0u;
                    v172 = 0u;
                    v173 = 0u;
                    v81 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v172, v178, 16, v107, v116, v125);
                    if (v81)
                    {
                      v82 = v81;
                      v83 = *(_QWORD *)v173;
                      do
                      {
                        for (i = 0; i != v82; ++i)
                        {
                          if (*(_QWORD *)v173 != v83)
                            objc_enumerationMutation(v24);
                          if (objc_msgSend(*(id *)(*((_QWORD *)&v172 + 1) + 8 * i), "intersectsTexture:", v38, v107, v116, v125))
                          {
                            v135 = (const char *)v28;
                            v136 = (uint64_t)v32;
                            v125 = "texture";
                            v134 = (const char *)v34;
                            v107 = a2;
                            v116 = a3;
                            MTLReportFailure();
                          }
                        }
                        v82 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v172, v178, 16);
                      }
                      while (v82);
                    }
                    a5 = v162;
                    v27 = v153;
                  }
                  if (*v158)
                  {
                    if (*(_QWORD *)(a6 + 88 * v34 + 8) != 1)
                    {
                      v135 = (const char *)v28;
                      v136 = (uint64_t)v32;
                      v125 = "texture";
                      v134 = (const char *)v34;
                      v107 = a2;
                      v116 = a3;
                      _MTLMessageContextPush_();
                    }
                    v85 = objc_msgSend(*v154, "textureType", v107, v116, v125);
                    if (v85 != objc_msgSend(v163, "textureType"))
                    {
                      objc_msgSend(*v154, "textureType");
                      v94 = MTLTextureTypeString();
                      objc_msgSend(v163, "textureType");
                      v137 = (const __CFString *)v28;
                      v138 = v32;
                      v135 = (const char *)v34;
                      v136 = MTLTextureTypeString();
                      v128 = v94;
                      v134 = "texture";
                      v110 = a2;
                      v119 = a3;
                      _MTLMessageContextPush_();
                    }
                    v86 = objc_msgSend(v38, "usage", v110, v119, v128);
                    if (objc_msgSend(v163, "access"))
                    {
                      v87 = (*(_QWORD *)&v86 & 0x10000) != 0 ? 16 : 2;
                      if ((v38[20] & v87) == 0)
                      {
                        objc_msgSend(*v154, "pixelFormat");
                        Name = MTLPixelFormatGetName();
                        v134 = (const char *)v34;
                        v111 = a2;
                        v120 = a3;
                        _MTLMessageContextPush_();
                      }
                    }
                    v88 = v163;
                    objc_msgSend(v163, "textureDataType", v111, v120, Name);
                    if ((_MTLCompatibleTextureDataTypeAndPixelFormatInfo() & 1) == 0)
                    {
                      objc_msgSend(*v154, "pixelFormat");
                      v145 = MTLPixelFormatGetName();
                      v95 = objc_msgSend(*v154, "label");
                      if (!v95)
                        v95 = objc_msgSend(MEMORY[0x24BDBCEF8], "null");
                      v142 = (const char *)v95;
                      v88 = v163;
                      objc_msgSend(v163, "textureDataType");
                      v139 = MTLDataTypeString();
                      objc_msgSend(*v154, "pixelFormat");
                      MTLPixelFormatGetName();
                      objc_msgSend(*v154, "pixelFormat");
                      MTLPixelFormatCompatibilityString();
                      v138 = "texture";
                      v136 = v34;
                      v137 = (const __CFString *)v139;
                      v134 = "texture";
                      v135 = v142;
                      v121 = a3;
                      v130 = v145;
                      v112 = a2;
                      _MTLMessageContextPush_();
                    }
                    if ((unint64_t)objc_msgSend(v88, "access", v112, v121, v130) <= 1
                      && (objc_msgSend(v38, "requireUsage:", 1) & 1) == 0)
                    {
                      v135 = (const char *)objc_msgSend(v38, "usage");
                      v136 = 1;
                      v131 = v28;
                      v134 = (const char *)v34;
                      v113 = a2;
                      v122 = a3;
                      _MTLMessageContextPush_();
                    }
                    if ((unint64_t)(objc_msgSend(v163, "access", v113, v122, v131) - 1) <= 1
                      && (objc_msgSend(v38, "requireUsage:", 2) & 1) == 0)
                    {
                      v135 = (const char *)objc_msgSend(v38, "usage");
                      v136 = 2;
                      v132 = v28;
                      v134 = (const char *)v34;
                      v114 = a2;
                      v123 = a3;
                      _MTLMessageContextPush_();
                    }
                    v27 = v153;
                    if (objc_msgSend(v163, "access", v114, v123, v132) && objc_msgSend(v38, "isSparse"))
                    {
                      v124 = a3;
                      v133 = v34;
                      v115 = a2;
                      _MTLMessageContextPush_();
                    }
                    if (objc_msgSend(v163, "access", v115, v124, v133) == 1)
                    {
                      objc_msgSend(v38, "pixelFormat");
                      if ((MTLReadWriteTextureIsSupported() & 1) == 0)
                      {
                        v125 = (const char *)v28;
                        v134 = (const char *)v34;
                        v107 = a2;
                        v116 = a3;
                        _MTLMessageContextPush_();
                      }
                    }
                    v89 = *v154;
                    if (*v154)
                    {
                      if (objc_msgSend(v163, "access") != 2 && (objc_msgSend(v89, "protectionOptions") & v146) != 0)
                      {
                        v134 = (const char *)objc_msgSend(v89, "protectionOptions");
                        v135 = a13;
                        v116 = a3;
                        v125 = (const char *)v34;
                        v107 = a2;
                        _MTLMessageContextPush_();
                      }
                      if (objc_msgSend(v163, "access", v107, v116, v125))
                      {
                        v69 = *v154;
                        if (((unint64_t)a13 & ~objc_msgSend(*v154, "protectionOptions")) != 0)
                        {
LABEL_75:
                          v134 = (const char *)objc_msgSend(v69, "protectionOptions");
                          v135 = a13;
                          v116 = a3;
                          v125 = (const char *)v34;
                          v107 = a2;
LABEL_85:
                          _MTLMessageContextPush_();
                        }
                      }
                    }
                  }
                  else
                  {
                    v135 = (const char *)v28;
                    v136 = (uint64_t)v32;
                    v125 = "texture";
                    v134 = (const char *)v34;
                    v107 = a2;
                    v116 = a3;
                    _MTLMessageContextPush_();
                  }
LABEL_86:
                  v33 = v160;
                  v29 = v161;
                  v35 = v158;
                  v30 = v159;
LABEL_91:
                  v35[1] = 1;
LABEL_92:
                  if (++v32 == (const char *)v29)
                    goto LABEL_171;
                  break;
                case MTLArgumentTypeSampler:
                  v35 = (_BYTE *)(v150 + 88 * v34);
                  if (!*v35 || *(_QWORD *)(v150 + 88 * v34 + 8) != 2)
                  {
                    v135 = (const char *)v28;
                    v136 = (uint64_t)v32;
                    v125 = "sampler";
                    v134 = &v32[v30];
                    v107 = a2;
                    v116 = a3;
                    _MTLMessageContextPush_();
                    v35 = (_BYTE *)(v150 + 88 * v34);
                    v30 = v159;
                  }
                  v33 = v160;
                  v29 = v161;
LABEL_83:
                  v24 = a12;
                  goto LABEL_91;
                default:
                  if (v27 <= 0x22 && ((1 << v27) & 0x400030000) != 0)
                    goto LABEL_92;
                  v35 = (_BYTE *)(a5 + 88 * v34);
                  if (*v35)
                    goto LABEL_17;
                  v135 = (const char *)v28;
                  v136 = (uint64_t)v32;
                  v125 = argumentTypeToString(v27);
                  v134 = (const char *)v34;
                  v107 = a2;
                  v116 = a3;
                  _MTLMessageContextPush_();
                  v35 = (_BYTE *)(a5 + 88 * v34);
                  v24 = a12;
                  v30 = v159;
                  v33 = v160;
                  v29 = v161;
                  if (*v35)
                  {
LABEL_17:
                    if (v33 > 2)
                    {
                      v70 = a5 + 88 * v34;
                      v71 = *(_QWORD *)(v70 + 8);
                      v37 = (unint64_t *)(v70 + 8);
                      if (v71 == 6)
                      {
                        v72 = v35;
                        v73 = objc_msgSend(a1, "requiresRaytracingEmulation");
                        v35 = v72;
                        v24 = a12;
                        v31 = v73 == 0;
                        v30 = v159;
                        v33 = v160;
                        v29 = v161;
                        v36 = 5;
                        if (!v31)
                          v36 = 6;
                      }
                      else
                      {
                        v36 = 5;
                      }
                    }
                    else
                    {
                      v36 = qword_22CEAB848[v33];
                      v37 = (unint64_t *)(a5 + 88 * v34 + 8);
                    }
                    if (*v37 != v36)
                    {
                      v90 = v35;
                      v91 = argumentTypeToString(v27);
                      v136 = (uint64_t)v32;
                      v137 = MTLDebugFunctionArgumentTypeToString(*v37);
                      v134 = (const char *)v34;
                      v135 = (const char *)v28;
                      v116 = a3;
                      v125 = v91;
                      v107 = a2;
                      _MTLMessageContextPush_();
                      v35 = v90;
                      v24 = a12;
                      v30 = v159;
                      v33 = v160;
                      v29 = v161;
                    }
                    a5 = v162;
                  }
                  goto LABEL_91;
              }
            }
          }
        }
LABEL_171:
        v25 = v155 + 1;
      }
      while (v155 + 1 != v149);
      result = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v168, v177, 16);
      v149 = result;
    }
    while (result);
  }
  else
  {
    v157 = 0;
  }
  if (a16)
  {
    v96 = a15;
    v97 = (void *)objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", v157);
    if (a15)
    {
      v98 = (_QWORD *)(a14 + 64);
      do
      {
        if (*((_BYTE *)v98 - 64))
          objc_msgSend(v97, "addObject:", objc_msgSend(MEMORY[0x24BDD1968], "valueWithRange:", *v98, *(v98 - 1)));
        v98 += 11;
        --v96;
      }
      while (v96);
    }
    v99 = (void *)objc_msgSend(v97, "sortedArrayUsingComparator:", &__block_literal_global_1336, v107, v116, v125);
    v164 = 0u;
    v165 = 0u;
    v166 = 0u;
    v167 = 0u;
    result = objc_msgSend(v99, "countByEnumeratingWithState:objects:count:", &v164, v176, 16);
    if (result)
    {
      v100 = result;
      v101 = 0;
      v102 = *(_QWORD *)v165;
      do
      {
        v103 = 0;
        do
        {
          if (*(_QWORD *)v165 != v102)
            objc_enumerationMutation(v99);
          v104 = *(void **)(*((_QWORD *)&v164 + 1) + 8 * v103);
          if (v101)
          {
            v105 = objc_msgSend(v101, "rangeValue");
            if (v105 + v106 > (unint64_t)objc_msgSend(v104, "rangeValue"))
              _MTLMessageContextPush_();
          }
          else
          {
            v101 = *(void **)(*((_QWORD *)&v164 + 1) + 8 * v103);
          }
          ++v103;
        }
        while (v100 != v103);
        result = objc_msgSend(v99, "countByEnumeratingWithState:objects:count:", &v164, v176, 16);
        v100 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_22CE47310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CE4751C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CE47800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22CE4799C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double *validateMTLViewport(double *result, MTLViewport *a2, _MTLMessageContext *a3)
{
  double *v3;

  v3 = result;
  if (*result != 0.0 && (*(_QWORD *)result & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    result = (double *)_MTLMessageContextPush_();
  if (v3[1] != 0.0 && ((_QWORD)v3[1] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    result = (double *)_MTLMessageContextPush_();
  if (v3[2] != 0.0 && ((_QWORD)v3[2] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    result = (double *)_MTLMessageContextPush_();
  if (v3[3] != 0.0 && ((_QWORD)v3[3] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    result = (double *)_MTLMessageContextPush_();
  if (v3[4] != 0.0 && ((_QWORD)v3[4] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    result = (double *)_MTLMessageContextPush_();
  if (v3[5] != 0.0 && ((_QWORD)v3[5] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    return (double *)_MTLMessageContextPush_();
  return result;
}

unint64_t validateMTLScissorRect(MTLDebugRenderCommandEncoder *a1, const MTLScissorRect *a2, _MTLMessageContext *a3)
{
  NSUInteger v5;
  unint64_t result;
  NSUInteger v7;

  v5 = -[MTLDebugRenderCommandEncoder width](a1, "width");
  result = -[MTLDebugRenderCommandEncoder height](a1, "height");
  v7 = result;
  if (a2->width + a2->x > v5)
    result = _MTLMessageContextPush_();
  if (a2->height + a2->y > v7)
    return _MTLMessageContextPush_();
  return result;
}

uint64_t _MTLDebugValidateDeferredStoreActionOnDevice(void *a1, unint64_t a2, void *a3, unint64_t a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __CFString *v14;
  __CFString *v15;
  const __CFString *v17;
  unint64_t v18;
  __CFString *v19;
  uint64_t v20;
  const __CFString *v21;

  _MTLMessageContextBegin_();
  v10 = objc_msgSend(a3, "_descriptorPrivate");
  if (a2 == 4)
    _MTLMessageContextPush_();
  if (((a5 >> a4) & 1) == 0)
    _MTLMessageContextPush_();
  if ((a2 > 4 || ((1 << a2) & 0x1A) == 0) && (*(_BYTE *)(v10 + 48) & 1) != 0)
  {
    if (a4 == 8)
    {
      v15 = CFSTR("the depth attachment");
    }
    else if (a4 == 9)
    {
      v15 = CFSTR("the stencil attachment");
    }
    else
    {
      v15 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithFormat:", CFSTR("color attachment %lu"), a4);
    }
    if (a2 > 2)
      v17 = CFSTR("Unknown");
    else
      v17 = off_24F795890[a2];
    v20 = (uint64_t)v15;
    v21 = v17;
    _MTLMessageContextPush_();

  }
  if (!*(_QWORD *)v10)
    return _MTLMessageContextEnd();
  v11 = objc_msgSend(*(id *)v10, "storageMode");
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0 && v11 == 3)
    _MTLMessageContextPush_();
  v12 = a2 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 == 2)
  {
    if (a4 == 9)
    {
      if ((objc_msgSend(a1, "supportsMSAAStencilResolve") & 1) != 0)
        goto LABEL_22;
      v13 = *(_QWORD *)(v10 + 40);
      if (v13 <= 4)
      {
LABEL_16:
        v14 = off_24F7958A8[v13];
LABEL_45:
        v20 = -[__CFString UTF8String](v14, "UTF8String", v20, v21, 0, 0, 0, 0, 0, 0, 0);
        _MTLMessageContextPush_();
        goto LABEL_22;
      }
    }
    else
    {
      if (a4 != 8 || (objc_msgSend(a1, "supportsMSAADepthResolve") & 1) != 0)
      {
LABEL_22:
        if (!*(_QWORD *)(v10 + 112))
        {
          v18 = *(_QWORD *)(v10 + 40);
          if (v18 > 4)
            v19 = CFSTR("Unknown");
          else
            v19 = off_24F7958A8[v18];
          -[__CFString UTF8String](v19, "UTF8String", v20);
          _MTLMessageContextPush_();
        }
        goto LABEL_23;
      }
      v13 = *(_QWORD *)(v10 + 40);
      if (v13 < 5)
        goto LABEL_16;
    }
    v14 = CFSTR("Unknown");
    goto LABEL_45;
  }
LABEL_23:
  if (*(_QWORD *)(v10 + 112))
  {
    if (a4 > 7)
    {
      if (a4 == 9)
      {
        if (v12 != 2)
LABEL_46:
          _MTLMessageContextPush_();
      }
      else if (a4 == 8 && v12 != 2)
      {
        goto LABEL_46;
      }
    }
    else if (v12 != 2)
    {
      goto LABEL_46;
    }
  }
  return _MTLMessageContextEnd();
}

uint64_t _MTLDebugValidateDeferredStoreActionOptionsOnDevice(void *a1, char a2, void *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  __CFString *v12;

  _MTLMessageContextBegin_();
  if (((a5 >> a4) & 1) == 0)
    _MTLMessageContextPush_();
  v10 = objc_msgSend(a3, "_descriptorPrivate");
  if ((a2 & 1) != 0)
  {
    v11 = v10;
    if (a4 == 8)
    {
      v12 = CFSTR("the depth attachment");
    }
    else if (a4 == 9)
    {
      v12 = CFSTR("the stencil attachment");
    }
    else
    {
      v12 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithFormat:", CFSTR("color attachment %lu"), a4);
    }
    if ((objc_msgSend(a1, "areProgrammableSamplePositionsSupported") & 1) == 0)
      _MTLMessageContextPush_();
    switch(*(_QWORD *)(v11 + 40))
    {
      case 1:
      case 3:
      case 4:
        break;
      default:
        _MTLMessageContextPush_();
        break;
    }

  }
  return _MTLMessageContextEnd();
}

unint64_t _MTLDebugValidateMTLPrimitiveType(unint64_t result, char a2)
{
  if (result >= 5 && (result - 5 > 4 || (a2 & 1) == 0))
    return MTLReportFailure();
  return result;
}

unint64_t _MTLDebugValidateMTLPrimitiveTypeWithContext(unint64_t result, char a2)
{
  if (result >= 5 && (result - 5 > 4 || (a2 & 1) == 0))
    return _MTLMessageContextPush_();
  return result;
}

BOOL writesStencilTexture(MTLStencilDescriptor *a1)
{
  MTLCompareFunction v2;
  uint32_t v3;

  v2 = -[MTLStencilDescriptor stencilCompareFunction](a1, "stencilCompareFunction");
  v3 = -[MTLStencilDescriptor writeMask](a1, "writeMask");
  if (v2 == MTLCompareFunctionAlways)
  {
    if (!v3)
      return 0;
    return -[MTLStencilDescriptor depthStencilPassOperation](a1, "depthStencilPassOperation")
        || -[MTLStencilDescriptor depthFailureOperation](a1, "depthFailureOperation");
  }
  if (v3)
  {
    if (-[MTLStencilDescriptor stencilFailureOperation](a1, "stencilFailureOperation"))
      return 1;
    return -[MTLStencilDescriptor depthStencilPassOperation](a1, "depthStencilPassOperation")
        || -[MTLStencilDescriptor depthFailureOperation](a1, "depthFailureOperation");
  }
  return 0;
}

unint64_t validateIndirectBuffer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  unint64_t result;

  v10 = *a6;
  result = _MTLDebugValidateBuffer(a1, a2);
  if (*a6 == v10)
  {
    result = objc_msgSend(a2, "length");
    if (a4 + a3 > result)
    {
      objc_msgSend(a2, "length");
      result = _MTLMessageContextPush_();
    }
  }
  if ((a3 & 3) != 0)
    return _MTLMessageContextPush_();
  return result;
}

uint64_t validateSupportsTessellation(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    objc_msgSend(a1, "originalObject");
  return MTLValidateFeatureSupport();
}

uint64_t validateCommonTessellationErrors(void *a1, void *a2, uint64_t a3, unint64_t a4, unint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  validateSupportsTessellation(a1);
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v39 = 0u;
  _MTLMessageContextBegin_();
  if (!*(_BYTE *)a3)
    _MTLMessageContextPush_();
  if (!objc_msgSend((id)objc_msgSend(a2, "vertexFunction"), "patchType"))
  {
    v33 = a8;
    _MTLMessageContextPush_();
  }
  v20 = objc_msgSend((id)objc_msgSend(a2, "vertexFunction", v33), "patchControlPointCount");
  if (v20 == -1)
  {
    if (a5 >= 0x21)
    {
      v34 = a5;
      goto LABEL_42;
    }
  }
  else if (v20 != a5)
  {
    v34 = a5;
    v37 = v20;
    _MTLMessageContextPush_();
  }
  if (!a5 && a7)
  {
    v34 = 0;
LABEL_42:
    _MTLMessageContextPush_();
  }
  _MTLMessageContextEnd();
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v39 = 0u;
  _MTLMessageContextBegin_();
  v21 = objc_msgSend(a2, "tessellationFactorFormat");
  if (v21 == 1)
  {
    v24 = objc_msgSend((id)objc_msgSend(a2, "vertexFunction"), "patchType");
    if (v24 == 1)
    {
      v23 = 16;
    }
    else
    {
      if (v24 != 2)
        goto LABEL_55;
      v23 = 24;
    }
  }
  else
  {
    if (v21)
      goto LABEL_55;
    v22 = objc_msgSend((id)objc_msgSend(a2, "vertexFunction"), "patchType");
    if (v22 == 1)
    {
      v23 = 8;
    }
    else
    {
      if (v22 != 2)
        goto LABEL_55;
      v23 = 12;
    }
  }
  v25 = objc_msgSend(a2, "tessellationFactorStepFunction", v34, v37);
  if (v25 - 2 >= 2)
  {
    if (v25 > 1)
      goto LABEL_55;
    if (!a4)
      goto LABEL_28;
    v35 = a4;
    goto LABEL_40;
  }
  if (!a4)
  {
    v35 = 0;
    _MTLMessageContextPush_();
  }
  if (a4 % v23)
  {
    v35 = a4;
    v38 = v23;
LABEL_40:
    _MTLMessageContextPush_();
  }
LABEL_28:
  v26 = objc_msgSend(a2, "tessellationControlPointIndexType", v35, v38);
  if (v26 != 2)
  {
    if (v26 == 1)
    {
      if ((a7 & 1) == 0)
        goto LABEL_43;
      goto LABEL_36;
    }
    if (!v26)
    {
      if ((a7 & 1) != 0)
        goto LABEL_43;
LABEL_36:
      if (!a6)
        goto LABEL_44;
LABEL_37:
      v27 = *(void **)(a3 + 16);
      v28 = *(_QWORD *)(a3 + 40);
      v29 = (uint64_t)a1;
      v30 = 0;
      v31 = 0;
      goto LABEL_52;
    }
LABEL_55:
    abort();
  }
  if ((a7 & 1) != 0)
    goto LABEL_36;
LABEL_43:
  v36 = a8;
  _MTLMessageContextPush_();
  if (a6)
    goto LABEL_37;
LABEL_44:
  switch(objc_msgSend(a2, "tessellationFactorStepFunction", v36))
  {
    case 0:
      goto LABEL_49;
    case 1:
      v23 *= a10 + a9;
      goto LABEL_49;
    case 2:
      goto LABEL_48;
    case 3:
      if (v23 * (a10 + a9) > a4)
        _MTLMessageContextPush_();
LABEL_48:
      v23 = (a12 + a11) * a4;
LABEL_49:
      if (a10)
      {
        if (a12)
          goto LABEL_51;
      }
      else
      {
        _MTLMessageContextPush_();
        if (a12)
          goto LABEL_51;
      }
      _MTLMessageContextPush_();
LABEL_51:
      v27 = *(void **)(a3 + 16);
      v28 = *(_QWORD *)(a3 + 40);
      v29 = (uint64_t)a1;
      v30 = 1;
      v31 = v23;
      break;
    default:
      goto LABEL_55;
  }
LABEL_52:
  validateTessellationFactorBuffer(v29, v27, v28, v30, v31, (uint64_t *)&v39);
  return _MTLMessageContextEnd();
}

uint64_t _MTLTessellationControlPointIndexTypeToMTLIndexType(MTLTessellationControlPointIndexType a1)
{
  if (a1 == MTLTessellationControlPointIndexTypeUInt16)
    return 0;
  if (a1 != MTLTessellationControlPointIndexTypeUInt32)
    abort();
  return 1;
}

uint64_t validateCommonBarrier(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  void *v7;
  unint64_t v8;

  v7 = (void *)result;
  if (a3 >= 4)
  {
    v8 = a3;
    result = _MTLMessageContextPush_();
    if ((a4 & 4) == 0)
      goto LABEL_4;
  }
  else if ((a4 & 4) == 0)
  {
    goto LABEL_4;
  }
  result = objc_msgSend(v7, "supportsTileShaders", v8);
  if (!(_DWORD)result)
  {
LABEL_7:
    result = _MTLMessageContextPush_();
    goto LABEL_8;
  }
LABEL_4:
  if ((a4 & 0x18) != 0)
  {
    result = objc_msgSend(v7, "supportsMeshShaders");
    if (!(_DWORD)result)
      goto LABEL_7;
  }
  if (a4 >= 0x20)
    goto LABEL_7;
LABEL_8:
  if ((a5 & 4) != 0)
  {
    result = objc_msgSend(v7, "supportsTileShaders");
    if (!(_DWORD)result)
      return _MTLMessageContextPush_();
  }
  if ((a5 & 0x18) != 0)
  {
    result = objc_msgSend(v7, "supportsMeshShaders");
    if (!(_DWORD)result)
      return _MTLMessageContextPush_();
  }
  if (a5 >= 0x20)
    return _MTLMessageContextPush_();
  return result;
}

void sub_22CE52AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL25validateFunctionArgumentsPU19objcproto9MTLDevice11objc_objectP8NSStringS2_P7NSArrayP24MTLDebugFunctionArgumentmS6_mS6_mP43MTLRenderPassColorAttachmentDescriptorArrayP47MTLRenderPipelineColorAttachmentDescriptorArraymP25MTLDepthStencilDescriptorP12NSMutableSetIP34MTLDebugRenderTargetAttachmentInfoEyS6_mbPKbP18_MTLMessageContextb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = objc_msgSend(a2, "rangeValue");
  v5 = objc_msgSend(a3, "rangeValue");
  if (v4 >= v5)
    v6 = 0;
  else
    v6 = -1;
  if (v4 > v5)
    return 1;
  else
    return v6;
}

BOOL usesStencilTexture(MTLStencilDescriptor *a1)
{
  if (-[MTLStencilDescriptor stencilCompareFunction](a1, "stencilCompareFunction") == MTLCompareFunctionAlways)
  {
    if (-[MTLStencilDescriptor writeMask](a1, "writeMask"))
      return -[MTLStencilDescriptor depthStencilPassOperation](a1, "depthStencilPassOperation")
          || -[MTLStencilDescriptor depthFailureOperation](a1, "depthFailureOperation");
  }
  else
  {
    if (-[MTLStencilDescriptor readMask](a1, "readMask"))
      return 1;
    if (-[MTLStencilDescriptor writeMask](a1, "writeMask"))
    {
      if (-[MTLStencilDescriptor stencilFailureOperation](a1, "stencilFailureOperation"))
        return 1;
      return -[MTLStencilDescriptor depthStencilPassOperation](a1, "depthStencilPassOperation")
          || -[MTLStencilDescriptor depthFailureOperation](a1, "depthFailureOperation");
    }
  }
  return 0;
}

unint64_t validateTessellationFactorBuffer(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  unint64_t result;

  v11 = *a6;
  result = _MTLDebugValidateBuffer(a1, a2);
  if (a4)
  {
    if (*a6 == v11)
    {
      result = objc_msgSend(a2, "length");
      if (a5 + a3 > result)
      {
        objc_msgSend(a2, "length");
        result = _MTLMessageContextPush_();
      }
    }
  }
  if ((a3 & 3) != 0)
    return _MTLMessageContextPush_();
  return result;
}

void std::vector<MTLViewport>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

char *std::vector<MTLViewport>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLViewport>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTLViewport>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

char *std::vector<MTLScissorRect>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MemberRef>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

char *std::vector<MTLViewport>::__assign_with_size[abi:ne180100]<MTLViewport const*,MTLViewport const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 4) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x555555555555555)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v11;
    result = std::vector<MTLViewport>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 4) >= a4)
    goto LABEL_16;
  v16 = &__src[16 * ((v15 - v9) >> 4)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *std::vector<MTLScissorRect>::__assign_with_size[abi:ne180100]<MTLScissorRect const*,MTLScissorRect const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<MTLScissorRect>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<unsigned int>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__find_equal<unsigned int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_22CE585DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t PrepareExecuteIndirect(MTLGPUDebugComputeCommandEncoder *a1, void *a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  MTLGPUDebugComputePipelineState *currentPipeline;
  BOOL v12;
  uint64_t v13;
  void *v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  id v18;
  MTLBuffer **p_textureTypeTable;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t *v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  int64x2_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v6 = -[MTLToolsObject baseObject](a1, "baseObject");
  v7 = -[MTLToolsObject device](a1, "device");
  v8 = objc_msgSend(a2, "inheritsBuffers");
  v9 = objc_msgSend(a2, "inheritsPipelineState");
  v10 = *(_QWORD *)(v7 + 424);
  objc_msgSend(v6, "useResource:usage:", v10, 1);
  objc_msgSend(v6, "setBuffer:offset:atIndex:", v10, 0, 2);
  objc_msgSend(v6, "useResource:usage:", objc_msgSend(a2, "baseObject"), 2);
  objc_msgSend(v6, "setBuffer:offset:atIndex:", objc_msgSend(a2, "internalICBBuffer"), 0, 0);
  currentPipeline = a1->_currentPipeline;
  if (currentPipeline)
    v12 = v9 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    v13 = -[MTLDebugInstrumentationData bufferAccessMask](-[MTLToolsComputePipelineState debugInstrumentationData](currentPipeline, "debugInstrumentationData"), "bufferAccessMask");
    objc_msgSend(v6, "useResource:usage:", -[MTLToolsObject baseObject](-[MTLGPUDebugComputePipelineState indirectStateBuffer](a1->_currentPipeline, "indirectStateBuffer"), "baseObject"), 1);
    objc_msgSend(v6, "setBuffer:offset:atIndex:", -[MTLToolsObject baseObject](-[MTLGPUDebugComputePipelineState indirectStateBuffer](a1->_currentPipeline, "indirectStateBuffer"), "baseObject"), 0, 3);
    if ((v9 & 1) != 0)
      goto LABEL_9;
LABEL_7:
    GlobalResidentBufferList::useBuffers((GlobalResidentBufferList *)(v7 + 552), a1);
    objc_msgSend(v6, "setBuffer:offset:atIndex:", objc_msgSend(a2, "internalDispatchIDBuffer"), 0, 5);
    goto LABEL_10;
  }
  v13 = 0x3FFFFFFFFFFFFFFFLL;
  if ((v9 & 1) == 0)
    goto LABEL_7;
LABEL_9:
  v14 = (void *)objc_msgSend((id)objc_msgSend((id)v7, "baseObject"), "newBufferWithBytes:length:options:", &a1->_dispatchID, 24, 0);
  objc_msgSend(v6, "setBuffer:offset:atIndex:", v14, 0, 5);
  objc_msgSend(v6, "useResource:usage:", v14, 1);

LABEL_10:
  result = objc_msgSend(v6, "setBuffer:offset:atIndex:", -[MTLBuffer baseObject](a1->_reportBuffer.buffer, "baseObject"), a1->_reportBuffer.offset, 4);
  v16 = *(_DWORD *)(a3 + 16);
  if (v16 == -1)
    v17 = -1;
  else
    v17 = *(unsigned int *)(a3 + 16);
  if (v17 == 1)
  {
    if (v16 != 1)
      goto LABEL_45;
    objc_msgSend(v6, "setBytes:length:atIndex:", a3, 8, 1);
  }
  else
  {
    if (v17)
      return result;
    if (v16)
      goto LABEL_45;
    v18 = *(id *)a3;
    objc_msgSend(v6, "setBuffer:offset:atIndex:", objc_msgSend(*(id *)a3, "baseObject"), *(_QWORD *)(a3 + 8), 1);
    -[MTLToolsCommandEncoder addRetainedObject:](a1, "addRetainedObject:", v18);
  }
  if ((*(_QWORD *)&a1->_options->var0 & 0x200000001) != 0)
  {
    objc_msgSend(v6, "setBuffer:offset:atIndex:", a1->_bufferUsageTable, 0, 6);
    objc_msgSend(v6, "setBuffer:offset:atIndex:", a1->_textureUsageTable, 0, 7);
    p_textureTypeTable = &a1->_textureTypeTable;
  }
  else
  {
    objc_msgSend(v6, "setBuffer:offset:atIndex:", *(_QWORD *)(v7 + 424), 0, 6);
    objc_msgSend(v6, "setBuffer:offset:atIndex:", *(_QWORD *)(v7 + 424), 0, 7);
    p_textureTypeTable = (MTLBuffer **)(v7 + 424);
  }
  objc_msgSend(v6, "setBuffer:offset:atIndex:", *p_textureTypeTable, 0, 8);
  if ((v8 & 1) != 0)
  {
    a1->_handles.needsFlush = 1;
    v34 = v13;
    MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::KernelEncoderClass>>((uint64_t)&a1->_handles, (unint64_t *)&v34, (id *)&a1->super.super.super.super.isa, 9, 10);
    if ((v9 & 1) == 0)
    {
      v20 = objc_msgSend((id)v7, "ICB_Inherit_Buffers_ComputePipelineState");
LABEL_31:
      v21 = (void *)v20;
      goto LABEL_32;
    }
  }
  else if (v9)
  {
    v20 = objc_msgSend((id)v7, "ICB_Inherit_PSO_ComputePipelineState");
    goto LABEL_31;
  }
  if (((v8 | v9) & 1) == 0)
  {
    v20 = objc_msgSend((id)v7, "ICB_Inherit_None_ComputePipelineState");
    goto LABEL_31;
  }
  if ((v8 & v9) != 0)
  {
    v20 = objc_msgSend((id)v7, "ICB_Inherit_Both_ComputePipelineState");
    goto LABEL_31;
  }
  v21 = 0;
LABEL_32:
  objc_msgSend(v6, "setComputePipelineState:", v21);
  objc_msgSend(v6, "memoryBarrierWithScope:", 1);
  v22 = *(_DWORD *)(a3 + 16);
  if (v22 == -1)
    v23 = -1;
  else
    v23 = *(unsigned int *)(a3 + 16);
  if (v23 == 1)
  {
    if (v22 == 1)
    {
      v28 = *(unsigned int *)(a3 + 4);
      v29 = vdupq_n_s64(1uLL);
      v26 = objc_msgSend(v21, "threadExecutionWidth");
      v27 = v29;
      v24 = (__int128 *)&v28;
      v25 = &v26;
      goto LABEL_40;
    }
LABEL_45:
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (v23)
    goto LABEL_41;
  v32 = xmmword_22CEAB870;
  v33 = 1;
  v30 = objc_msgSend(v21, "threadExecutionWidth");
  v31 = vdupq_n_s64(1uLL);
  v24 = &v32;
  v25 = &v30;
LABEL_40:
  objc_msgSend(v6, "dispatchThreads:threadsPerThreadgroup:", v24, v25);
LABEL_41:
  result = objc_msgSend(v6, "memoryBarrierWithScope:", 1);
  if (v9)
    return objc_msgSend(v6, "setComputePipelineState:", -[MTLToolsObject baseObject](a1->_currentPipeline, "baseObject"));
  return result;
}

uint64_t RestoreInternalState(MTLGPUDebugComputeCommandEncoder *a1)
{
  uint64_t result;

  -[MTLGPUDebugComputeCommandEncoder setKernelReportBuffer:offset:](a1, "setKernelReportBuffer:offset:", a1->_reportBuffer.buffer, a1->_reportBuffer.offset);
  result = -[MTLGPUDebugComputeCommandEncoder setBufferUsageTable:textureUsageTable:textureTypeTable:](a1, "setBufferUsageTable:textureUsageTable:textureTypeTable:", a1->_bufferUsageTable, a1->_textureUsageTable, a1->_textureTypeTable);
  if (a1->_currentPipeline)
  {
    a1->_currentPipeline = 0;
    result = -[MTLGPUDebugComputeCommandEncoder setComputePipelineState:](a1, "setComputePipelineState:");
    a1->_handles.needsFlush = 1;
    a1->_threadgroup.needsFlush = 1;
  }
  return result;
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::KernelEncoderClass>>(uint64_t a1, unint64_t *a2, id *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  objc_msgSend(a3[2], "setBytes:length:atIndex:", a1, 248, a4);
  result = objc_msgSend(a3[2], "setBytes:length:atIndex:", a1 + 744, 248, a5);
  v10 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v11 = __clz(__rbit64(v10));
        v12 = v10 & ~(3 << (v11 & 0x3E));
        *a2 = v12;
        v13 = *(_QWORD *)(a1 + ((4 * v11) & 0x1F8) + 248);
        if (!v13)
          break;
        result = objc_msgSend(a3, "useResource:usage:", v13, (v10 >> (v11 & 0x3E)) & 3);
        v10 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v10 &= ~(3 << (v11 & 0x3E));
    }
    while (v12);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB738], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::KernelEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;

  v12 = *a2;
  v13 = a3;
  result = MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::KernelEncoderClass>::setResources(&v13, a1, (uint64_t)&v12, a4, a5);
  v8 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v9 = __clz(__rbit64(v8));
        v10 = v8 & ~(3 << (v9 & 0x3E));
        *a2 = v10;
        v11 = *(_QWORD *)(a1 + ((4 * v9) & 0x1F8) + 248);
        if (!v11)
          break;
        result = objc_msgSend(v13, "useResource:usage:", v11, (v8 >> (v9 & 0x3E)) & 3);
        v8 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v8 &= ~(3 << (v9 & 0x3E));
    }
    while (v10);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT2<MTLGPUDebug::KernelEncoderClass>::setResources(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v9 = objc_msgSend((id)objc_msgSend(*a1, "commandBuffer"), "encodeBuffers:offsets:withRange:resultOffset:", a2 + 248, a2 + 496, 0, 31, &v11);
  objc_msgSend(*((id *)*a1 + 2), "setBuffer:offset:atIndex:", v9, v11, 0);
  objc_msgSend(*((id *)*a1 + 2), "setBytes:length:atIndex:", a2 + 992, 124, a4);
  return objc_msgSend(*((id *)*a1 + 2), "setBytes:length:atIndex:", a2 + 744, 248, a5);
}

uint64_t MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::KernelEncoderClass>>(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;

  v10 = *a2;
  v11 = a3;
  result = MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::KernelEncoderClass>::setResources((uint64_t)&v11, a1, &v10);
  v6 = *a2;
  if (*a2)
  {
    do
    {
      while (1)
      {
        v7 = __clz(__rbit64(v6));
        v8 = v6 & ~(3 << (v7 & 0x3E));
        *a2 = v8;
        v9 = *(_QWORD *)(a1 + ((4 * v7) & 0x1F8) + 248);
        if (!v9)
          break;
        result = objc_msgSend(v11, "useResource:usage:", v9, (v6 >> (v7 & 0x3E)) & 3);
        v6 = *a2;
        if (!*a2)
          goto LABEL_6;
      }
      v6 &= ~(3 << (v7 & 0x3E));
    }
    while (v8);
  }
LABEL_6:
  *(_BYTE *)(a1 + 1616) = 0;
  return result;
}

uint64_t MTLGPUDebug::EncoderVariantT1AGX<MTLGPUDebug::KernelEncoderClass>::setResources(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t i;
  unint64_t v7;

  for (i = *a3; *a3; i = *a3)
  {
    v7 = __clz(__rbit64(i));
    *a3 = i & ~(3 << (v7 & 0x3E));
    objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "setBuffer:offset:attributeStride:atIndex:", objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "baseObject"), *(_QWORD *)(a2 + 8 * (v7 >> 1) + 496) + objc_msgSend(*(id *)(a2 + 8 * (v7 >> 1) + 248), "offset"), *(_QWORD *)(a2 + 8 * (v7 >> 1) + 744), v7 >> 1);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), "setBytes:length:atIndex:", a2 + 1120, 496, 31);
}

uint64_t MTLFunctionHandleToToolsFunctionHandle(uint64_t a1, void *a2, uint64_t a3)
{
  void *v6;
  _QWORD v8[7];

  v6 = *(void **)(objc_msgSend(a2, "device") + 48);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 3221225472;
  v8[2] = __MTLFunctionHandleToToolsFunctionHandle_block_invoke;
  v8[3] = &unk_24F795418;
  v8[4] = a1;
  v8[5] = a3;
  v8[6] = a2;
  return objc_msgSend(v6, "getCachedObjectForKey:onMiss:", a1, v8);
}

id getIndirectConstant(MTLDataType a1)
{
  id v1;
  uint64_t Size;

  v1 = objc_alloc(MEMORY[0x24BDDD610]);
  Size = MTLDataTypeGetSize();
  return (id)objc_msgSend(v1, "initWithName:type:access:isActive:locationIndex:dataType:pixelFormat:aluType:dataSize:alignment:", &stru_24F795D30, 4, 1, 1, 0, 30, 0, 0, Size, MTLDataTypeGetAlignment());
}

void sub_22CE5AB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Unwind_Resume(exception_object);
}

id getStructMember(NSString *a1, uint64_t a2, MTLDataType a3, uint64_t a4, objc_object *a5)
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x24BDDD728]), "initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:", a1, a2, a3, 0, 0, a4, 0, 0, a5);
}

void sub_22CE5B05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::mutex *v3;
  va_list va;

  va_start(va, a3);
  std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100]((GPUDebugArgumentEncoderLayout **)va, 0);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void GPUDebugArgumentEncoderLayout::GPUDebugArgumentEncoderLayout(GPUDebugArgumentEncoderLayout *this, MTLStructType *a2, MTLGPUDebugDevice *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  v5 = -[MTLToolsObject baseObject](a3, "baseObject");
  v6 = (void *)MEMORY[0x22E309364]();
  v7 = +[MTLGPUDebugFunction internalStructTypeFromUserStructType:](MTLGPUDebugFunction, "internalStructTypeFromUserStructType:", a2);
  v8 = (void *)objc_msgSend(v5, "newIndirectArgumentBufferLayoutWithStructType:", v7);
  *(_QWORD *)this = v8;
  objc_msgSend(v8, "setStructType:withDevice:", v7, v5);
  objc_autoreleasePoolPop(v6);
  MTLEnumerateIndirectResources();
}

void sub_22CE5B2C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_22CE5B374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, GPUDebugArgumentEncoderLayout *a9)
{
  std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100](&a9, 0);
  _Unwind_Resume(a1);
}

void GPUDebugArgumentEncoderLayout::~GPUDebugArgumentEncoderLayout(id *this)
{

  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::~__hash_table((uint64_t)(this + 1));
}

uint64_t *GPUDebugArgumentEncoderLayout::sublayout(GPUDebugArgumentEncoderLayout *this, unsigned int a2)
{
  uint64_t *result;
  unsigned int v3;

  v3 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::find<unsigned int>((_QWORD *)this + 1, &v3);
  if (result)
    return (uint64_t *)result[3];
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::find<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

GPUDebugArgumentEncoderLayout *std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100](GPUDebugArgumentEncoderLayout **a1, GPUDebugArgumentEncoderLayout *a2)
{
  GPUDebugArgumentEncoderLayout *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    GPUDebugArgumentEncoderLayout::~GPUDebugArgumentEncoderLayout(result);
    JUMPOUT(0x22E309118);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::__emplace_unique_key_args<unsigned int,unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = *a3;
  v15 = *a4;
  *a4 = 0;
  v12[3] = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v12 = *v23;
LABEL_38:
    *v23 = v12;
    goto LABEL_39;
  }
  *v12 = *v14;
  *v14 = v12;
  *(_QWORD *)(v22 + 8 * v4) = v14;
  if (*v12)
  {
    v24 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_22CE5B748(_Unwind_Exception *a1)
{
  GPUDebugArgumentEncoderLayout **v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,void *>>>::operator()[abi:ne180100](uint64_t a1, GPUDebugArgumentEncoderLayout **__p)
{
  if (*(_BYTE *)(a1 + 8))
    std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100](__p + 3, 0);
  if (__p)
    operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::__deallocate_node(a1, *(GPUDebugArgumentEncoderLayout ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::__deallocate_node(uint64_t a1, GPUDebugArgumentEncoderLayout **a2)
{
  GPUDebugArgumentEncoderLayout **v2;
  GPUDebugArgumentEncoderLayout *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      std::unique_ptr<GPUDebugArgumentEncoderLayout>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      v2 = (GPUDebugArgumentEncoderLayout **)v3;
    }
    while (v3);
  }
}

void emitRenderTargetDistribution(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  NSObject *v5;
  int *v6;
  int v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  double v11;
  _QWORD *v12;
  const char *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  unsigned int v30;
  unint64_t v31;
  float v32;
  float v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  float v37;
  float v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  float v43;
  float v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  float v49;
  NSObject *v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  const char *v54;
  const char *v55;
  unsigned int v56;
  unint64_t v57;
  float v58;
  float v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  float v63;
  float v64;
  unint64_t v65;
  int v66;
  unsigned int v67;
  unint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  float v72;
  float v73;
  unint64_t v74;
  int v75;
  int v76;
  unsigned int v77;
  unint64_t v78;
  int v79;
  int v80;
  unsigned int v81;
  unint64_t v82;
  float v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  const char *v93;
  const char *v94;
  int v95;
  const char *v96;
  int v97;
  const char *v98;
  const char *v99;
  const char *Name;
  const char *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint8_t buf[4];
  _BYTE v108[10];
  _BYTE v109[10];
  _BYTE v110[10];
  const char *v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  const char *v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  double v121;
  __int16 v122;
  unint64_t v123;
  __int16 v124;
  unsigned int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  double v131;
  __int16 v132;
  unint64_t v133;
  __int16 v134;
  unsigned int v135;
  __int16 v136;
  int v137;
  __int16 v138;
  int v139;
  __int16 v140;
  double v141;
  __int16 v142;
  unint64_t v143;
  __int16 v144;
  unsigned int v145;
  __int16 v146;
  int v147;
  __int16 v148;
  int v149;
  __int16 v150;
  double v151;
  __int16 v152;
  unint64_t v153;
  __int16 v154;
  unsigned int v155;
  __int16 v156;
  int v157;
  __int16 v158;
  int v159;
  __int16 v160;
  double v161;
  __int16 v162;
  unint64_t v163;
  __int16 v164;
  unsigned int v165;
  __int16 v166;
  int v167;
  __int16 v168;
  int v169;
  __int16 v170;
  double v171;
  __int16 v172;
  unint64_t v173;
  __int16 v174;
  unsigned int v175;
  __int16 v176;
  int v177;
  __int16 v178;
  int v179;
  __int16 v180;
  double v181;
  __int16 v182;
  unint64_t v183;
  __int16 v184;
  unsigned int v185;
  uint64_t v186;
  const char *v187;

  v186 = *MEMORY[0x24BDAC8D0];
  v3 = a1[17];
  v4 = *(_DWORD *)(v3 + 16);
  if (v4)
  {
    if (!*MEMORY[0x24BDDDAC8])
      goto LABEL_5;
    if (*MEMORY[0x24BDDDAC8] == 1)
    {
      printf("\n\nRenderAttachmentCounts, minAttachments=%u, maxAttachments=%u, avgAttachments=%f, totalAttachments=%llu, countAttachments=%u", *(_DWORD *)v3, *(_DWORD *)(v3 + 4), (float)((float)*(unint64_t *)(v3 + 8) / (float)v4), *(_QWORD *)(v3 + 8), v4);
LABEL_5:
      v5 = objc_msgSend(a1, "telemetryLog");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = (int *)a1[17];
        v8 = *v6;
        v7 = v6[1];
        v9 = v6[4];
        v10 = *((_QWORD *)v6 + 1);
        if (v9)
          v11 = (float)((float)v10 / (float)v9);
        else
          v11 = 0.0;
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)v108 = v8;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v7;
        *(_WORD *)v109 = 2048;
        *(double *)&v109[2] = v11;
        *(_WORD *)v110 = 2048;
        *(_QWORD *)&v110[2] = v10;
        LOWORD(v111) = 1024;
        *(_DWORD *)((char *)&v111 + 2) = v9;
        _os_log_impl(&dword_22CD98000, v5, OS_LOG_TYPE_DEFAULT, "RenderAttachmentCounts, minAttachments=%u, maxAttachments=%u, avgAttachments=%f, totalAttachments=%llu, countAttachments=%u", buf, 0x28u);
      }
    }
  }
  v12 = *(_QWORD **)(a2 + 16);
  if (!v12)
    return;
  v13 = "unknown";
  do
  {
    v84 = v12;
    v14 = v12 + 2;
    Name = (const char *)MTLPixelFormatGetName();
    v15 = 0;
    v87 = v14;
    v85 = v14 + 1;
    do
    {
      v16 = 0;
      v17 = "stencil";
      if (v15 == 8)
        v17 = "depth";
      v102 = v17;
      do
      {
        v18 = 0;
        v103 = v16;
        do
        {
          v19 = 0;
          v104 = v18;
          do
          {
            v20 = 0;
            v21 = 0;
            v106 = (uint64_t)&v87[396 * v16 + 25345 + 132 * v18 + 22 * v19];
            v86 = (uint64_t)&v85[3168 * v15 + 396 * v16 + 132 * v18 + 22 * v19];
            v22 = 1;
            v105 = v19;
            do
            {
              v23 = v22;
              if (v15 != 9 && (v22 & 1) == 0)
                break;
              v24 = v106;
              if ((_DWORD)v15 != 8)
              {
                if ((_DWORD)v15 == 9)
                  v24 = (uint64_t)&v87[792 * v16 + 28513 + 264 * v18 + 44 * v19 + 22 * v21];
                else
                  v24 = v86;
              }
              if (!*(_DWORD *)v24)
                goto LABEL_90;
              if (!*MEMORY[0x24BDDDAC8])
                goto LABEL_59;
              if (*MEMORY[0x24BDDDAC8] == 1)
              {
                v25 = "unknown";
                if (v16 <= 7)
                  v25 = off_24F795920[v16];
                v98 = v25;
                v26 = v102;
                if (v15 <= 7)
                  v26 = (const char *)objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("color%lu"), v15), "UTF8String");
                if (v18 <= 2)
                  v13 = off_24F795960[v18];
                v96 = v13;
                v27 = "invalid";
                if (v19 <= 4)
                  v27 = off_24F795978[v19];
                v94 = v27;
                v28 = "Unknown";
                if ((v20 & 1) != 0)
                  v28 = "DepthResolvedSample";
                if ((v23 & 1) != 0)
                  v28 = "Sample0";
                if (v15 == 9)
                  v29 = v28;
                else
                  v29 = "None";
                v30 = *(_DWORD *)(v24 + 24);
                v31 = *(_QWORD *)(v24 + 16);
                v32 = 0.0;
                v33 = 0.0;
                if (v30)
                  v33 = (float)v31 / (float)v30;
                v34 = *(_DWORD *)(v24 + 48);
                v35 = *(_QWORD *)(v24 + 40);
                if (v34)
                  v32 = (float)v35 / (float)v34;
                v36 = *(_DWORD *)(v24 + 72);
                v37 = 0.0;
                v38 = 0.0;
                v39 = *(_QWORD *)(v24 + 64);
                if (v36)
                  v38 = (float)v39 / (float)v36;
                v40 = *(_DWORD *)(v24 + 96);
                v41 = *(_QWORD *)(v24 + 88);
                if (v40)
                  v37 = (float)v41 / (float)v40;
                v42 = *(_DWORD *)(v24 + 120);
                v43 = 0.0;
                v44 = 0.0;
                v45 = *(_QWORD *)(v24 + 112);
                if (v42)
                  v44 = (float)v45 / (float)v42;
                v46 = *(_DWORD *)(v24 + 144);
                v47 = *(_QWORD *)(v24 + 136);
                if (v46)
                  v43 = (float)v47 / (float)v46;
                v48 = *(_DWORD *)(v24 + 168);
                if (v48)
                  v49 = (float)*(unint64_t *)(v24 + 160) / (float)v48;
                else
                  v49 = 0.0;
                printf("\n\nRenderTarget, format=%s, type=%s, index=%s, loadAction=%s, storeAction=%s, multisampleStencilResolveFilter=%s, minWidth=%u, maxWidth=%u, avgWidth=%f, totalWidth=%llu, countWidth=%u, minHeight=%u, maxHeight=%u, avgHeight=%f, totalHeight=%llu, countHeight=%u, minDepth=%u, maxDepth=%u, avgDepth=%f, totalDepth=%llu, countDepth=%u, minArrayLength=%u, maxArrayLength=%u, avgArrayLength=%f, totalArrayLength=%llu, countArrayLength=%u, minSamples=%u, maxSamples=%u, avgSamples=%f, totalSamples=%llu, countSamples=%u, minSlice=%u, maxSlice=%u, avgSlice=%f, totalSlice=%llu, countSlice=%u, minLevel=%u, maxLevel=%u, avgLevel=%f, totalLevel=%llu, countLevel=%u", Name, v98, v26, v96, v94, v29, *(_DWORD *)(v24 + 8), *(_DWORD *)(v24 + 12), v33, v31,
                  v30,
                  *(_DWORD *)(v24 + 32),
                  *(_DWORD *)(v24 + 36),
                  v32,
                  v35,
                  v34,
                  *(_DWORD *)(v24 + 56),
                  *(_DWORD *)(v24 + 60),
                  v38,
                  v39,
                  v36,
                  *(_DWORD *)(v24 + 80),
                  *(_DWORD *)(v24 + 84),
                  v37,
                  v41,
                  v40,
                  *(_DWORD *)(v24 + 104),
                  *(_DWORD *)(v24 + 108),
                  v44,
                  v45,
                  v42,
                  *(_DWORD *)(v24 + 128),
                  *(_DWORD *)(v24 + 132),
                  v43,
                  v47,
                  v46,
                  *(_DWORD *)(v24 + 152),
                  *(_DWORD *)(v24 + 156),
                  v49,
                  *(_QWORD *)(v24 + 160),
                  v48);
                v13 = "unknown";
                v16 = v103;
                v18 = v104;
                v19 = v105;
LABEL_59:
                v50 = objc_msgSend(a1, "telemetryLog");
                if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                {
                  v51 = "unknown";
                  if (v16 <= 7)
                    v51 = off_24F795920[v16];
                  v99 = v51;
                  v52 = (uint64_t)v102;
                  if (v15 <= 7)
                    v52 = objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("color%lu"), v15), "UTF8String");
                  v53 = "unknown";
                  if (v18 <= 2)
                    v53 = off_24F795960[v18];
                  v54 = "invalid";
                  if (v19 <= 4)
                    v54 = off_24F795978[v19];
                  v55 = "Unknown";
                  if ((v20 & 1) != 0)
                    v55 = "DepthResolvedSample";
                  if ((v23 & 1) != 0)
                    v55 = "Sample0";
                  if (v15 != 9)
                    v55 = "None";
                  v93 = v55;
                  v95 = *(_DWORD *)(v24 + 8);
                  v97 = *(_DWORD *)(v24 + 12);
                  v56 = *(_DWORD *)(v24 + 24);
                  v57 = *(_QWORD *)(v24 + 16);
                  v58 = 0.0;
                  v59 = 0.0;
                  if (v56)
                    v59 = (float)v57 / (float)v56;
                  v91 = *(_DWORD *)(v24 + 32);
                  v92 = *(_DWORD *)(v24 + 36);
                  v60 = *(_DWORD *)(v24 + 48);
                  v61 = *(_QWORD *)(v24 + 40);
                  if (v60)
                    v58 = (float)v61 / (float)v60;
                  v89 = *(_DWORD *)(v24 + 56);
                  v90 = *(_DWORD *)(v24 + 60);
                  v62 = *(_DWORD *)(v24 + 72);
                  v63 = 0.0;
                  v64 = 0.0;
                  v65 = *(_QWORD *)(v24 + 64);
                  if (v62)
                    v64 = (float)v65 / (float)v62;
                  v66 = *(_DWORD *)(v24 + 80);
                  v88 = *(_DWORD *)(v24 + 84);
                  v67 = *(_DWORD *)(v24 + 96);
                  v68 = *(_QWORD *)(v24 + 88);
                  if (v67)
                    v63 = (float)v68 / (float)v67;
                  v69 = *(_DWORD *)(v24 + 104);
                  v70 = *(_DWORD *)(v24 + 108);
                  v71 = *(_DWORD *)(v24 + 120);
                  v72 = 0.0;
                  v73 = 0.0;
                  v74 = *(_QWORD *)(v24 + 112);
                  if (v71)
                    v73 = (float)v74 / (float)v71;
                  v76 = *(_DWORD *)(v24 + 128);
                  v75 = *(_DWORD *)(v24 + 132);
                  v77 = *(_DWORD *)(v24 + 144);
                  v78 = *(_QWORD *)(v24 + 136);
                  if (v77)
                    v72 = (float)v78 / (float)v77;
                  v80 = *(_DWORD *)(v24 + 152);
                  v79 = *(_DWORD *)(v24 + 156);
                  v81 = *(_DWORD *)(v24 + 168);
                  v82 = *(_QWORD *)(v24 + 160);
                  if (v81)
                    v83 = (float)v82 / (float)v81;
                  else
                    v83 = 0.0;
                  v187 = v53;
                  *(_QWORD *)v109 = v99;
                  *(_QWORD *)v110 = v52;
                  *(_DWORD *)buf = 136325378;
                  *(_QWORD *)v108 = Name;
                  *(_WORD *)&v108[8] = 2080;
                  *(_WORD *)&v109[8] = 2080;
                  *(_WORD *)&v110[8] = 2080;
                  v111 = v53;
                  v112 = 2080;
                  v113 = v54;
                  v114 = 2080;
                  v115 = v93;
                  v116 = 1024;
                  v117 = v95;
                  v118 = 1024;
                  v119 = v97;
                  v120 = 2048;
                  v121 = v59;
                  v122 = 2048;
                  v123 = v57;
                  v124 = 1024;
                  v125 = v56;
                  v126 = 1024;
                  v127 = v91;
                  v128 = 1024;
                  v129 = v92;
                  v130 = 2048;
                  v131 = v58;
                  v132 = 2048;
                  v133 = v61;
                  v134 = 1024;
                  v135 = v60;
                  v136 = 1024;
                  v137 = v89;
                  v138 = 1024;
                  v139 = v90;
                  v140 = 2048;
                  v141 = v64;
                  v142 = 2048;
                  v143 = v65;
                  v144 = 1024;
                  v145 = v62;
                  v146 = 1024;
                  v147 = v66;
                  v148 = 1024;
                  v149 = v88;
                  v150 = 2048;
                  v151 = v63;
                  v152 = 2048;
                  v153 = v68;
                  v154 = 1024;
                  v155 = v67;
                  v156 = 1024;
                  v157 = v69;
                  v158 = 1024;
                  v159 = v70;
                  v160 = 2048;
                  v161 = v73;
                  v162 = 2048;
                  v163 = v74;
                  v164 = 1024;
                  v165 = v71;
                  v166 = 1024;
                  v167 = v76;
                  v168 = 1024;
                  v169 = v75;
                  v170 = 2048;
                  v171 = v72;
                  v172 = 2048;
                  v173 = v78;
                  v174 = 1024;
                  v175 = v77;
                  v176 = 1024;
                  v177 = v80;
                  v178 = 1024;
                  v179 = v79;
                  v180 = 2048;
                  v181 = v83;
                  v182 = 2048;
                  v183 = v82;
                  v184 = 1024;
                  v185 = v81;
                  _os_log_impl(&dword_22CD98000, v50, OS_LOG_TYPE_DEFAULT, "RenderTarget, format=%s, type=%s, index=%s, loadAction=%s, storeAction=%s, multisampleStencilResolveFilter=%s, minWidth=%u, maxWidth=%u, avgWidth=%f, totalWidth=%llu, countWidth=%u, minHeight=%u, maxHeight=%u, avgHeight=%f, totalHeight=%llu, countHeight=%u, minDepth=%u, maxDepth=%u, avgDepth=%f, totalDepth=%llu, countDepth=%u, minArrayLength=%u, maxArrayLength=%u, avgArrayLength=%f, totalArrayLength=%llu, countArrayLength=%u, minSamples=%u, maxSamples=%u, avgSamples=%f, totalSamples=%llu, countSamples=%u, minSlice=%u, maxSlice=%u, avgSlice=%f, totalSlice=%llu, countSlice=%u, minLevel=%u, maxLevel=%u, avgLevel=%f, totalLevel=%llu, countLevel=%u", buf, 0x148u);
                  v13 = "unknown";
                  v16 = v103;
                  v18 = v104;
                  v19 = v105;
                }
              }
LABEL_90:
              v22 = 0;
              v20 = 1;
              v21 = 1;
            }
            while ((v23 & 1) != 0);
            ++v19;
          }
          while (v19 != 6);
          ++v18;
        }
        while (v18 != 3);
        ++v16;
      }
      while (v16 != 8);
      ++v15;
    }
    while (v15 != 10);
    v12 = (_QWORD *)*v84;
  }
  while (*v84);
}

void emitRenderPassAttributes(MTLTelemetryDevice *a1, MTLTelemetryStatisticUIRec *a2)
{
  unsigned int count;
  unint64_t total;
  float v6;
  float v7;
  MTLTelemetryStatisticUIRec *renderTargetArrayLengthDistribution;
  unsigned int v9;
  unint64_t v10;
  MTLTelemetryViewportDistributionRec *viewportDistribution;
  unsigned int v12;
  unint64_t v13;
  float v14;
  float v15;
  unsigned int var3;
  float var2;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  unsigned int v24;
  float v25;
  double v26;
  double v27;
  MTLTelemetryScissorRectDistributionRec *scissorRectDistribution;
  unsigned int v29;
  unint64_t v30;
  float var0;
  float var1;
  float v33;
  float v34;
  unsigned int v35;
  double v36;
  double v37;
  float v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  unsigned int min;
  unsigned int max;
  double v47;
  double v48;
  double v49;
  unsigned int v50;
  unsigned int v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  unsigned int v62;
  float v63;
  OS_os_log *v64;
  unsigned int v65;
  unint64_t v66;
  double v67;
  double v68;
  MTLTelemetryStatisticUIRec *v69;
  unsigned int v70;
  unint64_t v71;
  MTLTelemetryViewportDistributionRec *v72;
  unsigned int v73;
  unint64_t v74;
  double v75;
  double v76;
  unsigned int v77;
  float v78;
  unsigned int v79;
  float v80;
  double v81;
  double v82;
  unsigned int v83;
  float v84;
  unsigned int v85;
  float v86;
  double v87;
  double v88;
  MTLTelemetryScissorRectDistributionRec *v89;
  unsigned int v90;
  unint64_t v91;
  unsigned int v92;
  double v93;
  double v94;
  float v95;
  unsigned int v96;
  unsigned int v97;
  double v98;
  unsigned int v99;
  unsigned int v100;
  double v101;
  double v102;
  double v103;
  double v104;
  unsigned int v105;
  unsigned int v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  unsigned int v113;
  unsigned int v114;
  double v115;
  double v116;
  double v117;
  unsigned int v118;
  double v119;
  float v120;
  uint8_t buf[4];
  unsigned int v122;
  __int16 v123;
  unsigned int v124;
  __int16 v125;
  double v126;
  __int16 v127;
  unint64_t v128;
  __int16 v129;
  unsigned int v130;
  __int16 v131;
  unsigned int v132;
  __int16 v133;
  unsigned int v134;
  __int16 v135;
  double v136;
  __int16 v137;
  unint64_t v138;
  __int16 v139;
  unsigned int v140;
  __int16 v141;
  unsigned int v142;
  __int16 v143;
  unsigned int v144;
  __int16 v145;
  double v146;
  __int16 v147;
  unint64_t v148;
  __int16 v149;
  unsigned int v150;
  __int16 v151;
  double v152;
  __int16 v153;
  double v154;
  __int16 v155;
  double v156;
  __int16 v157;
  double v158;
  __int16 v159;
  unsigned int v160;
  __int16 v161;
  double v162;
  __int16 v163;
  double v164;
  __int16 v165;
  double v166;
  __int16 v167;
  double v168;
  __int16 v169;
  unsigned int v170;
  __int16 v171;
  double v172;
  __int16 v173;
  double v174;
  __int16 v175;
  double v176;
  __int16 v177;
  double v178;
  __int16 v179;
  unsigned int v180;
  __int16 v181;
  double v182;
  __int16 v183;
  double v184;
  __int16 v185;
  double v186;
  __int16 v187;
  double v188;
  __int16 v189;
  unsigned int v190;
  __int16 v191;
  unsigned int v192;
  __int16 v193;
  unsigned int v194;
  __int16 v195;
  double v196;
  __int16 v197;
  unint64_t v198;
  __int16 v199;
  unsigned int v200;
  __int16 v201;
  double v202;
  __int16 v203;
  double v204;
  __int16 v205;
  double v206;
  __int16 v207;
  double v208;
  __int16 v209;
  unsigned int v210;
  __int16 v211;
  double v212;
  __int16 v213;
  double v214;
  __int16 v215;
  double v216;
  __int16 v217;
  double v218;
  __int16 v219;
  unsigned int v220;
  uint64_t v221;

  v221 = *MEMORY[0x24BDAC8D0];
  if (*MEMORY[0x24BDDDAC8])
  {
    if (*MEMORY[0x24BDDDAC8] != 1)
      return;
    count = a2->count;
    total = a2->total;
    v6 = 0.0;
    v7 = 0.0;
    if (count)
      v7 = (float)total / (float)count;
    renderTargetArrayLengthDistribution = a1->renderTargetArrayLengthDistribution;
    v9 = renderTargetArrayLengthDistribution->count;
    v10 = renderTargetArrayLengthDistribution->total;
    if (v9)
      v6 = (float)v10 / (float)v9;
    viewportDistribution = a1->viewportDistribution;
    v12 = viewportDistribution->var0.count;
    v13 = viewportDistribution->var0.total;
    v14 = 0.0;
    v15 = 0.0;
    if (v12)
      v15 = (float)v13 / (float)v12;
    var3 = viewportDistribution->var1.var3;
    var2 = viewportDistribution->var1.var2;
    if (var3)
      v14 = var2 / (float)var3;
    v18 = viewportDistribution->var2.var3;
    v19 = viewportDistribution->var2.var2;
    v20 = 0.0;
    v21 = 0.0;
    if (v18)
      v21 = v19 / (float)v18;
    v22 = viewportDistribution->var3.var3;
    v23 = viewportDistribution->var3.var2;
    if (v22)
      v20 = v23 / (float)v22;
    v24 = viewportDistribution->var4.var3;
    v25 = viewportDistribution->var4.var2;
    v26 = 0.0;
    v27 = 0.0;
    if (v24)
      v27 = (float)(v25 / (float)v24);
    scissorRectDistribution = a1->scissorRectDistribution;
    v29 = scissorRectDistribution->var0.count;
    v30 = scissorRectDistribution->var0.total;
    if (v29)
      v26 = (float)((float)v30 / (float)v29);
    var0 = viewportDistribution->var3.var0;
    var1 = viewportDistribution->var3.var1;
    v33 = viewportDistribution->var4.var0;
    v34 = viewportDistribution->var4.var1;
    v35 = scissorRectDistribution->var1.var3;
    v36 = 0.0;
    v37 = 0.0;
    v38 = scissorRectDistribution->var1.var2;
    if (v35)
      v37 = (float)(v38 / (float)v35);
    v39 = v7;
    v40 = v6;
    v41 = v15;
    v42 = viewportDistribution->var1.var0;
    v43 = viewportDistribution->var1.var1;
    v44 = v14;
    min = renderTargetArrayLengthDistribution->min;
    max = renderTargetArrayLengthDistribution->max;
    v47 = var2;
    v48 = viewportDistribution->var2.var0;
    v49 = viewportDistribution->var2.var1;
    v51 = viewportDistribution->var0.min;
    v50 = viewportDistribution->var0.max;
    v52 = v21;
    v53 = v19;
    v54 = var0;
    v55 = var1;
    v56 = v20;
    v57 = v23;
    v58 = v33;
    v59 = v34;
    v60 = v25;
    v61 = v38;
    v62 = scissorRectDistribution->var2.var3;
    v63 = scissorRectDistribution->var2.var2;
    if (v62)
      v36 = (float)(v63 / (float)v62);
    printf("\n\nRenderStateAttributes, minDepthClipModeClamp=%u, maxDepthClipModeClamp=%u, avgDepthClipModeClamp=%f, totalDepthClipModeClamp=%llu, countDepthClipModeClamp=%u, minRenderTargetArrayLength=%u, maxRenderTargetArrayLength=%u, avgRenderTargetArrayLength=%f, totalRenderTargetArrayLength=%llu, countRenderTargetArrayLength=%u, minViewportCount=%u, maxViewportCount=%u, avgViewportCount=%f, totalViewportCount=%llu, countViewportCount=%u, minViewportWidth=%.2f, maxViewportWidth=%.2f, avgViewportWidth=%f, totalViewportWidth=%.2f, countViewportWidth=%u, minViewportHeight=%.2f, maxViewportHeight=%.2f, avgViewportHeight=%f, totalViewportHeight=%.2f, countViewportHeight=%u, minViewportZNear=%.2f, maxViewportZNear=%.2f, avgViewportZNear=%f, totalViewportZNear=%.2f, countViewportZNear=%u, minViewportZFar=%.2f, maxViewportZFar=%.2f, avgViewportZFar=%f, totalViewportZFar=%.2f, countViewportZFar=%u, minScissorRectCount=%u, maxScissorRectCount=%u, avgScissorRectCount=%f, totalScissorRectCount=%llu, countScissorRectCount=%u, minScissorRectWidth=%.2f, maxScissorRectWidth=%.2f, avgScissorRectWidth=%f, totalScissorRectWidth=%.2f, countScissorRectWidth=%u, minScissorRectHeight=%.2f, maxScissorRectHeight=%.2f, avgScissorRectHeight=%f, totalScissorRectHeight=%.2f, countScissorRectHeight=%u", a2->min, a2->max, v39, total, count,
      min,
      max,
      v40,
      v10,
      v9,
      v51,
      v50,
      v41,
      v13,
      v12,
      v42,
      v43,
      v44,
      v47,
      var3,
      v48,
      v49,
      v52,
      v53,
      v18,
      v54,
      v55,
      v56,
      v57,
      v22,
      v58,
      v59,
      v27,
      v60,
      v24,
      scissorRectDistribution->var0.min,
      scissorRectDistribution->var0.max,
      v26,
      v30,
      v29,
      scissorRectDistribution->var1.var0,
      scissorRectDistribution->var1.var1,
      v37,
      v61,
      v35,
      scissorRectDistribution->var2.var0,
      scissorRectDistribution->var2.var1,
      v36,
      v63,
      scissorRectDistribution->var2.var3);
  }
  v64 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
  if (os_log_type_enabled((os_log_t)v64, OS_LOG_TYPE_DEFAULT))
  {
    v65 = a2->count;
    v66 = a2->total;
    v67 = 0.0;
    v68 = 0.0;
    if (v65)
      v68 = (float)((float)v66 / (float)v65);
    v69 = a1->renderTargetArrayLengthDistribution;
    v70 = v69->count;
    v71 = v69->total;
    if (v70)
      v67 = (float)((float)v71 / (float)v70);
    v72 = a1->viewportDistribution;
    v73 = v72->var0.count;
    v74 = v72->var0.total;
    v75 = 0.0;
    v76 = 0.0;
    if (v73)
      v76 = (float)((float)v74 / (float)v73);
    v77 = v72->var1.var3;
    v78 = v72->var1.var2;
    if (v77)
      v75 = (float)(v78 / (float)v77);
    v79 = v72->var2.var3;
    v80 = v72->var2.var2;
    v81 = 0.0;
    v82 = 0.0;
    if (v79)
      v82 = (float)(v80 / (float)v79);
    v83 = v72->var3.var3;
    v84 = v72->var3.var2;
    if (v83)
      v81 = (float)(v84 / (float)v83);
    v85 = v72->var4.var3;
    v86 = v72->var4.var2;
    v87 = 0.0;
    v88 = 0.0;
    if (v85)
      v88 = (float)(v86 / (float)v85);
    v89 = a1->scissorRectDistribution;
    v90 = v89->var0.count;
    v91 = v89->var0.total;
    if (v90)
      v87 = (float)((float)v91 / (float)v90);
    v92 = v89->var1.var3;
    v93 = 0.0;
    v94 = 0.0;
    v95 = v89->var1.var2;
    if (v92)
      v94 = (float)(v95 / (float)v92);
    v97 = a2->min;
    v96 = a2->max;
    v98 = v72->var1.var0;
    v100 = v69->min;
    v99 = v69->max;
    v101 = v72->var1.var1;
    v102 = v78;
    v103 = v72->var2.var0;
    v104 = v72->var2.var1;
    v106 = v72->var0.min;
    v105 = v72->var0.max;
    v107 = v80;
    v108 = v72->var3.var0;
    v109 = v72->var3.var1;
    v110 = v72->var4.var0;
    v111 = v72->var4.var1;
    v112 = v86;
    v114 = v89->var0.min;
    v113 = v89->var0.max;
    v115 = v89->var1.var0;
    v116 = v89->var1.var1;
    v117 = v89->var2.var0;
    v118 = v89->var2.var3;
    v119 = v89->var2.var1;
    v120 = v89->var2.var2;
    if (v118)
      v93 = (float)(v120 / (float)v118);
    *(_DWORD *)buf = 67121664;
    v122 = v97;
    v123 = 1024;
    v124 = v96;
    v125 = 2048;
    v126 = v68;
    v127 = 2048;
    v128 = v66;
    v129 = 1024;
    v130 = v65;
    v131 = 1024;
    v132 = v100;
    v133 = 1024;
    v134 = v99;
    v135 = 2048;
    v136 = v67;
    v137 = 2048;
    v138 = v71;
    v139 = 1024;
    v140 = v70;
    v141 = 1024;
    v142 = v106;
    v143 = 1024;
    v144 = v105;
    v145 = 2048;
    v146 = v76;
    v147 = 2048;
    v148 = v74;
    v149 = 1024;
    v150 = v73;
    v151 = 2048;
    v152 = v98;
    v153 = 2048;
    v154 = v101;
    v155 = 2048;
    v156 = v75;
    v157 = 2048;
    v158 = v102;
    v159 = 1024;
    v160 = v77;
    v161 = 2048;
    v162 = v103;
    v163 = 2048;
    v164 = v104;
    v165 = 2048;
    v166 = v82;
    v167 = 2048;
    v168 = v107;
    v169 = 1024;
    v170 = v79;
    v171 = 2048;
    v172 = v108;
    v173 = 2048;
    v174 = v109;
    v175 = 2048;
    v176 = v81;
    v177 = 2048;
    v178 = v84;
    v179 = 1024;
    v180 = v83;
    v181 = 2048;
    v182 = v110;
    v183 = 2048;
    v184 = v111;
    v185 = 2048;
    v186 = v88;
    v187 = 2048;
    v188 = v112;
    v189 = 1024;
    v190 = v85;
    v191 = 1024;
    v192 = v114;
    v193 = 1024;
    v194 = v113;
    v195 = 2048;
    v196 = v87;
    v197 = 2048;
    v198 = v91;
    v199 = 1024;
    v200 = v90;
    v201 = 2048;
    v202 = v115;
    v203 = 2048;
    v204 = v116;
    v205 = 2048;
    v206 = v94;
    v207 = 2048;
    v208 = v95;
    v209 = 1024;
    v210 = v92;
    v211 = 2048;
    v212 = v117;
    v213 = 2048;
    v214 = v119;
    v215 = 2048;
    v216 = v93;
    v217 = 2048;
    v218 = v120;
    v219 = 1024;
    v220 = v118;
    _os_log_impl(&dword_22CD98000, (os_log_t)v64, OS_LOG_TYPE_DEFAULT, "RenderStateAttributes, minDepthClipModeClamp=%u, maxDepthClipModeClamp=%u, avgDepthClipModeClamp=%f, totalDepthClipModeClamp=%llu, countDepthClipModeClamp=%u, minRenderTargetArrayLength=%u, maxRenderTargetArrayLength=%u, avgRenderTargetArrayLength=%f, totalRenderTargetArrayLength=%llu, countRenderTargetArrayLength=%u, minViewportCount=%u, maxViewportCount=%u, avgViewportCount=%f, totalViewportCount=%llu, countViewportCount=%u, minViewportWidth=%.2f, maxViewportWidth=%.2f, avgViewportWidth=%f, totalViewportWidth=%.2f, countViewportWidth=%u, minViewportHeight=%.2f, maxViewportHeight=%.2f, avgViewportHeight=%f, totalViewportHeight=%.2f, countViewportHeight=%u, minViewportZNear=%.2f, maxViewportZNear=%.2f, avgViewportZNear=%f, totalViewportZNear=%.2f, countViewportZNear=%u, minViewportZFar=%.2f, maxViewportZFar=%.2f, avgViewportZFar=%f, totalViewportZFar=%.2f, countViewportZFar=%u, minScissorRectCount=%u, maxScissorRectCount=%u, avgScissorRectCount=%f, totalScissorRectCount=%llu, countScissorRectCount=%u, minScissorRectWidth=%.2f, maxScissorRectWidth=%.2f, avgScissorRectWidth=%f, totalScissorRectWidth=%.2f, countScissorRectWidth=%u, minScissorRectHeight=%.2f, maxScissorRectHeight=%.2f, avgScissorRectHeight=%f, totalScissorRectHeight=%.2f, countScissorRectHeight=%u", buf, 0x1AEu);
  }
}

void emitDrawDistribution(MTLTelemetryDevice *a1, MTLTelemetryDrawDistributionRec *a2)
{
  int v4;
  MTLTelemetryStatisticUIRec *renderEncoderDrawCallDistribution;
  unsigned int min;
  unsigned int max;
  unsigned int count;
  unint64_t total;
  double v10;
  OS_os_log *v11;
  MTLTelemetryStatisticUIRec *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  double v17;
  MTLTelemetryStatisticUIRec *commandBufferDrawCallDistribution;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  double v23;
  OS_os_log *v24;
  MTLTelemetryStatisticUIRec *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  double v30;
  MTLTelemetryStatisticUIRec *commandBufferMemoryBarrierDistribution;
  unsigned int v32;
  OS_os_log *v33;
  MTLTelemetryStatisticUIRec *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  double v39;
  unint64_t i;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int var0;
  int v45;
  const char *v46;
  const char *v47;
  const char *v48;
  char *v49;
  unsigned int v50;
  unint64_t v51;
  float v52;
  float v53;
  unsigned int v54;
  unint64_t v55;
  OS_os_log *v56;
  const char *v57;
  const char *v58;
  const char *v59;
  char *v60;
  unsigned int v61;
  unint64_t v62;
  float v63;
  float v64;
  unsigned int v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  const char *v71;
  const char *v72;
  OS_os_log *v73;
  const char *v74;
  const char *v75;
  unsigned int v76;
  MTLTelemetryDrawDistributionRec *v77;
  uint8_t buf[4];
  _BYTE v79[10];
  _BYTE v80[10];
  _BYTE v81[10];
  _BYTE v82[6];
  int v83;
  __int16 v84;
  double v85;
  __int16 v86;
  unint64_t v87;
  __int16 v88;
  unsigned int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  double v95;
  __int16 v96;
  unint64_t v97;
  __int16 v98;
  unsigned int v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v4 = *MEMORY[0x24BDDDAC8];
  if (*MEMORY[0x24BDDDAC8])
  {
    if (v4 != 1)
      goto LABEL_13;
    renderEncoderDrawCallDistribution = a1->renderEncoderDrawCallDistribution;
    min = renderEncoderDrawCallDistribution->min;
    max = renderEncoderDrawCallDistribution->max;
    count = renderEncoderDrawCallDistribution->count;
    total = renderEncoderDrawCallDistribution->total;
    if (count)
      v10 = (float)((float)total / (float)count);
    else
      v10 = 0.0;
    printf("\n\nDrawsPerRenderEncoder, minDraws=%u, maxDraws=%u, avgDraws=%f, totalDraws=%llu, countDraws=%u", min, max, v10, total, count);
  }
  v11 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
  if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = a1->renderEncoderDrawCallDistribution;
    v14 = v12->min;
    v13 = v12->max;
    v15 = v12->count;
    v16 = v12->total;
    if (v15)
      v17 = (float)((float)v16 / (float)v15);
    else
      v17 = 0.0;
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)v79 = v14;
    *(_WORD *)&v79[4] = 1024;
    *(_DWORD *)&v79[6] = v13;
    *(_WORD *)v80 = 2048;
    *(double *)&v80[2] = v17;
    *(_WORD *)v81 = 2048;
    *(_QWORD *)&v81[2] = v16;
    *(_WORD *)v82 = 1024;
    *(_DWORD *)&v82[2] = v15;
    _os_log_impl(&dword_22CD98000, (os_log_t)v11, OS_LOG_TYPE_DEFAULT, "DrawsPerRenderEncoder, minDraws=%u, maxDraws=%u, avgDraws=%f, totalDraws=%llu, countDraws=%u", buf, 0x28u);
  }
  v4 = *MEMORY[0x24BDDDAC8];
LABEL_13:
  if (v4)
  {
    if (v4 != 1)
      goto LABEL_24;
    commandBufferDrawCallDistribution = a1->commandBufferDrawCallDistribution;
    v19 = commandBufferDrawCallDistribution->min;
    v20 = commandBufferDrawCallDistribution->max;
    v21 = commandBufferDrawCallDistribution->count;
    v22 = commandBufferDrawCallDistribution->total;
    if (v21)
      v23 = (float)((float)v22 / (float)v21);
    else
      v23 = 0.0;
    printf("\n\nDrawsPerCommandBuffer, minDraws=%u, maxDraws=%u, avgDraws=%f, totalDraws=%llu, countDraws=%u", v19, v20, v23, v22, v21);
  }
  v24 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
  if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_DEFAULT))
  {
    v25 = a1->commandBufferDrawCallDistribution;
    v27 = v25->min;
    v26 = v25->max;
    v28 = v25->count;
    v29 = v25->total;
    if (v28)
      v30 = (float)((float)v29 / (float)v28);
    else
      v30 = 0.0;
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)v79 = v27;
    *(_WORD *)&v79[4] = 1024;
    *(_DWORD *)&v79[6] = v26;
    *(_WORD *)v80 = 2048;
    *(double *)&v80[2] = v30;
    *(_WORD *)v81 = 2048;
    *(_QWORD *)&v81[2] = v29;
    *(_WORD *)v82 = 1024;
    *(_DWORD *)&v82[2] = v28;
    _os_log_impl(&dword_22CD98000, (os_log_t)v24, OS_LOG_TYPE_DEFAULT, "DrawsPerCommandBuffer, minDraws=%u, maxDraws=%u, avgDraws=%f, totalDraws=%llu, countDraws=%u", buf, 0x28u);
  }
LABEL_24:
  commandBufferMemoryBarrierDistribution = a1->commandBufferMemoryBarrierDistribution;
  v32 = commandBufferMemoryBarrierDistribution->count;
  if (v32)
  {
    if (!*MEMORY[0x24BDDDAC8])
      goto LABEL_28;
    if (*MEMORY[0x24BDDDAC8] == 1)
    {
      printf("\n\nMemoryBarriersPerCommandBuffer, minMemoryBarriers=%u, maxMemoryBarriers=%u, avgMemoryBarriers=%f, totalMemoryBarriers=%llu, countMemoryBarriers=%u", commandBufferMemoryBarrierDistribution->min, commandBufferMemoryBarrierDistribution->max, (float)((float)commandBufferMemoryBarrierDistribution->total / (float)v32), commandBufferMemoryBarrierDistribution->total, v32);
LABEL_28:
      v33 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
      if (os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_DEFAULT))
      {
        v34 = a1->commandBufferMemoryBarrierDistribution;
        v36 = v34->min;
        v35 = v34->max;
        v37 = v34->count;
        v38 = v34->total;
        if (v37)
          v39 = (float)((float)v38 / (float)v37);
        else
          v39 = 0.0;
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)v79 = v36;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&v79[6] = v35;
        *(_WORD *)v80 = 2048;
        *(double *)&v80[2] = v39;
        *(_WORD *)v81 = 2048;
        *(_QWORD *)&v81[2] = v38;
        *(_WORD *)v82 = 1024;
        *(_DWORD *)&v82[2] = v37;
        _os_log_impl(&dword_22CD98000, (os_log_t)v33, OS_LOG_TYPE_DEFAULT, "MemoryBarriersPerCommandBuffer, minMemoryBarriers=%u, maxMemoryBarriers=%u, avgMemoryBarriers=%f, totalMemoryBarriers=%llu, countMemoryBarriers=%u", buf, 0x28u);
      }
    }
  }
  for (i = 0; i != 5; ++i)
  {
    v41 = 0;
    v77 = a2;
    do
    {
      v42 = 0;
      v43 = 0;
      while (1)
      {
        var0 = a2->var0[0][0][v42].var0;
        if (!var0)
          goto LABEL_63;
        v45 = *MEMORY[0x24BDDDAC8];
        if (v42 == 2)
          break;
        if (!v45)
          goto LABEL_51;
        if (v45 == 1)
        {
          v46 = "Unknown";
          if (v43 <= 2)
            v46 = off_24F7959A0[v43];
          v47 = "unknown";
          if (i <= 4)
            v47 = off_24F7959B8[i];
          v48 = "unknown";
          if (v41 <= 2)
            v48 = off_24F7959E0[(int)v41];
          v49 = (char *)a2 + v42 * 56;
          v50 = a2->var0[0][0][v42].var1.count;
          v51 = a2->var0[0][0][v42].var1.total;
          v52 = 0.0;
          v53 = 0.0;
          if (v50)
            v53 = (float)v51 / (float)v50;
          v54 = *((_DWORD *)v49 + 12);
          v55 = *((_QWORD *)v49 + 5);
          if (v54)
            v52 = (float)v55 / (float)v54;
          printf("\n\n%s, primitive=%s, indexType=%s, minVertices=%u, maxVertices=%u, avgVertices=%f, totalVertices=%llu, countVertices=%u, minInstances=%u, maxInstances=%u, avgInstances=%f, totalInstances=%llu, countInstances=%u", v46, v47, v48, *((_DWORD *)v49 + 2), *((_DWORD *)v49 + 3), v53, v51, v50, *((_DWORD *)v49 + 8), *((_DWORD *)v49 + 9), v52, v55, v54);
LABEL_51:
          v56 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
          if (os_log_type_enabled((os_log_t)v56, OS_LOG_TYPE_DEFAULT))
          {
            v57 = "Unknown";
            if (v43 <= 2)
              v57 = off_24F7959A0[v43];
            v58 = "unknown";
            if (i <= 4)
              v58 = off_24F7959B8[i];
            v59 = "unknown";
            if (v41 <= 2)
              v59 = off_24F7959E0[(int)v41];
            v60 = (char *)a2 + v42 * 56;
            v61 = a2->var0[0][0][v42].var1.count;
            v62 = a2->var0[0][0][v42].var1.total;
            v63 = 0.0;
            v64 = 0.0;
            if (v61)
              v64 = (float)v62 / (float)v61;
            v65 = *((_DWORD *)v60 + 12);
            v66 = *((_QWORD *)v60 + 5);
            if (v65)
              v63 = (float)v66 / (float)v65;
            v67 = *((_DWORD *)v60 + 2);
            v68 = *((_DWORD *)v60 + 3);
            v69 = *((_DWORD *)v60 + 8);
            v70 = *((_DWORD *)v60 + 9);
            *(_DWORD *)buf = 136318210;
            *(_QWORD *)v79 = v57;
            *(_WORD *)&v79[8] = 2080;
            *(_QWORD *)v80 = v58;
            *(_WORD *)&v80[8] = 2080;
            *(_QWORD *)v81 = v59;
            *(_WORD *)&v81[8] = 1024;
            *(_DWORD *)v82 = v67;
            *(_WORD *)&v82[4] = 1024;
            v83 = v68;
            v84 = 2048;
            v85 = v64;
            v86 = 2048;
            v87 = v62;
            v88 = 1024;
            v89 = v61;
            v90 = 1024;
            v91 = v69;
            v92 = 1024;
            v93 = v70;
            v94 = 2048;
            v95 = v63;
            v96 = 2048;
            v97 = v66;
            v98 = 1024;
            v99 = v65;
            _os_log_impl(&dword_22CD98000, (os_log_t)v56, OS_LOG_TYPE_DEFAULT, "%s, primitive=%s, indexType=%s, minVertices=%u, maxVertices=%u, avgVertices=%f, totalVertices=%llu, countVertices=%u, minInstances=%u, maxInstances=%u, avgInstances=%f, totalInstances=%llu, countInstances=%u", buf, 0x6Cu);
          }
        }
LABEL_63:
        ++v43;
        if (++v42 == 3)
          goto LABEL_64;
      }
      if (!v45)
        goto LABEL_73;
      if (v45 == 1)
      {
        v71 = "unknown";
        if (i <= 4)
          v71 = off_24F7959B8[i];
        v72 = "unknown";
        if (v41 <= 2)
          v72 = off_24F7959E0[(int)v41];
        printf("\n\n%s, primitive=%s, indexType=%s, count=%u", "DrawIndirect", v71, v72, var0);
LABEL_73:
        v73 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
        if (os_log_type_enabled((os_log_t)v73, OS_LOG_TYPE_DEFAULT))
        {
          v74 = "unknown";
          if (i <= 4)
            v74 = off_24F7959B8[i];
          v75 = "unknown";
          if (v41 <= 2)
            v75 = off_24F7959E0[(int)v41];
          v76 = a2->var0[0][0][2].var0;
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)v79 = "DrawIndirect";
          *(_WORD *)&v79[8] = 2080;
          *(_QWORD *)v80 = v74;
          *(_WORD *)&v80[8] = 2080;
          *(_QWORD *)v81 = v75;
          *(_WORD *)&v81[8] = 1024;
          *(_DWORD *)v82 = v76;
          _os_log_impl(&dword_22CD98000, (os_log_t)v73, OS_LOG_TYPE_DEFAULT, "%s, primitive=%s, indexType=%s, count=%u", buf, 0x26u);
        }
      }
LABEL_64:
      ++v41;
      a2 = (MTLTelemetryDrawDistributionRec *)((char *)a2 + 168);
    }
    while (v41 != 3);
    a2 = (MTLTelemetryDrawDistributionRec *)v77->var0[1];
  }
}

void emitAnisoClippedCounts(MTLTelemetryDevice *a1, MTLTelemetryAnisoClippedCountsRec *a2)
{
  uint64_t v3;
  _DWORD *v4;
  unsigned int *v5;
  unint64_t v6;
  const char *v7;
  OS_os_log *v8;
  const char *v9;
  unsigned int v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;

  v3 = 0;
  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (_DWORD *)MEMORY[0x24BDDDAC8];
  v5 = &a2->var0[1];
  do
  {
    v6 = v3 + 1;
    if (*v4)
    {
      if (*v4 != 1)
        goto LABEL_11;
      v7 = "unknown";
      if (v6 <= 3)
        v7 = off_24F7959F8[v3];
      printf("\n\nAnisoClippedUsage, type=%s, count=%u", v7, v5[v3]);
    }
    v8 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = "unknown";
      if (v6 <= 3)
        v9 = off_24F795A10[v3 + 1];
      v10 = v5[v3];
      *(_DWORD *)buf = 136315394;
      v12 = v9;
      v13 = 1024;
      v14 = v10;
      _os_log_impl(&dword_22CD98000, (os_log_t)v8, OS_LOG_TYPE_DEFAULT, "AnisoClippedUsage, type=%s, count=%u", buf, 0x12u);
    }
LABEL_11:
    ++v3;
  }
  while (v3 != 3);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::piecewise_construct_t const&,std::tuple<MTLPixelFormat&&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x44118uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  bzero(i + 3, 0x44100uLL);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CE5FFDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void emitEncoderDistribution(MTLTelemetryDevice *a1, MTLTelemetryEncoderDistributionRec *a2)
{
  unsigned int count;
  unint64_t total;
  double v6;
  double v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  double v12;
  double v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  double v18;
  OS_os_log *v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  double v28;
  double v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int max;
  unsigned int min;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  double v44;
  unsigned int v45;
  uint8_t buf[4];
  unsigned int v47;
  __int16 v48;
  unsigned int v49;
  __int16 v50;
  double v51;
  __int16 v52;
  unint64_t v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  double v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unsigned int v65;
  __int16 v66;
  unsigned int v67;
  __int16 v68;
  unsigned int v69;
  __int16 v70;
  double v71;
  __int16 v72;
  unint64_t v73;
  __int16 v74;
  unsigned int v75;
  __int16 v76;
  unsigned int v77;
  __int16 v78;
  unsigned int v79;
  __int16 v80;
  double v81;
  __int16 v82;
  unint64_t v83;
  __int16 v84;
  unsigned int v85;
  __int16 v86;
  unsigned int v87;
  __int16 v88;
  unsigned int v89;
  __int16 v90;
  double v91;
  __int16 v92;
  unint64_t v93;
  __int16 v94;
  unsigned int v95;
  __int16 v96;
  unsigned int v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  if (*MEMORY[0x24BDDDAC8])
  {
    if (*MEMORY[0x24BDDDAC8] != 1)
      return;
    count = a2->var0.count;
    total = a2->var0.total;
    v6 = 0.0;
    v7 = 0.0;
    if (count)
      v7 = (float)((float)total / (float)count);
    v8 = a2->var2.count;
    v9 = a2->var2.total;
    if (v8)
      v6 = (float)((float)v9 / (float)v8);
    v10 = a2->var1.count;
    v11 = a2->var1.total;
    v12 = 0.0;
    v13 = 0.0;
    if (v10)
      v13 = (float)((float)v11 / (float)v10);
    v14 = a2->var3.count;
    v15 = a2->var3.total;
    if (v14)
      v12 = (float)((float)v15 / (float)v14);
    v16 = a2->var4.count;
    v17 = a2->var4.total;
    if (v16)
      v18 = (float)((float)v17 / (float)v16);
    else
      v18 = 0.0;
    printf("\n\nCommandBuffer, minRenderEncoders=%u, maxRenderEncoders=%u, avgRenderEncoders=%f, totalRenderEncoders=%llu, countRenderEncoders=%u, minComputeEncoders=%u, maxComputeEncoders=%u, avgComputeEncoders=%f, totalComputeEncoders=%llu, countComputeEncoders=%u, minBlitEncoders=%u, maxBlitEncoders=%u, avgBlitEncoders=%f, totalBlitEncoders=%llu, countBlitEncoders=%u, minParallelEncoders=%u, maxParallelEncoders=%u, avgParallelEncoders=%f, totalParallelEncoders=%llu, countParallelEncoders=%u, minTotalEncoders=%u, maxTotalEncoders=%u, avgTotalEncoders=%f, totalTotalEncoders=%llu, countTotalEncoders=%u, maxTextureBindCount=%u", a2->var0.min, a2->var0.max, v7, total, count, a2->var2.min, a2->var2.max, v6, v9, v8, a2->var1.min,
      a2->var1.max,
      v13,
      v11,
      v10,
      a2->var3.min,
      a2->var3.max,
      v12,
      v15,
      v14,
      a2->var4.min,
      a2->var4.max,
      v18,
      v17,
      a2->var4.count,
      a1->textureBindCount->max);
  }
  v19 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
  if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_DEFAULT))
  {
    v20 = a2->var0.count;
    v21 = a2->var0.total;
    v22 = 0.0;
    v23 = 0.0;
    if (v20)
      v23 = (float)((float)v21 / (float)v20);
    v24 = a2->var2.count;
    v25 = a2->var2.total;
    if (v24)
      v22 = (float)((float)v25 / (float)v24);
    v26 = a2->var1.count;
    v27 = a2->var1.total;
    v28 = 0.0;
    v29 = 0.0;
    if (v26)
      v29 = (float)((float)v27 / (float)v26);
    v30 = a2->var3.count;
    v31 = a2->var3.total;
    if (v30)
      v28 = (float)((float)v31 / (float)v30);
    min = a2->var0.min;
    max = a2->var0.max;
    v35 = a2->var2.min;
    v34 = a2->var2.max;
    v37 = a2->var1.min;
    v36 = a2->var1.max;
    v39 = a2->var3.min;
    v38 = a2->var3.max;
    v41 = a2->var4.min;
    v40 = a2->var4.max;
    v42 = a2->var4.count;
    v43 = a2->var4.total;
    if (v42)
      v44 = (float)((float)v43 / (float)v42);
    else
      v44 = 0.0;
    v45 = a1->textureBindCount->max;
    *(_DWORD *)buf = 67115520;
    v47 = min;
    v48 = 1024;
    v49 = max;
    v50 = 2048;
    v51 = v23;
    v52 = 2048;
    v53 = v21;
    v54 = 1024;
    v55 = v20;
    v56 = 1024;
    v57 = v35;
    v58 = 1024;
    v59 = v34;
    v60 = 2048;
    v61 = v22;
    v62 = 2048;
    v63 = v25;
    v64 = 1024;
    v65 = v24;
    v66 = 1024;
    v67 = v37;
    v68 = 1024;
    v69 = v36;
    v70 = 2048;
    v71 = v29;
    v72 = 2048;
    v73 = v27;
    v74 = 1024;
    v75 = v26;
    v76 = 1024;
    v77 = v39;
    v78 = 1024;
    v79 = v38;
    v80 = 2048;
    v81 = v28;
    v82 = 2048;
    v83 = v31;
    v84 = 1024;
    v85 = v30;
    v86 = 1024;
    v87 = v41;
    v88 = 1024;
    v89 = v40;
    v90 = 2048;
    v91 = v44;
    v92 = 2048;
    v93 = v43;
    v94 = 1024;
    v95 = v42;
    v96 = 1024;
    v97 = v45;
    _os_log_impl(&dword_22CD98000, (os_log_t)v19, OS_LOG_TYPE_DEFAULT, "CommandBuffer, minRenderEncoders=%u, maxRenderEncoders=%u, avgRenderEncoders=%f, totalRenderEncoders=%llu, countRenderEncoders=%u, minComputeEncoders=%u, maxComputeEncoders=%u, avgComputeEncoders=%f, totalComputeEncoders=%llu, countComputeEncoders=%u, minBlitEncoders=%u, maxBlitEncoders=%u, avgBlitEncoders=%f, totalBlitEncoders=%llu, countBlitEncoders=%u, minParallelEncoders=%u, maxParallelEncoders=%u, avgParallelEncoders=%f, totalParallelEncoders=%llu, countParallelEncoders=%u, minTotalEncoders=%u, maxTotalEncoders=%u, avgTotalEncoders=%f, totalTotalEncoders=%llu, countTotalEncoders=%u, maxTextureBindCount=%u", buf, 0xC6u);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryRenderTargetDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::piecewise_construct_t const&,std::tuple<MTLPixelFormat const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x44118uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  bzero(i + 3, 0x44100uLL);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CE62EF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::__unordered_map_hasher<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::hash<unsigned long long>,std::equal_to<MTLPixelFormat>,true>,std::__unordered_map_equal<MTLPixelFormat,std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>,std::equal_to<MTLPixelFormat>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<MTLPixelFormat,MTLTelemetryBlitDistribution>>>::__emplace_unique_key_args<MTLPixelFormat,std::piecewise_construct_t const&,std::tuple<MTLPixelFormat const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x1608uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  bzero(i + 3, 0x15F0uLL);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CE6311C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t validateMTLSamplerDescriptor(void *a1, void *a2)
{
  uint64_t v4;
  unint64_t v5;
  _BOOL4 v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Name;
  uint64_t v20;
  uint64_t v21;

  if (objc_msgSend(a2, "compareFunction"))
    MTLValidateFeatureSupport();
  _MTLMessageContextBegin_();
  if ((objc_msgSend(a2, "normalizedCoordinates") & 1) == 0)
  {
    if (objc_msgSend(a2, "mipFilter"))
      _MTLMessageContextPush_();
    if (objc_msgSend(a2, "sAddressMode")
      && objc_msgSend(a2, "sAddressMode") != 4
      && objc_msgSend(a2, "sAddressMode") != 5
      && objc_msgSend(a2, "sAddressMode") != 6
      || objc_msgSend(a2, "tAddressMode")
      && objc_msgSend(a2, "tAddressMode") != 4
      && objc_msgSend(a2, "tAddressMode") != 5
      && objc_msgSend(a2, "sAddressMode") != 6
      || objc_msgSend(a2, "rAddressMode")
      && objc_msgSend(a2, "rAddressMode") != 4
      && objc_msgSend(a2, "rAddressMode") != 5
      && objc_msgSend(a2, "sAddressMode") != 6)
    {
      _MTLMessageContextPush_();
    }
    if (objc_msgSend(a2, "maxAnisotropy") != 1)
      _MTLMessageContextPush_();
    if (objc_msgSend(a2, "minFilter") && objc_msgSend(a2, "minFilter") != 1
      || (v4 = objc_msgSend(a2, "minFilter"), v4 != objc_msgSend(a2, "magFilter")))
    {
      _MTLMessageContextPush_();
    }
  }
  if (objc_msgSend(a2, "minFilter") >= 3)
  {
    v11 = objc_msgSend(a2, "minFilter");
    _MTLMessageContextPush_();
  }
  if (objc_msgSend(a2, "magFilter", v11) >= 3)
  {
    v12 = objc_msgSend(a2, "magFilter");
    _MTLMessageContextPush_();
  }
  if ((unint64_t)objc_msgSend(a2, "mipFilter", v12) >= 3)
  {
    v13 = objc_msgSend(a2, "mipFilter");
    _MTLMessageContextPush_();
  }
  if (!objc_msgSend(a2, "maxAnisotropy", v13) || (unint64_t)objc_msgSend(a2, "maxAnisotropy") >= 0x11)
  {
    v21 = 16;
    v14 = objc_msgSend(a2, "maxAnisotropy");
    v20 = 1;
    _MTLMessageContextPush_();
  }
  v5 = objc_msgSend(a2, "sAddressMode", v14, v20, v21);
  if (v5 >= 7)
  {
    v15 = objc_msgSend(a2, "sAddressMode");
    _MTLMessageContextPush_();
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v6 = (v5 & 0x7F) == 4;
    v7 = (0x60u >> v5) & 1;
  }
  v8 = objc_msgSend(a2, "tAddressMode", v15);
  if (v8 >= 4)
  {
    if (v8 - 5 >= 2)
    {
      if (v8 == 4)
      {
        v6 = 1;
      }
      else
      {
        v16 = objc_msgSend(a2, "tAddressMode");
        _MTLMessageContextPush_();
      }
    }
    else
    {
      v7 = 1;
    }
  }
  v9 = objc_msgSend(a2, "rAddressMode", v16);
  if (v9 < 4)
  {
LABEL_47:
    if (!v6)
      goto LABEL_51;
    goto LABEL_48;
  }
  if (v9 - 5 < 2)
  {
    v7 = 1;
    if (!v6)
      goto LABEL_51;
    goto LABEL_48;
  }
  if (v9 == 4)
  {
    v6 = 1;
    goto LABEL_47;
  }
  v17 = objc_msgSend(a2, "rAddressMode");
  _MTLMessageContextPush_();
  if (!v6)
    goto LABEL_51;
LABEL_48:
  if (v7 && objc_msgSend(a2, "borderColor"))
    _MTLMessageContextPush_();
LABEL_51:
  if (objc_msgSend(a2, "minFilter", v17) == 2 || objc_msgSend(a2, "magFilter") == 2)
  {
    if (objc_msgSend(a2, "sAddressMode") == 3)
      _MTLMessageContextPush_();
    if (objc_msgSend(a2, "tAddressMode") == 3)
      _MTLMessageContextPush_();
    if (objc_msgSend(a2, "rAddressMode") == 3)
      _MTLMessageContextPush_();
    if (objc_msgSend(a2, "compareFunction"))
    {
      v18 = objc_msgSend(a2, "compareFunction");
      _MTLMessageContextPush_();
    }
  }
  if (objc_msgSend(a2, "supportArgumentBuffers", v18) && objc_msgSend(a2, "pixelFormat"))
  {
    objc_msgSend(a2, "pixelFormat");
    Name = MTLPixelFormatGetName();
    _MTLMessageContextPush_();
  }
  if ((objc_msgSend(a2, "sAddressMode", Name) == 1
     || objc_msgSend(a2, "rAddressMode") == 1
     || objc_msgSend(a2, "tAddressMode") == 1)
    && (objc_msgSend(a1, "supportsMirrorClampToEdgeSamplerMode") & 1) == 0)
  {
    _MTLMessageContextPush_();
  }
  if ((objc_msgSend(a2, "sAddressMode") == 6
     || objc_msgSend(a2, "rAddressMode") == 6
     || objc_msgSend(a2, "tAddressMode") == 6)
    && (objc_msgSend(a1, "supportsSamplerAddressModeClampToHalfBorder") & 1) == 0)
  {
    _MTLMessageContextPush_();
    if (!v7)
      return _MTLMessageContextEnd();
  }
  else if (!v7)
  {
    return _MTLMessageContextEnd();
  }
  if (objc_msgSend(a2, "borderColorSPI") == 3 && (objc_msgSend(a1, "supportsCustomBorderColor") & 1) == 0)
    _MTLMessageContextPush_();
  if ((objc_msgSend(a2, "borderColor") == 2 || objc_msgSend(a2, "borderColor") == 1 || !objc_msgSend(a2, "borderColor"))
    && (objc_msgSend(a1, "supportsBlackOrWhiteSamplerBorderColors") & 1) == 0)
  {
    objc_msgSend(a2, "borderColor");
    MTLSamplerBorderColorString();
    _MTLMessageContextPush_();
  }
  return _MTLMessageContextEnd();
}

__n128 MTLSamplerDescriptorHashMap::extractBits@<Q0>(MTLSamplerDescriptorHashMap *this@<X0>, __n128 *a2@<X8>)
{
  __n128 *v4;
  __n128 result;

  v4 = (__n128 *)-[MTLSamplerDescriptorHashMap descriptorPrivate](this, "descriptorPrivate");
  result = *v4;
  *a2 = *v4;
  a2[1].n128_u64[0] = v4[1].n128_u64[0];
  return result;
}

void MTLSamplerDescriptorHashMap::MTLSamplerDescriptorHashMap(MTLSamplerDescriptorHashMap *this)
{
  this->_map.__table_.__bucket_list_ = 0u;
  *(_OWORD *)&this->_map.__table_.__p1_.__value_.__next_ = 0u;
  this->_map.__table_.__p3_.__value_ = 1.0;
  this->_limit = 0;
}

unint64_t MTLSamplerDescriptorHashMap::setLimitForDevice(MTLSamplerDescriptorHashMap *this, MTLDebugDevice *a2)
{
  unint64_t result;

  result = -[MTLToolsDevice maxIndirectSamplersPerDevice](a2, "maxIndirectSamplersPerDevice");
  this->_limit = result;
  return result;
}

_QWORD *MTLSamplerDescriptorHashMap::add(MTLSamplerDescriptorHashMap *this, MTLSamplerDescriptor *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  char v6;
  __int128 v7;
  uint64_t v8;
  int v9;

  v3 = -[MTLSamplerDescriptor descriptorPrivate](a2, "descriptorPrivate");
  v4 = *(_QWORD *)(v3 + 16);
  v7 = *(_OWORD *)v3;
  v8 = v4;
  v9 = 0;
  result = std::__hash_table<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,std::__unordered_map_hasher<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::hash_t,MTLSamplerDescriptorHashMap::equal_t,true>,std::__unordered_map_equal<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::equal_t,MTLSamplerDescriptorHashMap::hash_t,true>,std::allocator<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>>>::__emplace_unique_key_args<std::array<unsigned long long,3ul>,std::pair<std::array<unsigned long long,3ul> const,unsigned int> const&>((uint64_t)this, &v7, &v7);
  if (!v6)
    ++*((_DWORD *)result + 10);
  if (this->_map.__table_.__p2_.__value_ > this->_limit)
    return (_QWORD *)MTLReportFailure();
  return result;
}

_QWORD *MTLSamplerDescriptorHashMap::remove(MTLSamplerDescriptorHashMap *this, MTLSamplerDescriptor *a2)
{
  uint64_t v3;
  _QWORD *result;
  int v5;
  __int128 v6;
  uint64_t v7;

  v3 = -[MTLSamplerDescriptor descriptorPrivate](a2, "descriptorPrivate");
  v6 = *(_OWORD *)v3;
  v7 = *(_QWORD *)(v3 + 16);
  result = std::__hash_table<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,std::__unordered_map_hasher<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::hash_t,MTLSamplerDescriptorHashMap::equal_t,true>,std::__unordered_map_equal<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::equal_t,MTLSamplerDescriptorHashMap::hash_t,true>,std::allocator<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>>>::find<std::array<unsigned long long,3ul>>(this, &v6);
  v5 = *((_DWORD *)result + 10);
  if (!v5)
    return (_QWORD *)std::__hash_table<MTLToolsObject *,std::hash<MTLToolsObject *>,std::equal_to<MTLToolsObject *>,std::allocator<MTLToolsObject *>>::erase(this, result);
  *((_DWORD *)result + 10) = v5 - 1;
  return result;
}

uint64_t MTLSamplerDescriptorHashMap::hash_t::operator()(uint64_t a1, _QWORD *a2)
{
  return a2[2] ^ a2[1] ^ *a2;
}

uint64_t MTLSamplerDescriptorHashMap::equal_t::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  char v3;

  if (*a2 == *a3 && a2[1] == a3[1])
  {
    if (a2[2] == a3[2])
      v3 = -1;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,std::__unordered_map_hasher<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::hash_t,MTLSamplerDescriptorHashMap::equal_t,true>,std::__unordered_map_equal<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::equal_t,MTLSamplerDescriptorHashMap::hash_t,true>,std::allocator<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>>>::__emplace_unique_key_args<std::array<unsigned long long,3ul>,std::pair<std::array<unsigned long long,3ul> const,unsigned int> const&>(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  __int128 v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = a2[1];
  v7 = a2[2];
  v8 = v6 ^ v7 ^ *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v6 ^ v7 ^ *a2;
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == v6 && i[4] == v7)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v8;
  v14 = a3[1];
  *((_OWORD *)i + 1) = *a3;
  *((_OWORD *)i + 2) = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *i = *v22;
LABEL_40:
    *v22 = i;
    goto LABEL_41;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CE65CF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,std::__unordered_map_hasher<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::hash_t,MTLSamplerDescriptorHashMap::equal_t,true>,std::__unordered_map_equal<std::array<unsigned long long,3ul>,std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>,MTLSamplerDescriptorHashMap::equal_t,MTLSamplerDescriptorHashMap::hash_t,true>,std::allocator<std::__hash_value_type<std::array<unsigned long long,3ul>,unsigned int>>>::find<std::array<unsigned long long,3ul>>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2[1];
  v4 = a2[2];
  v5 = v3 ^ v4 ^ *a2;
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v3 ^ v4 ^ *a2;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v5;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2 && result[3] == v3 && result[4] == v4)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t MTLLegacySVReadReportBuffer(void *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  MTLLegacySVBufferErrorLog *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  MTLLegacySVTextureErrorLog *v24;
  MTLLegacySVStackOverflowErrorLog *v25;
  MTLLegacySVTrapErrorLog *v26;
  MTLLegacySVAccelerationStructureErrorLog *v27;
  uint64_t v29;
  void *v31;
  void *v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _QWORD v38[2];
  id v39;
  id v40;
  uint64_t v41;
  _BYTE v42[128];
  _QWORD v43[3];

  v43[1] = *MEMORY[0x24BDAC8D0];
  v31 = (void *)objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithArray:", objc_msgSend((id)objc_msgSend(a1, "baseObject"), "logs"));
  v32 = a1;
  v4 = objc_msgSend(a1, "device");
  v5 = 0;
  v6 = v4 + 264;
  v43[0] = 0x100000000;
  v29 = v4 + 88;
  do
  {
    v7 = *((unsigned int *)v43 + v5);
    if (((*a2 >> v7) & 1) != 0)
    {
      v8 = objc_alloc_init(MTLLegacySVBufferErrorLog);
      v9 = (int *)&a2[32 * v7];
      resolvedSharedPacketData<GPUDebugBadAccessPacket>::resolvedSharedPacketData(v38, (_QWORD *)v9 + 1, a3, v32, v8);
      v10 = *((unsigned __int16 *)v9 + 24);
      v11 = *((_QWORD *)v9 + 3);
      -[MTLLegacySVBufferErrorLog setOperation:](v8, "setOperation:", *((unsigned __int16 *)v9 + 25));
      v12 = *(_QWORD *)(v6 + 20);
      if ((v12 & 0x800000) != 0)
      {
        if ((_DWORD)v7)
          LODWORD(v13) = 0;
        else
          v13 = (v12 >> 27) & 1;
      }
      else
      {
        LODWORD(v13) = 1;
      }
      if ((_DWORD)v7)
        v14 = 3;
      else
        v14 = 1;
      -[MTLLegacySVBufferErrorLog setAddressSpace:](v8, "setAddressSpace:", v14);
      if (!(_DWORD)v7 && (*(_BYTE *)(v6 + 22) & 0x80) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v29 + 296) + ((v11 >> 37) & 0x7FFFFF8));
        v11 &= 0xFFFFFFFFFFuLL;
      }
      else
      {
        v15 = 0;
      }
      -[MTLLegacySVBufferErrorLog setBuffer:](v8, "setBuffer:", v15);
      -[MTLLegacySVBufferErrorLog setOffset:](v8, "setOffset:", v11);
      if (-[MTLLegacySVBufferErrorLog buffer](v8, "buffer") && v41 && (*(_QWORD *)(v6 + 20) & 0x200000001) != 0)
      {
        v16 = -[MTLLegacySVBufferErrorLog buffer](v8, "buffer");
        -[MTLLegacySVBufferErrorLog setSpecifiedUsage:](v8, "setSpecifiedUsage:", objc_msgSend(v32, "resourceUsageForBuffer:stage:", v16, v41));
      }
      if ((_DWORD)v13
        && (v17 = (_DWORD)v7 != 0,
            v36 = 0u,
            v37 = 0u,
            v34 = 0u,
            v35 = 0u,
            v18 = v40,
            (v19 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v34, v42, 16)) != 0))
      {
        v20 = *(_QWORD *)v35;
LABEL_21:
        v21 = 0;
        while (1)
        {
          if (*(_QWORD *)v35 != v20)
            objc_enumerationMutation(v18);
          v22 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * v21);
          if (objc_msgSend(v22, "type") == v17 && objc_msgSend(v22, "index") == v10)
            break;
          if (v19 == ++v21)
          {
            v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v34, v42, 16);
            v22 = 0;
            if (v19)
              goto LABEL_21;
            break;
          }
        }
      }
      else
      {
        v22 = 0;
      }
      -[MTLLegacySVBufferErrorLog setArgument:](v8, "setArgument:", v22);
      objc_msgSend(v31, "addObject:", v8);

      resolvedSharedPacketData<GPUDebugBadAccessPacket>::~resolvedSharedPacketData((uint64_t)v38);
    }
    ++v5;
  }
  while (v5 != 2);
  v23 = *a2;
  if ((*a2 & 4) != 0)
  {
    v24 = objc_alloc_init(MTLLegacySVTextureErrorLog);
    resolvedSharedPacketData<GPUDebugBadTexturePacket>::resolvedSharedPacketData(v38, (_QWORD *)a2 + 33, a3, v32, v24);
    -[MTLLegacySVTextureErrorLog setErrorReason:](v24, "setErrorReason:", *((unsigned __int8 *)a2 + 300));
    objc_msgSend(v31, "addObject:", v24);

    resolvedSharedPacketData<GPUDebugBadTexturePacket>::~resolvedSharedPacketData((uint64_t)v38);
    v23 = *a2;
  }
  if ((v23 & 0x10) != 0)
  {
    v25 = objc_alloc_init(MTLLegacySVStackOverflowErrorLog);
    resolvedSharedPacketData<GPUDebugStackPacket>::resolvedSharedPacketData(v38, (_QWORD *)a2 + 62, a3, v32, v25);
    -[MTLLegacySVStackOverflowErrorLog setFunctionName:](v25, "setFunctionName:", objc_msgSend(v39, "stringForID:", a2[131]));
    objc_msgSend(v31, "addObject:", v25);

    resolvedSharedPacketData<GPUDebugStackPacket>::~resolvedSharedPacketData((uint64_t)v38);
    v23 = *a2;
  }
  if ((v23 & 8) != 0)
  {
    v26 = objc_alloc_init(MTLLegacySVTrapErrorLog);
    resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::resolvedSharedPacketData(v38, (_QWORD *)a2 + 48, a3, v32, v26);
    -[MTLLegacySVTrapErrorLog setFunctionName:](v26, "setFunctionName:", objc_msgSend(v39, "stringForID:", a2[103]));
    objc_msgSend(v31, "addObject:", v26);

    resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::~resolvedSharedPacketData((uint64_t)v38);
    v23 = *a2;
  }
  if ((v23 & 0x20) != 0)
  {
    v27 = objc_alloc_init(MTLLegacySVAccelerationStructureErrorLog);
    resolvedSharedPacketData<GPUDebugAccelerationStructurePacket>::resolvedSharedPacketData(v38, (_QWORD *)a2 + 76, a3, v32, v27);
    -[MTLLegacySVAccelerationStructureErrorLog setFunctionName:](v27, "setFunctionName:", objc_msgSend(v39, "stringForID:", a2[159]));
    -[MTLLegacySVAccelerationStructureErrorLog setExpectedAccelerationStructureType:](v27, "setExpectedAccelerationStructureType:", *((_QWORD *)a2 + 80));
    -[MTLLegacySVAccelerationStructureErrorLog setActualAccelerationStructureType:](v27, "setActualAccelerationStructureType:", *((_QWORD *)a2 + 81));
    objc_msgSend(v31, "addObject:", v27);

    resolvedSharedPacketData<GPUDebugAccelerationStructurePacket>::~resolvedSharedPacketData((uint64_t)v38);
  }
  return objc_msgSend((id)objc_msgSend(v32, "baseObject"), "setLogs:", v31);
}

void sub_22CE66280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  resolvedSharedPacketData<GPUDebugBadTexturePacket>::~resolvedSharedPacketData((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *resolvedSharedPacketData<GPUDebugBadAccessPacket>::resolvedSharedPacketData(_QWORD *a1, _QWORD *a2, uint64_t a3, void *a4, void *a5)
{
  void **v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  id *v34;
  id *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  id *v50;
  id *v51;
  uint64_t v52;
  id v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id **v61;

  *(_OWORD *)(a1 + 7) = 0u;
  v10 = (void **)(a1 + 7);
  v61 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 6);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)((char *)a2 + 28));
  v11 = (void *)a2[1];
  *a1 = v11;
  a1[2] = objc_msgSend(v11, "debugInstrumentationData");
  switch(a3)
  {
    case 1:
      v14 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      v13 = objc_msgSend(v14, "label");
      goto LABEL_5;
    case 2:
    case 3:
      v12 = (id)*a2;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        v13 = objc_msgSend(v12, "label");
LABEL_5:
        v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_14;
        v18 = (id)*a2;
        if (objc_msgSend((id)*a2, "tileFunctionData"))
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          v19 = (void *)objc_msgSend(v18, "tileFunctionData");
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          v19 = (void *)objc_msgSend(v18, "fragmentFunctionData");
        }
        a1[1] = objc_msgSend(v19, "function");
        v13 = objc_msgSend(v18, "label");
        v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      v20 = (void *)a1[1];
      v21 = a1[3];
      if (v20)
      {
        if (v21)
          v22 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline(function): \"%@(%@)\""), v21, objc_msgSend(v20, "name"));
        else
          v22 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("function: \"%@\""), objc_msgSend(v20, "name"));
        v21 = v22;
        a1[3] = v22;
      }
      if (!v21)
        a1[3] = objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithFormat:", CFSTR("packet pipelineID: \"%llX\""), *a2);
      v23 = objc_msgSend((id)a1[2], "debugLocationForID:", *((unsigned int *)a1 + 11));
      *v10 = (void *)v23;
      if (v23)
      {
        v24 = a1[10];
        v25 = (uint64_t *)a1[9];
        if ((unint64_t)v25 >= v24)
        {
          v27 = ((char *)v25 - (char *)*v61) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v28 = v24 - (_QWORD)*v61;
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v30);
            v23 = (uint64_t)*v10;
          }
          else
          {
            v31 = 0;
          }
          v32 = (uint64_t *)&v31[8 * v27];
          v33 = &v31[8 * v30];
          *v32 = v23;
          v26 = v32 + 1;
          v35 = (id *)a1[8];
          v34 = (id *)a1[9];
          if (v34 != v35)
          {
            do
            {
              v36 = (uint64_t)*--v34;
              *--v32 = v36;
            }
            while (v34 != v35);
            v34 = *v61;
          }
          a1[8] = v32;
          a1[9] = v26;
          a1[10] = v33;
          if (v34)
            operator delete(v34);
        }
        else
        {
          *v25 = v23;
          v26 = v25 + 1;
        }
        a1[9] = v26;
      }
      if (objc_msgSend((id)*a1, "imageType") == 1)
        goto LABEL_61;
      v37 = 0;
      break;
    case 7:
      v16 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      v13 = objc_msgSend(v16, "label");
      v15 = 16;
      goto LABEL_13;
    case 8:
      v17 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      v13 = objc_msgSend(v17, "label");
      v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    v38 = *((_DWORD *)a2 + v37 + 11);
    if (v38 != -1)
    {
      if (v38 == 0x7FFFFFFF)
        break;
      v39 = objc_msgSend((id)a1[2], "debugLocationForID:");
      v40 = v39;
      v42 = (uint64_t *)a1[9];
      v41 = a1[10];
      if ((unint64_t)v42 >= v41)
      {
        v44 = ((char *)v42 - (char *)*v61) >> 3;
        if ((unint64_t)(v44 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v45 = v41 - (_QWORD)*v61;
        v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1))
          v46 = v44 + 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        if (v47)
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v47);
        else
          v48 = 0;
        v49 = (uint64_t *)&v48[8 * v44];
        *v49 = v40;
        v43 = v49 + 1;
        v51 = (id *)a1[8];
        v50 = (id *)a1[9];
        if (v50 != v51)
        {
          do
          {
            v52 = (uint64_t)*--v50;
            *--v49 = v52;
          }
          while (v50 != v51);
          v50 = *v61;
        }
        a1[8] = v49;
        a1[9] = v43;
        a1[10] = &v48[8 * v47];
        if (v50)
          operator delete(v50);
      }
      else
      {
        *v42 = v39;
        v43 = v42 + 1;
      }
      a1[9] = v43;
    }
    ++v37;
  }
  while (v37 != 20);
LABEL_61:
  v53 = (id)a1[3];
  objc_msgSend(a5, "setImage:", *a1);
  objc_msgSend(a5, "setCallIndex:", *((unsigned int *)a1 + 12));
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  v54 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  v55 = newRuntimeStackTrace(v61);
  v56 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  v57 = v54;
  if (v56 == 1)
  {
    v58 = objc_msgSend(a4, "device", v54);
    v57 = v55;
    if ((*(_BYTE *)(v58 + 285) & 2) == 0)
      v57 = v54;
  }
  objc_msgSend(a5, "setErrorStackTrace:", v57);
  if (v54)
    v59 = objc_msgSend(v54, "objectAtIndexedSubscript:", 0);
  else
    v59 = 0;
  objc_msgSend(a5, "setDebugLocation:", v59);

  objc_msgSend(a5, "setFunction:", a1[1]);
  objc_msgSend(a5, "setType:", 0);
  objc_msgSend(a5, "setPipelineIdentifier:", a1[3]);
  return a1;
}

void sub_22CE67214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  void *v14;

  v14 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *resolvedSharedPacketData<GPUDebugBadTexturePacket>::resolvedSharedPacketData(_QWORD *a1, _QWORD *a2, uint64_t a3, void *a4, void *a5)
{
  void **v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  id *v34;
  id *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  id *v50;
  id *v51;
  uint64_t v52;
  id v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id **v61;

  *(_OWORD *)(a1 + 7) = 0u;
  v10 = (void **)(a1 + 7);
  v61 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 4);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)((char *)a2 + 20));
  v11 = (void *)a2[1];
  *a1 = v11;
  a1[2] = objc_msgSend(v11, "debugInstrumentationData");
  switch(a3)
  {
    case 1:
      v14 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      v13 = objc_msgSend(v14, "label");
      goto LABEL_5;
    case 2:
    case 3:
      v12 = (id)*a2;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        v13 = objc_msgSend(v12, "label");
LABEL_5:
        v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_14;
        v18 = (id)*a2;
        if (objc_msgSend((id)*a2, "tileFunctionData"))
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          v19 = (void *)objc_msgSend(v18, "tileFunctionData");
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          v19 = (void *)objc_msgSend(v18, "fragmentFunctionData");
        }
        a1[1] = objc_msgSend(v19, "function");
        v13 = objc_msgSend(v18, "label");
        v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      v20 = (void *)a1[1];
      v21 = a1[3];
      if (v20)
      {
        if (v21)
          v22 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline(function): \"%@(%@)\""), v21, objc_msgSend(v20, "name"));
        else
          v22 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("function: \"%@\""), objc_msgSend(v20, "name"));
        v21 = v22;
        a1[3] = v22;
      }
      if (!v21)
        a1[3] = objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithFormat:", CFSTR("packet pipelineID: \"%llX\""), *a2);
      v23 = objc_msgSend((id)a1[2], "debugLocationForID:", *((unsigned int *)a1 + 11));
      *v10 = (void *)v23;
      if (v23)
      {
        v24 = a1[10];
        v25 = (uint64_t *)a1[9];
        if ((unint64_t)v25 >= v24)
        {
          v27 = ((char *)v25 - (char *)*v61) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v28 = v24 - (_QWORD)*v61;
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v30);
            v23 = (uint64_t)*v10;
          }
          else
          {
            v31 = 0;
          }
          v32 = (uint64_t *)&v31[8 * v27];
          v33 = &v31[8 * v30];
          *v32 = v23;
          v26 = v32 + 1;
          v35 = (id *)a1[8];
          v34 = (id *)a1[9];
          if (v34 != v35)
          {
            do
            {
              v36 = (uint64_t)*--v34;
              *--v32 = v36;
            }
            while (v34 != v35);
            v34 = *v61;
          }
          a1[8] = v32;
          a1[9] = v26;
          a1[10] = v33;
          if (v34)
            operator delete(v34);
        }
        else
        {
          *v25 = v23;
          v26 = v25 + 1;
        }
        a1[9] = v26;
      }
      if (objc_msgSend((id)*a1, "imageType") == 1)
        goto LABEL_61;
      v37 = 0;
      break;
    case 7:
      v16 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      v13 = objc_msgSend(v16, "label");
      v15 = 16;
      goto LABEL_13;
    case 8:
      v17 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      v13 = objc_msgSend(v17, "label");
      v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    v38 = *((_DWORD *)a2 + v37 + 10);
    if (v38 != -1)
    {
      if (v38 == 0x7FFFFFFF)
        break;
      v39 = objc_msgSend((id)a1[2], "debugLocationForID:");
      v40 = v39;
      v42 = (uint64_t *)a1[9];
      v41 = a1[10];
      if ((unint64_t)v42 >= v41)
      {
        v44 = ((char *)v42 - (char *)*v61) >> 3;
        if ((unint64_t)(v44 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v45 = v41 - (_QWORD)*v61;
        v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1))
          v46 = v44 + 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        if (v47)
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v47);
        else
          v48 = 0;
        v49 = (uint64_t *)&v48[8 * v44];
        *v49 = v40;
        v43 = v49 + 1;
        v51 = (id *)a1[8];
        v50 = (id *)a1[9];
        if (v50 != v51)
        {
          do
          {
            v52 = (uint64_t)*--v50;
            *--v49 = v52;
          }
          while (v50 != v51);
          v50 = *v61;
        }
        a1[8] = v49;
        a1[9] = v43;
        a1[10] = &v48[8 * v47];
        if (v50)
          operator delete(v50);
      }
      else
      {
        *v42 = v39;
        v43 = v42 + 1;
      }
      a1[9] = v43;
    }
    ++v37;
  }
  while (v37 != 20);
LABEL_61:
  v53 = (id)a1[3];
  objc_msgSend(a5, "setImage:", *a1);
  objc_msgSend(a5, "setCallIndex:", *((unsigned int *)a1 + 12));
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  v54 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  v55 = newRuntimeStackTrace(v61);
  v56 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  v57 = v54;
  if (v56 == 1)
  {
    v58 = objc_msgSend(a4, "device", v54);
    v57 = v55;
    if ((*(_BYTE *)(v58 + 285) & 2) == 0)
      v57 = v54;
  }
  objc_msgSend(a5, "setErrorStackTrace:", v57);
  if (v54)
    v59 = objc_msgSend(v54, "objectAtIndexedSubscript:", 0);
  else
    v59 = 0;
  objc_msgSend(a5, "setDebugLocation:", v59);

  objc_msgSend(a5, "setFunction:", a1[1]);
  objc_msgSend(a5, "setType:", 0);
  objc_msgSend(a5, "setPipelineIdentifier:", a1[3]);
  return a1;
}

void sub_22CE677D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  void *v14;

  v14 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *resolvedSharedPacketData<GPUDebugStackPacket>::resolvedSharedPacketData(_QWORD *a1, _QWORD *a2, uint64_t a3, void *a4, void *a5)
{
  void **v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  id *v34;
  id *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  id *v50;
  id *v51;
  uint64_t v52;
  id v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id **v61;

  *(_OWORD *)(a1 + 7) = 0u;
  v10 = (void **)(a1 + 7);
  v61 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 4);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)((char *)a2 + 20));
  v11 = (void *)a2[1];
  *a1 = v11;
  a1[2] = objc_msgSend(v11, "debugInstrumentationData");
  switch(a3)
  {
    case 1:
      v14 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      v13 = objc_msgSend(v14, "label");
      goto LABEL_5;
    case 2:
    case 3:
      v12 = (id)*a2;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        v13 = objc_msgSend(v12, "label");
LABEL_5:
        v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_14;
        v18 = (id)*a2;
        if (objc_msgSend((id)*a2, "tileFunctionData"))
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          v19 = (void *)objc_msgSend(v18, "tileFunctionData");
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          v19 = (void *)objc_msgSend(v18, "fragmentFunctionData");
        }
        a1[1] = objc_msgSend(v19, "function");
        v13 = objc_msgSend(v18, "label");
        v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      v20 = (void *)a1[1];
      v21 = a1[3];
      if (v20)
      {
        if (v21)
          v22 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline(function): \"%@(%@)\""), v21, objc_msgSend(v20, "name"));
        else
          v22 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("function: \"%@\""), objc_msgSend(v20, "name"));
        v21 = v22;
        a1[3] = v22;
      }
      if (!v21)
        a1[3] = objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithFormat:", CFSTR("packet pipelineID: \"%llX\""), *a2);
      v23 = objc_msgSend((id)a1[2], "debugLocationForID:", *((unsigned int *)a1 + 11));
      *v10 = (void *)v23;
      if (v23)
      {
        v24 = a1[10];
        v25 = (uint64_t *)a1[9];
        if ((unint64_t)v25 >= v24)
        {
          v27 = ((char *)v25 - (char *)*v61) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v28 = v24 - (_QWORD)*v61;
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v30);
            v23 = (uint64_t)*v10;
          }
          else
          {
            v31 = 0;
          }
          v32 = (uint64_t *)&v31[8 * v27];
          v33 = &v31[8 * v30];
          *v32 = v23;
          v26 = v32 + 1;
          v35 = (id *)a1[8];
          v34 = (id *)a1[9];
          if (v34 != v35)
          {
            do
            {
              v36 = (uint64_t)*--v34;
              *--v32 = v36;
            }
            while (v34 != v35);
            v34 = *v61;
          }
          a1[8] = v32;
          a1[9] = v26;
          a1[10] = v33;
          if (v34)
            operator delete(v34);
        }
        else
        {
          *v25 = v23;
          v26 = v25 + 1;
        }
        a1[9] = v26;
      }
      if (objc_msgSend((id)*a1, "imageType") == 1)
        goto LABEL_61;
      v37 = 0;
      break;
    case 7:
      v16 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      v13 = objc_msgSend(v16, "label");
      v15 = 16;
      goto LABEL_13;
    case 8:
      v17 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      v13 = objc_msgSend(v17, "label");
      v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    v38 = *((_DWORD *)a2 + v37 + 8);
    if (v38 != -1)
    {
      if (v38 == 0x7FFFFFFF)
        break;
      v39 = objc_msgSend((id)a1[2], "debugLocationForID:");
      v40 = v39;
      v42 = (uint64_t *)a1[9];
      v41 = a1[10];
      if ((unint64_t)v42 >= v41)
      {
        v44 = ((char *)v42 - (char *)*v61) >> 3;
        if ((unint64_t)(v44 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v45 = v41 - (_QWORD)*v61;
        v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1))
          v46 = v44 + 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        if (v47)
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v47);
        else
          v48 = 0;
        v49 = (uint64_t *)&v48[8 * v44];
        *v49 = v40;
        v43 = v49 + 1;
        v51 = (id *)a1[8];
        v50 = (id *)a1[9];
        if (v50 != v51)
        {
          do
          {
            v52 = (uint64_t)*--v50;
            *--v49 = v52;
          }
          while (v50 != v51);
          v50 = *v61;
        }
        a1[8] = v49;
        a1[9] = v43;
        a1[10] = &v48[8 * v47];
        if (v50)
          operator delete(v50);
      }
      else
      {
        *v42 = v39;
        v43 = v42 + 1;
      }
      a1[9] = v43;
    }
    ++v37;
  }
  while (v37 != 20);
LABEL_61:
  v53 = (id)a1[3];
  objc_msgSend(a5, "setImage:", *a1);
  objc_msgSend(a5, "setCallIndex:", *((unsigned int *)a1 + 12));
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  v54 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  v55 = newRuntimeStackTrace(v61);
  v56 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  v57 = v54;
  if (v56 == 1)
  {
    v58 = objc_msgSend(a4, "device", v54);
    v57 = v55;
    if ((*(_BYTE *)(v58 + 285) & 2) == 0)
      v57 = v54;
  }
  objc_msgSend(a5, "setErrorStackTrace:", v57);
  if (v54)
    v59 = objc_msgSend(v54, "objectAtIndexedSubscript:", 0);
  else
    v59 = 0;
  objc_msgSend(a5, "setDebugLocation:", v59);

  objc_msgSend(a5, "setFunction:", a1[1]);
  objc_msgSend(a5, "setType:", 0);
  objc_msgSend(a5, "setPipelineIdentifier:", a1[3]);
  return a1;
}

void sub_22CE67D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  void *v14;

  v14 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *resolvedSharedPacketData<GPUDebugFunctionTrapPacket>::resolvedSharedPacketData(_QWORD *a1, _QWORD *a2, uint64_t a3, void *a4, void *a5)
{
  void **v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  id *v34;
  id *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  id *v50;
  id *v51;
  uint64_t v52;
  id v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id **v61;

  *(_OWORD *)(a1 + 7) = 0u;
  v10 = (void **)(a1 + 7);
  v61 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 4);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)((char *)a2 + 20));
  v11 = (void *)a2[1];
  *a1 = v11;
  a1[2] = objc_msgSend(v11, "debugInstrumentationData");
  switch(a3)
  {
    case 1:
      v14 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      v13 = objc_msgSend(v14, "label");
      goto LABEL_5;
    case 2:
    case 3:
      v12 = (id)*a2;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        v13 = objc_msgSend(v12, "label");
LABEL_5:
        v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_14;
        v18 = (id)*a2;
        if (objc_msgSend((id)*a2, "tileFunctionData"))
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          v19 = (void *)objc_msgSend(v18, "tileFunctionData");
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          v19 = (void *)objc_msgSend(v18, "fragmentFunctionData");
        }
        a1[1] = objc_msgSend(v19, "function");
        v13 = objc_msgSend(v18, "label");
        v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      v20 = (void *)a1[1];
      v21 = a1[3];
      if (v20)
      {
        if (v21)
          v22 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline(function): \"%@(%@)\""), v21, objc_msgSend(v20, "name"));
        else
          v22 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("function: \"%@\""), objc_msgSend(v20, "name"));
        v21 = v22;
        a1[3] = v22;
      }
      if (!v21)
        a1[3] = objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithFormat:", CFSTR("packet pipelineID: \"%llX\""), *a2);
      v23 = objc_msgSend((id)a1[2], "debugLocationForID:", *((unsigned int *)a1 + 11));
      *v10 = (void *)v23;
      if (v23)
      {
        v24 = a1[10];
        v25 = (uint64_t *)a1[9];
        if ((unint64_t)v25 >= v24)
        {
          v27 = ((char *)v25 - (char *)*v61) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v28 = v24 - (_QWORD)*v61;
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v30);
            v23 = (uint64_t)*v10;
          }
          else
          {
            v31 = 0;
          }
          v32 = (uint64_t *)&v31[8 * v27];
          v33 = &v31[8 * v30];
          *v32 = v23;
          v26 = v32 + 1;
          v35 = (id *)a1[8];
          v34 = (id *)a1[9];
          if (v34 != v35)
          {
            do
            {
              v36 = (uint64_t)*--v34;
              *--v32 = v36;
            }
            while (v34 != v35);
            v34 = *v61;
          }
          a1[8] = v32;
          a1[9] = v26;
          a1[10] = v33;
          if (v34)
            operator delete(v34);
        }
        else
        {
          *v25 = v23;
          v26 = v25 + 1;
        }
        a1[9] = v26;
      }
      if (objc_msgSend((id)*a1, "imageType") == 1)
        goto LABEL_61;
      v37 = 0;
      break;
    case 7:
      v16 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      v13 = objc_msgSend(v16, "label");
      v15 = 16;
      goto LABEL_13;
    case 8:
      v17 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      v13 = objc_msgSend(v17, "label");
      v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    v38 = *((_DWORD *)a2 + v37 + 8);
    if (v38 != -1)
    {
      if (v38 == 0x7FFFFFFF)
        break;
      v39 = objc_msgSend((id)a1[2], "debugLocationForID:");
      v40 = v39;
      v42 = (uint64_t *)a1[9];
      v41 = a1[10];
      if ((unint64_t)v42 >= v41)
      {
        v44 = ((char *)v42 - (char *)*v61) >> 3;
        if ((unint64_t)(v44 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v45 = v41 - (_QWORD)*v61;
        v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1))
          v46 = v44 + 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        if (v47)
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v47);
        else
          v48 = 0;
        v49 = (uint64_t *)&v48[8 * v44];
        *v49 = v40;
        v43 = v49 + 1;
        v51 = (id *)a1[8];
        v50 = (id *)a1[9];
        if (v50 != v51)
        {
          do
          {
            v52 = (uint64_t)*--v50;
            *--v49 = v52;
          }
          while (v50 != v51);
          v50 = *v61;
        }
        a1[8] = v49;
        a1[9] = v43;
        a1[10] = &v48[8 * v47];
        if (v50)
          operator delete(v50);
      }
      else
      {
        *v42 = v39;
        v43 = v42 + 1;
      }
      a1[9] = v43;
    }
    ++v37;
  }
  while (v37 != 20);
LABEL_61:
  v53 = (id)a1[3];
  objc_msgSend(a5, "setImage:", *a1);
  objc_msgSend(a5, "setCallIndex:", *((unsigned int *)a1 + 12));
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  v54 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  v55 = newRuntimeStackTrace(v61);
  v56 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  v57 = v54;
  if (v56 == 1)
  {
    v58 = objc_msgSend(a4, "device", v54);
    v57 = v55;
    if ((*(_BYTE *)(v58 + 285) & 2) == 0)
      v57 = v54;
  }
  objc_msgSend(a5, "setErrorStackTrace:", v57);
  if (v54)
    v59 = objc_msgSend(v54, "objectAtIndexedSubscript:", 0);
  else
    v59 = 0;
  objc_msgSend(a5, "setDebugLocation:", v59);

  objc_msgSend(a5, "setFunction:", a1[1]);
  objc_msgSend(a5, "setType:", 0);
  objc_msgSend(a5, "setPipelineIdentifier:", a1[3]);
  return a1;
}

void sub_22CE68354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  void *v14;

  v14 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *resolvedSharedPacketData<GPUDebugAccelerationStructurePacket>::resolvedSharedPacketData(_QWORD *a1, _QWORD *a2, uint64_t a3, void *a4, void *a5)
{
  void **v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  id *v34;
  id *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  id *v50;
  id *v51;
  uint64_t v52;
  id v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id **v61;

  *(_OWORD *)(a1 + 7) = 0u;
  v10 = (void **)(a1 + 7);
  v61 = (id **)(a1 + 8);
  *((_DWORD *)a1 + 12) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  a1[11] = 0;
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 4);
  *(int32x2_t *)((char *)a1 + 44) = vrev64_s32(*(int32x2_t *)((char *)a2 + 20));
  v11 = (void *)a2[1];
  *a1 = v11;
  a1[2] = objc_msgSend(v11, "debugInstrumentationData");
  switch(a3)
  {
    case 1:
      v14 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "vertexArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v14, "vertexFunctionData"), "function");
      v13 = objc_msgSend(v14, "label");
      goto LABEL_5;
    case 2:
    case 3:
      v12 = (id)*a2;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        a1[4] = objc_msgSend((id)objc_msgSend(v12, "userReflection"), "arguments");
        a1[1] = objc_msgSend((id)objc_msgSend(v12, "kernelFunctionData"), "function");
        v13 = objc_msgSend(v12, "label");
LABEL_5:
        v15 = 1;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          goto LABEL_14;
        v18 = (id)*a2;
        if (objc_msgSend((id)*a2, "tileFunctionData"))
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "tileArguments");
          v19 = (void *)objc_msgSend(v18, "tileFunctionData");
        }
        else
        {
          a1[4] = objc_msgSend((id)objc_msgSend(v18, "userReflection"), "fragmentArguments");
          v19 = (void *)objc_msgSend(v18, "fragmentFunctionData");
        }
        a1[1] = objc_msgSend(v19, "function");
        v13 = objc_msgSend(v18, "label");
        v15 = 2;
      }
LABEL_13:
      a1[3] = v13;
      a1[11] = v15;
LABEL_14:
      v20 = (void *)a1[1];
      v21 = a1[3];
      if (v20)
      {
        if (v21)
          v22 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("pipeline(function): \"%@(%@)\""), v21, objc_msgSend(v20, "name"));
        else
          v22 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("function: \"%@\""), objc_msgSend(v20, "name"));
        v21 = v22;
        a1[3] = v22;
      }
      if (!v21)
        a1[3] = objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithFormat:", CFSTR("packet pipelineID: \"%llX\""), *a2);
      v23 = objc_msgSend((id)a1[2], "debugLocationForID:", *((unsigned int *)a1 + 11));
      *v10 = (void *)v23;
      if (v23)
      {
        v24 = a1[10];
        v25 = (uint64_t *)a1[9];
        if ((unint64_t)v25 >= v24)
        {
          v27 = ((char *)v25 - (char *)*v61) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
          v28 = v24 - (_QWORD)*v61;
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v30);
            v23 = (uint64_t)*v10;
          }
          else
          {
            v31 = 0;
          }
          v32 = (uint64_t *)&v31[8 * v27];
          v33 = &v31[8 * v30];
          *v32 = v23;
          v26 = v32 + 1;
          v35 = (id *)a1[8];
          v34 = (id *)a1[9];
          if (v34 != v35)
          {
            do
            {
              v36 = (uint64_t)*--v34;
              *--v32 = v36;
            }
            while (v34 != v35);
            v34 = *v61;
          }
          a1[8] = v32;
          a1[9] = v26;
          a1[10] = v33;
          if (v34)
            operator delete(v34);
        }
        else
        {
          *v25 = v23;
          v26 = v25 + 1;
        }
        a1[9] = v26;
      }
      if (objc_msgSend((id)*a1, "imageType") == 1)
        goto LABEL_61;
      v37 = 0;
      break;
    case 7:
      v16 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "meshArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v16, "meshFunctionData"), "function");
      v13 = objc_msgSend(v16, "label");
      v15 = 16;
      goto LABEL_13;
    case 8:
      v17 = (id)*a2;
      a1[4] = objc_msgSend((id)objc_msgSend((id)*a2, "userReflection"), "objectArguments");
      a1[1] = objc_msgSend((id)objc_msgSend(v17, "objectFunctionData"), "function");
      v13 = objc_msgSend(v17, "label");
      v15 = 8;
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
  do
  {
    v38 = *((_DWORD *)a2 + v37 + 12);
    if (v38 != -1)
    {
      if (v38 == 0x7FFFFFFF)
        break;
      v39 = objc_msgSend((id)a1[2], "debugLocationForID:");
      v40 = v39;
      v42 = (uint64_t *)a1[9];
      v41 = a1[10];
      if ((unint64_t)v42 >= v41)
      {
        v44 = ((char *)v42 - (char *)*v61) >> 3;
        if ((unint64_t)(v44 + 1) >> 61)
          std::vector<unsigned long>::__throw_length_error[abi:ne180100]();
        v45 = v41 - (_QWORD)*v61;
        v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1))
          v46 = v44 + 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        if (v47)
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 10), v47);
        else
          v48 = 0;
        v49 = (uint64_t *)&v48[8 * v44];
        *v49 = v40;
        v43 = v49 + 1;
        v51 = (id *)a1[8];
        v50 = (id *)a1[9];
        if (v50 != v51)
        {
          do
          {
            v52 = (uint64_t)*--v50;
            *--v49 = v52;
          }
          while (v50 != v51);
          v50 = *v61;
        }
        a1[8] = v49;
        a1[9] = v43;
        a1[10] = &v48[8 * v47];
        if (v50)
          operator delete(v50);
      }
      else
      {
        *v42 = v39;
        v43 = v42 + 1;
      }
      a1[9] = v43;
    }
    ++v37;
  }
  while (v37 != 20);
LABEL_61:
  v53 = (id)a1[3];
  objc_msgSend(a5, "setImage:", *a1);
  objc_msgSend(a5, "setCallIndex:", *((unsigned int *)a1 + 12));
  objc_msgSend(a5, "setEncoderLabel:", objc_msgSend(a4, "encoderIdentifierForEncoderIndex:", *((unsigned int *)a1 + 10)));
  v54 = newNonToolchainInlinedStackTraceFromDebugLocation(*v10);
  v55 = newRuntimeStackTrace(v61);
  v56 = objc_msgSend((id)objc_msgSend(a4, "device"), "argumentBuffersSupport");
  v57 = v54;
  if (v56 == 1)
  {
    v58 = objc_msgSend(a4, "device", v54);
    v57 = v55;
    if ((*(_BYTE *)(v58 + 285) & 2) == 0)
      v57 = v54;
  }
  objc_msgSend(a5, "setErrorStackTrace:", v57);
  if (v54)
    v59 = objc_msgSend(v54, "objectAtIndexedSubscript:", 0);
  else
    v59 = 0;
  objc_msgSend(a5, "setDebugLocation:", v59);

  objc_msgSend(a5, "setFunction:", a1[1]);
  objc_msgSend(a5, "setType:", 0);
  objc_msgSend(a5, "setPipelineIdentifier:", a1[3]);
  return a1;
}

void sub_22CE68914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  void *v14;

  v14 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 72) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_22CE6A794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t PrepareExecuteIndirect(MTLLegacySVComputeCommandEncoder *a1, void *a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  MTLLegacySVComputePipelineState *currentPipeline;
  BOOL v12;
  uint64_t v13;
  void *v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  id v18;
  MTLBuffer **p_textureUsageTable;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t *v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  int64x2_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v6 = -[MTLToolsObject baseObject](a1, "baseObject");
  v7 = -[MTLToolsObject device](a1, "device");
  v8 = objc_msgSend(a2, "inheritsBuffers");
  v9 = objc_msgSend(a2, "inheritsPipelineState");
  v10 = *(_QWORD *)(v7 + 424);
  objc_msgSend(v6, "useResource:usage:", v10, 1);
  objc_msgSend(v6, "setBuffer:offset:atIndex:", v10, 0, 2);
  objc_msgSend(v6, "useResource:usage:", objc_msgSend(a2, "baseObject"), 2);
  objc_msgSend(v6, "setBuffer:offset:atIndex:", objc_msgSend(a2, "internalICBBuffer"), 0, 0);
  currentPipeline = a1->_currentPipeline;
  if (currentPipeline)
    v12 = v9 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    v13 = -[MTLDebugInstrumentationData bufferAccessMask](-[MTLToolsComputePipelineState debugInstrumentationData](currentPipeline, "debugInstrumentationData"), "bufferAccessMask");
    objc_msgSend(v6, "useResource:usage:", -[MTLToolsObject baseObject](-[MTLLegacySVComputePipelineState indirectStateBuffer](a1->_currentPipeline, "indirectStateBuffer"), "baseObject"), 1);
    objc_msgSend(v6, "setBuffer:offset:atIndex:", -[MTLToolsObject baseObject](-[MTLLegacySVComputePipelineState indirectStateBuffer](a1->_currentPipeline, "indirectStateBuffer"), "baseObject"), 0, 3);
    if ((v9 & 1) != 0)
      goto LABEL_9;
LABEL_7:
    LegacySVGlobalResidentBufferList::useBuffers((LegacySVGlobalResidentBufferList *)(v7 + 552), a1);
    objc_msgSend(v6, "setBuffer:offset:atIndex:", objc_msgSend(a2, "internalDispatchIDBuffer"), 0, 5);
    goto LABEL_10;
  }
  v13 = 0x3FFFFFFFFFFFFFFFLL;
  if ((v9 & 1) == 0)
    goto LABEL_7;
LABEL_9:
  v14 = (void *)objc_msgSend((id)objc_msgSend((id)v7, "baseObject"), "newBufferWithBytes:length:options:", &a1->_dispatchID, 24, 0);
  objc_msgSend(v6, "setBuffer:offset:atIndex:", v14, 0, 5);
  objc_msgSend(v6, "useResource:usage:", v14, 1);

LABEL_10:
  result = objc_msgSend(v6, "setBuffer:offset:atIndex:", -[MTLBuffer baseObject](a1->_reportBuffer.buffer, "baseObject"), a1->_reportBuffer.offset, 4);
  v16 = *(_DWORD *)(a3 + 16);
  if (v16 == -1)
    v17 = -1;
  else
    v17 = *(unsigned int *)(a3 + 16);
  if (v17 == 1)
  {
    if (v16 != 1)
      goto LABEL_45;
    objc_msgSend(v6, "setBytes:length:atIndex:", a3, 8, 1);
  }
  else
  {
    if (v17)
      return result;
    if (v16)
      goto LABEL_45;
    v18 = *(id *)a3;
    objc_msgSend(v6, "setBuffer:offset:atIndex:", objc_msgSend(*(id *)a3, "baseObject"), *(_QWORD *)(a3 + 8), 1);
    -[MTLToolsCommandEncoder addRetainedObject:](a1, "addRetainedObject:", v18);
  }
  if ((*(_QWORD *)&a1->_options->var0 & 0x200000001) != 0)
  {
    objc_msgSend(v6, "setBuffer:offset:atIndex:", a1->_bufferUsageTable, 0, 6);
    p_textureUsageTable = &a1->_textureUsageTable;
  }
  else
  {
    objc_msgSend(v6, "setBuffer:offset:atIndex:", *(_QWORD *)(v7 + 424), 0, 6);
    p_textureUsageTable = (MTLBuffer **)(v7 + 424);
  }
  objc_msgSend(v6, "setBuffer:offset:atIndex:", *p_textureUsageTable, 0, 7);
  if ((v8 & 1) != 0)
  {
    a1->_handles.needsFlush = 1;
    v34 = v13;
    MTLGPUDebugStageBufferHandles::flush<MTLGPUDebug::EncoderVariantIndirection<MTLGPUDebug::KernelEncoderClass>>((uint64_t)&a1->_handles, (unint64_t *)&v34, (id *)&a1->super.super.super.super.isa, 9, 10);
    if ((v9 & 1) == 0)
    {
      v20 = objc_msgSend((id)v7, "ICB_Inherit_Buffers_ComputePipelineState");
LABEL_31:
      v21 = (void *)v20;
      goto LABEL_32;
    }
  }
  else if (v9)
  {
    v20 = objc_msgSend((id)v7, "ICB_Inherit_PSO_ComputePipelineState");
    goto LABEL_31;
  }
  if (((v8 | v9) & 1) == 0)
  {
    v20 = objc_msgSend((id)v7, "ICB_Inherit_None_ComputePipelineState");
    goto LABEL_31;
  }
  if ((v8 & v9) != 0)
  {
    v20 = objc_msgSend((id)v7, "ICB_Inherit_Both_ComputePipelineState");
    goto LABEL_31;
  }
  v21 = 0;
LABEL_32:
  objc_msgSend(v6, "setComputePipelineState:", v21);
  objc_msgSend(v6, "memoryBarrierWithScope:", 1);
  v22 = *(_DWORD *)(a3 + 16);
  if (v22 == -1)
    v23 = -1;
  else
    v23 = *(unsigned int *)(a3 + 16);
  if (v23 == 1)
  {
    if (v22 == 1)
    {
      v28 = *(unsigned int *)(a3 + 4);
      v29 = vdupq_n_s64(1uLL);
      v26 = objc_msgSend(v21, "threadExecutionWidth");
      v27 = v29;
      v24 = (__int128 *)&v28;
      v25 = &v26;
      goto LABEL_40;
    }
LABEL_45:
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (v23)
    goto LABEL_41;
  v32 = xmmword_22CEAB870;
  v33 = 1;
  v30 = objc_msgSend(v21, "threadExecutionWidth");
  v31 = vdupq_n_s64(1uLL);
  v24 = &v32;
  v25 = &v30;
LABEL_40:
  objc_msgSend(v6, "dispatchThreads:threadsPerThreadgroup:", v24, v25);
LABEL_41:
  result = objc_msgSend(v6, "memoryBarrierWithScope:", 1);
  if (v9)
    return objc_msgSend(v6, "setComputePipelineState:", -[MTLToolsObject baseObject](a1->_currentPipeline, "baseObject"));
  return result;
}

uint64_t RestoreInternalState(MTLLegacySVComputeCommandEncoder *a1)
{
  uint64_t result;

  -[MTLLegacySVComputeCommandEncoder setKernelReportBuffer:offset:](a1, "setKernelReportBuffer:offset:", a1->_reportBuffer.buffer, a1->_reportBuffer.offset);
  result = -[MTLLegacySVComputeCommandEncoder setBufferUsageTable:textureUsageTable:](a1, "setBufferUsageTable:textureUsageTable:", a1->_bufferUsageTable, a1->_textureUsageTable);
  if (a1->_currentPipeline)
  {
    a1->_currentPipeline = 0;
    result = -[MTLLegacySVComputeCommandEncoder setComputePipelineState:](a1, "setComputePipelineState:");
    a1->_handles.needsFlush = 1;
    a1->_threadgroup.needsFlush = 1;
  }
  return result;
}

void sub_22CE6C034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Unwind_Resume(exception_object);
}

void sub_22CE6C4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::mutex *v3;
  va_list va;

  va_start(va, a3);
  std::unique_ptr<LegacySVArgumentEncoderLayout>::reset[abi:ne180100]((LegacySVArgumentEncoderLayout **)va, 0);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void LegacySVArgumentEncoderLayout::LegacySVArgumentEncoderLayout(LegacySVArgumentEncoderLayout *this, MTLStructType *a2, MTLLegacySVDevice *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  v5 = -[MTLToolsObject baseObject](a3, "baseObject");
  v6 = (void *)MEMORY[0x22E309364]();
  v7 = +[MTLLegacySVFunction internalStructTypeFromUserStructType:](MTLLegacySVFunction, "internalStructTypeFromUserStructType:", a2);
  v8 = (void *)objc_msgSend(v5, "newIndirectArgumentBufferLayoutWithStructType:", v7);
  *(_QWORD *)this = v8;
  objc_msgSend(v8, "setStructType:withDevice:", v7, v5);
  objc_autoreleasePoolPop(v6);
  MTLEnumerateIndirectResources();
}

void sub_22CE6C704(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_22CE6C7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, LegacySVArgumentEncoderLayout *a9)
{
  std::unique_ptr<LegacySVArgumentEncoderLayout>::reset[abi:ne180100](&a9, 0);
  _Unwind_Resume(a1);
}

void LegacySVArgumentEncoderLayout::~LegacySVArgumentEncoderLayout(id *this)
{

  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>>>::~__hash_table((uint64_t)(this + 1));
}

uint64_t *LegacySVArgumentEncoderLayout::sublayout(LegacySVArgumentEncoderLayout *this, unsigned int a2)
{
  uint64_t *result;
  unsigned int v3;

  v3 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<GPUDebugArgumentEncoderLayout>>>>::find<unsigned int>((_QWORD *)this + 1, &v3);
  if (result)
    return (uint64_t *)result[3];
  return result;
}

LegacySVArgumentEncoderLayout *std::unique_ptr<LegacySVArgumentEncoderLayout>::reset[abi:ne180100](LegacySVArgumentEncoderLayout **a1, LegacySVArgumentEncoderLayout *a2)
{
  LegacySVArgumentEncoderLayout *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    LegacySVArgumentEncoderLayout::~LegacySVArgumentEncoderLayout(result);
    JUMPOUT(0x22E309118);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>>>::__emplace_unique_key_args<unsigned int,unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = *a3;
  v15 = *a4;
  *a4 = 0;
  v12[3] = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v12 = *v23;
LABEL_38:
    *v23 = v12;
    goto LABEL_39;
  }
  *v12 = *v14;
  *v14 = v12;
  *(_QWORD *)(v22 + 8 * v4) = v14;
  if (*v12)
  {
    v24 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_22CE6CAD8(_Unwind_Exception *a1)
{
  LegacySVArgumentEncoderLayout **v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,void *>>>::operator()[abi:ne180100](uint64_t a1, LegacySVArgumentEncoderLayout **__p)
{
  if (*(_BYTE *)(a1 + 8))
    std::unique_ptr<LegacySVArgumentEncoderLayout>::reset[abi:ne180100](__p + 3, 0);
  if (__p)
    operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>>>::__deallocate_node(a1, *(LegacySVArgumentEncoderLayout ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<LegacySVArgumentEncoderLayout>>>>::__deallocate_node(uint64_t a1, LegacySVArgumentEncoderLayout **a2)
{
  LegacySVArgumentEncoderLayout **v2;
  LegacySVArgumentEncoderLayout *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      std::unique_ptr<LegacySVArgumentEncoderLayout>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      v2 = (LegacySVArgumentEncoderLayout **)v3;
    }
    while (v3);
  }
}

uint64_t _validateReplaceRegion(MTLDebugTexture *a1, MTLOrigin *a2, MTLSize *a3, unint64_t a4, unint64_t a5, const void *a6, unint64_t a7, char a8, unint64_t a9, unint64_t a10)
{
  MTLDebugTexture *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  std::mutex *v21;
  _QWORD *i;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v27;
  NSUInteger width;
  unint64_t v29;
  uint64_t v30;
  NSUInteger height;
  uint64_t v32;
  uint64_t v33;
  NSUInteger depth;
  const char *v35;
  uint64_t v36;
  uint64_t v37;

  v15 = a1;
  -[MTLToolsObject device](a1, "device");
  _MTLMessageContextBegin_();
  if (a3->height * a3->width * a3->depth)
  {
    if (a6)
      goto LABEL_3;
  }
  else
  {
    depth = a3->depth;
    v36 = 0;
    width = a3->width;
    height = a3->height;
    _MTLMessageContextPush_();
    if (a6)
      goto LABEL_3;
  }
  _MTLMessageContextPush_();
LABEL_3:
  if (-[MTLToolsResource storageMode](v15, "storageMode", width, height, depth, v36) == 2)
    _MTLMessageContextPush_();
  if (-[MTLToolsResource storageMode](v15, "storageMode") == 3)
    _MTLMessageContextPush_();
  if (-[MTLToolsTexture isFramebufferOnly](v15, "isFramebufferOnly"))
    _MTLMessageContextPush_();
  if (-[MTLToolsTexture mipmapLevelCount](v15, "mipmapLevelCount") <= a5)
  {
    v29 = a5;
    v32 = -[MTLToolsTexture mipmapLevelCount](v15, "mipmapLevelCount");
    _MTLMessageContextPush_();
  }
  v16 = -[MTLToolsTexture numFaces](v15, "numFaces", v29, v32);
  if (-[MTLToolsTexture arrayLength](v15, "arrayLength") * v16 <= a4)
  {
    v27 = -[MTLToolsTexture numFaces](v15, "numFaces");
    v30 = a4;
    v33 = -[MTLToolsTexture arrayLength](v15, "arrayLength") * v27;
    _MTLMessageContextPush_();
  }
  _MTLMessageContextEnd();
  -[MTLToolsObject device](v15, "device");
  -[MTLToolsTexture pixelFormat](v15, "pixelFormat");
  -[MTLToolsTexture width](v15, "width");
  -[MTLToolsTexture height](v15, "height");
  -[MTLToolsTexture depth](v15, "depth");
  -[MTLToolsTexture sampleCount](v15, "sampleCount");
  MTLGetTextureLevelInfoForDeviceWithOptions();
  -[MTLToolsObject device](v15, "device");
  -[MTLToolsTexture pixelFormat](v15, "pixelFormat");
  MTLPixelFormatGetInfoForDevice();
  _MTLAdjustMTLSize();
  -[MTLToolsObject device](v15, "device");
  _MTLMessageContextBegin_();
  if (a3->width + a2->x)
  {
    v30 = a3->width + a2->x;
    v33 = 0;
    _MTLMessageContextPush_();
  }
  if (a3->height + a2->y)
  {
    v30 = a3->height + a2->y;
    v33 = 0;
    _MTLMessageContextPush_();
  }
  if (a3->depth + a2->z)
  {
    v30 = a3->depth + a2->z;
    v33 = 0;
    _MTLMessageContextPush_();
  }
  _MTLMessageContextEnd();
  -[MTLToolsObject device](v15, "device");
  _MTLMessageContextBegin_();
  -[MTLToolsObject device](v15, "device");
  -[MTLToolsTexture pixelFormat](v15, "pixelFormat");
  -[MTLToolsTexture sampleCount](v15, "sampleCount");
  MTLGetTextureLevelInfoForDeviceWithOptions();
  if (!a7 && 0 == __PAIR128__(1, 1))
    a7 = 0;
  if ((a8 & 1) == 0)
  {
    -[MTLToolsTexture textureType](v15, "textureType");
    v30 = MTLTextureTypeString();
    _MTLMessageContextPush_();
  }
  if (a7 % 0)
  {
    v35 = "pixel";
    v37 = 0;
    v30 = a7;
    v33 = 0;
    _MTLMessageContextPush_();
  }
  if (a9 % 0)
  {
    v35 = "pixel";
    v37 = 0;
    v30 = a9;
    v33 = 0;
    _MTLMessageContextPush_();
  }
  if ((-[MTLToolsTexture usage](v15, "usage", v30, v33, v35, v37) & 4) != 0)
  {
    v17 = -[MTLToolsTexture parentTexture](v15, "parentTexture");
    v18 = a4;
    if (v17)
    {
      v19 = a5;
      do
      {
        v20 = v17;
        v19 += -[MTLToolsTexture parentRelativeLevel](v15, "parentRelativeLevel");
        v18 += -[MTLToolsTexture parentRelativeSlice](v15, "parentRelativeSlice");
        v17 = objc_msgSend((id)v20, "parentTexture");
        v15 = (MTLDebugTexture *)v20;
      }
      while (v17);
    }
    else
    {
      v19 = a5;
      v20 = (uint64_t)v15;
    }
    v21 = (std::mutex *)(v20 + 152);
    std::mutex::lock((std::mutex *)(v20 + 152));
    for (i = *(_QWORD **)(v20 + 232); i; i = (_QWORD *)*i)
    {
      if (v19 == i[2])
      {
        v23 = i[3];
        v25 = v18 >= v23;
        v24 = v18 - v23;
        v25 = !v25 || v24 >= i[4];
        if (!v25)
          _MTLMessageContextPush_();
      }
    }
    std::mutex::unlock(v21);
  }
  return _MTLMessageContextEnd();
}

void sub_22CE6E0A4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t _validateGetBytes(MTLDebugTexture *a1, MTLOrigin *a2, MTLSize *a3, unint64_t a4, unint64_t a5, void *a6, unint64_t a7, char a8, unint64_t a9, unint64_t a10)
{
  unint64_t v17;
  NSUInteger width;
  unint64_t v20;
  NSUInteger height;
  unint64_t v22;
  NSUInteger depth;
  uint64_t v24;

  -[MTLToolsObject device](a1, "device");
  _MTLMessageContextBegin_();
  if (a3->height * a3->width * a3->depth)
  {
    if (a6)
      goto LABEL_3;
  }
  else
  {
    depth = a3->depth;
    v24 = 0;
    width = a3->width;
    height = a3->height;
    _MTLMessageContextPush_();
    if (a6)
      goto LABEL_3;
  }
  _MTLMessageContextPush_();
LABEL_3:
  if (-[MTLToolsResource storageMode](a1, "storageMode", width, height, depth, v24) == 2)
    _MTLMessageContextPush_();
  if (-[MTLToolsResource storageMode](a1, "storageMode") == 3)
    _MTLMessageContextPush_();
  if (-[MTLToolsTexture isFramebufferOnly](a1, "isFramebufferOnly"))
    _MTLMessageContextPush_();
  if (-[MTLToolsTexture mipmapLevelCount](a1, "mipmapLevelCount") <= a5)
  {
    v20 = a5;
    v22 = -[MTLToolsTexture mipmapLevelCount](a1, "mipmapLevelCount");
    _MTLMessageContextPush_();
  }
  v17 = -[MTLToolsTexture numFaces](a1, "numFaces", v20, v22);
  if (-[MTLToolsTexture arrayLength](a1, "arrayLength") * v17 <= a4)
  {
    -[MTLToolsTexture numFaces](a1, "numFaces");
    -[MTLToolsTexture arrayLength](a1, "arrayLength");
    _MTLMessageContextPush_();
  }
  _MTLMessageContextEnd();
  -[MTLToolsObject device](a1, "device");
  -[MTLToolsTexture pixelFormat](a1, "pixelFormat");
  -[MTLToolsTexture width](a1, "width");
  -[MTLToolsTexture height](a1, "height");
  -[MTLToolsTexture depth](a1, "depth");
  -[MTLToolsTexture sampleCount](a1, "sampleCount");
  MTLGetTextureLevelInfoForDeviceWithOptions();
  -[MTLToolsObject device](a1, "device");
  -[MTLToolsTexture pixelFormat](a1, "pixelFormat");
  MTLPixelFormatGetInfoForDevice();
  _MTLAdjustMTLSize();
  -[MTLToolsObject device](a1, "device");
  _MTLMessageContextBegin_();
  if (a3->width + a2->x)
    _MTLMessageContextPush_();
  if (a3->height + a2->y)
    _MTLMessageContextPush_();
  if (a3->depth + a2->z)
    _MTLMessageContextPush_();
  _MTLMessageContextEnd();
  -[MTLToolsObject device](a1, "device");
  _MTLMessageContextBegin_();
  -[MTLToolsObject device](a1, "device");
  -[MTLToolsTexture pixelFormat](a1, "pixelFormat");
  -[MTLToolsTexture sampleCount](a1, "sampleCount");
  MTLGetTextureLevelInfoForDeviceWithOptions();
  if (!a7 && 0 == __PAIR128__(1, 1))
    a7 = 0;
  if ((a8 & 1) == 0)
  {
    -[MTLToolsTexture textureType](a1, "textureType");
    MTLTextureTypeString();
    _MTLMessageContextPush_();
  }
  if (a7 % 0)
    _MTLMessageContextPush_();
  if (a9 % 0)
    _MTLMessageContextPush_();
  return _MTLMessageContextEnd();
}

uint64_t _validateTextureView(MTLDebugTexture *a1, MTLPixelFormat a2, MTLTextureType a3)
{
  uint64_t v6;
  MTLDevice *v7;
  MTLPixelFormat v8;
  unint64_t v10;
  uint64_t v11;

  -[MTLToolsObject device](a1, "device");
  _MTLMessageContextBegin_();
  if (-[MTLToolsResource storageMode](a1, "storageMode") == 3)
    _MTLMessageContextPush_();
  -[MTLToolsObject device](a1, "device");
  MTLPixelFormatGetInfoForDevice();
  v6 = -[MTLToolsTexture pixelFormat](a1, "pixelFormat");
  v7 = -[MTLToolsObject device](a1, "device");
  if (v6 != a2)
  {
    if (!-[MTLDevice supportsRelaxedTextureViewRequirements](v7, "supportsRelaxedTextureViewRequirements"))goto LABEL_140;
    if (v6 == a2)
      v8 = v6;
    else
      v8 = a2;
    if (v6 <= 300)
    {
      if (v6 > 132)
      {
        switch(v6)
        {
          case 153:
            if (v8 != MTLPixelFormatBC7_RGBAUnorm)
              goto LABEL_140;
            goto LABEL_142;
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 162:
          case 164:
          case 166:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 180:
          case 182:
          case 183:
          case 184:
            goto LABEL_140;
          case 161:
            if (v8 != MTLPixelFormatPVRTC_RGB_2BPP)
              goto LABEL_140;
            goto LABEL_142;
          case 163:
            if (v8 != MTLPixelFormatPVRTC_RGB_4BPP)
              goto LABEL_140;
            goto LABEL_142;
          case 165:
            if (v8 != MTLPixelFormatPVRTC_RGBA_2BPP)
              goto LABEL_140;
            goto LABEL_142;
          case 167:
            if (v8 != MTLPixelFormatPVRTC_RGBA_4BPP)
              goto LABEL_140;
            goto LABEL_142;
          case 179:
            if (v8 != MTLPixelFormatEAC_RGBA8)
              goto LABEL_140;
            goto LABEL_142;
          case 181:
            if (v8 != MTLPixelFormatETC2_RGB8)
              goto LABEL_140;
            goto LABEL_142;
          case 185:
            if (v8 != (MTLPixelFormatASTC_12x12_sRGB|MTLPixelFormatA8Unorm|0x2))
              goto LABEL_140;
            goto LABEL_142;
          case 186:
            if (v8 != MTLPixelFormatASTC_4x4_LDR)
              goto LABEL_140;
            goto LABEL_142;
          case 187:
            if (v8 != MTLPixelFormatASTC_5x4_LDR)
              goto LABEL_140;
            goto LABEL_142;
          case 188:
            if (v8 != MTLPixelFormatASTC_5x5_LDR)
              goto LABEL_140;
            goto LABEL_142;
          case 189:
            if (v8 != MTLPixelFormatASTC_6x5_LDR)
              goto LABEL_140;
            goto LABEL_142;
          case 190:
            if (v8 != MTLPixelFormatASTC_6x6_LDR)
              goto LABEL_140;
            goto LABEL_142;
          case 191:
            if (v8 != (MTLPixelFormatASTC_6x6_LDR|MTLPixelFormatA8Unorm))
              goto LABEL_140;
            goto LABEL_142;
          case 192:
            if (v8 != MTLPixelFormatASTC_8x5_LDR)
              goto LABEL_140;
            goto LABEL_142;
          case 193:
            if (v8 != MTLPixelFormatASTC_8x6_LDR)
              goto LABEL_140;
            goto LABEL_142;
          case 194:
            if (v8 != MTLPixelFormatASTC_8x8_LDR)
              goto LABEL_140;
            goto LABEL_142;
          case 195:
            if (v8 != MTLPixelFormatASTC_10x5_LDR)
              goto LABEL_140;
            goto LABEL_142;
          case 196:
            if (v8 != MTLPixelFormatASTC_10x6_LDR)
              goto LABEL_140;
            goto LABEL_142;
          case 197:
            if (v8 != MTLPixelFormatASTC_10x8_LDR)
              goto LABEL_140;
            goto LABEL_142;
          case 198:
            if (v8 != MTLPixelFormatASTC_10x10_LDR)
              goto LABEL_140;
            goto LABEL_142;
          case 199:
            if (v8 != MTLPixelFormatASTC_12x10_LDR)
              goto LABEL_140;
            goto LABEL_142;
          case 200:
            if (v8 != MTLPixelFormatASTC_12x12_LDR)
              goto LABEL_140;
            goto LABEL_142;
          default:
            if (v6 == 133)
            {
              if (v8 != MTLPixelFormatBC2_RGBA)
                goto LABEL_140;
            }
            else if (v6 != 135 || v8 != MTLPixelFormatBC3_RGBA)
            {
              goto LABEL_140;
            }
            break;
        }
        goto LABEL_142;
      }
      if (v6 > 80)
      {
        if (v6 == 81)
        {
          if (v8 == MTLPixelFormatBGRA8Unorm)
            goto LABEL_142;
        }
        else if (v6 == 85)
        {
          if (v8 == (MTLPixelFormatBGRA8Unorm|0x4))
            goto LABEL_142;
        }
        else if (v6 == 131 && v8 == MTLPixelFormatBC1_RGBA)
        {
          goto LABEL_142;
        }
      }
      else if (v6 == 11)
      {
        if (v8 == MTLPixelFormatR8Unorm)
          goto LABEL_142;
      }
      else if (v6 == 31)
      {
        if (v8 == MTLPixelFormatRG8Unorm)
          goto LABEL_142;
      }
      else if (v6 == 71 && v8 == MTLPixelFormatRGBA8Unorm)
      {
        goto LABEL_142;
      }
LABEL_140:
      if (!-[MTLDebugTexture requireUsage:](a1, "requireUsage:", 16))
      {
        v10 = -[MTLToolsTexture usage](a1, "usage");
        v11 = 16;
        _MTLMessageContextPush_();
      }
      goto LABEL_142;
    }
    if (v6 > 550)
    {
      if (v6 <= 585)
      {
        if (v6 <= 554)
        {
          if (v6 == 551)
          {
            if (v8 == 550)
              goto LABEL_142;
          }
          else if (v6 == 553 && v8 == MTLPixelFormatBGRA10_XR)
          {
            goto LABEL_142;
          }
        }
        else if (v6 == 555)
        {
          if (v8 == MTLPixelFormatBGR10_XR)
            goto LABEL_142;
        }
        else if (v6 == 577)
        {
          if (v8 == 576)
            goto LABEL_142;
        }
        else if (v6 == 579 && v8 == 578)
        {
          goto LABEL_142;
        }
        goto LABEL_140;
      }
      switch(v6)
      {
        case 625:
          if (v8 != (MTLPixelFormatRGBA16Snorm|0x200))
            goto LABEL_140;
          break;
        case 626:
        case 627:
        case 629:
        case 630:
        case 631:
        case 633:
          goto LABEL_140;
        case 628:
          if (v8 != MTLPixelFormatBGR10A2Unorm)
            goto LABEL_140;
          break;
        case 632:
          if (v8 != (MTLPixelFormatRGBA16Float|0x204))
            goto LABEL_140;
          break;
        case 634:
          if (v8 != (MTLPixelFormatBGRA10_XR_sRGB|MTLPixelFormatBGRA8Unorm))
            goto LABEL_140;
          break;
        default:
          if (v6 == 586)
          {
            if (v8 == MTLPixelFormatRGB10A2Unorm)
              break;
            goto LABEL_140;
          }
          if (v6 != 639 || v8 != (MTLPixelFormatRGBA32Sint|0x202))
            goto LABEL_140;
          break;
      }
    }
    else
    {
      switch(v6)
      {
        case 520:
          if (v8 != (MTLPixelFormatDepth32Float_Stencil8|MTLPixelFormatGBGR422))
            goto LABEL_140;
          break;
        case 521:
          if (v8 != (MTLPixelFormatX32_Stencil8|MTLPixelFormatGBGR422))
            goto LABEL_140;
          break;
        case 522:
          if (v8 != (MTLPixelFormatX24_Stencil8|MTLPixelFormatGBGR422))
            goto LABEL_140;
          break;
        case 523:
          if (v8 != (MTLPixelFormatX24_Stencil8|MTLPixelFormatBGRG422))
            goto LABEL_140;
          break;
        case 524:
          if (v8 != (MTLPixelFormatGBGR422|0x108))
            goto LABEL_140;
          break;
        case 525:
          if (v8 != (MTLPixelFormatBGRG422|0x108))
            goto LABEL_140;
          break;
        case 526:
          if (v8 != (MTLPixelFormatDepth16Unorm|0x100))
            goto LABEL_140;
          break;
        case 527:
          if (v8 != (MTLPixelFormatDepth16Unorm|MTLPixelFormatA8Unorm|0x100))
            goto LABEL_140;
          break;
        case 528:
          if (v8 != (MTLPixelFormatDepth32Float_Stencil8|MTLPixelFormatGBGR422|0x8))
            goto LABEL_140;
          break;
        case 529:
          if (v8 != (MTLPixelFormatX32_Stencil8|MTLPixelFormatGBGR422|0x8))
            goto LABEL_140;
          break;
        case 530:
          if (v8 != (MTLPixelFormatX24_Stencil8|MTLPixelFormatGBGR422|0x8))
            goto LABEL_140;
          break;
        default:
          if (v6 != 301 || v8 != (MTLPixelFormatDepth32Float_Stencil8|MTLPixelFormatB5G6R5Unorm))
            goto LABEL_140;
          break;
      }
    }
  }
LABEL_142:
  _MTLMessageContextPush_();
  if (-[MTLToolsTexture isFramebufferOnly](a1, "isFramebufferOnly", v10, v11))
    _MTLMessageContextPush_();
  if (-[MTLToolsTexture buffer](a1, "buffer") && (a3 > MTLTextureTypeTextureBuffer || ((1 << a3) & 0x20C) == 0))
  {
    MTLTextureTypeString();
    _MTLMessageContextPush_();
  }
  return _MTLMessageContextEnd();
}

void sub_22CE6F80C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_22CE6F8F8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__assign_unique<std::pair<SubView const,unsigned long> const*>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  __int128 v11;
  BOOL v12;
  _QWORD *v13;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v11 = *(_OWORD *)v4;
        v8[4] = v4[2];
        *((_OWORD *)v8 + 1) = v11;
        v8[5] = v4[3];
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__node_insert_unique(a1, v8);
        v4 += 4;
        if (v10)
          v12 = v4 == a3;
        else
          v12 = 1;
        v8 = v10;
      }
      while (!v12);
    }
    if (v10)
    {
      do
      {
        v13 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v13;
      }
      while (v13);
    }
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__emplace_unique_key_args<SubView,std::pair<SubView const,unsigned long> const&>((uint64_t)a1, v4, v4);
    v4 += 4;
  }
}

void sub_22CE6FBB8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_22CE6FBD8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__node_insert_unique(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v2 = a2;
  v4 = a2 + 2;
  v5 = a2[3] ^ a2[2] ^ a2[4];
  *(v4 - 1) = v5;
  v6 = std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6)
    return v6;
  std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *i;
  unint64_t v8;
  float v10;
  float v11;
  uint64_t v12;
  _BOOL8 v13;
  size_t v14;
  unint64_t v15;
  size_t v16;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
      v5 = v3 <= a2 ? a2 % v3 : a2;
    else
      v5 = (v3 - 1) & a2;
    v6 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
    if (v6)
    {
      for (i = (_QWORD *)*v6; i; i = (_QWORD *)*i)
      {
        v8 = i[1];
        if (v8 == a2)
        {
          if (i[2] == *a3 && i[3] == a3[1] && i[4] == a3[2])
            return i;
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v3)
              v8 %= v3;
          }
          else
          {
            v8 &= v3 - 1;
          }
          if (v8 != v5)
            break;
        }
      }
    }
  }
  v10 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v11 = *(float *)(a1 + 32);
  if (!v3 || (float)(v11 * (float)v3) < v10)
  {
    v12 = 2 * v3;
    v13 = v3 < 3 || (v3 & (v3 - 1)) != 0;
    v14 = v13 | v12;
    v15 = vcvtps_u32_f32(v10 / v11);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v16);
  }
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__emplace_unique_key_args<SubView,std::pair<SubView const,unsigned long> const&>(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = a2[1];
  v7 = a2[2];
  v8 = v6 ^ *a2 ^ v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v6 ^ *a2 ^ v7;
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2 && i[3] == v6 && i[4] == v7)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v8;
  v15 = a3[1];
  *((_OWORD *)i + 1) = *a3;
  *((_OWORD *)i + 2) = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *i = *v23;
LABEL_43:
    *v23 = i;
    goto LABEL_44;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_43;
  }
LABEL_44:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CE6FF94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::find<SubView>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2[1];
  v4 = a2[2];
  v5 = v3 ^ *a2 ^ v4;
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v3 ^ *a2 ^ v4;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v5;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2 && result[3] == v3 && result[4] == v4)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<SubView,unsigned long>,std::__unordered_map_hasher<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::hash_t,SubView::equal_t,true>,std::__unordered_map_equal<SubView,std::__hash_value_type<SubView,unsigned long>,SubView::equal_t,SubView::hash_t,true>,std::allocator<std::__hash_value_type<SubView,unsigned long>>>::__emplace_unique_key_args<SubView,SubView const&,int>(uint64_t a1, _QWORD *a2, uint64_t a3, int *a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *i;
  unint64_t v15;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v8 = a2[1];
  v9 = a2[2];
  v10 = v8 ^ *a2 ^ v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v8 ^ *a2 ^ v9;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == *a2 && i[3] == v8 && i[4] == v9)
            return i;
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  v17 = *a4;
  i[4] = *(_QWORD *)(a3 + 16);
  i[5] = v17;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MTLLegacySVResidencySet *>>>::__rehash<true>(a1, v23);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *i = *v25;
LABEL_43:
    *v25 = i;
    goto LABEL_44;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v24 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v26 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11)
        v26 %= v11;
    }
    else
    {
      v26 &= v11 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_43;
  }
LABEL_44:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_22CE702B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void emitCommandBufferDistribution(MTLTelemetryDevice *a1, MTLTelemetryCommandBufferCounttRec *a2)
{
  OS_os_log *v4;
  unsigned int var0;
  unsigned int var1;
  uint8_t buf[4];
  unsigned int v8;
  __int16 v9;
  unsigned int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*MEMORY[0x24BDDDAC8])
  {
    if (*MEMORY[0x24BDDDAC8] != 1)
      return;
    printf("\n\nCommandQueue, totalCommandBuffers=%u, unretainedCommandBuffers=%u, ", a2->var0, a2->var1);
  }
  v4 = -[MTLTelemetryDevice telemetryLog](a1, "telemetryLog");
  if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEFAULT))
  {
    var0 = a2->var0;
    var1 = a2->var1;
    *(_DWORD *)buf = 67109376;
    v8 = var0;
    v9 = 1024;
    v10 = var1;
    _os_log_impl(&dword_22CD98000, (os_log_t)v4, OS_LOG_TYPE_DEFAULT, "CommandQueue, totalCommandBuffers=%u, unretainedCommandBuffers=%u, ", buf, 0xEu);
  }
}

void emitBlitDistribution(_QWORD *a1, uint64_t a2)
{
  int v3;
  int *v4;
  int v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  double v9;
  NSObject *v10;
  int *v11;
  int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  double v16;
  int *v17;
  int v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  NSObject *v23;
  int *v24;
  int v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  double v29;
  _QWORD *v30;
  const char *Name;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  const char *v37;
  _QWORD *v38;
  unsigned int v39;
  unint64_t v40;
  float v41;
  float v42;
  unsigned int v43;
  unint64_t v44;
  _QWORD *v45;
  unsigned int v46;
  unint64_t v47;
  float v48;
  float v49;
  unsigned int v50;
  unint64_t v51;
  NSObject *v52;
  const char *v53;
  const char *v54;
  const char *v55;
  _QWORD *v56;
  unsigned int v57;
  unint64_t v58;
  float v59;
  float v60;
  unsigned int v61;
  unint64_t v62;
  _QWORD *v63;
  unsigned int v64;
  unint64_t v65;
  float v66;
  float v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  _QWORD *v78;
  _QWORD *v79;
  uint8_t buf[4];
  _BYTE v82[10];
  _BYTE v83[10];
  _BYTE v84[10];
  const char *v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  double v91;
  __int16 v92;
  unint64_t v93;
  __int16 v94;
  unsigned int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  double v101;
  __int16 v102;
  unint64_t v103;
  __int16 v104;
  unsigned int v105;
  __int16 v106;
  int v107;
  __int16 v108;
  int v109;
  __int16 v110;
  double v111;
  __int16 v112;
  unint64_t v113;
  __int16 v114;
  unsigned int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  double v121;
  __int16 v122;
  unint64_t v123;
  __int16 v124;
  int v125;
  uint64_t v126;
  uint64_t v127;

  v126 = *MEMORY[0x24BDAC8D0];
  v3 = *MEMORY[0x24BDDDAC8];
  if (*MEMORY[0x24BDDDAC8])
  {
    if (v3 != 1)
      goto LABEL_13;
    v4 = (int *)a1[87];
    v5 = *v4;
    v6 = v4[1];
    v7 = v4[4];
    v8 = *((_QWORD *)v4 + 1);
    if (v7)
      v9 = (float)((float)v8 / (float)v7);
    else
      v9 = 0.0;
    printf("\n\nBlitsPerBlitEncoder, minBlits=%u, maxBlits=%u, avgBlits=%f, totalBlits=%llu, countBlits=%u", v5, v6, v9, v8, v7);
  }
  v10 = objc_msgSend(a1, "telemetryLog");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = (int *)a1[87];
    v13 = *v11;
    v12 = v11[1];
    v14 = v11[4];
    v15 = *((_QWORD *)v11 + 1);
    if (v14)
      v16 = (float)((float)v15 / (float)v14);
    else
      v16 = 0.0;
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)v82 = v13;
    *(_WORD *)&v82[4] = 1024;
    *(_DWORD *)&v82[6] = v12;
    *(_WORD *)v83 = 2048;
    *(double *)&v83[2] = v16;
    *(_WORD *)v84 = 2048;
    *(_QWORD *)&v84[2] = v15;
    LOWORD(v85) = 1024;
    *(_DWORD *)((char *)&v85 + 2) = v14;
    _os_log_impl(&dword_22CD98000, v10, OS_LOG_TYPE_DEFAULT, "BlitsPerBlitEncoder, minBlits=%u, maxBlits=%u, avgBlits=%f, totalBlits=%llu, countBlits=%u", buf, 0x28u);
  }
  v3 = *MEMORY[0x24BDDDAC8];
LABEL_13:
  if (v3)
  {
    if (v3 != 1)
      goto LABEL_24;
    v17 = (int *)a1[86];
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[4];
    v21 = *((_QWORD *)v17 + 1);
    if (v20)
      v22 = (float)((float)v21 / (float)v20);
    else
      v22 = 0.0;
    printf("\n\nBlitsPerCommandBuffer, minBlits=%u, maxBlits=%u, avgBlits=%f, totalBlits=%llu, countBlits=%u", v18, v19, v22, v21, v20);
  }
  v23 = objc_msgSend(a1, "telemetryLog");
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v24 = (int *)a1[86];
    v26 = *v24;
    v25 = v24[1];
    v27 = v24[4];
    v28 = *((_QWORD *)v24 + 1);
    if (v27)
      v29 = (float)((float)v28 / (float)v27);
    else
      v29 = 0.0;
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)v82 = v26;
    *(_WORD *)&v82[4] = 1024;
    *(_DWORD *)&v82[6] = v25;
    *(_WORD *)v83 = 2048;
    *(double *)&v83[2] = v29;
    *(_WORD *)v84 = 2048;
    *(_QWORD *)&v84[2] = v28;
    LOWORD(v85) = 1024;
    *(_DWORD *)((char *)&v85 + 2) = v27;
    _os_log_impl(&dword_22CD98000, v23, OS_LOG_TYPE_DEFAULT, "BlitsPerCommandBuffer, minBlits=%u, maxBlits=%u, avgBlits=%f, totalBlits=%llu, countBlits=%u", buf, 0x28u);
  }
LABEL_24:
  v30 = *(_QWORD **)(a2 + 16);
  if (!v30)
    return;
  do
  {
    Name = (const char *)MTLPixelFormatGetName();
    v32 = 0;
    v78 = v30;
    do
    {
      v33 = 0;
      v79 = v30;
      do
      {
        v34 = 0x1FFFFFFFFFFFFFD9;
        do
        {
          if (!LODWORD(v30[v34 + 42]))
            goto LABEL_63;
          if (*MEMORY[0x24BDDDAC8])
          {
            if (*MEMORY[0x24BDDDAC8] != 1)
              goto LABEL_63;
            v35 = "BlitUnknown";
            if (v32 <= 5)
              v35 = off_24F795A30[(int)v32];
            v36 = "unknown";
            if (v33 <= 2)
              v36 = off_24F795A60[(int)v33];
            v37 = "false";
            if (v34 == -39)
              v37 = "true";
            v38 = &v30[v34];
            v39 = v30[v34 + 45];
            v40 = v30[v34 + 44];
            v41 = 0.0;
            v42 = 0.0;
            if (v39)
              v42 = (float)v40 / (float)v39;
            v43 = *((_DWORD *)v38 + 96);
            v44 = v38[47];
            if (v43)
              v41 = (float)v44 / (float)v43;
            v45 = &v30[v34];
            v46 = v30[v34 + 51];
            v47 = v30[v34 + 50];
            v48 = 0.0;
            v49 = 0.0;
            if (v46)
              v49 = (float)v47 / (float)v46;
            v50 = *((_DWORD *)v45 + 108);
            v51 = v45[53];
            if (v50)
              v48 = (float)v51 / (float)v50;
            printf("\n\n%s, format=%s, options=%s, fullBlit=%s, minSamples=%u, maxSamples=%u, avgSamples=%f, totalSamples=%llu, countSamples=%u, minBytesPerRow=%u, maxBytesPerRow=%u, avgBytesPerRow=%f, totalBytesPerRow=%llu, countBytesPerRow=%u, minImageBytes=%u, maxImageBytes=%u, avgImageBytes=%f, totalImageBytes=%llu, countImageBytes=%u, minBufferBytes=%u, maxBufferBytes=%u, avgBufferBytes=%f, totalBufferBytes=%llu, countBufferBytes=%u", v35, Name, v36, v37, *((_DWORD *)v38 + 86), *((_DWORD *)v38 + 87), v42, v40, v39, *((_DWORD *)v38 + 92), *((_DWORD *)v38 + 93), v41, v44,
              v43,
              *((_DWORD *)v45 + 98),
              *((_DWORD *)v45 + 99),
              v49,
              v47,
              v46,
              *((_DWORD *)v45 + 104),
              *((_DWORD *)v45 + 105),
              v48,
              v51,
              v50);
          }
          v52 = objc_msgSend(a1, "telemetryLog");
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            v53 = "BlitUnknown";
            if (v32 <= 5)
              v53 = off_24F795A30[(int)v32];
            v54 = "unknown";
            if (v33 <= 2)
              v54 = off_24F795A60[(int)v33];
            if (v34 == -39)
              v55 = "true";
            else
              v55 = "false";
            v56 = &v30[v34];
            v57 = v30[v34 + 45];
            v58 = v30[v34 + 44];
            v59 = 0.0;
            v60 = 0.0;
            if (v57)
              v60 = (float)v58 / (float)v57;
            v61 = *((_DWORD *)v56 + 96);
            v62 = v56[47];
            if (v61)
              v59 = (float)v62 / (float)v61;
            v63 = &v30[v34];
            v64 = v30[v34 + 51];
            v65 = v30[v34 + 50];
            v66 = 0.0;
            v67 = 0.0;
            if (v64)
              v67 = (float)v65 / (float)v64;
            v68 = *((unsigned int *)v63 + 108);
            v69 = v63[53];
            if ((_DWORD)v68)
              v66 = (float)v69 / (float)v68;
            v70 = *((_DWORD *)v56 + 86);
            v71 = *((_DWORD *)v56 + 87);
            v72 = *((_DWORD *)v56 + 92);
            v73 = *((_DWORD *)v56 + 93);
            v74 = *((_DWORD *)v63 + 98);
            v75 = *((_DWORD *)v63 + 99);
            v76 = *((_DWORD *)v63 + 104);
            v77 = *((_DWORD *)v63 + 105);
            *(_DWORD *)buf = 136321026;
            v127 = v68;
            *(_QWORD *)v82 = v53;
            *(_WORD *)&v82[8] = 2080;
            *(_QWORD *)v83 = Name;
            *(_WORD *)&v83[8] = 2080;
            *(_QWORD *)v84 = v54;
            *(_WORD *)&v84[8] = 2080;
            v85 = v55;
            v86 = 1024;
            v87 = v70;
            v88 = 1024;
            v89 = v71;
            v90 = 2048;
            v91 = v60;
            v92 = 2048;
            v93 = v58;
            v94 = 1024;
            v95 = v57;
            v96 = 1024;
            v97 = v72;
            v98 = 1024;
            v99 = v73;
            v100 = 2048;
            v101 = v59;
            v102 = 2048;
            v103 = v62;
            v104 = 1024;
            v105 = v61;
            v106 = 1024;
            v107 = v74;
            v108 = 1024;
            v109 = v75;
            v110 = 2048;
            v111 = v67;
            v112 = 2048;
            v113 = v65;
            v114 = 1024;
            v115 = v64;
            v116 = 1024;
            v117 = v76;
            v118 = 1024;
            v119 = v77;
            v120 = 2048;
            v121 = v66;
            v122 = 2048;
            v123 = v69;
            v124 = 1024;
            v125 = v68;
            _os_log_impl(&dword_22CD98000, v52, OS_LOG_TYPE_DEFAULT, "%s, format=%s, options=%s, fullBlit=%s, minSamples=%u, maxSamples=%u, avgSamples=%f, totalSamples=%llu, countSamples=%u, minBytesPerRow=%u, maxBytesPerRow=%u, avgBytesPerRow=%f, totalBytesPerRow=%llu, countBytesPerRow=%u, minImageBytes=%u, maxImageBytes=%u, avgImageBytes=%f, totalImageBytes=%llu, countImageBytes=%u, minBufferBytes=%u, maxBufferBytes=%u, avgBufferBytes=%f, totalBufferBytes=%llu, countBufferBytes=%u", buf, 0xC2u);
          }
LABEL_63:
          v34 += 13;
        }
        while (v34 * 8);
        ++v33;
        v30 += 39;
      }
      while (v33 != 3);
      ++v32;
      v30 = v79 + 117;
    }
    while (v32 != 6);
    v30 = (_QWORD *)*v78;
  }
  while (*v78);
}

void InitResourceIdentifier(MTLGPUDebugTexture *a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  v2 = -[MTLToolsObject baseObject](a1->super.super.super._device, "baseObject");
  if ((objc_msgSend((id)objc_msgSend(v2, "vendorName"), "containsString:", CFSTR("IG")) & 1) != 0
    || objc_msgSend((id)objc_msgSend(v2, "vendorName"), "containsString:", CFSTR("Intel")))
  {
    v3 = (void *)objc_msgSend(v2, "newBufferWithLength:options:", 8, 0);
    v4 = objc_alloc_init(MEMORY[0x24BDDD4C0]);
    objc_msgSend(v4, "setIndex:", 0);
    objc_msgSend(v4, "setDataType:", 58);
    objc_msgSend(v4, "setAccess:", 1);
    v6[0] = v4;
    v5 = (void *)objc_msgSend(v2, "newArgumentEncoderWithArguments:", objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v6, 1));

    objc_msgSend(v5, "setArgumentBuffer:offset:", v3, 0);
    objc_msgSend(v5, "setTexture:atIndex:", -[MTLGPUDebugTexture baseObject](a1, "baseObject"), 0);

    a1->_identifier = *(_QWORD *)objc_msgSend(v3, "contents");
  }
  else
  {
    a1->_identifier = -[MTLToolsTexture uniqueIdentifier](a1, "uniqueIdentifier");
  }
}

const __CFString *MTLTextureStringFromType(MTLTextureType a1)
{
  if (a1 > MTLTextureTypeTextureBuffer)
    return CFSTR("Unknown");
  else
    return off_24F795A78[a1];
}

void sub_22CE73034(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLLegacySVAccelerationStructureTypeFromDescriptor(MTLAccelerationStructureDescriptor *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 2;
  else
    return 0;
}

const __CFString *MTLLegacySVAccelerationStructureStringFromType(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Unknown");
  if (a1 == 2)
    v1 = CFSTR("MTLInstanceAccelerationStructure");
  if (a1 == 1)
    return CFSTR("MTLPrimitiveAccelerationStructure");
  else
    return v1;
}

double MetalBufferHeap::grow(uint8_t *a1, unint64_t *a2, double *a3, NSObject *a4)
{
  double v4;
  double result;

  v4 = (float)((float)*a2 * 0.00000095367);
  *(_DWORD *)a1 = 134217984;
  *a3 = v4;
  OUTLINED_FUNCTION_0(&dword_22CD98000, a4, (uint64_t)a3, "BufferHeap::MemoryAllocated (MB) - %.2f", a1);
  return result;
}

void MetalBufferHeap::allocBuffer(unint64_t *a1, uint64_t a2, NSObject *a3)
{
  double v3;
  double v4;
  int v5;
  double v6;
  __int16 v7;
  double v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = (float)((float)*a1 * 0.00000095367);
  v4 = (float)((float)*(unint64_t *)(a2 + 120) * 0.00000095367);
  v5 = 134218240;
  v6 = v3;
  v7 = 2048;
  v8 = v4;
  OUTLINED_FUNCTION_2(&dword_22CD98000, a3, (uint64_t)a3, "BufferHeap::MemoryUsed (MB) - %.2f/%.2f", (uint8_t *)&v5);
  OUTLINED_FUNCTION_3();
}

void GPUDebugBufferDescriptorHeap::init(id *a1, NSObject *a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  double v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = objc_msgSend(*a1, "length");
  v5 = 134217984;
  v6 = (float)((float)v3 * 0.00000095367);
  OUTLINED_FUNCTION_0(&dword_22CD98000, a2, v4, "DescriptorHeapSize (MB) - %.2f", (uint8_t *)&v5);
  OUTLINED_FUNCTION_1();
}

void GPUDebugBufferDescriptorHeap::createHandle(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = 134217984;
  v4 = a1;
  OUTLINED_FUNCTION_0(&dword_22CD98000, a2, a3, "DescriptorHeapNewHandle - %llu", (uint8_t *)&v3);
  OUTLINED_FUNCTION_3();
}

void GPUDebugConstantBufferCache::getOrCreateBuffer(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = 134217984;
  v5 = v3;
  OUTLINED_FUNCTION_0(&dword_22CD98000, a2, a3, "ConstantBufferCache::TotalMemory - %llu", (uint8_t *)&v4);
  OUTLINED_FUNCTION_3();
}

void MTLGPUDebugSetValidationChecksOptions(void *a1, NSObject *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4 = 136315138;
  v5 = objc_msgSend(a1, "UTF8String");
  OUTLINED_FUNCTION_0(&dword_22CD98000, a2, v3, "%s", (uint8_t *)&v4);
  OUTLINED_FUNCTION_1();
}

void MTLGPUDebugParsePerPSOList(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = 138412290;
  v4 = a1;
  OUTLINED_FUNCTION_0(&dword_22CD98000, a2, a3, "[METAL SHADER VALIDATION] List content: \"%@\"", (uint8_t *)&v3);
  OUTLINED_FUNCTION_3();
}

void MTLLegacySVSetValidationChecksOptions(void *a1, NSObject *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4 = 136315138;
  v5 = objc_msgSend(a1, "UTF8String");
  OUTLINED_FUNCTION_0(&dword_22CD98000, a2, v3, "%s", (uint8_t *)&v4);
  OUTLINED_FUNCTION_1();
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x24BDAC360](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x24BDAC368](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x24BDAC370](c, data, *(_QWORD *)&len);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x24BDBC190](key, applicationID, keyExistsAndHasValidFormat);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x24BDD86F8](*(_QWORD *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x24BDD88B0](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x24BDD8988](*(_QWORD *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDD89A8](name);
}

CFTypeRef IOSurfaceCopyValue(IOSurfaceRef buffer, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x24BDD8B48](buffer, key);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x24BDD8B80](buffer);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x24BDD8BD0](buffer);
}

uint64_t MTLCreateStructTypeFromArgumentDescriptors()
{
  return MEMORY[0x24BDDD1D8]();
}

uint64_t MTLDataTypeGetAlignment()
{
  return MEMORY[0x24BDDD1F0]();
}

uint64_t MTLDataTypeGetComponentCount()
{
  return MEMORY[0x24BDDD1F8]();
}

uint64_t MTLDataTypeGetComponentType()
{
  return MEMORY[0x24BDDD200]();
}

uint64_t MTLDataTypeGetShaderTypeName()
{
  return MEMORY[0x24BDDD208]();
}

uint64_t MTLDataTypeGetSize()
{
  return MEMORY[0x24BDDD210]();
}

uint64_t MTLDataTypeString()
{
  return MEMORY[0x24BDDD218]();
}

uint64_t MTLDynamicLibraryLoadOptionsFromPipelineOptions()
{
  return MEMORY[0x24BDDD220]();
}

uint64_t MTLEnumerateIndirectResources()
{
  return MEMORY[0x24BDDD228]();
}

uint64_t MTLFunctionTypeString()
{
  return MEMORY[0x24BDDD230]();
}

uint64_t MTLGPUOperationString()
{
  return MEMORY[0x24BDDD238]();
}

uint64_t MTLGetEnvDefault()
{
  return MEMORY[0x24BDDD248]();
}

uint64_t MTLGetTextureLevelInfoForDevice()
{
  return MEMORY[0x24BDDD260]();
}

uint64_t MTLGetTextureLevelInfoForDeviceWithOptions()
{
  return MEMORY[0x24BDDD268]();
}

uint64_t MTLPixelFormatCompatibilityString()
{
  return MEMORY[0x24BDDD368]();
}

uint64_t MTLPixelFormatComputeTotalSizeUsed()
{
  return MEMORY[0x24BDDD370]();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return MEMORY[0x24BDDD388]();
}

uint64_t MTLPixelFormatGetName()
{
  return MEMORY[0x24BDDD390]();
}

uint64_t MTLReadWriteTextureIsSupported()
{
  return MEMORY[0x24BDDD3E0]();
}

uint64_t MTLReleaseAssertionFailure()
{
  return MEMORY[0x24BDDD3E8]();
}

uint64_t MTLReportFailure()
{
  return MEMORY[0x24BDDD3F0]();
}

uint64_t MTLReportFailureTypeEnabled()
{
  return MEMORY[0x24BDDD3F8]();
}

uint64_t MTLSamplerBorderColorString()
{
  return MEMORY[0x24BDDD420]();
}

uint64_t MTLStorageModeString()
{
  return MEMORY[0x24BDDD428]();
}

uint64_t MTLTextureSwizzleKeyToChannels()
{
  return MEMORY[0x24BDDD438]();
}

uint64_t MTLTextureTypeString()
{
  return MEMORY[0x24BDDD448]();
}

uint64_t MTLValidateFeatureSupport()
{
  return MEMORY[0x24BDDD468]();
}

uint64_t MTLVertexAmplificationModeString()
{
  return MEMORY[0x24BDDD478]();
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x24BDD0E08](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x24BDD1240](aClass);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _MTLAdjustMTLSize()
{
  return MEMORY[0x24BDDD998]();
}

uint64_t _MTLCompatibleTextureDataTypeAndPixelFormatInfo()
{
  return MEMORY[0x24BDDD9A0]();
}

uint64_t _MTLGetAttachmentSize()
{
  return MEMORY[0x24BDDD9C8]();
}

uint64_t _MTLHashState()
{
  return MEMORY[0x24BDDD9D0]();
}

uint64_t _MTLMessageContextBegin_()
{
  return MEMORY[0x24BDDD9E0]();
}

uint64_t _MTLMessageContextEnd()
{
  return MEMORY[0x24BDDD9E8]();
}

uint64_t _MTLMessageContextPush_()
{
  return MEMORY[0x24BDDD9F0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t MTLAttributeFormatSize(MTLAttributeFormat a1)
{
  return MEMORY[0x24BDDD9F8](a1);
}

uint64_t _MTLRequestHashToString()
{
  return MEMORY[0x24BDDDA00]();
}

uint64_t MTLAttributeFormatAlignment(MTLAttributeFormat a1)
{
  return MEMORY[0x24BDDDA08](a1);
}

uint64_t MTLAttributeFormatComponentCount(MTLAttributeFormat a1)
{
  return MEMORY[0x24BDDDA10](a1);
}

uint64_t MTLAccelerationStructureInstanceDescriptorSize(MTLAccelerationStructureInstanceDescriptorType a1)
{
  return MEMORY[0x24BDDDA18](a1);
}

uint64_t isValidMTLAccelerationStructureInstanceDescriptorType(MTLAccelerationStructureInstanceDescriptorType a1)
{
  return MEMORY[0x24BDDDA20](a1);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x24BEDABC0](a1, a2, a3);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x24BEDAE50]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB088](this);
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB090](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x24BEDB0A0](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB0A8](this);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete(void *__p)
{
  off_24F793EB8(__p);
}

uint64_t operator delete()
{
  return off_24F793EC0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24F793EC8(__sz);
}

uint64_t operator new()
{
  return off_24F793ED0();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

uint64_t _mtlNumMipmapLevelsForSize()
{
  return MEMORY[0x24BDDDA28]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

int atoi(const char *a1)
{
  return MEMORY[0x24BDAD258](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

size_t compression_encode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x24BEDB988](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(_QWORD *)&algorithm);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x24BDADF18](object);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x24BDADF70](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFB0](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x24BDADFD0](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x24BDAE440](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x24BDAE5F0](a1);
}

uint64_t initLogMode()
{
  return MEMORY[0x24BDDDA50]();
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x24BDAEB30]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x24BDAEC68](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x24BEDCFB0](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x24BEDCFC0]();
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x24BEDD0B0](self, _cmd, offset, atomic);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x24BEDD0D8](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD3D0](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD3F0](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x24BEDD420](location, obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x24BDAF910](a1, a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0000](__str, __endptr, *(_QWORD *)&__base);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x24BDB0518](__s, *(_QWORD *)&__c, __n);
}

