void sub_1CCA55354(char a1, void (*a2)(uint64_t, void *), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  _BYTE *v15;

  if ((a1 & 1) != 0)
  {
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v6 = sub_1CCB637FC();
    sub_1CCA16C20(v6, (uint64_t)qword_1EF9FF4C0);
    v7 = sub_1CCB637D8();
    v8 = sub_1CCB63D48();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1CC9BF000, v7, v8, "FMIPDeviceActionsController: trusted device confirmation confirmed", v9, 2u);
      MEMORY[0x1D17B214C](v9, -1, -1);
    }

    a2(a4, 0);
  }
  else
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v10 = sub_1CCB637FC();
    sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
    v11 = sub_1CCB637D8();
    v12 = sub_1CCB63D30();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPDeviceActionsController: trusted device confirmation declined", v13, 2u);
      MEMORY[0x1D17B214C](v13, -1, -1);
    }

    sub_1CCA5589C();
    v14 = (void *)swift_allocError();
    *v15 = 4;
    a2(a4, v14);

  }
}

uint64_t sub_1CCA55544()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t getEnumTagSinglePayload for FMIPDeviceImageVariant(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPDeviceActionsControllerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1CCA55644 + 4 * byte_1CCB685FB[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1CCA55678 + 4 * byte_1CCB685F6[v4]))();
}

uint64_t sub_1CCA55678(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA55680(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA55688);
  return result;
}

uint64_t sub_1CCA55694(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA5569CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1CCA556A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA556A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPDeviceActionsControllerError()
{
  return &type metadata for FMIPDeviceActionsControllerError;
}

unint64_t sub_1CCA556C8()
{
  unint64_t result;

  result = qword_1EF9E02D8;
  if (!qword_1EF9E02D8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB68824, &type metadata for FMIPDeviceActionsControllerError);
    atomic_store(result, (unint64_t *)&qword_1EF9E02D8);
  }
  return result;
}

uint64_t sub_1CCA55710(_QWORD *a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA54A64(a1, a2, *(void (**)(_QWORD, _QWORD, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1CCA5571C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1CCA55780;
  return v6(a1);
}

uint64_t sub_1CCA55780()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CCA557D0(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA53CB4(a1, a2, *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1CCA557DC()
{
  return sub_1CCA5724C((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1CCA557E8(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA53204(a1, a2, *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1CCA557F4()
{
  uint64_t v0;

  swift_release();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA55830(uint64_t a1)
{
  return sub_1CCA55A34(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA53880);
}

uint64_t sub_1CCA5583C()
{
  return sub_1CCA5724C((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

void sub_1CCA55848(void *a1)
{
  uint64_t v1;

  sub_1CCA52DA4(a1, *(void (**)(_QWORD *, _QWORD, void *, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1CCA55858(void *a1)
{
  uint64_t v1;

  return sub_1CCA52854(a1, *(void (**)(uint64_t *, uint64_t, _QWORD, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1CCA55864()
{
  return sub_1CCA5724C((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCA55870(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA5232C(a1, a2, *(void (**)(char *, uint64_t, id, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1CCA5587C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA55890(void *a1)
{
  uint64_t v1;

  return sub_1CCA52628(a1, *(uint64_t (**)(uint64_t, void *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

unint64_t sub_1CCA5589C()
{
  unint64_t result;

  result = qword_1EF9E02F0;
  if (!qword_1EF9E02F0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB68874, &type metadata for FMIPDeviceActionsControllerError);
    atomic_store(result, &qword_1EF9E02F0);
  }
  return result;
}

uint64_t sub_1CCA558E0()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA5592C()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = swift_task_alloc();
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1CCA2F5C8;
  *(_OWORD *)(v2 + 80) = v4;
  *(_OWORD *)(v2 + 96) = v5;
  *(_OWORD *)(v2 + 64) = v3;
  return swift_task_switch();
}

uint64_t sub_1CCA55994(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1CCA2F5C8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF9E0308 + dword_1EF9E0308))(a1, v4);
}

uint64_t sub_1CCA55A08(void *a1)
{
  return sub_1CCA55C30(a1, "FMIPDeviceActionsController: lost mode action failed %s", (uint64_t)&unk_1E88F1A90, (uint64_t)&unk_1EF9E0330);
}

uint64_t sub_1CCA55A28(uint64_t a1)
{
  return sub_1CCA55A34(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA517A4);
}

uint64_t sub_1CCA55A34(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_1CCA55A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1CCA2FE0C;
  *(_OWORD *)(v2 + 64) = v3;
  return swift_task_switch();
}

uint64_t sub_1CCA55AB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1CCA2FE0C;
  *(_OWORD *)(v2 + 64) = v3;
  return swift_task_switch();
}

uint64_t sub_1CCA55B10()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA55B64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(v0 + 80);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 32);
  v5 = *(_OWORD *)(v0 + 48);
  v6 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_1CCA2FE0C;
  *(_QWORD *)(v3 + 112) = v2;
  *(_OWORD *)(v3 + 80) = v5;
  *(_OWORD *)(v3 + 96) = v6;
  *(_OWORD *)(v3 + 64) = v4;
  return swift_task_switch();
}

uint64_t sub_1CCA55BD8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CCA55C14(void *a1)
{
  return sub_1CCA55C30(a1, "FMIPDeviceActionsController: notify subscription failed %s", (uint64_t)&unk_1E88F1BA8, (uint64_t)&unk_1EF9E0360);
}

uint64_t sub_1CCA55C30(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1CCA514C4(a1, *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(void **)(v4 + 48), a2, a3, a4);
}

uint64_t sub_1CCA55C68()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CCA55CAC(uint64_t a1)
{
  return sub_1CCA55E14(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA50B10);
}

uint64_t sub_1CCA55CBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1CCA2FE0C;
  *(_OWORD *)(v2 + 64) = v3;
  return swift_task_switch();
}

uint64_t sub_1CCA55D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1CCA2FE0C;
  *(_OWORD *)(v2 + 64) = v3;
  return swift_task_switch();
}

uint64_t sub_1CCA55D80()
{
  return sub_1CCA5724C((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1CCA55D8C(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA4FDC8(a1, a2, *(void (**)(uint64_t *, uint64_t, void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1CCA55D9C(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA4F7C8(a1, a2, *(uint64_t (**)(uint64_t *, uint64_t, void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), "FMIPDeviceActionsController: performNotifyWhenDetached action response received: %s", "FMIPDeviceActionsController: error received for notify request: %s", 0);
}

uint64_t sub_1CCA55DCC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCA55E08(uint64_t a1)
{
  return sub_1CCA55E14(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA4EFD4);
}

uint64_t sub_1CCA55E14(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_1CCA55E28()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA55E5C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1CCA4F2E0(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v4 + 40));
}

uint64_t sub_1CCA55E8C(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA4F7C8(a1, a2, *(uint64_t (**)(uint64_t *, uint64_t, void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), "FMIPDeviceActionsController: performShowContactDetails action response received: %s", "FMIPDeviceActionsController: error received for show contact details request: %s", 1);
}

uint64_t sub_1CCA55EBC(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
    __asm { BR              X8 }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1CCA560A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FMIPItemGroup();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FMIPDevice();
  sub_1CC9EAB74(a1 + *(int *)(v9 + 128), (uint64_t)v4, &qword_1ED8A8C30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1CC9C3E84((uint64_t)v4, &qword_1ED8A8C30);
    if (*(_BYTE *)(a1 + *(int *)(v9 + 136)) == 5)
    {
      v10 = *(_QWORD *)(a1 + 16);
      swift_bridgeObjectRetain();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    sub_1CC9FED60((uint64_t)v4, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v10 = *((_QWORD *)v8 + 1);
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  }
  return v10;
}

uint64_t sub_1CCA56200(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA4E8CC(a1, a2, *(uint64_t (**)(uint64_t *, uint64_t, void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), &qword_1EF9E0378, "FMIPDeviceActionsController: lost mode response received: %s", (void (*)(uint64_t *__return_ptr, uint64_t))sub_1CCB16034, "FMIPDeviceActionsController: error received for lost mode request: %s");
}

uint64_t sub_1CCA56248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1CCB63604();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA562F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(sub_1CCB63604() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = v1[6];
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_1CCA2FE0C;
  return sub_1CCA4D01C(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1CCA563C8(uint64_t a1)
{
  return sub_1CCA564A0(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA4D444);
}

uint64_t sub_1CCA563D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_1CCB63604();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CCA56494(uint64_t a1)
{
  return sub_1CCA564A0(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA4DA44);
}

uint64_t sub_1CCA564A0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD *)(sub_1CCB63604() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a2(a1, *(_QWORD *)(v2 + 16), v2 + v5, *(_QWORD *)(v2 + v6), *(_QWORD *)(v2 + v6 + 8), *(_QWORD *)(v2 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1CCA56524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1CCA2FE0C;
  *(_OWORD *)(v2 + 64) = v3;
  return swift_task_switch();
}

uint64_t sub_1CCA56588()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CCA565BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1CCA2FE0C;
  *(_OWORD *)(v2 + 64) = v3;
  return swift_task_switch();
}

uint64_t sub_1CCA56620(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA4AFD8(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t *, uint64_t, _QWORD, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD **)(v2 + 40));
}

uint64_t sub_1CCA5662C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1CCA56654()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1CCA56688(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1CCA4BAF0(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t *, uint64_t, _QWORD, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1CCA56694()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_1CCA566B8()
{
  uint64_t v0;

  return sub_1CCAE7E14(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_1CCA566C0()
{
  return swift_deallocObject();
}

_BYTE **sub_1CCA566D0(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1CCA394F8(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_1CCA566D8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA566E8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_1CCA39508(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1CCA566F0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_retain();
}

uint64_t sub_1CCA566FC()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA5670C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA5671C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA5672C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56744()
{
  uint64_t v0;

  return sub_1CCAE7D50(*(void (**)(uint64_t))(v0 + 16));
}

uint64_t sub_1CCA5674C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA5675C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56770()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56780()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56794()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA567A4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA567B4()
{
  return swift_deallocObject();
}

void sub_1CCA567C4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

uint64_t sub_1CCA567D0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1CCA71664(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

uint64_t sub_1CCA567D8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA567E8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA567FC()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA5680C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA5681C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA5682C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA5683C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56850()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56860()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56870()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56880()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56890()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA568A4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA568B4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA568C4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA568D4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA568E4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA568F8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56908()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA5691C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA5692C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA5693C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA5694C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA5695C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56970()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56980()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56994()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA569A4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA569B4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA569C4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA569D4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA569E8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA569F8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56A08()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56A18()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56A28()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56A3C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56A4C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56A60()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56A70()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56A84()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56A94()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56AA4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56AB4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56AC4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56AD8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56AE8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56AF8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56B08()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56B18()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56B2C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56B3C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56B50()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56B60()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56B74()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56B84()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56B94()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56BA4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56BB4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56BC8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56BD8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56BE8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56BF8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56C08()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56C1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1CCB63604();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1CCA56C7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1CCB63604();
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80)), v3);
}

uint64_t sub_1CCA56CC0()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56CD0()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA56CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1CCB63604();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA56D74(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(sub_1CCB63604() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1CCA4A7C8(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(void (**)(char **, uint64_t, id, uint64_t))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_1CCA56DCC(uint64_t a1, uint64_t a2, _QWORD *a3, void (*a4)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, void *, uint64_t), uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(_QWORD *, void (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  void (*v40)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, void *, uint64_t);
  _QWORD *v41;

  v41 = a3;
  v15 = type metadata accessor for FMIPDevice();
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_allocObject();
  v40 = a4;
  *(_QWORD *)(v18 + 16) = a4;
  *(_QWORD *)(v18 + 24) = a5;
  *(_QWORD *)(v18 + 32) = a6;
  *(_QWORD *)(v18 + 40) = a7;
  v19 = *(_OWORD *)(a8 + 48);
  *(_OWORD *)(v18 + 80) = *(_OWORD *)(a8 + 32);
  *(_OWORD *)(v18 + 96) = v19;
  *(_OWORD *)(v18 + 112) = *(_OWORD *)(a8 + 64);
  *(_QWORD *)(v18 + 128) = *(_QWORD *)(a8 + 80);
  v20 = *(_OWORD *)(a8 + 16);
  *(_OWORD *)(v18 + 48) = *(_OWORD *)a8;
  *(_OWORD *)(v18 + 64) = v20;
  v21 = *(unsigned __int8 *)(a2 + 35);
  v22 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200);
  swift_retain();
  swift_retain();
  swift_retain();
  v23 = sub_1CC9DA35C(a8);
  if ((v22(v23) & 1) != 0 && v21)
  {
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v24 = sub_1CCB637FC();
    sub_1CCA16C20(v24, (uint64_t)qword_1EF9FF4C0);
    v25 = sub_1CCB637D8();
    v26 = sub_1CCB63D48();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1CC9BF000, v25, v26, "FMIPDeviceActionsController: verifying trusted state", v27, 2u);
      MEMORY[0x1D17B214C](v27, -1, -1);
    }

    sub_1CCA0BEEC(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    type metadata accessor for FMIPVerifyTrustedStateRequest();
    v28 = swift_allocObject();
    sub_1CCA0BEEC((uint64_t)v17, v28 + qword_1EF9FF628, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v29 = sub_1CCA601C8(0xD000000000000013, 0x80000001CCB79710, 0, 0, 1);
    sub_1CCA0BF30((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v31 = v41[9];
    v30 = v41[10];
    sub_1CCA04DDC(v41 + 6, v31);
    v32 = (_QWORD *)swift_allocObject();
    v32[2] = sub_1CCA571F8;
    v32[3] = v18;
    v32[4] = a1;
    v33 = *(void (**)(_QWORD *, void (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t))(v30 + 56);
    v34 = type metadata accessor for FMIPVerifyTrustedStateResponse();
    swift_retain();
    swift_retain();
    v33(v29, sub_1CCA5720C, v32, v34, v31, v30);
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v36 = sub_1CCB637FC();
    sub_1CCA16C20(v36, (uint64_t)qword_1EF9FF4C0);
    v37 = sub_1CCB637D8();
    v38 = sub_1CCB63D48();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v39 = 0;
      _os_log_impl(&dword_1CC9BF000, v37, v38, "FMIPDeviceActionsController: no need to verify trusted state", v39, 2u);
      MEMORY[0x1D17B214C](v39, -1, -1);
    }

    sub_1CCA412CC(a1, 0, v40, a5, a6, a7, a8);
    return swift_release();
  }
}

uint64_t sub_1CCA5719C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCA571F8(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA412CC(a1, a2, *(void (**)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD **)(v2 + 40), v2 + 48);
}

void sub_1CCA5720C(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1CCA54E44(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

void sub_1CCA5721C(char a1)
{
  uint64_t v1;

  sub_1CCA55354(a1, *(void (**)(uint64_t, void *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1CCA57228()
{
  return sub_1CCA5724C((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

void sub_1CCA57234(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1CCA416E8(a1, a2, *(void (**)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD **)(v2 + 40));
}

uint64_t sub_1CCA57240()
{
  return sub_1CCA5724C((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1CCA5724C(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  swift_release();
  a1(*(_QWORD *)(v1 + 40));
  return swift_deallocObject();
}

void sub_1CCA5728C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5;

  sub_1CCA53FB0(a1, a2, a3, a4, a5, *(void (**)(uint64_t, id))(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
}

uint64_t sub_1CCA572B4()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void sub_1CCA572E0(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1CCA3996C(a1, a2, *(void (**)(_QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

void sub_1CCA572F0(int a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  sub_1CCA54424(a1, a2, a3, *(void (**)(uint64_t, id))(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
}

uint64_t sub_1CCA57300(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA4E8CC(a1, a2, *(uint64_t (**)(uint64_t *, uint64_t, void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), &qword_1EF9E03D8, "FMIPDeviceActionsController: cancel erase response received: %s", (void (*)(uint64_t *__return_ptr, uint64_t))sub_1CCAF7184, "FMIPDeviceActionsController: error received for cancel erase request: %s");
}

uint64_t sub_1CCA5734C(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA4E8CC(a1, a2, *(uint64_t (**)(uint64_t *, uint64_t, void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), &qword_1EF9E03D0, "FMIPDeviceActionsController: erase response received: %s", (void (*)(uint64_t *__return_ptr, uint64_t))sub_1CCAC46F4, "FMIPDeviceActionsController: error received for erase request: %s");
}

uint64_t sub_1CCA57398(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA4E8CC(a1, a2, *(uint64_t (**)(uint64_t *, uint64_t, void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), &qword_1EF9E03C8, "FMIPDeviceActionsController: lock response received: %s", (void (*)(uint64_t *__return_ptr, uint64_t))sub_1CCB36098, "FMIPDeviceActionsController: error received for lock request: %s");
}

uint64_t FMIPAudioChannel.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAudioChannel.isAvailable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t FMIPAudioChannel.isPlaying.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t FMIPAudioChannel.isMuted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 18);
}

void sub_1CCA575CC(char *a1)
{
  sub_1CCB1D6A0(*a1);
}

void sub_1CCA575D8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCA5761C()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCA5768C()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCA576C0()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCA5771C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCA5775C()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA577CC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCA57A94();
  *a1 = result;
  return result;
}

uint64_t sub_1CCA577F8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCA57820 + 4 * byte_1CCB6899C[*v0]))();
}

void sub_1CCA57820(_QWORD *a1@<X8>)
{
  *a1 = 0x676E6979616C70;
  a1[1] = 0xE700000000000000;
}

void sub_1CCA5783C(_QWORD *a1@<X8>)
{
  *a1 = 0x6C62616C69617661;
  a1[1] = 0xE900000000000065;
}

void sub_1CCA5785C(_QWORD *a1@<X8>)
{
  *a1 = 0x646574756DLL;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_1CCA57874@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCA57A94();
  *a1 = result;
  return result;
}

void sub_1CCA57898(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1CCA578A4()
{
  sub_1CC9ED240();
  return sub_1CCB643D8();
}

uint64_t sub_1CCA578CC()
{
  sub_1CC9ED240();
  return sub_1CCB643E4();
}

uint64_t _s8FMIPCore16FMIPAudioChannelV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  char v9;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a1 + 17);
  v4 = *(unsigned __int8 *)(a1 + 18);
  v5 = *(unsigned __int8 *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 17);
  v7 = *(unsigned __int8 *)(a2 + 18);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    result = 0;
    if (v4 != v7)
      return result;
    goto LABEL_9;
  }
  v9 = sub_1CCB642A0();
  result = 0;
  if ((v9 & 1) != 0 && ((v4 ^ v7) & 1) == 0)
  {
LABEL_9:
    if (((v3 ^ v6) & 1) == 0)
      return v2 ^ v5 ^ 1u;
  }
  return result;
}

uint64_t assignWithCopy for FMIPAudioChannel(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  return a1;
}

uint64_t assignWithTake for FMIPAudioChannel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  return a1;
}

unint64_t sub_1CCA57A50()
{
  unint64_t result;

  result = qword_1EF9E03F8;
  if (!qword_1EF9E03F8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB68B54, &type metadata for FMIPAudioChannel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E03F8);
  }
  return result;
}

uint64_t sub_1CCA57A94()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1CCA57ADC(char *a1, char *a2)
{
  return sub_1CCB1AD08(*a1, *a2);
}

uint64_t sub_1CCA57AE8()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA57B7C()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA57BEC()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA57C7C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1CCA57CD8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x65447473614C7369;
  if (*v1)
    v2 = 0x6574737572547369;
  v3 = 0xEC00000065636976;
  if (*v1)
    v3 = 0xEF65636976654464;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1CCA57D2C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6574737572547369;
  else
    return 0x65447473614C7369;
}

uint64_t sub_1CCA57D7C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1CCA57DDC()
{
  sub_1CCA58424();
  return sub_1CCB643D8();
}

uint64_t sub_1CCA57E04()
{
  sub_1CCA58424();
  return sub_1CCB643E4();
}

uint64_t sub_1CCA57E2C(_QWORD *a1)
{
  swift_allocObject();
  return sub_1CCA57E74(a1);
}

uint64_t sub_1CCA57E74(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD v22[2];
  uint8_t *v23;
  uint64_t v24;
  os_log_t v25;
  uint64_t v26[7];

  v3 = v1;
  v5 = sub_1CCA14E90(&qword_1EF9E04F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA58424();
  swift_retain();
  sub_1CCB643B4();
  if (v2)
  {
    swift_release();
    sub_1CCA01CA0((uint64_t)a1);
    type metadata accessor for FMIPVerifyTrustedStateResponse();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v26[0]) = 0;
    v9 = sub_1CCB6415C();
    LOBYTE(v26[0]) = 1;
    v10 = sub_1CCB6415C();
    *(_BYTE *)(v1 + 56) = v9 & 1;
    *(_BYTE *)(v1 + 57) = v10 & 1;
    swift_release();
    sub_1CC9EBC94((uint64_t)a1, (uint64_t)v26);
    v3 = sub_1CC9CA3D0(v26);
    v11 = qword_1ED8AA630;
    swift_retain();
    if (v11 != -1)
      swift_once();
    v12 = sub_1CCB637FC();
    sub_1CCA16C20(v12, (uint64_t)qword_1ED8AD7F8);
    swift_retain_n();
    v13 = sub_1CCB637D8();
    v14 = sub_1CCB63D48();
    if (os_log_type_enabled(v13, v14))
    {
      v25 = v13;
      v15 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v26[0] = v24;
      v23 = v15;
      *(_DWORD *)v15 = 136315138;
      v22[1] = v15 + 4;
      v16 = sub_1CCA581D8();
      v26[6] = sub_1CCA0CB60(v16, v17, v26);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      v13 = v25;
      v18 = v14;
      v19 = v23;
      _os_log_impl(&dword_1CC9BF000, v25, v18, "FMIPVerifyTrustedStateResponse: initialized with coder %s", v23, 0xCu);
      v20 = v24;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v20, -1, -1);
      MEMORY[0x1D17B214C](v19, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1CCA01CA0((uint64_t)a1);
    swift_release();
  }
  return v3;
}

uint64_t sub_1CCA581D8()
{
  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CC9E6BA4();
  sub_1CCB63A9C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 60;
}

uint64_t sub_1CCA583B0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FMIPVerifyTrustedStateResponse()
{
  return objc_opt_self();
}

uint64_t sub_1CCA58404()
{
  return sub_1CCA581D8();
}

unint64_t sub_1CCA58424()
{
  unint64_t result;

  result = qword_1EF9E04F8;
  if (!qword_1EF9E04F8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB68D64, &type metadata for FMIPVerifyTrustedStateResponse.FMIPVerifyTrustedStateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E04F8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPVerifyTrustedStateResponse.FMIPVerifyTrustedStateCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCA584B4 + 4 * byte_1CCB68BD5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCA584E8 + 4 * byte_1CCB68BD0[v4]))();
}

uint64_t sub_1CCA584E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA584F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA584F8);
  return result;
}

uint64_t sub_1CCA58504(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA5850CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCA58510(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA58518(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPVerifyTrustedStateResponse.FMIPVerifyTrustedStateCodingKeys()
{
  return &type metadata for FMIPVerifyTrustedStateResponse.FMIPVerifyTrustedStateCodingKeys;
}

unint64_t sub_1CCA58538()
{
  unint64_t result;

  result = qword_1EF9E0500;
  if (!qword_1EF9E0500)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB68D3C, &type metadata for FMIPVerifyTrustedStateResponse.FMIPVerifyTrustedStateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E0500);
  }
  return result;
}

unint64_t sub_1CCA58580()
{
  unint64_t result;

  result = qword_1EF9E0508;
  if (!qword_1EF9E0508)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB68C74, &type metadata for FMIPVerifyTrustedStateResponse.FMIPVerifyTrustedStateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E0508);
  }
  return result;
}

unint64_t sub_1CCA585C8()
{
  unint64_t result;

  result = qword_1EF9E0510;
  if (!qword_1EF9E0510)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB68C9C, &type metadata for FMIPVerifyTrustedStateResponse.FMIPVerifyTrustedStateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E0510);
  }
  return result;
}

uint64_t sub_1CCA5860C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = sub_1CCB63820();
  v21 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1CCB63868();
  v9 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v12 = sub_1CCB637FC();
  sub_1CCA16C20(v12, (uint64_t)qword_1ED8AD7F8);
  v13 = sub_1CCB637D8();
  v14 = sub_1CCB63D48();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1CC9BF000, v13, v14, "FMIPSafeLocationRefreshingController: Manually refreshing Safe Locations", v15, 2u);
    MEMORY[0x1D17B214C](v15, -1, -1);
  }

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v3;
  v16[3] = a1;
  v16[4] = a2;
  aBlock[4] = sub_1CCA58E00;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F40E8;
  v17 = _Block_copy(aBlock);
  swift_retain();
  sub_1CC9DF994(a1);
  sub_1CCB63844();
  v22 = MEMORY[0x1E0DEE9D8];
  sub_1CCA248D4();
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA1FC64();
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v11, v8, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v20);
  return swift_release();
}

void sub_1CCA5888C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  _QWORD *v7;
  void *v8;
  _QWORD v9[6];

  v6 = *(void **)(a1 + 56);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v9[4] = sub_1CCA58E44;
  v9[5] = v7;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = sub_1CC9C3100;
  v9[3] = &unk_1E88F4138;
  v8 = _Block_copy(v9);
  swift_retain();
  sub_1CC9DF994(a2);
  swift_release();
  objc_msgSend(v6, sel_safeLocationsForSeparationMonitoring_, v8);
  _Block_release(v8);
}

uint64_t sub_1CCA58968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v7 = sub_1CCB63820();
  v28 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1CCB63868();
  v10 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v13 = sub_1CCB637FC();
  sub_1CCA16C20(v13, (uint64_t)qword_1ED8AD7F8);
  v14 = sub_1CCB637D8();
  v15 = sub_1CCB63D48();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v26 = v9;
    v17 = a3;
    v18 = a4;
    v19 = v10;
    v20 = a1;
    v21 = v16;
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1CC9BF000, v14, v15, "FMIPSafeLocationRefreshingController: Manually refreshed Safe Locations", v16, 2u);
    v22 = v21;
    a1 = v20;
    v10 = v19;
    a4 = v18;
    a3 = v17;
    v9 = v26;
    MEMORY[0x1D17B214C](v22, -1, -1);
  }

  sub_1CC9CB49C(a1, 1);
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = a3;
  *(_QWORD *)(v23 + 24) = a4;
  aBlock[4] = sub_1CCA24220;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F4188;
  v24 = _Block_copy(aBlock);
  sub_1CC9DF994(a3);
  sub_1CCB63844();
  v29 = MEMORY[0x1E0DEE9D8];
  sub_1CCA248D4();
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA1FC64();
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v12, v9, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v27);
  return swift_release();
}

uint64_t sub_1CCA58C28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t result;
  uint64_t v9;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v4 = sub_1CCB637FC();
  sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
  v5 = sub_1CCB637D8();
  v6 = sub_1CCB63D48();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPSafeLocationRefreshingController: Completely processed safe location updates.", v7, 2u);
    MEMORY[0x1D17B214C](v7, -1, -1);
  }

  result = MEMORY[0x1D17B2218](a1 + 16);
  if (result)
  {
    v9 = result;
    swift_retain();
    sub_1CCA81368(a2, (uint64_t)sub_1CCA58DF4, v9);
    return swift_release_n();
  }
  return result;
}

uint64_t sub_1CCA58D44()
{
  uint64_t v0;

  sub_1CCA2F610(v0 + 16);
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA58D88()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCA58DB4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1CCA58DC0()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCA58DEC()
{
  uint64_t v0;

  return sub_1CCA58C28(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCA58DF4(uint64_t a1)
{
  uint64_t v1;

  return sub_1CCAA2ECC(a1, v1);
}

void sub_1CCA58E00()
{
  uint64_t *v0;

  sub_1CCA5888C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1CCA58E10()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA58E44(uint64_t a1)
{
  uint64_t *v1;

  return sub_1CCA58968(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1CCA58E50()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA58E7C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1CCA58EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t sub_1CCA58EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t sub_1CCA58EC8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_1CCA58ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_1CCA58ED8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_1CCA58EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t sub_1CCA58EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t sub_1CCA58EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t sub_1CCA58EF8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t sub_1CCA58F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

uint64_t sub_1CCA58F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t storeEnumTagSinglePayload for FMIPInteractionControllerMonitor(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CCA58F50 + 4 * byte_1CCB68E60[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CCA58F70 + 4 * byte_1CCB68E65[v4]))();
}

_BYTE *sub_1CCA58F50(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CCA58F70(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCA58F78(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCA58F80(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCA58F88(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCA58F90(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FMIPInteractionControllerMonitor()
{
  return &type metadata for FMIPInteractionControllerMonitor;
}

uint64_t sub_1CCA58FAC()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  return sub_1CCB64384();
}

uint64_t sub_1CCA59000()
{
  return sub_1CCB639F4();
}

uint64_t sub_1CCA5901C()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  return sub_1CCB64384();
}

uint64_t sub_1CCA5906C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1CCA590BC(_QWORD *a1@<X8>)
{
  *a1 = 0x6E756F5379616C70;
  a1[1] = 0xE900000000000064;
}

unint64_t sub_1CCA590E0()
{
  unint64_t result;

  result = qword_1EF9E0590[0];
  if (!qword_1EF9E0590[0])
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB68F6C, &type metadata for FMIPInteractionControllerMonitor);
    atomic_store(result, qword_1EF9E0590);
  }
  return result;
}

_QWORD *FMIPDeviceImageCache.__allocating_init(converter:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return FMImageCache.init(converter:)(a1, a2);
}

uint64_t FMIPDeviceImageCache.__deallocating_deinit()
{
  FMImageCache.deinit();
  return swift_deallocClassInstance();
}

uint64_t FMIPStandalonePart.identifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t FMIPStandalonePart.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1CCA591C0(char *a1, char *a2)
{
  return sub_1CCB1CF98(*a1, *a2);
}

uint64_t sub_1CCA591CC()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA59248()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA592A0()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA59318@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1CCA59374(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1701667182;
  if (!*v1)
    v2 = 0x696669746E656469;
  v3 = 0xEA00000000007265;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1CCA593B0()
{
  _BYTE *v0;

  if (*v0)
    return 1701667182;
  else
    return 0x696669746E656469;
}

uint64_t sub_1CCA593E8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1CCA59448()
{
  sub_1CCA595E8();
  return sub_1CCB643D8();
}

uint64_t sub_1CCA59470()
{
  sub_1CCA595E8();
  return sub_1CCB643E4();
}

uint64_t FMIPStandalonePart.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v5 = sub_1CCA14E90(&qword_1EF9E0618);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA595E8();
  sub_1CCB643B4();
  if (!v2)
  {
    v16 = 0;
    v9 = sub_1CCB64174();
    v15 = 1;
    v11 = sub_1CCB64150();
    v13 = v12;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
    a2[2] = v13;
  }
  return sub_1CCA01CA0((uint64_t)a1);
}

unint64_t sub_1CCA595E8()
{
  unint64_t result;

  result = qword_1EF9E0620;
  if (!qword_1EF9E0620)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB691D0, &type metadata for FMIPStandalonePart.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E0620);
  }
  return result;
}

uint64_t FMIPStandalonePart.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  char v12;

  v4 = sub_1CCA14E90(&qword_1EF9E0628);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 8);
  v10[0] = *(_QWORD *)(v1 + 16);
  v10[1] = v8;
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA595E8();
  sub_1CCB643CC();
  v12 = 0;
  sub_1CCB64204();
  if (!v2)
  {
    v11 = 1;
    sub_1CCB641E0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t static FMIPStandalonePart.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != *a2)
    return 0;
  if (a1[1] == a2[1] && a1[2] == a2[2])
    return 1;
  else
    return sub_1CCB642A0();
}

uint64_t FMIPStandalonePart.hash(into:)()
{
  sub_1CCB64348();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t FMIPStandalonePart.hashValue.getter()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA59858@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FMIPStandalonePart.init(from:)(a1, a2);
}

uint64_t sub_1CCA5986C(_QWORD *a1)
{
  return FMIPStandalonePart.encode(to:)(a1);
}

uint64_t sub_1CCA59880(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != *a2)
    return 0;
  if (a1[1] == a2[1] && a1[2] == a2[2])
    return 1;
  else
    return sub_1CCB642A0();
}

uint64_t sub_1CCA598C8()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA59938()
{
  sub_1CCB64348();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA59988()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

unint64_t sub_1CCA599F8()
{
  unint64_t result;

  result = qword_1EF9E0630;
  if (!qword_1EF9E0630)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPStandalonePart, &type metadata for FMIPStandalonePart);
    atomic_store(result, (unint64_t *)&qword_1EF9E0630);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FMIPStandalonePart(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for FMIPStandalonePart()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for FMIPStandalonePart(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FMIPStandalonePart(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPStandalonePart(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPStandalonePart(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPStandalonePart()
{
  return &type metadata for FMIPStandalonePart;
}

uint64_t storeEnumTagSinglePayload for FMIPStandalonePart.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCA59BDC + 4 * byte_1CCB68FE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCA59C10 + 4 * asc_1CCB68FE0[v4]))();
}

uint64_t sub_1CCA59C10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA59C18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA59C20);
  return result;
}

uint64_t sub_1CCA59C2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA59C34);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCA59C38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA59C40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPStandalonePart.CodingKeys()
{
  return &type metadata for FMIPStandalonePart.CodingKeys;
}

unint64_t sub_1CCA59C60()
{
  unint64_t result;

  result = qword_1EF9E0638;
  if (!qword_1EF9E0638)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB691A8, &type metadata for FMIPStandalonePart.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E0638);
  }
  return result;
}

unint64_t sub_1CCA59CA8()
{
  unint64_t result;

  result = qword_1EF9E0640;
  if (!qword_1EF9E0640)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB690E0, &type metadata for FMIPStandalonePart.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E0640);
  }
  return result;
}

unint64_t sub_1CCA59CF0()
{
  unint64_t result;

  result = qword_1EF9E0648;
  if (!qword_1EF9E0648)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB69108, &type metadata for FMIPStandalonePart.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E0648);
  }
  return result;
}

uint64_t sub_1CCA59D38()
{
  return swift_bridgeObjectRelease();
}

uint64_t FMReverseGeocodingRequest.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

id FMReverseGeocodingRequest.location.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t FMReverseGeocodingRequest.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for FMReverseGeocodingRequest() + 24);
  return sub_1CCA24964(v3, a1);
}

uint64_t FMReverseGeocodingRequest.isRealtimeLocation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FMReverseGeocodingRequest() + 28));
}

uint64_t FMReverseGeocodingRequest.isCoarseLocation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FMReverseGeocodingRequest() + 32));
}

uint64_t FMReverseGeocodingRequest.geoHash.getter()
{
  return sub_1CC9F0100();
}

uint64_t FMReverseGeocodingRequest.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = sub_1CCB63634();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  v9 = *(id *)(v0 + 16);
  sub_1CCB63DFC();

  v10 = type metadata accessor for FMReverseGeocodingRequest();
  sub_1CCA24964(v1 + *(int *)(v10 + 24), (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_1CCB64354();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_1CCB64354();
    sub_1CC9CAA38(&qword_1EF9E0660, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E58]);
    sub_1CCB63940();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  sub_1CCB64354();
  return sub_1CCB64354();
}

uint64_t FMReverseGeocodingRequest.hashValue.getter()
{
  sub_1CCB6433C();
  FMReverseGeocodingRequest.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCA59FF4()
{
  sub_1CCB6433C();
  FMReverseGeocodingRequest.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCA5A034()
{
  sub_1CCB6433C();
  FMReverseGeocodingRequest.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCA5A074()
{
  sub_1CCB6433C();
  sub_1CCB64360();
  return sub_1CCB64384();
}

uint64_t sub_1CCA5A0B8()
{
  return sub_1CCB64360();
}

uint64_t sub_1CCA5A0E0()
{
  sub_1CCB6433C();
  sub_1CCB64360();
  return sub_1CCB64384();
}

uint64_t _s8FMIPCore25FMReverseGeocodingRequestV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  _BYTE *v25;
  void (*v26)(_BYTE *, uint64_t);
  _BYTE v28[12];
  int v29;
  uint64_t v30;
  _BYTE *v31;

  v4 = sub_1CCB63634();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_1CCA14E90(&qword_1EF9E0718);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = &v28[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = &v28[-v16];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v28[-v18];
  if (*a1 == *a2 && a1[1] == a2[1] || (v20 = sub_1CCB642A0(), v21 = 0, (v20 & 1) != 0))
  {
    v31 = v7;
    sub_1CCA5AA94();
    if ((sub_1CCB63DF0() & 1) != 0)
    {
      v22 = type metadata accessor for FMReverseGeocodingRequest();
      sub_1CCA24964((uint64_t)a1 + *(int *)(v22 + 24), (uint64_t)v19);
      v30 = v22;
      sub_1CCA24964((uint64_t)a2 + *(int *)(v22 + 24), (uint64_t)v17);
      v23 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_1CCA24964((uint64_t)v19, (uint64_t)v10);
      sub_1CCA24964((uint64_t)v17, v23);
      v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v24((uint64_t)v10, 1, v4) == 1)
      {
        sub_1CC9C3E84((uint64_t)v17, (uint64_t *)&unk_1ED8A8B10);
        sub_1CC9C3E84((uint64_t)v19, (uint64_t *)&unk_1ED8A8B10);
        if (v24(v23, 1, v4) == 1)
        {
          sub_1CC9C3E84((uint64_t)v10, (uint64_t *)&unk_1ED8A8B10);
          goto LABEL_12;
        }
        goto LABEL_10;
      }
      sub_1CCA24964((uint64_t)v10, (uint64_t)v14);
      if (v24(v23, 1, v4) == 1)
      {
        sub_1CC9C3E84((uint64_t)v17, (uint64_t *)&unk_1ED8A8B10);
        sub_1CC9C3E84((uint64_t)v19, (uint64_t *)&unk_1ED8A8B10);
        (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v14, v4);
LABEL_10:
        sub_1CC9C3E84((uint64_t)v10, &qword_1EF9E0718);
        goto LABEL_13;
      }
      v25 = v31;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v31, v23, v4);
      sub_1CC9CAA38(&qword_1EF9E0720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E60]);
      v29 = sub_1CCB63958();
      v26 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
      v26(v25, v4);
      sub_1CC9C3E84((uint64_t)v17, (uint64_t *)&unk_1ED8A8B10);
      sub_1CC9C3E84((uint64_t)v19, (uint64_t *)&unk_1ED8A8B10);
      v26(v14, v4);
      sub_1CC9C3E84((uint64_t)v10, (uint64_t *)&unk_1ED8A8B10);
      if ((v29 & 1) != 0)
      {
LABEL_12:
        if (*((unsigned __int8 *)a1 + *(int *)(v30 + 28)) == *((unsigned __int8 *)a2 + *(int *)(v30 + 28)))
        {
          v21 = *((_BYTE *)a1 + *(int *)(v30 + 32)) ^ *((_BYTE *)a2 + *(int *)(v30 + 32)) ^ 1;
          return v21 & 1;
        }
      }
    }
LABEL_13:
    v21 = 0;
  }
  return v21 & 1;
}

uint64_t sub_1CCA5A494()
{
  return sub_1CC9CAA38(&qword_1EF9E0668, (uint64_t (*)(uint64_t))type metadata accessor for FMReverseGeocodingRequest, (uint64_t)&protocol conformance descriptor for FMReverseGeocodingRequest);
}

uint64_t sub_1CCA5A4C0()
{
  return sub_1CC9CAA38(&qword_1EF9E0670, (uint64_t (*)(uint64_t))type metadata accessor for CLClientLocationReferenceFrame, (uint64_t)&protocol conformance descriptor for CLClientLocationReferenceFrame);
}

_QWORD *initializeBufferWithCopyOfBuffer for FMReverseGeocodingRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = (void *)a2[2];
    a1[2] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_1CCB63634();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    v15 = v8;
    if (v14(v11, 1, v12))
    {
      v16 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v18 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)v4 + v18) = *((_BYTE *)a2 + v18);
  }
  return v4;
}

_QWORD *assignWithCopy for FMReverseGeocodingRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  v9 = a3[6];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_1CCB63634();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for FMReverseGeocodingRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1CCB63634();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  return a1;
}

_QWORD *assignWithTake for FMReverseGeocodingRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = (void *)a1[2];
  a1[2] = a2[2];

  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1CCB63634();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + v17) = *((_BYTE *)a2 + v17);
  return a1;
}

uint64_t sub_1CCA5A99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1CCA5AA1C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

unint64_t sub_1CCA5AA94()
{
  unint64_t result;

  result = qword_1ED8A7F30;
  if (!qword_1ED8A7F30)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED8A7F30);
  }
  return result;
}

uint64_t type metadata accessor for FMIPGetURLInfoRequest()
{
  uint64_t result;

  result = qword_1EF9E0728;
  if (!qword_1EF9E0728)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA5AB0C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CCB63490();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1CCA5AB80()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[4];

  v0 = sub_1CCB63418();
  v3[3] = MEMORY[0x1E0DEA968];
  v3[0] = v0;
  v3[1] = v1;
  swift_beginAccess();
  sub_1CCA06650((uint64_t)v3, 7107189, 0xE300000000000000);
  return swift_endAccess();
}

uint64_t sub_1CCA5AC04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + qword_1EF9FF4F0;
  v2 = sub_1CCB63490();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t sub_1CCA5AC40()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1CC9C785C() + qword_1EF9FF4F0;
  v1 = sub_1CCB63490();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA5AC98()
{
  return type metadata accessor for FMIPGetURLInfoRequest();
}

BOOL static FMIPNotifyActionType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FMIPNotifyActionType.hash(into:)()
{
  return sub_1CCB64348();
}

uint64_t FMIPNotifyActionType.hashValue.getter()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

void FMIPNotifyAction.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_type);
}

uint64_t FMIPNotifyAction.enabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_enabled);
}

uint64_t FMIPNotifyAction.__allocating_init(device:type:enabled:)(uint64_t a1, _BYTE *a2, char a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  FMIPNotifyAction.init(device:type:enabled:)(a1, a2, a3);
  return v6;
}

uint64_t FMIPNotifyAction.init(device:type:enabled:)(uint64_t a1, _BYTE *a2, char a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  *(_BYTE *)(v3 + OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_type) = *a2;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_enabled) = a3;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext) = 0;
  v4 = (_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_username);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  *v7 = 0;
  v7[1] = 0;
  v8 = (_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
  *v8 = 0;
  v8[1] = 0;
  *(_OWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession) = xmmword_1CCB66A50;
  sub_1CC9FED60(a1, v3 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  return v3;
}

uint64_t static FMIPNotifyAction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_enabled) == *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_enabled))
    return static FMIPDevice.== infix(_:_:)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  else
    return 0;
}

uint64_t sub_1CCA5AEA8()
{
  uint64_t v0;

  v0 = sub_1CCA65078();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

void FMIPNotifyAction.__allocating_init(device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPNotifyAction.init(device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t FMIPNotifyAction.__deallocating_deinit()
{
  FMIPDeviceAction.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA5AFF8(_QWORD *a1, _QWORD *a2)
{
  if (*(unsigned __int8 *)(*a1 + OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_enabled) == *(unsigned __int8 *)(*a2 + OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_enabled))
    return static FMIPDevice.== infix(_:_:)(*a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  else
    return 0;
}

BOOL static FMIPNotifyItemActionType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t FMIPNotifyItemActionType.hash(into:)()
{
  return sub_1CCB64348();
}

uint64_t FMIPNotifyItemActionType.hashValue.getter()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

uint64_t FMIPNotifyItemAction.state.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore20FMIPNotifyItemAction_state);
}

void FMIPNotifyItemAction.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore20FMIPNotifyItemAction_type);
}

uint64_t FMIPNotifyItemAction.__allocating_init(item:type:state:)(uint64_t a1, _BYTE *a2, char a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_BYTE *)(v6 + OBJC_IVAR____TtC8FMIPCore20FMIPNotifyItemAction_type) = *a2;
  *(_BYTE *)(v6 + OBJC_IVAR____TtC8FMIPCore20FMIPNotifyItemAction_state) = a3;
  sub_1CC9FED60(a1, v6 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  return v6;
}

uint64_t FMIPNotifyItemAction.init(item:type:state:)(uint64_t a1, _BYTE *a2, char a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + OBJC_IVAR____TtC8FMIPCore20FMIPNotifyItemAction_type) = *a2;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8FMIPCore20FMIPNotifyItemAction_state) = a3;
  sub_1CC9FED60(a1, v3 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  return v3;
}

uint64_t sub_1CCA5B1AC()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8FMIPCore20FMIPNotifyItemAction_state))
    return 0x64656C62616E65;
  else
    return 0x64656C6261736964;
}

void FMIPNotifyItemAction.__allocating_init(item:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPNotifyItemAction.init(item:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t FMIPNotifyItemAction.deinit()
{
  uint64_t v0;

  sub_1CCA30300(v0 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item);
  return v0;
}

uint64_t FMIPNotifyItemAction.__deallocating_deinit()
{
  uint64_t v0;

  sub_1CCA30300(v0 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item);
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA5B2A8(uint64_t *a1, uint64_t *a2)
{
  return _s8FMIPCore20FMIPNotifyItemActionC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t _s8FMIPCore20FMIPNotifyItemActionC2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v4;

  if ((_s8FMIPCore8FMIPItemV2eeoiySbAC_ACtFZ_0(a1 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, a2 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item) & 1) != 0&& *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore20FMIPNotifyItemAction_type) == *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC8FMIPCore20FMIPNotifyItemAction_type))
  {
    v4 = *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore20FMIPNotifyItemAction_state) ^ *(_BYTE *)(a2
                                                                                           + OBJC_IVAR____TtC8FMIPCore20FMIPNotifyItemAction_state) ^ 1;
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

unint64_t sub_1CCA5B338()
{
  unint64_t result;

  result = qword_1EF9E0778;
  if (!qword_1EF9E0778)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPNotifyActionType, &type metadata for FMIPNotifyActionType);
    atomic_store(result, (unint64_t *)&qword_1EF9E0778);
  }
  return result;
}

unint64_t sub_1CCA5B380()
{
  unint64_t result;

  result = qword_1EF9E0780;
  if (!qword_1EF9E0780)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPNotifyItemActionType, &type metadata for FMIPNotifyItemActionType);
    atomic_store(result, (unint64_t *)&qword_1EF9E0780);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPNotifyActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCA5B410 + 4 * byte_1CCB69485[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CCA5B444 + 4 * byte_1CCB69480[v4]))();
}

uint64_t sub_1CCA5B444(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA5B44C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA5B454);
  return result;
}

uint64_t sub_1CCA5B460(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA5B468);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCA5B46C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA5B474(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPNotifyActionType()
{
  return &type metadata for FMIPNotifyActionType;
}

uint64_t sub_1CCA5B490()
{
  return type metadata accessor for FMIPNotifyAction(0);
}

uint64_t type metadata accessor for FMIPNotifyAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E07B0);
}

uint64_t sub_1CCA5B4AC()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for FMIPNotifyAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPNotifyAction.__allocating_init(device:type:enabled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t storeEnumTagSinglePayload for FMIPNotifyItemActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCA5B554 + 4 * byte_1CCB6948F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCA5B588 + 4 * byte_1CCB6948A[v4]))();
}

uint64_t sub_1CCA5B588(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA5B590(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA5B598);
  return result;
}

uint64_t sub_1CCA5B5A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA5B5ACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCA5B5B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA5B5B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPNotifyItemActionType()
{
  return &type metadata for FMIPNotifyItemActionType;
}

uint64_t sub_1CCA5B5D4()
{
  return type metadata accessor for FMIPNotifyItemAction(0);
}

uint64_t type metadata accessor for FMIPNotifyItemAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E0978);
}

uint64_t sub_1CCA5B5F0()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for FMIPNotifyItemAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPNotifyItemAction.__allocating_init(item:type:state:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of FMIPNotifyItemAction.debugState()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t sub_1CCA5B650(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1CCA5B658(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD v20[2];
  uint8_t *v21;
  uint64_t v22;
  os_log_t v23;
  uint64_t v24[5];
  uint64_t v25;

  v3 = v1;
  v5 = sub_1CCA14E90(&qword_1ED8A7F68);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 56) = 0;
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA2296C();
  swift_retain();
  sub_1CCB643B4();
  if (v2)
  {
    swift_release();
    sub_1CCA01CA0((uint64_t)a1);
    swift_bridgeObjectRelease();
    type metadata accessor for FMIPDeviceActionResponse();
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_1CCA14E90(&qword_1ED8A7E80);
    LOBYTE(v25) = 4;
    sub_1CCA1FB68();
    sub_1CCB64180();
    *(_QWORD *)(v1 + 56) = v24[0];
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CC9EBC94((uint64_t)a1, (uint64_t)v24);
    v3 = sub_1CC9CA3D0(v24);
    v9 = qword_1ED8AA630;
    swift_retain();
    if (v9 != -1)
      swift_once();
    v10 = sub_1CCB637FC();
    sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
    swift_retain_n();
    v11 = sub_1CCB637D8();
    v12 = sub_1CCB63D48();
    if (os_log_type_enabled(v11, v12))
    {
      v23 = v11;
      v13 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v24[0] = v22;
      v21 = v13;
      *(_DWORD *)v13 = 136315138;
      v20[1] = v13 + 4;
      v14 = sub_1CCA5B9C4();
      v25 = sub_1CCA0CB60(v14, v15, v24);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      v11 = v23;
      v16 = v12;
      v17 = v21;
      _os_log_impl(&dword_1CC9BF000, v23, v16, "FMIPDeviceContainingResponse: initialized with coder %s", v21, 0xCu);
      v18 = v22;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v18, -1, -1);
      MEMORY[0x1D17B214C](v17, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1CCA01CA0((uint64_t)a1);
    swift_release();
  }
  return v3;
}

uint64_t sub_1CCA5B9C4()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v6 = v0;
  sub_1CC9E6BA4();
  sub_1CCB63A9C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  v1 = sub_1CCB63A24();
  v7 = 0x203A737574617473;
  v8 = 0xE800000000000000;
  (*(void (**)(char *__return_ptr, uint64_t))(*v0 + 144))(&v5, v1);
  v6 = (_QWORD *)qword_1CCB69768[v5];
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  v7 = 60;
  v8 = 0xE100000000000000;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = v7;
  v2 = v8;
  v7 = 0x3A73656369766564;
  v8 = 0xE800000000000000;
  v6 = (_QWORD *)v0[7];
  swift_bridgeObjectRetain();
  sub_1CCA14E90(&qword_1EF9E0B28);
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v7 = v3;
  v8 = v2;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

void sub_1CCA5BBBC(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1CCA5BBC4(_QWORD *a1)
{
  swift_allocObject();
  return sub_1CCA5B658(a1);
}

uint64_t type metadata accessor for FMIPDeviceActionResponse()
{
  return objc_opt_self();
}

uint64_t sub_1CCA5BC2C()
{
  return sub_1CCA5B9C4();
}

uint64_t sub_1CCA5BC4C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1CC9C23B4(&qword_1EF9E0B20, a2, (uint64_t (*)(uint64_t))type metadata accessor for FMIPDeviceActionResponse, (uint64_t)&unk_1CCB6971C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for FMIPRepairResponse()
{
  return objc_opt_self();
}

uint64_t static FMSystemInfo.isKoreaSKU()()
{
  id v0;
  unsigned int v1;
  id v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v1 = objc_msgSend(v0, sel_isInternalBuild);

  if (!v1
    || (v2 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults),
        v3 = (void *)sub_1CCB63964(),
        v4 = objc_msgSend(v2, sel_BOOLForKey_, v3),
        v2,
        v3,
        !v4))
  {
    sub_1CCA5C120((uint64_t)v13);
    if (v14)
    {
      if ((swift_dynamicCast() & 1) != 0 && v11 == 18507 && v12 == 0xE200000000000000)
      {
        swift_bridgeObjectRelease();
        v9 = 1;
        return v9 & 1;
      }
    }
    else
    {
      sub_1CC9E4F4C((uint64_t)v13);
    }
    v9 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    return v9 & 1;
  }
  if (qword_1ED8AA630 != -1)
    swift_once();
  v5 = sub_1CCB637FC();
  sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
  v6 = sub_1CCB637D8();
  v7 = sub_1CCB63D48();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1CC9BF000, v6, v7, "SystemInfo simulating Korea SKU device.", v8, 2u);
    MEMORY[0x1D17B214C](v8, -1, -1);
  }

  v9 = 1;
  return v9 & 1;
}

uint64_t static FMSystemInfo.isChinaSKU()()
{
  id v0;
  unsigned int v1;
  id v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v1 = objc_msgSend(v0, sel_isInternalBuild);

  if (!v1
    || (v2 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults),
        v3 = (void *)sub_1CCB63964(),
        v4 = objc_msgSend(v2, sel_BOOLForKey_, v3),
        v2,
        v3,
        !v4))
  {
    sub_1CCA5C120((uint64_t)v13);
    if (v14)
    {
      if ((swift_dynamicCast() & 1) != 0 && v11 == 18499 && v12 == 0xE200000000000000)
      {
        swift_bridgeObjectRelease();
        v9 = 1;
        return v9 & 1;
      }
    }
    else
    {
      sub_1CC9E4F4C((uint64_t)v13);
    }
    v9 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    return v9 & 1;
  }
  if (qword_1ED8AA630 != -1)
    swift_once();
  v5 = sub_1CCB637FC();
  sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
  v6 = sub_1CCB637D8();
  v7 = sub_1CCB63D48();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1CC9BF000, v6, v7, "SystemInfo simulating China SKU device.", v8, 2u);
    MEMORY[0x1D17B214C](v8, -1, -1);
  }

  v9 = 1;
  return v9 & 1;
}

void sub_1CCA5C120(uint64_t a1@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = (void *)sub_1CCB63964();
  v3 = MGCopyAnswerWithError();

  if (v3)
  {
    *(_QWORD *)(a1 + 24) = swift_getObjectType();
    *(_QWORD *)a1 = v3;
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
}

uint64_t FMIPUnknownItemUTMetadata.modelName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPUnknownItemUTMetadata.manufacturerName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPUnknownItemUTMetadata.learnMoreInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for FMIPUnknownItemUTMetadata() + 24);
  return sub_1CCA5C42C(v3, a1);
}

uint64_t sub_1CCA5C42C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1EF9E0C30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t FMIPUnknownItemUTMetadata.disableInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for FMIPUnknownItemUTMetadata() + 28);
  return sub_1CCA5C42C(v3, a1);
}

void sub_1CCA5C4A4(char *a1)
{
  sub_1CCB1B978(*a1);
}

void sub_1CCA5C4B0()
{
  char *v0;

  sub_1CCB02938(*v0);
}

void sub_1CCA5C4B8()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCA5C4F8()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCA5C56C(uint64_t a1)
{
  char *v1;

  sub_1CCB03758(a1, *v1);
}

uint64_t sub_1CCA5C574@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCA60180();
  *a1 = result;
  return result;
}

uint64_t sub_1CCA5C5A0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCA5C5D4 + 4 * byte_1CCB69834[*v0]))();
}

void sub_1CCA5C5D4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x80000001CCB775D0;
}

void sub_1CCA5C5F4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "learnMoreInfo");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_1CCA5C61C(_QWORD *a1@<X8>)
{
  *a1 = 0x49656C6261736964;
  a1[1] = 0xEB000000006F666ELL;
}

uint64_t sub_1CCA5C640()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA5C674 + 4 * byte_1CCB69838[*v0]))(0x6D614E6C65646F6DLL, 0xE900000000000065);
}

unint64_t sub_1CCA5C674()
{
  return 0xD000000000000010;
}

uint64_t sub_1CCA5C690()
{
  return 0x726F4D6E7261656CLL;
}

uint64_t sub_1CCA5C6B4()
{
  return 0x49656C6261736964;
}

uint64_t sub_1CCA5C6D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCA60180();
  *a1 = result;
  return result;
}

uint64_t sub_1CCA5C6F8()
{
  sub_1CCA5CCA0();
  return sub_1CCB643D8();
}

uint64_t sub_1CCA5C720()
{
  sub_1CCA5CCA0();
  return sub_1CCB643E4();
}

uint64_t FMIPUnknownItemUTMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD, uint64_t, NSObject *);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  NSObject *v39;
  uint8_t *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t isa;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;

  v49 = a2;
  v52 = type metadata accessor for FMIPUnknownItemProductMetadata();
  isa = (uint64_t)v52[-1].isa;
  v3 = MEMORY[0x1E0C80A78](v52);
  v50 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v51 = (uint64_t)&v41 - v5;
  v6 = sub_1CCA14E90(&qword_1EF9E0C38);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FMIPUnknownItemUTMetadata();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA5CCA0();
  v13 = v53;
  sub_1CCB643B4();
  if (!v13)
  {
    v47 = (_QWORD *)v10;
    v14 = v52;
    v53 = (uint64_t *)v12;
    LOBYTE(v55) = 0;
    v15 = sub_1CCB64150();
    v17 = v16;
    v46 = v15;
    LOBYTE(v55) = 1;
    v43 = sub_1CCB64150();
    v44 = v18;
    v45 = v17;
    v19 = v9;
    LOBYTE(v55) = 2;
    sub_1CC9CAA38(&qword_1EF9E0C48, (uint64_t (*)(uint64_t))type metadata accessor for FMIPUnknownItemProductMetadata, (uint64_t)&protocol conformance descriptor for FMIPUnknownItemProductMetadata);
    v20 = v51;
    v21 = v14;
    sub_1CCB64180();
    LOBYTE(v55) = 2;
    sub_1CCB64180();
    v42 = v19;
    v23 = v53;
    v24 = v47;
    v25 = v45;
    *v53 = v46;
    v23[1] = v25;
    v26 = v44;
    v23[2] = v43;
    v23[3] = v26;
    v27 = (uint64_t)v23 + *((int *)v24 + 6);
    sub_1CCA0BEEC(v20, v27, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
    v28 = *(void (**)(uint64_t, _QWORD, uint64_t, NSObject *))(isa + 56);
    v28(v27, 0, 1, v21);
    v29 = (uint64_t)v23 + *((int *)v24 + 7);
    sub_1CCA0BEEC(v50, v29, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
    v28(v29, 0, 1, v21);
    v30 = FMIPUnknownItemUTMetadata.debugDescription.getter();
    v32 = v31;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v33 = sub_1CCB637FC();
    sub_1CCA16C20(v33, (uint64_t)qword_1ED8AD7F8);
    swift_bridgeObjectRetain();
    v34 = sub_1CCB637D8();
    v35 = sub_1CCB63D18();
    v52 = v34;
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc();
      v47 = a1;
      v37 = (uint8_t *)v36;
      v38 = swift_slowAlloc();
      v55 = v38;
      isa = v6;
      *(_DWORD *)v37 = 136315138;
      swift_bridgeObjectRetain();
      v54 = sub_1CCA0CB60(v30, v32, &v55);
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      v39 = v52;
      _os_log_impl(&dword_1CC9BF000, v52, v35, "FMIPUnknownItemUTMetadata: initialized %s", v37, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v38, -1, -1);
      v40 = v37;
      a1 = v47;
      MEMORY[0x1D17B214C](v40, -1, -1);

      sub_1CCA0BF30(v50, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
      sub_1CCA0BF30(v51, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v42, isa);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      sub_1CCA0BF30(v50, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
      sub_1CCA0BF30(v51, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v42, v6);
    }
    sub_1CC9FED60((uint64_t)v23, v49, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
  }
  return sub_1CCA01CA0((uint64_t)a1);
}

unint64_t sub_1CCA5CCA0()
{
  unint64_t result;

  result = qword_1EF9E0C40;
  if (!qword_1EF9E0C40)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB69A8C, &type metadata for FMIPUnknownItemUTMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E0C40);
  }
  return result;
}

uint64_t FMIPUnknownItemUTMetadata.debugDescription.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v1 = v0;
  v2 = sub_1CCA14E90(&qword_1EF9E0C30);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v20 - v6;
  v22 = 0;
  v23 = 0xE000000000000000;
  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCB63A24();
  sub_1CCB63A24();
  v8 = v0[1];
  v20 = *v0;
  v21 = v8;
  swift_bridgeObjectRetain();
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v9 = v0[3];
  v20 = v0[2];
  v21 = v9;
  swift_bridgeObjectRetain();
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v10 = type metadata accessor for FMIPUnknownItemUTMetadata();
  sub_1CCA5C42C((uint64_t)v0 + *(int *)(v10 + 24), (uint64_t)v7);
  v11 = type metadata accessor for FMIPUnknownItemProductMetadata();
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
  if (v12(v7, 1, v11) == 1)
  {
    sub_1CC9C3E84((uint64_t)v7, &qword_1EF9E0C30);
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v13 = FMIPUnknownItemProductMetadata.debugDescription.getter();
    v14 = v15;
    sub_1CCA0BF30((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
  }
  v20 = v13;
  v21 = v14;
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCA5C42C((uint64_t)v1 + *(int *)(v10 + 28), (uint64_t)v5);
  if (v12(v5, 1, v11) == 1)
  {
    sub_1CC9C3E84((uint64_t)v5, &qword_1EF9E0C30);
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v16 = FMIPUnknownItemProductMetadata.debugDescription.getter();
    v17 = v18;
    sub_1CCA0BF30((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
  }
  v20 = v16;
  v21 = v17;
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return v22;
}

void FMIPUnknownItemUTMetadata.init(productInfo:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;

  v4 = sub_1CCA14E90(&qword_1EF9E0C30);
  MEMORY[0x1E0C80A78](v4);
  v41 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1ED8A8EE8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v39 - v10;
  v12 = objc_msgSend(a1, sel_modelName);
  v13 = sub_1CCB63988();
  v15 = v14;

  *a2 = v13;
  a2[1] = v15;
  v16 = objc_msgSend(a1, sel_manufacturerName);
  v17 = sub_1CCB63988();
  v19 = v18;

  a2[2] = v17;
  a2[3] = v19;
  v40 = type metadata accessor for FMIPUnknownItemUTMetadata();
  v20 = (uint64_t)a2 + *(int *)(v40 + 24);
  v21 = objc_msgSend(a1, sel_learnModeMetadata);
  v22 = sub_1CCB63490();
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v24 = 1;
  v23(v11, 1, 1, v22);
  FMIPUnknownItemProductMetadata.init(metadata:disableURL:)(v21, (uint64_t)v11, v20);
  v25 = type metadata accessor for FMIPUnknownItemProductMetadata();
  v26 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v20, 0, 1, v25);
  v27 = objc_msgSend(a1, sel_disableMetadata);
  v42 = a1;
  v28 = objc_msgSend(a1, sel_disableURL);
  if (v28)
  {
    v29 = v28;
    sub_1CCB6346C();

    v24 = 0;
  }
  v23(v9, v24, 1, v22);
  v30 = v41;
  FMIPUnknownItemProductMetadata.init(metadata:disableURL:)(v27, (uint64_t)v9, v41);
  v26(v30, 0, 1, v25);
  sub_1CCA5D8EC(v30, (uint64_t)a2 + *(int *)(v40 + 28));
  v31 = FMIPUnknownItemUTMetadata.debugDescription.getter();
  v33 = v32;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v34 = sub_1CCB637FC();
  sub_1CCA16C20(v34, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v35 = sub_1CCB637D8();
  v36 = sub_1CCB63D18();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc();
    v38 = swift_slowAlloc();
    v44 = v38;
    *(_DWORD *)v37 = 136315138;
    swift_bridgeObjectRetain();
    v43 = sub_1CCA0CB60(v31, v33, &v44);
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CC9BF000, v35, v36, "FMIPUnknownItemUTMetadata: initialized %s", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v38, -1, -1);
    MEMORY[0x1D17B214C](v37, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t FMIPUnknownItemUTMetadata.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v10;
  char v11;

  v3 = v1;
  v5 = sub_1CCA14E90(&qword_1EF9E0C50);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA5CCA0();
  sub_1CCB643CC();
  v10 = *v3;
  v11 = 0;
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
  sub_1CCA008E8();
  sub_1CCB64210();
  if (!v2)
  {
    v10 = v3[1];
    v11 = 1;
    sub_1CCB64210();
    type metadata accessor for FMIPUnknownItemUTMetadata();
    LOBYTE(v10) = 2;
    sub_1CCA14E90(&qword_1EF9E0C30);
    sub_1CCA5D934();
    sub_1CCB64210();
    LOBYTE(v10) = 3;
    sub_1CCB64210();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t FMIPUnknownItemUTMetadata.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v14;

  v1 = type metadata accessor for FMIPUnknownItemProductMetadata();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9E0C30);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v14 - v9;
  if (*(_QWORD *)(v0 + 8))
  {
    sub_1CCB64354();
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v0 + 24))
    {
LABEL_3:
      sub_1CCB64354();
      swift_bridgeObjectRetain();
      sub_1CCB639F4();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_1CCB64354();
    if (*(_QWORD *)(v0 + 24))
      goto LABEL_3;
  }
  sub_1CCB64354();
LABEL_6:
  v11 = type metadata accessor for FMIPUnknownItemUTMetadata();
  sub_1CCA5C42C(v0 + *(int *)(v11 + 24), (uint64_t)v10);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48);
  if (v12(v10, 1, v1) == 1)
  {
    sub_1CCB64354();
  }
  else
  {
    sub_1CC9FED60((uint64_t)v10, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
    sub_1CCB64354();
    FMIPUnknownItemProductMetadata.hash(into:)();
    sub_1CCA0BF30((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
  }
  sub_1CCA5C42C(v0 + *(int *)(v11 + 28), (uint64_t)v8);
  if (v12(v8, 1, v1) == 1)
    return sub_1CCB64354();
  sub_1CC9FED60((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
  sub_1CCB64354();
  FMIPUnknownItemProductMetadata.hash(into:)();
  return sub_1CCA0BF30((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
}

uint64_t FMIPUnknownItemUTMetadata.hashValue.getter()
{
  sub_1CCB6433C();
  FMIPUnknownItemUTMetadata.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCA5D848()
{
  sub_1CCB6433C();
  FMIPUnknownItemUTMetadata.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCA5D888()
{
  sub_1CCB6433C();
  FMIPUnknownItemUTMetadata.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCA5D8C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPUnknownItemUTMetadata.init(from:)(a1, a2);
}

uint64_t sub_1CCA5D8D4(_QWORD *a1)
{
  return FMIPUnknownItemUTMetadata.encode(to:)(a1);
}

uint64_t sub_1CCA5D8EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1EF9E0C30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1CCA5D934()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E0C58;
  if (!qword_1EF9E0C58)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E0C30);
    v2 = sub_1CC9CAA38(&qword_1EF9E0C60, (uint64_t (*)(uint64_t))type metadata accessor for FMIPUnknownItemProductMetadata, (uint64_t)&protocol conformance descriptor for FMIPUnknownItemProductMetadata);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E0C58);
  }
  return result;
}

uint64_t _s8FMIPCore25FMIPUnknownItemUTMetadataV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _BYTE v57[4];
  int v58;
  _QWORD *v59;
  _BYTE *v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;

  v4 = type metadata accessor for FMIPUnknownItemProductMetadata();
  v64 = *(_QWORD *)(v4 - 8);
  v65 = v4;
  MEMORY[0x1E0C80A78](v4);
  v62 = &v57[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_1CCA14E90(&qword_1EF9E0C30);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = &v57[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v63 = &v57[-v10];
  v66 = sub_1CCA14E90(qword_1EF9E0D28);
  v11 = MEMORY[0x1E0C80A78](v66);
  v13 = &v57[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11);
  v15 = &v57[-v14];
  v16 = type metadata accessor for FMIPUnknownItemUTMetadata();
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = &v57[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = MEMORY[0x1E0C80A78](v17);
  v67 = &v57[-v21];
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = &v57[-v23];
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = &v57[-v26];
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = &v57[-v29];
  MEMORY[0x1E0C80A78](v28);
  v33 = &v57[-v31];
  v34 = a1[1];
  v35 = a2[1];
  if (!v34)
  {
    if (!v35)
    {
LABEL_10:
      v60 = v13;
      v61 = v32;
      v59 = v9;
      sub_1CCA0BEEC((uint64_t)a1, (uint64_t)&v57[-v31], (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
      sub_1CCA0BEEC((uint64_t)a2, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
      goto LABEL_11;
    }
LABEL_8:
    sub_1CCA0BEEC((uint64_t)a1, (uint64_t)&v57[-v31], (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    sub_1CCA0BEEC((uint64_t)a2, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    goto LABEL_9;
  }
  if (!v35)
    goto LABEL_8;
  if (*a1 == *a2 && v34 == v35)
    goto LABEL_10;
  v60 = v13;
  v61 = v32;
  v59 = v9;
  v36 = sub_1CCB642A0();
  sub_1CCA0BEEC((uint64_t)a1, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
  sub_1CCA0BEEC((uint64_t)a2, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
  if ((v36 & 1) == 0)
  {
LABEL_9:
    sub_1CCA0BF30((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    sub_1CCA0BF30((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
LABEL_23:
    sub_1CCA0BEEC((uint64_t)a1, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    sub_1CCA0BEEC((uint64_t)a2, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    goto LABEL_24;
  }
LABEL_11:
  v37 = *((_QWORD *)v33 + 3);
  v38 = *((_QWORD *)v30 + 3);
  if (!v37)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    sub_1CCA0BF30((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    if (!v38)
    {
LABEL_30:
      sub_1CCA0BEEC((uint64_t)a1, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
      sub_1CCA0BEEC((uint64_t)a2, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
      goto LABEL_31;
    }
    goto LABEL_22;
  }
  if (!v38)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    sub_1CCA0BF30((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  if (*((_QWORD *)v33 + 2) == *((_QWORD *)v30 + 2) && v37 == v38)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    sub_1CCA0BF30((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  v58 = sub_1CCB642A0();
  swift_bridgeObjectRetain();
  sub_1CCA0BF30((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
  sub_1CCA0BF30((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
  swift_bridgeObjectRelease();
  sub_1CCA0BEEC((uint64_t)a1, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
  sub_1CCA0BEEC((uint64_t)a2, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
  if ((v58 & 1) == 0)
  {
LABEL_24:
    sub_1CCA0BF30((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    sub_1CCA0BF30((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
LABEL_25:
    v40 = v67;
    sub_1CCA0BEEC((uint64_t)a1, (uint64_t)v67, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    sub_1CCA0BEEC((uint64_t)a2, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    goto LABEL_26;
  }
LABEL_31:
  v43 = *(int *)(v61 + 24);
  v44 = (uint64_t)&v24[v43];
  v45 = (uint64_t)&v15[*(int *)(v66 + 48)];
  sub_1CCA5C42C((uint64_t)&v27[v43], (uint64_t)v15);
  sub_1CCA5C42C(v44, v45);
  v46 = v65;
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
  if (v47((uint64_t)v15, 1, v65) != 1)
  {
    v48 = v63;
    sub_1CCA5C42C((uint64_t)v15, (uint64_t)v63);
    if (v47(v45, 1, v46) != 1)
    {
      v49 = v62;
      sub_1CC9FED60(v45, (uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
      LODWORD(v64) = _s8FMIPCore30FMIPUnknownItemProductMetadataV2eeoiySbAC_ACtFZ_0(v48, v49);
      sub_1CCA0BF30((uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
      sub_1CCA0BF30((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
      sub_1CCA0BF30((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
      sub_1CCA0BF30((uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
      sub_1CC9C3E84((uint64_t)v15, &qword_1EF9E0C30);
      v40 = v67;
      sub_1CCA0BEEC((uint64_t)a1, (uint64_t)v67, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
      v46 = v65;
      sub_1CCA0BEEC((uint64_t)a2, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
      if ((v64 & 1) != 0)
        goto LABEL_38;
LABEL_26:
      sub_1CCA0BF30((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
      sub_1CCA0BF30((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
      goto LABEL_27;
    }
    sub_1CCA0BF30((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    sub_1CCA0BF30((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    sub_1CCA0BF30((uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
    goto LABEL_36;
  }
  sub_1CCA0BF30((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
  sub_1CCA0BF30((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
  if (v47(v45, 1, v46) != 1)
  {
LABEL_36:
    sub_1CC9C3E84((uint64_t)v15, qword_1EF9E0D28);
    goto LABEL_25;
  }
  sub_1CC9C3E84((uint64_t)v15, &qword_1EF9E0C30);
  v40 = v67;
  sub_1CCA0BEEC((uint64_t)a1, (uint64_t)v67, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
  sub_1CCA0BEEC((uint64_t)a2, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
LABEL_38:
  v50 = (uint64_t)v60;
  v51 = *(int *)(v61 + 28);
  v52 = (uint64_t)&v19[v51];
  v53 = (uint64_t)&v60[*(int *)(v66 + 48)];
  sub_1CCA5C42C((uint64_t)&v40[v51], (uint64_t)v60);
  sub_1CCA5C42C(v52, v53);
  if (v47(v50, 1, v46) == 1)
  {
    sub_1CCA0BF30((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    sub_1CCA0BF30((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    if (v47(v53, 1, v46) == 1)
    {
      sub_1CC9C3E84(v50, &qword_1EF9E0C30);
      v41 = 1;
      return v41 & 1;
    }
  }
  else
  {
    v54 = v59;
    sub_1CCA5C42C(v50, (uint64_t)v59);
    if (v47(v53, 1, v46) != 1)
    {
      v55 = v53;
      v56 = v62;
      sub_1CC9FED60(v55, (uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
      v41 = _s8FMIPCore30FMIPUnknownItemProductMetadataV2eeoiySbAC_ACtFZ_0(v54, v56);
      sub_1CCA0BF30((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
      sub_1CCA0BF30((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
      sub_1CCA0BF30((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
      sub_1CCA0BF30((uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
      sub_1CC9C3E84(v50, &qword_1EF9E0C30);
      return v41 & 1;
    }
    sub_1CCA0BF30((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    sub_1CCA0BF30((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    sub_1CCA0BF30((uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
  }
  sub_1CC9C3E84(v50, qword_1EF9E0D28);
LABEL_27:
  v41 = 0;
  return v41 & 1;
}

uint64_t sub_1CCA5E1C8()
{
  return sub_1CC9CAA38(&qword_1EF9E0C68, (uint64_t (*)(uint64_t))type metadata accessor for FMIPUnknownItemUTMetadata, (uint64_t)&protocol conformance descriptor for FMIPUnknownItemUTMetadata);
}

uint64_t *initializeBufferWithCopyOfBuffer for FMIPUnknownItemUTMetadata(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_QWORD, _QWORD, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v48;
  char *__dst;
  uint64_t v50;
  unsigned int (*v51)(_QWORD, _QWORD, _QWORD);
  uint64_t v52;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for FMIPUnknownItemProductMetadata();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = sub_1CCA14E90(&qword_1EF9E0C30);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v51 = v14;
      v52 = v13;
      v17 = v11[1];
      *v10 = *v11;
      v10[1] = v17;
      v18 = v11[3];
      v10[2] = v11[2];
      v10[3] = v18;
      *((_BYTE *)v10 + 32) = *((_BYTE *)v11 + 32);
      v10[5] = v11[5];
      *((_BYTE *)v10 + 48) = *((_BYTE *)v11 + 48);
      v19 = *(int *)(v12 + 32);
      __dst = (char *)v10 + v19;
      v50 = v12;
      v20 = (char *)v11 + v19;
      v21 = sub_1CCB63490();
      v22 = *(_QWORD *)(v21 - 8);
      v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v48 = v22;
      if (v23(v20, 1, v21))
      {
        v24 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
      }
      v12 = v50;
      v25 = *(int *)(v50 + 36);
      v26 = (char *)v10 + v25;
      v27 = (char *)v11 + v25;
      v28 = v23(v27, 1, v21);
      v14 = v51;
      v13 = v52;
      if (v28)
      {
        v29 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v26, v27, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v26, 0, 1, v21);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v10, 0, 1, v50);
    }
    v30 = *(int *)(a3 + 28);
    v31 = (uint64_t *)((char *)v4 + v30);
    v32 = (uint64_t *)((char *)a2 + v30);
    if (v14(v32, 1, v12))
    {
      v33 = sub_1CCA14E90(&qword_1EF9E0C30);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v34 = v32[1];
      *v31 = *v32;
      v31[1] = v34;
      v35 = v32[3];
      v31[2] = v32[2];
      v31[3] = v35;
      *((_BYTE *)v31 + 32) = *((_BYTE *)v32 + 32);
      v31[5] = v32[5];
      *((_BYTE *)v31 + 48) = *((_BYTE *)v32 + 48);
      v36 = *(int *)(v12 + 32);
      v37 = (char *)v31 + v36;
      v38 = (char *)v32 + v36;
      v39 = sub_1CCB63490();
      v40 = *(_QWORD *)(v39 - 8);
      v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v41(v38, 1, v39))
      {
        v42 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
      v43 = *(int *)(v12 + 36);
      v44 = (char *)v31 + v43;
      v45 = (char *)v32 + v43;
      if (v41(v45, 1, v39))
      {
        v46 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v44, v45, v39);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v44, 0, 1, v39);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v31, 0, 1, v12);
    }
  }
  return v4;
}

uint64_t destroy for FMIPUnknownItemUTMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for FMIPUnknownItemProductMetadata();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v4 + *(int *)(v5 + 32);
    v8 = sub_1CCB63490();
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (!v10(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v11 = v4 + *(int *)(v5 + 36);
    if (!v10(v11, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  }
  v12 = a1 + *(int *)(a2 + 28);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v12, 1, v5);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v12 + *(int *)(v5 + 32);
    v15 = sub_1CCB63490();
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    if (!v17(v14, 1, v15))
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    v18 = v12 + *(int *)(v5 + 36);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v17)(v18, 1, v15);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v18, v15);
  }
  return result;
}

_QWORD *initializeWithCopy for FMIPUnknownItemUTMetadata(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD, _QWORD, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v46;
  char *__dst;
  unsigned int (*v48)(_QWORD, _QWORD, _QWORD);
  uint64_t v49;
  uint64_t v50;

  v3 = a3;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  v11 = type metadata accessor for FMIPUnknownItemProductMetadata();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = sub_1CCA14E90(&qword_1EF9E0C30);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v48 = v13;
    v49 = v3;
    v50 = v12;
    v15 = v10[1];
    *v9 = *v10;
    v9[1] = v15;
    v16 = v10[3];
    v9[2] = v10[2];
    v9[3] = v16;
    *((_BYTE *)v9 + 32) = *((_BYTE *)v10 + 32);
    v9[5] = v10[5];
    *((_BYTE *)v9 + 48) = *((_BYTE *)v10 + 48);
    v17 = *(int *)(v11 + 32);
    __dst = (char *)v9 + v17;
    v18 = (char *)v10 + v17;
    v19 = sub_1CCB63490();
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v46 = v20;
    if (v21(v18, 1, v19))
    {
      v22 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    v23 = *(int *)(v11 + 36);
    v24 = (char *)v9 + v23;
    v25 = (char *)v10 + v23;
    v26 = v21(v25, 1, v19);
    v3 = v49;
    v12 = v50;
    v13 = v48;
    if (v26)
    {
      v27 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v24, v25, v19);
      v3 = v49;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v24, 0, 1, v19);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v9, 0, 1, v11);
  }
  v28 = *(int *)(v3 + 28);
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  if (v13(v30, 1, v11))
  {
    v31 = sub_1CCA14E90(&qword_1EF9E0C30);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = v30[1];
    *v29 = *v30;
    v29[1] = v32;
    v33 = v30[3];
    v29[2] = v30[2];
    v29[3] = v33;
    *((_BYTE *)v29 + 32) = *((_BYTE *)v30 + 32);
    v29[5] = v30[5];
    *((_BYTE *)v29 + 48) = *((_BYTE *)v30 + 48);
    v34 = *(int *)(v11 + 32);
    v35 = (char *)v29 + v34;
    v36 = (char *)v30 + v34;
    v37 = sub_1CCB63490();
    v38 = *(_QWORD *)(v37 - 8);
    v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v39(v36, 1, v37))
    {
      v40 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    v41 = *(int *)(v11 + 36);
    v42 = (char *)v29 + v41;
    v43 = (char *)v30 + v41;
    if (v39(v43, 1, v37))
    {
      v44 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v42, v43, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v42, 0, 1, v37);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v29, 0, 1, v11);
  }
  return a1;
}

_QWORD *assignWithCopy for FMIPUnknownItemUTMetadata(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  size_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(void *, uint64_t, uint64_t);
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  int v79;
  int v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  void *__dst;
  void *__dsta;
  int *__src;
  unsigned int (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  int *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (uint64_t)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for FMIPUnknownItemProductMetadata();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11((uint64_t)v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v87 = a3;
      v89 = v10;
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *(_QWORD *)(v7 + 8) = *((_QWORD *)v8 + 1);
      *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
      v14 = *((_QWORD *)v8 + 3);
      *(_BYTE *)(v7 + 32) = v8[32];
      *(_QWORD *)(v7 + 24) = v14;
      v15 = *((_QWORD *)v8 + 5);
      *(_BYTE *)(v7 + 48) = v8[48];
      *(_QWORD *)(v7 + 40) = v15;
      __src = (int *)v9;
      v16 = *(int *)(v9 + 32);
      v81 = v11;
      __dst = (void *)(v7 + v16);
      v17 = &v8[v16];
      v18 = sub_1CCB63490();
      v19 = *(_QWORD *)(v18 - 8);
      v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v85 = v20;
      if (v20(v17, 1, v18))
      {
        v21 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v19 + 16))(__dst, v17, v18);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
      }
      v33 = v19;
      v9 = (uint64_t)__src;
      v34 = __src[9];
      v35 = (void *)(v7 + v34);
      v36 = &v8[v34];
      v10 = v89;
      v11 = v81;
      if (v85(v36, 1, v18))
      {
        v37 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v33 + 16))(v35, v36, v18);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v18);
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v89 + 56))(v7, 0, 1, __src);
      goto LABEL_26;
    }
LABEL_7:
    v22 = sub_1CCA14E90(&qword_1EF9E0C30);
    memcpy((void *)v7, v8, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_27;
  }
  if (v13)
  {
    sub_1CCA0BF30(v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
    goto LABEL_7;
  }
  v87 = a3;
  v90 = v10;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_QWORD *)(v7 + 8) = *((_QWORD *)v8 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = *((_QWORD *)v8 + 3);
  *(_BYTE *)(v7 + 32) = v8[32];
  *(_QWORD *)(v7 + 24) = v23;
  v24 = *((_QWORD *)v8 + 5);
  *(_BYTE *)(v7 + 48) = v8[48];
  *(_QWORD *)(v7 + 40) = v24;
  v25 = *(int *)(v9 + 32);
  v26 = (void *)(v7 + v25);
  v27 = &v8[v25];
  v28 = sub_1CCB63490();
  v86 = *(_QWORD *)(v28 - 8);
  v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v86 + 48);
  __dsta = v26;
  LODWORD(v26) = v29(v26, 1, v28);
  v30 = v29(v27, 1, v28);
  if ((_DWORD)v26)
  {
    if (v30)
    {
      v31 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(__dsta, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      v32 = v86;
    }
    else
    {
      v32 = v86;
      (*(void (**)(void *, char *, uint64_t))(v86 + 16))(__dsta, v27, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v86 + 56))(__dsta, 0, 1, v28);
    }
  }
  else
  {
    v32 = v86;
    if (v30)
    {
      (*(void (**)(void *, uint64_t))(v86 + 8))(__dsta, v28);
      v38 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(__dsta, v27, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v86 + 24))(__dsta, v27, v28);
    }
  }
  v39 = *(int *)(v9 + 36);
  v40 = (void *)(v7 + v39);
  v41 = &v8[v39];
  v42 = v29(v40, 1, v28);
  v43 = v29(v41, 1, v28);
  if (!v42)
  {
    v10 = v90;
    if (!v43)
    {
      (*(void (**)(void *, char *, uint64_t))(v32 + 24))(v40, v41, v28);
      goto LABEL_26;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v40, v28);
    goto LABEL_25;
  }
  v10 = v90;
  if (v43)
  {
LABEL_25:
    v44 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(void *, char *, uint64_t))(v32 + 16))(v40, v41, v28);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v40, 0, 1, v28);
LABEL_26:
  a3 = v87;
LABEL_27:
  v45 = a3[7];
  v46 = (uint64_t)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = v11((uint64_t)a1 + v45, 1, v9);
  v49 = v11((uint64_t)v47, 1, v9);
  if (!v48)
  {
    if (v49)
    {
      sub_1CCA0BF30(v46, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
      goto LABEL_33;
    }
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *(_QWORD *)(v46 + 8) = *((_QWORD *)v47 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v46 + 16) = *((_QWORD *)v47 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v60 = *((_QWORD *)v47 + 3);
    *(_BYTE *)(v46 + 32) = v47[32];
    *(_QWORD *)(v46 + 24) = v60;
    v61 = *((_QWORD *)v47 + 5);
    *(_BYTE *)(v46 + 48) = v47[48];
    *(_QWORD *)(v46 + 40) = v61;
    v62 = *(int *)(v9 + 32);
    v63 = (void *)(v46 + v62);
    v64 = &v47[v62];
    v65 = sub_1CCB63490();
    v66 = *(_QWORD *)(v65 - 8);
    v67 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v66 + 48);
    v68 = v67(v63, 1, v65);
    v69 = v67(v64, 1, v65);
    if (v68)
    {
      if (!v69)
      {
        (*(void (**)(void *, char *, uint64_t))(v66 + 16))(v63, v64, v65);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
LABEL_47:
        v77 = *(int *)(v9 + 36);
        v78 = (void *)(v46 + v77);
        v47 += v77;
        v79 = v67((void *)(v46 + v77), 1, v65);
        v80 = v67(v47, 1, v65);
        if (v79)
        {
          if (!v80)
          {
            (*(void (**)(void *, char *, uint64_t))(v66 + 16))(v78, v47, v65);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v78, 0, 1, v65);
            return a1;
          }
        }
        else
        {
          if (!v80)
          {
            (*(void (**)(void *, char *, uint64_t))(v66 + 24))(v78, v47, v65);
            return a1;
          }
          (*(void (**)(void *, uint64_t))(v66 + 8))(v78, v65);
        }
        v58 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1ED8A8EE8) - 8) + 64);
        v59 = v78;
        goto LABEL_34;
      }
    }
    else
    {
      if (!v69)
      {
        (*(void (**)(void *, char *, uint64_t))(v66 + 24))(v63, v64, v65);
        goto LABEL_47;
      }
      (*(void (**)(void *, uint64_t))(v66 + 8))(v63, v65);
    }
    v76 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_47;
  }
  if (v49)
  {
LABEL_33:
    v58 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1EF9E0C30) - 8) + 64);
    v59 = (void *)v46;
LABEL_34:
    memcpy(v59, v47, v58);
    return a1;
  }
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_QWORD *)(v46 + 8) = *((_QWORD *)v47 + 1);
  *(_QWORD *)(v46 + 16) = *((_QWORD *)v47 + 2);
  v50 = *((_QWORD *)v47 + 3);
  *(_BYTE *)(v46 + 32) = v47[32];
  *(_QWORD *)(v46 + 24) = v50;
  v51 = *((_QWORD *)v47 + 5);
  *(_BYTE *)(v46 + 48) = v47[48];
  *(_QWORD *)(v46 + 40) = v51;
  v52 = *(int *)(v9 + 32);
  v88 = (void *)(v46 + v52);
  v53 = &v47[v52];
  v54 = sub_1CCB63490();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v56(v53, 1, v54))
  {
    v57 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v88, v53, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v55 + 16))(v88, v53, v54);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v88, 0, 1, v54);
  }
  v70 = v55;
  v71 = *(int *)(v9 + 36);
  v72 = (void *)(v46 + v71);
  v73 = &v47[v71];
  if (v56(v73, 1, v54))
  {
    v74 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v70 + 16))(v72, v73, v54);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v72, 0, 1, v54);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v46, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for FMIPUnknownItemUTMetadata(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_OWORD *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (_OWORD *)((char *)a1 + v7);
  v9 = (_OWORD *)((char *)a2 + v7);
  v10 = type metadata accessor for FMIPUnknownItemProductMetadata();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    v13 = sub_1CCA14E90(&qword_1EF9E0C30);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v8 = *v9;
    v14 = *((_QWORD *)v9 + 3);
    *((_QWORD *)v8 + 2) = *((_QWORD *)v9 + 2);
    *((_QWORD *)v8 + 3) = v14;
    *((_BYTE *)v8 + 32) = *((_BYTE *)v9 + 32);
    *((_QWORD *)v8 + 5) = *((_QWORD *)v9 + 5);
    *((_BYTE *)v8 + 48) = *((_BYTE *)v9 + 48);
    v15 = *(int *)(v10 + 32);
    v44 = v11;
    __dst = (char *)v8 + v15;
    v16 = (char *)v9 + v15;
    v17 = sub_1CCB63490();
    v18 = *(_QWORD *)(v17 - 8);
    v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    if (v43(v16, 1, v17))
    {
      v19 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(__dst, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    v20 = v18;
    v21 = *(int *)(v10 + 36);
    v22 = (char *)v8 + v21;
    v23 = (char *)v9 + v21;
    if (v43(v23, 1, v17))
    {
      v24 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v23, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, v17);
    }
    v11 = v44;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v8, 0, 1, v10);
  }
  v25 = *(int *)(a3 + 28);
  v26 = (_OWORD *)((char *)a1 + v25);
  v27 = (_OWORD *)((char *)a2 + v25);
  if (v12(v27, 1, v10))
  {
    v28 = sub_1CCA14E90(&qword_1EF9E0C30);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v29 = v11;
    *v26 = *v27;
    v30 = *((_QWORD *)v27 + 3);
    *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
    *((_QWORD *)v26 + 3) = v30;
    *((_BYTE *)v26 + 32) = *((_BYTE *)v27 + 32);
    *((_QWORD *)v26 + 5) = *((_QWORD *)v27 + 5);
    *((_BYTE *)v26 + 48) = *((_BYTE *)v27 + 48);
    v31 = *(int *)(v10 + 32);
    v32 = (char *)v26 + v31;
    v33 = (char *)v27 + v31;
    v34 = sub_1CCB63490();
    v35 = *(_QWORD *)(v34 - 8);
    v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
    if (v36(v33, 1, v34))
    {
      v37 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    v38 = *(int *)(v10 + 36);
    v39 = (char *)v26 + v38;
    v40 = (char *)v27 + v38;
    if (v36(v40, 1, v34))
    {
      v41 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v39, v40, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v39, 0, 1, v34);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v10);
  }
  return a1;
}

_QWORD *assignWithTake for FMIPUnknownItemUTMetadata(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  size_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(void *, uint64_t, uint64_t);
  int v68;
  int v69;
  uint64_t v70;
  void *v71;
  char *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  int v78;
  int v79;
  void *v80;
  uint64_t v81;
  void *__dst;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (uint64_t)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for FMIPUnknownItemProductMetadata();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13((uint64_t)v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_1CCA0BF30(v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
      goto LABEL_7;
    }
    v84 = a3;
    v86 = v12;
    v24 = *((_QWORD *)v10 + 1);
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_QWORD *)(v9 + 8) = v24;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v9 + 16) = *((_QWORD *)v10 + 2);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v9 + 24) = *((_QWORD *)v10 + 3);
    *(_BYTE *)(v9 + 32) = v10[32];
    *(_QWORD *)(v9 + 40) = *((_QWORD *)v10 + 5);
    *(_BYTE *)(v9 + 48) = v10[48];
    v25 = *(int *)(v11 + 32);
    v26 = (void *)(v9 + v25);
    v27 = &v10[v25];
    v28 = sub_1CCB63490();
    v81 = *(_QWORD *)(v28 - 8);
    v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v81 + 48);
    v80 = v26;
    LODWORD(v26) = v29(v26, 1, v28);
    v30 = v29(v27, 1, v28);
    if ((_DWORD)v26)
    {
      if (v30)
      {
        v31 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v80, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        v32 = v81;
      }
      else
      {
        v32 = v81;
        (*(void (**)(void *, char *, uint64_t))(v81 + 32))(v80, v27, v28);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v80, 0, 1, v28);
      }
    }
    else
    {
      v32 = v81;
      if (v30)
      {
        (*(void (**)(void *, uint64_t))(v81 + 8))(v80, v28);
        v38 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v80, v27, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v81 + 40))(v80, v27, v28);
      }
    }
    v39 = *(int *)(v11 + 36);
    v40 = (void *)(v9 + v39);
    v41 = &v10[v39];
    v42 = v29(v40, 1, v28);
    v43 = v29(v41, 1, v28);
    if (v42)
    {
      if (!v43)
      {
        (*(void (**)(void *, char *, uint64_t))(v32 + 32))(v40, v41, v28);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v40, 0, 1, v28);
LABEL_26:
        a3 = v84;
        v12 = v86;
        goto LABEL_27;
      }
    }
    else
    {
      if (!v43)
      {
        (*(void (**)(void *, char *, uint64_t))(v32 + 40))(v40, v41, v28);
        goto LABEL_26;
      }
      (*(void (**)(void *, uint64_t))(v32 + 8))(v40, v28);
    }
    v44 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_26;
  }
  if (v15)
  {
LABEL_7:
    v23 = sub_1CCA14E90(&qword_1EF9E0C30);
    memcpy((void *)v9, v10, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_27;
  }
  v83 = a3;
  v85 = v12;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  v16 = *((_QWORD *)v10 + 3);
  *(_QWORD *)(v9 + 16) = *((_QWORD *)v10 + 2);
  *(_QWORD *)(v9 + 24) = v16;
  *(_BYTE *)(v9 + 32) = v10[32];
  *(_QWORD *)(v9 + 40) = *((_QWORD *)v10 + 5);
  *(_BYTE *)(v9 + 48) = v10[48];
  v17 = *(int *)(v11 + 32);
  __dst = (void *)(v9 + v17);
  v18 = &v10[v17];
  v19 = sub_1CCB63490();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v21(v18, 1, v19))
  {
    v22 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v20 + 32))(__dst, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
  }
  v33 = v20;
  v34 = *(int *)(v11 + 36);
  v35 = (void *)(v9 + v34);
  v36 = &v10[v34];
  if (v21(v36, 1, v19))
  {
    v37 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v33 + 32))(v35, v36, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v19);
  }
  a3 = v83;
  v12 = v85;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v85 + 56))(v9, 0, 1, v11);
LABEL_27:
  v45 = *(int *)(a3 + 28);
  v46 = (uint64_t)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = v13((uint64_t)a1 + v45, 1, v11);
  v49 = v13((uint64_t)v47, 1, v11);
  if (!v48)
  {
    if (v49)
    {
      sub_1CCA0BF30(v46, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
      goto LABEL_33;
    }
    v61 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *(_QWORD *)(v46 + 8) = v61;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v46 + 16) = *((_QWORD *)v47 + 2);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v46 + 24) = *((_QWORD *)v47 + 3);
    *(_BYTE *)(v46 + 32) = v47[32];
    *(_QWORD *)(v46 + 40) = *((_QWORD *)v47 + 5);
    *(_BYTE *)(v46 + 48) = v47[48];
    v62 = *(int *)(v11 + 32);
    v63 = (void *)(v46 + v62);
    v64 = &v47[v62];
    v65 = sub_1CCB63490();
    v66 = *(_QWORD *)(v65 - 8);
    v67 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v66 + 48);
    v68 = v67(v63, 1, v65);
    v69 = v67(v64, 1, v65);
    if (v68)
    {
      if (!v69)
      {
        (*(void (**)(void *, char *, uint64_t))(v66 + 32))(v63, v64, v65);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
LABEL_47:
        v76 = *(int *)(v11 + 36);
        v77 = (void *)(v46 + v76);
        v47 += v76;
        v78 = v67((void *)(v46 + v76), 1, v65);
        v79 = v67(v47, 1, v65);
        if (v78)
        {
          if (!v79)
          {
            (*(void (**)(void *, char *, uint64_t))(v66 + 32))(v77, v47, v65);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v77, 0, 1, v65);
            return a1;
          }
        }
        else
        {
          if (!v79)
          {
            (*(void (**)(void *, char *, uint64_t))(v66 + 40))(v77, v47, v65);
            return a1;
          }
          (*(void (**)(void *, uint64_t))(v66 + 8))(v77, v65);
        }
        v59 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1ED8A8EE8) - 8) + 64);
        v60 = v77;
        goto LABEL_34;
      }
    }
    else
    {
      if (!v69)
      {
        (*(void (**)(void *, char *, uint64_t))(v66 + 40))(v63, v64, v65);
        goto LABEL_47;
      }
      (*(void (**)(void *, uint64_t))(v66 + 8))(v63, v65);
    }
    v75 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_47;
  }
  if (v49)
  {
LABEL_33:
    v59 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1EF9E0C30) - 8) + 64);
    v60 = (void *)v46;
LABEL_34:
    memcpy(v60, v47, v59);
    return a1;
  }
  v50 = v12;
  *(_OWORD *)v46 = *(_OWORD *)v47;
  v51 = *((_QWORD *)v47 + 3);
  *(_QWORD *)(v46 + 16) = *((_QWORD *)v47 + 2);
  *(_QWORD *)(v46 + 24) = v51;
  *(_BYTE *)(v46 + 32) = v47[32];
  *(_QWORD *)(v46 + 40) = *((_QWORD *)v47 + 5);
  *(_BYTE *)(v46 + 48) = v47[48];
  v52 = *(int *)(v11 + 32);
  v53 = (void *)(v46 + v52);
  v54 = &v47[v52];
  v55 = sub_1CCB63490();
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
  if (v57(v54, 1, v55))
  {
    v58 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v56 + 32))(v53, v54, v55);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
  }
  v70 = *(int *)(v11 + 36);
  v71 = (void *)(v46 + v70);
  v72 = &v47[v70];
  if (v57(v72, 1, v55))
  {
    v73 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v56 + 32))(v71, v72, v55);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v71, 0, 1, v55);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v46, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPUnknownItemUTMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCA5FECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_1CCA14E90(&qword_1EF9E0C30);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for FMIPUnknownItemUTMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCA5FF64(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = sub_1CCA14E90(&qword_1EF9E0C30);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPUnknownItemUTMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CCA60028 + 4 * byte_1CCB69841[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CCA6005C + 4 * byte_1CCB6983C[v4]))();
}

uint64_t sub_1CCA6005C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA60064(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA6006CLL);
  return result;
}

uint64_t sub_1CCA60078(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA60080);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CCA60084(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA6008C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPUnknownItemUTMetadata.CodingKeys()
{
  return &type metadata for FMIPUnknownItemUTMetadata.CodingKeys;
}

unint64_t sub_1CCA600AC()
{
  unint64_t result;

  result = qword_1EF9E0D10;
  if (!qword_1EF9E0D10)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB69A64, &type metadata for FMIPUnknownItemUTMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E0D10);
  }
  return result;
}

unint64_t sub_1CCA600F4()
{
  unint64_t result;

  result = qword_1EF9E0D18;
  if (!qword_1EF9E0D18)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6999C, &type metadata for FMIPUnknownItemUTMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E0D18);
  }
  return result;
}

unint64_t sub_1CCA6013C()
{
  unint64_t result;

  result = qword_1EF9E0D20;
  if (!qword_1EF9E0D20)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB699C4, &type metadata for FMIPUnknownItemUTMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E0D20);
  }
  return result;
}

uint64_t sub_1CCA60180()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

_QWORD *sub_1CCA601C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint8_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v6 = v5;
  v34 = a5;
  v35 = a1;
  v9 = sub_1CCB6367C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v5 + qword_1ED8A7248) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v5 + qword_1ED8A7250) = v13;
  v14 = (_QWORD *)(v5 + qword_1ED8A7230);
  *v14 = 0;
  v14[1] = 0;
  *(_QWORD *)(v5 + qword_1ED8A7238) = v13;
  *(_QWORD *)(v5 + qword_1ED8A7240) = v13;
  swift_retain();
  sub_1CCB63508();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v15 = sub_1CCB637FC();
  sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD7F8);
  v16 = sub_1CCB637D8();
  v17 = sub_1CCB63D48();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v33 = v12;
    v19 = v10;
    v20 = v9;
    v21 = a3;
    v22 = a4;
    v23 = v18;
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1CC9BF000, v16, v17, "FMIPBaseEndpoint: initialized", v18, 2u);
    v24 = v23;
    a4 = v22;
    a3 = v21;
    v9 = v20;
    v10 = v19;
    v12 = v33;
    MEMORY[0x1D17B214C](v24, -1, -1);
  }

  *v14 = a3;
  v14[1] = a4;
  swift_bridgeObjectRelease();
  v25 = 0xD000000000000017;
  if ((v34 & 1) == 0)
    v25 = 0xD000000000000014;
  v26 = 0x80000001CCB79EC0;
  if ((v34 & 1) == 0)
    v26 = 0x80000001CCB79E80;
  v27 = (unint64_t *)(v6 + qword_1ED8A7258);
  *v27 = v25;
  v27[1] = v26;
  swift_release();
  v28 = v27[1];
  v36 = *v27;
  v37 = v28;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  v29 = (_QWORD *)sub_1CCB63694();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0D20A78], v9);
  swift_retain();
  sub_1CCB63688();
  sub_1CC9EC670();
  v30 = sub_1CCA06724();
  (*(void (**)(uint64_t))(qword_1ED8AD5D8 + *v29 + 256))(v30);
  swift_release();
  return v29;
}

void sub_1CCA604A8()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CCA604D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA60508 + 4 * byte_1CCB69AE0[a1]))(0x6E656B6F54737061, 0xE800000000000000);
}

uint64_t sub_1CCA60508()
{
  return 2037149030;
}

uint64_t sub_1CCA60518()
{
  return 1752397168;
}

unint64_t sub_1CCA60528()
{
  return 0xD000000000000011;
}

uint64_t sub_1CCA60548()
{
  return 0x6954746E65696C63;
}

uint64_t sub_1CCA6056C()
{
  return 0x6973726556707061;
}

uint64_t sub_1CCA60588()
{
  return 0x54746375646F7270;
}

uint64_t sub_1CCA605A8()
{
  return 0x6F6973726556736FLL;
}

uint64_t sub_1CCA605C4()
{
  return 0x646C697542736FLL;
}

uint64_t sub_1CCA605DC()
{
  return 0x4455656369766564;
}

uint64_t sub_1CCA605F8()
{
  return 0x6576697463616E69;
}

uint64_t sub_1CCA60618()
{
  return 0x436C6C53776F6873;
}

uint64_t sub_1CCA60638()
{
  return 0x73696365446C6C73;
}

unint64_t sub_1CCA60658()
{
  return 0xD000000000000010;
}

uint64_t sub_1CCA606C8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CCA60704 + 4 * byte_1CCB69AF1[a1]))(0xD000000000000015, 0x80000001CCB79D60);
}

uint64_t sub_1CCA60704()
{
  uint64_t v0;

  return v0 + 3;
}

unint64_t sub_1CCA6075C()
{
  return 0xD000000000000011;
}

unint64_t sub_1CCA60778(char a1)
{
  unint64_t result;

  result = 0xD000000000000023;
  if (a1)
  {
    if (a1 == 1)
      return 0xD000000000000025;
    else
      return 0xD000000000000027;
  }
  return result;
}

uint64_t sub_1CCA607D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + qword_1ED8AD5D0;
  v2 = sub_1CCB635B0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t sub_1CCA6087C()
{
  return type metadata accessor for FMIPBaseRequest();
}

uint64_t sub_1CCA60884(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;

  v3 = (_QWORD *)(*v1 + qword_1ED8A7250);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1CCA608D8())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

FMIPCore::FMIPAirPodsPlaySoundType_optional __swiftcall FMIPAirPodsPlaySoundType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  FMIPCore::FMIPAirPodsPlaySoundType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t FMIPAirPodsPlaySoundType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 29813;
  else
    return 0x72656E776FLL;
}

uint64_t sub_1CCA609B0(char *a1, char *a2)
{
  return sub_1CCB1C05C(*a1, *a2);
}

uint64_t sub_1CCA609BC()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA60A2C()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA60A78()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPAirPodsPlaySoundType_optional sub_1CCA60AE4(Swift::String *a1)
{
  return FMIPAirPodsPlaySoundType.init(rawValue:)(*a1);
}

void sub_1CCA60AF0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 29813;
  if (!*v1)
    v2 = 0x72656E776FLL;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE200000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void FMIPAirPodsPlaySoundEvent.soundEventType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *FMIPAirPodsPlaySoundEvent.soundEventType.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*FMIPAirPodsPlaySoundEvent.soundEventType.modify())()
{
  return nullsub_1;
}

uint64_t FMIPAirPodsPlaySoundEvent.includedCase.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t FMIPAirPodsPlaySoundEvent.includedCase.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*FMIPAirPodsPlaySoundEvent.includedCase.modify())()
{
  return nullsub_1;
}

uint64_t FMIPAirPodsPlaySoundEvent.includedLeftBud.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t FMIPAirPodsPlaySoundEvent.includedLeftBud.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*FMIPAirPodsPlaySoundEvent.includedLeftBud.modify())()
{
  return nullsub_1;
}

uint64_t FMIPAirPodsPlaySoundEvent.includedRightBud.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 3);
}

uint64_t FMIPAirPodsPlaySoundEvent.includedRightBud.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 3) = result;
  return result;
}

uint64_t (*FMIPAirPodsPlaySoundEvent.includedRightBud.modify())()
{
  return nullsub_1;
}

uint64_t FMIPAirPodsPlaySoundEvent.onlinePlaySoundAttempted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t FMIPAirPodsPlaySoundEvent.onlinePlaySoundAttempted.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  return result;
}

uint64_t (*FMIPAirPodsPlaySoundEvent.onlinePlaySoundAttempted.modify())()
{
  return nullsub_1;
}

uint64_t FMIPAirPodsPlaySoundEvent.onlinePlaySoundSuccess.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 5);
}

uint64_t FMIPAirPodsPlaySoundEvent.onlinePlaySoundSuccess.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 5) = result;
  return result;
}

uint64_t (*FMIPAirPodsPlaySoundEvent.onlinePlaySoundSuccess.modify())()
{
  return nullsub_1;
}

void *FMIPAirPodsPlaySoundEvent.onlinePlaySoundError.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

void FMIPAirPodsPlaySoundEvent.onlinePlaySoundError.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*FMIPAirPodsPlaySoundEvent.onlinePlaySoundError.modify())()
{
  return nullsub_1;
}

uint64_t FMIPAirPodsPlaySoundEvent.offlinePlaySoundAttempted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t FMIPAirPodsPlaySoundEvent.offlinePlaySoundAttempted.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*FMIPAirPodsPlaySoundEvent.offlinePlaySoundAttempted.modify())()
{
  return nullsub_1;
}

uint64_t FMIPAirPodsPlaySoundEvent.offlinePlaySoundSuccess.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t FMIPAirPodsPlaySoundEvent.offlinePlaySoundSuccess.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*FMIPAirPodsPlaySoundEvent.offlinePlaySoundSuccess.modify())()
{
  return nullsub_1;
}

void *FMIPAirPodsPlaySoundEvent.offlinePlaySoundError.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

void FMIPAirPodsPlaySoundEvent.offlinePlaySoundError.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
}

uint64_t (*FMIPAirPodsPlaySoundEvent.offlinePlaySoundError.modify())()
{
  return nullsub_1;
}

uint64_t FMIPAirPodsPlaySoundEvent.userShownPlayingState.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t FMIPAirPodsPlaySoundEvent.userShownPlayingState.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*FMIPAirPodsPlaySoundEvent.userShownPlayingState.modify())()
{
  return nullsub_1;
}

uint64_t FMIPAirPodsPlaySoundEvent.userShownFinishedPlayingState.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t FMIPAirPodsPlaySoundEvent.userShownFinishedPlayingState.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = result;
  return result;
}

uint64_t (*FMIPAirPodsPlaySoundEvent.userShownFinishedPlayingState.modify())()
{
  return nullsub_1;
}

_BYTE *FMIPAirPodsPlaySoundEvent.init(soundEventType:includedCase:includedLeftBud:includedRightBud:onlinePlaySoundAttempted:onlinePlaySoundSuccess:onlinePlaySoundError:offlinePlaySoundAttempted:offlinePlaySoundSuccess:offlinePlaySoundError:userShownPlayingState:userShownFinishedPlayingState:)@<X0>(_BYTE *result@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char a10, uint64_t a11, char a12, char a13)
{
  *(_BYTE *)a9 = *result;
  *(_BYTE *)(a9 + 1) = a2;
  *(_BYTE *)(a9 + 2) = a3;
  *(_BYTE *)(a9 + 3) = a4;
  *(_BYTE *)(a9 + 4) = a5;
  *(_BYTE *)(a9 + 5) = a6;
  *(_QWORD *)(a9 + 8) = a7;
  *(_BYTE *)(a9 + 16) = a8;
  *(_BYTE *)(a9 + 17) = a10;
  *(_QWORD *)(a9 + 24) = a11;
  *(_BYTE *)(a9 + 32) = a12;
  *(_BYTE *)(a9 + 33) = a13;
  return result;
}

uint64_t sub_1CCA60D70(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA60DB0 + 4 * byte_1CCB69BC0[a1]))(0x657645646E756F73, 0xEE0065707954746ELL);
}

uint64_t sub_1CCA60DB0()
{
  return 0x646564756C636E69;
}

unint64_t sub_1CCA60DE4()
{
  return 0xD000000000000010;
}

uint64_t FMIPManager.enqueue(airpodsPlaySoundEvent:)(char *a1)
{
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  _BYTE v14[8];
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = *((_QWORD *)a1 + 1);
  v8 = a1[16];
  v9 = a1[17];
  v10 = *((_QWORD *)a1 + 3);
  v11 = a1[32];
  v12 = a1[33];
  v14[0] = v1;
  v14[1] = v2;
  v14[2] = v3;
  v14[3] = v4;
  v14[4] = v5;
  v14[5] = v6;
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v18 = v10;
  v19 = v11;
  v20 = v12;
  return _s8FMIPCore13FMIPAnalyticsV25sendAirPodsPlaySoundEvent5eventyAA07FMIPAirefgH0V_tFZ_0((uint64_t)v14);
}

void sub_1CCA60F40(uint64_t a1)
{
  unint64_t v2;
  id v3;
  void *v4;
  id v5;
  char isUniquelyReferenced_nonNull_native;
  id v7;
  char v8;
  id v9;
  char v10;
  id v11;
  char v12;
  id v13;
  char v14;
  unint64_t v15;
  void *v16;
  id v17;
  id v18;
  char v19;
  char v20;
  id v21;
  char v22;
  id v23;
  char v24;
  void *v25;
  id v26;
  id v27;
  char v28;
  char v29;
  id v30;
  char v31;
  id v32;
  char v33;
  id v34;
  char v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD aBlock[6];
  char v42;
  char v43;
  char v44;
  char v45;

  v2 = sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
  v3 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v4 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_initWithString_, v4);

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v2;
  sub_1CC9E1E50((uint64_t)v5, 0x657645646E756F73, 0xEE0065707954746ELL, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, *(unsigned __int8 *)(a1 + 1));
  v8 = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v2;
  sub_1CC9E1E50((uint64_t)v7, 0x646564756C636E69, 0xEC00000065736143, v8);
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, *(unsigned __int8 *)(a1 + 3));
  v10 = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v2;
  sub_1CC9E1E50((uint64_t)v9, 0xD000000000000010, 0x80000001CCB79EE0, v10);
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, *(unsigned __int8 *)(a1 + 2));
  v12 = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v2;
  sub_1CC9E1E50((uint64_t)v11, 0x646564756C636E69, 0xEF6475427466654CLL, v12);
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, *(unsigned __int8 *)(a1 + 4));
  v14 = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v2;
  sub_1CC9E1E50((uint64_t)v13, 0xD000000000000018, 0x80000001CCB79F00, v14);
  v15 = v2;
  swift_bridgeObjectRelease();
  v16 = *(void **)(a1 + 8);
  if (v16)
  {
    swift_getErrorValue();
    v17 = v16;
    v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, sub_1CCAC1058(v39));
    v19 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v2;
    sub_1CC9E1E50((uint64_t)v18, 0xD000000000000014, 0x80000001CCB7A020, v19);
    swift_bridgeObjectRelease();

  }
  sub_1CCA61BE0(a1 + 5, (uint64_t)&v43);
  sub_1CCA61BE0((uint64_t)&v43, (uint64_t)&v44);
  v20 = v44;
  if (v44 != 2)
  {
    v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v20 & 1);
    v22 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v2;
    sub_1CC9E1E50((uint64_t)v21, 0xD000000000000016, 0x80000001CCB7A000, v22);
    swift_bridgeObjectRelease();
  }
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, *(unsigned __int8 *)(a1 + 16));
  v24 = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v2;
  sub_1CC9E1E50((uint64_t)v23, 0xD000000000000019, 0x80000001CCB79F20, v24);
  swift_bridgeObjectRelease();
  v25 = *(void **)(a1 + 24);
  if (v25)
  {
    swift_getErrorValue();
    v26 = v25;
    v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, sub_1CCAC1058(v40));
    v28 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v2;
    sub_1CC9E1E50((uint64_t)v27, 0xD000000000000015, 0x80000001CCB79FE0, v28);
    swift_bridgeObjectRelease();

  }
  sub_1CCA61BE0(a1 + 17, (uint64_t)&v42);
  sub_1CCA61BE0((uint64_t)&v42, (uint64_t)&v45);
  v29 = v45;
  if (v45 != 2)
  {
    v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v29 & 1);
    v31 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v2;
    sub_1CC9E1E50((uint64_t)v30, 0xD000000000000017, 0x80000001CCB79FC0, v31);
    swift_bridgeObjectRelease();
  }
  v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, *(unsigned __int8 *)(a1 + 32));
  v33 = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v2;
  sub_1CC9E1E50((uint64_t)v32, 0xD000000000000015, 0x80000001CCB79F40, v33);
  swift_bridgeObjectRelease();
  v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, *(unsigned __int8 *)(a1 + 33));
  v35 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v34, 0xD00000000000001DLL, 0x80000001CCB79F60, v35);
  swift_bridgeObjectRelease();
  v36 = (void *)sub_1CCB63964();
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = v15;
  aBlock[4] = sub_1CCA3C490;
  aBlock[5] = v37;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA7EAC8;
  aBlock[3] = &unk_1E88F4BE0;
  v38 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v38);
  swift_bridgeObjectRelease();

}

uint64_t _s8FMIPCore13FMIPAnalyticsV25sendAirPodsPlaySoundEvent5eventyAA07FMIPAirefgH0V_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  _QWORD v15[2];
  _QWORD aBlock[6];
  _OWORD v17[2];
  __int16 v18;

  v2 = sub_1CCB63820();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63868();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v10;
  v18 = *(_WORD *)(a1 + 32);
  if (qword_1EF9DF018 != -1)
    swift_once();
  v11 = swift_allocObject();
  v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 32) = v12;
  *(_WORD *)(v11 + 48) = *(_WORD *)(a1 + 32);
  aBlock[4] = sub_1CCA61BA4;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F4B90;
  v13 = _Block_copy(aBlock);
  sub_1CCA61BAC((uint64_t)v17);
  sub_1CCB63844();
  v15[1] = MEMORY[0x1E0DEE9D8];
  sub_1CCA248D4();
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA1FC64();
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v9, v5, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

unint64_t sub_1CCA617AC()
{
  unint64_t result;

  result = qword_1EF9E0D48;
  if (!qword_1EF9E0D48)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPAirPodsPlaySoundType, &type metadata for FMIPAirPodsPlaySoundType);
    atomic_store(result, (unint64_t *)&qword_1EF9E0D48);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPAirPodsPlaySoundType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCA6183C + 4 * byte_1CCB69BD1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCA61870 + 4 * byte_1CCB69BCC[v4]))();
}

uint64_t sub_1CCA61870(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA61878(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA61880);
  return result;
}

uint64_t sub_1CCA6188C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA61894);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCA61898(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA618A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPAirPodsPlaySoundType()
{
  return &type metadata for FMIPAirPodsPlaySoundType;
}

void destroy for FMIPAirPodsPlaySoundEvent(uint64_t a1)
{

}

uint64_t initializeWithCopy for FMIPAirPodsPlaySoundEvent(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  void *v6;
  id v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 1);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  v4 = *(void **)(a2 + 8);
  v5 = v4;
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  v7 = v6;
  *(_QWORD *)(a1 + 24) = v6;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for FMIPAirPodsPlaySoundEvent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  v4 = *(void **)(a1 + 8);
  v5 = *(void **)(a2 + 8);
  v6 = v5;
  *(_QWORD *)(a1 + 8) = v5;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v7 = *(void **)(a1 + 24);
  v8 = *(void **)(a2 + 24);
  v9 = v8;
  *(_QWORD *)(a1 + 24) = v8;

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

__n128 initializeWithTake for FMIPAirPodsPlaySoundEvent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FMIPAirPodsPlaySoundEvent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPAirPodsPlaySoundEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 34))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPAirPodsPlaySoundEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 34) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPAirPodsPlaySoundEvent()
{
  return &type metadata for FMIPAirPodsPlaySoundEvent;
}

uint64_t sub_1CCA61B78()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1CCA61BA4()
{
  uint64_t v0;

  sub_1CCA60F40(v0 + 16);
}

uint64_t sub_1CCA61BAC(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 24);
  v3 = *(id *)(a1 + 8);
  v4 = v2;
  return a1;
}

uint64_t sub_1CCA61BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1EF9E0D50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCA61C28()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t FMIPPlaySoundDeviceAction.__allocating_init(device:channels:safetyWarningConfirmed:soundQueueingConfirmed:soundMethod:)(uint64_t a1, uint64_t a2, char a3, char a4, char *a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = swift_allocObject();
  v11 = sub_1CCA62998(a1, a2, a3, a4, a5, v10);
  swift_release();
  return v11;
}

uint64_t FMIPPlaySoundMethod.description.getter()
{
  unsigned __int8 *v0;
  unsigned int v1;
  uint64_t v2;

  v1 = *v0;
  v2 = 1701601838;
  if (v1 != 2)
    v2 = 0x697269732ELL;
  if (v1 >= 2)
    return v2;
  else
    return 0x63697373616C632ELL;
}

BOOL static FMIPPlaySoundMethod.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FMIPPlaySoundMethod.hash(into:)()
{
  return sub_1CCB64348();
}

uint64_t FMIPPlaySoundMethod.hashValue.getter()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

uint64_t sub_1CCA61D98()
{
  unsigned __int8 *v0;
  unsigned int v1;
  uint64_t v2;

  v1 = *v0;
  v2 = 1701601838;
  if (v1 != 2)
    v2 = 0x697269732ELL;
  if (v1 >= 2)
    return v2;
  else
    return 0x63697373616C632ELL;
}

uint64_t FMIPPlaySoundDeviceAction.channels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FMIPPlaySoundDeviceAction.safetyWarningConfirmed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_safetyWarningConfirmed);
}

uint64_t FMIPPlaySoundDeviceAction.soundQueueingConfirmed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_soundQueueingConfirmed);
}

void FMIPPlaySoundDeviceAction.soundMethod.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_soundMethod);
}

uint64_t FMIPPlaySoundDeviceAction.issueDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_issueDate;
  v4 = sub_1CCB635B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FMIPPlaySoundDeviceAction.init(device:channels:safetyWarningConfirmed:soundQueueingConfirmed:soundMethod:)(uint64_t a1, uint64_t a2, char a3, char a4, char *a5)
{
  uint64_t v5;
  uint64_t v6;

  v6 = sub_1CCA62998(a1, a2, a3, a4, a5, v5);
  swift_release();
  return v6;
}

unint64_t sub_1CCA61E9C()
{
  uint64_t v0;

  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  sub_1CC9E6BA4();
  sub_1CCB63A9C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  v0 = swift_bridgeObjectRetain();
  MEMORY[0x1D17B10B4](v0, &type metadata for FMIPPlaySoundChannels);
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD00000000000001ELL;
}

void FMIPPlaySoundDeviceAction.__allocating_init(device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPPlaySoundDeviceAction.init(device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CCA62194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_issueDate;
  v2 = sub_1CCB635B0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t FMIPPlaySoundDeviceAction.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = FMIPDeviceAction.deinit();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_issueDate;
  v2 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t FMIPPlaySoundDeviceAction.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = FMIPDeviceAction.deinit();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_issueDate;
  v2 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t FMIPUTItemAction.init(unknownItem:)(uint64_t a1)
{
  uint64_t v1;

  sub_1CC9FED60(a1, v1 + OBJC_IVAR____TtC8FMIPCore16FMIPUTItemAction_unknownItem, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  return v1;
}

uint64_t FMIPUTItemAction.deinit()
{
  uint64_t v0;

  sub_1CCA0BF30(v0 + OBJC_IVAR____TtC8FMIPCore16FMIPUTItemAction_unknownItem, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  return v0;
}

uint64_t FMIPIgnoreItemAction.__allocating_init(unknownItem:until:)(uint64_t a1, uint64_t a2)
{
  return sub_1CCA62440(a1, a2, &OBJC_IVAR____TtC8FMIPCore20FMIPIgnoreItemAction_until);
}

uint64_t FMIPIgnoreItemAction.init(unknownItem:until:)(uint64_t a1, uint64_t a2)
{
  return sub_1CCA624B4(a1, a2, &OBJC_IVAR____TtC8FMIPCore20FMIPIgnoreItemAction_until);
}

void FMIPIgnoreItemAction.__allocating_init(unknownItem:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPIgnoreItemAction.init(unknownItem:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t _s8FMIPCore31FMIPFetchEncryptedPayloadActionCfD_0()
{
  uint64_t v0;

  sub_1CCA0BF30(v0 + OBJC_IVAR____TtC8FMIPCore16FMIPUTItemAction_unknownItem, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  return swift_deallocClassInstance();
}

uint64_t _s8FMIPCore31FMIPFetchEncryptedPayloadActionC11unknownItemAcA011FMIPUnknownG0V_tcfC_0(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1CC9FED60(a1, v2 + OBJC_IVAR____TtC8FMIPCore16FMIPUTItemAction_unknownItem, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  return v2;
}

uint64_t FMIPStopUTSoundAction.init(unknownItem:)(uint64_t a1)
{
  uint64_t v1;

  sub_1CC9FED60(a1, v1 + OBJC_IVAR____TtC8FMIPCore16FMIPUTItemAction_unknownItem, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  return v1;
}

uint64_t FMIPPlayUTSoundAction.__allocating_init(unknownItem:context:)(uint64_t a1, uint64_t a2)
{
  return sub_1CCA62440(a1, a2, &OBJC_IVAR____TtC8FMIPCore21FMIPPlayUTSoundAction_context);
}

uint64_t sub_1CCA62440(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + *a3) = a2;
  sub_1CC9FED60(a1, v6 + OBJC_IVAR____TtC8FMIPCore16FMIPUTItemAction_unknownItem, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  return v6;
}

uint64_t FMIPPlayUTSoundAction.init(unknownItem:context:)(uint64_t a1, uint64_t a2)
{
  return sub_1CCA624B4(a1, a2, &OBJC_IVAR____TtC8FMIPCore21FMIPPlayUTSoundAction_context);
}

uint64_t sub_1CCA624B4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + *a3) = a2;
  sub_1CC9FED60(a1, v3 + OBJC_IVAR____TtC8FMIPCore16FMIPUTItemAction_unknownItem, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  return v3;
}

void FMIPPlayUTSoundAction.__allocating_init(unknownItem:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPPlayUTSoundAction.init(unknownItem:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t FMIPUTItemAction.__allocating_init(unknownItem:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1CC9FED60(a1, v2 + OBJC_IVAR____TtC8FMIPCore16FMIPUTItemAction_unknownItem, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  return v2;
}

uint64_t FMIPUTItemAction.__deallocating_deinit()
{
  uint64_t v0;

  sub_1CCA0BF30(v0 + OBJC_IVAR____TtC8FMIPCore16FMIPUTItemAction_unknownItem, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  return swift_deallocClassInstance();
}

uint64_t FMIPUTItemAction.debugDescription.getter()
{
  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CC9E6BA4();
  sub_1CCB63A9C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  type metadata accessor for FMIPUnknownItem();
  sub_1CCB64060();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 60;
}

uint64_t sub_1CCA62730()
{
  return FMIPUTItemAction.debugDescription.getter();
}

uint64_t FMIPPlaySoundItemAction.__allocating_init(item:context:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = swift_allocObject();
  v7 = v6 + OBJC_IVAR____TtC8FMIPCore23FMIPPlaySoundItemAction_uuid;
  v8 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v6 + OBJC_IVAR____TtC8FMIPCore23FMIPPlaySoundItemAction_context;
  *(_QWORD *)v9 = a2;
  *(_BYTE *)(v9 + 8) = a3 & 1;
  sub_1CC9FED60(a1, v6 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  return v6;
}

uint64_t FMIPPlaySoundItemAction.init(item:context:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = v3 + OBJC_IVAR____TtC8FMIPCore23FMIPPlaySoundItemAction_uuid;
  v8 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v3 + OBJC_IVAR____TtC8FMIPCore23FMIPPlaySoundItemAction_context;
  *(_QWORD *)v9 = a2;
  *(_BYTE *)(v9 + 8) = a3 & 1;
  sub_1CC9FED60(a1, v3 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  return v3;
}

void FMIPPlaySoundItemAction.__allocating_init(item:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPPlaySoundItemAction.init(item:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CCA628FC()
{
  uint64_t v0;

  return sub_1CCA62ADC(v0 + OBJC_IVAR____TtC8FMIPCore23FMIPPlaySoundItemAction_uuid);
}

uint64_t FMIPPlaySoundItemAction.deinit()
{
  uint64_t v0;

  sub_1CCA0BF30(v0 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA62ADC(v0 + OBJC_IVAR____TtC8FMIPCore23FMIPPlaySoundItemAction_uuid);
  return v0;
}

uint64_t FMIPPlaySoundItemAction.__deallocating_deinit()
{
  uint64_t v0;

  sub_1CCA0BF30(v0 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA62ADC(v0 + OBJC_IVAR____TtC8FMIPCore23FMIPPlaySoundItemAction_uuid);
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA62998(uint64_t a1, uint64_t a2, char a3, char a4, char *a5, uint64_t a6)
{
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  v11 = *a5;
  swift_retain();
  sub_1CCB635A4();
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_channels) = a2;
  *(_BYTE *)(a6 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_safetyWarningConfirmed) = a3;
  *(_BYTE *)(a6 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_soundQueueingConfirmed) = a4;
  *(_BYTE *)(a6 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_soundMethod) = v11;
  *(_QWORD *)(a6 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext) = 0;
  v12 = (_QWORD *)(a6 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  *v12 = 0;
  v12[1] = 0;
  v13 = (_QWORD *)(a6 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
  *v13 = 0;
  v13[1] = 0;
  v14 = (_QWORD *)(a6 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_username);
  *v14 = 0;
  v14[1] = 0;
  v15 = (_QWORD *)(a6 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  *v15 = 0;
  v15[1] = 0;
  v16 = (_QWORD *)(a6 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
  *v16 = 0;
  v16[1] = 0;
  *(_OWORD *)(a6 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession) = xmmword_1CCB66A50;
  sub_1CC9FED60(a1, a6 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  return a6;
}

uint64_t sub_1CCA62ADC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CCA14E90(&qword_1ED8A8EF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1CCA62B20()
{
  unint64_t result;

  result = qword_1EF9E0D58;
  if (!qword_1EF9E0D58)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPPlaySoundMethod, &type metadata for FMIPPlaySoundMethod);
    atomic_store(result, (unint64_t *)&qword_1EF9E0D58);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPPlaySoundMethod(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CCA62BB0 + 4 * byte_1CCB69D15[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CCA62BE4 + 4 * asc_1CCB69D10[v4]))();
}

uint64_t sub_1CCA62BE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA62BEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA62BF4);
  return result;
}

uint64_t sub_1CCA62C00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA62C08);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CCA62C0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA62C14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPPlaySoundMethod()
{
  return &type metadata for FMIPPlaySoundMethod;
}

uint64_t sub_1CCA62C30()
{
  return type metadata accessor for FMIPPlaySoundDeviceAction(0);
}

uint64_t type metadata accessor for FMIPPlaySoundDeviceAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E0D88);
}

uint64_t sub_1CCA62C4C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CCB635B0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for FMIPPlaySoundDeviceAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPPlaySoundDeviceAction.__allocating_init(device:channels:safetyWarningConfirmed:soundQueueingConfirmed:soundMethod:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 392))();
}

uint64_t sub_1CCA62CF0()
{
  return type metadata accessor for FMIPFetchEncryptedPayloadAction(0);
}

uint64_t type metadata accessor for FMIPFetchEncryptedPayloadAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E0F90);
}

uint64_t sub_1CCA62D10()
{
  return type metadata accessor for FMIPIgnoreItemAction(0);
}

uint64_t type metadata accessor for FMIPIgnoreItemAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E1040);
}

uint64_t method lookup function for FMIPIgnoreItemAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPIgnoreItemAction.__allocating_init(unknownItem:until:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1CCA62D44()
{
  return type metadata accessor for FMIPStopUTSoundAction(0);
}

uint64_t type metadata accessor for FMIPStopUTSoundAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E1100);
}

uint64_t sub_1CCA62D60()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1CCA62D94()
{
  return type metadata accessor for FMIPPlayUTSoundAction(0);
}

uint64_t type metadata accessor for FMIPPlayUTSoundAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E11B0);
}

uint64_t sub_1CCA62DB0()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for FMIPPlayUTSoundAction()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1CCA62E00()
{
  return type metadata accessor for FMIPUTItemAction(0);
}

uint64_t type metadata accessor for FMIPUTItemAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E1248);
}

uint64_t sub_1CCA62E1C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FMIPUnknownItem();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for FMIPUTItemAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPUTItemAction.__allocating_init(unknownItem:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_1CCA62E9C()
{
  return type metadata accessor for FMIPPlaySoundItemAction(0);
}

uint64_t type metadata accessor for FMIPPlaySoundItemAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, (uint64_t *)&unk_1EF9E12F8);
}

void sub_1CCA62EB8()
{
  unint64_t v0;

  sub_1CCA62F48();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for FMIPPlaySoundItemAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPPlaySoundItemAction.__allocating_init(item:context:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 136))(a1, a2, a3 & 1);
}

void sub_1CCA62F48()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF9E1308[0])
  {
    sub_1CCB63604();
    v0 = sub_1CCB63E2C();
    if (!v1)
      atomic_store(v0, qword_1EF9E1308);
  }
}

void FMIPItemImageSize.init(rawValue:)(char *a1@<X8>, double a2@<D0>)
{
  char v2;

  if (a2 == 66.0)
    v2 = 1;
  else
    v2 = 2;
  if (a2 == 37.0)
    v2 = 0;
  *a1 = v2;
}

double FMIPItemImageSize.rawValue.getter()
{
  _BYTE *v0;
  double result;

  result = 37.0;
  if (*v0)
    return 66.0;
  return result;
}

BOOL sub_1CCA63010(_BYTE *a1, _BYTE *a2)
{
  double v2;
  double v3;

  v2 = 37.0;
  if (*a1)
    v3 = 66.0;
  else
    v3 = 37.0;
  if (*a2)
    v2 = 66.0;
  return v3 == v2;
}

uint64_t sub_1CCA6304C()
{
  return sub_1CCB03394();
}

uint64_t sub_1CCA63058()
{
  return sub_1CCB6436C();
}

uint64_t sub_1CCA63098()
{
  return sub_1CCB03394();
}

double *sub_1CCA630A0@<X0>(double *result@<X0>, _BYTE *a2@<X8>)
{
  if (*result == 37.0)
  {
    *a2 = 0;
  }
  else if (*result == 66.0)
  {
    *a2 = 1;
  }
  else
  {
    *a2 = 2;
  }
  return result;
}

void sub_1CCA630EC(double *a1@<X8>)
{
  _BYTE *v1;
  double v2;

  v2 = 37.0;
  if (*v1)
    v2 = 66.0;
  *a1 = v2;
}

uint64_t FMIPItemImageCacheRequest.debugDescription.getter()
{
  sub_1CCB63FB8();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB64060();
  sub_1CCB63A24();
  sub_1CCB63C10();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  type metadata accessor for CGColor(0);
  sub_1CCB64060();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t FMIPItemImageCacheRequest.fileName.getter()
{
  double *v0;
  double v1;
  int v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  double v15;
  double v16;
  int v17;
  uint64_t v18;

  v1 = *v0;
  v2 = *((unsigned __int8 *)v0 + 16);
  v3 = v0[3];
  v4 = sub_1CCB63CC4();
  if (v4)
    v5 = v4;
  else
    v5 = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v16 = v1;
    v17 = v2;
    v18 = MEMORY[0x1E0DEE9D8];
    sub_1CCA6388C(0, v6, 0);
    v7 = 0;
    do
    {
      v8 = sub_1CCB63C10();
      v10 = v9;
      v12 = *(_QWORD *)(v18 + 16);
      v11 = *(_QWORD *)(v18 + 24);
      if (v12 >= v11 >> 1)
        sub_1CCA6388C(v11 > 1, v12 + 1, 1);
      ++v7;
      *(_QWORD *)(v18 + 16) = v12 + 1;
      v13 = v18 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v8;
      *(_QWORD *)(v13 + 40) = v10;
    }
    while (v6 != v7);
    swift_bridgeObjectRelease();
    v2 = v17;
    v1 = v16;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1CCA14E90(&qword_1EF9E13B8);
  sub_1CCA638A8();
  sub_1CCB6394C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  result = sub_1CCB63A24();
  v15 = 37.0;
  if (v2)
    v15 = 66.0;
  if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  result = sub_1CCB63A24();
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v3 < 9.22337204e18)
  {
    sub_1CCB64240();
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
    sub_1CCB63A24();
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
    sub_1CCB63A24();
    swift_bridgeObjectRetain();
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
    return *(_QWORD *)&v1;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t FMIPItemImageCacheRequest.emoji.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void FMIPItemImageCacheRequest.size.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

double FMIPItemImageCacheRequest.scale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

id FMIPItemImageCacheRequest.backgroundColor.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t FMIPItemImageCacheRequest.osVersion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPItemImageCacheRequest.init(emoji:size:scale:backgroundColor:osVersion:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  char v8;

  v8 = *a3;
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = a2;
  *(_BYTE *)(a7 + 16) = v8;
  *(double *)(a7 + 24) = a8;
  *(_QWORD *)(a7 + 32) = a4;
  *(_QWORD *)(a7 + 40) = a5;
  *(_QWORD *)(a7 + 48) = a6;
  return result;
}

uint64_t FMIPItemImageCacheRequest.hash(into:)()
{
  sub_1CCB639F4();
  sub_1CCB6436C();
  sub_1CCB639F4();
  type metadata accessor for CGColor(0);
  sub_1CCA638F4();
  return sub_1CCB637C0();
}

uint64_t FMIPItemImageCacheRequest.hashValue.getter()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  sub_1CCB6436C();
  sub_1CCB639F4();
  type metadata accessor for CGColor(0);
  sub_1CCA638F4();
  sub_1CCB637C0();
  return sub_1CCB64384();
}

uint64_t sub_1CCA637AC()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  sub_1CCB6436C();
  sub_1CCB639F4();
  type metadata accessor for CGColor(0);
  sub_1CCA638F4();
  sub_1CCB637C0();
  return sub_1CCB64384();
}

uint64_t sub_1CCA63870(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CCA63B34(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1CCA6388C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CCA63CD8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

unint64_t sub_1CCA638A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF9E13C0;
  if (!qword_1EF9E13C0)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E13B8);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EF9E13C0);
  }
  return result;
}

unint64_t sub_1CCA638F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF9E13C8;
  if (!qword_1EF9E13C8)
  {
    type metadata accessor for CGColor(255);
    result = MEMORY[0x1D17B2068](&unk_1CCB65EA4, v1);
    atomic_store(result, (unint64_t *)&qword_1EF9E13C8);
  }
  return result;
}

uint64_t sub_1CCA6393C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CCA64AB4(a1, a2, a3, *v3, &qword_1EF9E03B8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CCA63960(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CCA63E40(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CCA6397C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CCA63FC4(a1, a2, a3, (_QWORD *)*v3, &qword_1EF9E1420, &qword_1EF9E1428);
  *v3 = result;
  return result;
}

uint64_t sub_1CCA639A8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CCA63FC4(a1, a2, a3, (_QWORD *)*v3, &qword_1EF9E1430, &qword_1EF9E1438);
  *v3 = result;
  return result;
}

uint64_t sub_1CCA639D4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CC9C647C(a1, a2, a3, (_QWORD *)*v3, &qword_1EF9E2AD0, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
  *v3 = result;
  return result;
}

uint64_t sub_1CCA63A00(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CCA63FC4(a1, a2, a3, (_QWORD *)*v3, &qword_1EF9E1410, &qword_1EF9E1418);
  *v3 = result;
  return result;
}

uint64_t sub_1CCA63A2C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CC9C647C(a1, a2, a3, (_QWORD *)*v3, &qword_1EF9E13F8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  *v3 = result;
  return result;
}

uint64_t sub_1CCA63A58(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CC9C647C(a1, a2, a3, (_QWORD *)*v3, &qword_1EF9E1440, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  *v3 = result;
  return result;
}

uint64_t sub_1CCA63A84(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CCA642D4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1CCA63AA0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CCA64474(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CCA63ABC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CCA645F8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1CCA63AD8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CCA64794(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CCA63AF4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CCA64914(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1CCA63B10(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CCA64AB4(a1, a2, a3, *v3, &qword_1EF9E1450);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CCA63B34(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1CCA14E90(&qword_1EF9E1468);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_1CCA14E90(&qword_1EF9E1470);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA63CD8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1CCA14E90((uint64_t *)&unk_1ED8AA620);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA63E40(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1CCA14E90(&qword_1EF9E1448);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 352);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[352 * v8])
      memmove(v12, v13, 352 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[352 * v8] || v12 >= &v13[352 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA63FC4(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    sub_1CCA14E90(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = j__malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11)
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    sub_1CCA14E90(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA64150(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1CCA14E90(&qword_1EF9E1460);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA642D4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1CCA14E90(&qword_1EF9E4E40);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_1CCA14E90(&qword_1EF9E13F0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA64474(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1CCA14E90(&qword_1EF9E1478);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8])
      memmove(v12, v13, 88 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[88 * v8] || v12 >= &v13[88 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA645F8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1CCA14E90(&qword_1EF9E1480);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 224);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 4;
  v13 = a4 + 4;
  v14 = 28 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v10 + 4, a4 + 4, v14 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    sub_1CCA14E90(&qword_1EF9E1488);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA64794(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1CCA14E90(&qword_1ED8AA600);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA64914(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1CCA14E90(&qword_1EF9E1400);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_1CCA14E90(&qword_1EF9E1408);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA64AB4(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    sub_1CCA14E90(a5);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v9])
      memmove(v13, v14, v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v9] || v13 >= &v14[v9])
  {
    memcpy(v13, v14, v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t _s8FMIPCore25FMIPItemImageCacheRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  double v12;
  double v13;
  BOOL v14;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(double *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = *(double *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v10 = sub_1CCB642A0(), result = 0, (v10 & 1) != 0))
  {
    v12 = 37.0;
    if (v2)
      v13 = 66.0;
    else
      v13 = 37.0;
    if (v6)
      v12 = 66.0;
    v14 = v13 == v12 && v3 == v7;
    if (v14 && (type metadata accessor for CGColor(0), sub_1CCA638F4(), (sub_1CCB637B4() & 1) != 0))
    {
      if (v4 == v8 && v5 == v9)
        return 1;
      else
        return sub_1CCB642A0();
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1CCA64D3C()
{
  unint64_t result;

  result = qword_1EF9E13D0;
  if (!qword_1EF9E13D0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemImageSize, &type metadata for FMIPItemImageSize);
    atomic_store(result, (unint64_t *)&qword_1EF9E13D0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPItemImageSize(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCA64DCC + 4 * byte_1CCB69FB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCA64E00 + 4 * byte_1CCB69FB0[v4]))();
}

uint64_t sub_1CCA64E00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA64E08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA64E10);
  return result;
}

uint64_t sub_1CCA64E1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA64E24);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCA64E28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA64E30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPItemImageSize()
{
  return &type metadata for FMIPItemImageSize;
}

uint64_t destroy for FMIPItemImageCacheRequest(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FMIPItemImageCacheRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  v6 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FMIPItemImageCacheRequest(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for FMIPItemImageCacheRequest(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FMIPItemImageCacheRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t FMIPDeviceAction.init(device:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext) = 0;
  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  *v2 = 0;
  v2[1] = 0;
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_username);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
  *v6 = 0;
  v6[1] = 0;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession) = xmmword_1CCB66A50;
  sub_1CC9F73E8(a1, v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  return v1;
}

uint64_t sub_1CCA65078()
{
  uint64_t v0;
  uint64_t v1;

  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CC9E6BA4();
  sub_1CCB63A9C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  v1 = sub_1CCB63A24();
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 144))(v1);
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 60;
}

uint64_t FMIPDeviceAction.deinit()
{
  uint64_t v0;

  sub_1CC9F73AC(v0 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);

  sub_1CCA203A8(*(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCA1B1A8(*(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession), *(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession + 8));
  return v0;
}

void *sub_1CCA6533C()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_1CCA65388(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*sub_1CCA653D8())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1CCA6541C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  swift_beginAccess();
  v2 = *v1;
  sub_1CC9DF994(*v1);
  return v2;
}

uint64_t sub_1CCA65474(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a1;
  v5[1] = a2;
  return sub_1CCA203A8(v6);
}

uint64_t (*sub_1CCA654D0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CCA65514()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t FMIPDeviceAction.device.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1CC9F7368(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, a1);
}

uint64_t sub_1CCA65534@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t *a3)@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(unsigned __int8 *, unsigned __int8 *, uint64_t *);

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_1CCA65AB8;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)(unsigned __int8 *, unsigned __int8 *, uint64_t *))v6;
  return sub_1CC9DF994(v4);
}

uint64_t sub_1CCA655C8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t, uint64_t (*)(char a1), uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v6 = *a2;
  v8 = *a3;
  v7 = a3[1];
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  swift_retain();
  a4(v5, v6, sub_1CCA65AC0, v9);
  return swift_release();
}

uint64_t sub_1CCA6564C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(char, char, uint64_t, uint64_t);
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CCA65A8C;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_1CC9DF994(v3);
  return sub_1CCA203A8(v8);
}

uint64_t sub_1CCA65704(char a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(char *, char *, _QWORD *))
{
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  char v12;

  v12 = a1;
  v11 = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  v10[0] = sub_1CCA65A94;
  v10[1] = v8;
  swift_retain();
  a5(&v12, &v11, v10);
  return swift_release();
}

uint64_t FMIPDeviceAction.__allocating_init(device:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext) = 0;
  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_username);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
  *v7 = 0;
  v7[1] = 0;
  v8 = v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession) = xmmword_1CCB66A50;
  sub_1CC9F73E8(a1, v8);
  return v2;
}

uint64_t FMIPDeviceAction.__deallocating_deinit()
{
  FMIPDeviceAction.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA6586C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 344))();
}

uint64_t sub_1CCA65894@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_1CCA658C4(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 160);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1CCA65908()
{
  return type metadata accessor for FMIPDeviceAction();
}

uint64_t type metadata accessor for FMIPDeviceAction()
{
  uint64_t result;

  result = qword_1EF9E14B8;
  if (!qword_1EF9E14B8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA6594C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FMIPDevice();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for FMIPDeviceAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPDeviceAction.isPasswordRequired.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of FMIPDeviceAction.authenticationContext.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of FMIPDeviceAction.authenticationContext.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of FMIPDeviceAction.authenticationContext.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of FMIPDeviceAction.trustedDeviceConfirmation.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of FMIPDeviceAction.trustedDeviceConfirmation.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of FMIPDeviceAction.trustedDeviceConfirmation.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of FMIPDeviceAction.isTrustedDeviceVerificationRequired.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of FMIPDeviceAction.__allocating_init(device:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 328))();
}

uint64_t dispatch thunk of FMIPDeviceAction.debugDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of FMIPDeviceAction.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t sub_1CCA65A68()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA65A8C(char a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1CCA65704(a1, a2, a3, a4, *(void (**)(char *, char *, _QWORD *))(v4 + 16));
}

uint64_t sub_1CCA65A94(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_1CCA65AB8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_1CCA655C8(a1, a2, a3, *(void (**)(uint64_t, uint64_t, uint64_t (*)(char), uint64_t))(v3 + 16));
}

uint64_t sub_1CCA65AC0(char a1)
{
  uint64_t v1;
  uint64_t (*v2)(char *);
  char v4;

  v2 = *(uint64_t (**)(char *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t static FMIPCancelEraseAction.== infix(_:_:)(uint64_t a1)
{
  return static FMIPDevice.== infix(_:_:)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
}

uint64_t FMIPCancelEraseAction.__allocating_init(device:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext) = 0;
  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_username);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
  *v7 = 0;
  v7[1] = 0;
  v8 = v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession) = xmmword_1CCB66A50;
  sub_1CC9F73E8(a1, v8);
  return v2;
}

uint64_t FMIPCancelEraseAction.init(device:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext) = 0;
  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  *v2 = 0;
  v2[1] = 0;
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_username);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
  *v6 = 0;
  v6[1] = 0;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession) = xmmword_1CCB66A50;
  sub_1CC9F73E8(a1, v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  return v1;
}

uint64_t FMIPCancelEraseAction.__deallocating_deinit()
{
  FMIPDeviceAction.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA65CC8()
{
  return type metadata accessor for FMIPCancelEraseAction();
}

uint64_t type metadata accessor for FMIPCancelEraseAction()
{
  uint64_t result;

  result = qword_1EF9E1668;
  if (!qword_1EF9E1668)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA65D0C()
{
  return swift_updateClassMetadata2();
}

uint64_t type metadata accessor for FMIPEraseRequest()
{
  uint64_t result;

  result = qword_1EF9E17F0;
  if (!qword_1EF9E17F0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA65D7C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1CCA65DC8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA65DF8 + 4 * byte_1CCB6A280[a1]))(0x656369766564, 0xE600000000000000);
}

uint64_t sub_1CCA65DF8()
{
  return 0x72624E72656E776FLL;
}

uint64_t sub_1CCA65E10()
{
  return 1684632420;
}

unint64_t sub_1CCA65E20()
{
  return 0xD000000000000011;
}

uint64_t sub_1CCA65E3C()
{
  return 0x7478655472657375;
}

uint64_t sub_1CCA65E54()
{
  return 1954047348;
}

uint64_t sub_1CCA65E64()
{
  return 0x65646F6373736170;
}

uint64_t sub_1CCA65E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v1 = *(_QWORD *)(v0 + qword_1EF9FF5B8);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 8);
  v4 = MEMORY[0x1E0DEA968];
  *((_QWORD *)&v21 + 1) = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v20 = v2;
  *((_QWORD *)&v20 + 1) = v3;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)&v20, 0x656369766564, 0xE600000000000000);
  v5 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_isUserTextEnabled);
  *((_QWORD *)&v21 + 1) = MEMORY[0x1E0DEAFA0];
  LOBYTE(v20) = v5;
  sub_1CCA06650((uint64_t)&v20, 0x7478655472657375, 0xE800000000000000);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
    *((_QWORD *)&v21 + 1) = v4;
    *(_QWORD *)&v20 = v7;
    *((_QWORD *)&v20 + 1) = v6;
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)&v20, 1684632420, 0xE400000000000000);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_message + 8);
  if (v8)
  {
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_message);
    *((_QWORD *)&v21 + 1) = v4;
    *(_QWORD *)&v20 = v9;
    *((_QWORD *)&v20 + 1) = v8;
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)&v20, 1954047348, 0xE400000000000000);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_phoneNumber + 8);
  if (v10)
  {
    v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_phoneNumber);
    *((_QWORD *)&v21 + 1) = v4;
    *(_QWORD *)&v20 = v11;
    *((_QWORD *)&v20 + 1) = v10;
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)&v20, 0x72624E72656E776FLL, 0xE800000000000000);
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_passcode + 8);
  if (v12)
  {
    v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_passcode);
    *((_QWORD *)&v21 + 1) = v4;
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v12;
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)&v20, 0x65646F6373736170, 0xE800000000000000);
  result = swift_endAccess();
  v15 = (uint64_t *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession);
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession + 8);
  if (v16 >> 60 != 15)
  {
    v17 = *v15;
    sub_1CCA1B164(*v15, v16);
    v18 = sub_1CCB634C0();
    *((_QWORD *)&v21 + 1) = v4;
    *(_QWORD *)&v20 = v18;
    *((_QWORD *)&v20 + 1) = v19;
    swift_beginAccess();
    sub_1CCA06650((uint64_t)&v20, 0xD000000000000011, 0x80000001CCB7A400);
    swift_endAccess();
    return sub_1CCA1B1A8(v17, v16);
  }
  return result;
}

uint64_t sub_1CCA6611C()
{
  return swift_release();
}

uint64_t sub_1CCA6612C()
{
  sub_1CC9C785C();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA6616C()
{
  return type metadata accessor for FMIPEraseRequest();
}

uint64_t sub_1CCA66174()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  return sub_1CCB64384();
}

uint64_t sub_1CCA661BC()
{
  return sub_1CCB639F4();
}

uint64_t sub_1CCA661CC()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  return sub_1CCB64384();
}

uint64_t sub_1CCA66210@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1CCA66260(_QWORD *a1@<X8>)
{
  *a1 = 7107189;
  a1[1] = 0xE300000000000000;
}

uint64_t sub_1CCA66274()
{
  return 7107189;
}

uint64_t sub_1CCA66284@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1CCA662D8()
{
  sub_1CCA66A44();
  return sub_1CCB643D8();
}

uint64_t sub_1CCA66300()
{
  sub_1CCA66A44();
  return sub_1CCB643E4();
}

uint64_t sub_1CCA66328(_QWORD *a1)
{
  swift_allocObject();
  return sub_1CCA66370(a1);
}

uint64_t sub_1CCA66370(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31[7];

  v2 = v1;
  v4 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1EF9E1928);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA66A44();
  swift_retain();
  v11 = v30;
  sub_1CCB643B4();
  if (v11)
  {
    swift_release();
    sub_1CCA01CA0((uint64_t)a1);
    type metadata accessor for FMIPGetURLInfoResponse();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v30 = v6;
    v12 = v8;
    sub_1CCB64150();
    v14 = v7;
    v16 = (uint64_t)a1;
    v17 = (uint64_t)v30;
    if (v13)
    {
      sub_1CCB63484();
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = sub_1CCB63490();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v17, 1, 1, v15);
    }
    sub_1CCA24AA4(v17, v1 + OBJC_IVAR____TtC8FMIPCore22FMIPGetURLInfoResponse_url);
    swift_release();
    sub_1CC9EBC94(v16, (uint64_t)v31);
    v2 = sub_1CC9CA3D0(v31);
    v30 = v10;
    v18 = qword_1ED8AA630;
    swift_retain();
    if (v18 != -1)
      swift_once();
    v19 = sub_1CCB637FC();
    sub_1CCA16C20(v19, (uint64_t)qword_1ED8AD7F8);
    swift_retain_n();
    v20 = sub_1CCB637D8();
    v21 = sub_1CCB63D48();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v31[0] = v28;
      v29 = v12;
      *(_DWORD *)v22 = 136315138;
      v27[1] = v22 + 4;
      v23 = sub_1CCA6673C();
      v31[6] = sub_1CCA0CB60(v23, v24, v31);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v20, v21, "FMIPGetURLInfoResponse: initialized with coder %s", v22, 0xCu);
      v25 = v28;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v25, -1, -1);
      MEMORY[0x1D17B214C](v22, -1, -1);

      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v14);
    }
    else
    {
      swift_release_n();

      (*(void (**)(char *, uint64_t))(v12 + 8))(v30, v14);
    }
    sub_1CCA01CA0(v16);
    swift_release();
  }
  return v2;
}

uint64_t sub_1CCA6673C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v1 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 60;
  v10 = 0xE100000000000000;
  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v8 = v0;
  sub_1CC9E6BA4();
  sub_1CCB63A9C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v5 = v9;
  v4 = v10;
  v9 = 0;
  v10 = 0xE000000000000000;
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  v9 = 980185717;
  v10 = 0xE400000000000000;
  sub_1CCA24A5C(v0 + OBJC_IVAR____TtC8FMIPCore22FMIPGetURLInfoResponse_url, (uint64_t)v3);
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v8 = *(_QWORD *)(v0 + 48);
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v9 = v5;
  v10 = v4;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1CCA6691C()
{
  uint64_t v0;

  return sub_1CCA39410(v0 + OBJC_IVAR____TtC8FMIPCore22FMIPGetURLInfoResponse_url);
}

uint64_t sub_1CCA6692C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1CCA39410(v0 + OBJC_IVAR____TtC8FMIPCore22FMIPGetURLInfoResponse_url);
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA66974()
{
  return type metadata accessor for FMIPGetURLInfoResponse();
}

uint64_t type metadata accessor for FMIPGetURLInfoResponse()
{
  uint64_t result;

  result = qword_1EF9E1868;
  if (!qword_1EF9E1868)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1CCA669B8()
{
  unint64_t v0;

  sub_1CC9C3220();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_1CCA66A24()
{
  return sub_1CCA6673C();
}

unint64_t sub_1CCA66A44()
{
  unint64_t result;

  result = qword_1EF9E1930;
  if (!qword_1EF9E1930)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6A42C, &type metadata for FMIPGetURLInfoResponse.FMIPGetURLInfoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E1930);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPGetURLInfoResponse.FMIPGetURLInfoCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CCA66AC8 + 4 * byte_1CCB6A2C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CCA66AE8 + 4 * byte_1CCB6A2C5[v4]))();
}

_BYTE *sub_1CCA66AC8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CCA66AE8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCA66AF0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCA66AF8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCA66B00(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCA66B08(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FMIPGetURLInfoResponse.FMIPGetURLInfoCodingKeys()
{
  return &type metadata for FMIPGetURLInfoResponse.FMIPGetURLInfoCodingKeys;
}

unint64_t sub_1CCA66B28()
{
  unint64_t result;

  result = qword_1EF9E1938;
  if (!qword_1EF9E1938)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6A404, &type metadata for FMIPGetURLInfoResponse.FMIPGetURLInfoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E1938);
  }
  return result;
}

unint64_t sub_1CCA66B70()
{
  unint64_t result;

  result = qword_1EF9E1940;
  if (!qword_1EF9E1940)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6A33C, &type metadata for FMIPGetURLInfoResponse.FMIPGetURLInfoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E1940);
  }
  return result;
}

unint64_t sub_1CCA66BB8()
{
  unint64_t result;

  result = qword_1EF9E1948;
  if (!qword_1EF9E1948)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6A364, &type metadata for FMIPGetURLInfoResponse.FMIPGetURLInfoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E1948);
  }
  return result;
}

uint64_t FMIPDisableTagSafetyAlertAction.__allocating_init(disabled:)(char a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = a1;
  return result;
}

uint64_t FMIPDisableTagSafetyAlertAction.init(disabled:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = a1;
  return v1;
}

uint64_t FMIPDisableTagSafetyAlertAction.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t FMIPDisableTagSafetyAlertAction.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FMIPDisableTagSafetyAlertAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMIPDisableTagSafetyAlertAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPDisableTagSafetyAlertAction.__allocating_init(disabled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

id FMIPAddress.init(label:placemark:)@<X0>(id a1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  id v45;
  id result;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v8 = objc_msgSend(a1, sel_country);
  if (v8)
  {
    v9 = v8;
    v10 = sub_1CCB63988();
    v100 = v11;

  }
  else
  {
    v10 = 0;
    v100 = 0;
  }
  v12 = objc_msgSend(a1, sel_ISOcountryCode);
  if (v12)
  {
    v13 = v12;
    v98 = sub_1CCB63988();
    v99 = v14;

  }
  else
  {
    v98 = 0;
    v99 = 0;
  }
  v15 = objc_msgSend(a1, sel_thoroughfare);
  if (v15)
  {
    v16 = v15;
    v103 = sub_1CCB63988();
    v18 = v17;

  }
  else
  {
    v103 = 0;
    v18 = 0;
  }
  swift_bridgeObjectRetain();
  v19 = objc_msgSend(a1, sel_thoroughfare);
  if (v19)
  {
    v20 = v19;
    v21 = sub_1CCB63988();
    v96 = v22;
    v97 = v21;

  }
  else
  {
    v96 = 0;
    v97 = 0;
  }
  v23 = objc_msgSend(a1, sel_locality);
  if (v23)
  {
    v24 = v23;
    v104 = sub_1CCB63988();
    v26 = v25;

  }
  else
  {
    v104 = 0;
    v26 = 0;
  }
  swift_bridgeObjectRetain();
  v27 = objc_msgSend(a1, sel_postalCode);
  if (v27)
  {
    v28 = v27;
    v29 = sub_1CCB63988();
    v94 = v30;
    v95 = v29;

  }
  else
  {
    v94 = 0;
    v95 = 0;
  }
  v31 = objc_msgSend(a1, sel_administrativeArea);
  if (v31)
  {
    v32 = v31;
    v33 = sub_1CCB63988();
    v92 = v34;
    v93 = v33;

  }
  else
  {
    v92 = 0;
    v93 = 0;
  }
  v35 = objc_msgSend(a1, sel_subAdministrativeArea);
  if (v35)
  {
    v36 = v35;
    v37 = sub_1CCB63988();
    v90 = v38;
    v91 = v37;

  }
  else
  {
    v90 = 0;
    v91 = 0;
  }
  v39 = objc_msgSend(a1, sel_fullThoroughfare);
  if (v39)
  {
    v40 = v39;
    v41 = sub_1CCB63988();
    v88 = v42;
    v89 = v41;

  }
  else
  {
    v88 = 0;
    v89 = 0;
  }
  v43 = objc_msgSend(a1, sel_areasOfInterest);
  v102 = v18;
  if (v43)
  {
    v44 = v43;
    v87 = sub_1CCB63B38();

  }
  else
  {
    v87 = MEMORY[0x1E0DEE9D8];
  }
  v45 = objc_msgSend(a1, sel__geoMapItem);
  v101 = v10;
  if (!v45)
    goto LABEL_36;
  result = objc_msgSend(v45, sel_addressObject);
  if (result)
  {
    v47 = result;
    v48 = objc_msgSend(result, sel_fullAddressNoCurrentCountryWithMultiline_, 0);

    if (v48)
    {
      v49 = sub_1CCB63988();
      v79 = v50;
      v80 = v49;

      swift_unknownObjectRelease();
      goto LABEL_37;
    }
    swift_unknownObjectRelease();
LABEL_36:
    v79 = 0;
    v80 = 0;
LABEL_37:
    v51 = objc_msgSend(a1, sel__geoMapItem);
    if (v51)
    {
      v52 = objc_msgSend(v51, sel_addressObject);
      swift_unknownObjectRelease();
      if (v52)
      {
        v53 = objc_msgSend(v52, sel_cityAndAboveNoCurrentCountryWithFallback_, 0);
        v54 = v18;
        if (v53)
        {
          v55 = v53;
          v56 = sub_1CCB63988();
          v58 = v57;

          v59 = HIBYTE(v58) & 0xF;
          if ((v58 & 0x2000000000000000) == 0)
            v59 = v56 & 0xFFFFFFFFFFFFLL;
          if (v59)
          {
LABEL_45:
            v60 = v103;
            v83 = v56;
            v84 = v58;
            if (!v102)
            {
LABEL_46:
              v81 = v60;
              v82 = 0;
              goto LABEL_54;
            }
LABEL_49:
            v61 = HIBYTE(v54) & 0xF;
            if ((v54 & 0x2000000000000000) == 0)
              v61 = v60 & 0xFFFFFFFFFFFFLL;
            if (v61)
            {
              swift_bridgeObjectRetain();
              v81 = v60;
              v82 = v54;
            }
            else
            {
              v81 = 0;
              v82 = 0;
            }
LABEL_54:
            v62 = sub_1CCA68828(v60, v54, v104, v26);
            v64 = v63;
            v85 = v26;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!v64)
              goto LABEL_58;
            v65 = HIBYTE(v64) & 0xF;
            if ((v64 & 0x2000000000000000) == 0)
              v65 = v62 & 0xFFFFFFFFFFFFLL;
            if (!v65)
            {
              swift_bridgeObjectRelease();
              v62 = 0;
              v64 = 0;
              v86 = a2;
              if (v52)
              {
LABEL_59:
                v66 = objc_msgSend(v52, sel_shortAddress);
                if (v66)
                {
                  v67 = v66;
                  v68 = sub_1CCB63988();
                  v70 = v69;

                  v71 = HIBYTE(v70) & 0xF;
                  if ((v70 & 0x2000000000000000) == 0)
                    v71 = v68 & 0xFFFFFFFFFFFFLL;
                  if (v71)
                  {
LABEL_65:
                    v72 = objc_msgSend(v52, sel_fullAddressNoCurrentCountryWithMultiline_, 0, a3);
                    if (v72)
                    {
                      v73 = v72;
                      v74 = sub_1CCB63988();
                      v76 = v75;

                      v77 = HIBYTE(v76) & 0xF;
                      if ((v76 & 0x2000000000000000) == 0)
                        v77 = v74 & 0xFFFFFFFFFFFFLL;
                      if (v77)
                        goto LABEL_74;
                      swift_bridgeObjectRelease();
                    }
                    else
                    {

                    }
                    v74 = 0;
                    v76 = 0;
LABEL_74:
                    a3 = v78;
                    goto LABEL_75;
                  }
                  swift_bridgeObjectRelease();
                }
                v68 = 0;
                v70 = 0;
                goto LABEL_65;
              }
            }
            else
            {
LABEL_58:
              v86 = a2;
              if (v52)
                goto LABEL_59;
            }

            v74 = 0;
            v76 = 0;
            v68 = 0;
            v70 = 0;
LABEL_75:
            result = v92;
            *a4 = v86;
            a4[1] = a3;
            a4[4] = v100;
            a4[5] = v98;
            a4[2] = 0;
            a4[3] = v101;
            a4[6] = v99;
            a4[7] = v103;
            a4[8] = v102;
            a4[9] = v97;
            a4[10] = v96;
            a4[11] = v104;
            a4[12] = v85;
            a4[13] = v95;
            a4[14] = v94;
            a4[15] = v93;
            a4[16] = v92;
            a4[17] = v91;
            a4[18] = v90;
            a4[19] = v80;
            a4[20] = v79;
            a4[21] = v87;
            a4[22] = v89;
            a4[23] = v88;
            a4[24] = v83;
            a4[25] = v84;
            a4[26] = v81;
            a4[27] = v82;
            a4[28] = v62;
            a4[29] = v64;
            a4[30] = v68;
            a4[31] = v70;
            a4[32] = v74;
            a4[33] = v76;
            a4[34] = 0;
            a4[35] = 0;
            return result;
          }
          swift_bridgeObjectRelease();
        }
        v56 = 0;
        v58 = 0;
        goto LABEL_45;
      }
    }
    else
    {
      v52 = 0;
    }
    v54 = v18;
    v60 = v103;
    v83 = 0;
    v84 = 0;
    if (!v18)
      goto LABEL_46;
    goto LABEL_49;
  }
  __break(1u);
  return result;
}

uint64_t FMIPAddress.label.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.formattedAddressLines.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FMIPAddress.country.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.countryCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.streetName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.streetAddress.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.locality.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.stateCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.administrativeArea.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.subAdministrativeArea.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.mapItemFormattedAddress.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.areaOfInterest.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FMIPAddress.fullThoroughfare.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.coarseAddressModern.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 192);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.streetAddressModern.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.smallAddressModern.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 224);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.mediumAddressModern.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 240);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.largeAddressModern.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 256);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.poiAddressModern.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 272);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddress.displayAddress.getter()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjCClassFromMetadata;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v0[3];
  v1 = v0[4];
  v3 = v0[11];
  v4 = v0[12];
  v5 = v0[14];
  v6 = v0[15];
  v7 = v0[16];
  if (v5 && (v8 = v0[13], sub_1CCB63A00() >= 1))
  {
    swift_bridgeObjectRetain();
    if (!v4)
      goto LABEL_4;
  }
  else
  {
    swift_bridgeObjectRetain();
    v8 = v6;
    v5 = v7;
    if (!v4)
    {
LABEL_4:
      if (!v5)
      {
        if (!v1)
          goto LABEL_6;
LABEL_14:
        swift_bridgeObjectRetain();
        v8 = v2;
        v5 = v1;
        goto LABEL_15;
      }
      goto LABEL_15;
    }
  }
  if (!v5)
    goto LABEL_21;
  if (v3 == v8 && v4 == v5 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (!v1)
    {
LABEL_6:
      if (!v4)
        return 0;
      goto LABEL_21;
    }
    goto LABEL_14;
  }
LABEL_15:
  v9 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v9 = v8 & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    type metadata accessor for FMLocalize();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    if (v4)
    {
      v11 = (void *)objc_opt_self();
      swift_bridgeObjectRetain();
      v12 = objc_msgSend(v11, sel_bundleForClass_, ObjCClassFromMetadata);
      sub_1CCB63340();

      sub_1CCA14E90(&qword_1EF9DFD30);
      v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_1CCB6A4D0;
      v14 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v13 + 56) = MEMORY[0x1E0DEA968];
      v15 = sub_1CCA0C920();
      *(_QWORD *)(v13 + 32) = v3;
      *(_QWORD *)(v13 + 40) = v4;
      *(_QWORD *)(v13 + 96) = v14;
      *(_QWORD *)(v13 + 104) = v15;
      *(_QWORD *)(v13 + 64) = v15;
      *(_QWORD *)(v13 + 72) = v8;
      *(_QWORD *)(v13 + 80) = v5;
    }
    else
    {
      v20 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
      sub_1CCB63340();

      sub_1CCA14E90(&qword_1EF9DFD30);
      v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_1CCB677E0;
      *(_QWORD *)(v21 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v21 + 64) = sub_1CCA0C920();
      *(_QWORD *)(v21 + 32) = v8;
      *(_QWORD *)(v21 + 40) = v5;
    }
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
  if (!v4)
    return 0;
LABEL_21:
  type metadata accessor for FMLocalize();
  v16 = swift_getObjCClassFromMetadata();
  v17 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  v18 = objc_msgSend(v17, sel_bundleForClass_, v16);
  sub_1CCB63340();

  sub_1CCA14E90(&qword_1EF9DFD30);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1CCB677E0;
  *(_QWORD *)(v19 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v19 + 64) = sub_1CCA0C920();
  *(_QWORD *)(v19 + 32) = v3;
  *(_QWORD *)(v19 + 40) = v4;
LABEL_23:
  v22 = sub_1CCB639A0();
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_1CCA67924(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA67954 + 4 * byte_1CCB6A4E0[a1]))(0x6C6562616CLL, 0xE500000000000000);
}

unint64_t sub_1CCA67954()
{
  return 0xD000000000000015;
}

uint64_t sub_1CCA67B14(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1CCA67924(*a1);
  v5 = v4;
  if (v3 == sub_1CCA67924(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1CCA67B9C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCA67924(v1);
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA67BFC()
{
  unsigned __int8 *v0;

  sub_1CCA67924(*v0);
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA67C3C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCA67924(v1);
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA67C98@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCA69A68();
  *a1 = result;
  return result;
}

uint64_t sub_1CCA67CC4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1CCA67924(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1CCA67CEC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCA69A68();
  *a1 = result;
  return result;
}

void sub_1CCA67D10(_BYTE *a1@<X8>)
{
  *a1 = 19;
}

uint64_t sub_1CCA67D1C()
{
  sub_1CC9EDB10();
  return sub_1CCB643D8();
}

uint64_t sub_1CCA67D44()
{
  sub_1CC9EDB10();
  return sub_1CCB643E4();
}

uint64_t FMIPAddress.init(mapItem:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  unint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  uint64_t v56;
  id v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  id v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  id v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;

  v135 = 0;
  v136 = 0;
  v133 = 0;
  v134 = 0;
  v3 = objc_msgSend(a1, sel_name);
  if (v3)
  {
    v4 = v3;
    sub_1CCB63988();

    v5 = sub_1CCB63AB4();
    v124 = v6;
    v125 = v5;
  }
  else
  {
    v124 = 0;
    v125 = 0;
  }
  v7 = objc_msgSend(a1, sel_geoAddress);
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v7, sel_formattedAddressLines);
    if (v9)
    {
      v10 = v9;
      sub_1CCB63B2C();

    }
    v11 = objc_msgSend(v8, sel_structuredAddress);
    if (v11)
    {
      v12 = v11;
      v13 = objc_msgSend(v11, sel_country);
      if (v13)
      {
        v14 = v13;
        sub_1CCB63988();

        v15 = sub_1CCB63AB4();
        v120 = v16;
        v121 = v15;
      }
      else
      {
        v120 = 0;
        v121 = 0;
      }
      v20 = objc_msgSend(v12, sel_countryCode);
      if (v20)
      {
        v21 = v20;
        sub_1CCB63988();

        v22 = sub_1CCB63AB4();
        v118 = v23;
        v119 = v22;
      }
      else
      {
        v118 = 0;
        v119 = 0;
      }
      v24 = objc_msgSend(v12, sel_thoroughfare);
      if (v24)
      {
        v25 = v24;
        sub_1CCB63988();

        v18 = sub_1CCB63AB4();
        v135 = v18;
        v136 = v26;
      }
      else
      {
        v18 = 0;
        v26 = 0;
      }
      v130 = v26;
      v27 = objc_msgSend(v12, sel_subThoroughfare);
      if (v27)
      {
        v28 = v27;
        sub_1CCB63988();

        v29 = sub_1CCB63AB4();
        v116 = v30;
        v117 = v29;
      }
      else
      {
        v116 = 0;
        v117 = 0;
      }
      v31 = objc_msgSend(v12, sel_locality);
      if (v31)
      {
        v32 = v31;
        sub_1CCB63988();

        v115 = sub_1CCB63AB4();
        v133 = v115;
        v134 = v33;
        v17 = v33;
      }
      else
      {
        v115 = 0;
        v17 = 0;
      }
      v34 = objc_msgSend(v12, sel_administrativeAreaCode);
      if (v34)
      {
        v35 = v34;
        sub_1CCB63988();

        v36 = sub_1CCB63AB4();
        v113 = v37;
        v114 = v36;
      }
      else
      {
        v113 = 0;
        v114 = 0;
      }
      v38 = objc_msgSend(v12, sel_administrativeArea);
      if (v38)
      {
        v39 = v38;
        sub_1CCB63988();

        v40 = sub_1CCB63AB4();
        v111 = v41;
        v112 = v40;
      }
      else
      {
        v111 = 0;
        v112 = 0;
      }
      v42 = objc_msgSend(v12, sel_subAdministrativeArea);
      if (v42)
      {
        v43 = v42;
        sub_1CCB63988();

        v44 = sub_1CCB63AB4();
        v109 = v45;
        v110 = v44;

      }
      else
      {

        v109 = 0;
        v110 = 0;
      }
      v19 = v130;
      goto LABEL_36;
    }

    v109 = 0;
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v116 = 0;
    v117 = 0;
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v121 = 0;
  }
  else
  {
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v116 = 0;
    v117 = 0;
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v121 = 0;
  }
  v115 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
LABEL_36:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v46 = objc_msgSend(a1, sel_geoAddress);
  if (v46
    && (v47 = v46,
        v48 = objc_msgSend(v46, sel_structuredAddress),
        v47,
        v48)
    && (v49 = objc_msgSend(v48, sel_fullThoroughfare), v48, v49))
  {
    v50 = sub_1CCB63988();
    v107 = v51;
    v108 = v50;

  }
  else
  {
    v107 = 0;
    v108 = 0;
  }
  v52 = objc_msgSend(a1, sel_geoAddress);
  if (v52)
  {
    v53 = v52;
    v54 = objc_msgSend(v52, sel_structuredAddress);

    if (v54)
    {
      v55 = objc_msgSend(v54, sel_areaOfInterests);

      if (v55)
      {
        sub_1CCB63B2C();

      }
    }
  }
  swift_bridgeObjectRelease();
  v56 = MEMORY[0x1E0DEE9D8];
  v57 = objc_msgSend(a1, sel_addressObject);
  if (v57
    && (v58 = v57,
        v59 = objc_msgSend(v57, sel_fullAddressNoCurrentCountryWithMultiline_, 0),
        v58,
        v59))
  {
    v60 = sub_1CCB63988();
    v105 = v61;
    v106 = v60;

  }
  else
  {
    v105 = 0;
    v106 = 0;
  }
  v62 = objc_msgSend(a1, sel_addressObject);
  v63 = v62;
  if (!v62)
    goto LABEL_55;
  v64 = objc_msgSend(v62, sel_cityAndAboveNoCurrentCountryWithFallback_, 0);
  if (!v64)
    goto LABEL_55;
  v65 = v64;
  v66 = sub_1CCB63988();
  v68 = v67;

  v69 = HIBYTE(v68) & 0xF;
  v129 = v66;
  if ((v68 & 0x2000000000000000) == 0)
    v69 = v66 & 0xFFFFFFFFFFFFLL;
  if (!v69)
  {
    swift_bridgeObjectRelease();
LABEL_55:
    v129 = 0;
    v68 = 0;
  }
  v128 = v18;
  v131 = v19;
  if (v19)
  {
    v70 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000) == 0)
      v70 = v18 & 0xFFFFFFFFFFFFLL;
    if (v70)
    {
      swift_bridgeObjectRetain();
      v122 = v18;
      v123 = v19;
    }
    else
    {
      v122 = 0;
      v123 = 0;
    }
  }
  else
  {
    v122 = v18;
    v123 = 0;
  }
  v71 = sub_1CCA68658(&v135, &v133);
  v73 = v72;
  swift_bridgeObjectRelease();
  if (v73)
  {
    v74 = HIBYTE(v73) & 0xF;
    if ((v73 & 0x2000000000000000) == 0)
      v74 = v71 & 0xFFFFFFFFFFFFLL;
    if (!v74)
    {
      swift_bridgeObjectRelease();
      v71 = 0;
      v73 = 0;
    }
  }
  v127 = v17;
  v126 = v68;
  if (!v63)
  {
    v94 = v131;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    v83 = 0;
    v85 = 0;
    v77 = 0;
    v79 = 0;
LABEL_84:
    v88 = v124;
    v87 = v125;
    v89 = v121;
    v91 = v119;
    v90 = v120;
    v93 = v117;
    v92 = v118;
    v96 = v115;
    v95 = v116;
    v98 = v113;
    result = v114;
    v100 = v111;
    v99 = v112;
    v102 = v109;
    v101 = v110;
    v104 = v107;
    v103 = v108;
    goto LABEL_85;
  }
  v75 = objc_msgSend(v63, sel_shortAddress);
  if (!v75)
    goto LABEL_74;
  v76 = v75;
  v77 = sub_1CCB63988();
  v79 = v78;

  v80 = HIBYTE(v79) & 0xF;
  if ((v79 & 0x2000000000000000) == 0)
    v80 = v77 & 0xFFFFFFFFFFFFLL;
  if (!v80)
  {
    swift_bridgeObjectRelease();
LABEL_74:
    v77 = 0;
    v79 = 0;
  }
  v81 = objc_msgSend(v63, sel_fullAddressNoCurrentCountryWithMultiline_, 0);
  if (!v81)
  {
    v94 = v131;
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    v83 = 0;
    v85 = 0;
    goto LABEL_84;
  }
  v82 = v81;
  v83 = sub_1CCB63988();
  v85 = v84;

  swift_unknownObjectRelease();
  if ((v85 & 0x2000000000000000) != 0)
    v86 = HIBYTE(v85) & 0xF;
  else
    v86 = v83 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRelease();
  if (!v86)
  {
    swift_bridgeObjectRelease();
    v83 = 0;
    v85 = 0;
  }
  v88 = v124;
  v87 = v125;
  v89 = v121;
  v91 = v119;
  v90 = v120;
  v93 = v117;
  v92 = v118;
  v94 = v131;
  v96 = v115;
  v95 = v116;
  v98 = v113;
  result = v114;
  v100 = v111;
  v99 = v112;
  v102 = v109;
  v101 = v110;
  v104 = v107;
  v103 = v108;
LABEL_85:
  *a2 = v87;
  a2[1] = v88;
  a2[2] = 0;
  a2[3] = v89;
  a2[4] = v90;
  a2[5] = v91;
  a2[6] = v92;
  a2[7] = v128;
  a2[8] = v94;
  a2[9] = v93;
  a2[10] = v95;
  a2[11] = v96;
  a2[12] = v127;
  a2[13] = result;
  a2[14] = v98;
  a2[15] = v99;
  a2[16] = v100;
  a2[17] = v101;
  a2[18] = v102;
  a2[19] = v106;
  a2[20] = v105;
  a2[21] = v56;
  a2[22] = v103;
  a2[23] = v104;
  a2[24] = v129;
  a2[25] = v126;
  a2[26] = v122;
  a2[27] = v123;
  a2[28] = v71;
  a2[29] = v73;
  a2[30] = v77;
  a2[31] = v79;
  a2[32] = v83;
  a2[33] = v85;
  a2[34] = 0;
  a2[35] = 0;
  return result;
}

unint64_t sub_1CCA68658(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjCClassFromMetadata;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  swift_beginAccess();
  v4 = a1[1];
  if (v4)
  {
    v5 = *a1;
    v6 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0)
      v6 = *a1 & 0xFFFFFFFFFFFFLL;
    if (!v6)
      return 0;
    swift_beginAccess();
    v7 = a2[1];
    if (!v7)
      return 0;
    v8 = *a2;
    v9 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v9 = *a2 & 0xFFFFFFFFFFFFLL;
    if (v9)
    {
      type metadata accessor for FMLocalize();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v11 = (void *)objc_opt_self();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = objc_msgSend(v11, sel_bundleForClass_, ObjCClassFromMetadata);
      sub_1CCB63340();

      sub_1CCA14E90(&qword_1EF9DFD30);
      v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_1CCB6A4D0;
      v14 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v13 + 56) = MEMORY[0x1E0DEA968];
      v15 = sub_1CCA0C920();
      *(_QWORD *)(v13 + 32) = v5;
      *(_QWORD *)(v13 + 40) = v4;
      *(_QWORD *)(v13 + 96) = v14;
      *(_QWORD *)(v13 + 104) = v15;
      *(_QWORD *)(v13 + 64) = v15;
      *(_QWORD *)(v13 + 72) = v8;
      *(_QWORD *)(v13 + 80) = v7;
      v4 = sub_1CCB63994();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t sub_1CCA68828(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t ObjCClassFromMetadata;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  if (!a2)
    return 0;
  v6 = 0;
  v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  if (v7 && a4)
  {
    v10 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0)
      v10 = a3 & 0xFFFFFFFFFFFFLL;
    if (v10)
    {
      type metadata accessor for FMLocalize();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v12 = (void *)objc_opt_self();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = objc_msgSend(v12, sel_bundleForClass_, ObjCClassFromMetadata);
      sub_1CCB63340();

      sub_1CCA14E90(&qword_1EF9DFD30);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1CCB6A4D0;
      v15 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEA968];
      v16 = sub_1CCA0C920();
      *(_QWORD *)(v14 + 32) = a1;
      *(_QWORD *)(v14 + 40) = a2;
      *(_QWORD *)(v14 + 96) = v15;
      *(_QWORD *)(v14 + 104) = v16;
      *(_QWORD *)(v14 + 64) = v16;
      *(_QWORD *)(v14 + 72) = a3;
      *(_QWORD *)(v14 + 80) = a4;
      v6 = sub_1CCB63994();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    return 0;
  }
  return v6;
}

uint64_t FMIPAddress.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;

  v3 = sub_1CCA14E90(&qword_1EF9E19F8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v60 = v1[3];
  v61 = v9;
  v10 = v1[4];
  v58 = v1[5];
  v59 = v10;
  v11 = v1[6];
  v12 = v1[7];
  v56 = v1[8];
  v57 = v11;
  v13 = v1[9];
  v54 = v1[10];
  v55 = v12;
  v14 = v1[11];
  v52 = v1[12];
  v53 = v13;
  v15 = v1[13];
  v50 = v1[14];
  v51 = v14;
  v16 = v1[15];
  v48 = v1[16];
  v49 = v15;
  v45 = v1[17];
  v46 = v1[18];
  v47 = v16;
  v43 = v1[19];
  v44 = v1[20];
  v42 = v1[21];
  v41 = v1[22];
  v40 = v1[23];
  v39 = v1[24];
  v38 = v1[25];
  v37 = v1[26];
  v36 = v1[27];
  v35 = v1[28];
  v34 = v1[29];
  v33 = v1[30];
  v32 = v1[31];
  v29 = v1[32];
  v28 = v1[33];
  v31 = v1[34];
  v30 = v1[35];
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CC9EDB10();
  v17 = v3;
  sub_1CCB643CC();
  v63 = v7;
  v64 = v8;
  v65 = 0;
  v18 = sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
  v19 = sub_1CCA1FAE8((unint64_t *)&qword_1ED8A7E78, (uint64_t *)&unk_1ED8AA328, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEE988]);
  v20 = v62;
  sub_1CCB64210();
  if (v20)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v17);
  v27[1] = v19;
  v22 = v59;
  v21 = v60;
  v62 = v18;
  v24 = v57;
  v23 = v58;
  v63 = v61;
  v65 = 1;
  sub_1CCA14E90(&qword_1EF9E1A00);
  sub_1CCA69140();
  sub_1CCB64210();
  v63 = v21;
  v64 = v22;
  v65 = 2;
  sub_1CCB64210();
  v61 = v4;
  v63 = v23;
  v64 = v24;
  v65 = 3;
  sub_1CCB64210();
  v63 = v55;
  v64 = v56;
  v65 = 4;
  sub_1CCB64210();
  v63 = v53;
  v64 = v54;
  v65 = 5;
  sub_1CCB64210();
  v63 = v51;
  v64 = v52;
  v65 = 6;
  sub_1CCB64210();
  v63 = v49;
  v64 = v50;
  v65 = 7;
  sub_1CCB64210();
  v63 = v47;
  v64 = v48;
  v65 = 8;
  sub_1CCB64210();
  v63 = v45;
  v64 = v46;
  v65 = 9;
  sub_1CCB64210();
  v63 = v43;
  v64 = v44;
  v65 = 10;
  v61 = v17;
  sub_1CCB64210();
  v63 = v42;
  v65 = 11;
  sub_1CCA14E90(&qword_1EF9E13B8);
  sub_1CCA1FAE8(&qword_1EF9E1A10, &qword_1EF9E13B8, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
  sub_1CCB64210();
  v63 = v41;
  v64 = v40;
  v65 = 12;
  sub_1CCB64210();
  v63 = v39;
  v64 = v38;
  v65 = 13;
  sub_1CCB64210();
  v63 = v37;
  v64 = v36;
  v65 = 14;
  sub_1CCB64210();
  v63 = v35;
  v64 = v34;
  v65 = 15;
  sub_1CCB64210();
  v63 = v33;
  v64 = v32;
  v65 = 16;
  sub_1CCB64210();
  v63 = v29;
  v64 = v28;
  v65 = 17;
  sub_1CCB64210();
  v63 = v31;
  v64 = v30;
  v65 = 18;
  v25 = v61;
  sub_1CCB64210();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v25);
}

unint64_t sub_1CCA69140()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E1A08;
  if (!qword_1EF9E1A08)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E1A00);
    v2 = sub_1CCA1FAE8(&qword_1EF9E1A10, &qword_1EF9E13B8, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E1A08);
  }
  return result;
}

unint64_t FMIPAddress.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    swift_bridgeObjectRetain();
    sub_1CCA14E90(&qword_1EF9E1A00);
    sub_1CCB639AC();
  }
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return 0xD000000000000017;
}

uint64_t sub_1CCA6929C(_QWORD *a1)
{
  return FMIPAddress.encode(to:)(a1);
}

uint64_t destroy for FMIPAddress()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FMIPAddress(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  v11 = a2[17];
  a1[16] = a2[16];
  a1[17] = v11;
  v12 = a2[19];
  a1[18] = a2[18];
  a1[19] = v12;
  v21 = a2[21];
  a1[20] = a2[20];
  a1[21] = v21;
  v13 = a2[23];
  a1[22] = a2[22];
  a1[23] = v13;
  v14 = a2[25];
  a1[24] = a2[24];
  a1[25] = v14;
  v15 = a2[27];
  a1[26] = a2[26];
  a1[27] = v15;
  v16 = a2[29];
  a1[28] = a2[28];
  a1[29] = v16;
  v17 = a2[31];
  a1[30] = a2[30];
  a1[31] = v17;
  v18 = a2[33];
  a1[32] = a2[32];
  a1[33] = v18;
  v19 = a2[35];
  a1[34] = a2[34];
  a1[35] = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FMIPAddress(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  a1[16] = a2[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  a1[18] = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[19] = a2[19];
  a1[20] = a2[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[21] = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[22] = a2[22];
  a1[23] = a2[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[24] = a2[24];
  a1[25] = a2[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[26] = a2[26];
  a1[27] = a2[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[28] = a2[28];
  a1[29] = a2[29];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[30] = a2[30];
  a1[31] = a2[31];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[32] = a2[32];
  a1[33] = a2[33];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[34] = a2[34];
  a1[35] = a2[35];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for FMIPAddress(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t assignWithTake for FMIPAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v15;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v17;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPAddress.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEE)
    goto LABEL_17;
  if (a2 + 18 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 18) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 18;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 18;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 18;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x13;
  v8 = v6 - 19;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPAddress.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_1CCA699B0 + 4 * byte_1CCB6A50B[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_1CCA699E4 + 4 * byte_1CCB6A506[v4]))();
}

uint64_t sub_1CCA699E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA699EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA699F4);
  return result;
}

uint64_t sub_1CCA69A00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA69A08);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_1CCA69A0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA69A14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t sub_1CCA69A24()
{
  unint64_t result;

  result = qword_1EF9E1A18;
  if (!qword_1EF9E1A18)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6A6E8, &type metadata for FMIPAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E1A18);
  }
  return result;
}

uint64_t sub_1CCA69A68()
{
  unint64_t v0;

  v0 = sub_1CCB642C4();
  swift_bridgeObjectRelease();
  if (v0 >= 0x13)
    return 19;
  else
    return v0;
}

uint64_t static FMIPRepairDeviceAction.== infix(_:_:)(uint64_t a1)
{
  return static FMIPDevice.== infix(_:_:)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
}

uint64_t FMIPRepairDeviceAction.__allocating_init(device:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext) = 0;
  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_username);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
  *v7 = 0;
  v7[1] = 0;
  v8 = v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession) = xmmword_1CCB66A50;
  sub_1CC9F73E8(a1, v8);
  return v2;
}

uint64_t FMIPRepairDeviceAction.init(device:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext) = 0;
  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  *v2 = 0;
  v2[1] = 0;
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_username);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
  *v6 = 0;
  v6[1] = 0;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession) = xmmword_1CCB66A50;
  sub_1CC9F73E8(a1, v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  return v1;
}

uint64_t FMIPRepairDeviceAction.__deallocating_deinit()
{
  FMIPDeviceAction.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA69C80(_QWORD *a1)
{
  return static FMIPDevice.== infix(_:_:)(*a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
}

uint64_t sub_1CCA69CA0()
{
  return type metadata accessor for FMIPRepairDeviceAction();
}

uint64_t type metadata accessor for FMIPRepairDeviceAction()
{
  uint64_t result;

  result = qword_1EF9E1A48;
  if (!qword_1EF9E1A48)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t FMIPFirmwareUpdateAction.__allocating_init(item:updateInitiated:)(uint64_t a1, char a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_BYTE *)(v4 + OBJC_IVAR____TtC8FMIPCore24FMIPFirmwareUpdateAction_updateInitiated) = a2;
  sub_1CCA30298(a1, v4 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item);
  return v4;
}

uint64_t FMIPFirmwareUpdateAction.init(item:updateInitiated:)(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore24FMIPFirmwareUpdateAction_updateInitiated) = a2;
  sub_1CCA30298(a1, v2 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item);
  return v2;
}

void FMIPFirmwareUpdateAction.__allocating_init(item:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPFirmwareUpdateAction.init(item:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t FMIPFirmwareUpdateAction.deinit()
{
  uint64_t v0;

  sub_1CCA30300(v0 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item);
  return v0;
}

uint64_t FMIPFirmwareUpdateAction.__deallocating_deinit()
{
  uint64_t v0;

  sub_1CCA30300(v0 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item);
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA69E30()
{
  return type metadata accessor for FMIPFirmwareUpdateAction();
}

uint64_t type metadata accessor for FMIPFirmwareUpdateAction()
{
  uint64_t result;

  result = qword_1EF9E1BF8;
  if (!qword_1EF9E1BF8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA69E74()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for FMIPFirmwareUpdateAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPFirmwareUpdateAction.__allocating_init(item:updateInitiated:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void FMIPLockMetadata.status.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t FMIPLockMetadata.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FMIPLockMetadata() + 20);
  v4 = sub_1CCB635B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1CCA69F1C(char *a1, char *a2)
{
  return sub_1CCB1D444(*a1, *a2);
}

uint64_t sub_1CCA69F28()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA69FB8()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA6A024()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA6A0B0@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1CCA6A10C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6954657461657263;
  if (*v1)
    v2 = 0x6F43737574617473;
  v3 = 0xEF706D617473656DLL;
  if (*v1)
    v3 = 0xEA00000000006564;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1CCA6A15C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F43737574617473;
  else
    return 0x6954657461657263;
}

uint64_t sub_1CCA6A1A8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1CCA6A208()
{
  sub_1CCA17800();
  return sub_1CCB643D8();
}

uint64_t sub_1CCA6A230()
{
  sub_1CCA17800();
  return sub_1CCB643E4();
}

unint64_t FMIPLockMetadata.debugDescription.getter()
{
  void *v0;
  void *v1;
  id v2;

  v0 = (void *)objc_opt_self();
  type metadata accessor for FMIPLockMetadata();
  v1 = (void *)sub_1CCB63538();
  v2 = objc_msgSend(v0, sel_localizedStringFromDate_dateStyle_timeStyle_, v1, 1, 4);

  sub_1CCB63988();
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  FMIPActionStatus.description.getter();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return 0xD00000000000001BLL;
}

void FMIPLockMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  _QWORD v9[2];
  char v10;
  char v11;

  v4 = sub_1CCA14E90(&qword_1EF9E1C90);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMIPLockMetadata();
  v9[0] = v1;
  v8 = (void *)sub_1CCB63538();
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA17800();
  sub_1CCB643CC();
  objc_msgSend(v8, sel_fm_epoch);
  v11 = 0;
  sub_1CCB6421C();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

  }
  else
  {
    v9[1] = qword_1CCB6AA80[*(char *)v9[0]];
    sub_1CCB64240();
    v10 = 1;
    sub_1CCB641E0();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

    swift_bridgeObjectRelease();
  }
}

BOOL static FMIPLockMetadata.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  _BOOL8 v11;
  uint64_t v13;

  v4 = type metadata accessor for FMIPLockMetadata();
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v13 - v8;
  v10 = sub_1CCB63574();
  sub_1CCA6A76C(a1, (uint64_t)v9);
  sub_1CCA6A76C(a2, (uint64_t)v7);
  v11 = (v10 & 1) != 0 && qword_1CCB6AA80[*v9] == qword_1CCB6AA80[*v7];
  sub_1CCA6A7B0((uint64_t)v7);
  sub_1CCA6A7B0((uint64_t)v9);
  return v11;
}

void sub_1CCA6A628(_QWORD *a1)
{
  FMIPLockMetadata.encode(to:)(a1);
}

BOOL sub_1CCA6A63C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char v9;
  _BOOL8 v10;
  uint64_t v12;

  v4 = MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v12 - v7;
  v9 = sub_1CCB63574();
  sub_1CCA6A76C(a1, (uint64_t)v8);
  sub_1CCA6A76C(a2, (uint64_t)v6);
  v10 = (v9 & 1) != 0 && qword_1CCB6AA80[*v8] == qword_1CCB6AA80[*v6];
  sub_1CCA6A7B0((uint64_t)v6);
  sub_1CCA6A7B0((uint64_t)v8);
  return v10;
}

uint64_t sub_1CCA6A728(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPLockMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCA6A76C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPLockMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCA6A7B0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FMIPLockMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for FMIPLockMetadata(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_1CCB635B0();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for FMIPLockMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_1CCB635B0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_BYTE *initializeWithCopy for FMIPLockMetadata(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithCopy for FMIPLockMetadata(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_BYTE *initializeWithTake for FMIPLockMetadata(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_BYTE *assignWithTake for FMIPLockMetadata(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1CCA6AA1C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 238)
  {
    v4 = *a1;
    if (v4 >= 0x12)
      return v4 - 17;
    else
      return 0;
  }
  else
  {
    v8 = sub_1CCB635B0();
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

_BYTE *sub_1CCA6AA90(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 238)
  {
    *result = a2 + 17;
  }
  else
  {
    v7 = sub_1CCB635B0();
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPLockMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCA6AB4C + 4 * byte_1CCB6A835[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCA6AB80 + 4 * byte_1CCB6A830[v4]))();
}

uint64_t sub_1CCA6AB80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA6AB88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA6AB90);
  return result;
}

uint64_t sub_1CCA6AB9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA6ABA4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCA6ABA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA6ABB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t sub_1CCA6ABC0()
{
  unint64_t result;

  result = qword_1EF9E1C98;
  if (!qword_1EF9E1C98)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6AA04, &type metadata for FMIPLockMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E1C98);
  }
  return result;
}

uint64_t FMIPItemPairingState.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v17;
  id v18;
  void *v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63604();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v24 - v12;
  v14 = objc_msgSend(a1, sel_status);
  if (v14 == (id)2)
  {

    v17 = sub_1CCA14E90(&qword_1EF9E1CA0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a2, 3, 3, v17);
  }
  if (v14 == (id)1)
  {
    v18 = objc_msgSend(a1, sel_beaconIdentifier);
    if (v18)
    {
      v19 = v18;
      sub_1CCB635EC();

      v20 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v20(v6, v11, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
      {
        v20(v13, v6, v7);
        v20(a2, v13, v7);
        v21 = sub_1CCA14E90(&qword_1EF9E1CA0);
        return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a2, 0, 3, v21);
      }
    }
    else
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    }
    sub_1CC9C3E84((uint64_t)v6, &qword_1ED8A8EF8);
    v23 = sub_1CCA14E90(&qword_1EF9E1CA0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 1, 3, v23);
  }
  else if (v14)
  {

    v22 = sub_1CCA14E90(&qword_1EF9E1CA0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a2, 1, 3, v22);
  }
  else
  {

    v15 = sub_1CCA14E90(&qword_1EF9E1CA0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 2, 3, v15);
  }
}

uint64_t FMIPItemPairingState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE v30[24];
  uint64_t v31;
  uint64_t v32;

  v32 = a2;
  v4 = sub_1CCB63604();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FMIPItemPairingState();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB643A8();
  if (v2)
    return sub_1CCA01CA0((uint64_t)a1);
  v24 = v5;
  v25 = v7;
  v26 = v4;
  v27 = v10;
  v11 = v32;
  sub_1CCA1F500((uint64_t)v30, v31);
  v13 = sub_1CCB64258();
  v14 = v12;
  v15 = v13 == 27509 && v12 == 0xE200000000000000;
  if (v15 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v16 = v11;
    v17 = sub_1CCA14E90(&qword_1EF9E1CA0);
    v18 = (uint64_t)v27;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v27, 1, 3, v17);
LABEL_13:
    sub_1CCA01CA0((uint64_t)v30);
    sub_1CCA6B2D0(v18, v16);
    return sub_1CCA01CA0((uint64_t)a1);
  }
  if (v13 == 117 && v14 == 0xE100000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v19 = sub_1CCA14E90(&qword_1EF9E1CA0);
    v18 = (uint64_t)v27;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v27, 2, 3, v19);
LABEL_12:
    v16 = v11;
    goto LABEL_13;
  }
  if (v13 == 112 && v14 == 0xE100000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_1CCA1F500((uint64_t)v30, v31);
    sub_1CC9F0F08(&qword_1EF9E1CA8, MEMORY[0x1E0CB09E0]);
    sub_1CCB64264();
    v18 = (uint64_t)v27;
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v27, v25, v26);
    v21 = sub_1CCA14E90(&qword_1EF9E1CA0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v18, 0, 3, v21);
    goto LABEL_12;
  }
  if (v13 == 108 && v14 == 0xE100000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v22 = sub_1CCA14E90(&qword_1EF9E1CA0);
    v18 = (uint64_t)v27;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v27, 3, 3, v22);
    goto LABEL_12;
  }
  v28 = 0;
  v29 = 0xE000000000000000;
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  v28 = 0xD000000000000015;
  v29 = 0x80000001CCB7A5F0;
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  result = sub_1CCB64084();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for FMIPItemPairingState()
{
  uint64_t result;

  result = qword_1EF9E1D28;
  if (!qword_1EF9E1D28)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA6B2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPItemPairingState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void FMIPItemPairingState.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v2 = v1;
  v4 = sub_1CCB63604();
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for FMIPItemPairingState();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB643C0();
  sub_1CCA6B558(v2, (uint64_t)v7);
  v8 = sub_1CCA14E90(&qword_1EF9E1CA0);
  v9 = (char *)sub_1CCA6B41C
     + 4
     * byte_1CCB6AB10[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 3, v8)];
  __asm { BR              X10 }
}

uint64_t sub_1CCA6B41C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v3, v1);
  sub_1CCA1F500(v5 - 120, *(_QWORD *)(v5 - 96));
  sub_1CCB64270();
  if (!v0)
  {
    sub_1CCA1F500(v5 - 120, *(_QWORD *)(v5 - 96));
    sub_1CC9F0F08(&qword_1EF9E1CB0, MEMORY[0x1E0CB09B8]);
    sub_1CCB6427C();
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v1);
  return sub_1CCA01CA0(v5 - 120);
}

uint64_t sub_1CCA6B558(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPItemPairingState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void FMIPItemPairingState.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for FMIPItemPairingState();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA6B558(v0, (uint64_t)v3);
  v4 = sub_1CCA14E90(&qword_1EF9E1CA0);
  v5 = (char *)sub_1CCA6B640
     + 4
     * byte_1CCB6AB14[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 3, v4)];
  __asm { BR              X10 }
}

uint64_t sub_1CCA6B640()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
  return 0x646572696170;
}

uint64_t sub_1CCA6B6AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPItemPairingState.init(from:)(a1, a2);
}

void sub_1CCA6B6C0(_QWORD *a1)
{
  FMIPItemPairingState.encode(to:)(a1);
}

void sub_1CCA6B6D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  MEMORY[0x1E0C80A78](a1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA6B558(v1, (uint64_t)v3);
  v4 = sub_1CCA14E90(&qword_1EF9E1CA0);
  v5 = (char *)sub_1CCA6B770
     + 4
     * byte_1CCB6AB18[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 3, v4)];
  __asm { BR              X10 }
}

uint64_t sub_1CCA6B770()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
  return 0x646572696170;
}

void _s8FMIPCore20FMIPItemPairingStateO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v4 = sub_1CCB63604();
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for FMIPItemPairingState();
  MEMORY[0x1E0C80A78](v5);
  v6 = sub_1CCA14E90(&qword_1EF9E1D38);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1CCA6B558(a1, (uint64_t)v9);
  sub_1CCA6B558(a2, v10);
  v11 = sub_1CCA14E90(&qword_1EF9E1CA0);
  v12 = (char *)sub_1CCA6B8FC
      + 4
      * byte_1CCB6AB1C[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 3, v11)];
  __asm { BR              X10 }
}

uint64_t sub_1CCA6B8FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  char v8;
  void (*v10)(uint64_t, uint64_t);

  sub_1CCA6B558(v0, v3);
  if (v6(v5, 3, v4))
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v1);
    sub_1CC9C3E84(v0, &qword_1EF9E1D38);
    v8 = 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v2, v5, v1);
    v8 = sub_1CCB635E0();
    v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v10(v2, v1);
    v10(v3, v1);
    sub_1CCA6C060(v0);
  }
  return v8 & 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for FMIPItemPairingState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = sub_1CCA14E90(&qword_1EF9E1CA0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = sub_1CCB63604();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
    }
  }
  return a1;
}

uint64_t destroy for FMIPItemPairingState(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = sub_1CCA14E90(&qword_1EF9E1CA0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 3, v2);
  if (!(_DWORD)result)
  {
    v4 = sub_1CCB63604();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

void *initializeWithCopy for FMIPItemPairingState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1CCA14E90(&qword_1EF9E1CA0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = sub_1CCB63604();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

void *assignWithCopy for FMIPItemPairingState(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_1CCA14E90(&qword_1EF9E1CA0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 3, v6);
  v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = sub_1CCB63604();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    sub_1CC9C3E84((uint64_t)a1, &qword_1EF9E1CA0);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = sub_1CCB63604();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

void *initializeWithTake for FMIPItemPairingState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1CCA14E90(&qword_1EF9E1CA0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 3, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = sub_1CCB63604();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  }
  return a1;
}

void *assignWithTake for FMIPItemPairingState(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_1CCA14E90(&qword_1EF9E1CA0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 3, v6);
  v10 = v8(a2, 3, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = sub_1CCB63604();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    sub_1CC9C3E84((uint64_t)a1, &qword_1EF9E1CA0);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = sub_1CCB63604();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 3, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPItemPairingState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCA6BED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_1CCA14E90(&qword_1EF9E1CA0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 4)
    return v5 - 3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FMIPItemPairingState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCA6BF34(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 3);
  else
    v5 = 0;
  v6 = sub_1CCA14E90(&qword_1EF9E1CA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_1CCA6BF8C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CCA14E90(&qword_1EF9E1CA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 3, v2);
}

uint64_t sub_1CCA6BFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1EF9E1CA0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 3, v4);
}

uint64_t sub_1CCA6C00C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CCB63604();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_1CCA6C060(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FMIPItemPairingState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CCA6C09C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, unint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;

  v3 = sub_1CCB63604();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v32 - v8;
  v10 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v13)
  {
    v32 = v1;
    v48 = MEMORY[0x1E0DEE9D8];
    v34 = v13;
    sub_1CCA6397C(0, v13, 0);
    v37 = v48;
    v33 = a1 + 32;
    v42 = sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v15 = 0;
    v44 = v4;
    v38 = v12;
    do
    {
      v36 = v15;
      v16 = *(_QWORD *)(v33 + 8 * v15);
      v17 = *(_QWORD *)(v16 + 16);
      swift_bridgeObjectRetain();
      v18 = sub_1CCB63C58();
      v41 = v17;
      v35 = v16;
      if (v17)
      {
        v19 = 0;
        v40 = v16 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
        v20 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
        v45 = *(_QWORD *)(v4 + 72);
        v46 = v20;
        v20(v12, v40, v3);
        while (1)
        {
          v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
          v39(v12, 0, 1, v3);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3) == 1)
            break;
          (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v12, v3);
          swift_bridgeObjectRetain();
          v23 = sub_1CCB63934();
          v24 = -1 << *(_BYTE *)(v18 + 32);
          v25 = v23 & ~v24;
          v26 = *(_QWORD *)(v18 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25;
          v43 = v19;
          if ((v26 & 1) != 0)
          {
            v27 = ~v24;
            while (1)
            {
              v46(v7, *(_QWORD *)(v18 + 48) + v25 * v45, v3);
              sub_1CC9CAA38(&qword_1EF9E1E28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
              v28 = sub_1CCB63958();
              v22 = *(void (**)(char *, uint64_t))(v4 + 8);
              v22(v7, v3);
              if ((v28 & 1) != 0)
                break;
              v25 = (v25 + 1) & v27;
              v4 = v44;
              if (((*(_QWORD *)(v18 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
                goto LABEL_5;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
LABEL_5:
            swift_bridgeObjectRelease();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v46(v7, (unint64_t)v9, v3);
            v47 = v18;
            sub_1CCA75CEC((uint64_t)v7, v25, isUniquelyReferenced_nonNull_native);
            v18 = v47;
            swift_bridgeObjectRelease();
            v22 = *(void (**)(char *, uint64_t))(v4 + 8);
          }
          v12 = v38;
          v19 = v43 + 1;
          v22(v9, v3);
          v4 = v44;
          if (v19 == v41)
          {
            v39(v12, 1, 1, v3);
            break;
          }
          v46(v12, v40 + v45 * v19, v3);
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v12, 1, 1, v3);
      }
      swift_bridgeObjectRelease();
      v29 = v37;
      v48 = v37;
      v31 = *(_QWORD *)(v37 + 16);
      v30 = *(_QWORD *)(v37 + 24);
      if (v31 >= v30 >> 1)
      {
        sub_1CCA6397C(v30 > 1, v31 + 1, 1);
        v29 = v48;
      }
      v15 = v36 + 1;
      *(_QWORD *)(v29 + 16) = v31 + 1;
      v37 = v29;
      *(_QWORD *)(v29 + 8 * v31 + 32) = v18;
    }
    while (v15 != v34);
    return v37;
  }
  return result;
}

void FMIPItemGroup.capabilities.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t FMIPItemGroup.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPItemGroup.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPItemGroup.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FMIPItemGroup.groupedItems.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FMIPItemGroup.groupedItemIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

void FMIPItemGroup.state.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 64);
}

uint64_t FMIPItemGroup.itemPairingStateMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FMIPItemGroup.lostMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMIPItemGroup();
  return sub_1CC9EAB74(v1 + *(int *)(v3 + 48), a1, &qword_1ED8A8CD0);
}

uint64_t sub_1CCA6C56C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA6C5A8 + 4 * byte_1CCB6ABF8[a1]))(0x696C696261706163, 0xEC00000073656974);
}

uint64_t sub_1CCA6C5A8()
{
  return 0x696669746E656469;
}

uint64_t sub_1CCA6C5C4()
{
  return 0x6E6564496D657469;
}

unint64_t sub_1CCA6C5E8()
{
  return 0xD000000000000016;
}

unint64_t sub_1CCA6C608()
{
  return 0xD000000000000013;
}

uint64_t sub_1CCA6C624()
{
  return 0x736D657469;
}

uint64_t sub_1CCA6C638()
{
  return 0x49646570756F7267;
}

uint64_t sub_1CCA6C658()
{
  return 1701667182;
}

uint64_t sub_1CCA6C668()
{
  return 0x6574617473;
}

uint64_t sub_1CCA6C67C()
{
  return 0x6174654D74736F6CLL;
}

uint64_t sub_1CCA6C69C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA6C6D8 + 4 * byte_1CCB6AC02[a1]))(0x696C696261706163, 0xEC00000073656974);
}

uint64_t sub_1CCA6C6D8()
{
  return 0x696669746E656469;
}

uint64_t sub_1CCA6C6F4()
{
  return 0x6E6564496D657469;
}

unint64_t sub_1CCA6C718()
{
  return 0xD000000000000016;
}

unint64_t sub_1CCA6C738()
{
  return 0xD000000000000013;
}

uint64_t sub_1CCA6C754()
{
  return 0x736D657469;
}

uint64_t sub_1CCA6C768()
{
  return 0x49646570756F7267;
}

uint64_t sub_1CCA6C788()
{
  return 1701667182;
}

uint64_t sub_1CCA6C798()
{
  return 0x6574617473;
}

uint64_t sub_1CCA6C7AC()
{
  return 0x6174654D74736F6CLL;
}

uint64_t sub_1CCA6C7CC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1CCA6C56C(*a1);
  v5 = v4;
  if (v3 == sub_1CCA6C56C(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1CCA6C854()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCA6C56C(v1);
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA6C8B4()
{
  unsigned __int8 *v0;

  sub_1CCA6C56C(*v0);
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA6C8F4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCA6C56C(v1);
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA6C950@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCA7C73C();
  *a1 = result;
  return result;
}

uint64_t sub_1CCA6C97C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1CCA6C56C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1CCA6C9A4()
{
  unsigned __int8 *v0;

  return sub_1CCA6C69C(*v0);
}

uint64_t sub_1CCA6C9AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCA7C73C();
  *a1 = result;
  return result;
}

void sub_1CCA6C9D0(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_1CCA6C9DC()
{
  sub_1CC9F08A4();
  return sub_1CCB643D8();
}

uint64_t sub_1CCA6CA04()
{
  sub_1CC9F08A4();
  return sub_1CCB643E4();
}

BOOL FMIPItemGroup.shouldShowPartPicker.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16) == 2 && *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) < 3uLL;
}

uint64_t static FMIPItemGroup.primaryPart(group:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  char *v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  BOOL v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  unsigned int v68;
  _QWORD v70[3];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void (*v75)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  int64_t v88;

  v4 = sub_1CCA14E90((uint64_t *)&unk_1EF9DF580);
  v5 = MEMORY[0x1E0C80A78](v4);
  v77 = (uint64_t)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v70 - v8;
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v70 - v10;
  v12 = type metadata accessor for FMIPItem();
  v13 = MEMORY[0x1E0C80A78](v12);
  v70[1] = (char *)v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v72 = (uint64_t)v70 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v71 = (uint64_t)v70 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v82 = (uint64_t)v70 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)v70 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v73 = (uint64_t)v70 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v85 = (uint64_t)v70 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v84 = (uint64_t)v70 - v29;
  MEMORY[0x1E0C80A78](v28);
  v79 = (uint64_t)v70 - v30;
  v80 = v31;
  v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
  v75(a2, 1, 1, v12);
  v32 = *(_QWORD *)(a1 + 56);
  v76 = a1 + 56;
  v33 = 1 << *(_BYTE *)(a1 + 32);
  v34 = (uint64_t)v9;
  v35 = -1;
  if (v33 < 64)
    v35 = ~(-1 << v33);
  v36 = v35 & v32;
  v78 = (unint64_t)(v33 + 63) >> 6;
  swift_bridgeObjectRetain();
  v37 = 0;
  v81 = a1;
  v83 = v9;
  v86 = v11;
  v70[2] = a2;
  v74 = v23;
  while (1)
  {
    if (v36)
    {
      v38 = v23;
      v87 = (v36 - 1) & v36;
      v88 = v37;
      v39 = __clz(__rbit64(v36)) | (v37 << 6);
      goto LABEL_22;
    }
    v40 = v37 + 1;
    if (__OFADD__(v37, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (v40 >= v78)
      return swift_release();
    v41 = *(_QWORD *)(v76 + 8 * v40);
    v42 = v37 + 1;
    if (!v41)
    {
      v42 = v37 + 2;
      if (v37 + 2 >= v78)
        return swift_release();
      v41 = *(_QWORD *)(v76 + 8 * v42);
      if (!v41)
      {
        v42 = v37 + 3;
        if (v37 + 3 >= v78)
          return swift_release();
        v41 = *(_QWORD *)(v76 + 8 * v42);
        if (!v41)
          break;
      }
    }
LABEL_21:
    v38 = v23;
    v87 = (v41 - 1) & v41;
    v88 = v42;
    v39 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_22:
    v44 = v80;
    v45 = v79;
    sub_1CCA0BEEC(*(_QWORD *)(v81 + 48) + *(_QWORD *)(v80 + 72) * v39, v79, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v46 = v84;
    sub_1CC9FED60(v45, v84, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CC9EAB74(a2, (uint64_t)v11, (uint64_t *)&unk_1EF9DF580);
    v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
    if (v47(v11, 1, v12) != 1)
    {
      sub_1CC9FED60((uint64_t)v11, v85, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v48 = v46 + *(int *)(v12 + 64);
      v49 = *(_QWORD *)(v48 + 8);
      v50 = *(unsigned __int8 *)(v48 + 32);
      v51 = v73;
      sub_1CCA0BEEC(v46, v73, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if (v49)
      {
        v52 = (uint64_t)v38;
      }
      else
      {
        v56 = (_QWORD *)(v51 + *(int *)(v12 + 56));
        v57 = *v56 == 1702060355 && v56[1] == 0xE400000000000000;
        v52 = (uint64_t)v38;
        if (v57)
          v50 = 1;
        else
          v50 = sub_1CCB642A0() & 1;
      }
      sub_1CCA0BF30(v51, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v58 = *(_QWORD *)(v85 + *(int *)(v12 + 64) + 8);
      sub_1CCA0BEEC(v85, v52, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if (!v58)
      {
        v59 = (_QWORD *)(v52 + *(int *)(v12 + 56));
        if (*v59 != 1702060355 || v59[1] != 0xE400000000000000)
          sub_1CCB642A0();
      }
      sub_1CCA0BF30(v52, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      __asm { BR              X9 }
    }
    sub_1CC9C3E84((uint64_t)v11, (uint64_t *)&unk_1EF9DF580);
    v23 = v38;
    sub_1CC9EAB74(a2, v34, (uint64_t *)&unk_1EF9DF580);
    if (v47((char *)v34, 1, v12) != 1)
    {
      sub_1CC9FED60(v34, v82, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v53 = *(_QWORD *)(v46 + *(int *)(v12 + 64) + 8);
      v54 = v71;
      sub_1CCA0BEEC(v46, v71, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if (!v53)
      {
        v55 = (_QWORD *)(v54 + *(int *)(v12 + 56));
        if (*v55 != 1702060355 || v55[1] != 0xE400000000000000)
          sub_1CCB642A0();
      }
      sub_1CCA0BF30(v54, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v60 = v82 + *(int *)(v12 + 64);
      v61 = *(_QWORD *)(v60 + 8);
      v62 = *(unsigned __int8 *)(v60 + 32);
      v63 = v72;
      sub_1CCA0BEEC(v82, v72, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if (v61)
      {
        v64 = v63;
      }
      else
      {
        v65 = (_QWORD *)(v63 + *(int *)(v12 + 56));
        if (*v65 == 1702060355 && v65[1] == 0xE400000000000000)
        {
          v64 = v63;
          v62 = 1;
        }
        else
        {
          v66 = sub_1CCB642A0();
          v64 = v72;
          v62 = v66 & 1;
        }
      }
      sub_1CCA0BF30(v64, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      __asm { BR              X9 }
    }
    sub_1CC9C3E84(v34, (uint64_t *)&unk_1EF9DF580);
    v67 = v77;
    sub_1CC9EAB74(a2, v77, (uint64_t *)&unk_1EF9DF580);
    v68 = v47((char *)v67, 1, v12);
    sub_1CC9C3E84(v67, (uint64_t *)&unk_1EF9DF580);
    if (v68 == 1)
    {
      sub_1CC9C3E84(a2, (uint64_t *)&unk_1EF9DF580);
      sub_1CC9FED60(v46, a2, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v75(a2, 0, 1, v12);
    }
    else
    {
      sub_1CCA0BF30(v46, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    }
    v34 = (uint64_t)v83;
    v11 = v86;
    v36 = v87;
    v37 = v88;
  }
  v43 = v37 + 4;
  if (v37 + 4 < v78)
  {
    v41 = *(_QWORD *)(v76 + 8 * v43);
    if (!v41)
    {
      while (1)
      {
        v42 = v43 + 1;
        if (__OFADD__(v43, 1))
          break;
        if (v42 >= v78)
          return swift_release();
        v41 = *(_QWORD *)(v76 + 8 * v42);
        ++v43;
        if (v41)
          goto LABEL_21;
      }
LABEL_55:
      __break(1u);
      JUMPOUT(0x1CCA6D460);
    }
    v42 = v37 + 4;
    goto LABEL_21;
  }
  return swift_release();
}

uint64_t FMIPItemGroup.shouldDisplaySeparatedLocation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _BOOL8 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  unsigned int v14;
  id v15;
  void *v16;
  unsigned __int8 v17;
  id v18;
  unsigned int v19;
  id v20;
  void *v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t v25;

  v1 = type metadata accessor for FMIPItemGroup();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) >= 2uLL && *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16) > 1uLL;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v5 = sub_1CCB637FC();
  sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
  sub_1CCA0BEEC(v0, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  v6 = sub_1CCB637D8();
  v7 = sub_1CCB63D18();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    *(_DWORD *)v8 = 141558531;
    v24 = 1752392040;
    v25 = v9;
    sub_1CCB63E44();
    *(_WORD *)(v8 + 12) = 2081;
    v10 = *((_QWORD *)v3 + 1);
    v11 = *((_QWORD *)v3 + 2);
    swift_bridgeObjectRetain();
    v24 = sub_1CCA0CB60(v10, v11, &v25);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA0BF30((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    *(_WORD *)(v8 + 22) = 1024;
    LODWORD(v24) = v4;
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v6, v7, "SeparatedLocations: id: %{private,mask.hash}s, result: %{BOOL}d.", (uint8_t *)v8, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v9, -1, -1);
    MEMORY[0x1D17B214C](v8, -1, -1);
  }
  else
  {
    sub_1CCA0BF30((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  }

  v12 = (void *)objc_opt_self();
  v13 = objc_msgSend(v12, sel_sharedInstance);
  v14 = objc_msgSend(v13, sel_isInternalBuild);

  if (v14)
  {
    v15 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    v16 = (void *)sub_1CCB63964();
    v17 = objc_msgSend(v15, sel_BOOLForKey_, v16);

    if ((v17 & 1) != 0)
      return 1;
  }
  v18 = objc_msgSend(v12, sel_sharedInstance);
  v19 = objc_msgSend(v18, sel_isInternalBuild);

  if (v19)
  {
    v20 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    v21 = (void *)sub_1CCB63964();
    v22 = objc_msgSend(v20, sel_BOOLForKey_, v21);

    return v4 & ~v22;
  }
  return v4;
}

void FMIPItemGroup.partsAtMultipleLocations.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v1 + 16);
    while (1)
    {
      v5 = v3 + 1;
      if ((uint64_t)v3 < (uint64_t)(v4 - 1))
        break;
LABEL_3:
      ++v3;
      if (v5 == v2)
        return;
    }
    v6 = v3;
    while (v3 < v4)
    {
      v7 = *(_QWORD *)(type metadata accessor for FMIPItem() - 8);
      v8 = v1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      v9 = *(_QWORD *)(v7 + 72);
      v10 = *(void **)(v8 + v9 * v3 + 392);
      if (v10)
      {
        if (v5 >= v4)
          goto LABEL_16;
        v11 = *(void **)(v8 + v9 * v5 + 392);
        if (v11)
        {
          v12 = v10;
          v13 = v11;
          objc_msgSend(v12, sel_distanceFromLocation_, v13);
          v15 = v14;
          objc_msgSend(v12, sel_horizontalAccuracy);
          v17 = v16;
          objc_msgSend(v13, sel_horizontalAccuracy);
          v19 = v18;

          if (v15 / sqrt(v17 * v17 + v19 * v19 + 400.0) >= 1.5)
            return;
          v4 = *(_QWORD *)(v1 + 16);
        }
      }
      if ((uint64_t)++v6 >= (uint64_t)(v4 - 1))
        goto LABEL_3;
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
}

uint64_t sub_1CCA6D9B8@<X0>(int64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void **v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  id v37;
  id v38;
  id v39;
  int64_t v40;
  id v41;
  unint64_t v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v47;
  unint64_t v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  id v69;
  id v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  id v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  _QWORD *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  int64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  void (*v148)(char *, char *, uint64_t);
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char v158;
  char *v159;
  uint64_t v160;
  char v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  os_log_type_t v172;
  uint8_t *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint8_t *v178;
  unint64_t v179;
  int64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  NSObject *v185;
  void (*v186)(char *, char *, uint64_t);
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  os_log_type_t v208;
  uint8_t *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  id v223;
  unsigned int v224;
  id v225;
  void *v226;
  unsigned int v227;
  uint64_t v228;
  NSObject *v229;
  NSObject *v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v234;
  NSObject *v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  BOOL v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t *v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  id v260;
  id v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  id v272;
  NSObject *v273;
  int v274;
  uint64_t v275;
  id v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  id v280;
  id v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  char v285;
  void *v286;
  id v287;
  uint64_t v288;
  unint64_t v289;
  id v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  id v294;
  id v295;
  uint64_t v296;
  unint64_t v297;
  char v298;
  void *v299;
  id v300;
  uint64_t v301;
  unint64_t v302;
  id v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  id v307;
  id v308;
  uint64_t v309;
  unint64_t v310;
  char v311;
  void *v312;
  id v313;
  uint64_t v314;
  unint64_t v315;
  unsigned int v316;
  BOOL v317;
  uint64_t v318;
  unint64_t v319;
  id v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  id v324;
  char *v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  os_log_t v329;
  char *v330;
  uint64_t v332;
  uint64_t v333;
  int64_t v334;
  id v335;
  id v336;
  uint64_t *v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  char *v344;
  int64_t v345;
  int64_t v346;
  unint64_t v347;
  uint64_t v348;
  char *v349;
  uint64_t v350;
  _QWORD *v351;
  __int128 v352;
  int64_t v353;
  uint64_t v354;
  uint64_t v355;
  NSObject *v356;
  char *v357;
  char *v358;
  char *v359;
  uint64_t v360;
  unint64_t v361;
  char *v362;
  unint64_t v363;
  uint64_t v364;
  char *v365;
  __int128 v366;
  uint64_t v367;
  int64_t v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  uint64_t v372[8];
  uint64_t v373;
  unint64_t v374[16];

  v353 = a1;
  v351 = a2;
  v2 = sub_1CCA14E90(&qword_1ED8A8CD0);
  MEMORY[0x1E0C80A78](v2);
  v338 = (uint64_t *)((char *)&v332 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_1CCA14E90(&qword_1ED8A8EF8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v359 = (char *)&v332 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v349 = (char *)&v332 - v7;
  v8 = type metadata accessor for FMIPItemPairingState();
  MEMORY[0x1E0C80A78](v8);
  v362 = (char *)&v332 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v367 = sub_1CCB63604();
  v360 = *(_QWORD *)(v367 - 8);
  v10 = MEMORY[0x1E0C80A78](v367);
  v364 = (uint64_t)&v332 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v344 = (char *)&v332 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v363 = (unint64_t)&v332 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v358 = (char *)&v332 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v357 = (char *)&v332 - v19;
  MEMORY[0x1E0C80A78](v18);
  v365 = (char *)&v332 - v20;
  sub_1CCA14E90(&qword_1EF9E1E48);
  inited = swift_initStackObject();
  v366 = xmmword_1CCB6AE80;
  *(_OWORD *)(inited + 16) = xmmword_1CCB6AE80;
  v22 = (void *)*MEMORY[0x1E0D89A30];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0D89A30];
  *(_OWORD *)(inited + 40) = xmmword_1CCB6AE90;
  v23 = (void *)*MEMORY[0x1E0D89A18];
  *(_QWORD *)(inited + 56) = *MEMORY[0x1E0D89A18];
  *(_OWORD *)(inited + 64) = xmmword_1CCB6AEA0;
  v24 = (void *)*MEMORY[0x1E0D89A08];
  *(_QWORD *)(inited + 80) = *MEMORY[0x1E0D89A08];
  *(_OWORD *)(inited + 88) = xmmword_1CCB6AEB0;
  v25 = (void *)*MEMORY[0x1E0D89A20];
  *(_QWORD *)(inited + 104) = *MEMORY[0x1E0D89A20];
  v26 = (void **)MEMORY[0x1E0D89A28];
  *(_OWORD *)(inited + 112) = xmmword_1CCB6AEC0;
  v27 = *v26;
  *(_QWORD *)(inited + 128) = *v26;
  *(_OWORD *)(inited + 136) = xmmword_1CCB6AED0;
  v28 = v22;
  v29 = v23;
  v30 = v24;
  v31 = v25;
  v32 = v27;
  v33 = (uint64_t *)sub_1CCAC4D70(inited);
  sub_1CCA14E90(&qword_1EF9E1E50);
  v34 = swift_initStackObject();
  *(_OWORD *)(v34 + 16) = v366;
  *(_QWORD *)(v34 + 32) = v30;
  *(_QWORD *)(v34 + 40) = 16;
  *(_QWORD *)(v34 + 48) = v28;
  *(_QWORD *)(v34 + 56) = 4;
  *(_QWORD *)(v34 + 64) = v29;
  *(_QWORD *)(v34 + 72) = 2;
  *(_QWORD *)(v34 + 80) = v31;
  *(_QWORD *)(v34 + 88) = 8;
  v35 = (void *)*MEMORY[0x1E0D89A38];
  *(_QWORD *)(v34 + 96) = *MEMORY[0x1E0D89A38];
  *(_QWORD *)(v34 + 104) = 128;
  v36 = (unint64_t)v28;
  v37 = v29;
  v38 = v30;
  v39 = v31;
  v40 = v353;
  v336 = v39;
  v41 = v35;
  v42 = sub_1CCAC4E7C(v34);
  v368 = v40;
  v43 = 0;
  sub_1CCACCD58(v42, (void (*)(_QWORD *__return_ptr))sub_1CCA7C784);
  v45 = (uint64_t)v44;
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_231;
  while (1)
  {
    v48 = *(_QWORD *)(v45 + 16);
    v47 = *(_QWORD *)(v45 + 24);
    v49 = v47 >> 1;
    v50 = v48 + 1;
    if (v47 >> 1 <= v48)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1CCAC9BB4((_QWORD *)(v47 > 1), v48 + 1, 1, (_QWORD *)v45);
      v45 = isUniquelyReferenced_nonNull_native;
      v47 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24);
      v49 = v47 >> 1;
    }
    *(_QWORD *)(v45 + 16) = v50;
    *(_QWORD *)(v45 + 8 * v48 + 32) = 256;
    if (v49 < (uint64_t)(v48 + 2))
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1CCAC9BB4((_QWORD *)(v47 > 1), v48 + 2, 1, (_QWORD *)v45);
      v45 = isUniquelyReferenced_nonNull_native;
    }
    *(_QWORD *)(v45 + 16) = v48 + 2;
    v337 = (uint64_t *)(v45 + 32);
    *(_QWORD *)(v45 + 32 + 8 * v50) = 512;
    MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native);
    *(&v332 - 2) = v40;
    sub_1CCACD0A4((uint64_t)v33, (void (*)(_QWORD *__return_ptr))sub_1CCA7C78C);
    v52 = v51;
    swift_bridgeObjectRelease();
    v372[0] = (uint64_t)&unk_1E88ECAB8;
    sub_1CCAC890C(v52);
    v53 = (_QWORD *)v372[0];
    v54 = objc_msgSend((id)v40, sel_isConnected);
    v339 = v45;
    if (v54)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v53 = sub_1CCAC9BA8(0, v53[2] + 1, 1, v53);
      v56 = v53[2];
      v55 = v53[3];
      if (v56 >= v55 >> 1)
        v53 = sub_1CCAC9BA8((_QWORD *)(v55 > 1), v56 + 1, 1, v53);
      v53[2] = v56 + 1;
      v57 = v53;
      v53[v56 + 4] = 64;
    }
    else
    {
      v57 = v53;
    }
    v58 = v367;
    v59 = (id)v36;
    v60 = objc_msgSend((id)v40, sel_taskInformation);
    type metadata accessor for SPBeaconTaskName(0);
    v62 = v61;
    v63 = sub_1CC9C30A8(0, &qword_1EF9E1E58);
    v64 = sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D8, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_1CCB65E60);
    v341 = v63;
    v342 = v62;
    v340 = v64;
    v65 = sub_1CCB638E0();

    v66 = *(_QWORD *)(v65 + 16);
    v335 = v59;
    if (!v66)
      goto LABEL_23;
    v67 = sub_1CCAC8DD0((uint64_t)v59);
    if ((v68 & 1) != 0)
    {
      v69 = *(id *)(*(_QWORD *)(v65 + 56) + 8 * v67);

      swift_bridgeObjectRelease();
      v70 = objc_msgSend(v69, sel_state);

      if (v70)
      {
        v71 = v57;
        if (v70 == (id)1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v71 = sub_1CCAC9BA8(0, v57[2] + 1, 1, v57);
          v80 = v71[2];
          v79 = v71[3];
          if (v80 >= v79 >> 1)
            v71 = sub_1CCAC9BA8((_QWORD *)(v79 > 1), v80 + 1, 1, v71);
          v71[2] = v80 + 1;
          v57 = v71;
          v74 = &v71[v80];
          v75 = 4;
        }
        else
        {
          if (v70 != (id)4)
            goto LABEL_35;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v71 = sub_1CCAC9BA8(0, v57[2] + 1, 1, v57);
          v73 = v71[2];
          v72 = v71[3];
          if (v73 >= v72 >> 1)
            v71 = sub_1CCAC9BA8((_QWORD *)(v72 > 1), v73 + 1, 1, v71);
          v71[2] = v73 + 1;
          v57 = v71;
          v74 = &v71[v73];
          v75 = 2048;
        }
      }
      else
      {
        v76 = v57;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v76 = sub_1CCAC9BA8(0, v57[2] + 1, 1, v57);
        v78 = v76[2];
        v77 = v76[3];
        if (v78 >= v77 >> 1)
          v76 = sub_1CCAC9BA8((_QWORD *)(v77 > 1), v78 + 1, 1, v76);
        v76[2] = v78 + 1;
        v57 = v76;
        v74 = &v76[v78];
        v75 = 2;
      }
      v74[4] = v75;
      v58 = v367;
    }
    else
    {
LABEL_23:

      swift_bridgeObjectRelease();
    }
LABEL_35:
    v81 = objc_msgSend((id)v40, sel_identifier, v332, v333);
    v82 = v365;
    sub_1CCB635EC();

    v83 = sub_1CCB635C8();
    v85 = v84;
    v86 = *(void (**)(char *, uint64_t))(v360 + 8);
    v86(v82, v58);
    v87 = v351;
    v351[1] = v83;
    v87[2] = v85;
    v88 = objc_msgSend((id)v40, sel_name);
    v89 = sub_1CCB63988();
    v91 = v90;

    v87[3] = v89;
    v87[4] = v91;
    v92 = MEMORY[0x1E0DEE9D8];
    v93 = MEMORY[0x1E0DEE9E8];
    v87[5] = MEMORY[0x1E0DEE9D8];
    v87[6] = v93;
    v94 = objc_msgSend((id)v40, sel_beaconMap);
    sub_1CC9C30A8(0, &qword_1EF9E1E60);
    v95 = sub_1CCB638E0();

    v96 = sub_1CCA79880(v95);
    swift_bridgeObjectRelease();
    v374[0] = v92;
    v97 = swift_retain();
    sub_1CCA70260(v97, v374);
    v98 = sub_1CCA14E90(&qword_1EF9E1CA0);
    v99 = (uint64_t)v362;
    v100 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v362, 3, 3, v98);
    MEMORY[0x1E0C80A78](v100);
    *(&v332 - 2) = v99;
    LOBYTE(v95) = sub_1CCA71148((uint64_t (*)(char *))sub_1CCA7C794, (char)(&v332 - 4), v96);
    v334 = v43;
    sub_1CCA0BF30(v99, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemPairingState);
    swift_release();
    if ((v95 & 1) != 0)
    {
      v101 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v101 = sub_1CCAC9BA8(0, v57[2] + 1, 1, v57);
      v103 = v101[2];
      v102 = v101[3];
      if (v103 >= v102 >> 1)
        v101 = sub_1CCAC9BA8((_QWORD *)(v102 > 1), v103 + 1, 1, v101);
      v101[2] = v103 + 1;
      v101[v103 + 4] = 0x2000;
    }
    else
    {
      v101 = v57;
    }
    v45 = (uint64_t)objc_msgSend((id)v40, sel_isPairingComplete);
    if ((v45 & 1) != 0)
    {
      v343 = v101;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v101 = sub_1CCAC9BA8(0, v101[2] + 1, 1, v101);
      v105 = v101[2];
      v104 = v101[3];
      v343 = v101;
      if (v105 >= v104 >> 1)
        v343 = sub_1CCAC9BA8((_QWORD *)(v104 > 1), v105 + 1, 1, v343);
      v106 = v343;
      v343[2] = v105 + 1;
      v106[v105 + 4] = 0x8000;
    }
    v351[9] = v96;
    v107 = v374[0];
    v108 = *(_QWORD *)(v374[0] + 16);
    *(_QWORD *)&v366 = v86;
    v347 = v374[0];
    if (v108)
    {
      LODWORD(v356) = v45;
      v372[0] = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1CCA639D4(0, v108, 0);
      v109 = v372[0];
      v110 = v360;
      v362 = (char *)((*(unsigned __int8 *)(v360 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v360 + 80));
      v111 = &v362[v107];
      v112 = *(_QWORD *)(v360 + 72);
      v361 = *(_QWORD *)(v360 + 16);
      v113 = v367;
      v114 = v357;
      do
      {
        ((void (*)(char *, char *, uint64_t))v361)(v114, v111, v113);
        v372[0] = v109;
        v116 = *(_QWORD *)(v109 + 16);
        v115 = *(_QWORD *)(v109 + 24);
        if (v116 >= v115 >> 1)
        {
          sub_1CCA639D4(v115 > 1, v116 + 1, 1);
          v110 = v360;
          v109 = v372[0];
        }
        *(_QWORD *)(v109 + 16) = v116 + 1;
        (*(void (**)(char *, char *, uint64_t))(v110 + 32))(&v362[v109 + v116 * v112], v114, v113);
        v111 += v112;
        --v108;
      }
      while (v108);
      v355 = v109;
      swift_bridgeObjectRelease();
      v40 = v353;
      v86 = (void (*)(char *, uint64_t))v366;
      v45 = v356;
    }
    else
    {
      v355 = MEMORY[0x1E0DEE9D8];
    }
    v373 = MEMORY[0x1E0DEE9E8];
    v117 = v359;
    if ((v45 & 1) != 0)
    {
      v36 = (unint64_t)&selRef_coordinate;
      v118 = objc_msgSend((id)v40, sel_multipartStatus);
      v119 = sub_1CCA14E90(&qword_1EF9E1428);
      v120 = sub_1CCA7CC20(&qword_1EF9E1E08, &qword_1EF9E1428);
      v121 = sub_1CCB63C40();

      v122 = *(_QWORD *)(v121 + 16);
      swift_bridgeObjectRelease();
      v333 = v120;
      if (v122)
      {
        v123 = objc_msgSend((id)v40, sel_multipartStatus);
        v43 = sub_1CCB63C40();

        v124 = *(_QWORD *)(v43 + 16);
        if (v124)
        {
          v332 = v119;
          v372[0] = MEMORY[0x1E0DEE9D8];
          v33 = v372;
          v345 = v124;
          sub_1CCA6397C(0, v124, 0);
          v125 = sub_1CCAA78E0(v43);
          v350 = 0;
          v128 = v127 & 1;
          *(_QWORD *)&v352 = v43;
          v346 = v43 + 56;
          while (1)
          {
            v129 = v367;
            if (v125 < 0 || v125 >= 1 << *(_BYTE *)(v352 + 32))
              goto LABEL_226;
            if (((*(_QWORD *)(v346 + (((unint64_t)v125 >> 3) & 0xFFFFFFFFFFFFF8)) >> v125) & 1) == 0)
              goto LABEL_227;
            if (*(_DWORD *)(v352 + 36) != (_DWORD)v126)
              goto LABEL_228;
            LODWORD(v347) = v128;
            v348 = v126;
            v349 = (char *)v125;
            v36 = *(_QWORD *)(*(_QWORD *)(v352 + 48) + 8 * v125);
            v40 = *(_QWORD *)(v36 + 16);
            v362 = (char *)v36;
            if (v40)
            {
              v369 = MEMORY[0x1E0DEE9D8];
              swift_bridgeObjectRetain();
              sub_1CCA639D4(0, v40, 0);
              v45 = v369;
              v130 = sub_1CCAA78E0(v36);
              v132 = v131;
              v134 = v133 & 1;
              v361 = v36 + 56;
              v33 = (uint64_t *)v360;
              v43 = (int64_t)v344;
              while ((v130 & 0x8000000000000000) == 0 && v130 < 1 << *(_BYTE *)(v36 + 32))
              {
                if (((*(_QWORD *)(v361 + (((unint64_t)v130 >> 3) & 0xFFFFFFFFFFFFF8)) >> v130) & 1) == 0)
                  goto LABEL_221;
                if (*(_DWORD *)(v36 + 36) != (_DWORD)v132)
                  goto LABEL_222;
                LODWORD(v363) = v134;
                v135 = *(_QWORD *)(v36 + 48);
                v136 = v33[9];
                ((void (*)(int64_t, uint64_t, uint64_t))v33[2])(v43, v135 + v136 * v130, v129);
                v137 = (_QWORD *)v45;
                v369 = v45;
                v138 = v129;
                v140 = *(_QWORD *)(v45 + 16);
                v139 = *(_QWORD *)(v45 + 24);
                if (v140 >= v139 >> 1)
                {
                  sub_1CCA639D4(v139 > 1, v140 + 1, 1);
                  v33 = (uint64_t *)v360;
                  v137 = (_QWORD *)v369;
                }
                v137[2] = v140 + 1;
                v45 = (uint64_t)v137;
                ((void (*)(unint64_t, int64_t, uint64_t))v33[4])((unint64_t)v137+ ((*((unsigned __int8 *)v33 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v33 + 80))+ v140 * v136, v43, v138);
                v36 = (unint64_t)v362;
                v141 = sub_1CCB48FB8(v130, v132, v363 & 1, v362);
                v130 = v141;
                v132 = v142;
                v134 = v143 & 1;
                --v40;
                v129 = v138;
                if (!v40)
                {
                  sub_1CCA58DB4(v141, v142, v134);
                  v117 = v359;
                  goto LABEL_75;
                }
              }
              __break(1u);
LABEL_221:
              __break(1u);
LABEL_222:
              __break(1u);
              goto LABEL_223;
            }
            swift_bridgeObjectRetain();
            v45 = MEMORY[0x1E0DEE9D8];
LABEL_75:
            v354 = v45;
            v361 = sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
            v144 = sub_1CCB63C58();
            v145 = v364;
            v358 = *(char **)(v354 + 16);
            if (v358)
            {
              v146 = 0;
              v147 = v360;
              v357 = (char *)(v354
                            + ((*(unsigned __int8 *)(v360 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v360 + 80)));
              v45 = *(_QWORD *)(v360 + 72);
              v148 = *(void (**)(char *, char *, uint64_t))(v360 + 16);
              v148(v117, v357, v129);
              while (1)
              {
                v356 = *(NSObject **)(v147 + 56);
                ((void (*)(char *, _QWORD, uint64_t, uint64_t))v356)(v117, 0, 1, v129);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v117, 1, v129) == 1)
                {
                  v36 = (unint64_t)v362;
                  goto LABEL_90;
                }
                v363 = v146;
                (*(void (**)(uint64_t, char *, uint64_t))(v147 + 32))(v145, v117, v129);
                swift_bridgeObjectRetain();
                v152 = sub_1CCB63934();
                v153 = -1 << *(_BYTE *)(v144 + 32);
                v154 = v152 & ~v153;
                if (((*(_QWORD *)(v144 + 56 + ((v154 >> 3) & 0xFFFFFFFFFFFFF8)) >> v154) & 1) != 0)
                {
                  v155 = ~v153;
                  while (1)
                  {
                    v156 = v365;
                    v157 = v367;
                    v148(v365, (char *)(*(_QWORD *)(v144 + 48) + v154 * v45), v367);
                    sub_1CC9CAA38(&qword_1EF9E1E28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
                    v158 = sub_1CCB63958();
                    ((void (*)(char *, uint64_t))v366)(v156, v157);
                    if ((v158 & 1) != 0)
                      break;
                    v154 = (v154 + 1) & v155;
                    if (((*(_QWORD *)(v144 + 56 + ((v154 >> 3) & 0xFFFFFFFFFFFFF8)) >> v154) & 1) == 0)
                      goto LABEL_77;
                  }
                  swift_bridgeObjectRelease();
                  v129 = v367;
                  v150 = v364;
                }
                else
                {
LABEL_77:
                  swift_bridgeObjectRelease();
                  v149 = swift_isUniquelyReferenced_nonNull_native();
                  v150 = v364;
                  v151 = (uint64_t)v365;
                  v129 = v367;
                  v148(v365, (char *)v364, v367);
                  v369 = v144;
                  sub_1CCA75CEC(v151, v154, v149);
                  v144 = v369;
                  swift_bridgeObjectRelease();
                }
                v146 = v363 + 1;
                ((void (*)(uint64_t, uint64_t))v366)(v150, v129);
                v117 = v359;
                v147 = v360;
                v145 = v150;
                if ((char *)v146 == v358)
                  break;
                v148(v359, &v357[v45 * v146], v129);
              }
              v36 = (unint64_t)v362;
              ((void (*)(char *, uint64_t, uint64_t, uint64_t))v356)(v359, 1, 1, v129);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v360 + 56))(v117, 1, 1, v129);
            }
LABEL_90:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v33 = (uint64_t *)v372[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1CCA6397C(0, v33[2] + 1, 1);
              v33 = (uint64_t *)v372[0];
            }
            v160 = v348;
            v159 = v349;
            v161 = v347;
            v163 = v33[2];
            v162 = v33[3];
            v43 = v163 + 1;
            if (v163 >= v162 >> 1)
            {
              sub_1CCA6397C(v162 > 1, v163 + 1, 1);
              v161 = v347;
              v160 = v348;
              v159 = v349;
              v33 = (uint64_t *)v372[0];
            }
            v164 = v350 + 1;
            v33[2] = v43;
            v33[v163 + 4] = v144;
            v125 = sub_1CCB48FB8(v159, v160, v161 & 1, v352);
            v128 = v165 & 1;
            v350 = v164;
            v40 = v353;
            if (v164 == v345)
            {
              sub_1CCA58DB4(v125, v126, v128);
              swift_bridgeObjectRelease();
              goto LABEL_121;
            }
          }
        }
        swift_bridgeObjectRelease();
        v33 = (uint64_t *)MEMORY[0x1E0DEE9D8];
LABEL_121:
        v216 = sub_1CCA7AA5C((uint64_t)v33);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v373 = v216;
        if (qword_1ED8AA630 != -1)
          swift_once();
        v217 = sub_1CCB637FC();
        sub_1CCA16C20(v217, (uint64_t)qword_1ED8AD7F8);
        v171 = sub_1CCB637D8();
        v208 = sub_1CCB63D48();
        if (os_log_type_enabled(v171, v208))
        {
          v209 = (uint8_t *)swift_slowAlloc();
          v210 = swift_slowAlloc();
          v372[0] = v210;
          *(_DWORD *)v209 = 136315138;
          swift_beginAccess();
          swift_bridgeObjectRetain();
          v218 = sub_1CCB63C4C();
          v220 = v219;
          swift_bridgeObjectRelease();
          v221 = v218;
          v40 = v353;
          v369 = sub_1CCA0CB60(v221, v220, v372);
          sub_1CCB63E44();
          swift_bridgeObjectRelease();
          v215 = "FMIPItemGroup: multipart status: %s";
LABEL_125:
          _os_log_impl(&dword_1CC9BF000, v171, v208, v215, v209, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1D17B214C](v210, -1, -1);
          v178 = v209;
LABEL_126:
          MEMORY[0x1D17B214C](v178, -1, -1);
        }
      }
      else
      {
        v332 = v119;
        v179 = v347;
        v180 = *(_QWORD *)(v347 + 16);
        v181 = MEMORY[0x1E0DEE9D8];
        if (v180)
        {
          v372[0] = MEMORY[0x1E0DEE9D8];
          swift_bridgeObjectRetain();
          sub_1CCA6397C(0, v180, 0);
          v182 = 0;
          v183 = *(unsigned __int8 *)(v360 + 80);
          v184 = (v183 + 32) & ~v183;
          v357 = (char *)(v179 + v184);
          v185 = *(NSObject **)(v360 + 72);
          v186 = *(void (**)(char *, char *, uint64_t))(v360 + 16);
          v359 = (char *)v184;
          v364 = (uint64_t)v185;
          v356 = ((char *)v185 + v184);
          v354 = v183 | 7;
          v352 = xmmword_1CCB677E0;
          v187 = v367;
          v188 = v349;
          v361 = v180;
          do
          {
            v189 = v358;
            v186(v358, &v357[v364 * v182], v187);
            sub_1CCA14E90(&qword_1EF9E2AD0);
            v190 = swift_allocObject();
            *(_OWORD *)(v190 + 16) = v352;
            v191 = &v359[v190];
            v186(&v359[v190], v189, v187);
            sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
            v192 = sub_1CCB63C58();
            v186(v188, v191, v187);
            v193 = v360;
            v362 = *(char **)(v360 + 56);
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))v362)(v188, 0, 1, v187);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v188, 1, v187) != 1)
            {
              v350 = v190;
              (*(void (**)(unint64_t, char *, uint64_t))(v193 + 32))(v363, v188, v187);
              swift_bridgeObjectRetain();
              v194 = sub_1CCB63934();
              v195 = -1 << *(_BYTE *)(v192 + 32);
              v196 = v194 & ~v195;
              if (((*(_QWORD *)(v192 + 56 + ((v196 >> 3) & 0xFFFFFFFFFFFFF8)) >> v196) & 1) != 0)
              {
                v197 = ~v195;
                while (1)
                {
                  v198 = v365;
                  v199 = v367;
                  v186(v365, (char *)(*(_QWORD *)(v192 + 48) + v196 * v364), v367);
                  sub_1CC9CAA38(&qword_1EF9E1E28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
                  v200 = sub_1CCB63958();
                  v201 = v198;
                  v86 = (void (*)(char *, uint64_t))v366;
                  ((void (*)(char *, uint64_t))v366)(v201, v199);
                  if ((v200 & 1) != 0)
                    break;
                  v196 = (v196 + 1) & v197;
                  if (((*(_QWORD *)(v192 + 56 + ((v196 >> 3) & 0xFFFFFFFFFFFFF8)) >> v196) & 1) == 0)
                    goto LABEL_107;
                }
                swift_bridgeObjectRelease();
                v187 = v367;
                v203 = v363;
              }
              else
              {
LABEL_107:
                swift_bridgeObjectRelease();
                LODWORD(v348) = swift_isUniquelyReferenced_nonNull_native();
                v202 = (uint64_t)v365;
                v203 = v363;
                v187 = v367;
                v186(v365, (char *)v363, v367);
                v369 = v192;
                sub_1CCA75CEC(v202, v196, v348);
                v192 = v369;
                swift_bridgeObjectRelease();
              }
              v86((char *)v203, v187);
              v188 = v349;
              ((void (*)(char *, uint64_t, uint64_t, uint64_t))v362)(v349, 1, 1, v187);
            }
            swift_bridgeObjectRelease();
            v86(v358, v187);
            v181 = v372[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1CCA6397C(0, *(_QWORD *)(v181 + 16) + 1, 1);
              v181 = v372[0];
            }
            v205 = *(_QWORD *)(v181 + 16);
            v204 = *(_QWORD *)(v181 + 24);
            if (v205 >= v204 >> 1)
            {
              sub_1CCA6397C(v204 > 1, v205 + 1, 1);
              v181 = v372[0];
            }
            ++v182;
            *(_QWORD *)(v181 + 16) = v205 + 1;
            *(_QWORD *)(v181 + 8 * v205 + 32) = v192;
            v187 = v367;
          }
          while (v182 != v361);
          swift_bridgeObjectRelease();
          v40 = v353;
        }
        v206 = sub_1CCA7AA5C(v181);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v373 = v206;
        if (qword_1ED8AA630 != -1)
          swift_once();
        v207 = sub_1CCB637FC();
        sub_1CCA16C20(v207, (uint64_t)qword_1ED8AD7F8);
        v171 = sub_1CCB637D8();
        v208 = sub_1CCB63D48();
        if (os_log_type_enabled(v171, v208))
        {
          v209 = (uint8_t *)swift_slowAlloc();
          v210 = swift_slowAlloc();
          v372[0] = v210;
          *(_DWORD *)v209 = 136315138;
          swift_beginAccess();
          swift_bridgeObjectRetain();
          v211 = sub_1CCB63C4C();
          v213 = v212;
          swift_bridgeObjectRelease();
          v214 = v211;
          v40 = v353;
          v369 = sub_1CCA0CB60(v214, v213, v372);
          sub_1CCB63E44();
          swift_bridgeObjectRelease();
          v215 = "FMIPItemGroup: multipart status from SPD was empty. Showing all separated: %s";
          goto LABEL_125;
        }
      }
    }
    else
    {
      sub_1CCA14E90(&qword_1EF9E1420);
      v166 = swift_initStackObject();
      *(_OWORD *)(v166 + 16) = xmmword_1CCB677E0;
      v167 = swift_bridgeObjectRetain();
      v168 = sub_1CCA7A88C(v167);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v166 + 32) = v168;
      v169 = sub_1CCA7C7B0(v166);
      swift_setDeallocating();
      sub_1CCA14E90(&qword_1EF9E1428);
      swift_arrayDestroy();
      swift_bridgeObjectRelease();
      v373 = v169;
      if (qword_1ED8AA630 != -1)
        swift_once();
      v170 = sub_1CCB637FC();
      sub_1CCA16C20(v170, (uint64_t)qword_1ED8AD7F8);
      v171 = sub_1CCB637D8();
      v172 = sub_1CCB63D48();
      if (os_log_type_enabled(v171, v172))
      {
        v173 = (uint8_t *)swift_slowAlloc();
        v174 = swift_slowAlloc();
        v372[0] = v174;
        *(_DWORD *)v173 = 136315138;
        swift_beginAccess();
        sub_1CCA7CC20(&qword_1EF9E1E08, &qword_1EF9E1428);
        swift_bridgeObjectRetain();
        v175 = sub_1CCB63C4C();
        v177 = v176;
        v40 = v353;
        swift_bridgeObjectRelease();
        v369 = sub_1CCA0CB60(v175, v177, v372);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v171, v172, "FMIPItemGroup: BA pairing is incomplete. Showing parts all together: %s", v173, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v174, -1, -1);
        v178 = v173;
        goto LABEL_126;
      }
    }

    v222 = v339;
    v223 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    v224 = objc_msgSend(v223, sel_isInternalBuild);

    if (!v224)
      goto LABEL_179;
    v225 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    v226 = (void *)sub_1CCB63964();
    v227 = objc_msgSend(v225, sel_BOOLForKey_, v226);

    if (!v227)
      goto LABEL_179;
    v228 = v355;
    v229 = *(NSObject **)(v355 + 16);
    v43 = v229 ? (((unint64_t)&v229[-1].isa + 7) >> 1) + 1 : 0;
    v372[0] = MEMORY[0x1E0DEE9D8];
    sub_1CCA639A8(0, v43, 0);
    v33 = (uint64_t *)v372[0];
    if (!v229)
      break;
    v45 = 0;
    v36 = 0;
    v362 = (char *)((*(unsigned __int8 *)(v360 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v360 + 80));
    v361 = (unint64_t)&v362[v228];
    v363 = ((unint64_t)&v229->isa + 1) & 0xFFFFFFFFFFFFFFFELL;
    v364 = (uint64_t)v229;
    v40 = 2;
    while (1)
    {
      v230 = (uint64_t)v229 >= v40 ? v40 : v229;
      if (v363 == v36)
        break;
      if ((uint64_t)v229 >= (uint64_t)(v36 + 2))
        v231 = v36 + 2;
      else
        v231 = (unint64_t)v229;
      if (v231 < v36)
        goto LABEL_224;
      v232 = *(_QWORD *)(v228 + 16);
      if (v232 < v36 || v232 < v231)
        goto LABEL_225;
      sub_1CCB642B8();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      v234 = swift_dynamicCastClass();
      if (!v234)
      {
        swift_bridgeObjectRelease();
        v234 = MEMORY[0x1E0DEE9D8];
      }
      v235 = *(NSObject **)(v234 + 16);
      swift_release();
      if (((char *)v230 + v45) == v235)
      {
        v236 = swift_dynamicCastClass();
        if (!v236)
        {
          swift_bridgeObjectRelease();
          v236 = MEMORY[0x1E0DEE9D8];
        }
      }
      else
      {
        v239 = v355;
        swift_bridgeObjectRelease();
        v236 = sub_1CCAA6DF8(v239, v361, v36, (2 * v231) | 1);
      }
      swift_bridgeObjectRelease();
      v372[0] = (uint64_t)v33;
      v238 = v33[2];
      v237 = v33[3];
      if (v238 >= v237 >> 1)
      {
        sub_1CCA639A8(v237 > 1, v238 + 1, 1);
        v33 = (uint64_t *)v372[0];
      }
      v33[2] = v238 + 1;
      v33[v238 + 4] = v236;
      v40 += 2;
      v45 -= 2;
      v36 += 2;
      --v43;
      v228 = v355;
      v229 = v364;
      if (!v43)
      {
        if (v36 >= v364)
        {
          v40 = v353;
          goto LABEL_178;
        }
        v240 = v36 + 2;
        v363 = (unint64_t)&v362[v355];
        v45 = -(uint64_t)v36;
        while (1)
        {
          v241 = (uint64_t)v229 >= v240 ? v240 : (uint64_t)v229;
          if (v241 < v240 - 2)
            goto LABEL_229;
          v242 = *(_QWORD *)(v228 + 16);
          v243 = v242 < v240 - 2 || (uint64_t)v242 < v241;
          if (v243)
            goto LABEL_230;
          sub_1CCB642B8();
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain_n();
          v244 = swift_dynamicCastClass();
          if (!v244)
          {
            swift_bridgeObjectRelease();
            v244 = MEMORY[0x1E0DEE9D8];
          }
          v245 = *(_QWORD **)(v244 + 16);
          swift_release();
          if ((_QWORD *)(v241 + v45) == v245)
          {
            v43 = v355;
            v246 = swift_dynamicCastClass();
            v40 = v353;
            if (!v246)
            {
              swift_bridgeObjectRelease();
              v246 = MEMORY[0x1E0DEE9D8];
            }
          }
          else
          {
            v43 = v355;
            swift_bridgeObjectRelease();
            v246 = sub_1CCAA6DF8(v43, v363, v240 - 2, (2 * v241) | 1);
            v40 = v353;
          }
          swift_bridgeObjectRelease();
          v372[0] = (uint64_t)v33;
          v248 = v33[2];
          v247 = v33[3];
          v36 = v248 + 1;
          if (v248 >= v247 >> 1)
          {
            sub_1CCA639A8(v247 > 1, v248 + 1, 1);
            v33 = (uint64_t *)v372[0];
          }
          v33[2] = v36;
          v33[v248 + 4] = v246;
          v45 -= 2;
          v229 = v364;
          v243 = v240 < v364;
          v240 += 2;
          v228 = v355;
          if (!v243)
            goto LABEL_178;
        }
      }
    }
LABEL_223:
    __break(1u);
LABEL_224:
    __break(1u);
LABEL_225:
    __break(1u);
LABEL_226:
    __break(1u);
LABEL_227:
    __break(1u);
LABEL_228:
    __break(1u);
LABEL_229:
    __break(1u);
LABEL_230:
    __break(1u);
LABEL_231:
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1CCAC9BB4(0, *(_QWORD *)(v45 + 16) + 1, 1, (_QWORD *)v45);
    v45 = isUniquelyReferenced_nonNull_native;
  }
LABEL_178:
  v249 = sub_1CCA6C09C((uint64_t)v33);
  swift_release();
  v250 = sub_1CCA7AA5C(v249);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v373 = v250;
  swift_bridgeObjectRelease();
  v222 = v339;
LABEL_179:
  v251 = type metadata accessor for FMIPItemGroup();
  v252 = v351;
  *(_QWORD *)((char *)v351 + *(int *)(v251 + 52)) = v355;
  swift_beginAccess();
  v252[7] = v373;
  v253 = *(_QWORD *)(v222 + 16);
  if (v253)
  {
    v254 = 0;
    v255 = v337;
    v256 = v338;
    v257 = v343;
    do
    {
      v259 = *v255++;
      v258 = v259;
      if ((v259 & ~v254) == 0)
        v258 = 0;
      v254 |= v258;
      --v253;
    }
    while (v253);
  }
  else
  {
    v254 = 0;
    v256 = v338;
    v257 = v343;
  }
  *v351 = v254;
  swift_bridgeObjectRetain();
  v260 = objc_msgSend((id)v40, sel_lostModeInfo);
  if (v260)
  {
    v261 = v260;
    FMIPItemLostModeMetadata.init(lostModeInfo:)(v261, v256);
    v262 = type metadata accessor for FMIPItemLostModeMetadata();
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v262 - 8) + 56))(v256, 0, 1, v262);
    swift_bridgeObjectRelease();

  }
  else
  {
    v263 = type metadata accessor for FMIPItemLostModeMetadata();
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v263 - 8) + 56))(v256, 1, 1, v263);
    swift_bridgeObjectRelease();
  }
  sub_1CCA71974((uint64_t)v256, (uint64_t)v351 + *(int *)(v251 + 48));
  v264 = v257[2];
  if (v264)
  {
    v265 = 0;
    v266 = v257 + 4;
    v267 = (_QWORD *)&unk_1ED8AA000;
    do
    {
      v269 = *v266++;
      v268 = v269;
      if ((v269 & ~v265) == 0)
        v268 = 0;
      v265 |= v268;
      --v264;
    }
    while (v264);
  }
  else
  {
    v265 = 0;
    v267 = &unk_1ED8AA000;
  }
  swift_bridgeObjectRelease();
  v351[8] = v265;
  v270 = FMIPItemGroup.shouldDisplaySeparatedLocation.getter();
  if (v267[198] != -1)
    swift_once();
  v271 = sub_1CCB637FC();
  sub_1CCA16C20(v271, (uint64_t)qword_1ED8AD7F8);
  v272 = (id)v40;
  v273 = sub_1CCB637D8();
  v274 = sub_1CCB63D48();
  if (os_log_type_enabled(v273, (os_log_type_t)v274))
  {
    LODWORD(v361) = v270;
    v275 = swift_slowAlloc();
    v362 = (char *)swift_slowAlloc();
    v371 = v362;
    *(_DWORD *)v275 = 136317442;
    v276 = objc_msgSend(v272, sel_name);
    v277 = sub_1CCB63988();
    v279 = v278;

    v370 = sub_1CCA0CB60(v277, v279, (uint64_t *)&v371);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    *(_WORD *)(v275 + 12) = 2080;
    v280 = v335;
    v281 = objc_msgSend(v272, sel_taskInformation);
    v282 = sub_1CCB638E0();

    v283 = *(_QWORD *)(v282 + 16);
    v364 = (uint64_t)v273;
    LODWORD(v363) = v274;
    if (v283 && (v284 = sub_1CCAC8DD0((uint64_t)v280), (v285 & 1) != 0))
    {
      v286 = *(void **)(*(_QWORD *)(v282 + 56) + 8 * v284);
      v287 = v286;
    }
    else
    {
      v286 = 0;
    }

    swift_bridgeObjectRelease();
    v370 = (uint64_t)v286;
    sub_1CCA14E90(&qword_1EF9E1E68);
    v288 = sub_1CCB639AC();
    v370 = sub_1CCA0CB60(v288, v289, (uint64_t *)&v371);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    *(_WORD *)(v275 + 22) = 2080;
    v290 = objc_msgSend(v272, sel_name);
    v291 = sub_1CCB63988();
    v293 = v292;

    v370 = sub_1CCA0CB60(v291, v293, (uint64_t *)&v371);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    *(_WORD *)(v275 + 32) = 2080;
    v294 = (id)*MEMORY[0x1E0D89A50];
    v295 = objc_msgSend(v272, sel_taskInformation);
    v296 = sub_1CCB638E0();

    if (*(_QWORD *)(v296 + 16) && (v297 = sub_1CCAC8DD0((uint64_t)v294), (v298 & 1) != 0))
    {
      v299 = *(void **)(*(_QWORD *)(v296 + 56) + 8 * v297);
      v300 = v299;
    }
    else
    {
      v299 = 0;
    }

    swift_bridgeObjectRelease();
    v370 = (uint64_t)v299;
    v301 = sub_1CCB639AC();
    v370 = sub_1CCA0CB60(v301, v302, (uint64_t *)&v371);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    *(_WORD *)(v275 + 42) = 2080;
    v303 = objc_msgSend(v272, sel_name);
    v304 = sub_1CCB63988();
    v306 = v305;

    v370 = sub_1CCA0CB60(v304, v306, (uint64_t *)&v371);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    *(_WORD *)(v275 + 52) = 2080;
    v307 = v336;
    v308 = objc_msgSend(v272, sel_taskInformation);
    v309 = sub_1CCB638E0();

    if (*(_QWORD *)(v309 + 16) && (v310 = sub_1CCAC8DD0((uint64_t)v307), (v311 & 1) != 0))
    {
      v312 = *(void **)(*(_QWORD *)(v309 + 56) + 8 * v310);
      v313 = v312;
    }
    else
    {
      v312 = 0;
    }

    swift_bridgeObjectRelease();
    v370 = (uint64_t)v312;
    v314 = sub_1CCB639AC();
    v370 = sub_1CCA0CB60(v314, v315, (uint64_t *)&v371);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    *(_WORD *)(v275 + 62) = 1024;
    LODWORD(v370) = v361 & 1;
    sub_1CCB63E44();
    *(_WORD *)(v275 + 68) = 2080;
    v316 = objc_msgSend(v272, sel_isConnected);
    v317 = v316 == 0;
    if (v316)
      v318 = 0;
    else
      v318 = 7630702;
    if (v317)
      v319 = 0xE300000000000000;
    else
      v319 = 0xE000000000000000;
    v370 = sub_1CCA0CB60(v318, v319, (uint64_t *)&v371);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    *(_WORD *)(v275 + 78) = 2080;
    v320 = objc_msgSend(v272, sel_name);
    v321 = sub_1CCB63988();
    v323 = v322;

    v370 = sub_1CCA0CB60(v321, v323, (uint64_t *)&v371);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    *(_WORD *)(v275 + 88) = 2080;
    v324 = objc_msgSend(v272, sel_identifier);
    v325 = v365;
    sub_1CCB635EC();

    v326 = sub_1CCB635C8();
    v328 = v327;
    ((void (*)(char *, uint64_t))v366)(v325, v367);
    v370 = sub_1CCA0CB60(v326, v328, (uint64_t *)&v371);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    v329 = (os_log_t)v364;
    _os_log_impl(&dword_1CC9BF000, (os_log_t)v364, (os_log_type_t)v363, "FMIPItemGroup: %s taskInfo -> play sound %s\nFMIPItemGroup: %s taskInfo -> stop sound %s\nFMIPItemGroup: %s taskInfo -> notify when found active %s\nshowSeparated: %{BOOL}d,\n☎︎ FMIPItemGroup: beacon is %s connected, '%s': %s", (uint8_t *)v275, 0x62u);
    v330 = v362;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v330, -1, -1);
    MEMORY[0x1D17B214C](v275, -1, -1);

  }
  else
  {

  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA70020@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t result;

  v6 = *a2;
  v7 = a1;
  v8 = objc_msgSend(a3, sel_taskInformation);
  type metadata accessor for SPBeaconTaskName(0);
  sub_1CC9C30A8(0, &qword_1EF9E1E58);
  sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D8, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_1CCB65E60);
  v9 = sub_1CCB638E0();

  if (*(_QWORD *)(v9 + 16))
  {
    sub_1CCAC8DD0((uint64_t)v7);
    if ((v10 & 1) != 0)
      v11 = v6;
    else
      v11 = 0;
    v12 = v10 ^ 1;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }

  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v11;
  *(_BYTE *)(a4 + 8) = v12 & 1;
  return result;
}

void sub_1CCA70124(void *a1@<X0>, id a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  id v14;
  id v15;
  char v16;

  v8 = *a3;
  v9 = a1;
  v10 = objc_msgSend(a4, sel_taskInformation);
  type metadata accessor for SPBeaconTaskName(0);
  sub_1CC9C30A8(0, &qword_1EF9E1E58);
  sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D8, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_1CCB65E60);
  v11 = sub_1CCB638E0();

  if (!*(_QWORD *)(v11 + 16) || (v12 = sub_1CCAC8DD0((uint64_t)v9), (v13 & 1) == 0))
  {

    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v14 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v12);

  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v14, sel_state);

  if (v15 != a2)
  {
LABEL_6:
    v8 = 0;
    v16 = 1;
    goto LABEL_7;
  }
  v16 = 0;
LABEL_7:
  *(_QWORD *)a5 = v8;
  *(_BYTE *)(a5 + 8) = v16;
}

uint64_t sub_1CCA70260(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  int64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;

  v45 = a2;
  v50 = sub_1CCB63604();
  v3 = *(_QWORD *)(v50 - 8);
  v4 = MEMORY[0x1E0C80A78](v50);
  v49 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v48 = (char *)&v41 - v6;
  v7 = type metadata accessor for FMIPItemPairingState();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v41 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v41 - v15;
  v17 = *(_QWORD *)(a1 + 64);
  v46 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v47 = (unint64_t)(v18 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v22 = 0;
  v23 = a1;
  v43 = v8;
  v44 = a1;
  v42 = v16;
  while (1)
  {
    if (v20)
    {
      v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v26 >= v47)
      return swift_release();
    v27 = *(_QWORD *)(v46 + 8 * v26);
    ++v22;
    if (!v27)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v47)
        return swift_release();
      v27 = *(_QWORD *)(v46 + 8 * v22);
      if (!v27)
      {
        v22 = v26 + 2;
        if (v26 + 2 >= v47)
          return swift_release();
        v27 = *(_QWORD *)(v46 + 8 * v22);
        if (!v27)
        {
          v22 = v26 + 3;
          if (v26 + 3 >= v47)
            return swift_release();
          v27 = *(_QWORD *)(v46 + 8 * v22);
          if (!v27)
            break;
        }
      }
    }
LABEL_23:
    v20 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_24:
    sub_1CCA0BEEC(*(_QWORD *)(v23 + 56) + *(_QWORD *)(v8 + 72) * v25, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemPairingState);
    sub_1CC9FED60((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemPairingState);
    sub_1CCA0BEEC((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemPairingState);
    v29 = sub_1CCA14E90(&qword_1EF9E1CA0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v11, 3, v29))
    {
      sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemPairingState);
    }
    else
    {
      v30 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      v31 = v48;
      v32 = v50;
      v30(v48, v11, v50);
      v33 = v3;
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v49, v31, v32);
      v34 = v45;
      v35 = *v45;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v34 = v35;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v35 = sub_1CCAC9CC8(0, *(_QWORD *)(v35 + 16) + 1, 1, v35);
        *v45 = v35;
      }
      v38 = *(_QWORD *)(v35 + 16);
      v37 = *(_QWORD *)(v35 + 24);
      if (v38 >= v37 >> 1)
      {
        v35 = sub_1CCAC9CC8(v37 > 1, v38 + 1, 1, v35);
        *v45 = v35;
      }
      *(_QWORD *)(v35 + 16) = v38 + 1;
      v3 = v33;
      v39 = v35
          + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))
          + *(_QWORD *)(v33 + 72) * v38;
      v40 = v50;
      v30((char *)v39, v49, v50);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v48, v40);
      v8 = v43;
      v23 = v44;
      v16 = v42;
    }
    result = sub_1CCA0BF30((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemPairingState);
  }
  v28 = v26 + 4;
  if (v28 >= v47)
    return swift_release();
  v27 = *(_QWORD *)(v46 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_23;
  }
  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v22 >= v47)
      return swift_release();
    v27 = *(_QWORD *)(v46 + 8 * v22);
    ++v28;
    if (v27)
      goto LABEL_23;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t FMIPItemGroup.init(itemGroup:items:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[16];

  v6 = sub_1CCA14E90(&qword_1ED8A8CD0);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for FMIPItemGroup();
  v10 = *(uint64_t *)((char *)a1 + *(int *)(v9 + 52));
  v11 = a1[7];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v12 = sub_1CCA7B2BC(a2, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v13 = sub_1CCA7B100(v11, v12);
  swift_bridgeObjectRelease();
  v14 = sub_1CCA7AB3C(v13);
  swift_bridgeObjectRelease();
  v16 = a1[2];
  v15 = a1[3];
  v17 = *a1;
  a3[1] = a1[1];
  a3[2] = v16;
  *(_QWORD *)((char *)a3 + *(int *)(v9 + 52)) = v10;
  v18 = a1[4];
  a3[3] = v15;
  a3[4] = v18;
  a3[5] = v12;
  a3[6] = v14;
  v19 = a1[9];
  a3[8] = a1[8];
  a3[9] = v19;
  a3[7] = v11;
  *a3 = v17;
  sub_1CC9EAB74((uint64_t)a1 + *(int *)(v9 + 48), (uint64_t)v8, &qword_1ED8A8CD0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCA0BF30((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  return sub_1CCA71974((uint64_t)v8, (uint64_t)a3 + *(int *)(v9 + 48));
}

uint64_t FMIPItemGroup.init(itemGroup:connected:)@<X0>(_QWORD *a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_1CCA14E90(&qword_1ED8A8CD0);
  MEMORY[0x1E0C80A78](v6);
  v19 = (uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[8];
  v9 = a1[1];
  v10 = a1[2];
  if (!(a2 & 1 | ((v8 & 0x40) == 0)))
    v8 &= ~0x40uLL;
  v18 = v8;
  a3[1] = v9;
  a3[2] = v10;
  v11 = type metadata accessor for FMIPItemGroup();
  *(_QWORD *)((char *)a3 + *(int *)(v11 + 52)) = *(_QWORD *)((char *)a1 + *(int *)(v11 + 52));
  v12 = a1[6];
  v13 = a1[7];
  v14 = a1[4];
  a3[3] = a1[3];
  a3[4] = v14;
  a3[5] = a1[5];
  a3[6] = v12;
  v15 = a1[9];
  a3[7] = v13;
  v16 = v19;
  a3[8] = v18;
  a3[9] = v15;
  *a3 = *a1;
  sub_1CC9EAB74((uint64_t)a1 + *(int *)(v11 + 48), v16, &qword_1ED8A8CD0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCA0BF30((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  return sub_1CCA71974(v19, (uint64_t)a3 + *(int *)(v11 + 48));
}

uint64_t FMIPItemGroup.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;

  v3 = v1;
  v5 = sub_1CCA14E90(&qword_1EF9E1DB0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CC9F08A4();
  sub_1CCB643CC();
  v11 = *v3;
  HIBYTE(v10) = 0;
  sub_1CCA7B6F8();
  sub_1CCB64210();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    sub_1CCB641E0();
    LOBYTE(v11) = 7;
    sub_1CCB641E0();
    v11 = v3[5];
    HIBYTE(v10) = 5;
    sub_1CCA14E90((uint64_t *)&unk_1EF9E2A60);
    sub_1CCA7B73C();
    sub_1CCB64210();
    v11 = v3[6];
    HIBYTE(v10) = 6;
    sub_1CCA14E90(&qword_1EF9E1D90);
    sub_1CCA1552C(&qword_1EF9E1DC8, &qword_1EF9E1D90, (uint64_t (*)(void))sub_1CCA7B7B8, MEMORY[0x1E0DEB3B8]);
    sub_1CCB64210();
    v11 = *(uint64_t *)((char *)v3 + *(int *)(type metadata accessor for FMIPItemGroup() + 52));
    HIBYTE(v10) = 2;
    sub_1CCA14E90(&qword_1EF9E1438);
    sub_1CCA7B834();
    sub_1CCB64210();
    v11 = v3[7];
    HIBYTE(v10) = 3;
    sub_1CCA14E90(&qword_1EF9E1D58);
    sub_1CCA1552C(&qword_1EF9E1DD8, &qword_1EF9E1D58, (uint64_t (*)(void))sub_1CCA7B8B0, MEMORY[0x1E0DEB3B8]);
    sub_1CCB64210();
    v11 = v3[9];
    HIBYTE(v10) = 4;
    sub_1CCA14E90(&qword_1EF9E1D70);
    sub_1CCA7B92C();
    sub_1CCB64210();
    LOBYTE(v11) = 8;
    sub_1CCB64204();
    LOBYTE(v11) = 9;
    sub_1CCA14E90(&qword_1ED8A8CD0);
    sub_1CCA7B9B0();
    sub_1CCB64210();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t FMIPItemGroup.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for FMIPItem();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v19 = v0;
    v22 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1CCA6388C(0, v7, 0);
    v9 = *(unsigned __int8 *)(v3 + 80);
    v18 = v6;
    v10 = v6 + ((v9 + 32) & ~v9);
    v11 = *(_QWORD *)(v3 + 72);
    v8 = v22;
    v20 = v11;
    do
    {
      sub_1CCA0BEEC(v10, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v12 = *((_QWORD *)v5 + 44);
      v13 = *((_QWORD *)v5 + 45);
      swift_bridgeObjectRetain();
      sub_1CCA0BF30((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1CCA6388C(0, *(_QWORD *)(v8 + 16) + 1, 1);
        v11 = v20;
        v8 = v22;
      }
      v15 = *(_QWORD *)(v8 + 16);
      v14 = *(_QWORD *)(v8 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1CCA6388C(v14 > 1, v15 + 1, 1);
        v11 = v20;
        v8 = v22;
      }
      *(_QWORD *)(v8 + 16) = v15 + 1;
      v16 = v8 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v12;
      *(_QWORD *)(v16 + 40) = v13;
      v10 += v11;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    v1 = v19;
  }
  v22 = 0;
  v23 = 0xE000000000000000;
  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  MEMORY[0x1D17B10B4](v8, MEMORY[0x1E0DEA968]);
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCA14E90(&qword_1EF9E1428);
  sub_1CCA7CC20(&qword_1EF9E1E08, &qword_1EF9E1428);
  sub_1CCB63C4C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  type metadata accessor for FMIPItemPairingState();
  swift_bridgeObjectRetain();
  sub_1CCB638EC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v21 = *(_QWORD *)(v1 + 64);
  sub_1CCB64060();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63C4C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return v22;
}

uint64_t sub_1CCA71130(_QWORD *a1)
{
  return FMIPItemGroup.encode(to:)(a1);
}

uint64_t sub_1CCA71148(uint64_t (*a1)(char *), char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t (*v28)(char *);
  uint64_t v29;

  v28 = a1;
  v6 = type metadata accessor for FMIPItemPairingState();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v25 - v11;
  v13 = *(_QWORD *)(a3 + 64);
  v26 = a3 + 64;
  v14 = 1 << *(_BYTE *)(a3 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v27 = (unint64_t)(v14 + 63) >> 6;
  v29 = a3;
  result = swift_bridgeObjectRetain();
  v18 = 0;
  while (v16)
  {
    v19 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v20 = v19 | (v18 << 6);
LABEL_19:
    sub_1CCA0BEEC(*(_QWORD *)(v29 + 56) + *(_QWORD *)(v7 + 72) * v20, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemPairingState);
    sub_1CC9FED60((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemPairingState);
    v24 = v28(v10);
    result = sub_1CCA0BF30((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemPairingState);
    if (v3)
      goto LABEL_28;
    if ((v24 & 1) != 0)
    {
      a2 = 1;
LABEL_28:
      swift_release();
      return a2 & 1;
    }
  }
  if (__OFADD__(v18++, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v18 >= v27)
    goto LABEL_27;
  v22 = *(_QWORD *)(v26 + 8 * v18);
  if (v22)
  {
LABEL_18:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
    goto LABEL_19;
  }
  v23 = v18 + 1;
  if (v18 + 1 >= v27)
    goto LABEL_27;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 2;
  if (v18 + 2 >= v27)
    goto LABEL_27;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 3;
  if (v18 + 3 >= v27)
    goto LABEL_27;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 4;
  if (v18 + 4 >= v27)
  {
LABEL_27:
    a2 = 0;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
LABEL_17:
    v18 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v27)
      goto LABEL_27;
    v22 = *(_QWORD *)(v26 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_18;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1CCA713B0(uint64_t (*a1)(char *), char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t (*v28)(char *);
  uint64_t v29;

  v28 = a1;
  v6 = type metadata accessor for FMIPItem();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v25 - v11;
  v13 = *(_QWORD *)(a3 + 56);
  v26 = a3 + 56;
  v14 = 1 << *(_BYTE *)(a3 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v27 = (unint64_t)(v14 + 63) >> 6;
  v29 = a3;
  result = swift_bridgeObjectRetain();
  v18 = 0;
  while (v16)
  {
    v19 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v20 = v19 | (v18 << 6);
LABEL_19:
    sub_1CCA0BEEC(*(_QWORD *)(v29 + 48) + *(_QWORD *)(v7 + 72) * v20, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CC9FED60((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v24 = v28(v10);
    result = sub_1CCA0BF30((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if (v3)
      goto LABEL_28;
    if ((v24 & 1) != 0)
    {
      a2 = 1;
LABEL_28:
      swift_release();
      return a2 & 1;
    }
  }
  if (__OFADD__(v18++, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v18 >= v27)
    goto LABEL_27;
  v22 = *(_QWORD *)(v26 + 8 * v18);
  if (v22)
  {
LABEL_18:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
    goto LABEL_19;
  }
  v23 = v18 + 1;
  if (v18 + 1 >= v27)
    goto LABEL_27;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 2;
  if (v18 + 2 >= v27)
    goto LABEL_27;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 3;
  if (v18 + 3 >= v27)
    goto LABEL_27;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 4;
  if (v18 + 4 >= v27)
  {
LABEL_27:
    a2 = 0;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
LABEL_17:
    v18 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v27)
      goto LABEL_27;
    v22 = *(_QWORD *)(v26 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_18;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1CCA71618(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_1CCA7163C@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1CCA71664(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  a4(&v7);
  v5 = *a1 + 8;
  result = sub_1CCB63E44();
  *a1 = v5;
  return result;
}

unint64_t sub_1CCA716BC()
{
  unint64_t result;

  result = qword_1EF9E1D50;
  if (!qword_1EF9E1D50)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMItemCapabilities, &type metadata for FMItemCapabilities);
    atomic_store(result, (unint64_t *)&qword_1EF9E1D50);
  }
  return result;
}

unint64_t sub_1CCA71700()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E2960;
  if (!qword_1EF9E2960)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E1438);
    v2 = sub_1CC9CAA38(&qword_1EF9E1CA8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF40], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E2960);
  }
  return result;
}

unint64_t sub_1CCA7177C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E1D68;
  if (!qword_1EF9E1D68)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E1428);
    v2 = sub_1CC9CAA38(&qword_1EF9E1CA8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEB3D8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E1D68);
  }
  return result;
}

unint64_t sub_1CCA717F8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF9E1D78;
  if (!qword_1EF9E1D78)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E1D70);
    v2 = sub_1CC9CAA38(&qword_1EF9E1D80, (uint64_t (*)(uint64_t))type metadata accessor for FMIPItemPairingState, (uint64_t)&protocol conformance descriptor for FMIPItemPairingState);
    v3[0] = MEMORY[0x1E0DEA9A0];
    v3[1] = v2;
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEA0D8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF9E1D78);
  }
  return result;
}

unint64_t sub_1CCA7187C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E2B10;
  if (!qword_1EF9E2B10)
  {
    v1 = sub_1CCA19B38((uint64_t *)&unk_1EF9E2A60);
    v2 = sub_1CC9CAA38(&qword_1EF9E1D88, (uint64_t (*)(uint64_t))type metadata accessor for FMIPItem, (uint64_t)&protocol conformance descriptor for FMIPItem);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF40], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E2B10);
  }
  return result;
}

unint64_t sub_1CCA718F8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E1DA0;
  if (!qword_1EF9E1DA0)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E1418);
    v2 = sub_1CC9CAA38(&qword_1EF9E1D88, (uint64_t (*)(uint64_t))type metadata accessor for FMIPItem, (uint64_t)&protocol conformance descriptor for FMIPItem);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEB3D8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E1DA0);
  }
  return result;
}

uint64_t sub_1CCA71974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A8CD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCA719BC(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  BOOL v20;
  char *v21;
  BOOL v22;
  unint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36[10];

  v3 = v2;
  v6 = (int *)type metadata accessor for FMIPBeaconShare(0);
  v29 = *((_QWORD *)v6 - 1);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v26 - v10;
  v12 = *v2;
  sub_1CCB6433C();
  sub_1CCB63604();
  sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  sub_1CCB63940();
  v34 = a2 + v6[5];
  sub_1CCB63940();
  v33 = (_QWORD *)(a2 + v6[6]);
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  v32 = (_QWORD *)(a2 + v6[7]);
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  v31 = v6[8];
  v35 = *(_QWORD *)(a2 + v31);
  FMIPBeaconShareState.hash(into:)((uint64_t)v36);
  v13 = a2 + v6[9];
  sub_1CCB635B0();
  sub_1CC9CAA38(&qword_1EF9DF088, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  v30 = v13;
  sub_1CCB63940();
  v14 = sub_1CCB64384();
  v15 = -1 << *(_BYTE *)(v12 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v12 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v26 = v11;
    v27 = v3;
    v28 = a1;
    v17 = ~v15;
    v18 = *(_QWORD *)(v29 + 72);
    do
    {
      sub_1CCA0BEEC(*(_QWORD *)(v12 + 48) + v18 * v16, (uint64_t)v9, type metadata accessor for FMIPBeaconShare);
      if ((sub_1CCB635E0() & 1) != 0 && (sub_1CCB635E0() & 1) != 0)
      {
        v19 = &v9[v6[6]];
        v20 = *(_QWORD *)v19 == *v33 && *((_QWORD *)v19 + 1) == v33[1];
        if (v20 || (sub_1CCB642A0() & 1) != 0)
        {
          v21 = &v9[v6[7]];
          v22 = *(_QWORD *)v21 == *v32 && *((_QWORD *)v21 + 1) == v32[1];
          if (v22 || (sub_1CCB642A0() & 1) != 0)
          {
            v23 = *(_QWORD *)&v9[v6[8]];
            v35 = *(_QWORD *)(a2 + v31);
            v36[0] = v23;
            if ((static FMIPBeaconShareState.== infix(_:_:)(v36, &v35) & 1) != 0 && (sub_1CCB63574() & 1) != 0)
            {
              sub_1CCA0BF30((uint64_t)v9, type metadata accessor for FMIPBeaconShare);
              swift_bridgeObjectRelease();
              sub_1CCA0BF30(a2, type metadata accessor for FMIPBeaconShare);
              sub_1CCA0BEEC(*(_QWORD *)(*v27 + 48) + v18 * v16, v28, type metadata accessor for FMIPBeaconShare);
              return 0;
            }
          }
        }
      }
      sub_1CCA0BF30((uint64_t)v9, type metadata accessor for FMIPBeaconShare);
      v16 = (v16 + 1) & v17;
    }
    while (((*(_QWORD *)(v12 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
    swift_bridgeObjectRelease();
    v3 = v27;
    a1 = v28;
    v11 = v26;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1CCA0BEEC(a2, (uint64_t)v11, type metadata accessor for FMIPBeaconShare);
  v36[0] = *v3;
  *v3 = 0x8000000000000000;
  sub_1CCA75480((uint64_t)v11, v16, isUniquelyReferenced_nonNull_native);
  *v3 = v36[0];
  swift_bridgeObjectRelease();
  sub_1CC9FED60(a2, a1, type metadata accessor for FMIPBeaconShare);
  return 1;
}

uint64_t sub_1CCA71DA8(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = sub_1CCB63F04();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_1CC9C30A8(0, &qword_1EF9DF590);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v28;
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_1CCB63EF8();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v21 = sub_1CCA73058(v7, result + 1);
    v29 = v21;
    v22 = *(_QWORD *)(v21 + 16);
    if (*(_QWORD *)(v21 + 24) <= v22)
    {
      v26 = v22 + 1;
      v27 = v8;
      sub_1CCA74E10(v26, &qword_1EF9E1ED0);
      v23 = v29;
    }
    else
    {
      v23 = v21;
      v24 = v8;
    }
    sub_1CCA75400((uint64_t)v8, v23);
    *v3 = v23;
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = sub_1CCB63DE4();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      sub_1CC9C30A8(0, &qword_1EF9DF590);
      v14 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
      v15 = sub_1CCB63DF0();

      if ((v15 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v19 = *(void **)(*(_QWORD *)(*v2 + 48) + 8 * v13);
        *a1 = v19;
        v20 = v19;
        return 0;
      }
      v16 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
        v18 = sub_1CCB63DF0();

        if ((v18 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *v2;
    *v2 = 0x8000000000000000;
    v8 = a2;
    sub_1CCA7581C((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *v2 = v30;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

void sub_1CCA7204C(uint64_t a1, char a2)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCA720B0()
{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t *v5;
  _BYTE *v6;
  uint64_t v7;

  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  v2 = sub_1CCB64384() & ~(-1 << *(_BYTE *)(v1 + 32));
  if (((*(_QWORD *)(v1 + 56 + ((v2 >> 3) & 0xFFFFFFFFFFFFF8)) >> v2) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v5;
  *v5 = 0x8000000000000000;
  sub_1CCA759AC(v0, v2, isUniquelyReferenced_nonNull_native);
  *v5 = v7;
  swift_bridgeObjectRelease();
  result = 1;
  *v6 = (_BYTE)v0;
  return result;
}

uint64_t sub_1CCA72348(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_1CCB63604();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_1CC9CAA38(&qword_1ED8A7140, v11, MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = sub_1CCB63934();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      sub_1CC9CAA38(&qword_1EF9E1E28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v21 = sub_1CCB63958();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    sub_1CCA75CEC((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_1CCA725A4(uint64_t *a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t (*a4)(uint64_t, uint64_t), uint64_t *a5, uint64_t *a6)
{
  uint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v25[9];

  v10 = *v6;
  sub_1CCB6433C();
  swift_bridgeObjectRetain();
  a3((char *)v25, a2);
  v11 = sub_1CCB64384();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = swift_bridgeObjectRetain();
    v15 = a4(v14, a2);
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *a1 = *(_QWORD *)(*(_QWORD *)(*v6 + 48) + 8 * v13);
      swift_bridgeObjectRetain();
      return 0;
    }
    v16 = ~v12;
    while (1)
    {
      v13 = (v13 + 1) & v16;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        break;
      v17 = swift_bridgeObjectRetain();
      v18 = a4(v17, a2);
      swift_bridgeObjectRelease();
      if ((v18 & 1) != 0)
        goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v25[0] = *v6;
  *v6 = 0x8000000000000000;
  v21 = swift_bridgeObjectRetain();
  sub_1CCA75EF0(v21, v13, isUniquelyReferenced_nonNull_native, a5, a3, a4, a6);
  *v6 = v25[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_1CCA72754(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = type metadata accessor for FMIPItem();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_1CCB6433C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  v11 = sub_1CCB64384();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v20 = v2;
    v21 = a1;
    v14 = ~v12;
    v15 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_1CCA0BEEC(*(_QWORD *)(v10 + 48) + v15 * v13, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v16 = _s8FMIPCore8FMIPItemV2eeoiySbAC_ACtFZ_0((uint64_t)v9, a2);
      sub_1CCA0BF30((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if ((v16 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v20;
        a1 = v21;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_1CCA0BF30(a2, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(*(_QWORD *)(*v20 + 48) + v15 * v13, v21, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CCA0BEEC(a2, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v22 = *v3;
    *v3 = 0x8000000000000000;
    sub_1CCA760A0((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v22;
    swift_bridgeObjectRelease();
    sub_1CC9FED60(a2, a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    return 1;
  }
}

uint64_t sub_1CCA72968(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_1CCB6433C();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  v8 = sub_1CCB64384();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1CCB642A0() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1CCB642A0() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1CCA762A8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1CCA72B14(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(_QWORD *), void (*a5)(char *, unint64_t, uint64_t), uint64_t (*a6)(char *, uint64_t))
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t (*v30)(char *, uint64_t);
  _QWORD v31[9];

  v29 = a5;
  v30 = a6;
  v9 = v6;
  v12 = a3(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v26 - v14;
  v16 = *v9;
  sub_1CCB6433C();
  swift_bridgeObjectRetain();
  v17 = a2;
  a4(v31);
  v18 = sub_1CCB64384();
  v19 = -1 << *(_BYTE *)(v16 + 32);
  v20 = v18 & ~v19;
  if (((*(_QWORD *)(v16 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
  {
    v27 = v9;
    v28 = a1;
    v21 = ~v19;
    v22 = *(_QWORD *)(v13 + 72);
    while (1)
    {
      sub_1CCA0BEEC(*(_QWORD *)(v16 + 48) + v22 * v20, (uint64_t)v15, a3);
      v23 = v30(v15, v17);
      sub_1CCA0BF30((uint64_t)v15, a3);
      if ((v23 & 1) != 0)
        break;
      v20 = (v20 + 1) & v21;
      if (((*(_QWORD *)(v16 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v9 = v27;
        a1 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_1CCA0BF30(v17, a3);
    sub_1CCA0BEEC(*(_QWORD *)(*v27 + 48) + v22 * v20, v28, a3);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CCA0BEEC(v17, (uint64_t)v15, a3);
    v31[0] = *v9;
    *v9 = 0x8000000000000000;
    v29(v15, v20, isUniquelyReferenced_nonNull_native);
    *v9 = v31[0];
    swift_bridgeObjectRelease();
    sub_1CC9FED60(v17, a1, a3);
    return 1;
  }
}

void sub_1CCA72D08(uint64_t a1, char a2)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCA72D78()
{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t *v5;
  _BYTE *v6;
  uint64_t v7;

  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  v2 = sub_1CCB64384() & ~(-1 << *(_BYTE *)(v1 + 32));
  if (((*(_QWORD *)(v1 + 56 + ((v2 >> 3) & 0xFFFFFFFFFFFFF8)) >> v2) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v5;
  *v5 = 0x8000000000000000;
  sub_1CCA76820(v0, v2, isUniquelyReferenced_nonNull_native);
  *v5 = v7;
  swift_bridgeObjectRelease();
  result = 1;
  *v6 = (_BYTE)v0;
  return result;
}

uint64_t sub_1CCA73058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2)
  {
    sub_1CCA14E90(&qword_1EF9E1ED0);
    v2 = sub_1CCB63F88();
    v15 = v2;
    sub_1CCB63EC8();
    if (sub_1CCB63F28())
    {
      sub_1CC9C30A8(0, &qword_1EF9DF590);
      do
      {
        swift_dynamicCast();
        v2 = v15;
        v9 = *(_QWORD *)(v15 + 16);
        if (*(_QWORD *)(v15 + 24) <= v9)
        {
          sub_1CCA74E10(v9 + 1, &qword_1EF9E1ED0);
          v2 = v15;
        }
        result = sub_1CCB63DE4();
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v10 = 0;
          v11 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v11 && (v10 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v12 = v7 == v11;
            if (v7 == v11)
              v7 = 0;
            v10 |= v12;
            v13 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v13 == -1);
          v8 = __clz(__rbit64(~v13)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v14;
        ++*(_QWORD *)(v2 + 16);
      }
      while (sub_1CCB63F28());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

uint64_t sub_1CCA73260()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38[72];

  v1 = v0;
  v2 = type metadata accessor for FMIPBeaconShare(0);
  v35 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_1CCA14E90(&qword_1EF9E1E98);
  v6 = sub_1CCB63F7C();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v33 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v31 = v0;
    v32 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    v34 = v5;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v36 = v14;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v32)
          goto LABEL_33;
        v19 = v33[v18];
        v20 = v14 + 1;
        if (!v19)
        {
          v20 = v14 + 2;
          if (v14 + 2 >= v32)
            goto LABEL_33;
          v19 = v33[v20];
          if (!v19)
          {
            v20 = v14 + 3;
            if (v14 + 3 >= v32)
              goto LABEL_33;
            v19 = v33[v20];
            if (!v19)
            {
              v21 = v14 + 4;
              if (v14 + 4 >= v32)
              {
LABEL_33:
                swift_release();
                v1 = v31;
                v30 = 1 << *(_BYTE *)(v5 + 32);
                if (v30 > 63)
                  bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v30;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v33[v21];
              if (!v19)
              {
                while (1)
                {
                  v20 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_39;
                  if (v20 >= v32)
                    goto LABEL_33;
                  v19 = v33[v20];
                  ++v21;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v20 = v14 + 4;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v36 = v20;
        v17 = __clz(__rbit64(v19)) + (v20 << 6);
      }
      v22 = *(_QWORD *)(v35 + 72);
      sub_1CC9FED60(*(_QWORD *)(v5 + 48) + v22 * v17, (uint64_t)v4, type metadata accessor for FMIPBeaconShare);
      sub_1CCB6433C();
      sub_1CCB63604();
      sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      sub_1CCB63940();
      sub_1CCB63940();
      swift_bridgeObjectRetain();
      sub_1CCB639F4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1CCB639F4();
      swift_bridgeObjectRelease();
      v37 = *(_QWORD *)&v4[*(int *)(v2 + 32)];
      FMIPBeaconShareState.hash(into:)((uint64_t)v38);
      sub_1CCB635B0();
      sub_1CC9CAA38(&qword_1EF9DF088, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
      sub_1CCB63940();
      result = sub_1CCB64384();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
        v5 = v34;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        v5 = v34;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = sub_1CC9FED60((uint64_t)v4, *(_QWORD *)(v7 + 48) + v15 * v22, type metadata accessor for FMIPBeaconShare);
      ++*(_QWORD *)(v7 + 16);
      v14 = v36;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t sub_1CCA736D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1CCA14E90(&qword_1EF9E1E90);
  v3 = sub_1CCB63F7C();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = (_QWORD *)(v2 + 56);
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v7)
  {
    v9 = __clz(__rbit64(v7));
    goto LABEL_20;
  }
  if (v8 > 1)
  {
    v10 = *(_QWORD *)(v2 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_19;
    v11 = 2;
    if (v8 > 2)
    {
      v10 = *(_QWORD *)(v2 + 72);
      if (v10)
        goto LABEL_19;
      v11 = 3;
      if (v8 > 3)
      {
        v10 = *(_QWORD *)(v2 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v8 > 4)
          {
            v10 = *(_QWORD *)(v2 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x1CCA739F8);
              }
              if (v11 >= v8)
                break;
              v10 = v5[v11];
              ++v12;
              if (v10)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v9);
        sub_1CCB6433C();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v0;
  v14 = 1 << *(_BYTE *)(v2 + 32);
  if (v14 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v5 = -1 << v14;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v1 = v3;
  return result;
}

uint64_t sub_1CCA73A0C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = sub_1CCB63604();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_1CCA14E90(&qword_1EF9E1E30);
  v6 = sub_1CCB63F7C();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v5 + 48);
      v23 = *(_QWORD *)(v36 + 72);
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v22 + v23 * v17, v2);
      sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      result = sub_1CCB63934();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v23, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

unint64_t sub_1CCA73D78(uint64_t a1, uint64_t *a2, void (*a3)(char *, uint64_t))
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char v24[72];

  v5 = v3;
  v6 = *v3;
  sub_1CCA14E90(a2);
  v7 = sub_1CCB63F7C();
  v8 = v7;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 1 << *(_BYTE *)(v6 + 32);
    v10 = (_QWORD *)(v6 + 56);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 56);
    v13 = (unint64_t)(v9 + 63) >> 6;
    v14 = v7 + 56;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v16 << 6);
      }
      else
      {
        v20 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v20 >= v13)
          goto LABEL_23;
        v21 = v10[v20];
        ++v16;
        if (!v21)
        {
          v16 = v20 + 1;
          if (v20 + 1 >= v13)
            goto LABEL_23;
          v21 = v10[v16];
          if (!v21)
          {
            v16 = v20 + 2;
            if (v20 + 2 >= v13)
              goto LABEL_23;
            v21 = v10[v16];
            if (!v21)
            {
              v22 = v20 + 3;
              if (v22 >= v13)
              {
LABEL_23:
                swift_release();
                v23 = 1 << *(_BYTE *)(v6 + 32);
                if (v23 > 63)
                  bzero((void *)(v6 + 56), ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v10 = -1 << v23;
                v5 = v3;
                *(_QWORD *)(v6 + 16) = 0;
                break;
              }
              v21 = v10[v22];
              if (!v21)
              {
                while (1)
                {
                  v16 = v22 + 1;
                  if (__OFADD__(v22, 1))
                    goto LABEL_29;
                  if (v16 >= v13)
                    goto LABEL_23;
                  v21 = v10[v16];
                  ++v22;
                  if (v21)
                    goto LABEL_22;
                }
              }
              v16 = v22;
            }
          }
        }
LABEL_22:
        v12 = (v21 - 1) & v21;
        v18 = __clz(__rbit64(v21)) + (v16 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v18);
      sub_1CCB6433C();
      a3(v24, v19);
      sub_1CCB64384();
      result = sub_1CCB63EB0();
      *(_QWORD *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * result) = v19;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v5 = v8;
  return result;
}

uint64_t sub_1CCA73FC0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for FMIPItem();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_1CCA14E90(&qword_1EF9E1E40);
  v6 = sub_1CCB63F7C();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v31 = 1 << *(_BYTE *)(v5 + 32);
                if (v31 > 63)
                  bzero(v35, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v31;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v5 + 48);
      v23 = *(_QWORD *)(v36 + 72);
      sub_1CC9FED60(v22 + v23 * v17, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCB6433C();
      swift_bridgeObjectRetain();
      sub_1CCB639F4();
      swift_bridgeObjectRelease();
      result = sub_1CCB64384();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = sub_1CC9FED60((uint64_t)v4, *(_QWORD *)(v7 + 48) + v15 * v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t sub_1CCA74330()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  sub_1CCA14E90(&qword_1EF9E1E80);
  v3 = sub_1CCB63F7C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_1CCB6433C();
      sub_1CCB639F4();
      result = sub_1CCB64384();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1CCA7460C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;

  v1 = v0;
  v2 = type metadata accessor for FMIPHawkeyeProductInformation();
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  MEMORY[0x1E0C80A78](v2);
  v42 = (uint64_t)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CCA14E90(&qword_1EF9DFB90);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FMIPDiscoveredAccessory();
  v47 = *(_QWORD *)(v7 - 8);
  v48 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v0;
  sub_1CCA14E90(&qword_1EF9E1EC0);
  v11 = sub_1CCB63F7C();
  v12 = v11;
  if (*(_QWORD *)(v10 + 16))
  {
    v41 = v0;
    v13 = 1 << *(_BYTE *)(v10 + 32);
    v14 = *(_QWORD *)(v10 + 56);
    v44 = (_QWORD *)(v10 + 56);
    if (v13 < 64)
      v15 = ~(-1 << v13);
    else
      v15 = -1;
    v16 = v15 & v14;
    v43 = (unint64_t)(v13 + 63) >> 6;
    v17 = v11 + 56;
    result = swift_retain();
    v19 = 0;
    v45 = v10;
    v46 = v12;
    while (1)
    {
      if (v16)
      {
        v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v52 = v19;
        v22 = v21 | (v19 << 6);
      }
      else
      {
        v23 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v23 >= v43)
          goto LABEL_39;
        v24 = v44[v23];
        v25 = v19 + 1;
        if (!v24)
        {
          v25 = v19 + 2;
          if (v19 + 2 >= v43)
            goto LABEL_39;
          v24 = v44[v25];
          if (!v24)
          {
            v25 = v19 + 3;
            if (v19 + 3 >= v43)
              goto LABEL_39;
            v24 = v44[v25];
            if (!v24)
            {
              v26 = v19 + 4;
              if (v19 + 4 >= v43)
              {
LABEL_39:
                swift_release();
                v1 = v41;
                v40 = 1 << *(_BYTE *)(v10 + 32);
                if (v40 > 63)
                  bzero(v44, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v44 = -1 << v40;
                *(_QWORD *)(v10 + 16) = 0;
                break;
              }
              v24 = v44[v26];
              if (!v24)
              {
                while (1)
                {
                  v25 = v26 + 1;
                  if (__OFADD__(v26, 1))
                    goto LABEL_45;
                  if (v25 >= v43)
                    goto LABEL_39;
                  v24 = v44[v25];
                  ++v26;
                  if (v24)
                    goto LABEL_23;
                }
              }
              v25 = v19 + 4;
            }
          }
        }
LABEL_23:
        v16 = (v24 - 1) & v24;
        v52 = v25;
        v22 = __clz(__rbit64(v24)) + (v25 << 6);
      }
      v27 = *(_QWORD *)(v10 + 48);
      v51 = *(_QWORD *)(v47 + 72);
      sub_1CC9FED60(v27 + v51 * v22, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      sub_1CCB6433C();
      v28 = *(id *)v9;
      sub_1CCB63DFC();

      v29 = *((_QWORD *)v9 + 3);
      if (v29)
      {
        v31 = *((_QWORD *)v9 + 1);
        v30 = *((_QWORD *)v9 + 2);
        sub_1CCB64354();
        sub_1CCB64348();
        sub_1CCA7C9C8(v31, v30, v29);
        swift_bridgeObjectRetain();
        sub_1CCB639F4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_1CCB639F4();
        swift_bridgeObjectRelease();
        sub_1CCA7C9F8(v31, v30, v29);
      }
      else
      {
        sub_1CCB64354();
      }
      sub_1CC9EAB74((uint64_t)&v9[*(int *)(v48 + 24)], (uint64_t)v6, &qword_1EF9DFB90);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v6, 1, v50) == 1)
      {
        sub_1CCB64354();
      }
      else
      {
        v32 = v42;
        sub_1CC9FED60((uint64_t)v6, v42, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
        sub_1CCB64354();
        FMIPHawkeyeProductInformation.hash(into:)();
        sub_1CCA0BF30(v32, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
      }
      v12 = v46;
      result = sub_1CCB64384();
      v33 = -1 << *(_BYTE *)(v12 + 32);
      v34 = result & ~v33;
      v35 = v34 >> 6;
      if (((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v36 = 0;
        v37 = (unint64_t)(63 - v33) >> 6;
        do
        {
          if (++v35 == v37 && (v36 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v38 = v35 == v37;
          if (v35 == v37)
            v35 = 0;
          v36 |= v38;
          v39 = *(_QWORD *)(v17 + 8 * v35);
        }
        while (v39 == -1);
        v20 = __clz(__rbit64(~v39)) + (v35 << 6);
      }
      *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      result = sub_1CC9FED60((uint64_t)v9, *(_QWORD *)(v12 + 48) + v20 * v51, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      ++*(_QWORD *)(v12 + 16);
      v10 = v45;
      v19 = v52;
    }
  }
  result = swift_release();
  *v1 = v12;
  return result;
}

uint64_t sub_1CCA74B30()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  int64_t v26;
  char v27[72];

  v1 = v0;
  v2 = type metadata accessor for FMIPUnknownItem();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  sub_1CCA14E90(&qword_1EF9E1EB0);
  v7 = sub_1CCB63F7C();
  v8 = v7;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 1 << *(_BYTE *)(v6 + 32);
    v10 = *(_QWORD *)(v6 + 56);
    v24 = v0;
    v25 = (_QWORD *)(v6 + 56);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & v10;
    v26 = (unint64_t)(v9 + 63) >> 6;
    v13 = v7 + 56;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v15 << 6);
      }
      else
      {
        v20 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v20 >= v26)
          goto LABEL_23;
        v21 = v25[v20];
        ++v15;
        if (!v21)
        {
          v15 = v20 + 1;
          if (v20 + 1 >= v26)
            goto LABEL_23;
          v21 = v25[v15];
          if (!v21)
          {
            v15 = v20 + 2;
            if (v20 + 2 >= v26)
              goto LABEL_23;
            v21 = v25[v15];
            if (!v21)
            {
              v22 = v20 + 3;
              if (v22 >= v26)
              {
LABEL_23:
                swift_release();
                v23 = 1 << *(_BYTE *)(v6 + 32);
                if (v23 > 63)
                  bzero(v25, ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v25 = -1 << v23;
                v1 = v24;
                *(_QWORD *)(v6 + 16) = 0;
                break;
              }
              v21 = v25[v22];
              if (!v21)
              {
                while (1)
                {
                  v15 = v22 + 1;
                  if (__OFADD__(v22, 1))
                    goto LABEL_29;
                  if (v15 >= v26)
                    goto LABEL_23;
                  v21 = v25[v15];
                  ++v22;
                  if (v21)
                    goto LABEL_22;
                }
              }
              v15 = v22;
            }
          }
        }
LABEL_22:
        v12 = (v21 - 1) & v21;
        v17 = __clz(__rbit64(v21)) + (v15 << 6);
      }
      v18 = *(_QWORD *)(v3 + 72);
      sub_1CC9FED60(*(_QWORD *)(v6 + 48) + v18 * v17, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
      sub_1CCB6433C();
      FMIPUnknownItem.hash(into:)((uint64_t)v27);
      sub_1CCB64384();
      v19 = sub_1CCB63EB0();
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      result = sub_1CC9FED60((uint64_t)v5, *(_QWORD *)(v8 + 48) + v19 * v18, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v1 = v8;
  return result;
}

uint64_t sub_1CCA74E04(uint64_t a1)
{
  return sub_1CCA74E10(a1, &qword_1EF9E1ED8);
}

uint64_t sub_1CCA74E10(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v3 = v2;
  v4 = *v2;
  sub_1CCA14E90(a2);
  v5 = sub_1CCB63F7C();
  v6 = v5;
  if (*(_QWORD *)(v4 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v4 + 32);
    v8 = (_QWORD *)(v4 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_33;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_33;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_33;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                v3 = v30;
                v29 = 1 << *(_BYTE *)(v4 + 32);
                if (v29 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v11)
                    goto LABEL_33;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
      result = sub_1CCB63DE4();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_1CCA750A8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1CCA14E90(&qword_1EF9E1EA8);
  v3 = sub_1CCB63F7C();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = (_QWORD *)(v2 + 56);
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v7)
  {
    v9 = __clz(__rbit64(v7));
    goto LABEL_20;
  }
  if (v8 > 1)
  {
    v10 = *(_QWORD *)(v2 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_19;
    v11 = 2;
    if (v8 > 2)
    {
      v10 = *(_QWORD *)(v2 + 72);
      if (v10)
        goto LABEL_19;
      v11 = 3;
      if (v8 > 3)
      {
        v10 = *(_QWORD *)(v2 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v8 > 4)
          {
            v10 = *(_QWORD *)(v2 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x1CCA753ECLL);
              }
              if (v11 >= v8)
                break;
              v10 = v5[v11];
              ++v12;
              if (v10)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v9);
        sub_1CCB6433C();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v0;
  v14 = 1 << *(_BYTE *)(v2 + 32);
  if (v14 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v5 = -1 << v14;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v1 = v3;
  return result;
}

unint64_t sub_1CCA75400(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_1CCB63DE4();
  result = sub_1CCB63EB0();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_1CCA75480(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  BOOL v21;
  char *v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37[9];

  v7 = (int *)type metadata accessor for FMIPBeaconShare(0);
  v8 = *((_QWORD *)v7 - 1);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v33 = v8;
  v34 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_26;
  if ((a3 & 1) != 0)
  {
    sub_1CCA73260();
  }
  else
  {
    if (v12 > v11)
    {
      sub_1CCA77120(type metadata accessor for FMIPBeaconShare, &qword_1EF9E1E98);
      goto LABEL_26;
    }
    sub_1CCA77698();
  }
  v13 = *v3;
  sub_1CCB6433C();
  sub_1CCB63604();
  sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CCB63940();
  v35 = a1 + v7[5];
  sub_1CCB63940();
  v14 = (_QWORD *)(a1 + v7[6]);
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  v32 = (_QWORD *)(a1 + v7[7]);
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  v31 = v7[8];
  v36 = *(_QWORD *)(a1 + v31);
  FMIPBeaconShareState.hash(into:)((uint64_t)v37);
  v15 = a1 + v7[9];
  sub_1CCB635B0();
  sub_1CC9CAA38(&qword_1EF9DF088, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  v30 = v15;
  sub_1CCB63940();
  v16 = sub_1CCB64384();
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_1CCA0BEEC(*(_QWORD *)(v13 + 48) + v19 * a2, (uint64_t)v10, type metadata accessor for FMIPBeaconShare);
      if ((sub_1CCB635E0() & 1) != 0 && (sub_1CCB635E0() & 1) != 0)
      {
        v20 = &v10[v7[6]];
        v21 = *(_QWORD *)v20 == *v14 && *((_QWORD *)v20 + 1) == v14[1];
        if (v21 || (sub_1CCB642A0() & 1) != 0)
        {
          v22 = &v10[v7[7]];
          v23 = *(_QWORD *)v22 == *v32 && *((_QWORD *)v22 + 1) == v32[1];
          if (v23 || (sub_1CCB642A0() & 1) != 0)
          {
            v24 = *(_QWORD *)&v10[v7[8]];
            v36 = *(_QWORD *)(a1 + v31);
            v37[0] = v24;
            if ((static FMIPBeaconShareState.== infix(_:_:)(v37, &v36) & 1) != 0 && (sub_1CCB63574() & 1) != 0)
              break;
          }
        }
      }
      sub_1CCA0BF30((uint64_t)v10, type metadata accessor for FMIPBeaconShare);
      a2 = (a2 + 1) & v18;
      if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_26;
    }
    sub_1CCA0BF30((uint64_t)v10, type metadata accessor for FMIPBeaconShare);
    sub_1CCB642D0();
    __break(1u);
  }
LABEL_26:
  v25 = *v34;
  *(_QWORD *)(*v34 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1CC9FED60(a1, *(_QWORD *)(v25 + 48) + *(_QWORD *)(v33 + 72) * a2, type metadata accessor for FMIPBeaconShare);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (v28)
    __break(1u);
  else
    *(_QWORD *)(v25 + 16) = v29;
  return result;
}

void sub_1CCA7581C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1CCA74E10(v6 + 1, &qword_1EF9E1ED0);
  }
  else
  {
    if (v7 > v6)
    {
      sub_1CCA76BB4();
      goto LABEL_14;
    }
    sub_1CCA77AD0();
  }
  v8 = *v3;
  v9 = sub_1CCB63DE4();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_1CC9C30A8(0, &qword_1EF9DF590);
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = sub_1CCB63DF0();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      sub_1CCB642D0();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = sub_1CCB63DF0();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

void *sub_1CCA759AC(void *result, unint64_t a2, char a3)
{
  uint64_t v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;

  v5 = (char)result;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1CCA736D0();
      goto LABEL_8;
    }
    if (v7 <= v6)
    {
      sub_1CCA77D48();
LABEL_8:
      sub_1CCB6433C();
      __asm { BR              X10 }
    }
    result = sub_1CCA77510(&qword_1EF9E1E90);
  }
  v8 = *v12;
  *(_QWORD *)(*v12 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v8 + 48) + a2) = v13;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
    JUMPOUT(0x1CCA75C94);
  }
  *(_QWORD *)(v8 + 16) = v11;
  return result;
}

uint64_t sub_1CCA75CEC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = sub_1CCB63604();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_1CCA73A0C();
  }
  else
  {
    if (v11 > v10)
    {
      sub_1CCA76D5C();
      goto LABEL_12;
    }
    sub_1CCA78050();
  }
  v12 = *v3;
  sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v13 = sub_1CCB63934();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      sub_1CC9CAA38(&qword_1EF9E1E28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v18 = sub_1CCB63958();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1CCB642D0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA75EF0(uint64_t result, unint64_t a2, char a3, uint64_t *a4, void (*a5)(char *, uint64_t), uint64_t (*a6)(uint64_t, uint64_t), uint64_t *a7)
{
  uint64_t *v7;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27[72];

  v12 = result;
  v13 = *(_QWORD *)(*v7 + 16);
  v14 = *(_QWORD *)(*v7 + 24);
  if (v14 > v13 && (a3 & 1) != 0)
    goto LABEL_14;
  v15 = v13 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1CCA73D78(v15, a4, a5);
  }
  else
  {
    if (v14 > v13)
    {
      result = (uint64_t)sub_1CCA76F80(a4);
      goto LABEL_14;
    }
    sub_1CCA78378(v15, a4, a5);
  }
  v16 = *v7;
  sub_1CCB6433C();
  a5(v27, v12);
  result = sub_1CCB64384();
  v17 = -1 << *(_BYTE *)(v16 + 32);
  a2 = result & ~v17;
  if (((*(_QWORD *)(v16 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = swift_bridgeObjectRetain();
    v19 = a6(v18, v12);
    result = swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
    {
LABEL_13:
      sub_1CCA14E90(a7);
      result = sub_1CCB642D0();
      __break(1u);
    }
    else
    {
      v20 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v20;
        if (((*(_QWORD *)(v16 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v21 = swift_bridgeObjectRetain();
        v22 = a6(v21, v12);
        result = swift_bridgeObjectRelease();
        if ((v22 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v23 = *v7;
  *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v23 + 48) + 8 * a2) = v12;
  v24 = *(_QWORD *)(v23 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v26;
  return result;
}

uint64_t sub_1CCA760A0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t *v26;

  v7 = type metadata accessor for FMIPItem();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
  {
LABEL_13:
    v13 = v8;
    goto LABEL_14;
  }
  if ((a3 & 1) != 0)
  {
    sub_1CCA73FC0();
    goto LABEL_8;
  }
  if (v12 <= v11)
  {
    sub_1CCA7858C();
LABEL_8:
    v14 = *v3;
    sub_1CCB6433C();
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
    v15 = sub_1CCB64384();
    v16 = -1 << *(_BYTE *)(v14 + 32);
    a2 = v15 & ~v16;
    if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v25[1] = v7;
      v17 = ~v16;
      v13 = v8;
      v18 = *(_QWORD *)(v8 + 72);
      while (1)
      {
        sub_1CCA0BEEC(*(_QWORD *)(v14 + 48) + v18 * a2, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v19 = _s8FMIPCore8FMIPItemV2eeoiySbAC_ACtFZ_0((uint64_t)v10, a1);
        sub_1CCA0BF30((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        if ((v19 & 1) != 0)
          goto LABEL_17;
        a2 = (a2 + 1) & v17;
        if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          goto LABEL_14;
      }
    }
    goto LABEL_13;
  }
  v13 = v8;
  sub_1CCA77120((uint64_t (*)(_QWORD))type metadata accessor for FMIPItem, &qword_1EF9E1E40);
LABEL_14:
  v20 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1CC9FED60(a1, *(_QWORD *)(v20 + 48) + *(_QWORD *)(v13 + 72) * a2, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_17:
  result = sub_1CCB642D0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA762A8(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1CCA74330();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1CCA77338();
      goto LABEL_22;
    }
    sub_1CCA788BC();
  }
  v11 = *v4;
  sub_1CCB6433C();
  sub_1CCB639F4();
  result = sub_1CCB64384();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_1CCB642A0(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_1CCB642D0();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_1CCB642A0();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_1CCA76440(_QWORD *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;

  v4 = v3;
  v8 = type metadata accessor for FMIPDiscoveredAccessory();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (_QWORD *)((char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  v26 = v9;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_1CCA7460C();
  }
  else
  {
    if (v13 > v12)
    {
      sub_1CCA77120((uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory, &qword_1EF9E1EC0);
      goto LABEL_12;
    }
    sub_1CCA78B68();
  }
  v14 = *v4;
  sub_1CCB6433C();
  FMIPDiscoveredAccessory.hash(into:)();
  v15 = sub_1CCB64384();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v25[1] = v8;
    v17 = ~v16;
    v18 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_1CCA0BEEC(*(_QWORD *)(v14 + 48) + v18 * a2, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      v19 = _s8FMIPCore23FMIPDiscoveredAccessoryV2eeoiySbAC_ACtFZ_0(v11, a1);
      sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      if (v19)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1CC9FED60((uint64_t)a1, *(_QWORD *)(v20 + 48) + *(_QWORD *)(v26 + 72) * a2, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1CCB642D0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA76630(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  _BYTE v27[72];

  v4 = v3;
  v8 = type metadata accessor for FMIPUnknownItem();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  v26 = v9;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_1CCA74B30();
  }
  else
  {
    if (v13 > v12)
    {
      sub_1CCA77120((uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem, &qword_1EF9E1EB0);
      goto LABEL_12;
    }
    sub_1CCA79050();
  }
  v14 = *v4;
  sub_1CCB6433C();
  FMIPUnknownItem.hash(into:)((uint64_t)v27);
  v15 = sub_1CCB64384();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v25[1] = v8;
    v17 = ~v16;
    v18 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_1CCA0BEEC(*(_QWORD *)(v14 + 48) + v18 * a2, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
      v19 = _s8FMIPCore15FMIPUnknownItemV2eeoiySbAC_ACtFZ_0((uint64_t)v11, a1);
      sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1CC9FED60(a1, *(_QWORD *)(v20 + 48) + *(_QWORD *)(v26 + 72) * a2, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1CCB642D0();
  __break(1u);
  return result;
}

void *sub_1CCA76820(void *result, unint64_t a2, char a3)
{
  uint64_t v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;

  v5 = (char)result;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1CCA750A8();
      goto LABEL_8;
    }
    if (v7 <= v6)
    {
      sub_1CCA792EC();
LABEL_8:
      sub_1CCB6433C();
      __asm { BR              X10 }
    }
    result = sub_1CCA77510(&qword_1EF9E1EA8);
  }
  v8 = *v12;
  *(_QWORD *)(*v12 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v8 + 48) + a2) = v13;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
    JUMPOUT(0x1CCA76B5CLL);
  }
  *(_QWORD *)(v8 + 16) = v11;
  return result;
}

id sub_1CCA76BB4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_1CCA14E90(&qword_1EF9E1ED0);
  v2 = *v0;
  v3 = sub_1CCB63F70();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1CCA76D5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = sub_1CCB63604();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA14E90(&qword_1EF9E1E30);
  v6 = *v0;
  v7 = sub_1CCB63F70();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_1CCA76F80(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  sub_1CCA14E90(a1);
  v3 = *v1;
  v4 = sub_1CCB63F70();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = (void *)swift_bridgeObjectRetain();
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1CCA77120(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  unint64_t v15;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v5 = v2;
  v6 = a1(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v28 - v8;
  sub_1CCA14E90(a2);
  v10 = *v2;
  v11 = sub_1CCB63F70();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v5 = v12;
    return result;
  }
  v29 = v5;
  result = (void *)(v11 + 56);
  v14 = v10 + 56;
  v15 = (unint64_t)((1 << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 56 + 8 * v15)
    result = memmove(result, (const void *)(v10 + 56), 8 * v15);
  v17 = 0;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
  v18 = 1 << *(_BYTE *)(v10 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v10 + 56);
  v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v25 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      v17 = v25 + 1;
      if (v25 + 1 >= v21)
        goto LABEL_28;
      v26 = *(_QWORD *)(v14 + 8 * v17);
      if (!v26)
      {
        v17 = v25 + 2;
        if (v25 + 2 >= v21)
          goto LABEL_28;
        v26 = *(_QWORD *)(v14 + 8 * v17);
        if (!v26)
          break;
      }
    }
LABEL_27:
    v20 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_12:
    v24 = *(_QWORD *)(v7 + 72) * v23;
    sub_1CCA0BEEC(*(_QWORD *)(v10 + 48) + v24, (uint64_t)v9, a1);
    result = (void *)sub_1CC9FED60((uint64_t)v9, *(_QWORD *)(v12 + 48) + v24, a1);
  }
  v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_28:
    result = (void *)swift_release();
    v5 = v29;
    goto LABEL_30;
  }
  v26 = *(_QWORD *)(v14 + 8 * v27);
  if (v26)
  {
    v17 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    v17 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v17 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v17);
    ++v27;
    if (v26)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_1CCA77338()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_1CCA14E90(&qword_1EF9E1E80);
  v2 = *v0;
  v3 = sub_1CCB63F70();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1CCA774E8()
{
  return sub_1CCA77120((uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory, &qword_1EF9E1EC0);
}

void *sub_1CCA774FC()
{
  return sub_1CCA77120((uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem, &qword_1EF9E1EB0);
}

void *sub_1CCA77510(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  sub_1CCA14E90(a1);
  v3 = *v1;
  v4 = sub_1CCB63F70();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1CCA77698()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37[72];

  v1 = v0;
  v2 = type metadata accessor for FMIPBeaconShare(0);
  v34 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_1CCA14E90(&qword_1EF9E1E98);
  v6 = sub_1CCB63F7C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v7;
    return result;
  }
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v9 = *(_QWORD *)(v5 + 56);
  v30 = v0;
  v31 = v5 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & v9;
  v32 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 56;
  result = swift_retain();
  v14 = 0;
  v33 = v5;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v35 = v14;
      v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v32)
      goto LABEL_33;
    v19 = *(_QWORD *)(v31 + 8 * v18);
    v20 = v14 + 1;
    if (!v19)
    {
      v20 = v14 + 2;
      if (v14 + 2 >= v32)
        goto LABEL_33;
      v19 = *(_QWORD *)(v31 + 8 * v20);
      if (!v19)
      {
        v20 = v14 + 3;
        if (v14 + 3 >= v32)
          goto LABEL_33;
        v19 = *(_QWORD *)(v31 + 8 * v20);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v11 = (v19 - 1) & v19;
    v35 = v20;
    v17 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v34 + 72);
    sub_1CCA0BEEC(*(_QWORD *)(v5 + 48) + v22 * v17, (uint64_t)v4, type metadata accessor for FMIPBeaconShare);
    sub_1CCB6433C();
    sub_1CCB63604();
    sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    sub_1CCB63940();
    sub_1CCB63940();
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
    v36 = *(_QWORD *)&v4[*(int *)(v2 + 32)];
    FMIPBeaconShareState.hash(into:)((uint64_t)v37);
    sub_1CCB635B0();
    sub_1CC9CAA38(&qword_1EF9DF088, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
    sub_1CCB63940();
    result = sub_1CCB64384();
    v23 = -1 << *(_BYTE *)(v7 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      v5 = v33;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      v5 = v33;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    result = sub_1CC9FED60((uint64_t)v4, *(_QWORD *)(v7 + 48) + v15 * v22, type metadata accessor for FMIPBeaconShare);
    ++*(_QWORD *)(v7 + 16);
    v14 = v35;
  }
  v21 = v14 + 4;
  if (v14 + 4 >= v32)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v30;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v31 + 8 * v21);
  if (v19)
  {
    v20 = v14 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v20 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v20 >= v32)
      goto LABEL_33;
    v19 = *(_QWORD *)(v31 + 8 * v20);
    ++v21;
    if (v19)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1CCA77AD0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = *v0;
  sub_1CCA14E90(&qword_1EF9E1ED0);
  v3 = sub_1CCB63F7C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v27 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = sub_1CCB63DE4();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v27;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1CCA77D48()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1CCA14E90(&qword_1EF9E1E90);
  v3 = sub_1CCB63F7C();
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    v8 = __clz(__rbit64(v6));
    goto LABEL_20;
  }
  if (v7 > 1)
  {
    v9 = *(_QWORD *)(v2 + 64);
    v10 = 1;
    if (v9)
      goto LABEL_19;
    v10 = 2;
    if (v7 > 2)
    {
      v9 = *(_QWORD *)(v2 + 72);
      if (v9)
        goto LABEL_19;
      v10 = 3;
      if (v7 > 3)
      {
        v9 = *(_QWORD *)(v2 + 80);
        if (!v9)
        {
          v11 = 4;
          if (v7 > 4)
          {
            v9 = *(_QWORD *)(v2 + 88);
            if (v9)
            {
              v10 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v10 = v11 + 1;
              if (__OFADD__(v11, 1))
              {
                __break(1u);
                JUMPOUT(0x1CCA7803CLL);
              }
              if (v10 >= v7)
                break;
              v9 = *(_QWORD *)(v2 + 56 + 8 * v10);
              ++v11;
              if (v9)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v8);
        sub_1CCB6433C();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
  v1 = v0;
LABEL_23:
  *v1 = v3;
  return result;
}

uint64_t sub_1CCA78050()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = sub_1CCB63604();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  sub_1CCA14E90(&qword_1EF9E1E30);
  v7 = sub_1CCB63F7C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = sub_1CCB63934();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1CCA78378(uint64_t a1, uint64_t *a2, void (*a3)(char *, uint64_t))
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23[72];

  v5 = v3;
  v6 = *v3;
  sub_1CCA14E90(a2);
  v7 = sub_1CCB63F7C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_24:
    result = swift_release();
    *v5 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 56);
  v13 = (unint64_t)(v9 + 63) >> 6;
  v14 = v7 + 56;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_7;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v20 >= v13)
      goto LABEL_23;
    v21 = *(_QWORD *)(v10 + 8 * v20);
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_23;
      v21 = *(_QWORD *)(v10 + 8 * v16);
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_23;
        v21 = *(_QWORD *)(v10 + 8 * v16);
        if (!v21)
          break;
      }
    }
LABEL_22:
    v12 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_7:
    v19 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v18);
    sub_1CCB6433C();
    swift_bridgeObjectRetain();
    a3(v23, v19);
    sub_1CCB64384();
    result = sub_1CCB63EB0();
    *(_QWORD *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * result) = v19;
    ++*(_QWORD *)(v8 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
  {
LABEL_23:
    swift_release();
    v5 = v3;
    goto LABEL_24;
  }
  v21 = *(_QWORD *)(v10 + 8 * v22);
  if (v21)
  {
    v16 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v16 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v16 >= v13)
      goto LABEL_23;
    v21 = *(_QWORD *)(v10 + 8 * v16);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1CCA7858C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;

  v1 = v0;
  v2 = type metadata accessor for FMIPItem();
  v33 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_1CCA14E90(&qword_1EF9E1E40);
  v6 = sub_1CCB63F7C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v7;
    return result;
  }
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v9 = *(_QWORD *)(v5 + 56);
  v30 = v0;
  v31 = v5 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & v9;
  v32 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v32)
      goto LABEL_33;
    v19 = *(_QWORD *)(v31 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_33;
      v19 = *(_QWORD *)(v31 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_33;
        v19 = *(_QWORD *)(v31 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v11 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    v21 = *(_QWORD *)(v33 + 72);
    sub_1CCA0BEEC(*(_QWORD *)(v5 + 48) + v21 * v17, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCB6433C();
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
    result = sub_1CCB64384();
    v22 = -1 << *(_BYTE *)(v7 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    result = sub_1CC9FED60((uint64_t)v4, *(_QWORD *)(v7 + 48) + v15 * v21, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v30;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v31 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v32)
      goto LABEL_33;
    v19 = *(_QWORD *)(v31 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1CCA788BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_1CCA14E90(&qword_1EF9E1E80);
  v3 = sub_1CCB63F7C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_1CCB6433C();
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    result = sub_1CCB64384();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1CCA78B68()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;

  v1 = v0;
  v2 = type metadata accessor for FMIPHawkeyeProductInformation();
  v50 = *(_QWORD *)(v2 - 8);
  v51 = v2;
  MEMORY[0x1E0C80A78](v2);
  v43 = (uint64_t)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CCA14E90(&qword_1EF9DFB90);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FMIPDiscoveredAccessory();
  v48 = *(_QWORD *)(v7 - 8);
  v49 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v0;
  sub_1CCA14E90(&qword_1EF9E1EC0);
  v11 = sub_1CCB63F7C();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    result = swift_release();
LABEL_41:
    *v1 = v12;
    return result;
  }
  v42 = v0;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 56);
  v44 = v10 + 56;
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v45 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 56;
  result = swift_retain();
  v19 = 0;
  v46 = v10;
  v47 = v12;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v53 = v19;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v23 >= v45)
      goto LABEL_39;
    v24 = *(_QWORD *)(v44 + 8 * v23);
    v25 = v19 + 1;
    if (!v24)
    {
      v25 = v19 + 2;
      if (v19 + 2 >= v45)
        goto LABEL_39;
      v24 = *(_QWORD *)(v44 + 8 * v25);
      if (!v24)
      {
        v25 = v19 + 3;
        if (v19 + 3 >= v45)
          goto LABEL_39;
        v24 = *(_QWORD *)(v44 + 8 * v25);
        if (!v24)
          break;
      }
    }
LABEL_23:
    v16 = (v24 - 1) & v24;
    v53 = v25;
    v22 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v10 + 48);
    v52 = *(_QWORD *)(v48 + 72);
    sub_1CCA0BEEC(v27 + v52 * v22, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
    sub_1CCB6433C();
    v28 = *(id *)v9;
    sub_1CCB63DFC();

    v29 = *((_QWORD *)v9 + 3);
    if (v29)
    {
      v30 = v6;
      v31 = *((_QWORD *)v9 + 1);
      v32 = *((_QWORD *)v9 + 2);
      sub_1CCB64354();
      sub_1CCB64348();
      sub_1CCA7C9C8(v31, v32, v29);
      swift_bridgeObjectRetain();
      sub_1CCB639F4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1CCB639F4();
      swift_bridgeObjectRelease();
      v33 = v31;
      v6 = v30;
      sub_1CCA7C9F8(v33, v32, v29);
    }
    else
    {
      sub_1CCB64354();
    }
    sub_1CC9EAB74((uint64_t)&v9[*(int *)(v49 + 24)], (uint64_t)v6, &qword_1EF9DFB90);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v6, 1, v51) == 1)
    {
      sub_1CCB64354();
    }
    else
    {
      v34 = v43;
      sub_1CC9FED60((uint64_t)v6, v43, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
      sub_1CCB64354();
      FMIPHawkeyeProductInformation.hash(into:)();
      sub_1CCA0BF30(v34, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
    }
    v10 = v46;
    v12 = v47;
    result = sub_1CCB64384();
    v35 = -1 << *(_BYTE *)(v12 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v17 + 8 * (v36 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v17 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v17 + 8 * v37);
      }
      while (v41 == -1);
      v20 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = sub_1CC9FED60((uint64_t)v9, *(_QWORD *)(v12 + 48) + v20 * v52, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
    ++*(_QWORD *)(v12 + 16);
    v19 = v53;
  }
  v26 = v19 + 4;
  if (v19 + 4 >= v45)
  {
LABEL_39:
    result = swift_release_n();
    v1 = v42;
    goto LABEL_41;
  }
  v24 = *(_QWORD *)(v44 + 8 * v26);
  if (v24)
  {
    v25 = v19 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v45)
      goto LABEL_39;
    v24 = *(_QWORD *)(v44 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_23;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1CCA79050()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  char v26[72];

  v1 = v0;
  v2 = type metadata accessor for FMIPUnknownItem();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  sub_1CCA14E90(&qword_1EF9E1EB0);
  v7 = sub_1CCB63F7C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_25:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v23 = v0;
  v24 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v25 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v15 << 6);
      goto LABEL_7;
    }
    v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v25)
      goto LABEL_23;
    v21 = *(_QWORD *)(v24 + 8 * v20);
    ++v15;
    if (!v21)
    {
      v15 = v20 + 1;
      if (v20 + 1 >= v25)
        goto LABEL_23;
      v21 = *(_QWORD *)(v24 + 8 * v15);
      if (!v21)
      {
        v15 = v20 + 2;
        if (v20 + 2 >= v25)
          goto LABEL_23;
        v21 = *(_QWORD *)(v24 + 8 * v15);
        if (!v21)
          break;
      }
    }
LABEL_22:
    v12 = (v21 - 1) & v21;
    v17 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_7:
    v18 = *(_QWORD *)(v3 + 72);
    sub_1CCA0BEEC(*(_QWORD *)(v6 + 48) + v18 * v17, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCB6433C();
    FMIPUnknownItem.hash(into:)((uint64_t)v26);
    sub_1CCB64384();
    v19 = sub_1CCB63EB0();
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = sub_1CC9FED60((uint64_t)v5, *(_QWORD *)(v8 + 48) + v19 * v18, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    ++*(_QWORD *)(v8 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v25)
  {
LABEL_23:
    result = swift_release_n();
    v1 = v23;
    goto LABEL_25;
  }
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
  {
    v15 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v15 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v15 >= v25)
      goto LABEL_23;
    v21 = *(_QWORD *)(v24 + 8 * v15);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1CCA792EC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  sub_1CCA14E90(&qword_1EF9E1EA8);
  v3 = sub_1CCB63F7C();
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    v8 = __clz(__rbit64(v6));
    goto LABEL_20;
  }
  if (v7 > 1)
  {
    v9 = *(_QWORD *)(v2 + 64);
    v10 = 1;
    if (v9)
      goto LABEL_19;
    v10 = 2;
    if (v7 > 2)
    {
      v9 = *(_QWORD *)(v2 + 72);
      if (v9)
        goto LABEL_19;
      v10 = 3;
      if (v7 > 3)
      {
        v9 = *(_QWORD *)(v2 + 80);
        if (!v9)
        {
          v11 = 4;
          if (v7 > 4)
          {
            v9 = *(_QWORD *)(v2 + 88);
            if (v9)
            {
              v10 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v10 = v11 + 1;
              if (__OFADD__(v11, 1))
              {
                __break(1u);
                JUMPOUT(0x1CCA795FCLL);
              }
              if (v10 >= v7)
                break;
              v9 = *(_QWORD *)(v2 + 56 + 8 * v10);
              ++v11;
              if (v9)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v8);
        sub_1CCB6433C();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
  v1 = v0;
LABEL_23:
  *v1 = v3;
  return result;
}

void sub_1CCA79610(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v4 = sub_1CCB63604();
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for FMIPItemPairingState();
  MEMORY[0x1E0C80A78](v5);
  v6 = sub_1CCA14E90(&qword_1EF9E1D38);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1CCA0BEEC(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemPairingState);
  sub_1CCA0BEEC(a2, v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemPairingState);
  v11 = sub_1CCA14E90(&qword_1EF9E1CA0);
  v12 = (char *)sub_1CCA79750
      + 4
      * byte_1CCB6AC2A[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 3, v11)];
  __asm { BR              X10 }
}

uint64_t sub_1CCA79750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  char v8;
  void (*v10)(uint64_t, uint64_t);

  sub_1CCA0BEEC(v1, v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemPairingState);
  if (v7(v5, 3, v6))
  {
    (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v4, v2);
    sub_1CC9C3E84(v1, &qword_1EF9E1D38);
    v8 = 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v3, v5, v2);
    v8 = sub_1CCB635E0();
    v10 = *(void (**)(uint64_t, uint64_t))(v0 + 8);
    v10(v3, v2);
    v10(v4, v2);
    sub_1CCA0BF30(v1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemPairingState);
  }
  return v8 & 1;
}

uint64_t sub_1CCA79880(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  char *v58;
  uint64_t v59;

  v2 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v2);
  v53 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_1CCB63604();
  v52 = *(_QWORD *)(v55 - 8);
  v4 = MEMORY[0x1E0C80A78](v55);
  v49 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v48 = (char *)&v47 - v6;
  v7 = type metadata accessor for FMIPItemPairingState();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v58 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA14E90(&qword_1EF9E1E78);
  result = sub_1CCB6409C();
  v11 = (_QWORD *)result;
  v12 = 0;
  v13 = *(_QWORD *)(a1 + 64);
  v56 = a1 + 64;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v57 = (unint64_t)(v14 + 63) >> 6;
  v59 = result + 64;
  v54 = a1;
  v51 = v8;
  if ((v15 & v13) == 0)
    goto LABEL_5;
LABEL_4:
  v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v17 | (v12 << 6); ; i = __clz(__rbit64(v20)) + (v12 << 6))
  {
    v22 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v24 = *v22;
    v23 = v22[1];
    v25 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    v26 = v25;
    v27 = objc_msgSend(v26, sel_status);
    if (v27 == (id)2)
    {

      v30 = sub_1CCA14E90(&qword_1EF9E1CA0);
      v29 = (uint64_t)v58;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v58, 3, 3, v30);
      goto LABEL_31;
    }
    if (v27 == (id)1)
    {
      v31 = objc_msgSend(v26, sel_beaconIdentifier);
      if (v31)
      {
        v32 = v31;
        v33 = v49;
        sub_1CCB635EC();

        v34 = v52;
        v35 = (uint64_t)v53;
        v36 = v33;
        v37 = v55;
        v50 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
        v50(v53, v36, v55);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v37);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v35, 1, v37) != 1)
        {
          v38 = v55;
          v39 = v50;
          v50(v48, (char *)v35, v55);
          v29 = (uint64_t)v58;
          v39(v58, v48, v38);
          v40 = sub_1CCA14E90(&qword_1EF9E1CA0);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v29, 0, 3, v40);
LABEL_30:
          a1 = v54;
          v8 = v51;
          goto LABEL_31;
        }
      }
      else
      {

        v35 = (uint64_t)v53;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v53, 1, 1, v55);
      }
      sub_1CC9C3E84(v35, &qword_1ED8A8EF8);
      v42 = sub_1CCA14E90(&qword_1EF9E1CA0);
      v29 = (uint64_t)v58;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v58, 1, 3, v42);
      goto LABEL_30;
    }
    if (v27)
    {

      v41 = sub_1CCA14E90(&qword_1EF9E1CA0);
      v29 = (uint64_t)v58;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v58, 1, 3, v41);
    }
    else
    {

      v28 = sub_1CCA14E90(&qword_1EF9E1CA0);
      v29 = (uint64_t)v58;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v58, 2, 3, v28);
    }
LABEL_31:
    *(_QWORD *)(v59 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v43 = (_QWORD *)(v11[6] + 16 * i);
    *v43 = v24;
    v43[1] = v23;
    result = sub_1CC9FED60(v29, v11[7] + *(_QWORD *)(v8 + 72) * i, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemPairingState);
    v44 = v11[2];
    v45 = __OFADD__(v44, 1);
    v46 = v44 + 1;
    if (v45)
    {
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v11[2] = v46;
    if (v16)
      goto LABEL_4;
LABEL_5:
    v19 = v12 + 1;
    if (__OFADD__(v12, 1))
      goto LABEL_36;
    if (v19 >= v57)
      return (uint64_t)v11;
    v20 = *(_QWORD *)(v56 + 8 * v19);
    ++v12;
    if (!v20)
    {
      v12 = v19 + 1;
      if (v19 + 1 >= v57)
        return (uint64_t)v11;
      v20 = *(_QWORD *)(v56 + 8 * v12);
      if (!v20)
      {
        v12 = v19 + 2;
        if (v19 + 2 >= v57)
          return (uint64_t)v11;
        v20 = *(_QWORD *)(v56 + 8 * v12);
        if (!v20)
          break;
      }
    }
LABEL_18:
    v16 = (v20 - 1) & v20;
  }
  v21 = v19 + 3;
  if (v21 >= v57)
    return (uint64_t)v11;
  v20 = *(_QWORD *)(v56 + 8 * v21);
  if (v20)
  {
    v12 = v21;
    goto LABEL_18;
  }
  while (1)
  {
    v12 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v12 >= v57)
      return (uint64_t)v11;
    v20 = *(_QWORD *)(v56 + 8 * v12);
    ++v21;
    if (v20)
      goto LABEL_18;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1CCA79D54(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t result;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t i;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v4 = sub_1CCB63604();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *((_QWORD *)a1 + 8);
  v12 = a1[1];
  v31 = *a1;
  v32 = v12;
  v13 = a1[2];
  v14 = a1[3];
  v29[1] = a1;
  v33 = v13;
  v34 = v14;
  v35 = v11;
  v29[2] = sub_1CCB64384();
  v30 = a2;
  v15 = a2 + 56;
  v16 = 1 << *(_BYTE *)(a2 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(a2 + 56);
  v19 = (unint64_t)(v16 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v21 = 0;
  v22 = 0;
  if (!v18)
    goto LABEL_5;
LABEL_4:
  v23 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v23 | (v22 << 6); ; i = __clz(__rbit64(v26)) + (v22 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, *(_QWORD *)(v30 + 48) + *(_QWORD *)(v5 + 72) * i, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
      goto LABEL_19;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v28 = sub_1CCB63934();
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v21 ^= v28;
    if (v18)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v22++, 1))
      goto LABEL_21;
    if (v22 >= v19)
      goto LABEL_18;
    v26 = *(_QWORD *)(v15 + 8 * v22);
    if (!v26)
      break;
LABEL_14:
    v18 = (v26 - 1) & v26;
  }
  v27 = v22 + 1;
  if (v22 + 1 >= v19)
  {
LABEL_18:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
LABEL_19:
    swift_release();
    return sub_1CCB64348();
  }
  v26 = *(_QWORD *)(v15 + 8 * v27);
  if (v26)
  {
    ++v22;
    goto LABEL_14;
  }
  while (1)
  {
    v22 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v22 >= v19)
      goto LABEL_18;
    v26 = *(_QWORD *)(v15 + 8 * v22);
    ++v27;
    if (v26)
      goto LABEL_14;
  }
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_1CCA79FE0(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t result;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  int64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v4 = type metadata accessor for FMIPItem();
  v29 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v28 - v8;
  v10 = *((_QWORD *)a1 + 8);
  v11 = a1[1];
  v31 = *a1;
  v32 = v11;
  v12 = a1[2];
  v13 = a1[3];
  v28[1] = a1;
  v33 = v12;
  v34 = v13;
  v35 = v10;
  v28[2] = sub_1CCB64384();
  v14 = a2 + 56;
  v15 = 1 << *(_BYTE *)(a2 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(a2 + 56);
  v18 = (unint64_t)(v15 + 63) >> 6;
  v30 = a2;
  result = swift_bridgeObjectRetain();
  v20 = 0;
  v21 = 0;
  while (1)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v21 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v21++, 1))
      goto LABEL_19;
    if (v21 >= v18)
    {
LABEL_17:
      swift_release();
      return sub_1CCB64348();
    }
    v26 = *(_QWORD *)(v14 + 8 * v21);
    if (!v26)
      break;
LABEL_16:
    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_5:
    sub_1CCA0BEEC(*(_QWORD *)(v30 + 48) + *(_QWORD *)(v29 + 72) * v23, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CC9FED60((uint64_t)v9, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCB6433C();
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
    v24 = sub_1CCB64384();
    result = sub_1CCA0BF30((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v20 ^= v24;
  }
  v27 = v21 + 1;
  if (v21 + 1 >= v18)
    goto LABEL_17;
  v26 = *(_QWORD *)(v14 + 8 * v27);
  if (v26)
  {
    ++v21;
    goto LABEL_16;
  }
  while (1)
  {
    v21 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v21 >= v18)
      goto LABEL_17;
    v26 = *(_QWORD *)(v14 + 8 * v21);
    ++v27;
    if (v26)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t _s8FMIPCore13FMIPItemGroupV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = type metadata accessor for FMIPItemGroup();
  v5 = MEMORY[0x1E0C80A78](v4);
  v53 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v52 = (uint64_t)&v49 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v54 = (uint64_t)&v49 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v51 = (char *)&v49 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v50 = (char *)&v49 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v49 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v49 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v49 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v49 - v25;
  MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v49 - v27;
  v29 = *a1;
  v30 = *a2;
  sub_1CCA0BEEC((uint64_t)a1, (uint64_t)&v49 - v27, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  sub_1CCA0BEEC((uint64_t)a2, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  if (v29 != v30)
  {
    sub_1CCA0BF30((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BF30((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BEEC((uint64_t)a1, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BEEC((uint64_t)a2, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v33 = (uint64_t)v50;
    v34 = (uint64_t)v51;
    goto LABEL_9;
  }
  if (*((_QWORD *)v28 + 1) == *((_QWORD *)v26 + 1) && *((_QWORD *)v28 + 2) == *((_QWORD *)v26 + 2))
  {
    sub_1CCA0BF30((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BF30((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BEEC((uint64_t)a1, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BEEC((uint64_t)a2, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v33 = (uint64_t)v50;
    v34 = (uint64_t)v51;
    goto LABEL_15;
  }
  v32 = sub_1CCB642A0();
  sub_1CCA0BF30((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  sub_1CCA0BF30((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  sub_1CCA0BEEC((uint64_t)a1, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  sub_1CCA0BEEC((uint64_t)a2, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  v33 = (uint64_t)v50;
  v34 = (uint64_t)v51;
  if ((v32 & 1) == 0)
  {
LABEL_9:
    sub_1CCA0BF30((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BEEC((uint64_t)a1, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BEEC((uint64_t)a2, v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    goto LABEL_10;
  }
LABEL_15:
  if (*((_QWORD *)v23 + 3) == *((_QWORD *)v20 + 3) && *((_QWORD *)v23 + 4) == *((_QWORD *)v20 + 4))
  {
    sub_1CCA0BF30((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BEEC((uint64_t)a1, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BEEC((uint64_t)a2, v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    goto LABEL_22;
  }
  v43 = sub_1CCB642A0();
  sub_1CCA0BF30((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  sub_1CCA0BEEC((uint64_t)a1, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  sub_1CCA0BEEC((uint64_t)a2, v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  if ((v43 & 1) == 0)
  {
LABEL_10:
    sub_1CCA0BF30((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BF30(v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BEEC((uint64_t)a1, v34, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v35 = v54;
    sub_1CCA0BEEC((uint64_t)a2, v54, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
LABEL_11:
    sub_1CCA0BF30(v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BF30(v34, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v36 = (uint64_t)a1;
    v37 = v52;
    sub_1CCA0BEEC(v36, v52, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v38 = (uint64_t)a2;
    v39 = v53;
    sub_1CCA0BEEC(v38, v53, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    goto LABEL_12;
  }
LABEL_22:
  v44 = sub_1CC9E12D4(*((_QWORD *)v17 + 5), *(_QWORD *)(v33 + 40));
  sub_1CCA0BF30((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  sub_1CCA0BF30(v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  sub_1CCA0BEEC((uint64_t)a1, v34, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  v35 = v54;
  sub_1CCA0BEEC((uint64_t)a2, v54, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  if ((v44 & 1) == 0)
    goto LABEL_11;
  v45 = *(_QWORD *)(v34 + 64);
  v46 = *(_QWORD *)(v35 + 64);
  sub_1CCA0BF30(v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  sub_1CCA0BF30(v34, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  v47 = (uint64_t)a1;
  v37 = v52;
  sub_1CCA0BEEC(v47, v52, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  v48 = (uint64_t)a2;
  v39 = v53;
  sub_1CCA0BEEC(v48, v53, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  if (v45 == v46)
  {
    v40 = sub_1CCAFEA10(*(_QWORD *)(v37 + 56), *(_QWORD *)(v39 + 56));
    goto LABEL_13;
  }
LABEL_12:
  v40 = 0;
LABEL_13:
  sub_1CCA0BF30(v37, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  sub_1CCA0BF30(v39, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  return v40 & 1;
}

uint64_t sub_1CCA7A718(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1CCB64090();
    swift_bridgeObjectRelease();
  }
  sub_1CC9C30A8(0, &qword_1EF9DF590);
  sub_1CCA7CA28();
  result = sub_1CCB63C58();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = sub_1CCB64090();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x1D17B154C](i, a1);
        sub_1CCA71DA8(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        sub_1CCA71DA8(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CCA7A870(uint64_t a1)
{
  return sub_1CCA7B08C(a1, (void (*)(void))sub_1CCA7C940, (uint64_t)&type metadata for FMIPPlaySoundChannels, (void (*)(char *, _QWORD))sub_1CCA7204C);
}

uint64_t sub_1CCA7A88C(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = sub_1CCB63604();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v18 - v8;
  v10 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  sub_1CC9CAA38(&qword_1ED8A7140, v3, MEMORY[0x1E0CB09C8]);
  v19 = sub_1CCB63C58();
  if (v13)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v18 = *(_QWORD *)(v4 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    while (1)
    {
      v15(v12, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v16(v12, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v12, v2);
      sub_1CCA72348((uint64_t)v9, v7);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v2);
      v14 += v18;
      if (!--v13)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
LABEL_7:
    v16(v12, 1, 1, v2);
  }
  return v19;
}

uint64_t sub_1CCA7AA5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1CCA14E90(&qword_1EF9E1428);
  sub_1CCA7CC20(&qword_1EF9E1E08, &qword_1EF9E1428);
  result = sub_1CCB63C58();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      swift_bridgeObjectRetain();
      sub_1CCA725A4(&v6, v5, (void (*)(char *, uint64_t))sub_1CCA79D54, sub_1CCA0B01C, &qword_1EF9E1E70, &qword_1EF9E1428);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1CCA7AB3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1CCA14E90(&qword_1EF9E1418);
  sub_1CCA7CC20(&qword_1EF9E1EE0, &qword_1EF9E1418);
  result = sub_1CCB63C58();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      swift_bridgeObjectRetain();
      sub_1CCA725A4(&v6, v5, (void (*)(char *, uint64_t))sub_1CCA79FE0, sub_1CCAFF584, &qword_1EF9E1EE8, &qword_1EF9E1418);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1CCA7AC1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = type metadata accessor for FMIPItem();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v14 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  sub_1CC9CAA38(&qword_1EF9E1E38, v10, (uint64_t)&protocol conformance descriptor for FMIPItem);
  result = sub_1CCB63C58();
  v15 = result;
  if (v9)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_1CCA0BEEC(v12, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCA72754((uint64_t)v8, (uint64_t)v6);
      sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v12 += v13;
      --v9;
    }
    while (v9);
    return v15;
  }
  return result;
}

uint64_t sub_1CCA7AD3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1CCB63C58();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1CCA72968(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1CCA7ADD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = type metadata accessor for FMIPDiscoveredAccessory();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v14 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  sub_1CC9CAA38(&qword_1EF9E1EC8, v10, (uint64_t)&protocol conformance descriptor for FMIPDiscoveredAccessory);
  result = sub_1CCB63C58();
  v15 = result;
  if (v9)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_1CCA0BEEC(v12, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      sub_1CCA72B14((uint64_t)v8, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory, (void (*)(_QWORD *))FMIPDiscoveredAccessory.hash(into:), (void (*)(char *, unint64_t, uint64_t))sub_1CCA76440, (uint64_t (*)(char *, uint64_t))_s8FMIPCore23FMIPDiscoveredAccessoryV2eeoiySbAC_ACtFZ_0);
      sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      v12 += v13;
      --v9;
    }
    while (v9);
    return v15;
  }
  return result;
}

uint64_t sub_1CCA7AF20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = type metadata accessor for FMIPUnknownItem();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v14 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  sub_1CC9CAA38(&qword_1EF9E1EB8, v10, (uint64_t)&protocol conformance descriptor for FMIPUnknownItem);
  result = sub_1CCB63C58();
  v15 = result;
  if (v9)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_1CCA0BEEC(v12, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
      sub_1CCA72B14((uint64_t)v8, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem, (void (*)(_QWORD *))FMIPUnknownItem.hash(into:), (void (*)(char *, unint64_t, uint64_t))sub_1CCA76630, (uint64_t (*)(char *, uint64_t))_s8FMIPCore15FMIPUnknownItemV2eeoiySbAC_ACtFZ_0);
      sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
      v12 += v13;
      --v9;
    }
    while (v9);
    return v15;
  }
  return result;
}

uint64_t sub_1CCA7B070(uint64_t a1)
{
  return sub_1CCA7B08C(a1, (void (*)(void))sub_1CCA7C984, (uint64_t)&type metadata for FMIPPartType, (void (*)(char *, _QWORD))sub_1CCA72D08);
}

uint64_t sub_1CCA7B08C(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(char *, _QWORD))
{
  uint64_t v6;
  uint64_t result;
  unsigned __int8 *v8;
  unsigned int v9;
  char v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 16);
  a2();
  result = sub_1CCB63C58();
  v11 = result;
  if (v6)
  {
    v8 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v9 = *v8++;
      a4(&v10, v9);
      --v6;
    }
    while (v6);
    return v11;
  }
  return result;
}

uint64_t sub_1CCA7B100(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x1E0DEE9D8];
  if (!v4)
    return v5;
  v22 = MEMORY[0x1E0DEE9D8];
  sub_1CCA63A00(0, v4, 0);
  v5 = v22;
  result = sub_1CCAA78E0(a1);
  v8 = result;
  v10 = v9;
  v12 = v11 & 1;
  while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      goto LABEL_13;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v10)
      goto LABEL_14;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = v3;
    v15 = sub_1CCAA8128(v13, a2);
    swift_bridgeObjectRelease();
    v16 = sub_1CCA7AC1C(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v22 + 16);
    v17 = *(_QWORD *)(v22 + 24);
    if (v18 >= v17 >> 1)
      sub_1CCA63A00(v17 > 1, v18 + 1, 1);
    *(_QWORD *)(v22 + 16) = v18 + 1;
    *(_QWORD *)(v22 + 8 * v18 + 32) = v16;
    result = sub_1CCB48FB8(v8, v10, v12 & 1, a1);
    v8 = result;
    v10 = v19;
    v12 = v20 & 1;
    --v4;
    v3 = v14;
    if (!v4)
    {
      sub_1CCA58DB4(result, v19, v20 & 1);
      return v5;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1CCA7B2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  char *v28;
  char *v29;
  char v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;

  v4 = sub_1CCA14E90(&qword_1ED8A8EF8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v36 - v8;
  v10 = sub_1CCB63604();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v46 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v50 = (char *)&v36 - v14;
  v15 = type metadata accessor for FMIPItem();
  v16 = MEMORY[0x1E0C80A78](v15);
  v38 = (uint64_t)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v36 - v19;
  result = MEMORY[0x1E0DEE9D8];
  v52 = MEMORY[0x1E0DEE9D8];
  v43 = *(_QWORD *)(a1 + 16);
  if (v43)
  {
    v22 = 0;
    v23 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    v44 = *(_QWORD *)(v18 + 72);
    v37 = v23;
    v42 = a1 + v23;
    v40 = v9;
    v41 = a2;
    v39 = (char *)&v36 - v19;
    do
    {
      v45 = v22;
      sub_1CCA0BEEC(v42 + v44 * v22, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCB635BC();
      v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      if (v51(v9, 1, v10) == 1)
      {
        sub_1CC9C3E84((uint64_t)v9, &qword_1ED8A8EF8);
      }
      else
      {
        v49 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
        v49(v50, v9, v10);
        v24 = *(_QWORD *)(a2 + 16);
        if (v24)
        {
          v25 = a2 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
          swift_bridgeObjectRetain();
          v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
          v47 = *(_QWORD *)(v11 + 72);
          v48 = v26;
          while (1)
          {
            v48(v7, v25, v10);
            v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
            v27(v7, 0, 1, v10);
            if (v51(v7, 1, v10) == 1)
              break;
            v28 = v46;
            v29 = v7;
            v49(v46, v7, v10);
            sub_1CC9CAA38(&qword_1EF9E1E28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
            v30 = sub_1CCB63958();
            v31 = v11;
            v32 = *(void (**)(char *, uint64_t))(v11 + 8);
            v32(v28, v10);
            if ((v30 & 1) != 0)
            {
              a2 = v41;
              swift_bridgeObjectRelease();
              v32(v50, v10);
              v20 = v39;
              sub_1CC9FED60((uint64_t)v39, v38, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
              v33 = v52;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1CCA63A2C(0, *(_QWORD *)(v33 + 16) + 1, 1);
                v33 = v52;
              }
              v11 = v31;
              v35 = *(_QWORD *)(v33 + 16);
              v34 = *(_QWORD *)(v33 + 24);
              v7 = v29;
              if (v35 >= v34 >> 1)
              {
                sub_1CCA63A2C(v34 > 1, v35 + 1, 1);
                v33 = v52;
              }
              *(_QWORD *)(v33 + 16) = v35 + 1;
              sub_1CC9FED60(v38, v33 + v37 + v35 * v44, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
              v9 = v40;
              goto LABEL_5;
            }
            v25 += v47;
            --v24;
            v11 = v31;
            v7 = v29;
            if (!v24)
              goto LABEL_14;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
LABEL_14:
          v27(v7, 1, 1, v10);
        }
        a2 = v41;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v50, v10);
        v20 = v39;
        v9 = v40;
      }
      sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_5:
      v22 = v45 + 1;
    }
    while (v45 + 1 != v43);
    return v52;
  }
  return result;
}

unint64_t sub_1CCA7B6F8()
{
  unint64_t result;

  result = qword_1EF9E1DB8;
  if (!qword_1EF9E1DB8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMItemCapabilities, &type metadata for FMItemCapabilities);
    atomic_store(result, (unint64_t *)&qword_1EF9E1DB8);
  }
  return result;
}

unint64_t sub_1CCA7B73C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E1DC0;
  if (!qword_1EF9E1DC0)
  {
    v1 = sub_1CCA19B38((uint64_t *)&unk_1EF9E2A60);
    v2 = sub_1CC9CAA38(&qword_1EF9E2A70, (uint64_t (*)(uint64_t))type metadata accessor for FMIPItem, (uint64_t)&protocol conformance descriptor for FMIPItem);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF10], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E1DC0);
  }
  return result;
}

unint64_t sub_1CCA7B7B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E1DD0;
  if (!qword_1EF9E1DD0)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E1418);
    v2 = sub_1CC9CAA38(&qword_1EF9E2A70, (uint64_t (*)(uint64_t))type metadata accessor for FMIPItem, (uint64_t)&protocol conformance descriptor for FMIPItem);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEB3B8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E1DD0);
  }
  return result;
}

unint64_t sub_1CCA7B834()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E29C0;
  if (!qword_1EF9E29C0)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E1438);
    v2 = sub_1CC9CAA38(&qword_1EF9E1CB0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF10], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E29C0);
  }
  return result;
}

unint64_t sub_1CCA7B8B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E1DE0;
  if (!qword_1EF9E1DE0)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E1428);
    v2 = sub_1CC9CAA38(&qword_1EF9E1CB0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEB3B8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E1DE0);
  }
  return result;
}

unint64_t sub_1CCA7B92C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF9E1DE8;
  if (!qword_1EF9E1DE8)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E1D70);
    v2 = sub_1CC9CAA38(&qword_1EF9E1DF0, (uint64_t (*)(uint64_t))type metadata accessor for FMIPItemPairingState, (uint64_t)&protocol conformance descriptor for FMIPItemPairingState);
    v3[0] = MEMORY[0x1E0DEA970];
    v3[1] = v2;
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEA0B8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EF9E1DE8);
  }
  return result;
}

unint64_t sub_1CCA7B9B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E1DF8;
  if (!qword_1EF9E1DF8)
  {
    v1 = sub_1CCA19B38(&qword_1ED8A8CD0);
    v2 = sub_1CC9CAA38(&qword_1EF9E1E00, (uint64_t (*)(uint64_t))type metadata accessor for FMIPItemLostModeMetadata, (uint64_t)&protocol conformance descriptor for FMIPItemLostModeMetadata);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E1DF8);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FMIPItemGroup(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v28;
  unsigned int (*v29)(_QWORD *, uint64_t, uint64_t);
  char *v30;
  _QWORD *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    v9 = a2[9];
    v10 = *(int *)(a3 + 48);
    __dst = (uint64_t *)((char *)a1 + v10);
    v11 = (uint64_t *)((char *)a2 + v10);
    a1[8] = a2[8];
    a1[9] = v9;
    v12 = type metadata accessor for FMIPItemLostModeMetadata();
    v28 = *(_QWORD *)(v12 - 8);
    v29 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = v12;
    if (v29(v11, 1, v12))
    {
      v14 = sub_1CCA14E90(&qword_1ED8A8CD0);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = v11[1];
      *__dst = *v11;
      __dst[1] = v16;
      v17 = v11[3];
      __dst[2] = v11[2];
      __dst[3] = v17;
      v18 = *(int *)(v12 + 24);
      v30 = (char *)__dst + v18;
      v19 = (char *)v11 + v18;
      v20 = sub_1CCB635B0();
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21(v30, v19, v20);
      v22 = *(int *)(v13 + 28);
      v23 = (_QWORD *)((char *)__dst + v22);
      v24 = (_QWORD *)((char *)v11 + v22);
      v25 = v24[1];
      *v23 = *v24;
      v23[1] = v25;
      v26 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56);
      swift_bridgeObjectRetain();
      v26(__dst, 0, 1, v13);
    }
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 52)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 52));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for FMIPItemGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 48);
  v5 = type metadata accessor for FMIPItemLostModeMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v4 + *(int *)(v5 + 24);
    v7 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FMIPItemGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  unsigned int (*v27)(_QWORD *, uint64_t, uint64_t);
  char *v28;
  _QWORD *__dst;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(int *)(a3 + 48);
  __dst = (_QWORD *)(a1 + v9);
  v10 = (_QWORD *)(a2 + v9);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  v11 = type metadata accessor for FMIPItemLostModeMetadata();
  v26 = *(_QWORD *)(v11 - 8);
  v27 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = v11;
  if (v27(v10, 1, v11))
  {
    v13 = sub_1CCA14E90(&qword_1ED8A8CD0);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v10[1];
    *__dst = *v10;
    __dst[1] = v14;
    v15 = v10[3];
    __dst[2] = v10[2];
    __dst[3] = v15;
    v16 = *(int *)(v11 + 24);
    v28 = (char *)__dst + v16;
    v17 = (char *)v10 + v16;
    v18 = sub_1CCB635B0();
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19(v28, v17, v18);
    v20 = *(int *)(v12 + 28);
    v21 = (_QWORD *)((char *)__dst + v20);
    v22 = (_QWORD *)((char *)v10 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56);
    swift_bridgeObjectRetain();
    v24(__dst, 0, 1, v12);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 52)) = *(_QWORD *)(a2 + *(int *)(a3 + 52));
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FMIPItemGroup(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void (*v20)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  uint64_t v32;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 48);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for FMIPItemLostModeMetadata();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      *v7 = *v8;
      v7[1] = v8[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v7[2] = v8[2];
      v7[3] = v8[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v23 = *(int *)(v9 + 24);
      v24 = (char *)v7 + v23;
      v25 = (char *)v8 + v23;
      v26 = sub_1CCB635B0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
      v27 = *(int *)(v9 + 28);
      v28 = (_QWORD *)((char *)v7 + v27);
      v29 = (_QWORD *)((char *)v8 + v27);
      *v28 = *v29;
      v28[1] = v29[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    sub_1CCA0BF30((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemLostModeMetadata);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v21 = sub_1CCA14E90(&qword_1ED8A8CD0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  v7[3] = v8[3];
  v14 = *(int *)(v9 + 24);
  v30 = (char *)v8 + v14;
  v31 = (char *)v7 + v14;
  v15 = sub_1CCB635B0();
  v32 = a3;
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(v31, v30, v15);
  a3 = v32;
  v17 = *(int *)(v9 + 28);
  v18 = (_QWORD *)((char *)v7 + v17);
  v19 = (_QWORD *)((char *)v8 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  v20 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56);
  swift_bridgeObjectRetain();
  v20(v7, 0, 1, v9);
LABEL_7:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 52)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 52));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for FMIPItemGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v7 = *(int *)(a3 + 48);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + 56) = v6;
  v10 = type metadata accessor for FMIPItemLostModeMetadata();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_1CCA14E90(&qword_1ED8A8CD0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = v9[1];
    *v8 = *v9;
    v8[1] = v13;
    v14 = *(int *)(v10 + 24);
    v15 = (char *)v8 + v14;
    v16 = (char *)v9 + v14;
    v17 = sub_1CCB635B0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    *(_OWORD *)((char *)v8 + *(int *)(v10 + 28)) = *(_OWORD *)((char *)v9 + *(int *)(v10 + 28));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 52)) = *(_QWORD *)(a2 + *(int *)(a3 + 52));
  return a1;
}

uint64_t assignWithTake for FMIPItemGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *, uint64_t, uint64_t);
  int v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 48);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for FMIPItemLostModeMetadata();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v23 = v10[1];
      *v9 = *v10;
      v9[1] = v23;
      swift_bridgeObjectRelease();
      v24 = v10[3];
      v9[2] = v10[2];
      v9[3] = v24;
      swift_bridgeObjectRelease();
      v25 = *(int *)(v11 + 24);
      v26 = (char *)v9 + v25;
      v27 = (char *)v10 + v25;
      v28 = sub_1CCB635B0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v26, v27, v28);
      v29 = *(int *)(v11 + 28);
      v30 = (_QWORD *)((char *)v9 + v29);
      v31 = (_QWORD *)((char *)v10 + v29);
      v33 = *v31;
      v32 = v31[1];
      *v30 = v33;
      v30[1] = v32;
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    sub_1CCA0BF30((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemLostModeMetadata);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v21 = sub_1CCA14E90(&qword_1ED8A8CD0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v16 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v16;
  v17 = *(int *)(v11 + 24);
  v18 = (char *)v9 + v17;
  v19 = (char *)v10 + v17;
  v20 = sub_1CCB635B0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  *(_OWORD *)((char *)v9 + *(int *)(v11 + 28)) = *(_OWORD *)((char *)v10 + *(int *)(v11 + 28));
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *(_QWORD *)(a1 + *(int *)(a3 + 52)) = *(_QWORD *)(a2 + *(int *)(a3 + 52));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1CCA7C4B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1CCA14E90(&qword_1ED8A8CD0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t sub_1CCA7C530(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_1CCA14E90(&qword_1ED8A8CD0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPItemGroup.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPItemGroup.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1CCA7C684 + 4 * byte_1CCB6AC33[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1CCA7C6B8 + 4 * byte_1CCB6AC2E[v4]))();
}

uint64_t sub_1CCA7C6B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA7C6C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA7C6C8);
  return result;
}

uint64_t sub_1CCA7C6D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA7C6DCLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1CCA7C6E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA7C6E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t sub_1CCA7C6F8()
{
  unint64_t result;

  result = qword_1EF9E1E10;
  if (!qword_1EF9E1E10)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6ADE4, &type metadata for FMIPItemGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E1E10);
  }
  return result;
}

uint64_t sub_1CCA7C73C()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 0xA)
    return 10;
  else
    return v0;
}

uint64_t sub_1CCA7C784@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1CCA70020(a1, a2, *(void **)(v3 + 16), a3);
}

void sub_1CCA7C78C(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  sub_1CCA70124(a1, a2, a3, *(void **)(v4 + 16), a4);
}

uint64_t sub_1CCA7C794(uint64_t a1)
{
  uint64_t v1;
  char v2;

  sub_1CCA79610(a1, *(_QWORD *)(v1 + 16));
  return v2 & 1;
}

uint64_t sub_1CCA7C7B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[4];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1CCA14E90(&qword_1EF9E1E70);
    v3 = sub_1CCB63F94();
    v4 = 0;
    v5 = v3 + 56;
    v21 = a1 + 32;
    while (1)
    {
      v6 = *(_QWORD *)(v21 + 8 * v4);
      sub_1CCB6433C();
      swift_bridgeObjectRetain();
      sub_1CCA79D54(v22, v6);
      result = sub_1CCB64384();
      v8 = -1 << *(_BYTE *)(v3 + 32);
      v9 = result & ~v8;
      v10 = v9 >> 6;
      v11 = *(_QWORD *)(v5 + 8 * (v9 >> 6));
      v12 = 1 << v9;
      if (((1 << v9) & v11) != 0)
      {
        v13 = swift_bridgeObjectRetain();
        v14 = sub_1CCA0B01C(v13, v6);
        result = swift_bridgeObjectRelease();
        if ((v14 & 1) != 0)
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v15 = ~v8;
        while (1)
        {
          v9 = (v9 + 1) & v15;
          v10 = v9 >> 6;
          v11 = *(_QWORD *)(v5 + 8 * (v9 >> 6));
          v12 = 1 << v9;
          if ((v11 & (1 << v9)) == 0)
            break;
          v16 = swift_bridgeObjectRetain();
          v17 = sub_1CCA0B01C(v16, v6);
          result = swift_bridgeObjectRelease();
          if ((v17 & 1) != 0)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v10) = v12 | v11;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v9) = v6;
      v18 = *(_QWORD *)(v3 + 16);
      v19 = __OFADD__(v18, 1);
      v20 = v18 + 1;
      if (v19)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v20;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

unint64_t sub_1CCA7C940()
{
  unint64_t result;

  result = qword_1EF9E1E88;
  if (!qword_1EF9E1E88)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPPlaySoundChannels, &type metadata for FMIPPlaySoundChannels);
    atomic_store(result, (unint64_t *)&qword_1EF9E1E88);
  }
  return result;
}

unint64_t sub_1CCA7C984()
{
  unint64_t result;

  result = qword_1EF9E1EA0;
  if (!qword_1EF9E1EA0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPPartType, &type metadata for FMIPPartType);
    atomic_store(result, (unint64_t *)&qword_1EF9E1EA0);
  }
  return result;
}

uint64_t sub_1CCA7C9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1CCA7C9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1CCA7CA28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF9DF598;
  if (!qword_1EF9DF598)
  {
    v1 = sub_1CC9C30A8(255, &qword_1EF9DF590);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EF9DF598);
  }
  return result;
}

uint64_t sub_1CCA7CA80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1CCA14E90(&qword_1EF9E1E80);
    v3 = sub_1CCB63F94();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_1CCB6433C();
      swift_bridgeObjectRetain();
      sub_1CCB639F4();
      result = sub_1CCB64384();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_1CCB642A0(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_1CCB642A0();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1CCA7CC20(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1CCA19B38(a2);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEB3C0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CCA7CC60(_QWORD *a1)
{
  swift_allocObject();
  return sub_1CCA7CCA8(a1);
}

uint64_t sub_1CCA7CCA8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD v20[2];
  uint8_t *v21;
  uint64_t v22;
  os_log_t v23;
  uint64_t v24[5];
  uint64_t v25;

  v3 = v1;
  v5 = sub_1CCA14E90(&qword_1ED8A7F68);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 56) = 0;
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA2296C();
  swift_retain();
  sub_1CCB643B4();
  if (v2)
  {
    swift_release();
    sub_1CCA01CA0((uint64_t)a1);
    swift_bridgeObjectRelease();
    type metadata accessor for FMIPRefreshClientResponse();
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_1CCA14E90(&qword_1ED8A7E80);
    LOBYTE(v25) = 4;
    sub_1CCA1FB68();
    sub_1CCB64180();
    *(_QWORD *)(v1 + 56) = v24[0];
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CC9EBC94((uint64_t)a1, (uint64_t)v24);
    v3 = sub_1CC9CA3D0(v24);
    v9 = qword_1ED8AA630;
    swift_retain();
    if (v9 != -1)
      swift_once();
    v10 = sub_1CCB637FC();
    sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
    swift_retain_n();
    v11 = sub_1CCB637D8();
    v12 = sub_1CCB63D48();
    if (os_log_type_enabled(v11, v12))
    {
      v23 = v11;
      v13 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v24[0] = v22;
      v21 = v13;
      *(_DWORD *)v13 = 136315138;
      v20[1] = v13 + 4;
      v14 = sub_1CC9E67E4();
      v25 = sub_1CCA0CB60(v14, v15, v24);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      v11 = v23;
      v16 = v12;
      v17 = v21;
      _os_log_impl(&dword_1CC9BF000, v23, v16, "FMIPInitClientResponse: initialized with coder %s", v21, 0xCu);
      v18 = v22;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v18, -1, -1);
      MEMORY[0x1D17B214C](v17, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1CCA01CA0((uint64_t)a1);
    swift_release();
  }
  return v3;
}

uint64_t sub_1CCA7D014(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1CC9C23B4(&qword_1EF9E1FE8, a2, (uint64_t (*)(uint64_t))type metadata accessor for FMIPRefreshClientResponse, (uint64_t)&unk_1CCB6AF1C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t FMIPDiscoveredAccessory.defaultRole.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  return sub_1CCA7C9C8(v2, v3, v4);
}

uint64_t FMIPDiscoveredAccessory.productInformation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for FMIPDiscoveredAccessory() + 24);
  return sub_1CCA35854(v3, a1);
}

void FMIPDiscoveredAccessory.identifier.getter()
{
  id *v0;
  id v1;

  v1 = objc_msgSend(*v0, sel_identifier);
  sub_1CCB635EC();

}

uint64_t FMIPDiscoveredAccessory.displayName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = sub_1CCA14E90(&qword_1EF9DFB90);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FMIPDiscoveredAccessory();
  sub_1CCA35854(v0 + *(int *)(v4 + 24), (uint64_t)v3);
  v5 = type metadata accessor for FMIPHawkeyeProductInformation();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1CC9C3E84((uint64_t)v3, &qword_1EF9DFB90);
    return 0x726F737365636341;
  }
  else
  {
    v6 = *((_QWORD *)v3 + 2);
    swift_bridgeObjectRetain();
    sub_1CCA7D1CC((uint64_t)v3);
  }
  return v6;
}

uint64_t sub_1CCA7D1CC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FMIPHawkeyeProductInformation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id FMIPDiscoveredAccessory.displayType.getter()
{
  id *v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  v1 = objc_msgSend(*v0, sel_productInformation);
  v2 = v1;
  if (!v1)
    return 0;
  v3 = objc_msgSend(v1, sel_defaultRole);

  if (v3)
  {
    v4 = objc_msgSend(v3, sel_role);

    v3 = (id)sub_1CCB63988();
  }
  return v3;
}

uint64_t FMIPDiscoveredAccessory.batteryReplacementURL.getter@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(*v1, sel_productInformation);
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, sel_lowBatteryInfoURL);

    if (v8)
    {
      sub_1CCB6346C();

      v9 = sub_1CCB63490();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v5, 0, 1, v9);
    }
    else
    {
      v12 = sub_1CCB63490();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 1, 1, v12);
    }
    return sub_1CCA24AA4((uint64_t)v5, a1);
  }
  else
  {
    v10 = sub_1CCB63490();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
}

id FMIPDiscoveredAccessory.isEligibleForPairing.getter()
{
  id *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(*v0, sel_productInformation);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, sel_eligibleForPairing);

  return v3;
}

id FMIPDiscoveredAccessory.capabilities.getter()
{
  id *v0;
  id result;
  void *v2;
  id v3;

  result = objc_msgSend(*v0, sel_productInformation);
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel_capabilities);

    return v3;
  }
  return result;
}

uint64_t FMIPDiscoveredAccessory.hash(into:)()
{
  id *v0;
  id *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for FMIPHawkeyeProductInformation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1EF9DFB90);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v0;
  sub_1CCB63DFC();

  v10 = (uint64_t)v1[3];
  if (v10)
  {
    v16 = v3;
    v17 = v2;
    v11 = (uint64_t)v1[1];
    v12 = (uint64_t)v1[2];
    sub_1CCB64354();
    sub_1CCB64348();
    sub_1CCA7C9C8(v11, v12, v10);
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
    v13 = v11;
    v3 = v16;
    v2 = v17;
    sub_1CCA7C9F8(v13, v12, v10);
  }
  else
  {
    sub_1CCB64354();
  }
  v14 = type metadata accessor for FMIPDiscoveredAccessory();
  sub_1CCA35854((uint64_t)v1 + *(int *)(v14 + 24), (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
    return sub_1CCB64354();
  sub_1CCA7D744((uint64_t)v8, (uint64_t)v5);
  sub_1CCB64354();
  FMIPHawkeyeProductInformation.hash(into:)();
  return sub_1CCA7D1CC((uint64_t)v5);
}

uint64_t FMIPDiscoveredAccessory.hashValue.getter()
{
  sub_1CCB6433C();
  FMIPDiscoveredAccessory.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCA7D6C8()
{
  sub_1CCB6433C();
  FMIPDiscoveredAccessory.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCA7D708()
{
  sub_1CCB6433C();
  FMIPDiscoveredAccessory.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCA7D744(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPHawkeyeProductInformation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL _s8FMIPCore23FMIPDiscoveredAccessoryV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  _BOOL8 result;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;

  v52 = type metadata accessor for FMIPHawkeyeProductInformation();
  v4 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1EF9DFC38);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCA14E90(&qword_1EF9DFB90);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v45 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v45 - v17;
  sub_1CCA5AA94();
  if ((sub_1CCB63DF0() & 1) == 0)
    return 0;
  v47 = v7;
  v48 = v4;
  v50 = v9;
  v51 = v16;
  v49 = v18;
  v45 = v6;
  v46 = v13;
  v20 = a1[1];
  v19 = a1[2];
  v21 = a1[3];
  v23 = a2[1];
  v22 = a2[2];
  v24 = a2[3];
  if (!v21)
  {
    if (!v24)
      goto LABEL_13;
LABEL_17:
    v40 = v19;
    v41 = v22;
    sub_1CCA7C9C8(v23, v22, v24);
    sub_1CCA7C9F8(v20, v40, v21);
    sub_1CCA7C9F8(v23, v41, v24);
    return 0;
  }
  if (!v24)
  {
    v38 = a2[2];
    v39 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = v39;
    v22 = v38;
    goto LABEL_17;
  }
  if (v20 != v23)
    return 0;
  if (a1[4] == a2[4] && a1[5] == a2[5]
    || (v25 = a1[2], v26 = a2[2], v27 = sub_1CCB642A0(), v19 = v25, v22 = v26, v28 = v27, result = 0, (v28 & 1) != 0))
  {
    if (v19 == v22 && v21 == v24 || (v30 = sub_1CCB642A0(), result = 0, (v30 & 1) != 0))
    {
LABEL_13:
      v31 = type metadata accessor for FMIPDiscoveredAccessory();
      v32 = (uint64_t)v49;
      sub_1CCA35854((uint64_t)a1 + *(int *)(v31 + 24), (uint64_t)v49);
      v33 = (uint64_t)v51;
      sub_1CCA35854((uint64_t)a2 + *(int *)(v31 + 24), (uint64_t)v51);
      v34 = (uint64_t)v50;
      v35 = (uint64_t)&v50[*(int *)(v47 + 48)];
      sub_1CCA35854(v32, (uint64_t)v50);
      sub_1CCA35854(v33, v35);
      v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
      v37 = v52;
      if (v36(v34, 1, v52) == 1)
      {
        sub_1CC9C3E84(v33, &qword_1EF9DFB90);
        sub_1CC9C3E84(v32, &qword_1EF9DFB90);
        if (v36(v35, 1, v37) == 1)
        {
          sub_1CC9C3E84(v34, &qword_1EF9DFB90);
          return 1;
        }
        goto LABEL_20;
      }
      v42 = (uint64_t)v46;
      sub_1CCA35854(v34, (uint64_t)v46);
      if (v36(v35, 1, v37) == 1)
      {
        sub_1CC9C3E84((uint64_t)v51, &qword_1EF9DFB90);
        sub_1CC9C3E84(v32, &qword_1EF9DFB90);
        sub_1CCA7D1CC(v42);
LABEL_20:
        sub_1CC9C3E84(v34, &qword_1EF9DFC38);
        return 0;
      }
      v43 = (uint64_t)v45;
      sub_1CCA7D744(v35, (uint64_t)v45);
      v44 = _s8FMIPCore29FMIPHawkeyeProductInformationV2eeoiySbAC_ACtFZ_0(v42, v43);
      sub_1CCA7D1CC(v43);
      sub_1CC9C3E84((uint64_t)v51, &qword_1EF9DFB90);
      sub_1CC9C3E84(v32, &qword_1EF9DFB90);
      sub_1CCA7D1CC(v42);
      sub_1CC9C3E84(v34, &qword_1EF9DFB90);
      return (v44 & 1) != 0;
    }
  }
  return result;
}

unint64_t sub_1CCA7DBA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF9E1FF0;
  if (!qword_1EF9E1FF0)
  {
    v1 = type metadata accessor for FMIPDiscoveredAccessory();
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDiscoveredAccessory, v1);
    atomic_store(result, (unint64_t *)&qword_1EF9E1FF0);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for FMIPDiscoveredAccessory(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  _OWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v26;
  char *v27;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    v8 = a2[3];
    v9 = v5;
    if (v8)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      v10 = a2[4];
      v11 = a2[5];
      *((_QWORD *)a1 + 3) = v8;
      *((_QWORD *)a1 + 4) = v10;
      *((_QWORD *)a1 + 5) = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v12 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 24) = v12;
      *((_QWORD *)a1 + 5) = a2[5];
    }
    v13 = *(int *)(a3 + 24);
    v14 = &a1[v13];
    v15 = (_OWORD *)((char *)a2 + v13);
    v16 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
    v17 = *((_QWORD *)v16 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_1CCA14E90(&qword_1EF9DFB90);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v14 = *v15;
      v19 = *((_QWORD *)v15 + 3);
      *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
      *((_QWORD *)v14 + 3) = v19;
      v20 = *((_QWORD *)v15 + 5);
      *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
      *((_QWORD *)v14 + 5) = v20;
      v21 = *((_QWORD *)v15 + 7);
      *((_QWORD *)v14 + 6) = *((_QWORD *)v15 + 6);
      *((_QWORD *)v14 + 7) = v21;
      *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);
      v14[72] = *((_BYTE *)v15 + 72);
      v14[73] = *((_BYTE *)v15 + 73);
      v22 = v16[12];
      v26 = (char *)v15 + v22;
      v27 = &v14[v22];
      v23 = sub_1CCB63490();
      v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v24(v27, v26, v23);
      v24(&v14[v16[13]], (char *)v15 + v16[13], v23);
      v24(&v14[v16[14]], (char *)v15 + v16[14], v23);
      v24(&v14[v16[15]], (char *)v15 + v16[15], v23);
      v24(&v14[v16[16]], (char *)v15 + v16[16], v23);
      v24(&v14[v16[17]], (char *)v15 + v16[17], v23);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return a1;
}

uint64_t destroy for FMIPDiscoveredAccessory(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  if (*(_QWORD *)(a1 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(a2 + 24);
  v5 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v4 + v5[12];
    v8 = sub_1CCB63490();
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v9(v7, v8);
    v9(v4 + v5[13], v8);
    v9(v4 + v5[14], v8);
    v9(v4 + v5[15], v8);
    v9(v4 + v5[16], v8);
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v4 + v5[17], v8);
  }
  return result;
}

uint64_t initializeWithCopy for FMIPDiscoveredAccessory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v26;
  char *v27;

  v6 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = a1 + 8;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = v6;
  if (v8)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)v7 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(v7 + 16) = v12;
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 + 40);
  }
  v13 = *(int *)(a3 + 24);
  v14 = (_OWORD *)(a1 + v13);
  v15 = (_OWORD *)(a2 + v13);
  v16 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
  v17 = *((_QWORD *)v16 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_1CCA14E90(&qword_1EF9DFB90);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    v19 = *((_QWORD *)v15 + 3);
    *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
    *((_QWORD *)v14 + 3) = v19;
    v20 = *((_QWORD *)v15 + 5);
    *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
    *((_QWORD *)v14 + 5) = v20;
    v21 = *((_QWORD *)v15 + 7);
    *((_QWORD *)v14 + 6) = *((_QWORD *)v15 + 6);
    *((_QWORD *)v14 + 7) = v21;
    *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);
    *((_BYTE *)v14 + 72) = *((_BYTE *)v15 + 72);
    *((_BYTE *)v14 + 73) = *((_BYTE *)v15 + 73);
    v22 = v16[12];
    v26 = (char *)v15 + v22;
    v27 = (char *)v14 + v22;
    v23 = sub_1CCB63490();
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24(v27, v26, v23);
    v24((char *)v14 + v16[13], (char *)v15 + v16[13], v23);
    v24((char *)v14 + v16[14], (char *)v15 + v16[14], v23);
    v24((char *)v14 + v16[15], (char *)v15 + v16[15], v23);
    v24((char *)v14 + v16[16], (char *)v15 + v16[16], v23);
    v24((char *)v14 + v16[17], (char *)v15 + v16[17], v23);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithCopy for FMIPDiscoveredAccessory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, int *);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = (_OWORD *)(a1 + 8);
  v10 = (_OWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v11)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1CCA7E51C(a1 + 8);
      v12 = *(_QWORD *)(a2 + 40);
      v13 = *(_OWORD *)(a2 + 24);
      *v9 = *v10;
      *(_OWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 40) = v12;
    }
  }
  else if (v11)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v14 = *v10;
    v15 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *v9 = v14;
    *(_OWORD *)(a1 + 24) = v15;
  }
  v16 = *(int *)(a3 + 24);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
  v20 = *((_QWORD *)v19 - 1);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
      *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
      *(_QWORD *)(v17 + 40) = *(_QWORD *)(v18 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 48) = *(_QWORD *)(v18 + 48);
      *(_QWORD *)(v17 + 56) = *(_QWORD *)(v18 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 64) = *(_QWORD *)(v18 + 64);
      *(_BYTE *)(v17 + 72) = *(_BYTE *)(v18 + 72);
      *(_BYTE *)(v17 + 73) = *(_BYTE *)(v18 + 73);
      v29 = v19[12];
      v30 = v17 + v29;
      v31 = v18 + v29;
      v32 = sub_1CCB63490();
      v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 24);
      v33(v30, v31, v32);
      v33(v17 + v19[13], v18 + v19[13], v32);
      v33(v17 + v19[14], v18 + v19[14], v32);
      v33(v17 + v19[15], v18 + v19[15], v32);
      v33(v17 + v19[16], v18 + v19[16], v32);
      v33(v17 + v19[17], v18 + v19[17], v32);
      return a1;
    }
    sub_1CCA7D1CC(v17);
    goto LABEL_13;
  }
  if (v23)
  {
LABEL_13:
    v27 = sub_1CCA14E90(&qword_1EF9DFB90);
    memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 24);
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
  *(_QWORD *)(v17 + 40) = *(_QWORD *)(v18 + 40);
  *(_QWORD *)(v17 + 48) = *(_QWORD *)(v18 + 48);
  *(_QWORD *)(v17 + 56) = *(_QWORD *)(v18 + 56);
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(v18 + 64);
  *(_BYTE *)(v17 + 72) = *(_BYTE *)(v18 + 72);
  *(_BYTE *)(v17 + 73) = *(_BYTE *)(v18 + 73);
  v24 = v19[12];
  v34 = v18 + v24;
  v35 = v17 + v24;
  v25 = sub_1CCB63490();
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26(v35, v34, v25);
  v26(v17 + v19[13], v18 + v19[13], v25);
  v26(v17 + v19[14], v18 + v19[14], v25);
  v26(v17 + v19[15], v18 + v19[15], v25);
  v26(v17 + v19[16], v18 + v19[16], v25);
  v26(v17 + v19[17], v18 + v19[17], v25);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t sub_1CCA7E51C(uint64_t a1)
{
  destroy for FMIPItemRole();
  return a1;
}

uint64_t initializeWithTake for FMIPDiscoveredAccessory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 24);
  v5 = (_OWORD *)(a1 + v4);
  v6 = (_OWORD *)(a2 + v4);
  v7 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_1CCA14E90(&qword_1EF9DFB90);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = v6[1];
    *v5 = *v6;
    v5[1] = v10;
    v11 = v6[3];
    v5[2] = v6[2];
    v5[3] = v11;
    *((_QWORD *)v5 + 8) = *((_QWORD *)v6 + 8);
    *((_WORD *)v5 + 36) = *((_WORD *)v6 + 36);
    v12 = v7[12];
    v13 = (char *)v5 + v12;
    v14 = (char *)v6 + v12;
    v15 = sub_1CCB63490();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
    v16(v13, v14, v15);
    v16((char *)v5 + v7[13], (char *)v6 + v7[13], v15);
    v16((char *)v5 + v7[14], (char *)v6 + v7[14], v15);
    v16((char *)v5 + v7[15], (char *)v6 + v7[15], v15);
    v16((char *)v5 + v7[16], (char *)v6 + v7[16], v15);
    v16((char *)v5 + v7[17], (char *)v6 + v7[17], v15);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for FMIPDiscoveredAccessory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, int *);
  int v16;
  int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  if (*(_QWORD *)(a1 + 24))
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (v7)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = v7;
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1CCA7E51C(a1 + 8);
  }
  v9 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_6:
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      *(_OWORD *)v11 = *(_OWORD *)v12;
      v27 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(v11 + 24) = v27;
      swift_bridgeObjectRelease();
      v28 = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
      *(_QWORD *)(v11 + 40) = v28;
      swift_bridgeObjectRelease();
      v29 = *(_QWORD *)(v12 + 56);
      *(_QWORD *)(v11 + 48) = *(_QWORD *)(v12 + 48);
      *(_QWORD *)(v11 + 56) = v29;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v11 + 64) = *(_QWORD *)(v12 + 64);
      *(_BYTE *)(v11 + 72) = *(_BYTE *)(v12 + 72);
      *(_BYTE *)(v11 + 73) = *(_BYTE *)(v12 + 73);
      v30 = v13[12];
      v31 = v11 + v30;
      v32 = v12 + v30;
      v33 = sub_1CCB63490();
      v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 40);
      v34(v31, v32, v33);
      v34(v11 + v13[13], v12 + v13[13], v33);
      v34(v11 + v13[14], v12 + v13[14], v33);
      v34(v11 + v13[15], v12 + v13[15], v33);
      v34(v11 + v13[16], v12 + v13[16], v33);
      v34(v11 + v13[17], v12 + v13[17], v33);
      return a1;
    }
    sub_1CCA7D1CC(v11);
    goto LABEL_11;
  }
  if (v17)
  {
LABEL_11:
    v25 = sub_1CCA14E90(&qword_1EF9DFB90);
    memcpy((void *)v11, (const void *)v12, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  v18 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v18;
  v19 = *(_OWORD *)(v12 + 48);
  *(_OWORD *)(v11 + 32) = *(_OWORD *)(v12 + 32);
  *(_OWORD *)(v11 + 48) = v19;
  *(_QWORD *)(v11 + 64) = *(_QWORD *)(v12 + 64);
  *(_WORD *)(v11 + 72) = *(_WORD *)(v12 + 72);
  v20 = v13[12];
  v21 = v11 + v20;
  v22 = v12 + v20;
  v23 = sub_1CCB63490();
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32);
  v24(v21, v22, v23);
  v24(v11 + v13[13], v12 + v13[13], v23);
  v24(v11 + v13[14], v12 + v13[14], v23);
  v24(v11 + v13[15], v12 + v13[15], v23);
  v24(v11 + v13[16], v12 + v13[16], v23);
  v24(v11 + v13[17], v12 + v13[17], v23);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPDiscoveredAccessory()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCA7E9BC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1CCA14E90(&qword_1EF9DFB90);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FMIPDiscoveredAccessory()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1CCA7EA48(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1CCA14E90(&qword_1EF9DFB90);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t dispatch thunk of FMIPAuthenticationUIProvider.authenticationUIProvider(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

id sub_1CCA7EAC8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_1CCA5AA94();
    v4 = (void *)sub_1CCB638C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

FMIPCore::FMIPRangingEventType_optional __swiftcall FMIPRangingEventType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  FMIPCore::FMIPRangingEventType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t FMIPRangingEventType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x72656E776FLL;
}

uint64_t sub_1CCA7EBD8(char *a1, char *a2)
{
  return sub_1CCB1CDA8(*a1, *a2);
}

uint64_t sub_1CCA7EBE4()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA7EC64()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA7ECC0()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPRangingEventType_optional sub_1CCA7ED3C(Swift::String *a1)
{
  return FMIPRangingEventType.init(rawValue:)(*a1);
}

void sub_1CCA7ED48(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x72656E776FLL;
  if (*v1)
    v2 = 0xD000000000000010;
  v3 = 0x80000001CCB77860;
  if (!*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void static FMIPAnalytics.sendRangingEventAnalytics(eventType:)(char *a1)
{
  char v1;
  void *v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[6];

  v1 = *a1;
  v2 = (void *)sub_1CCB63964();
  v3 = swift_allocObject();
  *(_BYTE *)(v3 + 16) = v1;
  v5[4] = sub_1CCA7EF14;
  v5[5] = v3;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1107296256;
  v5[2] = sub_1CCA7EAC8;
  v5[3] = &unk_1E88F57F0;
  v4 = _Block_copy(v5);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v4);

}

unint64_t sub_1CCA7EE48()
{
  unint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;

  v0 = sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
  v1 = sub_1CCB63964();
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50(v1, 1701869940, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1CCA7EF04()
{
  return swift_deallocObject();
}

unint64_t sub_1CCA7EF14()
{
  return sub_1CCA7EE48();
}

unint64_t sub_1CCA7EF20()
{
  unint64_t result;

  result = qword_1EF9E2090;
  if (!qword_1EF9E2090)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPRangingEventType, &type metadata for FMIPRangingEventType);
    atomic_store(result, (unint64_t *)&qword_1EF9E2090);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPRangingEventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCA7EFB0 + 4 * byte_1CCB6B055[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCA7EFE4 + 4 * byte_1CCB6B050[v4]))();
}

uint64_t sub_1CCA7EFE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA7EFEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA7EFF4);
  return result;
}

uint64_t sub_1CCA7F000(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA7F008);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCA7F00C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA7F014(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPRangingEventType()
{
  return &type metadata for FMIPRangingEventType;
}

id sub_1CCA7F030()
{
  id v0;
  id result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  result = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  qword_1EF9E2098 = (uint64_t)v0;
  unk_1EF9E20A0 = result;
  return result;
}

id static FMUserDefaults.shared.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v6;

  if (qword_1EF9DEF80 != -1)
    swift_once();
  v3 = (void *)qword_1EF9E2098;
  v2 = unk_1EF9E20A0;
  v6 = (id)unk_1EF9E20A0;
  *a1 = qword_1EF9E2098;
  a1[1] = v2;
  v4 = v3;
  return v6;
}

Swift::Bool __swiftcall FMUserDefaults.BOOL(for:)(Swift::String a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  unsigned __int8 v4;

  v2 = *(void **)(v1 + 8);
  if (!objc_msgSend(*(id *)v1, sel_isInternalBuild))
    return 0;
  v3 = (void *)sub_1CCB63964();
  v4 = objc_msgSend(v2, sel_BOOLForKey_, v3);

  return v4;
}

Swift::String_optional __swiftcall FMUserDefaults.string(for:)(Swift::String a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  Swift::String_optional result;

  v2 = *(void **)(v1 + 8);
  if (objc_msgSend(*(id *)v1, sel_isInternalBuild)
    && (v3 = (void *)sub_1CCB63964(),
        v4 = objc_msgSend(v2, sel_stringForKey_, v3),
        v3,
        v4))
  {
    v5 = sub_1CCB63988();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  v8 = v5;
  v9 = v7;
  result.value._object = v9;
  result.value._countAndFlagsBits = v8;
  return result;
}

Swift::Int_optional __swiftcall FMUserDefaults.int(for:)(Swift::String a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unsigned __int8 *v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  _QWORD v29[3];
  Swift::Int_optional result;

  v2 = *(void **)(v1 + 8);
  if (objc_msgSend(*(id *)v1, sel_isInternalBuild))
  {
    v3 = (void *)sub_1CCB63964();
    v4 = objc_msgSend(v2, sel_stringForKey_, v3);

    if (v4)
    {
      v5 = sub_1CCB63988();
      v7 = v6;

      v9 = HIBYTE(v7) & 0xF;
      v10 = v5 & 0xFFFFFFFFFFFFLL;
      if ((v7 & 0x2000000000000000) != 0)
        v11 = HIBYTE(v7) & 0xF;
      else
        v11 = v5 & 0xFFFFFFFFFFFFLL;
      if (v11)
      {
        if ((v7 & 0x1000000000000000) != 0)
        {
          v13 = (uint64_t)sub_1CCA3EF0C(v5, v7, 10);
          LOBYTE(v5) = v28;
LABEL_46:
          swift_bridgeObjectRelease();
          v24 = v5 & 1;
          if ((v5 & 1) != 0)
            v8 = 0;
          else
            v8 = v13;
          goto LABEL_57;
        }
        if ((v7 & 0x2000000000000000) == 0)
        {
          if ((v5 & 0x1000000000000000) != 0)
            v12 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v12 = (unsigned __int8 *)sub_1CCB6400C();
          v13 = (uint64_t)sub_1CCA3EEF8(v12, v10, 10);
          LOBYTE(v5) = v14 & 1;
          goto LABEL_46;
        }
        v29[0] = v5;
        v29[1] = v7 & 0xFFFFFFFFFFFFFFLL;
        if (v5 == 43)
        {
          if (!v9)
            goto LABEL_61;
          if (v9 == 1 || (BYTE1(v5) - 48) > 9u)
            goto LABEL_33;
          v13 = (BYTE1(v5) - 48);
          if (v9 != 2)
          {
            if ((BYTE2(v5) - 48) > 9u)
              goto LABEL_33;
            v13 = 10 * (BYTE1(v5) - 48) + (BYTE2(v5) - 48);
            v15 = v9 - 3;
            if (v15)
            {
              v16 = (unsigned __int8 *)v29 + 3;
              while (1)
              {
                v17 = *v16 - 48;
                if (v17 > 9)
                  goto LABEL_33;
                v18 = 10 * v13;
                if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63)
                  goto LABEL_33;
                v13 = v18 + v17;
                if (__OFADD__(v18, v17))
                  goto LABEL_33;
                LOBYTE(v5) = 0;
                ++v16;
                if (!--v15)
                  goto LABEL_46;
              }
            }
          }
        }
        else
        {
          if (v5 == 45)
          {
            if (v9)
            {
              if (v9 != 1 && (BYTE1(v5) - 48) <= 9u)
              {
                if (v9 == 2)
                {
                  LOBYTE(v5) = 0;
                  v13 = -(uint64_t)(BYTE1(v5) - 48);
                  goto LABEL_46;
                }
                if ((BYTE2(v5) - 48) <= 9u)
                {
                  v13 = -10 * (BYTE1(v5) - 48) - (BYTE2(v5) - 48);
                  v23 = v9 - 3;
                  if (!v23)
                    goto LABEL_45;
                  v25 = (unsigned __int8 *)v29 + 3;
                  while (1)
                  {
                    v26 = *v25 - 48;
                    if (v26 > 9)
                      break;
                    v27 = 10 * v13;
                    if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63)
                      break;
                    v13 = v27 - v26;
                    if (__OFSUB__(v27, v26))
                      break;
                    LOBYTE(v5) = 0;
                    ++v25;
                    if (!--v23)
                      goto LABEL_46;
                  }
                }
              }
LABEL_33:
              v13 = 0;
              LOBYTE(v5) = 1;
              goto LABEL_46;
            }
            __break(1u);
LABEL_61:
            __break(1u);
            goto LABEL_62;
          }
          if (!v9 || (v5 - 48) > 9u)
            goto LABEL_33;
          v13 = (v5 - 48);
          if (v9 != 1)
          {
            if ((BYTE1(v5) - 48) > 9u)
              goto LABEL_33;
            v13 = 10 * (v5 - 48) + (BYTE1(v5) - 48);
            v19 = v9 - 2;
            if (v19)
            {
              v20 = (unsigned __int8 *)v29 + 2;
              while (1)
              {
                v21 = *v20 - 48;
                if (v21 > 9)
                  goto LABEL_33;
                v22 = 10 * v13;
                if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63)
                  goto LABEL_33;
                v13 = v22 + v21;
                if (__OFADD__(v22, v21))
                  goto LABEL_33;
                LOBYTE(v5) = 0;
                ++v20;
                if (!--v19)
                  goto LABEL_46;
              }
            }
          }
        }
LABEL_45:
        LOBYTE(v5) = 0;
        goto LABEL_46;
      }
      swift_bridgeObjectRelease();
    }
  }
  v8 = 0;
  v24 = 1;
LABEL_57:
  LOBYTE(v10) = v24;
LABEL_62:
  result.is_nil = v10;
  result.value = v8;
  return result;
}

Swift::Double_optional __swiftcall FMUserDefaults.double(for:)(Swift::String a1)
{
  uint64_t v1;
  void *v2;
  double v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Bool v11;
  _BYTE *v12;
  BOOL v13;
  uint64_t v14;
  _QWORD v15[3];
  char v16;
  _BOOL8 v17;
  Swift::Double_optional result;

  v2 = *(void **)(v1 + 8);
  if (!objc_msgSend(*(id *)v1, sel_isInternalBuild)
    || (v4 = (void *)sub_1CCB63964(),
        v5 = objc_msgSend(v2, sel_stringForKey_, v4),
        v4,
        !v5))
  {
    v11 = 0;
    goto LABEL_23;
  }
  v6 = sub_1CCB63988();
  v8 = v7;

  v17 = 0;
  v10 = MEMORY[0x1E0C80A78](v9);
  if ((v8 & 0x1000000000000000) != 0 || !(v8 & 0x2000000000000000 | v6 & 0x1000000000000000))
  {
    sub_1CCB63FA0();
  }
  else
  {
    MEMORY[0x1E0C80A78](v10);
    if ((v8 & 0x2000000000000000) != 0)
    {
      v15[0] = v6;
      v15[1] = v8 & 0xFFFFFFFFFFFFFFLL;
      v13 = (v6 > 0x20u || ((0x100003E01uLL >> v6) & 1) == 0)
         && (v12 = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0
         && *v12 == 0;
      v16 = v13;
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    if ((v6 & 0x1000000000000000) != 0)
    {
      ((void (*)(_QWORD *__return_ptr, uint64_t))sub_1CCA7F860)(v15, (v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v14 = sub_1CCB6400C();
      ((void (*)(_QWORD *__return_ptr, uint64_t))sub_1CCA7F860)(v15, v14);
    }
    v16 = v15[0];
  }
  swift_bridgeObjectRelease();
LABEL_17:
  if (v16)
    v11 = v17;
  else
    v11 = 0;
LABEL_23:
  result.value = v3;
  result.is_nil = v11;
  return result;
}

void FMUserDefaults.set(value:for:)(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[3];
  uint64_t v12;

  v3 = *(void **)(v1 + 8);
  if (objc_msgSend(*(id *)v1, sel_isInternalBuild))
  {
    sub_1CC9E51FC(a1, (uint64_t)v11);
    v4 = v12;
    if (v12)
    {
      v5 = sub_1CCA04DDC(v11, v12);
      v6 = *(_QWORD *)(v4 - 8);
      MEMORY[0x1E0C80A78](v5);
      v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v6 + 16))(v8);
      v9 = sub_1CCB64294();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
      sub_1CCA01CA0((uint64_t)v11);
    }
    else
    {
      v9 = 0;
    }
    v10 = (void *)sub_1CCB63964();
    objc_msgSend(v3, sel_setValue_forKey_, v9, v10);
    swift_unknownObjectRelease();

  }
}

_BYTE *sub_1CCA7F860@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for FMUserDefaults(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for FMUserDefaults(id *a1)
{

}

uint64_t assignWithCopy for FMUserDefaults(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for FMUserDefaults(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for FMUserDefaults(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMUserDefaults(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMUserDefaults()
{
  return &type metadata for FMUserDefaults;
}

void sub_1CCA7FA4C(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

void sub_1CCA7FAC0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v9[4] = sub_1CCA80644;
  v9[5] = v6;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = sub_1CC9C37C0;
  v9[3] = &unk_1E88F5A20;
  v7 = _Block_copy(v9);
  swift_retain();
  v8 = a3;
  swift_release();
  objc_msgSend(a1, sel_currentStewieStateWithCompletion_, v7);
  _Block_release(v7);
}

uint64_t FMNetworkUtil.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t FMNetworkUtil.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FMNetworkUtil()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMNetworkUtil()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1CCA7FBD0()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD aBlock[7];

  aBlock[6] = *MEMORY[0x1E0C80C00];
  v0 = (void *)sub_1CCB63964();
  sub_1CC9F0ECC();
  v1 = (void *)sub_1CCB63D90();
  aBlock[4] = nullsub_1;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA7FA4C;
  aBlock[3] = &unk_1E88F5A48;
  v2 = _Block_copy(aBlock);
  v3 = _CTServerConnectionCreateOnTargetQueue();
  _Block_release(v2);

  if (v3)
  {
    v4 = (void *)sub_1CCB63964();
    _CTServerConnectionCopyCellularUsagePolicy();

    _CTServerConnectionGetCellularDataIsEnabled();
    if (qword_1ED8AA630 != -1)
      swift_once();
    v5 = sub_1CCB637FC();
    sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
    v6 = sub_1CCB637D8();
    v7 = sub_1CCB63D48();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v8 = 67109120;
      swift_beginAccess();
      LODWORD(aBlock[0]) = 0;
      sub_1CCB63E44();
      _os_log_impl(&dword_1CC9BF000, v6, v7, "FMNetworkUtil: Global cellular enabled? %{BOOL}d", v8, 8u);
      MEMORY[0x1D17B214C](v8, -1, -1);
    }

  }
  return 0;
}

uint64_t sub_1CCA7FF9C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  id v28;
  NSObject *v29;
  char *v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  id v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint64_t v44;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t aBlock[3];
  void *v57;
  uint64_t v58;
  _QWORD *v59;

  v50 = a1;
  v1 = sub_1CCB63880();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v54 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v46 - v5;
  v7 = sub_1CCB63820();
  v53 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB63868();
  v51 = *(_QWORD *)(v10 - 8);
  v52 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCB6382C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1CCB631E4();
  v57 = (void *)v17;
  v58 = sub_1CC9CAA38(&qword_1ED8A8B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
  v18 = sub_1CCA01CC0(aBlock);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v18, *MEMORY[0x1E0D21248], v17);
  LOBYTE(v17) = MEMORY[0x1D17B0748](aBlock);
  sub_1CCA01CA0((uint64_t)aBlock);
  if ((v17 & 1) != 0)
  {
    v19 = swift_allocObject();
    v49 = v2;
    v20 = v19;
    *(_QWORD *)(v19 + 16) = 0;
    v46 = (_QWORD *)(v19 + 16);
    v21 = dispatch_group_create();
    v48 = v6;
    v22 = v21;
    dispatch_group_enter(v21);
    sub_1CC9F0ECC();
    (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x1E0DEF540], v13);
    v23 = sub_1CCB63DC0();
    v47 = v1;
    v24 = (void *)v23;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v25 = (_QWORD *)swift_allocObject();
    v26 = v50;
    v25[2] = v50;
    v25[3] = v20;
    v25[4] = v22;
    v58 = (uint64_t)sub_1CCA8060C;
    v59 = v25;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CCA00C38;
    v57 = &unk_1E88F59D0;
    v27 = _Block_copy(aBlock);
    v28 = v26;
    swift_retain();
    v29 = v22;
    sub_1CCB63844();
    v55 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA1FC64();
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v12, v9, v27);
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v52);
    swift_release();
    v30 = v54;
    sub_1CCB63874();
    v31 = v48;
    MEMORY[0x1D17B0E08](v30, 60.0);
    v32 = *(void (**)(char *, uint64_t))(v49 + 8);
    v33 = v47;
    v32(v30, v47);
    sub_1CCB63D54();
    v32(v31, v33);
    if ((sub_1CCB63808() & 1) != 0)
    {
      if (qword_1ED8AA630 != -1)
        swift_once();
      v34 = sub_1CCB637FC();
      sub_1CCA16C20(v34, (uint64_t)qword_1ED8AD7F8);
      v35 = sub_1CCB637D8();
      v36 = sub_1CCB63D48();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v37 = 0;
        _os_log_impl(&dword_1CC9BF000, v35, v36, "FMNetworkUtil: Stewie state is unavailable (timed out after 60 secs)", v37, 2u);
        MEMORY[0x1D17B214C](v37, -1, -1);
        swift_release();

        v38 = 0;
LABEL_18:

        return v38;
      }
      swift_release();

      v38 = 0;
    }
    else
    {
      v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D201C8]), sel_init);
      v40 = objc_msgSend(v39, sel_isNetworkUp);

      v41 = v46;
      swift_beginAccess();
      if (*v41 == 7)
        v38 = 0;
      else
        v38 = v40 ^ 1;
      if (qword_1ED8AA630 != -1)
        swift_once();
      v42 = sub_1CCB637FC();
      sub_1CCA16C20(v42, (uint64_t)qword_1ED8AD7F8);
      swift_retain();
      v35 = sub_1CCB637D8();
      v43 = sub_1CCB63D48();
      if (os_log_type_enabled(v35, v43))
      {
        v44 = swift_slowAlloc();
        *(_DWORD *)v44 = 134218240;
        v55 = *(_QWORD *)(v20 + 16);
        sub_1CCB63E44();
        swift_release();
        *(_WORD *)(v44 + 12) = 1024;
        LODWORD(v55) = v38;
        sub_1CCB63E44();
        _os_log_impl(&dword_1CC9BF000, v35, v43, "FMNetworkUtil: Stewie state is %ld (available=%{BOOL}d)", (uint8_t *)v44, 0x12u);
        MEMORY[0x1D17B214C](v44, -1, -1);
        swift_release();

        goto LABEL_18;
      }

      swift_release_n();
    }
    v35 = v29;
    goto LABEL_18;
  }
  return 0;
}

uint64_t sub_1CCA805C8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA805D8()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void sub_1CCA8060C()
{
  uint64_t v0;

  sub_1CCA7FAC0(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1CCA80618()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void sub_1CCA80644(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(NSObject **)(v1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v4 + 16) = a1;
  dispatch_group_leave(v3);
}

id FMLocationShiftingRequest.location.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

_QWORD *FMLocationShiftingRequest.__allocating_init(identifier:location:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a3;
  result[3] = a1;
  result[4] = a2;
  return result;
}

_QWORD *FMLocationShiftingRequest.init(identifier:location:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[2] = a3;
  v3[3] = a1;
  v3[4] = a2;
  return v3;
}

uint64_t FMLocationShiftingRequest.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FMLocationShifter.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  FMLocationShifter.init()();
  return v0;
}

uint64_t sub_1CCA80758()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1CCA8078C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  id v22;
  _QWORD *v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t aBlock;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD *v34;

  v8 = sub_1CCB6382C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(id *)(a1 + 16);
  v12 = *(void **)(a2 + 16);
  objc_msgSend(v12, sel_coordinate);
  v14 = v13;
  objc_msgSend(v12, sel_coordinate);
  v16 = v15;
  objc_msgSend(v12, sel_horizontalAccuracy);
  v18 = v17;
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a4;
  v33 = sub_1CCA8121C;
  v34 = v19;
  v20 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v30 = 1107296256;
  v31 = sub_1CCA80E9C;
  v32 = &unk_1E88F5B60;
  v21 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  v22 = a4;
  swift_release();
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = a3;
  v23[3] = a2;
  v23[4] = v22;
  v33 = sub_1CCA81260;
  v34 = v23;
  aBlock = v20;
  v30 = 1107296256;
  v31 = sub_1CCA1F54C;
  v32 = &unk_1E88F5BB0;
  v24 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  v25 = v22;
  swift_release();
  sub_1CC9F0ECC();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF540], v8);
  v26 = (void *)sub_1CCB63DC0();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  objc_msgSend(v28, sel_shiftCoordinate_accuracy_withCompletionHandler_mustGoToNetworkCallback_errorHandler_callbackQueue_, v21, 0, v24, v26, v14, v16, v18);

  _Block_release(v24);
  _Block_release(v21);
}

uint64_t sub_1CCA809E0(uint64_t a1, uint64_t a2, void *a3, double a4, double a5, double a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v49;
  int v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54[3];

  v52 = a3;
  v11 = sub_1CCB635B0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)(a1 + 16);
  objc_msgSend(v15, sel_altitude);
  v17 = v16;
  objc_msgSend(v15, sel_verticalAccuracy);
  v19 = v18;
  objc_msgSend(v15, sel_course);
  v21 = v20;
  objc_msgSend(v15, sel_speed);
  v23 = v22;
  v24 = objc_msgSend(v15, sel_timestamp);
  sub_1CCB63580();

  v25 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
  v26 = (void *)sub_1CCB63538();
  v27 = objc_msgSend(v25, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_speed_timestamp_, v26, a4, a5, v17, a6, v19, v21, v23);

  v28 = *(void (**)(char *, uint64_t))(v12 + 8);
  v29 = a1;
  v28(v14, v11);
  objc_msgSend(v27, sel_setReferenceFrame_, 2);
  v30 = *(_QWORD *)(a1 + 24);
  v31 = *(_QWORD *)(v29 + 32);
  type metadata accessor for FMLocationShiftingRequest();
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = v27;
  v32[3] = v30;
  v32[4] = v31;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v33 = v27;
  v34 = swift_retain();
  MEMORY[0x1D17B1078](v34);
  if (*(_QWORD *)((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    sub_1CCB63B68();
  sub_1CCB63BA4();
  sub_1CCB63B50();
  swift_endAccess();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v35 = sub_1CCB637FC();
  sub_1CCA16C20(v35, (uint64_t)qword_1ED8AD7F8);
  v36 = v33;
  swift_retain_n();
  v37 = v15;
  v38 = v36;
  v39 = v37;
  v40 = sub_1CCB637D8();
  v41 = sub_1CCB63D48();
  v42 = v41;
  if (os_log_type_enabled(v40, v41))
  {
    v43 = swift_slowAlloc();
    v44 = (_QWORD *)swift_slowAlloc();
    v51 = swift_slowAlloc();
    v54[0] = v51;
    *(_DWORD *)v43 = 136315650;
    v50 = v42;
    swift_bridgeObjectRetain();
    v53 = sub_1CCA0CB60(v30, v31, v54);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2112;
    v53 = (uint64_t)v38;
    v45 = v38;
    sub_1CCB63E44();
    *v44 = v38;

    *(_WORD *)(v43 + 22) = 2112;
    v53 = (uint64_t)v39;
    v46 = v39;
    sub_1CCB63E44();
    v44[1] = v39;

    _os_log_impl(&dword_1CC9BF000, v40, (os_log_type_t)v50, "FMLocationShifter: shifting completed %s newLocation: %@ oldLocation: %@", (uint8_t *)v43, 0x20u);
    sub_1CCA14E90(&qword_1ED8A8E00);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v44, -1, -1);
    v47 = v51;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v47, -1, -1);
    MEMORY[0x1D17B214C](v43, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  objc_msgSend(v52, sel_signal);

  return swift_release();
}

uint64_t sub_1CCA80E9C(uint64_t a1, double a2, double a3, double a4)
{
  void (*v7)(uint64_t, double, double, double);
  uint64_t v8;

  v7 = *(void (**)(uint64_t, double, double, double))(a1 + 32);
  v8 = swift_retain();
  v7(v8, a2, a3, a4);
  return swift_release();
}

id sub_1CCA80EF0(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20[3];

  if (qword_1ED8AA630 != -1)
    swift_once();
  v7 = (_QWORD *)(a2 + 16);
  v8 = sub_1CCB637FC();
  sub_1CCA16C20(v8, (uint64_t)qword_1ED8AD7F8);
  v9 = a1;
  v10 = a1;
  v11 = sub_1CCB637D8();
  v12 = sub_1CCB63D30();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v20[0] = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = a1;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v16 = sub_1CCB639AC();
    sub_1CCA0CB60(v16, v17, v20);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v11, v12, "FMLocationShifter: shifting request error %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v14, -1, -1);
    MEMORY[0x1D17B214C](v13, -1, -1);
  }
  else
  {

  }
  swift_beginAccess();
  v18 = swift_retain();
  MEMORY[0x1D17B1078](v18);
  if (*(_QWORD *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1CCB63B68();
  sub_1CCB63BA4();
  sub_1CCB63B50();
  swift_endAccess();
  return objc_msgSend(a4, sel_signal);
}

id *FMLocationShifter.deinit()
{
  id *v0;

  return v0;
}

uint64_t method lookup function for FMLocationShiftingRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMLocationShiftingRequest.__allocating_init(identifier:location:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t method lookup function for FMLocationShifter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMLocationShifter.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of FMLocationShifter.shift(requests:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t sub_1CCA811AC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCA811D0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_1CCA8120C()
{
  uint64_t v0;

  sub_1CCA8078C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1CCA8121C(double a1, double a2, double a3)
{
  uint64_t v3;

  return sub_1CCA809E0(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(void **)(v3 + 32), a1, a2, a3);
}

uint64_t sub_1CCA8122C()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

id sub_1CCA81260(void *a1)
{
  uint64_t v1;

  return sub_1CCA80EF0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1CCA81284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = sub_1CCA14E90(&qword_1EF9E21F0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9 + v8, (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_1CC9F6A90(a3, (uint64_t)sub_1CCA225C8, v9);
  return swift_release();
}

uint64_t sub_1CCA81368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD __dst[44];
  uint64_t v19;

  v6 = MEMORY[0x1E0DEE9D8];
  v19 = MEMORY[0x1E0DEE9D8];
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    v8 = v7 - 1;
    for (i = 32; ; i += 352)
    {
      memcpy(__dst, (const void *)(a1 + i), sizeof(__dst));
      v10 = (void *)__dst[3];
      sub_1CCA31D3C((uint64_t)__dst);
      v11 = v10;
      if (objc_msgSend(v11, sel_referenceFrame) == 2)
      {

        sub_1CCA31E98((uint64_t)__dst);
        if (!v8)
          goto LABEL_10;
      }
      else
      {
        v12 = __dst[0];
        v13 = __dst[1];
        type metadata accessor for FMLocationShiftingRequest();
        v14 = (_QWORD *)swift_allocObject();
        v14[2] = v11;
        v14[3] = v12;
        v14[4] = v13;
        swift_bridgeObjectRetain();
        v15 = sub_1CCA31E98((uint64_t)__dst);
        MEMORY[0x1D17B1078](v15);
        if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1CCB63B68();
        sub_1CCB63BA4();
        sub_1CCB63B50();
        if (!v8)
        {
LABEL_10:
          swift_bridgeObjectRelease();
          v6 = v19;
          break;
        }
      }
      --v8;
    }
  }
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CCA1B400(v6, (uint64_t)sub_1CCA81A80, (uint64_t)v16);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1CCA81514(unint64_t a1, uint64_t a2, void (*a3)(_QWORD *))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  double v17;
  void *v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  id v39;
  _QWORD *v40;
  char v41;
  int v42;
  void *v43;
  uint64_t v44;
  _QWORD __src[44];
  _QWORD __dst[45];

  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
  {
    a3((_QWORD *)MEMORY[0x1E0DEE9D8]);
    return swift_bridgeObjectRelease();
  }
  v4 = a2;
  v5 = a1;
  if (a1 >> 62)
  {
LABEL_51:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = sub_1CCB64090();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v7 = 0;
  v35 = v5 & 0xC000000000000001;
  v36 = v4 + 32;
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v33 = v3;
  v34 = v5;
  v32 = v6;
  do
  {
    memcpy(__dst, (const void *)(v36 + 352 * v7), 0x160uLL);
    if (v6)
    {
      v40 = v8;
      if (v35)
      {
        swift_bridgeObjectRetain();
        sub_1CCA31D3C((uint64_t)__dst);
        v9 = (_QWORD *)MEMORY[0x1D17B154C](0, v5);
      }
      else
      {
        v9 = *(_QWORD **)(v5 + 32);
        swift_bridgeObjectRetain();
        sub_1CCA31D3C((uint64_t)__dst);
        swift_retain();
      }
      v10 = __dst[0];
      v11 = __dst[1];
      if (v9[3] == __dst[0] && v9[4] == __dst[1] || (sub_1CCB642A0() & 1) != 0)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        v38 = __dst[42];
        v12 = __dst[43];
        v37 = BYTE1(__dst[41]);
        v13 = __dst[41];
        v14 = __dst[2];
        v15 = BYTE1(__dst[2]);
        v16 = BYTE2(__dst[2]);
        v17 = *(double *)&__dst[4];
        v18 = (void *)v9[2];
        v41 = BYTE3(__dst[2]);
        v39 = (id)__dst[3];
        sub_1CC9FB3D4(v18, &v41, v14, v15, v16, (uint64_t)&v42, v17);
        v19 = v43;
        __src[0] = v10;
        __src[1] = v11;
        LODWORD(__src[2]) = v42;
        __src[3] = v43;
        __src[4] = v44;
        sub_1CCA30754((uint64_t)&__dst[5], (uint64_t)&__src[5]);
        LOBYTE(__src[41]) = v13;
        BYTE1(__src[41]) = v37;
        __src[42] = v38;
        __src[43] = v12;
        v20 = v19;
        swift_bridgeObjectRetain();
        sub_1CCA81A8C(&__dst[5]);
        swift_bridgeObjectRetain();
        sub_1CCA31D3C((uint64_t)__src);
        v8 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = sub_1CCAC9CF0(0, v40[2] + 1, 1, v40);
        v6 = v32;
        v3 = v33;
        v22 = v8[2];
        v21 = v8[3];
        if (v22 >= v21 >> 1)
          v8 = sub_1CCAC9CF0((_QWORD *)(v21 > 1), v22 + 1, 1, v8);
        v8[2] = v22 + 1;
        memcpy(&v8[44 * v22 + 4], __src, 0x160uLL);

        sub_1CCA31E98((uint64_t)__src);
        swift_release();
        sub_1CCA31E98((uint64_t)__dst);
        v5 = v34;
        goto LABEL_6;
      }
      swift_release();
      if (v6 != 1)
      {
        if (v35)
        {
          v4 = 1;
          while (1)
          {
            v25 = MEMORY[0x1D17B154C](v4, v5);
            v26 = v4 + 1;
            if (__OFADD__(v4, 1))
              break;
            v9 = (_QWORD *)v25;
            v27 = *(_QWORD *)(v25 + 24) == v10 && *(_QWORD *)(v25 + 32) == v11;
            if (v27 || (sub_1CCB642A0() & 1) != 0)
              goto LABEL_13;
            swift_unknownObjectRelease();
            ++v4;
            if (v26 == v6)
              goto LABEL_24;
          }
          __break(1u);
        }
        else
        {
          v4 = 5;
          while (1)
          {
            v28 = v4 - 3;
            if (__OFADD__(v4 - 4, 1))
              break;
            v9 = *(_QWORD **)(v5 + 8 * v4);
            v29 = v9[3] == v10 && v9[4] == v11;
            if (v29 || (sub_1CCB642A0() & 1) != 0)
            {
              swift_retain();
              goto LABEL_13;
            }
            ++v4;
            if (v28 == v6)
              goto LABEL_24;
          }
        }
        __break(1u);
        goto LABEL_51;
      }
LABEL_24:
      swift_bridgeObjectRelease();
      v8 = v40;
    }
    else
    {
      sub_1CCA31D3C((uint64_t)__dst);
    }
    sub_1CCA31D3C((uint64_t)__dst);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = sub_1CCAC9CF0(0, v8[2] + 1, 1, v8);
    v24 = v8[2];
    v23 = v8[3];
    if (v24 >= v23 >> 1)
      v8 = sub_1CCAC9CF0((_QWORD *)(v23 > 1), v24 + 1, 1, v8);
    v8[2] = v24 + 1;
    memcpy(&v8[44 * v24 + 4], __dst, 0x160uLL);
    sub_1CCA31E98((uint64_t)__dst);
LABEL_6:
    ++v7;
  }
  while (v7 != v3);
  swift_bridgeObjectRelease();
  a3(v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA819E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1CCA14E90(&qword_1EF9E21F0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1CCA81A54()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA81A80(unint64_t a1)
{
  uint64_t v1;

  return sub_1CCA81514(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD *))(v1 + 24));
}

uint64_t *sub_1CCA81A8C(uint64_t *a1)
{
  sub_1CCA15608(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21]);
  return a1;
}

uint64_t FMIPEraseAction.isUserTextEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_isUserTextEnabled);
}

uint64_t FMIPEraseAction.message.getter()
{
  return sub_1CCA81B40(&OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_message);
}

uint64_t FMIPEraseAction.passcode.getter()
{
  return sub_1CCA81B40(&OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_passcode);
}

uint64_t FMIPEraseAction.phoneNumber.getter()
{
  return sub_1CCA81B40(&OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_phoneNumber);
}

uint64_t sub_1CCA81B40(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t FMIPEraseAction.__allocating_init(device:message:phoneNumber:passcode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;

  v14 = swift_allocObject();
  FMIPEraseAction.init(device:message:phoneNumber:passcode:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t FMIPEraseAction.init(device:message:phoneNumber:passcode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v8 = (_QWORD *)(v7 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_message);
  *v8 = a2;
  v8[1] = a3;
  v9 = (_QWORD *)(v7 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_phoneNumber);
  *v9 = a4;
  v9[1] = a5;
  v10 = (_QWORD *)(v7 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_passcode);
  *v10 = a6;
  v10[1] = a7;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_isUserTextEnabled) = a3 != 0;
  *(_QWORD *)(v7 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext) = 0;
  v11 = (_QWORD *)(v7 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  *v11 = 0;
  v11[1] = 0;
  v12 = (_QWORD *)(v7 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
  *v12 = 0;
  v12[1] = 0;
  v13 = (_QWORD *)(v7 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_username);
  *v13 = 0;
  v13[1] = 0;
  v14 = (_QWORD *)(v7 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  *v14 = 0;
  v14[1] = 0;
  v15 = (_QWORD *)(v7 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
  *v15 = 0;
  v15[1] = 0;
  *(_OWORD *)(v7 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession) = xmmword_1CCB66A50;
  sub_1CC9F73E8(a1, v7 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  return v7;
}

uint64_t static FMIPEraseAction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_message + 8);
  v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_message + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_message) == *(_QWORD *)(a2
                                                                                           + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_message)
      && v4 == v5;
    if (!v6 && (sub_1CCB642A0() & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_passcode + 8);
  v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_passcode + 8);
  if (v7)
  {
    if (!v8)
      return 0;
    v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_passcode) == *(_QWORD *)(a2
                                                                                            + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_passcode)
      && v7 == v8;
    if (!v9 && (sub_1CCB642A0() & 1) == 0)
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_phoneNumber + 8);
  v11 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_phoneNumber + 8);
  if (!v10)
  {
    if (!v11)
      goto LABEL_28;
    return 0;
  }
  if (!v11)
    return 0;
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_phoneNumber) == *(_QWORD *)(a2
                                                                                              + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_phoneNumber)
     && v10 == v11;
  if (!v12 && (sub_1CCB642A0() & 1) == 0)
    return 0;
LABEL_28:
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_isUserTextEnabled) != *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC8FMIPCore15FMIPEraseAction_isUserTextEnabled))
    return 0;
  return static FMIPDevice.== infix(_:_:)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
}

void FMIPEraseAction.__allocating_init(device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPEraseAction.init(device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CCA81E7C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t FMIPEraseAction.deinit()
{
  uint64_t v0;

  v0 = FMIPDeviceAction.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FMIPEraseAction.__deallocating_deinit()
{
  FMIPDeviceAction.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA81F90()
{
  return type metadata accessor for FMIPEraseAction();
}

uint64_t type metadata accessor for FMIPEraseAction()
{
  uint64_t result;

  result = qword_1EF9E2228;
  if (!qword_1EF9E2228)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA81FD4()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for FMIPEraseAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPEraseAction.__allocating_init(device:message:phoneNumber:passcode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 384))();
}

uint64_t FMIPPrewarmAction.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPPrewarmAction.__allocating_init(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t FMIPPrewarmAction.init(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t FMIPPrewarmAction.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FMIPPrewarmAction.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t FMIPPrewarmAction.debugDescription.getter()
{
  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CC9E6BA4();
  sub_1CCB63A9C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 60;
}

uint64_t sub_1CCA82228()
{
  return FMIPPrewarmAction.debugDescription.getter();
}

uint64_t FMIPPrewarmConnectAction.init(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t FMIPPrewarmConnectAction.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _s8FMIPCore24FMIPPrewarmConnectActionC10identifierACSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t _s8FMIPCore24FMIPPrewarmConnectActionCfD_0()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FMIPPrewarmAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMIPPrewarmAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPPrewarmAction.__allocating_init(identifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for FMIPPrewarmConnectAction()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for FMIPPrewarmDisconnectAction()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for FMIPSavePreferencesRequest()
{
  uint64_t result;

  result = qword_1EF9E25B8;
  if (!qword_1EF9E25B8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA82398()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1CCA823E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  const char *v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + qword_1EF9FF600);
  type metadata accessor for FMIPShowContactDetailsAction();
  v2 = swift_dynamicCastClass();
  v3 = MEMORY[0x1E0DEA968];
  if (v2)
  {
    v4 = *(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore28FMIPShowContactDetailsAction_enabled);
    v18 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v16) = v4;
    swift_beginAccess();
    swift_retain();
    v5 = "showContactDetails";
LABEL_3:
    v6 = (unint64_t)(v5 - 32) | 0x8000000000000000;
    sub_1CCA06650((uint64_t)&v16, 0xD000000000000012, v6);
    v18 = v3;
    v16 = 0xD000000000000012;
    v17 = v6;
    sub_1CCA06650((uint64_t)&v16, 0x79747265706F7270, 0xEF6465676E616843);
    swift_endAccess();
    swift_release();
    goto LABEL_12;
  }
  type metadata accessor for FMIPNotifyAction(0);
  v7 = swift_dynamicCastClass();
  if (v7 && *(_BYTE *)(v7 + OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_type) == 1)
  {
    v8 = *(_BYTE *)(v7 + OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_enabled);
    v18 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v16) = v8;
    swift_beginAccess();
    swift_retain();
    v5 = "notifyWhenDetached";
    goto LABEL_3;
  }
  if (qword_1ED8AA630 != -1)
    swift_once();
  v9 = sub_1CCB637FC();
  sub_1CCA16C20(v9, (uint64_t)qword_1ED8AD7F8);
  v10 = sub_1CCB637D8();
  v11 = sub_1CCB63D18();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1CC9BF000, v10, v11, "Action not supported", v12, 2u);
    MEMORY[0x1D17B214C](v12, -1, -1);
  }

LABEL_12:
  v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 8);
  v18 = v3;
  v16 = v13;
  v17 = v14;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)&v16, 0x656369766564, 0xE600000000000000);
  return swift_endAccess();
}

uint64_t sub_1CCA82694()
{
  return swift_release();
}

uint64_t sub_1CCA826A4()
{
  sub_1CC9C785C();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA826E4()
{
  return type metadata accessor for FMIPSavePreferencesRequest();
}

void sub_1CCA826EC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  double v57;
  id v58;
  char *v59;
  double v60;
  double v61;
  void (*v62)(char *, uint64_t);
  unint64_t i;
  long double v64;
  long double v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  char *v82;
  id v83;
  void *v84;
  id v85;
  uint64_t v86;
  id v87;
  id v88;
  double v89;
  double v90;
  id v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  unint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  __int128 v137;
  _OWORD v138[11];
  _BYTE v139[25];

  v126 = a2;
  v129 = sub_1CCB635B0();
  v125 = *(_QWORD *)(v129 - 8);
  MEMORY[0x1E0C80A78](v129);
  v128 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMIPDevice();
  v7 = MEMORY[0x1E0C80A78](v6);
  v131 = (uint64_t)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v127 = (char *)&v105 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (uint64_t *)((char *)&v105 - v12);
  v14 = *a1;
  v15 = a1[1];
  v16 = a1[2];
  v17 = a1[3];
  v18 = *((unsigned __int8 *)a1 + 32);
  v19 = *((unsigned __int8 *)a1 + 33);
  v20 = *((unsigned __int8 *)a1 + 34);
  v21 = *((unsigned __int8 *)a1 + 35);
  v22 = a1[5];
  v23 = a1[6];
  v24 = a1[7];
  v25 = a1[8];
  v27 = a1[9];
  v26 = a1[10];
  v28 = a1[11];
  v29 = a1[12];
  v30 = a1[13];
  v31 = *(_QWORD *)(v28 + 16);
  if (v31)
  {
    v105 = a1[9];
    v106 = v24;
    v107 = v22;
    v108 = v21;
    v109 = v20;
    v110 = v19;
    v111 = v18;
    v112 = v16;
    v113 = v14;
    v114 = v26;
    v115 = v29;
    v116 = v23;
    v117 = v15;
    v118 = v25;
    v119 = v17;
    v120 = a3;
    v122 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v134 = v28 + v122;
    v121 = (__int128 *)(v13 + 33);
    v32 = v11;
    v33 = v28;
    swift_bridgeObjectRetain();
    v34 = 0;
    v35 = MEMORY[0x1E0DEE9D8];
    v124 = v32;
    v123 = v33;
    v130 = v31;
    while (1)
    {
      if (v34 >= *(_QWORD *)(v33 + 16))
      {
        __break(1u);
        return;
      }
      v36 = *(_QWORD *)(v32 + 72);
      sub_1CC9F7368(v134 + v36 * v34, (uint64_t)v13);
      v37 = (void *)v13[33];
      if (v37)
      {
        if (*(_QWORD *)(v30 + 16))
        {
          v133 = v35;
          v38 = *v13;
          v39 = v13[1];
          v40 = v30;
          v41 = v37;
          swift_bridgeObjectRetain();
          v42 = sub_1CCA074F4(v38, v39);
          if ((v43 & 1) != 0)
          {
            v44 = v40;
            v45 = (_OWORD *)(*(_QWORD *)(v40 + 56) + 208 * v42);
            v138[0] = *v45;
            v46 = v45[3];
            v47 = v45[4];
            v48 = v45[2];
            v138[1] = v45[1];
            v138[2] = v48;
            v138[4] = v47;
            v138[3] = v46;
            v49 = v45[5];
            v50 = v45[6];
            v51 = v45[8];
            v138[7] = v45[7];
            v138[8] = v51;
            v138[6] = v50;
            v138[5] = v49;
            v52 = v45[9];
            v53 = v45[10];
            v54 = v45[11];
            *(_OWORD *)&v139[9] = *(_OWORD *)((char *)v45 + 185);
            v138[10] = v53;
            *(_OWORD *)v139 = v54;
            v138[9] = v52;
            sub_1CCA83044(v138);
            swift_bridgeObjectRelease();
            v55 = v13[27];
            LODWORD(v56) = (v55 & 0x10) == 0;
            if ((v55 & 0x10) != 0)
              v57 = 10.0;
            else
              v57 = 120.0;
            v132 = v41;
            v58 = objc_msgSend(v41, sel_timestamp);
            v59 = v128;
            sub_1CCB63580();

            sub_1CCB63520();
            v61 = v60;
            v62 = *(void (**)(char *, uint64_t))(v125 + 8);
            v62(v59, v129);
            v136 = 0;
            MEMORY[0x1D17B2164](&v136, 8);
            for (i = v136; (unint64_t)(0x20000000000001 * v136) < 0x1FFFFFFFFFF801; i = v136)
            {
              v136 = 0;
              MEMORY[0x1D17B2164](&v136, 8);
            }
            v64 = (double)((i * (unsigned __int128)0x20000000000001uLL) >> 64) * 1.11022302e-16 + 0.0;
            v65 = pow(v61 / v57, 10.0);
            v66 = (uint64_t)v127;
            v30 = v44;
            if (v64 <= v65)
              v56 = (v55 >> 4) & 1;
            v67 = v132;
            if ((v55 & 0x10) != 0)
            {
              if ((_DWORD)v56)
              {
                objc_msgSend(v132, sel_coordinate);
                v73 = v72;
                v75 = v74;
                objc_msgSend(v67, sel_altitude);
                v77 = v76;
                objc_msgSend(v67, sel_horizontalAccuracy);
                v79 = v78;
                objc_msgSend(v67, sel_verticalAccuracy);
                v81 = v80;
                v82 = v128;
                sub_1CCB635A4();
                v83 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
                v84 = (void *)sub_1CCB63538();
                v85 = objc_msgSend(v83, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_, v84, v73, v75, v77, v79, v81);

                v86 = v129;
                v62(v82, v129);
                v135 = 6;
                v87 = v85;
                v88 = objc_msgSend(v87, sel_timestamp);
                sub_1CCB63580();

                sub_1CCB6355C();
                v90 = v89;
                v62(v82, v86);
                v91 = objc_msgSend(v87, sel_floor);
                if (v91)
                {
                  v92 = v91;
                  v93 = (uint64_t)objc_msgSend(v91, sel_level);

                }
                else
                {
                  v93 = -1;
                }
                v66 = (uint64_t)v127;
                sub_1CC9FB3D4(v87, &v135, v90 < -3600.0, 0, 1, (uint64_t)&v136, (double)v93);
                v94 = (void *)v137;
                v95 = *v13;
                v96 = v13[1];
                v97 = 256;
                if (!BYTE1(v136))
                  v97 = 0;
                v98 = v97 | v136;
                v99 = 0x10000;
                if (!BYTE2(v136))
                  v99 = 0;
                v136 = v98 | v99 | ((unint64_t)BYTE3(v136) << 24);
                swift_bridgeObjectRetain();
                v100 = v94;
                sub_1CCABD0A0((uint64_t)v138, v95, v96, (unint64_t *)&v136, 0, v66, 1.0);

                goto LABEL_32;
              }
            }
            else if ((v56 & 1) == 0)
            {
              v68 = *v13;
              v69 = v13[1];
              v136 = v13[32];
              v137 = *v121;
              v70 = (id)v137;
              swift_bridgeObjectRetain();
              sub_1CCABD0A0((uint64_t)v138, v68, v69, (unint64_t *)&v136, 1, v66, 1.0);
LABEL_32:
              sub_1CC9F7368(v66, v131);
              v35 = v133;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v32 = v124;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                v35 = sub_1CCA0C178(0, *(_QWORD *)(v35 + 16) + 1, 1, v35);
              v103 = *(_QWORD *)(v35 + 16);
              v102 = *(_QWORD *)(v35 + 24);
              if (v103 >= v102 >> 1)
                v35 = sub_1CCA0C178(v102 > 1, v103 + 1, 1, v35);
              *(_QWORD *)(v35 + 16) = v103 + 1;
              sub_1CC9F73E8(v131, v35 + v122 + v103 * v36);

              sub_1CC9F73AC(v66);
              sub_1CC9F73AC((uint64_t)v13);
              v33 = v123;
              v31 = v130;
              goto LABEL_4;
            }
            sub_1CCA83160(v138);
            sub_1CC9F7368((uint64_t)v13, v66);
            goto LABEL_32;
          }
          swift_bridgeObjectRelease();
          v31 = v130;
          v35 = v133;
          v30 = v40;
        }
        else
        {
          v71 = v37;
        }
        sub_1CC9F73AC((uint64_t)v13);

      }
      else
      {
        sub_1CC9F73AC((uint64_t)v13);
      }
LABEL_4:
      if (++v34 == v31)
      {
        swift_bridgeObjectRelease();
        a3 = v120;
        v17 = v119;
        v25 = v118;
        v104 = v35;
        v15 = v117;
        v23 = v116;
        v29 = v115;
        v26 = v114;
        v14 = v113;
        v16 = v112;
        LOBYTE(v18) = v111;
        LOBYTE(v19) = v110;
        LOBYTE(v20) = v109;
        LOBYTE(v21) = v108;
        v22 = v107;
        v24 = v106;
        v27 = v105;
        goto LABEL_39;
      }
    }
  }
  v104 = MEMORY[0x1E0DEE9D8];
LABEL_39:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v15;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v17;
  *(_BYTE *)(a3 + 32) = v18;
  *(_BYTE *)(a3 + 33) = v19;
  *(_BYTE *)(a3 + 34) = v20;
  *(_BYTE *)(a3 + 35) = v21;
  *(_QWORD *)(a3 + 40) = v22;
  *(_QWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 56) = v24;
  *(_QWORD *)(a3 + 64) = v25;
  *(_QWORD *)(a3 + 72) = v27;
  *(_QWORD *)(a3 + 80) = v26;
  *(_QWORD *)(a3 + 88) = v104;
  *(_QWORD *)(a3 + 96) = v29;
  *(_QWORD *)(a3 + 104) = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
}

uint64_t sub_1CCA83014()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FMIPDemoDataGenerator()
{
  return objc_opt_self();
}

_QWORD *sub_1CCA83044(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[17];
  v5 = a1[16];
  v6 = a1[15];
  v3 = a1[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCA830F0(v6, v5, v2, v3);
  return a1;
}

uint64_t sub_1CCA830F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    sub_1CCA8314C(result, a2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1CCA8314C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain();
  return result;
}

_QWORD *sub_1CCA83160(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[17];
  v5 = a1[16];
  v6 = a1[15];
  v3 = a1[18];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCA83208(v6, v5, v2, v3);
  return a1;
}

uint64_t sub_1CCA83208(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    sub_1CCA83264(result, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1CCA83264(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

void sub_1CCA83278(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

void sub_1CCA832C8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  char v6;
  uint64_t i;
  id v8;
  void *v9;
  char v10;
  unint64_t v11;

  if (a2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        v4 = (id)MEMORY[0x1D17B154C](0, a2);
      }
      else
      {
        if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v4 = *(id *)(a2 + 32);
      }
      v5 = v4;
      sub_1CCA14E90(&qword_1EF9E26E8);
      v6 = sub_1CCB63DF0();

      if ((v6 & 1) == 0)
      {
        for (i = 0; ; ++i)
        {
          v11 = i + 1;
          if (__OFADD__(i, 1))
            break;
          if (v11 == v3)
            return;
          if ((a2 & 0xC000000000000001) != 0)
          {
            v8 = (id)MEMORY[0x1D17B154C](i + 1, a2);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
              goto LABEL_18;
            if (v11 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_19;
            v8 = *(id *)(a2 + 32 + 8 * v11);
          }
          v9 = v8;
          v10 = sub_1CCB63DF0();

          if ((v10 & 1) != 0)
            return;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        v3 = sub_1CCB64090();
        swift_bridgeObjectRelease();
        if (v3)
          continue;
      }
      return;
    }
  }
}

uint64_t sub_1CCA83454(unint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0)
  {
    sub_1CCAB6E80(v3);
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      sub_1CCB63B50();
      return v10;
    }
  }
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

BOOL FMIPItemActionStatus.isActionSuccessful.getter()
{
  unsigned __int8 *v0;

  return *v0 == 2;
}

uint64_t FMIPItemActionStatus.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA83570 + 4 * byte_1CCB6B410[*v0]))(0x726F727265, 0xE500000000000000);
}

uint64_t sub_1CCA83570()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_1CCA83588()
{
  return 0x73736563637573;
}

uint64_t sub_1CCA835A0()
{
  return 0x676E69646E6570;
}

uint64_t sub_1CCA835B8()
{
  return 0x64656C696166;
}

FMIPCore::FMIPItemActionStatus_optional __swiftcall FMIPItemActionStatus.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;

  if (rawValue <= 199)
  {
    if (rawValue == -1)
    {
      *v1 = 0;
      return (FMIPCore::FMIPItemActionStatus_optional)rawValue;
    }
    if (!rawValue)
    {
      *v1 = 1;
      return (FMIPCore::FMIPItemActionStatus_optional)rawValue;
    }
LABEL_12:
    *v1 = 5;
    return (FMIPCore::FMIPItemActionStatus_optional)rawValue;
  }
  if (rawValue == 500)
  {
    *v1 = 4;
    return (FMIPCore::FMIPItemActionStatus_optional)rawValue;
  }
  if (rawValue == 205)
  {
    *v1 = 3;
    return (FMIPCore::FMIPItemActionStatus_optional)rawValue;
  }
  if (rawValue != 200)
    goto LABEL_12;
  *v1 = 2;
  return (FMIPCore::FMIPItemActionStatus_optional)rawValue;
}

uint64_t FMIPItemActionStatus.rawValue.getter()
{
  char *v0;

  return qword_1CCB6B680[*v0];
}

BOOL sub_1CCA83650(char *a1, char *a2)
{
  return qword_1CCB6B680[*a1] == qword_1CCB6B680[*a2];
}

uint64_t sub_1CCA83674()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

uint64_t sub_1CCA836C0()
{
  return sub_1CCB64348();
}

uint64_t sub_1CCA836F4()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

FMIPCore::FMIPItemActionStatus_optional sub_1CCA8373C(Swift::Int *a1)
{
  return FMIPItemActionStatus.init(rawValue:)(*a1);
}

void sub_1CCA83744(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1CCB6B680[*v1];
}

uint64_t sub_1CCA8375C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA83788 + 4 * byte_1CCB6B415[*v0]))(0x726F727265, 0xE500000000000000);
}

uint64_t sub_1CCA83788()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_1CCA837A0()
{
  return 0x73736563637573;
}

uint64_t sub_1CCA837B8()
{
  return 0x676E69646E6570;
}

uint64_t sub_1CCA837D0()
{
  return 0x64656C696166;
}

BOOL static FMIPItemActionControllerError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FMIPItemActionControllerError.hash(into:)()
{
  return sub_1CCB64348();
}

uint64_t FMIPItemActionControllerError.hashValue.getter()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

unint64_t sub_1CCA83868()
{
  unint64_t result;

  result = qword_1EF9E26C8;
  if (!qword_1EF9E26C8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemActionStatus, &type metadata for FMIPItemActionStatus);
    atomic_store(result, (unint64_t *)&qword_1EF9E26C8);
  }
  return result;
}

unint64_t sub_1CCA838B0()
{
  unint64_t result;

  result = qword_1EF9E26D0;
  if (!qword_1EF9E26D0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemActionControllerError, &type metadata for FMIPItemActionControllerError);
    atomic_store(result, (unint64_t *)&qword_1EF9E26D0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPItemActionStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CCA83940 + 4 * byte_1CCB6B41F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CCA83974 + 4 * byte_1CCB6B41A[v4]))();
}

uint64_t sub_1CCA83974(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA8397C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA83984);
  return result;
}

uint64_t sub_1CCA83990(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA83998);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CCA8399C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA839A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPItemActionStatus()
{
  return &type metadata for FMIPItemActionStatus;
}

uint64_t getEnumTagSinglePayload for FMIPItemActionControllerError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPItemActionControllerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1CCA83A9C + 4 * byte_1CCB6B429[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1CCA83AD0 + 4 * byte_1CCB6B424[v4]))();
}

uint64_t sub_1CCA83AD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA83AD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA83AE0);
  return result;
}

uint64_t sub_1CCA83AEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA83AF4);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1CCA83AF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA83B00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPItemActionControllerError()
{
  return &type metadata for FMIPItemActionControllerError;
}

uint64_t sub_1CCA83B1C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint8_t *v23;
  uint8_t *v24;
  void *v25;
  _BYTE *v26;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint8_t *v37;
  _QWORD v38[2];
  uint64_t v39;
  void (*v40)(_QWORD, _QWORD, _QWORD);
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = sub_1CCA14E90(&qword_1ED8A8EE8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v38 - v10;
  v12 = sub_1CCB63490();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v38 - v17;
  sub_1CC9EAB74(a1, (uint64_t)v11, &qword_1ED8A8EE8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_1CC9C3E84((uint64_t)v11, &qword_1ED8A8EE8);
    if (qword_1ED8AA630 != -1)
      swift_once();
    v19 = sub_1CCB637FC();
    sub_1CCA16C20(v19, (uint64_t)qword_1ED8AD7F8);
    v20 = sub_1CCB637D8();
    v21 = sub_1CCB63D48();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = a2;
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1CC9BF000, v20, v21, "FMIPItemActionsController: Fetch unauthorized encrypted payload failed with error, no URL", v23, 2u);
      v24 = v23;
      a2 = v22;
      MEMORY[0x1D17B214C](v24, -1, -1);
    }

    LOBYTE(v44) = 0;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v12);
    sub_1CCA8E87C();
    v25 = (void *)swift_allocError();
    *v26 = 10;
    a2(&v44, v9, v25);

    return sub_1CC9C3E84((uint64_t)v9, &qword_1ED8A8EE8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
    if (qword_1ED8AA630 != -1)
      swift_once();
    v42 = a3;
    v28 = sub_1CCB637FC();
    sub_1CCA16C20(v28, (uint64_t)qword_1ED8AD7F8);
    v41 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v41(v16, v18, v12);
    v29 = sub_1CCB637D8();
    v30 = sub_1CCB63D48();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc();
      v40 = a2;
      v32 = (uint8_t *)v31;
      v39 = swift_slowAlloc();
      v44 = v39;
      *(_DWORD *)v32 = 136315138;
      v38[1] = v32 + 4;
      v33 = sub_1CCB6340C();
      v43 = sub_1CCA0CB60(v33, v34, &v44);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      v35 = *(void (**)(char *, uint64_t))(v13 + 8);
      v35(v16, v12);
      _os_log_impl(&dword_1CC9BF000, v29, v30, "FMIPItemActionsController: Fetch unauthorized encrypted payload succeeded! URL: %s", v32, 0xCu);
      v36 = v39;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v36, -1, -1);
      v37 = v32;
      a2 = v40;
      MEMORY[0x1D17B214C](v37, -1, -1);
    }
    else
    {
      v35 = *(void (**)(char *, uint64_t))(v13 + 8);
      v35(v16, v12);
    }

    LOBYTE(v44) = 2;
    v41(v9, v18, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    a2(&v44, v9, 0);
    sub_1CC9C3E84((uint64_t)v9, &qword_1ED8A8EE8);
    return ((uint64_t (*)(char *, uint64_t))v35)(v18, v12);
  }
}

void sub_1CCA83F74(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  _BYTE *v33;
  _QWORD v34[6];

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  type metadata accessor for FMIPPlayUTSoundAction(0);
  v9 = swift_dynamicCastClass();
  if (v9)
  {
    v10 = v9 + OBJC_IVAR____TtC8FMIPCore16FMIPUTItemAction_unknownItem;
    v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8FMIPCore21FMIPPlayUTSoundAction_context);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = sub_1CCA8FA3C;
    *(_QWORD *)(v12 + 24) = v8;
    swift_retain_n();
    swift_retain();
    swift_retain();
    sub_1CCA850D4(v10, v11, (uint64_t)sub_1CCA8FA44, v12);
    swift_release_n();
    swift_release();
    swift_release();
LABEL_3:
    swift_release();
    return;
  }
  type metadata accessor for FMIPIgnoreItemAction(0);
  v13 = swift_dynamicCastClass();
  if (v13)
  {
    v14 = v13;
    v15 = *(void **)(a2 + 24);
    swift_retain_n();
    swift_retain();
    v16 = (void *)sub_1CCB635D4();
    v17 = *(_QWORD *)(v14 + OBJC_IVAR____TtC8FMIPCore20FMIPIgnoreItemAction_until);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = sub_1CCA8FA3C;
    *(_QWORD *)(v18 + 24) = v8;
    v34[4] = sub_1CCA8FA44;
    v34[5] = v18;
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 1107296256;
    v34[2] = sub_1CCA1F54C;
    v34[3] = &unk_1E88F6BC0;
    v19 = _Block_copy(v34);
    swift_retain();
    swift_release();
    objc_msgSend(v15, sel_ignoreBeaconByUUID_until_completion_, v16, v17, v19);
    _Block_release(v19);
    swift_release_n();
    swift_release();
    swift_release();

  }
  else
  {
    type metadata accessor for FMIPStopUTSoundAction(0);
    v20 = swift_dynamicCastClass();
    if (v20)
    {
      v21 = v20 + OBJC_IVAR____TtC8FMIPCore16FMIPUTItemAction_unknownItem;
      v22 = swift_allocObject();
      *(_QWORD *)(v22 + 16) = sub_1CCA8FA3C;
      *(_QWORD *)(v22 + 24) = v8;
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_1CCA853DC(v21, 0, 1, (uint64_t)sub_1CCA8FA44, v22);
      swift_release_n();
      swift_release();
      swift_release();
      goto LABEL_3;
    }
    type metadata accessor for FMIPFetchEncryptedPayloadAction(0);
    v23 = swift_dynamicCastClass();
    if (!v23)
    {
      v27 = qword_1ED8AA630;
      swift_retain_n();
      if (v27 != -1)
        swift_once();
      v28 = sub_1CCB637FC();
      sub_1CCA16C20(v28, (uint64_t)qword_1ED8AD7F8);
      v29 = sub_1CCB637D8();
      v30 = sub_1CCB63D48();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_1CC9BF000, v29, v30, "FMIPItemActionsController: cannot map action to request", v31, 2u);
        MEMORY[0x1D17B214C](v31, -1, -1);
      }

      LOBYTE(v34[0]) = 0;
      sub_1CCA8E87C();
      v32 = (void *)swift_allocError();
      *v33 = 6;
      sub_1CCA9CC54((char *)v34, v32, a3);

      swift_release_n();
      goto LABEL_3;
    }
    v24 = v23;
    swift_retain_n();
    v25 = swift_retain();
    v26 = (void *)MEMORY[0x1D17B1B7C](v25);
    swift_retain();
    sub_1CCA83F74(v24, a2, a3, a4);
    if (!v4)
    {
      objc_autoreleasePoolPop(v26);
      swift_release_n();
      swift_release();
      goto LABEL_3;
    }
    swift_release_n();
    objc_autoreleasePoolPop(v26);
    __break(1u);
  }
}

uint64_t sub_1CCA8440C(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  if (a1)
    v7 = 4;
  else
    v7 = 2;
  v11 = v7;
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA620);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1CCB677E0;
  v9 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(v8 + 40) = v9;
  swift_bridgeObjectRetain();
  a2(&v11, v8, a1);
  return swift_bridgeObjectRelease();
}

void sub_1CCA844A8(uint64_t a1, char a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  void *v34;
  uint64_t aBlock;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  void *v38;
  void *v39;
  uint64_t v40;

  if ((a2 & 1) != 0)
  {
    v7 = v4;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v8 = sub_1CCB637FC();
    sub_1CCA16C20(v8, (uint64_t)qword_1ED8AD7F8);
    v9 = sub_1CCB637D8();
    v10 = sub_1CCB63D48();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1CC9BF000, v9, v10, "FMIPItemActionsController: connect", v11, 2u);
      MEMORY[0x1D17B214C](v11, -1, -1);
    }

    v12 = (void *)objc_opt_self();
    v13 = (void *)sub_1CCB635D4();
    v14 = objc_msgSend(v12, sel_connectToBeaconUUID_, v13);

    v34 = v14;
    v15 = objc_msgSend(*(id *)(v7 + 24), sel_executeCommand_, v14);
    v16 = *(NSObject **)(v7 + 48);
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v7;
    *(_QWORD *)(v17 + 24) = v15;
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = sub_1CCA8FA98;
    *(_QWORD *)(v18 + 24) = v17;
    v39 = sub_1CC9F4530;
    v40 = v18;
    v19 = MEMORY[0x1E0C809B0];
    aBlock = MEMORY[0x1E0C809B0];
    v36 = 1107296256;
    v37 = sub_1CC9F44AC;
    v38 = &unk_1E88F6378;
    v20 = _Block_copy(&aBlock);
    swift_retain();
    v21 = v15;
    swift_retain();
    swift_release();
    dispatch_sync(v16, v20);
    _Block_release(v20);
    LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v16 & 1) == 0)
    {
      v22 = swift_allocObject();
      *(_BYTE *)(v22 + 16) = 1;
      *(_QWORD *)(v22 + 24) = v7;
      *(_QWORD *)(v22 + 32) = v21;
      *(_QWORD *)(v22 + 40) = a3;
      *(_QWORD *)(v22 + 48) = a4;
      v39 = sub_1CCA8E918;
      v40 = v22;
      aBlock = v19;
      v36 = 1107296256;
      v37 = (uint64_t (*)(uint64_t))sub_1CC9C32FC;
      v38 = &unk_1E88F63C8;
      v23 = _Block_copy(&aBlock);
      swift_retain();
      v24 = v21;
      sub_1CC9DF994((uint64_t)a3);
      swift_release();
      v25 = objc_msgSend(v24, sel_addFailureBlock_, v23);
      _Block_release(v23);

      v26 = swift_allocObject();
      *(_BYTE *)(v26 + 16) = 1;
      *(_QWORD *)(v26 + 24) = v7;
      *(_QWORD *)(v26 + 32) = v24;
      *(_QWORD *)(v26 + 40) = a3;
      *(_QWORD *)(v26 + 48) = a4;
      v39 = sub_1CCA8E964;
      v40 = v26;
      aBlock = v19;
      v36 = 1107296256;
      v37 = (uint64_t (*)(uint64_t))sub_1CC9C32FC;
      v38 = &unk_1E88F6418;
      v27 = _Block_copy(&aBlock);
      swift_retain();
      v28 = v24;
      sub_1CC9DF994((uint64_t)a3);
      swift_release();
      v29 = objc_msgSend(v28, sel_addSuccessBlock_, v27);

      _Block_release(v27);
      swift_release();

      return;
    }
    __break(1u);
    goto LABEL_15;
  }
  if (qword_1ED8AA630 != -1)
LABEL_15:
    swift_once();
  v30 = sub_1CCB637FC();
  sub_1CCA16C20(v30, (uint64_t)qword_1ED8AD7F8);
  v31 = sub_1CCB637D8();
  v32 = sub_1CCB63D48();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v33 = 0;
    _os_log_impl(&dword_1CC9BF000, v31, v32, "FMIPItemActionsController: disconnect is not supported on this platform!", v33, 2u);
    MEMORY[0x1D17B214C](v33, -1, -1);
  }

  if (a3)
    a3(0);
}

uint64_t sub_1CCA84928(void *a1, char a2, uint64_t a3, void *a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t result;
  uint64_t v32;
  void *v33;
  uint64_t (*v34)(_QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t aBlock;
  unint64_t v43;
  uint64_t (*v44)(uint64_t);
  void *v45;
  uint64_t (*v46)();
  uint64_t v47;

  v35 = a6;
  v36 = a3;
  v10 = sub_1CCB63820();
  v39 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCB63868();
  v37 = *(_QWORD *)(v13 - 8);
  v38 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v16 = sub_1CCB637FC();
  sub_1CCA16C20(v16, (uint64_t)qword_1ED8AD7F8);
  v17 = a1;
  v18 = a1;
  v19 = sub_1CCB637D8();
  v20 = sub_1CCB63D48();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v33 = a4;
    v23 = v22;
    v41 = v22;
    *(_DWORD *)v21 = 136315394;
    if ((a2 & 1) != 0)
      v24 = 0x7463656E6E6F63;
    else
      v24 = 0x656E6E6F63736964;
    if ((a2 & 1) != 0)
      v25 = 0xE700000000000000;
    else
      v25 = 0xEA00000000007463;
    v34 = a5;
    aBlock = sub_1CCA0CB60(v24, v25, &v41);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    aBlock = 0;
    v43 = 0xE000000000000000;
    v40 = a1;
    sub_1CCA14E90(&qword_1EF9DF470);
    sub_1CCB64060();
    aBlock = sub_1CCA0CB60(aBlock, v43, &v41);
    sub_1CCB63E44();
    a5 = v34;
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v19, v20, "FMIPItemActionsController: %s action failed %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    v26 = v23;
    a4 = v33;
    MEMORY[0x1D17B214C](v26, -1, -1);
    MEMORY[0x1D17B214C](v21, -1, -1);
  }
  else
  {

  }
  v27 = v36;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v27;
  *(_QWORD *)(v28 + 24) = a4;
  v46 = sub_1CCA8FA94;
  v47 = v28;
  aBlock = MEMORY[0x1E0C809B0];
  v43 = 1107296256;
  v44 = sub_1CCA00C38;
  v45 = &unk_1E88F64B8;
  v29 = _Block_copy(&aBlock);
  swift_retain();
  v30 = a4;
  sub_1CCB63844();
  v41 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v15, v12, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v38);
  result = swift_release();
  if (a5)
    return a5(a1);
  return result;
}

uint64_t sub_1CCA84D4C(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  char *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t (*v34)(_QWORD);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t aBlock[6];

  v35 = a6;
  v10 = sub_1CCB63820();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CCB63868();
  v37 = *(_QWORD *)(v14 - 8);
  v38 = v14;
  MEMORY[0x1E0C80A78](v14);
  v36 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v16 = sub_1CCB637FC();
  sub_1CCA16C20(v16, (uint64_t)qword_1ED8AD7F8);
  v17 = sub_1CCB637D8();
  v18 = sub_1CCB63D48();
  if (os_log_type_enabled(v17, v18))
  {
    v34 = a5;
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v31 = a3;
    v21 = v20;
    v32 = a4;
    v33 = v13;
    *(_DWORD *)v19 = 136315138;
    aBlock[0] = v20;
    if ((a2 & 1) != 0)
      v22 = 0x7463656E6E6F63;
    else
      v22 = 0x656E6E6F63736964;
    if ((a2 & 1) != 0)
      v23 = 0xE700000000000000;
    else
      v23 = 0xEA00000000007463;
    v39 = sub_1CCA0CB60(v22, v23, aBlock);
    a4 = v32;
    v13 = v33;
    sub_1CCB63E44();
    a5 = v34;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v17, v18, "FMIPItemActionsController: %s action succeeded", v19, 0xCu);
    swift_arrayDestroy();
    v24 = v21;
    a3 = v31;
    MEMORY[0x1D17B214C](v24, -1, -1);
    MEMORY[0x1D17B214C](v19, -1, -1);
  }

  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = a3;
  *(_QWORD *)(v25 + 24) = a4;
  aBlock[4] = (uint64_t)sub_1CCA8FA94;
  aBlock[5] = v25;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA00C38;
  aBlock[3] = (uint64_t)&unk_1E88F6468;
  v26 = _Block_copy(aBlock);
  swift_retain();
  v27 = a4;
  v28 = v36;
  sub_1CCB63844();
  v39 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v28, v13, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v38);
  result = swift_release();
  if (a5)
    return a5(0);
  return result;
}

void sub_1CCA850D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  _QWORD *v19;
  void *v20;
  id v21;
  id v22;
  _QWORD *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  uint64_t aBlock;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  void *v31;
  void *v32;
  _QWORD *v33;

  v5 = v4;
  v9 = (void *)objc_opt_self();
  v10 = (void *)sub_1CCB635D4();
  v11 = objc_msgSend(v9, sel_playSoundWithBeaconUUID_withContext_, v10, a2);

  v27 = v11;
  v12 = objc_msgSend(*(id *)(v5 + 24), sel_executeUTPlaySoundCommand_, v11);
  v13 = *(NSObject **)(v5 + 48);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v5;
  *(_QWORD *)(v14 + 24) = v12;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = sub_1CCA8B118;
  *(_QWORD *)(v15 + 24) = v14;
  v32 = sub_1CC9F4530;
  v33 = (_QWORD *)v15;
  v16 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v29 = 1107296256;
  v30 = sub_1CC9F44AC;
  v31 = &unk_1E88F6148;
  v17 = _Block_copy(&aBlock);
  swift_retain();
  v18 = v12;
  swift_retain();
  swift_release();
  dispatch_sync(v13, v17);
  _Block_release(v17);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v13 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v19 = (_QWORD *)swift_allocObject();
    v19[2] = a3;
    v19[3] = a4;
    v19[4] = v5;
    v19[5] = v18;
    v32 = sub_1CCA8B144;
    v33 = v19;
    aBlock = v16;
    v29 = 1107296256;
    v30 = (uint64_t (*)(uint64_t))sub_1CC9C32FC;
    v31 = &unk_1E88F6198;
    v20 = _Block_copy(&aBlock);
    swift_retain();
    v21 = v18;
    swift_retain();
    swift_release();
    v22 = objc_msgSend(v21, sel_addFailureBlock_, v20);
    _Block_release(v20);

    v23 = (_QWORD *)swift_allocObject();
    v23[2] = a3;
    v23[3] = a4;
    v23[4] = v5;
    v23[5] = v21;
    v32 = sub_1CCA8B190;
    v33 = v23;
    aBlock = v16;
    v29 = 1107296256;
    v30 = (uint64_t (*)(uint64_t))sub_1CC9C32FC;
    v31 = &unk_1E88F61E8;
    v24 = _Block_copy(&aBlock);
    swift_retain();
    v25 = v21;
    swift_retain();
    swift_release();
    v26 = objc_msgSend(v25, sel_addSuccessBlock_, v24);
    _Block_release(v24);
    swift_release();

  }
}

void sub_1CCA853DC(uint64_t a1, id a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  id v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  id v30;
  id v31;
  _QWORD *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t aBlock;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  void *v40;
  void *v41;
  _QWORD *v42;

  v6 = v5;
  if ((a3 & 1) != 0)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v16 = sub_1CCB637FC();
    sub_1CCA16C20(v16, (uint64_t)qword_1ED8AD7F8);
    v17 = sub_1CCB637D8();
    v18 = sub_1CCB63D48();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1CC9BF000, v17, v18, "FMIPItemActionsController: stop sound", v19, 2u);
      MEMORY[0x1D17B214C](v19, -1, -1);
    }

    v20 = (void *)objc_opt_self();
    v14 = (void *)sub_1CCB635D4();
    v15 = objc_msgSend(v20, sel_stopSoundWithBeaconUUID_, v14);
    goto LABEL_11;
  }
  if (qword_1ED8AA630 != -1)
    goto LABEL_14;
  while (1)
  {
    v9 = sub_1CCB637FC();
    sub_1CCA16C20(v9, (uint64_t)qword_1ED8AD7F8);
    v10 = sub_1CCB637D8();
    v11 = sub_1CCB63D48();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPItemActionsController: play sound", v12, 2u);
      MEMORY[0x1D17B214C](v12, -1, -1);
    }

    v13 = (void *)objc_opt_self();
    v14 = (void *)sub_1CCB635D4();
    v15 = objc_msgSend(v13, sel_playSoundWithBeaconUUID_withContext_, v14, a2);
LABEL_11:
    v21 = v15;

    v22 = objc_msgSend(*(id *)(v6 + 24), sel_executeCommand_, v21);
    v23 = *(NSObject **)(v6 + 48);
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v6;
    *(_QWORD *)(v24 + 24) = v22;
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = sub_1CCA8FA98;
    *(_QWORD *)(v25 + 24) = v24;
    v41 = sub_1CC9F44EC;
    v42 = (_QWORD *)v25;
    v26 = MEMORY[0x1E0C809B0];
    aBlock = MEMORY[0x1E0C809B0];
    v38 = 1107296256;
    v39 = sub_1CC9F44AC;
    v40 = &unk_1E88F5F90;
    v27 = _Block_copy(&aBlock);
    swift_retain();
    a2 = v22;
    swift_retain();
    swift_release();
    dispatch_sync(v23, v27);
    _Block_release(v27);
    LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v23 & 1) == 0)
      break;
    __break(1u);
LABEL_14:
    swift_once();
  }
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = a4;
  v28[3] = a5;
  v28[4] = v6;
  v28[5] = a2;
  v41 = sub_1CCA8B078;
  v42 = v28;
  aBlock = v26;
  v38 = 1107296256;
  v39 = (uint64_t (*)(uint64_t))sub_1CC9C32FC;
  v40 = &unk_1E88F5FE0;
  v29 = _Block_copy(&aBlock);
  swift_retain();
  v30 = a2;
  swift_retain();
  swift_release();
  v31 = objc_msgSend(v30, sel_addFailureBlock_, v29);
  _Block_release(v29);

  v32 = (_QWORD *)swift_allocObject();
  v32[2] = a4;
  v32[3] = a5;
  v32[4] = v6;
  v32[5] = v30;
  v41 = sub_1CCA8B0C4;
  v42 = v32;
  aBlock = v26;
  v38 = 1107296256;
  v39 = (uint64_t (*)(uint64_t))sub_1CC9C32FC;
  v40 = &unk_1E88F6030;
  v33 = _Block_copy(&aBlock);
  swift_retain();
  v34 = v30;
  swift_retain();
  swift_release();
  v35 = objc_msgSend(v34, sel_addSuccessBlock_, v33);

  _Block_release(v33);
  swift_release();

}

uint64_t sub_1CCA85868(void *a1, void (*a2)(_QWORD), uint64_t a3, uint64_t a4, void *a5, const char *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  void *v32;
  id v33;
  char *v34;
  uint64_t v36;
  void (*v37)(_QWORD);
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t aBlock;
  unint64_t v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v44 = a3;
  v45 = a7;
  v42 = a6;
  v14 = sub_1CCB63820();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1CCB63868();
  v47 = *(_QWORD *)(v18 - 8);
  v48 = v18;
  MEMORY[0x1E0C80A78](v18);
  v46 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v43 = a9;
  v20 = sub_1CCB637FC();
  sub_1CCA16C20(v20, (uint64_t)qword_1ED8AD7F8);
  v21 = a1;
  v22 = a1;
  v23 = sub_1CCB637D8();
  v24 = sub_1CCB63D48();
  if (os_log_type_enabled(v23, v24))
  {
    v40 = a5;
    v25 = swift_slowAlloc();
    v39 = a4;
    v26 = (uint8_t *)v25;
    v27 = swift_slowAlloc();
    v38 = a8;
    v28 = v27;
    v37 = a2;
    *(_DWORD *)v26 = 136315138;
    v50 = v27;
    aBlock = 0;
    v41 = v17;
    v52 = 0xE000000000000000;
    v49 = a1;
    sub_1CCA14E90(&qword_1EF9DF470);
    sub_1CCB64060();
    aBlock = sub_1CCA0CB60(aBlock, v52, &v50);
    v17 = v41;
    a2 = v37;
    sub_1CCB63E44();
    a5 = v40;
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v23, v24, v42, v26, 0xCu);
    swift_arrayDestroy();
    v29 = v28;
    a8 = v38;
    MEMORY[0x1D17B214C](v29, -1, -1);
    v30 = v26;
    a4 = v39;
    MEMORY[0x1D17B214C](v30, -1, -1);
  }
  else
  {

  }
  a2(a1);
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = a4;
  *(_QWORD *)(v31 + 24) = a5;
  v55 = a8;
  v56 = v31;
  aBlock = MEMORY[0x1E0C809B0];
  v52 = 1107296256;
  v53 = sub_1CCA00C38;
  v54 = v43;
  v32 = _Block_copy(&aBlock);
  swift_retain();
  v33 = a5;
  v34 = v46;
  sub_1CCB63844();
  v50 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v34, v17, v32);
  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v48);
  return swift_release();
}

uint64_t sub_1CCA85C3C(uint64_t a1, void (*a2)(_QWORD), uint64_t a3, uint64_t a4, void *a5, const char *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  void (*v24)(_QWORD);
  uint64_t v25;
  uint8_t *v26;
  uint8_t *v27;
  uint64_t v28;
  void *v29;
  id v30;
  char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[6];

  v35 = a7;
  v33 = a6;
  v13 = sub_1CCB63820();
  v38 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1CCB63868();
  v36 = *(_QWORD *)(v16 - 8);
  v37 = v16;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v34 = a9;
  v19 = sub_1CCB637FC();
  sub_1CCA16C20(v19, (uint64_t)qword_1ED8AD7F8);
  v20 = sub_1CCB637D8();
  v21 = sub_1CCB63D48();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v32 = v18;
    v23 = a5;
    v24 = a2;
    v25 = a8;
    v26 = v22;
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1CC9BF000, v20, v21, v33, v22, 2u);
    v27 = v26;
    a8 = v25;
    a2 = v24;
    a5 = v23;
    v18 = v32;
    MEMORY[0x1D17B214C](v27, -1, -1);
  }

  a2(0);
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = a4;
  *(_QWORD *)(v28 + 24) = a5;
  aBlock[4] = a8;
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = v34;
  v29 = _Block_copy(aBlock);
  swift_retain();
  v30 = a5;
  sub_1CCB63844();
  v39 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v18, v15, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v37);
  return swift_release();
}

void sub_1CCA85F28(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  void *v9;

  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRetain();
  sub_1CCA832C8(a2, v4);
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    v9 = (void *)sub_1CCA83454(v6);
    swift_endAccess();

  }
}

uint64_t sub_1CCA85FC8(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  char v19;

  if (a1)
  {
    v18 = 4;
    sub_1CCA14E90(&qword_1EF9E13F8);
    v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPItem() - 8) + 80);
    v8 = (v7 + 32) & ~v7;
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(a4 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, v9 + v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    a2(&v18, v9, a1);
  }
  else
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v10 = sub_1CCB637FC();
    sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
    v11 = sub_1CCB637D8();
    v12 = sub_1CCB63D48();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPItemActionsController: play sound performed", v13, 2u);
      MEMORY[0x1D17B214C](v13, -1, -1);
    }

    v19 = 2;
    sub_1CCA14E90(&qword_1EF9E13F8);
    v14 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPItem() - 8) + 80);
    v15 = (v14 + 32) & ~v14;
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(a4 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, v16 + v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    a2(&v19, v16, 0);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA861E8(uint64_t a1, void *a2)
{
  id v4;

  swift_beginAccess();
  v4 = a2;
  MEMORY[0x1D17B1078]();
  if (*(_QWORD *)((*(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    sub_1CCB63B68();
  sub_1CCB63BA4();
  sub_1CCB63B50();
  return swift_endAccess();
}

uint64_t sub_1CCA86280(void *a1, void (*a2)(_QWORD, _QWORD, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t result;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  char *v37;
  uint64_t v38;
  void (*v39)(_QWORD, _QWORD, _QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t aBlock;
  unint64_t v51;
  uint64_t (*v52)(uint64_t);
  void *v53;
  uint64_t (*v54)();
  uint64_t v55;
  uint64_t v56[4];

  v43 = a6;
  v46 = a4;
  v48 = a3;
  v9 = sub_1CCB63820();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCB63868();
  v45 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v44 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a5;
  v47 = a5 + 16;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v15 = sub_1CCB637FC();
  sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD7F8);
  v16 = a1;
  v17 = a1;
  v18 = sub_1CCB637D8();
  v19 = sub_1CCB63D48();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v41 = v10;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc();
    v39 = a2;
    v23 = v22;
    v40 = v13;
    *(_DWORD *)v21 = 136315138;
    v56[0] = v22;
    aBlock = 0;
    v51 = 0xE000000000000000;
    v49 = a1;
    sub_1CCA14E90(&qword_1EF9DF470);
    sub_1CCB64060();
    aBlock = sub_1CCA0CB60(aBlock, v51, v56);
    v13 = v40;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v18, v19, "FMIPItemActionsController: lost mode action failed %s", v21, 0xCu);
    swift_arrayDestroy();
    v24 = v23;
    a2 = v39;
    MEMORY[0x1D17B214C](v24, -1, -1);
    v25 = v21;
    v10 = v41;
    MEMORY[0x1D17B214C](v25, -1, -1);
  }
  else
  {

  }
  LOBYTE(aBlock) = 4;
  sub_1CCA14E90(&qword_1EF9E13F8);
  v26 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPItem() - 8) + 80);
  v27 = (v26 + 32) & ~v26;
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1CCB677E0;
  sub_1CCA0BEEC(v46 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, v28 + v27, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA8E87C();
  v29 = (void *)swift_allocError();
  *v30 = 4;
  a2(&aBlock, v28, v29);

  swift_bridgeObjectRelease();
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v32 = *(id *)(result + 48);
    swift_release();
    v33 = swift_allocObject();
    v34 = v43;
    *(_QWORD *)(v33 + 16) = v42;
    *(_QWORD *)(v33 + 24) = v34;
    v54 = sub_1CCA8FA9C;
    v55 = v33;
    aBlock = MEMORY[0x1E0C809B0];
    v51 = 1107296256;
    v52 = sub_1CCA00C38;
    v53 = &unk_1E88F6710;
    v35 = _Block_copy(&aBlock);
    swift_retain();
    v36 = v34;
    v37 = v44;
    sub_1CCB63844();
    v49 = (void *)MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v37, v12, v35);
    _Block_release(v35);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v13);
    return swift_release();
  }
  return result;
}

uint64_t sub_1CCA86750(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD), uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  void *v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t result;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[6];

  v8 = sub_1CCB63820();
  v30 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB63868();
  v28 = *(_QWORD *)(v11 - 8);
  v29 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v14 = sub_1CCB637FC();
  sub_1CCA16C20(v14, (uint64_t)qword_1ED8AD7F8);
  v15 = sub_1CCB637D8();
  v16 = sub_1CCB63D48();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v27 = v13;
    v18 = a2;
    v19 = a5;
    v20 = v17;
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1CC9BF000, v15, v16, "FMIPItemActionsController: lost mode action succeeded", v17, 2u);
    v21 = v20;
    a5 = v19;
    a2 = v18;
    v13 = v27;
    MEMORY[0x1D17B214C](v21, -1, -1);
  }

  LOBYTE(aBlock[0]) = 2;
  a2(aBlock, 0, 0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v23 = *(id *)(result + 48);
    swift_release();
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = a4;
    *(_QWORD *)(v24 + 24) = a5;
    aBlock[4] = sub_1CCA8EA78;
    aBlock[5] = v24;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA00C38;
    aBlock[3] = &unk_1E88F66C0;
    v25 = _Block_copy(aBlock);
    swift_retain();
    v26 = a5;
    sub_1CCB63844();
    v31 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v13, v10, v25);
    _Block_release(v25);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v29);
    return swift_release();
  }
  return result;
}

uint64_t sub_1CCA86A80(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  void *v9;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = result;
    swift_beginAccess();
    v5 = *(_QWORD *)(v4 + 56);
    swift_bridgeObjectRetain();
    swift_release();
    sub_1CCA832C8(a2, v5);
    v7 = v6;
    LOBYTE(v4) = v8;
    result = swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
    {
      swift_beginAccess();
      result = swift_weakLoadStrong();
      if (result)
      {
        swift_beginAccess();
        v9 = (void *)sub_1CCA83454(v7);
        swift_endAccess();

        return swift_release();
      }
    }
  }
  return result;
}

void sub_1CCA86B7C(void *a1, void (*a2)(_QWORD *, _QWORD, void *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  _QWORD *v10;
  void *v11;
  id v12;
  void *v13;
  _BYTE *v14;
  _QWORD v15[6];

  if (a1)
  {
    v9 = *(void **)(a4 + 24);
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = a2;
    v10[3] = a3;
    v10[4] = a5;
    v15[4] = sub_1CCA8EB4C;
    v15[5] = v10;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 1107296256;
    v15[2] = sub_1CCA1F54C;
    v15[3] = &unk_1E88F6828;
    v11 = _Block_copy(v15);
    v12 = a1;
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v9, sel_removeBeacon_completion_, v12, v11);
    _Block_release(v11);

  }
  else
  {
    LOBYTE(v15[0]) = 4;
    sub_1CCA8E87C();
    v13 = (void *)swift_allocError();
    *v14 = 7;
    a2(v15, 0, v13);

  }
}

uint64_t sub_1CCA86CB8(void *a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD), uint64_t a3, uint64_t a4, const char *a5, uint64_t *a6, uint64_t (*a7)(_QWORD), _QWORD *a8)
{
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _BYTE *v31;
  id v33;
  _OWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t (*v46)(_QWORD, _QWORD, _QWORD);
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v14 = sub_1CCB637FC();
  sub_1CCA16C20(v14, (uint64_t)qword_1ED8AD7F8);
  v15 = a1;
  v16 = a1;
  v17 = sub_1CCB637D8();
  v18 = sub_1CCB63D48();
  v48 = a4;
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v46 = a2;
    v20 = swift_slowAlloc();
    v51 = v20;
    *(_DWORD *)v19 = 136315138;
    v21 = a1;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v22 = sub_1CCB639AC();
    v50 = (void *)sub_1CCA0CB60(v22, v23, &v51);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v17, v18, a5, v19, 0xCu);
    swift_arrayDestroy();
    v24 = v20;
    a2 = v46;
    MEMORY[0x1D17B214C](v24, -1, -1);
    MEMORY[0x1D17B214C](v19, -1, -1);

    if (a1)
      goto LABEL_5;
LABEL_9:
    LOBYTE(v51) = 2;
    return a2(&v51, 0, 0);
  }

  if (!a1)
    goto LABEL_9;
LABEL_5:
  v51 = (uint64_t)a1;
  v25 = a1;
  sub_1CCA14E90(&qword_1EF9DF470);
  type metadata accessor for CommandError(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    swift_getErrorValue();
    v33 = a1;
    v34 = &unk_1CCB67000;
    if (sub_1CCAC1058(v49) == (id)14)
    {
      LOBYTE(v51) = 4;
      v35 = a6;
      sub_1CCA14E90(a6);
      v36 = *(unsigned __int8 *)(*(_QWORD *)(a7(0) - 8) + 80);
      v37 = (v36 + 32) & ~v36;
      v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_1CCB677E0;
      sub_1CCA0BEEC(v48 + *a8, v38 + v37, a7);
      sub_1CCA8E87C();
      v39 = swift_allocError();
      *v40 = 9;
      a2(&v51, v38, v39);

      v41 = (void *)v39;
      v34 = (_OWORD *)&unk_1CCB67000;

      swift_bridgeObjectRelease();
    }
    else
    {

      v35 = a6;
    }
    LOBYTE(v51) = 4;
    sub_1CCA14E90(v35);
    v42 = *(unsigned __int8 *)(*(_QWORD *)(a7(0) - 8) + 80);
    v43 = (v42 + 32) & ~v42;
    v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = v34[126];
    sub_1CCA0BEEC(v48 + *a8, v44 + v43, a7);
    sub_1CCA8E87C();
    v30 = (void *)swift_allocError();
    *v45 = 2;
    a2(&v51, v44, v30);
    goto LABEL_15;
  }
  v51 = (uint64_t)v50;
  sub_1CCA8ACCC(MEMORY[0x1E0DEE9D8]);
  sub_1CC9CAA38((unint64_t *)&unk_1EF9DF6A8, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB66854);
  sub_1CCB633E8();
  v26 = sub_1CCB633B8();

  if ((v26 & 1) == 0)
  {

    goto LABEL_11;
  }
  LOBYTE(v51) = 4;
  sub_1CCA14E90(a6);
  v27 = *(unsigned __int8 *)(*(_QWORD *)(a7(0) - 8) + 80);
  v28 = (v27 + 32) & ~v27;
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1CCB677E0;
  sub_1CCA0BEEC(v48 + *a8, v29 + v28, a7);
  sub_1CCA8E87C();
  v30 = (void *)swift_allocError();
  *v31 = 3;
  a2(&v51, v29, v30);

LABEL_15:
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA8720C(void *a1, void (*a2)(uint64_t *, uint64_t, void *), uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v9 = sub_1CCB637FC();
  sub_1CCA16C20(v9, (uint64_t)qword_1ED8AD7F8);
  v10 = a1;
  v11 = a1;
  v12 = sub_1CCB637D8();
  v13 = sub_1CCB63D48();
  if (!os_log_type_enabled(v12, v13))
  {

    if (a1)
      goto LABEL_5;
LABEL_7:
    LOBYTE(v30) = 2;
    sub_1CCA14E90(&qword_1EF9E13F8);
    v25 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPItem() - 8) + 80);
    v26 = (v25 + 32) & ~v25;
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(a4 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, v27 + v26, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v23 = v27;
    v24 = 0;
    goto LABEL_8;
  }
  v29 = a4;
  v14 = (uint8_t *)swift_slowAlloc();
  v15 = swift_slowAlloc();
  v30 = v15;
  *(_DWORD *)v14 = 136315138;
  v16 = a1;
  sub_1CCA14E90(&qword_1EF9DFCB8);
  v17 = sub_1CCB639AC();
  sub_1CCA0CB60(v17, v18, &v30);
  sub_1CCB63E44();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1CC9BF000, v12, v13, a5, v14, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17B214C](v15, -1, -1);
  v19 = v14;
  a4 = v29;
  MEMORY[0x1D17B214C](v19, -1, -1);

  if (!a1)
    goto LABEL_7;
LABEL_5:
  LOBYTE(v30) = 4;
  sub_1CCA14E90(&qword_1EF9E13F8);
  v20 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPItem() - 8) + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1CCB677E0;
  sub_1CCA0BEEC(a4 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, v22 + v21, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v23 = v22;
  v24 = a1;
LABEL_8:
  a2(&v30, v23, v24);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA8750C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t i;
  uint64_t v58;
  uint64_t v59;
  _QWORD *inited;
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD v79[44];
  uint64_t v80;

  v65 = a3;
  v63 = a1;
  v64 = a2;
  v3 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMIPDevice();
  v76 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FMIPItem();
  v68 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v62 - v13;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v69 = v8;
  v70 = v6;
  v71 = v5;
  v15 = sub_1CCB637FC();
  sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD7F8);
  v16 = sub_1CCB637D8();
  v17 = sub_1CCB63D48();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1CC9BF000, v16, v17, "FMIPItemActionsController: performing add safe location to all supported beacons action", v18, 2u);
    MEMORY[0x1D17B214C](v18, -1, -1);
  }

  v19 = *(_QWORD **)(v66 + 32);
  swift_beginAccess();
  v20 = v19[35];
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v74 = v19[35];
    v75 = v19;
    v22 = v20 + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80));
    v23 = *(_QWORD *)(v68 + 72);
    swift_bridgeObjectRetain_n();
    v78 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v77 = v23;
    do
    {
      sub_1CCA0BEEC(v22, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if ((v14[304] & 0x10) != 0)
      {
        v25 = *((_QWORD *)v14 + 44);
        v24 = *((_QWORD *)v14 + 45);
        swift_bridgeObjectRetain();
        sub_1CCA0BF30((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v78 = sub_1CCAC9E18(0, v78[2] + 1, 1, v78);
        v27 = v78[2];
        v26 = v78[3];
        if (v27 >= v26 >> 1)
          v78 = sub_1CCAC9E18((_QWORD *)(v26 > 1), v27 + 1, 1, v78);
        v28 = v78;
        v78[2] = v27 + 1;
        v29 = &v28[2 * v27];
        v29[4] = v25;
        v29[5] = v24;
        v23 = v77;
      }
      else
      {
        sub_1CCA0BF30((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      }
      v22 += v23;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease_n();
    v19 = v75;
  }
  else
  {
    v78 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_beginAccess();
  v30 = v19[10];
  v31 = *(_QWORD *)(v30 + 16);
  v32 = MEMORY[0x1E0DEE9D8];
  v34 = v70;
  v33 = (uint64_t)v71;
  v35 = (uint64_t)v69;
  if (v31)
  {
    v36 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v37 = v30 + ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80));
    v77 = *(_QWORD *)(v76 + 72);
    v62[1] = v30;
    swift_bridgeObjectRetain_n();
    v67 = xmmword_1CCB677E0;
    v38 = 0;
    v73 = v37;
    v74 = v31;
    while (1)
    {
      sub_1CCA0BEEC(v37 + v77 * v38, v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      if ((*(_BYTE *)(v35 + 242) & 4) != 0)
        break;
      sub_1CCA0BF30(v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_20:
      if (++v38 == v31)
      {
        swift_bridgeObjectRelease_n();
        v32 = MEMORY[0x1E0DEE9D8];
        goto LABEL_44;
      }
    }
    sub_1CC9EAB74(v35 + *(int *)(v34 + 128), v33, &qword_1ED8A8C30);
    v39 = type metadata accessor for FMIPItemGroup();
    v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v33, 1, v39);
    v76 = v38;
    if (v40 == 1)
    {
      sub_1CC9C3E84(v33, &qword_1ED8A8C30);
      v41 = *(_QWORD *)(v35 + 24);
      if (!v41)
      {
        sub_1CCA0BF30(v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_41:
        v38 = v76;
        goto LABEL_20;
      }
      v42 = *(_QWORD *)(v35 + 16);
      sub_1CCA14E90((uint64_t *)&unk_1ED8AA620);
      v43 = swift_allocObject();
      *(_OWORD *)(v43 + 16) = v67;
      *(_QWORD *)(v43 + 32) = v42;
      *(_QWORD *)(v43 + 40) = v41;
      swift_bridgeObjectRetain();
    }
    else
    {
      v75 = v36;
      v44 = *(_QWORD *)(v33 + 40);
      swift_bridgeObjectRetain();
      sub_1CCA0BF30(v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      v45 = *(_QWORD *)(v44 + 16);
      if (v45)
      {
        v79[0] = MEMORY[0x1E0DEE9D8];
        sub_1CCA6388C(0, v45, 0);
        v46 = *(unsigned __int8 *)(v68 + 80);
        v72 = v44;
        v47 = v44 + ((v46 + 32) & ~v46);
        v48 = *(_QWORD *)(v68 + 72);
        v43 = v79[0];
        do
        {
          sub_1CCA0BEEC(v47, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          v50 = *((_QWORD *)v12 + 44);
          v49 = *((_QWORD *)v12 + 45);
          swift_bridgeObjectRetain();
          sub_1CCA0BF30((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1CCA6388C(0, *(_QWORD *)(v43 + 16) + 1, 1);
            v43 = v79[0];
          }
          v52 = *(_QWORD *)(v43 + 16);
          v51 = *(_QWORD *)(v43 + 24);
          if (v52 >= v51 >> 1)
          {
            sub_1CCA6388C(v51 > 1, v52 + 1, 1);
            v43 = v79[0];
          }
          *(_QWORD *)(v43 + 16) = v52 + 1;
          v53 = v43 + 16 * v52;
          *(_QWORD *)(v53 + 32) = v50;
          *(_QWORD *)(v53 + 40) = v49;
          v47 += v48;
          --v45;
        }
        while (v45);
        swift_bridgeObjectRelease();
        v34 = v70;
        v33 = (uint64_t)v71;
        v35 = (uint64_t)v69;
      }
      else
      {
        swift_bridgeObjectRelease();
        v43 = MEMORY[0x1E0DEE9D8];
      }
      v36 = v75;
    }
    sub_1CCA0BF30(v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v36 = sub_1CCAC9F24(0, v36[2] + 1, 1, v36);
    v55 = v36[2];
    v54 = v36[3];
    if (v55 >= v54 >> 1)
      v36 = sub_1CCAC9F24((_QWORD *)(v54 > 1), v55 + 1, 1, v36);
    v36[2] = v55 + 1;
    v36[v55 + 4] = v43;
    v37 = v73;
    v31 = v74;
    goto LABEL_41;
  }
  v36 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_44:
  v80 = v32;
  v56 = v36[2];
  if (v56)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v56; ++i)
    {
      v58 = swift_bridgeObjectRetain();
      sub_1CCAC8A58(v58);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v79[0] = v78;
  sub_1CCAC8A58(v80);
  v59 = v79[0];
  memcpy(v79, (const void *)(v63 + 16), sizeof(v79));
  type metadata accessor for FMIPAddMultipleSafeLocationsItemAction();
  inited = (_QWORD *)swift_initStackObject();
  memcpy(inited + 2, v79, 0x160uLL);
  inited[47] = 0;
  inited[48] = v59;
  inited[46] = 0;
  sub_1CCA31D3C((uint64_t)v79);
  sub_1CCA87DB4(inited, v64, v65);
  sub_1CCA31E98((uint64_t)v79);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA87C20(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *inited;
  _BYTE __dst[352];

  if (qword_1ED8AA630 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD7F8);
  v7 = sub_1CCB637D8();
  v8 = sub_1CCB63D48();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1CC9BF000, v7, v8, "FMIPItemActionsController: performing add safe location action", v9, 2u);
    MEMORY[0x1D17B214C](v9, -1, -1);
  }

  sub_1CCA14E90((uint64_t *)&unk_1ED8AA620);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1CCB677E0;
  v11 = a1[47];
  *(_QWORD *)(v10 + 32) = a1[46];
  *(_QWORD *)(v10 + 40) = v11;
  memcpy(__dst, a1 + 2, sizeof(__dst));
  type metadata accessor for FMIPAddMultipleSafeLocationsItemAction();
  inited = (_QWORD *)swift_initStackObject();
  memcpy(inited + 2, __dst, 0x160uLL);
  inited[47] = 0;
  inited[48] = v10;
  inited[46] = 0;
  swift_bridgeObjectRetain();
  sub_1CCA31D3C((uint64_t)__dst);
  sub_1CCA87DB4(inited, a2, a3);
  sub_1CCA31E98((uint64_t)__dst);
  return swift_bridgeObjectRelease();
}

void sub_1CCA87DB4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD aBlock[6];

  v40 = a3;
  v39 = a2;
  v4 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63604();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v37 - v12;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v14 = sub_1CCB637FC();
  sub_1CCA16C20(v14, (uint64_t)qword_1ED8AD7F8);
  v15 = sub_1CCB637D8();
  v16 = sub_1CCB63D48();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1CC9BF000, v15, v16, "FMIPItemActionsController: performing add safe location action", v17, 2u);
    MEMORY[0x1D17B214C](v17, -1, -1);
  }

  v18 = *(_QWORD *)(a1[48] + 16);
  if (v18)
  {
    v38 = a1;
    v37 = swift_bridgeObjectRetain();
    v19 = v37 + 40;
    v20 = MEMORY[0x1E0DEE9D8];
    v42 = v11;
    do
    {
      swift_bridgeObjectRetain();
      sub_1CCB635BC();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        sub_1CC9C3E84((uint64_t)v6, &qword_1ED8A8EF8);
      }
      else
      {
        v21 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v21(v13, v6, v7);
        v21(v11, v13, v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = sub_1CCAC9CC8(0, *(_QWORD *)(v20 + 16) + 1, 1, v20);
        v23 = *(_QWORD *)(v20 + 16);
        v22 = *(_QWORD *)(v20 + 24);
        if (v23 >= v22 >> 1)
          v20 = sub_1CCAC9CC8(v22 > 1, v23 + 1, 1, v20);
        *(_QWORD *)(v20 + 16) = v23 + 1;
        v24 = v20
            + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
            + *(_QWORD *)(v8 + 72) * v23;
        v11 = v42;
        v21((char *)v24, v42, v7);
      }
      v19 += 16;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
    a1 = v38;
  }
  else
  {
    v20 = MEMORY[0x1E0DEE9D8];
  }
  v25 = swift_allocObject();
  *(_BYTE *)(v25 + 16) = 0;
  v26 = (void *)a1[5];
  if (a1[45])
  {
    v27 = v26;
    swift_bridgeObjectRetain();
    v28 = (void *)sub_1CCB63964();
    swift_bridgeObjectRelease();
  }
  else
  {
    v29 = v26;
    v28 = 0;
  }
  v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D89940]), sel_initWithType_name_location_approvalState_, 0, v28, v26, 1);

  v31 = v41;
  v32 = *(void **)(v41 + 24);
  v33 = (_QWORD *)swift_allocObject();
  v33[2] = v30;
  v33[3] = v25;
  v34 = v40;
  v33[4] = v39;
  v33[5] = v34;
  v33[6] = v31;
  v33[7] = v20;
  aBlock[4] = sub_1CCA8B040;
  aBlock[5] = v33;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CC9C37C0;
  aBlock[3] = &unk_1E88F5EC8;
  v35 = _Block_copy(aBlock);
  v36 = v30;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v32, sel_addSafeLocation_completion_, v36, v35);
  _Block_release(v35);
  swift_release();

}

void sub_1CCA881E0(int a1, void *a2, void *a3, uint64_t a4, void (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  id v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  int v68;
  uint64_t v69;
  _BYTE *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void *v74;
  char *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  _QWORD *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t, uint64_t);
  char *v86;
  char *v87;
  uint64_t v88;
  void (*v89)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  char *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  __int128 aBlock;
  __int128 v99;
  uint64_t (*v100)(uint64_t, void *);
  _QWORD *v101;
  uint64_t v102;

  v91 = a7;
  v92 = a4;
  v95 = a2;
  v93 = a1;
  v12 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v12);
  v87 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CCB63604();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v86 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v82 - v18;
  v20 = swift_allocBox();
  v22 = v21;
  v23 = objc_msgSend(a3, sel_identifier);
  sub_1CCB635EC();

  v96 = v15;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 32);
  v94 = v22;
  v85 = v24;
  v24(v22, (uint64_t)v19, v14);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v25 = sub_1CCB637FC();
  sub_1CCA16C20(v25, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v26 = sub_1CCB637D8();
  v27 = sub_1CCB63D48();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc();
    v88 = a8;
    v29 = v28;
    v83 = swift_slowAlloc();
    v102 = v83;
    *(_DWORD *)v29 = 136315394;
    *(_QWORD *)&aBlock = 0;
    *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
    v90 = v20;
    v89 = a5;
    v84 = a6;
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
    *(_QWORD *)&aBlock = sub_1CCA0CB60(aBlock, *((unint64_t *)&aBlock + 1), &v102);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    v82 = v29 + 14;
    v30 = v94;
    swift_beginAccess();
    v31 = v19;
    v32 = v96;
    (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v31, v30, v14);
    sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v33 = sub_1CCB64240();
    v35 = v34;
    v36 = *(void (**)(char *, uint64_t))(v32 + 8);
    v19 = v31;
    v36(v31, v14);
    *(_QWORD *)&aBlock = sub_1CCA0CB60(v33, v35, &v102);
    v20 = v90;
    a5 = v89;
    sub_1CCB63E44();
    swift_release_n();
    a6 = v84;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v26, v27, "FMIPItemActionsController: Add safe location completed with success? %s, identifier: %s", (uint8_t *)v29, 0x16u);
    v37 = v83;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v37, -1, -1);
    v38 = v29;
    a8 = v88;
    MEMORY[0x1D17B214C](v38, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v39 = v95;
  if (v95)
  {
    swift_getErrorValue();
    if (sub_1CCAC1058(v97) == (id)8)
    {
      v40 = v39;
      v41 = v39;
      v42 = sub_1CCB637D8();
      v43 = sub_1CCB63D48();
      if (os_log_type_enabled(v42, v43))
      {
        v88 = a8;
        v44 = (uint8_t *)swift_slowAlloc();
        v45 = swift_slowAlloc();
        v89 = a5;
        v46 = v45;
        *(_QWORD *)&aBlock = v45;
        v90 = v20;
        *(_DWORD *)v44 = 136315138;
        v102 = (uint64_t)v39;
        v47 = v39;
        sub_1CCA14E90(&qword_1EF9DFCB8);
        v48 = sub_1CCB639AC();
        v102 = sub_1CCA0CB60(v48, v49, (uint64_t *)&aBlock);
        v20 = v90;
        sub_1CCB63E44();
        v50 = v95;
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1CC9BF000, v42, v43, "FMIPItemActionsController: Safe Location already exists. Assigning it. %s", v44, 0xCu);
        swift_arrayDestroy();
        v51 = v46;
        a5 = v89;
        MEMORY[0x1D17B214C](v51, -1, -1);
        MEMORY[0x1D17B214C](v44, -1, -1);
      }
      else
      {

      }
      v62 = (void *)sub_1CCB633F4();
      v63 = objc_msgSend(v62, sel_userInfo);
      v64 = sub_1CCB638E0();

      if (*(_QWORD *)(v64 + 16))
      {
        v65 = sub_1CCA074F4(0xD000000000000020, 0x80000001CCB7AB90);
        v66 = (uint64_t)v87;
        if ((v67 & 1) != 0)
        {
          sub_1CCA0CC30(*(_QWORD *)(v64 + 56) + 32 * v65, (uint64_t)&aBlock);
        }
        else
        {
          aBlock = 0u;
          v99 = 0u;
        }
      }
      else
      {
        aBlock = 0u;
        v99 = 0u;
        v66 = (uint64_t)v87;
      }

      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v99 + 1))
      {
        v68 = swift_dynamicCast();
        v69 = v96;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v96 + 56))(v66, v68 ^ 1u, 1, v14);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v66, 1, v14) != 1)
        {
          v70 = (_BYTE *)(v92 + 16);
          v71 = v86;
          v85(v86, v66, v14);
          v72 = v94;
          swift_beginAccess();
          v73 = v96;
          (*(void (**)(char *, char *, uint64_t))(v96 + 24))(v72, v71, v14);
          (*(void (**)(char *, uint64_t))(v73 + 8))(v71, v14);
          swift_beginAccess();
          *v70 = 1;
          goto LABEL_26;
        }
      }
      else
      {
        sub_1CC9C3E84((uint64_t)&aBlock, &qword_1ED8AA610);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 56))(v66, 1, 1, v14);
      }
      sub_1CC9C3E84(v66, &qword_1ED8A8EF8);
      goto LABEL_26;
    }
  }
  if ((v93 & 1) != 0)
  {
LABEL_26:
    v74 = *(void **)(v91 + 24);
    v75 = v94;
    swift_beginAccess();
    v76 = v96;
    (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v19, v75, v14);
    v77 = (void *)sub_1CCB635D4();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v19, v14);
    v78 = (void *)sub_1CCB63B20();
    v79 = (_QWORD *)swift_allocObject();
    v79[2] = a5;
    v79[3] = a6;
    v80 = v92;
    v79[4] = v20;
    v79[5] = v80;
    v100 = sub_1CCA8B054;
    v101 = v79;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v99 = sub_1CC9C37C0;
    *((_QWORD *)&v99 + 1) = &unk_1E88F5F18;
    v81 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v74, sel_assignSafeLocation_beaconUUIDs_completion_, v77, v78, v81);
    _Block_release(v81);
    swift_release();

    return;
  }
  v52 = v39;
  v53 = v39;
  v54 = sub_1CCB637D8();
  v55 = sub_1CCB63D48();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc();
    v57 = swift_slowAlloc();
    v90 = v20;
    v58 = v57;
    *(_QWORD *)&aBlock = v57;
    *(_DWORD *)v56 = 136315138;
    v102 = (uint64_t)v39;
    v59 = v39;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v60 = sub_1CCB639AC();
    v102 = sub_1CCA0CB60(v60, v61, (uint64_t *)&aBlock);
    v39 = v95;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v54, v55, "FMIPItemActionsController: Add safe location error %s", v56, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v58, -1, -1);
    MEMORY[0x1D17B214C](v56, -1, -1);
  }
  else
  {

  }
  LOBYTE(aBlock) = 4;
  a5(&aBlock, 0, 0, v39, 2);
  swift_release();
}

uint64_t sub_1CCA88C8C(uint64_t a1, void *a2, void (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[3];
  char v48;

  v9 = sub_1CCB63604();
  v45 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_projectBox();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v13 = sub_1CCB637FC();
  sub_1CCA16C20(v13, (uint64_t)qword_1ED8AD7F8);
  v14 = a2;
  v15 = a2;
  v16 = sub_1CCB637D8();
  v17 = sub_1CCB63D48();
  if (os_log_type_enabled(v16, v17))
  {
    v44 = a3;
    v18 = swift_slowAlloc();
    v41 = a6;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc();
    v42 = v12;
    v21 = v20;
    v47[0] = v20;
    v43 = v9;
    *(_DWORD *)v19 = 136315138;
    v46 = (uint64_t)a2;
    v22 = a2;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v23 = sub_1CCB639AC();
    v46 = sub_1CCA0CB60(v23, v24, v47);
    v9 = v43;
    sub_1CCB63E44();
    a3 = v44;
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v16, v17, "FMIPItemActionsController: Assign safe location completed with error? %s", v19, 0xCu);
    swift_arrayDestroy();
    v25 = v21;
    v12 = v42;
    MEMORY[0x1D17B214C](v25, -1, -1);
    v26 = v19;
    a6 = v41;
    MEMORY[0x1D17B214C](v26, -1, -1);
  }
  else
  {

  }
  v27 = (unsigned __int8 *)(a6 + 16);
  if (a2)
  {
    v48 = 4;
    swift_beginAccess();
    v28 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v11, v12, v9);
    v29 = sub_1CCB635C8();
    v31 = v30;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v9);
    swift_beginAccess();
    v32 = *v27;
    v33 = v29;
    v34 = v31;
    v35 = a2;
  }
  else
  {
    v48 = 2;
    swift_beginAccess();
    v36 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v11, v12, v9);
    v37 = sub_1CCB635C8();
    v39 = v38;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
    swift_beginAccess();
    v32 = *v27;
    v33 = v37;
    v34 = v39;
    v35 = 0;
  }
  a3(&v48, v33, v34, v35, v32);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA88FE8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  _BYTE v15[352];

  if (qword_1ED8AA630 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD7F8);
  v7 = sub_1CCB637D8();
  v8 = sub_1CCB63D48();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1CC9BF000, v7, v8, "FMIPItemActionsController: performing remove safe location action", v9, 2u);
    MEMORY[0x1D17B214C](v9, -1, -1);
  }

  sub_1CCA14E90((uint64_t *)&unk_1ED8AA620);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1CCB677E0;
  v11 = a1[47];
  *(_QWORD *)(v10 + 32) = a1[46];
  *(_QWORD *)(v10 + 40) = v11;
  v12 = a1 + 2;
  memcpy(v15, v12, sizeof(v15));
  type metadata accessor for FMIPRemoveMultipleSafeLocationItemsAction();
  v13 = swift_allocObject();
  memcpy((void *)(v13 + 16), v12, 0x160uLL);
  *(_QWORD *)(v13 + 368) = v10;
  swift_bridgeObjectRetain();
  sub_1CCA31D3C((uint64_t)v15);
  sub_1CCA89178(v13, a2, a3);
  return swift_release();
}

void sub_1CCA89178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD aBlock[6];

  v31 = a2;
  v5 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63604();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v34 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v29 - v12;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v14 = sub_1CCB637FC();
  sub_1CCA16C20(v14, (uint64_t)qword_1ED8AD7F8);
  v15 = sub_1CCB637D8();
  v16 = sub_1CCB63D48();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1CC9BF000, v15, v16, "FMIPItemActionsController: performing remove safe location action", v17, 2u);
    MEMORY[0x1D17B214C](v17, -1, -1);
  }

  v32 = a1;
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 16);
  if (v18)
  {
    v30 = a3;
    v29 = swift_bridgeObjectRetain();
    v19 = v29 + 40;
    v20 = MEMORY[0x1E0DEE9D8];
    do
    {
      swift_bridgeObjectRetain();
      sub_1CCB635BC();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        sub_1CC9C3E84((uint64_t)v7, &qword_1ED8A8EF8);
      }
      else
      {
        v21 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v21(v13, v7, v8);
        v21(v34, v13, v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = sub_1CCAC9CC8(0, *(_QWORD *)(v20 + 16) + 1, 1, v20);
        v23 = *(_QWORD *)(v20 + 16);
        v22 = *(_QWORD *)(v20 + 24);
        if (v23 >= v22 >> 1)
          v20 = sub_1CCAC9CC8(v22 > 1, v23 + 1, 1, v20);
        *(_QWORD *)(v20 + 16) = v23 + 1;
        v21((char *)(v20+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v23), v34, v8);
      }
      v19 += 16;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
    a3 = v30;
  }
  else
  {
    v20 = MEMORY[0x1E0DEE9D8];
  }
  v24 = v33;
  v25 = *(void **)(v33 + 24);
  v26 = (_QWORD *)swift_allocObject();
  v27 = v31;
  v26[2] = v32;
  v26[3] = v24;
  v26[4] = v20;
  v26[5] = v27;
  v26[6] = a3;
  aBlock[4] = sub_1CCA8ACC0;
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CC9C3100;
  aBlock[3] = &unk_1E88F5E00;
  v28 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v25, sel_safeLocationsForSeparationMonitoring_, v28);
  _Block_release(v28);
}

uint64_t sub_1CCA89500(void (*a1)(char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  char *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t aBlock[6];
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;

  v78 = a5;
  v79 = a6;
  v77 = a4;
  v76 = a3;
  v8 = sub_1CCB63604();
  v82 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v75 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v81 = (char *)&v67 - v11;
  if (qword_1ED8AA630 != -1)
LABEL_47:
    swift_once();
  v72 = v8;
  v12 = sub_1CCB637FC();
  v13 = sub_1CCA16C20(v12, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain_n();
  v80 = v13;
  v14 = sub_1CCB637D8();
  v15 = sub_1CCB63D48();
  v16 = os_log_type_enabled(v14, v15);
  v17 = MEMORY[0x1E0DEE9B8];
  if (v16)
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    aBlock[0] = v19;
    *(_DWORD *)v18 = 136315138;
    sub_1CC9C30A8(0, &qword_1EF9E26D8);
    sub_1CCA1F9B4();
    v20 = sub_1CCB63C64();
    v87 = sub_1CCA0CB60(v20, v21, aBlock);
    sub_1CCB63E44();
    v22 = (unint64_t)a1;
    swift_bridgeObjectRelease_n();
    v17 = MEMORY[0x1E0DEE9B8];
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v14, v15, "FMIPItemActionsController: Owner session safe locations %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v19, -1, -1);
    MEMORY[0x1D17B214C](v18, -1, -1);

  }
  else
  {

    v22 = (unint64_t)a1;
    swift_bridgeObjectRelease_n();
  }
  swift_retain_n();
  v23 = sub_1CCB637D8();
  v24 = sub_1CCB63D48();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    a1 = (void (*)(char *, uint64_t))swift_slowAlloc();
    aBlock[0] = (uint64_t)a1;
    *(_DWORD *)v25 = 136315138;
    v84 = v25 + 4;
    v26 = sub_1CCB639D0();
    v87 = sub_1CCA0CB60(v26, v27, aBlock);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v23, v24, "FMIPItemActionsController: action location identifier %s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](a1, -1, -1);
    MEMORY[0x1D17B214C](v25, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  if ((v22 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v8 = sub_1CCB63EC8();
    sub_1CC9C30A8(0, &qword_1EF9E26D8);
    sub_1CCA1F9B4();
    sub_1CCB63C94();
    v29 = v87;
    v74 = v88;
    v30 = v89;
    v31 = v90;
    v32 = v91;
  }
  else
  {
    v33 = -1 << *(_BYTE *)(v22 + 32);
    v34 = *(_QWORD *)(v22 + 56);
    v74 = (char *)(v22 + 56);
    v8 = ~v33;
    v35 = -v33;
    if (v35 < 64)
      v36 = ~(-1 << v35);
    else
      v36 = -1;
    v32 = v36 & v34;
    v29 = swift_bridgeObjectRetain();
    v30 = v8;
    v31 = 0;
  }
  v37 = v72;
  v71 = v29 & 0x7FFFFFFFFFFFFFFFLL;
  v67 = v30;
  v73 = (unint64_t)(v30 + 64) >> 6;
  *(_QWORD *)&v28 = 136315138;
  v69 = v28;
  v68 = v17 + 8;
  v70 = MEMORY[0x1E0DEE9B0] + 8;
  v38 = v29;
  while (v38 < 0)
  {
    v49 = sub_1CCB63F28();
    if (!v49)
      return sub_1CCA2F54C();
    v85 = v49;
    sub_1CC9C30A8(0, &qword_1EF9E26D8);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v45 = (id)aBlock[0];
    swift_unknownObjectRelease();
    v46 = v31;
    v47 = v32;
    if (!v45)
      return sub_1CCA2F54C();
LABEL_39:
    v84 = (uint8_t *)v47;
    v53 = objc_msgSend(v45, sel_identifier, v67, v68);
    v54 = v81;
    sub_1CCB635EC();

    v55 = sub_1CCB635C8();
    v8 = v56;
    a1 = *(void (**)(char *, uint64_t))(v82 + 8);
    a1(v54, v37);
    if (v55 == *(_QWORD *)(a2 + 16) && v8 == *(_QWORD *)(a2 + 24))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v57 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      if ((v57 & 1) == 0)
        goto LABEL_17;
    }
    v83 = v46;
    swift_retain_n();
    v58 = sub_1CCB637D8();
    v59 = sub_1CCB63D48();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = swift_slowAlloc();
      v61 = v38;
      v62 = swift_slowAlloc();
      aBlock[0] = v62;
      *(_DWORD *)v60 = v69;
      v63 = sub_1CCB639D0();
      *(_QWORD *)(v60 + 4) = sub_1CCA0CB60(v63, v64, aBlock);
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v58, v59, "FMIPItemActionsController: REMOVE SAFE LOCATION %s", (uint8_t *)v60, 0xCu);
      swift_arrayDestroy();
      v65 = v62;
      v38 = v61;
      v37 = v72;
      MEMORY[0x1D17B214C](v65, -1, -1);
      MEMORY[0x1D17B214C](v60, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v39 = *(void **)(v76 + 24);
    v40 = objc_msgSend(v45, sel_identifier);
    v41 = v75;
    sub_1CCB635EC();

    v42 = (void *)sub_1CCB635D4();
    a1(v41, v37);
    v8 = sub_1CCB63B20();
    v43 = swift_allocObject();
    a1 = v79;
    *(_QWORD *)(v43 + 16) = v78;
    *(_QWORD *)(v43 + 24) = a1;
    aBlock[4] = (uint64_t)sub_1CCA8AFCC;
    aBlock[5] = v43;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CC9C37C0;
    aBlock[3] = (uint64_t)&unk_1E88F5E50;
    v44 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v39, sel_unassignSafeLocation_beaconUUIDs_completion_, v42, v8, v44);
    _Block_release(v44);

    v45 = (id)v8;
    v46 = v83;
LABEL_17:

    v31 = v46;
    v32 = (unint64_t)v84;
  }
  if (v32)
  {
    v47 = (v32 - 1) & v32;
    v48 = __clz(__rbit64(v32)) | (v31 << 6);
    v46 = v31;
    goto LABEL_38;
  }
  v50 = v31 + 1;
  if (__OFADD__(v31, 1))
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v50 >= v73)
    return sub_1CCA2F54C();
  v51 = *(_QWORD *)&v74[8 * v50];
  v46 = v31 + 1;
  if (v51)
    goto LABEL_37;
  v46 = v31 + 2;
  if (v31 + 2 >= v73)
    return sub_1CCA2F54C();
  v51 = *(_QWORD *)&v74[8 * v46];
  if (v51)
    goto LABEL_37;
  v46 = v31 + 3;
  if (v31 + 3 >= v73)
    return sub_1CCA2F54C();
  v51 = *(_QWORD *)&v74[8 * v46];
  if (v51)
    goto LABEL_37;
  v46 = v31 + 4;
  if (v31 + 4 >= v73)
    return sub_1CCA2F54C();
  v51 = *(_QWORD *)&v74[8 * v46];
  if (v51)
  {
LABEL_37:
    v47 = (v51 - 1) & v51;
    v48 = __clz(__rbit64(v51)) + (v46 << 6);
LABEL_38:
    v45 = *(id *)(*(_QWORD *)(v38 + 48) + 8 * v48);
    if (!v45)
      return sub_1CCA2F54C();
    goto LABEL_39;
  }
  v52 = v31 + 5;
  while (v73 != v52)
  {
    v51 = *(_QWORD *)&v74[8 * v52++];
    if (v51)
    {
      v46 = v52 - 1;
      goto LABEL_37;
    }
  }
  return sub_1CCA2F54C();
}

uint64_t sub_1CCA89E24(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t *, _QWORD, _QWORD, void *, uint64_t), uint64_t a4, const char *a5)
{
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v20;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v8 = sub_1CCB637FC();
  sub_1CCA16C20(v8, (uint64_t)qword_1ED8AD7F8);
  v9 = a2;
  v10 = a2;
  v11 = sub_1CCB637D8();
  v12 = sub_1CCB63D48();
  if (!os_log_type_enabled(v11, v12))
  {

    if (a2)
      goto LABEL_5;
LABEL_7:
    LOBYTE(v20) = 2;
    v18 = 0;
    return a3(&v20, 0, 0, v18, 2);
  }
  v13 = (uint8_t *)swift_slowAlloc();
  v14 = swift_slowAlloc();
  v20 = v14;
  *(_DWORD *)v13 = 136315138;
  v15 = a2;
  sub_1CCA14E90(&qword_1EF9DFCB8);
  v16 = sub_1CCB639AC();
  sub_1CCA0CB60(v16, v17, &v20);
  sub_1CCB63E44();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1CC9BF000, v11, v12, a5, v13, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17B214C](v14, -1, -1);
  MEMORY[0x1D17B214C](v13, -1, -1);

  if (!a2)
    goto LABEL_7;
LABEL_5:
  LOBYTE(v20) = 4;
  v18 = a2;
  return a3(&v20, 0, 0, v18, 2);
}

void sub_1CCA8A040(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[3];
  _QWORD aBlock[7];

  v23[2] = a2;
  sub_1CCAE08D4(sub_1CCA2F328, (uint64_t)v23, a1);
  if (v10
    && (v11 = v10,
        v12 = objc_msgSend(v10, sel_mutableSafeLocation),
        v11,
        v12))
  {
    v13 = *(_QWORD *)(a5 + 40);
    v14 = v12;
    objc_msgSend(v14, sel_setLocation_, v13);
    if (*(_QWORD *)(a5 + 360))
      v15 = (void *)sub_1CCB63964();
    else
      v15 = 0;
    objc_msgSend(v14, sel_setName_, v15);

    v20 = *(void **)(a6 + 24);
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = a3;
    *(_QWORD *)(v21 + 24) = a4;
    aBlock[4] = sub_1CCA8FA34;
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CC9C37C0;
    aBlock[3] = &unk_1E88F6B20;
    v22 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v20, sel_updateSafeLocation_completion_, v14, v22);
    _Block_release(v22);

  }
  else
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v16 = sub_1CCB637FC();
    sub_1CCA16C20(v16, (uint64_t)qword_1ED8AD7F8);
    v17 = sub_1CCB637D8();
    v18 = sub_1CCB63D48();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1CC9BF000, v17, v18, "FMIPItemActionsController: update safe location completed with error: unable to fetch existing safe location", v19, 2u);
      MEMORY[0x1D17B214C](v19, -1, -1);
    }

    LOBYTE(aBlock[0]) = 4;
    a3(aBlock, 0, 0, 0, 2);
  }
}

uint64_t sub_1CCA8A28C(char a1, void *a2, uint64_t (*a3)(uint64_t *, _QWORD, _QWORD, void *, uint64_t))
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void *v8;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;

  if ((a1 & 1) != 0)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v4 = sub_1CCB637FC();
    sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
    v5 = sub_1CCB637D8();
    v6 = sub_1CCB63D48();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPItemActionsController: update safe location completed successfully", v7, 2u);
      MEMORY[0x1D17B214C](v7, -1, -1);
    }

    LOBYTE(v21) = 2;
    v8 = 0;
  }
  else
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v10 = sub_1CCB637FC();
    sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
    v11 = a2;
    v12 = a2;
    v13 = sub_1CCB637D8();
    v14 = sub_1CCB63D48();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v21 = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = a2;
      sub_1CCA14E90(&qword_1EF9DFCB8);
      v18 = sub_1CCB639AC();
      sub_1CCA0CB60(v18, v19, &v21);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v13, v14, "FMIPItemActionsController: update safe location completed with error? %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v16, -1, -1);
      MEMORY[0x1D17B214C](v15, -1, -1);
    }
    else
    {

    }
    LOBYTE(v21) = 4;
    v8 = a2;
  }
  return a3(&v21, 0, 0, v8, 2);
}

void sub_1CCA8A540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  _QWORD *v26;
  void *v27;
  id v28;
  uint64_t aBlock;
  uint64_t v30;
  uint64_t (*v31)();
  void *v32;
  void *v33;
  _QWORD *v34;

  v4 = v3;
  v8 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB63604();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCB635BC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1CC9C3E84((uint64_t)v10, &qword_1ED8A8EF8);
    if (qword_1ED8AA630 != -1)
      swift_once();
    v15 = sub_1CCB637FC();
    sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD7F8);
    v16 = sub_1CCB637D8();
    v17 = sub_1CCB63D30();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1CC9BF000, v16, v17, "FMItemDetailContentViewController: No UUID specified for firmware update", v18, 2u);
      MEMORY[0x1D17B214C](v18, -1, -1);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v19 = (void *)objc_opt_self();
    v20 = (void *)sub_1CCB635D4();
    v21 = objc_msgSend(v19, sel_updateAccessoryFirmware_, v20);

    v22 = objc_msgSend(*(id *)(v4 + 24), sel_executeCommand_, v21);
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = a2;
    *(_QWORD *)(v23 + 24) = a3;
    v33 = sub_1CCA8F8E8;
    v34 = (_QWORD *)v23;
    aBlock = MEMORY[0x1E0C809B0];
    v30 = 1107296256;
    v31 = sub_1CC9C32FC;
    v32 = &unk_1E88F6968;
    v24 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v25 = objc_msgSend(v22, sel_addSuccessBlock_, v24);
    _Block_release(v24);

    v26 = (_QWORD *)swift_allocObject();
    v26[2] = a2;
    v26[3] = a3;
    v26[4] = a1;
    v33 = sub_1CCA8F8F4;
    v34 = v26;
    aBlock = MEMORY[0x1E0C809B0];
    v30 = 1107296256;
    v31 = sub_1CC9C32FC;
    v32 = &unk_1E88F69B8;
    v27 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    v28 = objc_msgSend(v22, sel_addFailureBlock_, v27);
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_1CCA8A8C4(uint64_t a1, uint64_t (*a2)(char *, _QWORD, _QWORD))
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  char v8;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v3 = sub_1CCB637FC();
  sub_1CCA16C20(v3, (uint64_t)qword_1ED8AD7F8);
  v4 = sub_1CCB637D8();
  v5 = sub_1CCB63D48();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1CC9BF000, v4, v5, "FMIPItemActionsController: Update accessory firmware successfully completed", v6, 2u);
    MEMORY[0x1D17B214C](v6, -1, -1);
  }

  v8 = 2;
  return a2(&v8, 0, 0);
}

uint64_t sub_1CCA8A9C4(void *a1, void (*a2)(_QWORD, _QWORD, _QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v24)(_QWORD, _QWORD, _QWORD);
  uint64_t v25;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v7 = sub_1CCB637FC();
  sub_1CCA16C20(v7, (uint64_t)qword_1ED8AD7F8);
  v8 = a1;
  v9 = a1;
  v10 = sub_1CCB637D8();
  v11 = sub_1CCB63D48();
  if (os_log_type_enabled(v10, v11))
  {
    v24 = a2;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = a4;
    v14 = swift_slowAlloc();
    v25 = v14;
    *(_DWORD *)v12 = 136315138;
    v15 = a1;
    sub_1CCA14E90(&qword_1EF9DF470);
    v16 = sub_1CCB639AC();
    sub_1CCA0CB60(v16, v17, &v25);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPItemActionsController: Update accessory firmware completed with error: %s", v12, 0xCu);
    swift_arrayDestroy();
    v18 = v14;
    a4 = v13;
    MEMORY[0x1D17B214C](v18, -1, -1);
    v19 = v12;
    a2 = v24;
    MEMORY[0x1D17B214C](v19, -1, -1);
  }
  else
  {

  }
  LOBYTE(v25) = 4;
  sub_1CCA14E90(&qword_1EF9E13F8);
  v20 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPItem() - 8) + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1CCB677E0;
  sub_1CCA0BEEC(a4 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, v22 + v21, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  a2(&v25, v22, a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA8AC38()
{
  id *v0;

  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA8AC84()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA8ACC0(uint64_t a1)
{
  return sub_1CCA55A34(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA89500);
}

unint64_t sub_1CCA8ACCC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1CCA14E90(&qword_1ED8A8E40);
  v2 = sub_1CCB640B4();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1CC9EAB74(v6, (uint64_t)&v15, &qword_1EF9E26F8);
    v7 = v15;
    v8 = v16;
    result = sub_1CCA8AE00(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1CCA0799C(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CCA8AE00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1CCB6433C();
  sub_1CCB639F4();
  v4 = sub_1CCB64384();
  return sub_1CCA8AE64(a1, a2, v4);
}

unint64_t sub_1CCA8AE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_1CCB642A0() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_1CCB642A0() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((sub_1CCB642A0() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_1CCA8AFA8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA8AFCC(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA89E24(a1, a2, *(uint64_t (**)(uint64_t *, _QWORD, _QWORD, void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), "FMIPItemActionsController: remove safe location completed with error? %s");
}

uint64_t sub_1CCA8AFEC()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA8AFFC()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1CCA8B040(int a1, void *a2)
{
  uint64_t v2;

  sub_1CCA881E0(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_1CCA8B054(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA88C8C(a1, a2, *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1CCA8B064()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA8B078(void *a1)
{
  uint64_t v1;

  return sub_1CCA85868(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), "FMIPItemActionsController: play sound action failed %s", (uint64_t)&unk_1E88F60B8, (uint64_t)sub_1CCA8FA94, (uint64_t)&unk_1E88F60D0);
}

uint64_t sub_1CCA8B0C4(uint64_t a1)
{
  uint64_t v1;

  return sub_1CCA85C3C(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), "FMIPItemActionsController: play sound action succeeded", (uint64_t)&unk_1E88F6068, (uint64_t)sub_1CCA8FA94, (uint64_t)&unk_1E88F6080);
}

uint64_t sub_1CCA8B118()
{
  uint64_t v0;

  return sub_1CCA861E8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1CCA8B130()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA8B144(void *a1)
{
  uint64_t v1;

  return sub_1CCA85868(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), "FMIPItemActionsController: unauthorized play sound action failed %s", (uint64_t)&unk_1E88F6270, (uint64_t)sub_1CCA8FA94, (uint64_t)&unk_1E88F6288);
}

uint64_t sub_1CCA8B190(uint64_t a1)
{
  uint64_t v1;

  return sub_1CCA85C3C(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), "FMIPItemActionsController: unauthorized play sound action succeeded", (uint64_t)&unk_1E88F6220, (uint64_t)sub_1CCA8B1DC, (uint64_t)&unk_1E88F6238);
}

void sub_1CCA8B1DC()
{
  uint64_t v0;

  sub_1CCA85F28(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCA8B1F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t, uint64_t, void *, uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t *, uint64_t, uint64_t, void *, uint64_t);
  uint64_t v28;
  uint8_t *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  char *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  _QWORD v48[2];
  uint64_t (*v49)(uint64_t *, uint64_t, uint64_t, void *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  _QWORD aBlock[6];

  v52 = a2;
  v7 = sub_1CCA14E90(&qword_1ED8A8EF8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v54 = (char *)v48 - v11;
  v12 = sub_1CCB63604();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v56 = (char *)v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v48 - v17;
  MEMORY[0x1E0C80A78](v16);
  v53 = (char *)v48 - v19;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a3;
  *(_QWORD *)(v20 + 24) = a4;
  v21 = qword_1ED8AA630;
  swift_retain();
  if (v21 != -1)
    swift_once();
  v22 = sub_1CCB637FC();
  v51 = sub_1CCA16C20(v22, (uint64_t)qword_1ED8AD7F8);
  v23 = sub_1CCB637D8();
  v24 = sub_1CCB63D48();
  v25 = os_log_type_enabled(v23, v24);
  v55 = v20;
  if (v25)
  {
    v26 = a4;
    v27 = a3;
    v28 = a1;
    v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v29 = 0;
    _os_log_impl(&dword_1CC9BF000, v23, v24, "FMIPItemActionsController: performing assign safe location action", v29, 2u);
    v30 = v29;
    a1 = v28;
    a3 = v27;
    a4 = v26;
    v20 = v55;
    MEMORY[0x1D17B214C](v30, -1, -1);
  }

  v31 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 16);
  if (v31)
  {
    v48[1] = a1;
    v49 = a3;
    v50 = a4;
    v48[0] = swift_bridgeObjectRetain();
    v32 = v48[0] + 40;
    v33 = MEMORY[0x1E0DEE9D8];
    do
    {
      swift_bridgeObjectRetain();
      sub_1CCB635BC();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
      {
        sub_1CC9C3E84((uint64_t)v10, &qword_1ED8A8EF8);
      }
      else
      {
        v34 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
        v34(v18, v10, v12);
        v34(v56, v18, v12);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v33 = sub_1CCAC9CC8(0, *(_QWORD *)(v33 + 16) + 1, 1, v33);
        v36 = *(_QWORD *)(v33 + 16);
        v35 = *(_QWORD *)(v33 + 24);
        if (v36 >= v35 >> 1)
          v33 = sub_1CCAC9CC8(v35 > 1, v36 + 1, 1, v33);
        *(_QWORD *)(v33 + 16) = v36 + 1;
        v34((char *)(v33+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v36), v56, v12);
      }
      v32 += 16;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
    v20 = v55;
    a3 = v49;
  }
  v37 = (uint64_t)v54;
  sub_1CCB635BC();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v37, 1, v12) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1CC9C3E84(v37, &qword_1ED8A8EF8);
    v38 = sub_1CCB637D8();
    v39 = sub_1CCB63D48();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_1CC9BF000, v38, v39, "FMIPItemActionsController: Assign safe location failed. No SafeLocationUUID", v40, 2u);
      MEMORY[0x1D17B214C](v40, -1, -1);
    }

    LOBYTE(aBlock[0]) = 4;
    sub_1CCA9D55C((char *)aBlock, 0, 0, 0, 2, a3);
  }
  else
  {
    v41 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v53, v37, v12);
    v42 = *(void **)(v52 + 24);
    v43 = (void *)sub_1CCB635D4();
    v44 = (void *)sub_1CCB63B20();
    swift_bridgeObjectRelease();
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = sub_1CCA8FB4C;
    *(_QWORD *)(v45 + 24) = v20;
    aBlock[4] = sub_1CCA8F908;
    aBlock[5] = v45;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CC9C37C0;
    aBlock[3] = &unk_1E88F6A58;
    v46 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v42, sel_assignSafeLocation_beaconUUIDs_completion_, v43, v44, v46);
    _Block_release(v46);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v41, v12);
  }
  return swift_release();
}

uint64_t sub_1CCA8B740(_QWORD *a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t, uint64_t, void *, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  _BYTE __dst[352];

  v8 = qword_1ED8AA630;
  swift_retain();
  if (v8 != -1)
    swift_once();
  v9 = sub_1CCB637FC();
  sub_1CCA16C20(v9, (uint64_t)qword_1ED8AD7F8);
  v10 = sub_1CCB637D8();
  v11 = sub_1CCB63D48();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPItemActionsController: performing assign safe location action", v12, 2u);
    MEMORY[0x1D17B214C](v12, -1, -1);
  }

  sub_1CCA14E90((uint64_t *)&unk_1ED8AA620);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1CCB677E0;
  v14 = a1[47];
  *(_QWORD *)(v13 + 32) = a1[46];
  *(_QWORD *)(v13 + 40) = v14;
  memcpy(__dst, a1 + 2, sizeof(__dst));
  type metadata accessor for FMIPAssignMultipleSafeLocationsItemAction();
  inited = swift_initStackObject();
  memcpy((void *)(inited + 16), __dst, 0x160uLL);
  *(_QWORD *)(inited + 368) = v13;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1CCA31D3C((uint64_t)__dst);
  sub_1CCA8B1F8(inited, a2, a3, a4);
  swift_release();
  sub_1CCA31E98((uint64_t)__dst);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1CCA8B8F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t, uint64_t, void *, uint64_t), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t i;
  uint64_t v60;
  uint64_t v61;
  uint64_t inited;
  uint64_t v63;
  _QWORD v65[2];
  uint64_t v66;
  uint64_t (*v67)(uint64_t *, uint64_t, uint64_t, void *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD v82[44];
  uint64_t v83;

  v66 = a1;
  v67 = a3;
  v69 = a2;
  v5 = type metadata accessor for FMIPItem();
  v72 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v65 - v9;
  v11 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FMIPDevice();
  v79 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = qword_1ED8AA630;
  v68 = a4;
  swift_retain();
  if (v17 != -1)
    swift_once();
  v73 = v16;
  v74 = v14;
  v18 = sub_1CCB637FC();
  sub_1CCA16C20(v18, (uint64_t)qword_1ED8AD7F8);
  v19 = sub_1CCB637D8();
  v20 = sub_1CCB63D48();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1CC9BF000, v19, v20, "FMIPItemActionsController: performing assign safe location to all supported beacons action", v21, 2u);
    MEMORY[0x1D17B214C](v21, -1, -1);
  }

  v22 = *(_QWORD **)(v69 + 32);
  swift_beginAccess();
  v23 = v22[35];
  v24 = *(_QWORD *)(v23 + 16);
  v71 = v13;
  if (v24)
  {
    v77 = v23;
    v78 = v22;
    v25 = v23 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
    v26 = *(_QWORD *)(v72 + 72);
    swift_bridgeObjectRetain_n();
    v81 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v80 = v26;
    do
    {
      sub_1CCA0BEEC(v25, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if ((v8[304] & 0x10) != 0)
      {
        v28 = *((_QWORD *)v8 + 44);
        v27 = *((_QWORD *)v8 + 45);
        swift_bridgeObjectRetain();
        sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v81 = sub_1CCAC9E18(0, v81[2] + 1, 1, v81);
        v30 = v81[2];
        v29 = v81[3];
        if (v30 >= v29 >> 1)
          v81 = sub_1CCAC9E18((_QWORD *)(v29 > 1), v30 + 1, 1, v81);
        v31 = v81;
        v81[2] = v30 + 1;
        v32 = &v31[2 * v30];
        v32[4] = v28;
        v32[5] = v27;
        v26 = v80;
      }
      else
      {
        sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      }
      v25 += v26;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease_n();
    v13 = v71;
    v22 = v78;
  }
  else
  {
    v81 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_beginAccess();
  v33 = v22[10];
  v34 = *(_QWORD *)(v33 + 16);
  v35 = MEMORY[0x1E0DEE9D8];
  v37 = (uint64_t)v73;
  v36 = v74;
  if (v34)
  {
    v38 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v39 = v33 + ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80));
    v80 = *(_QWORD *)(v79 + 72);
    v65[1] = v33;
    swift_bridgeObjectRetain_n();
    v70 = xmmword_1CCB677E0;
    v40 = 0;
    v76 = v39;
    v77 = v34;
    while (1)
    {
      sub_1CCA0BEEC(v39 + v80 * v40, v37, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      if ((*(_BYTE *)(v37 + 242) & 4) != 0)
        break;
      sub_1CCA0BF30(v37, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_20:
      if (++v40 == v34)
      {
        swift_bridgeObjectRelease_n();
        v35 = MEMORY[0x1E0DEE9D8];
        goto LABEL_44;
      }
    }
    sub_1CC9EAB74(v37 + *(int *)(v36 + 128), (uint64_t)v13, &qword_1ED8A8C30);
    v41 = type metadata accessor for FMIPItemGroup();
    v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v13, 1, v41);
    v79 = v40;
    if (v42 == 1)
    {
      sub_1CC9C3E84((uint64_t)v13, &qword_1ED8A8C30);
      v43 = *(_QWORD *)(v37 + 24);
      if (!v43)
      {
        sub_1CCA0BF30(v37, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_41:
        v40 = v79;
        goto LABEL_20;
      }
      v44 = *(_QWORD *)(v37 + 16);
      sub_1CCA14E90((uint64_t *)&unk_1ED8AA620);
      v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = v70;
      *(_QWORD *)(v45 + 32) = v44;
      *(_QWORD *)(v45 + 40) = v43;
      swift_bridgeObjectRetain();
    }
    else
    {
      v78 = v38;
      v46 = *((_QWORD *)v13 + 5);
      swift_bridgeObjectRetain();
      sub_1CCA0BF30((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      v47 = *(_QWORD *)(v46 + 16);
      if (v47)
      {
        v82[0] = MEMORY[0x1E0DEE9D8];
        sub_1CCA6388C(0, v47, 0);
        v48 = *(unsigned __int8 *)(v72 + 80);
        v75 = v46;
        v49 = v46 + ((v48 + 32) & ~v48);
        v50 = *(_QWORD *)(v72 + 72);
        v45 = v82[0];
        do
        {
          sub_1CCA0BEEC(v49, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          v52 = *((_QWORD *)v10 + 44);
          v51 = *((_QWORD *)v10 + 45);
          swift_bridgeObjectRetain();
          sub_1CCA0BF30((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1CCA6388C(0, *(_QWORD *)(v45 + 16) + 1, 1);
            v45 = v82[0];
          }
          v54 = *(_QWORD *)(v45 + 16);
          v53 = *(_QWORD *)(v45 + 24);
          if (v54 >= v53 >> 1)
          {
            sub_1CCA6388C(v53 > 1, v54 + 1, 1);
            v45 = v82[0];
          }
          *(_QWORD *)(v45 + 16) = v54 + 1;
          v55 = v45 + 16 * v54;
          *(_QWORD *)(v55 + 32) = v52;
          *(_QWORD *)(v55 + 40) = v51;
          v49 += v50;
          --v47;
        }
        while (v47);
        swift_bridgeObjectRelease();
        v13 = v71;
        v37 = (uint64_t)v73;
        v36 = v74;
      }
      else
      {
        swift_bridgeObjectRelease();
        v45 = MEMORY[0x1E0DEE9D8];
      }
      v38 = v78;
    }
    sub_1CCA0BF30(v37, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v38 = sub_1CCAC9F24(0, v38[2] + 1, 1, v38);
    v57 = v38[2];
    v56 = v38[3];
    if (v57 >= v56 >> 1)
      v38 = sub_1CCAC9F24((_QWORD *)(v56 > 1), v57 + 1, 1, v38);
    v38[2] = v57 + 1;
    v38[v57 + 4] = v45;
    v39 = v76;
    v34 = v77;
    goto LABEL_41;
  }
  v38 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_44:
  v83 = v35;
  v58 = v38[2];
  if (v58)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v58; ++i)
    {
      v60 = swift_bridgeObjectRetain();
      sub_1CCAC8A58(v60);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v82[0] = v81;
  sub_1CCAC8A58(v83);
  v61 = v82[0];
  memcpy(v82, (const void *)(v66 + 16), sizeof(v82));
  type metadata accessor for FMIPAssignMultipleSafeLocationsItemAction();
  inited = swift_initStackObject();
  memcpy((void *)(inited + 16), v82, 0x160uLL);
  *(_QWORD *)(inited + 368) = v61;
  v63 = v68;
  swift_retain();
  sub_1CCA31D3C((uint64_t)v82);
  sub_1CCA8B1F8(inited, v69, v67, v63);
  swift_release();
  sub_1CCA31E98((uint64_t)v82);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1CCA8C030(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t, uint64_t, void *, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  _BYTE *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  uint64_t v39;
  id v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[6];

  v8 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB63604();
  v44 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v44 + 64);
  v13 = MEMORY[0x1E0C80A78](v11);
  v41 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v42 = (char *)&v39 - v14;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a4;
  v43 = v15;
  v16 = qword_1ED8AA630;
  swift_retain();
  if (v16 != -1)
    swift_once();
  v17 = sub_1CCB637FC();
  v40 = (id)sub_1CCA16C20(v17, (uint64_t)qword_1ED8AD7F8);
  v18 = sub_1CCB637D8();
  v19 = sub_1CCB63D48();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1CC9BF000, v18, v19, "FMIPItemActionsController: performing edit safe location action", v20, 2u);
    MEMORY[0x1D17B214C](v20, -1, -1);
  }

  sub_1CCB635BC();
  v21 = v44;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v10, 1, v11) == 1)
  {
    sub_1CC9C3E84((uint64_t)v10, &qword_1ED8A8EF8);
    v22 = sub_1CCB637D8();
    v23 = sub_1CCB63D48();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1CC9BF000, v22, v23, "FMIPItemActionsController: cannot edit safe location for an item with an invalid safe location identifier", v24, 2u);
      MEMORY[0x1D17B214C](v24, -1, -1);
    }

    LOBYTE(aBlock[0]) = 4;
    sub_1CCA8E87C();
    v25 = (void *)swift_allocError();
    *v26 = 0;
    sub_1CCA9D55C((char *)aBlock, 0, 0, v25, 2, a3);

  }
  else
  {
    v27 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v28 = v42;
    v27(v42, v10, v11);
    v29 = a2;
    v40 = *(id *)(a2 + 24);
    v30 = v41;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v41, v28, v11);
    v31 = (*(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    v32 = (v12 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
    v34 = swift_allocObject();
    v27((char *)(v34 + v31), v30, v11);
    v35 = (_QWORD *)(v34 + v32);
    v36 = v43;
    *v35 = sub_1CCA8FB4C;
    v35[1] = v36;
    *(_QWORD *)(v34 + v33) = a1;
    *(_QWORD *)(v34 + ((v33 + 15) & 0xFFFFFFFFFFFFFFF8)) = v29;
    aBlock[4] = sub_1CCA8F9C8;
    aBlock[5] = v34;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CC9C3100;
    aBlock[3] = &unk_1E88F6AD0;
    v37 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v40, sel_safeLocationsForSeparationMonitoring_, v37);
    _Block_release(v37);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v11);
  }
  return swift_release();
}

uint64_t sub_1CCA8C464(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t, uint64_t, void *, uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  _BYTE *v33;
  char v34;

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a3;
  *(_QWORD *)(v7 + 24) = a4;
  type metadata accessor for FMIPAddSafeLocationItemAction();
  swift_retain();
  v8 = swift_dynamicCastClass();
  if (v8)
  {
    v9 = (_QWORD *)v8;
    swift_retain_n();
    swift_retain();
    sub_1CCA87C20(v9, (uint64_t)sub_1CCA8F900, v7);
LABEL_19:
    swift_release_n();
    swift_release();
    return swift_release();
  }
  type metadata accessor for FMIPAddMultipleSafeLocationsItemAction();
  v10 = swift_dynamicCastClass();
  if (v10)
  {
    v11 = (_QWORD *)v10;
    swift_retain_n();
    swift_retain();
    sub_1CCA87DB4(v11, (uint64_t)sub_1CCA8F900, v7);
    goto LABEL_19;
  }
  type metadata accessor for FMIPRemoveSafeLocationItemAction();
  v12 = swift_dynamicCastClass();
  if (v12)
  {
    v13 = (_QWORD *)v12;
    swift_retain_n();
    swift_retain();
    sub_1CCA88FE8(v13, (uint64_t)sub_1CCA8F900, v7);
    goto LABEL_19;
  }
  type metadata accessor for FMIPRemoveMultipleSafeLocationItemsAction();
  v14 = swift_dynamicCastClass();
  if (v14)
  {
    v15 = v14;
    swift_retain_n();
    swift_retain();
    sub_1CCA89178(v15, (uint64_t)sub_1CCA8F900, v7);
    goto LABEL_19;
  }
  type metadata accessor for FMIPAssignSafeLocationItemAction();
  v16 = swift_dynamicCastClass();
  if (v16)
  {
    v17 = (_QWORD *)v16;
    swift_retain_n();
    swift_retain();
    sub_1CCA8B740(v17, a2, a3, a4);
    goto LABEL_19;
  }
  type metadata accessor for FMIPAssignMultipleSafeLocationsItemAction();
  v18 = swift_dynamicCastClass();
  if (v18)
  {
    v19 = v18;
    swift_retain_n();
    swift_retain();
    sub_1CCA8B1F8(v19, a2, a3, a4);
    goto LABEL_19;
  }
  type metadata accessor for FMIPAssignSafeLocationToAllSupportedBeaconsAction();
  v20 = swift_dynamicCastClass();
  if (v20)
  {
    v21 = v20;
    swift_retain_n();
    swift_retain();
    sub_1CCA8B8F0(v21, a2, a3, a4);
    goto LABEL_19;
  }
  type metadata accessor for FMIPEditSafeLocationItemAction();
  v22 = swift_dynamicCastClass();
  if (v22)
  {
    v23 = v22;
    swift_retain_n();
    swift_retain();
    sub_1CCA8C030(v23, a2, a3, a4);
    goto LABEL_19;
  }
  type metadata accessor for FMIPAddSafeLocationToAllSupportedBeaconsAction();
  v24 = swift_dynamicCastClass();
  if (v24)
  {
    v25 = v24;
    swift_retain_n();
    swift_retain();
    sub_1CCA8750C(v25, (uint64_t)sub_1CCA8F900, v7);
    goto LABEL_19;
  }
  v27 = qword_1ED8AA630;
  swift_retain_n();
  if (v27 != -1)
    swift_once();
  v28 = sub_1CCB637FC();
  sub_1CCA16C20(v28, (uint64_t)qword_1ED8AD7F8);
  v29 = sub_1CCB637D8();
  v30 = sub_1CCB63D48();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_1CC9BF000, v29, v30, "FMIPItemActionsController: cannot map safe location action to request", v31, 2u);
    MEMORY[0x1D17B214C](v31, -1, -1);
  }

  v34 = 0;
  sub_1CCA8E87C();
  v32 = (void *)swift_allocError();
  *v33 = 6;
  sub_1CCA9D55C(&v34, 0, 0, v32, 2, a3);

  swift_release_n();
  return swift_release();
}

uint64_t sub_1CCA8C868(uint64_t a1, uint64_t (*a2)(uint64_t *, uint64_t, void *))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  void *v18;
  _BYTE *v19;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;

  v4 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63604();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  sub_1CCB635BC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1CC9C3E84((uint64_t)v6, &qword_1ED8A8EF8);
    if (qword_1ED8AA630 != -1)
      swift_once();
    v13 = sub_1CCB637FC();
    sub_1CCA16C20(v13, (uint64_t)qword_1ED8AD7F8);
    v14 = sub_1CCB637D8();
    v15 = sub_1CCB63D48();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1CC9BF000, v14, v15, "FMIPItemActionsController: cannot disconnect with an invalid identifier", v16, 2u);
      MEMORY[0x1D17B214C](v16, -1, -1);
    }

    v30 = 4;
    sub_1CCA14E90((uint64_t *)&unk_1ED8AA620);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1CCB677E0;
    *(_QWORD *)(v17 + 32) = v12;
    *(_QWORD *)(v17 + 40) = v11;
    sub_1CCA8E87C();
    v18 = (void *)swift_allocError();
    *v19 = 0;
    swift_bridgeObjectRetain();
    sub_1CCA9E8F4(&v30, v17, v18, a2);

    return swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    v21 = qword_1ED8AA630;
    swift_retain();
    if (v21 != -1)
      swift_once();
    v22 = sub_1CCB637FC();
    sub_1CCA16C20(v22, (uint64_t)qword_1ED8AD7F8);
    v23 = sub_1CCB637D8();
    v24 = sub_1CCB63D48();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v28 = v12;
      v26 = v25;
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1CC9BF000, v23, v24, "FMIPItemActionsController: disconnect is not supported on this platform!", v25, 2u);
      v12 = v28;
      MEMORY[0x1D17B214C](v26, -1, -1);
    }

    v29 = 2;
    sub_1CCA14E90((uint64_t *)&unk_1ED8AA620);
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_1CCB677E0;
    *(_QWORD *)(v27 + 32) = v12;
    *(_QWORD *)(v27 + 40) = v11;
    swift_bridgeObjectRetain();
    sub_1CCA9E8F4(&v29, v27, 0, a2);
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t sub_1CCA8CBF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _BYTE *v40;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t (*v55)(_QWORD, _QWORD, _QWORD);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v12 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v12);
  v56 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CCB63604();
  v57 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v54 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a3;
  v16[3] = a4;
  v55 = a5;
  v16[4] = a5;
  v16[5] = a6;
  v17 = qword_1ED8AA630;
  swift_retain();
  swift_retain();
  swift_retain();
  if (v17 != -1)
    swift_once();
  v18 = sub_1CCB637FC();
  v19 = sub_1CCA16C20(v18, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v53 = v19;
  v20 = sub_1CCB637D8();
  v21 = sub_1CCB63D48();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    v49 = v14;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc();
    v51 = a3;
    v25 = v24;
    v59 = v24;
    v50 = a2;
    *(_DWORD *)v23 = 136315138;
    v52 = a4;
    v26 = FMIPItemAction.debugDescription.getter();
    v58 = sub_1CCA0CB60(v26, v27, &v59);
    a4 = v52;
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v20, v21, "FMIPItemActionsController: performing play sound %s", v23, 0xCu);
    swift_arrayDestroy();
    v28 = v25;
    a3 = v51;
    MEMORY[0x1D17B214C](v28, -1, -1);
    v29 = v23;
    v14 = v49;
    MEMORY[0x1D17B214C](v29, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v31 = (uint64_t)v56;
  v30 = v57;
  v32 = a1 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item;
  sub_1CCB635BC();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v31, 1, v14) == 1)
  {
    sub_1CC9C3E84(v31, &qword_1ED8A8EF8);
    v33 = sub_1CCB637D8();
    v34 = sub_1CCB63D48();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_1CC9BF000, v33, v34, "FMIPItemActionsController: cannot play sound for item with an invalid identifier", v35, 2u);
      MEMORY[0x1D17B214C](v35, -1, -1);
    }

    LOBYTE(v59) = 4;
    sub_1CCA14E90(&qword_1EF9E13F8);
    v36 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPItem() - 8) + 80);
    v37 = (v36 + 32) & ~v36;
    v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(v32, v38 + v37, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA8E87C();
    v39 = (void *)swift_allocError();
    *v40 = 0;
    sub_1CCA9DFD4((char *)&v59, v38, v39, a3, a4, v55);

    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v42 = (uint64_t)v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v54, v31, v14);
    v43 = v30;
    v44 = *(void **)(a1 + OBJC_IVAR____TtC8FMIPCore23FMIPPlaySoundItemAction_context);
    v45 = *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore23FMIPPlaySoundItemAction_context + 8);
    v46 = v14;
    v47 = (_QWORD *)swift_allocObject();
    v47[2] = sub_1CCA8E990;
    v47[3] = v16;
    v47[4] = a1;
    swift_retain();
    swift_retain();
    sub_1CCA853DC(v42, v44, v45, (uint64_t)sub_1CCA8E9A0, (uint64_t)v47);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v46);
    return swift_release();
  }
}

uint64_t sub_1CCA8D0CC(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _BYTE *v27;
  char v29;
  void *v30;
  void *v31;
  void *v32;
  id *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t (*v38)(_QWORD, _QWORD, _QWORD);
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id *v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t (*v52)(_QWORD, _QWORD, _QWORD);
  uint64_t v53;
  unint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  id v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  id *v67;
  void *v68;
  id v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  void *v73;
  id v74;
  id v75;
  uint64_t v76;
  _QWORD *v77;
  void *v78;
  id v79;
  id v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(_QWORD, _QWORD, _QWORD);
  uint64_t v85;
  uint64_t (*v86)(_QWORD, _QWORD, _QWORD);
  uint64_t v87;
  id *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t (*aBlock)(_QWORD, _QWORD, _QWORD);
  uint64_t v93;
  uint64_t (*v94)(uint64_t);
  void *v95;
  void *v96;
  _QWORD *v97;

  v88 = a2;
  v11 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CCB63604();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a3;
  v18[3] = a4;
  v86 = a5;
  v18[4] = a5;
  v18[5] = a6;
  v90 = v18;
  v83 = a1 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item;
  v84 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))a3;
  swift_retain();
  v85 = a4;
  swift_retain();
  v87 = a6;
  swift_retain();
  sub_1CCB635BC();
  v89 = v15;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1CC9C3E84((uint64_t)v13, &qword_1ED8A8EF8);
    if (qword_1ED8AA630 != -1)
      swift_once();
    v19 = sub_1CCB637FC();
    sub_1CCA16C20(v19, (uint64_t)qword_1ED8AD7F8);
    v20 = sub_1CCB637D8();
    v21 = sub_1CCB63D48();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1CC9BF000, v20, v21, "FMIPItemActionsController: cannot enable lost mode for item with an invalid identifier", v22, 2u);
      MEMORY[0x1D17B214C](v22, -1, -1);
    }

    LOBYTE(aBlock) = 4;
    sub_1CCA14E90(&qword_1EF9E13F8);
    v23 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPItem() - 8) + 80);
    v24 = (v23 + 32) & ~v23;
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(v83, v25 + v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA8E87C();
    v26 = (void *)swift_allocError();
    *v27 = 0;
    sub_1CCA9DFD4((char *)&aBlock, v25, v26, (uint64_t)v84, v85, v86);

    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v17, v13, v14);
    v29 = *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_isTrackingEnabled);
    v87 = a1;
    v81 = v17;
    v82 = v14;
    if ((v29 & 1) == 0)
    {
      v31 = (void *)objc_opt_self();
      v32 = (void *)sub_1CCB635D4();
      v47 = (id *)objc_msgSend(v31, sel_disableLostModeForBeaconUUID_, v32);

      v33 = v88;
      if (qword_1ED8AA630 == -1)
        goto LABEL_10;
      goto LABEL_25;
    }
    v30 = (void *)sub_1CCB635D4();
    swift_bridgeObjectRetain();
    v41 = (void *)sub_1CCB63964();
    swift_bridgeObjectRelease();
    v42 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_phoneNumber + 8);
    v84 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1
                                                           + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_phoneNumber);
    v85 = v42;
    swift_bridgeObjectRetain();
    v43 = (void *)sub_1CCB63964();
    swift_bridgeObjectRelease();
    v44 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_email + 8);
    v86 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_email);
    v45 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v46 = (void *)sub_1CCB63964();
    swift_bridgeObjectRelease();
    v47 = (id *)objc_msgSend(v45, sel_enableLostModeForBeaconUUID_message_phoneNumber_email_, v30, v41, v43, v46);

    if (qword_1ED8AA630 != -1)
      swift_once();
    v48 = sub_1CCB637FC();
    sub_1CCA16C20(v48, (uint64_t)qword_1ED8AD7F8);
    swift_retain_n();
    v49 = sub_1CCB637D8();
    v50 = sub_1CCB63D48();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      v52 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))swift_slowAlloc();
      aBlock = v52;
      *(_DWORD *)v51 = 136315138;
      v53 = FMIPItemAction.debugDescription.getter();
      v91 = sub_1CCA0CB60(v53, v54, (uint64_t *)&aBlock);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v49, v50, "FMIPItemActionsController: enabling lost mode %s", v51, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v52, -1, -1);
      MEMORY[0x1D17B214C](v51, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    swift_retain_n();
    v55 = sub_1CCB637D8();
    v56 = sub_1CCB63D48();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = swift_slowAlloc();
      v58 = swift_slowAlloc();
      *(_DWORD *)v57 = 136315394;
      v91 = v58;
      aBlock = v84;
      v93 = v85;
      swift_bridgeObjectRetain();
      sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
      v59 = sub_1CCB639AC();
      aBlock = (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1CCA0CB60(v59, v60, &v91);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v57 + 12) = 2080;
      aBlock = v86;
      v93 = v44;
      swift_bridgeObjectRetain();
      v61 = sub_1CCB639AC();
      aBlock = (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1CCA0CB60(v61, v62, &v91);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v55, v56, "FMIPItemActionsController: lost mode: metadata: phone %s, email: %s", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v58, -1, -1);
      MEMORY[0x1D17B214C](v57, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v33 = v88;
    while (1)
    {
      v63 = objc_msgSend(v33[3], sel_executeCommand_, v47, v81, v82);
      v64 = v33[6];
      v65 = swift_allocObject();
      *(_QWORD *)(v65 + 16) = v33;
      *(_QWORD *)(v65 + 24) = v63;
      v66 = swift_allocObject();
      *(_QWORD *)(v66 + 16) = sub_1CCA8FA98;
      *(_QWORD *)(v66 + 24) = v65;
      v96 = sub_1CC9F4530;
      v97 = (_QWORD *)v66;
      v67 = v47;
      v47 = (id *)MEMORY[0x1E0C809B0];
      aBlock = (uint64_t (*)(_QWORD, _QWORD, _QWORD))MEMORY[0x1E0C809B0];
      v93 = 1107296256;
      v94 = sub_1CC9F44AC;
      v95 = &unk_1E88F65A8;
      v68 = _Block_copy(&aBlock);
      swift_retain();
      v69 = v63;
      swift_retain();
      swift_release();
      dispatch_sync(v64, v68);
      _Block_release(v68);
      LOBYTE(v64) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v64 & 1) == 0)
        break;
      __break(1u);
LABEL_25:
      swift_once();
LABEL_10:
      v34 = sub_1CCB637FC();
      sub_1CCA16C20(v34, (uint64_t)qword_1ED8AD7F8);
      swift_retain_n();
      v35 = sub_1CCB637D8();
      v36 = sub_1CCB63D48();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc();
        v38 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))swift_slowAlloc();
        aBlock = v38;
        *(_DWORD *)v37 = 136315138;
        v39 = FMIPItemAction.debugDescription.getter();
        v91 = sub_1CCA0CB60(v39, v40, (uint64_t *)&aBlock);
        sub_1CCB63E44();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v35, v36, "FMIPItemActionsController: disabling lost mode %s", v37, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v38, -1, -1);
        MEMORY[0x1D17B214C](v37, -1, -1);

      }
      else
      {

        swift_release_n();
      }
    }
    v70 = swift_allocObject();
    swift_weakInit();
    v71 = (_QWORD *)swift_allocObject();
    v72 = v90;
    v71[2] = sub_1CCA8FA90;
    v71[3] = v72;
    v88 = v67;
    v71[4] = v87;
    v71[5] = v70;
    v71[6] = v69;
    v96 = sub_1CCA8EA24;
    v97 = v71;
    aBlock = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v47;
    v93 = 1107296256;
    v94 = (uint64_t (*)(uint64_t))sub_1CC9C32FC;
    v95 = &unk_1E88F6620;
    v73 = _Block_copy(&aBlock);
    swift_retain();
    v74 = v69;
    swift_retain();
    swift_release();
    v75 = objc_msgSend(v74, sel_addFailureBlock_, v73);
    _Block_release(v73);

    v76 = swift_allocObject();
    swift_weakInit();
    v77 = (_QWORD *)swift_allocObject();
    v77[2] = sub_1CCA8FA90;
    v77[3] = v72;
    v77[4] = v76;
    v77[5] = v74;
    v96 = sub_1CCA8EA68;
    v97 = v77;
    aBlock = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v47;
    v93 = 1107296256;
    v94 = (uint64_t (*)(uint64_t))sub_1CC9C32FC;
    v95 = &unk_1E88F6670;
    v78 = _Block_copy(&aBlock);
    v79 = v74;
    swift_retain();
    swift_release();
    v80 = objc_msgSend(v79, sel_addSuccessBlock_, v78);
    _Block_release(v78);

    (*(void (**)(char *, uint64_t))(v89 + 8))(v81, v82);
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1CCA8DCA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(char *, uint64_t);
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _BYTE *v40;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  id v51;
  void *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(_QWORD, _QWORD, _QWORD);
  uint64_t v68;
  void (**v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t aBlock;
  uint64_t v72;
  void (*v73)(uint64_t, void *);
  void *v74;
  void *v75;
  _QWORD *v76;

  v68 = a2;
  v11 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v11);
  v69 = (void (**)(char *, uint64_t))((char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_1CCB63604();
  v14 = *(void (***)(char *, uint64_t))(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a3;
  v17[3] = a4;
  v67 = a5;
  v17[4] = a5;
  v17[5] = a6;
  v18 = qword_1ED8AA630;
  v65 = a3;
  swift_retain();
  v66 = a4;
  swift_retain();
  swift_retain();
  if (v18 != -1)
    swift_once();
  v19 = sub_1CCB637FC();
  v20 = sub_1CCA16C20(v19, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v64 = v20;
  v21 = sub_1CCB637D8();
  v22 = sub_1CCB63D48();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc();
    v62 = v13;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc();
    v63 = v17;
    v26 = v25;
    aBlock = v25;
    v61 = v16;
    *(_DWORD *)v24 = 136315138;
    v27 = FMIPItemAction.debugDescription.getter();
    v70 = sub_1CCA0CB60(v27, v28, &aBlock);
    v16 = v61;
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v21, v22, "FMIPItemActionsController: performing remove action %s", v24, 0xCu);
    swift_arrayDestroy();
    v29 = v26;
    v17 = v63;
    MEMORY[0x1D17B214C](v29, -1, -1);
    v30 = v24;
    v13 = v62;
    MEMORY[0x1D17B214C](v30, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v31 = (uint64_t)v69;
  v32 = a1 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item;
  sub_1CCB635BC();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v14[6])(v31, 1, v13) != 1)
  {
    v69 = v14;
    ((void (*)(char *, uint64_t, uint64_t))v14[4])(v16, v31, v13);
    v42 = (uint64_t *)(v32 + *(int *)(type metadata accessor for FMIPItem() + 60));
    v44 = *v42;
    v43 = v42[1];
    v45 = objc_msgSend((id)objc_opt_self(), sel_SPOwner);
    v46 = objc_msgSend(v45, sel_destination);

    v47 = sub_1CCB63988();
    v49 = v48;

    if (v44 == v47 && v43 == v49)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v50 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      if ((v50 & 1) == 0)
      {
        v57 = v68;
        v58 = *(void **)(v68 + 16);
        v52 = (void *)sub_1CCB635D4();
        v59 = (_QWORD *)swift_allocObject();
        v59[2] = sub_1CCA8FA90;
        v59[3] = v17;
        v59[4] = v57;
        v59[5] = a1;
        v75 = sub_1CCA8EAFC;
        v76 = v59;
        aBlock = MEMORY[0x1E0C809B0];
        v72 = 1107296256;
        v73 = sub_1CCA1F54C;
        v74 = &unk_1E88F6788;
        v60 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_release();
        objc_msgSend(v58, sel_beaconForUUID_completion_, v52, v60);
        _Block_release(v60);
        goto LABEL_16;
      }
    }
    v51 = sub_1CCA40D58();
    v52 = (void *)sub_1CCB635D4();
    v53 = (unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore20FMIPRemoveItemAction_forced);
    swift_beginAccess();
    v54 = *v53;
    v55 = (_QWORD *)swift_allocObject();
    v55[2] = sub_1CCA8FA90;
    v55[3] = v17;
    v55[4] = a1;
    v75 = sub_1CCA8EB0C;
    v76 = v55;
    aBlock = MEMORY[0x1E0C809B0];
    v72 = 1107296256;
    v73 = sub_1CCA1F54C;
    v74 = &unk_1E88F67D8;
    v56 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v51, sel_unpairUUID_force_completion_, v52, v54, v56);
    _Block_release(v56);

LABEL_16:
    v69[1](v16, v13);
    return swift_release();
  }
  sub_1CC9C3E84(v31, &qword_1ED8A8EF8);
  v33 = sub_1CCB637D8();
  v34 = sub_1CCB63D48();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v35 = 0;
    _os_log_impl(&dword_1CC9BF000, v33, v34, "FMIPItemActionsController: cannot remove an item with an invalid identifier", v35, 2u);
    MEMORY[0x1D17B214C](v35, -1, -1);
  }

  LOBYTE(aBlock) = 4;
  sub_1CCA14E90(&qword_1EF9E13F8);
  v36 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPItem() - 8) + 80);
  v37 = (v36 + 32) & ~v36;
  v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_1CCB677E0;
  sub_1CCA0BEEC(v32, v38 + v37, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA8E87C();
  v39 = (void *)swift_allocError();
  *v40 = 0;
  sub_1CCA9DFD4((char *)&aBlock, v38, v39, v65, v66, v67);

  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA8E34C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t, void *), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _BYTE *v34;
  char *v36;
  id v37;
  void *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t *, uint64_t, void *);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t aBlock[9];

  v50 = a2;
  v7 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB63604();
  v52 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v51 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  v13 = qword_1ED8AA630;
  swift_retain();
  if (v13 != -1)
    swift_once();
  v14 = sub_1CCB637FC();
  v15 = sub_1CCA16C20(v14, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v49 = v15;
  v16 = sub_1CCB637D8();
  v17 = sub_1CCB63D48();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v48 = v12;
    v20 = v19;
    aBlock[0] = v19;
    v46 = a3;
    v47 = a4;
    *(_DWORD *)v18 = 136315138;
    swift_retain();
    v21 = FMIPItemGroupAction.description.getter();
    v45 = v10;
    v23 = v22;
    swift_release();
    aBlock[6] = sub_1CCA0CB60(v21, v23, aBlock);
    a3 = v46;
    sub_1CCB63E44();
    swift_release_n();
    v10 = v45;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v16, v17, "FMIPItemActionsController: performing remove item group action %s", v18, 0xCu);
    swift_arrayDestroy();
    v24 = v20;
    v12 = v48;
    MEMORY[0x1D17B214C](v24, -1, -1);
    MEMORY[0x1D17B214C](v18, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v25 = v52;
  v26 = a1 + OBJC_IVAR____TtC8FMIPCore19FMIPItemGroupAction_itemGroup;
  sub_1CCB635BC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v9, 1, v10) == 1)
  {
    sub_1CC9C3E84((uint64_t)v9, &qword_1ED8A8EF8);
    v27 = sub_1CCB637D8();
    v28 = sub_1CCB63D48();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_1CC9BF000, v27, v28, "FMIPItemActionsController: cannot remove an item group with an invalid identifier", v29, 2u);
      MEMORY[0x1D17B214C](v29, -1, -1);
    }

    LOBYTE(aBlock[0]) = 4;
    sub_1CCA14E90(&qword_1EF9E1440);
    v30 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPItemGroup() - 8) + 80);
    v31 = (v30 + 32) & ~v30;
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(v26, v32 + v31, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA8E87C();
    v33 = (void *)swift_allocError();
    *v34 = 0;
    sub_1CCA9EEA8((char *)aBlock, v32, v33, a3);

    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v36 = v51;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v51, v9, v10);
    v37 = sub_1CCA40D58();
    v38 = (void *)sub_1CCB635D4();
    v39 = v25;
    v40 = (unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore25FMIPRemoveItemGroupAction_forced);
    swift_beginAccess();
    v41 = *v40;
    v42 = (_QWORD *)swift_allocObject();
    v42[2] = sub_1CCA8E874;
    v42[3] = v12;
    v42[4] = a1;
    aBlock[4] = (uint64_t)sub_1CCA8E8C4;
    aBlock[5] = (uint64_t)v42;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CCA1F54C;
    aBlock[3] = (uint64_t)&unk_1E88F6300;
    v43 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v37, sel_unpairUUID_force_completion_, v38, v41, v43);
    _Block_release(v43);

    (*(void (**)(char *, uint64_t))(v39 + 8))(v36, v10);
    return swift_release();
  }
}

uint64_t sub_1CCA8E874(char *a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_1CCA9EEA8(a1, a2, a3, *(uint64_t (**)(uint64_t *, uint64_t, void *))(v3 + 16));
}

unint64_t sub_1CCA8E87C()
{
  unint64_t result;

  result = qword_1EF9E26F0;
  if (!qword_1EF9E26F0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemActionControllerError, &type metadata for FMIPItemActionControllerError);
    atomic_store(result, (unint64_t *)&qword_1EF9E26F0);
  }
  return result;
}

uint64_t sub_1CCA8E8C4(void *a1)
{
  uint64_t v1;

  return sub_1CCA86CB8(a1, *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), "FMIPItemActionsController: remove item group action completed successfuly %s", &qword_1EF9E1440, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup, &OBJC_IVAR____TtC8FMIPCore19FMIPItemGroupAction_itemGroup);
}

uint64_t sub_1CCA8E904()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA8E918(uint64_t a1)
{
  return sub_1CCA8E970(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA84928);
}

uint64_t sub_1CCA8E928()
{
  uint64_t v0;

  swift_release();

  if (*(_QWORD *)(v0 + 40))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA8E964(uint64_t a1)
{
  return sub_1CCA8E970(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA84D4C);
}

uint64_t sub_1CCA8E970(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_1CCA8E990(char *a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_1CCA9DFD4(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v3 + 32));
}

uint64_t sub_1CCA8E9A0(uint64_t a1)
{
  uint64_t v1;

  return sub_1CCA85FC8(a1, *(void (**)(char *, uint64_t, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1CCA8E9B4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCA8E9C4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1CCA8E9E8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CCA8EA24(uint64_t a1)
{
  return sub_1CCA55A34(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA86280);
}

uint64_t sub_1CCA8EA34()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CCA8EA68(uint64_t a1)
{
  uint64_t v1;

  return sub_1CCA86750(a1, *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_1CCA8EA78()
{
  uint64_t v0;

  return sub_1CCA86A80(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCA8EA94()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CCA8EAC8()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1CCA8EAFC(void *a1)
{
  uint64_t v1;

  sub_1CCA86B7C(a1, *(void (**)(_QWORD *, _QWORD, void *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1CCA8EB0C(void *a1)
{
  uint64_t v1;

  return sub_1CCA86CB8(a1, *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), "FMIPItemActionsController: remove action completed successfuly %s", &qword_1EF9E13F8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem, &OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item);
}

uint64_t sub_1CCA8EB4C(void *a1)
{
  uint64_t v1;

  return sub_1CCA8720C(a1, *(void (**)(uint64_t *, uint64_t, void *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), "FMIPItemActionsController: remove action completed with error %s");
}

uint64_t sub_1CCA8EB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _BYTE *v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  void *v42;
  void *v43;
  char **v44;
  id v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t (*v52)(_QWORD, _QWORD, _QWORD);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t aBlock[6];

  v54 = a2;
  v11 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v11);
  v58 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCB63604();
  v59 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v55 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a5;
  v15[5] = a6;
  v16 = qword_1ED8AA630;
  v56 = a3;
  swift_retain();
  v57 = a4;
  swift_retain();
  swift_retain();
  if (v16 != -1)
    swift_once();
  v17 = sub_1CCB637FC();
  sub_1CCA16C20(v17, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v18 = sub_1CCB637D8();
  v19 = sub_1CCB63D48();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v53 = a6;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc();
    v52 = a5;
    v23 = v22;
    aBlock[0] = v22;
    v50 = v13;
    v51 = v15;
    *(_DWORD *)v21 = 136315138;
    v24 = FMIPItemAction.debugDescription.getter();
    v60 = sub_1CCA0CB60(v24, v25, aBlock);
    v13 = v50;
    v15 = v51;
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v18, v19, "FMIPItemActionsController: performing notify action %s, separationEnabled? ", v21, 0xCu);
    swift_arrayDestroy();
    v26 = v23;
    a5 = v52;
    MEMORY[0x1D17B214C](v26, -1, -1);
    MEMORY[0x1D17B214C](v21, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v27 = (uint64_t)v58;
  v28 = a1 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item;
  sub_1CCB635BC();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v27, 1, v13) == 1)
  {
    sub_1CC9C3E84(v27, &qword_1ED8A8EF8);
    v29 = sub_1CCB637D8();
    v30 = sub_1CCB63D48();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1CC9BF000, v29, v30, "FMIPItemActionsController: cannot notify an item with an invalid identifier", v31, 2u);
      MEMORY[0x1D17B214C](v31, -1, -1);
    }

    LOBYTE(aBlock[0]) = 4;
    sub_1CCA14E90(&qword_1EF9E13F8);
    v32 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPItem() - 8) + 80);
    v33 = (v32 + 32) & ~v32;
    v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(v28, v34 + v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA8E87C();
    v35 = (void *)swift_allocError();
    *v36 = 0;
    sub_1CCA9DFD4((char *)aBlock, v34, v35, v56, v57, a5);

    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v38 = v59;
    v39 = v55;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v55, v27, v13);
    v40 = v13;
    v41 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore20FMIPNotifyItemAction_state);
    v42 = (void *)objc_opt_self();
    v43 = (void *)sub_1CCB635D4();
    v44 = &selRef_beginLeashingWithBeaconUUID_;
    if (!v41)
      v44 = &selRef_endLeashingWithBeaconUUID_;
    v45 = objc_msgSend(v42, *v44, v43);

    v46 = *(void **)(v54 + 24);
    v47 = (_QWORD *)swift_allocObject();
    v47[2] = sub_1CCA8FA90;
    v47[3] = v15;
    v47[4] = a1;
    aBlock[4] = (uint64_t)sub_1CCA8F864;
    aBlock[5] = (uint64_t)v47;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CCA1F54C;
    aBlock[3] = (uint64_t)&unk_1E88F68A0;
    v48 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v46, sel_executeCommand_completion_, v45, v48);
    _Block_release(v48);

    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
    return swift_release();
  }
}

uint64_t sub_1CCA8F0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _BYTE *v41;
  char *v43;
  uint64_t v44;
  int v45;
  void *v46;
  uint64_t v47;
  void *v48;
  char **v49;
  id v50;
  void *v51;
  _QWORD *v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t (*v56)(_QWORD, _QWORD, _QWORD);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t aBlock[6];

  v58 = a2;
  v11 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CCB63604();
  v62 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v59 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  v17 = qword_1ED8AA630;
  v60 = a3;
  swift_retain();
  v61 = a4;
  swift_retain();
  swift_retain();
  if (v17 != -1)
    swift_once();
  v18 = sub_1CCB637FC();
  sub_1CCA16C20(v18, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v19 = sub_1CCB637D8();
  v20 = sub_1CCB63D48();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v55 = v14;
    v22 = v21;
    v23 = swift_slowAlloc();
    v56 = a5;
    v24 = v23;
    aBlock[0] = v23;
    *(_DWORD *)v22 = 136315394;
    v57 = a6;
    v25 = FMIPItemAction.debugDescription.getter();
    v63 = sub_1CCA0CB60(v25, v26, aBlock);
    v54 = v16;
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    v27 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore20FMIPNotifyItemAction_state);
    *(_WORD *)(v22 + 12) = 2080;
    if (v27)
      v28 = 0x64656C62616E65;
    else
      v28 = 0x64656C6261736964;
    if (v27)
      v29 = 0xE700000000000000;
    else
      v29 = 0xE800000000000000;
    v63 = sub_1CCA0CB60(v28, v29, aBlock);
    v16 = v54;
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v19, v20, "FMIPItemActionsController: performing notify when found action %s, state: %s ", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    v30 = v24;
    a5 = v56;
    MEMORY[0x1D17B214C](v30, -1, -1);
    v31 = v22;
    v14 = v55;
    MEMORY[0x1D17B214C](v31, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v32 = v62;
  v33 = a1 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item;
  sub_1CCB635BC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v13, 1, v14) == 1)
  {
    sub_1CC9C3E84((uint64_t)v13, &qword_1ED8A8EF8);
    v34 = sub_1CCB637D8();
    v35 = sub_1CCB63D48();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_1CC9BF000, v34, v35, "FMIPItemActionsController: performing notify an item with an invalid identifier", v36, 2u);
      MEMORY[0x1D17B214C](v36, -1, -1);
    }

    LOBYTE(aBlock[0]) = 4;
    sub_1CCA14E90(&qword_1EF9E13F8);
    v37 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPItem() - 8) + 80);
    v38 = (v37 + 32) & ~v37;
    v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(v33, v39 + v38, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA8E87C();
    v40 = (void *)swift_allocError();
    *v41 = 0;
    sub_1CCA9DFD4((char *)aBlock, v39, v40, v60, v61, a5);

    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v43 = v59;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v59, v13, v14);
    v44 = v14;
    v45 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore20FMIPNotifyItemAction_state);
    v46 = (void *)objc_opt_self();
    v47 = v32;
    v48 = (void *)sub_1CCB635D4();
    v49 = &selRef_enableNotifyWhenFound_;
    if (!v45)
      v49 = &selRef_disableNotifyWhenFound_;
    v50 = objc_msgSend(v46, *v49, v48);

    v51 = *(void **)(v58 + 24);
    v52 = (_QWORD *)swift_allocObject();
    v52[2] = sub_1CCA8FA90;
    v52[3] = v16;
    v52[4] = a1;
    aBlock[4] = (uint64_t)sub_1CCA8F8C4;
    aBlock[5] = (uint64_t)v52;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CCA1F54C;
    aBlock[3] = (uint64_t)&unk_1E88F6918;
    v53 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v51, sel_executeCommand_completion_, v50, v53);
    _Block_release(v53);

    (*(void (**)(char *, uint64_t))(v47 + 8))(v43, v44);
    return swift_release();
  }
}

uint64_t sub_1CCA8F6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  int v17;

  v12 = qword_1ED8AA630;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  if (v12 != -1)
    swift_once();
  v13 = sub_1CCB637FC();
  sub_1CCA16C20(v13, (uint64_t)qword_1ED8AD7F8);
  v14 = sub_1CCB637D8();
  v15 = sub_1CCB63D48();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1CC9BF000, v14, v15, "FMIPItemActionsController: Notification action received", v16, 2u);
    MEMORY[0x1D17B214C](v16, -1, -1);
  }

  v17 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore20FMIPNotifyItemAction_type);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v17 == 1)
    sub_1CCA8EB70(a1, a2, a3, a4, a5, a6);
  else
    sub_1CCA8F0D4(a1, a2, a3, a4, a5, a6);
  swift_release_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t sub_1CCA8F864(void *a1)
{
  uint64_t v1;

  return sub_1CCA8720C(a1, *(void (**)(uint64_t *, uint64_t, void *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), "FMIPItemActionsController: notify action completed with error: %s");
}

uint64_t sub_1CCA8F88C()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA8F8C4(void *a1)
{
  uint64_t v1;

  return sub_1CCA8720C(a1, *(void (**)(uint64_t *, uint64_t, void *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), "FMIPItemActionsController: notify when found command executed %s");
}

uint64_t sub_1CCA8F8E8(uint64_t a1)
{
  uint64_t v1;

  return sub_1CCA8A8C4(a1, *(uint64_t (**)(char *, _QWORD, _QWORD))(v1 + 16));
}

uint64_t sub_1CCA8F8F4(void *a1)
{
  uint64_t v1;

  return sub_1CCA8A9C4(a1, *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1CCA8F900(char *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;

  return sub_1CCA9D55C(a1, a2, a3, a4, a5, *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, void *, uint64_t))(v5 + 16));
}

uint64_t sub_1CCA8F908(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA89E24(a1, a2, *(uint64_t (**)(uint64_t *, _QWORD, _QWORD, void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), "FMIPItemActionsController: Assign safe location completed with error? %s");
}

uint64_t sub_1CCA8F928()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1CCB63604();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1CCA8F9C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(sub_1CCB63604() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1CCA8A040(a1, v1 + v4, *(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t))(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1CCA8FA34(char a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA8A28C(a1, a2, *(uint64_t (**)(uint64_t *, _QWORD, _QWORD, void *, uint64_t))(v2 + 16));
}

uint64_t sub_1CCA8FA3C(char *a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA9CC54(a1, a2, *(uint64_t (**)(_QWORD, _QWORD))(v2 + 16));
}

uint64_t sub_1CCA8FA48(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(char *, uint64_t);
  char *v4;
  char v6;
  char v7;

  v3 = *(uint64_t (**)(char *, uint64_t))(v1 + 16);
  if (a1)
  {
    v6 = 0;
    v4 = &v6;
  }
  else
  {
    v7 = 2;
    v4 = &v7;
  }
  return v3(v4, a1);
}

uint64_t FMIPURLScheme.getter()
{
  return 0x3170696D66;
}

uint64_t FMIPFindMyURLScheme.getter()
{
  return 0x796D646E6966;
}

uint64_t FMIPHttpsURLScheme.getter()
{
  return 0x7370747468;
}

uint64_t FMIPHttpURLScheme.getter()
{
  return 1886680168;
}

uint64_t FMIPURLBypassHost.getter()
{
  return 0x737361707962;
}

uint64_t FMIPURLDevicesHost.getter()
{
  return 0x73656369766564;
}

unint64_t FMIPURLUniversalLinkHost.getter()
{
  return 0xD000000000000010;
}

uint64_t FMIPURLConfigureHost.getter()
{
  return 0x72756769666E6F63;
}

uint64_t FMIPURLDevicePath.getter()
{
  return 0x6563697665642FLL;
}

uint64_t FMIPURLSiriHost.getter()
{
  return 1769105779;
}

uint64_t FMIPURLItemsHost.getter()
{
  return 0x736D657469;
}

uint64_t FMIPURLItemPath.getter()
{
  return 0x6D6574692FLL;
}

uint64_t FMIPURLInfo.originalURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1CCB63490();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t FMIPURLInfo.action.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FMIPURLInfo();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t type metadata accessor for FMIPURLInfo()
{
  uint64_t result;

  result = qword_1EF9E2760;
  if (!qword_1EF9E2760)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t FMIPURLInfo.action.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for FMIPURLInfo();
  *(_BYTE *)(v1 + *(int *)(result + 20)) = v2;
  return result;
}

uint64_t (*FMIPURLInfo.action.modify())(_QWORD)
{
  type metadata accessor for FMIPURLInfo();
  return nullsub_1;
}

uint64_t FMIPURLInfo.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPURLInfo() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPURLInfo.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FMIPURLInfo() + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*FMIPURLInfo.identifier.modify())(_QWORD)
{
  type metadata accessor for FMIPURLInfo();
  return nullsub_1;
}

uint64_t FMIPURLInfo.partIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPURLInfo() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPURLInfo.partIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FMIPURLInfo() + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*FMIPURLInfo.partIdentifier.modify())(_QWORD)
{
  type metadata accessor for FMIPURLInfo();
  return nullsub_1;
}

uint64_t FMIPURLInfo.returnURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMIPURLInfo();
  return sub_1CC9EAB74(v1 + *(int *)(v3 + 32), a1, &qword_1ED8A8EE8);
}

uint64_t FMIPURLInfo.returnURL.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for FMIPURLInfo() + 32);
  return sub_1CCA8FF80(a1, v3);
}

uint64_t sub_1CCA8FF80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A8EE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*FMIPURLInfo.returnURL.modify())(_QWORD)
{
  type metadata accessor for FMIPURLInfo();
  return nullsub_1;
}

uint64_t FMIPURLInfo.returnAppName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPURLInfo() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPURLInfo.returnAppName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FMIPURLInfo() + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*FMIPURLInfo.returnAppName.modify())(_QWORD)
{
  type metadata accessor for FMIPURLInfo();
  return nullsub_1;
}

uint64_t FMIPURLInfo.manufacturer.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPURLInfo() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPURLInfo.manufacturer.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FMIPURLInfo() + 40));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*FMIPURLInfo.manufacturer.modify())(_QWORD)
{
  type metadata accessor for FMIPURLInfo();
  return nullsub_1;
}

FMIPCore::FMIPURLAction_optional __swiftcall FMIPURLAction.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  FMIPCore::FMIPURLAction_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB642C4();
  result.value = swift_bridgeObjectRelease();
  v5 = 17;
  if (v3 < 0x11)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t FMIPURLAction.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA901D0 + 4 * byte_1CCB6B6B0[*v0]))(0x65646F4D74736F6CLL, 0xE800000000000000);
}

uint64_t sub_1CCA901D0()
{
  return 0x6E756F5379616C70;
}

uint64_t sub_1CCA901F0()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_1CCA90208()
{
  return 0x7463656C6573;
}

uint64_t sub_1CCA9021C()
{
  return 0x736E6F69746361;
}

uint64_t sub_1CCA90234()
{
  return 0x446C6C41776F6873;
}

uint64_t sub_1CCA90258()
{
  return 0x74497463656C6573;
}

unint64_t sub_1CCA90274()
{
  return 0xD000000000000010;
}

uint64_t sub_1CCA90290()
{
  return 0x6574746142776F6CLL;
}

unint64_t sub_1CCA902B0()
{
  return 0xD000000000000014;
}

uint64_t sub_1CCA902D0()
{
  return 0x796669746F6ELL;
}

uint64_t sub_1CCA902E4()
{
  return 0x496C6C41776F6873;
}

uint64_t sub_1CCA90304()
{
  return 0x65766F6D6572;
}

uint64_t sub_1CCA90318()
{
  return 0x52556E7275746572;
}

uint64_t sub_1CCA90334()
{
  return 0x7075746573;
}

uint64_t sub_1CCA90348()
{
  return 0x6974617261706573;
}

uint64_t sub_1CCA90368()
{
  return 0x61636F4C65666173;
}

uint64_t sub_1CCA90388(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CCB1DB04(*a1, *a2);
}

unint64_t sub_1CCA90398()
{
  unint64_t result;

  result = qword_1EF9E2700;
  if (!qword_1EF9E2700)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPURLAction, &type metadata for FMIPURLAction);
    atomic_store(result, (unint64_t *)&qword_1EF9E2700);
  }
  return result;
}

uint64_t sub_1CCA903DC()
{
  sub_1CCB6433C();
  FMIPURLAction.rawValue.getter();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA90440()
{
  FMIPURLAction.rawValue.getter();
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA90490()
{
  sub_1CCB6433C();
  FMIPURLAction.rawValue.getter();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPURLAction_optional sub_1CCA904F0(Swift::String *a1)
{
  return FMIPURLAction.init(rawValue:)(*a1);
}

uint64_t sub_1CCA904FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FMIPURLAction.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

char *initializeBufferWithCopyOfBuffer for FMIPURLInfo(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1CCB63490();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = a3[6];
    a1[a3[5]] = a2[a3[5]];
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    v14 = a3[7];
    v15 = a3[8];
    v16 = &a1[v14];
    v17 = &a2[v14];
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_QWORD *)v16 + 1) = v18;
    v19 = &a1[v15];
    v20 = &a2[v15];
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v21(v20, 1, v7))
    {
      v22 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v9(v19, v20, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v19, 0, 1, v7);
    }
    v24 = a3[9];
    v25 = a3[10];
    v26 = &a1[v24];
    v27 = &a2[v24];
    v28 = *((_QWORD *)v27 + 1);
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *((_QWORD *)v26 + 1) = v28;
    v29 = &a1[v25];
    v30 = &a2[v25];
    v31 = *((_QWORD *)v30 + 1);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for FMIPURLInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v4 = sub_1CCB63490();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 32);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4))
    v6(v7, v4);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for FMIPURLInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v6 = sub_1CCB63490();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = v12;
  v13 = a3[7];
  v14 = a3[8];
  v15 = &a1[v13];
  v16 = &a2[v13];
  v17 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = v17;
  v18 = &a1[v14];
  v19 = &a2[v14];
  v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20(v19, 1, v6))
  {
    v21 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v8(v18, v19, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v18, 0, 1, v6);
  }
  v22 = a3[9];
  v23 = a3[10];
  v24 = &a1[v22];
  v25 = &a2[v22];
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = v26;
  v27 = &a1[v23];
  v28 = &a2[v23];
  v29 = *((_QWORD *)v28 + 1);
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *((_QWORD *)v27 + 1) = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for FMIPURLInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t (*v18)(const void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v6 = sub_1CCB63490();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  a1[a3[5]] = a2[a3[5]];
  v9 = a3[6];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[8];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v19 = v18(&a1[v15], 1, v6);
  v20 = v18(v17, 1, v6);
  if (!v19)
  {
    if (!v20)
    {
      v8(v16, v17, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v16, v17, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
LABEL_7:
  v22 = a3[9];
  v23 = &a1[v22];
  v24 = &a2[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = a3[10];
  v26 = &a1[v25];
  v27 = &a2[v25];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for FMIPURLInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_1CCB63490();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v10], 1, v6))
  {
    v13 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)&a1[v14] = *(_OWORD *)&a2[v14];
  return a1;
}

char *assignWithTake for FMIPURLInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t (*v22)(const void *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  v6 = sub_1CCB63490();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[6];
  a1[a3[5]] = a2[a3[5]];
  v10 = &a1[v9];
  v11 = (uint64_t *)&a2[v9];
  v13 = *v11;
  v12 = v11[1];
  *(_QWORD *)v10 = v13;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = (uint64_t *)&a2[v14];
  v18 = *v16;
  v17 = v16[1];
  *(_QWORD *)v15 = v18;
  *((_QWORD *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  v19 = a3[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v23 = v22(&a1[v19], 1, v6);
  v24 = v22(v21, 1, v6);
  if (!v23)
  {
    if (!v24)
    {
      v8(v20, v21, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    v25 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v20, v21, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v20, 0, 1, v6);
LABEL_7:
  v26 = a3[9];
  v27 = &a1[v26];
  v28 = (uint64_t *)&a2[v26];
  v30 = *v28;
  v29 = v28[1];
  *(_QWORD *)v27 = v30;
  *((_QWORD *)v27 + 1) = v29;
  swift_bridgeObjectRelease();
  v31 = a3[10];
  v32 = &a1[v31];
  v33 = (uint64_t *)&a2[v31];
  v35 = *v33;
  v34 = v33[1];
  *(_QWORD *)v32 = v35;
  *((_QWORD *)v32 + 1) = v34;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPURLInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCA90D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = sub_1CCB63490();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = sub_1CCA14E90(&qword_1ED8A8EE8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for FMIPURLInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCA90DD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_1CCB63490();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
      return result;
    }
    v10 = sub_1CCA14E90(&qword_1ED8A8EE8);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1CCA90E84()
{
  unint64_t v0;
  unint64_t v1;

  sub_1CCB63490();
  if (v0 <= 0x3F)
  {
    sub_1CC9C3220();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for FMIPURLAction(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPURLAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1CCA90FFC + 4 * byte_1CCB6B6C6[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1CCA91030 + 4 * byte_1CCB6B6C1[v4]))();
}

uint64_t sub_1CCA91030(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA91038(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA91040);
  return result;
}

uint64_t sub_1CCA9104C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA91054);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1CCA91058(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA91060(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPURLAction()
{
  return &type metadata for FMIPURLAction;
}

uint64_t sub_1CCA9107C(uint64_t a1, void (*a2)(char *, void *), uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  void *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  char v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  char v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  void (*v84)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  void *v106;
  _BYTE *v107;
  char v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int *v133;
  void (*v134)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v135;
  uint64_t v136;
  _QWORD v137[2];
  _QWORD *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(char *, void *);
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;

  v150 = a2;
  v151 = a3;
  v6 = sub_1CCA14E90(&qword_1EF9E27B0);
  MEMORY[0x1E0C80A78](v6);
  v147 = (uint64_t)v137 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1EF9E27B8);
  MEMORY[0x1E0C80A78](v8);
  v152 = (char *)v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_1CCB6331C();
  v154 = *(_QWORD *)(v156 - 8);
  v10 = MEMORY[0x1E0C80A78](v156);
  v143 = (char *)v137 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v142 = (char *)v137 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v145 = (char *)v137 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v144 = (char *)v137 - v17;
  MEMORY[0x1E0C80A78](v16);
  v155 = (char *)v137 - v18;
  v19 = sub_1CCB63490();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v137 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (int *)type metadata accessor for FMIPURLInfo();
  v149 = swift_allocBox();
  v25 = v24;
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  v26(v24, a1, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v25 + v23[8], 1, 1, v19);
  v27 = v23[5];
  *(_BYTE *)(v25 + v27) = 17;
  v28 = (uint64_t *)(v25 + v23[6]);
  *v28 = 0;
  v28[1] = 0;
  v140 = v28;
  v141 = v27;
  v29 = (_QWORD *)(v25 + v23[7]);
  *v29 = 0;
  v29[1] = 0;
  v30 = (_QWORD *)(v25 + v23[9]);
  *v30 = 0;
  v30[1] = 0;
  v146 = v23;
  v31 = (_QWORD *)(v25 + v23[10]);
  *v31 = 0;
  v31[1] = 0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v32 = sub_1CCB637FC();
  v33 = sub_1CCA16C20(v32, (uint64_t)qword_1ED8AD7F8);
  v153 = a1;
  v26((uint64_t)v22, a1, v19);
  v148 = v33;
  v34 = sub_1CCB637D8();
  v35 = sub_1CCB63D48();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc();
    v139 = v25;
    v37 = (uint8_t *)v36;
    v38 = swift_slowAlloc();
    v138 = a4;
    v39 = v38;
    v158 = v38;
    *(_DWORD *)v37 = 136315138;
    v137[1] = v37 + 4;
    v40 = sub_1CCB63430();
    v157 = sub_1CCA0CB60(v40, v41, &v158);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    _os_log_impl(&dword_1CC9BF000, v34, v35, "FMIPURLHandler: handle url %s", v37, 0xCu);
    swift_arrayDestroy();
    v42 = v39;
    a4 = v138;
    MEMORY[0x1D17B214C](v42, -1, -1);
    v43 = v37;
    v25 = v139;
    MEMORY[0x1D17B214C](v43, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }

  v44 = (uint64_t)v152;
  sub_1CCB632E0();
  v45 = v154;
  v46 = v156;
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 48))(v44, 1, v156);
  v48 = (uint64_t)v155;
  if (v47 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v155, v44, v46);
    v55 = sub_1CCB63310();
    if (v56)
    {
      if (v55 == 0x3170696D66 && v56 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
        v57 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
        v58 = v144;
        v57(v144, v48, v46);
LABEL_16:
        v60 = *(void (**)(char *, uint64_t))(v45 + 8);
        v60(v58, v46);
LABEL_21:
        v63 = v145;
        v57(v145, v48, v46);
        v64 = v142;
LABEL_22:
        v60(v63, v46);
LABEL_23:
        v57(v64, v48, v46);
LABEL_24:
        v60(v64, v46);
        goto LABEL_25;
      }
      v59 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      v57 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
      v58 = v144;
      v57(v144, v48, v46);
      if ((v59 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      v57 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
      v58 = v144;
      v57(v144, v48, v46);
    }
    v61 = sub_1CCB63310();
    if (v62)
    {
      if (v61 == 0x796D646E6966 && v62 == 0xE600000000000000)
      {
        v60 = *(void (**)(char *, uint64_t))(v45 + 8);
        v60(v144, v46);
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      v72 = sub_1CCB642A0();
      v60 = *(void (**)(char *, uint64_t))(v45 + 8);
      v60(v144, v46);
      swift_bridgeObjectRelease();
      v57(v145, v48, v46);
      if ((v72 & 1) != 0)
      {
        v64 = v142;
        v63 = v145;
        goto LABEL_22;
      }
      v71 = v145;
    }
    else
    {
      v60 = *(void (**)(char *, uint64_t))(v45 + 8);
      v60(v58, v46);
      v71 = v145;
      v57(v145, v48, v46);
    }
    v90 = sub_1CCB63310();
    if (v91)
    {
      if (v90 == 0x7370747468 && v91 == 0xE500000000000000)
      {
        v60(v145, v46);
        swift_bridgeObjectRelease();
        v64 = v142;
        goto LABEL_23;
      }
      v92 = sub_1CCB642A0();
      v60(v145, v46);
      swift_bridgeObjectRelease();
      v64 = v142;
      v57(v142, v48, v46);
      if ((v92 & 1) != 0)
        goto LABEL_24;
    }
    else
    {
      v60(v71, v46);
      v64 = v142;
      v57(v142, v48, v46);
    }
    v93 = sub_1CCB63310();
    if (v94)
    {
      if (v93 == 1886680168 && v94 == 0xE400000000000000)
      {
        v60(v142, v46);
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      v101 = sub_1CCB642A0();
      v60(v142, v46);
      swift_bridgeObjectRelease();
      if ((v101 & 1) != 0)
      {
LABEL_25:
        v65 = sub_1CCB632F8();
        if (v66)
        {
          if (v65 == 0x73656369766564 && v66 == 0xE700000000000000)
          {
            swift_bridgeObjectRelease();
            v67 = v143;
            v57(v143, v48, v46);
LABEL_31:
            v60(v67, v46);
LABEL_41:
            v74 = sub_1CCB637D8();
            v75 = sub_1CCB63D48();
            if (os_log_type_enabled(v74, v75))
            {
              v76 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v76 = 0;
              _os_log_impl(&dword_1CC9BF000, v74, v75, "FMIPURLHandler: processURL generic devices action", v76, 2u);
              MEMORY[0x1D17B214C](v76, -1, -1);
            }

            v77 = 5;
LABEL_44:
            *(_BYTE *)(v25 + v141) = v77;
            v78 = sub_1CCB632F8();
            v80 = v79;
            v81 = v147;
            sub_1CCA9278C(v25, v147);
            v82 = v25;
            v83 = v146;
            v84 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v146 - 1) + 56);
            v84(v81, 0, 1, v146);
            _s8FMIPCore13FMIPAnalyticsV19sendLaunchAnalytics7context4infoySSSg_AA11FMIPURLInfoVSgtFZ_0(v78, v80, v81);
            swift_bridgeObjectRelease();
            sub_1CC9C3E84(v81, &qword_1EF9E27B0);
            sub_1CCA9278C(v82, v81);
            v84(v81, 0, 1, v83);
            v150((char *)v81, 0);
            v85 = v81;
LABEL_45:
            sub_1CC9C3E84(v85, &qword_1EF9E27B0);
LABEL_46:
            v86 = v48;
LABEL_47:
            v60((char *)v86, v46);
            return swift_release();
          }
          v68 = sub_1CCB642A0();
          swift_bridgeObjectRelease();
          v67 = v143;
          v57(v143, v48, v46);
          if ((v68 & 1) != 0)
            goto LABEL_31;
        }
        else
        {
          v67 = v143;
          v57(v143, v48, v46);
        }
        v69 = sub_1CCB632F8();
        if (v70)
        {
          if (v69 == 1769105779 && v70 == 0xE400000000000000)
          {
            v60(v143, v46);
            swift_bridgeObjectRelease();
            goto LABEL_41;
          }
          v73 = sub_1CCB642A0();
          v60(v143, v46);
          swift_bridgeObjectRelease();
          if ((v73 & 1) != 0)
            goto LABEL_41;
        }
        else
        {
          v60(v67, v46);
        }
        v88 = sub_1CCB632F8();
        if (v89)
        {
          if (v88 == 0x736D657469 && v89 == 0xE500000000000000)
          {
            swift_bridgeObjectRelease();
LABEL_65:
            v96 = sub_1CCB637D8();
            v97 = sub_1CCB63D48();
            if (os_log_type_enabled(v96, v97))
            {
              v98 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v98 = 0;
              _os_log_impl(&dword_1CC9BF000, v96, v97, "FMIPURLHandler: processURL generic items action", v98, 2u);
              MEMORY[0x1D17B214C](v98, -1, -1);
            }

            v77 = 11;
            goto LABEL_44;
          }
          v95 = sub_1CCB642A0();
          swift_bridgeObjectRelease();
          if ((v95 & 1) != 0)
            goto LABEL_65;
        }
        v99 = sub_1CCB632F8();
        if (v100)
        {
          if (v99 == 0xD000000000000010 && v100 == 0x80000001CCB7ABE0)
          {
            swift_bridgeObjectRelease();
LABEL_78:
            v109 = sub_1CCB637D8();
            v110 = sub_1CCB63D48();
            if (os_log_type_enabled(v109, v110))
            {
              v111 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v111 = 0;
              _os_log_impl(&dword_1CC9BF000, v109, v110, "FMIPURLHandler: process universal link action", v111, 2u);
              MEMORY[0x1D17B214C](v111, -1, -1);
            }

            sub_1CCA946AC(v48, (void (*)(_QWORD, _QWORD))v150, v151);
            goto LABEL_46;
          }
          v108 = sub_1CCB642A0();
          swift_bridgeObjectRelease();
          if ((v108 & 1) != 0)
            goto LABEL_78;
        }
        v112 = sub_1CCB632F8();
        if (v113)
        {
          if (v112 == 0x72756769666E6F63 && v113 == 0xE900000000000065)
          {
            swift_bridgeObjectRelease();
LABEL_86:
            *(_BYTE *)(v25 + v141) = 6;
            v115 = sub_1CCB63304();
            v117 = sub_1CCB398E4(1uLL, v115, v116);
            v119 = v118;
            v121 = v120;
            v122 = v48;
            v124 = v123;
            swift_bridgeObjectRelease();
            v125 = MEMORY[0x1D17B0F34](v117, v119, v121, v124);
            v127 = v126;
            swift_bridgeObjectRelease();
            v128 = v140;
            *v140 = v125;
            v128[1] = v127;
            swift_bridgeObjectRelease();
            v129 = sub_1CCB632F8();
            v131 = v130;
            v132 = v147;
            sub_1CCA9278C(v25, v147);
            v133 = v146;
            v134 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v146 - 1) + 56);
            v134(v132, 0, 1, v146);
            _s8FMIPCore13FMIPAnalyticsV19sendLaunchAnalytics7context4infoySSSg_AA11FMIPURLInfoVSgtFZ_0(v129, v131, v132);
            swift_bridgeObjectRelease();
            sub_1CC9C3E84(v132, &qword_1EF9E27B0);
            sub_1CCA9278C(v25, v132);
            v134(v132, 0, 1, v133);
            v150((char *)v132, 0);
            sub_1CC9C3E84(v132, &qword_1EF9E27B0);
            v86 = v122;
            goto LABEL_47;
          }
          v114 = sub_1CCB642A0();
          swift_bridgeObjectRelease();
          if ((v114 & 1) != 0)
            goto LABEL_86;
        }
        v135 = v151;
        swift_retain();
        v136 = v149;
        swift_retain();
        swift_retain();
        sub_1CCA940B0(v48, a4, v150, v135, v136, (uint64_t)a4);
        swift_release();
        swift_release();
        swift_release();
        v60((char *)v48, v46);
        return swift_release();
      }
    }
    else
    {
      v60(v64, v46);
    }
    v102 = sub_1CCB637D8();
    v103 = sub_1CCB63D30();
    if (os_log_type_enabled(v102, v103))
    {
      v104 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v104 = 0;
      _os_log_impl(&dword_1CC9BF000, v102, v103, "FMIPURLHandler: scheme not supported", v104, 2u);
      MEMORY[0x1D17B214C](v104, -1, -1);
    }

    v105 = v147;
    sub_1CCA9278C(v25, v147);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*((_QWORD *)v146 - 1) + 56))(v105, 0, 1);
    sub_1CCA927D0();
    v106 = (void *)swift_allocError();
    *v107 = 3;
    v150((char *)v105, v106);

    v85 = v105;
    goto LABEL_45;
  }
  sub_1CC9C3E84(v44, &qword_1EF9E27B8);
  v49 = sub_1CCB637D8();
  v50 = sub_1CCB63D30();
  if (os_log_type_enabled(v49, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v51 = 0;
    _os_log_impl(&dword_1CC9BF000, v49, v50, "FMIPURLHandler: invalid URL", v51, 2u);
    MEMORY[0x1D17B214C](v51, -1, -1);
  }

  v52 = v147;
  sub_1CCA9278C(v25, v147);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*((_QWORD *)v146 - 1) + 56))(v52, 0, 1);
  sub_1CCA927D0();
  v53 = (void *)swift_allocError();
  *v54 = 2;
  v150((char *)v52, v53);

  sub_1CC9C3E84(v52, &qword_1EF9E27B0);
  return swift_release();
}

uint64_t sub_1CCA92008(uint64_t a1, void *a2, void (*a3)(char *, void *), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  _BYTE *v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, void *);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v65 = a4;
  v66 = a3;
  v6 = sub_1CCA14E90(&qword_1EF9E27B8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v57 - v10;
  v12 = sub_1CCB6331C();
  v68 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v15);
  v62 = (uint64_t)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1CCB63490();
  v63 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v61 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v19 = sub_1CCB637FC();
  v20 = sub_1CCA16C20(v19, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v64 = v20;
  v21 = sub_1CCB637D8();
  v22 = sub_1CCB63D48();
  v23 = os_log_type_enabled(v21, v22);
  v67 = v12;
  if (v23)
  {
    v24 = swift_slowAlloc();
    v60 = v9;
    v25 = (uint8_t *)v24;
    v26 = swift_slowAlloc();
    v59 = v14;
    v27 = v26;
    v58 = v11;
    *(_DWORD *)v25 = 136315138;
    v69 = a1;
    v70 = v26;
    sub_1CCA14E90(&qword_1EF9E27D8);
    v28 = sub_1CCB63E20();
    v69 = sub_1CCA0CB60(v28, v29, &v70);
    v12 = v67;
    v11 = v58;
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v21, v22, "FMIPURLHandler: getURLInfo response received: %s", v25, 0xCu);
    swift_arrayDestroy();
    v30 = v27;
    v14 = v59;
    MEMORY[0x1D17B214C](v30, -1, -1);
    v31 = v25;
    v9 = v60;
    MEMORY[0x1D17B214C](v31, -1, -1);

    if (a2)
      goto LABEL_10;
  }
  else
  {

    swift_release_n();
    if (a2)
    {
LABEL_10:
      v36 = a2;
      v37 = a2;
      v38 = sub_1CCB637D8();
      v39 = sub_1CCB63D48();
      if (os_log_type_enabled(v38, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc();
        v41 = a2;
        v42 = swift_slowAlloc();
        v69 = (uint64_t)v41;
        v70 = v42;
        *(_DWORD *)v40 = 136315138;
        sub_1CCA14E90(&qword_1EF9DFCB8);
        v43 = sub_1CCB63E20();
        v69 = sub_1CCA0CB60(v43, v44, &v70);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1CC9BF000, v38, v39, "FMIPURLHandler: error received for getURLInfo request: %s", v40, 0xCu);
        swift_arrayDestroy();
        v45 = v42;
        a2 = v41;
        MEMORY[0x1D17B214C](v45, -1, -1);
        v12 = v67;
        MEMORY[0x1D17B214C](v40, -1, -1);
      }
      else
      {

      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v9, 1, 1, v12);
      v66(v9, a2);
      return sub_1CC9C3E84((uint64_t)v9, &qword_1EF9E27B8);
    }
  }
  if (!a1)
    goto LABEL_10;
  v32 = v62;
  sub_1CC9EAB74(a1 + OBJC_IVAR____TtC8FMIPCore22FMIPGetURLInfoResponse_url, v62, &qword_1ED8A8EE8);
  v33 = v63;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v32, 1, v17) == 1)
  {
    swift_retain();
    v34 = &qword_1ED8A8EE8;
    v35 = v32;
LABEL_14:
    sub_1CC9C3E84(v35, v34);
    v63 = a1;
    v47 = sub_1CCB637D8();
    v48 = sub_1CCB63D48();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc();
      v50 = swift_slowAlloc();
      v69 = 0;
      v70 = v50;
      *(_DWORD *)v49 = 136315138;
      sub_1CCA14E90(&qword_1EF9DFCB8);
      v51 = sub_1CCB63E20();
      v69 = sub_1CCA0CB60(v51, v52, &v70);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v47, v48, "FMIPURLHandler: error received for getURLInfo request: %s", v49, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v50, -1, -1);
      MEMORY[0x1D17B214C](v49, -1, -1);
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v9, 1, 1, v67);
    sub_1CCA927D0();
    v53 = (void *)swift_allocError();
    *v54 = 2;
    v66(v9, v53);

    swift_release();
    return sub_1CC9C3E84((uint64_t)v9, &qword_1EF9E27B8);
  }
  v46 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v61, v32, v17);
  swift_retain();
  sub_1CCB632E0();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v11, 1, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v46, v17);
    v34 = &qword_1EF9E27B8;
    v35 = (uint64_t)v11;
    goto LABEL_14;
  }
  v56 = v68;
  (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v14, v11, v12);
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v9, v14, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v9, 0, 1, v12);
  v66(v9, 0);
  swift_release();
  sub_1CC9C3E84((uint64_t)v9, &qword_1EF9E27B8);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v14, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v46, v17);
}

uint64_t sub_1CCA92768()
{
  uint64_t v0;

  sub_1CCA01CA0(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA9278C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPURLInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1CCA927D0()
{
  unint64_t result;

  result = qword_1EF9E27C0;
  if (!qword_1EF9E27C0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6B8EC, &type metadata for FMIPURLHandlerError);
    atomic_store(result, (unint64_t *)&qword_1EF9E27C0);
  }
  return result;
}

uint64_t sub_1CCA92814(uint64_t a1, void (*a2)(char *, void *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t result;
  uint64_t v69;
  int *v70;
  uint64_t *v71;
  uint64_t *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  char *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void (*v90)(char *, unint64_t, uint64_t);
  char *v91;
  uint64_t v92;
  char v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void (*v100)(char *, unint64_t, uint64_t);
  uint64_t v101;
  char v102;
  char v103;
  NSObject *v104;
  os_log_type_t v105;
  _BOOL4 v106;
  uint8_t *v107;
  void *v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  void (*v120)(os_log_t, unint64_t, uint64_t);
  os_log_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  char *v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  uint64_t v137;
  void *v138;
  _BYTE *v139;
  uint64_t v140;
  void *v141;
  void *v142;
  Swift::String v143;
  NSObject *v144;
  os_log_type_t v145;
  uint8_t *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  void (*v151)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v152;
  void *v153;
  _BYTE *v154;
  NSObject *v155;
  os_log_type_t v156;
  uint8_t *v157;
  uint64_t *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  void (*v162)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  NSObject *v168;
  int v169;
  void (*v170)(uint64_t, uint64_t);
  uint8_t *v171;
  uint8_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint8_t *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  os_log_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(char *, void *);
  uint64_t v199;
  char *v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  void (*v214)(char *, uint64_t, uint64_t);
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  void (*v219)(char *, void *);
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  os_log_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;

  v6 = sub_1CCA14E90(&qword_1EF9E27B0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v203 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCB632BC();
  v10 = *(_QWORD *)(v9 - 8);
  v233 = v9;
  v234 = v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v231 = (os_log_t)((char *)&v203 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x1E0C80A78](v11);
  v212 = (char *)&v203 - v14;
  MEMORY[0x1E0C80A78](v13);
  v230 = (char *)&v203 - v15;
  v16 = sub_1CCA14E90(&qword_1EF9E27C8);
  v17 = MEMORY[0x1E0C80A78](v16);
  v207 = (char *)&v203 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v205 = (uint64_t)&v203 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v204 = (uint64_t)&v203 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v209 = (uint64_t)&v203 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v208 = (uint64_t)&v203 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v211 = (uint64_t)&v203 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v213 = (uint64_t)&v203 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v225 = (uint64_t)&v203 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v223 = (uint64_t)&v203 - v34;
  MEMORY[0x1E0C80A78](v33);
  v226 = (uint64_t)&v203 - v35;
  v227 = type metadata accessor for FMIPURLInfo();
  v36 = *(_QWORD *)(v227 - 8);
  MEMORY[0x1E0C80A78](v227);
  v229 = (char *)&v203 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v38);
  v221 = (char *)&v203 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1CCB63490();
  v228 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v42 = (char *)&v203 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_1CCB6331C();
  v44 = *(_QWORD *)(v43 - 8);
  v45 = MEMORY[0x1E0C80A78](v43);
  v215 = (char *)&v203 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v45);
  v48 = (char *)&v203 - v47;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v217 = v36;
  v218 = a3;
  v219 = (void (*)(char *, void *))a2;
  v49 = sub_1CCB637FC();
  v50 = sub_1CCA16C20(v49, (uint64_t)qword_1ED8AD7F8);
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  v232 = a1;
  v214 = v51;
  v51(v48, a1, v43);
  v220 = v50;
  v52 = sub_1CCB637D8();
  v53 = sub_1CCB63D48();
  v54 = os_log_type_enabled(v52, v53);
  v216 = v8;
  v224 = v40;
  v222 = v42;
  if (v54)
  {
    v55 = (uint8_t *)swift_slowAlloc();
    v56 = swift_slowAlloc();
    v235 = v56;
    *(_DWORD *)v55 = 136315138;
    v57 = sub_1CCB632D4();
    v237 = sub_1CCA0CB60(v57, v58, &v235);
    v42 = v222;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    v59 = *(void (**)(char *, uint64_t))(v44 + 8);
    v60 = v48;
    v61 = v43;
    v59(v60, v43);
    _os_log_impl(&dword_1CC9BF000, v52, v53, "FMIPURLHandler: processing urlComponents %s", v55, 0xCu);
    swift_arrayDestroy();
    v62 = v56;
    v40 = v224;
    MEMORY[0x1D17B214C](v62, -1, -1);
    v63 = v55;
    v8 = v216;
    MEMORY[0x1D17B214C](v63, -1, -1);
  }
  else
  {
    v59 = *(void (**)(char *, uint64_t))(v44 + 8);
    v64 = v48;
    v61 = v43;
    v59(v64, v43);
  }

  v65 = v233;
  v66 = v221;
  sub_1CCB632EC();
  v67 = v228;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v228 + 48))(v66, 1, v40);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v42, v66, v40);
    v69 = (uint64_t)v229;
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v229, v42, v40);
    v70 = (int *)v227;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v69 + *(int *)(v227 + 32), 1, 1, v40);
    v221 = (char *)v70[5];
    v221[v69] = 17;
    v71 = (uint64_t *)(v69 + v70[6]);
    *v71 = 0;
    v71[1] = 0;
    v210 = v71;
    v72 = (uint64_t *)(v69 + v70[7]);
    *v72 = 0;
    v72[1] = 0;
    v206 = v72;
    v73 = (_QWORD *)(v69 + v70[9]);
    *v73 = 0;
    v73[1] = 0;
    v74 = (_QWORD *)(v69 + v70[10]);
    *v74 = 0;
    v74[1] = 0;
    v75 = sub_1CCB632F8();
    if (v76)
    {
      if (v75 == 0x73656369766564 && v76 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
LABEL_12:
        v78 = sub_1CCB637D8();
        v79 = sub_1CCB63D48();
        if (os_log_type_enabled(v78, v79))
        {
          v80 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v80 = 0;
          _os_log_impl(&dword_1CC9BF000, v78, v79, "FMIPURLHandler: processURL generic devices action", v80, 2u);
          MEMORY[0x1D17B214C](v80, -1, -1);
        }

        v221[v69] = 5;
        sub_1CCA9278C(v69, (uint64_t)v8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v8, 0, 1, v227);
        v219(v8, 0);
LABEL_15:
        sub_1CC9C3E84((uint64_t)v8, &qword_1EF9E27B0);
        (*(void (**)(char *, uint64_t))(v228 + 8))(v42, v40);
        return sub_1CCA960A8(v69);
      }
      v77 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      if ((v77 & 1) != 0)
        goto LABEL_12;
    }
    if (sub_1CCB63304() == 0x6563697665642FLL && v81 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
      v82 = v215;
      v214(v215, v232, v61);
    }
    else
    {
      v83 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      v82 = v215;
      v214(v215, v232, v61);
      if ((v83 & 1) == 0)
      {
        if (sub_1CCB63304() != 0x6D6574692FLL || v84 != 0xE500000000000000)
        {
          v103 = sub_1CCB642A0();
          swift_bridgeObjectRelease();
          v59(v215, v61);
          if ((v103 & 1) == 0)
          {
            v104 = sub_1CCB637D8();
            v105 = sub_1CCB63D30();
            v106 = os_log_type_enabled(v104, v105);
            v69 = (uint64_t)v229;
            if (v106)
            {
              v107 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v107 = 0;
              _os_log_impl(&dword_1CC9BF000, v104, v105, "FMIPURLHandler: processURL invalid action", v107, 2u);
              MEMORY[0x1D17B214C](v107, -1, -1);
            }

            sub_1CCA9278C(v69, (uint64_t)v8);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v8, 0, 1, v227);
            sub_1CCA927D0();
            v108 = (void *)swift_allocError();
            *v109 = 0;
            v219(v8, v108);

            goto LABEL_15;
          }
LABEL_24:
          v85 = sub_1CCB632C8();
          v69 = (uint64_t)v229;
          if (v85)
          {
            v86 = *(_QWORD *)(v85 + 16);
            v87 = v234;
            if (v86)
            {
              v88 = v85
                  + ((*(unsigned __int8 *)(v234 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v234 + 80));
              v89 = *(_QWORD *)(v234 + 72);
              v90 = *(void (**)(char *, unint64_t, uint64_t))(v234 + 16);
              swift_bridgeObjectRetain();
              v91 = v230;
              v87 = v234;
              while (1)
              {
                v90(v91, v88, v65);
                if (sub_1CCB632A4() == 25705 && v92 == 0xE200000000000000)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_50;
                }
                v93 = sub_1CCB642A0();
                swift_bridgeObjectRelease();
                if ((v93 & 1) != 0)
                  break;
                v91 = v230;
                v65 = v233;
                (*(void (**)(char *, uint64_t))(v87 + 8))(v230, v233);
                v88 += v89;
                if (!--v86)
                {
                  swift_bridgeObjectRelease();
                  v40 = v224;
                  v69 = (uint64_t)v229;
                  goto LABEL_32;
                }
              }
              v65 = v233;
LABEL_50:
              v110 = v234;
              swift_bridgeObjectRelease();
              v111 = v226;
              (*(void (**)(uint64_t, char *, uint64_t))(v110 + 32))(v226, v230, v65);
              v94 = *(char **)(v110 + 56);
              ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v94)(v111, 0, 1, v65);
              swift_bridgeObjectRelease();
              v40 = v224;
              v95 = v212;
              v69 = (uint64_t)v229;
              v96 = sub_1CCB632C8();
              if (!v96)
                goto LABEL_51;
              goto LABEL_35;
            }
LABEL_32:
            v94 = *(char **)(v87 + 56);
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v94)(v226, 1, 1, v65);
            swift_bridgeObjectRelease();
          }
          else
          {
            v94 = *(char **)(v234 + 56);
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v94)(v226, 1, 1, v65);
          }
          v95 = v212;
          v96 = sub_1CCB632C8();
          if (!v96)
          {
LABEL_51:
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v94)(v223, 1, 1, v65);
            goto LABEL_54;
          }
LABEL_35:
          v97 = *(_QWORD *)(v96 + 16);
          if (v97)
          {
            v230 = v94;
            v98 = v96 + ((*(unsigned __int8 *)(v234 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v234 + 80));
            v99 = *(_QWORD *)(v234 + 72);
            v100 = *(void (**)(char *, unint64_t, uint64_t))(v234 + 16);
            swift_bridgeObjectRetain();
            while (1)
            {
              v100(v95, v98, v65);
              if (sub_1CCB632A4() == 0x644974726170 && v101 == 0xE600000000000000)
              {
                swift_bridgeObjectRelease();
                goto LABEL_53;
              }
              v102 = sub_1CCB642A0();
              swift_bridgeObjectRelease();
              if ((v102 & 1) != 0)
                break;
              v65 = v233;
              (*(void (**)(char *, uint64_t))(v234 + 8))(v95, v233);
              v98 += v99;
              if (!--v97)
              {
                swift_bridgeObjectRelease();
                v69 = (uint64_t)v229;
                v94 = v230;
                v40 = v224;
                goto LABEL_42;
              }
            }
            v65 = v233;
LABEL_53:
            v112 = v234;
            swift_bridgeObjectRelease();
            v113 = *(void (**)(uint64_t, char *, uint64_t))(v112 + 32);
            v114 = v223;
            v113(v223, v95, v65);
            v94 = v230;
            ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v230)(v114, 0, 1, v65);
            swift_bridgeObjectRelease();
            v69 = (uint64_t)v229;
            v40 = v224;
          }
          else
          {
LABEL_42:
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v94)(v223, 1, 1, v65);
            swift_bridgeObjectRelease();
          }
LABEL_54:
          v115 = sub_1CCB632C8();
          if (v115)
          {
            v116 = *(_QWORD *)(v115 + 16);
            v117 = v234;
            if (v116)
            {
              v230 = v94;
              v118 = v115
                   + ((*(unsigned __int8 *)(v234 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v234 + 80));
              v119 = *(_QWORD *)(v234 + 72);
              v120 = *(void (**)(os_log_t, unint64_t, uint64_t))(v234 + 16);
              swift_bridgeObjectRetain();
              v121 = v231;
              v117 = v234;
              while (1)
              {
                v120(v121, v118, v65);
                if (sub_1CCB632A4() == 28783 && v122 == 0xE200000000000000)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_66;
                }
                v123 = sub_1CCB642A0();
                swift_bridgeObjectRelease();
                if ((v123 & 1) != 0)
                  break;
                v121 = v231;
                v65 = v233;
                (*(void (**)(os_log_t, uint64_t))(v117 + 8))(v231, v233);
                v118 += v119;
                if (!--v116)
                {
                  swift_bridgeObjectRelease();
                  v69 = (uint64_t)v229;
                  v94 = v230;
                  v40 = v224;
                  goto LABEL_62;
                }
              }
              v65 = v233;
LABEL_66:
              v117 = v234;
              swift_bridgeObjectRelease();
              v124 = v225;
              (*(void (**)(uint64_t, os_log_t, uint64_t))(v117 + 32))(v225, v231, v65);
              ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v230)(v124, 0, 1, v65);
              swift_bridgeObjectRelease();
              v69 = (uint64_t)v229;
              v40 = v224;
            }
            else
            {
LABEL_62:
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v94)(v225, 1, 1, v65);
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v94)(v225, 1, 1, v65);
            v117 = v234;
          }
          v125 = v213;
          sub_1CC9EAB74(v226, v213, &qword_1EF9E27C8);
          v126 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
          if (v126(v125, 1, v65) == 1)
          {
            sub_1CC9C3E84(v125, &qword_1EF9E27C8);
LABEL_72:
            v134 = sub_1CCB637D8();
            v135 = sub_1CCB63D30();
            if (os_log_type_enabled(v134, v135))
            {
              v136 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v136 = 0;
              _os_log_impl(&dword_1CC9BF000, v134, v135, "FMIPURLHandler: processURL invalid device identifier", v136, 2u);
              MEMORY[0x1D17B214C](v136, -1, -1);
            }

            v137 = (uint64_t)v216;
            sub_1CCA9278C(v69, (uint64_t)v216);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v217 + 56))(v137, 0, 1, v227);
            sub_1CCA927D0();
            v138 = (void *)swift_allocError();
            *v139 = 1;
            v219((char *)v137, v138);

            sub_1CC9C3E84(v137, &qword_1EF9E27B0);
            sub_1CC9C3E84(v225, &qword_1EF9E27C8);
            sub_1CC9C3E84(v223, &qword_1EF9E27C8);
            sub_1CC9C3E84(v226, &qword_1EF9E27C8);
            (*(void (**)(char *, uint64_t))(v228 + 8))(v222, v40);
            return sub_1CCA960A8(v69);
          }
          v127 = sub_1CCB632B0();
          v129 = v128;
          v130 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
          v130(v125, v65);
          if (!v129)
            goto LABEL_72;
          v234 = v127;
          v131 = v211;
          sub_1CC9EAB74(v225, v211, &qword_1EF9E27C8);
          v132 = v69;
          if (v126(v131, 1, v65) == 1)
          {
            sub_1CC9C3E84(v131, &qword_1EF9E27C8);
            v133 = v222;
          }
          else
          {
            v140 = sub_1CCB632B0();
            v142 = v141;
            v130(v131, v65);
            v133 = v222;
            if (v142)
            {
              v143._countAndFlagsBits = v140;
              v143._object = v142;
              FMIPURLAction.init(rawValue:)(v143);
              if (v235 != 17)
              {
                LODWORD(v232) = v235;
                v166 = v208;
                sub_1CC9EAB74(v226, v208, &qword_1EF9E27C8);
                v167 = v209;
                sub_1CC9EAB74(v225, v209, &qword_1EF9E27C8);
                v168 = sub_1CCB637D8();
                v169 = sub_1CCB63D30();
                if (os_log_type_enabled(v168, (os_log_type_t)v169))
                {
                  LODWORD(v230) = v169;
                  v231 = v168;
                  v170 = v130;
                  v171 = (uint8_t *)swift_slowAlloc();
                  v220 = swift_slowAlloc();
                  v237 = v220;
                  v172 = v171;
                  *(_DWORD *)v171 = 136315394;
                  v173 = v166;
                  v174 = v204;
                  sub_1CC9EAB74(v173, v204, &qword_1EF9E27C8);
                  v175 = v233;
                  if (v126(v174, 1, v233) == 1)
                  {
                    sub_1CC9C3E84(v174, &qword_1EF9E27C8);
                    v176 = 0;
                    v177 = 0;
                  }
                  else
                  {
                    v176 = sub_1CCB632B0();
                    v177 = v178;
                    v170(v174, v175);
                  }
                  v179 = v172;
                  v235 = v176;
                  v236 = v177;
                  sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
                  v180 = sub_1CCB639AC();
                  v235 = sub_1CCA0CB60(v180, v181, &v237);
                  sub_1CCB63E44();
                  swift_bridgeObjectRelease();
                  sub_1CC9C3E84(v208, &qword_1EF9E27C8);
                  *((_WORD *)v172 + 6) = 2080;
                  v182 = v205;
                  sub_1CC9EAB74(v209, v205, &qword_1EF9E27C8);
                  if (v126(v182, 1, v175) == 1)
                  {
                    sub_1CC9C3E84(v182, &qword_1EF9E27C8);
                    v183 = 0;
                    v184 = 0;
                    v40 = v224;
                    v130 = v170;
                  }
                  else
                  {
                    v183 = sub_1CCB632B0();
                    v184 = v185;
                    v186 = v175;
                    v130 = v170;
                    v170(v182, v186);
                    v40 = v224;
                  }
                  v235 = v183;
                  v236 = v184;
                  v187 = sub_1CCB639AC();
                  v235 = sub_1CCA0CB60(v187, v188, &v237);
                  sub_1CCB63E44();
                  swift_bridgeObjectRelease();
                  sub_1CC9C3E84(v209, &qword_1EF9E27C8);
                  v189 = v231;
                  _os_log_impl(&dword_1CC9BF000, v231, (os_log_type_t)v230, "FMIPURLHandler: processURL default action device: %s operation: %s", v179, 0x16u);
                  v190 = v220;
                  swift_arrayDestroy();
                  MEMORY[0x1D17B214C](v190, -1, -1);
                  MEMORY[0x1D17B214C](v179, -1, -1);

                  v133 = v222;
                }
                else
                {
                  sub_1CC9C3E84(v166, &qword_1EF9E27C8);
                  sub_1CC9C3E84(v167, &qword_1EF9E27C8);

                }
                v191 = (uint64_t)v207;
                v192 = v210;
                swift_bridgeObjectRelease();
                *v192 = v234;
                v192[1] = v129;
                sub_1CC9EAB74(v223, v191, &qword_1EF9E27C8);
                v193 = v233;
                if (v126(v191, 1, v233) == 1)
                {
                  sub_1CC9C3E84(v191, &qword_1EF9E27C8);
                  v194 = 0;
                  v195 = 0;
                }
                else
                {
                  v196 = v191;
                  v194 = sub_1CCB632B0();
                  v195 = v197;
                  v130(v196, v193);
                }
                v198 = (void (*)(uint64_t, _QWORD))v219;
                v199 = v217;
                v200 = v221;
                v201 = v206;
                swift_bridgeObjectRelease();
                *v201 = v194;
                v201[1] = v195;
                v200[v132] = v232;
                v202 = (uint64_t)v216;
                sub_1CCA9278C(v132, (uint64_t)v216);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v199 + 56))(v202, 0, 1, v227);
                v198(v202, 0);
                v164 = v202;
                goto LABEL_84;
              }
              swift_bridgeObjectRelease();
              v144 = sub_1CCB637D8();
              v145 = sub_1CCB63D30();
              if (os_log_type_enabled(v144, v145))
              {
                v146 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v146 = 0;
                _os_log_impl(&dword_1CC9BF000, v144, v145, "FMIPURLHandler: processURL invalid action", v146, 2u);
                MEMORY[0x1D17B214C](v146, -1, -1);
              }

              v147 = sub_1CCB632F8();
              v149 = v148;
              v150 = (uint64_t)v216;
              sub_1CCA9278C(v132, (uint64_t)v216);
              v151 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v217 + 56);
              v152 = v227;
              v151(v150, 0, 1, v227);
              _s8FMIPCore13FMIPAnalyticsV19sendLaunchAnalytics7context4infoySSSg_AA11FMIPURLInfoVSgtFZ_0(v147, v149, v150);
              swift_bridgeObjectRelease();
              sub_1CC9C3E84(v150, &qword_1EF9E27B0);
              sub_1CCA9278C(v132, v150);
              v151(v150, 0, 1, v152);
              sub_1CCA927D0();
              v153 = (void *)swift_allocError();
              *v154 = 0;
              v219((char *)v150, v153);

LABEL_83:
              v164 = v150;
LABEL_84:
              sub_1CC9C3E84(v164, &qword_1EF9E27B0);
              sub_1CC9C3E84(v225, &qword_1EF9E27C8);
              sub_1CC9C3E84(v223, &qword_1EF9E27C8);
              sub_1CC9C3E84(v226, &qword_1EF9E27C8);
              v165 = v133;
              v69 = v132;
              (*(void (**)(char *, uint64_t))(v228 + 8))(v165, v40);
              return sub_1CCA960A8(v69);
            }
          }
          v155 = sub_1CCB637D8();
          v156 = sub_1CCB63D48();
          if (os_log_type_enabled(v155, v156))
          {
            v157 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v157 = 0;
            _os_log_impl(&dword_1CC9BF000, v155, v156, "FMIPURLHandler: processURL no further operation", v157, 2u);
            MEMORY[0x1D17B214C](v157, -1, -1);
          }

          v158 = v210;
          swift_bridgeObjectRelease();
          *v158 = v234;
          v158[1] = v129;
          v221[v132] = 3;
          v159 = sub_1CCB632F8();
          v161 = v160;
          v150 = (uint64_t)v216;
          sub_1CCA9278C(v132, (uint64_t)v216);
          v162 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v217 + 56);
          v163 = v227;
          v162(v150, 0, 1, v227);
          _s8FMIPCore13FMIPAnalyticsV19sendLaunchAnalytics7context4infoySSSg_AA11FMIPURLInfoVSgtFZ_0(v159, v161, v150);
          swift_bridgeObjectRelease();
          sub_1CC9C3E84(v150, &qword_1EF9E27B0);
          sub_1CCA9278C(v132, v150);
          v162(v150, 0, 1, v163);
          v219((char *)v150, 0);
          goto LABEL_83;
        }
        swift_bridgeObjectRelease();
        v82 = v215;
      }
    }
    v59(v82, v61);
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CCA93EC4(uint64_t a1, void *a2, void (*a3)(char *, void *), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v20 = a1;
  v7 = sub_1CCA14E90(&qword_1EF9E27B0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCA14E90(&qword_1EF9E27B8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCB6331C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for FMIPURLInfo();
  v18 = swift_projectBox();
  if (a2)
    goto LABEL_4;
  sub_1CC9EAB74(v20, (uint64_t)v12, &qword_1EF9E27B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1CC9C3E84((uint64_t)v12, &qword_1EF9E27B8);
LABEL_4:
    swift_beginAccess();
    sub_1CCA9278C(v18, (uint64_t)v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 0, 1, v17);
    a3(v9, a2);
    return sub_1CC9C3E84((uint64_t)v9, &qword_1EF9E27B0);
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  sub_1CCA92814((uint64_t)v16, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_1CCA940B0(uint64_t a1, _QWORD *a2, void (*a3)(char *, void *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD *, uint64_t (*)(uint64_t, void *), uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  char *v54;
  char *v55;
  char *v56;
  void (*v57)(char *, void *);
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v60 = a2;
  v11 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CCA14E90(&qword_1EF9E27B0);
  MEMORY[0x1E0C80A78](v14);
  v55 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1CCB6331C();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v54 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1CCA14E90(&qword_1EF9E27B8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v56 = (char *)&v54 - v23;
  v24 = (_QWORD *)swift_allocObject();
  v57 = a3;
  v24[2] = a3;
  v24[3] = a4;
  v25 = a1;
  v24[4] = a5;
  v24[5] = a6;
  v59 = a4;
  swift_retain();
  v58 = a5;
  swift_retain();
  swift_retain();
  v26 = sub_1CCB632F8();
  if (v27)
  {
    if (v26 == 0x737361707962 && v27 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      if (qword_1ED8AA630 != -1)
        swift_once();
      v29 = sub_1CCB637FC();
      sub_1CCA16C20(v29, (uint64_t)qword_1ED8AD7F8);
      v30 = sub_1CCB637D8();
      v31 = sub_1CCB63D48();
      v32 = os_log_type_enabled(v30, v31);
      v33 = (uint64_t)v56;
      if (v32)
      {
        v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v34 = 0;
        _os_log_impl(&dword_1CC9BF000, v30, v31, "FMIPURLHandler: fetch bypassed", v34, 2u);
        MEMORY[0x1D17B214C](v34, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v33, v25, v16);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v33, 0, 1, v16);
      v35 = type metadata accessor for FMIPURLInfo();
      v36 = swift_projectBox();
      sub_1CC9EAB74(v33, (uint64_t)v22, &qword_1EF9E27B8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v22, 1, v16) == 1)
      {
        sub_1CC9C3E84((uint64_t)v22, &qword_1EF9E27B8);
        swift_beginAccess();
        v37 = v36;
        v38 = v55;
        sub_1CCA9278C(v37, (uint64_t)v55);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v38, 0, 1, v35);
        v57(v38, 0);
        sub_1CC9C3E84((uint64_t)v38, &qword_1EF9E27B0);
      }
      else
      {
        v52 = (uint64_t)v54;
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v54, v22, v16);
        sub_1CCA92814(v52, v57, v59);
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v52, v16);
      }
      sub_1CC9C3E84(v33, &qword_1EF9E27B8);
      return swift_release();
    }
    v28 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0)
      goto LABEL_6;
  }
  if (qword_1ED8AA630 != -1)
    swift_once();
  v39 = sub_1CCB637FC();
  sub_1CCA16C20(v39, (uint64_t)qword_1ED8AD7F8);
  v40 = sub_1CCB637D8();
  v41 = sub_1CCB63D48();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v42 = 0;
    _os_log_impl(&dword_1CC9BF000, v40, v41, "FMIPURLHandler: Fetching url infos...", v42, 2u);
    MEMORY[0x1D17B214C](v42, -1, -1);
  }

  sub_1CCB632EC();
  v43 = sub_1CCB63490();
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v13, 1, v43) != 1)
  {
    type metadata accessor for FMIPGetURLInfoRequest();
    v45 = swift_allocObject();
    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v45 + qword_1EF9FF4F0, v13, v43);
    v46 = sub_1CCA601C8(0x6E496C7255746567, 0xEA00000000006F66, 0, 0, 1);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v43);
    v47 = v60[5];
    v48 = v60[6];
    sub_1CCA04DDC(v60 + 2, v47);
    v49 = swift_allocObject();
    *(_QWORD *)(v49 + 16) = sub_1CCA96160;
    *(_QWORD *)(v49 + 24) = v24;
    v50 = *(void (**)(_QWORD *, uint64_t (*)(uint64_t, void *), uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
    v51 = type metadata accessor for FMIPGetURLInfoResponse();
    swift_retain();
    v50(v46, sub_1CCA96190, v49, v51, v47, v48);
    swift_release();
    swift_release();
    return swift_release();
  }
  swift_release();
  swift_release();
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1CCA946AC(uint64_t a1, void (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  void *v62;
  _BYTE *v63;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  char *v69;
  uint64_t *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void (*v81)(char *, unint64_t, uint64_t);
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char *v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  void *v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  void (*v104)(char *, unint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  void (*v116)(char *, unint64_t, uint64_t);
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint64_t v129;
  uint8_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  NSObject *v138;
  os_log_type_t v139;
  uint64_t v140;
  uint64_t v141;
  uint8_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unsigned int (*v152)(uint64_t, uint64_t, uint64_t);
  void (*v153)(_QWORD, _QWORD);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  NSObject *v161;
  os_log_type_t v162;
  uint8_t *v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  void (*v168)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  void (*v178)(uint64_t, uint64_t);
  uint64_t v179;
  NSObject *v180;
  os_log_type_t v181;
  uint8_t *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  void (*v187)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v188;
  void *v189;
  _BYTE *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  NSObject *v201;
  os_log_type_t v202;
  uint8_t *v203;
  uint64_t v204;
  uint64_t v205;
  NSObject *v206;
  os_log_type_t v207;
  uint8_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t v213;
  char *v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  void (*v222)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  void (*v244)(_QWORD, _QWORD);
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;

  v242 = a3;
  v5 = sub_1CCA14E90(&qword_1EF9E27B0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v224 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB632BC();
  v253 = *(_QWORD *)(v8 - 8);
  v254 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v249 = (char *)&v224 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v251 = (char *)&v224 - v12;
  MEMORY[0x1E0C80A78](v11);
  v248 = (char *)&v224 - v13;
  v14 = sub_1CCA14E90(&qword_1EF9E27C8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v227 = (uint64_t)&v224 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v228 = (uint64_t)&v224 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v231 = (uint64_t)&v224 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v232 = (char *)&v224 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v230 = (uint64_t)&v224 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v235 = (uint64_t)&v224 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v229 = (uint64_t)&v224 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v234 = (uint64_t)&v224 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v233 = (char *)&v224 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v237 = (uint64_t)&v224 - v34;
  MEMORY[0x1E0C80A78](v33);
  v245 = (uint64_t)&v224 - v35;
  v246 = type metadata accessor for FMIPURLInfo();
  v238 = *(_QWORD *)(v246 - 8);
  MEMORY[0x1E0C80A78](v246);
  v241 = (uint64_t)&v224 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v37);
  v243 = (char *)&v224 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v252 = sub_1CCB63490();
  v39 = *(_QWORD *)(v252 - 8);
  MEMORY[0x1E0C80A78](v252);
  v240 = (char *)&v224 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_1CCB6331C();
  v42 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v44 = (char *)&v224 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v45 = sub_1CCB637FC();
  v46 = sub_1CCA16C20(v45, (uint64_t)qword_1ED8AD7F8);
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v250 = a1;
  v47(v44, a1, v41);
  v247 = v46;
  v48 = sub_1CCB637D8();
  v49 = sub_1CCB63D48();
  v50 = os_log_type_enabled(v48, v49);
  v239 = v39;
  if (v50)
  {
    v51 = swift_slowAlloc();
    v244 = a2;
    v52 = (uint8_t *)v51;
    v53 = swift_slowAlloc();
    v256 = v53;
    *(_DWORD *)v52 = 136315138;
    v236 = v7;
    sub_1CCA960E4();
    v54 = sub_1CCB64240();
    v255 = sub_1CCA0CB60(v54, v55, &v256);
    v7 = v236;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
    _os_log_impl(&dword_1CC9BF000, v48, v49, "FMIPURLHandler: processUniversalURL: %s", v52, 0xCu);
    swift_arrayDestroy();
    v56 = v53;
    v39 = v239;
    MEMORY[0x1D17B214C](v56, -1, -1);
    v57 = v52;
    a2 = v244;
    MEMORY[0x1D17B214C](v57, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
  }

  v58 = (uint64_t)v243;
  sub_1CCB632EC();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v58, 1, v252) != 1)
  {
    v65 = v240;
    v66 = v252;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v240, v58, v252);
    v67 = v241;
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v241, v65, v66);
    v68 = (int *)v246;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v67 + *(int *)(v246 + 32), 1, 1, v66);
    v69 = (char *)v68[5];
    v69[v67] = 17;
    v70 = (uint64_t *)(v67 + v68[6]);
    *v70 = 0;
    v70[1] = 0;
    v71 = (_QWORD *)(v67 + v68[7]);
    *v71 = 0;
    v71[1] = 0;
    v72 = (_QWORD *)(v67 + v68[9]);
    *v72 = 0;
    v72[1] = 0;
    v73 = (uint64_t *)(v67 + v68[10]);
    *v73 = 0;
    v73[1] = 0;
    if (sub_1CCB63304() == 0x6D6574692FLL && v74 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v75 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      if ((v75 & 1) == 0)
      {
        v89 = sub_1CCB637D8();
        v90 = sub_1CCB63D30();
        if (os_log_type_enabled(v89, v90))
        {
          v91 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v91 = 0;
          _os_log_impl(&dword_1CC9BF000, v89, v90, "FMIPURLHandler: processUniversalURL: invalid action", v91, 2u);
          MEMORY[0x1D17B214C](v91, -1, -1);
        }

        v92 = v241;
        sub_1CCA9278C(v241, (uint64_t)v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v238 + 56))(v7, 0, 1, v246);
        sub_1CCA927D0();
        v93 = (void *)swift_allocError();
        *v94 = 0;
        a2(v7, v93);

        sub_1CC9C3E84((uint64_t)v7, &qword_1EF9E27B0);
        (*(void (**)(char *, uint64_t))(v239 + 8))(v240, v252);
        v95 = v92;
        return sub_1CCA960A8(v95);
      }
    }
    v225 = v70;
    v226 = v73;
    v243 = v69;
    v236 = v7;
    v76 = sub_1CCB632C8();
    v244 = a2;
    if (v76)
    {
      v77 = *(_QWORD *)(v76 + 16);
      v78 = v253;
      if (v77)
      {
        v79 = v76 + ((*(unsigned __int8 *)(v253 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v253 + 80));
        v80 = *(_QWORD *)(v253 + 72);
        v81 = *(void (**)(char *, unint64_t, uint64_t))(v253 + 16);
        swift_bridgeObjectRetain();
        v82 = v254;
        v83 = v248;
        while (1)
        {
          v81(v83, v79, v82);
          sub_1CCB632A4();
          v84 = sub_1CCB639B8();
          v86 = v85;
          swift_bridgeObjectRelease();
          if (v84 == 0x6C6169726573 && v86 == 0xE600000000000000)
          {
            swift_bridgeObjectRelease();
            v78 = v253;
            v96 = v254;
            goto LABEL_29;
          }
          v87 = sub_1CCB642A0();
          swift_bridgeObjectRelease();
          v78 = v253;
          if ((v87 & 1) != 0)
            break;
          v83 = v248;
          v82 = v254;
          (*(void (**)(char *, uint64_t))(v253 + 8))(v248, v254);
          v79 += v80;
          if (!--v77)
          {
            swift_bridgeObjectRelease();
            a2 = v244;
            goto LABEL_22;
          }
        }
        v96 = v254;
LABEL_29:
        swift_bridgeObjectRelease();
        v97 = v245;
        (*(void (**)(uint64_t, char *, uint64_t))(v78 + 32))(v245, v248, v96);
        v88 = *(char **)(v78 + 56);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v88)(v97, 0, 1, v96);
        swift_bridgeObjectRelease();
        a2 = v244;
      }
      else
      {
LABEL_22:
        v88 = *(char **)(v78 + 56);
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v88)(v245, 1, 1, v254);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v78 = v253;
      v88 = *(char **)(v253 + 56);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v88)(v245, 1, 1, v254);
    }
    v98 = v251;
    v99 = sub_1CCB632C8();
    if (v99)
    {
      v100 = *(_QWORD *)(v99 + 16);
      if (v100)
      {
        v248 = v88;
        v101 = v78;
        v102 = v99 + ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80));
        v103 = *(_QWORD *)(v101 + 72);
        v104 = *(void (**)(char *, unint64_t, uint64_t))(v101 + 16);
        swift_bridgeObjectRetain();
        v105 = v254;
        while (1)
        {
          v104(v98, v102, v105);
          sub_1CCB632A4();
          v106 = sub_1CCB639B8();
          v108 = v107;
          swift_bridgeObjectRelease();
          if (v106 == 0x74636166756E616DLL && v108 == 0xEC00000072657275)
            break;
          v109 = sub_1CCB642A0();
          swift_bridgeObjectRelease();
          if ((v109 & 1) != 0)
            goto LABEL_51;
          v105 = v254;
          v98 = v251;
          (*(void (**)(char *, uint64_t))(v253 + 8))(v251, v254);
          v102 += v103;
          if (!--v100)
          {
            swift_bridgeObjectRelease();
            a2 = v244;
            v78 = v253;
            v88 = v248;
            goto LABEL_38;
          }
        }
        swift_bridgeObjectRelease();
LABEL_51:
        v122 = v254;
        swift_bridgeObjectRelease();
        v78 = v253;
        v123 = v237;
        (*(void (**)(uint64_t, char *, uint64_t))(v253 + 32))(v237, v251, v122);
        v88 = v248;
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v248)(v123, 0, 1, v122);
        swift_bridgeObjectRelease();
        a2 = v244;
        v110 = (uint64_t)v233;
        v111 = sub_1CCB632C8();
        if (!v111)
          goto LABEL_52;
        goto LABEL_41;
      }
LABEL_38:
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v88)(v237, 1, 1, v254);
      swift_bridgeObjectRelease();
    }
    else
    {
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v88)(v237, 1, 1, v254);
    }
    v110 = (uint64_t)v233;
    v111 = sub_1CCB632C8();
    if (!v111)
    {
LABEL_52:
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v88)(v110, 1, 1, v254);
      goto LABEL_54;
    }
LABEL_41:
    v112 = *(_QWORD *)(v111 + 16);
    v113 = v254;
    if (v112)
    {
      v248 = v88;
      v114 = v111 + ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80));
      v115 = *(_QWORD *)(v78 + 72);
      v116 = *(void (**)(char *, unint64_t, uint64_t))(v78 + 16);
      swift_bridgeObjectRetain();
      v117 = v249;
      while (1)
      {
        v116(v117, v114, v113);
        sub_1CCB632A4();
        v118 = sub_1CCB639B8();
        v120 = v119;
        swift_bridgeObjectRelease();
        if (v118 == 0x6E6F69746361 && v120 == 0xE600000000000000)
          break;
        v121 = sub_1CCB642A0();
        swift_bridgeObjectRelease();
        if ((v121 & 1) != 0)
          goto LABEL_53;
        v78 = v253;
        v113 = v254;
        v117 = v249;
        (*(void (**)(char *, uint64_t))(v253 + 8))(v249, v254);
        v114 += v115;
        if (!--v112)
        {
          swift_bridgeObjectRelease();
          a2 = v244;
          v110 = (uint64_t)v233;
          v88 = v248;
          goto LABEL_48;
        }
      }
      swift_bridgeObjectRelease();
LABEL_53:
      v124 = v254;
      v125 = v249;
      swift_bridgeObjectRelease();
      v78 = v253;
      v110 = (uint64_t)v233;
      (*(void (**)(char *, char *, uint64_t))(v253 + 32))(v233, v125, v124);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v248)(v110, 0, 1, v124);
      swift_bridgeObjectRelease();
      a2 = v244;
    }
    else
    {
LABEL_48:
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v88)(v110, 1, 1, v113);
      swift_bridgeObjectRelease();
    }
LABEL_54:
    v126 = v234;
    sub_1CC9EAB74(v110, v234, &qword_1EF9E27C8);
    v127 = sub_1CCB637D8();
    v128 = sub_1CCB63D48();
    if (!os_log_type_enabled(v127, v128))
    {
      sub_1CC9C3E84(v126, &qword_1EF9E27C8);

      v134 = v235;
      goto LABEL_61;
    }
    v129 = v110;
    v130 = (uint8_t *)swift_slowAlloc();
    v131 = swift_slowAlloc();
    v256 = v131;
    *(_DWORD *)v130 = 136315138;
    v132 = v229;
    sub_1CC9EAB74(v126, v229, &qword_1EF9E27C8);
    v133 = v254;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v132, 1, v254) == 1)
    {
      sub_1CC9C3E84(v132, &qword_1EF9E27C8);
    }
    else
    {
      v135 = sub_1CCB632B0();
      v137 = v136;
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v132, v133);
      if (v137)
      {
LABEL_60:
        v255 = sub_1CCA0CB60(v135, v137, &v256);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        sub_1CC9C3E84(v234, &qword_1EF9E27C8);
        _os_log_impl(&dword_1CC9BF000, v127, v128, "FMIPURLHandler: processUniversalURL: parameter action: %s", v130, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v131, -1, -1);
        MEMORY[0x1D17B214C](v130, -1, -1);

        v78 = v253;
        v134 = v235;
        v110 = v129;
        a2 = v244;
LABEL_61:
        sub_1CC9EAB74(v245, v134, &qword_1EF9E27C8);
        v138 = sub_1CCB637D8();
        v139 = sub_1CCB63D48();
        if (!os_log_type_enabled(v138, v139))
        {
          sub_1CC9C3E84(v134, &qword_1EF9E27C8);

          v146 = (uint64_t)v236;
          v147 = v254;
          v148 = (uint64_t)v232;
          goto LABEL_68;
        }
        v140 = v110;
        v141 = v78;
        v142 = (uint8_t *)swift_slowAlloc();
        v143 = swift_slowAlloc();
        v256 = v143;
        *(_DWORD *)v142 = 136315138;
        v144 = v230;
        sub_1CC9EAB74(v134, v230, &qword_1EF9E27C8);
        v145 = v254;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48))(v144, 1, v254) == 1)
        {
          sub_1CC9C3E84(v144, &qword_1EF9E27C8);
        }
        else
        {
          v149 = sub_1CCB632B0();
          v151 = v150;
          (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v144, v145);
          if (v151)
          {
LABEL_67:
            v110 = v140;
            v255 = sub_1CCA0CB60(v149, v151, &v256);
            sub_1CCB63E44();
            swift_bridgeObjectRelease();
            sub_1CC9C3E84(v235, &qword_1EF9E27C8);
            _os_log_impl(&dword_1CC9BF000, v138, v139, "FMIPURLHandler: processUniversalURL: parameter serial: %s", v142, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1D17B214C](v143, -1, -1);
            MEMORY[0x1D17B214C](v142, -1, -1);

            v146 = (uint64_t)v236;
            v78 = v253;
            v147 = v254;
            v148 = (uint64_t)v232;
            a2 = v244;
LABEL_68:
            sub_1CC9EAB74(v110, v148, &qword_1EF9E27C8);
            v152 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
            if (v152(v148, 1, v147) == 1)
            {
              sub_1CC9C3E84(v148, &qword_1EF9E27C8);
              goto LABEL_79;
            }
            v153 = a2;
            v154 = v110;
            v155 = v148;
            v156 = sub_1CCB632B0();
            v158 = v157;
            v159 = v155;
            v110 = v154;
            a2 = v153;
            (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v159, v147);
            if (v158)
            {
              if (v156 == 0x7075746573 && v158 == 0xE500000000000000)
              {
                swift_bridgeObjectRelease();
LABEL_75:
                v161 = sub_1CCB637D8();
                v162 = sub_1CCB63D48();
                if (os_log_type_enabled(v161, v162))
                {
                  v163 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)v163 = 0;
                  _os_log_impl(&dword_1CC9BF000, v161, v162, "FMIPURLHandler: processUniversalURL: action received to setup an item", v163, 2u);
                  MEMORY[0x1D17B214C](v163, -1, -1);
                }

                v164 = v241;
                v243[v241] = 14;
                goto LABEL_78;
              }
              v160 = sub_1CCB642A0();
              swift_bridgeObjectRelease();
              if ((v160 & 1) != 0)
                goto LABEL_75;
            }
LABEL_79:
            v170 = v231;
            sub_1CC9EAB74(v245, v231, &qword_1EF9E27C8);
            if (v152(v170, 1, v254) == 1)
            {
              v171 = v170;
LABEL_84:
              sub_1CC9C3E84(v171, &qword_1EF9E27C8);
              goto LABEL_85;
            }
            v172 = v170;
            v173 = sub_1CCB632B0();
            v174 = v254;
            v175 = v173;
            v177 = v176;
            v178 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
            v178(v172, v254);
            if (!v177)
            {
LABEL_85:
              v180 = sub_1CCB637D8();
              v181 = sub_1CCB63D30();
              if (os_log_type_enabled(v180, v181))
              {
                v182 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v182 = 0;
                _os_log_impl(&dword_1CC9BF000, v180, v181, "FMIPURLHandler: processUniversalURL: invalid serial number", v182, 2u);
                MEMORY[0x1D17B214C](v182, -1, -1);
              }

              v183 = sub_1CCB632F8();
              v185 = v184;
              v186 = v241;
              sub_1CCA9278C(v241, v146);
              v187 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v238 + 56);
              v188 = v246;
              v187(v146, 0, 1, v246);
              _s8FMIPCore13FMIPAnalyticsV19sendLaunchAnalytics7context4infoySSSg_AA11FMIPURLInfoVSgtFZ_0(v183, v185, v146);
              swift_bridgeObjectRelease();
              sub_1CC9C3E84(v146, &qword_1EF9E27B0);
              sub_1CCA9278C(v186, v146);
              v187(v146, 0, 1, v188);
              sub_1CCA927D0();
              v189 = (void *)swift_allocError();
              *v190 = 1;
              a2(v146, v189);

              goto LABEL_88;
            }
            v179 = v228;
            sub_1CC9EAB74(v237, v228, &qword_1EF9E27C8);
            if (v152(v179, 1, v174) == 1)
            {
              swift_bridgeObjectRelease();
              v171 = v179;
              goto LABEL_84;
            }
            v191 = sub_1CCB632B0();
            v192 = v254;
            v253 = v191;
            v194 = v193;
            v178(v179, v254);
            if (!v194)
            {
              swift_bridgeObjectRelease();
              goto LABEL_85;
            }
            v251 = v194;
            v195 = v227;
            sub_1CC9EAB74(v110, v227, &qword_1EF9E27C8);
            if (v152(v195, 1, v192) == 1)
            {
              sub_1CC9C3E84(v195, &qword_1EF9E27C8);
            }
            else
            {
              v196 = v192;
              v197 = sub_1CCB632B0();
              v199 = v198;
              v178(v195, v196);
              if (v199)
              {
                if (v197 == 0x65766F6D6572 && v199 == 0xE600000000000000)
                {
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v200 = sub_1CCB642A0();
                  swift_bridgeObjectRelease();
                  if ((v200 & 1) == 0)
                    goto LABEL_101;
                }
                swift_bridgeObjectRetain_n();
                v201 = sub_1CCB637D8();
                v202 = sub_1CCB63D48();
                if (os_log_type_enabled(v201, v202))
                {
                  v203 = (uint8_t *)swift_slowAlloc();
                  v204 = swift_slowAlloc();
                  v256 = v204;
                  *(_DWORD *)v203 = 136315138;
                  swift_bridgeObjectRetain();
                  v255 = sub_1CCA0CB60(v175, v177, &v256);
                  v146 = (uint64_t)v236;
                  sub_1CCB63E44();
                  swift_bridgeObjectRelease_n();
                  _os_log_impl(&dword_1CC9BF000, v201, v202, "FMIPURLHandler: processUniversalURL: action received to remove %s", v203, 0xCu);
                  swift_arrayDestroy();
                  v205 = v204;
                  v110 = (uint64_t)v233;
                  MEMORY[0x1D17B214C](v205, -1, -1);
                  MEMORY[0x1D17B214C](v203, -1, -1);

                }
                else
                {

                  swift_bridgeObjectRelease_n();
                }
                v215 = v226;
                v216 = v225;
                v217 = v253;
                v186 = v241;
                v243[v241] = 12;
                swift_bridgeObjectRelease();
                *v216 = v175;
                v216[1] = v177;
                swift_bridgeObjectRelease();
                v218 = v251;
                *v215 = v217;
                v215[1] = (uint64_t)v218;
                v219 = sub_1CCB632F8();
                v221 = v220;
                sub_1CCA9278C(v186, v146);
                v222 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v238 + 56);
                v223 = v246;
                v222(v146, 0, 1, v246);
                _s8FMIPCore13FMIPAnalyticsV19sendLaunchAnalytics7context4infoySSSg_AA11FMIPURLInfoVSgtFZ_0(v219, v221, v146);
                swift_bridgeObjectRelease();
                sub_1CC9C3E84(v146, &qword_1EF9E27B0);
                sub_1CCA9278C(v186, v146);
                v222(v146, 0, 1, v223);
                a2(v146, 0);
LABEL_88:
                sub_1CC9C3E84(v146, &qword_1EF9E27B0);
                sub_1CC9C3E84(v110, &qword_1EF9E27C8);
                sub_1CC9C3E84(v237, &qword_1EF9E27C8);
                sub_1CC9C3E84(v245, &qword_1EF9E27C8);
                (*(void (**)(char *, uint64_t))(v239 + 8))(v240, v252);
                v95 = v186;
                return sub_1CCA960A8(v95);
              }
            }
LABEL_101:
            swift_bridgeObjectRetain_n();
            v206 = sub_1CCB637D8();
            v207 = sub_1CCB63D48();
            if (os_log_type_enabled(v206, v207))
            {
              v208 = (uint8_t *)swift_slowAlloc();
              v209 = swift_slowAlloc();
              v256 = v209;
              *(_DWORD *)v208 = 136315138;
              swift_bridgeObjectRetain();
              v255 = sub_1CCA0CB60(v175, v177, &v256);
              v146 = (uint64_t)v236;
              sub_1CCB63E44();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_1CC9BF000, v206, v207, "FMIPURLHandler: processUniversalURL: selecting item for serial %s", v208, 0xCu);
              swift_arrayDestroy();
              v210 = v209;
              v110 = (uint64_t)v233;
              MEMORY[0x1D17B214C](v210, -1, -1);
              MEMORY[0x1D17B214C](v208, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            v211 = v226;
            v212 = v225;
            v213 = v253;
            swift_bridgeObjectRelease();
            *v212 = v175;
            v212[1] = v177;
            swift_bridgeObjectRelease();
            v214 = v251;
            *v211 = v213;
            v211[1] = (uint64_t)v214;
            v164 = v241;
            v243[v241] = 7;
LABEL_78:
            v165 = sub_1CCB632F8();
            v167 = v166;
            sub_1CCA9278C(v164, v146);
            v168 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v238 + 56);
            v169 = v246;
            v168(v146, 0, 1, v246);
            _s8FMIPCore13FMIPAnalyticsV19sendLaunchAnalytics7context4infoySSSg_AA11FMIPURLInfoVSgtFZ_0(v165, v167, v146);
            swift_bridgeObjectRelease();
            sub_1CC9C3E84(v146, &qword_1EF9E27B0);
            sub_1CCA9278C(v164, v146);
            v168(v146, 0, 1, v169);
            a2(v146, 0);
            sub_1CC9C3E84(v146, &qword_1EF9E27B0);
            sub_1CC9C3E84(v110, &qword_1EF9E27C8);
            sub_1CC9C3E84(v237, &qword_1EF9E27C8);
            sub_1CC9C3E84(v245, &qword_1EF9E27C8);
            (*(void (**)(char *, uint64_t))(v239 + 8))(v240, v252);
            v95 = v164;
            return sub_1CCA960A8(v95);
          }
        }
        v149 = 7104878;
        swift_bridgeObjectRelease();
        v151 = 0xE300000000000000;
        goto LABEL_67;
      }
    }
    v135 = 7104878;
    swift_bridgeObjectRelease();
    v137 = 0xE300000000000000;
    goto LABEL_60;
  }
  sub_1CC9C3E84(v58, &qword_1ED8A8EE8);
  v59 = sub_1CCB637D8();
  v60 = sub_1CCB63D30();
  if (os_log_type_enabled(v59, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v61 = 0;
    _os_log_impl(&dword_1CC9BF000, v59, v60, "FMIPURLHandler: processUniversalURL: Invalid Universal URL", v61, 2u);
    MEMORY[0x1D17B214C](v61, -1, -1);
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v238 + 56))(v7, 1, 1, v246);
  sub_1CCA927D0();
  v62 = (void *)swift_allocError();
  *v63 = 2;
  a2(v7, v62);

  return sub_1CC9C3E84((uint64_t)v7, &qword_1EF9E27B0);
}

uint64_t sub_1CCA960A8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FMIPURLInfo();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1CCA960E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF9E27D0;
  if (!qword_1EF9E27D0)
  {
    v1 = sub_1CCB6331C();
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0CAE8A0], v1);
    atomic_store(result, (unint64_t *)&qword_1EF9E27D0);
  }
  return result;
}

uint64_t sub_1CCA9612C()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA96160(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA93EC4(a1, a2, *(void (**)(char *, void *))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1CCA9616C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA96190(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCA92008(a1, a2, *(void (**)(char *, void *))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t storeEnumTagSinglePayload for FMIPURLHandlerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CCA961E4 + 4 * byte_1CCB6B6D0[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CCA96218 + 4 * byte_1CCB6B6CB[v4]))();
}

uint64_t sub_1CCA96218(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA96220(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA96228);
  return result;
}

uint64_t sub_1CCA96234(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA9623CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CCA96240(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA96248(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPURLHandlerError()
{
  return &type metadata for FMIPURLHandlerError;
}

unint64_t sub_1CCA96268()
{
  unint64_t result;

  result = qword_1EF9E27E0;
  if (!qword_1EF9E27E0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6B8C4, &type metadata for FMIPURLHandlerError);
    atomic_store(result, (unint64_t *)&qword_1EF9E27E0);
  }
  return result;
}

unint64_t sub_1CCA962B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  id v10;
  void *v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  id v14;
  void *v15;
  id v16;
  char v17;
  id v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v23;
  unint64_t v24;

  v2 = sub_1CCA14E90(&qword_1EF9E27B0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FMIPURLInfo();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
  sub_1CCA96950(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1CCA96998((uint64_t)v4);
  }
  else
  {
    sub_1CCA96BA4((uint64_t)v4, (uint64_t)v8);
    v10 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
    swift_bridgeObjectRetain();
    v11 = (void *)sub_1CCB63964();
    swift_bridgeObjectRelease();
    v12 = objc_msgSend(v10, sel_initWithString_, v11);

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = v9;
    sub_1CC9E1E50((uint64_t)v12, 0x747865746E6F63, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    v9 = v24;
    swift_bridgeObjectRelease();
    if (v8[*(int *)(v5 + 20)] != 17)
    {
      LOBYTE(v24) = v8[*(int *)(v5 + 20)];
      FMIPURLAction.rawValue.getter();
      v14 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
      v15 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      v16 = objc_msgSend(v14, sel_initWithString_, v15);

      v17 = swift_isUniquelyReferenced_nonNull_native();
      v24 = v9;
      sub_1CC9E1E50((uint64_t)v16, 0x6E6F69746361, 0xE600000000000000, v17);
      v9 = v24;
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)&v8[*(int *)(v5 + 40) + 8])
    {
      v18 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
      swift_bridgeObjectRetain();
      v19 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      v20 = objc_msgSend(v18, sel_initWithString_, v19);

      v21 = swift_isUniquelyReferenced_nonNull_native();
      v24 = v9;
      sub_1CC9E1E50((uint64_t)v20, 0x74636166756E616DLL, 0xEC00000072657275, v21);
      v9 = v24;
      swift_bridgeObjectRelease();
    }
    sub_1CCA960A8((uint64_t)v8);
  }
  return v9;
}

void _s8FMIPCore13FMIPAnalyticsV19sendLaunchAnalytics7context4infoySSSg_AA11FMIPURLInfoVSgtFZ_0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t aBlock[6];

  v6 = sub_1CCA14E90(&qword_1EF9E27B0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v32 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v32 - v14;
  if (a2)
  {
    v16 = qword_1ED8AA630;
    swift_bridgeObjectRetain();
    if (v16 != -1)
      swift_once();
    v17 = sub_1CCB637FC();
    sub_1CCA16C20(v17, (uint64_t)qword_1ED8AD7F8);
    sub_1CCA96950(a3, (uint64_t)v15);
    swift_bridgeObjectRetain_n();
    v18 = sub_1CCB637D8();
    v19 = sub_1CCB63D48();
    v20 = os_log_type_enabled(v18, v19);
    v36 = a1;
    if (!v20)
    {
      swift_bridgeObjectRelease_n();
      sub_1CCA96998((uint64_t)v15);

LABEL_11:
      v27 = (void *)sub_1CCB63964();
      sub_1CCA96950(a3, (uint64_t)v10);
      v28 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v29 = swift_allocObject();
      sub_1CCA96B14((uint64_t)v10, v29 + v28);
      v30 = (uint64_t *)(v29 + ((v8 + v28 + 7) & 0xFFFFFFFFFFFFFFF8));
      *v30 = v36;
      v30[1] = a2;
      aBlock[4] = (uint64_t)sub_1CCA96B5C;
      aBlock[5] = v29;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1CCA7EAC8;
      aBlock[3] = (uint64_t)&unk_1E88F6EB8;
      v31 = _Block_copy(aBlock);
      swift_release();
      AnalyticsSendEventLazy();
      _Block_release(v31);

      return;
    }
    v34 = v7;
    v35 = a3;
    v21 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    aBlock[0] = v33;
    *(_DWORD *)v21 = 136315394;
    swift_bridgeObjectRetain();
    v37 = sub_1CCA0CB60(a1, a2, aBlock);
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 12) = 2080;
    sub_1CCA96950((uint64_t)v15, (uint64_t)v13);
    v22 = type metadata accessor for FMIPURLInfo();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v13, 1, v22) == 1)
    {
      sub_1CCA96998((uint64_t)v13);
    }
    else
    {
      v23 = (uint64_t *)&v13[*(int *)(v22 + 36)];
      v24 = *v23;
      v25 = v23[1];
      swift_bridgeObjectRetain();
      sub_1CCA960A8((uint64_t)v13);
      if (v25)
      {
LABEL_10:
        v37 = sub_1CCA0CB60(v24, v25, aBlock);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        sub_1CCA96998((uint64_t)v15);
        _os_log_impl(&dword_1CC9BF000, v18, v19, "FMIPAnalytics: sendLaunchEvent (%s, returnAppName: %s", (uint8_t *)v21, 0x16u);
        v26 = v33;
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v26, -1, -1);
        MEMORY[0x1D17B214C](v21, -1, -1);

        v7 = v34;
        a3 = v35;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    v25 = 0xE300000000000000;
    v24 = 7104878;
    goto LABEL_10;
  }
}

uint64_t sub_1CCA96950(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1EF9E27B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCA96998(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CCA14E90(&qword_1EF9E27B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CCA969D8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(unint64_t, uint64_t);
  unint64_t v7;

  v1 = *(_QWORD *)(sub_1CCA14E90(&qword_1EF9E27B0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = type metadata accessor for FMIPURLInfo();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v0 + v2, 1, v3))
  {
    v4 = sub_1CCB63490();
    v5 = *(_QWORD *)(v4 - 8);
    v6 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
    v6(v0 + v2, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v0 + v2 + *(int *)(v3 + 32);
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4))
      v6(v7, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCA96B14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1EF9E27B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1CCA96B5C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_1CCA14E90(&qword_1EF9E27B0) - 8) + 80);
  return sub_1CCA962B0(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1CCA96BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPURLInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCA96BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1CCB63C04();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1CCB63BF8();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1CC9C3E84(a1, (uint64_t *)&unk_1ED8A8DC8);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1CCB63BE0();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1CCA96D34(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  sub_1CC9C30A8(0, &qword_1EF9DF450);
  sub_1CC9F74C8((unint64_t *)&unk_1EF9DF458, &qword_1EF9DF450);
  **(_QWORD **)(*(_QWORD *)(v1 + 64) + 40) = sub_1CCB63C40();
  return swift_continuation_resume();
}

uint64_t sub_1CCA96DBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;

  v19 = MEMORY[0x1E0DEE9D8];
  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v16 = *v14;
    v15 = v14[1];
    v17 = *(void **)(*(_QWORD *)(a1 + 56) + 24 * i + 8);
    type metadata accessor for FMLocationShiftingRequest();
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = v17;
    v18[3] = v16;
    v18[4] = v15;
    swift_bridgeObjectRetain();
    MEMORY[0x1D17B1078](v17);
    if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1CCB63B68();
    sub_1CCB63BA4();
    result = sub_1CCB63B50();
    if (v5)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v6)
      goto LABEL_25;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_25;
      v12 = *(_QWORD *)(v2 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_25;
        v12 = *(_QWORD *)(v2 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_25;
          v12 = *(_QWORD *)(v2 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v5 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_25:
    swift_release();
    return v19;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_25;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_1CCA96FB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  char *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[3];
  char *v20;
  char *v21;

  v3 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63604();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v21 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v20 = (char *)v19 - v10;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return MEMORY[0x1E0DEE9D8];
  v19[2] = v1;
  swift_bridgeObjectRetain();
  v19[1] = a1;
  v12 = a1 + 40;
  v13 = MEMORY[0x1E0DEE9D8];
  do
  {
    swift_bridgeObjectRetain();
    sub_1CCB635BC();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      sub_1CC9C3E84((uint64_t)v5, &qword_1ED8A8EF8);
    }
    else
    {
      v14 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v15 = v20;
      v14(v20, v5, v6);
      v14(v21, v15, v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_1CCAC9CC8(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
      v17 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v13 + 24);
      if (v17 >= v16 >> 1)
        v13 = sub_1CCAC9CC8(v16 > 1, v17 + 1, 1, v13);
      *(_QWORD *)(v13 + 16) = v17 + 1;
      v14((char *)(v13+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v17), v21, v6);
    }
    v12 += 16;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  return v13;
}

_QWORD *sub_1CCA971E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)(type metadata accessor for FMIPDevice() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 72);
  swift_bridgeObjectRetain();
  v6 = (uint64_t *)(v4 + a1 + 24);
  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v9 = *v6;
    if (*v6)
    {
      v10 = *(v6 - 1);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = sub_1CCAC9E18(0, v7[2] + 1, 1, v7);
      v12 = v7[2];
      v11 = v7[3];
      if (v12 >= v11 >> 1)
        v7 = sub_1CCAC9E18((_QWORD *)(v11 > 1), v12 + 1, 1, v7);
      v7[2] = v12 + 1;
      v8 = &v7[2 * v12];
      v8[4] = v10;
      v8[5] = v9;
    }
    v6 = (uint64_t *)((char *)v6 + v5);
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1CCA97308(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  int64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;
  int64_t v26;

  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 64);
  v24 = (unint64_t)(v1 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v5 = 0;
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v3)
    goto LABEL_5;
LABEL_4:
  v7 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  v26 = v5;
  for (i = v7 | (v5 << 6); ; i = __clz(__rbit64(v10)) + (v11 << 6))
  {
    v13 = *(_QWORD *)(a1 + 56) + 24 * i;
    v14 = *(_BYTE *)v13;
    v15 = *(_BYTE *)(v13 + 1);
    v16 = *(_BYTE *)(v13 + 2);
    v17 = *(_BYTE *)(v13 + 3);
    v18 = *(_QWORD *)(v13 + 16);
    v19 = *(id *)(v13 + 8);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1CCAC9858(0, v6[2] + 1, 1, v6);
      v6 = (_QWORD *)result;
    }
    v21 = v6[2];
    v20 = v6[3];
    if (v21 >= v20 >> 1)
    {
      result = (uint64_t)sub_1CCAC9858((_QWORD *)(v20 > 1), v21 + 1, 1, v6);
      v6 = (_QWORD *)result;
    }
    v6[2] = v21 + 1;
    v22 = &v6[3 * v21];
    *((_BYTE *)v22 + 32) = v14;
    *((_BYTE *)v22 + 33) = v15;
    *((_BYTE *)v22 + 34) = v16;
    *((_BYTE *)v22 + 35) = v17;
    v22[5] = v19;
    v22[6] = v18;
    v5 = v26;
    if (v3)
      goto LABEL_4;
LABEL_5:
    v9 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v9 >= v24)
      goto LABEL_27;
    v10 = *(_QWORD *)(v23 + 8 * v9);
    v11 = v5 + 1;
    if (!v10)
    {
      v11 = v5 + 2;
      if (v5 + 2 >= v24)
        goto LABEL_27;
      v10 = *(_QWORD *)(v23 + 8 * v11);
      if (!v10)
      {
        v11 = v5 + 3;
        if (v5 + 3 >= v24)
          goto LABEL_27;
        v10 = *(_QWORD *)(v23 + 8 * v11);
        if (!v10)
        {
          v11 = v5 + 4;
          if (v5 + 4 >= v24)
            goto LABEL_27;
          v10 = *(_QWORD *)(v23 + 8 * v11);
          if (!v10)
            break;
        }
      }
    }
LABEL_20:
    v3 = (v10 - 1) & v10;
    v26 = v11;
  }
  v12 = v5 + 5;
  if (v5 + 5 >= v24)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v6;
  }
  v10 = *(_QWORD *)(v23 + 8 * v12);
  if (v10)
  {
    v11 = v5 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v11 >= v24)
      goto LABEL_27;
    v10 = *(_QWORD *)(v23 + 8 * v11);
    ++v12;
    if (v10)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1CCA97564(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    sub_1CCA6388C(0, v1, 0);
    v2 = v13;
    v4 = *(_QWORD *)(type metadata accessor for FMIPItem() - 8);
    v5 = *(_QWORD *)(v4 + 72);
    v6 = (uint64_t *)(((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
                   + a1
                   + 360);
    do
    {
      v8 = *(v6 - 1);
      v7 = *v6;
      v10 = *(_QWORD *)(v13 + 16);
      v9 = *(_QWORD *)(v13 + 24);
      swift_bridgeObjectRetain();
      if (v10 >= v9 >> 1)
        sub_1CCA6388C(v9 > 1, v10 + 1, 1);
      *(_QWORD *)(v13 + 16) = v10 + 1;
      v11 = v13 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v8;
      *(_QWORD *)(v11 + 40) = v7;
      v6 = (uint64_t *)((char *)v6 + v5);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1CCA97658(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void (**)(char *))(a1 + 32);
  if (a2)
  {
    sub_1CCB6346C();
    v8 = sub_1CCB63490();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 0, 1, v8);
  }
  else
  {
    v9 = sub_1CCB63490();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 1, 1, v9);
  }
  swift_retain();
  v7(v6);
  swift_release();
  return sub_1CC9C3E84((uint64_t)v6, &qword_1ED8A8EE8);
}

unint64_t FMIPCorePreferenceDomain.getter()
{
  return 0xD000000000000025;
}

uint64_t sub_1CCA97758()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_1CCA7CA80((uint64_t)&unk_1E88ECCE8);
  result = swift_arrayDestroy();
  qword_1EF9E27E8 = v0;
  return result;
}

uint64_t FMIPBundleIdsAllowedToUseCache.getter()
{
  if (qword_1EF9DEF88 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void sub_1CCA977E0(uint64_t a1)
{
  sub_1CC9CD0CC(a1, 0xD000000000000012, 0x80000001CCB7B320, &unk_1EF9E27F0);
}

uint64_t FMIPShowLocationSource.getter()
{
  return sub_1CCA2341C(&qword_1EF9DEF90, (unsigned __int8 *)&unk_1EF9E27F0);
}

uint64_t FMIPShowCrowdSourcedLocationOnly.getter()
{
  return sub_1CCA2341C(&qword_1EF9DEF98, (unsigned __int8 *)&byte_1EF9E27F1);
}

uint64_t FMIPDemoModeEnabled.getter()
{
  return sub_1CCA2341C(&qword_1EF9DEFA0, (unsigned __int8 *)&byte_1EF9E27F2);
}

double FMIPNotifyWhenFoundAgeThresholdInSeconds.getter()
{
  return 180.0;
}

double FMIPOldLocationAgeThresholdInSeconds.getter()
{
  return 900.0;
}

double FMIPRealtimeLocationThresholdInSeconds.getter()
{
  return 15.0;
}

double FMIPOnlineLocationAgeThresholdInSeconds.getter()
{
  return 180.0;
}

uint64_t FMIPContentObservation.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t FMIPContentObservation.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static FMIPContentObservation.devices.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static FMIPContentObservation.items.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void sub_1CCA978B8()
{
  dword_1EF9E27F4 = 3;
}

uint64_t static FMIPContentObservation.all.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  if (qword_1EF9DEFA8 != -1)
    result = swift_once();
  *a1 = dword_1EF9E27F4;
  return result;
}

unint64_t FMIPContentObservation.description.getter()
{
  int *v0;
  int v1;
  unint64_t v2;

  v1 = *v0;
  if (qword_1EF9DEFA8 != -1)
    swift_once();
  v2 = 0xD000000000000019;
  if (v1 == 2)
    v2 = 0xD000000000000017;
  if (v1 == dword_1EF9E27F4)
    return 0xD000000000000015;
  else
    return v2;
}

void sub_1CCA979EC()
{
  void *v0;
  char v1;

  v0 = (void *)sub_1CCB63964();
  v1 = MGGetBoolAnswer();

  byte_1EF9E27F8 = v1;
}

uint64_t FMIPManager.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_identifier;
  v4 = sub_1CCB63604();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FMIPManager.delegate.getter()
{
  return sub_1CCA97BF8(&OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate);
}

uint64_t sub_1CCA97A88(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  *(_QWORD *)(v3 + 8) = v2;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRetain();
  FMIPManager.initialize()();
  return swift_unknownObjectRelease();
}

void (*FMIPManager.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1D17B2218](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return sub_1CCA97B70;
}

void sub_1CCA97B70(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
    FMIPManager.initialize()();
  }
  free(v3);
}

uint64_t FMIPManager.siriDelegate.getter()
{
  return sub_1CCA97BF8(&OBJC_IVAR____TtC8FMIPCore11FMIPManager_siriDelegate);
}

uint64_t sub_1CCA97BF8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + *a1;
  swift_beginAccess();
  return MEMORY[0x1D17B2218](v2);
}

uint64_t FMIPManager.siriDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_siriDelegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*FMIPManager.siriDelegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_siriDelegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1D17B2218](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return sub_1CCA97D1C;
}

void sub_1CCA97D1C(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t FMIPManager.isUTAppAlertDisabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isUTAppAlertDisabled);
  swift_beginAccess();
  return *v1;
}

uint64_t FMIPManager.isUTAppAlertDisabled.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isUTAppAlertDisabled);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*FMIPManager.isUTAppAlertDisabled.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t FMIPManager.owner.getter()
{
  sub_1CCA14E90(&qword_1EF9E2800);
  return sub_1CCB63D9C();
}

uint64_t sub_1CCA97EC4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
  v3 = v2[11];
  v4 = v2[12];
  v5 = v2[13];
  v6 = v2[14];
  v7 = v2[15];
  v8 = v2[16];
  v9 = v2[17];
  v10 = v2[18];
  v11 = v2[19];
  v12 = v2[20];
  v13 = v2[21];
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  a2[4] = v7;
  a2[5] = v8;
  a2[6] = v9;
  a2[7] = v10;
  a2[8] = v11;
  a2[9] = v12;
  a2[10] = v13;
  return sub_1CCAAB5D0(v3, v4);
}

uint64_t FMIPManager.familyMembers.getter()
{
  return sub_1CC9C602C(&qword_1EF9E2AF0);
}

uint64_t FMIPManager.itemGroups.getter()
{
  return sub_1CC9C602C(&qword_1EF9E2A30);
}

uint64_t FMIPManager.unknownItems.getter()
{
  return sub_1CC9C602C(&qword_1EF9E2808);
}

void FMIPManager.utAlertState.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconRefreshingController)
                 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_utAlertState);
}

void FMIPManager.separationMonitoringState.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconRefreshingController)
                 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_separationMonitoringState);
}

uint64_t FMIPManager.safeLocations.getter()
{
  return sub_1CC9C602C(&qword_1EF9E2930);
}

uint64_t FMIPManager.shares.getter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_1CCA97FE4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(*(_QWORD *)(v0 + 16)
                                   + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconSharingController);
  return swift_task_switch();
}

uint64_t sub_1CCA98008()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 144);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t sub_1CCA9804C()
{
  uint64_t v0;
  size_t v1;

  v1 = sub_1CCAA6CE0(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(size_t))(v0 + 8))(v1);
}

void FMIPManager.rangingParameters.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_refreshingController);
  if (v2)
    v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_rangingParameters);
  else
    v3 = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v2 == 0;
}

uint64_t FMIPManager.selectedDevice.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_selectedDevice;
  swift_beginAccess();
  return sub_1CC9EAB74(v3, a1, &qword_1ED8A7170);
}

uint64_t sub_1CCA98124(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_1CCA14E90(&qword_1ED8A7170);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CC9EAB74(a1, (uint64_t)v4, &qword_1ED8A7170);
  return FMIPManager.selectedDevice.setter((uint64_t)v4);
}

void (*FMIPManager.selectedDevice.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[6] = v1;
  v4 = sub_1CCA14E90(&qword_1ED8A7170);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v6 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_selectedDevice;
  v3[7] = v5;
  v3[8] = v6;
  swift_beginAccess();
  return sub_1CCA98228;
}

void sub_1CCA98228(_QWORD *a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)*a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v4 = v3[6];
    v5 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_refreshingController);
    if (v5)
    {
      v6 = v3[7];
      sub_1CC9EAB74(v4 + v3[8], v6, &qword_1ED8A7170);
      v7 = v5 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_selectedDevice;
      swift_beginAccess();
      swift_retain();
      sub_1CCA24764(v6, v7, &qword_1ED8A7170);
      swift_endAccess();
      swift_release();
    }
  }
  free((void *)v3[7]);
  free(v3);
}

uint64_t sub_1CCA982F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD *v75;
  char v77;
  char *v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  _QWORD *v96;
  char v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;

  v137 = type metadata accessor for FMIPProductType();
  v1 = MEMORY[0x1E0C80A78](v137);
  v3 = (char *)&v118 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0C80A78](v1);
  v6 = (char *)&v118 - v5;
  MEMORY[0x1E0C80A78](v4);
  v135 = (char *)&v118 - v7;
  v8 = type metadata accessor for FMIPItem();
  v138 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v132 = (uint64_t)&v118 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v120 = (uint64_t)&v118 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v118 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v125 = (uint64_t)&v118 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v118 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v122 = (uint64_t)&v118 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v25 = MEMORY[0x1E0C80A78](v24);
  v129 = (uint64_t)&v118 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v130 = (char *)&v118 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v131 = (uint64_t)&v118 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v134 = (uint64_t)&v118 - v32;
  result = MEMORY[0x1E0C80A78](v31);
  v37 = (char *)&v118 - v36;
  v121 = v0;
  v119 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemCounts;
  v38 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemCounts);
  if (!v38)
  {
    v55 = 0;
    v56 = 0;
    v57 = 0;
    goto LABEL_92;
  }
  v128 = v35;
  v124 = v34;
  v39 = (char *)MEMORY[0x1E0DEE9D8];
  v140 = (char *)MEMORY[0x1E0DEE9D8];
  v40 = *(_QWORD *)(v38 + 16);
  result = swift_bridgeObjectRetain();
  v126 = v3;
  v127 = v21;
  v139 = v8;
  v123 = v16;
  v136 = v6;
  v133 = v40;
  if (!v40)
  {
    v54 = (uint64_t)v39;
LABEL_24:
    swift_bridgeObjectRelease();
    result = *(_QWORD *)(v121 + v119);
    if (result)
    {
      v134 = v54;
      v140 = v39;
      v58 = *(_QWORD *)(result + 16);
      result = swift_bridgeObjectRetain();
      if (v58)
      {
        v59 = 0;
        v135 = (char *)MEMORY[0x1E0DEE9D8];
        v60 = (uint64_t)v130;
        while (1)
        {
          if (v59 >= *(_QWORD *)(result + 16))
            goto LABEL_96;
          v65 = (*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
          v66 = *(_QWORD *)(v138 + 72);
          v67 = result;
          sub_1CCA0BEEC(result + v65 + v66 * v59, v60, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          v68 = v139;
          sub_1CCA0BEEC(v60 + *(int *)(v139 + 96), (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
          if (swift_getEnumCaseMultiPayload() != 2)
            break;
          sub_1CC9C3E84((uint64_t)v6, &qword_1EF9DFB90);
          v69 = v60;
          v70 = v58;
          v71 = v60;
          v72 = v129;
          sub_1CCA0BEEC(v69, v129, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          v73 = *(_BYTE *)(v72 + *(int *)(v68 + 88));
          sub_1CCA0BF30(v72, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          v74 = v71;
          v58 = v70;
          v64 = v128;
          sub_1CCA0BEEC(v74, v128, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          if ((v73 & 1) != 0)
            goto LABEL_28;
          v75 = (_QWORD *)(v64 + *(int *)(v139 + 60));
          if (*v75 == 0x6F6C4072656E776FLL && v75[1] == 0xEF74736F686C6163)
          {
            sub_1CCA0BF30(v64, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            v60 = (uint64_t)v130;
LABEL_41:
            sub_1CC9FED60(v60, v122, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            v78 = v135;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              sub_1CCA63A2C(0, *((_QWORD *)v78 + 2) + 1, 1);
            v79 = v140;
            v81 = *((_QWORD *)v140 + 2);
            v80 = *((_QWORD *)v140 + 3);
            if (v81 >= v80 >> 1)
            {
              sub_1CCA63A2C(v80 > 1, v81 + 1, 1);
              v79 = v140;
            }
            *((_QWORD *)v79 + 2) = v81 + 1;
            v135 = v79;
            sub_1CC9FED60(v122, (uint64_t)&v79[v65 + v81 * v66], (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            v6 = v136;
            goto LABEL_30;
          }
          v77 = sub_1CCB642A0();
          sub_1CCA0BF30(v64, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          v60 = (uint64_t)v130;
          if ((v77 & 1) != 0)
            goto LABEL_41;
LABEL_29:
          sub_1CCA0BF30(v60, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_30:
          ++v59;
          result = v67;
          if (v58 == v59)
          {
            v135 = v140;
            v39 = (char *)MEMORY[0x1E0DEE9D8];
            goto LABEL_52;
          }
        }
        sub_1CCA0BF30((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
        v61 = v60;
        v62 = v60;
        v63 = v129;
        sub_1CCA0BEEC(v61, v129, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        sub_1CCA0BF30(v63, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v64 = v128;
        sub_1CCA0BEEC(v62, v128, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_28:
        sub_1CCA0BF30(v64, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v60 = (uint64_t)v130;
        goto LABEL_29;
      }
      v135 = v39;
LABEL_52:
      result = swift_bridgeObjectRelease();
      v84 = *(_QWORD *)(v121 + v119);
      v85 = (uint64_t)v126;
      v86 = (uint64_t)v127;
      if (v84)
      {
        v140 = v39;
        v87 = *(char **)(v84 + 16);
        result = swift_bridgeObjectRetain();
        v136 = v87;
        if (v87)
        {
          v88 = 0;
          while (1)
          {
            if ((unint64_t)v88 >= *(_QWORD *)(v84 + 16))
              goto LABEL_97;
            v91 = (*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
            v92 = *(_QWORD *)(v138 + 72);
            sub_1CCA0BEEC(v84 + v91 + v92 * (_QWORD)v88, v86, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            v93 = v139;
            sub_1CCA0BEEC(v86 + *(int *)(v139 + 96), v85, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
            if (swift_getEnumCaseMultiPayload() != 2)
              break;
            sub_1CC9C3E84(v85, &qword_1EF9DFB90);
            v94 = v125;
            sub_1CCA0BEEC(v86, v125, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            v95 = *(_BYTE *)(v94 + *(int *)(v93 + 88));
            sub_1CCA0BF30(v94, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            v90 = (uint64_t)v123;
            sub_1CCA0BEEC(v86, (uint64_t)v123, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            if ((v95 & 1) == 0)
              goto LABEL_56;
            v96 = (_QWORD *)(v90 + *(int *)(v139 + 60));
            if (*v96 == 0x6F6C4072656E776FLL && v96[1] == 0xEF74736F686C6163)
            {
              sub_1CCA0BF30(v90, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_69:
              sub_1CC9FED60((uint64_t)v127, v120, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                sub_1CCA63A2C(0, *((_QWORD *)v39 + 2) + 1, 1);
              v39 = v140;
              v102 = *((_QWORD *)v140 + 2);
              v101 = *((_QWORD *)v140 + 3);
              if (v102 >= v101 >> 1)
              {
                sub_1CCA63A2C(v101 > 1, v102 + 1, 1);
                v39 = v140;
              }
              *((_QWORD *)v39 + 2) = v102 + 1;
              result = sub_1CC9FED60(v120, (uint64_t)&v39[v91 + v102 * v92], (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
              v86 = (uint64_t)v127;
              goto LABEL_58;
            }
            v98 = sub_1CCB642A0();
            v99 = v90;
            v100 = v98;
            sub_1CCA0BF30(v99, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            if ((v100 & 1) != 0)
              goto LABEL_69;
LABEL_57:
            v86 = (uint64_t)v127;
            result = sub_1CCA0BF30((uint64_t)v127, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_58:
            ++v88;
            v85 = (uint64_t)v126;
            if (v136 == v88)
            {
              v103 = v140;
              v39 = (char *)MEMORY[0x1E0DEE9D8];
              goto LABEL_77;
            }
          }
          sub_1CCA0BF30(v85, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
          v89 = v125;
          sub_1CCA0BEEC(v86, v125, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          sub_1CCA0BF30(v89, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          v90 = (uint64_t)v123;
          sub_1CCA0BEEC(v86, (uint64_t)v123, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_56:
          sub_1CCA0BF30(v90, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          goto LABEL_57;
        }
        v103 = v39;
LABEL_77:
        swift_bridgeObjectRelease();
        v104 = *((_QWORD *)v103 + 2);
        if (v104)
        {
          v140 = v39;
          sub_1CCA6388C(0, v104, 0);
          v105 = (uint64_t)&v103[(*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80)];
          v106 = *(_QWORD *)(v138 + 72);
          do
          {
            v107 = v132;
            sub_1CCA0BEEC(v105, v132, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            v109 = *(_QWORD *)(v107 + 336);
            v108 = *(_QWORD *)(v107 + 344);
            v110 = v124;
            sub_1CCA0BEEC(v107, v124, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            if (v108)
            {
              v111 = v108;
            }
            else
            {
              v109 = *(_QWORD *)(v110 + 352);
              v111 = *(_QWORD *)(v110 + 360);
              swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRetain();
            sub_1CCA0BF30(v110, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            sub_1CCA0BF30(v132, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            v112 = v140;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1CCA6388C(0, *((_QWORD *)v112 + 2) + 1, 1);
              v112 = v140;
            }
            v114 = *((_QWORD *)v112 + 2);
            v113 = *((_QWORD *)v112 + 3);
            if (v114 >= v113 >> 1)
            {
              sub_1CCA6388C(v113 > 1, v114 + 1, 1);
              v112 = v140;
            }
            *((_QWORD *)v112 + 2) = v114 + 1;
            v115 = &v112[16 * v114];
            *((_QWORD *)v115 + 4) = v109;
            *((_QWORD *)v115 + 5) = v111;
            v105 += v106;
            --v104;
          }
          while (v104);
        }
        swift_release();
        v83 = sub_1CCB63B14();
        result = swift_bridgeObjectRelease();
      }
      else
      {
        v83 = 0;
      }
      v54 = v134;
      v82 = v135;
      if (v134)
      {
LABEL_89:
        v56 = *(_QWORD *)(v54 + 16);
        result = swift_bridgeObjectRelease();
        if (v82)
        {
LABEL_90:
          v55 = *((_QWORD *)v82 + 2);
          result = swift_bridgeObjectRelease();
          if (v83)
            goto LABEL_91;
          goto LABEL_50;
        }
LABEL_49:
        v55 = 0;
        if (v83)
        {
LABEL_91:
          v57 = *(_QWORD *)(v83 + 16);
          result = swift_bridgeObjectRelease();
LABEL_92:
          v116 = *(_QWORD *)(v121 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_refreshingController);
          if (v116)
          {
            v117 = v116 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_itemCounts;
            *(_QWORD *)v117 = v56;
            *(_QWORD *)(v117 + 8) = 0;
            *(_QWORD *)(v117 + 16) = v55;
            *(_QWORD *)(v117 + 24) = 0;
            *(_QWORD *)(v117 + 32) = v57;
            *(_QWORD *)(v117 + 40) = 0;
            *(_BYTE *)(v117 + 48) = 0;
          }
          return result;
        }
LABEL_50:
        v57 = 0;
        goto LABEL_92;
      }
    }
    else
    {
      v82 = 0;
      v83 = 0;
      if (v54)
        goto LABEL_89;
    }
    v56 = 0;
    if (v82)
      goto LABEL_90;
    goto LABEL_49;
  }
  v41 = 0;
  v42 = (uint64_t)v135;
  while (v41 < *(_QWORD *)(v38 + 16))
  {
    v44 = (*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
    v45 = *(_QWORD *)(v138 + 72);
    v46 = v38;
    sub_1CCA0BEEC(v38 + v44 + v45 * v41, (uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v47 = v139;
    sub_1CCA0BEEC((uint64_t)&v37[*(int *)(v139 + 96)], v42, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
    if (swift_getEnumCaseMultiPayload() >= 2)
    {
      sub_1CC9C3E84(v42, &qword_1EF9DFB90);
      v43 = v134;
      sub_1CCA0BEEC((uint64_t)v37, v134, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCA0BF30(v43, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v38 = v46;
    }
    else
    {
      sub_1CCA0BF30(v42, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
      v48 = v134;
      sub_1CCA0BEEC((uint64_t)v37, v134, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v49 = (_QWORD *)(v48 + *(int *)(v47 + 60));
      if (*v49 == 0x6F6C4072656E776FLL && v49[1] == 0xEF74736F686C6163)
      {
        sub_1CCA0BF30(v48, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v38 = v46;
LABEL_16:
        sub_1CC9FED60((uint64_t)v37, v131, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1CCA63A2C(0, *((_QWORD *)v39 + 2) + 1, 1);
        v39 = v140;
        v53 = *((_QWORD *)v140 + 2);
        v52 = *((_QWORD *)v140 + 3);
        if (v53 >= v52 >> 1)
        {
          sub_1CCA63A2C(v52 > 1, v53 + 1, 1);
          v39 = v140;
        }
        *((_QWORD *)v39 + 2) = v53 + 1;
        result = sub_1CC9FED60(v131, (uint64_t)&v39[v44 + v53 * v45], (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        goto LABEL_6;
      }
      v51 = sub_1CCB642A0();
      sub_1CCA0BF30(v48, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v38 = v46;
      if ((v51 & 1) != 0)
        goto LABEL_16;
    }
    result = sub_1CCA0BF30((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_6:
    ++v41;
    v42 = (uint64_t)v135;
    v6 = v136;
    if (v133 == v41)
    {
      v54 = (uint64_t)v140;
      v39 = (char *)MEMORY[0x1E0DEE9D8];
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
  return result;
}

uint64_t FMIPManager.initializedSubsystems.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_initializedSubsystems);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t sub_1CCA98F80(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *a1;
  v3 = (uint64_t *)(*a2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_initializedSubsystems);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v6 = v4;
  return sub_1CCA98FE4(&v6);
}

uint64_t sub_1CCA98FE4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[3];
  _QWORD aBlock[6];

  v3 = sub_1CCB63820();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63868();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = (uint64_t *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_initializedSubsystems);
  result = swift_beginAccess();
  v14 = *v12;
  if (v11 != *v12)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration)
                    + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems);
    if (v15 == 1)
    {
      if ((~(_BYTE)v14 & 3) != 0)
        return result;
    }
    else if ((v15 & ~v14) != 0)
    {
      return result;
    }
    v17[1] = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue);
    aBlock[4] = sub_1CCAAA1B8;
    aBlock[5] = v1;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA00C38;
    aBlock[3] = &unk_1E88F7FD0;
    v16 = _Block_copy(aBlock);
    swift_retain();
    sub_1CCB63844();
    v17[2] = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v10, v6, v16);
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return swift_release();
  }
  return result;
}

uint64_t FMIPManager.__allocating_init(configuration:ownerSession:)(uint64_t a1, void *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  FMIPManager.init(configuration:ownerSession:)(a1, a2);
  return v4;
}

uint64_t sub_1CCA9926C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_1CCB6433C();
    sub_1CCB639F4();
    v6 = sub_1CCB64384();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_1CCB642A0() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_1CCB642A0() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1CCA993A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_1CCA993B8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(*(_QWORD *)(v0 + 16)
                                   + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconSharingController);
  return swift_task_switch();
}

uint64_t sub_1CCA993DC()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 32) + 160) = &off_1E88F7850;
  swift_unknownObjectWeakAssign();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t FMIPManager.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _QWORD *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  v5 = &unk_1ED8AD000;
  if (os_log_type_enabled(v3, v4))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v17 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = sub_1CCB635C8();
    v10 = sub_1CC9C6AE4(0xCuLL, v8, v9);
    v11 = MEMORY[0x1D17B0F34](v10);
    v13 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1CCA0CB60(v11, v13, &v17);
    sub_1CCB63E44();
    swift_release_n();
    v5 = (_QWORD *)&unk_1ED8AD000;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPManager<%s>.deinit", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v7, -1, -1);
    MEMORY[0x1D17B214C](v6, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v14 = v0 + v5[211];
  v15 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_1CCA2F610(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate);
  sub_1CCA2F610(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_siriDelegate);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  sub_1CC9C3E84(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_authenticationUIProvider, &qword_1ED8A9DE8);
  swift_release();
  swift_release();

  swift_release();
  sub_1CCA01CA0(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_interactionController);
  swift_release();
  swift_release();
  swift_release();
  sub_1CC9C3E84(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_stopRefreshTimestamp, &qword_1ED8A7130);
  swift_release();
  sub_1CC9C3E84(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_selectedDevice, &qword_1ED8A7170);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t FMIPManager.__deallocating_deinit()
{
  FMIPManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA997F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t aBlock[6];

  v2 = sub_1CCB63820();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v16 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63868();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration)
                  + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems);
  v11 = (uint64_t *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_initializedSubsystems);
  swift_beginAccess();
  v12 = *v11;
  *v11 = v10;
  aBlock[0] = v12;
  sub_1CCA98FE4(aBlock);
  aBlock[4] = (uint64_t)sub_1CCAAB6A8;
  aBlock[5] = a1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA00C38;
  aBlock[3] = (uint64_t)&unk_1E88F8B00;
  v13 = _Block_copy(aBlock);
  swift_retain();
  sub_1CCB63844();
  v17 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v3, MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v9, v5, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

uint64_t sub_1CCA99A18(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t ObjectType;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPManager: loaded cached data", v5, 2u);
    MEMORY[0x1D17B214C](v5, -1, -1);
  }

  v6 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v6);
  if (result)
  {
    v8 = *(_QWORD *)(v6 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCA99B44()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1CCA2FE0C;
  return sub_1CCA213EC();
}

Swift::Void __swiftcall FMIPManager.forceStartRefreshing()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  char isEscapingClosureAtFileLocation;
  void *v18;
  char *v19;
  dispatch_queue_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t aBlock;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  void *v27;
  uint64_t (*v28)();
  uint64_t v29;

  v1 = v0;
  v2 = sub_1CCB63820();
  v22 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCB63868();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v21 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v8 = sub_1CCB637FC();
  sub_1CCA16C20(v8, (uint64_t)qword_1ED8AD7F8);
  v9 = sub_1CCB637D8();
  v10 = sub_1CCB63D48();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1CC9BF000, v9, v10, "FMIPManager: force start refreshing", v11, 2u);
    MEMORY[0x1D17B214C](v11, -1, -1);
  }

  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_refreshingController);
  v13 = MEMORY[0x1E0C809B0];
  if (!v12)
    goto LABEL_7;
  v20 = *(dispatch_queue_t *)(v12 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_refreshQueue);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = sub_1CCA21B3C;
  *(_QWORD *)(v14 + 24) = v12;
  v28 = sub_1CC9F4530;
  v29 = v14;
  aBlock = v13;
  v25 = 1107296256;
  v26 = sub_1CC9F44AC;
  v27 = &unk_1E88F7188;
  v15 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  dispatch_sync(v20, v15);
  v16 = v15;
  v13 = MEMORY[0x1E0C809B0];
  _Block_release(v16);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release_n();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
LABEL_7:
    v28 = sub_1CCA242B0;
    v29 = v1;
    aBlock = v13;
    v25 = 1107296256;
    v26 = sub_1CCA00C38;
    v27 = &unk_1E88F71B0;
    v18 = _Block_copy(&aBlock);
    swift_retain();
    v19 = v21;
    sub_1CCB63844();
    v23 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v19, v4, v18);
    _Block_release(v18);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v4, v2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v5);
    swift_release();
  }
}

Swift::Void __swiftcall FMIPManager.stopRefreshing()()
{
  sub_1CCA24260((uint64_t (*)(uint64_t *))FMIPManager.stopRefreshing(subsystems:));
}

Swift::Void __swiftcall FMIPManager.stopRefreshing(subsystems:)(FMIPCore::FMIPManagerSubsystem subsystems)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = sub_1CCB63820();
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63868();
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCA14E90(&qword_1ED8A7130);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)subsystems.rawValue;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v17 = sub_1CCB637FC();
  sub_1CCA16C20(v17, (uint64_t)qword_1ED8AD7F8);
  v18 = sub_1CCB637D8();
  v19 = sub_1CCB63D48();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1CC9BF000, v18, v19, "FMIPManager: stop refreshing", v20, 2u);
    MEMORY[0x1D17B214C](v20, -1, -1);

    if ((v16 & 1) == 0)
    {
LABEL_5:
      if ((v16 & 3) == 0)
        goto LABEL_14;
      goto LABEL_11;
    }
  }
  else
  {

    if ((v16 & 1) == 0)
      goto LABEL_5;
  }
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_refreshingController))
  {
    swift_retain();
    sub_1CCB1498C();
    swift_release();
  }
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isRefreshingDevices) = 0;
  if ((v16 & 3) != 0)
  {
LABEL_11:
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isDevicesSnapshotMode) & 1) == 0
      && (*(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isItemsSnapshotMode) & 1) == 0)
    {
      swift_retain();
      sub_1CCB40394();
      swift_release();
      *(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isRefreshingItems) = 0;
      v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconSharingController);
      v22 = sub_1CCB63C04();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v15, 1, 1, v22);
      v23 = (_QWORD *)swift_allocObject();
      v23[2] = 0;
      v23[3] = 0;
      v23[4] = v21;
      swift_retain();
      sub_1CCA96BE8((uint64_t)v15, (uint64_t)&unk_1EF9E2840, (uint64_t)v23);
      swift_release();
    }
  }
LABEL_14:
  v24 = *(void **)(*(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_safeLocationRefreshingController) + 56);
  swift_retain();
  objc_msgSend(v24, sel_stopRefreshingSafeLocations);
  v25 = sub_1CCB637D8();
  v26 = sub_1CCB63D48();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1CC9BF000, v25, v26, "FMIPSafeLocationRefreshingController: Stopped refreshing Safe Locations", v27, 2u);
    MEMORY[0x1D17B214C](v27, -1, -1);
  }
  swift_release();

  objc_msgSend(*(id *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_locationController)+ OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_locationManager), sel_stopUpdatingLocation);
  sub_1CCB635A4();
  v28 = sub_1CCB635B0();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v12, 0, 1, v28);
  v29 = v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_stopRefreshTimestamp;
  swift_beginAccess();
  sub_1CCA24764((uint64_t)v12, v29, &qword_1ED8A7130);
  swift_endAccess();
  aBlock[4] = sub_1CCAA8758;
  aBlock[5] = v2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F71D8;
  v30 = _Block_copy(aBlock);
  swift_retain();
  sub_1CCB63844();
  v37 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  v31 = v36;
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v9, v6, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v31);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v34);
  swift_release();
}

uint64_t sub_1CCA9A47C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1CCA2FE0C;
  return sub_1CCA26808();
}

uint64_t sub_1CCA9A4C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  sub_1CCA14E90((uint64_t *)&unk_1EF9E2A60);
  sub_1CCB63D9C();
  v2 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  if (MEMORY[0x1D17B2218](v2))
  {
    v3 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    sub_1CCA14E90(&qword_1ED8A7E80);
    sub_1CCB63D9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 32))(a1, v10, ObjectType, v3);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  if (MEMORY[0x1D17B2218](v2))
  {
    v5 = *(_QWORD *)(v2 + 8);
    v6 = swift_getObjectType();
    sub_1CCB63D9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 112))(a1, v10, v6, v5);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  if (MEMORY[0x1D17B2218](v2))
  {
    v7 = *(_QWORD *)(v2 + 8);
    v8 = swift_getObjectType();
    sub_1CCA14E90(&qword_1EF9E2A30);
    sub_1CCB63D9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 152))(a1, v10, v8, v7);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemCounts) = v11;
  swift_bridgeObjectRelease();
  return sub_1CCA982F0();
}

Swift::Void __swiftcall FMIPManager.updateLastActiveTimestamp()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  v2 = sub_1CCB635B0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_interactionController;
  swift_beginAccess();
  sub_1CC9EBC94(v6, (uint64_t)v11);
  v7 = v12;
  v8 = v13;
  sub_1CCA04DDC(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
  sub_1CCA01CA0((uint64_t)v11);
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconRefreshingController);
  swift_retain();
  sub_1CCB635A4();
  v10 = v9 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_lastActiveTimestamp;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v10, v5, v2);
  swift_endAccess();
  swift_release();
}

Swift::Void __swiftcall FMIPManager.refresh()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration)
                 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems);
  FMIPManager.refresh(subsystems:)((FMIPCore::FMIPManagerSubsystem)&v1);
}

Swift::Void __swiftcall FMIPManager.refresh(subsystems:)(FMIPCore::FMIPManagerSubsystem subsystems)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char isEscapingClosureAtFileLocation;
  char v21;
  const void *v22;
  _QWORD v23[6];
  _QWORD aBlock[6];

  v2 = v1;
  v3 = *(_QWORD *)subsystems.rawValue;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v4 = sub_1CCB637FC();
  sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
  v5 = sub_1CCB637D8();
  v6 = sub_1CCB63D48();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPManager: forced refresh", v7, 2u);
    MEMORY[0x1D17B214C](v7, -1, -1);
  }

  if ((v3 & 1) == 0)
    goto LABEL_11;
  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_refreshingController);
  if (!v8)
    goto LABEL_11;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v8;
  *(_BYTE *)(v9 + 24) = 0;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_1CCA21B00;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_1CC9F4530;
  aBlock[5] = v10;
  v11 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CC9F44AC;
  aBlock[3] = &unk_1E88F7278;
  v22 = _Block_copy(aBlock);
  v12 = _Block_copy(v22);
  v13 = qword_1ED8A8CB8;
  swift_retain_n();
  swift_retain();
  if (v13 != -1)
    swift_once();
  v14 = qword_1ED8A8CA8;
  swift_unknownObjectRetain();
  v15 = _os_activity_create(&dword_1CC9BF000, "FMIPRefreshingController.refresh", v14, OS_ACTIVITY_FLAG_DEFAULT);
  swift_unknownObjectRelease();
  v16 = _Block_copy(v12);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v16;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = sub_1CCAAB8D8;
  *(_QWORD *)(v18 + 24) = v17;
  v23[4] = sub_1CC9F4530;
  v23[5] = v18;
  v23[0] = v11;
  v23[1] = 1107296256;
  v23[2] = sub_1CC9F44AC;
  v23[3] = &unk_1E88F72F0;
  v19 = _Block_copy(v23);
  swift_retain();
  swift_release();
  os_activity_apply(v15, v19);
  _Block_release(v19);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v12);
  swift_unknownObjectRelease();
  _Block_release(v22);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  swift_release();
  swift_release();
  v21 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v21 & 1) != 0)
  {
LABEL_15:
    __break(1u);
    return;
  }
LABEL_11:
  if ((v3 & 3) != 0)
  {
    swift_retain();
    sub_1CCA014E8(0, 0);
    swift_release();
  }
}

uint64_t FMIPManager.refreshBeacons(completion:)(NSObject *a1, uint64_t a2)
{
  swift_retain();
  sub_1CCA014E8(a1, a2);
  return swift_release();
}

void FMIPManager.refreshUnknownBeacons(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char isEscapingClosureAtFileLocation;
  _QWORD v24[6];
  _QWORD aBlock[6];

  v3 = v2;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD7F8);
  sub_1CC9DF994(a1);
  v7 = sub_1CCB637D8();
  v8 = sub_1CCB63D48();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v9 = 67109120;
    LODWORD(aBlock[0]) = a1 == 0;
    sub_1CCB63E44();
    sub_1CCA203A8(a1);
    _os_log_impl(&dword_1CC9BF000, v7, v8, "FMIPManager: refreshUnknownBeacons, isCompletionNil? %{BOOL}d", v9, 8u);
    MEMORY[0x1D17B214C](v9, -1, -1);
  }
  else
  {
    sub_1CCA203A8(a1);
  }

  v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconRefreshingController);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = v10;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_1CCA20CE4;
  *(_QWORD *)(v12 + 24) = v11;
  aBlock[4] = sub_1CC9F4530;
  aBlock[5] = v12;
  v13 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CC9F44AC;
  aBlock[3] = &unk_1E88F7368;
  v14 = _Block_copy(aBlock);
  v15 = _Block_copy(v14);
  swift_retain();
  sub_1CC9DF994(a1);
  v16 = qword_1ED8A8CB8;
  swift_retain();
  swift_retain();
  if (v16 != -1)
    swift_once();
  v17 = qword_1ED8A8CA8;
  swift_unknownObjectRetain();
  v18 = _os_activity_create(&dword_1CC9BF000, "FMIPBeaconRefreshingController.refreshUnknownBeacons", v17, OS_ACTIVITY_FLAG_DEFAULT);
  swift_unknownObjectRelease();
  v19 = _Block_copy(v15);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v19;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_1CCAAB8D8;
  *(_QWORD *)(v21 + 24) = v20;
  v24[4] = sub_1CC9F4530;
  v24[5] = v21;
  v24[0] = v13;
  v24[1] = 1107296256;
  v24[2] = sub_1CC9F44AC;
  v24[3] = &unk_1E88F73E0;
  v22 = _Block_copy(v24);
  swift_retain();
  swift_release();
  os_activity_apply(v18, v22);
  _Block_release(v22);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v15);
  swift_unknownObjectRelease();
  _Block_release(v14);
  if ((v22 & 1) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_12:
    __break(1u);
}

void sub_1CCA9AFEC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD, _QWORD, void *);
  id v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration);
  v7 = OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_snapshotHandlers;
  v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_snapshotHandlers);
  if (v8 && (v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48)) != 0)
  {
    swift_retain();
    a1 = v9(v2, a1);
    sub_1CCA203A8((uint64_t)v9);
    if (!a2)
      goto LABEL_4;
  }
  else
  {
    swift_bridgeObjectRetain();
    if (!a2)
    {
LABEL_4:
      if (qword_1ED8AA630 != -1)
        swift_once();
      v10 = sub_1CCB637FC();
      sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      v11 = sub_1CCB637D8();
      v12 = sub_1CCB63D48();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = swift_slowAlloc();
        v35 = v7;
        v14 = swift_slowAlloc();
        *(_DWORD *)v13 = 136446466;
        v37 = v14;
        sub_1CCA14E90(&qword_1EF9E2878);
        v15 = sub_1CCB639AC();
        sub_1CCA0CB60(v15, v16, &v37);
        sub_1CCB63E44();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v13 + 12) = 2048;
        swift_bridgeObjectRelease();
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v11, v12, "%{public}s: received %ld items with locations", (uint8_t *)v13, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v14, -1, -1);
        MEMORY[0x1D17B214C](v13, -1, -1);

        v17 = *(_QWORD *)(v6 + v35);
        if (!v17)
          goto LABEL_22;
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
        v17 = *(_QWORD *)(v6 + v7);
        if (!v17)
        {
LABEL_22:
          swift_bridgeObjectRelease();
          return;
        }
      }
      v33 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v17 + 64);
      if (v33)
      {
        swift_retain();
        v33(v3, a1, a1, 0);
        sub_1CCA203A8((uint64_t)v33);
      }
      goto LABEL_22;
    }
  }
  v18 = a2;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v19 = sub_1CCB637FC();
  sub_1CCA16C20(v19, (uint64_t)qword_1ED8AD7F8);
  v20 = a2;
  swift_retain();
  v21 = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  v22 = sub_1CCB637D8();
  v23 = sub_1CCB63D48();
  if (os_log_type_enabled(v22, v23))
  {
    v36 = v7;
    v24 = swift_slowAlloc();
    v34 = swift_slowAlloc();
    *(_DWORD *)v24 = 136446722;
    v37 = v34;
    sub_1CCA14E90(&qword_1EF9E2878);
    v25 = sub_1CCB639AC();
    sub_1CCA0CB60(v25, v26, &v37);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2048;
    swift_bridgeObjectRelease();
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 22) = 2080;
    swift_getErrorValue();
    v27 = sub_1CCB64300();
    sub_1CCA0CB60(v27, v28, &v37);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v22, v23, "%{public}s: received %ld items (with locations asked) (error=%s)", (uint8_t *)v24, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v34, -1, -1);
    v29 = v24;
    v7 = v36;
    MEMORY[0x1D17B214C](v29, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();

  }
  v30 = *(_QWORD *)(v6 + v7);
  if (v30)
  {
    v31 = *(void (**)(uint64_t, _QWORD, _QWORD, void *))(v30 + 64);
    if (v31)
    {
      v32 = a2;
      sub_1CC9DF994((uint64_t)v31);
      v31(v2, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], a2);

      sub_1CCA203A8((uint64_t)v31);
    }
  }

}

uint64_t FMIPManager.refreshSafeLocations(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v4 = sub_1CCB637FC();
  sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
  sub_1CC9DF994(a1);
  v5 = sub_1CCB637D8();
  v6 = sub_1CCB63D48();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v7 = 67109120;
    sub_1CCB63E44();
    sub_1CCA203A8(a1);
    _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPManager: refreshSafeLocations, isCompletionNil? %{BOOL}d", v7, 8u);
    MEMORY[0x1D17B214C](v7, -1, -1);
  }
  else
  {
    sub_1CCA203A8(a1);
  }

  swift_retain();
  sub_1CCA5860C(a1, a2);
  return swift_release();
}

uint64_t FMIPManager.refreshShares(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v3 = v2;
  v6 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v9 = sub_1CCB637FC();
  sub_1CCA16C20(v9, (uint64_t)qword_1ED8AD7F8);
  v10 = sub_1CCB637D8();
  v11 = sub_1CCB63D48();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPManager: refreshShares", v12, 2u);
    MEMORY[0x1D17B214C](v12, -1, -1);
  }

  v13 = sub_1CCB63C04();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 1, 1, v13);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v3;
  v14[5] = a1;
  v14[6] = a2;
  swift_retain();
  swift_retain();
  sub_1CCA96BE8((uint64_t)v8, (uint64_t)&unk_1EF9E2850, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_1CCA9B86C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[17] = a5;
  v6[18] = a6;
  v6[16] = a4;
  return swift_task_switch();
}

uint64_t sub_1CCA9B888()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 152) = *(_QWORD *)(*(_QWORD *)(v0 + 128)
                                    + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconSharingController);
  return swift_task_switch();
}

uint64_t sub_1CCA9B8AC()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(void **)(v0[19] + 112);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1CCA9B944;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_1CCA96D34;
  v3[3] = &unk_1E88F8520;
  v3[4] = v2;
  objc_msgSend(v1, sel_allSharesWithCompletion_, v3);
  return swift_continuation_await();
}

uint64_t sub_1CCA9B944()
{
  return swift_task_switch();
}

uint64_t sub_1CCA9B990()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = v0[19];
  sub_1CCA21404(v0[15]);
  swift_bridgeObjectRelease();
  v0[20] = *(_QWORD *)(v1 + 144);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t sub_1CCA9B9E8()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 136))(*(_QWORD *)(v0 + 160));
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void FMIPManager.unknownBeacons(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[6];

  v6 = *(void **)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_ownerSession);
  sub_1CCB63604();
  v7 = (void *)sub_1CCB63B20();
  v9[4] = a2;
  v9[5] = a3;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = sub_1CC9C3178;
  v9[3] = &unk_1E88F7430;
  v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_unknownBeaconsForUUIDs_completion_, v7, v8);
  _Block_release(v8);

}

void FMIPManager.perform(action:completion:)(uint64_t a1, void (*a2)(uint64_t *, _QWORD, void *, uint64_t), uint64_t a3)
{
  NSObject *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char isEscapingClosureAtFileLocation;
  uint64_t v44;
  void (*v45)(_QWORD, _QWORD, _QWORD, _QWORD);
  os_activity_t activity;
  NSObject *activitya;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  void *v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[6];
  uint64_t aBlock;
  uint64_t v62;
  uint64_t (*v63)(uint64_t);
  void *v64;
  uint64_t (*v65)();
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v7 = *(uint64_t *)((char *)&v3->isa + OBJC_IVAR____TtC8FMIPCore11FMIPManager_actionsController);
  if (!v7)
  {
    LOBYTE(aBlock) = 0;
    sub_1CCA5589C();
    v19 = (void *)swift_allocError();
    *v20 = 5;
    a2(&aBlock, 0, v19, a1);

    return;
  }
  v8 = qword_1ED8AA630;
  swift_retain();
  if (v8 != -1)
    swift_once();
  v9 = sub_1CCB637FC();
  sub_1CCA16C20(v9, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v10 = sub_1CCB637D8();
  v11 = sub_1CCB63D48();
  v45 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))a2;
  activity = v3;
  v44 = a3;
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    aBlock = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344);
    v15 = swift_retain();
    v16 = v14(v15);
    v18 = v17;
    swift_release();
    v60[0] = sub_1CCA0CB60(v16, v18, &aBlock);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPManager: perform device action %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v13, -1, -1);
    MEMORY[0x1D17B214C](v12, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  sub_1CCA14E90(&qword_1EF9E2AF0);
  sub_1CCB63D9C();
  v21 = aBlock;
  v22 = *(_QWORD *)(aBlock + 16);
  v49 = v7;
  if (v22)
  {
    v23 = 0;
    v48 = a1;
    v24 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 32);
    v25 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 40);
    while (1)
    {
      v26 = *(_QWORD *)(v21 + v23 + 40);
      v27 = *(void **)(v21 + v23 + 56);
      v52 = *(_QWORD *)(v21 + v23 + 32);
      v53 = *(uint64_t (**)(uint64_t))(v21 + v23 + 48);
      v51 = *(_BYTE *)(v21 + v23 + 64);
      LOBYTE(v54) = *(_BYTE *)(v21 + v23 + 65);
      LOBYTE(v50) = *(_BYTE *)(v21 + v23 + 66);
      LOBYTE(v28) = *(_BYTE *)(v21 + v23 + 67);
      v29 = *(_QWORD *)(v21 + v23 + 88);
      v30 = *(_QWORD *)(v21 + v23 + 96);
      v55 = *(void **)(v21 + v23 + 72);
      v57 = *(_QWORD *)(v21 + v23 + 104);
      v58 = *(_QWORD *)(v21 + v23 + 80);
      v59 = *(_QWORD *)(v21 + v23 + 112);
      if (v29 == v24 && v30 == v25)
        break;
      if ((sub_1CCB642A0() & 1) != 0)
        goto LABEL_19;
      v23 += 88;
      if (!--v22)
      {
        swift_bridgeObjectRelease();
        a1 = v48;
        goto LABEL_16;
      }
    }
    v29 = v24;
    v30 = v25;
LABEL_19:
    swift_bridgeObjectRetain();
    v31 = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1 = v48;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_16:
    sub_1CCA14E90(&qword_1EF9E2800);
    sub_1CCB63D9C();
    v31 = v62;
    if (!v62)
      goto LABEL_27;
    v30 = v69;
    v29 = v68;
    v58 = v67;
    v59 = v71;
    v55 = v66;
    v57 = v70;
    v27 = v64;
    v53 = v63;
    v54 = ((unint64_t)v65 >> 8) & 1;
    v52 = aBlock;
    v51 = v65 & 1;
    v50 = ((unint64_t)v65 >> 16) & 1;
    v28 = ((unint64_t)v65 >> 24) & 1;
  }
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = activity;
  v32[3] = a1;
  v32[4] = v45;
  v32[5] = v44;
  v33 = v32;
  v34 = qword_1ED8A8CB8;
  swift_retain();
  swift_retain();
  swift_retain();
  if (v34 != -1)
    swift_once();
  v35 = qword_1ED8A8CA8;
  swift_unknownObjectRetain();
  activitya = _os_activity_create(&dword_1CC9BF000, "FMIPDeviceActionsController.perform", v35, OS_ACTIVITY_FLAG_DEFAULT);
  swift_unknownObjectRelease();
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = v52;
  *(_QWORD *)(v36 + 24) = v31;
  *(_QWORD *)(v36 + 32) = v53;
  *(_QWORD *)(v36 + 40) = v27;
  *(_BYTE *)(v36 + 48) = v51;
  *(_BYTE *)(v36 + 49) = v54;
  *(_BYTE *)(v36 + 50) = v50;
  *(_BYTE *)(v36 + 51) = v28;
  *(_QWORD *)(v36 + 56) = v55;
  *(_QWORD *)(v36 + 64) = v58;
  *(_QWORD *)(v36 + 72) = v29;
  *(_QWORD *)(v36 + 80) = v30;
  *(_QWORD *)(v36 + 88) = v57;
  *(_QWORD *)(v36 + 96) = v59;
  *(_QWORD *)(v36 + 104) = v49;
  *(_QWORD *)(v36 + 112) = a1;
  *(_QWORD *)(v36 + 120) = sub_1CCAA88E8;
  *(_QWORD *)(v36 + 128) = v33;
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = sub_1CCAA8950;
  *(_QWORD *)(v37 + 24) = v36;
  v65 = sub_1CC9F4530;
  v66 = (void *)v37;
  v38 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v62 = 1107296256;
  v63 = sub_1CC9F44AC;
  v64 = &unk_1E88F74D0;
  v56 = _Block_copy(&aBlock);
  v39 = _Block_copy(v56);
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = v39;
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = sub_1CCAAB8D8;
  *(_QWORD *)(v41 + 24) = v40;
  v60[4] = sub_1CC9F4530;
  v60[5] = v41;
  v60[0] = v38;
  v60[1] = 1107296256;
  v60[2] = sub_1CC9F44AC;
  v60[3] = &unk_1E88F7548;
  v42 = _Block_copy(v60);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  os_activity_apply(activitya, v42);
  _Block_release(v42);
  LOBYTE(v38) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v56);
  if ((v38 & 1) != 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
}

uint64_t sub_1CCA9C24C(unsigned __int8 *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t aBlock[7];

  v45 = a6;
  v42 = a5;
  v39 = a4;
  v40 = a2;
  v12 = sub_1CCB63868();
  v46 = *(_QWORD *)(v12 - 8);
  v47 = v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_1CCB63820();
  v41 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v43 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (char)*a1;
  v38 = *a1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v17 = sub_1CCB637FC();
  sub_1CCA16C20(v17, (uint64_t)qword_1ED8AD7F8);
  v18 = a3;
  v19 = a3;
  v20 = sub_1CCB637D8();
  v21 = sub_1CCB63D48();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    v36 = a7;
    v23 = v22;
    v24 = swift_slowAlloc();
    v37 = a8;
    v25 = v24;
    v48 = (uint64_t)a3;
    aBlock[0] = v24;
    *(_DWORD *)v23 = 136315394;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v26 = sub_1CCB63E20();
    v48 = sub_1CCA0CB60(v26, v27, aBlock);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    *(_WORD *)(v23 + 12) = 2048;
    v48 = qword_1CCB6BD60[v16];
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v20, v21, "FMIPManager: performed action with error?: %s status?: %ld", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    a8 = v37;
    MEMORY[0x1D17B214C](v25, -1, -1);
    v28 = v23;
    a7 = v36;
    MEMORY[0x1D17B214C](v28, -1, -1);
  }
  else
  {

  }
  v30 = v42;
  v29 = v43;
  sub_1CCB63814();
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = v40;
  *(_QWORD *)(v31 + 24) = v30;
  *(_QWORD *)(v31 + 32) = v45;
  *(_QWORD *)(v31 + 40) = a7;
  *(_QWORD *)(v31 + 48) = a8;
  *(_BYTE *)(v31 + 56) = v38;
  v32 = v39;
  *(_QWORD *)(v31 + 64) = a3;
  *(_QWORD *)(v31 + 72) = v32;
  aBlock[4] = (uint64_t)sub_1CCAAA674;
  aBlock[5] = v31;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA00C38;
  aBlock[3] = (uint64_t)&unk_1E88F8318;
  v33 = _Block_copy(aBlock);
  v34 = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v14, v29, v33);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v14, v47);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v44);
  return swift_release();
}

void sub_1CCA9C5FC(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, unint64_t, uint64_t, uint64_t), uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  if (a1)
  {
    v26 = a8;
    v13 = *(_QWORD **)(a2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
    swift_retain();
    v14 = swift_bridgeObjectRetain();
    v15 = sub_1CC9CBCCC(v14);
    swift_bridgeObjectRelease();
    v13[36] = v15;
    swift_bridgeObjectRelease();
    v16 = sub_1CC9FD538(a1);
    v17 = sub_1CC9FE3E4(v16, v16);
    swift_bridgeObjectRelease();
    v18 = v13[24];
    swift_bridgeObjectRetain();
    v19 = sub_1CC9FDE28(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = sub_1CC9F9BDC(v19);
    swift_bridgeObjectRelease();
    swift_retain();
    v21 = sub_1CCAB73FC(v20, v13);
    swift_bridgeObjectRelease();
    swift_release_n();
    if (*(_QWORD *)(v21 + 16))
    {
      sub_1CCA9C864(v21, "FMIPManager: updateDevices", (uint64_t)&unk_1E88F8440, (uint64_t)sub_1CCAAA6E8, (uint64_t)&unk_1E88F8458);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1CCA14E90(&qword_1ED8A7FB0);
      v22 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPDevice() - 8) + 80);
      v23 = (v22 + 32) & ~v22;
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_1CCB677E0;
      sub_1CCA0BEEC(a3 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, v24 + v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      sub_1CCA9C864(v24, "FMIPManager: removeDevices", (uint64_t)&unk_1E88F8350, (uint64_t)sub_1CCAAA6A0, (uint64_t)&unk_1E88F8368);
    }
    swift_bridgeObjectRelease();
    a8 = v26;
  }
  LOBYTE(v27) = a6;
  a4(&v27, a1, a7, a8);
  v27 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration)
                  + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems);
  FMIPManager.refresh(subsystems:)((FMIPCore::FMIPManagerSubsystem)&v27);
}

uint64_t sub_1CCA9C864(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint8_t *v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[6];

  v34 = a4;
  v35 = a5;
  v32 = a2;
  v33 = a3;
  v6 = v5;
  v8 = sub_1CCB63868();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63820();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v16 = sub_1CCB637FC();
  sub_1CCA16C20(v16, (uint64_t)qword_1ED8AD7F8);
  v17 = sub_1CCB637D8();
  v18 = sub_1CCB63D48();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v31 = v6;
    v20 = a1;
    v21 = v13;
    v22 = v12;
    v23 = v9;
    v24 = v8;
    v25 = v19;
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1CC9BF000, v17, v18, v32, v19, 2u);
    v26 = v25;
    v8 = v24;
    v9 = v23;
    v12 = v22;
    v13 = v21;
    a1 = v20;
    v6 = v31;
    MEMORY[0x1D17B214C](v26, -1, -1);
  }

  sub_1CCB63814();
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v6;
  *(_QWORD *)(v27 + 24) = a1;
  aBlock[4] = v34;
  aBlock[5] = v27;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = v35;
  v28 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v11, v15, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

void FMIPManager.perform(action:completion:)(uint64_t a1, uint64_t (*a2)(_BYTE *, void *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _BYTE *v16;
  char v17;

  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemActionsController);
  if (v6)
  {
    v8 = qword_1ED8AA630;
    swift_retain();
    if (v8 != -1)
      swift_once();
    v9 = sub_1CCB637FC();
    sub_1CCA16C20(v9, (uint64_t)qword_1ED8AD7F8);
    v10 = sub_1CCB637D8();
    v11 = sub_1CCB63D48();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPManager: perform item action FMIPPlayUTSoundAction", v12, 2u);
      MEMORY[0x1D17B214C](v12, -1, -1);
    }

    v13 = swift_retain();
    v14 = (void *)MEMORY[0x1D17B1B7C](v13);
    sub_1CCA83F74(a1, v6, (uint64_t (*)(_QWORD, _QWORD))a2, a3);
    objc_autoreleasePoolPop(v14);
    swift_release();
  }
  else
  {
    v17 = 0;
    sub_1CCA8E87C();
    v15 = (void *)swift_allocError();
    *v16 = 11;
    a2(&v17, v15);

  }
}

uint64_t sub_1CCA9CC54(char *a1, void *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  char v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t (*v17)(_QWORD, _QWORD);
  uint64_t v18;

  v5 = *a1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD7F8);
  v7 = a2;
  v8 = a2;
  v9 = sub_1CCB637D8();
  v10 = sub_1CCB63D48();
  if (os_log_type_enabled(v9, v10))
  {
    v17 = a3;
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v18 = v12;
    *(_DWORD *)v11 = 136315394;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v13 = sub_1CCB63E20();
    sub_1CCA0CB60(v13, v14, &v18);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 12) = 2048;
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v9, v10, "FMIPManager: performed item action with error?: %s status?: %ld", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v12, -1, -1);
    v15 = v11;
    a3 = v17;
    MEMORY[0x1D17B214C](v15, -1, -1);
  }
  else
  {

  }
  LOBYTE(v18) = v5;
  return a3(&v18, a2);
}

uint64_t FMIPManager.perform(action:completion:)(uint64_t a1, uint64_t (*a2)(uint64_t *, uint64_t, void *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _BYTE *v24;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  void *v30;
  _BYTE *v31;
  _QWORD aBlock[6];

  v6 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemActionsController);
  if (v9)
  {
    v10 = qword_1ED8AA630;
    swift_retain();
    if (v10 != -1)
      swift_once();
    v11 = sub_1CCB637FC();
    sub_1CCA16C20(v11, (uint64_t)qword_1ED8AD7F8);
    v12 = sub_1CCB637D8();
    v13 = sub_1CCB63D48();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1CC9BF000, v12, v13, "FMIPManager: perform item action FMIPPlayUTSoundAction", v14, 2u);
      MEMORY[0x1D17B214C](v14, -1, -1);
    }

    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = a2;
    *(_QWORD *)(v15 + 24) = a3;
    v16 = swift_retain_n();
    v17 = (void *)MEMORY[0x1D17B1B7C](v16);
    type metadata accessor for FMIPFetchEncryptedPayloadAction(0);
    if (swift_dynamicCastClass())
    {
      v18 = *(void **)(v9 + 24);
      swift_retain();
      v19 = (void *)sub_1CCB635D4();
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = sub_1CCAA89C8;
      *(_QWORD *)(v20 + 24) = v15;
      aBlock[4] = sub_1CCAA89D0;
      aBlock[5] = v20;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1CCA97658;
      aBlock[3] = &unk_1E88F75C0;
      v21 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v18, sel_fetchUnauthorizedEncryptedPayload_completion_, v19, v21);
      _Block_release(v21);
      swift_release();

    }
    else
    {
      v26 = sub_1CCB637D8();
      v27 = sub_1CCB63D48();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v28 = 0;
        _os_log_impl(&dword_1CC9BF000, v26, v27, "FMIPItemActionsController: cannot map action to request", v28, 2u);
        MEMORY[0x1D17B214C](v28, -1, -1);
      }

      LOBYTE(aBlock[0]) = 0;
      v29 = sub_1CCB63490();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v8, 1, 1, v29);
      sub_1CCA8E87C();
      v30 = (void *)swift_allocError();
      *v31 = 6;
      sub_1CCA9D250((char *)aBlock, (uint64_t)v8, v30, a2);

      sub_1CC9C3E84((uint64_t)v8, &qword_1ED8A8EE8);
    }
    objc_autoreleasePoolPop(v17);
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    LOBYTE(aBlock[0]) = 0;
    v22 = sub_1CCB63490();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 1, 1, v22);
    sub_1CCA8E87C();
    v23 = (void *)swift_allocError();
    *v24 = 11;
    a2(aBlock, (uint64_t)v8, v23);

    return sub_1CC9C3E84((uint64_t)v8, &qword_1ED8A8EE8);
  }
}

uint64_t sub_1CCA9D250(char *a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t *, uint64_t, void *))
{
  char v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *a1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v8 = sub_1CCB637FC();
  sub_1CCA16C20(v8, (uint64_t)qword_1ED8AD7F8);
  v9 = a3;
  v10 = a3;
  v11 = sub_1CCB637D8();
  v12 = sub_1CCB63D48();
  if (os_log_type_enabled(v11, v12))
  {
    v21 = a2;
    v13 = swift_slowAlloc();
    v20 = v7;
    v14 = swift_slowAlloc();
    v22 = v14;
    *(_DWORD *)v13 = 136315394;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v15 = sub_1CCB63E20();
    sub_1CCA0CB60(v15, v16, &v22);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    *(_WORD *)(v13 + 12) = 2048;
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPManager: performed item action with error?: %s status?: %ld", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    v17 = v14;
    v7 = v20;
    MEMORY[0x1D17B214C](v17, -1, -1);
    v18 = v13;
    a2 = v21;
    MEMORY[0x1D17B214C](v18, -1, -1);
  }
  else
  {

  }
  LOBYTE(v22) = v7;
  return a4(&v22, a2, a3);
}

void FMIPManager.perform(action:completion:)(uint64_t a1, uint64_t (*a2)(uint64_t *, uint64_t, uint64_t, void *, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  void *v8;
  _BYTE *v9;
  char v10;

  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemActionsController);
  if (v6)
  {
    swift_retain();
    swift_retain();
    sub_1CCA8C464(a1, v6, a2, a3);
    swift_release();
    swift_release();
  }
  else
  {
    v10 = 0;
    sub_1CCA8E87C();
    v8 = (void *)swift_allocError();
    *v9 = 11;
    a2((uint64_t *)&v10, 0, 0, v8, 2);

  }
}

uint64_t sub_1CCA9D55C(char *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t (*a6)(uint64_t *, uint64_t, uint64_t, void *, uint64_t))
{
  char v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v11 = *a1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v12 = sub_1CCB637FC();
  sub_1CCA16C20(v12, (uint64_t)qword_1ED8AD7F8);
  v13 = a4;
  v14 = a4;
  v15 = sub_1CCB637D8();
  v16 = sub_1CCB63D48();
  if (os_log_type_enabled(v15, v16))
  {
    v23 = v11;
    v17 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v24 = v22;
    *(_DWORD *)v17 = 136315394;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v18 = sub_1CCB63E20();
    sub_1CCA0CB60(v18, v19, &v24);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    *(_WORD *)(v17 + 12) = 2048;
    a5 = a5;
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v15, v16, "FMIPManager: performed safe location action with error?: %s status?: %ld", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v22, -1, -1);
    v20 = v17;
    v11 = v23;
    MEMORY[0x1D17B214C](v20, -1, -1);
  }
  else
  {

  }
  LOBYTE(v24) = v11;
  return a6(&v24, a2, a3, a4, a5);
}

void FMIPManager.perform(action:completion:)(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  _BYTE *v19;
  _QWORD v20[6];

  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemActionsController);
  if (v6)
  {
    v8 = qword_1ED8AA630;
    swift_retain();
    if (v8 != -1)
      swift_once();
    v9 = sub_1CCB637FC();
    sub_1CCA16C20(v9, (uint64_t)qword_1ED8AD7F8);
    v10 = sub_1CCB637D8();
    v11 = sub_1CCB63D48();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPManager: perform item action FMIPDisableTagSafetyAlertAction", v12, 2u);
      MEMORY[0x1D17B214C](v12, -1, -1);
    }

    v13 = swift_allocObject();
    swift_weakInit();
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = v13;
    v14[3] = a2;
    v14[4] = a3;
    v15 = *(void **)(v6 + 24);
    v16 = *(unsigned __int8 *)(a1 + 16);
    v20[4] = sub_1CCAA8B7C;
    v20[5] = v14;
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 1107296256;
    v20[2] = sub_1CCA1F54C;
    v20[3] = &unk_1E88F7610;
    v17 = _Block_copy(v20);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v15, sel_disableUTAppAlert_completion_, v16, v17);
    _Block_release(v17);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    sub_1CCA8E87C();
    v18 = (void *)swift_allocError();
    *v19 = 11;
    a2();

  }
}

uint64_t sub_1CCA9D9FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    sub_1CC9F5D88(0, 0);
    swift_release();
  }
  return a3(a1);
}

void FMIPManager.perform(action:completion:)(uint64_t a1, void (*a2)(uint64_t *, _QWORD, void *), uint64_t a3)
{
  uint64_t v3;
  id *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint8_t *v16;
  void *v17;
  _BYTE *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint8_t *v37;
  void *v38;
  _BYTE *v39;
  id *v40;
  uint64_t v42;

  v5 = *(id **)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemActionsController);
  if (!v5)
  {
    LOBYTE(v42) = 0;
    sub_1CCA8E87C();
    v17 = (void *)swift_allocError();
    *v18 = 11;
    a2(&v42, 0, v17);

    return;
  }
  v6 = v3;
  v8 = qword_1ED8AA630;
  swift_retain();
  if (v8 != -1)
    swift_once();
  v9 = sub_1CCB637FC();
  sub_1CCA16C20(v9, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v10 = sub_1CCB637D8();
  v11 = sub_1CCB63D48();
  if (os_log_type_enabled(v10, v11))
  {
    v40 = v5;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v42 = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = FMIPItemAction.debugDescription.getter();
    sub_1CCA0CB60(v14, v15, &v42);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPManager: perform item action %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v13, -1, -1);
    v16 = v12;
    v5 = v40;
    MEMORY[0x1D17B214C](v16, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v6;
  v19[3] = a1;
  v19[4] = a2;
  v19[5] = a3;
  swift_retain_n();
  swift_retain_n();
  v20 = swift_retain_n();
  v21 = (void *)MEMORY[0x1D17B1B7C](v20);
  type metadata accessor for FMIPPlaySoundItemAction(0);
  v22 = swift_dynamicCastClass();
  if (v22)
  {
    v23 = v22;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1CCA8CBF0(v23, (uint64_t)v5, v6, a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))a2, a3);
LABEL_16:
    swift_release();
    swift_release();
    goto LABEL_17;
  }
  type metadata accessor for FMIPLostModeItemAction(0);
  v24 = swift_dynamicCastClass();
  if (v24)
  {
    v25 = v24;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1CCA8D0CC(v25, v5, v6, a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))a2, a3);
    goto LABEL_16;
  }
  type metadata accessor for FMIPRemoveItemAction(0);
  v26 = swift_dynamicCastClass();
  if (v26)
  {
    v27 = v26;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1CCA8DCA0(v27, (uint64_t)v5, v6, a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))a2, a3);
    goto LABEL_16;
  }
  type metadata accessor for FMIPNotifyItemAction(0);
  v28 = swift_dynamicCastClass();
  if (v28)
  {
    v29 = v28;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1CCA8F6C4(v29, (uint64_t)v5, v6, a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))a2, a3);
    goto LABEL_16;
  }
  type metadata accessor for FMIPFirmwareUpdateAction();
  v30 = swift_dynamicCastClass();
  if (!v30)
  {
    v32 = sub_1CCB637D8();
    v33 = sub_1CCB63D48();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = a1;
      v35 = v6;
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_1CC9BF000, v32, v33, "FMIPItemActionsController: cannot map action to request", v36, 2u);
      v37 = v36;
      v6 = v35;
      a1 = v34;
      MEMORY[0x1D17B214C](v37, -1, -1);
    }

    LOBYTE(v42) = 0;
    sub_1CCA8E87C();
    v38 = (void *)swift_allocError();
    *v39 = 6;
    sub_1CCA9DFD4((char *)&v42, 0, v38, v6, a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))a2);

    goto LABEL_18;
  }
  v31 = v30;
  swift_retain();
  sub_1CCA8A540(v31, (uint64_t)sub_1CCA8E990, (uint64_t)v19);
LABEL_17:
  swift_release();
LABEL_18:
  objc_autoreleasePoolPop(v21);
  swift_release();
  swift_release_n();
  swift_release_n();
  swift_release_n();
  swift_release();
}

uint64_t sub_1CCA9DFD4(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, _QWORD, _QWORD))
{
  char v9;
  char v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v26)(_QWORD, _QWORD, _QWORD);
  uint64_t v28;

  v9 = *a1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v10 = v9;
  v11 = sub_1CCB637FC();
  sub_1CCA16C20(v11, (uint64_t)qword_1ED8AD7F8);
  v12 = a3;
  v13 = a3;
  v14 = sub_1CCB637D8();
  v15 = sub_1CCB63D48();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v26 = a6;
    v17 = swift_slowAlloc();
    v28 = v17;
    *(_DWORD *)v16 = 136315394;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v18 = sub_1CCB63E20();
    sub_1CCA0CB60(v18, v19, &v28);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    *(_WORD *)(v16 + 12) = 2048;
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v14, v15, "FMIPManager: performed item action with error?: %s status?: %ld", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    v20 = v17;
    a6 = v26;
    MEMORY[0x1D17B214C](v20, -1, -1);
    MEMORY[0x1D17B214C](v16, -1, -1);

    if (!a2)
      goto LABEL_9;
  }
  else
  {

    if (!a2)
      goto LABEL_9;
  }
  if (!*(_QWORD *)(a2 + 16))
  {
    sub_1CCA14E90(&qword_1EF9E13F8);
    v21 = v9;
    v22 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPItem() - 8) + 80);
    v23 = (v22 + 32) & ~v22;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(a5 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, v24 + v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CC9DBA3C(v24, "FMIPManager: removeItems %@", (uint64_t)&unk_1E88F81E8, (uint64_t)sub_1CCAAA2A0, (uint64_t)&unk_1E88F8200);
    v10 = v21;
    swift_bridgeObjectRelease();
  }
LABEL_9:
  LOBYTE(v28) = v10;
  return a6(&v28, a2, a3);
}

void FMIPManager.perform(action:completion:)(uint64_t a1, uint64_t (*a2)(uint64_t *, uint64_t, void *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  _BYTE *v23;
  void (**v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (**v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  void *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (**v42)(char *, uint64_t, uint64_t);
  _QWORD *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  void *v47;
  _BYTE *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  void (**v53)(char *, uint64_t, uint64_t);
  uint64_t (*v54)(uint64_t *, uint64_t, void *);
  uint64_t v55;
  uint64_t v56;

  v54 = a2;
  v5 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63604();
  MEMORY[0x1E0C80A78](v8);
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemActionsController))
  {
    v52 = v7;
    v53 = v10;
    v50 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v11 = qword_1ED8AA630;
    swift_retain();
    if (v11 != -1)
      swift_once();
    v12 = sub_1CCB637FC();
    v13 = sub_1CCA16C20(v12, (uint64_t)qword_1ED8AD7F8);
    swift_retain_n();
    v51 = v13;
    v14 = sub_1CCB637D8();
    v15 = sub_1CCB63D48();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v49 = v8;
      v18 = v17;
      v56 = v17;
      *(_DWORD *)v16 = 136315138;
      v19 = FMIPPrewarmAction.debugDescription.getter();
      v55 = sub_1CCA0CB60(v19, v20, &v56);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v14, v15, "FMIPManager: perform item action %s", v16, 0xCu);
      swift_arrayDestroy();
      v21 = v18;
      v8 = v49;
      MEMORY[0x1D17B214C](v21, -1, -1);
      MEMORY[0x1D17B214C](v16, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v24 = v53;
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = v54;
    *(_QWORD *)(v25 + 24) = a3;
    v26 = swift_retain_n();
    v27 = (void (**)(char *, uint64_t, uint64_t))MEMORY[0x1D17B1B7C](v26);
    type metadata accessor for FMIPPrewarmConnectAction();
    v28 = swift_dynamicCastClass();
    if (v28)
    {
      v29 = v28;
      v53 = v27;
      v30 = *(_QWORD *)(v28 + 16);
      v31 = *(_QWORD *)(v28 + 24);
      swift_retain();
      v32 = (uint64_t)v52;
      sub_1CCB635BC();
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v24[6])(v32, 1, v8) == 1)
      {
        sub_1CC9C3E84(v32, &qword_1ED8A8EF8);
        v33 = sub_1CCB637D8();
        v34 = sub_1CCB63D48();
        if (os_log_type_enabled(v33, v34))
        {
          v35 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v35 = 0;
          _os_log_impl(&dword_1CC9BF000, v33, v34, "FMIPItemActionsController: cannot connect with an invalid identifier", v35, 2u);
          MEMORY[0x1D17B214C](v35, -1, -1);
        }

        LOBYTE(v56) = 4;
        sub_1CCA14E90((uint64_t *)&unk_1ED8AA620);
        v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = xmmword_1CCB677E0;
        *(_QWORD *)(v36 + 32) = v30;
        *(_QWORD *)(v36 + 40) = v31;
        sub_1CCA8E87C();
        v37 = (void *)swift_allocError();
        *v38 = 0;
        swift_bridgeObjectRetain();
        sub_1CCA9E8F4((char *)&v56, v36, v37, v54);

        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v41 = (uint64_t)v50;
        v24[4](v50, v32, v8);
        v42 = v24;
        v43 = (_QWORD *)swift_allocObject();
        v43[2] = sub_1CCAA8B8C;
        v43[3] = v25;
        v43[4] = v29;
        swift_retain();
        swift_retain();
        sub_1CCA844A8(v41, 1, (void (*)(_QWORD))sub_1CCAA8BC0, (uint64_t)v43);
        swift_release();
        ((void (*)(uint64_t, uint64_t))v42[1])(v41, v8);
        swift_release();
      }
      v27 = v53;
    }
    else
    {
      type metadata accessor for FMIPPrewarmDisconnectAction();
      v39 = swift_dynamicCastClass();
      if (v39)
      {
        v40 = v39;
        swift_retain();
        swift_retain();
        sub_1CCA8C868(v40, v54);
        swift_release();
        swift_release();
      }
      else
      {
        v44 = sub_1CCB637D8();
        v45 = sub_1CCB63D30();
        if (os_log_type_enabled(v44, v45))
        {
          v46 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v46 = 0;
          _os_log_impl(&dword_1CC9BF000, v44, v45, "FMIPItemGroupAction: cannot map action to request", v46, 2u);
          MEMORY[0x1D17B214C](v46, -1, -1);
        }

        LOBYTE(v56) = 0;
        sub_1CCA8E87C();
        v47 = (void *)swift_allocError();
        *v48 = 6;
        sub_1CCA9E8F4((char *)&v56, 0, v47, v54);

      }
    }
    objc_autoreleasePoolPop(v27);
    swift_release();
    swift_release_n();
    swift_release();
  }
  else
  {
    LOBYTE(v56) = 0;
    sub_1CCA8E87C();
    v22 = (void *)swift_allocError();
    *v23 = 11;
    v54(&v56, 0, v22);

  }
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t *, uint64_t, void *);
  unint64_t v15;
  unint64_t v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemActionsController);
  if (v6)
  {
    v7 = qword_1ED8AA630;
    swift_retain();
    if (v7 != -1)
      swift_once();
    v8 = sub_1CCB637FC();
    sub_1CCA16C20(v8, (uint64_t)qword_1ED8AD7F8);
    swift_retain_n();
    v9 = sub_1CCB637D8();
    v10 = sub_1CCB63D48();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v29 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_retain();
      v13 = FMIPItemGroupAction.description.getter();
      v28 = a3;
      v14 = a2;
      v16 = v15;
      swift_release();
      sub_1CCA0CB60(v13, v16, &v29);
      sub_1CCB63E44();
      swift_release_n();
      a2 = v14;
      a3 = v28;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v9, v10, "FMIPManager: perform item group action %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v12, -1, -1);
      MEMORY[0x1D17B214C](v11, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v19 = swift_retain_n();
    v20 = (void *)MEMORY[0x1D17B1B7C](v19);
    type metadata accessor for FMIPRemoveItemGroupAction(0);
    v21 = swift_dynamicCastClass();
    if (v21)
    {
      v22 = v21;
      swift_retain();
      swift_retain();
      sub_1CCA8E34C(v22, v6, a2, a3);
      swift_release();
      swift_release();
    }
    else
    {
      v23 = sub_1CCB637D8();
      v24 = sub_1CCB63D48();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v25 = 0;
        _os_log_impl(&dword_1CC9BF000, v23, v24, "FMIPItemGroupAction: cannot map action to request", v25, 2u);
        MEMORY[0x1D17B214C](v25, -1, -1);
      }

      LOBYTE(v29) = 0;
      sub_1CCA8E87C();
      v26 = (void *)swift_allocError();
      *v27 = 6;
      sub_1CCA9EEA8((char *)&v29, 0, v26, a2);

    }
    objc_autoreleasePoolPop(v20);
    swift_release();
    swift_release_n();
  }
  else
  {
    LOBYTE(v29) = 0;
    sub_1CCA8E87C();
    v17 = (void *)swift_allocError();
    *v18 = 11;
    a2(&v29, 0, v17);

  }
}

uint64_t sub_1CCA9E8F4(char *a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t *, uint64_t, void *))
{
  char v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *a1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v8 = sub_1CCB637FC();
  sub_1CCA16C20(v8, (uint64_t)qword_1ED8AD7F8);
  v9 = a3;
  v10 = a3;
  v11 = sub_1CCB637D8();
  v12 = sub_1CCB63D48();
  if (os_log_type_enabled(v11, v12))
  {
    v21 = a2;
    v13 = swift_slowAlloc();
    v20 = v7;
    v14 = swift_slowAlloc();
    v22 = v14;
    *(_DWORD *)v13 = 136446466;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v15 = sub_1CCB63E20();
    sub_1CCA0CB60(v15, v16, &v22);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    *(_WORD *)(v13 + 12) = 2048;
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPManager: performed item action with error?: %{public}s status?: %ld", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    v17 = v14;
    v7 = v20;
    MEMORY[0x1D17B214C](v17, -1, -1);
    v18 = v13;
    a2 = v21;
    MEMORY[0x1D17B214C](v18, -1, -1);
  }
  else
  {

  }
  LOBYTE(v22) = v7;
  return a4(&v22, a2, a3);
}

uint64_t sub_1CCA9EEA8(char *a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t *, uint64_t, void *))
{
  char v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *a1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v8 = sub_1CCB637FC();
  sub_1CCA16C20(v8, (uint64_t)qword_1ED8AD7F8);
  v9 = a3;
  v10 = a3;
  v11 = sub_1CCB637D8();
  v12 = sub_1CCB63D48();
  if (os_log_type_enabled(v11, v12))
  {
    v21 = a2;
    v13 = swift_slowAlloc();
    v20 = v7;
    v14 = swift_slowAlloc();
    v22 = v14;
    *(_DWORD *)v13 = 136315394;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v15 = sub_1CCB63E20();
    sub_1CCA0CB60(v15, v16, &v22);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    *(_WORD *)(v13 + 12) = 2048;
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPManager: performed item group action with error?: %s status?: %ld", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    v17 = v14;
    v7 = v20;
    MEMORY[0x1D17B214C](v17, -1, -1);
    v18 = v13;
    a2 = v21;
    MEMORY[0x1D17B214C](v18, -1, -1);
  }
  else
  {

  }
  LOBYTE(v22) = v7;
  return a4(&v22, a2, a3);
}

uint64_t FMIPManager.perform(action:completion:)(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD), uint64_t a3)
{
  return sub_1CCA28498(a1, a2, a3);
}

uint64_t FMIPManager.perform(action:completion:)(uint64_t a1, uint64_t (*a2)(uint64_t *, _QWORD), uint64_t a3)
{
  return sub_1CCA281F8(a1, a2, a3);
}

void FMIPManager.perform(action:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CCA2A3FC(a1, a2, a3);
}

uint64_t FMIPManager.perform(action:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CCA2A95C(a1, a2, a3);
}

Swift::Void __swiftcall FMIPManager.updateLastLocationStatus(enabled:)(Swift::Bool enabled)
{
  _BOOL4 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint8_t *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _BOOL8 v24;
  id v25;
  void *v26;
  uint64_t v27;
  char *v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t aBlock;
  unint64_t v32;
  void (*v33)(uint64_t, void *);
  void *v34;
  void (*v35)(void *);
  uint64_t v36;

  v1 = enabled;
  v2 = sub_1CCB635B0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD7F8);
  v7 = sub_1CCB637D8();
  v8 = sub_1CCB63D48();
  v9 = os_log_type_enabled(v7, v8);
  v29 = v1;
  if (v9)
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v28 = v5;
    *(_DWORD *)v10 = 136315138;
    v30 = v11;
    aBlock = 0;
    v32 = 0xE000000000000000;
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
    aBlock = sub_1CCA0CB60(aBlock, v32, &v30);
    v5 = v28;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v7, v8, "FMIPManager: updateLastLocationStatus enabled?: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v11, -1, -1);
    MEMORY[0x1D17B214C](v10, -1, -1);
  }

  v12 = (void *)objc_opt_self();
  v13 = (void *)sub_1CCB63964();
  v14 = (void *)sub_1CCB63964();
  v15 = (char *)objc_msgSend(v12, sel_integerForKey_inDomain_, v13, v14);

  v16 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
  }
  else
  {
    sub_1CCB635A4();
    v17 = (void *)sub_1CCB63964();
    v18 = (void *)sub_1CCB63964();
    objc_msgSend(v12, sel_setInteger_forKey_inDomain_, v16, v17, v18);

    v19 = (void *)sub_1CCB63538();
    v20 = (void *)sub_1CCB63964();
    v21 = (void *)sub_1CCB63964();
    objc_msgSend(v12, sel_setDate_forKey_inDomain_, v19, v20, v21);

    v22 = (void *)sub_1CCB63964();
    v23 = (void *)sub_1CCB63964();
    v24 = v29;
    objc_msgSend(v12, sel_setBool_forKey_inDomain_, v24, v22, v23);

    v25 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    v35 = sub_1CCA9F5BC;
    v36 = 0;
    aBlock = MEMORY[0x1E0C809B0];
    v32 = 1107296256;
    v33 = sub_1CCA1F54C;
    v34 = &unk_1E88F76B0;
    v26 = _Block_copy(&aBlock);
    objc_msgSend(v25, sel_setLowBatteryLocateEnabled_withCompletion_, v24, v26);
    _Block_release(v26);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

void sub_1CCA9F5BC(void *a1)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *oslog;
  uint64_t v12;

  if (a1)
  {
    v2 = a1;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v3 = sub_1CCB637FC();
    sub_1CCA16C20(v3, (uint64_t)qword_1ED8AD7F8);
    v4 = a1;
    v5 = a1;
    oslog = sub_1CCB637D8();
    v6 = sub_1CCB63D48();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v12 = v8;
      *(_DWORD *)v7 = 136315138;
      swift_getErrorValue();
      v9 = sub_1CCB64300();
      sub_1CCA0CB60(v9, v10, &v12);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, oslog, v6, "FMIPManager: updateLastLocationStatus error setting low battery state in FMIP: %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v8, -1, -1);
      MEMORY[0x1D17B214C](v7, -1, -1);

    }
    else
    {

    }
  }
}

void FMIPManager.isCompanion(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[6];

  v5 = *(void **)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_ownerSession);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v8[4] = sub_1CCAA8BCC;
  v8[5] = v6;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = sub_1CCA1F54C;
  v8[3] = &unk_1E88F7700;
  v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_activeCompanionWithCompletion_, v7);
  _Block_release(v7);
}

void FMIPManager.handle(url:completion:)(uint64_t a1, void (*a2)(char *, void *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  void *v13;

  v4 = v3;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v8 = sub_1CCB637FC();
  sub_1CCA16C20(v8, (uint64_t)qword_1ED8AD7F8);
  v9 = sub_1CCB637D8();
  v10 = sub_1CCB63D48();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1CC9BF000, v9, v10, "FMIPManager: handle URL", v11, 2u);
    MEMORY[0x1D17B214C](v11, -1, -1);
  }

  v12 = *(_QWORD **)(v4 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_urlHandler);
  v13 = (void *)MEMORY[0x1D17B1B7C]();
  sub_1CCA9107C(a1, a2, a3, v12);
  objc_autoreleasePoolPop(v13);
}

uint64_t sub_1CCA9F998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t (*v45)();
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t aBlock;
  uint64_t v101;
  uint64_t (*v102)(uint64_t);
  void *v103;
  void *v104;
  uint64_t v105;

  v93 = sub_1CCB63820();
  v92 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93);
  v91 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_1CCB63868();
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90);
  v88 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1ED8A7EE0);
  v96 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v79 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1ED8A7EE8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (unint64_t *)((char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v13 = (unint64_t *)((char *)&v69 - v12);
  v14 = type metadata accessor for FMIPDevice();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = MEMORY[0x1E0C80A78](v14);
  v86 = (uint64_t)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v97 = a1;
  v98 = (uint64_t *)((char *)&v69 - v18);
  v77 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager;
  v19 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
  result = swift_beginAccess();
  v71 = *(_QWORD *)(a2 + 16);
  if (!v71)
    return result;
  v21 = *(_QWORD *)(v19 + 80);
  v22 = *(_QWORD *)(v21 + 16);
  v84 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue;
  v23 = *(unsigned __int8 *)(v15 + 80);
  v24 = (v23 + 32) & ~v23;
  v70 = a2 + v24;
  v87 = *(_QWORD *)(v15 + 72);
  v76 = v24;
  v78 = v21 + v24;
  v83 = (v23 + 24) & ~v23;
  v82 = v83 + v16;
  v81 = v23 | 7;
  swift_bridgeObjectRetain();
  v69 = a2;
  swift_bridgeObjectRetain();
  v25 = 0;
  v26 = type metadata accessor for FMIPDevice;
  v85 = v11;
  v27 = v98;
  v80 = v21;
  v94 = v6;
  v95 = v22;
  while (2)
  {
    v72 = v25 + 1;
    sub_1CCA0BEEC(v70 + v87 * v25, (uint64_t)v27, (uint64_t (*)(_QWORD))v26);
    result = swift_bridgeObjectRetain();
    v28 = 0;
    while (1)
    {
      if (v28 == v95)
      {
        v38 = 1;
        v28 = v95;
        v39 = v94;
      }
      else
      {
        v39 = v94;
        if (v28 >= *(_QWORD *)(v80 + 16))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }
        v40 = (uint64_t)&v79[*(int *)(v94 + 48)];
        sub_1CCA0BEEC(v78 + v28 * v87, v40, (uint64_t (*)(_QWORD))v26);
        v41 = (uint64_t)v11 + *(int *)(v39 + 48);
        *v11 = v28;
        sub_1CC9FED60(v40, v41, (uint64_t (*)(_QWORD))v26);
        v38 = 0;
        ++v28;
      }
      v42 = v96;
      (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v96 + 56))(v11, v38, 1, v39);
      sub_1CC9C3EC0((uint64_t)v11, (uint64_t)v13, &qword_1ED8A7EE8);
      if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v42 + 48))(v13, 1, v39) == 1)
        break;
      v43 = *v13;
      v44 = *(int *)(v39 + 48);
      v45 = v26;
      v46 = (char *)v13 + v44;
      v48 = *v98;
      v47 = v98[1];
      v50 = *(unint64_t *)((char *)v13 + v44);
      v49 = *(unint64_t *)((char *)v13 + v44 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v51 = (uint64_t)v46;
      v26 = v45;
      sub_1CCA0BF30(v51, (uint64_t (*)(_QWORD))v45);
      if (v48 == v50 && v47 == v49)
      {
        swift_bridgeObjectRelease_n();
        v54 = v98;
        if ((v43 & 0x8000000000000000) != 0)
          goto LABEL_6;
LABEL_20:
        v55 = *(_QWORD *)(v97 + v77);
        swift_beginAccess();
        if (v43 < *(_QWORD *)(*(_QWORD *)(v55 + 80) + 16))
        {
          swift_beginAccess();
          v56 = *(_QWORD *)(v55 + 80);
          swift_retain();
          result = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v55 + 80) = v56;
          if ((result & 1) == 0)
          {
            result = sub_1CCAB6EFC(v56);
            v56 = result;
            *(_QWORD *)(v55 + 80) = result;
          }
          if (v43 >= *(_QWORD *)(v56 + 16))
            goto LABEL_34;
          sub_1CCAAAC80((uint64_t)v54, v56 + v76 + v43 * v87);
          v57 = *(_QWORD *)(v55 + 80);
          swift_endAccess();
          if (*(_BYTE *)(v55 + 24) == 1 && *(_QWORD *)(v55 + 328))
          {
            v58 = qword_1ED8AA630;
            v59 = *(_QWORD *)(v55 + 328);
            swift_retain();
            swift_bridgeObjectRetain();
            if (v58 != -1)
              swift_once();
            v60 = sub_1CCB637FC();
            sub_1CCA16C20(v60, (uint64_t)qword_1ED8AD7F8);
            v61 = sub_1CCB637D8();
            v62 = sub_1CCB63D48();
            if (os_log_type_enabled(v61, v62))
            {
              v63 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v63 = 0;
              _os_log_impl(&dword_1CC9BF000, v61, v62, "FMDiskIO: save to disk", v63, 2u);
              MEMORY[0x1D17B214C](v63, -1, -1);
            }

            v75 = *(_QWORD *)(v59 + 16);
            v64 = swift_allocObject();
            *(_QWORD *)(v64 + 16) = v59;
            *(_QWORD *)(v64 + 24) = v57;
            v104 = sub_1CCAABA10;
            v105 = v64;
            aBlock = MEMORY[0x1E0C809B0];
            v101 = 1107296256;
            v102 = sub_1CCA00C38;
            v103 = &unk_1E88F84F8;
            v74 = _Block_copy(&aBlock);
            swift_retain();
            swift_bridgeObjectRetain();
            v65 = v88;
            sub_1CCB63844();
            v99 = MEMORY[0x1E0DEE9D8];
            sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
            sub_1CCA14E90(&qword_1ED8AA338);
            sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
            v73 = v57;
            v66 = v91;
            v67 = v93;
            sub_1CCB63E98();
            v68 = v74;
            MEMORY[0x1D17B1318](0, v65, v66, v74);
            _Block_release(v68);
            (*(void (**)(char *, uint64_t))(v92 + 8))(v66, v67);
            (*(void (**)(char *, uint64_t))(v89 + 8))(v65, v90);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            v54 = v98;
            v26 = v45;
          }
          else
          {
            swift_release();
          }
        }
LABEL_6:
        v29 = v97;
        v30 = v86;
        sub_1CCA0BEEC((uint64_t)v54, v86, (uint64_t (*)(_QWORD))v26);
        v31 = swift_allocObject();
        *(_QWORD *)(v31 + 16) = v29;
        sub_1CC9FED60(v30, v31 + v83, (uint64_t (*)(_QWORD))v26);
        v104 = sub_1CCAAAC28;
        v105 = v31;
        aBlock = MEMORY[0x1E0C809B0];
        v101 = 1107296256;
        v102 = sub_1CCA00C38;
        v103 = &unk_1E88F84A8;
        v32 = _Block_copy(&aBlock);
        swift_retain();
        v33 = v88;
        sub_1CCB63844();
        v99 = MEMORY[0x1E0DEE9D8];
        sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
        sub_1CCA14E90(&qword_1ED8AA338);
        sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
        v34 = v91;
        v35 = v93;
        sub_1CCB63E98();
        MEMORY[0x1D17B1318](0, v33, v34, v32);
        _Block_release(v32);
        v36 = v35;
        v26 = v45;
        (*(void (**)(char *, uint64_t))(v92 + 8))(v34, v36);
        v37 = v33;
        v11 = v85;
        (*(void (**)(char *, uint64_t))(v89 + 8))(v37, v90);
        result = swift_release();
      }
      else
      {
        v53 = sub_1CCB642A0();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v53 & 1) != 0)
        {
          v54 = v98;
          if ((v43 & 0x8000000000000000) != 0)
            goto LABEL_6;
          goto LABEL_20;
        }
      }
    }
    swift_bridgeObjectRelease();
    v27 = v98;
    sub_1CCA0BF30((uint64_t)v98, (uint64_t (*)(_QWORD))v26);
    v25 = v72;
    if (v72 != v71)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCAA0330(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t ObjectType;

  v4 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v4);
  if (result)
  {
    v6 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 40))(a1, a2, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCAA03BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t (*v44)();
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v52;
  uint64_t v53;
  unint64_t v54;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  const void *v70;
  _QWORD v71[2];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t aBlock;
  uint64_t v104;
  uint64_t (*v105)(uint64_t);
  void *v106;
  void *v107;
  uint64_t v108;

  v96 = sub_1CCB63820();
  v95 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96);
  v94 = (char *)v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_1CCB63868();
  v92 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93);
  v91 = (char *)v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1ED8A7EE0);
  v99 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v82 = (char *)v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1ED8A7EE8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (_QWORD *)((char *)v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v13 = (_QWORD *)((char *)v71 - v12);
  v78 = type metadata accessor for FMIPDevice();
  v14 = *(_QWORD *)(v78 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x1E0C80A78](v78);
  v89 = (uint64_t)v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (_QWORD *)((char *)v71 - v17);
  v100 = a1;
  v80 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager;
  v19 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
  result = swift_beginAccess();
  v73 = *(_QWORD *)(a2 + 16);
  if (!v73)
    return result;
  v21 = *(_QWORD *)(v19 + 80);
  v22 = *(_QWORD *)(v21 + 16);
  v87 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue;
  v23 = *(unsigned __int8 *)(v14 + 80);
  v24 = (v23 + 32) & ~v23;
  v72 = a2 + v24;
  v90 = *(_QWORD *)(v14 + 72);
  v79 = v24;
  v81 = v21 + v24;
  v86 = (v23 + 24) & ~v23;
  v85 = v86 + v15;
  v84 = v23 | 7;
  swift_bridgeObjectRetain();
  v71[1] = a2;
  swift_bridgeObjectRetain();
  v25 = 0;
  v26 = type metadata accessor for FMIPDevice;
  v88 = v11;
  v101 = v18;
  v83 = v21;
  v97 = v6;
  v98 = v22;
  while (2)
  {
    v74 = v25 + 1;
    sub_1CCA0BEEC(v72 + v90 * v25, (uint64_t)v18, (uint64_t (*)(_QWORD))v26);
    swift_bridgeObjectRetain();
    v27 = 0;
    while (1)
    {
      if (v27 == v98)
      {
        v37 = 1;
        v27 = v98;
        v38 = v97;
      }
      else
      {
        v38 = v97;
        if (v27 >= *(_QWORD *)(v83 + 16))
        {
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          result = sub_1CCB640C0();
          __break(1u);
          return result;
        }
        v39 = (uint64_t)&v82[*(int *)(v97 + 48)];
        sub_1CCA0BEEC(v81 + v27 * v90, v39, (uint64_t (*)(_QWORD))v26);
        v40 = (uint64_t)v11 + *(int *)(v38 + 48);
        *v11 = v27;
        sub_1CC9FED60(v39, v40, (uint64_t (*)(_QWORD))v26);
        v37 = 0;
        ++v27;
      }
      v41 = v99;
      (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v99 + 56))(v11, v37, 1, v38);
      sub_1CC9C3EC0((uint64_t)v11, (uint64_t)v13, &qword_1ED8A7EE8);
      if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v41 + 48))(v13, 1, v38) == 1)
        break;
      v42 = *v13;
      v43 = *(int *)(v38 + 48);
      v44 = v26;
      v45 = (char *)v13 + v43;
      v47 = *v101;
      v46 = v101[1];
      v49 = *(unint64_t *)((char *)v13 + v43);
      v48 = *(unint64_t *)((char *)v13 + v43 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50 = (uint64_t)v45;
      v26 = v44;
      sub_1CCA0BF30(v50, (uint64_t (*)(_QWORD))v44);
      if (v47 == v49 && v46 == v48)
      {
        swift_bridgeObjectRelease_n();
        if ((v42 & 0x8000000000000000) != 0)
          goto LABEL_6;
LABEL_20:
        v53 = *(_QWORD *)(v100 + v80);
        swift_beginAccess();
        if (v42 < *(_QWORD *)(*(_QWORD *)(v53 + 80) + 16))
        {
          swift_beginAccess();
          v54 = *(_QWORD *)(v53 + 80);
          swift_retain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v53 + 80) = v54;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v54 = sub_1CCAB6EFC(v54);
            *(_QWORD *)(v53 + 80) = v54;
          }
          v56 = v90;
          v57 = *(_QWORD *)(v54 + 16);
          if (v42 >= v57)
            goto LABEL_41;
          v58 = v57 - 1;
          v59 = v54 + v79 + v42 * v90;
          sub_1CCA0BF30(v59, (uint64_t (*)(_QWORD))v44);
          if ((uint64_t)(v58 - v42) < 0)
            goto LABEL_42;
          if (v56 > 0 || v59 >= v59 + v56 + (v58 - v42) * v56)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v56)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          *(_QWORD *)(v54 + 16) = v58;
          *(_QWORD *)(v53 + 80) = v54;
          swift_endAccess();
          if ((*(_BYTE *)(v53 + 24) & 1) == 0)
            goto LABEL_5;
          v60 = *(_QWORD *)(v53 + 328);
          if (v60)
          {
            v61 = qword_1ED8AA630;
            swift_retain();
            swift_bridgeObjectRetain();
            if (v61 != -1)
              swift_once();
            v62 = sub_1CCB637FC();
            sub_1CCA16C20(v62, (uint64_t)qword_1ED8AD7F8);
            v63 = sub_1CCB637D8();
            v64 = sub_1CCB63D48();
            if (os_log_type_enabled(v63, v64))
            {
              v65 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v65 = 0;
              _os_log_impl(&dword_1CC9BF000, v63, v64, "FMDiskIO: save to disk", v65, 2u);
              MEMORY[0x1D17B214C](v65, -1, -1);
            }

            v77 = *(_QWORD *)(v60 + 16);
            v66 = swift_allocObject();
            *(_QWORD *)(v66 + 16) = v60;
            *(_QWORD *)(v66 + 24) = v54;
            v107 = sub_1CCA207B8;
            v108 = v66;
            aBlock = MEMORY[0x1E0C809B0];
            v104 = 1107296256;
            v105 = sub_1CCA00C38;
            v106 = &unk_1E88F8408;
            v76 = _Block_copy(&aBlock);
            swift_retain();
            swift_bridgeObjectRetain();
            v67 = v91;
            sub_1CCB63844();
            v102 = MEMORY[0x1E0DEE9D8];
            sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
            sub_1CCA14E90(&qword_1ED8AA338);
            sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
            v68 = v94;
            v75 = v60;
            v69 = v96;
            sub_1CCB63E98();
            v70 = v76;
            MEMORY[0x1D17B1318](0, v67, v68, v76);
            _Block_release(v70);
            (*(void (**)(char *, uint64_t))(v95 + 8))(v68, v69);
            (*(void (**)(char *, uint64_t))(v92 + 8))(v67, v93);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
LABEL_5:
            swift_release();
            v26 = v44;
            goto LABEL_6;
          }
          v26 = v44;
          swift_release();
        }
LABEL_6:
        v28 = v100;
        v29 = v89;
        sub_1CCA0BEEC((uint64_t)v101, v89, (uint64_t (*)(_QWORD))v26);
        v30 = swift_allocObject();
        *(_QWORD *)(v30 + 16) = v28;
        sub_1CC9FED60(v29, v30 + v86, (uint64_t (*)(_QWORD))v26);
        v107 = sub_1CCAAA6AC;
        v108 = v30;
        aBlock = MEMORY[0x1E0C809B0];
        v104 = 1107296256;
        v105 = sub_1CCA00C38;
        v106 = &unk_1E88F83B8;
        v31 = _Block_copy(&aBlock);
        swift_retain();
        v32 = v91;
        sub_1CCB63844();
        v102 = MEMORY[0x1E0DEE9D8];
        sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
        sub_1CCA14E90(&qword_1ED8AA338);
        sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
        v33 = v94;
        v34 = v96;
        sub_1CCB63E98();
        MEMORY[0x1D17B1318](0, v32, v33, v31);
        _Block_release(v31);
        v35 = v33;
        v26 = v44;
        (*(void (**)(char *, uint64_t))(v95 + 8))(v35, v34);
        v36 = v32;
        v11 = v88;
        (*(void (**)(char *, uint64_t))(v92 + 8))(v36, v93);
        swift_release();
      }
      else
      {
        v52 = sub_1CCB642A0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v52 & 1) != 0)
        {
          if ((v42 & 0x8000000000000000) != 0)
            goto LABEL_6;
          goto LABEL_20;
        }
      }
    }
    swift_bridgeObjectRelease();
    v18 = v101;
    sub_1CCA0BF30((uint64_t)v101, (uint64_t (*)(_QWORD))v26);
    v25 = v74;
    if (v74 != v73)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCAA0DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t ObjectType;

  v4 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v4);
  if (result)
  {
    v6 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, a2, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCAA0E80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  const void *v76;
  void *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t result;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  unint64_t *v91;
  uint64_t *p_aBlock;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t aBlock;
  uint64_t v120;
  uint64_t (*v121)(uint64_t);
  void *v122;
  void *v123;
  uint64_t v124;

  v4 = sub_1CCA14E90(&qword_1ED8A8DE8);
  v115 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v96 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_1CCB63820();
  v111 = *(_QWORD *)(v112 - 8);
  MEMORY[0x1E0C80A78](v112);
  v110 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_1CCB63868();
  v108 = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109);
  v107 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DF0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (unint64_t *)((char *)&v82 - v12);
  v87 = type metadata accessor for FMIPItem();
  v14 = *(_QWORD *)(v87 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x1E0C80A78](v87);
  v103 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v104 = (uint64_t)&v82 - v18;
  MEMORY[0x1E0C80A78](v17);
  v117 = (uint64_t)&v82 - v19;
  v94 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager;
  v20 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
  swift_beginAccess();
  v84 = *(_QWORD *)(a2 + 16);
  if (v84)
  {
    v21 = *(_QWORD *)(v20 + 280);
    v22 = *(_QWORD *)(v21 + 16);
    v101 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue;
    v23 = *(unsigned __int8 *)(v14 + 80);
    v24 = (v23 + 32) & ~v23;
    v83 = a2 + v24;
    v105 = *(_QWORD *)(v14 + 72);
    v88 = v24;
    v95 = v21 + v24;
    p_aBlock = &aBlock;
    v100 = (v23 + 24) & ~v23;
    v99 = v100 + v15;
    v98 = v23 | 7;
    swift_bridgeObjectRetain();
    v82 = a2;
    swift_bridgeObjectRetain();
    v25 = 0;
    *(_QWORD *)&v26 = 136315394;
    v90 = v26;
    v89 = MEMORY[0x1E0DEE9B8] + 8;
    v93 = a1;
    v27 = v117;
    v102 = v4;
    v114 = (unint64_t *)v11;
    v97 = v21;
    v113 = v22;
    v91 = v13;
LABEL_4:
    v85 = v25 + 1;
    sub_1CCA0BEEC(v83 + v105 * v25, v27, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    swift_bridgeObjectRetain();
    v116 = 0;
    while (1)
    {
      v36 = v116;
      if (v116 == v113)
      {
        v37 = 1;
        v38 = v113;
        v39 = v114;
      }
      else
      {
        v39 = v114;
        if (v116 >= *(_QWORD *)(v97 + 16))
        {
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          result = sub_1CCB640C0();
          __break(1u);
          return result;
        }
        v38 = v116 + 1;
        v40 = (uint64_t)&v96[*(int *)(v4 + 48)];
        sub_1CCA0BEEC(v95 + v116 * v105, v40, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v41 = (uint64_t)v39 + *(int *)(v4 + 48);
        *v39 = v36;
        sub_1CC9FED60(v40, v41, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v37 = 0;
      }
      v42 = v115;
      (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v115 + 56))(v39, v37, 1, v4);
      sub_1CC9C3EC0((uint64_t)v39, (uint64_t)v13, (uint64_t *)&unk_1ED8A8DF0);
      if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v42 + 48))(v13, 1, v4) == 1)
      {
        swift_bridgeObjectRelease();
        v27 = v117;
        sub_1CCA0BF30(v117, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v25 = v85;
        if (v85 != v84)
          goto LABEL_4;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_42;
      }
      v116 = v38;
      v43 = *v13;
      v44 = (uint64_t)v13 + *(int *)(v4 + 48);
      v46 = *(_QWORD *)(v117 + 352);
      v45 = *(_QWORD *)(v117 + 360);
      v48 = *(_QWORD *)(v44 + 352);
      v47 = *(_QWORD *)(v44 + 360);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CCA0BF30(v44, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if (v46 == v48 && v45 == v47)
        break;
      v50 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v50 & 1) != 0)
      {
LABEL_20:
        if (qword_1ED8AA630 != -1)
          swift_once();
        v51 = sub_1CCB637FC();
        v52 = sub_1CCA16C20(v51, (uint64_t)qword_1ED8AD7F8);
        v28 = v117;
        v53 = v104;
        sub_1CCA0BEEC(v117, v104, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v106 = v52;
        v54 = sub_1CCB637D8();
        v55 = sub_1CCB63D48();
        if (os_log_type_enabled(v54, v55))
        {
          v56 = swift_slowAlloc();
          v57 = swift_slowAlloc();
          aBlock = v57;
          *(_DWORD *)v56 = v90;
          v58 = FMIPItem.debugDescription.getter();
          v118 = sub_1CCA0CB60(v58, v59, &aBlock);
          a1 = v93;
          sub_1CCB63E44();
          swift_bridgeObjectRelease();
          sub_1CCA0BF30(v53, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          *(_WORD *)(v56 + 12) = 2048;
          v118 = v43;
          sub_1CCB63E44();
          _os_log_impl(&dword_1CC9BF000, v54, v55, "FMIPManager: removeItems item removed %s at index %ld", (uint8_t *)v56, 0x16u);
          swift_arrayDestroy();
          v60 = v57;
          v13 = v91;
          MEMORY[0x1D17B214C](v60, -1, -1);
          v28 = v117;
          MEMORY[0x1D17B214C](v56, -1, -1);

          if ((v43 & 0x8000000000000000) != 0)
            goto LABEL_7;
        }
        else
        {
          sub_1CCA0BF30(v53, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);

          if ((v43 & 0x8000000000000000) != 0)
            goto LABEL_7;
        }
        v61 = *(_QWORD *)(a1 + v94);
        swift_beginAccess();
        if (v43 < *(_QWORD *)(*(_QWORD *)(v61 + 80) + 16))
        {
          swift_beginAccess();
          v62 = *(_QWORD *)(v61 + 280);
          swift_retain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v61 + 280) = v62;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v62 = sub_1CCAB6F10(v62);
            *(_QWORD *)(v61 + 280) = v62;
          }
          v64 = *(_QWORD *)(v62 + 16);
          if (v43 >= v64)
            goto LABEL_44;
          v65 = v64 - 1;
          v66 = v105;
          v67 = v62 + v88 + v43 * v105;
          sub_1CCA0BF30(v67, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          if ((uint64_t)(v65 - v43) < 0)
            goto LABEL_45;
          if (v66 > 0 || v67 >= v67 + v66 + (v65 - v43) * v66)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v66)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          *(_QWORD *)(v62 + 16) = v65;
          *(_QWORD *)(v61 + 280) = v62;
          swift_endAccess();
          if ((*(_BYTE *)(v61 + 24) & 1) != 0 && (v68 = *(_QWORD *)(v61 + 312)) != 0)
          {
            swift_retain();
            swift_bridgeObjectRetain();
            v69 = sub_1CCB637D8();
            v70 = sub_1CCB63D48();
            if (os_log_type_enabled(v69, v70))
            {
              v71 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v71 = 0;
              _os_log_impl(&dword_1CC9BF000, v69, v70, "FMDiskIO: save to disk", v71, 2u);
              MEMORY[0x1D17B214C](v71, -1, -1);
            }

            v106 = *(_QWORD *)(v68 + 16);
            v72 = swift_allocObject();
            *(_QWORD *)(v72 + 16) = v68;
            *(_QWORD *)(v72 + 24) = v62;
            v123 = sub_1CCAAA61C;
            v124 = v72;
            aBlock = MEMORY[0x1E0C809B0];
            v120 = 1107296256;
            v121 = sub_1CCA00C38;
            v122 = &unk_1E88F82C8;
            v86 = _Block_copy(&aBlock);
            swift_retain();
            swift_bridgeObjectRetain();
            v73 = v107;
            sub_1CCB63844();
            v118 = MEMORY[0x1E0DEE9D8];
            sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
            sub_1CCA14E90(&qword_1ED8AA338);
            sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
            v74 = v110;
            v75 = v112;
            sub_1CCB63E98();
            v76 = v86;
            MEMORY[0x1D17B1318](0, v73, v74, v86);
            _Block_release(v76);
            (*(void (**)(char *, uint64_t))(v111 + 8))(v74, v75);
            (*(void (**)(char *, uint64_t))(v108 + 8))(v73, v109);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            a1 = v93;
          }
          else
          {
            swift_release();
          }
          v28 = v117;
        }
LABEL_7:
        v29 = v28;
        v30 = v103;
        sub_1CCA0BEEC(v29, v103, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v31 = swift_allocObject();
        *(_QWORD *)(v31 + 16) = a1;
        sub_1CC9FED60(v30, v31 + v100, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v123 = sub_1CCAAA5F4;
        v124 = v31;
        aBlock = MEMORY[0x1E0C809B0];
        v120 = 1107296256;
        v121 = sub_1CCA00C38;
        v122 = &unk_1E88F8278;
        v32 = _Block_copy(&aBlock);
        swift_retain();
        v33 = v107;
        sub_1CCB63844();
        v118 = MEMORY[0x1E0DEE9D8];
        sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
        sub_1CCA14E90(&qword_1ED8AA338);
        sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
        v34 = v110;
        v35 = v112;
        sub_1CCB63E98();
        MEMORY[0x1D17B1318](0, v33, v34, v32);
        _Block_release(v32);
        (*(void (**)(char *, uint64_t))(v111 + 8))(v34, v35);
        (*(void (**)(char *, uint64_t))(v108 + 8))(v33, v109);
        swift_release();
        v4 = v102;
      }
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_20;
  }
LABEL_42:
  v123 = sub_1CCAAA2A8;
  v124 = a1;
  aBlock = MEMORY[0x1E0C809B0];
  v120 = 1107296256;
  v121 = sub_1CCA00C38;
  v122 = &unk_1E88F8228;
  v77 = _Block_copy(&aBlock);
  swift_retain();
  v78 = v107;
  sub_1CCB63844();
  v118 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  v79 = v110;
  v80 = v112;
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v78, v79, v77);
  _Block_release(v77);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v79, v80);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v78, v109);
  return swift_release();
}

uint64_t sub_1CCAA1BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t ObjectType;

  v4 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v4);
  if (result)
  {
    v6 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 128))(a1, a2, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCAA1C4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v6;

  sub_1CCA14E90((uint64_t *)&unk_1EF9E2A60);
  sub_1CCB63D9C();
  v2 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  if (MEMORY[0x1D17B2218](v2))
  {
    v3 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 112))(a1, v6, ObjectType, v3);
    swift_unknownObjectRelease();
  }
  *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemCounts) = v6;
  swift_bridgeObjectRelease();
  return sub_1CCA982F0();
}

uint64_t FMIPManager.debugDescription.getter()
{
  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CC9E6BA4();
  sub_1CCB63A9C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  return 60;
}

uint64_t FMIPManager.hash(into:)()
{
  sub_1CCB63604();
  sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  return sub_1CCB63940();
}

uint64_t static FMIPManager.== infix(_:_:)()
{
  return sub_1CCB635E0();
}

uint64_t sub_1CCAA1E48()
{
  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CC9E6BA4();
  sub_1CCB63A9C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  return 60;
}

uint64_t sub_1CCAA1EF0()
{
  return sub_1CCB635E0();
}

void sub_1CCAA1F0C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  NSObject *oslog;

  if (a2)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v3 = sub_1CCB637FC();
    sub_1CCA16C20(v3, (uint64_t)qword_1ED8AD7F8);
    oslog = sub_1CCB637D8();
    v4 = sub_1CCB63D48();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1CC9BF000, oslog, v4, "FMIPManager: error getting status of lowBatteryLocateEnabled", v5, 2u);
      MEMORY[0x1D17B214C](v5, -1, -1);
    }

  }
  else if ((a1 & 1) == 0)
  {
    v7 = a3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
    swift_beginAccess();
    if (MEMORY[0x1D17B2218](v7))
    {
      v8 = *(_QWORD *)(v7 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 88))(a3, ObjectType, v8);
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_1CCAA2054(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t ObjectType;

  v4 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v4);
  if (result)
  {
    v6 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 64))(a1, a2, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCAA20E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t ObjectType;
  __int128 v8;
  __int128 v9;
  _OWORD v10[5];
  uint64_t v11;

  v4 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v4);
  if (result)
  {
    v6 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    v8 = *(_OWORD *)(a2 + 48);
    v10[2] = *(_OWORD *)(a2 + 32);
    v10[3] = v8;
    v10[4] = *(_OWORD *)(a2 + 64);
    v11 = *(_QWORD *)(a2 + 80);
    v9 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v9;
    (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(v6 + 56))(a1, v10, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCAA218C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  BOOL v10;
  uint64_t result;
  uint64_t v12;
  void *v13;
  _QWORD v14[2];
  _QWORD aBlock[6];

  v2 = sub_1CCB63820();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63868();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  v10 = sub_1CCAAD5F8();
  result = swift_release();
  if (v10)
  {
    v14[0] = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue);
    aBlock[4] = sub_1CCA241A4;
    aBlock[5] = a1;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA00C38;
    aBlock[3] = &unk_1E88F7940;
    v12 = v3;
    v13 = _Block_copy(aBlock);
    swift_retain();
    sub_1CCB63844();
    v14[1] = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v9, v5, v13);
    _Block_release(v13);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return swift_release();
  }
  return result;
}

uint64_t sub_1CCAA2394(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v4 = sub_1CCB63820();
  v19 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63868();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
  v12 = *(_QWORD *)(v11 + 304);
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = sub_1CCB0056C(a2, v12);
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    swift_beginAccess();
    v15 = swift_bridgeObjectRetain();
    v16 = sub_1CCAB8E60(v15, a2);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v11 + 80) = v16;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v11 + 304) = a2;
    swift_bridgeObjectRetain();
    swift_release();
    swift_bridgeObjectRelease();
    aBlock[4] = sub_1CCA241A4;
    aBlock[5] = a1;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA00C38;
    aBlock[3] = &unk_1E88F7CB0;
    v17 = _Block_copy(aBlock);
    swift_retain();
    sub_1CCB63844();
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v10, v6, v17);
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return swift_release();
}

uint64_t sub_1CCAA262C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;

  v2 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v2);
  if (result)
  {
    v4 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    sub_1CCA14E90((uint64_t *)&unk_1EF9E2A60);
    sub_1CCB63D9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 112))(a1, v6, ObjectType, v4);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCAA275C(unsigned __int8 *a1, uint64_t a2)
{
  return sub_1CCAA37C8(a1, a2, "FMIPManager: appending realtime location %{private}s", (uint64_t)&unk_1E88F7B58, (uint64_t)sub_1CCAAA0A8, (uint64_t)&unk_1E88F7B70);
}

uint64_t sub_1CCAA2780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47[4];

  v43 = a1;
  v9 = type metadata accessor for FMIPUnknownItem();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v42 = (uint64_t)&v39 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v39 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v39 - v19;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v45 = (unint64_t *)(a4 + 16);
  v21 = sub_1CCB637FC();
  sub_1CCA16C20(v21, (uint64_t)qword_1ED8AD7F8);
  v44 = a2;
  sub_1CCA0BEEC(a2, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  swift_bridgeObjectRetain_n();
  v22 = sub_1CCB637D8();
  v23 = sub_1CCB63D48();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc();
    v25 = swift_slowAlloc();
    v40 = v10;
    v26 = v25;
    v47[0] = v25;
    *(_DWORD *)v24 = 136315394;
    v39 = v13;
    sub_1CCB63604();
    v41 = a5;
    sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v27 = sub_1CCB64240();
    v46 = sub_1CCA0CB60(v27, v28, v47);
    v13 = v39;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    *(_WORD *)(v24 + 12) = 2048;
    v29 = *(_QWORD *)(a3 + 16);
    swift_bridgeObjectRelease();
    v46 = v29;
    a5 = v41;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v22, v23, "FMIPManager: unknownItems shifting completed for item %s, locations: %ld", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    v30 = v26;
    v10 = v40;
    MEMORY[0x1D17B214C](v30, -1, -1);
    MEMORY[0x1D17B214C](v24, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);

    swift_bridgeObjectRelease();
  }
  v31 = sub_1CCA97308(v43);
  v32 = v42;
  sub_1CCA0BEEC(v44, v42, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  FMIPUnknownItem.init(unknownItem:locations:)(v32, v31, (uint64_t)v18);
  sub_1CCA0BEEC((uint64_t)v18, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v33 = v45;
  swift_beginAccess();
  v34 = *v33;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v33 = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = sub_1CCAC9F4C(0, *(_QWORD *)(v34 + 16) + 1, 1, v34);
    *v33 = v34;
  }
  v37 = *(_QWORD *)(v34 + 16);
  v36 = *(_QWORD *)(v34 + 24);
  if (v37 >= v36 >> 1)
  {
    v34 = sub_1CCAC9F4C(v36 > 1, v37 + 1, 1, v34);
    *v33 = v34;
  }
  *(_QWORD *)(v34 + 16) = v37 + 1;
  sub_1CC9FED60((uint64_t)v13, v34+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v37, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  swift_endAccess();
  objc_msgSend(a5, sel_signal);
  return sub_1CCA0BF30((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
}

uint64_t sub_1CCAA2BA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v6 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v6);
  if (result)
  {
    v8 = *(_QWORD *)(v6 + 8);
    ObjectType = swift_getObjectType();
    swift_beginAccess();
    v10 = *(_QWORD *)(a2 + 16);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 136);
    swift_bridgeObjectRetain();
    v11(a1, v10, ObjectType, v8);
    swift_bridgeObjectRelease();
    result = swift_unknownObjectRelease();
  }
  if (a3)
    return a3(result);
  return result;
}

uint64_t sub_1CCAA2C80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t ObjectType;

  v4 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v4);
  if (result)
  {
    v6 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 152))(a1, a2, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCAA2D0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  _OWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v2 = sub_1CCA14E90(&qword_1ED8A8EE8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v16 - v6;
  v8 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v8);
  if (result)
  {
    v10 = *(_QWORD *)(v8 + 8);
    ObjectType = swift_getObjectType();
    v12 = sub_1CCB63490();
    v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
    v13(v7, 1, 1, v12);
    v13(v5, 1, 1, v12);
    type metadata accessor for FMIPAlert();
    v14 = (_OWORD *)swift_allocObject();
    v14[1] = 0u;
    v14[2] = 0u;
    v14[3] = 0u;
    v15 = (_QWORD *)((char *)v14 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonLabel);
    *v15 = 0;
    v15[1] = 0;
    sub_1CC9C3EC0((uint64_t)v7, (uint64_t)v14 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_okButtonURL, &qword_1ED8A8EE8);
    sub_1CC9C3EC0((uint64_t)v5, (uint64_t)v14 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonURL, &qword_1ED8A8EE8);
    *((_BYTE *)v14 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_type) = 4;
    (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(v10 + 72))(a1, v14, ObjectType, v10);
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCAA2ECC(uint64_t a1, uint64_t a2)
{
  return sub_1CC9CB188(a1, a2, (uint64_t)&unk_1E88F8008, (uint64_t)sub_1CCAAA1D4, (uint64_t)&unk_1E88F8020);
}

uint64_t sub_1CCAA2EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t aBlock;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  void *v49;
  uint64_t (*v50)();
  uint64_t v51;

  v4 = sub_1CCB63820();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63868();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager;
  swift_retain();
  LOBYTE(a2) = sub_1CCAAD8AC(a2);
  result = swift_release();
  if ((a2 & 1) != 0)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + v12) + 240);
    v15 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue);
    v41 = v8;
    v42 = v15;
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = a1;
    *(_QWORD *)(v16 + 24) = v14;
    v50 = sub_1CCAAA1F0;
    v51 = v16;
    aBlock = MEMORY[0x1E0C809B0];
    v47 = 1107296256;
    v48 = sub_1CCA00C38;
    v49 = &unk_1E88F8070;
    v17 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1CCB63844();
    v45 = MEMORY[0x1E0DEE9D8];
    v18 = v4;
    v19 = v12;
    v20 = sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    v21 = sub_1CCA14E90(&qword_1ED8AA338);
    v36 = v9;
    v22 = v5;
    v23 = v21;
    v38 = sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    v39 = v23;
    v24 = v7;
    v40 = v20;
    v25 = v19;
    v26 = v18;
    sub_1CCB63E98();
    v27 = v41;
    MEMORY[0x1D17B1318](0, v11, v7, v17);
    _Block_release(v17);
    v37 = *(void (**)(char *, uint64_t))(v22 + 8);
    v37(v7, v18);
    v28 = *(void (**)(char *, uint64_t))(v36 + 8);
    v28(v11, v27);
    swift_release();
    swift_beginAccess();
    swift_retain();
    v29 = swift_bridgeObjectRetain();
    LOBYTE(v22) = sub_1CC9E3BE4(v29, 1);
    swift_release();
    swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
    {
      v50 = sub_1CCA241A4;
      v51 = a1;
      aBlock = MEMORY[0x1E0C809B0];
      v47 = 1107296256;
      v48 = sub_1CCA00C38;
      v49 = &unk_1E88F80C0;
      v30 = _Block_copy(&aBlock);
      swift_retain();
      sub_1CCB63844();
      v44 = MEMORY[0x1E0DEE9D8];
      sub_1CCB63E98();
      MEMORY[0x1D17B1318](0, v11, v24, v30);
      _Block_release(v30);
      v37(v24, v18);
      v28(v11, v27);
      swift_release();
    }
    v31 = *(_QWORD *)(a1 + v25);
    swift_beginAccess();
    v32 = *(_QWORD *)(v31 + 280);
    swift_bridgeObjectRetain();
    swift_retain();
    v33 = sub_1CC9E0F20(v32, 3, 1);
    swift_release();
    result = swift_bridgeObjectRelease();
    if ((v33 & 1) != 0)
    {
      v50 = sub_1CCA242E0;
      v51 = a1;
      aBlock = MEMORY[0x1E0C809B0];
      v47 = 1107296256;
      v48 = sub_1CCA00C38;
      v49 = &unk_1E88F8098;
      v34 = _Block_copy(&aBlock);
      swift_retain();
      sub_1CCB63844();
      v43 = MEMORY[0x1E0DEE9D8];
      sub_1CCB63E98();
      MEMORY[0x1D17B1318](0, v11, v24, v34);
      _Block_release(v34);
      v37(v24, v26);
      v28(v11, v27);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1CCAA335C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t ObjectType;

  v4 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v4);
  if (result)
  {
    v6 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 168))(a1, a2, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCAA33E8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v4 = sub_1CCB63820();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v19 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63868();
  v17 = *(_QWORD *)(v8 - 8);
  v18 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[36];
  swift_beginAccess();
  v11 = a1[10];
  v15[1] = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue);
  aBlock[4] = sub_1CCAAB5B4;
  aBlock[5] = a2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F8948;
  v12 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CCB63844();
  v20 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v5, MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v10, v7, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v18);
  swift_release();
  swift_beginAccess();
  v13 = a1[35];
  swift_bridgeObjectRetain();
  sub_1CCA0953C(v11, v13, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCAA3648(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  if (MEMORY[0x1D17B2218](v2))
  {
    v3 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    sub_1CCA14E90(&qword_1EF9E2A30);
    sub_1CCB63D9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 152))(a1, v8, ObjectType, v3);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  result = MEMORY[0x1D17B2218](v2);
  if (result)
  {
    v6 = *(_QWORD *)(v2 + 8);
    v7 = swift_getObjectType();
    sub_1CCA14E90(&qword_1ED8A7E80);
    sub_1CCB63D9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, v8, v7, v6);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCAA37A4(unsigned __int8 *a1, uint64_t a2)
{
  return sub_1CCAA37C8(a1, a2, "FMIPManager: appending realtime location to devices %{private}s", (uint64_t)&unk_1E88F8148, (uint64_t)sub_1CCAAA264, (uint64_t)&unk_1E88F8160);
}

uint64_t sub_1CCAA37C8(unsigned __int8 *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  void *v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  os_log_type_t v28;
  char v29;
  uint8_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t aBlock;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v45 = a5;
  v46 = a6;
  v44 = a4;
  v41 = a3;
  v50 = a2;
  v7 = sub_1CCB63868();
  v48 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1CCB63820();
  v10 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v47 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *a1;
  v12 = a1[1];
  v13 = a1[2];
  v14 = a1[3];
  v15 = (void *)*((_QWORD *)a1 + 1);
  v16 = (uint64_t (*)(uint64_t))*((_QWORD *)a1 + 2);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v52 = v12;
  v53 = v13;
  v43 = v14;
  v17 = sub_1CCB637FC();
  sub_1CCA16C20(v17, (uint64_t)qword_1ED8AD7F8);
  v18 = v15;
  v19 = sub_1CCB637D8();
  v20 = sub_1CCB63D48();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v40 = v7;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc();
    v54 = v23;
    v39 = v10;
    *(_DWORD *)v22 = 136380675;
    v38 = v9;
    v25 = v42;
    v24 = v43;
    LOBYTE(aBlock) = v42;
    BYTE1(aBlock) = v52;
    BYTE2(aBlock) = v53;
    BYTE3(aBlock) = v43;
    v56 = (uint64_t)v18;
    v57 = v16;
    v26 = FMIPLocation.debugDescription.getter();
    aBlock = sub_1CCA0CB60(v26, v27, &v54);
    v9 = v38;
    v10 = v39;
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    v28 = v20;
    v29 = v24;
    _os_log_impl(&dword_1CC9BF000, v19, v28, v41, v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v23, -1, -1);
    v30 = v22;
    v7 = v40;
    MEMORY[0x1D17B214C](v30, -1, -1);

  }
  else
  {

    v25 = v42;
    v29 = v43;
  }
  v31 = v49;
  v32 = v47;
  sub_1CCB63814();
  v33 = swift_allocObject();
  v34 = v50;
  *(_QWORD *)(v33 + 16) = v31;
  *(_QWORD *)(v33 + 24) = v34;
  *(_BYTE *)(v33 + 32) = v25;
  *(_BYTE *)(v33 + 33) = v52;
  *(_BYTE *)(v33 + 34) = v53;
  *(_BYTE *)(v33 + 35) = v29;
  *(_QWORD *)(v33 + 40) = v18;
  *(_QWORD *)(v33 + 48) = v16;
  v59 = v45;
  v60 = v33;
  aBlock = MEMORY[0x1E0C809B0];
  v56 = 1107296256;
  v57 = sub_1CCA00C38;
  v58 = v46;
  v35 = _Block_copy(&aBlock);
  v36 = v18;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v9, v32, v35);
  _Block_release(v35);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v32, v51);
  return swift_release();
}

void sub_1CCAA3B5C(uint64_t a1, uint64_t a2, int a3, void *a4, double a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  const char *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD aBlock[6];

  v76 = a4;
  v77 = a2;
  v75 = a3;
  v7 = sub_1CCB63820();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB63868();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for FMIPItem();
  v15 = *(_QWORD *)(v78 - 8);
  v16 = MEMORY[0x1E0C80A78](v78);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v64 - v20;
  v22 = *(_BYTE *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_locationController)
                 + OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_limitedPrecision);
  if (qword_1EF9DEFB0 != -1)
  {
    v71 = v19;
    swift_once();
    v19 = v71;
  }
  if (!(v22 & 1 | ((byte_1EF9E27F8 & 1) == 0)))
  {
    v65 = v14;
    v66 = v12;
    v67 = v11;
    v70 = v7;
    v71 = v19;
    v74 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager;
    v23 = *(_QWORD *)(v19 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
    v25 = *(_QWORD *)(v23 + 184);
    v24 = *(_QWORD *)(v23 + 192);
    v26 = MEMORY[0x1E0DEE9D8];
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    v27 = v77;
    v28 = *(_QWORD *)(v77 + 16);
    v72 = v24;
    swift_bridgeObjectRetain();
    v73 = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v28)
    {
      v68 = v10;
      v69 = v8;
      v29 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      v30 = *(_QWORD *)(v15 + 72);
      v31 = v27 + v29;
      v32 = MEMORY[0x1E0DEE9D8];
      do
      {
        sub_1CCA0BEEC(v31, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        if ((v21[*(int *)(v78 + 76)] & 0x40) != 0)
        {
          sub_1CC9FED60((uint64_t)v21, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            sub_1CCA63A2C(0, *(_QWORD *)(v32 + 16) + 1, 1);
          v32 = aBlock[0];
          v34 = *(_QWORD *)(aBlock[0] + 16);
          v33 = *(_QWORD *)(aBlock[0] + 24);
          if (v34 >= v33 >> 1)
          {
            sub_1CCA63A2C(v33 > 1, v34 + 1, 1);
            v32 = aBlock[0];
          }
          *(_QWORD *)(v32 + 16) = v34 + 1;
          sub_1CC9FED60((uint64_t)v18, v32 + v29 + v34 * v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        }
        else
        {
          sub_1CCA0BF30((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        }
        v31 += v30;
        --v28;
      }
      while (v28);
      v35 = aBlock[0];
      v8 = v69;
      v10 = v68;
    }
    else
    {
      v35 = v26;
    }
    swift_bridgeObjectRelease();
    v36 = v75 & 0xFF010101;
    v37 = v76;
    v38 = sub_1CCAA89D8(v35, v36, v37, a5);
    swift_release();

    if (*(_QWORD *)(v38 + 16))
    {
      sub_1CCA14E90(&qword_1EF9E2880);
      v39 = sub_1CCB640B4();
    }
    else
    {
      v39 = MEMORY[0x1E0DEE9E0];
    }
    aBlock[0] = v39;
    v40 = swift_bridgeObjectRetain();
    sub_1CCAA69B0(v40, 1, aBlock);
    swift_bridgeObjectRelease();
    v41 = aBlock[0];
    v42 = v72;
    swift_bridgeObjectRetain();
    v43 = (_QWORD *)sub_1CCAA49FC(v41, v42);
    v44 = sub_1CC9C54E4((uint64_t)v43, v42);
    swift_bridgeObjectRelease();
    if ((v44 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1ED8AA630 != -1)
        swift_once();
      v45 = sub_1CCB637FC();
      sub_1CCA16C20(v45, (uint64_t)qword_1ED8AD7F8);
      v46 = sub_1CCB637D8();
      v47 = sub_1CCB63D48();
      if (!os_log_type_enabled(v46, v47))
        goto LABEL_34;
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      v49 = "FMIPManager: ignoring location update since no changes were detected.";
LABEL_33:
      _os_log_impl(&dword_1CC9BF000, v46, v47, v49, v48, 2u);
      MEMORY[0x1D17B214C](v48, -1, -1);
LABEL_34:

      return;
    }
    swift_retain();
    v50 = sub_1CC9C5064(v43, v73);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v50 & 1) == 0)
    {
      if (qword_1ED8AA630 != -1)
        swift_once();
      v58 = sub_1CCB637FC();
      sub_1CCA16C20(v58, (uint64_t)qword_1ED8AD7F8);
      v46 = sub_1CCB637D8();
      v47 = sub_1CCB63D48();
      if (!os_log_type_enabled(v46, v47))
        goto LABEL_34;
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      v49 = "FMIPManager: ignoring location update since data manager said so.";
      goto LABEL_33;
    }
    swift_beginAccess();
    v51 = qword_1ED8AA630;
    swift_bridgeObjectRetain();
    if (v51 != -1)
      swift_once();
    v52 = sub_1CCB637FC();
    sub_1CCA16C20(v52, (uint64_t)qword_1ED8AD7F8);
    swift_bridgeObjectRetain();
    v53 = sub_1CCB637D8();
    v54 = sub_1CCB63D48();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc();
      v56 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v55 = 138412290;
      v57 = sub_1CCB63B20();
      aBlock[0] = v57;
      sub_1CCB63E44();
      *v56 = v57;
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1CC9BF000, v53, v54, "FMIPManager: items changed after realtime location %@", v55, 0xCu);
      sub_1CCA14E90(&qword_1ED8A8E00);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v56, -1, -1);
      MEMORY[0x1D17B214C](v55, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v59 = v67;
    v60 = v66;
    v61 = v65;
    aBlock[4] = sub_1CCA242E0;
    aBlock[5] = v71;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA00C38;
    aBlock[3] = &unk_1E88F7B98;
    v62 = _Block_copy(aBlock);
    swift_retain();
    sub_1CCB63844();
    v79 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    v63 = v70;
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v61, v10, v62);
    _Block_release(v62);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v63);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v59);
    swift_release();
  }
}

double sub_1CCAA43B4@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  _QWORD *v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  _QWORD *v49;
  NSObject *v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  char v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  NSObject *v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  double result;
  uint64_t v65;
  NSObject *v66;
  int v67;
  _QWORD *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  _QWORD v73[3];
  uint64_t v74;
  uint64_t v75;

  v71 = a4;
  v9 = type metadata accessor for FMIPProductType();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(int *)(type metadata accessor for FMIPItem() + 96);
  v70 = a1;
  v13 = a1 + v12;
  FMIPProductType.productInformation.getter((uint64_t)v73);
  v14 = v74;
  if (v74)
  {
    v15 = v75;
    sub_1CCA04DDC(v73, v74);
    v16 = (*(double (**)(uint64_t, uint64_t))(v15 + 56))(v14, v15);
    sub_1CCA01CA0((uint64_t)v73);
  }
  else
  {
    sub_1CC9C3E84((uint64_t)v73, &qword_1EF9E2888);
    v16 = 10.0;
  }
  v17 = 20.0;
  if (v16 <= 20.0)
    v17 = v16;
  v18 = fmax(v17, 4.0);
  sub_1CCA0BEEC(v13, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
  if (swift_getEnumCaseMultiPayload() >= 2)
  {
    sub_1CC9C3E84((uint64_t)v11, &qword_1EF9DFB90);
    v19 = 3;
  }
  else
  {
    sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
    v19 = 1;
  }
  v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9E3F8]), sel_initWithBeaconType_transmitPower_, v19, v18);
  v21 = (void *)objc_opt_self();
  sub_1CCA14E90(&qword_1EF9E2890);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1CCB6B950;
  *(_QWORD *)(v22 + 32) = a3;
  v73[0] = v22;
  sub_1CCB63B50();
  sub_1CC9C30A8(0, (unint64_t *)&qword_1EF9E2898);
  v23 = a3;
  v24 = (void *)sub_1CCB63B20();
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(v21, sel_applyFilterToLocationObservations_options_, v24, v20);

  if (v25)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v26 = sub_1CCB637FC();
    sub_1CCA16C20(v26, (uint64_t)qword_1ED8AD7F8);
    v27 = v23;
    v28 = v25;
    v29 = v27;
    v30 = v28;
    v31 = sub_1CCB637D8();
    v32 = sub_1CCB63D48();
    v33 = v32;
    if (os_log_type_enabled(v31, v32))
    {
      v34 = swift_slowAlloc();
      v68 = v20;
      v35 = v34;
      v36 = swift_slowAlloc();
      v66 = v31;
      v37 = (_QWORD *)v36;
      *(_DWORD *)v35 = 138412802;
      v69 = a2;
      v73[0] = v29;
      v38 = v29;
      v67 = v33;
      v39 = v38;
      sub_1CCB63E44();
      *v37 = v29;

      *(_WORD *)(v35 + 12) = 2112;
      v73[0] = v30;
      v40 = v30;
      sub_1CCB63E44();
      v41 = v37;
      v42 = v66;
      v41[1] = v25;

      a2 = v69;
      *(_WORD *)(v35 + 22) = 2048;
      *(double *)v73 = v16;
      sub_1CCB63E44();
      _os_log_impl(&dword_1CC9BF000, v42, (os_log_type_t)v67, "FMIPManager: Calculated TX adjusted location for %@: %@, txPower: %f.", (uint8_t *)v35, 0x20u);
      sub_1CCA14E90(&qword_1ED8A8E00);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v41, -1, -1);
      v43 = v35;
      v20 = v68;
      MEMORY[0x1D17B214C](v43, -1, -1);
    }
    else
    {

      v42 = v29;
    }
    v52 = v71;
    v53 = HIWORD(a2) & 1;
    v54 = (a2 >> 8) & 1;
    v55 = a2 & 1;

    v56 = *(_QWORD *)(v70 + 360);
    *(_QWORD *)v52 = *(_QWORD *)(v70 + 352);
    *(_QWORD *)(v52 + 8) = v56;
    v72 = HIBYTE(a2);
    swift_bridgeObjectRetain();
    v57 = v30;
  }
  else
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v44 = sub_1CCB637FC();
    sub_1CCA16C20(v44, (uint64_t)qword_1ED8AD7F8);
    v45 = v23;
    v46 = sub_1CCB637D8();
    v47 = sub_1CCB63D48();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      v68 = (_QWORD *)swift_slowAlloc();
      v69 = a2;
      *(_DWORD *)v48 = 138412290;
      v73[0] = v45;
      v49 = v20;
      v50 = v45;
      a2 = v69;
      sub_1CCB63E44();
      v51 = v68;
      *v68 = v45;

      v20 = v49;
      _os_log_impl(&dword_1CC9BF000, v46, v47, "FMIPManager: Failed to adjust location for %@ - using default one.", v48, 0xCu);
      sub_1CCA14E90(&qword_1ED8A8E00);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v51, -1, -1);
      MEMORY[0x1D17B214C](v48, -1, -1);
    }
    else
    {

      v46 = v45;
    }
    v52 = v71;
    v53 = HIWORD(a2) & 1;
    v54 = (a2 >> 8) & 1;
    v55 = a2 & 1;

    v58 = *(_QWORD *)(v70 + 360);
    *(_QWORD *)v52 = *(_QWORD *)(v70 + 352);
    *(_QWORD *)(v52 + 8) = v58;
    v72 = HIBYTE(a2);
    v59 = v45;
    swift_bridgeObjectRetain();
    v57 = v59;
  }
  sub_1CC9FB3D4(v57, &v72, v55, v54, v53, (uint64_t)v73, a5);

  v60 = BYTE1(v73[0]);
  v61 = BYTE2(v73[0]);
  v62 = BYTE3(v73[0]);
  v63 = v73[1];
  result = *(double *)&v73[2];
  *(_BYTE *)(v52 + 16) = v73[0];
  *(_BYTE *)(v52 + 17) = v60;
  *(_BYTE *)(v52 + 18) = v61;
  *(_BYTE *)(v52 + 19) = v62;
  *(_QWORD *)(v52 + 24) = v63;
  *(double *)(v52 + 32) = result;
  return result;
}

uint64_t sub_1CCAA49FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_1CCAA674C(a1, (uint64_t)sub_1CCAA80C8, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1CCAA4A78(uint64_t a1, uint64_t a2, int a3, char *a4, double a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  NSObject *v42;
  uint64_t v43;
  unint64_t v44;
  os_log_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  NSObject *v54;
  uint64_t v55;
  unint64_t v56;
  os_log_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t *v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char isUniquelyReferenced_nonNull_native;
  void *v73;
  uint64_t v74;
  char v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  _BOOL8 v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  _QWORD *v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t *v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  _QWORD *v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[2];
  unsigned int v112;
  os_log_t v113;
  NSObject *v114;
  NSObject *v115;
  uint64_t v116;
  NSObject *v117;
  __int128 v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unint64_t v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  uint64_t v136;
  id v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *v142;
  uint64_t aBlock;
  uint64_t v144;
  uint64_t (*v145)(uint64_t);
  void *v146;
  uint64_t (*v147)();
  uint64_t v148;

  LODWORD(v7) = a3;
  v140 = a1;
  v141 = a2;
  v8 = sub_1CCB63820();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (unint64_t)v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63868();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v138 = (char *)v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FMIPDevice();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v18 = MEMORY[0x1E0C80A78](v17);
  v19 = MEMORY[0x1E0C80A78](v18);
  v20 = MEMORY[0x1E0C80A78](v19);
  result = MEMORY[0x1E0C80A78](v20);
  v27 = (char *)v111 - v26;
  if (qword_1EF9DEFB0 != -1)
  {
LABEL_56:
    v123 = (uint64_t *)v23;
    v122 = v24;
    v121 = (uint64_t *)v25;
    v110 = v22;
    result = swift_once();
    v22 = v110;
    v25 = (uint64_t)v121;
    v24 = v122;
    v23 = (uint64_t)v123;
  }
  if (byte_1EF9E27F8 != 1)
    return result;
  v28 = v16;
  v29 = *(_QWORD *)(*(_QWORD *)(v140 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager) + 192);
  v30 = *(_QWORD *)(v141 + 16);
  if (!v30)
  {
    swift_bridgeObjectRetain();
    goto LABEL_53;
  }
  v120 = v22;
  v121 = (uint64_t *)v25;
  v122 = v24;
  v123 = (uint64_t *)v23;
  v124 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager;
  v137 = a4;
  v125 = v13;
  v126 = v12;
  v127 = (char *)v11;
  v128 = v9;
  v129 = v8;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v140 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_locationController)
                           + OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_limitedPrecision);
  v31 = v28;
  v13 = v141 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
  v119 = &v144;
  v133 = (v7 >> 8) & 1;
  v134 = v7 & 1;
  v135 = v7;
  v132 = WORD1(v7) & 1;
  v136 = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = 0;
  a4 = 0;
  v139 = MEMORY[0x1E0DEE9E0];
  v7 = -(uint64_t)v30;
  *(_QWORD *)&v32 = 136315394;
  v118 = v32;
  v116 = MEMORY[0x1E0DEE9B8] + 8;
  v12 = v30;
  v16 = v31;
LABEL_5:
  if ((unint64_t)a4 <= v12)
    v33 = v12;
  else
    v33 = (unint64_t)a4;
  v9 = -(uint64_t)v33;
  ++a4;
  do
  {
    if (&a4[v9] == (char *)1)
    {
      __break(1u);
      goto LABEL_56;
    }
    sub_1CCA0BEEC(v13 + *(_QWORD *)(v16 + 72) * (_QWORD)(a4 - 1), (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if ((v27[217] & 4) != 0)
    {
      v131 = v12;
      v130 = v11;
      if ((v11 & 1) != 0)
      {
        if (qword_1ED8AA630 != -1)
          swift_once();
        v34 = sub_1CCB637FC();
        sub_1CCA16C20(v34, (uint64_t)qword_1ED8AD7F8);
        v35 = v122;
        sub_1CCA0BEEC((uint64_t)v27, v122, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v117 = v137;
        v36 = sub_1CCB637D8();
        v37 = sub_1CCB63D48();
        v38 = v37;
        if (os_log_type_enabled(v36, v37))
        {
          v112 = HIBYTE(v135);
          v39 = swift_slowAlloc();
          v115 = swift_slowAlloc();
          v142 = v115;
          *(_DWORD *)v39 = v118;
          v113 = v36;
          LODWORD(v114) = v38;
          v40 = *(_QWORD *)(v35 + 64);
          v41 = *(_QWORD *)(v35 + 72);
          swift_bridgeObjectRetain();
          *(_QWORD *)(v39 + 4) = sub_1CCA0CB60(v40, v41, (uint64_t *)&v142);
          swift_bridgeObjectRelease();
          sub_1CCA0BF30(v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
          *(_WORD *)(v39 + 12) = 2080;
          LOBYTE(aBlock) = v134;
          BYTE1(aBlock) = v133;
          BYTE2(aBlock) = v132;
          BYTE3(aBlock) = v112;
          v42 = v117;
          v144 = (uint64_t)v117;
          v145 = *(uint64_t (**)(uint64_t))&a5;
          v43 = FMIPLocation.debugDescription.getter();
          *(_QWORD *)(v39 + 14) = sub_1CCA0CB60(v43, v44, (uint64_t *)&v142);

          swift_bridgeObjectRelease();
          v45 = v113;
          _os_log_impl(&dword_1CC9BF000, v113, (os_log_type_t)v114, "FMIPManager: trimming realtime location for \"%s\" because of coarse location %s", (uint8_t *)v39, 0x16u);
          v46 = v115;
          swift_arrayDestroy();
          MEMORY[0x1D17B214C](v46, -1, -1);
          MEMORY[0x1D17B214C](v39, -1, -1);
        }
        else
        {
          sub_1CCA0BF30(v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);

          v45 = v117;
        }

        v60 = *((_QWORD *)v27 + 2);
        v59 = *((_QWORD *)v27 + 3);
        v61 = v123;
        sub_1CCA0BEEC((uint64_t)v27, (uint64_t)v123, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        if (v59)
        {
          v62 = v59;
        }
        else
        {
          v60 = *v61;
          v62 = v61[1];
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRetain();
        sub_1CCA0BF30((uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v67 = v139;
        swift_bridgeObjectRetain();
        v68 = v60;
        v69 = v67;
        v70 = sub_1CCA074F4(v68, v62);
        LOBYTE(v67) = v71;
        swift_bridgeObjectRelease();
        if ((v67 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          aBlock = v69;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1CCAEC584();
            v69 = aBlock;
          }
          swift_bridgeObjectRelease();
          v73 = *(void **)(*(_QWORD *)(v69 + 56) + 24 * v70 + 8);
          v139 = v69;
          sub_1CCB09CDC(v70, v69);

          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v12 = v131;
        v11 = v130;
LABEL_47:
        sub_1CCA0BF30((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v8 = 1;
        if (&a4[v7])
          goto LABEL_5;
        swift_bridgeObjectRelease();
        v108 = v136;
        v109 = v139;
LABEL_50:
        swift_bridgeObjectRetain();
        v95 = swift_isUniquelyReferenced_nonNull_native();
        aBlock = v108;
        sub_1CCAA674C(v109, (uint64_t)sub_1CCAA80C8, 0, v95, &aBlock);
        v96 = (_QWORD *)aBlock;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v97 = *(_QWORD *)(*(_QWORD *)(v140 + v124) + 184);
        swift_bridgeObjectRetain();
        swift_retain();
        v98 = sub_1CC9C5064(v96, v97);
        swift_release();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v99 = v129;
        v100 = v128;
        v101 = v127;
        v102 = v126;
        v103 = v125;
        if ((v98 & 1) != 0)
        {
          v104 = v140;
          v139 = *(_QWORD *)(v140 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue);
          v105 = swift_allocObject();
          *(_QWORD *)(v105 + 16) = v141;
          *(_QWORD *)(v105 + 24) = v104;
          v147 = sub_1CCAAA284;
          v148 = v105;
          aBlock = MEMORY[0x1E0C809B0];
          v144 = 1107296256;
          v145 = sub_1CCA00C38;
          v146 = &unk_1E88F81B0;
          v106 = _Block_copy(&aBlock);
          swift_bridgeObjectRetain();
          swift_retain();
          v107 = v138;
          sub_1CCB63844();
          v142 = MEMORY[0x1E0DEE9D8];
          sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
          sub_1CCA14E90(&qword_1ED8AA338);
          sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
          sub_1CCB63E98();
          MEMORY[0x1D17B1318](0, v107, v101, v106);
          _Block_release(v106);
          (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v99);
          (*(void (**)(char *, unint64_t))(v103 + 8))(v107, v102);
          return swift_release();
        }
        return result;
      }
      if (qword_1ED8AA630 != -1)
        swift_once();
      v47 = sub_1CCB637FC();
      sub_1CCA16C20(v47, (uint64_t)qword_1ED8AD7F8);
      v48 = v120;
      sub_1CCA0BEEC((uint64_t)v27, v120, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v117 = v137;
      v49 = sub_1CCB637D8();
      v50 = sub_1CCB63D48();
      LODWORD(v115) = v50;
      if (os_log_type_enabled(v49, v50))
      {
        v112 = HIBYTE(v135);
        v51 = swift_slowAlloc();
        v114 = swift_slowAlloc();
        v142 = v114;
        *(_DWORD *)v51 = v118;
        v111[1] = v51 + 4;
        v113 = v49;
        v52 = *(_QWORD *)(v48 + 64);
        v53 = *(_QWORD *)(v48 + 72);
        swift_bridgeObjectRetain();
        aBlock = sub_1CCA0CB60(v52, v53, (uint64_t *)&v142);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        sub_1CCA0BF30(v48, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        *(_WORD *)(v51 + 12) = 2080;
        LOBYTE(aBlock) = v134;
        BYTE1(aBlock) = v133;
        BYTE2(aBlock) = v132;
        BYTE3(aBlock) = v112;
        v54 = v117;
        v144 = (uint64_t)v117;
        v145 = *(uint64_t (**)(uint64_t))&a5;
        v55 = FMIPLocation.debugDescription.getter();
        aBlock = sub_1CCA0CB60(v55, v56, (uint64_t *)&v142);
        sub_1CCB63E44();

        swift_bridgeObjectRelease();
        v57 = v113;
        _os_log_impl(&dword_1CC9BF000, v113, (os_log_type_t)v115, "FMIPManager: using realtime location for \"%s\". Location: %s", (uint8_t *)v51, 0x16u);
        v58 = (uint64_t)v114;
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v58, -1, -1);
        MEMORY[0x1D17B214C](v51, -1, -1);
      }
      else
      {
        sub_1CCA0BF30(v48, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);

        v57 = v117;
      }

      v64 = *((_QWORD *)v27 + 2);
      v63 = *((_QWORD *)v27 + 3);
      v65 = v121;
      sub_1CCA0BEEC((uint64_t)v27, (uint64_t)v121, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      if (v63)
      {
        v66 = v63;
      }
      else
      {
        v64 = *v65;
        v66 = v65[1];
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      sub_1CCA0BF30((uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v115 = v117;
      v74 = v139;
      v75 = swift_isUniquelyReferenced_nonNull_native();
      aBlock = v74;
      v114 = v64;
      v117 = v66;
      v77 = sub_1CCA074F4(v64, (uint64_t)v66);
      v78 = *(_QWORD *)(v74 + 16);
      v79 = (v76 & 1) == 0;
      v80 = v78 + v79;
      if (__OFADD__(v78, v79))
      {
        __break(1u);
      }
      else
      {
        v81 = v76;
        if (*(_QWORD *)(v74 + 24) >= v80)
        {
          if ((v75 & 1) == 0)
            sub_1CCAEC584();
          v82 = (uint64_t)v114;
        }
        else
        {
          sub_1CCA03F94(v80, v75);
          v82 = (uint64_t)v114;
          v83 = sub_1CCA074F4((uint64_t)v114, (uint64_t)v117);
          if ((v81 & 1) != (v84 & 1))
          {
LABEL_59:
            sub_1CCB642DC();
            __break(1u);
            result = swift_bridgeObjectRelease();
            __break(1u);
            return result;
          }
          v77 = v83;
        }
        v85 = (_QWORD *)aBlock;
        v139 = aBlock;
        if ((v81 & 1) != 0)
        {
          v86 = HIBYTE(v135);
          v87 = *(_QWORD *)(aBlock + 56) + 24 * v77;

          *(_BYTE *)v87 = v134;
          *(_BYTE *)(v87 + 1) = v133;
          *(_BYTE *)(v87 + 2) = v132;
          *(_BYTE *)(v87 + 3) = v86;
          *(_QWORD *)(v87 + 8) = v115;
          *(double *)(v87 + 16) = a5;
          v12 = v131;
          v11 = v130;
LABEL_46:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_47;
        }
        v88 = HIBYTE(v135);
        *(_QWORD *)(aBlock + 8 * (v77 >> 6) + 64) |= 1 << v77;
        v89 = (uint64_t *)(v85[6] + 16 * v77);
        v90 = v117;
        *v89 = v82;
        v89[1] = (uint64_t)v90;
        v91 = v85[7] + 24 * v77;
        *(_BYTE *)v91 = v134;
        *(_BYTE *)(v91 + 1) = v133;
        *(_BYTE *)(v91 + 2) = v132;
        *(_BYTE *)(v91 + 3) = v88;
        *(_QWORD *)(v91 + 8) = v115;
        *(double *)(v91 + 16) = a5;
        v92 = v85[2];
        v93 = __OFADD__(v92, 1);
        v94 = v92 + 1;
        if (!v93)
        {
          v85[2] = v94;
          swift_bridgeObjectRetain();
          v12 = v131;
          v11 = v130;
          goto LABEL_46;
        }
      }
      __break(1u);
      goto LABEL_59;
    }
    sub_1CCA0BF30((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    ++a4;
  }
  while (&a4[v7] != (char *)1);
  swift_bridgeObjectRelease();
  v108 = v136;
  v109 = v139;
  if ((v8 & 1) != 0)
    goto LABEL_50;
LABEL_53:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCAA57C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v3 = sub_1CCB637FC();
  sub_1CCA16C20(v3, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v4 = sub_1CCB637D8();
  v5 = sub_1CCB63D48();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v6 = 138412290;
    type metadata accessor for FMIPDevice();
    v13 = sub_1CCB63B20();
    sub_1CCB63E44();
    *v7 = v13;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v4, v5, "FMIPManager: devices changed after realtime location %@", v6, 0xCu);
    sub_1CCA14E90(&qword_1ED8A8E00);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v7, -1, -1);
    MEMORY[0x1D17B214C](v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v8 = a2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v8);
  if (result)
  {
    v10 = *(_QWORD *)(v8 + 8);
    ObjectType = swift_getObjectType();
    sub_1CCA14E90(&qword_1ED8A7E80);
    sub_1CCB63D9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 32))(a2, v12, ObjectType, v10);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCAA59FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void (*v25)(__int128 *__return_ptr, uint64_t);
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  _BYTE v48[40];
  __int128 v49[2];

  v1 = v0;
  v2 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v5 = sub_1CCB637FC();
  sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
  v6 = sub_1CCB637D8();
  v7 = sub_1CCB63D48();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1CC9BF000, v6, v7, "FMIPManager: resetDataDependantControllers", v8, 2u);
    MEMORY[0x1D17B214C](v8, -1, -1);
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isDevicesSnapshotMode) & 1) != 0)
    v9 = 1;
  else
    v9 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isItemsSnapshotMode);
  if (qword_1EF9DEF88 != -1)
    swift_once();
  v10 = qword_1EF9E27E8;
  v11 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v12 = objc_msgSend(v11, sel_bundleIdentifier);

  if (v12)
  {
    v13 = sub_1CCB63988();
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0xE000000000000000;
  }
  v16 = sub_1CCA9926C(v13, v15, v10);
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration);
  v45 = OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems;
  v18 = *(_QWORD *)(v17 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_cacheDirectory);
  v19 = *(_QWORD *)(v17 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_cacheDirectory + 8);
  *(_QWORD *)&v49[0] = *(_QWORD *)(v17 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems);
  v20 = v17 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_preferredLocale;
  v21 = sub_1CCB63634();
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v4, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v4, 0, 1, v21);
  v23 = *(void **)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataQueue);
  type metadata accessor for FMIPDataManager();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v24 = sub_1CCAAC558(v18, v19, (uint64_t *)v49, (uint64_t)v4, v16 & (v9 ^ 1u), v9, v23);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager) = v24;
  swift_retain();
  swift_release();
  v25 = *(void (**)(__int128 *__return_ptr, uint64_t))(v17
                                                               + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_interactionControllerProvider);
  v26 = swift_retain();
  v25(v49, v26);
  swift_release();
  v27 = v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_interactionController;
  swift_beginAccess();
  sub_1CCA01CA0(v27);
  sub_1CCA21ACC(v49, v27);
  swift_endAccess();
  if ((*(_BYTE *)(v17 + v45) & 1) != 0)
  {
    sub_1CC9EBC94(v27, (uint64_t)v49);
    v28 = objc_allocWithZone((Class)type metadata accessor for FMAPSConnectionHandler());
    v29 = sub_1CC9DC884(0xD00000000000001ELL, 0x80000001CCB7ADA0, 0xD000000000000025, 0x80000001CCB78EB0, 0, 0);
    type metadata accessor for FMIPRefreshingController();
    swift_allocObject();
    *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_refreshingController) = sub_1CC9DE1A4((uint64_t)v49, v29);
    swift_release();
    v30 = *(void **)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_ownerSession);
    sub_1CC9EBC94(v27, (uint64_t)v49);
    sub_1CC9EAB74(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_authenticationUIProvider, (uint64_t)v48, &qword_1ED8A9DE8);
    type metadata accessor for FMIPDeviceActionsController();
    memset(v46, 0, sizeof(v46));
    v47 = 0;
    swift_allocObject();
    *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_actionsController) = sub_1CC9FEDA4(v30, (uint64_t)v49, (uint64_t)v48, (uint64_t)v46);
  }
  else
  {
    *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_refreshingController) = 0;
    swift_release();
    *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_actionsController) = 0;
  }
  swift_release();
  v31 = *(id *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_ownerSession);
  sub_1CCA21CA0((uint64_t)v49);
  type metadata accessor for FMIPBeaconRefreshingController(0);
  swift_allocObject();
  v32 = sub_1CC9F0F48(v31, v49);
  v33 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconRefreshingController;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconRefreshingController) = v32;
  swift_release();
  type metadata accessor for FMIPSafeLocationRefreshingController();
  v34 = (_QWORD *)swift_allocObject();
  v35 = v31;
  v36 = sub_1CC9CAB10((uint64_t)v35, v34);
  v37 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_safeLocationRefreshingController;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_safeLocationRefreshingController) = v36;
  swift_release();
  type metadata accessor for FMIPItemActionsController();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemActionsController) = sub_1CC9D688C(v35, v24);
  swift_release();
  *(_QWORD *)(v24 + 40) = &off_1E88F7808;
  swift_unknownObjectWeakAssign();
  swift_retain();
  sub_1CC9CB664();
  swift_release();
  swift_beginAccess();
  v38 = *(_QWORD *)(v27 + 24);
  v39 = *(_QWORD *)(v27 + 32);
  sub_1CCA1F500(v27, v38);
  v40 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v39 + 16);
  v41 = swift_retain();
  v40(v41, &off_1E88F77E8, v38, v39);
  swift_endAccess();
  swift_release();
  v42 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_refreshingController);
  if (v42)
  {
    *(_QWORD *)(v42 + 40) = &off_1E88F7728;
    swift_unknownObjectWeakAssign();
  }
  *(_QWORD *)(*(_QWORD *)(v1 + v33) + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_delegate + 8) = &off_1E88F7768;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)(*(_QWORD *)(v1 + v37) + 24) = &off_1E88F77D8;
  return swift_unknownObjectWeakAssign();
}

void sub_1CCAA6084(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void (*v10)(char *, uint64_t);
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t aBlock;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t (*v24)();
  uint64_t v25;

  v2 = sub_1CCB63820();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v17 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1CCB63868();
  v6 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[2] = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue);
  v24 = sub_1CCA241A4;
  v25 = a1;
  aBlock = MEMORY[0x1E0C809B0];
  v21 = 1107296256;
  v22 = sub_1CCA00C38;
  v23 = &unk_1E88F7F80;
  v9 = _Block_copy(&aBlock);
  swift_retain();
  sub_1CCB63844();
  v19 = MEMORY[0x1E0DEE9D8];
  v16[1] = sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v3, MEMORY[0x1E0DEF510]);
  v16[0] = sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v8, v5, v9);
  _Block_release(v9);
  v10 = *(void (**)(char *, uint64_t))(v17 + 8);
  v10(v5, v2);
  v11 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12 = v18;
  v11(v8, v18);
  swift_release();
  v24 = sub_1CCA242E0;
  v25 = a1;
  aBlock = MEMORY[0x1E0C809B0];
  v21 = 1107296256;
  v22 = sub_1CCA00C38;
  v23 = &unk_1E88F7FA8;
  v13 = _Block_copy(&aBlock);
  swift_retain();
  sub_1CCB63844();
  v19 = MEMORY[0x1E0DEE9D8];
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v8, v5, v13);
  _Block_release(v13);
  v10(v5, v2);
  v11(v8, v12);
  swift_release();
  v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_initializedSubsystems);
  swift_beginAccess();
  v15 = *v14;
  *v14 = 0;
  v19 = v15;
  sub_1CCA98FE4(&v19);
  FMIPManager.initialize()();
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isRefreshingItems) & 1) != 0
    || *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isRefreshingDevices) == 1)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration)
                    + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems);
    FMIPManager.startRefreshing(subsystems:)((FMIPCore::FMIPManagerSubsystem)&v19);
  }
}

uint64_t sub_1CCAA63B8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  void *v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v18 = a4;
  v7 = sub_1CCB63820();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB63868();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  LOBYTE(a2) = sub_1CC9E3BE4(a2, 0);
  result = swift_release();
  if ((a2 & 1) != 0 && (*(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isUpdatingSingleDevices) & 1) == 0)
  {
    v17[1] = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue);
    aBlock[4] = a3;
    aBlock[5] = a1;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA00C38;
    aBlock[3] = v18;
    v16 = _Block_copy(aBlock);
    swift_retain();
    sub_1CCB63844();
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v14, v10, v16);
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return swift_release();
  }
  return result;
}

uint64_t sub_1CCAA65CC()
{
  uint64_t v0;

  return sub_1CCA997F0(v0);
}

uint64_t sub_1CCAA65D4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1CCAA65F8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCAA6608()
{
  return swift_deallocObject();
}

uint64_t sub_1CCAA6618@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1CCA97EC4(v1, a1);
}

uint64_t sub_1CCAA6630@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager) + 176);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CCAA6658@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager) + 296);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CCAA6680@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager) + 240);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CCAA66A8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 2 * a2;
  type metadata accessor for FMIPDevice();
  return a1;
}

uint64_t sub_1CCAA66EC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

uint64_t sub_1CCAA66FC(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v5;
  uint64_t result;

  a4();
  v5 = *a1 + 8;
  result = sub_1CCB63E44();
  *a1 = v5;
  return result;
}

uint64_t sub_1CCAA674C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = -1 << *(_BYTE *)(a1 + 32);
  v7 = ~v6;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = -v6;
  v45 = a1;
  v46 = a1 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v47 = v7;
  v48 = 0;
  v49 = v10 & v8;
  v50 = a2;
  v51 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CCAA7D6C((uint64_t)&v37);
  v11 = v38;
  if (v38)
  {
    while (1)
    {
      v34 = v39;
      v35 = v40;
      v14 = v41;
      v15 = v42;
      v16 = v43;
      v17 = v44;
      v18 = v37;
      v19 = (_QWORD *)*a5;
      v21 = sub_1CCA074F4(v37, v11);
      v22 = v19[2];
      v23 = (v20 & 1) == 0;
      v24 = v22 + v23;
      if (__OFADD__(v22, v23))
        break;
      v25 = v20;
      if (v19[3] >= v24)
      {
        if ((a4 & 1) == 0)
          sub_1CCAEC584();
      }
      else
      {
        sub_1CCA03F94(v24, a4 & 1);
        v26 = sub_1CCA074F4(v18, v11);
        if ((v25 & 1) != (v27 & 1))
          goto LABEL_19;
        v21 = v26;
      }
      v28 = (_QWORD *)*a5;
      if ((v25 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v13 = v28[7] + 24 * v21;

        *(_BYTE *)v13 = v34;
        *(_BYTE *)(v13 + 1) = v35;
        *(_BYTE *)(v13 + 2) = v14;
        *(_BYTE *)(v13 + 3) = v15;
        *(_QWORD *)(v13 + 8) = v16;
        *(_QWORD *)(v13 + 16) = v17;
      }
      else
      {
        v28[(v21 >> 6) + 8] |= 1 << v21;
        v29 = (uint64_t *)(v28[6] + 16 * v21);
        *v29 = v18;
        v29[1] = v11;
        v30 = v28[7] + 24 * v21;
        *(_BYTE *)v30 = v34;
        *(_BYTE *)(v30 + 1) = v35;
        *(_BYTE *)(v30 + 2) = v14;
        *(_BYTE *)(v30 + 3) = v15;
        *(_QWORD *)(v30 + 8) = v16;
        *(_QWORD *)(v30 + 16) = v17;
        v31 = v28[2];
        v32 = __OFADD__(v31, 1);
        v33 = v31 + 1;
        if (v32)
          goto LABEL_18;
        v28[2] = v33;
      }
      sub_1CCAA7D6C((uint64_t)&v37);
      v11 = v38;
      a4 = 1;
      if (!v38)
        goto LABEL_5;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    result = sub_1CCB642DC();
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CCA2F54C();
    return swift_release();
  }
  return result;
}

void sub_1CCAA69B0(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  void *v13;
  id v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  void *v36;
  uint64_t v37;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v33 = v4;
  if (!v4)
  {
LABEL_18:
    swift_bridgeObjectRelease_n();
    return;
  }
  v5 = 0;
  v6 = 0;
  v32 = v3;
  while (1)
  {
    if (v6 >= *(_QWORD *)(v3 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      sub_1CCB642DC();
      __break(1u);
      goto LABEL_24;
    }
    v8 = *(_QWORD *)(v3 + v5 + 32);
    v7 = *(_QWORD *)(v3 + v5 + 40);
    v9 = *(_BYTE *)(v3 + v5 + 48);
    v10 = *(_BYTE *)(v3 + v5 + 49);
    v11 = *(_BYTE *)(v3 + v5 + 50);
    v12 = *(_BYTE *)(v3 + v5 + 51);
    v13 = *(void **)(v3 + v5 + 56);
    v37 = *(_QWORD *)(v3 + v5 + 64);
    swift_bridgeObjectRetain();
    v14 = v13;
    if (!v7)
      goto LABEL_18;
    v34 = v12;
    v35 = v11;
    v36 = v14;
    v15 = (_QWORD *)*a3;
    v17 = sub_1CCA074F4(v8, v7);
    v18 = v15[2];
    v19 = (v16 & 1) == 0;
    v20 = v18 + v19;
    if (__OFADD__(v18, v19))
      goto LABEL_21;
    v21 = v16;
    if (v15[3] < v20)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v16 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      sub_1CCAEC584();
      if ((v21 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v24 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v17 >> 6) + 64) |= 1 << v17;
    v25 = (uint64_t *)(v24[6] + 16 * v17);
    *v25 = v8;
    v25[1] = v7;
    v26 = v24[7] + 24 * v17;
    *(_BYTE *)v26 = v9;
    *(_BYTE *)(v26 + 1) = v10;
    *(_BYTE *)(v26 + 2) = v35;
    *(_BYTE *)(v26 + 3) = v34;
    *(_QWORD *)(v26 + 8) = v36;
    *(_QWORD *)(v26 + 16) = v37;
    v27 = v24[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_22;
    ++v6;
    v24[2] = v29;
    v5 += 40;
    a2 = 1;
    v3 = v32;
    if (v33 == v6)
      goto LABEL_18;
  }
  sub_1CCA03F94(v20, a2 & 1);
  v22 = sub_1CCA074F4(v8, v7);
  if ((v21 & 1) != (v23 & 1))
    goto LABEL_23;
  v17 = v22;
  if ((v21 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v30 = (void *)swift_allocError();
  swift_willThrow();
  v31 = v30;
  sub_1CCA14E90(&qword_1EF9DF470);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n();
    return;
  }
LABEL_24:
  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCB64060();
  sub_1CCB63A24();
  sub_1CCB64084();
  __break(1u);
}

size_t sub_1CCAA6CE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  sub_1CCA14E90(&qword_1EF9E28C8);
  v3 = *(_QWORD *)(type metadata accessor for FMIPBeaconShare(0) - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      v9 = sub_1CCAA6FDC(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_1CCA2F54C();
      if (v9 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1CCAA6DF8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_21;
  if (!v5)
    return MEMORY[0x1E0DEE9D8];
  if (v5 <= 0)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v4 != a3)
    {
LABEL_10:
      if (v5 < 0)
        goto LABEL_24;
      v14 = *(_QWORD *)(sub_1CCB63604() - 8);
      v15 = (char *)v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      v16 = *(_QWORD *)(v14 + 72);
      v17 = a2 + v16 * a3;
      v18 = v16 * v5;
      v19 = &v15[v18];
      v20 = v17 + v18;
      if (v17 < (unint64_t)v19 && (unint64_t)v15 < v20)
        goto LABEL_24;
      swift_arrayInitWithCopy();
      return (uint64_t)v11;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_1CCA14E90(&qword_1EF9E2AD0);
  v8 = *(_QWORD *)(sub_1CCB63604() - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = (_QWORD *)swift_allocObject();
  v12 = j__malloc_size(v11);
  if (v9)
  {
    if (v12 - v10 == 0x8000000000000000 && v9 == -1)
      goto LABEL_23;
    v11[2] = v5;
    v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
    if (v4 != a3)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCAA6FC0(uint64_t a1)
{
  return sub_1CC9F79A0(a1, &qword_1ED8A70F0, 0x1E0D898C0, &qword_1ED8A7F38);
}

uint64_t sub_1CCAA6FDC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = type metadata accessor for FMIPBeaconShare(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v31 - v14;
  v36 = a4;
  v18 = *(_QWORD *)(a4 + 56);
  v17 = a4 + 56;
  v16 = v18;
  v35 = v17;
  v19 = -1 << *(_BYTE *)(v17 - 24);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    v30 = v35;
    *a1 = v36;
    a1[1] = v30;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v32 = -1 << *(_BYTE *)(v17 - 24);
  v33 = a1;
  v22 = 0;
  v23 = 0;
  v34 = (unint64_t)(63 - v19) >> 6;
  v31 = v34 - 1;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    sub_1CCA0BEEC(*(_QWORD *)(v36 + 48) + v29 * v25, (uint64_t)v12, type metadata accessor for FMIPBeaconShare);
    sub_1CC9FED60((uint64_t)v12, (uint64_t)v15, type metadata accessor for FMIPBeaconShare);
    result = sub_1CC9FED60((uint64_t)v15, a2, type metadata accessor for FMIPBeaconShare);
    if (v23 == a3)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34)
      goto LABEL_32;
    v27 = *(_QWORD *)(v35 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v35 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v34)
    goto LABEL_32;
  v27 = *(_QWORD *)(v35 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v35 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v35 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v34)
    {
      v21 = 0;
      v22 = v31;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v35 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1CCAA7298(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v8 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB63604();
  v41 = *(_QWORD *)(v11 - 8);
  result = MEMORY[0x1E0C80A78](v11);
  v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a4;
  v15 = a4 + 56;
  v14 = *(_QWORD *)(a4 + 56);
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v36 = v16;
  v17 = -v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
    v21 = 0;
LABEL_39:
    v31 = v35;
    v32 = ~v36;
    *v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return v21;
  }
  if (!a3)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v20 = 0;
  v21 = 0;
  v37 = a4 + 56;
  v38 = (unint64_t)(63 - v36) >> 6;
  v34 = v38 - 1;
  v39 = a3;
  v22 = v40;
  v23 = v41;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v25 = v24 | (v20 << 6);
  while (1)
  {
    v29 = *(_QWORD *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v10, *(_QWORD *)(v42 + 48) + v29 * v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v11) == 1)
    {
      v15 = v37;
      goto LABEL_38;
    }
    ++v21;
    v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v11);
    if (v21 == v39)
    {
      v21 = v39;
      v15 = v37;
      goto LABEL_39;
    }
    a2 += v29;
    v23 = v41;
    if (v19)
      goto LABEL_8;
LABEL_9:
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    v15 = v37;
    if (v26 >= v38)
      goto LABEL_37;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
    {
      v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_14;
      v20 = v26 + 1;
      if (v26 + 2 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2;
      }
      else
      {
        v20 = v26 + 2;
        if (v26 + 3 >= v38)
          goto LABEL_37;
        v27 = *(_QWORD *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          v28 = v26 + 4;
          v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            v27 = *(_QWORD *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v26 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_42;
                if (v26 >= v38)
                {
                  v20 = v34;
                  goto LABEL_37;
                }
                v27 = *(_QWORD *)(v37 + 8 * v26);
                ++v28;
                if (v27)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v26 = v28;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1, 1, v11);
          v19 = 0;
LABEL_38:
          sub_1CC9C3E84((uint64_t)v10, &qword_1ED8A8EF8);
          goto LABEL_39;
        }
        v26 += 3;
      }
    }
LABEL_21:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_1CCAA75E8(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v7;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;

  v7 = a4;
  v9 = a2;
  v29 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    sub_1CCB63EC8();
    sub_1CC9C30A8(0, a5);
    sub_1CC9F74C8(a7, a5);
    result = (_QWORD *)sub_1CCB63C94();
    v7 = v33;
    v12 = v34;
    v13 = v35;
    v14 = v36;
    v15 = v37;
    if (v9)
      goto LABEL_3;
LABEL_36:
    v16 = 0;
    goto LABEL_38;
  }
  v14 = 0;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  v12 = a4 + 56;
  v13 = ~v24;
  v25 = -v24;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  else
    v26 = -1;
  v15 = v26 & *(_QWORD *)(a4 + 56);
  if (!a2)
    goto LABEL_36;
LABEL_3:
  if (!a3)
  {
    v16 = 0;
LABEL_38:
    v27 = v29;
LABEL_41:
    *v27 = v7;
    v27[1] = v12;
    v27[2] = v13;
    v27[3] = v14;
    v27[4] = v15;
    return (_QWORD *)v16;
  }
  if (a3 < 0)
    goto LABEL_48;
  v16 = 0;
  v30 = (unint64_t)(v13 + 64) >> 6;
  v28 = v13;
  while (1)
  {
    if (v7 < 0)
    {
      if (!sub_1CCB63F28())
        goto LABEL_40;
      sub_1CC9C30A8(0, a5);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v19 = v32;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (!v32)
        goto LABEL_40;
      goto LABEL_8;
    }
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_7;
    }
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v20 >= v30)
    {
      v15 = 0;
      goto LABEL_40;
    }
    v21 = *(_QWORD *)(v12 + 8 * v20);
    if (v21)
      goto LABEL_23;
    v22 = v14 + 2;
    if (v14 + 2 >= v30)
    {
      v15 = 0;
      ++v14;
      goto LABEL_40;
    }
    v21 = *(_QWORD *)(v12 + 8 * v22);
    if (!v21)
    {
      if (v14 + 3 >= v30)
        goto LABEL_44;
      v21 = *(_QWORD *)(v12 + 8 * (v14 + 3));
      if (v21)
      {
        v20 = v14 + 3;
        goto LABEL_23;
      }
      v22 = v14 + 4;
      if (v14 + 4 >= v30)
      {
        v15 = 0;
        v14 += 3;
        goto LABEL_40;
      }
      v21 = *(_QWORD *)(v12 + 8 * v22);
      if (!v21)
      {
        v20 = v14 + 5;
        if (v14 + 5 >= v30)
        {
LABEL_44:
          v15 = 0;
          v14 = v22;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v12 + 8 * v20);
        if (!v21)
        {
          v23 = v14 + 6;
          while (v30 != v23)
          {
            v21 = *(_QWORD *)(v12 + 8 * v23++);
            if (v21)
            {
              v20 = v23 - 1;
              goto LABEL_23;
            }
          }
          v15 = 0;
          v14 = v30 - 1;
          goto LABEL_40;
        }
        goto LABEL_23;
      }
    }
    v20 = v22;
LABEL_23:
    v15 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v20 << 6);
    v14 = v20;
LABEL_7:
    result = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v18);
    v19 = result;
    if (!result)
      goto LABEL_40;
LABEL_8:
    ++v16;
    *v9++ = v19;
    if (v16 == a3)
    {
      v16 = a3;
LABEL_40:
      v13 = v28;
      v27 = v29;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1CCAA78E4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1CCAA7984()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCAA79B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1CCA2F5C8;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t sub_1CCAA7A18@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v3 = sub_1CCA14E90(&qword_1EF9E28B0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1EF9E28B8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v37 - v12;
  v14 = *v1;
  v15 = v1[1];
  v16 = v1[2];
  v17 = v1[3];
  v18 = v1[4];
  v37 = v6;
  v40 = v16;
  if (v18)
  {
    v38 = v10;
    v39 = v15;
    v19 = v4;
    v20 = a1;
    v21 = (v18 - 1) & v18;
    v22 = __clz(__rbit64(v18)) | (v17 << 6);
LABEL_3:
    v23 = *(_QWORD *)(v14 + 48);
    v24 = sub_1CCB63604();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v13, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v22, v24);
    v25 = *(_QWORD *)(v14 + 56);
    v26 = type metadata accessor for FMIPDeviceConnectedState(0);
    sub_1CCA0BEEC(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v22, (uint64_t)&v13[*(int *)(v3 + 48)], type metadata accessor for FMIPDeviceConnectedState);
    v27 = 0;
    a1 = v20;
    v4 = v19;
    v10 = v38;
    v15 = v39;
    goto LABEL_4;
  }
  v32 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
    return result;
  }
  v33 = (unint64_t)(v16 + 64) >> 6;
  if (v32 >= v33)
  {
    v21 = 0;
    v27 = 1;
    goto LABEL_4;
  }
  v34 = *(_QWORD *)(v15 + 8 * v32);
  if (v34)
  {
LABEL_11:
    v38 = v10;
    v39 = v15;
    v19 = v4;
    v20 = a1;
    v21 = (v34 - 1) & v34;
    v22 = __clz(__rbit64(v34)) + (v32 << 6);
    v17 = v32;
    goto LABEL_3;
  }
  v35 = v17 + 2;
  if (v17 + 2 >= v33)
    goto LABEL_27;
  v34 = *(_QWORD *)(v15 + 8 * v35);
  if (v34)
  {
LABEL_15:
    v32 = v35;
    goto LABEL_11;
  }
  if (v17 + 3 >= v33)
    goto LABEL_28;
  v34 = *(_QWORD *)(v15 + 8 * (v17 + 3));
  if (v34)
  {
    v32 = v17 + 3;
    goto LABEL_11;
  }
  v35 = v17 + 4;
  if (v17 + 4 < v33)
  {
    v34 = *(_QWORD *)(v15 + 8 * v35);
    if (v34)
      goto LABEL_15;
    v32 = v17 + 5;
    if (v17 + 5 < v33)
    {
      v34 = *(_QWORD *)(v15 + 8 * v32);
      if (v34)
        goto LABEL_11;
      v32 = v33 - 1;
      v36 = v17 + 6;
      while (v33 != v36)
      {
        v34 = *(_QWORD *)(v15 + 8 * v36++);
        if (v34)
        {
          v32 = v36 - 1;
          goto LABEL_11;
        }
      }
LABEL_27:
      v21 = 0;
      v27 = 1;
      v17 = v32;
      goto LABEL_4;
    }
LABEL_28:
    v21 = 0;
    v27 = 1;
    v17 = v35;
    goto LABEL_4;
  }
  v21 = 0;
  v27 = 1;
  v17 += 3;
LABEL_4:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, v27, 1, v3);
  *v1 = v14;
  v1[1] = v15;
  v1[2] = v40;
  v1[3] = v17;
  v1[4] = v21;
  v28 = (void (*)(uint64_t))v1[5];
  sub_1CC9C3EC0((uint64_t)v13, (uint64_t)v10, &qword_1EF9E28B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    v29 = sub_1CCA14E90(&qword_1EF9E2A90);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a1, 1, 1, v29);
  }
  else
  {
    v30 = (uint64_t)v37;
    sub_1CC9C3EC0((uint64_t)v10, (uint64_t)v37, &qword_1EF9E28B0);
    v28(v30);
    sub_1CC9C3E84(v30, &qword_1EF9E28B0);
    v31 = sub_1CCA14E90(&qword_1EF9E2A90);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a1, 0, 1, v31);
  }
}

void sub_1CCAA7D6C(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  void *v16;
  uint64_t v17;
  void (*v18)(_QWORD *);
  id v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  _QWORD v26[2];
  char v27;
  char v28;
  char v29;
  char v30;
  void *v31;
  uint64_t v32;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = *(_QWORD *)(v3 + 56) + 24 * v8;
    LOBYTE(v9) = *(_BYTE *)v12;
    v13 = *(_BYTE *)(v12 + 1);
    v14 = *(_BYTE *)(v12 + 2);
    v15 = *(_BYTE *)(v12 + 3);
    v16 = *(void **)(v12 + 8);
    v17 = *(_QWORD *)(v12 + 16);
    v1[3] = v6;
    v1[4] = v7;
    v18 = (void (*)(_QWORD *))v1[5];
    v26[0] = v10;
    v26[1] = v11;
    v27 = (char)v9;
    v28 = v13;
    v29 = v14;
    v30 = v15;
    v31 = v16;
    v32 = v17;
    swift_bridgeObjectRetain();
    v19 = v16;
    v18(v26);

    swift_bridgeObjectRelease();
    return;
  }
  v20 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v21 = (unint64_t)(v1[2] + 64) >> 6;
    if (v20 < v21)
    {
      v22 = v1[1];
      v23 = *(_QWORD *)(v22 + 8 * v20);
      if (v23)
      {
LABEL_7:
        v7 = (v23 - 1) & v23;
        v8 = __clz(__rbit64(v23)) + (v20 << 6);
        v6 = v20;
        goto LABEL_3;
      }
      v24 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v21)
      {
        v23 = *(_QWORD *)(v22 + 8 * v24);
        if (v23)
        {
LABEL_10:
          v20 = v24;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v21)
        {
          v23 = *(_QWORD *)(v22 + 8 * (v5 + 3));
          if (v23)
          {
            v20 = v5 + 3;
            goto LABEL_7;
          }
          v24 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v21)
          {
            v23 = *(_QWORD *)(v22 + 8 * v24);
            if (v23)
              goto LABEL_10;
            v20 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v21)
            {
              v23 = *(_QWORD *)(v22 + 8 * v20);
              if (v23)
                goto LABEL_7;
              v6 = v21 - 1;
              v25 = v5 + 6;
              while (v21 != v25)
              {
                v23 = *(_QWORD *)(v22 + 8 * v25++);
                if (v23)
                {
                  v20 = v25 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 32) = 0;
  }
}

void sub_1CCAA7F3C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease();
    return;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

id sub_1CCAA80C8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  id v9;

  v3 = *a1;
  v2 = a1[1];
  v4 = *((_BYTE *)a1 + 17);
  v5 = *((_BYTE *)a1 + 18);
  v6 = *((_BYTE *)a1 + 19);
  v9 = (id)a1[3];
  v7 = a1[4];
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a1 + 16);
  *(_BYTE *)(a2 + 17) = v4;
  *(_BYTE *)(a2 + 18) = v5;
  *(_BYTE *)(a2 + 19) = v6;
  *(_QWORD *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v2;
  swift_bridgeObjectRetain();
  return v9;
}

uint64_t sub_1CCAA8128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  int64_t v25;
  char *v26;
  unint64_t i;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;

  v4 = sub_1CCA14E90((uint64_t *)&unk_1EF9DF580);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for FMIPItem();
  v7 = *(_QWORD *)(v57 - 8);
  v8 = MEMORY[0x1E0C80A78](v57);
  v49 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v47 - v11;
  MEMORY[0x1E0C80A78](v10);
  v48 = (uint64_t)&v47 - v13;
  v14 = sub_1CCB63604();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v18);
  v59 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = a1;
  v20 = *(_QWORD *)(a1 + 56);
  v55 = a1 + 56;
  v21 = 1 << *(_BYTE *)(a1 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v56 = (unint64_t)(v21 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v25 = 0;
  v50 = MEMORY[0x1E0DEE9D8];
  v53 = v6;
  v54 = a2;
  v51 = v14;
  v52 = v7;
  v58 = v15;
  v26 = v59;
  if (!v23)
    goto LABEL_5;
LABEL_4:
  v61 = (v23 - 1) & v23;
  v62 = v25;
  for (i = __clz(__rbit64(v23)) | (v25 << 6); ; i = __clz(__rbit64(v29)) + (v30 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v26, *(_QWORD *)(v60 + 48) + *(_QWORD *)(v15 + 72) * i, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v26, 0, 1, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v26, 1, v14) == 1)
      goto LABEL_46;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v26, v14);
    v32 = *(_QWORD *)(a2 + 16);
    if (v32)
    {
      v33 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      swift_bridgeObjectRetain();
      v34 = *(_QWORD *)(v7 + 72);
      while (1)
      {
        sub_1CCA0BEEC(v33, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v36 = *((_QWORD *)v12 + 44);
        v35 = *((_QWORD *)v12 + 45);
        if (v36 == sub_1CCB635C8() && v35 == v37)
        {
          a2 = v54;
          swift_bridgeObjectRelease();
          goto LABEL_35;
        }
        v39 = sub_1CCB642A0();
        swift_bridgeObjectRelease();
        if ((v39 & 1) != 0)
          break;
        sub_1CCA0BF30((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v33 += v34;
        if (!--v32)
        {
          a2 = v54;
          swift_bridgeObjectRelease();
          v40 = 1;
          v7 = v52;
          v6 = v53;
          v14 = v51;
          goto LABEL_32;
        }
      }
      a2 = v54;
LABEL_35:
      v7 = v52;
      v15 = v58;
      swift_bridgeObjectRelease();
      v6 = v53;
      sub_1CC9FED60((uint64_t)v12, (uint64_t)v53, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v40 = 0;
      v14 = v51;
    }
    else
    {
      v40 = 1;
LABEL_32:
      v15 = v58;
    }
    v41 = v57;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v6, v40, 1, v57);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v41) == 1)
    {
      result = sub_1CC9C3E84((uint64_t)v6, (uint64_t *)&unk_1EF9DF580);
    }
    else
    {
      v42 = v48;
      sub_1CC9FED60((uint64_t)v6, v48, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CC9FED60(v42, v49, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v50 = sub_1CCAC9CDC(0, *(_QWORD *)(v50 + 16) + 1, 1, v50);
      v44 = *(_QWORD *)(v50 + 16);
      v43 = *(_QWORD *)(v50 + 24);
      if (v44 >= v43 >> 1)
        v50 = sub_1CCAC9CDC(v43 > 1, v44 + 1, 1, v50);
      v45 = v49;
      v46 = v50;
      *(_QWORD *)(v50 + 16) = v44 + 1;
      result = sub_1CC9FED60(v45, v46+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v44, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v15 = v58;
    }
    v25 = v62;
    v23 = v61;
    v26 = v59;
    if (v61)
      goto LABEL_4;
LABEL_5:
    v28 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v28 >= v56)
      goto LABEL_45;
    v29 = *(_QWORD *)(v55 + 8 * v28);
    v30 = v25 + 1;
    if (!v29)
    {
      v30 = v25 + 2;
      if (v25 + 2 >= v56)
        goto LABEL_45;
      v29 = *(_QWORD *)(v55 + 8 * v30);
      if (!v29)
      {
        v30 = v25 + 3;
        if (v25 + 3 >= v56)
          goto LABEL_45;
        v29 = *(_QWORD *)(v55 + 8 * v30);
        if (!v29)
        {
          v30 = v25 + 4;
          if (v25 + 4 >= v56)
            goto LABEL_45;
          v29 = *(_QWORD *)(v55 + 8 * v30);
          if (!v29)
            break;
        }
      }
    }
LABEL_20:
    v61 = (v29 - 1) & v29;
    v62 = v30;
  }
  v31 = v25 + 5;
  if (v25 + 5 >= v56)
  {
LABEL_45:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v26, 1, 1, v14);
LABEL_46:
    swift_release();
    return v50;
  }
  v29 = *(_QWORD *)(v55 + 8 * v31);
  if (v29)
  {
    v30 = v25 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    v30 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v30 >= v56)
      goto LABEL_45;
    v29 = *(_QWORD *)(v55 + 8 * v30);
    ++v31;
    if (v29)
      goto LABEL_20;
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1CCAA86B4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCAA86C4()
{
  return sub_1CCAAB13C((void (*)(_QWORD))MEMORY[0x1E0DEEEC0]);
}

uint64_t sub_1CCAA86D0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1CCA2FE0C;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_1CCA2FE0C;
  return sub_1CCA213EC();
}

uint64_t sub_1CCAA8738()
{
  return swift_deallocObject();
}

uint64_t sub_1CCAA8748()
{
  return swift_deallocObject();
}

uint64_t sub_1CCAA8758()
{
  uint64_t v0;

  return sub_1CCA9A4C4(v0);
}

uint64_t sub_1CCAA8760()
{
  return sub_1CCAAB13C((void (*)(_QWORD))MEMORY[0x1E0DEEEC0]);
}

uint64_t sub_1CCAA876C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1CCA2FE0C;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_1CCA2FE0C;
  return sub_1CCA26808();
}

uint64_t sub_1CCAA87D4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCAA87E4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCAA87F4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCAA8828()
{
  return swift_deallocObject();
}

uint64_t sub_1CCAA8838()
{
  return swift_deallocObject();
}

uint64_t sub_1CCAA8848()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCAA887C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_1CCA2FE0C;
  *(_QWORD *)(v3 + 144) = v2;
  *(_OWORD *)(v3 + 128) = v4;
  return swift_task_switch();
}

uint64_t sub_1CCAA88E8(unsigned __int8 *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1CCA9C24C(a1, a2, a3, a4, v4[2], v4[3], v4[4], v4[5]);
}

uint64_t sub_1CCAA88F4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCAA8950()
{
  uint64_t v0;

  return sub_1CCA4102C(v0 + 16, *(_QWORD **)(v0 + 104), *(_QWORD *)(v0 + 112), *(void (**)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, void *, uint64_t))(v0 + 120), *(_QWORD *)(v0 + 128));
}

uint64_t sub_1CCAA8960()
{
  return swift_deallocObject();
}

uint64_t sub_1CCAA8970()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1CCAA8994()
{
  return swift_deallocObject();
}

uint64_t sub_1CCAA89A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCAA89C8(char *a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_1CCA9D250(a1, a2, a3, *(uint64_t (**)(uint64_t *, uint64_t, void *))(v3 + 16));
}

uint64_t sub_1CCAA89D0(uint64_t a1)
{
  uint64_t v1;

  return sub_1CCA83B1C(a1, *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1CCAA89D8(uint64_t a1, int a2, void *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = v4;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v40 = MEMORY[0x1E0DEE9D8];
    sub_1CCA63A84(0, v6, 0);
    v7 = v40;
    v11 = *(_QWORD *)(type metadata accessor for FMIPItem() - 8);
    v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v29 = *(_QWORD *)(v11 + 72);
    v30 = a2 & 0xFF010101;
    while (1)
    {
      sub_1CCAA43B4(v12, v30, a3, (uint64_t)&v32, a4);
      if (v5)
        break;
      v5 = 0;
      v14 = v32;
      v13 = v33;
      v15 = v34;
      v16 = v35;
      v17 = v36;
      v18 = v37;
      v19 = v38;
      v20 = v39;
      v22 = *(_QWORD *)(v7 + 16);
      v21 = *(_QWORD *)(v7 + 24);
      v40 = v7;
      if (v22 >= v21 >> 1)
      {
        v28 = v33;
        v26 = v37;
        v27 = v36;
        v25 = v38;
        sub_1CCA63A84(v21 > 1, v22 + 1, 1);
        v19 = v25;
        v18 = v26;
        v17 = v27;
        v13 = v28;
        v7 = v40;
      }
      *(_QWORD *)(v7 + 16) = v22 + 1;
      v23 = v7 + 40 * v22;
      *(_QWORD *)(v23 + 32) = v14;
      *(_QWORD *)(v23 + 40) = v13;
      *(_BYTE *)(v23 + 48) = v15;
      *(_BYTE *)(v23 + 49) = v16;
      *(_BYTE *)(v23 + 50) = v17;
      *(_BYTE *)(v23 + 51) = v18;
      *(_QWORD *)(v23 + 56) = v19;
      *(_QWORD *)(v23 + 64) = v20;
      v12 += v29;
      if (!--v6)
        return v7;
    }
    swift_release();
  }
  return v7;
}

uint64_t sub_1CCAA8B70()
{
  return sub_1CCAAB13C((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1CCAA8B7C(uint64_t a1)
{
  uint64_t v1;

  return sub_1CCA9D9FC(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1CCAA8B8C(char *a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_1CCA9E8F4(a1, a2, a3, *(uint64_t (**)(uint64_t *, uint64_t, void *))(v3 + 16));
}

uint64_t sub_1CCAA8B94()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCAA8BC0(uint64_t a1)
{
  uint64_t v1;

  return sub_1CCA8440C(a1, *(void (**)(char *, uint64_t, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1CCAA8BCC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(BOOL))(v1 + 16))(a1 != 0);
}

unint64_t sub_1CCAA8BF8()
{
  unint64_t result;

  result = qword_1EF9E2858;
  if (!qword_1EF9E2858)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPContentObservation, &type metadata for FMIPContentObservation);
    atomic_store(result, (unint64_t *)&qword_1EF9E2858);
  }
  return result;
}

unint64_t sub_1CCAA8C40()
{
  unint64_t result;

  result = qword_1EF9E2860;
  if (!qword_1EF9E2860)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPContentObservation, &type metadata for FMIPContentObservation);
    atomic_store(result, (unint64_t *)&qword_1EF9E2860);
  }
  return result;
}

unint64_t sub_1CCAA8C88()
{
  unint64_t result;

  result = qword_1EF9E2868;
  if (!qword_1EF9E2868)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPContentObservation, &type metadata for FMIPContentObservation);
    atomic_store(result, (unint64_t *)&qword_1EF9E2868);
  }
  return result;
}

unint64_t sub_1CCAA8CD0()
{
  unint64_t result;

  result = qword_1EF9E2870;
  if (!qword_1EF9E2870)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPContentObservation, &type metadata for FMIPContentObservation);
    atomic_store(result, (unint64_t *)&qword_1EF9E2870);
  }
  return result;
}

uint64_t sub_1CCAA8D14@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1CCAA8D30(a1, &OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate, a2);
}

uint64_t sub_1CCAA8D24@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1CCAA8D30(a1, &OBJC_IVAR____TtC8FMIPCore11FMIPManager_siriDelegate, a2);
}

uint64_t sub_1CCAA8D30@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a1 + *a2;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v4);
  v6 = *(_QWORD *)(v4 + 8);
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t sub_1CCAA8D84(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_siriDelegate;
  swift_beginAccess();
  *(_QWORD *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1CCAA8DE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_selectedDevice;
  swift_beginAccess();
  return sub_1CC9EAB74(v3, a2, &qword_1ED8A7170);
}

uint64_t sub_1CCAA8E44@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_initializedSubsystems);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

ValueMetadata *type metadata accessor for FMIPContentObservation()
{
  return &type metadata for FMIPContentObservation;
}

uint64_t sub_1CCAA8EA8()
{
  return type metadata accessor for FMIPManager();
}

uint64_t method lookup function for FMIPManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPManager.__allocating_init(configuration:ownerSession:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t sub_1CCAA8EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1CCB63868();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63820();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v10 = sub_1CCB637FC();
  sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
  v11 = sub_1CCB637D8();
  v12 = sub_1CCB63D48();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPManager: garbageCollectorDidPurgeAccountRelatedFiles", v13, 2u);
    MEMORY[0x1D17B214C](v13, -1, -1);
  }

  sub_1CCAA59FC();
  sub_1CCB63814();
  aBlock[4] = sub_1CCAAA1B0;
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F7F58;
  v14 = _Block_copy(aBlock);
  swift_retain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v5, v9, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

void sub_1CCAA90D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v6;
  void *v7;
  _QWORD v8[6];

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPManager: willTriggerLastLocationPrompt", v5, 2u);
    MEMORY[0x1D17B214C](v5, -1, -1);
  }

  v6 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v8[4] = sub_1CCAAB318;
  v8[5] = v1;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = sub_1CC9C37C0;
  v8[3] = &unk_1E88F8830;
  v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_lowBatteryLocateEnabledWithCompletion_, v7);
  _Block_release(v7);

}

uint64_t sub_1CCAA924C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t ObjectType;
  char *v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t aBlock[6];
  uint64_t v36;

  v2 = sub_1CCB63868();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63820();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v33 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v9 = sub_1CCB637FC();
  sub_1CCA16C20(v9, (uint64_t)qword_1ED8AD7F8);
  v10 = a1;
  v11 = a1;
  v12 = sub_1CCB637D8();
  v13 = sub_1CCB63D48();
  if (os_log_type_enabled(v12, v13))
  {
    v32 = v2;
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v30 = v7;
    v16 = v15;
    aBlock[0] = v15;
    *(_DWORD *)v14 = 136315138;
    v31 = v6;
    v36 = (uint64_t)a1;
    v17 = a1;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v18 = sub_1CCB639AC();
    v36 = sub_1CCA0CB60(v18, v19, aBlock);
    v6 = v31;
    sub_1CCB63E44();
    v2 = v32;
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v12, v13, "FMIPManager: initializationDidFail %s", v14, 0xCu);
    swift_arrayDestroy();
    v20 = v16;
    v7 = v30;
    MEMORY[0x1D17B214C](v20, -1, -1);
    MEMORY[0x1D17B214C](v14, -1, -1);
  }
  else
  {

  }
  v21 = v34;
  v22 = v34 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v22);
  if (result)
  {
    v24 = *(_QWORD *)(v22 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v24 + 24))(v21, a1, ObjectType, v24);
    result = swift_unknownObjectRelease();
  }
  if (a1)
  {
    v26 = v33;
    sub_1CCB63814();
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = v21;
    *(_QWORD *)(v27 + 24) = a1;
    aBlock[4] = (uint64_t)sub_1CCAAB67C;
    aBlock[5] = v27;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CCA00C38;
    aBlock[3] = (uint64_t)&unk_1E88F8A60;
    v28 = _Block_copy(aBlock);
    v29 = a1;
    swift_retain();
    sub_1CCB63844();
    MEMORY[0x1D17B1318](0, v5, v26, v28);
    _Block_release(v28);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v26, v6);
    return swift_release();
  }
  return result;
}

uint64_t sub_1CCAA95E4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;

  v2 = v1;
  v3 = *a1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v4 = sub_1CCB637FC();
  sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
  v5 = sub_1CCB637D8();
  v6 = sub_1CCB63D48();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPManager: didUpdateRangingParameters", v7, 2u);
    MEMORY[0x1D17B214C](v7, -1, -1);
  }

  v8 = v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v8);
  if (result)
  {
    v10 = *(_QWORD *)(v8 + 8);
    ObjectType = swift_getObjectType();
    v12 = v3;
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v10 + 160))(v2, &v12, ObjectType, v10);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCAA9724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];

  v4 = v3;
  v8 = sub_1CCB635B0();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v35 - v13;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v15 = sub_1CCB637FC();
  sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD7F8);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v40 = a1;
  v16(v14, a1, v8);
  v16(v12, a2, v8);
  swift_bridgeObjectRetain_n();
  v17 = sub_1CCB637D8();
  v18 = sub_1CCB63D48();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v37 = v3;
    v20 = v19;
    v36 = swift_slowAlloc();
    v42[0] = v36;
    *(_DWORD *)v20 = 136315650;
    v39 = a3;
    v21 = sub_1CCB634FC();
    v41 = sub_1CCA0CB60(v21, v22, v42);
    v38 = a2;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    v23 = *(void (**)(char *, uint64_t))(v9 + 8);
    v23(v14, v8);
    *(_WORD *)(v20 + 12) = 2080;
    v24 = sub_1CCB634FC();
    v41 = sub_1CCA0CB60(v24, v25, v42);
    a3 = v39;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    v23(v12, v8);
    *(_WORD *)(v20 + 22) = 2048;
    v26 = *(_QWORD *)(a3 + 16);
    swift_bridgeObjectRelease();
    v41 = v26;
    a2 = v38;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v17, v18, "FMIPManager: didRefresh startDate: %s, endDate: %s, tapContext: %ld", (uint8_t *)v20, 0x20u);
    v27 = v36;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v27, -1, -1);
    v28 = v20;
    v4 = v37;
    MEMORY[0x1D17B214C](v28, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease();
    v29 = *(void (**)(char *, uint64_t))(v9 + 8);
    v29(v14, v8);
    v29(v12, v8);

    swift_bridgeObjectRelease();
  }
  v30 = v4 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v30);
  v32 = v40;
  if (result)
  {
    v33 = *(_QWORD *)(v30 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 80))(v4, v32, a2, a3, ObjectType, v33);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCAA9A74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  uint8_t *v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t aBlock[6];

  v2 = v1;
  v4 = sub_1CCB63868();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63820();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v32 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v11 = sub_1CCB637FC();
  sub_1CCA16C20(v11, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain_n();
  v12 = sub_1CCB637D8();
  v13 = sub_1CCB63D48();
  if (os_log_type_enabled(v12, v13))
  {
    v31 = v4;
    v14 = (uint8_t *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    aBlock[0] = v28;
    v29 = v8;
    *(_DWORD *)v14 = 136315138;
    v26 = v14 + 4;
    v27 = v14;
    sub_1CCB63604();
    v30 = v5;
    v15 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    type metadata accessor for FMIPDeviceConnectedState(0);
    sub_1CC9CAA38(&qword_1ED8A7140, v15, MEMORY[0x1E0CB09C8]);
    swift_bridgeObjectRetain();
    v16 = sub_1CCB638EC();
    v18 = v17;
    swift_bridgeObjectRelease();
    v19 = v16;
    v4 = v31;
    v33 = sub_1CCA0CB60(v19, v18, aBlock);
    v8 = v29;
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    v5 = v30;
    swift_bridgeObjectRelease();
    v20 = v27;
    _os_log_impl(&dword_1CC9BF000, v12, v13, "FMIPManager: didReceive deviceConnectedStates: %s", v27, 0xCu);
    v21 = v28;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v21, -1, -1);
    MEMORY[0x1D17B214C](v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v22 = v32;
  sub_1CCB63814();
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v2;
  *(_QWORD *)(v23 + 24) = a1;
  aBlock[4] = (uint64_t)sub_1CCAA9E10;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA00C38;
  aBlock[3] = (uint64_t)&unk_1E88F7918;
  v24 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v7, v22, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v22, v8);
  return swift_release();
}

uint64_t sub_1CCAA9DFC()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAA9E10()
{
  uint64_t v0;

  return sub_1CCAA218C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1CCAA9E18()
{
  return sub_1CCAAB13C((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAA9E24()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAA9E38()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

void sub_1CCAA9E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isItemsSnapshotMode) == 1
    && (*(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_snapshotItemsLocatedResponseReceived) & 1) == 0)
  {
    v3 = *(_QWORD *)(v1 + 24);
    *(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_snapshotItemsLocatedResponseReceived) = 1;
    sub_1CCA9AFEC(v3, 0);
  }
}

uint64_t sub_1CCAA9EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCAA9EE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];

  v3 = sub_1CCB63868();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63820();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCB63814();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_1CCAAA10C;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F7C88;
  v12 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v6, v10, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t sub_1CCAAA06C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCAAA090()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAA0A8(__n128 a1)
{
  return sub_1CCA05D40((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, __n128))sub_1CCAA3B5C, a1);
}

uint64_t sub_1CCAAA0B4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCAAA0F8()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAA10C()
{
  uint64_t v0;

  return sub_1CCAA2394(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCAAA114()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAA128()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEB08], (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1CCAAA13C()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEB08], (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1CCAAA150()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAA164()
{
  uint64_t v0;

  return sub_1CCAA2C80(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCAAA16C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCAAA1A0()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

void sub_1CCAAA1B0()
{
  uint64_t v0;

  sub_1CCAA6084(v0);
}

uint64_t sub_1CCAAA1B8()
{
  uint64_t v0;

  return sub_1CC9C2270(v0);
}

uint64_t sub_1CCAAA1C0()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAA1D4()
{
  uint64_t v0;

  return sub_1CCAA2EE8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCAAA1DC()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAA1F0()
{
  uint64_t v0;

  return sub_1CCAA335C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCAAA1F8()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCAAA230()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1CCAAA264(__n128 a1)
{
  return sub_1CCA05D40((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, __n128))sub_1CCAA4A78, a1);
}

uint64_t sub_1CCAAA270()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEB08], (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1CCAAA284()
{
  uint64_t v0;

  return sub_1CCAA57C0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCAAA28C()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAA2A0()
{
  uint64_t v0;

  return sub_1CCAA0E80(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCAAA2A8()
{
  uint64_t v0;

  return sub_1CCAA1C4C(v0);
}

uint64_t sub_1CCAAA2B0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for FMIPItem();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  swift_release();
  v3 = v0 + ((v2 + 24) & ~v2);
  swift_release();
  if (*(_QWORD *)(v3 + 176))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = v3 + v1[13];
  v5 = type metadata accessor for FMIPItemLostModeMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v4 + *(int *)(v5 + 24);
    v7 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v3 + v1[16] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v3 + v1[24];
  type metadata accessor for FMIPProductType();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v10 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(v8, 1, v10))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v8 + v10[12];
      v12 = sub_1CCB63490();
      v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
      v13(v11, v12);
      v13(v8 + v10[13], v12);
      v13(v8 + v10[14], v12);
      v13(v8 + v10[15], v12);
      v13(v8 + v10[16], v12);
      v13(v8 + v10[17], v12);
    }
  }
  else if (EnumCaseMultiPayload == 1 || !EnumCaseMultiPayload && *(_QWORD *)(v8 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_1CCAAA5F4()
{
  return sub_1CCAAAC3C((uint64_t (*)(_QWORD))type metadata accessor for FMIPItem, sub_1CCAA1BC0);
}

uint64_t sub_1CCAAA608()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

void sub_1CCAAA61C()
{
  uint64_t v0;

  sub_1CCAB70E0(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t sub_1CCAAA628()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

void sub_1CCAAA674()
{
  uint64_t v0;

  sub_1CCA9C5FC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(uint64_t *, unint64_t, uint64_t, uint64_t))(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_1CCAAA68C()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAA6A0()
{
  uint64_t v0;

  return sub_1CCAA03BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCAAA6AC()
{
  return sub_1CCAAAC3C((uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice, sub_1CCAA0DF4);
}

uint64_t sub_1CCAAA6C0()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAA6D4()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAA6E8()
{
  uint64_t v0;

  return sub_1CCA9F998(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCAAA6F4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = (int *)type metadata accessor for FMIPDevice();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  swift_release();
  v3 = v0 + ((v2 + 24) & ~v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(v3 + 472))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = v3 + v1[28];
  v5 = type metadata accessor for FMIPPlaySoundMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = v4 + *(int *)(v5 + 20);
    v7 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v8 = v3 + v1[29];
  v9 = type metadata accessor for FMIPDeviceLostModeMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = v8 + *(int *)(v9 + 48);
    v11 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  v12 = v3 + v1[30];
  v13 = type metadata accessor for FMIPLockMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {
    v14 = v12 + *(int *)(v13 + 20);
    v15 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  }
  v16 = v3 + v1[31];
  v17 = type metadata accessor for FMIPEraseMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v18 = v16 + *(int *)(v17 + 20);
    v19 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v20 = v3 + v1[32];
  v21 = type metadata accessor for FMIPItemGroup();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v20 + *(int *)(v21 + 48);
    v23 = type metadata accessor for FMIPItemLostModeMetadata();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = v22 + *(int *)(v23 + 24);
      v25 = sub_1CCB635B0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v26 = v3 + v1[38];
  v27 = sub_1CCB635B0();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (!v29(v26, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  v30 = v3 + v1[39];
  if (!v29(v30, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v27);
  v31 = v3 + v1[40];
  if (!v29(v31, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v31, v27);
  v32 = v3 + v1[41];
  if (!v29(v32, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v32, v27);
  return swift_deallocObject();
}

uint64_t sub_1CCAAAC28()
{
  return sub_1CCAAAC3C((uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice, sub_1CCAA0330);
}

uint64_t sub_1CCAAAC3C(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(*(_QWORD *)(v2 + 16), v2 + ((v3 + 24) & ~v3));
}

uint64_t sub_1CCAAAC80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPDevice();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCAAACC4()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAACD8()
{
  return sub_1CCAAB184((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAACE4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCAAAD08()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  unsigned int v30;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (int *)type metadata accessor for FMIPUnknownItem();
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v0 + v4 + v1[9];
  type metadata accessor for FMIPProductType();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v10 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(v8, 1, v10))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v8 + v10[12];
      v35 = v5;
      v12 = sub_1CCB63490();
      v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
      v13(v11, v12);
      v13(v8 + v10[13], v12);
      v13(v8 + v10[14], v12);
      v13(v8 + v10[15], v12);
      v13(v8 + v10[16], v12);
      v14 = v12;
      v5 = v35;
      v13(v8 + v10[17], v14);
    }
  }
  else if (EnumCaseMultiPayload == 1 || !EnumCaseMultiPayload && *(_QWORD *)(v8 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v15 = v6 + v1[11];
  v16 = type metadata accessor for FMIPUnknownItemUTMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
  {
    v34 = (v3 + 16) & ~v3;
    v36 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = v15 + *(int *)(v16 + 24);
    v18 = type metadata accessor for FMIPUnknownItemProductMetadata();
    v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48);
    if (!v19(v17, 1, v18))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20 = v17 + *(int *)(v18 + 32);
      v21 = sub_1CCB63490();
      v32 = *(_QWORD *)(v21 - 8);
      v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
      if (!v33(v20, 1, v21))
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v20, v21);
      v22 = v17 + *(int *)(v18 + 36);
      if (!v33(v22, 1, v21))
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v22, v21);
    }
    v23 = v15 + *(int *)(v16 + 28);
    v24 = v19(v23, 1, v18);
    v4 = v34;
    v5 = v36;
    if (!v24)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = v23 + *(int *)(v18 + 32);
      v26 = sub_1CCB63490();
      v27 = *(_QWORD *)(v26 - 8);
      v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
      if (!v28(v25, 1, v26))
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
      v29 = v23 + *(int *)(v18 + 36);
      v30 = v28(v29, 1, v26);
      v4 = v34;
      v5 = v36;
      if (!v30)
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v26);
    }
  }

  swift_bridgeObjectRelease();
  swift_release();
  objc_release(*(id *)(v0
                     + ((((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
  return swift_deallocObject();
}

uint64_t sub_1CCAAB0C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for FMIPUnknownItem() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1CCAA2780(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1CCAAB130()
{
  return sub_1CCAAB13C((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAB13C(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCAAB16C()
{
  return sub_1CCAAB184((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1CCAAB178()
{
  return sub_1CCAAB184((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1CCAAB184(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release();
  if (*(_QWORD *)(v1 + 32))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCAAB1C4()
{
  uint64_t v0;

  return sub_1CCAA2BA0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

uint64_t sub_1CCAAB1D0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCAAB1FC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCAAB250()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAB264()
{
  uint64_t v0;

  return sub_1CCAA2054(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCAAB26C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCAAB2C0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCAAB30C()
{
  uint64_t v0;

  return sub_1CCAA20E0(*(_QWORD *)(v0 + 16), v0 + 24);
}

void sub_1CCAAB318(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_1CCAA1F0C(a1, a2, v2);
}

uint64_t sub_1CCAAB320()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAB334()
{
  uint64_t v0;

  return sub_1CCAA2D0C(v0);
}

uint64_t sub_1CCAAB33C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = sub_1CCB63868();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63820();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v12 = sub_1CCB637FC();
  sub_1CCA16C20(v12, (uint64_t)qword_1ED8AD7F8);
  v13 = sub_1CCB637D8();
  v14 = sub_1CCB63D48();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v27 = v2;
    v16 = a1;
    v17 = v9;
    v18 = v8;
    v19 = v5;
    v20 = v4;
    v21 = v15;
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1CC9BF000, v13, v14, "FMIPManager: dataManager updated items group", v15, 2u);
    v22 = v21;
    v4 = v20;
    v5 = v19;
    v8 = v18;
    v9 = v17;
    a1 = v16;
    v2 = v27;
    MEMORY[0x1D17B214C](v22, -1, -1);
  }

  sub_1CCB63814();
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = a1;
  *(_QWORD *)(v23 + 24) = v2;
  aBlock[4] = sub_1CCAAB5AC;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F8920;
  v24 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v7, v11, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

uint64_t sub_1CCAAB59C()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1CCAAB5AC()
{
  uint64_t v0;

  return sub_1CCAA33E8(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCAAB5B4()
{
  uint64_t v0;

  return sub_1CCAA3648(v0);
}

uint64_t sub_1CCAAB5BC()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCAAB5D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1CCAAB62C()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEBF0]);
}

uint64_t sub_1CCAAB640(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 24));
  return swift_deallocObject();
}

void sub_1CCAAB67C()
{
  uint64_t v0;

  sub_1CCA23688(MEMORY[0x1E0DEE9D8], *(id *)(v0 + 24));
}

uint64_t sub_1CCAAB6A8()
{
  uint64_t v0;

  return sub_1CCA99A18(v0);
}

uint64_t storeEnumTagSinglePayload for OfflineFindingDeviceStateType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCAAB6FC + 4 * byte_1CCB6B965[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CCAAB730 + 4 * byte_1CCB6B960[v4]))();
}

uint64_t sub_1CCAAB730(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAAB738(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAAB740);
  return result;
}

uint64_t sub_1CCAAB74C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAAB754);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCAAB758(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAAB760(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAAB9E8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CCAA6630(a1);
}

uint64_t sub_1CCAAB9FC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC9C3C3C(a1);
}

unint64_t FMDemoManager.DemoContext.assetFilename.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000014;
  else
    return 0xD000000000000013;
}

unint64_t FMDemoManager.DemoContext.userDefaultsKey.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000001CLL;
  else
    return 0xD00000000000001BLL;
}

BOOL static FMDemoManager.DemoContext.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t FMDemoManager.DemoContext.hash(into:)()
{
  return sub_1CCB64348();
}

uint64_t FMDemoManager.DemoContext.hashValue.getter()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

uint64_t sub_1CCAABB10()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

uint64_t sub_1CCAABB50()
{
  return sub_1CCB64348();
}

uint64_t sub_1CCAABB74()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

unint64_t static FMDemoManager.sharedPreferencesDomain.getter()
{
  return 0xD000000000000010;
}

void sub_1CCAABBCC(uint64_t a1)
{
  sub_1CCA23358(a1, 0, 0xD00000000000001BLL, 0x80000001CCB7B3A0, byte_1EF9E28D8);
}

id static FMDemoManager.hasDemoModeUserDefault(for:)()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;

  v0 = (void *)objc_opt_self();
  v1 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v2 = (void *)sub_1CCB63964();
  v3 = objc_msgSend(v0, sel_BOOLForKey_inDomain_, v1, v2);

  return v3;
}

uint64_t static FMDemoManager.peopleDemoEnabled.getter()
{
  return sub_1CCA2341C(&qword_1EF9DEFB8, byte_1EF9E28D8);
}

unint64_t sub_1CCAABCE4()
{
  unint64_t result;

  result = qword_1ED8A8E48;
  if (!qword_1ED8A8E48)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6BF44, &type metadata for FMDemoManager.Error);
    atomic_store(result, (unint64_t *)&qword_1ED8A8E48);
  }
  return result;
}

uint64_t FMDemoManager.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t FMDemoManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t sub_1CCAABD44()
{
  unint64_t result;

  result = qword_1EF9E28E0;
  if (!qword_1EF9E28E0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMDemoManager.DemoContext, &type metadata for FMDemoManager.DemoContext);
    atomic_store(result, (unint64_t *)&qword_1EF9E28E0);
  }
  return result;
}

uint64_t method lookup function for FMDemoManager()
{
  return swift_lookUpClassMethod();
}

uint64_t storeEnumTagSinglePayload for FMDemoManager.DemoContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCAABDE0 + 4 * byte_1CCB6BE1D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCAABE14 + 4 * byte_1CCB6BE18[v4]))();
}

uint64_t sub_1CCAABE14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAABE1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAABE24);
  return result;
}

uint64_t sub_1CCAABE30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAABE38);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCAABE3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAABE44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMDemoManager.DemoContext()
{
  return &type metadata for FMDemoManager.DemoContext;
}

uint64_t storeEnumTagSinglePayload for FMDemoManager.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CCAABEA0 + 4 * byte_1CCB6BE22[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CCAABEC0 + 4 * byte_1CCB6BE27[v4]))();
}

_BYTE *sub_1CCAABEA0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CCAABEC0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCAABEC8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCAABED0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCAABED8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCAABEE0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FMDemoManager.Error()
{
  return &type metadata for FMDemoManager.Error;
}

unint64_t sub_1CCAABF00()
{
  unint64_t result;

  result = qword_1EF9E28E8;
  if (!qword_1EF9E28E8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6BF1C, &type metadata for FMDemoManager.Error);
    atomic_store(result, (unint64_t *)&qword_1EF9E28E8);
  }
  return result;
}

uint64_t sub_1CCAABF44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t sub_1CCAABF4C(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1CCA6388C(0, v1, 0);
    v2 = v14;
    v4 = *(_QWORD *)(sub_1CCB63604() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = sub_1CCB635C8();
      v9 = v8;
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
        sub_1CCA6388C(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v14 + 16) = v11 + 1;
      v12 = v14 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1CCAAC048(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_1CCAB6A9C(a1, (uint64_t)sub_1CCAB6F24, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_1CCAAC0CC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t result;

  v0 = MEMORY[0x1E0DEE9D8];
  v1 = sub_1CCAC4F78(MEMORY[0x1E0DEE9D8]);
  v2 = sub_1CCAC510C(v0);
  v3 = sub_1CCAC5120(v0);
  result = sub_1CCAC5120(v0);
  *(_QWORD *)&xmmword_1EF9E28F0 = v0;
  *((_QWORD *)&xmmword_1EF9E28F0 + 1) = v1;
  qword_1EF9E2900 = v2;
  unk_1EF9E2908 = v3;
  qword_1EF9E2910 = result;
  return result;
}

uint64_t sub_1CCAAC134(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCAAC174 + 4 * byte_1CCB6BF90[a1]))(0x61636F4C65666173, 0xED0000736E6F6974);
}

unint64_t sub_1CCAAC174()
{
  return 0xD000000000000014;
}

uint64_t sub_1CCAAC1E0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;

  v3 = v1;
  v5 = sub_1CCA14E90(&qword_1EF9E2998);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCABAC40();
  sub_1CCB643CC();
  v11 = *v3;
  HIBYTE(v10) = 0;
  sub_1CCA14E90(&qword_1EF9E2930);
  sub_1CCA1552C(&qword_1EF9E29A0, &qword_1EF9E2930, (uint64_t (*)(void))sub_1CCA227BC, MEMORY[0x1E0DEAF10]);
  sub_1CCB64210();
  if (!v2)
  {
    v11 = v3[1];
    HIBYTE(v10) = 1;
    sub_1CCA14E90(&qword_1EF9E2948);
    sub_1CCABADD0((unint64_t *)&unk_1EF9E29B0, &qword_1EF9E2948, (uint64_t (*)(void))sub_1CCA7B834);
    sub_1CCB64210();
    v11 = v3[2];
    HIBYTE(v10) = 2;
    sub_1CCA14E90(&qword_1EF9E2970);
    sub_1CCABADD0(&qword_1EF9E29C8, &qword_1EF9E2970, (uint64_t (*)(void))sub_1CCABAE54);
    sub_1CCB64210();
    v11 = v3[3];
    HIBYTE(v10) = 3;
    sub_1CCA14E90(&qword_1EF9E2988);
    sub_1CCABAE98();
    sub_1CCB64210();
    v11 = v3[4];
    HIBYTE(v10) = 4;
    sub_1CCB64210();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1CCAAC460()
{
  unsigned __int8 *v0;

  return sub_1CCAAC134(*v0);
}

uint64_t sub_1CCAAC468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCABA5EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCAAC48C()
{
  sub_1CCABAC40();
  return sub_1CCB643D8();
}

uint64_t sub_1CCAAC4B4()
{
  sub_1CCABAC40();
  return sub_1CCB643E4();
}

double sub_1CCAAC4DC@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1CCABA804(a1, v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1CCAAC520(_QWORD *a1)
{
  return sub_1CCAAC1E0(a1);
}

uint64_t sub_1CCAAC558(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, int a6, void *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  os_log_type_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  void (*v112)(char *, uint64_t, uint64_t);
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129[2];

  v8 = v7;
  v122 = a2;
  v123 = a7;
  LODWORD(v127) = a6;
  LODWORD(v121) = a5;
  v125 = a1;
  v126 = a4;
  v10 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  v11 = MEMORY[0x1E0C80A78](v10);
  v120 = (uint64_t)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v119 = (uint64_t)&v109 - v13;
  v14 = sub_1CCA14E90(&qword_1EF9E2A78);
  MEMORY[0x1E0C80A78](v14);
  v118 = (char *)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1CCA14E90(&qword_1EF9E2A20);
  MEMORY[0x1E0C80A78](v16);
  v117 = (char *)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1CCA14E90(&qword_1EF9E2A50);
  MEMORY[0x1E0C80A78](v18);
  v115 = (char *)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1CCA14E90(&qword_1EF9E2AB8);
  MEMORY[0x1E0C80A78](v20);
  v114 = (char *)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1CCA14E90(&qword_1EF9E2AE0);
  MEMORY[0x1E0C80A78](v22);
  v113 = (char *)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1CCA14E90(&qword_1EF9E2AA0);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1CCA14E90((uint64_t *)&unk_1EF9E2AA8);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v116 = (uint64_t)&v109 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1CCB63604();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v109 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *a3;
  *(_QWORD *)(v8 + 40) = 0;
  swift_unknownObjectWeakInit();
  sub_1CCB635F8();
  v35 = sub_1CCB635C8();
  v37 = v36;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
  *(_QWORD *)(v8 + 48) = v35;
  *(_QWORD *)(v8 + 56) = v37;
  v38 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(v8 + 64) = 0;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_QWORD *)(v8 + 168) = 0;
  *(_QWORD *)(v8 + 176) = v38;
  v39 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v8 + 184) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v8 + 192) = v39;
  *(_QWORD *)(v8 + 200) = v39;
  *(_QWORD *)(v8 + 208) = v39;
  *(_QWORD *)(v8 + 216) = v39;
  *(_QWORD *)(v8 + 224) = v39;
  *(_QWORD *)(v8 + 232) = v39;
  *(_QWORD *)(v8 + 240) = v38;
  *(_QWORD *)(v8 + 248) = v39;
  *(_QWORD *)(v8 + 256) = v39;
  *(_QWORD *)(v8 + 264) = v39;
  *(_QWORD *)(v8 + 272) = v39;
  *(_QWORD *)(v8 + 280) = v38;
  *(_QWORD *)(v8 + 288) = v38;
  *(_QWORD *)(v8 + 296) = v38;
  *(_QWORD *)(v8 + 304) = v39;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  v124 = v34;
  *(_QWORD *)(v8 + 16) = v34;
  LOBYTE(v33) = v121;
  *(_BYTE *)(v8 + 24) = v121;
  *(_BYTE *)(v8 + 25) = v127;
  *(_QWORD *)(v8 + 80) = v38;
  v40 = v123;
  *(_QWORD *)(v8 + 72) = v123;
  v123 = v40;
  if ((v33 & 1) != 0)
  {
    v41 = v116;
    sub_1CC9C89B0(0xD000000000000012, 0x80000001CCB7B6C0, 0x6174614450494D46, 0xEF726567616E614DLL, v116);
    sub_1CC9EAB74(v41, (uint64_t)v26, (uint64_t *)&unk_1EF9E2AA8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v26, 0, 1, v27);
    sub_1CCA14E90(&qword_1ED8AA310);
    swift_allocObject();
    v42 = v122;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v8 + 328) = sub_1CC9F0B6C(v125, v42, 0x2E73656369766544, 0xEC00000061746164, (uint64_t)v26, &qword_1EF9E2AA0);
    swift_release();
    v121 = sub_1CCB6376C();
    v112 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 16);
    v43 = (uint64_t)v113;
    v112(v113, v41, v121);
    v111 = v41 + *(int *)(v27 + 44);
    v44 = v111;
    v45 = v41;
    v46 = sub_1CCA14E90(&qword_1EF9E2AE8);
    v47 = v43 + *(int *)(v46 + 44);
    v48 = sub_1CCB63790();
    v49 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
    v50 = v44;
    v51 = v48;
    v109 = v48;
    v49(v47, v50);
    v110 = v49;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v43, 0, 1, v46);
    sub_1CCA14E90(&qword_1ED8AA318);
    swift_allocObject();
    swift_bridgeObjectRetain();
    v52 = v125;
    *(_QWORD *)(v8 + 336) = sub_1CC9F0B6C(v125, v42, 0xD000000000000012, 0x80000001CCB7B6E0, v43, &qword_1EF9E2AE0);
    swift_release();
    v53 = (uint64_t)v114;
    v54 = v112;
    v112(v114, v45, v121);
    v55 = sub_1CCA14E90(&qword_1EF9E2AC0);
    v56 = v111;
    ((void (*)(uint64_t, uint64_t, uint64_t))v49)(v53 + *(int *)(v55 + 44), v111, v51);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v53, 0, 1, v55);
    sub_1CCA14E90((uint64_t *)&unk_1ED8AA300);
    swift_allocObject();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v8 + 344) = sub_1CC9F0B6C(v52, v42, 0x61642E72656E774FLL, 0xEA00000000006174, v53, &qword_1EF9E2AB8);
    swift_release();
    v57 = (uint64_t)v115;
    v58 = v45;
    v59 = v121;
    v54(v115, v45, v121);
    v60 = sub_1CCA14E90(&qword_1EF9E2A58);
    v62 = v109;
    v61 = (void (*)(uint64_t, uint64_t, uint64_t))v110;
    ((void (*)(uint64_t, uint64_t, uint64_t))v110)(v57 + *(int *)(v60 + 44), v56, v109);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v57, 0, 1, v60);
    sub_1CCA14E90(&qword_1ED8A8DA8);
    swift_allocObject();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v8 + 312) = sub_1CC9F0B6C(v52, v42, 0x61642E736D657449, 0xEA00000000006174, v57, &qword_1EF9E2A50);
    swift_release();
    v63 = (uint64_t)v117;
    v64 = v112;
    v112(v117, v58, v59);
    v65 = sub_1CCA14E90(&qword_1EF9E2A28);
    v61(v63 + *(int *)(v65 + 44), v56, v62);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v63, 0, 1, v65);
    sub_1CCA14E90(&qword_1ED8A8DA0);
    swift_allocObject();
    swift_bridgeObjectRetain();
    v66 = v125;
    *(_QWORD *)(v8 + 320) = sub_1CC9F0B6C(v125, v42, 0x756F72476D657449, 0xEF617461642E7370, v63, &qword_1EF9E2A20);
    swift_release();
    v67 = (uint64_t)v118;
    v64(v118, v58, v59);
    v68 = sub_1CCA14E90(&qword_1EF9E2A80);
    v61(v67 + *(int *)(v68 + 44), v111, v62);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v67, 0, 1, v68);
    sub_1CCA14E90(&qword_1ED8A8D98);
    swift_allocObject();
    v69 = sub_1CC9F0B6C(v66, v42, 0xD000000000000012, 0x80000001CCB7B700, v67, &qword_1EF9E2A78);
    sub_1CC9C3E84(v58, (uint64_t *)&unk_1EF9E2AA8);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v8 + 312) = 0;
    swift_release();
    *(_QWORD *)(v8 + 320) = 0;
    swift_release();
    *(_QWORD *)(v8 + 328) = 0;
    swift_release();
    *(_QWORD *)(v8 + 336) = 0;
    swift_release();
    *(_QWORD *)(v8 + 344) = 0;
    swift_release();
    v69 = 0;
  }
  *(_QWORD *)(v8 + 352) = v69;
  swift_release();
  v70 = v126;
  sub_1CC9EAB74(v126, v8 + OBJC_IVAR____TtC8FMIPCore15FMIPDataManager_preferredLocale, (uint64_t *)&unk_1ED8A8B10);
  if ((v127 & 1) != 0)
  {
    *(_QWORD *)(v8 + OBJC_IVAR____TtC8FMIPCore15FMIPDataManager_geocodingCache) = 0;
  }
  else
  {
    v71 = v119;
    sub_1CC9EAB74(v70, v119, (uint64_t *)&unk_1ED8A8B10);
    type metadata accessor for FMIPReverseGeocodingCache();
    *(_QWORD *)(swift_allocObject() + qword_1EF9FF818 + 8) = 0;
    swift_unknownObjectWeakInit();
    v72 = v120;
    sub_1CC9EAB74(v71, v120, (uint64_t *)&unk_1ED8A8B10);
    v73 = sub_1CC9E1640(v72);
    sub_1CC9C3E84(v71, (uint64_t *)&unk_1ED8A8B10);
    *(_QWORD *)(v8 + OBJC_IVAR____TtC8FMIPCore15FMIPDataManager_geocodingCache) = v73;
    *(_QWORD *)(v73 + qword_1EF9FF818 + 8) = &off_1E88F8F70;
    swift_unknownObjectWeakAssign();
  }
  v129[0] = v124;
  if ((sub_1CC9D62E8(v129) & 1) == 0)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v93 = sub_1CCB637FC();
    sub_1CCA16C20(v93, (uint64_t)qword_1ED8AD7F8);
    swift_retain_n();
    v75 = sub_1CCB637D8();
    v94 = sub_1CCB63D48();
    if (os_log_type_enabled(v75, v94))
    {
      v77 = swift_slowAlloc();
      v127 = swift_slowAlloc();
      v129[0] = v127;
      *(_DWORD *)v77 = 136315138;
      v125 = v77 + 4;
      v95 = *(_QWORD *)(v8 + 48);
      v96 = *(_QWORD *)(v8 + 56);
      swift_bridgeObjectRetain();
      v97 = sub_1CC9C6AE4(0xCuLL, v95, v96);
      v99 = v98;
      v101 = v100;
      v103 = v102;
      swift_bridgeObjectRelease();
      v104 = MEMORY[0x1D17B0F34](v97, v99, v101, v103);
      v106 = v105;
      swift_bridgeObjectRelease();
      v128 = sub_1CCA0CB60(v104, v106, v129);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v75, v94, "FMIPDataManager<%s>.init", (uint8_t *)v77, 0xCu);
      v92 = v127;
      goto LABEL_16;
    }
LABEL_17:
    swift_release_n();

    v107 = v70;
    goto LABEL_18;
  }
  *(_BYTE *)(v8 + 64) = 1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v74 = sub_1CCB637FC();
  sub_1CCA16C20(v74, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v75 = sub_1CCB637D8();
  v76 = sub_1CCB63D48();
  if (!os_log_type_enabled(v75, v76))
    goto LABEL_17;
  v77 = swift_slowAlloc();
  v127 = swift_slowAlloc();
  v129[0] = v127;
  *(_DWORD *)v77 = 136315394;
  v78 = *(_QWORD *)(v8 + 48);
  v79 = *(_QWORD *)(v8 + 56);
  swift_bridgeObjectRetain();
  v80 = sub_1CC9C6AE4(0xCuLL, v78, v79);
  v82 = v81;
  v84 = v83;
  v86 = v85;
  swift_bridgeObjectRelease();
  v87 = MEMORY[0x1D17B0F34](v80, v82, v84, v86);
  v89 = v88;
  swift_bridgeObjectRelease();
  v128 = sub_1CCA0CB60(v87, v89, v129);
  sub_1CCB63E44();
  swift_release_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v77 + 12) = 2080;
  v128 = v124;
  v90 = sub_1CCB639AC();
  v128 = sub_1CCA0CB60(v90, v91, v129);
  sub_1CCB63E44();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1CC9BF000, v75, v76, "FMIPDataManager<%s>.init with valid cache for subsystems: %s", (uint8_t *)v77, 0x16u);
  v92 = v127;
LABEL_16:
  swift_arrayDestroy();
  MEMORY[0x1D17B214C](v92, -1, -1);
  MEMORY[0x1D17B214C](v77, -1, -1);

  v107 = v126;
LABEL_18:
  sub_1CC9C3E84(v107, (uint64_t *)&unk_1ED8A8B10);
  return v8;
}

uint64_t sub_1CCAAD2A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v20 = v19;
    *(_DWORD *)v5 = 136315138;
    v6 = *(_QWORD *)(v1 + 48);
    v7 = *(_QWORD *)(v1 + 56);
    swift_bridgeObjectRetain();
    v8 = sub_1CC9C6AE4(0xCuLL, v6, v7);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x1D17B0F34](v8, v10, v12, v14);
    v17 = v16;
    swift_bridgeObjectRelease();
    sub_1CCA0CB60(v15, v17, &v20);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPDataManager<%s>.deinit", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v19, -1, -1);
    MEMORY[0x1D17B214C](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  sub_1CCA2F610(v1 + 32);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1CCA24588(*(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1CC9C3E84(v1 + OBJC_IVAR____TtC8FMIPCore15FMIPDataManager_preferredLocale, (uint64_t *)&unk_1ED8A8B10);
  swift_release();
  return v1;
}

uint64_t sub_1CCAAD5CC()
{
  sub_1CCAAD2A4();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCAAD5F0()
{
  return type metadata accessor for FMIPDataManager();
}

BOOL sub_1CCAAD5F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19[4];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRetain();
  v3 = swift_bridgeObjectRetain();
  v4 = sub_1CCAAC048(v3, v2);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v5 = sub_1CCB637FC();
  sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain_n();
  v6 = sub_1CCB637D8();
  v7 = sub_1CCB63D48();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v19[0] = v9;
    *(_DWORD *)v8 = 136315138;
    sub_1CCB63604();
    v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    type metadata accessor for FMIPDeviceConnectedState(0);
    sub_1CC9CAA38(&qword_1ED8A7140, v10, MEMORY[0x1E0CB09C8]);
    swift_bridgeObjectRetain();
    v11 = sub_1CCB638EC();
    v13 = v12;
    swift_bridgeObjectRelease();
    sub_1CCA0CB60(v11, v13, v19);
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v6, v7, "FMIPManager: updating merged deviceConnectedStates: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v9, -1, -1);
    MEMORY[0x1D17B214C](v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v14 = *(_QWORD *)(v1 + 208);
  swift_bridgeObjectRetain();
  v15 = sub_1CCAFFED8(v4, v14);
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
    swift_beginAccess();
    v16 = swift_bridgeObjectRetain();
    v17 = sub_1CCAB8778(v16, v4);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 80) = v17;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 208) = v4;
  }
  swift_bridgeObjectRelease();
  return (v15 & 1) == 0;
}

BOOL sub_1CCAAD8AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[5];

  v2 = v1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v4 = sub_1CCB637FC();
  sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
  v5 = sub_1CCB637D8();
  v6 = sub_1CCB63D48();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPDataManager: update safe locations", v7, 2u);
    MEMORY[0x1D17B214C](v7, -1, -1);
  }

  v8 = *(_QWORD *)(v2 + 240);
  swift_bridgeObjectRetain();
  v9 = sub_1CCA1812C(a1, v8);
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
  {
    swift_retain();
    v10 = sub_1CCAB7A74(a1, v2);
    swift_release();
    *(_QWORD *)(v2 + 240) = v10;
    swift_bridgeObjectRelease();
    if (*(_BYTE *)(v2 + 24) == 1)
    {
      if (*(_QWORD *)(v2 + 352))
      {
        v11 = *(_QWORD *)(v2 + 240);
        v12 = *(_QWORD *)(v2 + 248);
        v13 = *(_QWORD *)(v2 + 256);
        v14 = *(_QWORD *)(v2 + 264);
        v15 = *(_QWORD *)(v2 + 272);
        v17[0] = v11;
        v17[1] = v12;
        v17[2] = v13;
        v17[3] = v14;
        v17[4] = v15;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1CCAB2D04(v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
  }
  return (v9 & 1) == 0;
}

void sub_1CCAADA90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  uint64_t (*v31)();
  char isUniquelyReferenced_nonNull_native;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t (*v43)();
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  int v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  char v97;
  char v98;
  unint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t (*v108)();
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[2];
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t (*v135)();
  char *v136;
  uint64_t v137;
  _QWORD *v138;
  _BYTE v139[288];
  _BYTE v140[288];
  _QWORD v141[36];
  uint64_t (*v142)();

  v3 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  v4 = MEMORY[0x1E0C80A78](v3);
  v123 = (uint64_t)v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v118 - v6;
  v8 = sub_1CCA14E90((uint64_t *)&unk_1EF9E29E0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FMReverseGeocodingRequest();
  v126 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v125 = (_QWORD *)((char *)v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12);
  v122 = (uint64_t)v118 - v14;
  type metadata accessor for FMIPItem();
  v15 = MEMORY[0x1E0C80A78](a1);
  v16 = MEMORY[0x1E0C80A78](v15);
  v20 = (unint64_t)v118 - v19;
  v21 = *(char **)(a1 + 16);
  v118[1] = v16;
  if (!v21)
  {
    v107 = MEMORY[0x1E0DEE9E0];
    v124 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v108 = (uint64_t (*)())MEMORY[0x1E0DEE9E0];
    v25 = v1;
LABEL_53:
    *(_QWORD *)(v25 + 192) = v108;
    v30 = v108;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v25 + 184) = v107;
    v20 = v107;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v25 + OBJC_IVAR____TtC8FMIPCore15FMIPDataManager_geocodingCache))
    {
      v109 = swift_bridgeObjectRetain();
      sub_1CCAB1080(v109);
      swift_bridgeObjectRelease();
    }
    if (qword_1ED8AA630 != -1)
LABEL_65:
      swift_once();
    v110 = sub_1CCB637FC();
    sub_1CCA16C20(v110, (uint64_t)qword_1ED8AD7F8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v111 = v124;
    swift_bridgeObjectRetain();
    v112 = sub_1CCB637D8();
    v113 = sub_1CCB63D48();
    if (os_log_type_enabled(v112, v113))
    {
      v114 = swift_slowAlloc();
      *(_DWORD *)v114 = 134218752;
      v141[0] = v21;
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      *(_WORD *)(v114 + 12) = 2048;
      v115 = *((_QWORD *)v30 + 2);
      swift_bridgeObjectRelease();
      v141[0] = v115;
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      *(_WORD *)(v114 + 22) = 2048;
      v116 = *(_QWORD *)(v20 + 16);
      swift_bridgeObjectRelease();
      v141[0] = v116;
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      *(_WORD *)(v114 + 32) = 2048;
      v117 = v111[2];
      swift_bridgeObjectRelease();
      v141[0] = v117;
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v112, v113, "FMIPDataManager: updated ephemerals items: %ld, locations: %ld, original: %ld,  addresses: %ld", (uint8_t *)v114, 0x2Au);
      MEMORY[0x1D17B214C](v114, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    return;
  }
  v119 = v1 + OBJC_IVAR____TtC8FMIPCore15FMIPDataManager_preferredLocale;
  v22 = v16 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v127 = v18;
  v128 = v20 + 8;
  v133 = *(_QWORD *)(v17 + 72);
  swift_bridgeObjectRetain();
  v23 = v1;
  v24 = v21;
  v129 = v7;
  v130 = MEMORY[0x1E0DEE9E0];
  v124 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v134 = v23;
  v135 = (uint64_t (*)())MEMORY[0x1E0DEE9E0];
  v131 = v20;
  v132 = v21;
  v120 = v11;
  v121 = v10;
  v25 = v23;
  while (1)
  {
    sub_1CCA0BEEC(v22, v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v26 = *(void **)(v20 + 392);
    v136 = v24;
    v137 = v22;
    if (!v26)
      break;
    v27 = *(_QWORD *)(v20 + 400);
    v28 = *(_QWORD *)(v20 + 384);
    v29 = *(_QWORD *)(v20 + 352);
    v30 = *(uint64_t (**)())(v20 + 360);
    v21 = v26;
    swift_bridgeObjectRetain();
    v31 = v135;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v142 = v31;
    v20 = sub_1CCA074F4(v29, (uint64_t)v30);
    v34 = *((_QWORD *)v31 + 2);
    v35 = (v33 & 1) == 0;
    v36 = v34 + v35;
    if (__OFADD__(v34, v35))
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    v37 = v33;
    if (*((_QWORD *)v31 + 3) >= v36)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1CCAEC584();
    }
    else
    {
      sub_1CCA03F94(v36, isUniquelyReferenced_nonNull_native);
      v38 = sub_1CCA074F4(v29, (uint64_t)v30);
      if ((v37 & 1) != (v39 & 1))
        goto LABEL_66;
      v20 = v38;
    }
    v40 = v28 & 1;
    v41 = BYTE1(v28) & 1;
    v42 = BYTE2(v28) & 1;
    v43 = v142;
    v135 = v142;
    if ((v37 & 1) != 0)
    {
      v44 = v21;
      v45 = *((_QWORD *)v142 + 7) + 24 * v20;

      *(_BYTE *)v45 = v40;
      *(_BYTE *)(v45 + 1) = v41;
      *(_BYTE *)(v45 + 2) = v42;
      *(_BYTE *)(v45 + 3) = BYTE3(v28);
      v46 = v44;
      *(_QWORD *)(v45 + 8) = v44;
      *(_QWORD *)(v45 + 16) = v27;
    }
    else
    {
      *((_QWORD *)v142 + (v20 >> 6) + 8) |= 1 << v20;
      v47 = (uint64_t *)(*((_QWORD *)v43 + 6) + 16 * v20);
      *v47 = v29;
      v47[1] = (uint64_t)v30;
      v48 = *((_QWORD *)v43 + 7) + 24 * v20;
      *(_BYTE *)v48 = v40;
      *(_BYTE *)(v48 + 1) = v41;
      *(_BYTE *)(v48 + 2) = v42;
      *(_BYTE *)(v48 + 3) = BYTE3(v28);
      *(_QWORD *)(v48 + 8) = v21;
      *(_QWORD *)(v48 + 16) = v27;
      v49 = *((_QWORD *)v43 + 2);
      v50 = __OFADD__(v49, 1);
      v51 = v49 + 1;
      if (v50)
        goto LABEL_61;
      v46 = v21;
      *((_QWORD *)v43 + 2) = v51;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1CC9C3EC0(v128, (uint64_t)v140, &qword_1ED8A71C0);
    sub_1CC9C3EC0((uint64_t)v140, (uint64_t)v141, &qword_1ED8A71C0);
    v52 = sub_1CCA33738((uint64_t)v141) == 1;
    v20 = v131;
    v21 = v132;
    v25 = v134;
    v53 = (uint64_t)v129;
    if (v52)
    {
      sub_1CCA0BF30(v131, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);

      v24 = v136;
      v22 = v137;
    }
    else
    {
      v54 = v127;
      sub_1CCA0BEEC(v131, v127, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CC9EAB74(v119, v53, (uint64_t *)&unk_1ED8A8B10);
      v55 = v54;
      v56 = *(void **)(v54 + 392);
      if (v56)
      {
        v57 = *(_QWORD *)(v54 + 384) >> 24;
        v59 = *(_QWORD *)(v55 + 352);
        v58 = *(_QWORD *)(v55 + 360);
        sub_1CC9EAB74(v53, v123, (uint64_t *)&unk_1ED8A8B10);
        v139[0] = v57;
        if (FMIPLocationType.rawValue.getter() == 0x656D69746C616572 && v60 == 0xE800000000000000)
          v61 = 1;
        else
          v61 = sub_1CCB642A0();
        v64 = v56;
        sub_1CCA307F0((uint64_t)v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_1CC9C3E84(v53, (uint64_t *)&unk_1ED8A8B10);
        sub_1CCA0BF30(v127, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v63 = (uint64_t)v121;
        *v121 = v59;
        *(_QWORD *)(v63 + 8) = v58;
        v30 = (uint64_t (*)())v120;
        *(_BYTE *)(v63 + *(int *)(v120 + 32)) = 0;
        *(_BYTE *)(v63 + *((int *)v30 + 7)) = v61 & 1;
        *(_QWORD *)(v63 + 16) = v64;
        sub_1CC9C3EC0(v123, v63 + *((int *)v30 + 6), (uint64_t *)&unk_1ED8A8B10);
        v62 = v126;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t (*)()))(v126 + 56))(v63, 0, 1, v30);
      }
      else
      {
        sub_1CC9C3EC0((uint64_t)v140, (uint64_t)v139, &qword_1ED8A71C0);
        sub_1CCA31FF8((uint64_t)v139);
        sub_1CC9C3E84(v53, (uint64_t *)&unk_1ED8A8B10);
        sub_1CCA0BF30(v54, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v62 = v126;
        v30 = (uint64_t (*)())v120;
        v63 = (uint64_t)v121;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v126 + 56))(v121, 1, 1, v120);
      }
      v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)()))(v62 + 48))(v63, 1, v30);
      v22 = v137;
      if (v65 != 1)
      {
        v66 = v63;
        v67 = v122;
        sub_1CC9FED60(v66, v122, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        v68 = v125;
        sub_1CCA0BEEC(v67, (uint64_t)v125, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        v69 = v124;
        v70 = swift_isUniquelyReferenced_nonNull_native();
        v138 = v69;
        v72 = sub_1CCAC8E50(v68);
        v73 = v69[2];
        v74 = (v71 & 1) == 0;
        v75 = v73 + v74;
        if (__OFADD__(v73, v74))
          goto LABEL_63;
        v76 = v71;
        if (v69[3] >= v75)
        {
          v79 = v126;
          v30 = type metadata accessor for FMIPItem;
          if ((v70 & 1) != 0)
          {
            if ((v71 & 1) == 0)
              goto LABEL_30;
          }
          else
          {
            sub_1CCAECB68();
            v79 = v126;
            if ((v76 & 1) == 0)
              goto LABEL_30;
          }
        }
        else
        {
          sub_1CCAE8888(v75, v70);
          v77 = sub_1CCAC8E50(v125);
          if ((v76 & 1) != (v78 & 1))
            goto LABEL_67;
          v72 = v77;
          v79 = v126;
          v30 = type metadata accessor for FMIPItem;
          if ((v76 & 1) == 0)
          {
LABEL_30:
            v80 = v138;
            v138[(v72 >> 6) + 8] |= 1 << v72;
            sub_1CCA0BEEC((uint64_t)v125, v80[6] + *(_QWORD *)(v79 + 72) * v72, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
            memcpy((void *)(v80[7] + 288 * v72), v141, 0x120uLL);
            v81 = v80[2];
            v50 = __OFADD__(v81, 1);
            v82 = v81 + 1;
            if (v50)
              goto LABEL_64;
            v124 = v80;
            v80[2] = v82;
            goto LABEL_35;
          }
        }
        v124 = v138;
        v83 = (void *)(v138[7] + 288 * v72);
        memcpy(v139, v83, sizeof(v139));
        sub_1CCA32130((uint64_t)v139);
        memcpy(v83, v141, 0x120uLL);
LABEL_35:
        swift_bridgeObjectRelease();
        sub_1CCA0BF30((uint64_t)v125, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);

        sub_1CCA0BF30(v122, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        v24 = v136;
        v25 = v134;
        break;
      }
      sub_1CCA0BF30(v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);

      sub_1CCA307F0((uint64_t)v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
      sub_1CC9C3E84(v63, (uint64_t *)&unk_1EF9E29E0);
      v24 = v136;
      v25 = v134;
    }
LABEL_4:
    v22 += v133;
    if (!--v24)
    {
      swift_bridgeObjectRelease();
      v107 = v130;
      v108 = v135;
      goto LABEL_53;
    }
  }
  v84 = *(void **)(v20 + 320);
  if (!v84)
  {
LABEL_48:
    sub_1CCA0BF30(v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    goto LABEL_4;
  }
  v85 = *(_QWORD *)(v20 + 328);
  v86 = *(_QWORD *)(v20 + 312);
  v88 = *(_QWORD *)(v20 + 352);
  v87 = *(_QWORD *)(v20 + 360);
  v30 = v84;
  swift_bridgeObjectRetain();
  v89 = v130;
  v90 = swift_isUniquelyReferenced_nonNull_native();
  v141[0] = v89;
  v20 = sub_1CCA074F4(v88, v87);
  v92 = *(_QWORD *)(v89 + 16);
  v93 = (v91 & 1) == 0;
  v94 = v92 + v93;
  if (__OFADD__(v92, v93))
    goto LABEL_60;
  v95 = v91;
  if (*(_QWORD *)(v89 + 24) >= v94)
  {
    if ((v90 & 1) == 0)
      sub_1CCAEC584();
    goto LABEL_43;
  }
  sub_1CCA03F94(v94, v90);
  v96 = sub_1CCA074F4(v88, v87);
  if ((v95 & 1) == (v97 & 1))
  {
    v20 = v96;
LABEL_43:
    v98 = v86 & 1;
    v99 = v86 >> 24;
    v100 = (_QWORD *)v141[0];
    v21 = (char *)((v86 & 0x100) >> 8);
    v101 = (v86 & 0x10000) >> 16;
    v130 = v141[0];
    if ((v95 & 1) != 0)
    {
      v102 = *(_QWORD *)(v141[0] + 56) + 24 * v20;

      *(_BYTE *)v102 = v98;
      *(_BYTE *)(v102 + 1) = (_BYTE)v21;
      *(_BYTE *)(v102 + 2) = v101;
      *(_BYTE *)(v102 + 3) = v99;
      *(_QWORD *)(v102 + 8) = v30;
      *(_QWORD *)(v102 + 16) = v85;
    }
    else
    {
      *(_QWORD *)(v141[0] + 8 * (v20 >> 6) + 64) |= 1 << v20;
      v103 = (uint64_t *)(v100[6] + 16 * v20);
      *v103 = v88;
      v103[1] = v87;
      v104 = v100[7] + 24 * v20;
      *(_BYTE *)v104 = v98;
      *(_BYTE *)(v104 + 1) = (_BYTE)v21;
      *(_BYTE *)(v104 + 2) = v101;
      *(_BYTE *)(v104 + 3) = v99;
      *(_QWORD *)(v104 + 8) = v30;
      *(_QWORD *)(v104 + 16) = v85;
      v105 = v100[2];
      v50 = __OFADD__(v105, 1);
      v106 = v105 + 1;
      if (v50)
        goto LABEL_62;
      v100[2] = v106;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = v131;
    v21 = v132;
    v25 = v134;
    v24 = v136;
    v22 = v137;
    goto LABEL_48;
  }
LABEL_66:
  sub_1CCB642DC();
  __break(1u);
LABEL_67:
  sub_1CCB642DC();
  __break(1u);
}

uint64_t sub_1CCAAE6B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  id v20;
  int isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  const void *v30;
  void *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _BYTE v44[288];
  _BYTE v45[288];
  _QWORD *v46;
  _QWORD v47[44];
  _BYTE v48[296];

  v40 = type metadata accessor for FMReverseGeocodingRequest();
  v37 = *(_QWORD *)(v40 - 8);
  v3 = MEMORY[0x1E0C80A78](v40);
  v43 = (uint64_t *)((char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v36 - v5);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v36 = v1;
    v39 = v1 + OBJC_IVAR____TtC8FMIPCore15FMIPDataManager_preferredLocale;
    swift_bridgeObjectRetain();
    v8 = &v47[5];
    memcpy(v47, (const void *)(a1 + 32), sizeof(v47));
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v10 = v7 - 1;
    v11 = 384;
    v12 = &qword_1ED8A71C0;
    v38 = a1;
    while (1)
    {
      sub_1CC9C3EC0((uint64_t)v8, (uint64_t)v48, v12);
      if (sub_1CCA33738((uint64_t)v48) != 1)
      {
        v41 = v10;
        v42 = v11;
        v13 = v12;
        v14 = (void *)v47[3];
        v15 = v47[0];
        v16 = v47[1];
        v17 = v40;
        sub_1CC9EAB74(v39, (uint64_t)v6 + *(int *)(v40 + 24), (uint64_t *)&unk_1ED8A8B10);
        *v6 = v15;
        v6[1] = v16;
        *((_BYTE *)v6 + *(int *)(v17 + 32)) = 0;
        *((_BYTE *)v6 + *(int *)(v17 + 28)) = 0;
        v6[2] = v14;
        v18 = v43;
        sub_1CCA0BEEC((uint64_t)v6, (uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        sub_1CCA31D3C((uint64_t)v47);
        v19 = v8;
        sub_1CCA307F0((uint64_t)v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
        swift_bridgeObjectRetain();
        v20 = v14;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v46 = v9;
        v23 = sub_1CCAC8E50(v18);
        v24 = v9[2];
        v25 = (v22 & 1) == 0;
        v26 = v24 + v25;
        if (__OFADD__(v24, v25))
        {
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          sub_1CCB642DC();
          __break(1u);
          JUMPOUT(0x1CCAAEA50);
        }
        v27 = v22;
        if (v9[3] >= v26)
        {
          v12 = v13;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_1CCAECB68();
        }
        else
        {
          sub_1CCAE8888(v26, isUniquelyReferenced_nonNull_native);
          v28 = sub_1CCAC8E50(v43);
          if ((v27 & 1) != (v29 & 1))
            goto LABEL_24;
          v23 = v28;
          v12 = v13;
        }
        sub_1CC9C3EC0((uint64_t)v8, (uint64_t)v45, v12);
        if ((v27 & 1) != 0)
        {
          v9 = v46;
          v30 = (const void *)(v46[7] + 288 * v23);
          memcpy(v44, v30, sizeof(v44));
          sub_1CCA32130((uint64_t)v44);
          v31 = (void *)v30;
          v8 = v19;
          memcpy(v31, v45, 0x120uLL);
        }
        else
        {
          v9 = v46;
          v46[(v23 >> 6) + 8] |= 1 << v23;
          sub_1CCA0BEEC((uint64_t)v43, v9[6] + *(_QWORD *)(v37 + 72) * v23, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
          memcpy((void *)(v9[7] + 288 * v23), v45, 0x120uLL);
          v32 = v9[2];
          v33 = __OFADD__(v32, 1);
          v34 = v32 + 1;
          if (v33)
            goto LABEL_23;
          v9[2] = v34;
        }
        swift_bridgeObjectRelease();
        sub_1CCA0BF30((uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        sub_1CCA31E98((uint64_t)v47);
        sub_1CCA0BF30((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        a1 = v38;
        v10 = v41;
        v11 = v42;
      }
      if (!v10)
        break;
      memcpy(v47, (const void *)(a1 + v11), sizeof(v47));
      v11 += 352;
      --v10;
    }
    swift_bridgeObjectRelease();
    v1 = v36;
  }
  else
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore15FMIPDataManager_geocodingCache))
    sub_1CCAB1080((uint64_t)v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCAAEAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 16) && v2 == *(_QWORD *)(a1 + 16))
    return 1;
  else
    return sub_1CCB642A0() & 1;
}

uint64_t sub_1CCAAEB04(uint64_t (*a1)())
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint8_t *v38;
  uint64_t (*v39)();
  uint64_t v40;
  _QWORD *v41;
  uint64_t (*v42)();
  __int128 v43;
  _QWORD *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint8_t *v69;
  int v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  id v97;
  id v98;
  unint64_t v99;
  uint64_t result;
  uint64_t v101;
  os_log_t v102;
  uint64_t v103;
  int v104;
  __int128 v105;
  _QWORD *v106;
  __int128 *v107;
  uint64_t v108;
  char *v109;
  uint64_t updated;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  char *v116;
  uint64_t v117;
  uint64_t (*v118)();
  unint64_t v119;
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  uint64_t v130;
  unint64_t *v131;
  uint64_t v132;
  char *v133;
  _QWORD *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142[36];
  _QWORD v143[36];
  _BYTE v144[288];
  _BYTE v145[288];
  _BYTE v146[288];
  _OWORD v147[18];
  uint64_t v148[37];

  updated = type metadata accessor for FMIPItemUpdateType(0);
  MEMORY[0x1E0C80A78](updated);
  v109 = (char *)&v101 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  v4 = MEMORY[0x1E0C80A78](v3);
  v125 = (uint64_t)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v101 - v6;
  v8 = sub_1CCA14E90((uint64_t *)&unk_1EF9E29E0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (unint64_t)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FMReverseGeocodingRequest();
  v122 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v113 = (uint64_t)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for FMIPItem();
  v117 = *(_QWORD *)(v127 - 8);
  v13 = MEMORY[0x1E0C80A78](v127);
  v15 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v108 = (uint64_t)&v101 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v111 = (uint64_t)&v101 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v121 = (uint64_t)&v101 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v134 = (uint64_t *)((char *)&v101 - v23);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v101 - v24;
  v136 = sub_1CCA14E90(&qword_1ED8A8DE8);
  v132 = *(_QWORD *)(v136 - 8);
  MEMORY[0x1E0C80A78](v136);
  v116 = (char *)&v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DF0);
  v28 = MEMORY[0x1E0C80A78](v27);
  v30 = (unint64_t *)((char *)&v101 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v28);
  v131 = (unint64_t *)((char *)&v101 - v31);
  v32 = qword_1ED8AA630;
  swift_bridgeObjectRetain();
  if (v32 == -1)
    goto LABEL_2;
LABEL_39:
  swift_once();
LABEL_2:
  v33 = sub_1CCB637FC();
  v34 = sub_1CCA16C20(v33, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v128 = v34;
  v35 = sub_1CCB637D8();
  v36 = sub_1CCB63D48();
  v37 = os_log_type_enabled(v35, v36);
  v135 = v7;
  v123 = v11;
  v124 = (_QWORD *)v10;
  v133 = v25;
  if (v37)
  {
    v38 = (uint8_t *)swift_slowAlloc();
    v126 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v38 = 138412290;
    v25 = v133;
    v120 = v38 + 4;
    v39 = a1;
    v40 = sub_1CCB63B20();
    v148[0] = v40;
    sub_1CCB63E44();
    v41 = v126;
    *v126 = v40;
    a1 = v39;
    v7 = v135;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v35, v36, "FMIPDataManager: Appending address to items %@", v38, 0xCu);
    sub_1CCA14E90(&qword_1ED8A8E00);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v41, -1, -1);
    MEMORY[0x1D17B214C](v38, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v11 = *((_QWORD *)a1 + 2);
  v126 = (_QWORD *)OBJC_IVAR____TtC8FMIPCore15FMIPDataManager_geocodingCache;
  v106 = &v143[1];
  v107 = (__int128 *)(v25 + 392);
  swift_bridgeObjectRetain();
  v42 = a1;
  v10 = 0;
  v120 = 0;
  a1 = type metadata accessor for FMIPItem;
  *(_QWORD *)&v43 = 136315138;
  v115 = v43;
  v114 = MEMORY[0x1E0DEE9B8] + 8;
  *(_QWORD *)&v43 = 136315394;
  v105 = v43;
  v118 = v42;
  v112 = (unint64_t)v42;
  v44 = v134;
  v45 = v136;
  v127 = v11;
  v129 = v30;
  v137 = v15;
  v46 = v11 == 0;
  if (!v11)
  {
LABEL_9:
    v47 = 1;
    goto LABEL_12;
  }
  while (1)
  {
    while (1)
    {
      if (v46)
      {
        __break(1u);
        goto LABEL_39;
      }
      v11 = v10 + 1;
      v48 = (uint64_t)&v116[*(int *)(v45 + 48)];
      sub_1CCA0BEEC((uint64_t)v118+ ((*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80))+ *(_QWORD *)(v117 + 72) * v10, v48, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v49 = (uint64_t)v30 + *(int *)(v136 + 48);
      *v30 = v10;
      v50 = v48;
      v45 = v136;
      sub_1CC9FED60(v50, v49, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v47 = 0;
LABEL_12:
      v10 = v11;
      v51 = v132;
      (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v132 + 56))(v30, v47, 1, v45);
      v52 = v131;
      sub_1CC9C3EC0((uint64_t)v30, (uint64_t)v131, (uint64_t *)&unk_1ED8A8DF0);
      if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v51 + 48))(v52, 1, v45) == 1)
      {
        swift_bridgeObjectRelease();
        return v112;
      }
      v53 = *v52;
      a1 = type metadata accessor for FMIPItem;
      sub_1CC9FED60((uint64_t)v52 + *(int *)(v45 + 48), (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v54 = *(_QWORD *)((char *)v126 + v130);
      if (v54)
        break;
      v15 = v137;
LABEL_26:
      sub_1CCA0BEEC((uint64_t)v25, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v72 = sub_1CCB637D8();
      v73 = sub_1CCB63D48();
      if (os_log_type_enabled(v72, v73))
      {
        v74 = swift_slowAlloc();
        v75 = swift_slowAlloc();
        v148[0] = v75;
        *(_DWORD *)v74 = v115;
        v76 = *((_QWORD *)v137 + 44);
        v77 = *((_QWORD *)v137 + 45);
        swift_bridgeObjectRetain();
        v78 = v76;
        v15 = v137;
        *(_QWORD *)(v74 + 4) = sub_1CCA0CB60(v78, v77, v148);
        swift_bridgeObjectRelease();
        sub_1CCA0BF30((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        _os_log_impl(&dword_1CC9BF000, v72, v73, "FMIPDataManager: Item %s has no address", (uint8_t *)v74, 0xCu);
        swift_arrayDestroy();
        v79 = v75;
        a1 = type metadata accessor for FMIPItem;
        v7 = v135;
        MEMORY[0x1D17B214C](v79, -1, -1);
        v80 = v74;
        v25 = v133;
        MEMORY[0x1D17B214C](v80, -1, -1);

      }
      else
      {

        sub_1CCA0BF30((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      }
      sub_1CCA0BF30((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v44 = v134;
      v45 = v136;
      v30 = v129;
      v11 = v127;
      v46 = v10 >= v127;
      if (v10 == v127)
        goto LABEL_9;
    }
    v119 = v53;
    sub_1CCA0BEEC((uint64_t)v25, (uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CC9EAB74(v54 + qword_1EF9FF7A8, (uint64_t)v7, (uint64_t *)&unk_1ED8A8B10);
    v55 = (void *)v44[49];
    if (v55)
    {
      v56 = v44[48] >> 24;
      v57 = v44[44];
      v58 = v44[45];
      sub_1CC9EAB74((uint64_t)v7, v125, (uint64_t *)&unk_1ED8A8B10);
      LOBYTE(v147[0]) = v56;
      if (FMIPLocationType.rawValue.getter() == 0x656D69746C616572 && v59 == 0xE800000000000000)
        v60 = 1;
      else
        v60 = sub_1CCB642A0();
      v64 = v55;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1CC9C3E84((uint64_t)v135, (uint64_t *)&unk_1ED8A8B10);
      sub_1CCA0BF30((uint64_t)v134, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v62 = (uint64_t)v124;
      v65 = v125;
      *v124 = v57;
      *(_QWORD *)(v62 + 8) = v58;
      v63 = v123;
      *(_BYTE *)(v62 + *(int *)(v123 + 32)) = 0;
      *(_BYTE *)(v62 + *(int *)(v63 + 28)) = v60 & 1;
      *(_QWORD *)(v62 + 16) = v64;
      sub_1CC9C3EC0(v65, v62 + *(int *)(v63 + 24), (uint64_t *)&unk_1ED8A8B10);
      v61 = 0;
    }
    else
    {
      sub_1CC9C3E84((uint64_t)v7, (uint64_t *)&unk_1ED8A8B10);
      sub_1CCA0BF30((uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v61 = 1;
      v63 = v123;
      v62 = (uint64_t)v124;
    }
    v66 = v122;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v122 + 56))(v62, v61, 1, v63);
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v66 + 48))(v62, 1, v63) == 1)
    {
      sub_1CC9C3E84(v62, (uint64_t *)&unk_1EF9E29E0);
      sub_1CCA30EF4(v147);
      sub_1CC9C3EC0((uint64_t)v147, (uint64_t)v148, &qword_1ED8A71C0);
    }
    else
    {
      v67 = v113;
      v68 = sub_1CC9FED60(v62, v113, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      MEMORY[0x1E0C80A78](v68);
      *(&v101 - 2) = v54;
      *(&v101 - 1) = v67;
      sub_1CCA14E90(&qword_1ED8A71C0);
      v69 = v120;
      sub_1CCB63D9C();
      v120 = v69;
      sub_1CCA0BF30(v67, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    }
    v7 = v135;
    v15 = v137;
    v25 = v133;
    a1 = type metadata accessor for FMIPItem;
    sub_1CC9C3EC0((uint64_t)v148, (uint64_t)v146, &qword_1ED8A71C0);
    sub_1CC9C3EC0((uint64_t)v146, (uint64_t)v147, &qword_1ED8A71C0);
    v70 = sub_1CCA33738((uint64_t)v147);
    v71 = v121;
    if (v70 == 1)
      goto LABEL_26;
    sub_1CCA0BEEC((uint64_t)v25, v121, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CC9C3EC0((uint64_t)v146, (uint64_t)v144, &qword_1ED8A71C0);
    sub_1CC9C3EC0((uint64_t)v146, (uint64_t)v145, &qword_1ED8A71C0);
    sub_1CCA31FF8((uint64_t)v145);
    sub_1CCA31FF8((uint64_t)v144);
    v81 = sub_1CCB637D8();
    v82 = sub_1CCB63D48();
    v83 = v82;
    if (os_log_type_enabled(v81, v82))
    {
      v84 = swift_slowAlloc();
      v104 = v83;
      v85 = v84;
      v103 = swift_slowAlloc();
      v142[0] = v103;
      *(_DWORD *)v85 = v105;
      v101 = v85 + 4;
      v86 = *(_QWORD *)(v71 + 352);
      v87 = *(_QWORD *)(v71 + 360);
      swift_bridgeObjectRetain();
      v143[0] = sub_1CCA0CB60(v86, v87, v142);
      v102 = v81;
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA0BF30(v71, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      *(_WORD *)(v85 + 12) = 2080;
      v88 = v85;
      memcpy(v143, v147, sizeof(v143));
      v89 = FMIPAddress.debugDescription.getter();
      v143[0] = sub_1CCA0CB60(v89, v90, v142);
      v25 = v133;
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA307F0((uint64_t)v146, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
      sub_1CCA307F0((uint64_t)v146, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
      v81 = v102;
      _os_log_impl(&dword_1CC9BF000, v102, (os_log_type_t)v104, "FMIPDataManager: Item %s, Address %s", (uint8_t *)v85, 0x16u);
      v91 = v103;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v91, -1, -1);
      MEMORY[0x1D17B214C](v88, -1, -1);
    }
    else
    {
      sub_1CCA0BF30(v71, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCA307F0((uint64_t)v146, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
      sub_1CCA307F0((uint64_t)v146, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
    }

    v44 = v134;
    v30 = v129;
    v92 = (uint64_t)v25;
    v93 = v25;
    v94 = v108;
    sub_1CCA0BEEC(v92, v108, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v95 = (uint64_t)v109;
    swift_storeEnumTagMultiPayload();
    memcpy(v143, v147, sizeof(v143));
    nullsub_1(v143);
    sub_1CC9C3EC0((uint64_t)v143, (uint64_t)v142, &qword_1ED8A71C0);
    v140 = *((_QWORD *)v93 + 48);
    v141 = *v107;
    v138 = *((_QWORD *)v93 + 39);
    v139 = *((_OWORD *)v93 + 20);
    v96 = (void *)v141;
    v97 = (id)v139;
    v98 = v96;
    FMIPItem.init(item:updateType:address:location:crowdSourcedLocation:connected:)(v94, v95, (uint64_t)v142, &v140, &v138, 2u, v111);
    v99 = v112;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_1CCAB6F10(v99);
      v112 = result;
    }
    v45 = v136;
    v11 = v127;
    v25 = v133;
    if ((v119 & 0x8000000000000000) != 0)
      break;
    if (v119 >= *(_QWORD *)(v112 + 16))
      goto LABEL_41;
    sub_1CCABB698(v111, v112+ ((*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80))+ *(_QWORD *)(v117 + 72) * v119, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v46 = v10 >= v11;
    if (v10 == v11)
      goto LABEL_9;
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1CCAAF7FC(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  char *v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  char v28;
  uint64_t result;
  uint64_t __dst[36];
  uint64_t v31[4];

  swift_retain();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1CCAB7A74(v4, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain_n();
  v7 = sub_1CCB637D8();
  v8 = sub_1CCB63D48();
  v9 = "rce";
  if (os_log_type_enabled(v7, v8))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    __dst[0] = v11;
    *(_DWORD *)v10 = 136315138;
    v12 = MEMORY[0x1D17B10E4](v5, &type metadata for FMIPSafeLocation);
    v31[1] = sub_1CCA0CB60(v12, v13, __dst);
    v9 = "SPDeviceEventSource" + 16;
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v7, v8, "FMIPDataManager: Geocoding cache callback, appending address to safe locations %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v11, -1, -1);
    MEMORY[0x1D17B214C](v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v14 = sub_1CCAAD8AC(v5);
  swift_bridgeObjectRelease();
  if (v14)
  {
    v15 = swift_bridgeObjectRetain();
    sub_1CCAAD8AC(v15);
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v16 = swift_bridgeObjectRetain();
  v17 = sub_1CC9F9BDC(v16);
  swift_bridgeObjectRelease();
  v18 = sub_1CC9E3BE4(v17, 0);
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0 && MEMORY[0x1D17B2218](a1 + 32))
  {
    v19 = *(_QWORD *)(a1 + 80);
    swift_bridgeObjectRetain();
    sub_1CC9D6B5C(a1, v19);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  sub_1CCA31FF8((uint64_t)a2);
  sub_1CCA31FF8((uint64_t)a2);
  v20 = sub_1CCB637D8();
  v21 = sub_1CCB63D48();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v31[0] = v23;
    *(_DWORD *)v22 = *((_QWORD *)v9 + 326);
    memcpy(__dst, a2, sizeof(__dst));
    v24 = FMIPAddress.debugDescription.getter();
    __dst[0] = sub_1CCA0CB60(v24, v25, v31);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA32130((uint64_t)a2);
    sub_1CCA32130((uint64_t)a2);
    _os_log_impl(&dword_1CC9BF000, v20, v21, "FMIPDataManager: Appending address to items %s", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v23, -1, -1);
    MEMORY[0x1D17B214C](v22, -1, -1);
  }
  else
  {
    sub_1CCA32130((uint64_t)a2);
    sub_1CCA32130((uint64_t)a2);
  }

  swift_beginAccess();
  v26 = (uint64_t (*)())swift_bridgeObjectRetain();
  v27 = sub_1CCAAEB04(v26);
  swift_bridgeObjectRelease();
  v28 = sub_1CC9E0F20(v27, 1, 0);
  result = swift_bridgeObjectRelease();
  if ((v28 & 1) != 0)
  {
    result = MEMORY[0x1D17B2218](a1 + 32);
    if (result)
    {
      swift_bridgeObjectRetain();
      sub_1CC9D46F4(a1);
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1CCAAFC74(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t i;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  id v52;
  id v53;
  _QWORD *v54;
  char isUniquelyReferenced_nonNull_native;
  char v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  BOOL v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  BOOL v95;
  BOOL v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  id v101;
  id v102;
  _QWORD *v103;
  char v104;
  char v105;
  unint64_t v106;
  uint64_t v107;
  _BOOL8 v108;
  uint64_t v109;
  char v110;
  unint64_t v111;
  char v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD v120[8];
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  __int128 v125;
  _QWORD *v126;
  _QWORD *v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  char *v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;

  v130 = a2;
  v131 = a1;
  v129 = sub_1CCB637FC();
  v132 = *(_QWORD *)(v129 - 8);
  MEMORY[0x1E0C80A78](v129);
  v133 = (char *)v120 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FMIPDevice();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v121 = v2;
  v8 = *(_QWORD *)(v2 + 80);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = v8 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v11 = *(_QWORD *)(v5 + 72);
    v138 = *(_QWORD **)(v2 + 80);
    swift_bridgeObjectRetain_n();
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      sub_1CCA0BEEC(v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v15 = *((_QWORD *)v7 + 2);
      v14 = *((_QWORD *)v7 + 3);
      swift_bridgeObjectRetain();
      sub_1CCA0BF30((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      if (v14)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = sub_1CCAC9E18(0, v12[2] + 1, 1, v12);
        v17 = v12[2];
        v16 = v12[3];
        if (v17 >= v16 >> 1)
          v12 = sub_1CCAC9E18((_QWORD *)(v16 > 1), v17 + 1, 1, v12);
        v12[2] = v17 + 1;
        v13 = &v12[2 * v17];
        v13[4] = v15;
        v13[5] = v14;
      }
      v10 += v11;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v18 = sub_1CCAB0EFC(v121);
  v19 = v131[8];
  v127 = v131 + 8;
  v20 = 1 << *((_BYTE *)v131 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v128 = (id)((unint64_t)(v20 + 63) >> 6);
  swift_bridgeObjectRetain();
  v23 = 0;
  v123 = v12 + 9;
  v138 = v18;
  v122 = v18 + 9;
  v126 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  *(_QWORD *)&v24 = 136380675;
  v125 = v24;
  v124 = MEMORY[0x1E0DEE9B8] + 8;
  v120[7] = "rk";
  v120[6] = "edLocation";
  v120[5] = "lastConnectionMaintenance";
  v120[4] = "lastDisconnected";
  v120[3] = "xied";
  v120[2] = "lter";
  v120[1] = "intentLocationUpdate";
  if (!v22)
    goto LABEL_16;
LABEL_15:
  v25 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  v137 = v23;
  for (i = v25 | (v23 << 6); ; i = __clz(__rbit64(v28)) + (v29 << 6))
  {
    v31 = (uint64_t *)(v131[6] + 16 * i);
    v32 = *v31;
    v33 = v31[1];
    v34 = (unsigned __int8 *)(v131[7] + 24 * i);
    LODWORD(v31) = v34[1];
    v134 = *v34;
    v135 = (int)v31;
    v136 = v34[2];
    v35 = v34[3];
    v36 = (void *)*((_QWORD *)v34 + 1);
    v37 = *((_QWORD *)v34 + 2);
    v38 = v12[2];
    if (!v38)
      goto LABEL_179;
    v39 = v12[4] == v32 && v12[5] == v33;
    if (v39 || (sub_1CCB642A0() & 1) != 0)
      goto LABEL_73;
    if (v38 == 1)
      goto LABEL_179;
    v40 = v12[6] == v32 && v12[7] == v33;
    if (v40 || (sub_1CCB642A0() & 1) != 0)
      goto LABEL_73;
    if (v38 == 2)
    {
LABEL_179:
    {
LABEL_51:
      v45 = v138[2];
      if (!v45)
        goto LABEL_72;
      v46 = v138[4] == v32 && v138[5] == v33;
      if (!v46 && (sub_1CCB642A0() & 1) == 0)
      {
        if (v45 == 1)
          goto LABEL_72;
        v47 = v138[6] == v32 && v138[7] == v33;
        if (!v47 && (sub_1CCB642A0() & 1) == 0)
        {
          if (v45 == 2)
LABEL_72:
            __asm { BR              X8 }
          v48 = v122;
          v49 = 2;
          while (1)
          {
            v50 = v49 + 1;
            if (__OFADD__(v49, 1))
              goto LABEL_165;
            v51 = *(v48 - 1) == v32 && *v48 == v33;
            if (v51 || (sub_1CCB642A0() & 1) != 0)
              break;
            v48 += 2;
            ++v49;
            if (v50 == v45)
              goto LABEL_72;
          }
        }
      }
    }
    }
    else
    {
      v41 = v123;
      v42 = 2;
      while (1)
      {
        v43 = v42 + 1;
        if (__OFADD__(v42, 1))
        {
          __break(1u);
          goto LABEL_164;
        }
        v44 = *(v41 - 1) == v32 && *v41 == v33;
        if (v44 || (sub_1CCB642A0() & 1) != 0)
          break;
        v41 += 2;
        ++v42;
        if (v43 == v38)
          goto LABEL_51;
      }
    }
LABEL_73:
    swift_bridgeObjectRetain();
    v52 = v36;
    v53 = v36;
    v54 = v126;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v139 = v54;
    v57 = sub_1CCA074F4(v32, v33);
    v58 = v54[2];
    v59 = (v56 & 1) == 0;
    v60 = v58 + v59;
    if (__OFADD__(v58, v59))
      goto LABEL_169;
    v61 = v56;
    if (v54[3] >= v60)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1CCAEC584();
    }
    else
    {
      sub_1CCA03F94(v60, isUniquelyReferenced_nonNull_native);
      v62 = sub_1CCA074F4(v32, v33);
      if ((v61 & 1) != (v63 & 1))
        goto LABEL_175;
      v57 = v62;
    }
    v64 = v139;
    v126 = v139;
    if ((v61 & 1) != 0)
    {
      v65 = v139[7] + 24 * v57;

      *(_BYTE *)v65 = v134;
      *(_BYTE *)(v65 + 1) = v135;
      *(_BYTE *)(v65 + 2) = v136;
      *(_BYTE *)(v65 + 3) = v35;
      *(_QWORD *)(v65 + 8) = v53;
      *(_QWORD *)(v65 + 16) = v37;
    }
    else
    {
      v139[(v57 >> 6) + 8] |= 1 << v57;
      v66 = (uint64_t *)(v64[6] + 16 * v57);
      *v66 = v32;
      v66[1] = v33;
      v67 = v64[7] + 24 * v57;
      *(_BYTE *)v67 = v134;
      *(_BYTE *)(v67 + 1) = v135;
      *(_BYTE *)(v67 + 2) = v136;
      *(_BYTE *)(v67 + 3) = v35;
      *(_QWORD *)(v67 + 8) = v53;
      *(_QWORD *)(v67 + 16) = v37;
      v68 = v64[2];
      v69 = __OFADD__(v68, 1);
      v70 = v68 + 1;
      if (v69)
        goto LABEL_171;
      v64[2] = v70;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = v137;
    if (v22)
      goto LABEL_15;
LABEL_16:
    v27 = v23 + 1;
    if (__OFADD__(v23, 1))
      goto LABEL_167;
    if (v27 >= (uint64_t)v128)
      goto LABEL_85;
    v28 = v127[v27];
    v29 = v23 + 1;
    if (!v28)
    {
      v29 = v23 + 2;
      if (v23 + 2 >= (uint64_t)v128)
        goto LABEL_85;
      v28 = v127[v29];
      if (!v28)
      {
        v29 = v23 + 3;
        if (v23 + 3 >= (uint64_t)v128)
          goto LABEL_85;
        v28 = v127[v29];
        if (!v28)
          break;
      }
    }
LABEL_29:
    v22 = (v28 - 1) & v28;
    v137 = v29;
  }
  v30 = v23 + 4;
  if (v23 + 4 >= (uint64_t)v128)
    goto LABEL_85;
  v28 = v127[v30];
  if (v28)
  {
    v29 = v23 + 4;
    goto LABEL_29;
  }
  while (1)
  {
    v29 = v30 + 1;
    if (__OFADD__(v30, 1))
      goto LABEL_173;
    if (v29 >= (uint64_t)v128)
      break;
    v28 = v127[v29];
    ++v30;
    if (v28)
      goto LABEL_29;
  }
LABEL_85:
  swift_release();
  v71 = *(_QWORD *)(v130 + 64);
  v132 = v130 + 64;
  v72 = 1 << *(_BYTE *)(v130 + 32);
  v73 = -1;
  if (v72 < 64)
    v73 = ~(-1 << v72);
  v74 = v73 & v71;
  v133 = (char *)((unint64_t)(v72 + 63) >> 6);
  swift_bridgeObjectRetain();
  v75 = 0;
  v129 = (uint64_t)(v12 + 9);
  v127 = v138 + 9;
  v131 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_90:
  while (2)
  {
    if (v74)
    {
      v76 = __clz(__rbit64(v74));
      v74 &= v74 - 1;
      v77 = v76 | (v75 << 6);
LABEL_106:
      v81 = (uint64_t *)(*(_QWORD *)(v130 + 48) + 16 * v77);
      v83 = *v81;
      v82 = v81[1];
      v84 = (unsigned __int8 *)(*(_QWORD *)(v130 + 56) + 24 * v77);
      LODWORD(v81) = v84[1];
      v134 = *v84;
      v135 = (int)v81;
      LODWORD(v81) = v84[3];
      v136 = v84[2];
      LODWORD(v137) = (_DWORD)v81;
      v85 = (void *)*((_QWORD *)v84 + 1);
      v86 = *((_QWORD *)v84 + 2);
      v87 = v12[2];
      if (v87)
      {
        v88 = v12[4] == v83 && v12[5] == v82;
        if (v88 || (sub_1CCB642A0() & 1) != 0)
          goto LABEL_149;
        if (v87 != 1)
        {
          v89 = v12[6] == v83 && v12[7] == v82;
          if (v89 || (sub_1CCB642A0() & 1) != 0)
            goto LABEL_149;
          if (v87 != 2)
          {
            v90 = (_QWORD *)v129;
            v91 = 2;
            while (1)
            {
              v92 = v91 + 1;
              if (__OFADD__(v91, 1))
                break;
              v93 = *(v90 - 1) == v83 && *v90 == v82;
              if (v93 || (sub_1CCB642A0() & 1) != 0)
                goto LABEL_149;
              v90 += 2;
              ++v91;
              if (v92 == v87)
                goto LABEL_127;
            }
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            sub_1CCB642DC();
            __break(1u);
            JUMPOUT(0x1CCAB0C68);
          }
        }
      }
LABEL_127:
      v94 = v138[2];
      if (!v94)
        continue;
      v95 = v138[4] == v83 && v138[5] == v82;
      if (v95 || (sub_1CCB642A0() & 1) != 0)
        goto LABEL_149;
      if (v94 == 1)
      {
        swift_bridgeObjectRetain();
        goto LABEL_89;
      }
      v96 = v138[6] == v83 && v138[7] == v82;
      if (v96 || (sub_1CCB642A0() & 1) != 0)
      {
LABEL_149:
        swift_bridgeObjectRetain();
        v101 = v85;
        goto LABEL_151;
      }
      swift_bridgeObjectRetain();
      if (v94 == 2)
        goto LABEL_89;
      v128 = v85;
      swift_bridgeObjectRetain();
      v97 = v127;
      v98 = 2;
      do
      {
        v99 = v98 + 1;
        if (__OFADD__(v98, 1))
          goto LABEL_166;
        v100 = *(v97 - 1) == v83 && *v97 == v82;
        if (v100 || (sub_1CCB642A0() & 1) != 0)
        {
          swift_bridgeObjectRelease();
LABEL_151:
          v102 = v85;
          v103 = v131;
          v104 = swift_isUniquelyReferenced_nonNull_native();
          v139 = v103;
          v106 = sub_1CCA074F4(v83, v82);
          v107 = v103[2];
          v108 = (v105 & 1) == 0;
          v109 = v107 + v108;
          if (__OFADD__(v107, v108))
            goto LABEL_170;
          v110 = v105;
          if (v103[3] >= v109)
          {
            if ((v104 & 1) == 0)
              sub_1CCAEC584();
          }
          else
          {
            sub_1CCA03F94(v109, v104);
            v111 = sub_1CCA074F4(v83, v82);
            if ((v110 & 1) != (v112 & 1))
              goto LABEL_175;
            v106 = v111;
          }
          v113 = v139;
          v131 = v139;
          if ((v110 & 1) != 0)
          {
            v114 = v139[7] + 24 * v106;

            *(_BYTE *)v114 = v134;
            *(_BYTE *)(v114 + 1) = v135;
            *(_BYTE *)(v114 + 2) = v136;
            *(_BYTE *)(v114 + 3) = v137;
            *(_QWORD *)(v114 + 8) = v102;
            *(_QWORD *)(v114 + 16) = v86;
          }
          else
          {
            v139[(v106 >> 6) + 8] |= 1 << v106;
            v115 = (uint64_t *)(v113[6] + 16 * v106);
            *v115 = v83;
            v115[1] = v82;
            v116 = v113[7] + 24 * v106;
            *(_BYTE *)v116 = v134;
            *(_BYTE *)(v116 + 1) = v135;
            *(_BYTE *)(v116 + 2) = v136;
            *(_BYTE *)(v116 + 3) = v137;
            *(_QWORD *)(v116 + 8) = v102;
            *(_QWORD *)(v116 + 16) = v86;
            v117 = v113[2];
            v69 = __OFADD__(v117, 1);
            v118 = v117 + 1;
            if (v69)
              goto LABEL_172;
            v113[2] = v118;
            swift_bridgeObjectRetain();
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_90;
        }
        v97 += 2;
        ++v98;
      }
      while (v99 != v94);

      swift_bridgeObjectRelease();
LABEL_89:
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  v78 = v75 + 1;
  if (__OFADD__(v75, 1))
    goto LABEL_168;
  if (v78 < (uint64_t)v133)
  {
    v79 = *(_QWORD *)(v132 + 8 * v78);
    ++v75;
    if (!v79)
    {
      v75 = v78 + 1;
      if (v78 + 1 >= (uint64_t)v133)
        goto LABEL_162;
      v79 = *(_QWORD *)(v132 + 8 * v75);
      if (!v79)
      {
        v75 = v78 + 2;
        if (v78 + 2 >= (uint64_t)v133)
          goto LABEL_162;
        v79 = *(_QWORD *)(v132 + 8 * v75);
        if (!v79)
        {
          v80 = v78 + 3;
          if (v80 >= (uint64_t)v133)
            goto LABEL_162;
          v79 = *(_QWORD *)(v132 + 8 * v80);
          if (!v79)
          {
            while (1)
            {
              v75 = v80 + 1;
              if (__OFADD__(v80, 1))
                goto LABEL_174;
              if (v75 >= (uint64_t)v133)
                goto LABEL_162;
              v79 = *(_QWORD *)(v132 + 8 * v75);
              ++v80;
              if (v79)
                goto LABEL_105;
            }
          }
          v75 = v80;
        }
      }
    }
LABEL_105:
    v74 = (v79 - 1) & v79;
    v77 = __clz(__rbit64(v79)) + (v75 << 6);
    goto LABEL_106;
  }
LABEL_162:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1CC9C5064(v126, v131);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t destroy for FMIPDataManager.SeparationMonitoringCache()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FMIPDataManager.SeparationMonitoringCache(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FMIPDataManager.SeparationMonitoringCache(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FMIPDataManager.SeparationMonitoringCache(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPDataManager.SeparationMonitoringCache(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPDataManager.SeparationMonitoringCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

_QWORD *sub_1CCAB0EFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v2 = type metadata accessor for FMIPItem();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 280);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v8 = v6 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v9 = *(_QWORD *)(v3 + 72);
  v17 = *(_QWORD *)(a1 + 280);
  swift_bridgeObjectRetain_n();
  v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    sub_1CCA0BEEC(v8, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v12 = *((_QWORD *)v5 + 44);
    v11 = *((_QWORD *)v5 + 45);
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_1CCAC9E18(0, v10[2] + 1, 1, v10);
    v14 = v10[2];
    v13 = v10[3];
    if (v14 >= v13 >> 1)
      v10 = sub_1CCAC9E18((_QWORD *)(v13 > 1), v14 + 1, 1, v10);
    v10[2] = v14 + 1;
    v15 = &v10[2 * v14];
    v15[4] = v12;
    v15[5] = v11;
    v8 += v9;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease_n();
  return v10;
}

uint64_t sub_1CCAB1080(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t (*v23)();
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  const void *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  uint64_t v49;
  const void *v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)();
  uint64_t v86;
  dispatch_queue_t v87;
  uint64_t v88;
  _QWORD v89[6];
  _QWORD v90[36];
  _BYTE v91[296];

  v76 = sub_1CCB63820();
  v74 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76);
  v73 = (char *)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1CCB63868();
  v71 = *(_QWORD *)(v3 - 8);
  v72 = v3;
  MEMORY[0x1E0C80A78](v3);
  v70 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FMReverseGeocodingRequest();
  v81 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v68 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = v7;
  MEMORY[0x1E0C80A78](v6);
  v88 = (uint64_t)&v58 - v8;
  v9 = sub_1CCA14E90(&qword_1EF9E29F0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v58 - v13;
  v15 = sub_1CCB635B0();
  v78 = *(_QWORD *)(v15 - 8);
  v79 = v15;
  v16 = MEMORY[0x1E0C80A78](v15);
  v66 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = v17;
  MEMORY[0x1E0C80A78](v16);
  v77 = (char *)&v58 - v18;
  sub_1CCB635A4();
  v19 = *(_QWORD *)(a1 + 64);
  v60 = a1 + 64;
  v20 = 1 << *(_BYTE *)(a1 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v86 = v21 & v19;
  v65 = qword_1EF9E4EE0;
  v61 = (unint64_t)(v20 + 63) >> 6;
  v62 = a1;
  v59 = v61 - 1;
  result = swift_bridgeObjectRetain();
  v23 = 0;
  v24 = 0;
  v80 = 0;
  v63 = v14;
  v64 = v12;
  v25 = v86;
  if (!v86)
    goto LABEL_9;
LABEL_7:
  v86 = (v25 - 1) & v25;
  v48 = __clz(__rbit64(v25)) | (v80 << 6);
LABEL_8:
  v49 = v62;
  sub_1CCA0BEEC(*(_QWORD *)(v62 + 48) + *(_QWORD *)(v81 + 72) * v48, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  v50 = (const void *)(*(_QWORD *)(v49 + 56) + 288 * v48);
  v51 = sub_1CCA14E90((uint64_t *)&unk_1EF9E29F8);
  v52 = &v12[*(int *)(v51 + 48)];
  memcpy(v91, v50, 0x120uLL);
  memmove(v52, v50, 0x120uLL);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v12, 0, 1, v51);
  sub_1CCA31FF8((uint64_t)v91);
  while (1)
  {
    sub_1CC9C3EC0((uint64_t)v12, (uint64_t)v14, &qword_1EF9E29F0);
    v57 = sub_1CCA14E90((uint64_t *)&unk_1EF9E29F8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 48))(v14, 1, v57) == 1)
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v79);
      return sub_1CCA203A8((uint64_t)v23);
    }
    v26 = &v14[*(int *)(v57 + 48)];
    v27 = v88;
    sub_1CC9FED60((uint64_t)v14, v88, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    memcpy(v91, v26, 0x120uLL);
    v85 = v23;
    v28 = v75;
    v87 = *(dispatch_queue_t *)(v75 + v65);
    v29 = v68;
    sub_1CCA0BEEC(v27, v68, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    v30 = *(unsigned __int8 *)(v81 + 80);
    v31 = ((v30 + 24) & ~v30) + v69;
    v32 = (v30 + 24) & ~v30;
    v82 = v30 | 7;
    v83 = v32;
    v33 = swift_allocObject();
    v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + v33;
    *(_QWORD *)(v33 + 16) = v28;
    sub_1CC9FED60(v29, v33 + v32, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    *(_BYTE *)(v33 + v31) = 1;
    *(_QWORD *)(v34 + 8) = 0;
    *(_QWORD *)(v34 + 16) = 0;
    v90[4] = sub_1CCABAF3C;
    v90[5] = v33;
    v90[0] = MEMORY[0x1E0C809B0];
    v90[1] = 1107296256;
    v90[2] = sub_1CCA00C38;
    v90[3] = &unk_1E88F8FA8;
    v35 = _Block_copy(v90);
    v84 = v24;
    v36 = v35;
    swift_retain();
    v37 = v70;
    sub_1CCB63844();
    v89[0] = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
    v38 = v73;
    v39 = v76;
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v37, v38, v36);
    _Block_release(v36);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v38, v39);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v37, v72);
    swift_release();
    sub_1CCA0BEEC(v88, v29, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    memcpy(v90, v91, sizeof(v90));
    v40 = v78;
    v41 = v66;
    v42 = v79;
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v66, v77, v79);
    v43 = (v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    v44 = (v43 + *(unsigned __int8 *)(v40 + 80) + 288) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = v28;
    sub_1CC9FED60(v29, v45 + v83, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    memcpy((void *)(v45 + v43), v90, 0x120uLL);
    (*(void (**)(unint64_t, char *, uint64_t))(v40 + 32))(v45 + v44, v41, v42);
    swift_retain();
    sub_1CCA31FF8((uint64_t)v91);
    sub_1CCA203A8((uint64_t)v85);
    v46 = swift_allocObject();
    *(_QWORD *)(v46 + 16) = sub_1CCABB0F0;
    *(_QWORD *)(v46 + 24) = v45;
    v89[4] = sub_1CC9F44EC;
    v89[5] = v46;
    v89[0] = MEMORY[0x1E0C809B0];
    v89[1] = 1107296256;
    v89[2] = sub_1CC9F44AC;
    v89[3] = &unk_1E88F9020;
    v47 = _Block_copy(v89);
    swift_retain();
    swift_release();
    dispatch_sync(v87, v47);
    _Block_release(v47);
    sub_1CCA32130((uint64_t)v91);
    sub_1CCA0BF30(v88, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    LOBYTE(v40) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v40 & 1) != 0)
      break;
    v23 = sub_1CCABB0F0;
    v24 = v45;
    v14 = v63;
    v12 = v64;
    v25 = v86;
    if (v86)
      goto LABEL_7;
LABEL_9:
    v53 = v80 + 1;
    if (__OFADD__(v80, 1))
      goto LABEL_30;
    if (v53 < v61)
    {
      v54 = *(_QWORD *)(v60 + 8 * v53);
      if (v54)
        goto LABEL_12;
      v55 = v80 + 2;
      ++v80;
      if (v53 + 1 < v61)
      {
        v54 = *(_QWORD *)(v60 + 8 * v55);
        if (v54)
          goto LABEL_15;
        v80 = v53 + 1;
        if (v53 + 2 < v61)
        {
          v54 = *(_QWORD *)(v60 + 8 * (v53 + 2));
          if (v54)
          {
            v53 += 2;
            goto LABEL_12;
          }
          v55 = v53 + 3;
          v80 = v53 + 2;
          if (v53 + 3 < v61)
          {
            v54 = *(_QWORD *)(v60 + 8 * v55);
            if (!v54)
            {
              while (1)
              {
                v53 = v55 + 1;
                if (__OFADD__(v55, 1))
                  goto LABEL_31;
                if (v53 >= v61)
                {
                  v80 = v59;
                  goto LABEL_26;
                }
                v54 = *(_QWORD *)(v60 + 8 * v53);
                ++v55;
                if (v54)
                  goto LABEL_12;
              }
            }
LABEL_15:
            v53 = v55;
LABEL_12:
            v86 = (v54 - 1) & v54;
            v48 = __clz(__rbit64(v54)) + (v53 << 6);
            v80 = v53;
            goto LABEL_8;
          }
        }
      }
    }
LABEL_26:
    v56 = sub_1CCA14E90((uint64_t *)&unk_1EF9E29F8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v12, 1, 1, v56);
    v86 = 0;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1CCAB18A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t *v50;

  v43 = a3;
  v48 = (const void *)a2;
  v50 = (uint64_t *)a1;
  v4 = sub_1CCA14E90(&qword_1EF9E2A08);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_1CCB635B0();
  v45 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for FMReverseGeocodingRequest();
  MEMORY[0x1E0C80A78](v42);
  v10 = (uint64_t *)((char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = sub_1CCA14E90((uint64_t *)&unk_1EF9E2A10);
  v46 = *(_QWORD *)(v44 - 8);
  v11 = MEMORY[0x1E0C80A78](v44);
  v13 = (uint64_t *)((char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v40 - v14;
  v16 = sub_1CCB6388C();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (uint64_t *)((char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = v3;
  v20 = *(void **)(v3 + qword_1EF9E4EE0);
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E0DEF740], v16);
  v21 = v20;
  LOBYTE(v20) = sub_1CCB638A4();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) != 0)
  {
    sub_1CCA0BEEC((uint64_t)v50, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    v41 = v15;
    v23 = (uint64_t)v6;
    v24 = v45;
    v25 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v8, v43, v47);
    v26 = v10[1];
    *v13 = *v10;
    v13[1] = v26;
    v27 = (void *)v10[2];
    v28 = v48;
    sub_1CCA31FF8((uint64_t)v48);
    swift_bridgeObjectRetain();
    v13[2] = sub_1CC9F0100();
    v13[3] = v29;
    v13[4] = v27;
    LOBYTE(v26) = *((_BYTE *)v10 + *(int *)(v42 + 28));
    v30 = v27;
    sub_1CCA0BF30((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    v31 = v44;
    *((_BYTE *)v13 + *(int *)(v44 + 52)) = v26;
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))((char *)v13 + *(int *)(v31 + 44), v8, v25);
    memcpy((char *)v13 + *(int *)(v31 + 48), v28, 0x120uLL);
    v32 = (uint64_t)v41;
    sub_1CC9C3EC0((uint64_t)v13, (uint64_t)v41, (uint64_t *)&unk_1EF9E2A10);
    v33 = v50;
    v34 = sub_1CC9F0100();
    v36 = v35;
    sub_1CC9EAB74(v32, v23, (uint64_t *)&unk_1EF9E2A10);
    v37 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56);
    v37(v23, 0, 1, v31);
    swift_beginAccess();
    sub_1CCB05C00(v23, v34, v36);
    swift_endAccess();
    v38 = *v33;
    v39 = v33[1];
    sub_1CC9EAB74(v32, v23, (uint64_t *)&unk_1EF9E2A10);
    v37(v23, 0, 1, v31);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCB05C00(v23, v38, v39);
    swift_endAccess();
    return sub_1CC9C3E84(v32, (uint64_t *)&unk_1EF9E2A10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CCAB1C58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[6];

  v31 = a5;
  v32 = a6;
  v30 = a1;
  v33 = sub_1CCB63820();
  v37 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB63868();
  v35 = *(_QWORD *)(v11 - 8);
  v36 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FMReverseGeocodingRequest();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(_QWORD *)(a3 + qword_1EF9E4EE0);
  sub_1CCA0BEEC(a4, (uint64_t)v17, v18);
  v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = (v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a3;
  *(_QWORD *)(v21 + 24) = a2;
  sub_1CC9FED60((uint64_t)v17, v21 + v19, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  v22 = (uint64_t *)(v21 + v20);
  v24 = v31;
  v23 = v32;
  *v22 = v31;
  v22[1] = v23;
  *(_QWORD *)(v21 + ((v20 + 23) & 0xFFFFFFFFFFFFFFF8)) = v30;
  aBlock[4] = sub_1CCABB3CC;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F9098;
  v25 = _Block_copy(aBlock);
  swift_retain();
  v26 = a2;
  sub_1CC9DF994(v24);
  swift_unknownObjectRetain();
  sub_1CCB63844();
  v38 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  v27 = v33;
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v13, v10, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v27);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v36);
  return swift_release();
}

void sub_1CCAB1F14(uint64_t a1, void *a2, uint64_t a3, void (*a4)(double *), uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(double *);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  void *v104;
  _QWORD *v105;
  uint64_t v106;
  void *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(double *);
  void *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD v131[6];
  uint64_t v132[36];
  _QWORD v133[36];
  uint64_t v134[36];
  double v135[36];
  _OWORD v136[18];

  v130 = a3;
  v128 = a2;
  v10 = sub_1CCB63820();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CCB63868();
  v124 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v123 = (char *)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1CCB6382C();
  v117 = *(_QWORD *)(v16 - 8);
  v118 = v16;
  MEMORY[0x1E0C80A78](v16);
  v116 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1CCB635B0();
  v120 = *(_QWORD *)(v18 - 8);
  v121 = v18;
  MEMORY[0x1E0C80A78](v18);
  v119 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for FMReverseGeocodingRequest();
  v21 = MEMORY[0x1E0C80A78](v20);
  v110 = (uint64_t)&v110 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v122 = (uint64_t)&v110 - v24;
  MEMORY[0x1E0C80A78](v23);
  v125 = (uint64_t)&v110 - v25;
  v26 = qword_1EF9E4ED0;
  v27 = *(_QWORD *)(a1 + qword_1EF9E4ED0);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    v114 = v13;
    v126 = a5;
    *(_QWORD *)(a1 + qword_1EF9E4ED0) = v29;
    if (qword_1EF9DEF60 == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  v30 = sub_1CCB637FC();
  v31 = sub_1CCA16C20(v30, (uint64_t)qword_1EF9FF480);
  swift_retain_n();
  v129 = v31;
  v32 = sub_1CCB637D8();
  v33 = sub_1CCB63D48();
  v34 = os_log_type_enabled(v32, v33);
  v127 = a4;
  v111 = v10;
  v115 = v11;
  v113 = v14;
  if (v34)
  {
    v35 = swift_slowAlloc();
    v36 = swift_slowAlloc();
    v112 = a6;
    v37 = v36;
    *(_QWORD *)&v136[0] = v36;
    *(_DWORD *)v35 = 136315394;
    v38 = sub_1CCB643F0();
    *(_QWORD *)&v135[0] = sub_1CCA0CB60(v38, v39, (uint64_t *)v136);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2048;
    v40 = *(double *)(a1 + v26);
    swift_release();
    v135[0] = v40;
    sub_1CCB63E44();
    swift_release();
    _os_log_impl(&dword_1CC9BF000, v32, v33, "%s: Total operations processed: %ld.", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    v41 = v37;
    a6 = v112;
    MEMORY[0x1D17B214C](v41, -1, -1);
    MEMORY[0x1D17B214C](v35, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v42 = v128;
  v43 = *(_QWORD *)(a1 + v26);
  v44 = v130;
  if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v43 + 0x1999999999999998, 1) <= 0x1999999999999998uLL)
  {
    sub_1CCB6355C();
    v46 = v45;
    swift_retain_n();
    v47 = sub_1CCB637D8();
    v48 = sub_1CCB63D48();
    if (!os_log_type_enabled(v47, v48))
    {

      swift_release_n();
      if (v42)
        goto LABEL_10;
      goto LABEL_17;
    }
    v49 = swift_slowAlloc();
    v50 = a6;
    v51 = swift_slowAlloc();
    *(_QWORD *)&v136[0] = v51;
    *(_DWORD *)v49 = 136315394;
    v52 = sub_1CCB643F0();
    *(_QWORD *)&v135[0] = sub_1CCA0CB60(v52, v53, (uint64_t *)v136);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 12) = 2048;
    v135[0] = (double)v43 / fabs(v46);
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v47, v48, "%s: Current throughput: %f requests per second.", (uint8_t *)v49, 0x16u);
    swift_arrayDestroy();
    v54 = v51;
    a6 = v50;
    v44 = v130;
    MEMORY[0x1D17B214C](v54, -1, -1);
    v55 = v49;
    v42 = v128;
    MEMORY[0x1D17B214C](v55, -1, -1);

  }
  if (v42)
  {
LABEL_10:
    v56 = v125;
    sub_1CCA0BEEC(v44, v125, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    v57 = v42;
    v58 = v42;
    v59 = sub_1CCB637D8();
    v60 = sub_1CCB63D48();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = v42;
      v62 = swift_slowAlloc();
      v129 = swift_slowAlloc();
      *(_QWORD *)&v136[0] = v129;
      *(_DWORD *)v62 = 136315394;
      v63 = FMReverseGeocodingRequest.debugDescription.getter();
      *(_QWORD *)&v135[0] = sub_1CCA0CB60(v63, v64, (uint64_t *)v136);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA0BF30(v56, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      *(_WORD *)(v62 + 12) = 2080;
      swift_getErrorValue();
      v65 = sub_1CCB64300();
      *(_QWORD *)&v135[0] = sub_1CCA0CB60(v65, v66, (uint64_t *)v136);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v59, v60, "FMReverseGeocodingCache: Geocoding error: %s for request: %s", (uint8_t *)v62, 0x16u);
      v67 = v129;
      swift_arrayDestroy();
      v68 = v67;
LABEL_12:
      MEMORY[0x1D17B214C](v68, -1, -1);
      MEMORY[0x1D17B214C](v62, -1, -1);
      goto LABEL_14;
    }
    sub_1CCA0BF30(v56, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);

    goto LABEL_14;
  }
LABEL_17:
  if (!a6)
  {
    v92 = v110;
    sub_1CCA0BEEC(v44, v110, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    swift_retain_n();
    v59 = sub_1CCB637D8();
    v93 = sub_1CCB63D48();
    if (os_log_type_enabled(v59, v93))
    {
      v62 = swift_slowAlloc();
      v94 = swift_slowAlloc();
      *(_QWORD *)&v136[0] = v94;
      *(_DWORD *)v62 = 136315394;
      v95 = sub_1CCB643F0();
      *(_QWORD *)&v135[0] = sub_1CCA0CB60(v95, v96, (uint64_t *)v136);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v62 + 12) = 2080;
      v97 = FMReverseGeocodingRequest.debugDescription.getter();
      *(_QWORD *)&v135[0] = sub_1CCA0CB60(v97, v98, (uint64_t *)v136);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA0BF30(v92, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      _os_log_impl(&dword_1CC9BF000, v59, v93, "%s: No map items received for request: %s", (uint8_t *)v62, 0x16u);
      swift_arrayDestroy();
      v68 = v94;
      goto LABEL_12;
    }
    swift_release_n();
    sub_1CCA0BF30(v92, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
LABEL_14:

    v69 = v127;
    v70 = sub_1CC9F0100();
    v72 = v71;
    swift_beginAccess();
    v73 = (void *)sub_1CCB09648(v70, v72);
    swift_endAccess();
    swift_bridgeObjectRelease();

    if (v69)
    {
      sub_1CCA30EF4(v136);
      sub_1CC9C3EC0((uint64_t)v136, (uint64_t)v135, &qword_1ED8A71C0);
      v69(v135);
    }
    return;
  }
  v74 = (void *)swift_unknownObjectRetain_n();
  FMIPAddress.init(mapItem:)(v74, v134);
  v75 = sub_1CC9F0100();
  v77 = v76;
  swift_beginAccess();
  v78 = (void *)sub_1CCB09648(v75, v77);
  swift_endAccess();
  swift_bridgeObjectRelease();

  v79 = (uint64_t)v119;
  sub_1CCB635A4();
  memcpy(v136, v134, sizeof(v136));
  sub_1CCAB18A0(v44, (uint64_t)v136, v79);
  (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v79, v121);
  v80 = v44;
  v81 = v122;
  sub_1CCA0BEEC(v80, v122, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  memcpy(v135, v134, sizeof(v135));
  swift_retain();
  sub_1CCA31FF8((uint64_t)v135);
  swift_retain();
  sub_1CCA31FF8((uint64_t)v135);
  v82 = sub_1CCB637D8();
  v83 = sub_1CCB63D48();
  if (os_log_type_enabled(v82, v83))
  {
    v84 = swift_slowAlloc();
    v130 = swift_slowAlloc();
    v132[0] = v130;
    *(_DWORD *)v84 = 136315650;
    v85 = sub_1CCB643F0();
    v112 = a6;
    v133[0] = sub_1CCA0CB60(v85, v86, v132);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v84 + 12) = 2080;
    v87 = FMReverseGeocodingRequest.debugDescription.getter();
    v133[0] = sub_1CCA0CB60(v87, v88, v132);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA0BF30(v81, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    *(_WORD *)(v84 + 22) = 2080;
    memcpy(v133, v135, sizeof(v133));
    v89 = FMIPAddress.debugDescription.getter();
    v133[0] = sub_1CCA0CB60(v89, v90, v132);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA32130((uint64_t)v135);
    sub_1CCA32130((uint64_t)v135);
    _os_log_impl(&dword_1CC9BF000, v82, v83, "%s: address received for request: %s - %s", (uint8_t *)v84, 0x20u);
    v91 = v130;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v91, -1, -1);
    MEMORY[0x1D17B214C](v84, -1, -1);
  }
  else
  {
    swift_release_n();
    sub_1CCA0BF30(v81, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    sub_1CCA32130((uint64_t)v135);
    sub_1CCA32130((uint64_t)v135);
  }

  v99 = (uint64_t)v127;
  v100 = v111;
  v102 = v117;
  v101 = v118;
  v103 = v116;
  sub_1CC9F0ECC();
  (*(void (**)(char *, _QWORD, uint64_t))(v102 + 104))(v103, *MEMORY[0x1E0DEF540], v101);
  v104 = (void *)sub_1CCB63DC0();
  (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v101);
  memcpy(v132, v134, sizeof(v132));
  v105 = (_QWORD *)swift_allocObject();
  v105[2] = a1;
  memcpy(v105 + 3, v134, 0x120uLL);
  v106 = v126;
  v105[39] = v99;
  v105[40] = v106;
  v131[4] = sub_1CCABB4EC;
  v131[5] = v105;
  v131[0] = MEMORY[0x1E0C809B0];
  v131[1] = 1107296256;
  v131[2] = sub_1CCA00C38;
  v131[3] = &unk_1E88F90E8;
  v107 = _Block_copy(v131);
  swift_retain();
  sub_1CCA31FF8((uint64_t)v132);
  sub_1CC9DF994(v99);
  v108 = v123;
  sub_1CCB63844();
  v133[0] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  v109 = v114;
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v108, v109, v107);
  _Block_release(v107);
  swift_unknownObjectRelease();

  (*(void (**)(char *, uint64_t))(v115 + 8))(v109, v100);
  (*(void (**)(char *, uint64_t))(v124 + 8))(v108, v113);
  memcpy(v133, v134, sizeof(v133));
  sub_1CCA32130((uint64_t)v133);
  swift_release();
}

uint64_t sub_1CCAB2D04(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  v4 = sub_1CCB63820();
  v22 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63868();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v11 = sub_1CCB637FC();
  sub_1CCA16C20(v11, (uint64_t)qword_1ED8AD7F8);
  v12 = sub_1CCB637D8();
  v13 = sub_1CCB63D48();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1CC9BF000, v12, v13, "FMDiskIO: save to disk", v14, 2u);
    MEMORY[0x1D17B214C](v14, -1, -1);
  }

  v15 = *a1;
  v28 = a1[1];
  v29 = v15;
  v16 = a1[2];
  v26 = a1[3];
  v27 = v16;
  v25 = a1[4];
  v17 = swift_allocObject();
  v18 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v17 + 24) = *(_OWORD *)a1;
  *(_QWORD *)(v17 + 16) = v2;
  *(_OWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 56) = a1[4];
  aBlock[4] = sub_1CCABB648;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F9228;
  v19 = _Block_copy(aBlock);
  sub_1CC9F1844((uint64_t)&v29);
  sub_1CC9F1844((uint64_t)&v28);
  sub_1CC9F1844((uint64_t)&v27);
  sub_1CC9F1844((uint64_t)&v26);
  sub_1CC9F1844((uint64_t)&v25);
  swift_retain();
  sub_1CCB63844();
  v23 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v10, v6, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t sub_1CCAB2FF4(uint64_t a1)
{
  return sub_1CC9D4D5C(a1, (uint64_t)&unk_1E88F9260, (uint64_t)sub_1CCA207C4, (uint64_t)&unk_1E88F9278);
}

uint64_t sub_1CCAB3010(uint64_t a1)
{
  return sub_1CC9D4D5C(a1, (uint64_t)&unk_1E88F91C0, (uint64_t)sub_1CCABB5C0, (uint64_t)&unk_1E88F91D8);
}

uint64_t sub_1CCAB302C(uint64_t a1)
{
  return sub_1CC9D4D5C(a1, (uint64_t)&unk_1E88F95D0, (uint64_t)sub_1CCABBA44, (uint64_t)&unk_1E88F95E8);
}

uint64_t sub_1CCAB3048(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  _QWORD v20[2];
  _QWORD aBlock[6];

  v2 = v1;
  v4 = sub_1CCB63820();
  v20[0] = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63868();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v11 = sub_1CCB637FC();
  sub_1CCA16C20(v11, (uint64_t)qword_1ED8AD7F8);
  v12 = sub_1CCB637D8();
  v13 = sub_1CCB63D48();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1CC9BF000, v12, v13, "FMDiskIO: save to disk", v14, 2u);
    MEMORY[0x1D17B214C](v14, -1, -1);
  }

  v15 = swift_allocObject();
  v16 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v15 + 72) = v16;
  *(_OWORD *)(v15 + 88) = *(_OWORD *)(a1 + 64);
  v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a1;
  *(_QWORD *)(v15 + 16) = v2;
  *(_QWORD *)(v15 + 104) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(v15 + 40) = v17;
  aBlock[4] = sub_1CCABB7E8;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F92C8;
  v18 = _Block_copy(aBlock);
  sub_1CC9DA35C(a1);
  swift_retain();
  sub_1CCB63844();
  v20[1] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v10, v6, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v20[0] + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void sub_1CCAB3314(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  void *v14;
  id v15;
  void *v16;
  unint64_t v17;
  void *v18;
  id v19;
  void *v20;
  unsigned __int8 v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  unsigned __int8 v34;
  id v35;
  uint64_t inited;
  void **v37;
  void *v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  id v66;
  id v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  unint64_t v94;
  char v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  id v99;
  unint64_t v100;
  uint64_t v101[2];

  v101[1] = *MEMORY[0x1E0C80C00];
  v86 = sub_1CCB637A8();
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86);
  v88 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9E2A78);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_1CCA14E90(&qword_1EF9E2A80);
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90);
  v87 = (uint64_t)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCB63490();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_OWORD *)(a2 + 16);
  v96 = *(_OWORD *)a2;
  v97 = v13;
  v98 = *(_QWORD *)(a2 + 32);
  v95 = 0;
  v14 = (void *)objc_opt_self();
  v15 = objc_msgSend(v14, sel_defaultManager);
  v16 = *(void **)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v91 = a1;
  v93 = v16;
  v94 = v17;
  v18 = (void *)sub_1CCB63964();
  LOBYTE(a2) = objc_msgSend(v15, sel_fileExistsAtPath_isDirectory_, v18, &v95);

  if ((a2 & 1) != 0)
    goto LABEL_3;
  v19 = objc_msgSend(v14, sel_defaultManager);
  sub_1CCB63424();
  v20 = (void *)sub_1CCB6343C();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v99 = 0;
  v21 = objc_msgSend(v19, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v20, 1, 0, &v99);

  v22 = v99;
  if ((v21 & 1) != 0)
  {
LABEL_3:
    sub_1CCB63388();
    swift_allocObject();
    v23 = sub_1CCB6337C();
    sub_1CCABB654();
    v24 = (uint64_t)v92;
    v25 = sub_1CCB63370();
    if (v24)
    {
      swift_release();
      v27 = (void *)v24;
LABEL_21:
      if (qword_1ED8AA630 != -1)
        swift_once();
      v65 = sub_1CCB637FC();
      sub_1CCA16C20(v65, (uint64_t)qword_1ED8AD7F8);
      v66 = v27;
      v67 = v27;
      v68 = sub_1CCB637D8();
      v69 = sub_1CCB63D30();
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc();
        v71 = (void *)swift_slowAlloc();
        v99 = v71;
        *(_DWORD *)v70 = 136315138;
        swift_getErrorValue();
        v72 = sub_1CCB64300();
        v101[0] = sub_1CCA0CB60(v72, v73, (uint64_t *)&v99);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1CC9BF000, v68, v69, "FMDiskIO: Could not save objects to disk %s", v70, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v71, -1, -1);
        MEMORY[0x1D17B214C](v70, -1, -1);

      }
      else
      {

      }
      return;
    }
    v28 = v25;
    v29 = v26;
    v30 = v91;
    sub_1CC9EAB74(v91 + *(_QWORD *)(*(_QWORD *)v91 + 128), (uint64_t)v7, &qword_1EF9E2A78);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v7, 1, v90) == 1)
    {
      sub_1CC9C3E84((uint64_t)v7, &qword_1EF9E2A78);
      v92 = (void *)v28;
      v31 = (void *)sub_1CCB634B4();
      v32 = *(_QWORD *)(v30 + 48);
      v99 = v93;
      v100 = v94;
      swift_bridgeObjectRetain();
      v90 = v32;
      sub_1CCB63A24();
      v33 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      v34 = objc_msgSend(v31, sel_writeToFile_atomically_, v33, 1);

      if ((v34 & 1) != 0)
      {
        v89 = v29;
LABEL_8:
        v35 = objc_msgSend(v14, sel_defaultManager);
        sub_1CCA14E90(qword_1ED8A7FB8);
        inited = swift_initStackObject();
        v37 = (void **)MEMORY[0x1E0CB2AD8];
        *(_OWORD *)(inited + 16) = xmmword_1CCB677E0;
        v38 = *v37;
        *(_QWORD *)(inited + 32) = *v37;
        v39 = (void *)*MEMORY[0x1E0CB2AC0];
        type metadata accessor for FileProtectionType(0);
        *(_QWORD *)(inited + 64) = v40;
        *(_QWORD *)(inited + 40) = v39;
        v41 = v38;
        v42 = v39;
        sub_1CCAC52B4(inited);
        type metadata accessor for FileAttributeKey(0);
        sub_1CC9CAA38((unint64_t *)&unk_1ED8A7EF0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1CCB66964);
        v43 = (void *)sub_1CCB638C8();
        swift_bridgeObjectRelease();
        v99 = v93;
        v100 = v94;
        swift_bridgeObjectRetain();
        sub_1CCB63A24();
        v44 = (void *)sub_1CCB63964();
        swift_bridgeObjectRelease();
        v99 = 0;
        LOBYTE(inited) = objc_msgSend(v35, sel_setAttributes_ofItemAtPath_error_, v43, v44, &v99);

        if ((inited & 1) == 0)
        {
          v64 = v99;
          v27 = (void *)sub_1CCB63400();

          swift_willThrow();
          sub_1CCA1B120((uint64_t)v92, v89);
          swift_release();
          goto LABEL_21;
        }
        v45 = qword_1ED8AA630;
        v46 = v99;
        if (v45 != -1)
          swift_once();
        v47 = sub_1CCB637FC();
        sub_1CCA16C20(v47, (uint64_t)qword_1ED8AD7F8);
        swift_retain_n();
        v48 = sub_1CCB637D8();
        v49 = sub_1CCB63D48();
        if (!os_log_type_enabled(v48, v49))
        {
          swift_release();
          sub_1CCA1B120((uint64_t)v92, v89);

          swift_release_n();
          return;
        }
        v50 = (uint8_t *)swift_slowAlloc();
        v51 = swift_slowAlloc();
        v101[0] = v51;
        *(_DWORD *)v50 = 136315138;
        v88 = (char *)v23;
        v99 = v93;
        v100 = v94;
        swift_bridgeObjectRetain();
        sub_1CCB63A24();
        v99 = (id)sub_1CCA0CB60((uint64_t)v99, v100, v101);
        sub_1CCB63E44();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v48, v49, "FMDiskIO: Successfully wrote object to disk @ %s", v50, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v51, -1, -1);
        MEMORY[0x1D17B214C](v50, -1, -1);
        swift_release();
        v52 = (uint64_t)v92;
        v53 = v89;
LABEL_34:
        sub_1CCA1B120(v52, v53);

        return;
      }
    }
    else
    {
      sub_1CC9C3EC0((uint64_t)v7, v87, &qword_1EF9E2A80);
      sub_1CCB63778();
      sub_1CC9CAA38(&qword_1EF9E2A48, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21358], MEMORY[0x1E0D21360]);
      v63 = v86;
      v74 = sub_1CCB63370();
      v76 = v75;
      v92 = (void *)v28;
      v77 = (void *)sub_1CCB634B4();
      sub_1CCA1B120(v74, v76);
      v79 = *(_QWORD *)(v30 + 40);
      v78 = *(_QWORD *)(v30 + 48);
      v99 = v93;
      v100 = v94;
      swift_bridgeObjectRetain();
      v84 = v79;
      v90 = v78;
      sub_1CCB63A24();
      v80 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      LODWORD(v78) = objc_msgSend(v77, sel_writeToFile_atomically_, v80, 1);

      (*(void (**)(char *, uint64_t))(v85 + 8))(v88, v63);
      sub_1CC9C3E84(v87, &qword_1EF9E2A80);
      if ((_DWORD)v78)
      {
        v89 = v29;
        goto LABEL_8;
      }
    }
    if (qword_1ED8AA630 != -1)
      swift_once();
    v81 = sub_1CCB637FC();
    sub_1CCA16C20(v81, (uint64_t)qword_1ED8AD7F8);
    v48 = sub_1CCB637D8();
    v82 = sub_1CCB63D48();
    if (os_log_type_enabled(v48, v82))
    {
      v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v83 = 0;
      _os_log_impl(&dword_1CC9BF000, v48, v82, "FMDiskIO: Could not save objects to disk", v83, 2u);
      MEMORY[0x1D17B214C](v83, -1, -1);
    }
    swift_release();
    v52 = (uint64_t)v92;
    v53 = v29;
    goto LABEL_34;
  }
  v54 = v22;
  v55 = sub_1CCB63400();

  swift_willThrow();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v56 = sub_1CCB637FC();
  sub_1CCA16C20(v56, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v57 = sub_1CCB637D8();
  v58 = sub_1CCB63D48();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc();
    v60 = swift_slowAlloc();
    v92 = (void *)v55;
    v61 = v60;
    *(_DWORD *)v59 = 136315138;
    v101[0] = v60;
    v99 = v93;
    v100 = v94;
    swift_bridgeObjectRetain();
    sub_1CCB63A24();
    v99 = (id)sub_1CCA0CB60((uint64_t)v99, v100, v101);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v57, v58, "FMDiskIO: Could not create directory for content: %s", v59, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v61, -1, -1);
    MEMORY[0x1D17B214C](v59, -1, -1);
    v62 = v92;
  }
  else
  {
    swift_release_n();
    v62 = (void *)v55;
  }

}

void sub_1CCAB4070(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  void *v15;
  unint64_t v16;
  void *v17;
  id v18;
  void *v19;
  unsigned __int8 v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unsigned __int8 v34;
  char **v35;
  id v36;
  uint64_t inited;
  void **v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  id v67;
  id v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  id v97;
  unint64_t v98;
  uint64_t v99[3];

  v99[1] = *MEMORY[0x1E0C80C00];
  v86 = sub_1CCB637A8();
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86);
  v88 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9E2AE0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_1CCA14E90(&qword_1EF9E2AE8);
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90);
  v87 = (unint64_t)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCB63490();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = a2;
  v95 = 0;
  v13 = (void *)objc_opt_self();
  v14 = objc_msgSend(v13, sel_defaultManager);
  v15 = *(void **)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v91 = a1;
  v93 = v15;
  v94 = v16;
  v17 = (void *)sub_1CCB63964();
  LOBYTE(a2) = objc_msgSend(v14, sel_fileExistsAtPath_isDirectory_, v17, &v95);

  if ((a2 & 1) != 0)
    goto LABEL_3;
  v18 = objc_msgSend(v13, sel_defaultManager);
  sub_1CCB63424();
  v19 = (void *)sub_1CCB6343C();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v97 = 0;
  v20 = objc_msgSend(v18, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v19, 1, 0, &v97);

  v21 = v97;
  if ((v20 & 1) != 0)
  {
LABEL_3:
    sub_1CCB63388();
    swift_allocObject();
    v22 = sub_1CCB6337C();
    sub_1CCA14E90(&qword_1EF9E2AF0);
    sub_1CCA1552C((unint64_t *)&unk_1EF9E2B38, &qword_1EF9E2AF0, (uint64_t (*)(void))sub_1CCABB7F4, MEMORY[0x1E0DEAF10]);
    v23 = (uint64_t)v92;
    v24 = sub_1CCB63370();
    if (v23)
    {
      swift_release();
      v26 = (void *)v23;
LABEL_20:
      if (qword_1ED8AA630 != -1)
        swift_once();
      v66 = sub_1CCB637FC();
      sub_1CCA16C20(v66, (uint64_t)qword_1ED8AD7F8);
      v67 = v26;
      v68 = v26;
      v69 = sub_1CCB637D8();
      v70 = sub_1CCB63D30();
      if (os_log_type_enabled(v69, v70))
      {
        v71 = (uint8_t *)swift_slowAlloc();
        v72 = (void *)swift_slowAlloc();
        v97 = v72;
        *(_DWORD *)v71 = 136315138;
        swift_getErrorValue();
        v73 = sub_1CCB64300();
        v99[0] = sub_1CCA0CB60(v73, v74, (uint64_t *)&v97);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1CC9BF000, v69, v70, "FMDiskIO: Could not save objects to disk %s", v71, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v72, -1, -1);
        MEMORY[0x1D17B214C](v71, -1, -1);

      }
      else
      {

      }
      return;
    }
    v27 = v24;
    v28 = v25;
    v29 = v91;
    sub_1CC9EAB74(v91 + *(_QWORD *)(*(_QWORD *)v91 + 128), (uint64_t)v7, &qword_1EF9E2AE0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v7, 1, v90) == 1)
    {
      sub_1CC9C3E84((uint64_t)v7, &qword_1EF9E2AE0);
      v92 = (void *)v27;
      v30 = (void *)sub_1CCB634B4();
      v32 = *(_QWORD *)(v29 + 40);
      v31 = *(_QWORD *)(v29 + 48);
      v97 = v93;
      v98 = v94;
      swift_bridgeObjectRetain();
      v90 = v31;
      sub_1CCB63A24();
      v33 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      v34 = objc_msgSend(v30, sel_writeToFile_atomically_, v33, 1);

      v35 = &selRef_coordinate;
      if ((v34 & 1) != 0)
      {
LABEL_7:
        v36 = objc_msgSend(v13, v35[108], v85);
        sub_1CCA14E90(qword_1ED8A7FB8);
        inited = swift_initStackObject();
        v38 = (void **)MEMORY[0x1E0CB2AD8];
        *(_OWORD *)(inited + 16) = xmmword_1CCB677E0;
        v39 = *v38;
        *(_QWORD *)(inited + 32) = *v38;
        v40 = (void *)*MEMORY[0x1E0CB2AC0];
        type metadata accessor for FileProtectionType(0);
        *(_QWORD *)(inited + 64) = v41;
        *(_QWORD *)(inited + 40) = v40;
        v42 = v39;
        v43 = v40;
        sub_1CCAC52B4(inited);
        type metadata accessor for FileAttributeKey(0);
        sub_1CC9CAA38((unint64_t *)&unk_1ED8A7EF0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1CCB66964);
        v44 = (void *)sub_1CCB638C8();
        swift_bridgeObjectRelease();
        v97 = v93;
        v98 = v94;
        swift_bridgeObjectRetain();
        sub_1CCB63A24();
        v45 = (void *)sub_1CCB63964();
        swift_bridgeObjectRelease();
        v97 = 0;
        LOBYTE(inited) = objc_msgSend(v36, sel_setAttributes_ofItemAtPath_error_, v44, v45, &v97);

        if ((inited & 1) == 0)
        {
          v65 = v97;
          v26 = (void *)sub_1CCB63400();

          swift_willThrow();
          sub_1CCA1B120((uint64_t)v92, v28);
          swift_release();
          goto LABEL_20;
        }
        v89 = v32;
        v46 = qword_1ED8AA630;
        v47 = v97;
        if (v46 != -1)
          swift_once();
        v48 = sub_1CCB637FC();
        sub_1CCA16C20(v48, (uint64_t)qword_1ED8AD7F8);
        swift_retain_n();
        v49 = sub_1CCB637D8();
        v50 = sub_1CCB63D48();
        if (!os_log_type_enabled(v49, v50))
        {
          swift_release();
          sub_1CCA1B120((uint64_t)v92, v28);

          swift_release_n();
          return;
        }
        v51 = (uint8_t *)swift_slowAlloc();
        v52 = swift_slowAlloc();
        v88 = (char *)v22;
        v53 = v52;
        v99[0] = v52;
        *(_DWORD *)v51 = 136315138;
        v87 = v28;
        v97 = v93;
        v98 = v94;
        swift_bridgeObjectRetain();
        sub_1CCB63A24();
        v97 = (id)sub_1CCA0CB60((uint64_t)v97, v98, v99);
        sub_1CCB63E44();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v49, v50, "FMDiskIO: Successfully wrote object to disk @ %s", v51, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v53, -1, -1);
        MEMORY[0x1D17B214C](v51, -1, -1);
        swift_release();
        v54 = (uint64_t)v92;
        v55 = v87;
LABEL_33:
        sub_1CCA1B120(v54, v55);

        return;
      }
    }
    else
    {
      sub_1CC9C3EC0((uint64_t)v7, v87, &qword_1EF9E2AE8);
      sub_1CCB63778();
      sub_1CC9CAA38(&qword_1EF9E2A48, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21358], MEMORY[0x1E0D21360]);
      v64 = v86;
      v75 = sub_1CCB63370();
      v77 = v76;
      v92 = (void *)v27;
      v78 = (void *)sub_1CCB634B4();
      sub_1CCA1B120(v75, v77);
      v80 = *(_QWORD *)(v29 + 40);
      v79 = *(_QWORD *)(v29 + 48);
      v97 = v93;
      v98 = v94;
      swift_bridgeObjectRetain();
      v89 = v80;
      v90 = v79;
      sub_1CCB63A24();
      v81 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      LODWORD(v79) = objc_msgSend(v78, sel_writeToFile_atomically_, v81, 1);

      (*(void (**)(char *, uint64_t))(v85 + 8))(v88, v64);
      sub_1CC9C3E84(v87, &qword_1EF9E2AE8);
      if ((_DWORD)v79)
      {
        v35 = &selRef_coordinate;
        v32 = v89;
        goto LABEL_7;
      }
    }
    if (qword_1ED8AA630 != -1)
      swift_once();
    v82 = sub_1CCB637FC();
    sub_1CCA16C20(v82, (uint64_t)qword_1ED8AD7F8);
    v49 = sub_1CCB637D8();
    v83 = sub_1CCB63D48();
    if (os_log_type_enabled(v49, v83))
    {
      v84 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v84 = 0;
      _os_log_impl(&dword_1CC9BF000, v49, v83, "FMDiskIO: Could not save objects to disk", v84, 2u);
      MEMORY[0x1D17B214C](v84, -1, -1);
    }
    swift_release();
    v54 = (uint64_t)v92;
    v55 = v28;
    goto LABEL_33;
  }
  v56 = v21;
  v57 = sub_1CCB63400();

  swift_willThrow();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v58 = sub_1CCB637FC();
  sub_1CCA16C20(v58, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v59 = sub_1CCB637D8();
  v60 = sub_1CCB63D48();
  if (os_log_type_enabled(v59, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc();
    v62 = swift_slowAlloc();
    *(_DWORD *)v61 = 136315138;
    v99[0] = v62;
    v92 = (void *)v57;
    v97 = v93;
    v98 = v94;
    swift_bridgeObjectRetain();
    sub_1CCB63A24();
    v97 = (id)sub_1CCA0CB60((uint64_t)v97, v98, v99);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v59, v60, "FMDiskIO: Could not create directory for content: %s", v61, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v62, -1, -1);
    MEMORY[0x1D17B214C](v61, -1, -1);
    v63 = v92;
  }
  else
  {
    swift_release_n();
    v63 = (void *)v57;
  }

}

void sub_1CCAB4D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  id v16;
  void *v17;
  unint64_t v18;
  void *v19;
  id v20;
  void *v21;
  unsigned __int8 v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  unsigned __int8 v35;
  id v36;
  uint64_t inited;
  void **v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  id v67;
  id v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  unint64_t v95;
  char v96;
  id v97;
  unint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v87 = sub_1CCB637A8();
  v86 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87);
  v89 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9E2AB8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_1CCA14E90(&qword_1EF9E2AC0);
  v90 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91);
  v88 = (uint64_t)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCB63490();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_OWORD *)(a2 + 48);
  v102 = *(_OWORD *)(a2 + 32);
  v103 = v13;
  v104 = *(_OWORD *)(a2 + 64);
  v105 = *(_QWORD *)(a2 + 80);
  v14 = *(_OWORD *)(a2 + 16);
  v100 = *(_OWORD *)a2;
  v101 = v14;
  v96 = 0;
  v15 = (void *)objc_opt_self();
  v16 = objc_msgSend(v15, sel_defaultManager);
  v17 = *(void **)(a1 + 24);
  v18 = *(_QWORD *)(a1 + 32);
  v92 = a1;
  v94 = v17;
  v95 = v18;
  v19 = (void *)sub_1CCB63964();
  LOBYTE(a2) = objc_msgSend(v16, sel_fileExistsAtPath_isDirectory_, v19, &v96);

  if ((a2 & 1) != 0)
    goto LABEL_3;
  v20 = objc_msgSend(v15, sel_defaultManager);
  sub_1CCB63424();
  v21 = (void *)sub_1CCB6343C();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v97 = 0;
  v22 = objc_msgSend(v20, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v21, 1, 0, &v97);

  v23 = v97;
  if ((v22 & 1) != 0)
  {
LABEL_3:
    sub_1CCB63388();
    swift_allocObject();
    v24 = sub_1CCB6337C();
    sub_1CCABB7F4();
    v25 = (uint64_t)v93;
    v26 = sub_1CCB63370();
    if (v25)
    {
      swift_release();
      v28 = (void *)v25;
LABEL_21:
      if (qword_1ED8AA630 != -1)
        swift_once();
      v66 = sub_1CCB637FC();
      sub_1CCA16C20(v66, (uint64_t)qword_1ED8AD7F8);
      v67 = v28;
      v68 = v28;
      v69 = sub_1CCB637D8();
      v70 = sub_1CCB63D30();
      if (os_log_type_enabled(v69, v70))
      {
        v71 = (uint8_t *)swift_slowAlloc();
        v72 = (void *)swift_slowAlloc();
        v97 = v72;
        *(_DWORD *)v71 = 136315138;
        swift_getErrorValue();
        v73 = sub_1CCB64300();
        v99 = sub_1CCA0CB60(v73, v74, (uint64_t *)&v97);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1CC9BF000, v69, v70, "FMDiskIO: Could not save objects to disk %s", v71, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v72, -1, -1);
        MEMORY[0x1D17B214C](v71, -1, -1);

      }
      else
      {

      }
      return;
    }
    v29 = v26;
    v30 = v27;
    v31 = v92;
    sub_1CC9EAB74(v92 + *(_QWORD *)(*(_QWORD *)v92 + 128), (uint64_t)v7, &qword_1EF9E2AB8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v7, 1, v91) == 1)
    {
      sub_1CC9C3E84((uint64_t)v7, &qword_1EF9E2AB8);
      v93 = (void *)v29;
      v32 = (void *)sub_1CCB634B4();
      v33 = *(_QWORD *)(v31 + 48);
      v97 = v94;
      v98 = v95;
      swift_bridgeObjectRetain();
      v91 = v33;
      sub_1CCB63A24();
      v34 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      v35 = objc_msgSend(v32, sel_writeToFile_atomically_, v34, 1);

      if ((v35 & 1) != 0)
      {
        v90 = v30;
LABEL_8:
        v36 = objc_msgSend(v15, sel_defaultManager);
        sub_1CCA14E90(qword_1ED8A7FB8);
        inited = swift_initStackObject();
        v38 = (void **)MEMORY[0x1E0CB2AD8];
        *(_OWORD *)(inited + 16) = xmmword_1CCB677E0;
        v39 = *v38;
        *(_QWORD *)(inited + 32) = *v38;
        v40 = (void *)*MEMORY[0x1E0CB2AC0];
        type metadata accessor for FileProtectionType(0);
        *(_QWORD *)(inited + 64) = v41;
        *(_QWORD *)(inited + 40) = v40;
        v42 = v39;
        v43 = v40;
        sub_1CCAC52B4(inited);
        type metadata accessor for FileAttributeKey(0);
        sub_1CC9CAA38((unint64_t *)&unk_1ED8A7EF0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1CCB66964);
        v44 = (void *)sub_1CCB638C8();
        swift_bridgeObjectRelease();
        v97 = v94;
        v98 = v95;
        swift_bridgeObjectRetain();
        sub_1CCB63A24();
        v45 = (void *)sub_1CCB63964();
        swift_bridgeObjectRelease();
        v97 = 0;
        LOBYTE(inited) = objc_msgSend(v36, sel_setAttributes_ofItemAtPath_error_, v44, v45, &v97);

        if ((inited & 1) == 0)
        {
          v65 = v97;
          v28 = (void *)sub_1CCB63400();

          swift_willThrow();
          sub_1CCA1B120((uint64_t)v93, v90);
          swift_release();
          goto LABEL_21;
        }
        v46 = qword_1ED8AA630;
        v47 = v97;
        if (v46 != -1)
          swift_once();
        v48 = sub_1CCB637FC();
        sub_1CCA16C20(v48, (uint64_t)qword_1ED8AD7F8);
        swift_retain_n();
        v49 = sub_1CCB637D8();
        v50 = sub_1CCB63D48();
        if (!os_log_type_enabled(v49, v50))
        {
          swift_release();
          sub_1CCA1B120((uint64_t)v93, v90);

          swift_release_n();
          return;
        }
        v51 = (uint8_t *)swift_slowAlloc();
        v52 = swift_slowAlloc();
        v99 = v52;
        *(_DWORD *)v51 = 136315138;
        v89 = (char *)v24;
        v97 = v94;
        v98 = v95;
        swift_bridgeObjectRetain();
        sub_1CCB63A24();
        v97 = (id)sub_1CCA0CB60((uint64_t)v97, v98, &v99);
        sub_1CCB63E44();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v49, v50, "FMDiskIO: Successfully wrote object to disk @ %s", v51, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v52, -1, -1);
        MEMORY[0x1D17B214C](v51, -1, -1);
        swift_release();
        v53 = (uint64_t)v93;
        v54 = v90;
LABEL_34:
        sub_1CCA1B120(v53, v54);

        return;
      }
    }
    else
    {
      sub_1CC9C3EC0((uint64_t)v7, v88, &qword_1EF9E2AC0);
      sub_1CCB63778();
      sub_1CC9CAA38(&qword_1EF9E2A48, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21358], MEMORY[0x1E0D21360]);
      v64 = v87;
      v75 = sub_1CCB63370();
      v77 = v76;
      v93 = (void *)v29;
      v78 = (void *)sub_1CCB634B4();
      sub_1CCA1B120(v75, v77);
      v80 = *(_QWORD *)(v31 + 40);
      v79 = *(_QWORD *)(v31 + 48);
      v97 = v94;
      v98 = v95;
      swift_bridgeObjectRetain();
      v85 = v80;
      v91 = v79;
      sub_1CCB63A24();
      v81 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      LODWORD(v79) = objc_msgSend(v78, sel_writeToFile_atomically_, v81, 1);

      (*(void (**)(char *, uint64_t))(v86 + 8))(v89, v64);
      sub_1CC9C3E84(v88, &qword_1EF9E2AC0);
      if ((_DWORD)v79)
      {
        v90 = v30;
        goto LABEL_8;
      }
    }
    if (qword_1ED8AA630 != -1)
      swift_once();
    v82 = sub_1CCB637FC();
    sub_1CCA16C20(v82, (uint64_t)qword_1ED8AD7F8);
    v49 = sub_1CCB637D8();
    v83 = sub_1CCB63D48();
    if (os_log_type_enabled(v49, v83))
    {
      v84 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v84 = 0;
      _os_log_impl(&dword_1CC9BF000, v49, v83, "FMDiskIO: Could not save objects to disk", v84, 2u);
      MEMORY[0x1D17B214C](v84, -1, -1);
    }
    swift_release();
    v53 = (uint64_t)v93;
    v54 = v30;
    goto LABEL_34;
  }
  v55 = v23;
  v56 = sub_1CCB63400();

  swift_willThrow();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v57 = sub_1CCB637FC();
  sub_1CCA16C20(v57, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v58 = sub_1CCB637D8();
  v59 = sub_1CCB63D48();
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc();
    v61 = swift_slowAlloc();
    v93 = (void *)v56;
    v62 = v61;
    *(_DWORD *)v60 = 136315138;
    v99 = v61;
    v97 = v94;
    v98 = v95;
    swift_bridgeObjectRetain();
    sub_1CCB63A24();
    v97 = (id)sub_1CCA0CB60((uint64_t)v97, v98, &v99);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v58, v59, "FMDiskIO: Could not create directory for content: %s", v60, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v62, -1, -1);
    MEMORY[0x1D17B214C](v60, -1, -1);
    v63 = v93;
  }
  else
  {
    swift_release_n();
    v63 = (void *)v56;
  }

}

uint64_t sub_1CCAB5AF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD aBlock[6];
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v2 = v1;
  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  v4 = *(NSObject **)(v1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = &v13;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = sub_1CCABB89C;
  *(_QWORD *)(v6 + 24) = v5;
  aBlock[4] = sub_1CC9F4530;
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CC9F44AC;
  aBlock[3] = &unk_1E88F9520;
  v7 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v4, v7);
  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v10 = v14;
    v11 = v13;
    v9 = v15;
    result = swift_release();
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 32) = v9;
  }
  return result;
}

uint64_t sub_1CCAB5C54()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD aBlock[6];
  uint64_t v8;

  v8 = 0;
  v1 = *(NSObject **)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v8;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = sub_1CCABB950;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_1CC9F4530;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CC9F44AC;
  aBlock[3] = &unk_1E88F9598;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = v8;
    swift_release();
    return v6;
  }
  return result;
}

void sub_1CCAB5D8C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unsigned __int8 v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD v58[2];
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;

  v66 = a2;
  v64 = sub_1CCB63748();
  v63 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v65 = (char *)v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CCB637A8();
  v62 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v67 = (char *)v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1EF9E2A78);
  MEMORY[0x1E0C80A78](v6);
  v72 = (uint64_t)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_1CCA14E90(&qword_1EF9E2A80);
  v71 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70);
  v74 = (uint64_t)v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCB63490();
  v75 = *(_QWORD *)(v9 - 8);
  v76 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v73 = v4;
  v12 = sub_1CCB637FC();
  v13 = sub_1CCA16C20(v12, (uint64_t)qword_1ED8AD7F8);
  v14 = sub_1CCB637D8();
  v15 = sub_1CCB63D48();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1CC9BF000, v14, v15, "FMDiskIO: read from disk", v16, 2u);
    MEMORY[0x1D17B214C](v16, -1, -1);
  }

  v17 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v18 = a1[3];
  v19 = a1[4];
  v21 = a1[5];
  v20 = a1[6];
  *(_QWORD *)&v77 = v18;
  *((_QWORD *)&v77 + 1) = v19;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  v22 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v23 = objc_msgSend(v17, sel_fileExistsAtPath_, v22);

  if ((v23 & 1) != 0)
  {
    v69 = v13;
    v59 = a1;
    *(_QWORD *)&v77 = v18;
    *((_QWORD *)&v77 + 1) = v19;
    swift_bridgeObjectRetain();
    sub_1CCB63A24();
    sub_1CCB63424();
    swift_bridgeObjectRelease();
    v28 = sub_1CCB6349C();
    v30 = v29;
    v31 = v20;
    v32 = v19;
    v68 = v18;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v11, v76);
    v33 = v59;
    swift_retain();
    sub_1CCA1B164(v28, v30);
    swift_retain();
    sub_1CCA1B164(v28, v30);
    v34 = sub_1CCB637D8();
    v35 = sub_1CCB63D48();
    v36 = v35;
    v37 = os_log_type_enabled(v34, v35);
    v38 = v30;
    v61 = v21;
    v60 = v31;
    v58[1] = v32;
    if (v37)
    {
      v39 = swift_slowAlloc();
      v76 = swift_slowAlloc();
      v80 = v76;
      *(_DWORD *)v39 = 136315394;
      LODWORD(v75) = v36;
      *(_QWORD *)&v77 = v68;
      *((_QWORD *)&v77 + 1) = v32;
      swift_bridgeObjectRetain();
      v40 = v34;
      v38 = v30;
      sub_1CCB63A24();
      *(_QWORD *)&v77 = sub_1CCA0CB60(v77, *((unint64_t *)&v77 + 1), &v80);
      sub_1CCB63E44();
      v41 = v59;
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 12) = 2080;
      v42 = sub_1CCB634A8();
      *(_QWORD *)&v77 = sub_1CCA0CB60(v42, v43, &v80);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA1B120(v28, v30);
      sub_1CCA1B120(v28, v30);
      _os_log_impl(&dword_1CC9BF000, v34, (os_log_type_t)v75, "FMDiskIO: file: %s data: %s", (uint8_t *)v39, 0x16u);
      v44 = v76;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v44, -1, -1);
      MEMORY[0x1D17B214C](v39, -1, -1);

      v33 = v41;
    }
    else
    {
      swift_release_n();
      sub_1CCA1B120(v28, v30);
      sub_1CCA1B120(v28, v30);

    }
    v45 = v70;
    sub_1CCB63364();
    swift_allocObject();
    sub_1CCB63358();
    v46 = v72;
    sub_1CC9EAB74((uint64_t)v33 + *(_QWORD *)(*v33 + 128), v72, &qword_1EF9E2A78);
    v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v46, 1, v45);
    v48 = v73;
    if (v47 == 1)
    {
      sub_1CC9C3E84(v46, &qword_1EF9E2A78);
      sub_1CCABB8B4();
      sub_1CCB6334C();
      sub_1CCA1B120(v28, v38);
      swift_release();
    }
    else
    {
      sub_1CC9C3EC0(v46, v74, &qword_1EF9E2A80);
      sub_1CC9CAA38(&qword_1EF9E2B08, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21358], MEMORY[0x1E0D21368]);
      v53 = v67;
      sub_1CCB6334C();
      v76 = v28;
      v54 = v65;
      sub_1CCB63754();
      v55 = sub_1CCB6379C();
      v57 = v56;
      (*(void (**)(char *, uint64_t))(v63 + 8))(v54, v64);
      sub_1CCABB8B4();
      sub_1CCB6334C();
      swift_release();
      sub_1CCA1B120(v55, v57);
      sub_1CCA1B120(v76, v38);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v53, v48);
      sub_1CC9C3E84(v74, &qword_1EF9E2A80);
    }
    v49 = v79;
    v50 = v66;
    v51 = *v66;
    v52 = v78;
    *(_OWORD *)v66 = v77;
    *((_OWORD *)v50 + 1) = v52;
    v50[4] = v49;
    sub_1CCABB8F8(v51);
  }
  else
  {
    v68 = v18;
    v60 = v20;
    v61 = v21;
    swift_retain_n();
    v24 = sub_1CCB637D8();
    v25 = sub_1CCB63D30();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v80 = v27;
      *(_DWORD *)v26 = 136315138;
      *(_QWORD *)&v77 = v68;
      *((_QWORD *)&v77 + 1) = v19;
      swift_bridgeObjectRetain();
      sub_1CCB63A24();
      *(_QWORD *)&v77 = sub_1CCA0CB60(v77, *((unint64_t *)&v77 + 1), &v80);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v24, v25, "FMDiskIO: Disk archive does not exist at: %s", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v27, -1, -1);
      MEMORY[0x1D17B214C](v26, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t sub_1CCAB6A9C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);

  v10 = type metadata accessor for FMIPDeviceConnectedState(0);
  v46 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v45 = (uint64_t)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v44 - v13;
  v15 = sub_1CCB63604();
  v47 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1CCA14E90(&qword_1EF9E2A98);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = -1 << *(_BYTE *)(a1 + 32);
  v22 = ~v21;
  v23 = *(_QWORD *)(a1 + 64);
  v24 = -v21;
  v48 = a1;
  v49 = a1 + 64;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  else
    v25 = -1;
  v50 = v22;
  v51 = 0;
  v52 = v25 & v23;
  v53 = a2;
  v54 = a3;
  v44[2] = a1;
  swift_bridgeObjectRetain();
  v44[1] = a3;
  swift_retain();
  sub_1CCAA7A18((uint64_t)v20);
  v26 = sub_1CCA14E90(&qword_1EF9E2A90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v20, 1, v26) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CCA2F54C();
    return swift_release();
  }
  v55 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
  while (1)
  {
    v29 = (uint64_t)&v20[*(int *)(v26 + 48)];
    v30 = v15;
    v55(v17, v20, v15);
    sub_1CC9FED60(v29, (uint64_t)v14, type metadata accessor for FMIPDeviceConnectedState);
    v31 = *a5;
    v33 = sub_1CCAC8D64((uint64_t)v17);
    v34 = *(_QWORD *)(v31 + 16);
    v35 = (v32 & 1) == 0;
    v36 = v34 + v35;
    if (__OFADD__(v34, v35))
      break;
    v37 = v32;
    if (*(_QWORD *)(v31 + 24) >= v36)
    {
      if ((a4 & 1) != 0)
      {
        if ((v32 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        sub_1CCAECFFC();
        if ((v37 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      sub_1CCAE9410(v36, a4 & 1);
      v38 = sub_1CCAC8D64((uint64_t)v17);
      if ((v37 & 1) != (v39 & 1))
        goto LABEL_22;
      v33 = v38;
      if ((v37 & 1) != 0)
      {
LABEL_7:
        v28 = v45;
        sub_1CCA0BEEC((uint64_t)v14, v45, type metadata accessor for FMIPDeviceConnectedState);
        sub_1CCA0BF30((uint64_t)v14, type metadata accessor for FMIPDeviceConnectedState);
        v15 = v30;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v17, v30);
        sub_1CCABB698(v28, *(_QWORD *)(*a5 + 56) + *(_QWORD *)(v46 + 72) * v33, type metadata accessor for FMIPDeviceConnectedState);
        goto LABEL_8;
      }
    }
    v40 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v33 >> 6) + 64) |= 1 << v33;
    v15 = v30;
    v55((char *)(v40[6] + *(_QWORD *)(v47 + 72) * v33), v17, v30);
    sub_1CC9FED60((uint64_t)v14, v40[7] + *(_QWORD *)(v46 + 72) * v33, type metadata accessor for FMIPDeviceConnectedState);
    v41 = v40[2];
    v42 = __OFADD__(v41, 1);
    v43 = v41 + 1;
    if (v42)
      goto LABEL_21;
    v40[2] = v43;
LABEL_8:
    sub_1CCAA7A18((uint64_t)v20);
    v26 = sub_1CCA14E90(&qword_1EF9E2A90);
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v20, 1, v26) == 1)
      goto LABEL_5;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = sub_1CCB642DC();
  __break(1u);
  return result;
}

uint64_t sub_1CCAB6E6C(unint64_t a1)
{
  return sub_1CCAC997C(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_1CCAB6E80(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1CCB64090();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x1D17B1558);
}

uint64_t sub_1CCAB6EE8(unint64_t a1)
{
  return sub_1CCAC9F38(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1CCAB6EFC(unint64_t a1)
{
  return sub_1CCA0C178(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1CCAB6F10(unint64_t a1)
{
  return sub_1CCAC9CDC(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1CCAB6F24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + *(int *)(sub_1CCA14E90(&qword_1EF9E28B0) + 48);
  v5 = a2 + *(int *)(sub_1CCA14E90(&qword_1EF9E2A90) + 48);
  v6 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return sub_1CCA0BEEC(v4, v5, type metadata accessor for FMIPDeviceConnectedState);
}

uint64_t sub_1CCAB6FA8(uint64_t a1, const void *a2, void (*a3)(_BYTE *))
{
  uint64_t result;
  _BYTE v7[288];
  _BYTE v8[288];
  _BYTE v9[288];
  _BYTE __dst[288];

  memcpy(__dst, a2, sizeof(__dst));
  memcpy(v9, a2, sizeof(v9));
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 352))(v9);
  if (a3)
  {
    memcpy(v8, __dst, sizeof(v8));
    nullsub_1(v8);
    sub_1CC9C3EC0((uint64_t)v8, (uint64_t)v7, &qword_1ED8A71C0);
    sub_1CCA31FF8((uint64_t)__dst);
    a3(v7);
    return sub_1CCA32130((uint64_t)__dst);
  }
  return result;
}

void sub_1CCAB7064(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;
  _OWORD v5[2];
  uint64_t v6;

  v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  v6 = *(_QWORD *)(a2 + 32);
  v4 = (void *)MEMORY[0x1D17B1B7C]();
  sub_1CCAB3314(a1, (uint64_t)v5);
  objc_autoreleasePoolPop(v4);
}

void sub_1CCAB70BC(uint64_t a1, uint64_t *a2)
{
  sub_1CCA2073C(a1, a2, &qword_1EF9E2AA0, (uint64_t *)&unk_1EF9E2AA8, &qword_1ED8A7E80, (void (*)(void))sub_1CCA1FBE8);
}

void sub_1CCAB70E0(uint64_t a1, uint64_t *a2)
{
  sub_1CCA2073C(a1, a2, &qword_1EF9E2A50, &qword_1EF9E2A58, (uint64_t *)&unk_1EF9E2A60, (void (*)(void))sub_1CCA7B73C);
}

void sub_1CCAB7104(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a2;
  v4 = (void *)MEMORY[0x1D17B1B7C]();
  sub_1CCAB4070(a1, v3);
  objc_autoreleasePoolPop(v4);
}

void sub_1CCAB7150(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void *v5;
  _OWORD v6[5];
  uint64_t v7;

  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  v5 = (void *)MEMORY[0x1D17B1B7C]();
  sub_1CCAB4D7C(a1, (uint64_t)v6);
  objc_autoreleasePoolPop(v5);
}

uint64_t sub_1CCAB71B8(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD __dst[45];
  uint64_t v26;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = 0;
    v24 = result + 32;
    v5 = a2 + 56;
    v6 = MEMORY[0x1E0DEE9D8];
    v23 = *(_QWORD *)(result + 16);
    while (1)
    {
      v22 = v6;
      if (v4 <= v2)
        v7 = v2;
      else
        v7 = v4;
      while (1)
      {
        if (v4 == v7)
        {
          __break(1u);
          return result;
        }
        result = (uint64_t)memcpy(__dst, (const void *)(v24 + 352 * v4++), 0x160uLL);
        if (*(_QWORD *)(a2 + 16))
          break;
LABEL_7:
        if (v4 == v2)
          return v22;
      }
      v9 = __dst[0];
      v8 = __dst[1];
      sub_1CCB6433C();
      sub_1CCA31D3C((uint64_t)__dst);
      swift_bridgeObjectRetain();
      sub_1CCB639F4();
      v10 = sub_1CCB64384();
      v11 = -1 << *(_BYTE *)(a2 + 32);
      v12 = v10 & ~v11;
      if (((*(_QWORD *)(v5 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_6;
      v13 = *(_QWORD *)(a2 + 48);
      v14 = (_QWORD *)(v13 + 16 * v12);
      v15 = *v14 == v9 && v14[1] == v8;
      if (!v15 && (sub_1CCB642A0() & 1) == 0)
        break;
LABEL_23:
      swift_bridgeObjectRelease();
      v6 = v22;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v26 = v22;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1CCA63960(0, *(_QWORD *)(v22 + 16) + 1, 1);
        v6 = v26;
      }
      v21 = *(_QWORD *)(v6 + 16);
      v20 = *(_QWORD *)(v6 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_1CCA63960(v20 > 1, v21 + 1, 1);
        v6 = v26;
      }
      *(_QWORD *)(v6 + 16) = v21 + 1;
      result = (uint64_t)memcpy((void *)(v6 + 352 * v21 + 32), __dst, 0x160uLL);
      v2 = v23;
      if (v4 == v23)
        return v6;
    }
    v16 = ~v11;
    while (1)
    {
      v12 = (v12 + 1) & v16;
      if (((*(_QWORD *)(v5 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        break;
      v17 = (_QWORD *)(v13 + 16 * v12);
      v18 = *v17 == v9 && v17[1] == v8;
      if (v18 || (sub_1CCB642A0() & 1) != 0)
        goto LABEL_23;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    result = sub_1CCA31E98((uint64_t)__dst);
    v2 = v23;
    goto LABEL_7;
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1CCAB73FC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v3 = v2;
  v18 = a2;
  v5 = type metadata accessor for FMIPDevice();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (v9)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1CCA1F730(0, v9, 0);
    v10 = v19;
    v11 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v12 = a1 + v11;
    v13 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      sub_1CC9F9064(v12, v18, (uint64_t)v8);
      if (v3)
        break;
      v3 = 0;
      v19 = v10;
      v15 = *(_QWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1CCA1F730(v14 > 1, v15 + 1, 1);
        v10 = v19;
      }
      *(_QWORD *)(v10 + 16) = v15 + 1;
      sub_1CC9FED60((uint64_t)v8, v10 + v11 + v15 * v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v12 += v13;
      if (!--v9)
        return v10;
    }
    swift_release();
  }
  return v10;
}

uint64_t sub_1CCAB754C(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD __dst[45];
  uint64_t v23;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = 0;
    v20 = result + 32;
    v18 = a2 + 7;
    v19 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if (v4 <= v2)
        v5 = v2;
      else
        v5 = v4;
      v21 = v5;
      while (1)
      {
        if (v4 == v21)
          goto LABEL_34;
        result = (uint64_t)memcpy(__dst, (const void *)(v20 + 352 * v4++), 0x160uLL);
        v6 = a2[2];
        if (!v6)
          goto LABEL_7;
        v7 = __dst[0];
        v8 = __dst[1];
        if (a2[4] == __dst[0] && a2[5] == __dst[1])
          break;
        result = sub_1CCB642A0();
        if ((result & 1) != 0)
          break;
        if (v6 != 1)
        {
          v10 = v18;
          v11 = 1;
          while (1)
          {
            v12 = v11 + 1;
            if (__OFADD__(v11, 1))
              break;
            if (*(v10 - 1) == v7 && *v10 == v8)
              goto LABEL_25;
            result = sub_1CCB642A0();
            if ((result & 1) != 0)
              goto LABEL_25;
            v10 += 2;
            ++v11;
            if (v12 == v6)
              goto LABEL_7;
          }
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }
LABEL_7:
        if (v4 == v2)
          return v19;
      }
LABEL_25:
      sub_1CCA31D3C((uint64_t)__dst);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v15 = v19;
      v23 = v19;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1CCA63960(0, *(_QWORD *)(v19 + 16) + 1, 1);
        v15 = v23;
      }
      v17 = *(_QWORD *)(v15 + 16);
      v16 = *(_QWORD *)(v15 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_1CCA63960(v16 > 1, v17 + 1, 1);
        v15 = v23;
      }
      *(_QWORD *)(v15 + 16) = v17 + 1;
      v19 = v15;
      result = (uint64_t)memcpy((void *)(v15 + 352 * v17 + 32), __dst, 0x160uLL);
      if (v4 == v2)
        return v19;
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1CCAB7730(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v37 = a2;
  v4 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63604();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v36 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FMIPItem();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v34 = (uint64_t)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v33 - v14;
  v16 = *(_QWORD *)(a1 + 16);
  v17 = MEMORY[0x1E0DEE9D8];
  if (v16)
  {
    v35 = v2;
    v40 = MEMORY[0x1E0DEE9D8];
    sub_1CCA63A2C(0, v16, 0);
    v38 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v39 = v8;
    v18 = a1 + v38;
    v19 = *(_QWORD *)(v11 + 72);
    while (1)
    {
      sub_1CCB635BC();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
        break;
      v20 = (uint64_t)v36;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v36, v6, v7);
      v21 = *(_QWORD *)(v37 + 248);
      if (!*(_QWORD *)(v21 + 16))
        goto LABEL_9;
      swift_bridgeObjectRetain();
      v22 = sub_1CCAC8D64(v20);
      if ((v23 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_9:
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v20, v7);
LABEL_10:
        sub_1CCA0BEEC(v18, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        goto LABEL_11;
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v22);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v25 = v35;
      v26 = (_QWORD *)sub_1CCAABF4C(v24);
      swift_bridgeObjectRelease();
      v27 = swift_bridgeObjectRetain();
      v28 = sub_1CCAB754C(v27, v26);
      v35 = v25;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = v34;
      sub_1CCA0BEEC(v18, v34, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      FMIPItem.init(item:safeLocations:)(v29, v28, (uint64_t)v15);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v36, v7);
LABEL_11:
      v17 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1CCA63A2C(0, *(_QWORD *)(v17 + 16) + 1, 1);
        v17 = v40;
      }
      v31 = *(_QWORD *)(v17 + 16);
      v30 = *(_QWORD *)(v17 + 24);
      if (v31 >= v30 >> 1)
      {
        sub_1CCA63A2C(v30 > 1, v31 + 1, 1);
        v17 = v40;
      }
      *(_QWORD *)(v17 + 16) = v31 + 1;
      sub_1CC9FED60((uint64_t)v15, v17 + v38 + v31 * v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v18 += v19;
      --v16;
      v8 = v39;
      if (!v16)
        return v17;
    }
    sub_1CC9C3E84((uint64_t)v6, &qword_1ED8A8EF8);
    goto LABEL_10;
  }
  return v17;
}

uint64_t sub_1CCAB7A74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  int64_t v35;
  _BYTE v36[288];
  _QWORD v37[44];
  _OWORD v38[18];
  _BYTE v39[288];
  _BYTE v40[288];
  _QWORD v41[45];
  uint64_t v42;

  v29 = type metadata accessor for FMReverseGeocodingRequest();
  MEMORY[0x1E0C80A78](v29);
  v28 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v42 = MEMORY[0x1E0DEE9D8];
    sub_1CCA63960(0, v5, 0);
    v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore15FMIPDataManager_geocodingCache);
    v8 = (char *)(a1 + 32);
    v6 = v42;
    v9 = &v41[5];
    v30 = &v37[5];
    v31 = (char *)&v41[41];
    v35 = v5 - 1;
    v33 = &v41[5];
    while (1)
    {
      v34 = v8;
      memcpy(v41, v8, 0x160uLL);
      if (v7)
      {
        v10 = v41[0];
        v11 = v41[1];
        v12 = (void *)v41[3];
        v14 = v28;
        v13 = v29;
        v15 = sub_1CC9EAB74(v7 + qword_1EF9FF7A8, (uint64_t)&v28[*(int *)(v29 + 24)], (uint64_t *)&unk_1ED8A8B10);
        *v14 = v10;
        v14[1] = v11;
        *((_BYTE *)v14 + *(int *)(v13 + 32)) = 0;
        *((_BYTE *)v14 + *(int *)(v13 + 28)) = 0;
        v14[2] = v12;
        MEMORY[0x1E0C80A78](v15);
        *(&v27 - 2) = v7;
        *(&v27 - 1) = (uint64_t)v14;
        sub_1CCA31D3C((uint64_t)v41);
        sub_1CCA31D3C((uint64_t)v41);
        swift_bridgeObjectRetain();
        v16 = v12;
        sub_1CCA14E90(&qword_1ED8A71C0);
        v17 = v32;
        sub_1CCB63D9C();
        sub_1CCA0BF30((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        sub_1CC9C3EC0((uint64_t)v37, (uint64_t)v36, &qword_1ED8A71C0);
        sub_1CC9C3EC0((uint64_t)v36, (uint64_t)v38, &qword_1ED8A71C0);
        v18 = sub_1CCA33738((uint64_t)v38) == 1;
        v32 = v17;
        if (!v18)
        {
          sub_1CC9C3EC0((uint64_t)v36, (uint64_t)v39, &qword_1ED8A71C0);
          v9 = v33;
          goto LABEL_9;
        }
        sub_1CC9C3EC0((uint64_t)v36, (uint64_t)v40, &qword_1ED8A71C0);
        v9 = v33;
      }
      else
      {
        sub_1CCA30EF4(v38);
        sub_1CCA31D3C((uint64_t)v41);
        sub_1CCA31D3C((uint64_t)v41);
        sub_1CC9C3EC0((uint64_t)v38, (uint64_t)v40, &qword_1ED8A71C0);
      }
      sub_1CCA307F0((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
      sub_1CCA307F0((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
      sub_1CC9C3EC0((uint64_t)v9, (uint64_t)v39, &qword_1ED8A71C0);
LABEL_9:
      v19 = v7;
      sub_1CCA307F0((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
      sub_1CCA31E98((uint64_t)v41);
      v42 = v6;
      v21 = *(_QWORD *)(v6 + 16);
      v20 = *(_QWORD *)(v6 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_1CCA63960(v20 > 1, v21 + 1, 1);
        v6 = v42;
      }
      v22 = *v31;
      v23 = BYTE1(v41[41]);
      v24 = v41[42];
      v25 = v41[43];
      v37[0] = v41[0];
      v37[1] = v41[1];
      LODWORD(v37[2]) = v41[2];
      v37[3] = v41[3];
      v37[4] = v41[4];
      sub_1CC9C3EC0((uint64_t)v39, (uint64_t)v30, &qword_1ED8A71C0);
      LOBYTE(v37[41]) = v22;
      BYTE1(v37[41]) = v23;
      v37[42] = v24;
      v37[43] = v25;
      *(_QWORD *)(v6 + 16) = v21 + 1;
      memcpy((void *)(v6 + 352 * v21 + 32), v37, 0x160uLL);
      if (!v35)
        return v6;
      v9 = v33;
      v8 = v34 + 352;
      --v35;
      v7 = v19;
    }
  }
  return v6;
}

unint64_t sub_1CCAB7E34(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  void *v39;
  id v40;
  id v41;
  double v42;
  double v43;
  id v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  double v58;
  double v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  id v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD v88[2];
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t updated;
  int v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  __int128 v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  _OWORD v120[18];

  updated = type metadata accessor for FMIPItemUpdateType(0);
  MEMORY[0x1E0C80A78](updated);
  v99 = (char *)v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCB635B0();
  v102 = *(_QWORD *)(v5 - 8);
  v103 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for FMIPItem();
  v8 = *(_QWORD *)(v91 - 8);
  v9 = MEMORY[0x1E0C80A78](v91);
  v93 = (char *)v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v98 = (uint64_t)v88 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v92 = (char *)v88 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v97 = (uint64_t)v88 - v16;
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v88 - v17;
  v101 = *a2;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v19 = sub_1CCB637FC();
  v20 = sub_1CCA16C20(v19, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v96 = v20;
  v21 = sub_1CCB637D8();
  v22 = sub_1CCB63D48();
  v23 = os_log_type_enabled(v21, v22);
  v24 = MEMORY[0x1E0DEE9B8];
  v104 = v18;
  if (v23)
  {
    v25 = swift_slowAlloc();
    v108 = v8;
    v26 = v25;
    v27 = swift_slowAlloc();
    *(_QWORD *)&v120[0] = v27;
    *(_DWORD *)v26 = 134218242;
    v113 = *(_QWORD *)(a1 + 16);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    LOBYTE(v113) = v101;
    v28 = FMIPLocationType.rawValue.getter();
    v113 = sub_1CCA0CB60(v28, v29, (uint64_t *)v120);
    v24 = MEMORY[0x1E0DEE9B8];
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v21, v22, "FMIPDataManager: updateItemLocations %ld type %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    v30 = v27;
    v18 = v104;
    MEMORY[0x1D17B214C](v30, -1, -1);
    v8 = v108;
    MEMORY[0x1D17B214C](v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v31 = *(_QWORD *)(a1 + 16);
  v33 = (uint64_t)v92;
  v32 = (uint64_t)v93;
  if (!v31)
    return MEMORY[0x1E0DEE9D8];
  v95 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v34 = v24;
  v35 = a1 + v95;
  v88[1] = a1;
  swift_bridgeObjectRetain();
  sub_1CCA30EF4(v120);
  v36 = v35;
  v94 = *(_QWORD *)(v8 + 72);
  v37 = MEMORY[0x1E0DEE9D8];
  v90 = v34 + 8;
  *(_QWORD *)&v38 = 136315650;
  v89 = v38;
  do
  {
    v107 = v36;
    v108 = v31;
    sub_1CCA0BEEC(v36, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v119 = 0uLL;
    v118 = 0;
    v117 = 0uLL;
    v116 = 0;
    v39 = (void *)*((_QWORD *)v18 + 49);
    if (v39)
    {
      LOBYTE(v111) = 16;
      v40 = v39;
      v41 = objc_msgSend(v40, sel_timestamp);
      sub_1CCB63580();

      sub_1CCB6355C();
      v43 = v42;
      (*(void (**)(char *, uint64_t))(v102 + 8))(v7, v103);
      v44 = objc_msgSend(v40, sel_floor);
      if (v44)
      {
        v45 = v44;
        v46 = v37;
        v47 = (uint64_t)objc_msgSend(v44, sel_level);

      }
      else
      {
        v46 = v37;
        v47 = -1;
      }
      sub_1CC9FB3D4(v40, (char *)&v111, v43 < -3600.0, 0, 1, (uint64_t)&v113, (double)v47);
      v48 = v114;
      v49 = v115;
      v50 = 256;
      if (!BYTE1(v113))
        v50 = 0;
      v51 = v50 | v113;
      v52 = 0x10000;
      if (!BYTE2(v113))
        v52 = 0;
      v53 = v51 | v52 | ((unint64_t)BYTE3(v113) << 24);
      swift_beginAccess();
      v54 = (void *)v119;
      v118 = v53;
      *(_QWORD *)&v119 = v48;
      *((_QWORD *)&v119 + 1) = v49;

      v18 = v104;
      v37 = v46;
    }
    v106 = v37;
    v55 = (void *)*((_QWORD *)v18 + 40);
    if (v55)
    {
      LOBYTE(v111) = 16;
      v56 = v55;
      v57 = objc_msgSend(v56, sel_timestamp);
      sub_1CCB63580();

      sub_1CCB6355C();
      v59 = v58;
      (*(void (**)(char *, uint64_t))(v102 + 8))(v7, v103);
      v60 = objc_msgSend(v56, sel_floor);
      if (v60)
      {
        v61 = v60;
        v62 = (uint64_t)objc_msgSend(v60, sel_level);

      }
      else
      {
        v62 = -1;
      }
      sub_1CC9FB3D4(v56, (char *)&v111, v59 < -3600.0, 0, 1, (uint64_t)&v113, (double)v62);
      v63 = v114;
      v64 = v115;
      v65 = 256;
      if (!BYTE1(v113))
        v65 = 0;
      v66 = v65 | v113;
      v67 = 0x10000;
      if (!BYTE2(v113))
        v67 = 0;
      v68 = v66 | v67 | ((unint64_t)BYTE3(v113) << 24);
      swift_beginAccess();
      v69 = (void *)v117;
      v116 = v68;
      *(_QWORD *)&v117 = v63;
      *((_QWORD *)&v117 + 1) = v64;

      v18 = v104;
    }
    v70 = v97;
    sub_1CCA0BEEC((uint64_t)v18, v97, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v71 = sub_1CCB637D8();
    v72 = sub_1CCB63D48();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = swift_slowAlloc();
      v74 = swift_slowAlloc();
      v113 = v74;
      *(_DWORD *)v73 = v89;
      v75 = (uint64_t *)(v70 + *(int *)(v91 + 56));
      v76 = *v75;
      v77 = v75[1];
      swift_bridgeObjectRetain();
      v32 = (uint64_t)v93;
      *(_QWORD *)(v73 + 4) = sub_1CCA0CB60(v76, v77, &v113);
      v33 = (uint64_t)v92;
      swift_bridgeObjectRelease();
      sub_1CCA0BF30(v70, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      *(_WORD *)(v73 + 12) = 1024;
      swift_beginAccess();
      *(_DWORD *)(v73 + 14) = (_QWORD)v119 != 0;
      *(_WORD *)(v73 + 18) = 1024;
      swift_beginAccess();
      *(_DWORD *)(v73 + 20) = (_QWORD)v117 != 0;
      _os_log_impl(&dword_1CC9BF000, v71, v72, "FMIPDataManager: updateItemLocations item %s location: %{BOOL}d, crowdsourcedLocation: %{BOOL}d", (uint8_t *)v73, 0x18u);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v74, -1, -1);
      v78 = v73;
      v18 = v104;
      MEMORY[0x1D17B214C](v78, -1, -1);
    }
    else
    {
      sub_1CCA0BF30(v70, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    }

    v79 = v98;
    sub_1CCA0BEEC((uint64_t)v18, v98, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v80 = (uint64_t)v99;
    *v99 = v101;
    swift_storeEnumTagMultiPayload();
    sub_1CC9C3EC0((uint64_t)v120, (uint64_t)&v113, &qword_1ED8A71C0);
    swift_beginAccess();
    v111 = v118;
    v105 = v119;
    v112 = v119;
    swift_beginAccess();
    v109 = v116;
    v110 = v117;
    v81 = (void *)v105;
    v82 = (id)v117;
    v83 = v81;
    FMIPItem.init(item:updateType:address:location:crowdSourcedLocation:connected:)(v79, v80, (uint64_t)&v113, &v111, &v109, 2u, v33);
    sub_1CCA0BEEC(v33, v32, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v37 = v106;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v37 = sub_1CCAC9CDC(0, *(_QWORD *)(v37 + 16) + 1, 1, v37);
    v85 = *(_QWORD *)(v37 + 16);
    v84 = *(_QWORD *)(v37 + 24);
    if (v85 >= v84 >> 1)
      v37 = sub_1CCAC9CDC(v84 > 1, v85 + 1, 1, v37);
    *(_QWORD *)(v37 + 16) = v85 + 1;
    v86 = v94;
    sub_1CC9FED60(v32, v37 + v95 + v85 * v94, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30(v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);

    v36 = v107 + v86;
    v31 = v108 - 1;
  }
  while (v108 != 1);
  swift_bridgeObjectRelease();
  return v37;
}

uint64_t sub_1CCAB8778(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t result;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned __int8 v72;
  _BYTE v73[24];
  _QWORD v74[3];
  uint64_t v75;
  __int128 v76;
  char v77[288];
  _BYTE v78[296];

  v57 = a2;
  v3 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v3);
  v56 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v5);
  v62 = (uint64_t)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1EF9E21F8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v61 = (uint64_t)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v60 = (uint64_t)&v53 - v10;
  v11 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CCB63604();
  v68 = *(_QWORD *)(v14 - 8);
  v69 = v14;
  MEMORY[0x1E0C80A78](v14);
  v63 = (uint64_t)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for FMIPDevice();
  v66 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x1E0C80A78](v16);
  v59 = (uint64_t)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v58 = (uint64_t)&v53 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v53 - v21;
  v23 = sub_1CCA14E90(&qword_1ED8A7EE0);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v65 = (char *)&v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1CCA14E90(&qword_1ED8A7EE8);
  v27 = MEMORY[0x1E0C80A78](v26);
  v29 = (unint64_t *)((char *)&v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v27);
  v31 = (unint64_t *)((char *)&v53 - v30);
  v71 = *(_QWORD *)(a1 + 16);
  v55 = v22 + 304;
  result = swift_bridgeObjectRetain_n();
  v33 = 0;
  v67 = a1;
  v64 = a1;
  while (v33 == v71)
  {
    v34 = 1;
    v33 = v71;
LABEL_7:
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v29, v34, 1, v23);
    sub_1CC9C3EC0((uint64_t)v29, (uint64_t)v31, &qword_1ED8A7EE8);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v24 + 48))(v31, 1, v23) == 1)
    {
      swift_bridgeObjectRelease();
      return v64;
    }
    v70 = *v31;
    sub_1CC9FED60((uint64_t)v31 + *(int *)(v23 + 48), (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (*((_QWORD *)v22 + 3))
    {
      v37 = v13;
      swift_bridgeObjectRetain();
      sub_1CCB635BC();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v13, 1, v69) == 1)
      {
        sub_1CCA0BF30((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        result = sub_1CC9C3E84((uint64_t)v13, &qword_1ED8A8EF8);
      }
      else
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v63, v13, v69);
        if (*(_QWORD *)(v57 + 16) && (v38 = v57, v39 = sub_1CCAC8D64(v63), (v40 & 1) != 0))
        {
          v41 = v39;
          *(_QWORD *)&v53 = *(_QWORD *)(v38 + 56);
          v54 = type metadata accessor for FMIPDeviceConnectedState(0);
          v42 = *(_QWORD *)(v54 - 8);
          v43 = v53 + *(_QWORD *)(v42 + 72) * v41;
          v44 = v60;
          sub_1CCA0BEEC(v43, v60, type metadata accessor for FMIPDeviceConnectedState);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v44, 0, 1, v54);
        }
        else
        {
          v45 = type metadata accessor for FMIPDeviceConnectedState(0);
          v44 = v60;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v60, 1, 1, v45);
        }
        sub_1CCA0BEEC((uint64_t)v22, v59, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v54 = *((_QWORD *)v22 + 31);
        sub_1CC9C3EC0((uint64_t)v55, (uint64_t)v78, &qword_1ED8A71C0);
        sub_1CC9C3EC0((uint64_t)v78, (uint64_t)v77, &qword_1ED8A71C0);
        v75 = *((_QWORD *)v22 + 35);
        v53 = *((_OWORD *)v22 + 18);
        v76 = v53;
        memset(v74, 0, sizeof(v74));
        v46 = type metadata accessor for FMIPItemGroup();
        memset(v73, 0, sizeof(v73));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v62, 1, 1, v46);
        v72 = 7;
        sub_1CC9EAB74(v44, v61, &qword_1EF9E21F8);
        v47 = type metadata accessor for FMIPDeviceLostModeMetadata();
        v48 = (uint64_t)v56;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v56, 1, 1, v47);
        v49 = (void *)v54;
        swift_bridgeObjectRetain();
        sub_1CCA307F0((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
        v50 = (id)v53;
        FMIPDevice.init(device:historicalLocations:address:crowdSourcedLocation:location:shiftedLocation:crowdSourcedLocating:itemGroup:deviceWithYou:findingCapable:beaconType:deviceConnectedState:lostModeMetadata:)(v59, v49, v77, &v75, v74, (unsigned int (*)(char *, uint64_t, uint64_t))v73, 2, v62, v58, 2u, 2, &v72, v61, v48);
        v51 = v64;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = sub_1CCAB6EFC(v51);
          v64 = result;
        }
        v52 = v60;
        if ((v70 & 0x8000000000000000) != 0)
          goto LABEL_22;
        if (v70 >= *(_QWORD *)(v64 + 16))
          goto LABEL_23;
        v13 = v37;
        sub_1CCABB698(v58, v64+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v70, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        sub_1CC9C3E84(v52, &qword_1EF9E21F8);
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v63, v69);
        result = sub_1CCA0BF30((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      }
    }
    else
    {
      result = sub_1CCA0BF30((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    }
  }
  if (v33 < v71)
  {
    v35 = (uint64_t)&v65[*(int *)(v23 + 48)];
    sub_1CCA0BEEC(v67+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v33, v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v36 = (uint64_t)v29 + *(int *)(v23 + 48);
    *v29 = v33;
    sub_1CC9FED60(v35, v36, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v34 = 0;
    ++v33;
    goto LABEL_7;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1CCAB8E60(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t result;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int128 v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  unsigned __int8 v84;
  _BYTE v85[24];
  _QWORD v86[3];
  uint64_t v87;
  __int128 v88;
  char v89[288];
  _BYTE v90[296];

  v4 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v4);
  v67 = (uint64_t)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1EF9E21F8);
  MEMORY[0x1E0C80A78](v6);
  v66 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v8);
  v72 = (uint64_t)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v71 = *(_QWORD *)(v65 - 8);
  v10 = MEMORY[0x1E0C80A78](v65);
  v64 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v69 = (uint64_t)&v62 - v12;
  v13 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v13);
  v83 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1CCB63604();
  v16 = *(_QWORD *)(v15 - 8);
  v78 = v15;
  v79 = v16;
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for FMIPDevice();
  v75 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v70 = (uint64_t)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v68 = (uint64_t)&v62 - v23;
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v62 - v24;
  v26 = sub_1CCA14E90(&qword_1ED8A7EE0);
  v81 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v74 = (char *)&v62 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1CCA14E90(&qword_1ED8A7EE8);
  v29 = MEMORY[0x1E0C80A78](v28);
  v31 = (unint64_t *)((char *)&v62 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v29);
  v33 = (unint64_t *)((char *)&v62 - v32);
  v82 = *(_QWORD *)(a1 + 16);
  v63 = v25 + 304;
  result = swift_bridgeObjectRetain_n();
  v35 = 0;
  v76 = a1;
  v77 = v31;
  v73 = a1;
  while (2)
  {
    while (2)
    {
      while (2)
      {
        v36 = v82;
        v37 = v35 >= v82;
        if (v35 == v82)
        {
LABEL_4:
          v38 = 1;
          v35 = v36;
          goto LABEL_7;
        }
        while (1)
        {
          if (v37)
          {
            __break(1u);
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
          v39 = (uint64_t)&v74[*(int *)(v26 + 48)];
          sub_1CCA0BEEC(v76+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(_QWORD *)(v75 + 72) * v35, v39, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
          v40 = (uint64_t)v31 + *(int *)(v26 + 48);
          *v31 = v35;
          sub_1CC9FED60(v39, v40, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
          v38 = 0;
          ++v35;
LABEL_7:
          v41 = v81;
          (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v81 + 56))(v31, v38, 1, v26);
          sub_1CC9C3EC0((uint64_t)v31, (uint64_t)v33, &qword_1ED8A7EE8);
          if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v41 + 48))(v33, 1, v26) == 1)
          {
            swift_bridgeObjectRelease();
            return v73;
          }
          v80 = *v33;
          sub_1CC9FED60((uint64_t)v33 + *(int *)(v26 + 48), (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
          if (*((_QWORD *)v25 + 3))
            break;
          result = sub_1CCA0BF30((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
          v36 = v82;
          v37 = v35 >= v82;
          if (v35 == v82)
            goto LABEL_4;
        }
        v42 = (uint64_t)v18;
        swift_bridgeObjectRetain();
        v43 = (uint64_t)v83;
        sub_1CCB635BC();
        swift_bridgeObjectRelease();
        v44 = v78;
        v45 = v79;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v43, 1, v78) == 1)
        {
          sub_1CCA0BF30((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
          result = sub_1CC9C3E84(v43, &qword_1ED8A8EF8);
          v18 = (char *)v42;
          v31 = v77;
          continue;
        }
        break;
      }
      v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32);
      v18 = (char *)v42;
      v46(v42, v43, v44);
      if (!*(_QWORD *)(a2 + 16) || (v47 = sub_1CCAC8D64(v42), (v48 & 1) == 0))
      {
        (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v42, v44);
        result = sub_1CCA0BF30((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v31 = v77;
        continue;
      }
      break;
    }
    v49 = v64;
    sub_1CCA0BEEC(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v71 + 72) * v47, v64, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
    v50 = v49;
    v51 = v69;
    sub_1CC9FED60(v50, v69, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
    sub_1CCA0BEEC((uint64_t)v25, v70, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v52 = (void *)*((_QWORD *)v25 + 31);
    sub_1CC9C3EC0((uint64_t)v63, (uint64_t)v90, &qword_1ED8A71C0);
    sub_1CC9C3EC0((uint64_t)v90, (uint64_t)v89, &qword_1ED8A71C0);
    v87 = *((_QWORD *)v25 + 35);
    v62 = *((_OWORD *)v25 + 18);
    v88 = v62;
    memset(v86, 0, sizeof(v86));
    v53 = type metadata accessor for FMIPItemGroup();
    memset(v85, 0, sizeof(v85));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v72, 1, 1, v53);
    v84 = 7;
    v54 = type metadata accessor for FMIPDeviceConnectedState(0);
    v55 = (uint64_t)v66;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v66, 1, 1, v54);
    v56 = v51;
    v57 = v67;
    sub_1CCA0BEEC(v56, v67, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v71 + 56))(v57, 0, 1, v65);
    swift_bridgeObjectRetain();
    sub_1CCA307F0((uint64_t)v90, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
    v58 = (id)v62;
    FMIPDevice.init(device:historicalLocations:address:crowdSourcedLocation:location:shiftedLocation:crowdSourcedLocating:itemGroup:deviceWithYou:findingCapable:beaconType:deviceConnectedState:lostModeMetadata:)(v70, v52, v89, &v87, v86, (unsigned int (*)(char *, uint64_t, uint64_t))v85, 2, v72, v68, 2u, 2, &v84, v55, v57);
    v59 = v73;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_1CCAB6EFC(v59);
      v59 = result;
    }
    v60 = v79;
    v31 = v77;
    if ((v80 & 0x8000000000000000) != 0)
      goto LABEL_22;
    if (v80 < *(_QWORD *)(v59 + 16))
    {
      v61 = (*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
      v73 = v59;
      sub_1CCABB698(v68, v59 + v61 + *(_QWORD *)(v75 + 72) * v80, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      sub_1CCA0BF30(v69, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v18, v78);
      result = sub_1CCA0BF30((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      continue;
    }
    break;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1CCAB95A0(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t result;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t);
  void (*v61)(char *, _QWORD, uint64_t, uint64_t);
  char *v62;
  char v63;
  uint64_t v64;
  char v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, char *, uint64_t);
  char *v135;
  uint64_t v136;

  v4 = sub_1CCA14E90(&qword_1ED8A8CD0);
  MEMORY[0x1E0C80A78](v4);
  v108 = (uint64_t)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1ED8A8EF8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v101 - v10;
  v132 = sub_1CCB63604();
  v12 = *(_QWORD *)(v132 - 8);
  v13 = MEMORY[0x1E0C80A78](v132);
  v130 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v135 = (char *)&v101 - v15;
  v16 = type metadata accessor for FMIPItem();
  v103 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x1E0C80A78](v16);
  v120 = (uint64_t)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v101 - v19;
  v115 = type metadata accessor for FMIPItemGroup();
  v111 = *(_QWORD *)(v115 - 8);
  v21 = MEMORY[0x1E0C80A78](v115);
  v107 = (char *)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v114 = (char **)((char *)&v101 - v24);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v101 - v25;
  v117 = sub_1CCA14E90(&qword_1ED8A8DD8);
  v110 = *(_QWORD *)(v117 - 8);
  MEMORY[0x1E0C80A78](v117);
  v101 = (char *)&v101 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1CCA14E90(&qword_1ED8A8DE0);
  v29 = MEMORY[0x1E0C80A78](v28);
  v31 = (unint64_t *)((char *)&v101 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v29);
  v109 = (unint64_t *)((char *)&v101 - v32);
  v33 = *(_QWORD *)(a1 + 16);
  result = swift_bridgeObjectRetain_n();
  v35 = 0;
  v129 = 0;
  v102 = a1;
  v122 = v11;
  v123 = a2;
  v131 = v9;
  v133 = v12;
  v104 = v33;
  v128 = v20;
  v106 = v26;
  v105 = v31;
  while (1)
  {
    v116 = a1;
    if (v35 == v33)
    {
      v36 = 1;
      v113 = v33;
      v37 = v117;
    }
    else
    {
      if (v35 >= v33)
        goto LABEL_51;
      v38 = v35 + 1;
      v39 = v35;
      v40 = (uint64_t)&v101[*(int *)(v117 + 48)];
      sub_1CCA0BEEC(v102+ ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80))+ *(_QWORD *)(v111 + 72) * v35, v40, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      v41 = (uint64_t)v31 + *(int *)(v117 + 48);
      *v31 = v39;
      v42 = v40;
      v37 = v117;
      sub_1CC9FED60(v42, v41, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      v36 = 0;
      v113 = v38;
      v9 = v131;
    }
    v43 = v110;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v110 + 56))(v31, v36, 1, v37);
    v44 = (uint64_t)v31;
    v45 = v109;
    sub_1CC9C3EC0(v44, (uint64_t)v109, &qword_1ED8A8DE0);
    v46 = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v43 + 48))(v45, 1, v37);
    v47 = v37;
    v48 = v132;
    if (v46 == 1)
    {
      swift_bridgeObjectRelease();
      return v116;
    }
    v112 = *v45;
    v49 = v114;
    sub_1CC9FED60((uint64_t)v45 + *(int *)(v47 + 48), (uint64_t)v114, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v50 = *(_QWORD *)((char *)v49 + *(int *)(v115 + 52));
    v51 = v49[7];
    v52 = MEMORY[0x1E0DEE9D8];
    v136 = MEMORY[0x1E0DEE9D8];
    v53 = *(_QWORD *)(a2 + 16);
    v127 = v50;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v119 = v51;
    swift_bridgeObjectRetain();
    if (v53)
    {
      v54 = 0;
      v55 = *(_QWORD *)(v103 + 72);
      v118 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
      v126 = a2 + v118;
      v121 = v53;
      v124 = v55;
      while (1)
      {
        sub_1CCA0BEEC(v126 + v55 * v54, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        sub_1CCB635BC();
        v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
        if (v56(v11, 1, v48) == 1)
        {
          sub_1CC9C3E84((uint64_t)v11, &qword_1ED8A8EF8);
        }
        else
        {
          v125 = v54;
          v134 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
          v134(v135, v11, v48);
          v57 = *(_QWORD *)(v127 + 16);
          if (v57)
          {
            v58 = v127 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
            swift_bridgeObjectRetain();
            v59 = *(_QWORD *)(v12 + 72);
            v60 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
            while (1)
            {
              v60(v9, v58, v48);
              v12 = v133;
              v61 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56);
              v61(v9, 0, 1, v48);
              if (v56(v9, 1, v48) == 1)
              {
                v11 = v122;
                v20 = v128;
                v53 = v121;
                v55 = v124;
                v54 = v125;
                goto LABEL_22;
              }
              v62 = v130;
              v134(v130, v9, v48);
              sub_1CC9CAA38(&qword_1EF9E1E28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
              v63 = sub_1CCB63958();
              v64 = v48;
              v65 = v63;
              v66 = *(void (**)(char *, uint64_t))(v12 + 8);
              v66(v62, v64);
              if ((v65 & 1) != 0)
                break;
              v58 += v59;
              --v57;
              v9 = v131;
              v48 = v132;
              if (!v57)
              {
                v11 = v122;
                v12 = v133;
                v20 = v128;
                v53 = v121;
                goto LABEL_20;
              }
            }
            swift_bridgeObjectRelease();
            v66(v135, v132);
            v20 = v128;
            sub_1CC9FED60((uint64_t)v128, v120, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            v67 = v136;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v53 = v121;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1CCA63A2C(0, *(_QWORD *)(v67 + 16) + 1, 1);
              v67 = v136;
            }
            v9 = v131;
            v11 = v122;
            v12 = v133;
            v54 = v125;
            v70 = *(_QWORD *)(v67 + 16);
            v69 = *(_QWORD *)(v67 + 24);
            if (v70 >= v69 >> 1)
            {
              sub_1CCA63A2C(v69 > 1, v70 + 1, 1);
              v9 = v131;
              v67 = v136;
            }
            *(_QWORD *)(v67 + 16) = v70 + 1;
            v71 = v67 + v118 + v70 * v124;
            v55 = v124;
            sub_1CC9FED60(v120, v71, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            v48 = v132;
            goto LABEL_11;
          }
          swift_bridgeObjectRetain();
          v61 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56);
LABEL_20:
          v55 = v124;
          v61(v9, 1, 1, v48);
          v54 = v125;
LABEL_22:
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v12 + 8))(v135, v48);
        }
        sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_11:
        if (++v54 == v53)
        {
          v72 = (void (*)(_QWORD, _QWORD, _QWORD))v136;
          v73 = MEMORY[0x1E0DEE9D8];
          goto LABEL_30;
        }
      }
    }
    v72 = (void (*)(_QWORD, _QWORD, _QWORD))v52;
    v73 = v52;
LABEL_30:
    v74 = v119;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v75 = *(_QWORD *)(v74 + 16);
    if (v75)
      break;
LABEL_40:
    v11 = v122;
    v90 = sub_1CCA7AB3C(v73);
    swift_bridgeObjectRelease();
    v91 = v114;
    v93 = v114[2];
    v92 = v114[3];
    v94 = *v114;
    v95 = v107;
    *((_QWORD *)v107 + 1) = v114[1];
    v95[2] = v93;
    v96 = v115;
    *(_QWORD *)((char *)v95 + *(int *)(v115 + 52)) = v127;
    v97 = v91[4];
    v95[3] = v92;
    v95[4] = v97;
    v95[5] = v72;
    v95[6] = v90;
    v98 = v91[9];
    v95[8] = v91[8];
    v95[9] = v98;
    v95[7] = v119;
    *v95 = v94;
    v99 = v108;
    sub_1CC9EAB74((uint64_t)v91 + *(int *)(v96 + 48), v108, &qword_1ED8A8CD0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CC9C3EC0(v99, (uint64_t)v95 + *(int *)(v96 + 48), &qword_1ED8A8CD0);
    v100 = (uint64_t)v106;
    sub_1CC9FED60((uint64_t)v95, (uint64_t)v106, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    a1 = v116;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_1CCAB6EE8(a1);
      a1 = result;
    }
    v9 = v131;
    v12 = v133;
    v31 = v105;
    v33 = v104;
    a2 = v123;
    if ((v112 & 0x8000000000000000) != 0)
      goto LABEL_49;
    if (v112 >= *(_QWORD *)(a1 + 16))
      goto LABEL_50;
    result = sub_1CCABB698(v100, a1+ ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80))+ *(_QWORD *)(v111 + 72) * v112, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v35 = v113;
  }
  v136 = v73;
  v134 = (void (*)(char *, char *, uint64_t))v72;
  swift_retain();
  sub_1CCA63A00(0, v75, 0);
  v73 = v136;
  result = sub_1CCAA78E0(v74);
  v76 = result;
  v78 = v77;
  v80 = v79 & 1;
  v126 = v74 + 56;
  while ((v76 & 0x8000000000000000) == 0 && v76 < 1 << *(_BYTE *)(v74 + 32))
  {
    if (((*(_QWORD *)(v126 + (((unint64_t)v76 >> 3) & 0xFFFFFFFFFFFFF8)) >> v76) & 1) == 0)
      goto LABEL_47;
    if (*(_DWORD *)(v74 + 36) != (_DWORD)v78)
      goto LABEL_48;
    v81 = (uint64_t)v134;
    swift_retain();
    v82 = swift_bridgeObjectRetain();
    v83 = v129;
    v84 = sub_1CCAA8128(v82, v81);
    v129 = v83;
    swift_release();
    v85 = sub_1CCA7AC1C(v84);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v136 = v73;
    v87 = *(_QWORD *)(v73 + 16);
    v86 = *(_QWORD *)(v73 + 24);
    if (v87 >= v86 >> 1)
    {
      sub_1CCA63A00(v86 > 1, v87 + 1, 1);
      v73 = v136;
    }
    *(_QWORD *)(v73 + 16) = v87 + 1;
    *(_QWORD *)(v73 + 8 * v87 + 32) = v85;
    result = sub_1CCB48FB8(v76, v78, v80 & 1, v74);
    v76 = result;
    v78 = v88;
    v80 = v89 & 1;
    --v75;
    v20 = v128;
    if (!v75)
    {
      sub_1CCA58DB4(result, v88, v89 & 1);
      v72 = (void (*)(_QWORD, _QWORD, _QWORD))v134;
      swift_release();
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_1CCABA058(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t result;
  unint64_t i;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unsigned __int8 *v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  _BYTE v53[4];
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  unsigned int v58;
  id v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t updated;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  _BYTE *v68;
  _BYTE *v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78[3];
  uint64_t v79[3];
  _BYTE v80[288];
  _BYTE v81[296];

  v63 = a3;
  v77 = a2;
  updated = type metadata accessor for FMIPItemUpdateType(0);
  MEMORY[0x1E0C80A78](updated);
  v61 = &v53[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for FMIPItem();
  v72 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v69 = &v53[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x1E0C80A78](v6);
  v68 = &v53[-v9];
  MEMORY[0x1E0C80A78](v8);
  v11 = &v53[-v10];
  v12 = sub_1CCA14E90(&qword_1ED8A8DE8);
  v75 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v71 = &v53[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DF0);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (unint64_t *)&v53[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = (unint64_t *)&v53[-v18];
  v20 = *(_QWORD *)(a1 + 16);
  v60 = v11 + 8;
  result = swift_bridgeObjectRetain_n();
  i = 0;
  v73 = a1;
  v70 = a1;
  v23 = v20 == 0;
  if (v20)
    goto LABEL_6;
LABEL_5:
  v24 = 1;
  for (i = v20; ; ++i)
  {
    v27 = v75;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v17, v24, 1, v12);
    sub_1CC9C3EC0((uint64_t)v17, (uint64_t)v19, (uint64_t *)&unk_1ED8A8DF0);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v27 + 48))(v19, 1, v12) == 1)
    {
      swift_bridgeObjectRelease();
      return v70;
    }
    v28 = *v19;
    sub_1CC9FED60((uint64_t)v19 + *(int *)(v12 + 48), (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if (!*(_QWORD *)(v77 + 16))
      goto LABEL_4;
    v74 = v28;
    v76 = i;
    v29 = v12;
    v30 = v17;
    v31 = *((_QWORD *)v11 + 44);
    v32 = *((_QWORD *)v11 + 45);
    swift_bridgeObjectRetain();
    v33 = sub_1CCA074F4(v31, v32);
    if ((v34 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v17 = v30;
      v12 = v29;
      i = v76;
LABEL_4:
      result = sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v23 = i >= v20;
      if (i == v20)
        goto LABEL_5;
      goto LABEL_6;
    }
    v35 = (unsigned __int8 *)(*(_QWORD *)(v77 + 56) + 24 * v33);
    v66 = *v35;
    v54 = v35[1];
    v64 = v35[2];
    v65 = v35[3];
    v36 = *((_QWORD *)v35 + 2);
    v67 = *((id *)v35 + 1);
    swift_bridgeObjectRelease();
    v37 = v63;
    if (!*(_QWORD *)(v63 + 16))
      goto LABEL_15;
    swift_bridgeObjectRetain();
    v38 = sub_1CCA074F4(v31, v32);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_15:
      v59 = v67;
      v43 = v54;
      v57 = v54;
      v58 = v66;
      v56 = v64;
      v55 = v65;
      v42 = v36;
      goto LABEL_16;
    }
    v40 = (unsigned __int8 *)(*(_QWORD *)(v37 + 56) + 24 * v38);
    v41 = *v40;
    v57 = v40[1];
    v58 = v41;
    v56 = v40[2];
    v55 = v40[3];
    v42 = *((_QWORD *)v40 + 2);
    v59 = *((id *)v40 + 1);
    swift_bridgeObjectRelease();
    v43 = v54;
LABEL_16:
    sub_1CCA0BEEC((uint64_t)v11, (uint64_t)v69, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v44 = (uint64_t)v61;
    *v61 = 1;
    swift_storeEnumTagMultiPayload();
    sub_1CC9C3EC0((uint64_t)v60, (uint64_t)v81, &qword_1ED8A71C0);
    sub_1CC9C3EC0((uint64_t)v81, (uint64_t)v80, &qword_1ED8A71C0);
    if (v43)
      v45 = 256;
    else
      v45 = 0;
    v46 = v45 | v66;
    if (v64)
      v47 = 0x10000;
    else
      v47 = 0;
    v79[0] = v46 | v47 | (v65 << 24);
    v79[1] = (uint64_t)v67;
    v79[2] = v36;
    if (v57)
      v48 = 256;
    else
      v48 = 0;
    v49 = v48 | v58;
    if (v56)
      v50 = 0x10000;
    else
      v50 = 0;
    v51 = v59;
    v78[0] = v49 | v50 | (v55 << 24);
    v78[1] = (uint64_t)v59;
    v78[2] = v42;
    v67 = v67;
    sub_1CCA307F0((uint64_t)v81, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
    v52 = v51;
    FMIPItem.init(item:updateType:address:location:crowdSourcedLocation:connected:)((uint64_t)v69, v44, (uint64_t)v80, v79, v78, 2u, (uint64_t)v68);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_1CCAB6F10(v70);
      v70 = result;
    }
    v17 = v30;
    if ((v74 & 0x8000000000000000) != 0)
      goto LABEL_36;
    if (v74 >= *(_QWORD *)(v70 + 16))
      goto LABEL_37;
    v12 = v29;
    sub_1CCABB698((uint64_t)v68, v70+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(_QWORD *)(v72 + 72) * v74, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);

    result = sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    i = v76;
    v23 = v76 >= v20;
    if (v76 == v20)
      goto LABEL_5;
LABEL_6:
    if (v23)
      break;
    v25 = (uint64_t)&v71[*(int *)(v12 + 48)];
    sub_1CCA0BEEC(v73+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(_QWORD *)(v72 + 72) * i, v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v26 = (uint64_t)v17 + *(int *)(v12 + 48);
    *v17 = i;
    sub_1CC9FED60(v25, v26, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v24 = 0;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1CCABA5EC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x61636F4C65666173 && a2 == 0xED0000736E6F6974;
  if (v2 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001CCB7B570 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CCB7B590 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001CCB7B5B0 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001CCB7B5D0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1CCABA804@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v5 = sub_1CCA14E90(&qword_1EF9E2920);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCABAC40();
  sub_1CCB643B4();
  if (v2)
    return sub_1CCA01CA0((uint64_t)a1);
  sub_1CCA14E90(&qword_1EF9E2930);
  v24 = 0;
  sub_1CCA1552C(&qword_1EF9E2938, &qword_1EF9E2930, (uint64_t (*)(void))sub_1CCA22778, MEMORY[0x1E0DEAF40]);
  sub_1CCB64180();
  v9 = v25;
  sub_1CCA14E90(&qword_1EF9E2948);
  v24 = 1;
  sub_1CCABAC84((unint64_t *)&unk_1EF9E2950, &qword_1EF9E2948, (uint64_t (*)(void))sub_1CCA71700);
  swift_bridgeObjectRetain();
  sub_1CCB64180();
  v23 = v9;
  v10 = v25;
  sub_1CCA14E90(&qword_1EF9E2970);
  v24 = 2;
  sub_1CCABAC84(&qword_1EF9E2978, &qword_1EF9E2970, (uint64_t (*)(void))sub_1CCABAD08);
  swift_bridgeObjectRetain();
  sub_1CCB64180();
  v22 = v10;
  v11 = v25;
  sub_1CCA14E90(&qword_1EF9E2988);
  v24 = 3;
  v12 = sub_1CCABAD4C();
  swift_bridgeObjectRetain();
  v21 = v12;
  sub_1CCB64180();
  v24 = 4;
  v20 = v25;
  swift_bridgeObjectRetain();
  sub_1CCB64180();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v13 = v25;
  swift_bridgeObjectRetain();
  sub_1CCA01CA0((uint64_t)a1);
  swift_bridgeObjectRelease();
  v14 = v20;
  swift_bridgeObjectRelease();
  v15 = v11;
  swift_bridgeObjectRelease();
  v16 = v22;
  swift_bridgeObjectRelease();
  v17 = v23;
  result = swift_bridgeObjectRelease();
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v15;
  a2[3] = v14;
  a2[4] = v13;
  return result;
}

unint64_t sub_1CCABAC40()
{
  unint64_t result;

  result = qword_1EF9E2928;
  if (!qword_1EF9E2928)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C32C, &type metadata for FMIPDataManager.SeparationMonitoringCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E2928);
  }
  return result;
}

uint64_t sub_1CCABAC84(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = sub_1CCA19B38(a2);
    v7[0] = sub_1CC9CAA38(&qword_1EF9E1CA8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    v7[1] = a3();
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEA0D8], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CCABAD08()
{
  unint64_t result;

  result = qword_1EF9E2980;
  if (!qword_1EF9E2980)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPBeaconSeparationMonitoringState, &type metadata for FMIPBeaconSeparationMonitoringState);
    atomic_store(result, (unint64_t *)&qword_1EF9E2980);
  }
  return result;
}

unint64_t sub_1CCABAD4C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF9E2990;
  if (!qword_1EF9E2990)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E2988);
    v2[0] = sub_1CC9CAA38(&qword_1EF9E1CA8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    v2[1] = MEMORY[0x1E0DEAFC0];
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEA0D8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E2990);
  }
  return result;
}

uint64_t sub_1CCABADD0(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = sub_1CCA19B38(a2);
    v7[0] = sub_1CC9CAA38(&qword_1EF9E1CB0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    v7[1] = a3();
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEA0B8], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CCABAE54()
{
  unint64_t result;

  result = qword_1EF9E29D0;
  if (!qword_1EF9E29D0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPBeaconSeparationMonitoringState, &type metadata for FMIPBeaconSeparationMonitoringState);
    atomic_store(result, (unint64_t *)&qword_1EF9E29D0);
  }
  return result;
}

unint64_t sub_1CCABAE98()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF9E29D8;
  if (!qword_1EF9E29D8)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E2988);
    v2[0] = sub_1CC9CAA38(&qword_1EF9E1CB0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    v2[1] = MEMORY[0x1E0DEAFA8];
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEA0B8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E29D8);
  }
  return result;
}

uint64_t sub_1CCABAF1C(uint64_t a1)
{
  uint64_t v1;

  return sub_1CCAAEAA0(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1CCABAF40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = type metadata accessor for FMReverseGeocodingRequest();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v11 = sub_1CCB635B0();
  v5 = *(_QWORD *)(v11 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  swift_release();
  swift_bridgeObjectRelease();

  v7 = v0 + v3 + *(int *)(v1 + 24);
  v8 = sub_1CCB63634();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + v6 + 288) & ~v6), v11);
  return swift_deallocObject();
}

uint64_t sub_1CCABB0F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  _BYTE v9[288];

  v1 = *(_QWORD *)(type metadata accessor for FMReverseGeocodingRequest() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1CCB635B0() - 8) + 80);
  v5 = v0 + v2;
  v6 = (const void *)(v0 + v3);
  v7 = v0 + ((v3 + v4 + 288) & ~v4);
  memcpy(v9, v6, sizeof(v9));
  return sub_1CCAB18A0(v5, (uint64_t)v9, v7);
}

uint64_t sub_1CCABB194()
{
  return swift_deallocObject();
}

uint64_t sub_1CCABB1A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for FMReverseGeocodingRequest();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v5 = v0 + v3;
  swift_bridgeObjectRelease();

  v6 = v5 + *(int *)(v1 + 24);
  v7 = sub_1CCB63634();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCABB274(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;

  v5 = *(_QWORD *)(type metadata accessor for FMReverseGeocodingRequest() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (uint64_t *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1CCAB1C58(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *v7, v7[1]);
}

uint64_t sub_1CCABB2DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for FMReverseGeocodingRequest();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  v5 = v0 + v3;
  swift_bridgeObjectRelease();

  v6 = v5 + *(int *)(v1 + 24);
  v7 = sub_1CCB63634();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void sub_1CCABB3CC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for FMReverseGeocodingRequest() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1CCAB1F14(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), v0 + v2, *(void (**)(double *))(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1CCABB420()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 312))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCABB4EC()
{
  uint64_t v0;

  return sub_1CCAB6FA8(*(_QWORD *)(v0 + 16), (const void *)(v0 + 24), *(void (**)(_BYTE *))(v0 + 312));
}

void sub_1CCABB504()
{
  uint64_t v0;

  sub_1CCA2073C(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24), &qword_1EF9E2A20, &qword_1EF9E2A28, &qword_1EF9E2A30, (void (*)(void))sub_1CCABB540);
}

unint64_t sub_1CCABB540()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E2A38;
  if (!qword_1EF9E2A38)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E2A30);
    v2 = sub_1CC9CAA38(&qword_1EF9E2A40, (uint64_t (*)(uint64_t))type metadata accessor for FMIPItemGroup, (uint64_t)&protocol conformance descriptor for FMIPItemGroup);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF10], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E2A38);
  }
  return result;
}

void sub_1CCABB5C0()
{
  uint64_t v0;

  sub_1CCA2073C(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24), &qword_1EF9E2A50, &qword_1EF9E2A58, (uint64_t *)&unk_1EF9E2A60, (void (*)(void))sub_1CCA7B73C);
}

uint64_t sub_1CCABB5FC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1CCABB648()
{
  uint64_t v0;

  sub_1CCAB7064(*(_QWORD *)(v0 + 16), v0 + 24);
}

unint64_t sub_1CCABB654()
{
  unint64_t result;

  result = qword_1EF9E2A88;
  if (!qword_1EF9E2A88)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C16C, &type metadata for FMIPDataManager.SeparationMonitoringCache);
    atomic_store(result, (unint64_t *)&qword_1EF9E2A88);
  }
  return result;
}

uint64_t sub_1CCABB698(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t *sub_1CCABB6E0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[11];
  v3 = a1[12];
  sub_1CCA24588(*a1, a1[1]);
  sub_1CCA24588(v2, v3);
  return a1;
}

uint64_t sub_1CCABB79C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1CCABB7E8()
{
  uint64_t v0;

  sub_1CCAB7150(*(_QWORD *)(v0 + 16), v0 + 24);
}

unint64_t sub_1CCABB7F4()
{
  unint64_t result;

  result = qword_1EF9E2AC8;
  if (!qword_1EF9E2AC8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPPerson, &type metadata for FMIPPerson);
    atomic_store(result, (unint64_t *)&qword_1EF9E2AC8);
  }
  return result;
}

uint64_t sub_1CCABB838()
{
  return swift_deallocObject();
}

uint64_t sub_1CCABB848()
{
  return swift_deallocObject();
}

uint64_t sub_1CCABB858()
{
  return swift_deallocObject();
}

uint64_t sub_1CCABB868()
{
  return swift_deallocObject();
}

uint64_t sub_1CCABB878()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1CCABB89C()
{
  uint64_t v0;

  sub_1CCAB5D8C(*(_QWORD **)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_1CCABB8A4()
{
  return swift_deallocObject();
}

unint64_t sub_1CCABB8B4()
{
  unint64_t result;

  result = qword_1EF9E2B20;
  if (!qword_1EF9E2B20)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C194, &type metadata for FMIPDataManager.SeparationMonitoringCache);
    atomic_store(result, (unint64_t *)&qword_1EF9E2B20);
  }
  return result;
}

uint64_t sub_1CCABB8F8(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1CCABB950()
{
  uint64_t v0;

  sub_1CC9E9150(*(_QWORD **)(v0 + 16), *(_QWORD **)(v0 + 24), &qword_1EF9E2A20, &qword_1EF9E2A28, &qword_1EF9E2A30, (void (*)(void))sub_1CCABB998);
}

uint64_t sub_1CCABB988()
{
  return swift_deallocObject();
}

unint64_t sub_1CCABB998()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E2B28;
  if (!qword_1EF9E2B28)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E2A30);
    v2 = sub_1CC9CAA38(&qword_1EF9E2B30, (uint64_t (*)(uint64_t))type metadata accessor for FMIPItemGroup, (uint64_t)&protocol conformance descriptor for FMIPItemGroup);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF40], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E2B28);
  }
  return result;
}

uint64_t sub_1CCABBA18()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1CCABBA44()
{
  uint64_t v0;

  sub_1CCAB7104(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24));
}

unint64_t sub_1CCABBA50()
{
  unint64_t result;

  result = qword_1EF9E2B50;
  if (!qword_1EF9E2B50)
  {
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0CB0310], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EF9E2B50);
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPDataManagerItemUpdateSource()
{
  return &type metadata for FMIPDataManagerItemUpdateSource;
}

uint64_t _s8FMIPCore31FMIPDataManagerItemUpdateSourceOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CCABBAF8 + 4 * byte_1CCB6BF9A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CCABBB2C + 4 * byte_1CCB6BF95[v4]))();
}

uint64_t sub_1CCABBB2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCABBB34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCABBB3CLL);
  return result;
}

uint64_t sub_1CCABBB48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCABBB50);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CCABBB54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCABBB5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPDataManager.SeparationMonitoringCache.CodingKeys()
{
  return &type metadata for FMIPDataManager.SeparationMonitoringCache.CodingKeys;
}

unint64_t sub_1CCABBB7C()
{
  unint64_t result;

  result = qword_1EF9E2B70;
  if (!qword_1EF9E2B70)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C29C, &type metadata for FMIPDataManager.SeparationMonitoringCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E2B70);
  }
  return result;
}

unint64_t sub_1CCABBBC4()
{
  unint64_t result;

  result = qword_1EF9E2B78;
  if (!qword_1EF9E2B78)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C304, &type metadata for FMIPDataManagerItemUpdateSource);
    atomic_store(result, (unint64_t *)&qword_1EF9E2B78);
  }
  return result;
}

unint64_t sub_1CCABBC0C()
{
  unint64_t result;

  result = qword_1EF9E2B80;
  if (!qword_1EF9E2B80)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C20C, &type metadata for FMIPDataManager.SeparationMonitoringCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E2B80);
  }
  return result;
}

unint64_t sub_1CCABBC54()
{
  unint64_t result;

  result = qword_1EF9E2B88;
  if (!qword_1EF9E2B88)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C234, &type metadata for FMIPDataManager.SeparationMonitoringCache.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E2B88);
  }
  return result;
}

uint64_t sub_1CCABBD30@<X0>(void *a1@<X8>)
{
  return sub_1CCA21EA8(a1);
}

uint64_t sub_1CCABBD48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for FMIPInitClientResponse();
  v2 = swift_dynamicCastClass();
  if (v2)
  {
    v3 = v2;
    swift_retain();
    sub_1CCABBE08(v3);
LABEL_5:
    swift_release();
    return swift_dynamicCastClassUnconditional();
  }
  type metadata accessor for FMIPRefreshClientResponse();
  v4 = swift_dynamicCastClass();
  swift_retain();
  if (v4)
  {
    sub_1CCABBDFC(v4);
    goto LABEL_5;
  }
  return a1;
}

uint64_t sub_1CCABBDFC(uint64_t a1)
{
  return sub_1CCABBE14(a1, (void (*)(_QWORD))type metadata accessor for FMIPRefreshClientResponse);
}

uint64_t sub_1CCABBE08(uint64_t a1)
{
  return sub_1CCABBE14(a1, (void (*)(_QWORD))type metadata accessor for FMIPInitClientResponse);
}

uint64_t sub_1CCABBE14(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;

  v3 = v2;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v5 = sub_1CCB637FC();
  sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v6 = sub_1CCB637D8();
  v7 = sub_1CCB63D48();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v40 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = sub_1CCB643F0();
    sub_1CCA0CB60(v10, v11, &v40);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v6, v7, "FMIPDemoDataInjector: Injecting demo content into %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v9, -1, -1);
    MEMORY[0x1D17B214C](v8, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  if (*(_QWORD *)(a1 + 56))
    v12 = *(_QWORD *)(a1 + 56);
  else
    v12 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v13 = sub_1CCABC130(v12);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  if (v14)
  {
    v16 = *(_QWORD *)(v14 + 16);
    v17 = *(_QWORD *)(v14 + 24);
    v37 = v13;
    v38 = *(_QWORD *)(a1 + 16);
    v18 = *(_QWORD *)(v14 + 32);
    v19 = *(_QWORD *)(v14 + 40);
    v35 = *(_BYTE *)(v14 + 49);
    v36 = *(_BYTE *)(v14 + 48);
    v33 = *(_BYTE *)(v14 + 51);
    v34 = *(_BYTE *)(v14 + 50);
    v20 = *(_QWORD *)(v14 + 64);
    v21 = *(_QWORD *)(v14 + 80);
    v31 = *(_QWORD *)(v14 + 72);
    v32 = *(_QWORD *)(v14 + 56);
    v22 = *(_QWORD *)(v14 + 96);
    v30 = *(_QWORD *)(v14 + 88);
    v23 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 112);
    type metadata accessor for FMIPUserInfoResponseFragment();
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v16;
    *(_QWORD *)(v24 + 24) = v17;
    *(_QWORD *)(v24 + 32) = v18;
    *(_QWORD *)(v24 + 40) = v19;
    *(_BYTE *)(v24 + 48) = v36;
    *(_BYTE *)(v24 + 49) = v35;
    *(_BYTE *)(v24 + 50) = v34;
    *(_BYTE *)(v24 + 51) = v33;
    *(_QWORD *)(v24 + 56) = v32;
    *(_QWORD *)(v24 + 64) = v20;
    *(_QWORD *)(v24 + 72) = v31;
    *(_QWORD *)(v24 + 80) = v21;
    *(_QWORD *)(v24 + 88) = v30;
    *(_QWORD *)(v24 + 96) = v22;
    *(_QWORD *)(v24 + 104) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = v37;
    swift_bridgeObjectRetain();
  }
  else
  {
    v24 = 0;
  }
  v25 = *(_QWORD *)(a1 + 32);
  v26 = *(_BYTE *)(a1 + 40);
  v27 = *(_QWORD *)(a1 + 48);
  a2(0);
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 56) = v13;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v28 + 16) = v15;
  *(_QWORD *)(v28 + 24) = v24;
  *(_QWORD *)(v28 + 32) = v25;
  *(_BYTE *)(v28 + 40) = v26;
  *(_QWORD *)(v28 + 48) = v27;
  return v28;
}

uint64_t sub_1CCABC130(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = type metadata accessor for FMIPDevice();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v36 = (uint64_t)&v35 - v8;
  v9 = sub_1CCA14E90(&qword_1ED8A7170);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v35 - v13;
  v15 = sub_1CCB635B0();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v1;
  v19 = *(_QWORD *)(v1 + 16);
  sub_1CCB635A4();
  v38 = v19;
  sub_1CCB17AC4((uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v20 = *(_QWORD *)(a1 + 16);
  if (v20)
  {
    v21 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v22 = *(_QWORD *)(v4 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1CC9F7368(v21, (uint64_t)v7);
      if ((v7[217] & 4) != 0)
        break;
      sub_1CC9F73AC((uint64_t)v7);
      v21 += v22;
      if (!--v20)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    sub_1CC9F73E8((uint64_t)v7, (uint64_t)v14);
    v23 = 0;
  }
  else
  {
LABEL_6:
    v23 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v14, v23, 1, v3);
  v24 = v37 + OBJC_IVAR____TtC8FMIPCore20FMIPDemoDataInjector_hostDevice;
  swift_beginAccess();
  sub_1CCA2471C((uint64_t)v14, v24);
  swift_endAccess();
  sub_1CCA247A8((uint64_t)v14, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3) == 1)
  {
    sub_1CCA246DC((uint64_t)v12);
    if (qword_1ED8AA630 != -1)
      swift_once();
    v25 = sub_1CCB637FC();
    sub_1CCA16C20(v25, (uint64_t)qword_1ED8AD7F8);
    v26 = sub_1CCB637D8();
    v27 = sub_1CCB63D30();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      MEMORY[0x1D17B214C](v28, -1, -1);
    }

    sub_1CCA246DC((uint64_t)v14);
    v29 = *(_QWORD *)(v38 + 104);
    swift_bridgeObjectRetain();
  }
  else
  {
    v30 = v36;
    sub_1CC9F73E8((uint64_t)v12, v36);
    v31 = *(_QWORD *)(v38 + 104);
    sub_1CCA14E90(&qword_1ED8A7FB0);
    v32 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_1CCB677E0;
    sub_1CC9F7368(v30, v33 + v32);
    v39 = v31;
    swift_bridgeObjectRetain();
    sub_1CCAC8BD0(v33);
    v29 = v39;
    sub_1CC9F73AC(v30);
    sub_1CCA246DC((uint64_t)v14);
  }
  return v29;
}

uint64_t sub_1CCABC4F4()
{
  uint64_t v0;

  swift_release();
  sub_1CCA246DC(v0 + OBJC_IVAR____TtC8FMIPCore20FMIPDemoDataInjector_hostDevice);
  return swift_deallocClassInstance();
}

uint64_t sub_1CCABC52C()
{
  return type metadata accessor for FMIPDemoDataInjector();
}

uint64_t type metadata accessor for FMIPDemoDataInjector()
{
  uint64_t result;

  result = qword_1EF9E2BB8;
  if (!qword_1EF9E2BB8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1CCABC570()
{
  unint64_t v0;

  sub_1CCA247F0();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t destroy for FMIPDemoDeviceTemplate(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 144) != 1)
  {
    if (*(_QWORD *)(a1 + 128) != 1)
      swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for FMIPDemoDeviceTemplate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v6;
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v7;
  v8 = (_OWORD *)(a1 + 120);
  v9 = (_OWORD *)(a2 + 120);
  v10 = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 == 1)
  {
    v11 = v9[3];
    *(_OWORD *)(a1 + 152) = v9[2];
    *(_OWORD *)(a1 + 168) = v11;
    *(_OWORD *)(a1 + 184) = v9[4];
    v12 = v9[1];
    *v8 = *v9;
    *(_OWORD *)(a1 + 136) = v12;
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 128);
    if (v13 == 1)
    {
      *v8 = *v9;
    }
    else
    {
      *(_QWORD *)(a1 + 120) = *(_QWORD *)v9;
      *(_QWORD *)(a1 + 128) = v13;
      swift_bridgeObjectRetain();
    }
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v10;
    v14 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v14;
    v15 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v15;
    v16 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  return a1;
}

uint64_t assignWithCopy for FMIPDemoDeviceTemplate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = (_OWORD *)(a1 + 120);
  v8 = (_OWORD *)(a2 + 120);
  v9 = *(_QWORD *)(a2 + 144);
  if (*(_QWORD *)(a1 + 144) != 1)
  {
    if (v9 == 1)
    {
      sub_1CCABCA70(a1 + 120);
      *v7 = *v8;
      v13 = *(_OWORD *)(a2 + 184);
      v15 = *(_OWORD *)(a2 + 136);
      v14 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v13;
      *(_OWORD *)(a1 + 136) = v15;
      *(_OWORD *)(a1 + 152) = v14;
      goto LABEL_18;
    }
    v16 = *(_QWORD *)(a2 + 128);
    if (*(_QWORD *)(a1 + 128) == 1)
    {
      if (v16 != 1)
      {
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        swift_bridgeObjectRetain();
LABEL_17:
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
        *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
    else
    {
      if (v16 != 1)
      {
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      sub_1CC9C3E84(a1 + 120, &qword_1EF9E2C98);
    }
    *v7 = *v8;
    goto LABEL_17;
  }
  if (v9 == 1)
  {
    *v7 = *v8;
    v10 = *(_OWORD *)(a2 + 136);
    v11 = *(_OWORD *)(a2 + 152);
    v12 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v12;
    *(_OWORD *)(a1 + 136) = v10;
    *(_OWORD *)(a1 + 152) = v11;
  }
  else
  {
    if (*(_QWORD *)(a2 + 128) == 1)
    {
      *v7 = *v8;
    }
    else
    {
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRetain();
    }
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
LABEL_18:
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  return a1;
}

uint64_t sub_1CCABCA70(uint64_t a1)
{
  destroy for FMIPDemoDeviceTemplateOverrides(a1);
  return a1;
}

__n128 initializeWithTake for FMIPDemoDeviceTemplate(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)(a2 + 185);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for FMIPDemoDeviceTemplate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v6;
  swift_bridgeObjectRelease();
  v7 = (_OWORD *)(a1 + 120);
  v8 = (_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 144) == 1)
    goto LABEL_4;
  v9 = *(_QWORD *)(a2 + 144);
  if (v9 != 1)
  {
    if (*(_QWORD *)(a1 + 128) != 1)
    {
      v12 = *(_QWORD *)(a2 + 128);
      if (v12 != 1)
      {
        *(_QWORD *)(a1 + 120) = *v8;
        *(_QWORD *)(a1 + 128) = v12;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      sub_1CC9C3E84(a1 + 120, &qword_1EF9E2C98);
    }
    *v7 = *(_OWORD *)v8;
LABEL_10:
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v9;
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v13;
    swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v14;
    swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v15;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_1CCABCA70(a1 + 120);
LABEL_4:
  v10 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  v11 = *(_OWORD *)(a2 + 136);
  *v7 = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 136) = v11;
LABEL_11:
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPDemoDeviceTemplate(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 201))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPDemoDeviceTemplate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 200) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 201) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 201) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPDemoDeviceTemplate()
{
  return &type metadata for FMIPDemoDeviceTemplate;
}

uint64_t destroy for FMIPDemoDeviceTemplateOverrides(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8) != 1)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FMIPDemoDeviceTemplateOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_bridgeObjectRetain();
  }
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FMIPDemoDeviceTemplateOverrides(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  if (a1[1] != 1)
  {
    if (v4 != 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1CC9C3E84((uint64_t)a1, &qword_1EF9E2C98);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
LABEL_8:
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for FMDemoLocation(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

_QWORD *assignWithTake for FMIPDemoDeviceTemplateOverrides(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1[1] != 1)
  {
    v4 = a2[1];
    if (v4 != 1)
    {
      *a1 = *a2;
      a1[1] = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1CC9C3E84((uint64_t)a1, &qword_1EF9E2C98);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPDemoDeviceTemplateOverrides(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPDemoDeviceTemplateOverrides(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPDemoDeviceTemplateOverrides()
{
  return &type metadata for FMIPDemoDeviceTemplateOverrides;
}

_QWORD *sub_1CCABD0A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  void *v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  id v51;
  double v52;
  double v53;
  id v54;
  void *v55;
  id v56;
  double v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129[288];
  __int128 v130;
  unint64_t v131;
  __int128 v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  BOOL v137;
  __int128 v138;
  unint64_t v139;
  _OWORD v140[6];

  sub_1CCA14E90(&qword_1ED8A8C30);
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  v120 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA14E90(&qword_1ED8A7130);
  v15 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v119 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v118 = (char *)&v98 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v117 = (char *)&v98 - v20;
  MEMORY[0x1E0C80A78](v19);
  v116 = (char *)&v98 - v21;
  v22 = sub_1CCA14E90(&qword_1ED8A73F8);
  MEMORY[0x1E0C80A78](v22);
  v115 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1CCA14E90(&qword_1ED8A73B8);
  MEMORY[0x1E0C80A78](v24);
  v114 = (char *)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v26);
  v128 = (uint64_t)&v98 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1CCA14E90(&qword_1ED8A7460);
  MEMORY[0x1E0C80A78](v28);
  v127 = (uint64_t)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1CCB635B0();
  v124 = *(_QWORD *)(v30 - 8);
  v125 = v30;
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v98 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *a4;
  v33 = (void *)a4[1];
  v35 = a4[2];
  v36 = 288;
  v126 = a1;
  v37 = *(_QWORD *)(a1 + 104);
  v38 = *(_QWORD *)(a1 + 112);
  if (!v38)
  {
LABEL_6:
    v36 = 416;
    goto LABEL_7;
  }
  if (v37 != 0x72656E776FLL || v38 != 0xE500000000000000)
  {
    LODWORD(v113) = a5;
    v39 = a2;
    v40 = a3;
    v41 = v33;
    v42 = sub_1CCB642A0();
    v33 = v41;
    a3 = v40;
    a2 = v39;
    v36 = 288;
    if ((v42 & 1) != 0)
    {
      if ((v113 & 1) != 0)
        goto LABEL_8;
      goto LABEL_12;
    }
    LOBYTE(a5) = v113;
    goto LABEL_6;
  }
LABEL_7:
  if ((a5 & 1) != 0)
  {
LABEL_8:
    if ((*(_BYTE *)(v126 + 200) & 1) != 0)
      v43 = 16;
    else
      v43 = 2048;
    v36 |= v43;
  }
LABEL_12:
  v122 = a2;
  v123 = a3;
  v121 = a6;
  v113 = v36;
  if (v33)
  {
    v44 = v34 >> 24;
    v45 = v34 & 1;
    v46 = (void *)((v34 >> 8) & 1);
    v47 = (v34 >> 16) & 1;
    v48 = v33;
  }
  else
  {
    sub_1CCABF78C();
    v49 = *(_OWORD *)(v126 + 40);
    v50 = *(_OWORD *)(v126 + 72);
    v140[2] = *(_OWORD *)(v126 + 56);
    v140[3] = v50;
    v140[4] = *(_OWORD *)(v126 + 88);
    v140[0] = *(_OWORD *)(v126 + 24);
    v140[1] = v49;
    sub_1CCABF7C8((uint64_t)v140);
    v46 = sub_1CCAF8B6C((uint64_t)v140);
    v129[0] = 6;
    v51 = objc_msgSend(v46, sel_timestamp);
    sub_1CCB63580();

    sub_1CCB6355C();
    v53 = v52;
    (*(void (**)(char *, uint64_t))(v124 + 8))(v32, v125);
    v54 = objc_msgSend(v46, sel_floor);
    if (v54)
    {
      v55 = v54;
      v56 = objc_msgSend(v54, sel_level);

      v57 = (double)(uint64_t)v56;
    }
    else
    {
      v57 = -1.0;
    }
    sub_1CC9FB3D4(v46, v129, v53 < -3600.0, 0, 1, (uint64_t)&v138, v57);
    v45 = v138;
    LODWORD(v46) = BYTE1(v138);
    LODWORD(v47) = BYTE2(v138);
    LOBYTE(v44) = BYTE3(v138);
    v48 = (void *)*((_QWORD *)&v138 + 1);
    v35 = v139;
  }
  if (v38)
    v58 = v37;
  else
    v58 = 0x72656E776FLL;
  v59 = 0xE500000000000000;
  if (v38)
    v59 = v38;
  v111 = v59;
  v112 = v58;
  v60 = v126;
  v61 = (*(_BYTE *)(v126 + 200) & 1) == 0;
  v62 = *(_QWORD *)(v126 + 8);
  v110 = *(_QWORD *)v126;
  v137 = v61;
  swift_bridgeObjectRetain();
  v99 = v62;
  swift_bridgeObjectRetain();
  sub_1CCABD9D8();
  v108 = v64;
  v109 = v63;
  sub_1CCABDE78();
  v106 = v66;
  v107 = v65;
  sub_1CCABDFF4();
  v104 = v68;
  v105 = v67;
  sub_1CCABDB40();
  v102 = v70;
  v103 = v69;
  sub_1CCABDCEC();
  v100 = v72;
  v101 = v71;
  v136 = 1;
  v135 = v113;
  v73 = *(_BYTE *)(v60 + 16);
  swift_bridgeObjectRetain();
  sub_1CCB56658(v73);
  v74 = 256;
  if (!(_DWORD)v46)
    v74 = 0;
  v75 = v74 | v45;
  v76 = 0x10000;
  if (!(_DWORD)v47)
    v76 = 0;
  *(_QWORD *)&v132 = (v75 | v76) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v44 << 24);
  v98 = v48;
  *((_QWORD *)&v132 + 1) = v48;
  v133 = v35;
  *(_QWORD *)&v130 = v132;
  *((_QWORD *)&v130 + 1) = v48;
  v131 = v35;
  sub_1CCA30EF4(&v138);
  sub_1CC9C3EC0((uint64_t)&v138, (uint64_t)v129, &qword_1ED8A71C0);
  v77 = type metadata accessor for FMIPPlaySoundMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v127, 1, 1, v77);
  v78 = type metadata accessor for FMIPDeviceLostModeMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v128, 1, 1, v78);
  v79 = type metadata accessor for FMIPLockMetadata();
  v80 = (uint64_t)v114;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v114, 1, 1, v79);
  v81 = type metadata accessor for FMIPEraseMetadata();
  v82 = (uint64_t)v115;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v115, 1, 1, v81);
  v83 = v125;
  v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56);
  v85 = (uint64_t)v116;
  v84(v116, 1, 1, v125);
  v86 = (uint64_t)v117;
  v84(v117, 1, 1, v83);
  v87 = (uint64_t)v118;
  v84(v118, 1, 1, v83);
  v88 = (uint64_t)v119;
  v84(v119, 1, 1, v83);
  v89 = type metadata accessor for FMIPItemGroup();
  v90 = (uint64_t)v120;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v120, 1, 1, v89);
  v91 = v98;
  *((_QWORD *)&v97 + 1) = v100;
  *(_QWORD *)&v97 = v101;
  *((_QWORD *)&v96 + 1) = v102;
  *(_QWORD *)&v96 = v103;
  *((_QWORD *)&v95 + 1) = v104;
  *(_QWORD *)&v95 = v105;
  *((_QWORD *)&v94 + 1) = v106;
  *(_QWORD *)&v94 = v107;
  *((_QWORD *)&v93 + 1) = v108;
  *(_QWORD *)&v93 = v109;
  sub_1CCABE330(v122, v123, 0, 0, v112, v111, 0, 0, v121, a7, v110, v99, (char *)&v137, v93, v94, v95, v96, v97, v110,
    v99,
    &v136,
    6,
    160,
    &v135,
    MEMORY[0x1E0DEE9D8],
    &v134,
    MEMORY[0x1E0DEE9D8],
    &v132,
    &v130,
    (uint64_t)v129,
    v127,
    v128,
    v80,
    v82,
    v85,
    v86,
    v87,
    v88,
    0,
    0,
    0,
    v90,
    0);
  return sub_1CCA83160((_QWORD *)v60);
}

uint64_t sub_1CCABD864()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCABD89C + 4 * byte_1CCB6C3E0[*v0]))(0x6F43656369766564, 0xEB00000000726F6CLL);
}

uint64_t sub_1CCABD89C()
{
  return 0x6369766544776172;
}

unint64_t sub_1CCABD8C0()
{
  return 0xD000000000000010;
}

uint64_t sub_1CCABD8DC()
{
  return 0x6C43656369766564;
}

uint64_t sub_1CCABD8FC()
{
  return 0x6F4D656369766564;
}

uint64_t sub_1CCABD91C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCABE724(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCABD940()
{
  sub_1CCABF6EC();
  return sub_1CCB643D8();
}

uint64_t sub_1CCABD968()
{
  sub_1CCABF6EC();
  return sub_1CCB643E4();
}

__n128 sub_1CCABD990@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  sub_1CCABE9A4(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

void sub_1CCABD9D8()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCABDA20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v6;
  _BYTE v7[80];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = 0x302D312D31;
  sub_1CC9C3EC0(v0 + 120, (uint64_t)v7, &qword_1EF9E2CE0);
  sub_1CC9C3EC0((uint64_t)v7, (uint64_t)&v8, &qword_1EF9E2CE0);
  if (*((_QWORD *)&v9 + 1) != 1)
  {
    v3 = v11;
    *(_OWORD *)(v1 - 112) = v10;
    *(_OWORD *)(v1 - 96) = v3;
    *(_OWORD *)(v1 - 80) = v12;
    v4 = v9;
    *(_OWORD *)(v1 - 144) = v8;
    *(_OWORD *)(v1 - 128) = v4;
    sub_1CC9C3EC0(v1 - 144, v1 - 64, qword_1EF9E2CF0);
    sub_1CC9C3EC0(v1 - 64, (uint64_t)&v6, qword_1EF9E2CF0);
    sub_1CC9C3EC0(v1 - 64, v1 - 48, qword_1EF9E2CF0);
    if (*(_QWORD *)(v1 - 40) == 1)
      swift_bridgeObjectRetain();
    else
      v2 = v6;
    sub_1CCABF818((uint64_t *)(v1 - 64));
    swift_bridgeObjectRelease();
  }
  return v2;
}

void sub_1CCABDB40()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCABDB90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v6;
  _BYTE v7[80];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = 0x3231656E6F685069;
  sub_1CC9C3EC0(v0 + 120, (uint64_t)v7, &qword_1EF9E2CE0);
  sub_1CC9C3EC0((uint64_t)v7, (uint64_t)&v8, &qword_1EF9E2CE0);
  if (*((_QWORD *)&v9 + 1) != 1)
  {
    v3 = v11;
    *(_OWORD *)(v1 - 112) = v10;
    *(_OWORD *)(v1 - 96) = v3;
    *(_OWORD *)(v1 - 80) = v12;
    v4 = v9;
    *(_OWORD *)(v1 - 144) = v8;
    *(_OWORD *)(v1 - 128) = v4;
    sub_1CC9C3EC0(v1 - 128, v1 - 64, &qword_1EF9E2CE8);
    sub_1CC9C3EC0(v1 - 64, (uint64_t)&v6, &qword_1EF9E2CE8);
    sub_1CC9C3EC0(v1 - 64, v1 - 48, &qword_1EF9E2CE8);
    if (*(_QWORD *)(v1 - 40))
      v2 = v6;
    else
      swift_bridgeObjectRetain();
    sub_1CCABF7F0(v1 - 64);
    swift_bridgeObjectRelease();
  }
  return v2;
}

void sub_1CCABDCEC()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCABDD38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v6;
  _BYTE v7[80];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = 0x656E6F685069;
  sub_1CC9C3EC0(v0 + 120, (uint64_t)v7, &qword_1EF9E2CE0);
  sub_1CC9C3EC0((uint64_t)v7, (uint64_t)&v8, &qword_1EF9E2CE0);
  if (*((_QWORD *)&v9 + 1) != 1)
  {
    v3 = v11;
    *(_OWORD *)(v1 - 112) = v10;
    *(_OWORD *)(v1 - 96) = v3;
    *(_OWORD *)(v1 - 80) = v12;
    v4 = v9;
    *(_OWORD *)(v1 - 144) = v8;
    *(_OWORD *)(v1 - 128) = v4;
    sub_1CC9C3EC0(v1 - 112, v1 - 64, &qword_1EF9E2CE8);
    sub_1CC9C3EC0(v1 - 64, (uint64_t)&v6, &qword_1EF9E2CE8);
    sub_1CC9C3EC0(v1 - 64, v1 - 48, &qword_1EF9E2CE8);
    if (*(_QWORD *)(v1 - 40))
      v2 = v6;
    else
      swift_bridgeObjectRetain();
    sub_1CCABF7F0(v1 - 64);
    swift_bridgeObjectRelease();
  }
  return v2;
}

void sub_1CCABDE78()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCABDEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v6;
  _BYTE v7[80];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = 0x656E6F685069;
  sub_1CC9C3EC0(v0 + 120, (uint64_t)v7, &qword_1EF9E2CE0);
  sub_1CC9C3EC0((uint64_t)v7, (uint64_t)&v8, &qword_1EF9E2CE0);
  if (*((_QWORD *)&v9 + 1) != 1)
  {
    v3 = v11;
    *(_OWORD *)(v1 - 112) = v10;
    *(_OWORD *)(v1 - 96) = v3;
    *(_OWORD *)(v1 - 80) = v12;
    v4 = v9;
    *(_OWORD *)(v1 - 144) = v8;
    *(_OWORD *)(v1 - 128) = v4;
    sub_1CC9C3EC0(v1 - 96, v1 - 64, &qword_1EF9E2CE8);
    sub_1CC9C3EC0(v1 - 64, (uint64_t)&v6, &qword_1EF9E2CE8);
    sub_1CC9C3EC0(v1 - 64, v1 - 48, &qword_1EF9E2CE8);
    if (*(_QWORD *)(v1 - 40))
      v2 = v6;
    else
      swift_bridgeObjectRetain();
    sub_1CCABF7F0(v1 - 64);
    swift_bridgeObjectRelease();
  }
  return v2;
}

void sub_1CCABDFF4()
{
  __asm { BR              X11 }
}

uint64_t sub_1CCABE040@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  _BYTE v8[80];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v3 = a1 + 3;
  sub_1CC9C3EC0(v1 + 120, (uint64_t)v8, &qword_1EF9E2CE0);
  sub_1CC9C3EC0((uint64_t)v8, (uint64_t)&v9, &qword_1EF9E2CE0);
  if (*((_QWORD *)&v10 + 1) != 1)
  {
    v4 = v12;
    *(_OWORD *)(v2 - 112) = v11;
    *(_OWORD *)(v2 - 96) = v4;
    *(_OWORD *)(v2 - 80) = v13;
    v5 = v10;
    *(_OWORD *)(v2 - 144) = v9;
    *(_OWORD *)(v2 - 128) = v5;
    sub_1CC9C3EC0(v2 - 80, v2 - 64, &qword_1EF9E2CE8);
    sub_1CC9C3EC0(v2 - 64, (uint64_t)&v7, &qword_1EF9E2CE8);
    sub_1CC9C3EC0(v2 - 64, v2 - 48, &qword_1EF9E2CE8);
    if (*(_QWORD *)(v2 - 40))
      v3 = v7;
    else
      swift_bridgeObjectRetain();
    sub_1CCABF7F0(v2 - 64);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_1CCABE1B0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCABE1D8 + 4 * byte_1CCB6C403[*v0]))(1701667182, 0xE400000000000000);
}

unint64_t sub_1CCABE1D8()
{
  return 0xD000000000000010;
}

uint64_t sub_1CCABE1F4()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1CCABE20C()
{
  return 0x72656E776FLL;
}

uint64_t sub_1CCABE220()
{
  return 0x656469727265766FLL;
}

uint64_t sub_1CCABE23C()
{
  return 0x656E696C6E4F7369;
}

uint64_t sub_1CCABE254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCABECE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCABE278()
{
  sub_1CCABF5DC();
  return sub_1CCB643D8();
}

uint64_t sub_1CCABE2A0()
{
  sub_1CCABF5DC();
  return sub_1CCB643E4();
}

__n128 sub_1CCABE2C8@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[11];
  _OWORD v11[2];

  sub_1CCABEF54(a1, v10);
  if (!v2)
  {
    v5 = v11[0];
    *(_OWORD *)(a2 + 160) = v10[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(_OWORD *)(a2 + 185) = *(_OWORD *)((char *)v11 + 9);
    v6 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v6;
    v7 = v10[9];
    *(_OWORD *)(a2 + 128) = v10[8];
    *(_OWORD *)(a2 + 144) = v7;
    v8 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v8;
    v9 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v9;
    result = (__n128)v10[1];
    *(_OWORD *)a2 = v10[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1CCABE330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, char *a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,uint64_t *a26,uint64_t a27,__int128 *a28,__int128 *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,char a40,char a41,uint64_t a42,char a43)
{
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t result;
  _QWORD *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _BYTE v64[296];

  v45 = *a13;
  v46 = *a21;
  v47 = *a24;
  v48 = *a26;
  v53 = *a28;
  v49 = *((_QWORD *)a28 + 2);
  v54 = *a29;
  v55 = *((_QWORD *)a29 + 2);
  sub_1CC9C3EC0(a30, (uint64_t)v64, &qword_1ED8A71C0);
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a11;
  *(_QWORD *)(a9 + 72) = a12;
  *(_BYTE *)(a9 + 80) = v45;
  *(_OWORD *)(a9 + 88) = a14;
  *(_OWORD *)(a9 + 104) = a15;
  *(_OWORD *)(a9 + 120) = a16;
  *(_OWORD *)(a9 + 136) = a17;
  *(_OWORD *)(a9 + 152) = a18;
  *(_QWORD *)(a9 + 168) = a19;
  *(_QWORD *)(a9 + 176) = a20;
  *(double *)(a9 + 184) = a10;
  *(_BYTE *)(a9 + 192) = v46;
  *(_QWORD *)(a9 + 200) = a22;
  *(_QWORD *)(a9 + 208) = a23;
  *(_QWORD *)(a9 + 216) = v47;
  *(_QWORD *)(a9 + 232) = a25;
  *(_QWORD *)(a9 + 240) = v48;
  *(_QWORD *)(a9 + 248) = a27;
  *(_OWORD *)(a9 + 256) = v53;
  *(_QWORD *)(a9 + 272) = v49;
  *(_OWORD *)(a9 + 280) = v54;
  *(_QWORD *)(a9 + 296) = v55;
  sub_1CC9C3EC0((uint64_t)v64, a9 + 304, &qword_1ED8A71C0);
  v50 = (int *)type metadata accessor for FMIPDevice();
  sub_1CC9EAB74(a31, a9 + v50[28], &qword_1ED8A7460);
  sub_1CC9EAB74(a32, a9 + v50[29], &qword_1ED8A7AA0);
  sub_1CC9EAB74(a33, a9 + v50[30], &qword_1ED8A73B8);
  sub_1CC9EAB74(a34, a9 + v50[31], &qword_1ED8A73F8);
  sub_1CC9EAB74(a35, a9 + v50[38], &qword_1ED8A7130);
  sub_1CC9EAB74(a36, a9 + v50[39], &qword_1ED8A7130);
  sub_1CC9EAB74(a37, a9 + v50[40], &qword_1ED8A7130);
  sub_1CC9EAB74(a38, a9 + v50[41], &qword_1ED8A7130);
  *(_QWORD *)(a9 + v50[37]) = 0;
  *(_BYTE *)(a9 + v50[42]) = a39;
  *(_BYTE *)(a9 + v50[43]) = a40;
  *(_BYTE *)(a9 + v50[44]) = a41;
  sub_1CC9C3E84(a38, &qword_1ED8A7130);
  sub_1CC9C3E84(a37, &qword_1ED8A7130);
  sub_1CC9C3E84(a36, &qword_1ED8A7130);
  sub_1CC9C3E84(a35, &qword_1ED8A7130);
  sub_1CC9C3E84(a34, &qword_1ED8A73F8);
  sub_1CC9C3E84(a33, &qword_1ED8A73B8);
  sub_1CC9C3E84(a32, &qword_1ED8A7AA0);
  sub_1CC9C3E84(a31, &qword_1ED8A7460);
  *(_QWORD *)(a9 + 224) = MEMORY[0x1E0DEE9D8];
  result = sub_1CC9C3EC0(a42, a9 + v50[32], &qword_1ED8A8C30);
  *(_BYTE *)(a9 + v50[33]) = a43;
  *(_BYTE *)(a9 + v50[34]) = 0;
  *(_BYTE *)(a9 + v50[35]) = 0;
  v52 = (_QWORD *)(a9 + v50[36]);
  *v52 = 0;
  v52[1] = 0;
  return result;
}

uint64_t sub_1CCABE724(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F43656369766564 && a2 == 0xEB00000000726F6CLL;
  if (v2 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6369766544776172 && a2 == 0xEE006C65646F4D65 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CCB781E0 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C43656369766564 && a2 == 0xEB00000000737361 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F4D656369766564 && a2 == 0xEB000000006C6564)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1CCABE9A4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v5 = sub_1CCA14E90(&qword_1EF9E2CC8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCABF6EC();
  sub_1CCB643B4();
  if (v2)
    return sub_1CCA01CA0((uint64_t)a1);
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
  v27 = 0;
  sub_1CCABF730();
  sub_1CCB64180();
  v27 = 1;
  v22 = v26;
  v23 = v25;
  sub_1CCA8314C(v25, v26);
  sub_1CCB64180();
  v20 = v25;
  v24 = v6;
  v27 = 2;
  v21 = v26;
  swift_bridgeObjectRetain();
  sub_1CCB64180();
  v10 = v26;
  v19 = v25;
  v27 = 3;
  swift_bridgeObjectRetain();
  sub_1CCB64180();
  v11 = v26;
  v18 = v25;
  v27 = 4;
  swift_bridgeObjectRetain();
  sub_1CCB64180();
  v13 = v25;
  v12 = v26;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v5);
  v15 = v22;
  v14 = v23;
  sub_1CCA8314C(v23, v22);
  swift_bridgeObjectRetain();
  sub_1CCA83264(v14, v15);
  sub_1CCA01CA0((uint64_t)a1);
  sub_1CCA83264(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v21;
  result = swift_bridgeObjectRelease();
  *a2 = v14;
  a2[1] = v15;
  a2[2] = v20;
  a2[3] = v16;
  a2[4] = v19;
  a2[5] = v10;
  a2[6] = v18;
  a2[7] = v11;
  a2[8] = v13;
  a2[9] = v12;
  return result;
}

uint64_t sub_1CCABECE8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CCB7B800 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x72656E776FLL && a2 == 0xE500000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656469727265766FLL && a2 == 0xE900000000000073 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656E696C6E4F7369 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

_QWORD *sub_1CCABEF54@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *result;
  __int128 v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[2];
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  _BYTE v79[7];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  _BYTE v94[7];
  char v95;
  _BYTE v96[7];
  char v97;
  _BYTE v98[7];
  char v99;
  _DWORD v100[3];
  uint64_t v101;

  v57 = a2;
  v101 = sub_1CCA14E90(&qword_1EF9E2CA0);
  v4 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCABF5DC();
  sub_1CCB643B4();
  if (v2)
    return (_QWORD *)sub_1CCA01CA0((uint64_t)a1);
  v56 = a1;
  v7 = v4;
  LOBYTE(v70) = 0;
  v8 = v101;
  v9 = v6;
  v10 = sub_1CCB64150();
  v12 = v11;
  LOBYTE(v58) = 1;
  sub_1CCABF620();
  swift_bridgeObjectRetain();
  sub_1CCB64180();
  v13 = v70;
  LOBYTE(v58) = 2;
  sub_1CCABF664();
  sub_1CCB64180();
  v53 = v13;
  v14 = v70;
  v49 = *((_QWORD *)&v71 + 1);
  v15 = v71;
  v50 = *((_QWORD *)&v72 + 1);
  v16 = v75;
  v51 = v74;
  v52 = v76;
  v47 = v73;
  v48 = v72;
  v99 = v72;
  v97 = v73;
  v95 = v75;
  LOBYTE(v70) = 3;
  v55 = v77;
  swift_bridgeObjectRetain();
  v17 = sub_1CCB64120();
  v54 = v18;
  v39 = v16;
  v40 = v17;
  LOBYTE(v58) = 4;
  sub_1CCABF6A8();
  swift_bridgeObjectRetain();
  v42 = 0;
  sub_1CCB64144();
  v19 = v77;
  v93 = 5;
  v36 = v76;
  v45 = v70;
  v43 = v75;
  v44 = v71;
  v46 = v72;
  v37 = v74;
  v38 = v73;
  sub_1CCA830F0(v70, v71, *((uint64_t *)&v71 + 1), v72);
  v20 = sub_1CCB6415C();
  v41 = v19;
  LOBYTE(v13) = v20;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v8);
  LODWORD(v101) = v13 & 1;
  *(_QWORD *)&v58 = v10;
  *((_QWORD *)&v58 + 1) = v12;
  LOBYTE(v59) = v53;
  *((_QWORD *)&v59 + 1) = v14;
  *(_QWORD *)&v60 = v15;
  *((_QWORD *)&v60 + 1) = v49;
  LOBYTE(v61) = v48;
  *((_QWORD *)&v61 + 1) = v50;
  LOBYTE(v62) = v47;
  *((_QWORD *)&v62 + 1) = v51;
  LOBYTE(v63) = v39;
  *((_QWORD *)&v63 + 1) = v52;
  *(_QWORD *)&v64 = v55;
  v21 = v19;
  *((_QWORD *)&v64 + 1) = v40;
  *(_QWORD *)&v65 = v54;
  v22 = *((_QWORD *)&v44 + 1);
  v23 = v43;
  *((_QWORD *)&v65 + 1) = v45;
  v66 = v44;
  v67 = v46;
  *(_QWORD *)&v68 = v38;
  *((_QWORD *)&v68 + 1) = v37;
  *(_QWORD *)&v69[0] = v43;
  *((_QWORD *)&v69[0] + 1) = v36;
  *(_QWORD *)&v69[1] = v21;
  BYTE8(v69[1]) = v13 & 1;
  sub_1CCA83044(&v58);
  v24 = v44;
  v25 = v37;
  sub_1CCA83208(v45, v44, v22, v46);
  swift_bridgeObjectRelease();
  v26 = v55;
  swift_bridgeObjectRelease();
  v27 = v54;
  swift_bridgeObjectRelease();
  sub_1CCA01CA0((uint64_t)v56);
  v70 = v10;
  *(_QWORD *)&v71 = v12;
  BYTE8(v71) = v53;
  *(_DWORD *)((char *)&v71 + 9) = v100[0];
  HIDWORD(v71) = *(_DWORD *)((char *)v100 + 3);
  *(_QWORD *)&v72 = v14;
  *((_QWORD *)&v72 + 1) = v15;
  v73 = v49;
  LOBYTE(v74) = v99;
  *(_DWORD *)((char *)&v74 + 1) = *(_DWORD *)v98;
  HIDWORD(v74) = *(_DWORD *)&v98[3];
  v75 = v50;
  LOBYTE(v76) = v97;
  HIDWORD(v76) = *(_DWORD *)&v96[3];
  *(_DWORD *)((char *)&v76 + 1) = *(_DWORD *)v96;
  v77 = v51;
  v78 = v95;
  *(_DWORD *)&v79[3] = *(_DWORD *)&v94[3];
  *(_DWORD *)v79 = *(_DWORD *)v94;
  v80 = v52;
  v81 = v26;
  v82 = v40;
  v83 = v27;
  v84 = v45;
  v85 = __PAIR128__(*((unint64_t *)&v44 + 1), v24);
  v86 = v46;
  v87 = v38;
  v88 = v25;
  v89 = v23;
  v90 = v36;
  v91 = v41;
  v92 = v101;
  result = sub_1CCA83160(&v70);
  v29 = v69[0];
  v30 = v57;
  v57[10] = v68;
  v30[11] = v29;
  *(_OWORD *)((char *)v30 + 185) = *(_OWORD *)((char *)v69 + 9);
  v31 = v65;
  v30[6] = v64;
  v30[7] = v31;
  v32 = v67;
  v30[8] = v66;
  v30[9] = v32;
  v33 = v61;
  v30[2] = v60;
  v30[3] = v33;
  v34 = v63;
  v30[4] = v62;
  v30[5] = v34;
  v35 = v59;
  *v30 = v58;
  v30[1] = v35;
  return result;
}

unint64_t sub_1CCABF5DC()
{
  unint64_t result;

  result = qword_1EF9E2CA8;
  if (!qword_1EF9E2CA8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C6E8, &type metadata for FMIPDemoDeviceTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E2CA8);
  }
  return result;
}

unint64_t sub_1CCABF620()
{
  unint64_t result;

  result = qword_1EF9E2CB0;
  if (!qword_1EF9E2CB0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75D38, &type metadata for FMIPDemoDeviceCategoryTemplate);
    atomic_store(result, (unint64_t *)&qword_1EF9E2CB0);
  }
  return result;
}

unint64_t sub_1CCABF664()
{
  unint64_t result;

  result = qword_1EF9E2CB8;
  if (!qword_1EF9E2CB8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6F838, &type metadata for FMDemoLocation);
    atomic_store(result, (unint64_t *)&qword_1EF9E2CB8);
  }
  return result;
}

unint64_t sub_1CCABF6A8()
{
  unint64_t result;

  result = qword_1EF9E2CC0;
  if (!qword_1EF9E2CC0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C4B0, &type metadata for FMIPDemoDeviceTemplateOverrides);
    atomic_store(result, (unint64_t *)&qword_1EF9E2CC0);
  }
  return result;
}

unint64_t sub_1CCABF6EC()
{
  unint64_t result;

  result = qword_1EF9E2CD0;
  if (!qword_1EF9E2CD0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C698, &type metadata for FMIPDemoDeviceTemplateOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E2CD0);
  }
  return result;
}

unint64_t sub_1CCABF730()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E2CD8;
  if (!qword_1EF9E2CD8)
  {
    v1 = sub_1CCA19B38((uint64_t *)&unk_1ED8AA328);
    v2 = MEMORY[0x1E0DEA9A0];
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE9A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E2CD8);
  }
  return result;
}

unint64_t sub_1CCABF78C()
{
  unint64_t result;

  result = qword_1EF9E2898;
  if (!qword_1EF9E2898)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF9E2898);
  }
  return result;
}

uint64_t sub_1CCABF7C8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1CCABF7F0(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_1CCABF818(uint64_t *a1)
{
  sub_1CCA8314C(*a1, a1[1]);
  return a1;
}

uint64_t storeEnumTagSinglePayload for FMIPDemoDeviceTemplateOverrides.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CCABF890 + 4 * byte_1CCB6C40E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CCABF8C4 + 4 * byte_1CCB6C409[v4]))();
}

uint64_t sub_1CCABF8C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCABF8CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCABF8D4);
  return result;
}

uint64_t sub_1CCABF8E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCABF8E8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CCABF8EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCABF8F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPDemoDeviceTemplateOverrides.CodingKeys()
{
  return &type metadata for FMIPDemoDeviceTemplateOverrides.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FMIPDemoDeviceTemplate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CCABF95C + 4 * byte_1CCB6C418[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CCABF990 + 4 * byte_1CCB6C413[v4]))();
}

uint64_t sub_1CCABF990(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCABF998(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCABF9A0);
  return result;
}

uint64_t sub_1CCABF9AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCABF9B4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CCABF9B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCABF9C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPDemoDeviceTemplate.CodingKeys()
{
  return &type metadata for FMIPDemoDeviceTemplate.CodingKeys;
}

uint64_t sub_1CCABF9DC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1CCABF9E4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

_QWORD *sub_1CCABFA3C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v13;
  int v14;
  int v15;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned int *)(v6 + 84);
  if ((_DWORD)v8)
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = v7 + 1;
  v10 = *(_DWORD *)(v6 + 80);
  if (v10 <= 7 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0 && v9 <= 0x18)
  {
    if ((_DWORD)v8)
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a2, v8, *(_QWORD *)(a3 + 16)))
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(v4, a2, v5);
        return v4;
      }
    }
    else
    {
      if (!*((_BYTE *)a2 + v7))
        goto LABEL_26;
      v14 = (*((unsigned __int8 *)a2 + v7) - 1) << (8 * v7);
      if (v7 > 3)
        v14 = 0;
      if ((_DWORD)v7)
      {
        if (v7 <= 3)
          v15 = *(_QWORD *)(v6 + 64);
        else
          v15 = 4;
        __asm { BR              X11 }
      }
      if (v14 == -1)
      {
LABEL_26:
        (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
        *((_BYTE *)v4 + v7) = 0;
        return v4;
      }
    }
    memcpy(v4, a2, v9);
    return v4;
  }
  v13 = *a2;
  *v4 = *a2;
  v4 = (_QWORD *)(v13 + ((v10 + 16) & ~v10));
  swift_retain();
  return v4;
}

uint64_t sub_1CCABFB98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned int *)(v4 + 84);
  if ((_DWORD)v5)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, v5, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 64);
    if (!*(_BYTE *)(a1 + v7))
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
    v8 = (*(unsigned __int8 *)(a1 + v7) - 1) << (8 * v7);
    if (v7 > 3)
      v8 = 0;
    if ((_DWORD)v7)
    {
      if (v7 > 3)
        LODWORD(v7) = 4;
      __asm { BR              X11 }
    }
    result = (v8 + 1);
    if (v8 == -1)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return result;
}

_BYTE *sub_1CCABFC7C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  int v9;
  int v10;
  size_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (v7)
  {
    if (!(*(unsigned int (**)(_BYTE *, _QWORD, _QWORD))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(a1, a2, v5);
      return a1;
    }
  }
  else
  {
    if (!a2[v8])
      goto LABEL_17;
    v9 = (a2[v8] - 1) << (8 * v8);
    if (v8 > 3)
      v9 = 0;
    if ((_DWORD)v8)
    {
      if (v8 <= 3)
        v10 = *(_QWORD *)(v6 + 64);
      else
        v10 = 4;
      __asm { BR              X11 }
    }
    if (v9 == -1)
    {
LABEL_17:
      (*(void (**)(_BYTE *, _BYTE *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
      a1[v8] = 0;
      return a1;
    }
  }
  if (v7)
    v11 = v8;
  else
    v11 = v8 + 1;
  memcpy(a1, a2, v11);
  return a1;
}

_BYTE *sub_1CCABFDA4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t (*v9)(_BYTE *, uint64_t, uint64_t);
  int v10;
  int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  int v16;
  size_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (!(_DWORD)v7)
  {
    v12 = 8 * v8;
    if (a1[v8])
    {
      v13 = (a1[v8] - 1) << v12;
      if (v8 > 3)
        v13 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v14 = *(_QWORD *)(v6 + 64);
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      if (v13 != -1)
      {
        if (!a2[v8] || (a2[v8] - 1) << v12 == -1)
        {
          (*(void (**)(_BYTE *, _BYTE *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
          a1[v8] = 0;
          return a1;
        }
        goto LABEL_27;
      }
    }
    if (!a2[v8])
      goto LABEL_31;
    v15 = (a2[v8] - 1) << v12;
    if (v8 > 3)
      v15 = 0;
    if ((_DWORD)v8)
    {
      if (v8 <= 3)
        v16 = *(_QWORD *)(v6 + 64);
      else
        v16 = 4;
      __asm { BR              X11 }
    }
    v11 = v15 + 1;
LABEL_25:
    if (v11)
    {
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_27;
    }
LABEL_31:
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 24))(a1, a2, v5);
    return a1;
  }
  v9 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48);
  v10 = v9(a1, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16));
  v11 = v9(a2, v7, v5);
  if (!v10)
    goto LABEL_25;
  if (!v11)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(a1, a2, v5);
    return a1;
  }
LABEL_27:
  if ((_DWORD)v7)
    v17 = v8;
  else
    v17 = v8 + 1;
  memcpy(a1, a2, v17);
  return a1;
}

_BYTE *sub_1CCABFFFC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  int v9;
  int v10;
  size_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (v7)
  {
    if (!(*(unsigned int (**)(_BYTE *, _QWORD, _QWORD))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(a1, a2, v5);
      return a1;
    }
  }
  else
  {
    if (!a2[v8])
      goto LABEL_17;
    v9 = (a2[v8] - 1) << (8 * v8);
    if (v8 > 3)
      v9 = 0;
    if ((_DWORD)v8)
    {
      if (v8 <= 3)
        v10 = *(_QWORD *)(v6 + 64);
      else
        v10 = 4;
      __asm { BR              X11 }
    }
    if (v9 == -1)
    {
LABEL_17:
      (*(void (**)(_BYTE *, _BYTE *, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
      a1[v8] = 0;
      return a1;
    }
  }
  if (v7)
    v11 = v8;
  else
    v11 = v8 + 1;
  memcpy(a1, a2, v11);
  return a1;
}

_BYTE *sub_1CCAC0124(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t (*v9)(_BYTE *, uint64_t, uint64_t);
  int v10;
  int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  int v16;
  size_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  if (!(_DWORD)v7)
  {
    v12 = 8 * v8;
    if (a1[v8])
    {
      v13 = (a1[v8] - 1) << v12;
      if (v8 > 3)
        v13 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v14 = *(_QWORD *)(v6 + 64);
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      if (v13 != -1)
      {
        if (!a2[v8] || (a2[v8] - 1) << v12 == -1)
        {
          (*(void (**)(_BYTE *, _BYTE *, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
          a1[v8] = 0;
          return a1;
        }
        goto LABEL_27;
      }
    }
    if (!a2[v8])
      goto LABEL_31;
    v15 = (a2[v8] - 1) << v12;
    if (v8 > 3)
      v15 = 0;
    if ((_DWORD)v8)
    {
      if (v8 <= 3)
        v16 = *(_QWORD *)(v6 + 64);
      else
        v16 = 4;
      __asm { BR              X11 }
    }
    v11 = v15 + 1;
LABEL_25:
    if (v11)
    {
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_27;
    }
LABEL_31:
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 40))(a1, a2, v5);
    return a1;
  }
  v9 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48);
  v10 = v9(a1, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16));
  v11 = v9(a2, v7, v5);
  if (!v10)
    goto LABEL_25;
  if (!v11)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(a1, a2, v5);
    return a1;
  }
LABEL_27:
  if ((_DWORD)v7)
    v17 = v8;
  else
    v17 = v8 + 1;
  memcpy(a1, a2, v17);
  return a1;
}

uint64_t sub_1CCAC037C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_1CCAC04BC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v8)
    v10 = *(_QWORD *)(v7 + 64);
  else
    v10 = *(_QWORD *)(v7 + 64) + 1;
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_17;
      goto LABEL_24;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_17:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_24:
      __asm { BR              X12 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_17;
  goto LABEL_24;
}

void sub_1CCAC06D0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1CCAC06D8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1CCAC06F8()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1CCAC0700()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1CCAC0710()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_1CCAC071C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  if (*(_DWORD *)(v2 + 84))
    return (*(uint64_t (**)(void))(v2 + 48))();
  v4 = *(_QWORD *)(v2 + 64);
  if (!*(_BYTE *)(a1 + v4))
    return 0;
  v5 = (*(unsigned __int8 *)(a1 + v4) - 1) << (8 * v4);
  if (v4 > 3)
    v5 = 0;
  if (!(_DWORD)v4)
    return (v5 + 1);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1CCAC0780 + 4 * byte_1CCB6C457[(v4 - 1)]))();
}

void sub_1CCAC07B8(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  unsigned int v7;
  int v8;
  int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned int *)(v4 + 84);
  v6 = *(_QWORD *)(v4 + 64);
  if (v5 >= a2)
  {
    if ((_DWORD)v5)
    {
      if (!(_DWORD)a2)
        return;
    }
    else
    {
      a1[v6] = 0;
      if (!(_DWORD)a2)
        return;
    }
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 56))(a1, a2, v5);
    return;
  }
  v7 = ~(_DWORD)v5 + a2;
  if (v6 >= 4)
  {
    bzero(a1, v6);
    *(_DWORD *)a1 = v7;
    LOBYTE(v8) = 1;
    if ((_DWORD)v5)
      return;
    goto LABEL_17;
  }
  v8 = (v7 >> (8 * v6)) + 1;
  if (!(_DWORD)v6)
  {
LABEL_16:
    if ((_DWORD)v5)
      return;
    goto LABEL_17;
  }
  v9 = v7 & ~(-1 << (8 * v6));
  bzero(a1, v6);
  if ((_DWORD)v6 == 3)
  {
    *(_WORD *)a1 = v9;
    a1[2] = BYTE2(v9);
    goto LABEL_16;
  }
  if ((_DWORD)v6 == 2)
  {
    *(_WORD *)a1 = v9;
    if ((_DWORD)v5)
      return;
    goto LABEL_17;
  }
  *a1 = v9;
  if (!(_DWORD)v5)
LABEL_17:
    a1[v6] = v8;
}

uint64_t type metadata accessor for FMIPDemoDeviceTemplateOverrides.Override(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CC9E3BAC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FMIPDemoDeviceTemplateOverrides.Override);
}

unint64_t sub_1CCAC08D0()
{
  unint64_t result;

  result = qword_1EF9E2D78;
  if (!qword_1EF9E2D78)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C5B8, &type metadata for FMIPDemoDeviceTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E2D78);
  }
  return result;
}

unint64_t sub_1CCAC0918()
{
  unint64_t result;

  result = qword_1EF9E2D80;
  if (!qword_1EF9E2D80)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C670, &type metadata for FMIPDemoDeviceTemplateOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E2D80);
  }
  return result;
}

unint64_t sub_1CCAC0960()
{
  unint64_t result;

  result = qword_1EF9E2D88;
  if (!qword_1EF9E2D88)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C5E0, &type metadata for FMIPDemoDeviceTemplateOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E2D88);
  }
  return result;
}

unint64_t sub_1CCAC09A8()
{
  unint64_t result;

  result = qword_1EF9E2D90;
  if (!qword_1EF9E2D90)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C608, &type metadata for FMIPDemoDeviceTemplateOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E2D90);
  }
  return result;
}

unint64_t sub_1CCAC09F0()
{
  unint64_t result;

  result = qword_1EF9E2D98;
  if (!qword_1EF9E2D98)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C528, &type metadata for FMIPDemoDeviceTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E2D98);
  }
  return result;
}

unint64_t sub_1CCAC0A38()
{
  unint64_t result;

  result = qword_1EF9E2DA0;
  if (!qword_1EF9E2DA0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C550, &type metadata for FMIPDemoDeviceTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E2DA0);
  }
  return result;
}

uint64_t static FMIPManagerSubsystem.all.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  if (qword_1ED8A8C98 != -1)
    result = swift_once();
  *a1 = qword_1ED8A8C90;
  return result;
}

uint64_t FMIPManagerSubsystem.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

FMIPCore::FMIPManagerSubsystem __swiftcall FMIPManagerSubsystem.init(rawValue:)(FMIPCore::FMIPManagerSubsystem rawValue)
{
  FMIPCore::FMIPManagerSubsystem *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static FMIPManagerSubsystem.devices.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static FMIPManagerSubsystem.items.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

_QWORD *sub_1CCAC0AF4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1CCAC0B08@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_1CCAC0B1C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1CCAC0B48@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1CCAC0B6C(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1CCAC0B80(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1CCAC0B94@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1CCAC0BA8(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1CCAC0BBC()
{
  _QWORD *v0;

  return *v0 == 0;
}

_QWORD *sub_1CCAC0BCC(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *FMIPSnapshotHandlers.__allocating_init(devicesResponseFilter:devicesResponseHandler:itemsResponseFilter:itemsResponseHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  result[6] = a5;
  result[7] = a6;
  result[8] = a7;
  result[9] = a8;
  return result;
}

_QWORD *FMIPSnapshotHandlers.init(devicesResponseFilter:devicesResponseHandler:itemsResponseFilter:itemsResponseHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  v8[6] = a5;
  v8[7] = a6;
  v8[8] = a7;
  v8[9] = a8;
  return v8;
}

uint64_t *FMIPSnapshotHandlers.deinit()
{
  uint64_t *v0;

  sub_1CCA203A8(v0[2]);
  sub_1CCA203A8(v0[4]);
  sub_1CCA203A8(v0[6]);
  sub_1CCA203A8(v0[8]);
  return v0;
}

uint64_t FMIPSnapshotHandlers.__deallocating_deinit()
{
  uint64_t *v0;

  sub_1CCA203A8(v0[2]);
  sub_1CCA203A8(v0[4]);
  sub_1CCA203A8(v0[6]);
  sub_1CCA203A8(v0[8]);
  return swift_deallocClassInstance();
}

uint64_t FMIPManagerConfiguration.cacheDirectory.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_cacheDirectory);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPManagerConfiguration.authenticationUIProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1CCAC0D30(v1 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_authenticationUIProvider, a1);
}

uint64_t sub_1CCAC0D30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A9DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t FMIPManagerConfiguration.snapshotHandlers.getter()
{
  return swift_retain();
}

uint64_t FMIPManagerConfiguration.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_preferredLocale;
  v2 = sub_1CCB63634();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  sub_1CCAC0E14(v0 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_authenticationUIProvider);
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1CCAC0E14(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CCA14E90(&qword_1ED8A9DE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t FMIPManagerConfiguration.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_preferredLocale;
  v2 = sub_1CCB63634();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  sub_1CCAC0E14(v0 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_authenticationUIProvider);
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

unint64_t sub_1CCAC0EF0()
{
  unint64_t result;

  result = qword_1EF9E2DA8;
  if (!qword_1EF9E2DA8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPManagerSubsystem, &type metadata for FMIPManagerSubsystem);
    atomic_store(result, (unint64_t *)&qword_1EF9E2DA8);
  }
  return result;
}

unint64_t sub_1CCAC0F38()
{
  unint64_t result;

  result = qword_1EF9E2DB0;
  if (!qword_1EF9E2DB0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPManagerSubsystem, &type metadata for FMIPManagerSubsystem);
    atomic_store(result, (unint64_t *)&qword_1EF9E2DB0);
  }
  return result;
}

unint64_t sub_1CCAC0F80()
{
  unint64_t result;

  result = qword_1EF9E2DB8;
  if (!qword_1EF9E2DB8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPManagerSubsystem, &type metadata for FMIPManagerSubsystem);
    atomic_store(result, (unint64_t *)&qword_1EF9E2DB8);
  }
  return result;
}

unint64_t sub_1CCAC0FC8()
{
  unint64_t result;

  result = qword_1EF9E2DC0;
  if (!qword_1EF9E2DC0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPManagerSubsystem, &type metadata for FMIPManagerSubsystem);
    atomic_store(result, (unint64_t *)&qword_1EF9E2DC0);
  }
  return result;
}

uint64_t type metadata accessor for FMIPSnapshotHandlers()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMIPSnapshotHandlers()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPSnapshotHandlers.__allocating_init(devicesResponseFilter:devicesResponseHandler:itemsResponseFilter:itemsResponseHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t sub_1CCAC1040()
{
  return type metadata accessor for FMIPManagerConfiguration();
}

uint64_t method lookup function for FMIPManagerConfiguration()
{
  return swift_lookUpClassMethod();
}

id sub_1CCAC1058(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, a1);
  v6 = sub_1CCB64288();
  if (v6)
  {
    v7 = (void *)v6;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  else
  {
    v7 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v8, v4, a1);
  }
  v9 = (void *)sub_1CCB633F4();

  v10 = objc_msgSend(v9, sel_code);
  return v10;
}

BOOL sub_1CCAC1158(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  BOOL v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, a1);
  v6 = sub_1CCB64288();
  if (v6)
  {
    v7 = (void *)v6;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  else
  {
    v7 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v8, v4, a1);
  }
  v9 = (void *)sub_1CCB633F4();

  v10 = sub_1CCAC124C();
  return v10;
}

BOOL sub_1CCAC124C()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  _BOOL8 result;

  v1 = objc_msgSend(v0, sel_domain);
  v2 = sub_1CCB63988();
  v4 = v3;

  if (v2 == sub_1CCB63988() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v7 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v7 & 1) == 0)
      return result;
  }
  return (uint64_t)objc_msgSend(v0, sel_code) >= 500 && (uint64_t)objc_msgSend(v0, sel_code) < 600;
}

uint64_t type metadata accessor for FMIPVerifyTrustedStateRequest()
{
  uint64_t result;

  result = qword_1EF9E2DC8;
  if (!qword_1EF9E2DC8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCAC136C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FMIPDevice();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1CCAC13E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];

  v1 = *(_QWORD *)(v0 + qword_1EF9FF628);
  v2 = *(_QWORD *)(v0 + qword_1EF9FF628 + 8);
  v4[3] = MEMORY[0x1E0DEA968];
  v4[0] = v1;
  v4[1] = v2;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)v4, 0x656369766564, 0xE600000000000000);
  return swift_endAccess();
}

uint64_t sub_1CCAC146C()
{
  uint64_t v0;

  return sub_1CC9F73AC(v0 + qword_1EF9FF628);
}

uint64_t sub_1CCAC147C()
{
  uint64_t v0;

  v0 = sub_1CC9C785C();
  sub_1CC9F73AC(v0 + qword_1EF9FF628);
  return swift_deallocClassInstance();
}

uint64_t sub_1CCAC14BC()
{
  return type metadata accessor for FMIPVerifyTrustedStateRequest();
}

uint64_t FMIPLockAction.isSoundEnabled.getter()
{
  return 0;
}

uint64_t FMIPLockAction.isUserTextEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_isUserTextEnabled);
}

uint64_t FMIPLockAction.message.getter()
{
  return sub_1CCA81B40(&OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_message);
}

uint64_t FMIPLockAction.passcode.getter()
{
  return sub_1CCA81B40(&OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_passcode);
}

uint64_t sub_1CCAC14F4()
{
  uint64_t v0;
  unint64_t v2;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 216) & 0x80) == 0)
    return 0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 240);
  if ((v2 & 1) != 0)
    return 1;
  else
    return (v2 >> 13) & 1;
}

uint64_t FMIPLockAction.__allocating_init(device:message:passcode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  FMIPLockAction.init(device:message:passcode:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t FMIPLockAction.init(device:message:passcode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  *(_BYTE *)(v5 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_isSoundEnabled) = 0;
  v6 = (_QWORD *)(v5 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_message);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(v5 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_passcode);
  *v7 = a4;
  v7[1] = a5;
  *(_BYTE *)(v5 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_isUserTextEnabled) = a3 != 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext) = 0;
  v8 = (_QWORD *)(v5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(v5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(v5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_username);
  *v10 = 0;
  v10[1] = 0;
  v11 = (_QWORD *)(v5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  *v11 = 0;
  v11[1] = 0;
  v12 = (_QWORD *)(v5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
  *v12 = 0;
  v12[1] = 0;
  *(_OWORD *)(v5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession) = xmmword_1CCB66A50;
  sub_1CC9F73E8(a1, v5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  return v5;
}

void FMIPLockAction.__allocating_init(device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPLockAction.init(device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CCAC16E8()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t FMIPLockAction.deinit()
{
  uint64_t v0;

  v0 = FMIPDeviceAction.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FMIPLockAction.__deallocating_deinit()
{
  FMIPDeviceAction.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCAC17C0(uint64_t *a1, uint64_t *a2)
{
  return _s8FMIPCore14FMIPLockActionC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t _s8FMIPCore14FMIPLockActionC2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_message + 8);
  v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_message + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_message) == *(_QWORD *)(a2
                                                                                          + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_message)
      && v4 == v5;
    if (!v6 && (sub_1CCB642A0() & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_passcode + 8);
  v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_passcode + 8);
  if (!v7)
  {
    if (!v8)
      goto LABEL_19;
    return 0;
  }
  if (!v8)
    return 0;
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_passcode) == *(_QWORD *)(a2
                                                                                         + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_passcode)
    && v7 == v8;
  if (!v9 && (sub_1CCB642A0() & 1) == 0)
    return 0;
LABEL_19:
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_isUserTextEnabled) != *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_isUserTextEnabled))
    return 0;
  return static FMIPDevice.== infix(_:_:)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
}

uint64_t sub_1CCAC18B8()
{
  return type metadata accessor for FMIPLockAction();
}

uint64_t type metadata accessor for FMIPLockAction()
{
  uint64_t result;

  result = qword_1EF9E2E40;
  if (!qword_1EF9E2E40)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCAC18FC()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for FMIPLockAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPLockAction.__allocating_init(device:message:passcode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 384))();
}

uint64_t FMImageCache.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1CCAC19A0(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCAC19E4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCAC1A28()
{
  sub_1CCB63E2C();
  return sub_1CCB63D9C();
}

uint64_t sub_1CCAC1A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  uint64_t result;
  _QWORD v10[6];

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMImageCache: Purging cache...", v5, 2u);
    MEMORY[0x1D17B214C](v5, -1, -1);
  }

  v6 = *(NSObject **)(v1 + 24);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_1CCAC40F0;
  *(_QWORD *)(v7 + 24) = v1;
  v10[4] = sub_1CC9F44EC;
  v10[5] = v7;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = sub_1CC9F44AC;
  v10[3] = &unk_1E88F9D50;
  v8 = _Block_copy(v10);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v8);
  _Block_release(v8);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v6 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1CCAC1C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];

  v4 = v3;
  v26 = a2;
  v27 = a3;
  v6 = *v3;
  v29 = sub_1CCB63820();
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCB63868();
  v30 = *(_QWORD *)(v9 - 8);
  v31 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v6 + 80);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v10);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = v4[3];
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  v17 = (*(unsigned __int8 *)(v14 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v13;
  *(_OWORD *)(v19 + 24) = *(_OWORD *)(v6 + 88);
  *(_QWORD *)(v19 + 40) = *(_QWORD *)(v6 + 104);
  *(_QWORD *)(v19 + 48) = v4;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v19 + v17, v16, v13);
  v20 = (uint64_t *)(v19 + v18);
  v22 = v26;
  v21 = v27;
  *v20 = v26;
  v20[1] = v21;
  aBlock[4] = sub_1CCA00C64;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88FA050;
  v23 = _Block_copy(aBlock);
  swift_retain();
  sub_1CC9DF994(v22);
  sub_1CCB63844();
  v33 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  v24 = v29;
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v12, v8, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v24);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v31);
  return swift_release();
}

void sub_1CCAC1EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  void *v7;

  v7 = (void *)MEMORY[0x1D17B1B7C]();
  sub_1CCAC3840(v3, a3, a1, a2);
  objc_autoreleasePoolPop(v7);
}

uint64_t sub_1CCAC1F3C@<X0>(uint64_t a1@<X8>)
{
  void (**v1)(void);
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v47 = a1;
  v2 = *v1;
  v3 = *((_QWORD *)*v1 + 12);
  v4 = sub_1CCB63E2C();
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  MEMORY[0x1E0C80A78](v4);
  v42 = (char *)&v39 - v5;
  v6 = sub_1CCB63490();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v44 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v39 - v11;
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v39 - v14;
  (*((void (**)(uint64_t))v2 + 20))(v13);
  v16 = *((_QWORD *)v2 + 10);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v16, AssociatedConformanceWitness);
  sub_1CCB63454();
  swift_bridgeObjectRelease();
  v18 = v6;
  v46 = *(void (**)(char *, uint64_t))(v7 + 8);
  v46(v12, v6);
  v45 = v15;
  v19 = sub_1CCB6349C();
  v21 = v20;
  v23 = v40;
  v22 = v41;
  v24 = v42;
  v1[7]();
  sub_1CCA1B120(v19, v21);
  v25 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v24, 1, v3) == 1)
  {
    v43 = v3;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v22);
    v26 = v44;
    v27 = v18;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v28 = sub_1CCB637FC();
    sub_1CCA16C20(v28, (uint64_t)qword_1ED8AD7F8);
    v29 = v45;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v26, v45, v27);
    v30 = sub_1CCB637D8();
    v31 = sub_1CCB63D48();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v49 = v33;
      *(_DWORD *)v32 = 136315138;
      sub_1CC9CAA38(&qword_1EF9E3078, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
      v34 = sub_1CCB64240();
      v48 = sub_1CCA0CB60(v34, v35, &v49);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      v36 = v46;
      v46(v26, v27);
      _os_log_impl(&dword_1CC9BF000, v30, v31, "FMImageCache: Failed to load cached image from disk: %s", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v33, -1, -1);
      MEMORY[0x1D17B214C](v32, -1, -1);

    }
    else
    {

      v36 = v46;
      v46(v26, v27);
    }
    v36(v29, v27);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v47, 1, 1);
  }
  else
  {
    v46(v45, v18);
    v38 = v47;
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v47, v24, v3);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v25 + 56))(v38, 0, 1);
  }
}

BOOL static FMImageCacheError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t FMImageCacheError.hash(into:)()
{
  return sub_1CCB64348();
}

uint64_t FMImageCacheError.hashValue.getter()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

unint64_t sub_1CCAC23BC()
{
  return 0xD00000000000001BLL;
}

uint64_t FMImageCache.__allocating_init(converter:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  FMImageCache.init(converter:)(a1, a2);
  return v4;
}

uint64_t sub_1CCAC2424@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void (*v84)(char *);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  uint64_t v91;
  void (*v92)(char *, _QWORD, uint64_t, uint64_t);
  void (*v93)(char *);
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t AssociatedConformanceWitness;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  void (*v113)(char *);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119[4];
  uint64_t v120;

  v114 = a5;
  v111 = a4;
  v113 = (void (*)(char *))a3;
  v117 = a2;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  sub_1CCA19B38(&qword_1EF9DF470);
  v8 = sub_1CCB6439C();
  v105 = *(_QWORD *)(v8 - 8);
  v106 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v104 = (char *)&v97 - v10;
  v11 = *(_QWORD *)(v6 + 80);
  v115 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v9);
  v97 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v101 = (char *)&v97 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v98 = (char *)&v97 - v17;
  MEMORY[0x1E0C80A78](v16);
  v109 = (char *)&v97 - v18;
  v19 = sub_1CCB63E2C();
  v107 = *(_QWORD *)(v19 - 8);
  v108 = v19;
  v20 = MEMORY[0x1E0C80A78](v19);
  v100 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v97 - v23;
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = (char *)&v97 - v26;
  v28 = *(char **)(v7 - 8);
  v29 = MEMORY[0x1E0C80A78](v25);
  v102 = (char *)&v97 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v97 - v31;
  v99 = a1 + 48;
  swift_beginAccess();
  v112 = a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v33 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  swift_bridgeObjectRetain();
  v34 = v117;
  v116 = v11;
  v110 = v33;
  MEMORY[0x1D17B0E8C]();
  v35 = v7;
  swift_bridgeObjectRelease();
  v36 = (unsigned int (*)(char *, uint64_t, uint64_t))*((_QWORD *)v28 + 6);
  if (v36(v27, 1, v7) == 1)
  {
    v37 = v108;
    v38 = *(void (**)(char *, uint64_t))(v107 + 8);
    v38(v27, v108);
    sub_1CCAC1F3C((uint64_t)v24);
    v39 = v34;
    if (v36(v24, 1, v35) == 1)
    {
      v38(v24, v37);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v40 = v116;
      v41 = sub_1CCB63CA0();
      swift_bridgeObjectRelease();
      if ((v41 & 1) == 0)
      {
        v109 = v28;
        if (qword_1ED8AA630 != -1)
          swift_once();
        v42 = sub_1CCB637FC();
        sub_1CCA16C20(v42, (uint64_t)qword_1ED8AD7F8);
        v43 = v115;
        v44 = v97;
        (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v97, v39, v40);
        v45 = sub_1CCB637D8();
        v46 = sub_1CCB63D48();
        if (os_log_type_enabled(v45, v46))
        {
          v47 = (uint8_t *)swift_slowAlloc();
          v110 = swift_slowAlloc();
          v120 = v110;
          *(_DWORD *)v47 = 136315138;
          v108 = v35;
          v48 = sub_1CCB64240();
          v118 = sub_1CCA0CB60(v48, v49, &v120);
          v35 = v108;
          sub_1CCB63E44();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v40);
          _os_log_impl(&dword_1CC9BF000, v45, v46, "FMImageCache: Cached data for request: %s not found, regenerating.", v47, 0xCu);
          v50 = v110;
          swift_arrayDestroy();
          MEMORY[0x1D17B214C](v50, -1, -1);
          v51 = v47;
          v39 = v117;
          MEMORY[0x1D17B214C](v51, -1, -1);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v40);
        }

        v28 = v109;
        sub_1CCAC1C48(v39, (uint64_t)v113, v111);
      }
      return (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))v28 + 7))(v114, 1, 1, v35);
    }
    else
    {
      v69 = (char *)*((_QWORD *)v28 + 4);
      v70 = v102;
      v108 = v35;
      v112 = v69;
      ((void (*)(char *, char *, uint64_t))v69)(v102, v24, v35);
      v71 = v116;
      if (qword_1ED8AA630 != -1)
        swift_once();
      v72 = sub_1CCB637FC();
      sub_1CCA16C20(v72, (uint64_t)qword_1ED8AD7F8);
      v73 = v115;
      v74 = *(void (**)(char *, uint64_t, uint64_t))(v115 + 16);
      v75 = v98;
      v74(v98, v39, v71);
      v76 = sub_1CCB637D8();
      v77 = sub_1CCB63D18();
      if (os_log_type_enabled(v76, v77))
      {
        v78 = (uint8_t *)swift_slowAlloc();
        v79 = swift_slowAlloc();
        v109 = v28;
        v80 = v79;
        v119[0] = v79;
        *(_DWORD *)v78 = 136315138;
        v81 = sub_1CCB64240();
        v120 = sub_1CCA0CB60(v81, v82, v119);
        v70 = v102;
        v71 = v116;
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v115 + 8))(v75, v71);
        _os_log_impl(&dword_1CC9BF000, v76, v77, "FMImageCache: Found cached data for request: %s in disk cache.", v78, 0xCu);
        swift_arrayDestroy();
        v83 = v80;
        v28 = v109;
        MEMORY[0x1D17B214C](v83, -1, -1);
        MEMORY[0x1D17B214C](v78, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v71);
      }

      v74(v101, v117, v71);
      v89 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v28 + 2);
      v90 = v100;
      v91 = v108;
      v89(v100, v70, v108);
      v92 = (void (*)(char *, _QWORD, uint64_t, uint64_t))*((_QWORD *)v28 + 7);
      v92(v90, 0, 1, v91);
      swift_beginAccess();
      sub_1CCB63910();
      sub_1CCB63928();
      swift_endAccess();
      v93 = v113;
      if (v113)
      {
        v94 = v104;
        v89(v104, v70, v91);
        v95 = v106;
        swift_storeEnumTagMultiPayload();
        v93(v94);
        (*(void (**)(char *, uint64_t))(v105 + 8))(v94, v95);
      }
      v96 = v114;
      ((void (*)(uint64_t, char *, uint64_t))v112)(v114, v70, v91);
      return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v92)(v96, 0, 1, v91);
    }
  }
  else
  {
    v112 = (char *)*((_QWORD *)v28 + 4);
    ((void (*)(char *, char *, uint64_t))v112)(v32, v27, v7);
    v52 = v32;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v53 = sub_1CCB637FC();
    sub_1CCA16C20(v53, (uint64_t)qword_1ED8AD7F8);
    v55 = v115;
    v54 = v116;
    v56 = v109;
    (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v109, v34, v116);
    v57 = sub_1CCB637D8();
    v58 = sub_1CCB63D18();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = swift_slowAlloc();
      v117 = (uint64_t)v52;
      v60 = v54;
      v61 = v56;
      v62 = (uint8_t *)v59;
      v63 = swift_slowAlloc();
      v108 = v35;
      v64 = v63;
      v119[0] = v63;
      *(_DWORD *)v62 = 136315138;
      v110 = (uint64_t)(v62 + 4);
      v65 = sub_1CCB64240();
      v120 = sub_1CCA0CB60(v65, v66, v119);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      v67 = v60;
      v52 = (char *)v117;
      (*(void (**)(char *, uint64_t))(v115 + 8))(v61, v67);
      _os_log_impl(&dword_1CC9BF000, v57, v58, "FMImageCache: Found cached data for request: %s in memory cache.", v62, 0xCu);
      swift_arrayDestroy();
      v68 = v64;
      v35 = v108;
      MEMORY[0x1D17B214C](v68, -1, -1);
      MEMORY[0x1D17B214C](v62, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v54);
    }

    v84 = v113;
    if (v113)
    {
      v85 = v104;
      (*((void (**)(char *, char *, uint64_t))v28 + 2))(v104, v52, v35);
      v86 = v106;
      swift_storeEnumTagMultiPayload();
      v84(v85);
      (*(void (**)(char *, uint64_t))(v105 + 8))(v85, v86);
    }
    v87 = v114;
    ((void (*)(uint64_t, char *, uint64_t))v112)(v114, v52, v35);
    return (*((uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))v28 + 7))(v87, 0, 1, v35);
  }
}

void sub_1CCAC2E7C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t);
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  id v24;
  void *v25;
  unsigned int v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  id v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  id v46[9];

  v46[7] = *(id *)MEMORY[0x1E0C80C00];
  v2 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCB63490();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v40 - v10;
  swift_getAssociatedConformanceWitness();
  v12 = sub_1CCB638BC();
  swift_beginAccess();
  a1[4] = v12;
  swift_bridgeObjectRelease();
  swift_getTupleTypeMetadata2();
  sub_1CCB63B80();
  v13 = sub_1CCB63904();
  swift_beginAccess();
  a1[6] = v13;
  swift_bridgeObjectRelease();
  v43 = (id)objc_opt_self();
  v14 = objc_msgSend(v43, sel_defaultManager);
  (*(void (**)(void))(*a1 + 160))();
  v15 = (void *)sub_1CCB6343C();
  v44 = *(void (**)(char *, uint64_t))(v6 + 8);
  v44(v11, v5);
  v46[0] = 0;
  v16 = objc_msgSend(v14, sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_, v15, 0, 5, v46);

  v17 = v46[0];
  if (!v16)
  {
    v28 = v17;
    v29 = (void *)sub_1CCB63400();

    swift_willThrow();
LABEL_13:
    if (qword_1ED8AA630 != -1)
      swift_once();
    v31 = sub_1CCB637FC();
    sub_1CCA16C20(v31, (uint64_t)qword_1ED8AD7F8);
    v32 = v29;
    v33 = v29;
    v34 = sub_1CCB637D8();
    v35 = sub_1CCB63D48();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      v37 = (void *)swift_slowAlloc();
      v46[0] = v37;
      *(_DWORD *)v36 = 136315138;
      swift_getErrorValue();
      v38 = sub_1CCB64300();
      v45 = sub_1CCA0CB60(v38, v39, (uint64_t *)v46);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v34, v35, "FMImageCache: Error deleting file : %s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v37, -1, -1);
      MEMORY[0x1D17B214C](v36, -1, -1);

    }
    else
    {

    }
    return;
  }
  v18 = sub_1CCB63B38();

  v19 = *(_QWORD *)(v18 + 16);
  if (v19)
  {
    v20 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v40 = v18;
    v21 = v18 + v20;
    v22 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    v41 = *(_QWORD *)(v6 + 72);
    v42 = v22;
    while (1)
    {
      v42(v4, v21, v5);
      v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v23(v4, 0, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      {
        swift_bridgeObjectRelease();
        return;
      }
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
      v24 = objc_msgSend(v43, sel_defaultManager, v40);
      v25 = (void *)sub_1CCB6343C();
      v46[0] = 0;
      v26 = objc_msgSend(v24, sel_removeItemAtURL_error_, v25, v46);

      if (!v26)
        break;
      v27 = v46[0];
      v44(v9, v5);
      v21 += v41;
      if (!--v19)
        goto LABEL_10;
    }
    v30 = v46[0];
    swift_bridgeObjectRelease();
    v29 = (void *)sub_1CCB63400();

    swift_willThrow();
    v44(v9, v5);
    goto LABEL_13;
  }
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
LABEL_10:
  v23(v4, 1, 1, v5);
  swift_bridgeObjectRelease();
}

uint64_t sub_1CCAC33F8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD v25[4];
  uint64_t v26;

  v20 = a3;
  v21 = a4;
  v6 = (_QWORD *)*a1;
  v7 = *(_QWORD *)(*a1 + 80);
  v22 = *(_QWORD *)(v7 - 8);
  v23 = MEMORY[0x1E0C80A78](a1 + 5);
  v24 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v9 = a1[5];
  v10 = v6[12];
  swift_bridgeObjectRetain();
  sub_1CCA19B38(&qword_1EF9DF470);
  sub_1CCB6439C();
  swift_getFunctionTypeMetadata1();
  v11 = sub_1CCB63BD4();
  v12 = v6[13];
  v13 = v6[11];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x1D17B0E8C](v25, a2, v9, v7, v11, *(_QWORD *)(AssociatedConformanceWitness + 16));
  swift_bridgeObjectRelease();
  v15 = v25[0];
  if (!v25[0])
    v15 = sub_1CCB63B80();
  v26 = v15;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v7;
  v16[3] = v13;
  v16[4] = v10;
  v16[5] = v12;
  v17 = v21;
  v16[6] = v20;
  v16[7] = v17;
  v25[0] = sub_1CCAC44C4;
  v25[1] = v16;
  swift_retain();
  sub_1CCB63BBC();
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, a2, v7);
  v25[3] = v26;
  swift_beginAccess();
  sub_1CCB63910();
  sub_1CCB63928();
  return swift_endAccess();
}

uint64_t sub_1CCAC3610(void (**a1)(char *), _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  void (*v21)(char *);

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v10 = (char *)&v20 - v9;
  sub_1CCA19B38(&qword_1EF9DF470);
  v11 = sub_1CCB6439C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v20 - v13;
  v21 = *a1;
  v15 = *(int *)(TupleTypeMetadata2 + 48);
  v16 = &v10[v15];
  v17 = (char *)a2 + v15;
  *(_OWORD *)v10 = *a2;
  v18 = *(_QWORD *)(a5 - 8);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(&v10[v15], v17, a5);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v14, v16, a5);
  swift_storeEnumTagMultiPayload();
  v21(v14);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1CCAC3770(void (**a1)(char *), void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *);
  id v9;
  uint64_t v11;

  sub_1CCA19B38(&qword_1EF9DF470);
  v4 = sub_1CCB6439C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v11 - v6;
  v8 = *a1;
  *(uint64_t *)((char *)&v11 - v6) = (uint64_t)a2;
  swift_storeEnumTagMultiPayload();
  v9 = a2;
  v8(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1CCAC3840(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(void);
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  unsigned int v26;
  id v27;
  id v28;
  char *v29;
  void *v30;
  id v31;
  uint64_t inited;
  void **v33;
  void *v34;
  void *v35;
  uint64_t v36;
  id v37;
  id v38;
  void *v39;
  void *v40;
  unsigned int v41;
  id v42;
  void *v44;
  void *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint8_t *v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t (*v58)(char *, uint64_t);
  id v59;
  uint64_t v60;
  id v61;
  id v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  char *v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char v83;
  id v84[3];

  v77 = a4;
  v76 = a3;
  v84[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = *a1;
  v81 = sub_1CCB63490();
  v6 = *(_QWORD *)(v81 - 8);
  v7 = MEMORY[0x1E0C80A78](v81);
  v74 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v72 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v72 - v13;
  v15 = *(void (**)(void))(v5 + 160);
  ((void (*)(uint64_t))v15)(v12);
  v16 = *(_QWORD *)(v5 + 80);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v16, AssociatedConformanceWitness);
  v79 = v14;
  sub_1CCB63454();
  swift_bridgeObjectRelease();
  v73 = v6;
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19 = v81;
  v18(v11, v81);
  v83 = 0;
  v20 = (void *)objc_opt_self();
  v21 = objc_msgSend(v20, sel_defaultManager);
  v75 = a1;
  v22 = v20;
  v15();
  sub_1CCB63478();
  v80 = v18;
  v18(v11, v19);
  v23 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  LOBYTE(v14) = objc_msgSend(v21, sel_fileExistsAtPath_isDirectory_, v23, &v83);

  if ((v14 & 1) != 0)
    goto LABEL_3;
  v24 = objc_msgSend(v20, sel_defaultManager);
  v15();
  v25 = (void *)sub_1CCB6343C();
  v80(v11, v81);
  v84[0] = 0;
  v26 = objc_msgSend(v24, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v25, 1, 0, v84);

  v27 = v84[0];
  if (v26)
  {
LABEL_3:
    v28 = v78;
    v29 = v79;
    sub_1CCB634D8();
    v30 = v28;
    if (!v28)
    {
      v31 = objc_msgSend(v22, sel_defaultManager);
      sub_1CCA14E90(qword_1ED8A7FB8);
      inited = swift_initStackObject();
      v33 = (void **)MEMORY[0x1E0CB2AD8];
      *(_OWORD *)(inited + 16) = xmmword_1CCB677E0;
      v34 = *v33;
      *(_QWORD *)(inited + 32) = *v33;
      v35 = (void *)*MEMORY[0x1E0CB2AC0];
      type metadata accessor for FileProtectionType(0);
      *(_QWORD *)(inited + 64) = v36;
      *(_QWORD *)(inited + 40) = v35;
      v37 = v34;
      v38 = v35;
      sub_1CCAC52B4(inited);
      type metadata accessor for FileAttributeKey(0);
      sub_1CC9CAA38((unint64_t *)&unk_1ED8A7EF0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1CCB66964);
      v39 = (void *)sub_1CCB638C8();
      swift_bridgeObjectRelease();
      sub_1CCB63478();
      v40 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      v84[0] = 0;
      v41 = objc_msgSend(v31, sel_setAttributes_ofItemAtPath_error_, v39, v40, v84);

      if (v41)
      {
        v42 = v84[0];
        return ((uint64_t (*)(char *, uint64_t))v80)(v29, v81);
      }
      v59 = v84[0];
      v30 = (void *)sub_1CCB63400();

      swift_willThrow();
    }
    if (qword_1ED8AA630 != -1)
      swift_once();
    v60 = sub_1CCB637FC();
    sub_1CCA16C20(v60, (uint64_t)qword_1ED8AD7F8);
    v61 = v30;
    v62 = v30;
    v63 = sub_1CCB637D8();
    v64 = sub_1CCB63D30();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc();
      v66 = (void *)swift_slowAlloc();
      v84[0] = v66;
      *(_DWORD *)v65 = 136315138;
      swift_getErrorValue();
      v67 = sub_1CCB64300();
      v82 = sub_1CCA0CB60(v67, v68, (uint64_t *)v84);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v63, v64, "FMImageCache: Could not save objects to disk %s", v65, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v66, -1, -1);
      MEMORY[0x1D17B214C](v65, -1, -1);

      v69 = v79;
    }
    else
    {

      v69 = v29;
    }
    return ((uint64_t (*)(char *, uint64_t))v80)(v69, v81);
  }
  else
  {
    v44 = v27;
    v45 = (void *)sub_1CCB63400();

    swift_willThrow();
    if (qword_1ED8AA630 != -1)
      swift_once();
    v46 = sub_1CCB637FC();
    sub_1CCA16C20(v46, (uint64_t)qword_1ED8AD7F8);
    v47 = v74;
    v48 = v79;
    v49 = v81;
    (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v74, v79, v81);
    v50 = sub_1CCB637D8();
    v51 = sub_1CCB63D48();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = swift_slowAlloc();
      v78 = v45;
      v53 = (uint8_t *)v52;
      v54 = (void *)swift_slowAlloc();
      v84[0] = v54;
      *(_DWORD *)v53 = 136315138;
      sub_1CC9CAA38(&qword_1EF9E3078, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
      v55 = sub_1CCB64240();
      v82 = sub_1CCA0CB60(v55, v56, (uint64_t *)v84);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      v57 = v47;
      v58 = (uint64_t (*)(char *, uint64_t))v80;
      v80(v57, v49);
      _os_log_impl(&dword_1CC9BF000, v50, v51, "FMImageCache: Could not create directory for content: %s", v53, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v54, -1, -1);
      MEMORY[0x1D17B214C](v53, -1, -1);

      return v58(v79, v49);
    }
    else
    {

      v70 = v47;
      v71 = (uint64_t (*)(char *, uint64_t))v80;
      v80(v70, v49);
      return v71(v48, v49);
    }
  }
}

uint64_t FMImageCache.__deallocating_deinit()
{
  FMImageCache.deinit();
  return swift_deallocClassInstance();
}

void *sub_1CCAC4018(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)sub_1CCB640C0();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t sub_1CCAC40AC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1CCAC40D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1CCAC2424(*(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

void sub_1CCAC40F0()
{
  _QWORD *v0;

  sub_1CCAC2E7C(v0);
}

uint64_t sub_1CCAC40F8()
{
  return swift_deallocObject();
}

unint64_t sub_1CCAC410C()
{
  unint64_t result;

  result = qword_1EF9E2FF0[0];
  if (!qword_1EF9E2FF0[0])
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMImageCacheError, &type metadata for FMImageCacheError);
    atomic_store(result, qword_1EF9E2FF0);
  }
  return result;
}

uint64_t dispatch thunk of FMImageCacheRequest.fileName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of FMImageCacheOperation.init(request:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t storeEnumTagSinglePayload for FMImageCacheError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCAC41AC + 4 * byte_1CCB6CAA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCAC41E0 + 4 * byte_1CCB6CAA0[v4]))();
}

uint64_t sub_1CCAC41E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAC41E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAC41F0);
  return result;
}

uint64_t sub_1CCAC41FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAC4204);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCAC4208(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAC4210(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMImageCacheError()
{
  return &type metadata for FMImageCacheError;
}

uint64_t method lookup function for FMImageCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMImageCache.cacheRoot.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of FMImageCache.__allocating_init(converter:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of FMImageCache.cachedImage(for:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of FMImageCache.purge()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of FMImageCache.forwardToDelegate(request:result:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t sub_1CCAC4270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCAC42FC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1CCAC33F8(*(_QWORD **)(v0 + 48), v0 + v2, *v3, v3[1]);
}

uint64_t sub_1CCAC4334()
{
  return swift_deallocObject();
}

uint64_t sub_1CCAC4344()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1CCAC4368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1CCAC43D4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  swift_release();
  sub_1CCA182F0(*(id *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_BYTE *)(v0 + v3 + 16));
  return swift_deallocObject();
}

uint64_t sub_1CCAC4460(void (**a1)(char *))
{
  uint64_t v1;

  return sub_1CCAC3770(a1, *(void **)(v1 + 48));
}

uint64_t sub_1CCAC4480(void (**a1)(char *))
{
  uint64_t v1;

  return sub_1CCAC3610(a1, *(_OWORD **)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1CCAC44A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCAC44C4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t sub_1CCAC44E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for FMIPRepairRequest()
{
  uint64_t result;

  result = qword_1EF9E3080;
  if (!qword_1EF9E3080)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCAC45B4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1CCAC4600()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v1 = (uint64_t *)(*(_QWORD *)(v0 + qword_1EF9FF660) + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  v2 = *v1;
  v3 = v1[1];
  v5[3] = MEMORY[0x1E0DEA968];
  v5[0] = v2;
  v5[1] = v3;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)v5, 0x656369766564, 0xE600000000000000);
  return swift_endAccess();
}

uint64_t sub_1CCAC469C()
{
  return swift_release();
}

uint64_t sub_1CCAC46AC()
{
  sub_1CC9C785C();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCAC46EC()
{
  return type metadata accessor for FMIPRepairRequest();
}

char sub_1CCAC46F4@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = sub_1CCA14E90(&qword_1ED8A73F8);
  result = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 56);
  if (!v7)
    goto LABEL_5;
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = type metadata accessor for FMIPDevice();
    v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80);
    sub_1CCAC4A3C(v7 + *(int *)(v9 + 124) + ((v10 + 32) & ~v10), (uint64_t)v6);
    v11 = type metadata accessor for FMIPEraseMetadata();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v6, 1, v11) == 1)
    {
      result = sub_1CCAC4A84((uint64_t)v6);
LABEL_5:
      LOBYTE(v8) = 0;
      goto LABEL_8;
    }
    v12 = *v6;
    sub_1CCA401B0((uint64_t)v6);
    result = FMIPActionStatus.init(rawValue:)(qword_1CCB6CC88[v12]).value;
    LOBYTE(v8) = v14;
    if (v14 == 18)
      LOBYTE(v8) = 0;
  }
LABEL_8:
  *a1 = v8;
  return result;
}

uint64_t sub_1CCAC47FC(uint64_t a1)
{
  swift_allocObject();
  return sub_1CCAC4844(a1);
}

uint64_t sub_1CCAC4844(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13[7];

  sub_1CC9EBC94(a1, (uint64_t)v13);
  v3 = sub_1CCA5B658(v13);
  if (!v1)
  {
    v4 = qword_1ED8AA630;
    swift_retain();
    if (v4 != -1)
      swift_once();
    v5 = sub_1CCB637FC();
    sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
    swift_retain();
    v6 = sub_1CCB637D8();
    v7 = sub_1CCB63D48();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      *(_DWORD *)v8 = 136315138;
      v13[0] = v9;
      v10 = sub_1CCA5B9C4();
      v13[6] = sub_1CCA0CB60(v10, v11, v13);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v6, v7, "FMIPEraseResponse: initialized with coder %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v9, -1, -1);
      MEMORY[0x1D17B214C](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }

  }
  sub_1CCA01CA0(a1);
  return v3;
}

uint64_t type metadata accessor for FMIPEraseResponse()
{
  return objc_opt_self();
}

uint64_t sub_1CCAC4A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A73F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCAC4A84(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CCA14E90(&qword_1ED8A73F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1CCAC4AC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = sub_1CCA14E90(&qword_1EF9E3418);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1CCA14E90(&qword_1EF9E3420);
  v6 = sub_1CCB640B4();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1CC9EAB74(v12, (uint64_t)v5, &qword_1EF9E3418);
    result = sub_1CCAC8D64((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_1CCB63604();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CCAC4C58(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1CCA14E90(&qword_1EF9DF5A0);
  v2 = (_QWORD *)sub_1CCB640B4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_1CCA074F4(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CCAC4D70(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  id v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1CCA14E90(&qword_1EF9E3478);
  v2 = (_QWORD *)sub_1CCB640B4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 40);
  while (1)
  {
    v11 = *v4;
    v5 = *((id *)v4 - 1);
    result = sub_1CCAC8DD0((uint64_t)v5);
    if ((v7 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v5;
    *(_OWORD *)(v2[7] + 16 * result) = v11;
    v8 = v2[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      goto LABEL_11;
    v2[2] = v10;
    v4 = (_OWORD *)((char *)v4 + 24);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CCAC4E7C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1CCA14E90(&qword_1EF9E3480);
  v2 = (_QWORD *)sub_1CCB640B4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    result = sub_1CCAC8DD0((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CCAC4F78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = sub_1CCA14E90(&qword_1EF9E33F8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1CCA14E90(&qword_1EF9E3400);
  v6 = sub_1CCB640B4();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1CC9EAB74(v12, (uint64_t)v5, &qword_1EF9E33F8);
    result = sub_1CCAC8D64((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_1CCB63604();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CCAC510C(uint64_t a1)
{
  return sub_1CCAC56B4(a1, &qword_1EF9E33E8, &qword_1EF9E33F0);
}

unint64_t sub_1CCAC5120(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = sub_1CCA14E90(&qword_1EF9E33D8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1CCA14E90(&qword_1EF9E33E0);
  v6 = sub_1CCB640B4();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1CC9EAB74(v12, (uint64_t)v5, &qword_1EF9E33D8);
    result = sub_1CCAC8D64((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_1CCB63604();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_BYTE *)(v7[7] + v16) = v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CCAC52B4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1CCA14E90(&qword_1ED8A70F8);
  v2 = sub_1CCB640B4();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1CC9EAB74(v6, (uint64_t)&v13, (uint64_t *)&unk_1ED8A7F18);
    v7 = v13;
    result = sub_1CCAC8DD0(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_1CCA0799C(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CCAC53E0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1CCA14E90(&qword_1EF9E3448);
  v2 = (_QWORD *)sub_1CCB640B4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = *(v4 - 1);
    v7 = v5;
    result = sub_1CCAC8ED8((uint64_t)v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v6;
    *(_QWORD *)(v2[7] + v10) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CCAC54E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  v2 = sub_1CCA14E90(&qword_1EF9E3498);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1CCA14E90(&qword_1EF9E34A0);
  v6 = sub_1CCB640B4();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1CC9EAB74(v12, (uint64_t)v5, &qword_1EF9E3498);
    result = sub_1CCAC8D64((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_1CCB63604();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    v19 = v7[7];
    v20 = type metadata accessor for FMIPDeviceLostModeMetadata();
    result = sub_1CC9FED60(v9, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v16, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
    v21 = v7[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CCAC56A0(uint64_t a1)
{
  return sub_1CCAC56B4(a1, &qword_1EF9E3488, &qword_1EF9E3490);
}

unint64_t sub_1CCAC56B4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v6 = sub_1CCA14E90(a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1CCA14E90(a3);
  v10 = sub_1CCB640B4();
  v11 = (_QWORD *)v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  v13 = *(int *)(v6 + 48);
  v14 = v10 + 64;
  v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26[1] = a1;
  v16 = a1 + v15;
  v17 = *(_QWORD *)(v7 + 72);
  swift_retain();
  while (1)
  {
    sub_1CC9EAB74(v16, (uint64_t)v9, a2);
    result = sub_1CCAC8D64((uint64_t)v9);
    if ((v19 & 1) != 0)
      break;
    v20 = result;
    *(_QWORD *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v21 = v11[6];
    v22 = sub_1CCB63604();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v20, v9, v22);
    *(_BYTE *)(v11[7] + v20) = v9[v13];
    v23 = v11[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v11[2] = v25;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CCAC5840(uint64_t a1)
{
  return sub_1CC9C6088(a1, &qword_1EF9E3398, &qword_1EF9E33A0);
}

uint64_t FMIPUnknownItem.init(unknownItem:locations:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  id v19;
  uint64_t result;
  uint64_t v21;

  v6 = (int *)type metadata accessor for FMIPUnknownItem();
  *(_BYTE *)(a3 + v6[15]) = *(_BYTE *)(a1 + v6[15]);
  *(_QWORD *)(a3 + v6[13]) = *(_QWORD *)(a1 + v6[13]);
  v7 = v6[6];
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  v10 = (_QWORD *)(a3 + v7);
  *v10 = v8;
  v10[1] = v9;
  v11 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a3, a1, v11);
  *(_BYTE *)(a3 + v6[16]) = *(_BYTE *)(a1 + v6[16]);
  *(_BYTE *)(a3 + v6[7]) = *(_BYTE *)(a1 + v6[7]);
  v21 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCACA4A4(&v21);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + v6[8]) = v21;
  sub_1CCA0BEEC(a1 + v6[9], a3 + v6[9], (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
  *(_BYTE *)(a3 + v6[10]) = *(_BYTE *)(a1 + v6[10]);
  *(_QWORD *)(a3 + v6[14]) = *(_QWORD *)(a1 + v6[14]);
  v12 = v6[12];
  v13 = *(void **)(a1 + v12);
  *(_QWORD *)(a3 + v12) = v13;
  sub_1CC9EAB74(a1 + v6[11], a3 + v6[11], &qword_1EF9E31D0);
  v14 = v6[5];
  v15 = *(_QWORD *)(a1 + v14);
  v16 = *(_QWORD *)(a1 + v14 + 8);
  v17 = (_QWORD *)(a3 + v14);
  *v17 = v15;
  v17[1] = v16;
  *(_BYTE *)(a3 + v6[17]) = *(_BYTE *)(a1 + v6[17]);
  v18 = *(_BYTE *)(a1 + v6[18]);
  v19 = v13;
  swift_bridgeObjectRetain();
  result = sub_1CCA0BF30(a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  *(_BYTE *)(a3 + v6[18]) = v18;
  return result;
}

uint64_t FMIPItemType.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

FMIPCore::FMIPItemType __swiftcall FMIPItemType.init(rawValue:)(FMIPCore::FMIPItemType rawValue)
{
  FMIPCore::FMIPItemType *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static FMIPItemType.none.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static FMIPItemType.selfBeaconing.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static FMIPItemType.durian.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static FMIPItemType.accessory.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1CCAC5A20()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

uint64_t sub_1CCAC5A64()
{
  return sub_1CCB64348();
}

uint64_t sub_1CCAC5A8C()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

FMIPCore::FMIPUnknownItemAlertState_optional __swiftcall FMIPUnknownItemAlertState.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 5;
  if ((unint64_t)rawValue < 5)
    v2 = rawValue;
  *v1 = v2;
  return (FMIPCore::FMIPUnknownItemAlertState_optional)rawValue;
}

uint64_t FMIPUnknownItemAlertState.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

FMIPCore::FMIPUnknownItemAlertState_optional sub_1CCAC5AE8(Swift::Int *a1)
{
  return FMIPUnknownItemAlertState.init(rawValue:)(*a1);
}

uint64_t sub_1CCAC5AF0()
{
  sub_1CCAD1A7C();
  return sub_1CCB63AFC();
}

uint64_t sub_1CCAC5B4C()
{
  sub_1CCAD1A7C();
  return sub_1CCB63AE4();
}

FMIPCore::FMIPUnknownItemObservationType_optional __swiftcall FMIPUnknownItemObservationType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (FMIPCore::FMIPUnknownItemObservationType_optional)rawValue;
}

uint64_t FMIPUnknownItemObservationType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_1CCAC5BBC()
{
  sub_1CCAD1A38();
  return sub_1CCB63AFC();
}

uint64_t sub_1CCAC5C18()
{
  sub_1CCAD1A38();
  return sub_1CCB63AE4();
}

uint64_t FMIPUnknownItem.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1CCB63604();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t FMIPUnknownItem.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPUnknownItem() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPUnknownItem.handle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPUnknownItem() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPUnknownItem.isIgnored.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FMIPUnknownItem() + 28));
}

uint64_t FMIPUnknownItem.locations.getter()
{
  type metadata accessor for FMIPUnknownItem();
  return swift_bridgeObjectRetain();
}

uint64_t FMIPUnknownItem.productType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMIPUnknownItem();
  return sub_1CCA0BEEC(v1 + *(int *)(v3 + 36), a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
}

uint64_t FMIPUnknownItem.observationType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FMIPUnknownItem();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t FMIPUnknownItem.utMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMIPUnknownItem();
  return sub_1CC9EAB74(v1 + *(int *)(v3 + 44), a1, &qword_1EF9E31D0);
}

void *FMIPUnknownItem.unknownBeacon.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for FMIPUnknownItem() + 48));
  v2 = v1;
  return v1;
}

uint64_t FMIPUnknownItem.capabilities.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FMIPUnknownItem();
  *a1 = *(_QWORD *)(v1 + *(int *)(result + 52));
  return result;
}

uint64_t FMIPUnknownItem.state.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FMIPUnknownItem();
  *a1 = *(_QWORD *)(v1 + *(int *)(result + 56));
  return result;
}

uint64_t FMIPUnknownItem.alertState.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FMIPUnknownItem();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 60));
  return result;
}

uint64_t FMIPUnknownItem.isAppleAudioAccessory.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FMIPUnknownItem() + 64));
}

uint64_t FMIPUnknownItem.isFindMyNetwork.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FMIPUnknownItem() + 68));
}

uint64_t FMIPUnknownItem.isPosh.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FMIPUnknownItem() + 72));
}

void *FMIPUnknownItem.isRequestable.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  unint64_t v6;
  void *v7;
  void *v9;
  id v10;
  unint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for FMIPUnknownItem();
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)(v0 + *(int *)(v2 + 48));
  if (v5)
  {
    v6 = (unint64_t)objc_msgSend(v5, sel_capabilities);
    sub_1CCA0BEEC(v0, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v7 = (void *)((v6 >> 13) & 1);
  }
  else
  {
    sub_1CCA0BEEC(v0, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v9 = *(void **)&v4[*(int *)(v1 + 48)];
    if (v9)
    {
      v10 = objc_msgSend(v9, sel_metadata);
      v7 = v10;
      if (v10)
      {
        v11 = (unint64_t)objc_msgSend(v10, sel_capabilities);

        v7 = (void *)((v11 >> 13) & 1);
      }
    }
    else
    {
      v7 = 0;
    }
  }
  sub_1CCA0BF30((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  return v7;
}

uint64_t sub_1CCAC6024(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCAC6060 + 4 * byte_1CCB6CD20[a1]))(0x6174537472656C61, 0xEA00000000006574);
}

uint64_t sub_1CCAC6060()
{
  return 0x696C696261706163;
}

uint64_t sub_1CCAC6080()
{
  return 0x656C646E6168;
}

uint64_t sub_1CCAC6094()
{
  return 0x696669746E656469;
}

unint64_t sub_1CCAC60B0()
{
  return 0xD000000000000015;
}

uint64_t sub_1CCAC60CC()
{
  return 0x65726F6E67497369;
}

uint64_t sub_1CCAC60E8()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1CCAC6108()
{
  return 1701667182;
}

uint64_t sub_1CCAC6118()
{
  return 0x54746375646F7270;
}

uint64_t sub_1CCAC6138()
{
  return 0x746176726573626FLL;
}

uint64_t sub_1CCAC615C()
{
  return 0x6574617473;
}

uint64_t sub_1CCAC6170()
{
  return 0x426E776F6E6B6E75;
}

uint64_t sub_1CCAC6194()
{
  return 0x61646174654D7475;
}

uint64_t sub_1CCAC61B0()
{
  return 0x794D646E69467369;
}

uint64_t sub_1CCAC61D4()
{
  return 0x68736F507369;
}

uint64_t sub_1CCAC61E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCAC6224 + 4 * byte_1CCB6CD2F[a1]))(0x6174537472656C61, 0xEA00000000006574);
}

uint64_t sub_1CCAC6224()
{
  return 0x696C696261706163;
}

uint64_t sub_1CCAC6244()
{
  return 0x656C646E6168;
}

uint64_t sub_1CCAC6258()
{
  return 0x696669746E656469;
}

unint64_t sub_1CCAC6274()
{
  return 0xD000000000000015;
}

uint64_t sub_1CCAC6290()
{
  return 0x65726F6E67497369;
}

uint64_t sub_1CCAC62AC()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1CCAC62CC()
{
  return 1701667182;
}

uint64_t sub_1CCAC62DC()
{
  return 0x54746375646F7270;
}

uint64_t sub_1CCAC62FC()
{
  return 0x746176726573626FLL;
}

uint64_t sub_1CCAC6320()
{
  return 0x6574617473;
}

uint64_t sub_1CCAC6334()
{
  return 0x426E776F6E6B6E75;
}

uint64_t sub_1CCAC6358()
{
  return 0x61646174654D7475;
}

uint64_t sub_1CCAC6374()
{
  return 0x794D646E69467369;
}

uint64_t sub_1CCAC6398()
{
  return 0x68736F507369;
}

uint64_t sub_1CCAC63AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1CCAC6024(*a1);
  v5 = v4;
  if (v3 == sub_1CCAC6024(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1CCAC6434()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCAC6024(v1);
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCAC6494()
{
  unsigned __int8 *v0;

  sub_1CCAC6024(*v0);
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCAC64D4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCAC6024(v1);
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCAC6530@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCAD178C();
  *a1 = result;
  return result;
}

uint64_t sub_1CCAC655C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1CCAC6024(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1CCAC6584()
{
  unsigned __int8 *v0;

  return sub_1CCAC61E8(*v0);
}

uint64_t sub_1CCAC658C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCAD178C();
  *a1 = result;
  return result;
}

void sub_1CCAC65B0(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_1CCAC65BC()
{
  sub_1CCACA3D8();
  return sub_1CCB643D8();
}

uint64_t sub_1CCAC65E4()
{
  sub_1CCACA3D8();
  return sub_1CCB643E4();
}

uint64_t FMIPUnknownItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  char v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  int v58;
  char v59;

  v48 = a2;
  v49 = type metadata accessor for FMIPUnknownItemUTMetadata();
  v47 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v50 = (uint64_t)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for FMIPProductType();
  MEMORY[0x1E0C80A78](v54);
  v51 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCB63604();
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1EF9E31D8);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for FMIPUnknownItem();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v55 = a1;
  sub_1CCA04DDC(a1, v15);
  sub_1CCACA3D8();
  v16 = v56;
  sub_1CCB643B4();
  if (!v16)
  {
    v46 = v14;
    v56 = v7;
    v17 = v9;
    v59 = 0;
    sub_1CCACA41C();
    sub_1CCB64180();
    v18 = v8;
    v19 = v57;
    v59 = 1;
    sub_1CCA716BC();
    sub_1CCB64180();
    v58 = v19;
    v20 = v57;
    LOBYTE(v57) = 2;
    v43 = sub_1CCB64150();
    v44 = v20;
    v45 = v22;
    LOBYTE(v57) = 3;
    sub_1CC9CAA38(&qword_1EF9E1CA8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    sub_1CCB64180();
    LOBYTE(v57) = 4;
    v42 = sub_1CCB6415C();
    LOBYTE(v57) = 5;
    v41 = sub_1CCB6415C();
    sub_1CCA14E90(&qword_1EF9E31F0);
    v59 = 6;
    sub_1CCACD358(&qword_1EF9E31F8, (uint64_t (*)(void))sub_1CCA162BC, MEMORY[0x1E0DEAF40]);
    sub_1CCB64180();
    v23 = v57;
    LOBYTE(v57) = 7;
    v40 = v18;
    v37 = sub_1CCB64150();
    v38 = v24;
    v39 = v23;
    LOBYTE(v57) = 8;
    sub_1CC9CAA38(&qword_1EF9E3200, (uint64_t (*)(uint64_t))type metadata accessor for FMIPProductType, (uint64_t)&protocol conformance descriptor for FMIPProductType);
    sub_1CCB64180();
    v59 = 9;
    sub_1CCACA460();
    v25 = v11;
    sub_1CCB64180();
    LODWORD(v54) = v57;
    LOBYTE(v57) = 12;
    sub_1CC9CAA38(&qword_1EF9E3210, (uint64_t (*)(uint64_t))type metadata accessor for FMIPUnknownItemUTMetadata, (uint64_t)&protocol conformance descriptor for FMIPUnknownItemUTMetadata);
    sub_1CCB64180();
    LOBYTE(v57) = 13;
    v26 = sub_1CCB6415C();
    LOBYTE(v57) = 14;
    v27 = sub_1CCB6415C();
    v28 = v46;
    v46[v12[15]] = v58;
    *(_QWORD *)&v28[v12[13]] = v44;
    v29 = (uint64_t *)&v28[v12[6]];
    v30 = v45;
    *v29 = v43;
    v29[1] = v30;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v28, v56, v53);
    v28[v12[16]] = v42 & 1;
    v28[v12[7]] = v41 & 1;
    v57 = v39;
    swift_bridgeObjectRetain();
    sub_1CCACA4A4(&v57);
    swift_bridgeObjectRelease();
    v31 = (uint64_t)v46;
    *(_QWORD *)&v46[v12[8]] = v57;
    v32 = (uint64_t *)(v31 + v12[5]);
    v33 = v38;
    *v32 = v37;
    v32[1] = v33;
    v34 = v51;
    sub_1CCA0BEEC(v51, v31 + v12[9], (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
    *(_BYTE *)(v31 + v12[10]) = v54;
    sub_1CCA0BF30(v34, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v56, v53);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v25, v40);
    *(_QWORD *)(v31 + v12[14]) = 0;
    *(_QWORD *)(v31 + v12[12]) = 0;
    v35 = v31 + v12[11];
    sub_1CC9FED60(v50, v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v35, 0, 1, v49);
    *(_BYTE *)(v31 + v12[17]) = v26 & 1;
    *(_BYTE *)(v31 + v12[18]) = v27 & 1;
    sub_1CC9FED60(v31, v48, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  }
  return sub_1CCA01CA0((uint64_t)v55);
}

void FMIPUnknownItem.init(with:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t inited;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  id v23;
  id v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *i;
  unint64_t v29;
  unint64_t v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  id v36;
  id v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  id v66;
  id v67;
  char v68;
  id v69;
  char v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  id v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  id v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  id v94;
  id v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  id v99;
  uint64_t v100;
  unint64_t v101;
  id v102;
  id v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  id v107;
  uint64_t v108;
  unint64_t v109;
  id v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  id v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  os_log_type_t v122;
  uint64_t v123[3];

  sub_1CCA14E90(&qword_1EF9E1E50);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CCB6D4E0;
  v5 = (void *)*MEMORY[0x1E0D89A30];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0D89A30];
  *(_QWORD *)(inited + 40) = 4;
  v6 = (void *)*MEMORY[0x1E0D89A00];
  *(_QWORD *)(inited + 48) = *MEMORY[0x1E0D89A00];
  *(_QWORD *)(inited + 56) = 256;
  v7 = (void *)*MEMORY[0x1E0D89A10];
  *(_QWORD *)(inited + 64) = *MEMORY[0x1E0D89A10];
  *(_QWORD *)(inited + 72) = 64;
  v8 = v5;
  v9 = v6;
  v10 = v7;
  v11 = sub_1CCAC4E7C(inited);
  sub_1CCACCD58(v11, (void (*)(_QWORD *__return_ptr))sub_1CCA7C784);
  v115 = v12;
  swift_bridgeObjectRelease();
  sub_1CCA14E90(&qword_1EF9E1E48);
  v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1CCB677E0;
  *(_QWORD *)(v13 + 32) = v8;
  *(_OWORD *)(v13 + 40) = xmmword_1CCB6AE90;
  v14 = v8;
  v15 = sub_1CCAC4D70(v13);
  sub_1CCACD0A4(v15, (void (*)(_QWORD *__return_ptr))sub_1CCA7C78C);
  v17 = v16;
  swift_bridgeObjectRelease();
  v123[0] = (uint64_t)qword_1E88EBDF8;
  sub_1CCAC890C(v17);
  v117 = qword_1E88EBDF8;
  v18 = v14;
  v118 = a1;
  v19 = objc_msgSend(a1, sel_taskInformation);
  type metadata accessor for SPBeaconTaskName(0);
  sub_1CC9C30A8(0, &qword_1EF9E1E58);
  sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D8, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_1CCB65E60);
  v20 = sub_1CCB638E0();

  if (*(_QWORD *)(v20 + 16) && (v21 = sub_1CCAC8DD0((uint64_t)v18), (v22 & 1) != 0))
  {
    v23 = *(id *)(*(_QWORD *)(v20 + 56) + 8 * v21);

    swift_bridgeObjectRelease();
    v24 = objc_msgSend(v23, sel_state);

    if (v24 == (id)4)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v25 = qword_1E88EBDF8;
      else
        v25 = sub_1CCAC9BC0(0, 2, 1, qword_1E88EBDF8, &qword_1EF9E3470);
      v27 = v25[2];
      v26 = v25[3];
      if (v27 >= v26 >> 1)
        v25 = sub_1CCAC9BC0((_QWORD *)(v26 > 1), v27 + 1, 1, v25, &qword_1EF9E3470);
      v25[2] = v27 + 1;
      v117 = v25;
      v25[v27 + 4] = 2048;
    }
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  if (!objc_msgSend(a1, sel_connected))
    goto LABEL_16;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_75;
  for (i = v117; ; i = sub_1CCAC9BC0(0, v117[2] + 1, 1, v117, &qword_1EF9E3470))
  {
    v30 = i[2];
    v29 = i[3];
    if (v30 >= v29 >> 1)
      i = sub_1CCAC9BC0((_QWORD *)(v29 > 1), v30 + 1, 1, i, &qword_1EF9E3470);
    i[2] = v30 + 1;
    v117 = i;
    i[v30 + 4] = 64;
LABEL_16:
    v31 = objc_msgSend(a1, sel_beaconLocations);
    sub_1CC9C30A8(0, &qword_1EF9E3218);
    v32 = sub_1CCB63B38();

    if (v32 >> 62)
    {
      swift_bridgeObjectRetain();
      v33 = sub_1CCB64090();
      swift_bridgeObjectRelease();
    }
    else
    {
      v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v114 = v18;
    v116 = a2;
    if (!v33)
    {
      v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      goto LABEL_31;
    }
    if (v33 >= 1)
      break;
    __break(1u);
LABEL_75:
    ;
  }
  v34 = 0;
  v119 = v32 & 0xC000000000000001;
  v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v120 = v33;
  v121 = v32;
  do
  {
    if (v119)
      v36 = (id)MEMORY[0x1D17B154C](v34, v32);
    else
      v36 = *(id *)(v32 + 8 * v34 + 32);
    v37 = v36;
    FMIPLocation.init(beaconLocation:)(v37, (uint64_t)v123);
    v38 = v123[0];
    v39 = BYTE1(v123[0]);
    v40 = BYTE2(v123[0]);
    v41 = BYTE3(v123[0]);
    v42 = v123[1];
    v43 = v123[2];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v35 = sub_1CCAC9858(0, v35[2] + 1, 1, v35);
    v45 = v35[2];
    v44 = v35[3];
    if (v45 >= v44 >> 1)
      v35 = sub_1CCAC9858((_QWORD *)(v44 > 1), v45 + 1, 1, v35);
    v35[2] = v45 + 1;
    v46 = &v35[3 * v45];
    *((_BYTE *)v46 + 32) = v38;
    ++v34;
    *((_BYTE *)v46 + 33) = v39;
    *((_BYTE *)v46 + 34) = v40;
    *((_BYTE *)v46 + 35) = v41;
    v46[5] = v42;
    v46[6] = v43;

    v32 = v121;
  }
  while (v120 != v34);
LABEL_31:
  swift_bridgeObjectRelease();
  v47 = objc_msgSend(v118, sel_name);
  v48 = sub_1CCB63988();
  v50 = v49;

  v51 = (int *)type metadata accessor for FMIPUnknownItem();
  v52 = (uint64_t *)(v116 + v51[5]);
  *v52 = v48;
  v52[1] = v50;
  v53 = *(_QWORD *)(v115 + 16);
  if (v53)
  {
    v54 = 0;
    v55 = (uint64_t *)(v115 + 32);
    do
    {
      v57 = *v55++;
      v56 = v57;
      if ((v57 & ~v54) == 0)
        v56 = 0;
      v54 |= v56;
      --v53;
    }
    while (v53);
  }
  else
  {
    v54 = 0;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v116 + v51[13]) = v54;
  v58 = objc_msgSend(v118, sel_identifier);
  sub_1CCB635EC();

  *(_BYTE *)(v116 + v51[16]) = objc_msgSend(v118, sel_isAppleAudioAccessory);
  v123[0] = (uint64_t)v35;
  swift_bridgeObjectRetain_n();
  sub_1CCACA4A4(v123);
  swift_bridgeObjectRelease_n();
  *(_QWORD *)(v116 + v51[8]) = v123[0];
  v59 = objc_msgSend(v118, sel_handle);
  v60 = v59;
  if (v59)
  {
    v61 = objc_msgSend(v59, sel_destination);

    v60 = (void *)sub_1CCB63988();
    v63 = v62;

  }
  else
  {
    v63 = 0;
  }
  v64 = (_QWORD *)(v116 + v51[6]);
  *v64 = v60;
  v64[1] = v63;
  *(_BYTE *)(v116 + v51[7]) = objc_msgSend(v118, sel_isIgnored);
  v65 = v116 + v51[9];
  v66 = v118;
  sub_1CCA35EB0(v66, v65);
  v67 = objc_msgSend(v66, sel_observationType);
  if (v67)
  {
    if (v67 != (id)1)
    {
      sub_1CCB64084();
      __break(1u);
      return;
    }
    v68 = 1;
  }
  else
  {
    v68 = 0;
  }
  *(_BYTE *)(v116 + v51[10]) = v68;
  v69 = objc_msgSend(v66, sel_alertState);
  if ((unint64_t)v69 >= 5)
    v70 = 4;
  else
    v70 = (char)v69;
  *(_BYTE *)(v116 + v51[15]) = v70;
  *(_BYTE *)(v116 + v51[17]) = objc_msgSend(v66, sel_isFindMyNetwork);
  *(_BYTE *)(v116 + v51[18]) = objc_msgSend(v66, sel_isPosh);
  v71 = objc_msgSend(v66, sel_productInformation);
  v72 = v51[11];
  v73 = v116 + v72;
  if (v71)
  {
    FMIPUnknownItemUTMetadata.init(productInfo:)(v71, (uint64_t *)(v116 + v72));
    v74 = type metadata accessor for FMIPUnknownItemUTMetadata();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v73, 0, 1, v74);
  }
  else
  {
    v75 = type metadata accessor for FMIPUnknownItemUTMetadata();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v73, 1, 1, v75);
  }
  *(_QWORD *)(v116 + v51[12]) = v66;
  v76 = v117[2];
  if (v76)
  {
    v77 = 0;
    v78 = v117 + 4;
    do
    {
      v80 = *v78++;
      v79 = v80;
      if ((v80 & ~v77) == 0)
        v79 = 0;
      v77 |= v79;
      --v76;
    }
    while (v76);
  }
  else
  {
    v77 = 0;
  }
  v81 = v66;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v116 + v51[14]) = v77;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v82 = sub_1CCB637FC();
  sub_1CCA16C20(v82, (uint64_t)qword_1ED8AD7F8);
  v83 = v81;
  v84 = sub_1CCB637D8();
  v85 = sub_1CCB63D48();
  if (os_log_type_enabled(v84, v85))
  {
    v86 = swift_slowAlloc();
    v87 = swift_slowAlloc();
    v123[0] = v87;
    *(_DWORD *)v86 = 136316162;
    v88 = objc_msgSend(v83, sel_productInformation);
    if (v88)
    {
      v89 = v88;
      v90 = objc_msgSend(v88, sel_modelName);

      v91 = sub_1CCB63988();
      v93 = v92;

    }
    else
    {
      v93 = 0xE300000000000000;
      v91 = 7104878;
    }
    sub_1CCA0CB60(v91, v93, v123);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    *(_WORD *)(v86 + 12) = 1024;
    objc_msgSend(v83, sel_isFindMyNetwork);

    sub_1CCB63E44();
    *(_WORD *)(v86 + 18) = 2080;
    v94 = v114;
    v95 = objc_msgSend(v83, sel_taskInformation);
    v96 = sub_1CCB638E0();

    v122 = v85;
    if (*(_QWORD *)(v96 + 16))
    {
      v97 = sub_1CCAC8DD0((uint64_t)v94);
      if ((v98 & 1) != 0)
        v99 = *(id *)(*(_QWORD *)(v96 + 56) + 8 * v97);
    }

    swift_bridgeObjectRelease();
    sub_1CCA14E90(&qword_1EF9E1E68);
    v100 = sub_1CCB639AC();
    sub_1CCA0CB60(v100, v101, v123);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    *(_WORD *)(v86 + 28) = 2080;
    v102 = (id)*MEMORY[0x1E0D89A50];
    v103 = objc_msgSend(v83, sel_taskInformation);
    v104 = sub_1CCB638E0();

    if (*(_QWORD *)(v104 + 16))
    {
      v105 = sub_1CCAC8DD0((uint64_t)v102);
      if ((v106 & 1) != 0)
        v107 = *(id *)(*(_QWORD *)(v104 + 56) + 8 * v105);
    }

    swift_bridgeObjectRelease();
    v108 = sub_1CCB639AC();
    sub_1CCA0CB60(v108, v109, v123);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    *(_WORD *)(v86 + 38) = 2080;
    v110 = objc_msgSend(v83, sel_taskInformation);
    sub_1CCB638E0();

    v111 = sub_1CCB638EC();
    v113 = v112;
    swift_bridgeObjectRelease();
    sub_1CCA0CB60(v111, v113, v123);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v84, v122, "FMIPUnknownItem: Initialized model: %s\nFMIPUnknownItem: isFindMyNetwork: %{BOOL}d\nFMIPUnknownItem: taskInfo -> play sound %s\nFMIPUnknownItem: taskInfo -> stop sound %s\nFMIPUnknownItem: allTaskInfo ->  %s", (uint8_t *)v86, 0x30u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v87, -1, -1);
    MEMORY[0x1D17B214C](v86, -1, -1);

  }
  else
  {

  }
}

uint64_t FMIPUnknownItem.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  __int128 v11;
  char v12;

  v3 = v1;
  v5 = sub_1CCA14E90(&qword_1EF9E3220);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCACA3D8();
  sub_1CCB643CC();
  v9 = (int *)type metadata accessor for FMIPUnknownItem();
  LOBYTE(v11) = *(_BYTE *)(v3 + v9[15]);
  v12 = 0;
  sub_1CCACD314();
  sub_1CCB64210();
  if (!v2)
  {
    *(_QWORD *)&v11 = *(_QWORD *)(v3 + v9[13]);
    v12 = 1;
    sub_1CCA7B6F8();
    sub_1CCB64210();
    v11 = *(_OWORD *)(v3 + v9[6]);
    v12 = 2;
    sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
    sub_1CCA008E8();
    sub_1CCB64210();
    LOBYTE(v11) = 3;
    sub_1CCB63604();
    sub_1CC9CAA38(&qword_1EF9E1CB0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    sub_1CCB64210();
    LOBYTE(v11) = 4;
    sub_1CCB641EC();
    LOBYTE(v11) = 5;
    sub_1CCB641EC();
    *(_QWORD *)&v11 = *(_QWORD *)(v3 + v9[8]);
    v12 = 6;
    sub_1CCA14E90(&qword_1EF9E31F0);
    sub_1CCACD358(&qword_1EF9E3230, (uint64_t (*)(void))sub_1CCA23468, MEMORY[0x1E0DEAF10]);
    sub_1CCB64210();
    LOBYTE(v11) = 8;
    type metadata accessor for FMIPProductType();
    sub_1CC9CAA38(&qword_1EF9E3238, (uint64_t (*)(uint64_t))type metadata accessor for FMIPProductType, (uint64_t)&protocol conformance descriptor for FMIPProductType);
    sub_1CCB64210();
    LOBYTE(v11) = *(_BYTE *)(v3 + v9[10]);
    v12 = 9;
    sub_1CCACD3C0();
    sub_1CCB64210();
    LOBYTE(v11) = 10;
    sub_1CCB64204();
    LOBYTE(v11) = 12;
    sub_1CCA14E90(&qword_1EF9E31D0);
    sub_1CCACD404();
    sub_1CCB64210();
    LOBYTE(v11) = 7;
    sub_1CCB641E0();
    LOBYTE(v11) = 13;
    sub_1CCB641EC();
    LOBYTE(v11) = 14;
    sub_1CCB641EC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t FMIPUnknownItem.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCB63A24();
  sub_1CCB63A24();
  sub_1CCB63604();
  sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v1 = type metadata accessor for FMIPUnknownItem();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  if (*(_QWORD *)(*(_QWORD *)(v0 + *(int *)(v1 + 32)) + 16))
    FMIPLocation.debugDescription.getter();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  type metadata accessor for FMIPProductType();
  sub_1CCB64060();
  sub_1CCB63A24();
  sub_1CCB64060();
  sub_1CCB63A24();
  v2 = (void *)sub_1CCB63B20();
  v3 = objc_msgSend(v2, sel_description);
  sub_1CCB63988();

  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB64060();
  sub_1CCB63A24();
  sub_1CCB64060();
  sub_1CCB63A24();
  sub_1CCB64060();
  sub_1CCB63A24();
  return 0;
}

uint64_t FMIPUnknownItem.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v16;

  v2 = v1;
  v4 = type metadata accessor for FMIPUnknownItemUTMetadata();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1EF9E31D0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCB63604();
  sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CCB63940();
  v11 = (int *)type metadata accessor for FMIPUnknownItem();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v1 + v11[6] + 8))
  {
    sub_1CCB64354();
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1CCB64354();
  }
  sub_1CCB64354();
  v12 = *(_QWORD *)(v1 + v11[8]);
  swift_bridgeObjectRetain();
  sub_1CCACB564(a1, v12);
  swift_bridgeObjectRelease();
  FMIPProductType.hash(into:)();
  sub_1CCB64348();
  sub_1CC9EAB74(v2 + v11[11], (uint64_t)v10, &qword_1EF9E31D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    sub_1CCB64354();
  }
  else
  {
    sub_1CC9FED60((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    sub_1CCB64354();
    FMIPUnknownItemUTMetadata.hash(into:)();
    sub_1CCA0BF30((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
  }
  v13 = *(void **)(v2 + v11[12]);
  sub_1CCB64354();
  if (v13)
  {
    v14 = v13;
    sub_1CCB63DFC();

  }
  sub_1CCB64348();
  sub_1CCB64348();
  sub_1CCB64348();
  sub_1CCB64354();
  sub_1CCB64354();
  return sub_1CCB64354();
}

uint64_t FMIPUnknownItem.hashValue.getter()
{
  _BYTE v1[72];

  sub_1CCB6433C();
  FMIPUnknownItem.hash(into:)((uint64_t)v1);
  return sub_1CCB64384();
}

uint64_t sub_1CCAC870C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPUnknownItem.init(from:)(a1, a2);
}

uint64_t sub_1CCAC8720(_QWORD *a1)
{
  return FMIPUnknownItem.encode(to:)(a1);
}

uint64_t sub_1CCAC8738()
{
  _BYTE v1[72];

  sub_1CCB6433C();
  FMIPUnknownItem.hash(into:)((uint64_t)v1);
  return sub_1CCB64384();
}

uint64_t sub_1CCAC8778()
{
  _BYTE v1[72];

  sub_1CCB6433C();
  FMIPUnknownItem.hash(into:)((uint64_t)v1);
  return sub_1CCB64384();
}

uint64_t sub_1CCAC87B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1CCAC9858(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCAC890C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1CCAC9BC0(isUniquelyReferenced_nonNull_native, v14, 1, v3, &qword_1EF9E3470);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCAC8A58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1CCAC9E18(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCAC8BA8(uint64_t a1)
{
  return sub_1CCAC8BE4(a1, &qword_1EF9E2AD0, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t sub_1CCAC8BBC(uint64_t a1)
{
  return sub_1CCAC8BE4(a1, &qword_1EF9E13F8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
}

uint64_t sub_1CCAC8BD0(uint64_t a1)
{
  return sub_1CCAC8BE4(a1, &qword_1ED8A7FB0, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
}

uint64_t sub_1CCAC8BE4(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v7 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v6 <= v7)
    v27 = v6 + v4;
  else
    v27 = v6;
  v5 = sub_1CCA0BF6C(isUniquelyReferenced_nonNull_native, v27, 1, v5, a2, a3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v4)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v12 = *(_QWORD *)(v5 + 16);
  v13 = (*(_QWORD *)(v5 + 24) >> 1) - v12;
  v14 = a3(0);
  if (v13 < v4)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(v15 + 72);
  v18 = v5 + v16 + v17 * v12;
  v19 = a1 + v16;
  v20 = v17 * v4;
  v21 = v18 + v20;
  v22 = v19 + v20;
  if (v19 < v21 && v18 < v22)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v24 = *(_QWORD *)(v5 + 16);
  v25 = __OFADD__(v24, v4);
  v26 = v24 + v4;
  if (!v25)
  {
    *(_QWORD *)(v5 + 16) = v26;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

unint64_t sub_1CCAC8D64(uint64_t a1)
{
  uint64_t v2;

  sub_1CCB63604();
  sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v2 = sub_1CCB63934();
  return sub_1CCAC8F60(a1, v2);
}

unint64_t sub_1CCAC8DD0(uint64_t a1)
{
  uint64_t v2;

  sub_1CCB63988();
  sub_1CCB6433C();
  sub_1CCB639F4();
  v2 = sub_1CCB64384();
  swift_bridgeObjectRelease();
  return sub_1CCAC90A0(a1, v2);
}

unint64_t sub_1CCAC8E50(_QWORD *a1)
{
  uint64_t v2;

  sub_1CCB6433C();
  FMReverseGeocodingRequest.hash(into:)();
  v2 = sub_1CCB64384();
  return sub_1CCAC9214(a1, v2);
}

unint64_t sub_1CCAC8EA8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CCB63F4C();
  return sub_1CCAC9654(a1, v2);
}

unint64_t sub_1CCAC8ED8(uint64_t a1)
{
  uint64_t v2;

  sub_1CCB6433C();
  type metadata accessor for CFString(0);
  sub_1CC9CAA38(&qword_1EF9E3450, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1CCB667E4);
  sub_1CCB637C0();
  v2 = sub_1CCB64384();
  return sub_1CCAC9718(a1, v2);
}

unint64_t sub_1CCAC8F60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_1CCB63604();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_1CC9CAA38(&qword_1EF9E1E28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v14 = sub_1CCB63958();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_1CCAC90A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_1CCB63988();
    v8 = v7;
    if (v6 == sub_1CCB63988() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_1CCB63988();
          v15 = v14;
          if (v13 == sub_1CCB63988() && v15 == v16)
            break;
          v18 = sub_1CCB642A0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1CCAC9214(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t (*v18)();
  uint64_t (*v19)();
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  char *v31;
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v5 = sub_1CCB63634();
  v35 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v31 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_1CCA14E90(&qword_1EF9E0718);
  MEMORY[0x1E0C80A78](v33);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  v10 = MEMORY[0x1E0C80A78](v9);
  v34 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v38 = (uint64_t)&v31 - v12;
  v36 = (int *)type metadata accessor for FMReverseGeocodingRequest();
  MEMORY[0x1E0C80A78](v36);
  v15 = (char **)((char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = v2 + 64;
  v42 = v2;
  v16 = -1 << *(_BYTE *)(v2 + 32);
  v17 = a2 & ~v16;
  if (((*(_QWORD *)(v2 + 64 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
  {
    v37 = v8;
    v39 = ~v16;
    v40 = *(_QWORD *)(v13 + 72);
    v18 = type metadata accessor for FMReverseGeocodingRequest;
    do
    {
      v19 = v18;
      sub_1CCA0BEEC(*(_QWORD *)(v42 + 48) + v40 * v17, (uint64_t)v15, (uint64_t (*)(_QWORD))v18);
      v20 = *v15 == *a1 && v15[1] == a1[1];
      if (!v20 && (sub_1CCB642A0() & 1) == 0)
        goto LABEL_5;
      sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A7F30);
      if ((sub_1CCB63DF0() & 1) == 0)
        goto LABEL_5;
      v21 = v36[6];
      v22 = (uint64_t)v15 + v21;
      v23 = v38;
      sub_1CC9EAB74((uint64_t)a1 + v21, v38, (uint64_t *)&unk_1ED8A8B10);
      v24 = (uint64_t)v37;
      v25 = (uint64_t)&v37[*(int *)(v33 + 48)];
      sub_1CC9EAB74(v22, (uint64_t)v37, (uint64_t *)&unk_1ED8A8B10);
      sub_1CC9EAB74(v23, v25, (uint64_t *)&unk_1ED8A8B10);
      v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
      if (v26(v24, 1, v5) == 1)
      {
        sub_1CC9C3E84(v38, (uint64_t *)&unk_1ED8A8B10);
        if (v26(v25, 1, v5) != 1)
          goto LABEL_4;
        sub_1CC9C3E84((uint64_t)v37, (uint64_t *)&unk_1ED8A8B10);
      }
      else
      {
        sub_1CC9EAB74(v24, (uint64_t)v34, (uint64_t *)&unk_1ED8A8B10);
        if (v26(v25, 1, v5) == 1)
        {
          sub_1CC9C3E84(v38, (uint64_t *)&unk_1ED8A8B10);
          (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v5);
LABEL_4:
          sub_1CC9C3E84((uint64_t)v37, &qword_1EF9E0718);
          goto LABEL_5;
        }
        v27 = v35;
        v28 = v31;
        (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v31, v25, v5);
        sub_1CC9CAA38(&qword_1EF9E0720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E60]);
        v32 = sub_1CCB63958();
        v29 = *(void (**)(char *, uint64_t))(v27 + 8);
        v29(v28, v5);
        sub_1CC9C3E84(v38, (uint64_t *)&unk_1ED8A8B10);
        v29(v34, v5);
        sub_1CC9C3E84(v24, (uint64_t *)&unk_1ED8A8B10);
        if ((v32 & 1) == 0)
          goto LABEL_5;
      }
      if (*((unsigned __int8 *)v15 + v36[7]) == *((unsigned __int8 *)a1 + v36[7])
        && *((unsigned __int8 *)v15 + v36[8]) == *((unsigned __int8 *)a1 + v36[8]))
      {
        sub_1CCA0BF30((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        return v17;
      }
LABEL_5:
      v18 = v19;
      sub_1CCA0BF30((uint64_t)v15, (uint64_t (*)(_QWORD))v19);
      v17 = (v17 + 1) & v39;
    }
    while (((*(_QWORD *)(v41 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0);
  }
  return v17;
}

unint64_t sub_1CCAC9654(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1CCAD19C8(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x1D17B14C8](v9, a1);
      sub_1CCAD1A04((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1CCAC9718(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for CFString(0);
    v6 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    sub_1CC9CAA38(&qword_1EF9E3450, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1CCB667E4);
    v7 = v6;
    v8 = sub_1CCB637B4();

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = sub_1CCB637B4();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

_QWORD *sub_1CCAC9858(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1CCA14E90(&qword_1EF9E1460);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1CCACB8B4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CCAC997C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1CCA0BF6C(a1, a2, a3, a4, &qword_1EF9E3410, type metadata accessor for FMIPBeaconShareStateOverride);
}

_QWORD *sub_1CCAC9990(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1CCA14E90(&qword_1EF9E34A8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CCACCFBC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CCAC9A9C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1CCA14E90(qword_1EF9E34B0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CCAD15AC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CCAC9BA8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1CCAC9BC0(a1, a2, a3, a4, &qword_1EF9E3470);
}

_QWORD *sub_1CCAC9BB4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1CCAC9BC0(a1, a2, a3, a4, &qword_1EF9E33B8);
}

_QWORD *sub_1CCAC9BC0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      sub_1CCA14E90(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CCACCFBC(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CCAC9CC8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1CCA0BF6C(a1, a2, a3, a4, &qword_1EF9E2AD0, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t sub_1CCAC9CDC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1CCA0BF6C(a1, a2, a3, a4, &qword_1EF9E13F8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
}

_QWORD *sub_1CCAC9CF0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1CCA14E90(&qword_1EF9E1448);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 352);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[44 * v8 + 4])
          memmove(v12, a4 + 4, 352 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1CCAD169C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CCAC9E18(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1CCA14E90((uint64_t *)&unk_1ED8AA620);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CCAD13D8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CCAC9F24(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1CCAC9F74(a1, a2, a3, a4, &qword_1EF9E3408, &qword_1EF9E13B8);
}

uint64_t sub_1CCAC9F38(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1CCA0BF6C(a1, a2, a3, a4, &qword_1EF9E1440, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
}

uint64_t sub_1CCAC9F4C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1CCA0BF6C(a1, a2, a3, a4, &qword_1EF9E3458, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
}

_QWORD *sub_1CCAC9F60(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1CCAC9F74(a1, a2, a3, a4, &qword_1EF9E1430, &qword_1EF9E1438);
}

_QWORD *sub_1CCAC9F74(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      sub_1CCA14E90(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = j__malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CCAD17D4(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

char *sub_1CCACA08C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      sub_1CCA14E90(&qword_1EF9E33D0);
      v10 = (char *)swift_allocObject();
      v11 = j__malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v12 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1CCAD14C8(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CCACA184(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1CCA0BF6C(a1, a2, a3, a4, &qword_1EF9E3460, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
}

_QWORD *sub_1CCACA198(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, void (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      sub_1CCA14E90(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = j__malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v16 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CC9F2158(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CCACA2B0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1CCA14E90(&qword_1EF9E1478);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4])
          memmove(v12, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1CCAD18D8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

unint64_t sub_1CCACA3D8()
{
  unint64_t result;

  result = qword_1EF9E31E0;
  if (!qword_1EF9E31E0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6D48C, &type metadata for FMIPUnknownItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E31E0);
  }
  return result;
}

unint64_t sub_1CCACA41C()
{
  unint64_t result;

  result = qword_1EF9E31E8;
  if (!qword_1EF9E31E8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPUnknownItemAlertState, &type metadata for FMIPUnknownItemAlertState);
    atomic_store(result, (unint64_t *)&qword_1EF9E31E8);
  }
  return result;
}

unint64_t sub_1CCACA460()
{
  unint64_t result;

  result = qword_1EF9E3208;
  if (!qword_1EF9E3208)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPUnknownItemObservationType, &type metadata for FMIPUnknownItemObservationType);
    atomic_store(result, (unint64_t *)&qword_1EF9E3208);
  }
  return result;
}

void sub_1CCACA4A4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1CCB24134(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_1CCACA50C(v4);
  *a1 = v2;
}

void sub_1CCACA50C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  void **v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  id v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;

  v149 = sub_1CCB635B0();
  v147 = *(_QWORD *)(v149 - 8);
  v2 = MEMORY[0x1E0C80A78](v149);
  v148 = (char *)&v134 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v134 - v4;
  v6 = a1[1];
  v7 = sub_1CCB64234();
  if (v7 >= v6)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6)
        sub_1CCACAEA4(0, v6, 1, a1);
      return;
    }
    goto LABEL_139;
  }
  if (v6 >= 0)
    v8 = v6;
  else
    v8 = v6 + 1;
  if (v6 < -1)
  {
LABEL_147:
    sub_1CCB64078();
    __break(1u);
    return;
  }
  v140 = v7;
  v137 = a1;
  if (v6 < 2)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    v145 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v6 != 1)
    {
      v15 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v14 = (char *)MEMORY[0x1E0DEE9D8];
      goto LABEL_103;
    }
    v139 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v9 = v8 >> 1;
    v10 = sub_1CCB63B8C();
    *(_QWORD *)(v10 + 16) = v9;
    v139 = v10;
    v145 = (char *)(v10 + 32);
  }
  v12 = 0;
  v13 = *a1;
  v138 = *a1 + 32;
  v136 = v13 + 16;
  v14 = (char *)MEMORY[0x1E0DEE9D8];
  v142 = v6;
  v150 = v13;
  while (1)
  {
    v16 = v12;
    v17 = v12 + 1;
    v143 = v12;
    if (v12 + 1 < v6)
    {
      v18 = v14;
      v19 = *(void **)(v13 + 24 * v12 + 8);
      v20 = *(id *)(v13 + 24 * v17 + 8);
      v21 = v19;
      v22 = objc_msgSend(v20, sel_timestamp);
      sub_1CCB63580();

      v23 = objc_msgSend(v21, sel_timestamp);
      v24 = v148;
      sub_1CCB63580();

      LODWORD(v144) = sub_1CCB63550();
      v25 = *(void (**)(char *, uint64_t))(v147 + 8);
      v26 = v24;
      v27 = v149;
      v25(v26, v149);
      v25(v5, v27);

      v16 = v143;
      v17 = v143 + 2;
      if (v143 + 2 < v6)
      {
        v28 = (void **)(v138 + 24 * v143);
        while (1)
        {
          v29 = *v28;
          v30 = v28[3];
          v31 = v29;
          v32 = objc_msgSend(v30, sel_timestamp);
          sub_1CCB63580();

          v33 = objc_msgSend(v31, sel_timestamp);
          v34 = v148;
          sub_1CCB63580();

          LODWORD(v33) = sub_1CCB63550();
          v35 = v34;
          v36 = v149;
          v25(v35, v149);
          v25(v5, v36);

          if (((v144 ^ v33) & 1) != 0)
            break;
          v28 += 3;
          v6 = v142;
          if (v142 == ++v17)
          {
            v17 = v142;
            goto LABEL_23;
          }
        }
        v6 = v142;
LABEL_23:
        v16 = v143;
      }
      v14 = v18;
      v13 = v150;
      if ((v144 & 1) != 0)
      {
        if (v17 < v16)
          goto LABEL_140;
        if (v16 < v17)
        {
          v37 = 24 * v17;
          v38 = 24 * v16;
          v39 = v17;
          v40 = v16;
          do
          {
            if (v40 != --v39)
            {
              if (!v13)
                goto LABEL_145;
              v41 = v13 + v38;
              v42 = *(_BYTE *)(v13 + v38);
              v43 = v13 + v37;
              v44 = *(_BYTE *)(v13 + v38 + 1);
              v45 = *(_BYTE *)(v13 + v38 + 2);
              v46 = *(_BYTE *)(v13 + v38 + 3);
              v47 = *(_QWORD *)(v13 + v38 + 8);
              v48 = *(_QWORD *)(v13 + v38 + 16);
              v49 = *(_QWORD *)(v13 + v37 - 8);
              *(_OWORD *)v41 = *(_OWORD *)(v13 + v37 - 24);
              *(_QWORD *)(v41 + 16) = v49;
              *(_BYTE *)(v43 - 24) = v42;
              *(_BYTE *)(v43 - 23) = v44;
              *(_BYTE *)(v43 - 22) = v45;
              *(_BYTE *)(v43 - 21) = v46;
              *(_QWORD *)(v43 - 16) = v47;
              *(_QWORD *)(v43 - 8) = v48;
            }
            ++v40;
            v37 -= 24;
            v38 += 24;
          }
          while (v40 < v39);
        }
      }
    }
    if (v17 < v6)
    {
      if (__OFSUB__(v17, v16))
        goto LABEL_138;
      if (v17 - v16 < v140)
      {
        if (__OFADD__(v16, v140))
          goto LABEL_141;
        if (v16 + v140 >= v6)
          v50 = v6;
        else
          v50 = v16 + v140;
        if (v50 < v16)
          goto LABEL_142;
        if (v17 != v50)
        {
          v135 = v14;
          v51 = v136 + 24 * v17;
          v141 = v50;
          do
          {
            v52 = *(void **)(v13 + 24 * v17 + 8);
            v53 = v16;
            v144 = v51;
            while (1)
            {
              v54 = *(void **)(v51 - 32);
              v55 = v52;
              v56 = v54;
              v57 = objc_msgSend(v55, sel_timestamp);
              sub_1CCB63580();

              v58 = objc_msgSend(v56, sel_timestamp);
              v59 = v148;
              sub_1CCB63580();

              LOBYTE(v58) = sub_1CCB63550();
              v60 = *(void (**)(char *, uint64_t))(v147 + 8);
              v61 = v59;
              v62 = v149;
              v60(v61, v149);
              v60(v5, v62);

              if ((v58 & 1) == 0)
                break;
              v13 = v150;
              if (!v150)
                goto LABEL_143;
              v63 = v51 - 16;
              v64 = (_OWORD *)(v51 - 40);
              v65 = *(_QWORD *)(v51 - 24);
              *(_QWORD *)(v51 - 24) = *(_QWORD *)v51;
              v51 -= 24;
              v66 = *(_BYTE *)(v51 + 8);
              v67 = *(_BYTE *)(v51 + 9);
              v68 = *(_BYTE *)(v51 + 10);
              v69 = *(_BYTE *)(v51 + 11);
              v52 = *(void **)(v51 + 16);
              *(_OWORD *)v63 = *v64;
              *(_QWORD *)(v63 + 16) = v65;
              *(_BYTE *)(v51 - 16) = v66;
              *(_BYTE *)(v51 - 15) = v67;
              *(_BYTE *)(v51 - 14) = v68;
              *(_BYTE *)(v51 - 13) = v69;
              *(_QWORD *)(v51 - 8) = v52;
              if (v17 == ++v53)
                goto LABEL_44;
            }
            v13 = v150;
LABEL_44:
            ++v17;
            v16 = v143;
            v51 = v144 + 24;
          }
          while (v17 != v141);
          v17 = v141;
          v14 = v135;
        }
      }
    }
    if (v17 < v16)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    v70 = v14;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v144 = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      v14 = v70;
    else
      v14 = sub_1CCB23E0C(0, *((_QWORD *)v70 + 2) + 1, 1, v70);
    v73 = *((_QWORD *)v14 + 2);
    v72 = *((_QWORD *)v14 + 3);
    v15 = v73 + 1;
    v13 = v150;
    if (v73 >= v72 >> 1)
    {
      v124 = sub_1CCB23E0C((char *)(v72 > 1), v73 + 1, 1, v14);
      v13 = v150;
      v14 = v124;
    }
    *((_QWORD *)v14 + 2) = v15;
    v74 = v14 + 32;
    v75 = &v14[16 * v73 + 32];
    v76 = v144;
    *(_QWORD *)v75 = v16;
    *((_QWORD *)v75 + 1) = v76;
    if (v73)
      break;
    v15 = 1;
LABEL_15:
    v6 = v142;
    v12 = v144;
    if (v144 >= v142)
    {
      v11 = v139;
LABEL_103:
      v139 = v11;
      v126 = v146;
      if (v15 < 2)
      {
LABEL_114:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v139 + 16) = 0;
        goto LABEL_115;
      }
      v127 = *v137;
      while (1)
      {
        v128 = v15 - 2;
        if (v15 < 2)
          break;
        if (!v127)
          goto LABEL_146;
        v129 = v14;
        v130 = *(_QWORD *)&v14[16 * v128 + 32];
        v131 = *(_QWORD *)&v14[16 * v15 + 24];
        sub_1CCACB0B8((char *)(v127 + 24 * v130), (char *)(v127 + 24 * *(_QWORD *)&v14[16 * v15 + 16]), (char *)(v127 + 24 * v131), v145);
        if (v126)
        {
          v125 = v139;
          goto LABEL_100;
        }
        if (v131 < v130)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v129 = sub_1CCB24078((uint64_t)v129);
        if (v128 >= *((_QWORD *)v129 + 2))
          goto LABEL_136;
        v132 = &v129[16 * v128 + 32];
        *(_QWORD *)v132 = v130;
        *((_QWORD *)v132 + 1) = v131;
        v133 = *((_QWORD *)v129 + 2);
        if (v15 > v133)
          goto LABEL_137;
        memmove(&v129[16 * v15 + 16], &v129[16 * v15 + 32], 16 * (v133 - v15));
        v14 = v129;
        *((_QWORD *)v129 + 2) = v133 - 1;
        v15 = v133 - 1;
        if (v133 <= 2)
          goto LABEL_114;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }
  while (1)
  {
    v77 = v15 - 1;
    if (v15 >= 4)
    {
      v82 = &v74[16 * v15];
      v83 = *((_QWORD *)v82 - 8);
      v84 = *((_QWORD *)v82 - 7);
      v88 = __OFSUB__(v84, v83);
      v85 = v84 - v83;
      if (v88)
        goto LABEL_122;
      v87 = *((_QWORD *)v82 - 6);
      v86 = *((_QWORD *)v82 - 5);
      v88 = __OFSUB__(v86, v87);
      v80 = v86 - v87;
      v81 = v88;
      if (v88)
        goto LABEL_123;
      v89 = v15 - 2;
      v90 = &v74[16 * v15 - 32];
      v92 = *(_QWORD *)v90;
      v91 = *((_QWORD *)v90 + 1);
      v88 = __OFSUB__(v91, v92);
      v93 = v91 - v92;
      if (v88)
        goto LABEL_125;
      v88 = __OFADD__(v80, v93);
      v94 = v80 + v93;
      if (v88)
        goto LABEL_128;
      if (v94 >= v85)
      {
        v112 = &v74[16 * v77];
        v114 = *(_QWORD *)v112;
        v113 = *((_QWORD *)v112 + 1);
        v88 = __OFSUB__(v113, v114);
        v115 = v113 - v114;
        if (v88)
          goto LABEL_132;
        v105 = v80 < v115;
        goto LABEL_88;
      }
    }
    else
    {
      if (v15 != 3)
      {
        v106 = *((_QWORD *)v14 + 4);
        v107 = *((_QWORD *)v14 + 5);
        v88 = __OFSUB__(v107, v106);
        v99 = v107 - v106;
        v100 = v88;
        goto LABEL_82;
      }
      v79 = *((_QWORD *)v14 + 4);
      v78 = *((_QWORD *)v14 + 5);
      v88 = __OFSUB__(v78, v79);
      v80 = v78 - v79;
      v81 = v88;
    }
    if ((v81 & 1) != 0)
      goto LABEL_124;
    v89 = v15 - 2;
    v95 = &v74[16 * v15 - 32];
    v97 = *(_QWORD *)v95;
    v96 = *((_QWORD *)v95 + 1);
    v98 = __OFSUB__(v96, v97);
    v99 = v96 - v97;
    v100 = v98;
    if (v98)
      goto LABEL_127;
    v101 = &v74[16 * v77];
    v103 = *(_QWORD *)v101;
    v102 = *((_QWORD *)v101 + 1);
    v88 = __OFSUB__(v102, v103);
    v104 = v102 - v103;
    if (v88)
      goto LABEL_130;
    if (__OFADD__(v99, v104))
      goto LABEL_131;
    if (v99 + v104 >= v80)
    {
      v105 = v80 < v104;
LABEL_88:
      if (v105)
        v77 = v89;
      goto LABEL_90;
    }
LABEL_82:
    if ((v100 & 1) != 0)
      goto LABEL_126;
    v108 = &v74[16 * v77];
    v110 = *(_QWORD *)v108;
    v109 = *((_QWORD *)v108 + 1);
    v88 = __OFSUB__(v109, v110);
    v111 = v109 - v110;
    if (v88)
      goto LABEL_129;
    if (v111 < v99)
      goto LABEL_15;
LABEL_90:
    v116 = v77 - 1;
    if (v77 - 1 >= v15)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v13)
      goto LABEL_144;
    v117 = v14;
    v118 = &v74[16 * v116];
    v119 = *(_QWORD *)v118;
    v120 = &v74[16 * v77];
    v121 = *((_QWORD *)v120 + 1);
    v122 = v146;
    sub_1CCACB0B8((char *)(v13 + 24 * *(_QWORD *)v118), (char *)(v13 + 24 * *(_QWORD *)v120), (char *)(v13 + 24 * v121), v145);
    v146 = v122;
    if (v122)
      break;
    if (v121 < v119)
      goto LABEL_119;
    if (v77 > *((_QWORD *)v117 + 2))
      goto LABEL_120;
    *(_QWORD *)v118 = v119;
    *(_QWORD *)&v74[16 * v116 + 8] = v121;
    v123 = *((_QWORD *)v117 + 2);
    if (v77 >= v123)
      goto LABEL_121;
    v15 = v123 - 1;
    memmove(&v74[16 * v77], v120 + 16, 16 * (v123 - 1 - v77));
    v14 = v117;
    *((_QWORD *)v117 + 2) = v123 - 1;
    v13 = v150;
    if (v123 <= 2)
      goto LABEL_15;
  }
  v125 = v139;
LABEL_100:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v125 + 16) = 0;
LABEL_115:
  swift_bridgeObjectRelease();
}

void sub_1CCACAEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v34 = a1;
  v7 = sub_1CCB635B0();
  v37 = *(_QWORD *)(v7 - 8);
  v38 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v36 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v32 - v10;
  v33 = a2;
  if (a3 != a2)
  {
    v39 = *a4;
    v12 = v39 + 24 * a3 + 16;
LABEL_5:
    v13 = *(void **)(v39 + 24 * a3 + 8);
    v14 = v34;
    v35 = v12;
    while (1)
    {
      v15 = *(void **)(v12 - 32);
      v16 = v13;
      v17 = v15;
      v18 = objc_msgSend(v16, sel_timestamp);
      sub_1CCB63580();

      v19 = objc_msgSend(v17, sel_timestamp);
      v20 = v36;
      sub_1CCB63580();

      LOBYTE(v19) = sub_1CCB63550();
      v21 = a3;
      v22 = *(void (**)(char *, uint64_t))(v37 + 8);
      v23 = v20;
      v24 = v38;
      v22(v23, v38);
      v22(v11, v24);
      a3 = v21;

      if ((v19 & 1) == 0)
      {
LABEL_4:
        a3 = v21 + 1;
        v12 = v35 + 24;
        if (v21 + 1 == v33)
          return;
        goto LABEL_5;
      }
      if (!v39)
        break;
      v25 = v12 - 16;
      v26 = (_OWORD *)(v12 - 40);
      v27 = *(_QWORD *)(v12 - 24);
      *(_QWORD *)(v12 - 24) = *(_QWORD *)v12;
      v12 -= 24;
      v28 = *(_BYTE *)(v12 + 8);
      v29 = *(_BYTE *)(v12 + 9);
      v30 = *(_BYTE *)(v12 + 10);
      v31 = *(_BYTE *)(v12 + 11);
      v13 = *(void **)(v12 + 16);
      *(_OWORD *)v25 = *v26;
      *(_QWORD *)(v25 + 16) = v27;
      *(_BYTE *)(v12 - 16) = v28;
      *(_BYTE *)(v12 - 15) = v29;
      *(_BYTE *)(v12 - 14) = v30;
      *(_BYTE *)(v12 - 13) = v31;
      *(_QWORD *)(v12 - 8) = v13;
      if (v21 == ++v14)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_1CCACB0B8(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  unint64_t v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  __int128 *v45;
  unint64_t v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t result;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;

  v8 = sub_1CCB635B0();
  v58 = *(_QWORD *)(v8 - 8);
  v59 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v57 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v55 = a3;
  v56 = (char *)&v51 - v11;
  v12 = a2 - a1;
  v13 = (a2 - a1) / 24;
  v14 = a3 - a2;
  v15 = v14 / 24;
  v62 = a1;
  v61 = a4;
  if (v13 >= v14 / 24)
  {
    if (v14 < -23)
      goto LABEL_43;
    if (a4 != a2 || &a2[24 * v15] <= a4)
      memmove(a4, a2, 24 * v15);
    v31 = &a4[24 * v15];
    v60 = v31;
    v62 = a2;
    if (v14 < 24 || a1 >= a2)
      goto LABEL_42;
    v32 = v56;
    v33 = (unint64_t)(v55 - 24);
    v52 = a1;
    v53 = a4;
    while (1)
    {
      v55 = (char *)(v33 + 24);
      v34 = (void *)*((_QWORD *)a2 - 2);
      v35 = *((id *)v31 - 2);
      v36 = v34;
      v37 = objc_msgSend(v35, sel_timestamp);
      sub_1CCB63580();

      v38 = objc_msgSend(v36, sel_timestamp);
      v39 = v57;
      sub_1CCB63580();

      LOBYTE(v38) = sub_1CCB63550();
      v40 = *(void (**)(char *, uint64_t))(v58 + 8);
      v41 = v39;
      v42 = v59;
      v40(v41, v59);
      v40(v32, v42);

      if ((v38 & 1) != 0)
        break;
      v45 = (__int128 *)(v31 - 24);
      v60 = v31 - 24;
      if (v55 < v31 || v33 >= (unint64_t)v31)
      {
        v49 = *v45;
        *(_QWORD *)(v33 + 16) = *((_QWORD *)v31 - 1);
        *(_OWORD *)v33 = v49;
        v43 = a2;
        v31 -= 24;
        goto LABEL_40;
      }
      v47 = (unint64_t)v52;
      v46 = (unint64_t)v53;
      if (v55 != v31)
      {
        v48 = *v45;
        *(_QWORD *)(v33 + 16) = *((_QWORD *)v31 - 1);
        *(_OWORD *)v33 = v48;
      }
      v43 = a2;
      v31 -= 24;
      if ((unint64_t)v45 <= v46)
        goto LABEL_42;
LABEL_41:
      v33 -= 24;
      a2 = v43;
      if ((unint64_t)v43 <= v47)
        goto LABEL_42;
    }
    v43 = a2 - 24;
    if (v55 != a2 || v33 >= (unint64_t)a2)
    {
      v44 = *(_OWORD *)v43;
      *(_QWORD *)(v33 + 16) = *((_QWORD *)a2 - 1);
      *(_OWORD *)v33 = v44;
    }
    v62 = a2 - 24;
LABEL_40:
    v47 = (unint64_t)v52;
    if (v31 <= v53)
      goto LABEL_42;
    goto LABEL_41;
  }
  if (v12 >= -23)
  {
    if (a4 != a1 || &a1[24 * v13] <= a4)
      memmove(a4, a1, 24 * v13);
    v54 = &a4[24 * v13];
    v60 = v54;
    if (v12 >= 24 && a2 < v55)
    {
      v16 = v56;
      do
      {
        v17 = (unint64_t)a1;
        v18 = (void *)*((_QWORD *)a4 + 1);
        v19 = *((id *)a2 + 1);
        v20 = v18;
        v21 = objc_msgSend(v19, sel_timestamp);
        sub_1CCB63580();

        v22 = objc_msgSend(v20, sel_timestamp);
        v23 = v57;
        sub_1CCB63580();

        LOBYTE(v22) = sub_1CCB63550();
        v24 = *(void (**)(char *, uint64_t))(v58 + 8);
        v25 = v23;
        v26 = v59;
        v24(v25, v59);
        v24(v16, v26);

        if ((v22 & 1) != 0)
        {
          v27 = a2 + 24;
          v28 = v17;
          if (v17 < (unint64_t)a2 || v17 >= (unint64_t)v27 || (char *)v17 != a2)
          {
            v29 = *(_OWORD *)a2;
            *(_QWORD *)(v17 + 16) = *((_QWORD *)a2 + 2);
            *(_OWORD *)v17 = v29;
          }
        }
        else
        {
          v28 = v17;
          if ((char *)v17 != a4 || v17 >= (unint64_t)(a4 + 24))
          {
            v30 = *(_OWORD *)a4;
            *(_QWORD *)(v17 + 16) = *((_QWORD *)a4 + 2);
            *(_OWORD *)v17 = v30;
          }
          v61 = a4 + 24;
          v27 = a2;
          a4 += 24;
        }
        a1 = (char *)(v28 + 24);
        v62 = a1;
        if (a4 >= v54)
          break;
        a2 = v27;
      }
      while (v27 < v55);
    }
LABEL_42:
    sub_1CCB23F04((void **)&v62, (const void **)&v61, &v60);
    return 1;
  }
LABEL_43:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCACB564(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1CCB64348();
  if (v3)
  {
    v5 = *(unsigned __int8 *)(a2 + 35);
    sub_1CCB64354();
    sub_1CCB64354();
    sub_1CCB64354();
    __asm { BR              X8 }
  }
  return result;
}

uint64_t sub_1CCACB8B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t _s8FMIPCore15FMIPUnknownItemV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  _BYTE *v105;
  _BYTE *v106;
  _BYTE *v107;
  _BYTE *v108;
  char v109;
  char v111;
  int *v112;
  int v113;
  int *v114;
  int v115;
  int v116;
  int *v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  int *v123;
  BOOL v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  id v134;
  id v135;
  char v136;
  id v137;
  int *v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE *v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  unsigned int (*v146)(uint64_t, uint64_t, uint64_t);
  _BYTE *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  char v153;
  uint64_t v154;
  int v155;
  int v156;
  uint64_t v157;
  char v158;
  char v159;
  _BYTE v160[4];
  int v161;
  int *v162;
  _BYTE *v163;
  _BYTE *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE *v168;
  uint64_t v169;
  _BYTE *v170;
  _BYTE *v171;
  _BYTE *v172;
  _BYTE *v173;
  _BYTE *v174;
  _BYTE *v175;
  _BYTE *v176;
  _BYTE *v177;
  _BYTE *v178;
  _BYTE *v179;
  _BYTE *v180;
  _BYTE *v181;
  _BYTE *v182;
  _BYTE *v183;
  _BYTE *v184;
  _BYTE *v185;
  _BYTE *v186;
  _BYTE *v187;
  _BYTE *v188;
  _BYTE *v189;
  _BYTE *v190;
  _BYTE *v191;
  _BYTE *v192;
  _BYTE *v193;

  v167 = type metadata accessor for FMIPUnknownItemUTMetadata();
  v166 = *(_QWORD *)(v167 - 8);
  MEMORY[0x1E0C80A78](v167);
  v163 = &v160[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_1CCA14E90(&qword_1EF9E31D0);
  MEMORY[0x1E0C80A78](v5);
  v164 = &v160[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v165 = sub_1CCA14E90(&qword_1EF9E3468);
  MEMORY[0x1E0C80A78](v165);
  v168 = &v160[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for FMIPUnknownItem();
  v9 = MEMORY[0x1E0C80A78](v8);
  v177 = &v160[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = MEMORY[0x1E0C80A78](v9);
  v176 = &v160[-v12];
  v13 = MEMORY[0x1E0C80A78](v11);
  v180 = &v160[-v14];
  v15 = MEMORY[0x1E0C80A78](v13);
  v170 = &v160[-v16];
  v17 = MEMORY[0x1E0C80A78](v15);
  v191 = &v160[-v18];
  v19 = MEMORY[0x1E0C80A78](v17);
  v188 = &v160[-v20];
  v21 = MEMORY[0x1E0C80A78](v19);
  v189 = &v160[-v22];
  v23 = MEMORY[0x1E0C80A78](v21);
  v190 = &v160[-v24];
  v25 = MEMORY[0x1E0C80A78](v23);
  v186 = &v160[-v26];
  v27 = MEMORY[0x1E0C80A78](v25);
  v187 = &v160[-v28];
  v29 = MEMORY[0x1E0C80A78](v27);
  v184 = &v160[-v30];
  v31 = MEMORY[0x1E0C80A78](v29);
  v185 = &v160[-v32];
  v33 = MEMORY[0x1E0C80A78](v31);
  v193 = &v160[-v34];
  v35 = MEMORY[0x1E0C80A78](v33);
  v175 = &v160[-v36];
  v37 = MEMORY[0x1E0C80A78](v35);
  v183 = &v160[-v38];
  v39 = MEMORY[0x1E0C80A78](v37);
  v182 = &v160[-v40];
  v41 = MEMORY[0x1E0C80A78](v39);
  v192 = &v160[-v42];
  v43 = MEMORY[0x1E0C80A78](v41);
  v174 = &v160[-v44];
  v45 = MEMORY[0x1E0C80A78](v43);
  v173 = &v160[-v46];
  v47 = MEMORY[0x1E0C80A78](v45);
  v181 = &v160[-v48];
  v49 = MEMORY[0x1E0C80A78](v47);
  v172 = &v160[-v50];
  v51 = MEMORY[0x1E0C80A78](v49);
  v171 = &v160[-v52];
  v53 = MEMORY[0x1E0C80A78](v51);
  v178 = &v160[-v54];
  v55 = MEMORY[0x1E0C80A78](v53);
  v179 = &v160[-v56];
  v57 = MEMORY[0x1E0C80A78](v55);
  v59 = &v160[-v58];
  v60 = MEMORY[0x1E0C80A78](v57);
  v62 = &v160[-v61];
  v63 = MEMORY[0x1E0C80A78](v60);
  v65 = &v160[-v64];
  v66 = MEMORY[0x1E0C80A78](v63);
  v68 = &v160[-v67];
  v69 = *(int *)(v66 + 60);
  v70 = *(unsigned __int8 *)(a1 + v69);
  v71 = *(unsigned __int8 *)(a2 + v69);
  sub_1CCA0BEEC(a1, (uint64_t)&v160[-v67], (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BEEC(a2, (uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  if (v70 != v71)
  {
    sub_1CCA0BF30((uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v68, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v75 = a1;
    sub_1CCA0BEEC(a1, (uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BEEC(a2, (uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
LABEL_10:
    sub_1CCA0BF30((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v83 = v75;
    v86 = (uint64_t)v192;
    v85 = (uint64_t)v193;
    v84 = (uint64_t)v181;
LABEL_11:
    v87 = v179;
    sub_1CCA0BEEC(v83, (uint64_t)v179, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v88 = v178;
    sub_1CCA0BEEC(a2, (uint64_t)v178, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
LABEL_12:
    sub_1CCA0BF30((uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v89 = v171;
    sub_1CCA0BEEC(v83, (uint64_t)v171, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v90 = v172;
    sub_1CCA0BEEC(a2, (uint64_t)v172, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
LABEL_13:
    sub_1CCA0BF30((uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v89, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BEEC(v83, v84, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v91 = v173;
    sub_1CCA0BEEC(a2, (uint64_t)v173, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v92 = v84;
    v93 = (uint64_t)v175;
LABEL_14:
    sub_1CCA0BF30((uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30(v92, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v94 = v174;
    sub_1CCA0BEEC(v83, (uint64_t)v174, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BEEC(a2, v86, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
LABEL_15:
    sub_1CCA0BF30((uint64_t)v94, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30(v86, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v95 = v182;
    sub_1CCA0BEEC(v83, (uint64_t)v182, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v96 = v183;
    sub_1CCA0BEEC(a2, (uint64_t)v183, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
LABEL_16:
    sub_1CCA0BF30((uint64_t)v95, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v96, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BEEC(v83, v93, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BEEC(a2, v85, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v98 = v190;
    v97 = v191;
    v99 = (uint64_t)v187;
    v100 = (uint64_t)v185;
LABEL_17:
    sub_1CCA0BF30(v85, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30(v93, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BEEC(v83, v100, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v101 = v184;
    sub_1CCA0BEEC(a2, (uint64_t)v184, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
LABEL_18:
    sub_1CCA0BF30((uint64_t)v101, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30(v100, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BEEC(v83, v99, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v102 = v186;
    sub_1CCA0BEEC(a2, (uint64_t)v186, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
LABEL_19:
    sub_1CCA0BF30((uint64_t)v102, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30(v99, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BEEC(v83, (uint64_t)v98, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v103 = v189;
    sub_1CCA0BEEC(a2, (uint64_t)v189, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
LABEL_20:
    sub_1CCA0BF30((uint64_t)v103, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v98, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v104 = (uint64_t)v170;
    v105 = v188;
LABEL_21:
    sub_1CCA0BEEC(v83, (uint64_t)v105, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BEEC(a2, (uint64_t)v97, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
LABEL_22:
    sub_1CCA0BF30((uint64_t)v97, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v105, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
LABEL_23:
    sub_1CCA0BEEC(v83, v104, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v106 = v180;
    sub_1CCA0BEEC(a2, (uint64_t)v180, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
LABEL_24:
    sub_1CCA0BF30((uint64_t)v106, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30(v104, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v107 = v176;
    sub_1CCA0BEEC(v83, (uint64_t)v176, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v108 = v177;
    sub_1CCA0BEEC(a2, (uint64_t)v177, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    goto LABEL_25;
  }
  v72 = *(int *)(v8 + 52);
  v73 = *(_QWORD *)&v68[v72];
  v169 = a2;
  v74 = *(_QWORD *)&v65[v72];
  sub_1CCA0BF30((uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BF30((uint64_t)v68, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v75 = a1;
  sub_1CCA0BEEC(a1, (uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BEEC(v169, (uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v76 = v73 == v74;
  a2 = v169;
  if (!v76)
    goto LABEL_10;
  v77 = *(int *)(v8 + 24);
  v78 = &v62[v77];
  v79 = *(_QWORD *)&v62[v77 + 8];
  v80 = &v59[v77];
  v81 = v80[1];
  v82 = (int *)v8;
  v83 = a1;
  v84 = (uint64_t)v181;
  if (!v79)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    if (!v81)
      goto LABEL_28;
LABEL_30:
    swift_bridgeObjectRelease();
    v86 = (uint64_t)v192;
    v85 = (uint64_t)v193;
    goto LABEL_11;
  }
  if (!v81)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    goto LABEL_30;
  }
  if (*v78 == *v80 && v79 == v81)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    swift_bridgeObjectRelease();
LABEL_28:
    v162 = v82;
    v87 = v179;
    sub_1CCA0BEEC(a1, (uint64_t)v179, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v88 = v178;
    sub_1CCA0BEEC(a2, (uint64_t)v178, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v85 = (uint64_t)v193;
    goto LABEL_32;
  }
  v161 = sub_1CCB642A0();
  swift_bridgeObjectRetain();
  v162 = v82;
  sub_1CCA0BF30((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BF30((uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  swift_bridgeObjectRelease();
  v87 = v179;
  sub_1CCA0BEEC(a1, (uint64_t)v179, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v88 = v178;
  v83 = a1;
  sub_1CCA0BEEC(a2, (uint64_t)v178, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v86 = (uint64_t)v192;
  v85 = (uint64_t)v193;
  if ((v161 & 1) == 0)
    goto LABEL_12;
LABEL_32:
  v111 = sub_1CCB635E0();
  sub_1CCA0BF30((uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BF30((uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v89 = v171;
  sub_1CCA0BEEC(v83, (uint64_t)v171, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v90 = v172;
  v86 = (uint64_t)v192;
  sub_1CCA0BEEC(a2, (uint64_t)v172, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  if ((v111 & 1) == 0)
    goto LABEL_13;
  v112 = v162;
  v113 = v89[v162[16]];
  sub_1CCA0BF30((uint64_t)v89, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v162 = v112;
  LODWORD(v112) = v90[v112[16]];
  sub_1CCA0BF30((uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BEEC(v83, v84, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v91 = v173;
  sub_1CCA0BEEC(v169, (uint64_t)v173, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v76 = v113 == (_DWORD)v112;
  v85 = (uint64_t)v193;
  a2 = v169;
  v92 = v84;
  v93 = (uint64_t)v175;
  if (!v76)
    goto LABEL_14;
  v114 = v162;
  v115 = *(unsigned __int8 *)(v92 + v162[7]);
  sub_1CCA0BF30(v92, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v116 = v91[v114[7]];
  sub_1CCA0BF30((uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v94 = v174;
  sub_1CCA0BEEC(v83, (uint64_t)v174, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BEEC(v169, v86, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v76 = v115 == v116;
  v85 = (uint64_t)v193;
  a2 = v169;
  if (!v76)
    goto LABEL_15;
  v117 = v114;
  v118 = sub_1CCB1E468(*(_QWORD *)&v94[v114[8]], *(_QWORD *)(v86 + v114[8]));
  sub_1CCA0BF30((uint64_t)v94, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BF30(v86, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v95 = v182;
  sub_1CCA0BEEC(v83, (uint64_t)v182, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v96 = v183;
  v85 = (uint64_t)v193;
  sub_1CCA0BEEC(a2, (uint64_t)v183, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  if ((v118 & 1) == 0)
    goto LABEL_16;
  v119 = v117[5];
  v120 = *(_QWORD *)&v95[v119];
  v121 = *(_QWORD *)&v95[v119 + 8];
  v122 = &v96[v119];
  v98 = v190;
  if (v120 == *v122 && v121 == v122[1])
  {
    sub_1CCA0BF30((uint64_t)v95, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v96, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BEEC(v83, v93, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BEEC(a2, v85, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v99 = (uint64_t)v187;
    v100 = (uint64_t)v185;
  }
  else
  {
    LODWORD(v192) = sub_1CCB642A0();
    sub_1CCA0BF30((uint64_t)v95, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v96, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BEEC(v83, v93, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BEEC(a2, v85, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v97 = v191;
    v99 = (uint64_t)v187;
    v100 = (uint64_t)v185;
    if ((v192 & 1) == 0)
      goto LABEL_17;
  }
  v123 = v162;
  v124 = _s8FMIPCore15FMIPProductTypeO2eeoiySbAC_ACtFZ_0(v93 + v162[9], v85 + v162[9]);
  sub_1CCA0BF30(v85, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BF30(v93, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BEEC(v83, v100, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v101 = v184;
  v97 = v191;
  sub_1CCA0BEEC(a2, (uint64_t)v184, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  if (!v124)
    goto LABEL_18;
  v125 = v123[10];
  v126 = *(unsigned __int8 *)(v100 + v125);
  v127 = v101[v125];
  sub_1CCA0BF30((uint64_t)v101, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BF30(v100, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BEEC(v83, v99, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v102 = v186;
  sub_1CCA0BEEC(v169, (uint64_t)v186, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v76 = v126 == v127;
  v97 = v191;
  a2 = v169;
  if (!v76)
    goto LABEL_19;
  v128 = v123[14];
  v129 = *(_QWORD *)(v99 + v128);
  v130 = *(_QWORD *)&v102[v128];
  sub_1CCA0BF30((uint64_t)v102, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BF30(v99, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BEEC(v83, (uint64_t)v98, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v103 = v189;
  sub_1CCA0BEEC(v169, (uint64_t)v189, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v76 = v129 == v130;
  v97 = v191;
  a2 = v169;
  if (!v76)
    goto LABEL_20;
  v131 = v123[12];
  v132 = *(void **)&v98[v131];
  v133 = *(void **)&v103[v131];
  if (!v132)
  {
    v137 = v133;
    sub_1CCA0BF30((uint64_t)v103, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v190, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    if (!v133)
    {
      v105 = v188;
      sub_1CCA0BEEC(v83, (uint64_t)v188, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
      v97 = v191;
      sub_1CCA0BEEC(a2, (uint64_t)v191, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
      v104 = (uint64_t)v170;
      goto LABEL_53;
    }
LABEL_57:

    v105 = v188;
    v97 = v191;
    v104 = (uint64_t)v170;
    goto LABEL_21;
  }
  if (!v133)
  {
    v137 = v132;
    sub_1CCA0BF30((uint64_t)v189, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v190, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    goto LABEL_57;
  }
  sub_1CC9C30A8(0, &qword_1EF9E28C0);
  v134 = v133;
  v135 = v132;
  v136 = sub_1CCB63DF0();
  sub_1CCA0BF30((uint64_t)v189, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BF30((uint64_t)v190, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);

  v105 = v188;
  sub_1CCA0BEEC(v83, (uint64_t)v188, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v97 = v191;
  sub_1CCA0BEEC(a2, (uint64_t)v191, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v104 = (uint64_t)v170;
  if ((v136 & 1) == 0)
    goto LABEL_22;
LABEL_53:
  v138 = v162;
  v139 = v162[11];
  v140 = (uint64_t)&v105[v139];
  v141 = &v97[v139];
  v142 = v168;
  v143 = (uint64_t)&v168[*(int *)(v165 + 48)];
  sub_1CC9EAB74(v140, (uint64_t)v168, &qword_1EF9E31D0);
  v144 = (uint64_t)v141;
  v145 = v142;
  sub_1CC9EAB74(v144, v143, &qword_1EF9E31D0);
  v146 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v166 + 48);
  v147 = v142;
  v148 = v167;
  if (v146((uint64_t)v147, 1, v167) == 1)
  {
    sub_1CCA0BF30((uint64_t)v191, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v188, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    if (v146(v143, 1, v148) == 1)
    {
      sub_1CC9C3E84((uint64_t)v168, &qword_1EF9E31D0);
      sub_1CCA0BEEC(v83, v104, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
      v106 = v180;
      sub_1CCA0BEEC(a2, (uint64_t)v180, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
      goto LABEL_62;
    }
LABEL_60:
    sub_1CC9C3E84((uint64_t)v168, &qword_1EF9E3468);
    goto LABEL_23;
  }
  v149 = (uint64_t)v145;
  v150 = v148;
  v151 = v164;
  sub_1CC9EAB74(v149, (uint64_t)v164, &qword_1EF9E31D0);
  if (v146(v143, 1, v150) == 1)
  {
    sub_1CCA0BF30((uint64_t)v191, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v188, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCA0BF30((uint64_t)v151, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
    goto LABEL_60;
  }
  v152 = v163;
  sub_1CC9FED60(v143, (uint64_t)v163, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
  v153 = _s8FMIPCore25FMIPUnknownItemUTMetadataV2eeoiySbAC_ACtFZ_0(v151, v152);
  sub_1CCA0BF30((uint64_t)v152, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
  sub_1CCA0BF30((uint64_t)v191, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BF30((uint64_t)v188, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BF30((uint64_t)v151, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
  sub_1CC9C3E84((uint64_t)v168, &qword_1EF9E31D0);
  sub_1CCA0BEEC(v83, v104, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v106 = v180;
  sub_1CCA0BEEC(a2, (uint64_t)v180, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  if ((v153 & 1) == 0)
    goto LABEL_24;
LABEL_62:
  v154 = a2;
  v155 = *(unsigned __int8 *)(v104 + v138[17]);
  sub_1CCA0BF30(v104, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v156 = v106[v138[17]];
  sub_1CCA0BF30((uint64_t)v106, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v107 = v176;
  sub_1CCA0BEEC(v83, (uint64_t)v176, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v157 = v154;
  v108 = v177;
  sub_1CCA0BEEC(v157, (uint64_t)v177, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  if (v155 == v156)
  {
    v158 = v107[v138[18]];
    sub_1CCA0BF30((uint64_t)v107, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v159 = v108[v138[18]];
    sub_1CCA0BF30((uint64_t)v108, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v109 = v158 ^ v159 ^ 1;
    return v109 & 1;
  }
LABEL_25:
  sub_1CCA0BF30((uint64_t)v108, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  sub_1CCA0BF30((uint64_t)v107, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v109 = 0;
  return v109 & 1;
}

unint64_t sub_1CCACCC58(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  sub_1CCA14E90(&qword_1EF9E33B0);
  v3 = (_QWORD *)sub_1CCB640B4();
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_1CC9CD6C8(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_BYTE *)v8 - 8);
    v13 = *v8;
    swift_bridgeObjectRetain();
    result = sub_1CC9CD6C8(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

void sub_1CCACCD58(uint64_t a1, void (*a2)(_QWORD *__return_ptr))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(_QWORD *__return_ptr);
  uint64_t v22;
  uint64_t v23;
  char v24;
  void *v25;
  uint64_t v26;
  int64_t v27;

  v22 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v21 = a2;
  while (v6)
  {
    v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v10 = v9 | (v7 << 6);
LABEL_22:
    v14 = 8 * v10;
    v15 = *(void **)(*(_QWORD *)(a1 + 48) + v14);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + v14);
    v25 = v15;
    v26 = v16;
    v17 = v15;
    a2(&v23);

    if ((v24 & 1) == 0)
    {
      v18 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_1CCAC9BC0(0, v8[2] + 1, 1, v8, &qword_1EF9E33B8);
      v20 = v8[2];
      v19 = v8[3];
      if (v20 >= v19 >> 1)
        v8 = sub_1CCAC9BC0((_QWORD *)(v19 > 1), v20 + 1, 1, v8, &qword_1EF9E33B8);
      v8[2] = v20 + 1;
      v8[v20 + 4] = v18;
      a2 = v21;
    }
  }
  v11 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v11 >= v27)
    goto LABEL_28;
  v12 = *(_QWORD *)(v22 + 8 * v11);
  ++v7;
  if (v12)
    goto LABEL_21;
  v7 = v11 + 1;
  if (v11 + 1 >= v27)
    goto LABEL_28;
  v12 = *(_QWORD *)(v22 + 8 * v7);
  if (v12)
    goto LABEL_21;
  v7 = v11 + 2;
  if (v11 + 2 >= v27)
    goto LABEL_28;
  v12 = *(_QWORD *)(v22 + 8 * v7);
  if (v12)
    goto LABEL_21;
  v7 = v11 + 3;
  if (v11 + 3 >= v27)
    goto LABEL_28;
  v12 = *(_QWORD *)(v22 + 8 * v7);
  if (v12)
  {
LABEL_21:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v7 << 6);
    goto LABEL_22;
  }
  v13 = v11 + 4;
  if (v13 >= v27)
  {
LABEL_28:
    swift_release();
    return;
  }
  v12 = *(_QWORD *)(v22 + 8 * v13);
  if (v12)
  {
    v7 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v27)
      goto LABEL_28;
    v12 = *(_QWORD *)(v22 + 8 * v7);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_30:
  __break(1u);
}

char *sub_1CCACCFBC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1CCB640C0();
  __break(1u);
  return result;
}

void sub_1CCACD0A4(uint64_t a1, void (*a2)(_QWORD *__return_ptr))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(_QWORD *__return_ptr);
  uint64_t v20;
  uint64_t v21;
  char v22;
  id v23;
  __int128 v24;
  int64_t v25;

  v20 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v25 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v19 = a2;
  while (v6)
  {
    v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v10 = v9 | (v7 << 6);
LABEL_22:
    v14 = *(_QWORD *)(a1 + 56);
    v23 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    v24 = *(_OWORD *)(v14 + 16 * v10);
    v15 = v23;
    a2(&v21);

    if ((v22 & 1) == 0)
    {
      v16 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_1CCAC9BC0(0, v8[2] + 1, 1, v8, &qword_1EF9E3470);
      v18 = v8[2];
      v17 = v8[3];
      if (v18 >= v17 >> 1)
        v8 = sub_1CCAC9BC0((_QWORD *)(v17 > 1), v18 + 1, 1, v8, &qword_1EF9E3470);
      v8[2] = v18 + 1;
      v8[v18 + 4] = v16;
      a2 = v19;
    }
  }
  v11 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v11 >= v25)
    goto LABEL_28;
  v12 = *(_QWORD *)(v20 + 8 * v11);
  ++v7;
  if (v12)
    goto LABEL_21;
  v7 = v11 + 1;
  if (v11 + 1 >= v25)
    goto LABEL_28;
  v12 = *(_QWORD *)(v20 + 8 * v7);
  if (v12)
    goto LABEL_21;
  v7 = v11 + 2;
  if (v11 + 2 >= v25)
    goto LABEL_28;
  v12 = *(_QWORD *)(v20 + 8 * v7);
  if (v12)
    goto LABEL_21;
  v7 = v11 + 3;
  if (v11 + 3 >= v25)
    goto LABEL_28;
  v12 = *(_QWORD *)(v20 + 8 * v7);
  if (v12)
  {
LABEL_21:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v7 << 6);
    goto LABEL_22;
  }
  v13 = v11 + 4;
  if (v13 >= v25)
  {
LABEL_28:
    swift_release();
    return;
  }
  v12 = *(_QWORD *)(v20 + 8 * v13);
  if (v12)
  {
    v7 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v25)
      goto LABEL_28;
    v12 = *(_QWORD *)(v20 + 8 * v7);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_30:
  __break(1u);
}

unint64_t sub_1CCACD314()
{
  unint64_t result;

  result = qword_1EF9E3228;
  if (!qword_1EF9E3228)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPUnknownItemAlertState, &type metadata for FMIPUnknownItemAlertState);
    atomic_store(result, (unint64_t *)&qword_1EF9E3228);
  }
  return result;
}

uint64_t sub_1CCACD358(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_1CCA19B38(&qword_1EF9E31F0);
    v8 = a2();
    result = MEMORY[0x1D17B2068](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CCACD3C0()
{
  unint64_t result;

  result = qword_1EF9E3240;
  if (!qword_1EF9E3240)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPUnknownItemObservationType, &type metadata for FMIPUnknownItemObservationType);
    atomic_store(result, (unint64_t *)&qword_1EF9E3240);
  }
  return result;
}

unint64_t sub_1CCACD404()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E3248;
  if (!qword_1EF9E3248)
  {
    v1 = sub_1CCA19B38(&qword_1EF9E31D0);
    v2 = sub_1CC9CAA38(&qword_1EF9E3250, (uint64_t (*)(uint64_t))type metadata accessor for FMIPUnknownItemUTMetadata, (uint64_t)&protocol conformance descriptor for FMIPUnknownItemUTMetadata);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E3248);
  }
  return result;
}

unint64_t sub_1CCACD484()
{
  unint64_t result;

  result = qword_1EF9E3258;
  if (!qword_1EF9E3258)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemType, &type metadata for FMIPItemType);
    atomic_store(result, (unint64_t *)&qword_1EF9E3258);
  }
  return result;
}

unint64_t sub_1CCACD4CC()
{
  unint64_t result;

  result = qword_1EF9E3260;
  if (!qword_1EF9E3260)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemType, &type metadata for FMIPItemType);
    atomic_store(result, (unint64_t *)&qword_1EF9E3260);
  }
  return result;
}

unint64_t sub_1CCACD514()
{
  unint64_t result;

  result = qword_1EF9E3268;
  if (!qword_1EF9E3268)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemType, &type metadata for FMIPItemType);
    atomic_store(result, (unint64_t *)&qword_1EF9E3268);
  }
  return result;
}

unint64_t sub_1CCACD55C()
{
  unint64_t result;

  result = qword_1EF9E3270;
  if (!qword_1EF9E3270)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemType, &type metadata for FMIPItemType);
    atomic_store(result, (unint64_t *)&qword_1EF9E3270);
  }
  return result;
}

unint64_t sub_1CCACD5A4()
{
  unint64_t result;

  result = qword_1EF9E3278;
  if (!qword_1EF9E3278)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPUnknownItemAlertState, &type metadata for FMIPUnknownItemAlertState);
    atomic_store(result, (unint64_t *)&qword_1EF9E3278);
  }
  return result;
}

unint64_t sub_1CCACD5EC()
{
  unint64_t result;

  result = qword_1EF9E3280;
  if (!qword_1EF9E3280)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPUnknownItemObservationType, &type metadata for FMIPUnknownItemObservationType);
    atomic_store(result, (unint64_t *)&qword_1EF9E3280);
  }
  return result;
}

uint64_t sub_1CCACD630()
{
  return sub_1CC9CAA38(&qword_1EF9E3288, (uint64_t (*)(uint64_t))type metadata accessor for FMIPUnknownItem, (uint64_t)&protocol conformance descriptor for FMIPUnknownItem);
}

ValueMetadata *type metadata accessor for FMIPItemType()
{
  return &type metadata for FMIPItemType;
}

uint64_t storeEnumTagSinglePayload for FMIPUnknownItemAlertState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CCACD6B8 + 4 * byte_1CCB6CD63[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CCACD6EC + 4 * byte_1CCB6CD5E[v4]))();
}

uint64_t sub_1CCACD6EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCACD6F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCACD6FCLL);
  return result;
}

uint64_t sub_1CCACD708(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCACD710);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CCACD714(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCACD71C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPUnknownItemAlertState()
{
  return &type metadata for FMIPUnknownItemAlertState;
}

uint64_t storeEnumTagSinglePayload for FMIPUnknownItemObservationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCACD784 + 4 * byte_1CCB6CD6D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCACD7B8 + 4 * byte_1CCB6CD68[v4]))();
}

uint64_t sub_1CCACD7B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCACD7C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCACD7C8);
  return result;
}

uint64_t sub_1CCACD7D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCACD7DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCACD7E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCACD7E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPUnknownItemObservationType()
{
  return &type metadata for FMIPUnknownItemObservationType;
}

_QWORD *initializeBufferWithCopyOfBuffer for FMIPUnknownItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int (*v41)(_QWORD, _QWORD, _QWORD);
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v84;
  char *__dst;
  unsigned int (*v86)(_QWORD, _QWORD, _QWORD);
  void *v87;
  char *v88;
  unsigned int (*v89)(char *, uint64_t, uint64_t);
  char *v90;
  char *v91;
  char *__src;
  char *__srcb;
  unsigned int (*__srca)(char *, uint64_t, uint64_t);
  int *v95;
  char *v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return a1;
  }
  v7 = sub_1CCB63604();
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  v8 = a3[5];
  v9 = a3[6];
  v10 = (_QWORD *)((char *)a1 + v8);
  v11 = (_QWORD *)((char *)a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (_QWORD *)((char *)a1 + v9);
  v14 = (_QWORD *)((char *)a2 + v9);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  v17 = a3[9];
  v18 = (_OWORD *)((char *)a1 + v17);
  v19 = (_OWORD *)((char *)a2 + v17);
  type metadata accessor for FMIPProductType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v24 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
    v25 = *((_QWORD *)v24 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v25 + 48))(v19, 1, v24))
    {
      v26 = sub_1CCA14E90(&qword_1EF9DFB90);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      *v18 = *v19;
      v50 = *((_QWORD *)v19 + 3);
      *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
      *((_QWORD *)v18 + 3) = v50;
      v51 = *((_QWORD *)v19 + 5);
      *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
      *((_QWORD *)v18 + 5) = v51;
      v52 = *((_QWORD *)v19 + 7);
      *((_QWORD *)v18 + 6) = *((_QWORD *)v19 + 6);
      *((_QWORD *)v18 + 7) = v52;
      *((_QWORD *)v18 + 8) = *((_QWORD *)v19 + 8);
      *((_BYTE *)v18 + 72) = *((_BYTE *)v19 + 72);
      *((_BYTE *)v18 + 73) = *((_BYTE *)v19 + 73);
      v53 = v24[12];
      v90 = (char *)v19 + v53;
      __srcb = (char *)v18 + v53;
      v101 = v25;
      v54 = sub_1CCB63490();
      v55 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v55(__srcb, v90, v54);
      v55((char *)v18 + v24[13], (char *)v19 + v24[13], v54);
      v55((char *)v18 + v24[14], (char *)v19 + v24[14], v54);
      v55((char *)v18 + v24[15], (char *)v19 + v24[15], v54);
      v55((char *)v18 + v24[16], (char *)v19 + v24[16], v54);
      v55((char *)v18 + v24[17], (char *)v19 + v24[17], v54);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v101 + 56))(v18, 0, 1, v24);
    }
    goto LABEL_11;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *v18 = *v19;
    v22 = *((_QWORD *)v19 + 2);
    v21 = *((_QWORD *)v19 + 3);
  }
  else
  {
    v21 = *((_QWORD *)v19 + 3);
    if (!v21)
    {
      v56 = v19[3];
      v18[2] = v19[2];
      v18[3] = v56;
      *((_QWORD *)v18 + 8) = *((_QWORD *)v19 + 8);
      v57 = v19[1];
      *v18 = *v19;
      v18[1] = v57;
      goto LABEL_11;
    }
    *v18 = *v19;
    v22 = *((_QWORD *)v19 + 2);
  }
  *((_QWORD *)v18 + 2) = v22;
  *((_QWORD *)v18 + 3) = v21;
  v27 = *((_QWORD *)v19 + 5);
  *((_QWORD *)v18 + 4) = *((_QWORD *)v19 + 4);
  *((_QWORD *)v18 + 5) = v27;
  v28 = *((_QWORD *)v19 + 7);
  *((_QWORD *)v18 + 6) = *((_QWORD *)v19 + 6);
  *((_QWORD *)v18 + 7) = v28;
  *((_QWORD *)v18 + 8) = *((_QWORD *)v19 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_11:
  swift_storeEnumTagMultiPayload();
  v29 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  v32 = type metadata accessor for FMIPUnknownItemUTMetadata();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_1CCA14E90(&qword_1EF9E31D0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v99 = v33;
    v100 = v30;
    v35 = v31[1];
    *v30 = *v31;
    v30[1] = v35;
    v36 = v31[3];
    v30[2] = v31[2];
    v30[3] = v36;
    v37 = *(int *)(v32 + 24);
    v38 = (_QWORD *)((char *)v30 + v37);
    v39 = (_QWORD *)((char *)v31 + v37);
    v40 = type metadata accessor for FMIPUnknownItemProductMetadata();
    v98 = *(_QWORD *)(v40 - 8);
    v41 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v98 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v41(v39, 1, v40))
    {
      v42 = sub_1CCA14E90(&qword_1EF9E0C30);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      v43 = v100;
    }
    else
    {
      v86 = v41;
      v87 = (void *)v39[1];
      *v38 = *v39;
      v38[1] = v87;
      v44 = v39[3];
      v38[2] = v39[2];
      v38[3] = v44;
      *((_BYTE *)v38 + 32) = *((_BYTE *)v39 + 32);
      v38[5] = v39[5];
      *((_BYTE *)v38 + 48) = *((_BYTE *)v39 + 48);
      v95 = (int *)v40;
      v45 = *(int *)(v40 + 32);
      __dst = (char *)v38 + v45;
      __src = (char *)v39 + v45;
      v46 = sub_1CCB63490();
      v47 = *(_QWORD *)(v46 - 8);
      v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v89 = v48;
      v84 = v47;
      if (v48(__src, 1, v46))
      {
        v49 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(__dst, __src, v46);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v46);
      }
      v40 = (uint64_t)v95;
      v41 = v86;
      v58 = v95[9];
      v96 = (char *)v38 + v58;
      v59 = (char *)v39 + v58;
      if (v89(v59, 1, v46))
      {
        v60 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v96, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v96, v59, v46);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v96, 0, 1, v46);
      }
      v43 = v100;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v38, 0, 1, v40);
    }
    v61 = *(int *)(v32 + 28);
    v62 = (_QWORD *)((char *)v43 + v61);
    v63 = (_QWORD *)((char *)v31 + v61);
    if (v41(v63, 1, v40))
    {
      v64 = sub_1CCA14E90(&qword_1EF9E0C30);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      v65 = (int *)v40;
      v66 = v63[1];
      *v62 = *v63;
      v62[1] = v66;
      v67 = v63[3];
      v97 = v65;
      v62[2] = v63[2];
      v62[3] = v67;
      *((_BYTE *)v62 + 32) = *((_BYTE *)v63 + 32);
      v62[5] = v63[5];
      *((_BYTE *)v62 + 48) = *((_BYTE *)v63 + 48);
      v68 = v65[8];
      v88 = (char *)v62 + v68;
      v91 = (char *)v63 + v68;
      v69 = sub_1CCB63490();
      v70 = *(_QWORD *)(v69 - 8);
      v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __srca = v71;
      if (v71(v91, 1, v69))
      {
        v72 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v88, v91, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v88, v91, v69);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v88, 0, 1, v69);
      }
      v73 = v97[9];
      v74 = (char *)v62 + v73;
      v75 = (char *)v63 + v73;
      if (__srca(v75, 1, v69))
      {
        v76 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v74, v75, v69);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v74, 0, 1, v69);
      }
      v43 = v100;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v98 + 56))(v62, 0, 1, v97);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v43, 0, 1, v32);
  }
  v77 = a3[12];
  v78 = a3[13];
  v79 = *(void **)((char *)a2 + v77);
  *(_QWORD *)((char *)a1 + v77) = v79;
  *(_QWORD *)((char *)a1 + v78) = *(_QWORD *)((char *)a2 + v78);
  v80 = a3[15];
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  *((_BYTE *)a1 + v80) = *((_BYTE *)a2 + v80);
  v81 = a3[17];
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  *((_BYTE *)a1 + v81) = *((_BYTE *)a2 + v81);
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  v82 = v79;
  return a1;
}

void destroy for FMIPUnknownItem(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;

  v4 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = a1 + a2[9];
  type metadata accessor for FMIPProductType();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v7 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = v5 + v7[12];
      v9 = sub_1CCB63490();
      v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
      v10(v8, v9);
      v10(v5 + v7[13], v9);
      v10(v5 + v7[14], v9);
      v10(v5 + v7[15], v9);
      v10(v5 + v7[16], v9);
      v10(v5 + v7[17], v9);
    }
  }
  else if (EnumCaseMultiPayload == 1 || !EnumCaseMultiPayload && *(_QWORD *)(v5 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v11 = a1 + a2[11];
  v12 = type metadata accessor for FMIPUnknownItemUTMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v11 + *(int *)(v12 + 24);
    v14 = type metadata accessor for FMIPUnknownItemProductMetadata();
    v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48);
    if (!v15(v13, 1, v14))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = v13 + *(int *)(v14 + 32);
      v17 = sub_1CCB63490();
      v26 = *(_QWORD *)(v17 - 8);
      v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
      if (!v18(v16, 1, v17))
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v16, v17);
      v19 = v13 + *(int *)(v14 + 36);
      if (!v18(v19, 1, v17))
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v19, v17);
    }
    v20 = v11 + *(int *)(v12 + 28);
    if (!v15(v20, 1, v14))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 = v20 + *(int *)(v14 + 32);
      v22 = sub_1CCB63490();
      v23 = *(_QWORD *)(v22 - 8);
      v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
      if (!v24(v21, 1, v22))
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
      v25 = v20 + *(int *)(v14 + 36);
      if (!v24(v25, 1, v22))
        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v22);
    }
  }

}

uint64_t initializeWithCopy for FMIPUnknownItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int (*v39)(_QWORD, _QWORD, _QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v86;
  char *__dst;
  uint64_t (*v88)(char *, uint64_t, uint64_t);
  char *v89;
  void *v90;
  char *v91;
  char *v92;
  char *__src;
  char *__srcc;
  char *__srca;
  unsigned int (*__srcb)(char *, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;

  v6 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v16 = a3[9];
  v17 = (_OWORD *)(a1 + v16);
  v18 = (_OWORD *)(a2 + v16);
  type metadata accessor for FMIPProductType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v22 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
    v23 = *((_QWORD *)v22 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v23 + 48))(v18, 1, v22))
    {
      v24 = sub_1CCA14E90(&qword_1EF9DFB90);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      *v17 = *v18;
      v48 = *((_QWORD *)v18 + 3);
      *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
      *((_QWORD *)v17 + 3) = v48;
      v49 = *((_QWORD *)v18 + 5);
      *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
      *((_QWORD *)v17 + 5) = v49;
      v50 = *((_QWORD *)v18 + 7);
      *((_QWORD *)v17 + 6) = *((_QWORD *)v18 + 6);
      *((_QWORD *)v17 + 7) = v50;
      *((_QWORD *)v17 + 8) = *((_QWORD *)v18 + 8);
      *((_BYTE *)v17 + 72) = *((_BYTE *)v18 + 72);
      *((_BYTE *)v17 + 73) = *((_BYTE *)v18 + 73);
      v51 = v22[12];
      v91 = (char *)v18 + v51;
      __srcc = (char *)v17 + v51;
      v102 = v23;
      v52 = sub_1CCB63490();
      v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v53(__srcc, v91, v52);
      v53((char *)v17 + v22[13], (char *)v18 + v22[13], v52);
      v53((char *)v17 + v22[14], (char *)v18 + v22[14], v52);
      v53((char *)v17 + v22[15], (char *)v18 + v22[15], v52);
      v53((char *)v17 + v22[16], (char *)v18 + v22[16], v52);
      v53((char *)v17 + v22[17], (char *)v18 + v22[17], v52);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v102 + 56))(v17, 0, 1, v22);
    }
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      *v17 = *v18;
      v21 = *((_QWORD *)v18 + 2);
      v20 = *((_QWORD *)v18 + 3);
LABEL_8:
      *((_QWORD *)v17 + 2) = v21;
      *((_QWORD *)v17 + 3) = v20;
      v25 = *((_QWORD *)v18 + 5);
      *((_QWORD *)v17 + 4) = *((_QWORD *)v18 + 4);
      *((_QWORD *)v17 + 5) = v25;
      v26 = *((_QWORD *)v18 + 7);
      *((_QWORD *)v17 + 6) = *((_QWORD *)v18 + 6);
      *((_QWORD *)v17 + 7) = v26;
      *((_QWORD *)v17 + 8) = *((_QWORD *)v18 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    }
    v20 = *((_QWORD *)v18 + 3);
    if (v20)
    {
      *v17 = *v18;
      v21 = *((_QWORD *)v18 + 2);
      goto LABEL_8;
    }
    v54 = v18[3];
    v17[2] = v18[2];
    v17[3] = v54;
    *((_QWORD *)v17 + 8) = *((_QWORD *)v18 + 8);
    v55 = v18[1];
    *v17 = *v18;
    v17[1] = v55;
  }
LABEL_9:
  swift_storeEnumTagMultiPayload();
  v27 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  v30 = type metadata accessor for FMIPUnknownItemUTMetadata();
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    v32 = sub_1CCA14E90(&qword_1EF9E31D0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v100 = v31;
    v101 = v28;
    v33 = v29[1];
    *v28 = *v29;
    v28[1] = v33;
    v34 = v29[3];
    v28[2] = v29[2];
    v28[3] = v34;
    v35 = *(int *)(v30 + 24);
    v36 = (_QWORD *)((char *)v28 + v35);
    v37 = (_QWORD *)((char *)v29 + v35);
    v38 = type metadata accessor for FMIPUnknownItemProductMetadata();
    v99 = *(_QWORD *)(v38 - 8);
    v39 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v99 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v39(v37, 1, v38))
    {
      v40 = sub_1CCA14E90(&qword_1EF9E0C30);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v41 = v37[1];
      *v36 = *v37;
      v36[1] = v41;
      v42 = v37[3];
      v90 = v39;
      v36[2] = v37[2];
      v36[3] = v42;
      *((_BYTE *)v36 + 32) = *((_BYTE *)v37 + 32);
      v36[5] = v37[5];
      *((_BYTE *)v36 + 48) = *((_BYTE *)v37 + 48);
      v43 = *(int *)(v38 + 32);
      __dst = (char *)v36 + v43;
      __src = (char *)v37 + v43;
      v97 = v38;
      v44 = sub_1CCB63490();
      v45 = *(_QWORD *)(v44 - 8);
      v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v88 = v46;
      v86 = v45;
      if (v46(__src, 1, v44))
      {
        v47 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v45 + 16))(__dst, __src, v44);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(__dst, 0, 1, v44);
      }
      v38 = v97;
      v56 = *(int *)(v97 + 36);
      __srca = (char *)v36 + v56;
      v57 = (char *)v37 + v56;
      v58 = v88(v57, 1, v44);
      v59 = v44;
      v39 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v90;
      if (v58)
      {
        v60 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(__srca, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v86 + 16))(__srca, v57, v59);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(__srca, 0, 1, v59);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v36, 0, 1, v97);
    }
    v61 = v101;
    v62 = *(int *)(v30 + 28);
    v63 = (_QWORD *)((char *)v101 + v62);
    v64 = (_QWORD *)((char *)v29 + v62);
    if (v39(v64, 1, v38))
    {
      v65 = sub_1CCA14E90(&qword_1EF9E0C30);
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      v66 = v38;
      v67 = v64[1];
      *v63 = *v64;
      v63[1] = v67;
      v68 = v64[3];
      v98 = v66;
      v63[2] = v64[2];
      v63[3] = v68;
      *((_BYTE *)v63 + 32) = *((_BYTE *)v64 + 32);
      v63[5] = v64[5];
      *((_BYTE *)v63 + 48) = *((_BYTE *)v64 + 48);
      v69 = *(int *)(v66 + 32);
      v89 = (char *)v64 + v69;
      v92 = (char *)v63 + v69;
      v70 = sub_1CCB63490();
      v71 = *(_QWORD *)(v70 - 8);
      v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __srcb = v72;
      if (v72(v89, 1, v70))
      {
        v73 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v92, v89, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v92, v89, v70);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v92, 0, 1, v70);
      }
      v74 = v70;
      v75 = *(int *)(v98 + 36);
      v76 = (char *)v63 + v75;
      v77 = (char *)v64 + v75;
      if (__srcb(v77, 1, v74))
      {
        v78 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v76, v77, v74);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v76, 0, 1, v74);
      }
      v61 = v101;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v63, 0, 1, v98);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v61, 0, 1, v30);
  }
  v79 = a3[12];
  v80 = a3[13];
  v81 = *(void **)(a2 + v79);
  *(_QWORD *)(a1 + v79) = v81;
  *(_QWORD *)(a1 + v80) = *(_QWORD *)(a2 + v80);
  v82 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v82) = *(_BYTE *)(a2 + v82);
  v83 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v83) = *(_BYTE *)(a2 + v83);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  v84 = v81;
  return a1;
}

uint64_t assignWithCopy for FMIPUnknownItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int EnumCaseMultiPayload;
  int *v17;
  unsigned int (**v18)(_QWORD *, uint64_t, int *);
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  int v49;
  size_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  id v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t (*v97)(void);
  int v98;
  size_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  int v107;
  int v108;
  size_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int (*v121)(char *, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  char *v128;
  uint64_t v129;
  uint64_t (*v130)(void *, uint64_t, uint64_t);
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  unsigned int (*v143)(char *, uint64_t, uint64_t);
  char *v144;
  char *__dst;
  unsigned int (*__dsta)(char *, uint64_t, uint64_t);
  char *__dstb;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *__srcd;
  char *__src;
  char *__srca;
  char *__srcb;
  char *__srcc;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int (*v164)(char *, uint64_t, uint64_t);
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t (*v169)(uint64_t, uint64_t, uint64_t);
  char *v170;
  void *v171;
  int *v172;
  char *v173;
  void *v174;
  _QWORD *v175;

  v6 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v13 = a3[9];
    v14 = (_QWORD *)(a1 + v13);
    v15 = (_QWORD *)(a2 + v13);
    sub_1CCA0BF30(a1 + v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
    type metadata accessor for FMIPProductType();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v17 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
      v18 = (unsigned int (**)(_QWORD *, uint64_t, int *))*((_QWORD *)v17 - 1);
      if (v18[6](v15, 1, v17))
      {
        v19 = sub_1CCA14E90(&qword_1EF9DFB90);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        *v14 = *v15;
        v14[1] = v15[1];
        v14[2] = v15[2];
        v14[3] = v15[3];
        v14[4] = v15[4];
        v14[5] = v15[5];
        v14[6] = v15[6];
        v14[7] = v15[7];
        v14[8] = v15[8];
        *((_BYTE *)v14 + 72) = *((_BYTE *)v15 + 72);
        *((_BYTE *)v14 + 73) = *((_BYTE *)v15 + 73);
        v23 = v17[12];
        __srcd = (char *)v15 + v23;
        v156 = (char *)v14 + v23;
        v171 = v18;
        v24 = sub_1CCB63490();
        v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v25(v156, __srcd, v24);
        v25((char *)v14 + v17[13], (char *)v15 + v17[13], v24);
        v25((char *)v14 + v17[14], (char *)v15 + v17[14], v24);
        v25((char *)v14 + v17[15], (char *)v15 + v17[15], v24);
        v25((char *)v14 + v17[16], (char *)v15 + v17[16], v24);
        v25((char *)v14 + v17[17], (char *)v15 + v17[17], v24);
        (*((void (**)(_QWORD *, _QWORD, uint64_t, int *))v171 + 7))(v14, 0, 1, v17);
      }
    }
    else if (EnumCaseMultiPayload == 1 || v15[3])
    {
      *v14 = *v15;
      v14[1] = v15[1];
      v14[2] = v15[2];
      v14[3] = v15[3];
      v14[4] = v15[4];
      v14[5] = v15[5];
      v14[6] = v15[6];
      v14[7] = v15[7];
      v14[8] = v15[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v20 = *((_OWORD *)v15 + 1);
      v21 = *((_OWORD *)v15 + 2);
      v22 = *((_OWORD *)v15 + 3);
      v14[8] = v15[8];
      *((_OWORD *)v14 + 2) = v21;
      *((_OWORD *)v14 + 3) = v22;
      *((_OWORD *)v14 + 1) = v20;
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v26 = a3[11];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (char *)(a2 + v26);
  v29 = type metadata accessor for FMIPUnknownItemUTMetadata();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31((char *)v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (!v32)
  {
    if (v33)
    {
      sub_1CCA0BF30((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
      goto LABEL_17;
    }
    *v27 = *(_QWORD *)v28;
    v27[1] = *((_QWORD *)v28 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v27[2] = *((_QWORD *)v28 + 2);
    v27[3] = *((_QWORD *)v28 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v44 = *(int *)(v29 + 24);
    v45 = (char *)v27 + v44;
    v46 = &v28[v44];
    v47 = type metadata accessor for FMIPUnknownItemProductMetadata();
    v158 = *(_QWORD *)(v47 - 8);
    v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v158 + 48);
    v165 = v45;
    LODWORD(v45) = v48(v45, 1, v47);
    v169 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v48;
    v173 = v46;
    v49 = v48(v46, 1, v47);
    if ((_DWORD)v45)
    {
      if (v49)
      {
        v50 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1EF9E0C30) - 8) + 64);
        v51 = v165;
LABEL_26:
        memcpy(v51, v46, v50);
        goto LABEL_67;
      }
      *(_QWORD *)v165 = *(_QWORD *)v46;
      *((_QWORD *)v165 + 1) = *((_QWORD *)v46 + 1);
      *((_QWORD *)v165 + 2) = *((_QWORD *)v46 + 2);
      v60 = *((_QWORD *)v46 + 3);
      v165[32] = v46[32];
      *((_QWORD *)v165 + 3) = v60;
      v61 = *((_QWORD *)v46 + 5);
      v165[48] = v46[48];
      *((_QWORD *)v165 + 5) = v61;
      v160 = v47;
      v62 = *(int *)(v47 + 32);
      v144 = &v165[v62];
      __srca = &v46[v62];
      v63 = sub_1CCB63490();
      v64 = *(_QWORD *)(v63 - 8);
      v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __dsta = v65;
      v149 = v63;
      v142 = v64;
      if (v65(__srca, 1, v63))
      {
        v66 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v144, __srca, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v144, __srca, v63);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v144, 0, 1, v63);
      }
      v47 = v160;
      v101 = *(int *)(v160 + 36);
      v102 = &v165[v101];
      v103 = &v173[v101];
      if (__dsta(&v173[v101], 1, v149))
      {
        v104 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v142 + 16))(v102, v103, v149);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v142 + 56))(v102, 0, 1, v149);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v165, 0, 1, v160);
LABEL_67:
      v111 = *(int *)(v29 + 28);
      v112 = (uint64_t)v27 + v111;
      v113 = &v28[v111];
      v114 = v169(v112, 1, v47);
      v115 = v169((uint64_t)v113, 1, v47);
      if (v114)
      {
        if (!v115)
        {
          *(_QWORD *)v112 = *(_QWORD *)v113;
          *(_QWORD *)(v112 + 8) = *((_QWORD *)v113 + 1);
          *(_QWORD *)(v112 + 16) = *((_QWORD *)v113 + 2);
          v116 = *((_QWORD *)v113 + 3);
          *(_BYTE *)(v112 + 32) = v113[32];
          *(_QWORD *)(v112 + 24) = v116;
          v117 = *((_QWORD *)v113 + 5);
          *(_BYTE *)(v112 + 48) = v113[48];
          *(_QWORD *)(v112 + 40) = v117;
          v118 = *(int *)(v47 + 32);
          v170 = &v113[v118];
          v174 = (void *)(v112 + v118);
          v119 = sub_1CCB63490();
          v120 = *(_QWORD *)(v119 - 8);
          v121 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v120 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v121(v170, 1, v119))
          {
            v122 = sub_1CCA14E90(&qword_1ED8A8EE8);
            memcpy(v174, v170, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, char *, uint64_t))(v120 + 16))(v174, v170, v119);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v120 + 56))(v174, 0, 1, v119);
          }
          v133 = v120;
          v134 = *(int *)(v47 + 36);
          v135 = (void *)(v112 + v134);
          v136 = &v113[v134];
          if (v121(v136, 1, v119))
          {
            v137 = sub_1CCA14E90(&qword_1ED8A8EE8);
            memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, char *, uint64_t))(v133 + 16))(v135, v136, v119);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v133 + 56))(v135, 0, 1, v119);
          }
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v158 + 56))(v112, 0, 1, v47);
          goto LABEL_44;
        }
        goto LABEL_73;
      }
      if (v115)
      {
        sub_1CCA0BF30(v112, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
LABEL_73:
        v123 = &qword_1EF9E0C30;
LABEL_74:
        v41 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(v123) - 8) + 64);
        v42 = (void *)v112;
        v43 = v113;
        goto LABEL_18;
      }
      *(_QWORD *)v112 = *(_QWORD *)v113;
      *(_QWORD *)(v112 + 8) = *((_QWORD *)v113 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v112 + 16) = *((_QWORD *)v113 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v124 = *((_QWORD *)v113 + 3);
      *(_BYTE *)(v112 + 32) = v113[32];
      *(_QWORD *)(v112 + 24) = v124;
      v125 = *((_QWORD *)v113 + 5);
      *(_BYTE *)(v112 + 48) = v113[48];
      *(_QWORD *)(v112 + 40) = v125;
      v163 = v47;
      v126 = *(int *)(v47 + 32);
      v127 = (void *)(v112 + v126);
      v128 = &v113[v126];
      v129 = sub_1CCB63490();
      v175 = *(_QWORD **)(v129 - 8);
      v130 = (uint64_t (*)(void *, uint64_t, uint64_t))v175[6];
      v131 = v130(v127, 1, v129);
      v132 = v130(v128, 1, v129);
      if (v131)
      {
        if (!v132)
        {
          ((void (*)(void *, char *, uint64_t))v175[2])(v127, v128, v129);
          ((void (*)(void *, _QWORD, uint64_t, uint64_t))v175[7])(v127, 0, 1, v129);
LABEL_86:
          v139 = *(int *)(v163 + 36);
          v112 += v139;
          v113 += v139;
          v140 = v130((void *)v112, 1, v129);
          v141 = v130(v113, 1, v129);
          if (v140)
          {
            if (!v141)
            {
              ((void (*)(uint64_t, char *, uint64_t))v175[2])(v112, v113, v129);
              ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v175[7])(v112, 0, 1, v129);
              goto LABEL_44;
            }
          }
          else
          {
            if (!v141)
            {
              ((void (*)(uint64_t, char *, uint64_t))v175[3])(v112, v113, v129);
              goto LABEL_44;
            }
            ((void (*)(uint64_t, uint64_t))v175[1])(v112, v129);
          }
          v123 = &qword_1ED8A8EE8;
          goto LABEL_74;
        }
      }
      else
      {
        if (!v132)
        {
          ((void (*)(void *, char *, uint64_t))v175[3])(v127, v128, v129);
          goto LABEL_86;
        }
        ((void (*)(void *, uint64_t))v175[1])(v127, v129);
      }
      v138 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
      goto LABEL_86;
    }
    if (v49)
    {
      sub_1CCA0BF30((uint64_t)v165, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
      v50 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1EF9E0C30) - 8) + 64);
      v51 = v165;
      goto LABEL_26;
    }
    *(_QWORD *)v165 = *(_QWORD *)v46;
    *((_QWORD *)v165 + 1) = *((_QWORD *)v46 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v165 + 2) = *((_QWORD *)v46 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v92 = *((_QWORD *)v46 + 3);
    v165[32] = v46[32];
    *((_QWORD *)v165 + 3) = v92;
    v93 = *((_QWORD *)v46 + 5);
    v165[48] = v46[48];
    *((_QWORD *)v165 + 5) = v93;
    v162 = v47;
    v94 = *(int *)(v47 + 32);
    v95 = &v165[v94];
    __srcc = &v46[v94];
    v96 = sub_1CCB63490();
    __dstb = v95;
    v150 = *(_QWORD *)(v96 - 8);
    v97 = *(uint64_t (**)(void))(v150 + 48);
    LODWORD(v95) = ((uint64_t (*)(char *, uint64_t, uint64_t))v97)(v95, 1, v96);
    v98 = ((uint64_t (*)(char *, uint64_t, uint64_t))v97)(__srcc, 1, v96);
    if ((_DWORD)v95)
    {
      if (v98)
      {
        v99 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1ED8A8EE8) - 8) + 64);
        v100 = __dstb;
LABEL_55:
        memcpy(v100, __srcc, v99);
        goto LABEL_58;
      }
      (*(void (**)(char *, char *, uint64_t))(v150 + 16))(__dstb, __srcc, v96);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v150 + 56))(__dstb, 0, 1, v96);
    }
    else
    {
      if (v98)
      {
        (*(void (**)(char *, uint64_t))(v150 + 8))(__dstb, v96);
        v99 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1ED8A8EE8) - 8) + 64);
        v100 = __dstb;
        goto LABEL_55;
      }
      (*(void (**)(char *, char *, uint64_t))(v150 + 24))(__dstb, __srcc, v96);
    }
LABEL_58:
    v105 = *(int *)(v162 + 36);
    v106 = &v46[v105];
    v167 = &v165[v105];
    v107 = v97();
    v108 = ((uint64_t (*)(char *, uint64_t, uint64_t))v97)(v106, 1, v96);
    if (v107)
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v150 + 16))(v167, v106, v96);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v150 + 56))(v167, 0, 1, v96);
        goto LABEL_66;
      }
      v109 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1ED8A8EE8) - 8) + 64);
      v110 = v167;
    }
    else
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v150 + 24))(v167, v106, v96);
        goto LABEL_66;
      }
      (*(void (**)(char *, uint64_t))(v150 + 8))(v167, v96);
      v109 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1ED8A8EE8) - 8) + 64);
      v110 = v167;
    }
    memcpy(v110, v106, v109);
LABEL_66:
    v47 = v162;
    goto LABEL_67;
  }
  if (v33)
  {
LABEL_17:
    v41 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1EF9E31D0) - 8) + 64);
    v42 = v27;
    v43 = v28;
LABEL_18:
    memcpy(v42, v43, v41);
    goto LABEL_44;
  }
  v168 = v30;
  v172 = (int *)v29;
  *v27 = *(_QWORD *)v28;
  v27[1] = *((_QWORD *)v28 + 1);
  v27[2] = *((_QWORD *)v28 + 2);
  v27[3] = *((_QWORD *)v28 + 3);
  v34 = *(int *)(v29 + 24);
  v35 = (_QWORD *)((char *)v27 + v34);
  v36 = &v28[v34];
  v37 = type metadata accessor for FMIPUnknownItemProductMetadata();
  v157 = *(_QWORD *)(v37 - 8);
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v157 + 48);
  v39 = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v164 = v38;
  if (v38(v36, 1, v39))
  {
    v40 = sub_1CCA14E90(&qword_1EF9E0C30);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    *v35 = *(_QWORD *)v36;
    v35[1] = *((_QWORD *)v36 + 1);
    v35[2] = *((_QWORD *)v36 + 2);
    v52 = *((_QWORD *)v36 + 3);
    *((_BYTE *)v35 + 32) = v36[32];
    v35[3] = v52;
    v53 = *((_QWORD *)v36 + 5);
    *((_BYTE *)v35 + 48) = v36[48];
    v35[5] = v53;
    v159 = v39;
    v54 = *(int *)(v39 + 32);
    __dst = (char *)v35 + v54;
    __src = &v36[v54];
    v55 = sub_1CCB63490();
    v56 = *(_QWORD *)(v55 - 8);
    v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
    v58 = v55;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v148 = v58;
    v143 = v57;
    if (v57(__src, 1, v58))
    {
      v59 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v56 + 16))(__dst, __src, v58);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(__dst, 0, 1, v58);
    }
    v39 = v159;
    v67 = *(int *)(v159 + 36);
    v68 = (char *)v35 + v67;
    v69 = &v36[v67];
    if (v143(v69, 1, v148))
    {
      v70 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v68, v69, v148);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v68, 0, 1, v148);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v35, 0, 1, v159);
  }
  v71 = v168;
  v72 = v172[7];
  v73 = (_QWORD *)((char *)v27 + v72);
  v74 = &v28[v72];
  if (v164(v74, 1, v39))
  {
    v75 = sub_1CCA14E90(&qword_1EF9E0C30);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    *v73 = *(_QWORD *)v74;
    v73[1] = *((_QWORD *)v74 + 1);
    v73[2] = *((_QWORD *)v74 + 2);
    v76 = *((_QWORD *)v74 + 3);
    *((_BYTE *)v73 + 32) = v74[32];
    v73[3] = v76;
    v77 = *((_QWORD *)v74 + 5);
    *((_BYTE *)v73 + 48) = v74[48];
    v73[5] = v77;
    v78 = *(int *)(v39 + 32);
    v161 = v39;
    v166 = (char *)v73 + v78;
    __srcb = &v74[v78];
    v79 = sub_1CCB63490();
    v80 = *(_QWORD *)(v79 - 8);
    v81 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v81(__srcb, 1, v79))
    {
      v82 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v166, __srcb, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v166, __srcb, v79);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v166, 0, 1, v79);
    }
    v83 = *(int *)(v39 + 36);
    v84 = (char *)v73 + v83;
    v85 = &v74[v83];
    if (v81(v85, 1, v79))
    {
      v86 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v84, v85, v79);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v84, 0, 1, v79);
    }
    v71 = v168;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v73, 0, 1, v161);
  }
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v71 + 56))((char *)v27, 0, 1, v172);
LABEL_44:
  v87 = a3[12];
  v88 = *(void **)(a1 + v87);
  v89 = *(void **)(a2 + v87);
  *(_QWORD *)(a1 + v87) = v89;
  v90 = v89;

  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t initializeWithTake for FMIPUnknownItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  int *v13;
  unsigned int (**v14)(_OWORD *, uint64_t, int *);
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  void *__src;
  unsigned int (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  char *__dst;
  char *__dsta;
  void *__dstb;
  uint64_t v72;
  unsigned int (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void *v78;
  unsigned int (*v79)(_OWORD *, uint64_t, uint64_t);
  char *v80;

  v6 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[9];
  v10 = (_OWORD *)(a1 + v9);
  v11 = (_OWORD *)(a2 + v9);
  v12 = type metadata accessor for FMIPProductType();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v13 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
    v14 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((_QWORD *)v13 - 1);
    if (v14[6](v11, 1, v13))
    {
      v15 = sub_1CCA14E90(&qword_1EF9DFB90);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v16 = v11[1];
      *v10 = *v11;
      v10[1] = v16;
      v17 = v11[3];
      v10[2] = v11[2];
      v10[3] = v17;
      *((_QWORD *)v10 + 8) = *((_QWORD *)v11 + 8);
      *((_WORD *)v10 + 36) = *((_WORD *)v11 + 36);
      v18 = v13[12];
      v76 = (char *)v10 + v18;
      v19 = (char *)v11 + v18;
      v20 = sub_1CCB63490();
      v78 = v14;
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
      v21(v76, v19, v20);
      v21((char *)v10 + v13[13], (char *)v11 + v13[13], v20);
      v21((char *)v10 + v13[14], (char *)v11 + v13[14], v20);
      v21((char *)v10 + v13[15], (char *)v11 + v13[15], v20);
      v21((char *)v10 + v13[16], (char *)v11 + v13[16], v20);
      v21((char *)v10 + v13[17], (char *)v11 + v13[17], v20);
      (*((void (**)(_OWORD *, _QWORD, uint64_t, int *))v78 + 7))(v10, 0, 1, v13);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  v22 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v23 = (_OWORD *)(a1 + v22);
  v24 = (_OWORD *)(a2 + v22);
  v25 = type metadata accessor for FMIPUnknownItemUTMetadata();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = sub_1CCA14E90(&qword_1EF9E31D0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v28 = v24[1];
    *v23 = *v24;
    v23[1] = v28;
    v29 = *(int *)(v25 + 24);
    v30 = (_OWORD *)((char *)v23 + v29);
    v31 = (_OWORD *)((char *)v24 + v29);
    v32 = type metadata accessor for FMIPUnknownItemProductMetadata();
    v77 = *(_QWORD *)(v32 - 8);
    v79 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v77 + 48);
    if (v79(v31, 1, v32))
    {
      v33 = sub_1CCA14E90(&qword_1EF9E0C30);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v72 = v32;
      v74 = v26;
      *v30 = *v31;
      v34 = *((_QWORD *)v31 + 3);
      *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
      *((_QWORD *)v30 + 3) = v34;
      *((_BYTE *)v30 + 32) = *((_BYTE *)v31 + 32);
      *((_QWORD *)v30 + 5) = *((_QWORD *)v31 + 5);
      *((_BYTE *)v30 + 48) = *((_BYTE *)v31 + 48);
      v35 = *(int *)(v32 + 32);
      __dst = (char *)v30 + v35;
      v36 = (char *)v31 + v35;
      v37 = sub_1CCB63490();
      v38 = *(_QWORD *)(v37 - 8);
      __src = v36;
      v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
      v39 = v36;
      v40 = v37;
      v65 = v38;
      if (v67(v39, 1, v37))
      {
        v41 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(v38 + 32))(__dst, __src, v40);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v40);
      }
      v32 = v72;
      v42 = *(int *)(v72 + 36);
      __dsta = (char *)v30 + v42;
      v43 = (char *)v31 + v42;
      if (v67(v43, 1, v40))
      {
        v44 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(__dsta, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v65 + 32))(__dsta, v43, v40);
        v32 = v72;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(__dsta, 0, 1, v40);
      }
      v26 = v74;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v30, 0, 1, v32);
    }
    v45 = *(int *)(v25 + 28);
    v46 = (_OWORD *)((char *)v23 + v45);
    v47 = (_OWORD *)((char *)v24 + v45);
    if (v79(v47, 1, v32))
    {
      v48 = sub_1CCA14E90(&qword_1EF9E0C30);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      v75 = v26;
      *v46 = *v47;
      v49 = *((_QWORD *)v47 + 3);
      *((_QWORD *)v46 + 2) = *((_QWORD *)v47 + 2);
      *((_QWORD *)v46 + 3) = v49;
      *((_BYTE *)v46 + 32) = *((_BYTE *)v47 + 32);
      *((_QWORD *)v46 + 5) = *((_QWORD *)v47 + 5);
      *((_BYTE *)v46 + 48) = *((_BYTE *)v47 + 48);
      v50 = *(int *)(v32 + 32);
      v80 = (char *)v46 + v50;
      v51 = (char *)v47 + v50;
      v52 = sub_1CCB63490();
      v53 = *(_QWORD *)(v52 - 8);
      __dstb = v51;
      v73 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
      v54 = v51;
      v55 = v52;
      v68 = v53;
      if (v73(v54, 1, v52))
      {
        v56 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v80, __dstb, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(v53 + 32))(v80, __dstb, v55);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v80, 0, 1, v55);
      }
      v57 = *(int *)(v32 + 36);
      v58 = (char *)v46 + v57;
      v59 = (char *)v47 + v57;
      if (v73(v59, 1, v55))
      {
        v60 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v58, v59, v55);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v58, 0, 1, v55);
      }
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v46, 0, 1, v32);
      v26 = v75;
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  v61 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v61) = *(_QWORD *)(a2 + v61);
  v62 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v62) = *(_BYTE *)(a2 + v62);
  v63 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v63) = *(_BYTE *)(a2 + v63);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t assignWithTake for FMIPUnknownItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  int *v22;
  unsigned int (**v23)(_OWORD *, uint64_t, int *);
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  size_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t (*v102)(char *, uint64_t, uint64_t);
  int v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int (*v129)(char *, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  char *v135;
  uint64_t v136;
  uint64_t (*v137)(void *, uint64_t, uint64_t);
  int v138;
  int v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int (*v152)(char *, uint64_t, uint64_t);
  unsigned int (*v153)(char *, uint64_t, uint64_t);
  uint64_t v154;
  void *__src;
  char *__srca;
  void (**__srcb)(void *, const void *, _QWORD);
  void *__srcc;
  uint64_t v159;
  uint64_t v160;
  unsigned int (*v161)(char *, uint64_t, uint64_t);
  char *__dst;
  char *__dsta;
  void *__dstb;
  uint64_t v165;
  uint64_t (*v166)(uint64_t, uint64_t, uint64_t);
  char *v167;
  unsigned int (*v168)(char *, uint64_t, uint64_t);
  int *v169;
  char *v170;
  int *v171;
  int *v172;
  int *v173;
  void *v174;
  char *v175;
  int *v176;
  int *v177;
  _QWORD *v178;

  v6 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v18 = a3[9];
    v19 = (_OWORD *)(a1 + v18);
    v20 = (_OWORD *)(a2 + v18);
    sub_1CCA0BF30(a1 + v18, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
    v21 = type metadata accessor for FMIPProductType();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v22 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
      v23 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((_QWORD *)v22 - 1);
      if (v23[6](v20, 1, v22))
      {
        v24 = sub_1CCA14E90(&qword_1EF9DFB90);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        v25 = v20[1];
        *v19 = *v20;
        v19[1] = v25;
        v26 = v20[3];
        v19[2] = v20[2];
        v19[3] = v26;
        *((_QWORD *)v19 + 8) = *((_QWORD *)v20 + 8);
        *((_WORD *)v19 + 36) = *((_WORD *)v20 + 36);
        v27 = v22[12];
        v167 = (char *)v19 + v27;
        v28 = (char *)v20 + v27;
        v29 = sub_1CCB63490();
        v174 = v23;
        v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32);
        v30(v167, v28, v29);
        v30((char *)v19 + v22[13], (char *)v20 + v22[13], v29);
        v30((char *)v19 + v22[14], (char *)v20 + v22[14], v29);
        v30((char *)v19 + v22[15], (char *)v20 + v22[15], v29);
        v30((char *)v19 + v22[16], (char *)v20 + v22[16], v29);
        v30((char *)v19 + v22[17], (char *)v20 + v22[17], v29);
        (*((void (**)(_OWORD *, _QWORD, uint64_t, int *))v174 + 7))(v19, 0, 1, v22);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
  }
  v31 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v32 = (char *)(a1 + v31);
  v33 = (char *)(a2 + v31);
  v34 = type metadata accessor for FMIPUnknownItemUTMetadata();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (v38)
    {
      sub_1CCA0BF30((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemUTMetadata);
      goto LABEL_14;
    }
    v48 = *((_QWORD *)v33 + 1);
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *((_QWORD *)v32 + 1) = v48;
    swift_bridgeObjectRelease();
    v49 = *((_QWORD *)v33 + 3);
    *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
    *((_QWORD *)v32 + 3) = v49;
    swift_bridgeObjectRelease();
    v50 = *(int *)(v34 + 24);
    v51 = &v32[v50];
    v52 = &v33[v50];
    v53 = type metadata accessor for FMIPUnknownItemProductMetadata();
    v159 = *(_QWORD *)(v53 - 8);
    __dst = v51;
    v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v159 + 48);
    LODWORD(v51) = v54(v51, 1, v53);
    v175 = v52;
    v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v54;
    v55 = v54(v52, 1, v53);
    if ((_DWORD)v51)
    {
      if (v55)
      {
        v56 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1EF9E0C30) - 8) + 64);
        v57 = __dst;
LABEL_23:
        memcpy(v57, v52, v56);
        goto LABEL_61;
      }
      *(_OWORD *)__dst = *(_OWORD *)v52;
      v66 = *((_QWORD *)v52 + 3);
      *((_QWORD *)__dst + 2) = *((_QWORD *)v52 + 2);
      *((_QWORD *)__dst + 3) = v66;
      __dst[32] = v52[32];
      *((_QWORD *)__dst + 5) = *((_QWORD *)v52 + 5);
      __dst[48] = v52[48];
      v169 = (int *)v53;
      v67 = *(int *)(v53 + 32);
      __srca = &__dst[v67];
      v68 = &v52[v67];
      v69 = sub_1CCB63490();
      v70 = *(_QWORD *)(v69 - 8);
      v153 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
      v151 = v70;
      if (v153(v68, 1, v69))
      {
        v71 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(__srca, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v70 + 32))(__srca, v68, v69);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(__srca, 0, 1, v69);
      }
      v105 = v169[9];
      v106 = &__dst[v105];
      v107 = &v175[v105];
      if (v153(&v175[v105], 1, v69))
      {
        v108 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v151 + 32))(v106, v107, v69);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v151 + 56))(v106, 0, 1, v69);
      }
      v53 = (uint64_t)v169;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v159 + 56))(__dst, 0, 1, v169);
LABEL_61:
      v118 = *(int *)(v34 + 28);
      v119 = (uint64_t)&v32[v118];
      v120 = &v33[v118];
      v121 = v166(v119, 1, v53);
      v122 = v166((uint64_t)v120, 1, v53);
      if (v121)
      {
        if (!v122)
        {
          *(_OWORD *)v119 = *(_OWORD *)v120;
          v123 = *((_QWORD *)v120 + 3);
          *(_QWORD *)(v119 + 16) = *((_QWORD *)v120 + 2);
          *(_QWORD *)(v119 + 24) = v123;
          *(_BYTE *)(v119 + 32) = v120[32];
          *(_QWORD *)(v119 + 40) = *((_QWORD *)v120 + 5);
          *(_BYTE *)(v119 + 48) = v120[48];
          v172 = (int *)v53;
          v124 = *(int *)(v53 + 32);
          v125 = (void *)(v119 + v124);
          v126 = &v120[v124];
          v127 = sub_1CCB63490();
          v128 = *(_QWORD *)(v127 - 8);
          v129 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48);
          if (v129(v126, 1, v127))
          {
            v130 = sub_1CCA14E90(&qword_1ED8A8EE8);
            memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, char *, uint64_t))(v128 + 32))(v125, v126, v127);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
          }
          v140 = v172[9];
          v141 = (void *)(v119 + v140);
          v142 = &v120[v140];
          if (v129(v142, 1, v127))
          {
            v143 = sub_1CCA14E90(&qword_1ED8A8EE8);
            memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, char *, uint64_t))(v128 + 32))(v141, v142, v127);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v141, 0, 1, v127);
          }
          (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v159 + 56))(v119, 0, 1, v172);
          goto LABEL_41;
        }
        goto LABEL_67;
      }
      if (v122)
      {
        sub_1CCA0BF30(v119, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
LABEL_67:
        v131 = &qword_1EF9E0C30;
LABEL_68:
        v45 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(v131) - 8) + 64);
        v46 = (void *)v119;
        v47 = v120;
        goto LABEL_15;
      }
      v132 = *((_QWORD *)v120 + 1);
      *(_QWORD *)v119 = *(_QWORD *)v120;
      *(_QWORD *)(v119 + 8) = v132;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v119 + 16) = *((_QWORD *)v120 + 2);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v119 + 24) = *((_QWORD *)v120 + 3);
      *(_BYTE *)(v119 + 32) = v120[32];
      *(_QWORD *)(v119 + 40) = *((_QWORD *)v120 + 5);
      *(_BYTE *)(v119 + 48) = v120[48];
      v173 = (int *)v53;
      v133 = *(int *)(v53 + 32);
      v134 = (void *)(v119 + v133);
      v135 = &v120[v133];
      v136 = sub_1CCB63490();
      v178 = *(_QWORD **)(v136 - 8);
      v137 = (uint64_t (*)(void *, uint64_t, uint64_t))v178[6];
      v138 = v137(v134, 1, v136);
      v139 = v137(v135, 1, v136);
      if (v138)
      {
        if (!v139)
        {
          ((void (*)(void *, char *, uint64_t))v178[4])(v134, v135, v136);
          ((void (*)(void *, _QWORD, uint64_t, uint64_t))v178[7])(v134, 0, 1, v136);
LABEL_80:
          v145 = v173[9];
          v119 += v145;
          v120 += v145;
          v146 = v137((void *)v119, 1, v136);
          v147 = v137(v120, 1, v136);
          if (v146)
          {
            if (!v147)
            {
              ((void (*)(uint64_t, char *, uint64_t))v178[4])(v119, v120, v136);
              ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v178[7])(v119, 0, 1, v136);
              goto LABEL_41;
            }
          }
          else
          {
            if (!v147)
            {
              ((void (*)(uint64_t, char *, uint64_t))v178[5])(v119, v120, v136);
              goto LABEL_41;
            }
            ((void (*)(uint64_t, uint64_t))v178[1])(v119, v136);
          }
          v131 = &qword_1ED8A8EE8;
          goto LABEL_68;
        }
      }
      else
      {
        if (!v139)
        {
          ((void (*)(void *, char *, uint64_t))v178[5])(v134, v135, v136);
          goto LABEL_80;
        }
        ((void (*)(void *, uint64_t))v178[1])(v134, v136);
      }
      v144 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
      goto LABEL_80;
    }
    if (v55)
    {
      sub_1CCA0BF30((uint64_t)__dst, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItemProductMetadata);
      v56 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1EF9E0C30) - 8) + 64);
      v57 = __dst;
      goto LABEL_23;
    }
    v98 = *((_QWORD *)v52 + 1);
    *(_QWORD *)__dst = *(_QWORD *)v52;
    *((_QWORD *)__dst + 1) = v98;
    swift_bridgeObjectRelease();
    *((_QWORD *)__dst + 2) = *((_QWORD *)v52 + 2);
    swift_bridgeObjectRelease();
    *((_QWORD *)__dst + 3) = *((_QWORD *)v52 + 3);
    __dst[32] = v52[32];
    *((_QWORD *)__dst + 5) = *((_QWORD *)v52 + 5);
    __dst[48] = v52[48];
    v171 = (int *)v53;
    v99 = *(int *)(v53 + 32);
    v100 = &__dst[v99];
    v149 = &v52[v99];
    v101 = sub_1CCB63490();
    v154 = *(_QWORD *)(v101 - 8);
    v102 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v154 + 48);
    v148 = v102(v100, 1, v101);
    __srcc = (void *)v101;
    v103 = v102(v149, 1, v101);
    if (v148)
    {
      if (v103)
      {
        v104 = sub_1CCA14E90(&qword_1ED8A8EE8);
        memcpy(v100, v149, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v154 + 32))(v100, v149, v101);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v154 + 56))(v100, 0, 1, v101);
      }
    }
    else if (v103)
    {
      (*(void (**)(char *, uint64_t))(v154 + 8))(v100, v101);
      v109 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v100, v149, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v154 + 40))(v100, v149, v101);
    }
    v110 = v171[9];
    v111 = &__dst[v110];
    v112 = &v52[v110];
    v113 = v102(&__dst[v110], 1, v101);
    v114 = v101;
    v115 = v113;
    v116 = v102(v112, 1, v114);
    if (v115)
    {
      if (!v116)
      {
        (*(void (**)(char *, char *, void *))(v154 + 32))(v111, v112, __srcc);
        (*(void (**)(char *, _QWORD, uint64_t, void *))(v154 + 56))(v111, 0, 1, __srcc);
LABEL_60:
        v53 = (uint64_t)v171;
        goto LABEL_61;
      }
    }
    else
    {
      if (!v116)
      {
        (*(void (**)(char *, char *, void *))(v154 + 40))(v111, v112, __srcc);
        goto LABEL_60;
      }
      (*(void (**)(char *, void *))(v154 + 8))(v111, __srcc);
    }
    v117 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    goto LABEL_60;
  }
  if (v38)
  {
LABEL_14:
    v45 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1EF9E31D0) - 8) + 64);
    v46 = v32;
    v47 = v33;
LABEL_15:
    memcpy(v46, v47, v45);
    goto LABEL_41;
  }
  v39 = *((_OWORD *)v33 + 1);
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *((_OWORD *)v32 + 1) = v39;
  v40 = *(int *)(v34 + 24);
  v41 = &v32[v40];
  v42 = &v33[v40];
  v43 = type metadata accessor for FMIPUnknownItemProductMetadata();
  v165 = *(_QWORD *)(v43 - 8);
  v168 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v165 + 48);
  if (v168(v42, 1, v43))
  {
    v44 = sub_1CCA14E90(&qword_1EF9E0C30);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    *v41 = *(_OWORD *)v42;
    v58 = *((_QWORD *)v42 + 3);
    *((_QWORD *)v41 + 2) = *((_QWORD *)v42 + 2);
    *((_QWORD *)v41 + 3) = v58;
    *((_BYTE *)v41 + 32) = v42[32];
    *((_QWORD *)v41 + 5) = *((_QWORD *)v42 + 5);
    *((_BYTE *)v41 + 48) = v42[48];
    v176 = (int *)v43;
    v59 = *(int *)(v43 + 32);
    v160 = v35;
    __dsta = (char *)v41 + v59;
    v60 = &v42[v59];
    v61 = sub_1CCB63490();
    v62 = *(_QWORD *)(v61 - 8);
    v152 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
    __src = v60;
    v63 = v60;
    v64 = v61;
    v150 = v62;
    if (v152(v63, 1, v61))
    {
      v65 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(__dsta, __src, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, void *, uint64_t))(v62 + 32))(__dsta, __src, v64);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(__dsta, 0, 1, v64);
    }
    v72 = v176[9];
    v73 = (char *)v41 + v72;
    v74 = &v42[v72];
    if (v152(v74, 1, v64))
    {
      v75 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *))(v150 + 32))(v73, v74);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v150 + 56))(v73, 0, 1, v64);
    }
    v35 = v160;
    v43 = (uint64_t)v176;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v165 + 56))((char *)v41, 0, 1, v176);
  }
  v76 = *(int *)(v34 + 28);
  v77 = &v32[v76];
  v78 = &v33[v76];
  if (v168(v78, 1, v43))
  {
    v79 = sub_1CCA14E90(&qword_1EF9E0C30);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
  }
  else
  {
    *v77 = *(_OWORD *)v78;
    v80 = *((_QWORD *)v78 + 3);
    *((_QWORD *)v77 + 2) = *((_QWORD *)v78 + 2);
    *((_QWORD *)v77 + 3) = v80;
    *((_BYTE *)v77 + 32) = v78[32];
    *((_QWORD *)v77 + 5) = *((_QWORD *)v78 + 5);
    *((_BYTE *)v77 + 48) = v78[48];
    v81 = *(int *)(v43 + 32);
    v170 = (char *)v77 + v81;
    v177 = (int *)v43;
    v82 = &v78[v81];
    v83 = sub_1CCB63490();
    v84 = *(_QWORD *)(v83 - 8);
    v161 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
    __dstb = v82;
    v85 = v82;
    v86 = v83;
    __srcb = (void (**)(void *, const void *, _QWORD))v84;
    if (v161(v85, 1, v83))
    {
      v87 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v170, __dstb, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, void *, uint64_t))(v84 + 32))(v170, __dstb, v86);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v170, 0, 1, v86);
    }
    v88 = v177[9];
    v89 = (char *)v77 + v88;
    v90 = &v78[v88];
    if (v161(v90, 1, v86))
    {
      v91 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    }
    else
    {
      __srcb[4](v89, v90, v86);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__srcb[7])(v89, 0, 1, v86);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v165 + 56))((char *)v77, 0, 1, v177);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
LABEL_41:
  v92 = a3[12];
  v93 = *(void **)(a1 + v92);
  *(_QWORD *)(a1 + v92) = *(_QWORD *)(a2 + v92);

  v94 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v94) = *(_QWORD *)(a2 + v94);
  v95 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v95) = *(_BYTE *)(a2 + v95);
  v96 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_BYTE *)(a1 + v96) = *(_BYTE *)(a2 + v96);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPUnknownItem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCAD0FF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_1CCB63604();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = type metadata accessor for FMIPProductType();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[9];
    }
    else
    {
      v8 = sub_1CCA14E90(&qword_1EF9E31D0);
      v14 = *(_QWORD *)(v8 - 8);
      v15 = a3[11];
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5] + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPUnknownItem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCAD10D4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1CCB63604();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5] + 8) = (a2 - 1);
      return result;
    }
    v13 = type metadata accessor for FMIPProductType();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[9];
    }
    else
    {
      v10 = sub_1CCA14E90(&qword_1EF9E31D0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[11];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t getEnumTagSinglePayload for FMIPUnknownItem.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPUnknownItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_1CCAD1280 + 4 * byte_1CCB6CD77[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_1CCAD12B4 + 4 * byte_1CCB6CD72[v4]))();
}

uint64_t sub_1CCAD12B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAD12BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAD12C4);
  return result;
}

uint64_t sub_1CCAD12D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAD12D8);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_1CCAD12DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAD12E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPUnknownItem.CodingKeys()
{
  return &type metadata for FMIPUnknownItem.CodingKeys;
}

unint64_t sub_1CCAD1304()
{
  unint64_t result;

  result = qword_1EF9E3360;
  if (!qword_1EF9E3360)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6D464, &type metadata for FMIPUnknownItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3360);
  }
  return result;
}

unint64_t sub_1CCAD134C()
{
  unint64_t result;

  result = qword_1EF9E3368;
  if (!qword_1EF9E3368)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6D39C, &type metadata for FMIPUnknownItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3368);
  }
  return result;
}

unint64_t sub_1CCAD1394()
{
  unint64_t result;

  result = qword_1EF9E3370;
  if (!qword_1EF9E3370)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6D3C4, &type metadata for FMIPUnknownItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3370);
  }
  return result;
}

uint64_t sub_1CCAD13D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

char *sub_1CCAD14C8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCAD15AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCAD169C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 352 * a1 + 32;
    v6 = a3 + 352 * v4;
    if (v5 >= v6 || v5 + 352 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCAD178C()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 0xF)
    return 15;
  else
    return v0;
}

uint64_t sub_1CCAD17D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      sub_1CCA14E90(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCAD18D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 88 * a1 + 32;
    v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCAD19C8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1CCAD1A04(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

unint64_t sub_1CCAD1A38()
{
  unint64_t result;

  result = qword_1EF9E3428;
  if (!qword_1EF9E3428)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPUnknownItemObservationType, &type metadata for FMIPUnknownItemObservationType);
    atomic_store(result, (unint64_t *)&qword_1EF9E3428);
  }
  return result;
}

unint64_t sub_1CCAD1A7C()
{
  unint64_t result;

  result = qword_1EF9E3430;
  if (!qword_1EF9E3430)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPUnknownItemAlertState, &type metadata for FMIPUnknownItemAlertState);
    atomic_store(result, (unint64_t *)&qword_1EF9E3430);
  }
  return result;
}

void sub_1CCAD1AC0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;

  v1 = (uint64_t *)(v0 + qword_1EF9FF678);
  if ((*(_BYTE *)(v0 + qword_1EF9FF678 + 48) & 1) == 0)
  {
    v3 = v1[4];
    v2 = v1[5];
    v5 = v1[2];
    v4 = v1[3];
    v6 = *v1;
    v7 = *(_QWORD *)(v0 + qword_1EF9FF678 + 8);
    v8 = MEMORY[0x1E0DEB418];
    v20 = MEMORY[0x1E0DEB418];
    v19[0] = v6;
    v9 = (uint64_t *)(v0 + qword_1ED8A7238);
    swift_beginAccess();
    sub_1CCA06650((uint64_t)v19, 0x3156676174726961, 0xE800000000000000);
    swift_endAccess();
    v10 = *v9;
    v11 = sub_1CCA14E90(&qword_1ED8AA320);
    v18 = v11;
    v17[0] = v10;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)v17, 0x6F43746E65696C63, 0xED0000747865746ELL);
    swift_endAccess();
    v20 = v8;
    v19[0] = v7;
    swift_beginAccess();
    sub_1CCA06650((uint64_t)v19, 0x3256676174726961, 0xE800000000000000);
    swift_endAccess();
    v12 = *v9;
    v18 = v11;
    v17[0] = v12;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)v17, 0x6F43746E65696C63, 0xED0000747865746ELL);
    swift_endAccess();
    v20 = v8;
    v19[0] = v5;
    swift_beginAccess();
    sub_1CCA06650((uint64_t)v19, 0x3156616E6D66, 0xE600000000000000);
    swift_endAccess();
    v13 = *v9;
    v18 = v11;
    v17[0] = v13;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)v17, 0x6F43746E65696C63, 0xED0000747865746ELL);
    swift_endAccess();
    v20 = v8;
    v19[0] = v4;
    swift_beginAccess();
    sub_1CCA06650((uint64_t)v19, 0x3256616E6D66, 0xE600000000000000);
    swift_endAccess();
    v14 = *v9;
    v18 = v11;
    v17[0] = v14;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)v17, 0x6F43746E65696C63, 0xED0000747865746ELL);
    swift_endAccess();
    v20 = v8;
    v19[0] = v3;
    swift_beginAccess();
    sub_1CCA06650((uint64_t)v19, 0x6E6D66656C707061, 0xEB00000000315661);
    swift_endAccess();
    v15 = *v9;
    v18 = v11;
    v17[0] = v15;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)v17, 0x6F43746E65696C63, 0xED0000747865746ELL);
    swift_endAccess();
    v20 = v8;
    v19[0] = v2;
    swift_beginAccess();
    sub_1CCA06650((uint64_t)v19, 0x6E6D66656C707061, 0xEB00000000325661);
    swift_endAccess();
    v16 = *v9;
    v18 = v11;
    v17[0] = v16;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)v17, 0x6F43746E65696C63, 0xED0000747865746ELL);
    swift_endAccess();
  }
}

uint64_t sub_1CCAD1F28()
{
  return type metadata accessor for FMIPInitClientRequest();
}

double FMIPLocation.init(safeLocation:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  id v6;
  id v7;
  double v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  double result;
  char v14;
  _BYTE v15[8];
  uint64_t v16;
  double v17;

  v4 = objc_msgSend(a1, sel_location);
  v14 = 4;
  v5 = objc_msgSend(a1, sel_location);
  v6 = objc_msgSend(v5, sel_floor);

  if (v6)
  {
    v7 = objc_msgSend(v6, sel_level);

    v8 = (double)(uint64_t)v7;
  }
  else
  {
    v8 = -1.0;
  }
  sub_1CC9FB3D4(v4, &v14, 1, 0, 1, (uint64_t)v15, v8);

  v9 = v15[1];
  v10 = v15[2];
  v11 = v15[3];
  v12 = v16;
  result = v17;
  *(_BYTE *)a2 = v15[0];
  *(_BYTE *)(a2 + 1) = v9;
  *(_BYTE *)(a2 + 2) = v10;
  *(_BYTE *)(a2 + 3) = v11;
  *(_QWORD *)(a2 + 8) = v12;
  *(double *)(a2 + 16) = result;
  return result;
}

double FMIPLocation.init(location:type:)@<D0>(void *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  id v10;
  double v11;
  double v12;
  id v13;
  void *v14;
  id v15;
  double v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  _BYTE v23[8];
  uint64_t v24;
  double v25;

  v6 = sub_1CCB635B0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  HIBYTE(v22) = *a2;
  v10 = objc_msgSend(a1, sel_timestamp);
  sub_1CCB63580();

  sub_1CCB6355C();
  v12 = v11;
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  v13 = objc_msgSend(a1, sel_floor);
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v13, sel_level);

    v16 = (double)(uint64_t)v15;
  }
  else
  {
    v16 = -1.0;
  }
  sub_1CC9FB3D4(a1, (char *)&v22 + 7, v12 < -3600.0, 0, 1, (uint64_t)v23, v16);
  v17 = v23[1];
  v18 = v23[2];
  v19 = v23[3];
  v20 = v24;
  result = v25;
  *(_BYTE *)a3 = v23[0];
  *(_BYTE *)(a3 + 1) = v17;
  *(_BYTE *)(a3 + 2) = v18;
  *(_BYTE *)(a3 + 3) = v19;
  *(_QWORD *)(a3 + 8) = v20;
  *(double *)(a3 + 16) = result;
  return result;
}

double FMIPLocation.init(location:shiftedLocation:)@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  char v5;
  char v6;
  void *v7;
  double v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  double result;
  char v14;
  _BYTE v15[8];
  uint64_t v16;
  double v17;

  v4 = *(_BYTE *)a1;
  v5 = *(_BYTE *)(a1 + 1);
  v6 = *(_BYTE *)(a1 + 2);
  v7 = *(void **)(a1 + 8);
  v8 = *(double *)(a1 + 16);
  v14 = *(_BYTE *)(a1 + 3);
  sub_1CC9FB3D4(a2, &v14, v4, v5, v6, (uint64_t)v15, v8);

  v9 = v15[1];
  v10 = v15[2];
  v11 = v15[3];
  v12 = v16;
  result = v17;
  *(_BYTE *)a3 = v15[0];
  *(_BYTE *)(a3 + 1) = v9;
  *(_BYTE *)(a3 + 2) = v10;
  *(_BYTE *)(a3 + 3) = v11;
  *(_QWORD *)(a3 + 8) = v12;
  *(double *)(a3 + 16) = result;
  return result;
}

double FMIPLocation.init(beaconLocation:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void (*v18)(_BYTE *, uint64_t);
  id v19;
  id v20;
  double v21;
  double v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  _BYTE v29[8];
  uint64_t v30;
  double v31;

  v4 = sub_1CCB635B0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  objc_msgSend(a1, sel_latitude);
  v9 = v8;
  objc_msgSend(a1, sel_longitude);
  v11 = v10;
  objc_msgSend(a1, sel_horizontalAccuracy);
  v13 = v12;
  v14 = objc_msgSend(a1, sel_timestamp);
  sub_1CCB63580();

  v15 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
  v16 = (void *)sub_1CCB63538();
  v17 = objc_msgSend(v15, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_speed_timestamp_, v16, v9, v11, -1.0, v13, -1.0, -1.0, -1.0);

  v18 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v18(v7, v4);
  v19 = objc_msgSend(a1, sel_source);
  sub_1CCAD2954((char *)&v28 + 7);

  v20 = objc_msgSend(a1, sel_timestamp);
  sub_1CCB63580();

  sub_1CCB6355C();
  v22 = v21;
  v18(v7, v4);
  sub_1CC9FB3D4(v17, (char *)&v28 + 7, v22 < -3600.0, 0, 1, (uint64_t)v29, -1.0);

  v23 = v29[1];
  v24 = v29[2];
  v25 = v29[3];
  v26 = v30;
  result = v31;
  *(_BYTE *)a2 = v29[0];
  *(_BYTE *)(a2 + 1) = v23;
  *(_BYTE *)(a2 + 2) = v24;
  *(_BYTE *)(a2 + 3) = v25;
  *(_QWORD *)(a2 + 8) = v26;
  *(double *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1CCAD2434(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CCB1A818(*a1, *a2);
}

uint64_t sub_1CCAD2440()
{
  sub_1CCB6433C();
  FMIPLocationType.rawValue.getter();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCAD24A4()
{
  FMIPLocationType.rawValue.getter();
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCAD24F4()
{
  sub_1CCB6433C();
  FMIPLocationType.rawValue.getter();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPLocationType_optional sub_1CCAD2554(Swift::String *a1)
{
  return FMIPLocationType.init(rawValue:)(*a1);
}

uint64_t sub_1CCAD2560@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FMIPLocationType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t FMIPLocation.isOld.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t FMIPLocation.isInaccurate.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t FMIPLocation.isLocationFinished.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

void FMIPLocation.locationType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 3);
}

id FMIPLocation.location.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

uint64_t sub_1CCAD25B0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCAD25E8 + 4 * byte_1CCB6D588[a1]))(0x6564757469746C61, 0xE800000000000000);
}

uint64_t sub_1CCAD25E8()
{
  return 0x76654C726F6F6C66;
}

unint64_t sub_1CCAD2604()
{
  return 0xD000000000000012;
}

uint64_t sub_1CCAD2624()
{
  return 0x756363616E497369;
}

unint64_t sub_1CCAD2644()
{
  return 0xD000000000000010;
}

uint64_t sub_1CCAD26FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1CCAD25B0(*a1);
  v5 = v4;
  if (v3 == sub_1CCAD25B0(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1CCAD2784()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCAD25B0(v1);
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCAD27E4()
{
  unsigned __int8 *v0;

  sub_1CCAD25B0(*v0);
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCAD2824()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCAD25B0(v1);
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCAD2880@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCAD3BBC();
  *a1 = result;
  return result;
}

uint64_t sub_1CCAD28AC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1CCAD25B0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1CCAD28D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCAD3BBC();
  *a1 = result;
  return result;
}

void sub_1CCAD28F8(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_1CCAD2904()
{
  sub_1CCA177BC();
  return sub_1CCB643D8();
}

uint64_t sub_1CCAD292C()
{
  sub_1CCA177BC();
  return sub_1CCB643E4();
}

uint64_t sub_1CCAD2954@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;

  v2 = sub_1CCB63988();
  v4 = v3;
  if (v2 == sub_1CCB63988() && v4 == v5)
  {
    v9 = 7;
LABEL_8:
    result = swift_bridgeObjectRelease_n();
    goto LABEL_9;
  }
  v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    v9 = 7;
    goto LABEL_9;
  }
  v10 = sub_1CCB63988();
  v12 = v11;
  if (v10 == sub_1CCB63988() && v12 == v13)
  {
    v9 = 8;
    goto LABEL_8;
  }
  v15 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
  {
    v9 = 8;
    goto LABEL_9;
  }
  v16 = sub_1CCB63988();
  v18 = v17;
  if (v16 == sub_1CCB63988() && v18 == v19)
  {
    v9 = 9;
    goto LABEL_8;
  }
  v20 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
  {
    v9 = 9;
    goto LABEL_9;
  }
  v21 = sub_1CCB63988();
  v23 = v22;
  if (v21 == sub_1CCB63988() && v23 == v24)
  {
    v9 = 10;
    goto LABEL_8;
  }
  v25 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v25 & 1) != 0)
  {
    v9 = 10;
    goto LABEL_9;
  }
  v26 = sub_1CCB63988();
  v28 = v27;
  if (v26 == sub_1CCB63988() && v28 == v29)
  {
    v9 = 11;
    goto LABEL_8;
  }
  v30 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
  {
    v9 = 11;
    goto LABEL_9;
  }
  v31 = sub_1CCB63988();
  v33 = v32;
  if (v31 == sub_1CCB63988() && v33 == v34)
  {
    v9 = 12;
    goto LABEL_8;
  }
  v35 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v35 & 1) != 0)
  {
    v9 = 12;
    goto LABEL_9;
  }
  v36 = sub_1CCB63988();
  v38 = v37;
  if (v36 == sub_1CCB63988() && v38 == v39)
  {
    v9 = 14;
    goto LABEL_8;
  }
  v40 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v40 & 1) != 0)
  {
    v9 = 14;
    goto LABEL_9;
  }
  v41 = sub_1CCB63988();
  v43 = v42;
  if (v41 == sub_1CCB63988() && v43 == v44)
  {
    v9 = 1;
    goto LABEL_8;
  }
  v45 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v45 & 1) != 0)
  {
    v9 = 1;
    goto LABEL_9;
  }
  v46 = sub_1CCB63988();
  v48 = v47;
  if (v46 == sub_1CCB63988() && v48 == v49)
  {
    v9 = 15;
    goto LABEL_8;
  }
  v50 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v50 & 1) != 0)
  {
    v9 = 15;
    goto LABEL_9;
  }
  v51 = sub_1CCB63988();
  v53 = v52;
  if (v51 == sub_1CCB63988() && v53 == v54)
  {
    v9 = 18;
    goto LABEL_8;
  }
  v55 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v55 & 1) != 0)
  {
    v9 = 18;
    goto LABEL_9;
  }
  v56 = sub_1CCB63988();
  v58 = v57;
  if (v56 == sub_1CCB63988() && v58 == v59)
  {
    v9 = 17;
    goto LABEL_8;
  }
  v60 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v60 & 1) != 0)
  {
    v9 = 17;
    goto LABEL_9;
  }
  v61 = sub_1CCB63988();
  v63 = v62;
  v9 = 19;
  if (v61 == sub_1CCB63988() && v63 == v64)
    goto LABEL_8;
  v65 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v65 & 1) != 0)
    v9 = 19;
  else
    v9 = 0;
LABEL_9:
  *a1 = v9;
  return result;
}

uint64_t FMIPLocation.hash(into:)()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  sub_1CCB64354();
  sub_1CCB64354();
  sub_1CCB64354();
  FMIPLocationType.rawValue.getter();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  v2 = v1;
  sub_1CCB63DFC();

  return sub_1CCB6436C();
}

uint64_t FMIPLocation.hashValue.getter()
{
  sub_1CCB6433C();
  FMIPLocation.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCAD3020()
{
  sub_1CCB6433C();
  FMIPLocation.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCAD3094()
{
  sub_1CCB6433C();
  FMIPLocation.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCAD3100(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  v2 = CLLocation.hash.getter();

  return v2;
}

uint64_t CLLocation.hash.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  id v5;
  _BYTE v7[24];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v1 = sub_1CCB635B0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = &v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1CCB64390();
  objc_msgSend(v0, sel_coordinate);
  sub_1CCB6436C();
  objc_msgSend(v0, sel_coordinate);
  sub_1CCB6436C();
  objc_msgSend(v0, sel_altitude);
  sub_1CCB6436C();
  objc_msgSend(v0, sel_course);
  sub_1CCB6436C();
  objc_msgSend(v0, sel_horizontalAccuracy);
  sub_1CCB6436C();
  objc_msgSend(v0, sel_verticalAccuracy);
  sub_1CCB6436C();
  v5 = objc_msgSend(v0, sel_timestamp);
  sub_1CCB63580();

  sub_1CCB63598();
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  v14 = v9;
  v15 = v10;
  v16 = v11;
  v12 = *(_OWORD *)&v7[8];
  v13 = v8;
  return sub_1CCB64378();
}

uint64_t sub_1CCAD32D0(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  _QWORD v50[4];

  v50[3] = a4;
  if (a1 < 0)
    goto LABEL_42;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9D8];
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    sub_1CCAD376C(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  v42 = a1;
  v43 = v10;
  v48 = 4 * v12;
  v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v14 = 15;
  v15 = 15;
  v16 = 15;
  while (1)
  {
    v50[0] = sub_1CCB63AA8();
    v50[1] = v17;
    v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    v14 = sub_1CCB63A0C();
LABEL_9:
    if (v48 == v14 >> 14)
      goto LABEL_29;
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    v14 = sub_1CCB63A0C();
    *(_QWORD *)(v47 + 16) = v14;
    v15 = v14;
    v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14)
    goto LABEL_41;
  v20 = sub_1CCB63AC0();
  v44 = v21;
  v45 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_1CCAC9A9C(0, v13[2] + 1, 1, v13);
  v27 = v13[2];
  v26 = v13[3];
  if (v27 >= v26 >> 1)
    v13 = sub_1CCAC9A9C((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
  v13[2] = v27 + 1;
  v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(_QWORD *)(v43 + 16) = v13;
  v29 = sub_1CCB63A0C();
  v14 = v29;
  *(_QWORD *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    v15 = v29;
    v16 = v29;
    goto LABEL_9;
  }
  v16 = v29;
  v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    v31 = sub_1CCB63AC0();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_1CCAC9A9C(0, v13[2] + 1, 1, v13);
    v39 = v13[2];
    v38 = v13[3];
    if (v39 >= v38 >> 1)
      v13 = sub_1CCAC9A9C((_QWORD *)(v38 > 1), v39 + 1, 1, v13);
    v13[2] = v39 + 1;
    v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(_QWORD *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  sub_1CCB64078();
  __break(1u);
LABEL_42:
  result = sub_1CCB64078();
  __break(1u);
  return result;
}

uint64_t sub_1CCAD376C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = sub_1CCB63AC0();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_1CCAC9A9C(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = sub_1CCAC9A9C((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = sub_1CCB64078();
  __break(1u);
  return result;
}

unint64_t sub_1CCAD38C8()
{
  unint64_t result;

  result = qword_1EF9E34E8;
  if (!qword_1EF9E34E8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPLocationType, &type metadata for FMIPLocationType);
    atomic_store(result, (unint64_t *)&qword_1EF9E34E8);
  }
  return result;
}

unint64_t sub_1CCAD3910()
{
  unint64_t result;

  result = qword_1EF9E34F0;
  if (!qword_1EF9E34F0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPLocation, &type metadata for FMIPLocation);
    atomic_store(result, (unint64_t *)&qword_1EF9E34F0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPLocationType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPLocationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_1CCAD3A30 + 4 * byte_1CCB6D5A5[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_1CCAD3A64 + 4 * byte_1CCB6D5A0[v4]))();
}

uint64_t sub_1CCAD3A64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAD3A6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAD3A74);
  return result;
}

uint64_t sub_1CCAD3A80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAD3A88);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_1CCAD3A8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAD3A94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPLocationType()
{
  return &type metadata for FMIPLocationType;
}

uint64_t assignWithCopy for FMIPLocation(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for FMIPLocation(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

unint64_t sub_1CCAD3B78()
{
  unint64_t result;

  result = qword_1EF9E34F8;
  if (!qword_1EF9E34F8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6D8A4, &type metadata for FMIPLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E34F8);
  }
  return result;
}

uint64_t sub_1CCAD3BBC()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 0xC)
    return 12;
  else
    return v0;
}

uint64_t sub_1CCAD3C04(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_1CCB642A0() & 1;
}

uint64_t sub_1CCAD3C58()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCAD3C7C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCAD3C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

void sub_1CCAD3C94(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD v18[10];
  __int128 v19;
  __int128 v20;

  v2 = v1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v4 = sub_1CCB637FC();
  sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
  swift_retain();
  v5 = sub_1CCB637D8();
  v6 = sub_1CCB63D48();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v7 = 67109120;
    v18[0] = *(unsigned __int8 *)(v2 + 40);
    sub_1CCB63E44();
    swift_release();
    _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPGarbageCollector: scheduleAccountVerification alreadyPending?: %{BOOL}d", v7, 8u);
    MEMORY[0x1D17B214C](v7, -1, -1);

    if ((*(_BYTE *)(v2 + 40) & 1) != 0)
      return;
  }
  else
  {

    swift_release();
    if ((*(_BYTE *)(v2 + 40) & 1) != 0)
      return;
  }
  if (*(_QWORD *)(v2 + 56))
  {
    v8 = objc_msgSend(a1, sel_userInfo);
    if (!v8)
      return;
    v9 = v8;
    v10 = sub_1CCB638E0();

    v16 = sub_1CCB63988();
    v17 = v11;
    sub_1CCB63F64();
    if (*(_QWORD *)(v10 + 16) && (v12 = sub_1CCAC8EA8((uint64_t)v18), (v13 & 1) != 0))
    {
      sub_1CCA0CC30(*(_QWORD *)(v10 + 56) + 32 * v12, (uint64_t)&v19);
    }
    else
    {
      v19 = 0u;
      v20 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_1CCAD1A04((uint64_t)v18);
    if (!*((_QWORD *)&v20 + 1))
    {
      sub_1CC9E4F4C((uint64_t)&v19);
      return;
    }
    if ((swift_dynamicCast() & 1) == 0)
      return;
    v14 = *(_QWORD *)(v2 + 56);
    if (!v14)
    {
      swift_bridgeObjectRelease();
      return;
    }
    if (v16 == *(_QWORD *)(v2 + 48) && v14 == v17)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
        return;
    }
  }
  sub_1CCAD3F64();
}

uint64_t sub_1CCAD3F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint8_t *v25;
  uint8_t *v26;
  void *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  void *v30;
  uint64_t v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1CCB63820();
  v38 = *(_QWORD *)(v2 - 8);
  v39 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCB63868();
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63880();
  v34 = *(_QWORD *)(v8 - 8);
  v35 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v33 - v12;
  v14 = sub_1CCB6382C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v0 + 40) = 1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v18 = sub_1CCB637FC();
  sub_1CCA16C20(v18, (uint64_t)qword_1ED8AD7F8);
  v19 = sub_1CCB637D8();
  v20 = sub_1CCB63D48();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v33 = v13;
    v22 = v7;
    v23 = v4;
    v24 = v1;
    v25 = v21;
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1CC9BF000, v19, v20, "FMIPGarbageCollector: Dispatching verification on background", v21, 2u);
    v26 = v25;
    v1 = v24;
    v4 = v23;
    v7 = v22;
    v13 = v33;
    MEMORY[0x1D17B214C](v26, -1, -1);
  }

  sub_1CC9F0ECC();
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x1E0DEF520], v14);
  v27 = (void *)sub_1CCB63DC0();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  sub_1CCB63874();
  MEMORY[0x1D17B0E08](v11, 0.2);
  v28 = v35;
  v29 = *(void (**)(char *, uint64_t))(v34 + 8);
  v29(v11, v35);
  aBlock[4] = sub_1CCAD4760;
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88FA798;
  v30 = _Block_copy(aBlock);
  swift_retain();
  sub_1CCB63844();
  v40 = MEMORY[0x1E0DEE9D8];
  sub_1CCA248D4();
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA1FC64();
  v31 = v39;
  sub_1CCB63E98();
  MEMORY[0x1D17B12E8](v13, v7, v4, v30);
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v4, v31);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v37);
  v29(v13, v28);
  return swift_release();
}

void sub_1CCAD42E8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPGarbageCollector: Async verifying account", v5, 2u);
    MEMORY[0x1D17B214C](v5, -1, -1);
  }

  sub_1CC9E6BE8();
  *(_BYTE *)(a1 + 40) = 0;
}

void sub_1CCAD43C4()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  unsigned int v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29[4];

  v29[3] = *(id *)MEMORY[0x1E0C80C00];
  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v2 = *(_QWORD *)(v0 + 80);
  v28 = *(_QWORD *)(v2 + 16);
  if (v28)
  {
    v25 = v0;
    v27 = v2 + 32;
    swift_bridgeObjectRetain();
    v3 = 0;
    v26 = v2;
    do
    {
      if (v3 >= *(_QWORD *)(v2 + 16))
        __break(1u);
      v4 = v27 + 16 * v3;
      v6 = *(void **)v4;
      v5 = *(void **)(v4 + 8);
      swift_bridgeObjectRetain();
      v7 = (void *)sub_1CCB63964();
      v29[0] = 0;
      v8 = objc_msgSend(v1, sel_contentsOfDirectoryAtPath_error_, v7, v29);

      v9 = v29[0];
      if (v8)
      {
        v10 = sub_1CCB63B38();
        v11 = v9;

        v12 = *(_QWORD *)(v10 + 16);
        if (v12)
        {
          v13 = v10 + 40;
          for (i = v12 - 1; ; --i)
          {
            v29[0] = v6;
            v29[1] = v5;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1CCB63A24();
            swift_bridgeObjectRelease();
            v15 = (void *)sub_1CCB63964();
            swift_bridgeObjectRelease();
            v29[0] = 0;
            v16 = objc_msgSend(v1, sel_removeItemAtPath_error_, v15, v29);

            if (!v16)
            {
              v18 = v29[0];
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v2 = v26;
              goto LABEL_15;
            }
            if (!i)
              break;
            v13 += 16;
            v17 = v29[0];
          }
          v24 = v29[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v2 = v26;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v18 = v29[0];
        swift_bridgeObjectRelease();
LABEL_15:
        v19 = (void *)sub_1CCB63400();

        swift_willThrow();
        if (qword_1ED8AA630 != -1)
          swift_once();
        v20 = sub_1CCB637FC();
        sub_1CCA16C20(v20, (uint64_t)qword_1ED8AD7F8);
        v21 = sub_1CCB637D8();
        v22 = sub_1CCB63D30();
        if (os_log_type_enabled(v21, v22))
        {
          v23 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v23 = 0;
          _os_log_impl(&dword_1CC9BF000, v21, v22, "FMIPGarbageCollector: Error deleting file", v23, 2u);
          MEMORY[0x1D17B214C](v23, -1, -1);
        }

      }
      ++v3;
    }
    while (v3 != v28);
    swift_bridgeObjectRelease();
    v0 = v25;
  }
  if (MEMORY[0x1D17B2218](v0 + 64))
  {
    sub_1CCAA8EC4();

    swift_unknownObjectRelease();
  }
  else
  {

  }
}

uint64_t sub_1CCAD471C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1CCA2F610(v0 + 64);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void sub_1CCAD4760()
{
  uint64_t v0;

  sub_1CCAD42E8(v0);
}

char sub_1CCAD4768@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = sub_1CCA14E90(&qword_1ED8A7460);
  result = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 56);
  if (!v7)
    goto LABEL_5;
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = type metadata accessor for FMIPDevice();
    v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80);
    sub_1CCAD4C50(v7 + *(int *)(v9 + 112) + ((v10 + 32) & ~v10), (uint64_t)v6);
    v11 = type metadata accessor for FMIPPlaySoundMetadata();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v6, 1, v11) == 1)
    {
      result = sub_1CCAD4C98((uint64_t)v6);
LABEL_5:
      LOBYTE(v8) = 0;
      goto LABEL_8;
    }
    v12 = *v6;
    sub_1CCA189AC((uint64_t)v6);
    result = FMIPActionStatus.init(rawValue:)(qword_1CCB6D9D8[v12]).value;
    LOBYTE(v8) = v14;
    if (v14 == 18)
      LOBYTE(v8) = 0;
  }
LABEL_8:
  *a1 = v8;
  return result;
}

uint64_t sub_1CCAD4870(uint64_t a1)
{
  swift_allocObject();
  return sub_1CCAD48B8(a1);
}

uint64_t sub_1CCAD48B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29[5];
  uint64_t v30;

  v3 = sub_1CCA14E90(&qword_1ED8A7460);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CC9EBC94(a1, (uint64_t)v29);
  v6 = sub_1CCA5B658(v29);
  v7 = v6;
  if (!v1)
  {
    v8 = *(_QWORD *)(v6 + 56);
    if (v8 && *(_QWORD *)(v8 + 16))
    {
      v9 = type metadata accessor for FMIPDevice();
      v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80);
      sub_1CCAD4C50(v8 + *(int *)(v9 + 112) + ((v10 + 32) & ~v10), (uint64_t)v5);
      v11 = type metadata accessor for FMIPPlaySoundMetadata();
      v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v5, 1, v11);
      swift_retain();
      if (v12 == 1)
      {
        v13 = 7104878;
        sub_1CCAD4C98((uint64_t)v5);
        v14 = 0xE300000000000000;
      }
      else
      {
        v13 = FMIPPlaySoundMetadata.debugDescription.getter();
        v14 = v15;
        sub_1CCA189AC((uint64_t)v5);
      }
    }
    else
    {
      v13 = 7104878;
      swift_retain();
      v14 = 0xE300000000000000;
    }
    if (qword_1ED8AA630 != -1)
      swift_once();
    v16 = sub_1CCB637FC();
    sub_1CCA16C20(v16, (uint64_t)qword_1ED8AD7F8);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v17 = sub_1CCB637D8();
    v18 = sub_1CCB63D48();
    v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      v20 = swift_slowAlloc();
      v28 = swift_slowAlloc();
      v29[0] = v28;
      *(_DWORD *)v20 = 134218498;
      v26 = v13;
      v27 = v19;
      sub_1CCAD4768(&v30);
      v21 = qword_1CCB6D9D8[(char)v30];
      swift_release();
      v30 = v21;
      sub_1CCB63E44();
      swift_release();
      *(_WORD *)(v20 + 12) = 2080;
      swift_bridgeObjectRetain();
      v30 = sub_1CCA0CB60(v26, v14, v29);
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 22) = 2080;
      v22 = sub_1CCA5B9C4();
      v30 = sub_1CCA0CB60(v22, v23, v29);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v17, (os_log_type_t)v27, "FMIPPlaySoundResponse: initialized with coder status %ld metadata: %s - %s", (uint8_t *)v20, 0x20u);
      v24 = v28;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v24, -1, -1);
      MEMORY[0x1D17B214C](v20, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();

      swift_release_n();
    }
  }
  sub_1CCA01CA0(a1);
  return v7;
}

uint64_t type metadata accessor for FMIPPlaySoundResponse()
{
  return objc_opt_self();
}

uint64_t sub_1CCAD4C50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A7460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCAD4C98(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CCA14E90(&qword_1ED8A7460);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1CCAD4CF0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;
  void *v6;

  v5 = sub_1CCB63988();
  a4(v5);
  swift_bridgeObjectRelease();
  v6 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  return v6;
}

id FMPhoneNumberUtil.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id FMPhoneNumberUtil.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPhoneNumberUtil();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for FMPhoneNumberUtil()
{
  return objc_opt_self();
}

id FMPhoneNumberUtil.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPhoneNumberUtil();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1CCAD4FEC()
{
  uint64_t result;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  result = CPPhoneNumberCopyHomeCountryCode();
  if (!result)
  {
    __break(1u);
    goto LABEL_27;
  }
  v1 = (void *)result;
  v2 = sub_1CCB63988();
  v4 = v3;

  v5 = v4 & 0x2000000000000000;
  v6 = HIBYTE(v4) & 0xF;
  v7 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0)
    v8 = HIBYTE(v4) & 0xF;
  else
    v8 = v2 & 0xFFFFFFFFFFFFLL;
  if (!v8)
  {
    swift_bridgeObjectRelease();
    result = CPPhoneNumberCopyActiveCountryCode();
    if (result)
    {
      v9 = (void *)result;
      v2 = sub_1CCB63988();
      v11 = v10;

      v5 = v11 & 0x2000000000000000;
      v6 = HIBYTE(v11) & 0xF;
      v7 = v2 & 0xFFFFFFFFFFFFLL;
      goto LABEL_8;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_8:
  if (v5)
    v12 = v6;
  else
    v12 = v7;
  if (!v12)
  {
    swift_bridgeObjectRelease();
    result = CPPhoneNumberCopyNetworkCountryCode();
    if (result)
    {
      v13 = (void *)result;
      v2 = sub_1CCB63988();
      v15 = v14;

      v5 = v15 & 0x2000000000000000;
      v6 = HIBYTE(v15) & 0xF;
      v7 = v2 & 0xFFFFFFFFFFFFLL;
      goto LABEL_14;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_14:
  if (v5)
    v16 = v6;
  else
    v16 = v7;
  if (v16)
    goto LABEL_20;
  swift_bridgeObjectRelease();
  result = CPPhoneNumberCopyLastKnownNetworkCountryCode();
  if (!result)
  {
LABEL_29:
    __break(1u);
    return result;
  }
  v17 = (void *)result;
  v2 = sub_1CCB63988();
  v19 = v18;

  v5 = v19 & 0x2000000000000000;
  v6 = HIBYTE(v19) & 0xF;
  v7 = v2 & 0xFFFFFFFFFFFFLL;
LABEL_20:
  if (v5)
    v20 = v6;
  else
    v20 = v7;
  if (!v20)
  {
    swift_bridgeObjectRelease();
    return 29557;
  }
  return v2;
}

uint64_t sub_1CCAD5118(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t String;
  void *v7;

  sub_1CCAD4FEC();
  v2 = (void *)sub_1CCB63964();
  v3 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v4 = (void *)CFPhoneNumberCreate();

  if (!v4)
    goto LABEL_5;
  v5 = v4;
  String = CFPhoneNumberCreateString();
  if (!String)
  {

LABEL_5:
    swift_bridgeObjectRetain();
    return a1;
  }
  v7 = (void *)String;
  a1 = sub_1CCB63988();

  return a1;
}

uint64_t sub_1CCAD5204(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  if (qword_1EF9DEFF8 != -1)
    swift_once();
  v2 = qword_1EF9E62B0;
  v3 = (void *)sub_1CCB63964();
  LOBYTE(v2) = objc_msgSend((id)v2, sel_evaluateWithObject_, v3);

  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    a1 = sub_1CCAD5118(a1);
    swift_bridgeObjectRetain();
    if ((sub_1CCB63A90() & 1) != 0 || sub_1CCB63A00() <= 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1CCB63A24();
      swift_bridgeObjectRelease_n();
      return 43;
    }
  }
  return a1;
}

uint64_t sub_1CCAD5328(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v20 = a3;
  v6 = sub_1CCB63298();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = 0;
  v24 = 0xE000000000000000;
  v25 = a1;
  v18 = a1 & 0xFFFFFFFFFFFFLL;
  v19 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) != 0)
    v10 = HIBYTE(a2) & 0xF;
  else
    v10 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v10)
    return 0;
  v11 = 0;
  v17 = a2 & 0xFFFFFFFFFFFFFFLL;
  v16[0] = v3;
  v16[1] = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  do
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      sub_1CCB63FAC();
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v21 = v25;
        v22 = v17;
      }
      else if ((v25 & 0x1000000000000000) == 0)
      {
        sub_1CCB6400C();
      }
      sub_1CCB64018();
    }
    v13 = v12;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v20, v6);
    v14 = sub_1CCB63280();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if ((v14 & 1) != 0)
      sub_1CCB639DC();
    v11 += v13;
  }
  while (v11 < v10);
  return v23;
}

uint64_t sub_1CCAD54B8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v16;

  v4 = sub_1CCB63298();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v8 = a1 & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    sub_1CCB63244();
    sub_1CCB63274();
    swift_bridgeObjectRetain();
    v9 = sub_1CCAD5328(a1, a2, (uint64_t)v7);
    v11 = v10;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v12 = v9 & 0xFFFFFFFFFFFFLL;
    if (!v12)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    if (v9 == a1 && v11 == a2)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v14 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_1CCAD55FC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCAD5630 + 4 * byte_1CCB6DAB0[a1]))(0x6E656B6F54736168, 0xE800000000000000);
}

unint64_t sub_1CCAD5630()
{
  return 0xD000000000000013;
}

unint64_t sub_1CCAD5658()
{
  return 0xD000000000000011;
}

uint64_t FMIPPeopleFindingEvent.hasToken.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t FMIPPeopleFindingEvent.hasToken.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*FMIPPeopleFindingEvent.hasToken.modify())()
{
  return nullsub_1;
}

uint64_t FMIPPeopleFindingEvent.findButtonAvailable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t FMIPPeopleFindingEvent.findButtonAvailable.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*FMIPPeopleFindingEvent.findButtonAvailable.modify())()
{
  return nullsub_1;
}

double FMIPPeopleFindingEvent.availabilityLatency.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void FMIPPeopleFindingEvent.availabilityLatency.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*FMIPPeopleFindingEvent.availabilityLatency.modify())()
{
  return nullsub_1;
}

uint64_t FMIPPeopleFindingEvent.withinNearbyRange.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t FMIPPeopleFindingEvent.withinNearbyRange.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*FMIPPeopleFindingEvent.withinNearbyRange.modify())()
{
  return nullsub_1;
}

uint64_t FMIPPeopleFindingEvent.startedDiscovering.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t FMIPPeopleFindingEvent.startedDiscovering.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*FMIPPeopleFindingEvent.startedDiscovering.modify())()
{
  return nullsub_1;
}

FMIPCore::FMIPPeopleFindingEvent __swiftcall FMIPPeopleFindingEvent.init(hasToken:findButtonAvailable:availabilityLatency:withinNearbyRange:startedDiscovering:)(Swift::Bool hasToken, Swift::Bool findButtonAvailable, Swift::Double availabilityLatency, Swift::Bool withinNearbyRange, Swift::Bool startedDiscovering)
{
  uint64_t v5;
  FMIPCore::FMIPPeopleFindingEvent result;

  *(_BYTE *)v5 = hasToken;
  *(_BYTE *)(v5 + 1) = findButtonAvailable;
  *(Swift::Double *)(v5 + 8) = availabilityLatency;
  *(_BYTE *)(v5 + 16) = withinNearbyRange;
  *(_BYTE *)(v5 + 17) = startedDiscovering;
  result.availabilityLatency = availabilityLatency;
  result.withinNearbyRange = findButtonAvailable;
  result.hasToken = hasToken;
  return result;
}

Swift::Void __swiftcall FMIPManager.enqueue(event:)(FMIPCore::FMIPPeopleFindingEvent event)
{
  char v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v1 = **(_BYTE **)&event.hasToken;
  v2 = *(_BYTE *)(*(_QWORD *)&event.hasToken + 1);
  v3 = *(_QWORD *)(*(_QWORD *)&event.hasToken + 8);
  v4 = *(_BYTE *)(*(_QWORD *)&event.hasToken + 16);
  v5 = *(_BYTE *)(*(_QWORD *)&event.hasToken + 17);
  v6 = (void *)sub_1CCB63964();
  v7 = swift_allocObject();
  *(_BYTE *)(v7 + 16) = v1;
  *(_BYTE *)(v7 + 17) = v2;
  *(_QWORD *)(v7 + 24) = v3;
  *(_BYTE *)(v7 + 32) = v4;
  *(_BYTE *)(v7 + 33) = v5;
  v9[4] = sub_1CCAD5B70;
  v9[5] = v7;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = sub_1CCA7EAC8;
  v9[3] = &unk_1E88FA808;
  v8 = _Block_copy(v9);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v8);

}

void static FMIPAnalytics.sendPeopleFindingEventAnalytics(event:)(char *a1)
{
  char v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v1 = *a1;
  v2 = a1[1];
  v3 = *((_QWORD *)a1 + 1);
  v4 = a1[16];
  v5 = a1[17];
  v6 = (void *)sub_1CCB63964();
  v7 = swift_allocObject();
  *(_BYTE *)(v7 + 16) = v1;
  *(_BYTE *)(v7 + 17) = v2;
  *(_QWORD *)(v7 + 24) = v3;
  *(_BYTE *)(v7 + 32) = v4;
  *(_BYTE *)(v7 + 33) = v5;
  v9[4] = sub_1CCAD5B70;
  v9[5] = v7;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = sub_1CCA7EAC8;
  v9[3] = &unk_1E88FA858;
  v8 = _Block_copy(v9);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v8);

}

unint64_t sub_1CCAD5938(unsigned int a1, unsigned int a2, double a3)
{
  char v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  char isUniquelyReferenced_nonNull_native;
  id v11;
  char v12;
  id v13;
  char v14;
  id v15;
  char v16;
  id v17;
  char v18;

  v3 = a2;
  v5 = a1;
  v6 = (a1 >> 8) & 1;
  v7 = (a2 >> 8) & 1;
  v8 = sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v5 & 1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v9, 0x6E656B6F54736168, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v6);
  v12 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v11, 0xD000000000000013, 0x80000001CCB7C020, v12);
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, a3);
  v14 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v13, 0xD000000000000013, 0x80000001CCB7C040, v14);
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v3 & 1);
  v16 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v15, 0xD000000000000011, 0x80000001CCB7C060, v16);
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v7);
  v18 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v17, 0xD000000000000012, 0x80000001CCB7C080, v18);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1CCAD5B60()
{
  return swift_deallocObject();
}

uint64_t sub_1CCAD5B74()
{
  return swift_deallocObject();
}

unint64_t sub_1CCAD5B84()
{
  uint64_t v0;
  int v1;
  int v2;

  if (*(_BYTE *)(v0 + 17))
    v1 = 256;
  else
    v1 = 0;
  if (*(_BYTE *)(v0 + 33))
    v2 = 256;
  else
    v2 = 0;
  return sub_1CCAD5938(v1 | *(unsigned __int8 *)(v0 + 16), v2 | *(unsigned __int8 *)(v0 + 32), *(double *)(v0 + 24));
}

__n128 initializeBufferWithCopyOfBuffer for FMIPPeopleFindingEvent(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPPeopleFindingEvent(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[18])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPPeopleFindingEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPPeopleFindingEvent()
{
  return &type metadata for FMIPPeopleFindingEvent;
}

id sub_1CCAD5C7C()
{
  void *v0;

  return objc_msgSend(v0, sel_shutdown);
}

uint64_t sub_1CCAD5C8C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_delegate;
  swift_beginAccess();
  return MEMORY[0x1D17B2218](v1);
}

uint64_t sub_1CCAD5CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_1CCAD5D40(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1D17B2218](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return sub_1CCA97D1C;
}

uint64_t sub_1CCAD5DB4()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_topicAPSToken);
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_topicAPSToken + 8))
  {
    swift_bridgeObjectRetain();
    v2 = (void *)sub_1CCB63964();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = 0;
  }
  v3 = (void *)objc_opt_self();
  v4 = (void *)sub_1CCB63964();
  v5 = (void *)sub_1CCB63964();
  objc_msgSend(v3, sel_setString_forKey_inDomain_, v2, v4, v5);

  v6 = v0 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v6);
  if (result)
  {
    v8 = *(_QWORD *)(v6 + 8);
    ObjectType = swift_getObjectType();
    v10 = *v1;
    v11 = v1[1];
    v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_publicAPSToken);
    v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_publicAPSToken + 8);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v0, v10, v11, v12, v13, ObjectType, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

id FMAPSConnectionHandler.__deallocating_deinit()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t ObjectType;
  void (*v4)(_QWORD, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  objc_super v9;

  v1 = &v0[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_connection];
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_connection])
  {
    v2 = *((_QWORD *)v1 + 1);
    ObjectType = swift_getObjectType();
    v4 = *(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 16);
    swift_unknownObjectRetain();
    v4(0, ObjectType, v2);
    swift_unknownObjectRelease();
    if (*(_QWORD *)v1)
    {
      v5 = *((_QWORD *)v1 + 1);
      v6 = swift_getObjectType();
      v7 = *(void (**)(uint64_t, uint64_t))(v5 + 40);
      swift_unknownObjectRetain();
      v7(v6, v5);
      swift_unknownObjectRelease();
    }
  }
  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for FMAPSConnectionHandler();
  return objc_msgSendSuper2(&v9, sel_dealloc);
}

uint64_t sub_1CCAD60D4()
{
  return sub_1CC9CADA8((uint64_t)&unk_1E88FA960, (uint64_t)sub_1CCAD69AC, (uint64_t)&unk_1E88FA978);
}

uint64_t sub_1CCAD60F0(uint64_t result)
{
  uint64_t v1;
  uint64_t ObjectType;
  void (*v3)(_QWORD, uint64_t, uint64_t);

  if (*(_QWORD *)(result + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_connection))
  {
    v1 = *(_QWORD *)(result + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_connection + 8);
    ObjectType = swift_getObjectType();
    v3 = *(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 32);
    swift_unknownObjectRetain();
    v3(0, ObjectType, v1);
    return swift_unknownObjectRelease();
  }
  return result;
}

id FMAPSConnectionHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void FMAPSConnectionHandler.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMAPSConnectionHandler.connection(_:didReceivePublicToken:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_1CC9DEB84(a2, a3);
}

void FMAPSConnectionHandler.connection(_:didReceiveToken:forTopic:identifier:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_1CCAD6304(a2, a3);
}

uint64_t FMAPSConnectionHandler.connection(_:didReceiveMessageForTopic:userInfo:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_1CC9DA3C4(a2, a3, a4);
}

void sub_1CCAD6304(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  _QWORD *v30;
  uint8_t *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  id v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t aBlock[6];
  uint64_t v49;

  v3 = v2;
  v5 = sub_1CCB63820();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCB63868();
  v10 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 == 15)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v14 = sub_1CCB637FC();
    sub_1CCA16C20(v14, (uint64_t)qword_1ED8AD7F8);
    v47 = v3;
    v15 = sub_1CCB637D8();
    v16 = sub_1CCB63D48();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      aBlock[0] = v18;
      *(_DWORD *)v17 = 136315138;
      v19 = *(_QWORD *)&v47[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_topic];
      v20 = *(_QWORD *)&v47[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_topic + 8];
      swift_bridgeObjectRetain();
      v49 = sub_1CCA0CB60(v19, v20, aBlock);
      sub_1CCB63E44();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v15, v16, "FMAPSConnectionHandler: Topic APS Token was nil for %s.", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v18, -1, -1);
      MEMORY[0x1D17B214C](v17, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v45 = v11;
    v46 = v10;
    v21 = (void *)sub_1CCB634B4();
    if (qword_1ED8AA630 != -1)
      swift_once();
    v47 = v8;
    v22 = sub_1CCB637FC();
    sub_1CCA16C20(v22, (uint64_t)qword_1ED8AD7F8);
    v23 = v21;
    v24 = sub_1CCB637D8();
    v25 = sub_1CCB63D48();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc();
      v43 = v3;
      v27 = (uint8_t *)v26;
      v28 = swift_slowAlloc();
      v44 = v6;
      v42 = (_QWORD *)v28;
      *(_DWORD *)v27 = 138412290;
      aBlock[0] = (uint64_t)v23;
      v29 = v23;
      sub_1CCB63E44();
      v30 = v42;
      *v42 = v23;

      _os_log_impl(&dword_1CC9BF000, v24, v25, "FMAPSConnectionHandler: Topic APS Token received %@.", v27, 0xCu);
      sub_1CCA14E90(&qword_1ED8A8E00);
      swift_arrayDestroy();
      v6 = v44;
      MEMORY[0x1D17B214C](v30, -1, -1);
      v31 = v27;
      v3 = v43;
      MEMORY[0x1D17B214C](v31, -1, -1);

    }
    else
    {

    }
    v32 = v23;
    v33 = objc_msgSend(v23, sel_fm_hexString);
    v34 = sub_1CCB63988();
    v36 = v35;

    v37 = (_QWORD *)swift_allocObject();
    v37[2] = v3;
    v37[3] = v34;
    v37[4] = v36;
    aBlock[4] = (uint64_t)sub_1CCAD69B8;
    aBlock[5] = (uint64_t)v37;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CCA00C38;
    aBlock[3] = (uint64_t)&unk_1E88FAA18;
    v38 = _Block_copy(aBlock);
    v39 = v3;
    sub_1CCB63844();
    v49 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    v40 = v47;
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v13, v40, v38);
    _Block_release(v38);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v40, v5);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v46);
    swift_release();
  }
}

uint64_t sub_1CCAD6848@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v3);
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1CCAD68A0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_delegate;
  swift_beginAccess();
  *(_QWORD *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t dispatch thunk of FMAPSConnectionHandlerDelegate.connectionHandler(_:didReceive:publicToken:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of FMAPSConnectionHandlerDelegate.connectionHandler(_:didReceive:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t sub_1CCAD6910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_1CCAD6918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_1CCAD6920(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t method lookup function for FMAPSConnectionHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMAPSConnectionHandler.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of FMAPSConnectionHandler.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of FMAPSConnectionHandler.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t sub_1CCAD6988()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1CCAD69AC()
{
  uint64_t v0;

  return sub_1CCAD60F0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1CCAD69B8()
{
  uint64_t *v0;

  return sub_1CC9C2178(v0[2], v0[3], v0[4], &OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_topicAPSToken, (uint64_t (*)(uint64_t))sub_1CCAD5DB4);
}

uint64_t sub_1CCAD69E8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t FMIPLostModeAction.isLostModeEnabled.getter()
{
  return 1;
}

uint64_t FMIPLostModeAction.isSoundEnabled.getter()
{
  return 0;
}

uint64_t FMIPLostModeAction.isTrackingEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isTrackingEnabled);
}

uint64_t FMIPLostModeAction.isUserTextEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isUserTextEnabled);
}

uint64_t FMIPLostModeAction.isEmailUpdatesEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isEmailUpdatesEnabled);
}

uint64_t FMIPLostModeAction.email.getter()
{
  return sub_1CCA81B40(&OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_email);
}

uint64_t FMIPLostModeAction.message.getter()
{
  return sub_1CCA81B40(&OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_message);
}

uint64_t FMIPLostModeAction.phoneNumber.getter()
{
  return sub_1CCA81B40(&OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_phoneNumber);
}

uint64_t FMIPLostModeAction.passcode.getter()
{
  return sub_1CCA81B40(&OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_passcode);
}

uint64_t FMIPLostModeAction.__allocating_init(device:message:phoneNumber:email:passcode:trackingEnabled:emailUpdatesEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  uint64_t v17;

  v17 = swift_allocObject();
  FMIPLostModeAction.init(device:message:phoneNumber:email:passcode:trackingEnabled:emailUpdatesEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return v17;
}

uint64_t FMIPLostModeAction.init(device:message:phoneNumber:email:passcode:trackingEnabled:emailUpdatesEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  *(_BYTE *)(v11 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isLostModeEnabled) = 1;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isSoundEnabled) = 0;
  v12 = (_QWORD *)(v11 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_email);
  *v12 = a6;
  v12[1] = a7;
  v13 = (_QWORD *)(v11 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_message);
  *v13 = a2;
  v13[1] = a3;
  v14 = (_QWORD *)(v11 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_phoneNumber);
  *v14 = a4;
  v14[1] = a5;
  v15 = (_QWORD *)(v11 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_passcode);
  *v15 = a8;
  v15[1] = a9;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isUserTextEnabled) = (a3 | a5) != 0;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isTrackingEnabled) = a10;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isEmailUpdatesEnabled) = a11;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext) = 0;
  v16 = (_QWORD *)(v11 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  *v16 = 0;
  v16[1] = 0;
  v17 = (_QWORD *)(v11 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
  *v17 = 0;
  v17[1] = 0;
  v18 = (_QWORD *)(v11 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_username);
  *v18 = 0;
  v18[1] = 0;
  v19 = (_QWORD *)(v11 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  *v19 = 0;
  v19[1] = 0;
  v20 = (_QWORD *)(v11 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
  *v20 = 0;
  v20[1] = 0;
  *(_OWORD *)(v11 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession) = xmmword_1CCB66A50;
  sub_1CC9FED60(a1, v11 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  return v11;
}

void FMIPLostModeAction.__allocating_init(device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPLostModeAction.init(device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CCAD6D00()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t FMIPLostModeAction.deinit()
{
  uint64_t v0;

  v0 = FMIPDeviceAction.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FMIPLostModeAction.__deallocating_deinit()
{
  FMIPDeviceAction.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCAD6E50(uint64_t *a1, uint64_t *a2)
{
  return _s8FMIPCore18FMIPLostModeActionC2eeoiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t FMIPLostModeItemAction.isTrackingEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_isTrackingEnabled);
}

uint64_t FMIPLostModeItemAction.isUserTextEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_isUserTextEnabled);
}

uint64_t FMIPLostModeItemAction.isEmailUpdatesEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_isEmailUpdatesEnabled);
}

uint64_t FMIPLostModeItemAction.message.getter()
{
  return sub_1CCA81B40(&OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_message);
}

uint64_t FMIPLostModeItemAction.phoneNumber.getter()
{
  return sub_1CCA81B40(&OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_phoneNumber);
}

uint64_t FMIPLostModeItemAction.email.getter()
{
  return sub_1CCA81B40(&OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_email);
}

uint64_t FMIPLostModeItemAction.__allocating_init(item:message:phoneNumber:email:trackingEnabled:emailUpdatesEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  v17 = swift_allocObject();
  v18 = (_QWORD *)(v17 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_message);
  *v18 = a2;
  v18[1] = a3;
  v19 = (_QWORD *)(v17 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_phoneNumber);
  *v19 = a4;
  v19[1] = a5;
  *(_BYTE *)(v17 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_isUserTextEnabled) = (a3 | a5) != 0;
  *(_BYTE *)(v17 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_isTrackingEnabled) = a8;
  *(_BYTE *)(v17 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_isEmailUpdatesEnabled) = a9;
  v20 = (_QWORD *)(v17 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_email);
  *v20 = a6;
  v20[1] = a7;
  sub_1CC9FED60(a1, v17 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  return v17;
}

uint64_t FMIPLostModeItemAction.init(item:message:phoneNumber:email:trackingEnabled:emailUpdatesEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v10 = (_QWORD *)(v9 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_message);
  *v10 = a2;
  v10[1] = a3;
  v11 = (_QWORD *)(v9 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_phoneNumber);
  *v11 = a4;
  v11[1] = a5;
  *(_BYTE *)(v9 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_isUserTextEnabled) = (a3 | a5) != 0;
  *(_BYTE *)(v9 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_isTrackingEnabled) = a8;
  *(_BYTE *)(v9 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_isEmailUpdatesEnabled) = a9;
  v12 = (_QWORD *)(v9 + OBJC_IVAR____TtC8FMIPCore22FMIPLostModeItemAction_email);
  *v12 = a6;
  v12[1] = a7;
  sub_1CC9FED60(a1, v9 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  return v9;
}

void FMIPLostModeItemAction.__allocating_init(item:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPLostModeItemAction.init(item:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CCAD7090()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t FMIPLostModeItemAction.deinit()
{
  uint64_t v0;

  sub_1CCA30300(v0 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FMIPLostModeItemAction.__deallocating_deinit()
{
  uint64_t v0;

  sub_1CCA30300(v0 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t _s8FMIPCore18FMIPLostModeActionC2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_message + 8);
  v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_message + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_message) == *(_QWORD *)(a2
                                                                                              + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_message)
      && v4 == v5;
    if (!v6 && (sub_1CCB642A0() & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_phoneNumber + 8);
  v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_phoneNumber + 8);
  if (v7)
  {
    if (!v8)
      return 0;
    v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_phoneNumber) == *(_QWORD *)(a2
                                                                                                  + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_phoneNumber)
      && v7 == v8;
    if (!v9 && (sub_1CCB642A0() & 1) == 0)
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_email + 8);
  v11 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_email + 8);
  if (v10)
  {
    if (!v11)
      return 0;
    v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_email) == *(_QWORD *)(a2
                                                                                             + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_email)
       && v10 == v11;
    if (!v12 && (sub_1CCB642A0() & 1) == 0)
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_passcode + 8);
  v14 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_passcode + 8);
  if (!v13)
  {
    if (!v14)
      goto LABEL_37;
    return 0;
  }
  if (!v14)
    return 0;
  v15 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_passcode) == *(_QWORD *)(a2
                                                                                              + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_passcode)
     && v13 == v14;
  if (!v15 && (sub_1CCB642A0() & 1) == 0)
    return 0;
LABEL_37:
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isUserTextEnabled) != *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isUserTextEnabled)
    || *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isTrackingEnabled) != *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isTrackingEnabled)
    || *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isEmailUpdatesEnabled) != *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isEmailUpdatesEnabled))
  {
    return 0;
  }
  return static FMIPDevice.== infix(_:_:)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
}

uint64_t sub_1CCAD7358()
{
  return type metadata accessor for FMIPLostModeAction(0);
}

uint64_t type metadata accessor for FMIPLostModeAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E36E8);
}

uint64_t sub_1CCAD7374()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for FMIPLostModeAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPLostModeAction.__allocating_init(device:message:phoneNumber:email:passcode:trackingEnabled:emailUpdatesEnabled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 424))();
}

uint64_t sub_1CCAD73F8()
{
  return type metadata accessor for FMIPLostModeItemAction(0);
}

uint64_t type metadata accessor for FMIPLostModeItemAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E38E8);
}

uint64_t sub_1CCAD7414()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for FMIPLostModeItemAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPLostModeItemAction.__allocating_init(item:message:phoneNumber:email:trackingEnabled:emailUpdatesEnabled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

void sub_1CCAD753C(unint64_t a1, id a2, char *a3)
{
  uint32_t *p_ivar_base_size;
  _QWORD *v7;
  char **p_type;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  void (*v21)(_QWORD, id);
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  void (*v29)(uint64_t, id);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  p_ivar_base_size = &FMIPNotifyItemAction.ivar_base_size;
  v7 = &unk_1EF9FF000;
  p_type = &stru_1E8912FF0.type;
  if (a2)
  {
    v9 = a2;
    if (qword_1EF9DEF60 != -1)
      swift_once();
    v10 = sub_1CCB637FC();
    sub_1CCA16C20(v10, (uint64_t)qword_1EF9FF480);
    v11 = a2;
    v12 = a2;
    v13 = sub_1CCB637D8();
    v14 = sub_1CCB63D30();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v31 = v16;
      *(_DWORD *)v15 = 136315138;
      swift_getErrorValue();
      v17 = sub_1CCB64300();
      v33 = sub_1CCA0CB60(v17, v18, &v31);
      v7 = (_QWORD *)&unk_1EF9FF000;
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v13, v14, "FMReverseGeocodingOperation: reverse geocoding completed with error: %s", v15, 0xCu);
      swift_arrayDestroy();
      v19 = v16;
      p_type = (char **)(&stru_1E8912FF0 + 16);
      MEMORY[0x1D17B214C](v19, -1, -1);
      v20 = v15;
      p_ivar_base_size = (_DWORD *)(&FMIPNotifyItemAction + 8);
      MEMORY[0x1D17B214C](v20, -1, -1);
    }
    else
    {

    }
    v21 = *(void (**)(_QWORD, id))&a3[v7[224]];
    v22 = a2;
    v21(0, a2);

    objc_msgSend(a3, p_type[470], 1);
  }
  if (a1)
  {
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      if (sub_1CCB64090())
      {
LABEL_11:
        if ((a1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1D17B154C](0, a1);
        }
        else
        {
          if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_24;
          }
          swift_unknownObjectRetain();
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)p_ivar_base_size + 492) == -1)
        {
LABEL_15:
          v24 = sub_1CCB637FC();
          sub_1CCA16C20(v24, (uint64_t)qword_1EF9FF480);
          swift_unknownObjectRetain_n();
          v25 = sub_1CCB637D8();
          v26 = sub_1CCB63D48();
          if (os_log_type_enabled(v25, v26))
          {
            v27 = (uint8_t *)swift_slowAlloc();
            v28 = swift_slowAlloc();
            *(_DWORD *)v27 = 136315138;
            v31 = 0;
            v32 = 0xE000000000000000;
            v33 = v28;
            sub_1CCA14E90((uint64_t *)&unk_1EF9E3A60);
            sub_1CCB64060();
            v31 = sub_1CCA0CB60(v31, v32, &v33);
            v7 = (_QWORD *)&unk_1EF9FF000;
            p_type = (char **)(&stru_1E8912FF0 + 16);
            sub_1CCB63E44();
            swift_unknownObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1CC9BF000, v25, v26, "FMReverseGeocodingOperation: reverse geocoding completed with item: %s", v27, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1D17B214C](v28, -1, -1);
            MEMORY[0x1D17B214C](v27, -1, -1);

          }
          else
          {

            swift_unknownObjectRelease_n();
          }
          v29 = *(void (**)(uint64_t, id))&a3[v7[224]];
          v30 = swift_unknownObjectRetain();
          v29(v30, a2);
          swift_unknownObjectRelease();
          objc_msgSend(a3, p_type[470], 1);
          swift_unknownObjectRelease();
          return;
        }
LABEL_24:
        swift_once();
        goto LABEL_15;
      }
    }
    else
    {
      v23 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v23)
        goto LABEL_11;
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1CCAD79BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1CCA14E90((uint64_t *)&unk_1EF9E3A60);
    v4 = sub_1CCB63B38();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

id sub_1CCAD7A68()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMReverseGeocodingOperation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1CCAD7AD8()
{
  return type metadata accessor for FMReverseGeocodingOperation();
}

uint64_t sub_1CCAD7AE0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CCAD7B20()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1CCAD7B44(unint64_t a1, void *a2)
{
  uint64_t v2;

  sub_1CCAD753C(a1, a2, *(char **)(v2 + 16));
}

uint64_t sub_1CCAD7B4C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FMReverseGeocodingRequest();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1CCAD7B88()
{
  const void *v0;
  const void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  __CFNotificationCenter *v6;
  __CFString *v7;
  id v8;
  id v9;

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPDeviceConnectionStateProvider: registering for notifications", v5, 2u);
    MEMORY[0x1D17B214C](v5, -1, -1);
  }

  v6 = CFNotificationCenterGetDarwinNotifyCenter();
  v7 = (__CFString *)sub_1CCB63964();
  CFNotificationCenterAddObserver(v6, v1, (CFNotificationCallback)sub_1CCAD7D2C, v7, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  v8 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v9 = (id)sub_1CCB63964();
  objc_msgSend(v8, sel_addObserver_selector_name_object_, v1, sel_handleDeviceStateChanged, v9, 0);

}

void sub_1CCAD7D2C(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v8 = (void *)objc_opt_self();
  v9 = a1;
  v10 = a3;
  v11 = a5;
  v12 = objc_msgSend(v8, sel_defaultCenter);
  v13 = (id)sub_1CCB63964();
  objc_msgSend(v12, sel_postNotificationName_object_, v13, 0);

}

uint64_t sub_1CCAD7E18()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1CCA2F610(v0 + 24);
  return swift_deallocClassInstance();
}

void FMIPItemLostModeMetadata.init(lostModeInfo:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  void *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;

  v4 = sub_1CCA14E90(&qword_1ED8A7130);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB635B0();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v34 - v12;
  v14 = objc_msgSend(a1, sel_phoneNumber);
  if (v14)
  {
    v15 = v14;
    v16 = sub_1CCB63988();
    v18 = v17;

  }
  else
  {
    v16 = 0;
    v18 = 0xE000000000000000;
  }
  *a2 = v16;
  a2[1] = v18;
  v19 = objc_msgSend(a1, sel_message);
  if (v19)
  {
    v20 = v19;
    v21 = sub_1CCB63988();
    v23 = v22;

  }
  else
  {
    v21 = 0;
    v23 = 0xE000000000000000;
  }
  a2[2] = v21;
  a2[3] = v23;
  v24 = objc_msgSend(a1, sel_timestamp);
  if (v24)
  {
    v25 = v24;
    sub_1CCB63580();

    v26 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v26(v6, v11, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      v26(v13, v6, v7);
      goto LABEL_12;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  sub_1CCB635A4();
  sub_1CCAD80B8((uint64_t)v6);
LABEL_12:
  v27 = type metadata accessor for FMIPItemLostModeMetadata();
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))((char *)a2 + *(int *)(v27 + 24), v13, v7);
  v28 = objc_msgSend(a1, sel_email);
  if (v28)
  {
    v29 = v28;
    v30 = sub_1CCB63988();
    v32 = v31;

  }
  else
  {

    v30 = 0;
    v32 = 0xE000000000000000;
  }
  v33 = (uint64_t *)((char *)a2 + *(int *)(v27 + 28));
  *v33 = v30;
  v33[1] = v32;
}

uint64_t sub_1CCAD80B8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CCA14E90(&qword_1ED8A7130);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t FMIPItemLostModeMetadata.ownerNumber.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPItemLostModeMetadata.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPItemLostModeMetadata.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FMIPItemLostModeMetadata() + 24);
  v4 = sub_1CCB635B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FMIPItemLostModeMetadata.email.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPItemLostModeMetadata() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1CCAD81D4(char *a1)
{
  sub_1CCB1BD80(*a1);
}

void sub_1CCAD81E0()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCAD8234()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCAD82A4()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCAD82E8()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCAD8344()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCAD8394()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCAD8404@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCAD96E0();
  *a1 = result;
  return result;
}

uint64_t sub_1CCAD8430()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCAD8468 + 4 * byte_1CCB6DD3C[*v0]))();
}

void sub_1CCAD8468(_QWORD *a1@<X8>)
{
  *a1 = 0x6567617373656DLL;
  a1[1] = 0xE700000000000000;
}

void sub_1CCAD8484(_QWORD *a1@<X8>)
{
  *a1 = 0x6D617473656D6974;
  a1[1] = 0xE900000000000070;
}

void sub_1CCAD84A4(_QWORD *a1@<X8>)
{
  *a1 = 0x6C69616D65;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_1CCAD84BC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCAD84F4 + 4 * byte_1CCB6DD40[*v0]))(0x6D754E72656E776FLL, 0xEB00000000726562);
}

uint64_t sub_1CCAD84F4()
{
  return 0x6567617373656DLL;
}

uint64_t sub_1CCAD850C()
{
  return 0x6D617473656D6974;
}

uint64_t sub_1CCAD8528()
{
  return 0x6C69616D65;
}

uint64_t sub_1CCAD853C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCAD96E0();
  *a1 = result;
  return result;
}

uint64_t sub_1CCAD8560()
{
  sub_1CCAD88A4();
  return sub_1CCB643D8();
}

uint64_t sub_1CCAD8588()
{
  sub_1CCAD88A4();
  return sub_1CCB643E4();
}

uint64_t FMIPItemLostModeMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v38 = a2;
  v3 = sub_1CCB635B0();
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  MEMORY[0x1E0C80A78](v3);
  v39 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_1CCA14E90(&qword_1EF9E3A70);
  v5 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FMIPItemLostModeMetadata();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCAD88A4();
  v11 = v43;
  sub_1CCB643B4();
  if (v11)
  {
    v31 = (uint64_t)a1;
  }
  else
  {
    v37 = (uint64_t *)v10;
    v43 = v8;
    v12 = a1;
    v13 = v5;
    v14 = v39;
    v15 = v40;
    v17 = v41;
    v16 = v42;
    v47 = 0;
    v18 = sub_1CCB64150();
    v20 = v19;
    v36 = v18;
    v46 = 1;
    v34 = sub_1CCB64150();
    v35 = v21;
    v45 = 2;
    sub_1CCAD9018(&qword_1EF9E3A80, MEMORY[0x1E0CB08C0]);
    sub_1CCB64180();
    v44 = 3;
    v23 = sub_1CCB64150();
    v24 = *(void (**)(char *, uint64_t))(v13 + 8);
    v32 = v25;
    v33 = v23;
    v24(v7, v16);
    v26 = (char *)v37;
    *v37 = v36;
    *((_QWORD *)v26 + 1) = v20;
    v27 = v35;
    *((_QWORD *)v26 + 2) = v34;
    *((_QWORD *)v26 + 3) = v27;
    v28 = v43;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v26[*(int *)(v43 + 24)], v14, v17);
    v29 = (uint64_t *)&v26[*(int *)(v28 + 28)];
    v30 = v32;
    *v29 = v33;
    v29[1] = v30;
    sub_1CCAD88E8((uint64_t)v26, v38);
    v31 = (uint64_t)v12;
  }
  return sub_1CCA01CA0(v31);
}

unint64_t sub_1CCAD88A4()
{
  unint64_t result;

  result = qword_1EF9E3A78;
  if (!qword_1EF9E3A78)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6DF4C, &type metadata for FMIPItemLostModeMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3A78);
  }
  return result;
}

uint64_t sub_1CCAD88E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPItemLostModeMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t FMIPItemLostModeMetadata.init(ownerNumber:message:timestamp:email:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;

  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  v12 = type metadata accessor for FMIPItemLostModeMetadata();
  v13 = (char *)a8 + *(int *)(v12 + 24);
  v14 = sub_1CCB635B0();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a5, v14);
  v16 = (_QWORD *)((char *)a8 + *(int *)(v12 + 28));
  *v16 = a6;
  v16[1] = a7;
  return result;
}

uint64_t FMIPItemLostModeMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = sub_1CCA14E90(&qword_1EF9E3A88);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCAD88A4();
  sub_1CCB643CC();
  v8[15] = 0;
  sub_1CCB641E0();
  if (!v1)
  {
    v8[14] = 1;
    sub_1CCB641E0();
    type metadata accessor for FMIPItemLostModeMetadata();
    v8[13] = 2;
    sub_1CCB635B0();
    sub_1CCAD9018(&qword_1EF9E3A90, MEMORY[0x1E0CB0890]);
    sub_1CCB64210();
    v8[12] = 3;
    sub_1CCB641E0();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t FMIPItemLostModeMetadata.debugDescription.getter()
{
  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  type metadata accessor for FMIPItemLostModeMetadata();
  sub_1CCB635B0();
  sub_1CCAD9018((unint64_t *)&qword_1EF9E34D8, MEMORY[0x1E0CB08F0]);
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return 0;
}

uint64_t sub_1CCAD8D30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPItemLostModeMetadata.init(from:)(a1, a2);
}

uint64_t sub_1CCAD8D44(_QWORD *a1)
{
  return FMIPItemLostModeMetadata.encode(to:)(a1);
}

uint64_t _s8FMIPCore24FMIPItemLostModeMetadataV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v31;
  uint64_t v33;

  v4 = type metadata accessor for FMIPItemLostModeMetadata();
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v33 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v33 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v33 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v33 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v33 - v20;
  if (*a1 == *a2 && a1[1] == a2[1])
  {
    sub_1CCAD9728((uint64_t)a1, (uint64_t)&v33 - v20);
    sub_1CCAD9728((uint64_t)a2, (uint64_t)v19);
  }
  else
  {
    v22 = sub_1CCB642A0();
    sub_1CCAD9728((uint64_t)a1, (uint64_t)v21);
    sub_1CCAD9728((uint64_t)a2, (uint64_t)v19);
    if ((v22 & 1) == 0)
    {
      sub_1CCAD976C((uint64_t)v21);
      sub_1CCAD976C((uint64_t)v19);
      sub_1CCAD9728((uint64_t)a1, (uint64_t)v16);
      sub_1CCAD9728((uint64_t)a2, (uint64_t)v13);
LABEL_19:
      sub_1CCAD976C((uint64_t)v13);
      sub_1CCAD976C((uint64_t)v16);
      sub_1CCAD9728((uint64_t)a1, (uint64_t)v10);
      sub_1CCAD9728((uint64_t)a2, (uint64_t)v7);
      goto LABEL_20;
    }
  }
  if (*((_QWORD *)v21 + 2) == *((_QWORD *)v19 + 2) && *((_QWORD *)v21 + 3) == *((_QWORD *)v19 + 3))
  {
    sub_1CCAD976C((uint64_t)v21);
    sub_1CCAD976C((uint64_t)v19);
    sub_1CCAD9728((uint64_t)a1, (uint64_t)v16);
    sub_1CCAD9728((uint64_t)a2, (uint64_t)v13);
  }
  else
  {
    v24 = sub_1CCB642A0();
    sub_1CCAD976C((uint64_t)v21);
    sub_1CCAD976C((uint64_t)v19);
    sub_1CCAD9728((uint64_t)a1, (uint64_t)v16);
    sub_1CCAD9728((uint64_t)a2, (uint64_t)v13);
    if ((v24 & 1) == 0)
      goto LABEL_19;
  }
  v25 = sub_1CCB63574();
  sub_1CCAD976C((uint64_t)v13);
  sub_1CCAD976C((uint64_t)v16);
  sub_1CCAD9728((uint64_t)a1, (uint64_t)v10);
  sub_1CCAD9728((uint64_t)a2, (uint64_t)v7);
  if ((v25 & 1) == 0)
  {
LABEL_20:
    v31 = 0;
    goto LABEL_21;
  }
  v26 = *(int *)(v4 + 28);
  v27 = *(_QWORD *)&v10[v26];
  v28 = *(_QWORD *)&v10[v26 + 8];
  v29 = &v7[v26];
  if (v27 == *(_QWORD *)v29 && v28 == *((_QWORD *)v29 + 1))
    v31 = 1;
  else
    v31 = sub_1CCB642A0();
LABEL_21:
  sub_1CCAD976C((uint64_t)v10);
  sub_1CCAD976C((uint64_t)v7);
  return v31 & 1;
}

uint64_t sub_1CCAD9018(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1CCB635B0();
    result = MEMORY[0x1D17B2068](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FMIPItemLostModeMetadata(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_1CCB635B0();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 28);
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for FMIPItemLostModeMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FMIPItemLostModeMetadata(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1CCB635B0();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 28);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FMIPItemLostModeMetadata(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1CCB635B0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for FMIPItemLostModeMetadata(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1CCB635B0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

_QWORD *assignWithTake for FMIPItemLostModeMetadata(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1CCB635B0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 28);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPItemLostModeMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCAD9440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1CCB635B0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FMIPItemLostModeMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCAD94C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1CCB635B0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPItemLostModeMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CCAD9588 + 4 * byte_1CCB6DD49[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CCAD95BC + 4 * byte_1CCB6DD44[v4]))();
}

uint64_t sub_1CCAD95BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAD95C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAD95CCLL);
  return result;
}

uint64_t sub_1CCAD95D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAD95E0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CCAD95E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAD95EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPItemLostModeMetadata.CodingKeys()
{
  return &type metadata for FMIPItemLostModeMetadata.CodingKeys;
}

unint64_t sub_1CCAD960C()
{
  unint64_t result;

  result = qword_1EF9E3A98;
  if (!qword_1EF9E3A98)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6DF24, &type metadata for FMIPItemLostModeMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3A98);
  }
  return result;
}

unint64_t sub_1CCAD9654()
{
  unint64_t result;

  result = qword_1EF9E3AA0;
  if (!qword_1EF9E3AA0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6DE5C, &type metadata for FMIPItemLostModeMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3AA0);
  }
  return result;
}

unint64_t sub_1CCAD969C()
{
  unint64_t result;

  result = qword_1EF9E3AA8;
  if (!qword_1EF9E3AA8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6DE84, &type metadata for FMIPItemLostModeMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3AA8);
  }
  return result;
}

uint64_t sub_1CCAD96E0()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1CCAD9728(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPItemLostModeMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCAD976C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FMIPItemLostModeMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CCAD97A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char **p_type;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  void *v41;
  id v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD v54[2];
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;

  v63 = type metadata accessor for FMIPDiscoveredAccessory();
  v66 = *(_QWORD *)(v63 - 8);
  v2 = MEMORY[0x1E0C80A78](v63);
  v4 = (char *)v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (_QWORD *)((char *)v54 - v6);
  v8 = MEMORY[0x1E0C80A78](v5);
  v65 = (uint64_t)v54 - v9;
  MEMORY[0x1E0C80A78](v8);
  v64 = (uint64_t)v54 - v10;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1CCB63EC8();
    sub_1CC9C30A8(0, &qword_1EF9E3AB0);
    sub_1CCADAA40();
    result = sub_1CCB63C94();
    a1 = v70;
    v60 = v71;
    v12 = v72;
    v13 = v73;
    v14 = v74;
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 56);
    v60 = a1 + 56;
    v17 = ~v15;
    v18 = -v15;
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v14 = v19 & v16;
    result = swift_bridgeObjectRetain();
    v12 = v17;
    v13 = 0;
  }
  v58 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v54[1] = v12;
  v59 = (unint64_t)(v12 + 64) >> 6;
  v56 = v7 + 1;
  v20 = MEMORY[0x1E0DEE9D8];
  p_type = &stru_1E8912FF0.type;
  v57 = MEMORY[0x1E0DEE9B0] + 8;
  v61 = v7;
  v62 = v4;
  v55 = a1;
  if (a1 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v14)
    {
      v22 = (v14 - 1) & v14;
      v23 = __clz(__rbit64(v14)) | (v13 << 6);
      v68 = v13;
      goto LABEL_29;
    }
    v26 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v26 >= v59)
      goto LABEL_44;
    v27 = *(_QWORD *)(v60 + 8 * v26);
    v28 = v13 + 1;
    if (!v27)
    {
      v28 = v13 + 2;
      if (v13 + 2 >= v59)
        goto LABEL_44;
      v27 = *(_QWORD *)(v60 + 8 * v28);
      if (!v27)
      {
        v28 = v13 + 3;
        if (v13 + 3 >= v59)
          goto LABEL_44;
        v27 = *(_QWORD *)(v60 + 8 * v28);
        if (!v27)
        {
          v28 = v13 + 4;
          if (v13 + 4 >= v59)
            goto LABEL_44;
          v27 = *(_QWORD *)(v60 + 8 * v28);
          if (!v27)
          {
            v28 = v13 + 5;
            if (v13 + 5 >= v59)
              goto LABEL_44;
            v27 = *(_QWORD *)(v60 + 8 * v28);
            if (!v27)
            {
              v29 = v13 + 6;
              while (v59 != v29)
              {
                v27 = *(_QWORD *)(v60 + 8 * v29++);
                if (v27)
                {
                  v28 = v29 - 1;
                  goto LABEL_28;
                }
              }
LABEL_44:
              sub_1CCA2F54C();
              return v20;
            }
          }
        }
      }
    }
LABEL_28:
    v22 = (v27 - 1) & v27;
    v68 = v28;
    v23 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_29:
    v25 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v23);
    if (!v25)
      goto LABEL_44;
    while (1)
    {
      v30 = objc_msgSend(v25, p_type[464]);
      if (v30)
      {
        v31 = v30;
        v32 = objc_msgSend(v25, p_type[464]);
        v33 = v32;
        v67 = v20;
        if (v32)
        {
          v34 = objc_msgSend(v32, sel_defaultRole);

          if (v34)
          {
            v35 = v34;
            v36 = objc_msgSend(v35, sel_roleEmoji);
            v37 = sub_1CCB63988();
            v34 = v38;

            v39 = objc_msgSend(v35, sel_role);
            v40 = sub_1CCB63988();
            v33 = v41;

            v42 = objc_msgSend(v35, sel_roleId);
            a1 = v55;
          }
          else
          {
            v42 = 0;
            v37 = 0;
            v40 = 0;
            v33 = 0;
          }
        }
        else
        {
          v42 = 0;
          v37 = 0;
          v34 = 0;
          v40 = 0;
        }
        v46 = v61;
        v61[2] = v37;
        v46[3] = v34;
        v46[4] = v40;
        v46[5] = v33;
        *v46 = v25;
        v46[1] = v42;
        v7 = v46;
        v47 = (uint64_t)v46 + *(int *)(v63 + 24);
        FMIPHawkeyeProductInformation.init(productInformation:vendorIdentifier:productIdentifier:requiresAdditionalConnectionTime:)(v31, 0, 0, 1, v47);
        v48 = type metadata accessor for FMIPHawkeyeProductInformation();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v47, 0, 1, v48);
        v4 = v62;
        v20 = v67;
      }
      else
      {
        v43 = v56;
        v56[4] = 0;
        *v43 = 0u;
        v43[1] = 0u;
        v44 = (char *)v7 + *(int *)(v63 + 24);
        v45 = type metadata accessor for FMIPHawkeyeProductInformation();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 1, 1, v45);
        *v7 = v25;
      }
      v14 = v22;
      v49 = v65;
      sub_1CCADDE4C((uint64_t)v7, v65);
      v50 = v49;
      v51 = v64;
      sub_1CCADDE4C(v50, v64);
      sub_1CCADDE4C(v51, (uint64_t)v4);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v20 = sub_1CCACA184(0, *(_QWORD *)(v20 + 16) + 1, 1, v20);
      v53 = *(_QWORD *)(v20 + 16);
      v52 = *(_QWORD *)(v20 + 24);
      if (v53 >= v52 >> 1)
        v20 = sub_1CCACA184(v52 > 1, v53 + 1, 1, v20);
      *(_QWORD *)(v20 + 16) = v53 + 1;
      result = sub_1CCADDE4C((uint64_t)v4, v20+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v53);
      v13 = v68;
      p_type = (char **)(&stru_1E8912FF0 + 16);
      if ((a1 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      v24 = sub_1CCB63F28();
      if (v24)
      {
        v69 = v24;
        sub_1CC9C30A8(0, &qword_1EF9E3AB0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v25 = v75;
        swift_unknownObjectRelease();
        v68 = v13;
        v22 = v14;
        p_type = (char **)(&stru_1E8912FF0 + 16);
        if (v25)
          continue;
      }
      goto LABEL_44;
    }
  }
  __break(1u);
  return result;
}

BOOL static DiscoveryType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t DiscoveryType.hash(into:)()
{
  return sub_1CCB64348();
}

uint64_t DiscoveryType.hashValue.getter()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

uint64_t sub_1CCAD9E14@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CCADF180;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return sub_1CC9DF994(v3);
}

uint64_t sub_1CCAD9E78(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CCADF198;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  sub_1CC9DF994(v3);
  result = sub_1CCA203A8(v7);
  *a2 = (uint64_t)v6;
  a2[1] = v5;
  return result;
}

uint64_t FMIPAccessoryDiscoveryController.Callbacks.discoveredAccessoriesCallback.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CC9DF994(*v0);
  return v1;
}

uint64_t FMIPAccessoryDiscoveryController.Callbacks.discoveredAccessoriesCallback.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_1CCA203A8(*v2);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*FMIPAccessoryDiscoveryController.Callbacks.discoveredAccessoriesCallback.modify())()
{
  return nullsub_1;
}

uint64_t sub_1CCAD9F78@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *);

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CCADEC48;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return sub_1CC9DF994(v3);
}

uint64_t sub_1CCAD9FDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CCADEC18;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 16);
  sub_1CC9DF994(v3);
  result = sub_1CCA203A8(v7);
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

uint64_t FMIPAccessoryDiscoveryController.Callbacks.lostAccessoriesCallback.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1CC9DF994(v1);
  return v1;
}

uint64_t FMIPAccessoryDiscoveryController.Callbacks.lostAccessoriesCallback.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1CCA203A8(*(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*FMIPAccessoryDiscoveryController.Callbacks.lostAccessoriesCallback.modify())()
{
  return nullsub_1;
}

uint64_t sub_1CCADA0DC@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CCADEC10;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)(uint64_t))v5;
  return sub_1CC9DF994(v3);
}

uint64_t sub_1CCADA140(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CCADEC10;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 32);
  sub_1CC9DF994(v3);
  result = sub_1CCA203A8(v7);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  return result;
}

uint64_t FMIPAccessoryDiscoveryController.Callbacks.errorHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1CC9DF994(v1);
  return v1;
}

uint64_t FMIPAccessoryDiscoveryController.Callbacks.errorHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1CCA203A8(*(_QWORD *)(v2 + 32));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*FMIPAccessoryDiscoveryController.Callbacks.errorHandler.modify())()
{
  return nullsub_1;
}

uint64_t sub_1CCADA240()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CC9DF994(*v0);
  return v1;
}

uint64_t sub_1CCADA274(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v4 = a2;
  else
    v4 = 0;
  result = sub_1CCA203A8(*v2);
  *v2 = a1;
  v2[1] = v4;
  return result;
}

_QWORD *(*sub_1CCADA2AC(_QWORD *a1))(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  if (!*v1)
    v2 = 0;
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v1;
  return sub_1CCADA2D0;
}

_QWORD *sub_1CCADA2D0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = result[1];
  v1 = (_QWORD *)result[2];
  if (!*result)
    v2 = 0;
  *v1 = *result;
  v1[1] = v2;
  return result;
}

uint64_t sub_1CCADA2E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1CC9DF994(v1);
  return v1;
}

uint64_t sub_1CCADA31C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v4 = a2;
  else
    v4 = 0;
  result = sub_1CCA203A8(*(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v4;
  return result;
}

_QWORD *(*sub_1CCADA354(_QWORD *a1))(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  if (!v2)
    v3 = 0;
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v1;
  return sub_1CCADA378;
}

_QWORD *sub_1CCADA378(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = result[1];
  v1 = result[2];
  if (!*result)
    v2 = 0;
  *(_QWORD *)(v1 + 16) = *result;
  *(_QWORD *)(v1 + 24) = v2;
  return result;
}

uint64_t sub_1CCADA390()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1CC9DF994(v1);
  return v1;
}

uint64_t sub_1CCADA3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1CCA203A8(*(_QWORD *)(v2 + 32));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*sub_1CCADA3F4())()
{
  return nullsub_1;
}

uint64_t sub_1CCADA404@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)*a1;
  swift_beginAccess();
  v4 = v3[2];
  v5 = v3[3];
  v6 = v3[4];
  v7 = v3[5];
  v8 = v3[6];
  v9 = v3[7];
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  sub_1CC9DF994(v4);
  sub_1CC9DF994(v6);
  return sub_1CC9DF994(v8);
}

uint64_t sub_1CCADA484(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = (_QWORD *)*a2;
  swift_beginAccess();
  v9 = v8[2];
  v12 = v8[6];
  v11 = v8[4];
  v8[2] = v2;
  v8[3] = v3;
  v8[4] = v4;
  v8[5] = v5;
  v8[6] = v6;
  v8[7] = v7;
  sub_1CC9DF994(v2);
  sub_1CC9DF994(v4);
  sub_1CC9DF994(v6);
  sub_1CCA203A8(v9);
  sub_1CCA203A8(v11);
  return sub_1CCA203A8(v12);
}

uint64_t sub_1CCADA550@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_beginAccess();
  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v8 = v1[6];
  v7 = v1[7];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v8;
  a1[5] = v7;
  sub_1CC9DF994(v3);
  sub_1CC9DF994(v5);
  return sub_1CC9DF994(v8);
}

uint64_t sub_1CCADA5CC(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;

  v2 = *((_QWORD *)a1 + 2);
  v8 = *(__int128 *)((char *)a1 + 24);
  v9 = *a1;
  v3 = *((_QWORD *)a1 + 5);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 48);
  *(_OWORD *)(v1 + 16) = v9;
  *(_QWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 40) = v8;
  *(_QWORD *)(v1 + 56) = v3;
  sub_1CCA203A8(v4);
  sub_1CCA203A8(v5);
  return sub_1CCA203A8(v6);
}

uint64_t (*sub_1CCADA66C())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1CCADA6A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 96) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

