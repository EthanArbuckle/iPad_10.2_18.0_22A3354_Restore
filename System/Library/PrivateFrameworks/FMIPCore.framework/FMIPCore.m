void sub_1CC9C1864(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;

  v5 = a2 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    if (v5)
      sub_1CCB63F1C();
    else
      sub_1CC9C1B60(v6, a2);
    return;
  }
  if (v5)
  {
    if (a2 < 0)
      v7 = a2;
    else
      v7 = a2 & 0xFFFFFFFFFFFFFF8;
    sub_1CC9C1B60(v7, a1);
    return;
  }
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v27 = a1 + 56;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(a1 + 56);
  sub_1CC9C30A8(0, a3);
  v11 = 0;
  v28 = (unint64_t)(v8 + 63) >> 6;
  v12 = a2 + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_38;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v15 >= v28)
      return;
    v16 = *(_QWORD *)(v27 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v28)
        return;
      v16 = *(_QWORD *)(v27 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v28)
          return;
        v16 = *(_QWORD *)(v27 + 8 * v11);
        if (!v16)
        {
          v11 = v15 + 3;
          if (v15 + 3 >= v28)
            return;
          v16 = *(_QWORD *)(v27 + 8 * v11);
          if (!v16)
            break;
        }
      }
    }
LABEL_37:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_38:
    v18 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v14);
    v19 = sub_1CCB63DE4();
    v20 = -1 << *(_BYTE *)(a2 + 32);
    v21 = v19 & ~v20;
    if (((*(_QWORD *)(v12 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      goto LABEL_45;
    v29 = v11;
    v22 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v21);
    v23 = sub_1CCB63DF0();

    if ((v23 & 1) == 0)
    {
      v24 = ~v20;
      while (1)
      {
        v21 = (v21 + 1) & v24;
        if (((*(_QWORD *)(v12 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        v25 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v21);
        v26 = sub_1CCB63DF0();

        if ((v26 & 1) != 0)
          goto LABEL_19;
      }
LABEL_45:

      return;
    }
LABEL_19:

    v11 = v29;
  }
  v17 = v15 + 4;
  if (v17 >= v28)
    return;
  v16 = *(_QWORD *)(v27 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_37;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v28)
      return;
    v16 = *(_QWORD *)(v27 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_37;
  }
LABEL_48:
  __break(1u);
}

void sub_1CC9C1B60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  char v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 != sub_1CCB63EF8())
    return;
  v4 = 0;
  v5 = a2 + 56;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v4 << 6);
LABEL_6:
    v12 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v11);
    v13 = sub_1CCB63F34();

    if ((v13 & 1) == 0)
      return;
  }
  v14 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v14 >= v9)
    return;
  v15 = *(_QWORD *)(v5 + 8 * v14);
  ++v4;
  if (v15)
    goto LABEL_19;
  v4 = v14 + 1;
  if (v14 + 1 >= v9)
    return;
  v15 = *(_QWORD *)(v5 + 8 * v4);
  if (v15)
  {
LABEL_19:
    v8 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_6;
  }
  v16 = v14 + 2;
  if (v16 >= v9)
    return;
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v9)
      return;
    v15 = *(_QWORD *)(v5 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_19;
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_1CC9C1DA8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CCB635B0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1CC9C1E2C(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t _s8FMIPCore10FMIPPersonV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  unint64_t v22;
  _BYTE v23[24];
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v33 = *(unsigned __int8 *)(a1 + 33);
  v27 = *(unsigned __int8 *)(a1 + 35);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 56);
  v25 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&v23[16] = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a2 + 32);
  v31 = *(unsigned __int8 *)(a1 + 34);
  v32 = *(unsigned __int8 *)(a2 + 33);
  v30 = *(unsigned __int8 *)(a2 + 34);
  v26 = *(unsigned __int8 *)(a2 + 35);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v28 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(a2 + 64);
  v22 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)v23 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)&v23[8] = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v12 = sub_1CCB642A0(), result = 0, (v12 & 1) != 0))
  {
    if (v2 == v8 && v3 == v7 || (v14 = sub_1CCB642A0(), result = 0, (v14 & 1) != 0))
    {
      if (v5 == v10 && v6 == v11)
      {
        if (v4 != v9)
          return 0;
      }
      else
      {
        v15 = sub_1CCB642A0();
        result = 0;
        if ((v15 & 1) == 0 || ((v4 ^ v9) & 1) != 0)
          return result;
      }
      if (v33)
        v16 = 1162760004;
      else
        v16 = 0x474E4944414F4CLL;
      if (v33)
        v17 = 0xE400000000000000;
      else
        v17 = 0xE700000000000000;
      if (v32)
        v18 = 1162760004;
      else
        v18 = 0x474E4944414F4CLL;
      if (v32)
        v19 = 0xE400000000000000;
      else
        v19 = 0xE700000000000000;
      if (v16 == v18 && v17 == v19)
      {
        swift_bridgeObjectRelease_n();
        result = 0;
        if (v31 != v30)
          return result;
      }
      else
      {
        v20 = sub_1CCB642A0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = 0;
        if ((v20 & 1) == 0 || ((v31 ^ v30) & 1) != 0)
          return result;
      }
      if (((v27 ^ v26) & 1) == 0)
      {
        if (v29 == v28 && v25 == v24 || (v21 = sub_1CCB642A0(), result = 0, (v21 & 1) != 0))
        {
          result = *(_OWORD *)&v23[8] == 0;
          if (*(_QWORD *)&v23[16] && *(_QWORD *)&v23[8])
          {
            if (__PAIR128__(*(unint64_t *)&v23[16], v22) == *(_OWORD *)v23)
              return 1;
            else
              return sub_1CCB642A0();
          }
        }
      }
    }
  }
  return result;
}

uint64_t static FMIPManagerConfiguration.default.getter()
{
  if (qword_1ED8A8CF0 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_1CC9C2178(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(uint64_t))
{
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)(a1 + *a4);
  *v6 = a2;
  v6[1] = a3;
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRelease();
  return a5(v7);
}

uint64_t sub_1CC9C21C4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1CCB635B0();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CC9C2270(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t ObjectType;

  v2 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v2);
  if (result)
  {
    v4 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(a1, ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t FMIPManager.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  FMIPManager.initialize()();
  return swift_unknownObjectRelease();
}

uint64_t sub_1CC9C23B4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1D17B2068](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for FMIPInitClientResponse()
{
  return objc_opt_self();
}

unint64_t sub_1CC9C2414(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1CCA14E90(&qword_1EF9E3440);
  v2 = (_QWORD *)sub_1CCB640B4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_1CCA074F4(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1CC9C252C(uint64_t a1)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_1CC9C2FAC(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1CC9C2588()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CCB635B0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1CC9C25FC()
{
  return swift_initClassMetadata2();
}

void sub_1CC9C2660()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1CCB63604();
  if (v0 <= 0x3F)
  {
    type metadata accessor for FMIPProductType();
    if (v1 <= 0x3F)
    {
      sub_1CCA217EC();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t sub_1CC9C2754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t ObjectType;
  __int128 v10;
  __int128 v11;
  _OWORD v12[5];
  uint64_t v13;

  v6 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_siriDelegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v6);
  if (result)
  {
    v8 = *(_QWORD *)(v6 + 8);
    ObjectType = swift_getObjectType();
    v10 = *(_OWORD *)(a2 + 48);
    v12[2] = *(_OWORD *)(a2 + 32);
    v12[3] = v10;
    v12[4] = *(_OWORD *)(a2 + 64);
    v13 = *(_QWORD *)(a2 + 80);
    v11 = *(_OWORD *)(a2 + 16);
    v12[0] = *(_OWORD *)a2;
    v12[1] = v11;
    (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, v12, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for FMIPUserInfoResponseFragment()
{
  return objc_opt_self();
}

uint64_t sub_1CC9C2830()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CCB63490();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1CC9C28D4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CCB635B0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1CC9C2964()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CCB635B0();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1CC9C2A34(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1CCB637FC();
  sub_1CC9C6214(v3, a2);
  sub_1CCA16C20(v3, (uint64_t)a2);
  return sub_1CCB637E4();
}

uint64_t sub_1CC9C2AA8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CCB63634();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1CC9C2B4C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CCB635B0();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1CC9C2BE8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_appBeacons;
  sub_1CCA14E90(&qword_1EF9E6620);
  sub_1CCA02370(&qword_1EF9E6628, &qword_1EF9E6620, MEMORY[0x1E0DEAF58]);
  sub_1CCB63CB8();
  v5 = v7;
  if (!v7)
    v5 = MEMORY[0x1E0DEE9D8];
  *a1 = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + v4) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CC9C2CB0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1CCB63604();
  if (v1 <= 0x3F)
  {
    result = sub_1CCB635B0();
    if (v2 <= 0x3F)
      return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t type metadata accessor for FMIPRefreshClientResponse()
{
  return objc_opt_self();
}

uint64_t sub_1CC9C2DD4()
{
  uint64_t v0;

  v0 = sub_1CCB637FC();
  sub_1CC9C6214(v0, qword_1ED8AD7F8);
  sub_1CCA16C20(v0, (uint64_t)qword_1ED8AD7F8);
  return sub_1CCB637F0();
}

uint64_t sub_1CC9C2E1C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CCB635B0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t FMIPBeaconRefreshingControllerClientConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;

  v5 = sub_1CCA14E90(&qword_1EF9E6300);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA20A0C();
  sub_1CCB643B4();
  if (!v2)
  {
    v9 = sub_1CCB6415C();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9 & 1;
  }
  return sub_1CCA01CA0((uint64_t)a1);
}

uint64_t sub_1CC9C2FAC(uint64_t result)
{
  uint64_t v1;
  int v2;
  _BYTE *v3;
  int v4;
  char v6;

  v2 = 4;
  switch(result)
  {
    case 1:
      v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_separationMonitoringState);
      if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_separationMonitoringState) != 6)
      {
        LOBYTE(v2) = 6;
        goto LABEL_16;
      }
      return result;
    case 2:
      goto LABEL_11;
    case 3:
      v2 = 5;
      goto LABEL_11;
    case 4:
      v2 = 3;
      goto LABEL_11;
    case 5:
      v2 = 2;
      goto LABEL_11;
    case 6:
      v2 = 1;
      goto LABEL_11;
    case 7:
      v2 = 0;
LABEL_11:
      v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_separationMonitoringState);
      v4 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_separationMonitoringState);
      if (v2 == v4 && (v4 & 0xFE) != 6)
        return result;
      goto LABEL_16;
    default:
      v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_separationMonitoringState);
      if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_separationMonitoringState) == 7)
        return result;
      LOBYTE(v2) = 7;
LABEL_16:
      *v3 = v2;
      result = MEMORY[0x1D17B2218](v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_delegate);
      if (result)
      {
        v6 = v2;
        sub_1CC9DA708(&v6);
        return swift_unknownObjectRelease();
      }
      return result;
  }
}

uint64_t sub_1CC9C30A8(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t type metadata accessor for FMDemoManager()
{
  return objc_opt_self();
}

uint64_t sub_1CC9C3100(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_1CC9C30A8(0, &qword_1EF9E26D8);
  sub_1CCA1F9B4();
  v2 = sub_1CCB63C40();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CC9C3178(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_1CC9C30A8(0, &qword_1EF9E28C0);
  v2 = sub_1CCB63B38();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1CC9C31E4()
{
  unint64_t result;

  result = qword_1EF9E3A58;
  if (!qword_1EF9E3A58)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF9E3A58);
  }
  return result;
}

void sub_1CC9C3220()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED8A7128)
  {
    sub_1CCB63490();
    v0 = sub_1CCB63E2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED8A7128);
  }
}

uint64_t sub_1CC9C3274()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for FMIPItemUpdateType(319);
  if (v1 <= 0x3F)
  {
    result = sub_1CCB635B0();
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

void sub_1CC9C3300(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  if (a1)
    v2 = sub_1CCB63B20();
  else
    v2 = 0;
  v3 = (id)v2;
  objc_msgSend(v1, sel_setEnabledTopics_);

}

uint64_t sub_1CC9C334C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_1CC9C30A8(0, &qword_1EF9DF450);
  sub_1CC9F74C8((unint64_t *)&unk_1EF9DF458, &qword_1EF9DF450);
  v2 = sub_1CCB63C40();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_1CC9C33E4()
{
  unint64_t v0;
  unint64_t v1;

  sub_1CCB635B0();
  if (v0 <= 0x3F)
  {
    sub_1CC9C3D94();
    if (v1 <= 0x3F)
      swift_initClassMetadata2();
  }
}

uint64_t FMLocationShifter.__deallocating_deinit()
{
  id *v0;

  return swift_deallocClassInstance();
}

id sub_1CC9C34D0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3620]), sel_init);
  qword_1ED8A9200 = (uint64_t)result;
  return result;
}

uint64_t sub_1CC9C3500()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(void **)(v0[16] + 112);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1CCA21650;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_1CCA1F984;
  v3[3] = &unk_1E88EFA00;
  v3[4] = v2;
  objc_msgSend(v1, sel_sharingLimitsWithCompletion_, v3);
  return swift_continuation_await();
}

void sub_1CC9C3598()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1CCB63604();
  if (v0 <= 0x3F)
  {
    sub_1CC9C36F4(319, (unint64_t *)&qword_1ED8A8EF0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    if (v1 <= 0x3F)
    {
      sub_1CC9C36F4(319, (unint64_t *)&qword_1ED8A8FE0, (void (*)(uint64_t))type metadata accessor for FMIPDevice);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

void sub_1CC9C36F4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1CCB63E2C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t type metadata accessor for FMAPSConnectionHandler()
{
  return objc_opt_self();
}

uint64_t sub_1CC9C3760(uint64_t a1)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_1CC9CB49C(a1, 0);
    return swift_release();
  }
  return result;
}

void sub_1CC9C37C0(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t sub_1CC9C3820()
{
  swift_bridgeObjectRetain();
  sub_1CCA14E90(&qword_1EF9E21F0);
  return sub_1CCB63BEC();
}

uint64_t type metadata accessor for FMLocationShifter()
{
  return objc_opt_self();
}

uint64_t sub_1CC9C3884@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _QWORD v15[5];

  v2 = sub_1CCA14E90(&qword_1ED8AA618);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0) + 40;
  v5 = sub_1CCB636B8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = type metadata accessor for FMIPServerInteractionController(0);
  swift_allocObject();
  result = sub_1CC9E3174((uint64_t)v4);
  v8 = result;
  if (qword_1ED8A8C10 != -1)
    result = swift_once();
  if (byte_1ED8A70D1 == 1)
  {
    v15[3] = v6;
    v15[4] = &off_1E88FD238;
    v15[0] = v8;
    swift_retain();
    v9 = sub_1CCB3CF1C((uint64_t)v15);
    sub_1CCA01CA0((uint64_t)v15);
    if (qword_1ED8AA630 != -1)
      swift_once();
    v10 = sub_1CCB637FC();
    sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
    v11 = sub_1CCB637D8();
    v12 = sub_1CCB63D48();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPManager: Entering Demo Mode", v13, 2u);
      MEMORY[0x1D17B214C](v13, -1, -1);
    }

    a1[3] = type metadata accessor for FMIPDemoInteractionController();
    a1[4] = (uint64_t)&off_1E8901E28;
    result = swift_release();
    v8 = (uint64_t)v9;
  }
  else
  {
    a1[3] = v6;
    a1[4] = (uint64_t)&off_1E88FD238;
  }
  *a1 = v8;
  return result;
}

uint64_t sub_1CC9C3C3C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager) + 288);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CC9C3C64()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CCB635B0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1CC9C3CD8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1CCB63604();
  if (v1 <= 0x3F)
  {
    result = sub_1CCB635B0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for FMIPLocationController()
{
  return objc_opt_self();
}

void sub_1CC9C3D94()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED8A8B20)
  {
    sub_1CCB63634();
    v0 = sub_1CCB63E2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED8A8B20);
  }
}

uint64_t sub_1CC9C3DE8(uint64_t a1, char a2)
{
  uint64_t result;
  unsigned __int8 v4;

  result = MEMORY[0x1D17B2218](a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_delegate);
  if (result)
  {
    v4 = a2 & 1;
    sub_1CC9D26E4(&v4);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CC9C3E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A9DE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CC9C3E84(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1CCA14E90(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1CC9C3EC0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1CCA14E90(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1CC9C3F04(uint64_t a1, void *a2)
{
  void *v2;
  void (*v3)(void *, unint64_t);
  id v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a2;
  v3 = *(void (**)(void *, unint64_t))(a1 + 32);
  if (a2)
  {
    swift_retain();
    v4 = v2;
    v2 = (void *)sub_1CCB634CC();
    v6 = v5;

  }
  else
  {
    swift_retain();
    v6 = 0xF000000000000000;
  }
  v3(v2, v6);
  sub_1CCA1B1A8((uint64_t)v2, v6);
  return swift_release();
}

uint64_t FMIPManagerConfiguration.__allocating_init(enabledSubsystems:preferredLocale:authenticationUIProvider:snapshotHandlers:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a3;
  v23 = a4;
  v6 = sub_1CCB63634();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  if (qword_1ED8A8CF0 != -1)
    swift_once();
  v10 = qword_1ED8A8CE0;
  v11 = *(_QWORD *)(qword_1ED8A8CE0 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_cacheDirectory);
  v12 = *(_QWORD *)(qword_1ED8A8CE0 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_cacheDirectory + 8);
  v13 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  swift_bridgeObjectRetain();
  v13(a2, v6);
  v15 = *(_QWORD *)(v10 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_interactionControllerProvider);
  v14 = *(_QWORD *)(v10 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_interactionControllerProvider + 8);
  type metadata accessor for FMIPManagerConfiguration();
  v16 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v16 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_preferredLocale, v9, v6);
  v17 = (_QWORD *)(v16 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_cacheDirectory);
  *v17 = v11;
  v17[1] = v12;
  v18 = (_QWORD *)(v16 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_interactionControllerProvider);
  *v18 = v15;
  v18[1] = v14;
  sub_1CC9C3E3C(v22, v16 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_authenticationUIProvider);
  *(_QWORD *)(v16 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems) = v21;
  *(_QWORD *)(v16 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_snapshotHandlers) = v23;
  swift_retain();
  return v16;
}

uint64_t sub_1CC9C4118()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[6];

  v0 = sub_1CCB63604();
  if (v1 <= 0x3F)
  {
    v2 = sub_1CCB635B0();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getTupleTypeLayout2();
      v5[4] = v5;
      v5[5] = &unk_1CCB6FFE8;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v0;
}

uint64_t sub_1CC9C41BC()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CC9C42C0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(void **)(v0 + 120);
  v2 = (uint64_t)objc_msgSend(v1, sel_maxCircleMembers);
  if (v2 < 0)
    return sub_1CCB64078();
  v3 = v2;
  if (MEMORY[0x1D17B2218](*(_QWORD *)(v0 + 128) + 152))
  {
    v5 = v3;
    sub_1CC9CCA20(&v5);

    swift_unknownObjectRelease();
  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CC9C4398(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v4 = sub_1CCB63820();
  v19 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63868();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
  v12 = *(_QWORD *)(v11 + 232);
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = sub_1CCA20380(a2, v12);
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    swift_beginAccess();
    v15 = swift_bridgeObjectRetain();
    v16 = sub_1CC9F338C(v15, a2);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v11 + 80) = v16;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v11 + 232) = a2;
    swift_bridgeObjectRetain();
    swift_release();
    swift_bridgeObjectRelease();
    aBlock[4] = sub_1CCA241A4;
    aBlock[5] = a1;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA00C38;
    aBlock[3] = &unk_1E88F7D28;
    v17 = _Block_copy(aBlock);
    swift_retain();
    sub_1CCB63844();
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v10, v6, v17);
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return swift_release();
}

uint64_t sub_1CC9C4630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void *v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t aBlock;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  uint64_t (*v36)();
  uint64_t v37;
  uint64_t v38;

  v10 = sub_1CCB63820();
  v30 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCB63868();
  v28 = *(_QWORD *)(v13 - 8);
  v29 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager;
  swift_retain();
  LOBYTE(a5) = sub_1CC9CBAE0(a2, a3, a4, a5);
  result = swift_release();
  if ((a5 & 1) != 0)
  {
    v18 = *(_QWORD *)(a1 + v16);
    swift_beginAccess();
    v19 = *(_QWORD *)(v18 + 80);
    swift_bridgeObjectRetain();
    swift_retain();
    v20 = sub_1CC9E3BE4(v19, 1);
    swift_release();
    swift_bridgeObjectRelease();
    v21 = MEMORY[0x1E0DEE9D8];
    if ((v20 & 1) != 0)
    {
      v27[1] = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue);
      v36 = sub_1CCA241A4;
      v37 = a1;
      aBlock = MEMORY[0x1E0C809B0];
      v33 = 1107296256;
      v34 = sub_1CCA00C38;
      v35 = &unk_1E88F7C38;
      v22 = _Block_copy(&aBlock);
      swift_retain();
      sub_1CCB63844();
      v38 = v21;
      sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      sub_1CCA14E90(&qword_1ED8AA338);
      sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
      v21 = MEMORY[0x1E0DEE9D8];
      sub_1CCB63E98();
      MEMORY[0x1D17B1318](0, v15, v12, v22);
      _Block_release(v22);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v10);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v29);
      swift_release();
    }
    v23 = *(_QWORD *)(a1 + v16);
    swift_beginAccess();
    v24 = *(_QWORD *)(v23 + 280);
    swift_bridgeObjectRetain();
    swift_retain();
    v25 = sub_1CC9E0F20(v24, 2, 1);
    swift_release();
    result = swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
    {
      v36 = sub_1CCA242E0;
      v37 = a1;
      aBlock = MEMORY[0x1E0C809B0];
      v33 = 1107296256;
      v34 = sub_1CCA00C38;
      v35 = &unk_1E88F7C10;
      v26 = _Block_copy(&aBlock);
      swift_retain();
      sub_1CCB63844();
      v31 = v21;
      sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      sub_1CCA14E90(&qword_1ED8AA338);
      sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
      sub_1CCB63E98();
      MEMORY[0x1D17B1318](0, v15, v12, v26);
      _Block_release(v26);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v10);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v29);
      return swift_release();
    }
  }
  return result;
}

uint64_t static FMDemoManager.assetURL(for:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78]();
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1CCB63490();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8A8C00 != -1)
    swift_once();
  v7 = sub_1CCA16C20(v0, (uint64_t)qword_1ED8A70B8);
  sub_1CCA24A5C(v7, (uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_1CCA39410((uint64_t)v2);
    sub_1CCAABCE4();
    swift_allocError();
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    sub_1CCB63454();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_1CC9C4BD0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CC9C4C0C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t ObjectType;
  char v8;

  v4 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v4);
  if (result)
  {
    v6 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    v8 = a2 & 1;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v6 + 144))(a1, &v8, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CC9C4C9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v2 = qword_1ED8A7240;
  *(_QWORD *)(v1 + qword_1ED8A7240) = a1;
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + v2);
  v5[3] = sub_1CCA14E90(&qword_1ED8AA320);
  v5[0] = v3;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)v5, 0x6F43726576726573, 0xED0000747865746ELL);
  return swift_endAccess();
}

uint64_t sub_1CC9C4D44(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1CC9C4DAC(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t ObjectType;
  char v8;

  v4 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v4);
  if (result)
  {
    v6 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    v8 = a2;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v6 + 176))(a1, &v8, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CC9C4E3C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = sub_1CCB635B0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_1CCB635A4();
  v6 = v5 + qword_1ED8AD7B8;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 40))(v6, v4, v1);
  return swift_endAccess();
}

void sub_1CC9C4EE4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v8;
  NSObject *oslog;

  if (a2)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v3 = sub_1CCB637FC();
    sub_1CCA16C20(v3, (uint64_t)qword_1ED8AD7F8);
    oslog = sub_1CCB637D8();
    v4 = sub_1CCB63D48();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1CC9BF000, oslog, v4, "FMIPDeviceConnectionStateProvider: unable to get connected devices with error", v5, 2u);
      MEMORY[0x1D17B214C](v5, -1, -1);
    }

  }
  else
  {
    *(_QWORD *)(a3 + 16) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (MEMORY[0x1D17B2218](a3 + 24))
    {
      if (a1)
        v8 = a1;
      else
        v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1CC9CE058(v8);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
  }
}

uint64_t destroy for FMIPBeaconRefreshFilter()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CC9C5064(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t (*v42)();
  uint64_t v43;
  uint64_t v44;

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 192);
  swift_bridgeObjectRetain();
  v7 = sub_1CC9C54E4((uint64_t)a1, v6);
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    v8 = *(_QWORD *)(v3 + 184);
    swift_bridgeObjectRetain();
    v9 = sub_1CC9C54E4(a2, v8);
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
      return 0;
  }
  *(_QWORD *)(v3 + 192) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 184) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v3 + 288);
  swift_beginAccess();
  v12 = *(_QWORD *)(v3 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_1CCAB95A0(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 288) = v13;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v14 = swift_bridgeObjectRetain();
  v15 = sub_1CC9FD538(v14);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 80) = v15;
  swift_bridgeObjectRelease();
  v16 = swift_bridgeObjectRetain();
  v17 = sub_1CC9FDE28(v16, (uint64_t)a1);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 80) = v17;
  swift_bridgeObjectRelease();
  v18 = swift_bridgeObjectRetain();
  v19 = sub_1CC9F9BDC(v18);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 80) = v19;
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v3 + 80);
  v21 = *(_QWORD *)(v3 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = sub_1CC9F2D2C(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 80) = v22;
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(v3 + 80);
  v24 = *(_QWORD *)(v3 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = sub_1CC9F26C4(v23, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 80) = v25;
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(v3 + 80);
  v27 = *(_QWORD *)(v3 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28 = sub_1CC9FCED0(v26, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 80) = v28;
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v3 + 80);
  v30 = *(_QWORD *)(v3 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31 = sub_1CC9F338C(v29, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 80) = v31;
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(v3 + 80);
  v33 = *(_QWORD *)(v3 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = sub_1CCAB8778(v32, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 80) = v34;
  swift_bridgeObjectRelease();
  v35 = *(_QWORD *)(v3 + 80);
  v36 = *(_QWORD *)(v3 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v37 = sub_1CCAB8E60(v35, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 80) = v37;
  swift_bridgeObjectRelease();
  v38 = *(_QWORD *)(v3 + 16);
  if ((v38 & 1) != 0 && *(_BYTE *)(v3 + 24) == 1 && *(_QWORD *)(v3 + 328))
  {
    swift_retain();
    v39 = swift_bridgeObjectRetain();
    sub_1CC9D4D5C(v39, (uint64_t)&unk_1E88F9260, (uint64_t)sub_1CCA207C4, (uint64_t)&unk_1E88F9278);
    swift_bridgeObjectRelease();
    swift_release();
  }
  v40 = swift_bridgeObjectRetain();
  v41 = sub_1CCABA058(v40, (uint64_t)a1, a2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 280) = v41;
  swift_bridgeObjectRelease();
  v42 = (uint64_t (*)())swift_bridgeObjectRetain();
  v43 = sub_1CCAAEB04(v42);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 280) = v43;
  swift_bridgeObjectRelease();
  if ((v38 & 2) != 0 && *(_BYTE *)(v3 + 24) == 1)
  {
    if (*(_QWORD *)(v3 + 312))
    {
      swift_retain();
      v44 = swift_bridgeObjectRetain();
      sub_1CC9D4D5C(v44, (uint64_t)&unk_1E88F91C0, (uint64_t)sub_1CCABB5C0, (uint64_t)&unk_1E88F91D8);
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  sub_1CCAAFC74(a1, a2);
  return 1;
}

uint64_t sub_1CC9C54E4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  void *v15;
  double v16;
  id v17;
  unint64_t v18;
  char v19;
  char v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  void *v26;
  double v27;
  id v28;
  int64_t v29;
  int v30;
  int v31;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 1 << *(_BYTE *)(result + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(result + 64);
  v29 = (unint64_t)(v3 + 63) >> 6;
  if (v5)
  {
    v6 = __clz(__rbit64(v5));
LABEL_22:
    v10 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v6);
    v11 = *v10;
    v12 = v10[1];
    v13 = (unsigned __int8 *)(*(_QWORD *)(result + 56) + 24 * v6);
    v14 = *v13;
    v31 = v13[1];
    v30 = v13[2];
    v15 = (void *)*((_QWORD *)v13 + 1);
    v16 = *((double *)v13 + 2);
    swift_bridgeObjectRetain();
    v17 = v15;
    v18 = sub_1CCA074F4(v11, v12);
    v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
      v21 = (unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v18);
      v22 = *v21;
      v23 = v21[1];
      v24 = v21[2];
      v25 = v21[3];
      v26 = (void *)*((_QWORD *)v21 + 1);
      v27 = *((double *)v21 + 2);
      sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A7F30);
      v28 = v26;
      if ((sub_1CCB63DF0() & 1) != 0
        && v27 == v16
        && ((v14 ^ v22) & 1) == 0
        && ((v31 ^ v23) & 1) == 0
        && ((v30 ^ v24) & 1) == 0)
      {
        __asm { BR              X8 }
      }

    }
    else
    {
      v28 = v17;
    }

    return 0;
  }
  if ((unint64_t)(v3 + 63) >> 6 <= 1)
    return 1;
  v7 = *(_QWORD *)(result + 72);
  v8 = 1;
  if (v7)
  {
LABEL_21:
    v6 = __clz(__rbit64(v7)) + (v8 << 6);
    goto LABEL_22;
  }
  v8 = 2;
  if (v29 <= 2)
    return 1;
  v7 = *(_QWORD *)(result + 80);
  if (v7)
    goto LABEL_21;
  v8 = 3;
  if (v29 <= 3)
    return 1;
  v7 = *(_QWORD *)(result + 88);
  if (v7)
    goto LABEL_21;
  v8 = 4;
  if (v29 <= 4)
    return 1;
  v7 = *(_QWORD *)(result + 96);
  if (v7)
    goto LABEL_21;
  v9 = 5;
  if (v29 <= 5)
    return 1;
  v7 = *(_QWORD *)(result + 104);
  if (v7)
  {
    v8 = 5;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v8 >= v29)
      return 1;
    v7 = *(_QWORD *)(result + 64 + 8 * v8);
    ++v9;
    if (v7)
      goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CC9C5C78(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  char v42;
  BOOL v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  int64_t v51;
  _BOOL4 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v8 = sub_1CCB63604();
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  MEMORY[0x1E0C80A78](v8);
  v49 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = a3;
  v10 = sub_1CCA14E90(a3);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v44 - v15;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v51 = 0;
  v48 = a1;
  v19 = *(_QWORD *)(a1 + 64);
  v18 = a1 + 64;
  v17 = v19;
  v20 = 1 << *(_BYTE *)(v18 - 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v17;
  v46 = v18;
  v47 = (unint64_t)(v20 + 63) >> 6;
  v45 = v47 - 1;
  v53 = (char *)&v44 - v15;
  v23 = v54;
  v24 = (uint64_t)v49;
  while (1)
  {
    if (v22)
    {
      v25 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v26 = v25 | (v51 << 6);
LABEL_8:
      v27 = v48;
      (*(void (**)(char *, unint64_t, uint64_t))(v54 + 16))(v13, *(_QWORD *)(v48 + 48) + *(_QWORD *)(v54 + 72) * v26, v55);
      v28 = *(_QWORD *)(v27 + 56);
      v29 = sub_1CCA14E90(a4);
      v13[*(int *)(v29 + 48)] = *(_BYTE *)(v28 + v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v13, 0, 1, v29);
      v16 = v53;
      goto LABEL_30;
    }
    v30 = v51 + 1;
    if (__OFADD__(v51, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v30 < v47)
    {
      v31 = *(_QWORD *)(v46 + 8 * v30);
      if (v31)
        goto LABEL_12;
      v32 = v51 + 2;
      ++v51;
      if (v30 + 1 < v47)
      {
        v31 = *(_QWORD *)(v46 + 8 * v32);
        if (v31)
          goto LABEL_15;
        v51 = v30 + 1;
        if (v30 + 2 < v47)
        {
          v31 = *(_QWORD *)(v46 + 8 * (v30 + 2));
          if (v31)
          {
            v30 += 2;
            goto LABEL_12;
          }
          v51 = v30 + 2;
          if (v30 + 3 < v47)
          {
            v31 = *(_QWORD *)(v46 + 8 * (v30 + 3));
            if (v31)
            {
              v30 += 3;
              goto LABEL_12;
            }
            v32 = v30 + 4;
            v51 = v30 + 3;
            if (v30 + 4 < v47)
              break;
          }
        }
      }
    }
LABEL_29:
    v33 = sub_1CCA14E90(a4);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v13, 1, 1, v33);
    v22 = 0;
LABEL_30:
    sub_1CC9C3EC0((uint64_t)v13, (uint64_t)v16, v50);
    v34 = a4;
    v35 = sub_1CCA14E90(a4);
    v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v16, 1, v35);
    v52 = v36 == 1;
    if (v36 != 1)
    {
      v37 = v13;
      v38 = *(int *)(v35 + 48);
      v39 = v55;
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v24, v16, v55);
      v40 = v16[v38];
      v41 = sub_1CCAC8D64(v24);
      LOBYTE(v38) = v42;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v24, v39);
      if ((v38 & 1) != 0)
      {
        v43 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + v41) == v40;
        a4 = v34;
        v13 = v37;
        v16 = v53;
        if (v43)
          continue;
      }
    }
    return v52;
  }
  v31 = *(_QWORD *)(v46 + 8 * v32);
  if (v31)
  {
LABEL_15:
    v30 = v32;
LABEL_12:
    v22 = (v31 - 1) & v31;
    v26 = __clz(__rbit64(v31)) + (v30 << 6);
    v51 = v30;
    goto LABEL_8;
  }
  while (1)
  {
    v30 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v30 >= v47)
    {
      v51 = v45;
      goto LABEL_29;
    }
    v31 = *(_QWORD *)(v46 + 8 * v30);
    ++v32;
    if (v31)
      goto LABEL_12;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1CC9C602C(uint64_t *a1)
{
  uint64_t v2;

  sub_1CCA14E90(a1);
  sub_1CCB63D9C();
  return v2;
}

unint64_t sub_1CC9C6088(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v6 = sub_1CCA14E90(a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1CCA14E90(a3);
  v10 = sub_1CCB640B4();
  v11 = (_QWORD *)v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  v13 = *(int *)(v6 + 48);
  v14 = v10 + 64;
  v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26[1] = a1;
  v16 = a1 + v15;
  v17 = *(_QWORD *)(v7 + 72);
  swift_retain();
  while (1)
  {
    sub_1CC9EAB74(v16, (uint64_t)v9, a2);
    result = sub_1CCAC8D64((uint64_t)v9);
    if ((v19 & 1) != 0)
      break;
    v20 = result;
    *(_QWORD *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v21 = v11[6];
    v22 = sub_1CCB63604();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v20, v9, v22);
    *(_QWORD *)(v11[7] + 8 * v20) = *(_QWORD *)&v9[v13];
    v23 = v11[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v11[2] = v25;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *sub_1CC9C6214(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1CC9C6254(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _OWORD v8[2];
  uint64_t v9;

  if (qword_1EF9DEFE8 != -1)
    swift_once();
  swift_beginAccess();
  v4 = qword_1EF9FF778;
  if (*(_QWORD *)(qword_1EF9FF778 + 16) && (sub_1CC9EA88C(a1), (v6 & 1) != 0))
    sub_1CCA0CC30(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)v8);
  else
    memset(v8, 0, sizeof(v8));
  swift_endAccess();
  sub_1CCA14E90(&qword_1ED8AA610);
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
  if (swift_dynamicCast())
    return v9;
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t sub_1CC9C6358(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, void *);
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v14;

  v6 = sub_1CCA14E90(&qword_1EF9E65F8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    sub_1CC9C30A8(0, &qword_1EF9E6608);
    sub_1CCB640D8();
    v10 = sub_1CCA14E90(&qword_1EF9E6600);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 0, 1, v10);
  }
  else
  {
    v11 = sub_1CCA14E90(&qword_1EF9E6600);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
  }
  swift_retain();
  v12 = a3;
  v9(v8, a3);
  swift_release();

  return sub_1CC9C3E84((uint64_t)v8, &qword_1EF9E65F8);
}

uint64_t sub_1CC9C647C(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1CCA14E90(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

void sub_1CC9C665C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  sub_1CC9C36F4(319, &qword_1ED8A9C08, (void (*)(uint64_t))type metadata accessor for FMIPPlaySoundMetadata);
  if (v0 <= 0x3F)
  {
    sub_1CC9C36F4(319, &qword_1ED8A9CC0, (void (*)(uint64_t))type metadata accessor for FMIPDeviceLostModeMetadata);
    if (v1 <= 0x3F)
    {
      sub_1CC9C36F4(319, &qword_1ED8A98C8, (void (*)(uint64_t))type metadata accessor for FMIPLockMetadata);
      if (v2 <= 0x3F)
      {
        sub_1CC9C36F4(319, &qword_1ED8A9970, (void (*)(uint64_t))type metadata accessor for FMIPEraseMetadata);
        if (v3 <= 0x3F)
        {
          sub_1CC9C36F4(319, (unint64_t *)&unk_1ED8A8C38, (void (*)(uint64_t))type metadata accessor for FMIPItemGroup);
          if (v4 <= 0x3F)
          {
            sub_1CC9C36F4(319, (unint64_t *)&qword_1ED8A8EF0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
            if (v5 <= 0x3F)
              swift_initStructMetadata();
          }
        }
      }
    }
  }
}

uint64_t FMIPManager.selectedDevice.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = sub_1CCA14E90(&qword_1ED8A7170);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_selectedDevice;
  swift_beginAccess();
  sub_1CCA2471C(a1, v6);
  swift_endAccess();
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_refreshingController);
  if (v7)
  {
    sub_1CC9EAB74(v6, (uint64_t)v5, &qword_1ED8A7170);
    v8 = v7 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_selectedDevice;
    swift_beginAccess();
    swift_retain();
    sub_1CCA24764((uint64_t)v5, v8, &qword_1ED8A7170);
    swift_endAccess();
    swift_release();
  }
  return sub_1CC9C3E84(a1, &qword_1ED8A7170);
}

uint64_t sub_1CC9C6994(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v4)(uint64_t, void *);
  uint64_t v5;
  id v6;

  v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
    v5 = sub_1CCB63B38();
  else
    v5 = 0;
  swift_retain();
  v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1CC9C6A14(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  if (*(_QWORD *)(result + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_connection))
  {
    v1 = result;
    v2 = *(_QWORD *)(result + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_connection + 8);
    ObjectType = swift_getObjectType();
    sub_1CCA14E90((uint64_t *)&unk_1ED8AA620);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1CCB677E0;
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_topic);
    v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_topic + 8);
    *(_QWORD *)(v4 + 32) = v5;
    *(_QWORD *)(v4 + 40) = v6;
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v7(v4, ObjectType, v2);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

unint64_t sub_1CC9C6AE4(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  char v4;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    result = sub_1CCB63A18();
    if ((v4 & 1) != 0)
      result = 15;
    if (4 * v3 >= result >> 14)
      return sub_1CCB63AC0();
  }
  __break(1u);
  return result;
}

uint64_t sub_1CC9C6B8C()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  if (qword_1ED8A8D00 != -1)
    swift_once();
  v1 = *(_QWORD *)(qword_1ED8AD7A0 + 16);
  v2 = *(_QWORD *)(qword_1ED8AD7A0 + 24);
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  result = swift_bridgeObjectRelease();
  qword_1ED8AD790 = v1;
  *(_QWORD *)algn_1ED8AD798 = v2;
  return result;
}

uint64_t _s8FMIPCore16FMIPAudioChannelVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1CC9C6C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t started;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for FMSystemDirectoryUtilities();
  v0 = swift_allocObject();
  v1 = swift_slowAlloc();
  started = sysdir_start_search_path_enumeration_private();
  MEMORY[0x1D17B2260](started, v1);
  v3 = sub_1CCB63A30();
  v5 = v4;
  result = MEMORY[0x1D17B214C](v1, -1, -1);
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v5;
  qword_1ED8AD7A0 = v0;
  return result;
}

id sub_1CC9C6DB0()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  _QWORD v19[6];
  _QWORD v20[2];

  v0 = (void *)objc_opt_self();
  v1 = (void *)sub_1CCB63964();
  v2 = (void *)sub_1CCB63964();
  v3 = objc_msgSend(v0, sel_stringForKey_inDomain_, v1, v2);

  if (v3)
  {
    v4 = sub_1CCB63988();
    v6 = v5;

    v20[0] = 44;
    v20[1] = 0xE100000000000000;
    MEMORY[0x1E0C80A78]();
    v19[2] = v20;
    swift_bridgeObjectRetain();
    v7 = sub_1CCAD32D0(0x7FFFFFFFFFFFFFFFLL, 1, sub_1CCAD3C04, (uint64_t)v19, v4, v6);
    swift_bridgeObjectRelease();
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      swift_bridgeObjectRetain();
      v9 = v7 + 56;
      v10 = (double *)MEMORY[0x1E0DEE9D8];
      do
      {
        swift_bridgeObjectRetain();
        v11 = sub_1CCB63C28();
        if ((v12 & 1) == 0)
        {
          v13 = v11;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v10 = (double *)sub_1CCAC9990(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
          v15 = *((_QWORD *)v10 + 2);
          v14 = *((_QWORD *)v10 + 3);
          if (v15 >= v14 >> 1)
            v10 = (double *)sub_1CCAC9990((_QWORD *)(v14 > 1), v15 + 1, 1, v10);
          *((_QWORD *)v10 + 2) = v15 + 1;
          *(_QWORD *)&v10[v15 + 4] = v13;
        }
        v9 += 32;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = (double *)MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)v10 + 2) == 2)
    {
      v16 = v10[4];
      v17 = v10[5];
      swift_bridgeObjectRelease();
      return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9E3B8]), sel_initWithLatitude_longitude_, v16, v17);
    }
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_1CC9C701C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v0 = sub_1CCB63D84();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CCB63D6C();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v4);
  v6 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v6);
  sub_1CC9F0ECC();
  sub_1CCB63844();
  v8[1] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, v5, MEMORY[0x1E0DEF828]);
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DEF8D0], v0);
  result = sub_1CCB63DB4();
  qword_1EF9E4CA8 = result;
  return result;
}

uint64_t sub_1CC9C71D8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CC9C724C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t (**v9)@<X0>(uint64_t *@<X8>);
  _OWORD v11[2];
  uint64_t v12;

  v0 = sub_1CCB63634();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8A8C98 != -1)
    swift_once();
  v4 = qword_1ED8A8C90;
  sub_1CCB6361C();
  if (qword_1ED8A8C48 != -1)
    swift_once();
  v6 = qword_1ED8AD790;
  v5 = *(_QWORD *)algn_1ED8AD798;
  type metadata accessor for FMIPManagerConfiguration();
  memset(v11, 0, sizeof(v11));
  v12 = 0;
  v7 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v7 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_preferredLocale, v3, v0);
  v8 = (uint64_t *)(v7 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_cacheDirectory);
  *v8 = v6;
  v8[1] = v5;
  v9 = (uint64_t (**)@<X0>(uint64_t *@<X8>))(v7
                                                    + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_interactionControllerProvider);
  *v9 = sub_1CC9C3884;
  v9[1] = 0;
  sub_1CC9C3E3C((uint64_t)v11, v7 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_authenticationUIProvider);
  *(_QWORD *)(v7 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems) = v4;
  *(_QWORD *)(v7 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_snapshotHandlers) = 0;
  qword_1ED8A8CE0 = v7;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CC9C73CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63C04();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v9 = sub_1CC9C23B4(&qword_1EF9DF480, v8, (uint64_t (*)(uint64_t))type metadata accessor for FMIPBeaconSharingController, (uint64_t)&unk_1CCB65C18);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a2;
  v10[3] = v9;
  v10[4] = a2;
  v10[5] = a1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  sub_1CCA96BE8((uint64_t)v6, (uint64_t)&unk_1EF9DF488, (uint64_t)v10);
  return swift_release();
}

id static FMDemoManager.hasDemoModeAsset(for:)(_BYTE *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  void *v6;
  void *v7;
  id v8;
  _BYTE v10[16];

  v2 = sub_1CCB63490();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78]();
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10[15] = *a1;
  static FMDemoManager.assetURL(for:)();
  if (qword_1ED8A8BF8 != -1)
    swift_once();
  v6 = (void *)qword_1ED8A9200;
  sub_1CCB63478();
  v7 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_fileExistsAtPath_, v7);

  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  return v8;
}

uint64_t sub_1CC9C75D8(uint64_t a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 280);
  swift_bridgeObjectRetain();
  v5 = sub_1CC9C9510(a2, v4);
  swift_bridgeObjectRelease();
  if ((sub_1CC9E0F20(v5, 0, 0) & 1) != 0 && MEMORY[0x1D17B2218](a1 + 32))
  {
    sub_1CC9D46F4(a1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v6 = *(_QWORD *)(a1 + 288);
  swift_bridgeObjectRetain();
  v7 = sub_1CC9C9B30(a2 & 1, v6);
  swift_bridgeObjectRelease();
  if (!sub_1CCA03120(v7) || !MEMORY[0x1D17B2218](a1 + 32))
    return swift_bridgeObjectRelease();
  sub_1CCAAB33C(a1);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for FMIPBeaconRefreshFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t FMLocationShiftingRequest.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CC9C785C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1CCB636A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + qword_1ED8AD5D0;
  v2 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1CC9C7910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v0 = sub_1CCA14E90(&qword_1ED8A8EE8);
  v1 = MEMORY[0x1E0C80A78]();
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CC9C6214(v1, qword_1ED8A70B8);
  v4 = sub_1CCA16C20(v0, (uint64_t)qword_1ED8A70B8);
  if (qword_1ED8A8BF8 != -1)
    swift_once();
  v5 = (void *)qword_1ED8A9200;
  v6 = (void *)sub_1CCB63964();
  v7 = objc_msgSend(v5, sel_containerURLForSecurityApplicationGroupIdentifier_, v6);

  if (v7)
  {
    sub_1CCB6346C();

    v8 = sub_1CCB63490();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 0, 1, v8);
  }
  else
  {
    v9 = sub_1CCB63490();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v3, 1, 1, v9);
  }
  return sub_1CCA24AA4((uint64_t)v3, v4);
}

uint64_t sub_1CC9C7A68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  void *v43;
  uint64_t (*v44)(uint64_t);
  uint64_t v45;
  id v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v52[4];
  __int128 v53;
  uint64_t v54;
  char *v55;
  const char *v56;
  char *v57;
  char *v58;
  const char *v59;
  const char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t aBlock;
  uint64_t v79;
  uint64_t (*v80)(uint64_t);
  void *v81;
  uint64_t (*v82)();
  uint64_t v83;

  v4 = sub_1CCB63820();
  v71 = *(_QWORD *)(v4 - 8);
  v72 = v4;
  MEMORY[0x1E0C80A78](v4);
  v70 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_1CCB63868();
  v68 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69);
  v67 = (char *)v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for FMIPItem();
  v7 = *(_QWORD *)(v76 - 8);
  v8 = MEMORY[0x1E0C80A78](v76);
  v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)v52 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v52 - v14;
  v73 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager;
  v16 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
  v17 = *(_QWORD *)(v16 + 192);
  v18 = *(_QWORD *)(a2 + 16);
  if (v18)
  {
    v64 = a1;
    v19 = *(_QWORD *)(v16 + 184);
    v20 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v74 = v17;
    v75 = v20;
    swift_bridgeObjectRetain();
    v66 = v19;
    swift_bridgeObjectRetain();
    v63 = a2;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v21 = 136315138;
    v53 = v21;
    v52[3] = MEMORY[0x1E0DEE9B8] + 8;
    v62 = "rk";
    v61 = "edLocation";
    v60 = "lastConnectionMaintenance";
    v59 = "lastDisconnected";
    v58 = "xied";
    v57 = "lter";
    v56 = "intentLocationUpdate";
    v55 = v10;
    v54 = v18;
    v65 = 0;
    v22 = 1;
    do
    {
      if (v22 - v18 == 1)
      {
        __break(1u);
        JUMPOUT(0x1CC9C872CLL);
      }
      sub_1CCA0BEEC(v75 + *(_QWORD *)(v7 + 72) * (v22 - 1), (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v23 = *(_QWORD *)&v15[*(int *)(v76 + 76)];
      sub_1CCA0BEEC((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if ((v23 & 0x40) == 0 && *(_QWORD *)(v74 + 16))
      {
        v24 = *((_QWORD *)v13 + 44);
        v25 = *((_QWORD *)v13 + 45);
        swift_bridgeObjectRetain();
        v26 = v24;
        v27 = v74;
        v28 = sub_1CCA074F4(v26, v25);
        if ((v29 & 1) != 0)
        {
          v30 = *(_QWORD *)(v27 + 56) + 24 * v28;
          v31 = *(unsigned __int8 *)(v30 + 3);
          v32 = *(id *)(v30 + 8);
          swift_bridgeObjectRelease();
          if (v32)
          {

            __asm { BR              X8 }
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      sub_1CCA0BF30((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCA0BF30((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      ++v22;
    }
    while (v22 - v18 != 1);
    a2 = v63;
    swift_bridgeObjectRelease();
    v33 = v73;
    if ((v65 & 1) != 0)
    {
      a1 = v64;
      v17 = v74;
      swift_retain();
      v34 = (_QWORD *)swift_bridgeObjectRetain();
      sub_1CC9C5064(v34, v66);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      a1 = v64;
      v17 = v74;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v33 = v73;
  }
  swift_retain();
  v35 = sub_1CC9E0F20(a2, 4, 0);
  swift_release();
  if ((v35 & 1) != 0)
  {
    v74 = v17;
    v36 = *(_QWORD *)(a1 + v33);
    swift_beginAccess();
    v37 = *(_QWORD *)(v36 + 280);
    v76 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue);
    v82 = sub_1CCA242E0;
    v83 = a1;
    aBlock = MEMORY[0x1E0C809B0];
    v79 = 1107296256;
    v80 = sub_1CCA00C38;
    v81 = &unk_1E88F7B20;
    v38 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    v39 = v67;
    sub_1CCB63844();
    v77 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    v40 = v70;
    v41 = v72;
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v39, v40, v38);
    _Block_release(v38);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v40, v41);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v39, v69);
    swift_release();
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_useRealtimeForItems) == 1)
    {
      v42 = (uint64_t *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_locationController)
                      + OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_currentLocation);
      v43 = (void *)v42[1];
      if (v43)
      {
        v44 = (uint64_t (*)(uint64_t))v42[2];
        v45 = *v42;
        LOWORD(aBlock) = v45 & 0x101;
        BYTE2(aBlock) = BYTE2(v45) & 1;
        BYTE3(aBlock) = BYTE3(v45);
        v79 = (uint64_t)v43;
        v80 = v44;
        v46 = v43;
        sub_1CCAA37C8((unsigned __int8 *)&aBlock, v37, "FMIPManager: appending realtime location %{private}s", (uint64_t)&unk_1E88F7B58, (uint64_t)sub_1CCAAA0A8, (uint64_t)&unk_1E88F7B70);

      }
    }
    swift_bridgeObjectRelease();
    v47 = *(_QWORD **)(a1 + v73);
    swift_beginAccess();
    v48 = v47[10];
    swift_beginAccess();
    v49 = v47[35];
    v50 = v47[36];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CCA0953C(v48, v49, v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_snapshotItemsResponseReceived) & 1) == 0)
  {
    *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_snapshotItemsResponseReceived) = 1;
    sub_1CC9D6DE4(a2, 0);
  }
  *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemCounts) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1CCA982F0();
  return swift_bridgeObjectRelease();
}

void sub_1CC9C874C(uint64_t a1, char a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v4 = sub_1CCB637FC();
  sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
  v5 = sub_1CCB637D8();
  v6 = sub_1CCB63D48();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPRefreshingController: Refreshing", v7, 2u);
    MEMORY[0x1D17B214C](v7, -1, -1);
  }

  swift_retain_n();
  v8 = sub_1CCB637D8();
  v9 = sub_1CCB63D48();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v16 = v11;
    *(_DWORD *)v10 = 136315138;
    sub_1CCA14E90(&qword_1EF9E5018);
    v12 = sub_1CCB63E20();
    sub_1CCA0CB60(v12, v13, &v16);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v8, v9, "FMIPRefreshingController: Refreshing request itemCounts: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v11, -1, -1);
    MEMORY[0x1D17B214C](v10, -1, -1);

  }
  else
  {

    v14 = swift_release_n();
  }
  v15 = (void *)MEMORY[0x1D17B1B7C](v14);
  sub_1CC9D5EC8(a1, a2 & 1);
  objc_autoreleasePoolPop(v15);
}

uint64_t sub_1CC9C89B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v29[5];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v30 = sub_1CCB631F0();
  v10 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCA14E90((uint64_t *)&unk_1EF9E2AA8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v29 - v17;
  v29[1] = a1;
  v29[2] = a2;
  v29[3] = a3;
  v29[4] = a4;
  v19 = sub_1CCB63208();
  v31 = a5;
  v21 = v20;
  if (v20 >> 60 == 15)
  {
    sub_1CCA14E90(&qword_1EF9E2B58);
    sub_1CCA02370(&qword_1EF9E2B60, &qword_1EF9E2B58, (uint64_t)&unk_1CCB76FA0);
    v22 = (void *)swift_allocError();
    swift_willThrow();
    sub_1CCB63760();
    sub_1CCB63784();
    sub_1CCB63388();
    swift_allocObject();
    sub_1CCB6337C();
    sub_1CCA02370(&qword_1EF9E2B48, (uint64_t *)&unk_1EF9E2AA8, (uint64_t)&protocol conformance descriptor for FMDiskIO<A>.KeyPair);
    v24 = sub_1CCB63370();
    v26 = v25;
    swift_release();
    v32 = v24;
    v33 = v26;
    v27 = v30;
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0D21268], v30);
    sub_1CCABBA50();
    sub_1CCB631FC();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v27);

    sub_1CCA1B120(v24, v26);
    v18 = v16;
  }
  else
  {
    v23 = v19;
    sub_1CCB63364();
    swift_allocObject();
    sub_1CCB63358();
    sub_1CCA02370(&qword_1EF9E2B68, (uint64_t *)&unk_1EF9E2AA8, (uint64_t)&protocol conformance descriptor for FMDiskIO<A>.KeyPair);
    sub_1CCB6334C();
    sub_1CCA1B1A8(v23, v21);
    swift_release();
  }
  return sub_1CC9C3EC0((uint64_t)v18, v31, (uint64_t *)&unk_1EF9E2AA8);
}

uint64_t sub_1CC9C8E74@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
  swift_beginAccess();
  *a1 = *(_QWORD *)(v3 + 280);
  return swift_bridgeObjectRetain();
}

id sub_1CC9C8ED4(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD, _QWORD), uint64_t a7, void *a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  void (*v39)(_QWORD, _QWORD);
  uint8_t *v40;
  uint8_t *v41;
  void *v42;
  _BYTE *v43;
  void (*v44)(_QWORD, _QWORD);
  uint64_t v46[5];

  v13 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v13);
  if (a3)
  {
    v14 = sub_1CCB631E4();
    v46[3] = v14;
    v46[4] = sub_1CC9CAA38(&qword_1ED8A8B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
    v15 = sub_1CCA01CC0(v46);
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v15, *MEMORY[0x1E0D21248], v14);
    LOBYTE(v14) = MEMORY[0x1D17B0748](v46);
    sub_1CCA01CA0((uint64_t)v46);
    if ((v14 & 1) != 0)
    {
      if (qword_1ED8AA630 != -1)
        swift_once();
      v16 = sub_1CCB637FC();
      sub_1CCA16C20(v16, (uint64_t)qword_1ED8AD7F8);
      v17 = a3;
      v18 = a3;
      v19 = sub_1CCB637D8();
      v20 = sub_1CCB63D48();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc();
        v44 = a6;
        v22 = swift_slowAlloc();
        v46[0] = v22;
        *(_DWORD *)v21 = 136315138;
        swift_getErrorValue();
        v23 = sub_1CCB64300();
        sub_1CCA0CB60(v23, v24, v46);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1CC9BF000, v19, v20, "FMIPServerInteractionController: didn't complete because of error (will check Stewie): %s", v21, 0xCu);
        swift_arrayDestroy();
        v25 = v22;
        a6 = v44;
        MEMORY[0x1D17B214C](v25, -1, -1);
        MEMORY[0x1D17B214C](v21, -1, -1);
      }
      else
      {

      }
      v27 = *(id *)(a4 + qword_1ED8A8D80);
      v28 = sub_1CCA7FF9C(v27);

      if ((v28 & 1) != 0 && ((*(uint64_t (**)(void))(qword_1ED8AD5D8 + *a5 + 152))() & 1) != 0)
      {
        v29 = sub_1CCB637D8();
        v30 = sub_1CCB63D48();
        if (os_log_type_enabled(v29, v30))
        {
          v31 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v31 = 0;
          _os_log_impl(&dword_1CC9BF000, v29, v30, "FMIPServerInteractionController: discarded alert because refresh request and Stewie-enabled", v31, 2u);
          MEMORY[0x1D17B214C](v31, -1, -1);
        }

      }
      else
      {
        v32 = sub_1CCB637D8();
        v33 = sub_1CCB63D48();
        if (os_log_type_enabled(v32, v33))
        {
          v34 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v34 = 0;
          _os_log_impl(&dword_1CC9BF000, v32, v33, "FMIPServerInteractionController: proceeding with alert", v34, 2u);
          MEMORY[0x1D17B214C](v34, -1, -1);
        }

        sub_1CCB087B4(a5, (uint64_t)a3);
      }
    }
    a6(0, a3);
    return objc_msgSend(a8, sel_signal);
  }
  else
  {
    v26 = *a5;
    if (v26 == type metadata accessor for FMIPInitClientRequest())
      *(_BYTE *)(a4 + qword_1ED8AD7C0) = 1;
    if (a2 >> 60 != 15)
      __asm { BR              X10 }
    if (qword_1ED8AA630 != -1)
      swift_once();
    v36 = sub_1CCB637FC();
    sub_1CCA16C20(v36, (uint64_t)qword_1ED8AD7F8);
    v37 = sub_1CCB637D8();
    v38 = sub_1CCB63D48();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = a6;
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_1CC9BF000, v37, v38, "FMIPServerInteractionController: received empty data", v40, 2u);
      v41 = v40;
      a6 = v39;
      MEMORY[0x1D17B214C](v41, -1, -1);
    }

    sub_1CCB114C0();
    v42 = (void *)swift_allocError();
    *v43 = 1;
    a6(0, v42);

    return objc_msgSend(a8, sel_signal);
  }
}

uint64_t sub_1CC9C9510(int a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t *v34;
  int v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  __int128 *v59;
  char *v60;
  char *v61;
  int v62;
  uint64_t updated;
  unint64_t *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  _BYTE v78[288];
  uint64_t v79[37];

  v62 = a1;
  updated = type metadata accessor for FMIPItemUpdateType(0);
  MEMORY[0x1E0C80A78](updated);
  v61 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for FMIPItem();
  v4 = *(_QWORD *)(v53 - 8);
  v5 = MEMORY[0x1E0C80A78](v53);
  v58 = (uint64_t)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v70 = (uint64_t)&v50 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v50 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v50 - v12;
  v73 = sub_1CCA14E90(&qword_1ED8A8DE8);
  v65 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v54 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DF0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (unint64_t *)((char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v16);
  v64 = (unint64_t *)((char *)&v50 - v19);
  v20 = *(_QWORD *)(a2 + 16);
  v59 = (__int128 *)(v13 + 392);
  v60 = v13 + 8;
  result = swift_bridgeObjectRetain_n();
  v22 = 0;
  *(_QWORD *)&v23 = 136315394;
  v52 = v23;
  v51 = 0x80000001CCB7B6A0;
  v50 = MEMORY[0x1E0DEE9B8] + 8;
  v55 = a2;
  v56 = v20;
  v71 = v11;
  v57 = v13;
  while (1)
  {
    v72 = a2;
    if (v22 == v20)
    {
      v24 = 1;
      v69 = v20;
      v25 = v73;
    }
    else
    {
      if (v22 >= v20)
        goto LABEL_29;
      v26 = v22 + 1;
      v27 = v22;
      v28 = (uint64_t)&v54[*(int *)(v73 + 48)];
      sub_1CCA0BEEC(v55+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v22, v28, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v29 = (uint64_t)v18 + *(int *)(v73 + 48);
      *v18 = v27;
      v30 = v28;
      v25 = v73;
      sub_1CC9FED60(v30, v29, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v24 = 0;
      v69 = v26;
      v11 = v71;
    }
    v31 = v65;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v18, v24, 1, v25);
    v32 = v18;
    v33 = (uint64_t)v18;
    v34 = v64;
    sub_1CC9C3EC0(v33, (uint64_t)v64, (uint64_t *)&unk_1ED8A8DF0);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v31 + 48))(v34, 1, v25) == 1)
    {
      swift_bridgeObjectRelease();
      return v72;
    }
    v68 = *v34;
    sub_1CC9FED60((uint64_t)v34 + *(int *)(v25 + 48), (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if ((v62 & 1) != 0)
      v35 = (v13[*(int *)(v53 + 76)] >> 6) & 1;
    else
      v35 = 0;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v36 = sub_1CCB637FC();
    sub_1CCA16C20(v36, (uint64_t)qword_1ED8AD7F8);
    sub_1CCA0BEEC((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v37 = sub_1CCB637D8();
    v38 = sub_1CCB63D48();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc();
      v40 = swift_slowAlloc();
      v79[0] = v40;
      *(_DWORD *)v39 = v52;
      v41 = *((_QWORD *)v11 + 44);
      v42 = *((_QWORD *)v71 + 45);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v39 + 4) = sub_1CCA0CB60(v41, v42, v79);
      swift_bridgeObjectRelease();
      sub_1CCA0BF30((uint64_t)v71, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      *(_WORD *)(v39 + 12) = 2080;
      v43 = v35 ? 0xD000000000000012 : 0;
      v44 = v35 ? v51 : 0xE000000000000000;
      *(_QWORD *)(v39 + 14) = sub_1CCA0CB60(v43, v44, v79);
      v11 = v71;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v37, v38, "FMIPDataManager: Resetting transient properties for %s %s", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v40, -1, -1);
      MEMORY[0x1D17B214C](v39, -1, -1);
    }
    else
    {
      sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    }

    v18 = v32;
    v20 = v56;
    v13 = v57;
    v45 = v58;
    sub_1CCA0BEEC((uint64_t)v57, v58, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v46 = (uint64_t)v61;
    swift_storeEnumTagMultiPayload();
    sub_1CC9C3EC0((uint64_t)v60, (uint64_t)v79, &qword_1ED8A71C0);
    sub_1CC9C3EC0((uint64_t)v79, (uint64_t)v78, &qword_1ED8A71C0);
    v76 = *((_QWORD *)v13 + 48);
    v67 = *v59;
    v77 = v67;
    v74 = *((_QWORD *)v13 + 39);
    v66 = *((_OWORD *)v13 + 20);
    v75 = v66;
    sub_1CCA307F0((uint64_t)v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
    v47 = (void *)v67;
    v48 = (id)v66;
    v49 = v47;
    FMIPItem.init(item:updateType:address:location:crowdSourcedLocation:connected:)(v45, v46, (uint64_t)v78, &v76, &v74, v35, v70);
    a2 = v72;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_1CCAB6F10(a2);
      a2 = result;
    }
    if ((v68 & 0x8000000000000000) != 0)
      break;
    if (v68 >= *(_QWORD *)(a2 + 16))
      goto LABEL_28;
    sub_1CCABB698(v70, a2+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v68, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    result = sub_1CCA0BF30((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v22 = v69;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1CC9C9B30(int a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t result;
  unint64_t v26;
  __int128 v27;
  BOOL v28;
  uint64_t v29;
  unint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81[2];

  v73 = a1;
  v3 = sub_1CCA14E90(&qword_1ED8A8CD0);
  MEMORY[0x1E0C80A78](v3);
  v80 = (uint64_t)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for FMIPItemGroup();
  v75 = *(_QWORD *)(v72 - 8);
  v5 = MEMORY[0x1E0C80A78](v72);
  v71 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v70 = (uint64_t *)((char *)&v58 - v8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v69 = (uint64_t)&v58 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v58 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v58 - v14;
  v16 = sub_1CCA14E90(&qword_1ED8A8DD8);
  v74 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v61 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1CCA14E90(&qword_1ED8A8DE0);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (unint64_t *)((char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v19);
  v23 = (uint64_t *)((char *)&v58 - v22);
  v24 = *(_QWORD *)(a2 + 16);
  result = swift_bridgeObjectRetain_n();
  v26 = 0;
  *(_QWORD *)&v27 = 136315394;
  v60 = v27;
  v59 = 0x80000001CCB7B6A0;
  v58 = MEMORY[0x1E0DEE9B8] + 8;
  v62 = a2;
  v63 = v24;
  v67 = v15;
  v68 = v13;
  v65 = v21;
  v66 = v16;
  v64 = v23;
  v28 = v24 == 0;
  if (v24)
    goto LABEL_3;
LABEL_2:
  v29 = 1;
  for (i = v24; ; i = v26 + 1)
  {
    v33 = v74;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v74 + 56))(v21, v29, 1, v16);
    sub_1CC9C3EC0((uint64_t)v21, (uint64_t)v23, &qword_1ED8A8DE0);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v33 + 48))(v23, 1, v16) == 1)
    {
      swift_bridgeObjectRelease();
      return a2;
    }
    v77 = *v23;
    sub_1CC9FED60((uint64_t)v23 + *(int *)(v16 + 48), (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    if ((v73 & 1) != 0)
      v34 = (v15[64] >> 6) & 1;
    else
      v34 = 0;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v35 = sub_1CCB637FC();
    sub_1CCA16C20(v35, (uint64_t)qword_1ED8AD7F8);
    sub_1CCA0BEEC((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v36 = sub_1CCB637D8();
    v37 = sub_1CCB63D48();
    v38 = os_log_type_enabled(v36, v37);
    v78 = a2;
    v79 = i;
    if (v38)
    {
      v39 = swift_slowAlloc();
      v40 = swift_slowAlloc();
      v81[0] = v40;
      *(_DWORD *)v39 = v60;
      v41 = *((_QWORD *)v13 + 1);
      v42 = *((_QWORD *)v13 + 2);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v39 + 4) = sub_1CCA0CB60(v41, v42, v81);
      swift_bridgeObjectRelease();
      sub_1CCA0BF30((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      *(_WORD *)(v39 + 12) = 2080;
      v43 = v34 ? 0xD000000000000012 : 0;
      v44 = v34 ? v59 : 0xE000000000000000;
      *(_QWORD *)(v39 + 14) = sub_1CCA0CB60(v43, v44, v81);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v36, v37, "FMIPDataManager: Resetting transient properties for item group %s %s", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v40, -1, -1);
      MEMORY[0x1D17B214C](v39, -1, -1);
    }
    else
    {
      sub_1CCA0BF30((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    }

    v45 = v70;
    sub_1CCA0BEEC((uint64_t)v15, (uint64_t)v70, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v46 = v45[8];
    v47 = v45[9];
    v76 = v47;
    if ((v46 & 0x40) != 0)
      v48 = v34;
    else
      v48 = 1;
    if (!v48)
      v46 &= ~0x40uLL;
    v50 = v45[2];
    v49 = v45[3];
    v51 = *v45;
    v52 = v71;
    v53 = v72;
    *((_QWORD *)v71 + 1) = v45[1];
    v52[2] = v50;
    *(_QWORD *)((char *)v52 + *(int *)(v53 + 52)) = *(uint64_t *)((char *)v45 + *(int *)(v53 + 52));
    v54 = v45[6];
    v52[7] = v45[7];
    v52[8] = v46;
    v56 = v45[4];
    v55 = v45[5];
    v52[3] = v49;
    v52[4] = v56;
    v52[5] = v55;
    v52[6] = v54;
    v52[9] = v47;
    *v52 = v51;
    sub_1CC9EAB74((uint64_t)v45 + *(int *)(v53 + 48), v80, &qword_1ED8A8CD0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CC9C3EC0(v80, (uint64_t)v52 + *(int *)(v53 + 48), &qword_1ED8A8CD0);
    v57 = v69;
    sub_1CC9FED60((uint64_t)v52, v69, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    a2 = v78;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_1CCAB6EE8(a2);
      a2 = result;
    }
    v21 = v65;
    v16 = v66;
    v24 = v63;
    v23 = v64;
    v26 = v79;
    v15 = v67;
    v13 = v68;
    if ((v77 & 0x8000000000000000) != 0)
      break;
    if (v77 >= *(_QWORD *)(a2 + 16))
      goto LABEL_33;
    sub_1CCABB698(v57, a2+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(_QWORD *)(v75 + 72) * v77, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    result = sub_1CCA0BF30((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v28 = v26 >= v24;
    if (v26 == v24)
      goto LABEL_2;
LABEL_3:
    if (v28)
      goto LABEL_34;
    v31 = (uint64_t)&v61[*(int *)(v16 + 48)];
    sub_1CCA0BEEC(v62+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(_QWORD *)(v75 + 72) * v26, v31, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v32 = (uint64_t)v21 + *(int *)(v16 + 48);
    *v21 = v26;
    sub_1CC9FED60(v31, v32, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v29 = 0;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1CC9CA178()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD aBlock[6];
  uint64_t v8;

  v8 = 0;
  v1 = *(NSObject **)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v8;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = sub_1CCA20800;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_1CC9F4530;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CC9F44AC;
  aBlock[3] = &unk_1E88F94A8;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = v8;
    swift_release();
    return v6;
  }
  return result;
}

uint64_t sub_1CC9CA2B0()
{
  uint64_t v0;
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;

  v1 = *(unsigned __int8 *)(v0 + 292);
  _Block_release(*(const void **)(v0 + 264));
  v2 = sub_1CCB637D8();
  v3 = sub_1CCB63D48();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v4 = 67109120;
    *(_DWORD *)(v0 + 288) = v1;
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v2, v3, "FMIPBeaconSharingController: Started sharing controller: %{BOOL}d", v4, 8u);
    MEMORY[0x1D17B214C](v4, -1, -1);
  }

  *(_BYTE *)(*(_QWORD *)(v0 + 248) + 120) = v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 280) = v5;
  *v5 = v0;
  v5[1] = sub_1CCA21344;
  v5[16] = *(_QWORD *)(v0 + 248);
  return swift_task_switch();
}

uint64_t sub_1CC9CA3D0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  _BYTE *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  char v52;

  v3 = v1;
  v5 = sub_1CCA14E90(&qword_1ED8A7F68);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA2296C();
  sub_1CCB643B4();
  if (v2)
    goto LABEL_71;
  LOBYTE(v50) = 1;
  v9 = sub_1CCB64114();
  type metadata accessor for FMIPUserInfoResponseFragment();
  v52 = 2;
  sub_1CC9CAA38(&qword_1ED8A7C98, (uint64_t (*)(uint64_t))type metadata accessor for FMIPUserInfoResponseFragment, (uint64_t)&unk_1CCB732D0);
  sub_1CCB64180();
  v10 = v50;
  type metadata accessor for FMIPAlert();
  v52 = 0;
  sub_1CC9CAA38(&qword_1ED8A7D68, (uint64_t (*)(uint64_t))type metadata accessor for FMIPAlert, (uint64_t)&protocol conformance descriptor for FMIPAlert);
  sub_1CCB64180();
  v49 = v50;
  LOBYTE(v50) = 3;
  result = sub_1CCB64150();
  v13 = v12;
  v14 = HIBYTE(v12) & 0xF;
  v15 = result & 0xFFFFFFFFFFFFLL;
  if ((v13 & 0x2000000000000000) != 0)
    v16 = v14;
  else
    v16 = result & 0xFFFFFFFFFFFFLL;
  v48 = v10;
  if (!v16)
  {
    swift_bridgeObjectRelease();
LABEL_70:
    swift_bridgeObjectRelease();
    sub_1CCB114C0();
    swift_allocError();
    *v44 = 0;
    swift_willThrow();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_71:
    type metadata accessor for FMIPBaseResponse();
    swift_deallocPartialClassInstance();
    goto LABEL_72;
  }
  if ((v13 & 0x1000000000000000) != 0)
  {
    v47 = (uint64_t)sub_1CCA3EF0C(result, v13, 10);
    v19 = v45;
    goto LABEL_54;
  }
  if ((v13 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v17 = (unsigned __int8 *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v17 = (unsigned __int8 *)sub_1CCB6400C();
    v47 = (uint64_t)sub_1CCA3EEF8(v17, v15, 10);
    v19 = v18 & 1;
    goto LABEL_54;
  }
  *(_QWORD *)&v50 = result;
  *((_QWORD *)&v50 + 1) = v13 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v14)
      goto LABEL_76;
    if (v14 == 1 || (BYTE1(result) - 48) > 9u)
      goto LABEL_32;
    v20 = (BYTE1(result) - 48);
    if (v14 == 2)
    {
LABEL_34:
      v47 = v20;
      v19 = 0;
      goto LABEL_54;
    }
    if ((BYTE2(result) - 48) > 9u)
      goto LABEL_32;
    v21 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
    v22 = v14 - 3;
    if (v22)
    {
      v23 = (unsigned __int8 *)&v50 + 3;
      while (1)
      {
        v24 = *v23 - 48;
        if (v24 > 9)
          goto LABEL_52;
        v25 = (unsigned __int128)(v21 * (__int128)10) >> 64;
        v26 = 10 * v21;
        if (v25 != v26 >> 63)
          goto LABEL_52;
        v27 = __OFADD__(v26, v24);
        v21 = v26 + v24;
        if (v27)
          goto LABEL_52;
        v19 = 0;
        ++v23;
        if (!--v22)
          goto LABEL_53;
      }
    }
LABEL_45:
    v47 = v21;
    v19 = 0;
    goto LABEL_54;
  }
  if (result != 45)
  {
    if (!v14 || (result - 48) > 9u)
      goto LABEL_32;
    v20 = (result - 48);
    if (v14 == 1)
      goto LABEL_34;
    if ((BYTE1(result) - 48) > 9u)
      goto LABEL_32;
    v21 = 10 * (result - 48) + (BYTE1(result) - 48);
    v28 = v14 - 2;
    if (v28)
    {
      v29 = (unsigned __int8 *)&v50 + 2;
      while (1)
      {
        v30 = *v29 - 48;
        if (v30 > 9)
          goto LABEL_52;
        v31 = (unsigned __int128)(v21 * (__int128)10) >> 64;
        v32 = 10 * v21;
        if (v31 != v32 >> 63)
          goto LABEL_52;
        v27 = __OFADD__(v32, v30);
        v21 = v32 + v30;
        if (v27)
          goto LABEL_52;
        v19 = 0;
        ++v29;
        if (!--v28)
          goto LABEL_53;
      }
    }
    goto LABEL_45;
  }
  if (v14)
  {
    if (v14 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      if (v14 == 2)
      {
        v19 = 0;
        v47 = -(uint64_t)(BYTE1(result) - 48);
        goto LABEL_54;
      }
      if ((BYTE2(result) - 48) <= 9u)
      {
        v21 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        v33 = v14 - 3;
        if (!v33)
          goto LABEL_45;
        v34 = (unsigned __int8 *)&v50 + 3;
        while (1)
        {
          v35 = *v34 - 48;
          if (v35 > 9)
            break;
          v36 = (unsigned __int128)(v21 * (__int128)10) >> 64;
          v37 = 10 * v21;
          if (v36 != v37 >> 63)
            break;
          v27 = __OFSUB__(v37, v35);
          v21 = v37 - v35;
          if (v27)
            break;
          v19 = 0;
          ++v34;
          if (!--v33)
            goto LABEL_53;
        }
LABEL_52:
        v21 = 0;
        v19 = 1;
LABEL_53:
        v47 = v21;
LABEL_54:
        swift_bridgeObjectRelease();
        if ((v19 & 1) == 0)
        {
          if (v9)
          {
            if (*(_QWORD *)(v9 + 16))
            {
              swift_bridgeObjectRetain();
              v38 = sub_1CCA074F4(0x4E6C6C53776F6873, 0xEA0000000000776FLL);
              if ((v39 & 1) != 0)
              {
                sub_1CCA0CC30(*(_QWORD *)(v9 + 56) + 32 * v38, (uint64_t)&v50);
              }
              else
              {
                v50 = 0u;
                v51 = 0u;
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              v50 = 0u;
              v51 = 0u;
            }
            v41 = v48;
            (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
            if (*((_QWORD *)&v51 + 1))
            {
              if ((swift_dynamicCast() & 1) != 0)
              {
                v40 = v52;
                goto LABEL_68;
              }
            }
            else
            {
              sub_1CC9E4F4C((uint64_t)&v50);
            }
            v40 = 0;
            goto LABEL_68;
          }
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          v40 = 0;
          v41 = v48;
LABEL_68:
          v42 = v49;
          v43 = (unsigned __int8 *)v47;
          *(_QWORD *)(v3 + 16) = v9;
          *(_QWORD *)(v3 + 24) = v41;
          *(_QWORD *)(v3 + 48) = v43;
          *(_BYTE *)(v3 + 40) = v40;
          *(_QWORD *)(v3 + 32) = v42;
LABEL_72:
          sub_1CCA01CA0((uint64_t)a1);
          return v3;
        }
        goto LABEL_70;
      }
    }
LABEL_32:
    v47 = 0;
    v19 = 1;
    goto LABEL_54;
  }
  __break(1u);
LABEL_76:
  __break(1u);
  return result;
}

uint64_t sub_1CC9CAA38(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1D17B2068](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

BOOL FMIPManager.isInitialized.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration)
                 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_initializedSubsystems);
  if (v1 == 1)
  {
    swift_beginAccess();
    if ((*v2 & 1) != 0)
      return (*v2 >> 1) & 1;
    else
      return 0;
  }
  else
  {
    swift_beginAccess();
    return (v1 & ~*v2) == 0;
  }
}

_QWORD *sub_1CC9CAB10(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a1;
  v3 = sub_1CCB63D84();
  v4 = *(_QWORD *)(v3 - 8);
  v16 = v3;
  MEMORY[0x1E0C80A78](v3);
  v19 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63D6C();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v6);
  v8 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v8);
  a2[3] = 0;
  swift_unknownObjectWeakInit();
  a2[4] = MEMORY[0x1E0DEE9E8];
  v20 = sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A8E30);
  sub_1CCB63844();
  v22 = MEMORY[0x1E0DEE9D8];
  v18 = sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, v7, MEMORY[0x1E0DEF828]);
  v17 = sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  v9 = *MEMORY[0x1E0DEF8D0];
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v11 = v19;
  v10(v19, v9, v3);
  a2[5] = sub_1CCB63DB4();
  sub_1CCB63844();
  v22 = MEMORY[0x1E0DEE9D8];
  sub_1CCB63E98();
  v10(v11, v9, v16);
  v12 = sub_1CCB63DB4();
  v13 = v21;
  a2[6] = v12;
  a2[7] = v13;
  return a2;
}

uint64_t sub_1CC9CADA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v6 = sub_1CCB63820();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v19 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB63868();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(_QWORD *)&v3[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_connectionQueue];
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = a3;
  v15 = _Block_copy(aBlock);
  v16 = v3;
  sub_1CCB63844();
  v20 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v7, MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_1CC9CAF8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = a1 + 32;
  if (MEMORY[0x1D17B2218](a1 + 32))
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CC9D46F4(a1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  result = MEMORY[0x1D17B2218](v2);
  if (result)
  {
    swift_beginAccess();
    v4 = *(_QWORD *)(a1 + 80);
    swift_bridgeObjectRetain();
    sub_1CC9D6B5C(a1, v4);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CC9CB050()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD aBlock[6];
  uint64_t v8;

  v8 = 0;
  v1 = *(NSObject **)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v8;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = sub_1CCA20838;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_1CC9F4530;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CC9F44AC;
  aBlock[3] = &unk_1E88F93B8;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = v8;
    swift_release();
    return v6;
  }
  return result;
}

uint64_t sub_1CC9CB188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v18 = a5;
  v19 = sub_1CCB63868();
  v8 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB63820();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCB63814();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a1;
  aBlock[4] = a4;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = v18;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v10, v14, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v19);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_1CC9CB308()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD aBlock[6];
  uint64_t v8;

  v8 = 0;
  v1 = *(NSObject **)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = &v8;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = sub_1CCA20840;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_1CC9F4530;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CC9F44AC;
  aBlock[3] = &unk_1E88F9430;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = v8;
    swift_release();
    return v6;
  }
  return result;
}

uint64_t sub_1CC9CB440(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = (uint64_t *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_initializedSubsystems);
  swift_beginAccess();
  v2 = *v1;
  *v1 |= 1uLL;
  v4 = v2;
  return sub_1CCA98FE4(&v4);
}

uint64_t sub_1CC9CB49C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  _QWORD v17[2];
  _QWORD aBlock[6];

  v3 = v2;
  v6 = sub_1CCB63820();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB63868();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject();
  *(_BYTE *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = v3;
  *(_QWORD *)(v14 + 32) = a1;
  aBlock[4] = sub_1CCA20A70;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F4048;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1CCB63844();
  v17[1] = MEMORY[0x1E0DEE9D8];
  sub_1CCA248D4();
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA1FC64();
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_1CC9CB664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  id v12;
  _QWORD v14[2];
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1CCB63820();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v14[0] = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63868();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(v1 + 72);
  aBlock[4] = sub_1CCA22CB4;
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F9610;
  v11 = _Block_copy(aBlock);
  v12 = v10;
  swift_retain();
  sub_1CCB63844();
  v14[1] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v3, MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v9, v5, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v14[0] + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

uint64_t sub_1CC9CB848(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _BYTE v25[4];
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];

  v5 = v4;
  v27 = a3;
  v28 = a4;
  v26 = a2;
  v7 = sub_1CCB63820();
  v32 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_1CCB63868();
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for FMReverseGeocodingRequest();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v13);
  v16 = &v25[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = *(_QWORD *)(v5 + qword_1EF9E4EE0);
  sub_1CCA0BEEC(a1, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  v17 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v18 = v17 + v15;
  v19 = swift_allocObject();
  v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + v19;
  *(_QWORD *)(v19 + 16) = v5;
  sub_1CC9FED60((uint64_t)v16, v19 + v17, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  *(_BYTE *)(v19 + v18) = v26;
  v22 = v27;
  v21 = v28;
  *(_QWORD *)(v20 + 8) = v27;
  *(_QWORD *)(v20 + 16) = v21;
  aBlock[4] = sub_1CCABAF3C;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F9138;
  v23 = _Block_copy(aBlock);
  swift_retain();
  sub_1CC9DF994(v22);
  sub_1CCB63844();
  v33 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v12, v9, v23);
  _Block_release(v23);
  (*(void (**)(_BYTE *, uint64_t))(v32 + 8))(v9, v7);
  (*(void (**)(_BYTE *, uint64_t))(v30 + 8))(v12, v31);
  return swift_release();
}

uint64_t sub_1CC9CBAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];

  v9 = *(_QWORD *)(v4 + 256);
  swift_bridgeObjectRetain();
  v10 = sub_1CCA2036C(a1, v9);
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    v11 = *(_QWORD *)(v4 + 264);
    swift_bridgeObjectRetain();
    v12 = sub_1CCA086B8(a2, v11);
    swift_bridgeObjectRelease();
    if ((v12 & 1) != 0)
    {
      v13 = *(_QWORD *)(v4 + 272);
      swift_bridgeObjectRetain();
      v14 = sub_1CCA086B8(a3, v13);
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
      {
        v15 = *(_QWORD *)(v4 + 248);
        swift_bridgeObjectRetain();
        v16 = sub_1CCA1FE5C(a4, v15);
        swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
          return 0;
      }
    }
  }
  *(_QWORD *)(v4 + 256) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 264) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 248) = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 272) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v4 + 24) == 1)
  {
    if (*(_QWORD *)(v4 + 352))
    {
      v18 = *(_QWORD *)(v4 + 248);
      v19 = *(_QWORD *)(v4 + 256);
      v20 = *(_QWORD *)(v4 + 264);
      v21 = *(_QWORD *)(v4 + 272);
      v22[0] = *(_QWORD *)(v4 + 240);
      v22[1] = v18;
      v22[2] = v19;
      v22[3] = v20;
      v22[4] = v21;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CCAB2D04(v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  return 1;
}

uint64_t sub_1CC9CBCCC(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t result;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  uint64_t v66;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t *v110;
  unint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t, uint64_t);
  char *v135;
  uint64_t v136;

  v3 = sub_1CCA14E90(&qword_1ED8A8CD0);
  MEMORY[0x1E0C80A78](v3);
  v109 = (uint64_t)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1ED8A8EF8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v124 = (char *)&v100 - v9;
  v10 = sub_1CCB63604();
  v133 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v131 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v135 = (char *)&v100 - v13;
  v14 = type metadata accessor for FMIPItem();
  v103 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v122 = (uint64_t)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v125 = (uint64_t)&v100 - v17;
  v118 = type metadata accessor for FMIPItemGroup();
  v114 = *(_QWORD *)(v118 - 8);
  v18 = MEMORY[0x1E0C80A78](v118);
  v108 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v117 = (uint64_t *)((char *)&v100 - v21);
  MEMORY[0x1E0C80A78](v20);
  v107 = (uint64_t)&v100 - v22;
  v23 = sub_1CCA14E90(&qword_1ED8A8DD8);
  v112 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v101 = (char *)&v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1CCA14E90(&qword_1ED8A8DE0);
  v26 = MEMORY[0x1E0C80A78](v25);
  v28 = (unint64_t *)((char *)&v100 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v26);
  v111 = (unint64_t *)((char *)&v100 - v29);
  v30 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain_n();
  v110 = (uint64_t *)(v1 + 280);
  result = swift_beginAccess();
  v32 = 0;
  v130 = 0;
  v102 = a1;
  v33 = a1;
  v132 = v8;
  v106 = v23;
  v105 = v28;
  v104 = v30;
  while (1)
  {
    v119 = v33;
    if (v32 == v30)
    {
      v34 = 1;
      v116 = v30;
    }
    else
    {
      if (v32 >= v30)
        goto LABEL_52;
      v35 = (uint64_t)&v101[*(int *)(v23 + 48)];
      sub_1CCA0BEEC(v102+ ((*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80))+ *(_QWORD *)(v114 + 72) * v32, v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      v36 = (uint64_t)v28 + *(int *)(v23 + 48);
      *v28 = v32;
      sub_1CC9FED60(v35, v36, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      v34 = 0;
      v116 = v32 + 1;
    }
    v37 = v112;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v112 + 56))(v28, v34, 1, v23);
    v38 = (uint64_t)v28;
    v39 = v111;
    sub_1CC9C3EC0(v38, (uint64_t)v111, &qword_1ED8A8DE0);
    v40 = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v37 + 48))(v39, 1, v23);
    v41 = (uint64_t)v124;
    v42 = v125;
    v43 = v133;
    if (v40 == 1)
    {
      swift_bridgeObjectRelease();
      return v119;
    }
    v115 = *v39;
    v44 = (uint64_t)v39 + *(int *)(v23 + 48);
    v45 = v117;
    sub_1CC9FED60(v44, (uint64_t)v117, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v46 = *v110;
    v47 = *(_QWORD *)((char *)v45 + *(int *)(v118 + 52));
    v48 = v45[7];
    v49 = MEMORY[0x1E0DEE9D8];
    v136 = MEMORY[0x1E0DEE9D8];
    v50 = *(_QWORD *)(v46 + 16);
    v129 = v47;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v121 = v48;
    swift_bridgeObjectRetain();
    if (v50)
    {
      v51 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
      v52 = *(_QWORD *)(v103 + 72);
      v113 = v46;
      v120 = v51;
      v128 = v46 + v51;
      v53 = 0;
      v123 = v50;
      v126 = v52;
      while (1)
      {
        sub_1CCA0BEEC(v128 + v52 * v53, v42, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        sub_1CCB635BC();
        v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
        if (v54((char *)v41, 1, v10) == 1)
        {
          sub_1CC9C3E84(v41, &qword_1ED8A8EF8);
        }
        else
        {
          v134 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 32);
          v134(v135, v41, v10);
          v55 = *(_QWORD *)(v129 + 16);
          if (v55)
          {
            v127 = v53;
            v56 = v129 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
            swift_bridgeObjectRetain();
            v57 = *(_QWORD *)(v43 + 72);
            v58 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
            while (1)
            {
              v58(v8, v56, v10);
              v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
              v59(v8, 0, 1, v10);
              if (v54(v8, 1, v10) == 1)
              {
                v41 = (uint64_t)v124;
                v42 = v125;
                v50 = v123;
                v53 = v127;
                goto LABEL_22;
              }
              v60 = v10;
              v61 = v131;
              v134(v131, (uint64_t)v8, v60);
              sub_1CC9CAA38(&qword_1EF9E1E28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
              v62 = v43;
              v63 = sub_1CCB63958();
              v64 = *(void (**)(char *, uint64_t))(v62 + 8);
              v65 = v61;
              v10 = v60;
              v64(v65, v60);
              if ((v63 & 1) != 0)
                break;
              v56 += v57;
              --v55;
              v8 = v132;
              v43 = v133;
              if (!v55)
              {
                v41 = (uint64_t)v124;
                v42 = v125;
                v50 = v123;
                v53 = v127;
                goto LABEL_20;
              }
            }
            swift_bridgeObjectRelease();
            v64(v135, v60);
            v42 = v125;
            sub_1CC9FED60(v125, v122, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            v66 = v136;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v50 = v123;
            v53 = v127;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1CCA63A2C(0, *(_QWORD *)(v66 + 16) + 1, 1);
              v42 = v125;
              v66 = v136;
            }
            v8 = v132;
            v43 = v133;
            v69 = *(_QWORD *)(v66 + 16);
            v68 = *(_QWORD *)(v66 + 24);
            if (v69 >= v68 >> 1)
            {
              sub_1CCA63A2C(v68 > 1, v69 + 1, 1);
              v42 = v125;
              v43 = v133;
              v66 = v136;
            }
            *(_QWORD *)(v66 + 16) = v69 + 1;
            v70 = v66 + v120 + v69 * v126;
            v52 = v126;
            sub_1CC9FED60(v122, v70, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            v41 = (uint64_t)v124;
            goto LABEL_11;
          }
          swift_bridgeObjectRetain();
          v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
LABEL_20:
          v59(v8, 1, 1, v10);
LABEL_22:
          v52 = v126;
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v43 + 8))(v135, v10);
        }
        sub_1CCA0BF30(v42, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_11:
        if (++v53 == v50)
        {
          v49 = v136;
          v71 = v121;
          goto LABEL_30;
        }
      }
    }
    v71 = v121;
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v72 = *(_QWORD *)(v71 + 16);
    if (v72)
      break;
    v73 = MEMORY[0x1E0DEE9D8];
LABEL_41:
    v89 = sub_1CCA7AB3C(v73);
    swift_bridgeObjectRelease();
    v90 = v117;
    v92 = v117[2];
    v91 = v117[3];
    v93 = *v117;
    v94 = v108;
    *((_QWORD *)v108 + 1) = v117[1];
    v94[2] = v92;
    v95 = v118;
    *(_QWORD *)((char *)v94 + *(int *)(v118 + 52)) = v129;
    v96 = v90[4];
    v94[3] = v91;
    v94[4] = v96;
    v94[5] = v49;
    v94[6] = v89;
    v97 = v90[9];
    v94[8] = v90[8];
    v94[9] = v97;
    v94[7] = v121;
    *v94 = v93;
    v98 = v109;
    sub_1CC9EAB74((uint64_t)v90 + *(int *)(v95 + 48), v109, &qword_1ED8A8CD0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CC9C3EC0(v98, (uint64_t)v94 + *(int *)(v95 + 48), &qword_1ED8A8CD0);
    v99 = v107;
    sub_1CC9FED60((uint64_t)v94, v107, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v33 = v119;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_1CCAB6EE8(v33);
      v33 = result;
    }
    v23 = v106;
    v28 = v105;
    v30 = v104;
    v32 = v116;
    if ((v115 & 0x8000000000000000) != 0)
      goto LABEL_50;
    if (v115 >= *(_QWORD *)(v33 + 16))
      goto LABEL_51;
    result = sub_1CCABB698(v99, v33+ ((*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80))+ *(_QWORD *)(v114 + 72) * v115, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  }
  v136 = MEMORY[0x1E0DEE9D8];
  v128 = v49;
  swift_retain();
  sub_1CCA63A00(0, v72, 0);
  v73 = v136;
  result = sub_1CCAA78E0(v71);
  v74 = result;
  v76 = v75;
  v78 = v77 & 1;
  v127 = v71 + 56;
  while ((v74 & 0x8000000000000000) == 0 && v74 < 1 << *(_BYTE *)(v71 + 32))
  {
    if (((*(_QWORD *)(v127 + (((unint64_t)v74 >> 3) & 0xFFFFFFFFFFFFF8)) >> v74) & 1) == 0)
      goto LABEL_48;
    if (*(_DWORD *)(v71 + 36) != (_DWORD)v76)
      goto LABEL_49;
    LODWORD(v134) = v78;
    v79 = v128;
    swift_retain();
    v80 = swift_bridgeObjectRetain();
    v81 = v130;
    v82 = v71;
    v83 = sub_1CCAA8128(v80, v79);
    v130 = v81;
    swift_release();
    v84 = sub_1CCA7AC1C(v83);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v136 = v73;
    v86 = *(_QWORD *)(v73 + 16);
    v85 = *(_QWORD *)(v73 + 24);
    if (v86 >= v85 >> 1)
    {
      sub_1CCA63A00(v85 > 1, v86 + 1, 1);
      v73 = v136;
    }
    *(_QWORD *)(v73 + 16) = v86 + 1;
    *(_QWORD *)(v73 + 8 * v86 + 32) = v84;
    result = sub_1CCB48FB8(v74, v76, v134 & 1, v82);
    v74 = result;
    v76 = v87;
    v78 = v88 & 1;
    --v72;
    v71 = v82;
    if (!v72)
    {
      sub_1CCA58DB4(result, v87, v78);
      v49 = v128;
      swift_release();
      v8 = v132;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_1CC9CC7B0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE v22[32];

  v2 = v1;
  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    *(_QWORD *)(v2 + qword_1ED8AA230) = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v3 + 16))
      return sub_1CC9CCB60(v3);
    v4 = sub_1CCA074F4(0xD000000000000012, 0x80000001CCB7D6F0);
    if ((v5 & 1) == 0)
      return sub_1CC9CCB60(v3);
    sub_1CCA0CC30(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)v22);
    if ((swift_dynamicCast() & 1) == 0)
      return sub_1CC9CCB60(v3);
    v6 = (void *)objc_opt_self();
    v7 = (void *)sub_1CCB63964();
    v8 = (void *)sub_1CCB63964();
    v19 = v6;
    v9 = objc_msgSend(v6, sel_stringForKey_inDomain_, v7, v8);

    if (!v9)
      goto LABEL_10;
    v10 = sub_1CCB63988();
    v12 = v11;

    if (v10 == v20 && v12 == v21)
    {
      swift_bridgeObjectRelease_n();
      return sub_1CC9CCB60(v3);
    }
    v13 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
LABEL_10:
      v14 = (void *)sub_1CCB63964();
      v15 = (void *)sub_1CCB63964();
      v16 = (void *)sub_1CCB63964();
      objc_msgSend(v19, sel_setString_forKey_inDomain_, v14, v15, v16);

      v17 = MEMORY[0x1D17B2218](v2 + qword_1ED8AA240);
      if (v17)
      {
        v18 = v17;
        swift_retain();
        sub_1CCB1026C(v20, v21, v18);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return sub_1CC9CCB60(v3);
      }
    }
    swift_bridgeObjectRelease();
    return sub_1CC9CCB60(v3);
  }
  return result;
}

uint64_t sub_1CC9CCA20(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;

  v2 = v1;
  v3 = *a1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v4 = sub_1CCB637FC();
  sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
  v5 = sub_1CCB637D8();
  v6 = sub_1CCB63D48();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPManager: beaconSharingController didUpdateSharingLimits", v7, 2u);
    MEMORY[0x1D17B214C](v7, -1, -1);
  }

  v8 = v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v8);
  if (result)
  {
    v10 = *(_QWORD *)(v8 + 8);
    ObjectType = swift_getObjectType();
    v12 = v3;
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v10 + 192))(v2, &v12, ObjectType, v10);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CC9CCB60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];
  _QWORD aBlock[6];

  v3 = sub_1CCB63820();
  v13[0] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63868();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF9DEFE0 != -1)
    swift_once();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = v1;
  aBlock[4] = sub_1CCA20B30;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88FD308;
  v11 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CCB63844();
  v13[1] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v9, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v13[0] + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

uint64_t sub_1CC9CCD78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1CCB63820();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v14 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63868();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_refreshQueue);
  v10 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_1CCA21B0C;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88FDAE0;
  v11 = _Block_copy(aBlock);
  swift_retain();
  sub_1CCB63844();
  v15 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v3, MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v9, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  return swift_release();
}

uint64_t sub_1CC9CCF84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v2 = v1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v4 = sub_1CCB637FC();
  sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v5 = sub_1CCB637D8();
  v6 = sub_1CCB63D48();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v7 = 134217984;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPDeviceContainingResponse: Updating with shifted devices %ld", v7, 0xCu);
    MEMORY[0x1D17B214C](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v2 + 56) = a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void sub_1CC9CD0CC(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  void *v5;
  void *v6;
  void *v7;

  v5 = (void *)objc_opt_self();
  v6 = (void *)sub_1CCB63964();
  v7 = (void *)sub_1CCB63964();
  LOBYTE(v5) = objc_msgSend(v5, sel_BOOLForKey_inDomain_, v6, v7);

  *a4 = (_BYTE)v5;
}

uint64_t sub_1CC9CD160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1CCB6376C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 44);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1CCB63790();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

_QWORD *FMIPAlert.init(from:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  char v33;
  void *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;

  v3 = v1;
  v5 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v5);
  v57 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1ED8A7F98);
  v56 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v10 = sub_1CCB637FC();
  sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
  v11 = sub_1CCB637D8();
  v12 = sub_1CCB63D48();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1CC9BF000, v11, v12, "FMAlert: initialized with coder", v13, 2u);
    MEMORY[0x1D17B214C](v13, -1, -1);
  }

  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA20574();
  sub_1CCB643B4();
  if (!v2)
  {
    v65 = 0;
    v14 = sub_1CCB64150();
    v55 = v15;
    v48 = v14;
    v64 = 1;
    v16 = sub_1CCB64150();
    v53 = v17;
    v54 = v16;
    v63 = 2;
    v18 = sub_1CCB64150();
    v51 = v19;
    v52 = v18;
    v62 = 3;
    v20 = sub_1CCB64150();
    v22 = v21;
    v46[2] = v20;
    v61 = 4;
    v23 = sub_1CCB64150();
    v49 = v24;
    v50 = v23;
    v60 = 5;
    v25 = sub_1CCB64150();
    v27 = v26;
    v46[1] = v25;
    v59 = 6;
    v28 = sub_1CCB64150();
    v35 = v34;
    v47 = v28;
    if (v22)
    {
      v29 = (uint64_t)v57;
      sub_1CCB63484();
      swift_bridgeObjectRelease();
      sub_1CCA24AA4(v29, (uint64_t)v3 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_okButtonURL);
      if (!v27)
        goto LABEL_15;
    }
    else
    {
      v36 = (char *)v3 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_okButtonURL;
      v37 = sub_1CCB63490();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
      if (!v27)
      {
LABEL_15:
        v38 = (char *)v3 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonURL;
        v39 = sub_1CCB63490();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 1, 1, v39);
        v31 = v48;
        if (!v35)
          goto LABEL_16;
        goto LABEL_10;
      }
    }
    v30 = (uint64_t)v57;
    sub_1CCB63484();
    swift_bridgeObjectRelease();
    sub_1CCA24AA4(v30, (uint64_t)v3 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonURL);
    v31 = v48;
    if (!v35)
    {
LABEL_16:
      (*(void (**)(char *, uint64_t))(v56 + 8))(v9, v7);
      v33 = 0;
LABEL_17:
      *((_BYTE *)v3 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_type) = v33;
      v40 = v55;
      v3[2] = v31;
      v3[3] = v40;
      v41 = v53;
      v3[4] = v54;
      v3[5] = v41;
      v42 = v51;
      v3[6] = v52;
      v3[7] = v42;
      v43 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonLabel);
      v44 = v49;
      *v43 = v50;
      v43[1] = v44;
      goto LABEL_18;
    }
LABEL_10:
    v32._countAndFlagsBits = v47;
    v32._object = v35;
    FMIPAlertType.init(rawValue:)(v32);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v9, v7);
    v33 = v58;
    if (v58 == 5)
      v33 = 0;
    goto LABEL_17;
  }
  type metadata accessor for FMIPAlert();
  swift_deallocPartialClassInstance();
LABEL_18:
  sub_1CCA01CA0((uint64_t)a1);
  return v3;
}

unint64_t sub_1CC9CD6C8(unsigned __int8 a1)
{
  uint64_t v2;

  sub_1CCB6433C();
  sub_1CCB64348();
  v2 = sub_1CCB64384();
  return sub_1CC9CD720(a1, v2);
}

unint64_t sub_1CC9CD720(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1CC9CD7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v19 = a3;
  v20 = a2;
  v4 = sub_1CCB63820();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v18 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63868();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue);
  aBlock[4] = sub_1CCA241A4;
  aBlock[5] = a1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F7EB8;
  v12 = _Block_copy(aBlock);
  swift_retain();
  sub_1CCB63844();
  v21 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v5, MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v11, v7, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
  v13 = v19;
  swift_beginAccess();
  v14 = *(_QWORD *)(v13 + 280);
  v15 = *(_QWORD *)(v13 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCA0953C(v20, v14, v15);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1CC9CD9F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPSafeLocationRefreshingController: Starting refreshing Safe Locations", v5, 2u);
    MEMORY[0x1D17B214C](v5, -1, -1);
  }

  v6 = *(void **)(v1 + 56);
  v7 = swift_allocObject();
  swift_weakInit();
  v9[4] = sub_1CCA20A7C;
  v9[5] = v7;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = sub_1CC9C3100;
  v9[3] = &unk_1E88F41D8;
  v8 = _Block_copy(v9);
  swift_release();
  objc_msgSend(v6, sel_startRefreshingSafeLocationWithBlock_, v8);
  _Block_release(v8);
}

void sub_1CC9CDB58(NSObject *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  char v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD aBlock[7];

  v6 = sub_1CCB63820();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB63868();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 == 15)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v14 = sub_1CCB637FC();
    sub_1CCA16C20(v14, (uint64_t)qword_1ED8AD7F8);
    v23 = sub_1CCB637D8();
    v15 = sub_1CCB63D30();
    if (os_log_type_enabled(v23, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1CC9BF000, v23, v15, "FMIPBeaconRefreshingController: Received nil client configuration", v16, 2u);
      MEMORY[0x1D17B214C](v16, -1, -1);
    }

  }
  else
  {
    sub_1CCB6322C();
    swift_allocObject();
    sub_1CCA1B164((uint64_t)a1, a2);
    sub_1CCB63220();
    sub_1CCA2090C();
    v23 = a1;
    sub_1CCB63214();
    swift_release();
    v17 = aBlock[0];
    v22 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshQueue);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = a3;
    *(_BYTE *)(v18 + 24) = v17;
    aBlock[4] = sub_1CCA20CB8;
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA00C38;
    aBlock[3] = &unk_1E89017B8;
    v21 = _Block_copy(aBlock);
    swift_retain();
    sub_1CCB63844();
    aBlock[6] = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
    sub_1CCB63E98();
    v19 = v21;
    MEMORY[0x1D17B1318](0, v13, v9, v21);
    _Block_release(v19);
    sub_1CCA1B1A8((uint64_t)v23, a2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_release();
  }
}

uint64_t sub_1CC9CE058(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];

  v3 = sub_1CCB63868();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63820();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v11 = swift_bridgeObjectRetain();
  v12 = sub_1CCA0B7C0(v11, a1);
  swift_bridgeObjectRelease();
  sub_1CCB63814();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v1;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = sub_1CCA240F0;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F89C0;
  v14 = _Block_copy(aBlock);
  swift_retain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v6, v10, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void FMIPDeviceLostModeMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_1CCA14E90(&qword_1EF9E4D90);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMIPDeviceLostModeMetadata();
  v10 = v1;
  v8 = (void *)sub_1CCB63538();
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CC9F68C0();
  sub_1CCB643CC();
  objc_msgSend(v8, sel_fm_epoch);
  LOBYTE(v11) = 8;
  sub_1CCB6421C();
  if (!v2)
  {
    v11 = qword_1CCB714C8[*(char *)(v10 + 56)];
    sub_1CCB64240();
    LOBYTE(v11) = 4;
    sub_1CCB641E0();
    swift_bridgeObjectRelease();
    LOBYTE(v11) = 6;
    sub_1CCB641E0();
    LOBYTE(v11) = 1;
    sub_1CCB641E0();
    LOBYTE(v11) = 2;
    sub_1CCB641E0();
    LOBYTE(v11) = 5;
    sub_1CCB641EC();
    LOBYTE(v11) = 0;
    sub_1CCB641EC();
    LOBYTE(v11) = 3;
    sub_1CCB641EC();
    LOBYTE(v11) = 7;
    sub_1CCB641EC();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

}

void sub_1CC9CE4D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    v7 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_isRefreshing);
    v10 = v6;
    if (v7)
      v8 = 1702195828;
    else
      v8 = 0x65736C6166;
    if (v7)
      v9 = 0xE400000000000000;
    else
      v9 = 0xE500000000000000;
    sub_1CCA0CB60(v8, v9, &v10);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPBeaconRefreshingController: auto refreshing set to: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v6, -1, -1);
    MEMORY[0x1D17B214C](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_1CC9CE6A0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CC9CE6DC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CC9CE710()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CC9CE73C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for FMReverseGeocodingRequest();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = ((v3 + *(_QWORD *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  v5 = v0 + v3;
  swift_bridgeObjectRelease();

  v6 = v5 + *(int *)(v1 + 24);
  v7 = sub_1CCB63634();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CC9CE814()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CC9CE848()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CC9CE87C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (int *)type metadata accessor for FMIPDevice();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(v2 + 472))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v3 = v2 + v1[28];
  v4 = type metadata accessor for FMIPPlaySoundMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4))
  {
    v5 = v3 + *(int *)(v4 + 20);
    v6 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v7 = v2 + v1[29];
  v8 = type metadata accessor for FMIPDeviceLostModeMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v7 + *(int *)(v8 + 48);
    v10 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  v11 = v2 + v1[30];
  v12 = type metadata accessor for FMIPLockMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v13 = v11 + *(int *)(v12 + 20);
    v14 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  v15 = v2 + v1[31];
  v16 = type metadata accessor for FMIPEraseMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
  {
    v17 = v15 + *(int *)(v16 + 20);
    v18 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v19 = v2 + v1[32];
  v20 = type metadata accessor for FMIPItemGroup();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = v19 + *(int *)(v20 + 48);
    v22 = type metadata accessor for FMIPItemLostModeMetadata();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = v21 + *(int *)(v22 + 24);
      v24 = sub_1CCB635B0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v25 = v2 + v1[38];
  v26 = sub_1CCB635B0();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (!v28(v25, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
  v29 = v2 + v1[39];
  if (!v28(v29, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v26);
  v30 = v2 + v1[40];
  if (!v28(v30, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v30, v26);
  v31 = v2 + v1[41];
  if (!v28(v31, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v26);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CC9CEDC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1CC9CEE34@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
  swift_beginAccess();
  *a1 = *(_QWORD *)(v3 + 80);
  return swift_bridgeObjectRetain();
}

void sub_1CC9CEE94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    v7 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_isRefreshing);
    v10 = v6;
    if (v7)
      v8 = 1702195828;
    else
      v8 = 0x65736C6166;
    if (v7)
      v9 = 0xE400000000000000;
    else
      v9 = 0xE500000000000000;
    sub_1CCA0CB60(v8, v9, &v10);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPRefreshingController: auto refreshing set to: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v6, -1, -1);
    MEMORY[0x1D17B214C](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_1CC9CF05C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  unint64_t v39;
  char v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  unint64_t v49;
  int v50;
  int v51;
  id v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[3];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v2 = v1;
  v4 = sub_1CCB63604();
  v86 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v7 = sub_1CCB637FC();
  v8 = sub_1CCA16C20(v7, (uint64_t)qword_1ED8AD7F8);
  v9 = sub_1CCB637D8();
  v10 = sub_1CCB63D48();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1CC9BF000, v9, v10, "FMIPBeaconRefreshingController: Refreshing Separation State", v11, 2u);
    MEMORY[0x1D17B214C](v11, -1, -1);
  }

  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v83 = v4;
    v73 = v2;
    v13 = a1 + 32;
    v85 = (id)*MEMORY[0x1E0D89A08];
    v84 = &v95;
    v76 = (char *)&v94 + 4;
    v72[1] = a1;
    swift_bridgeObjectRetain();
    v14 = 0;
    *(_QWORD *)&v15 = 136316162;
    v75 = v15;
    v74 = MEMORY[0x1E0DEE9B8] + 8;
    v16 = MEMORY[0x1E0DEE9E0];
    v17 = MEMORY[0x1E0DEE9E0];
    v91 = MEMORY[0x1E0DEE9E0];
    v92 = MEMORY[0x1E0DEE9E0];
    v77 = v8;
    while (1)
    {
      v90 = v12;
      v88 = v13;
      sub_1CC9EBC94(v13, (uint64_t)&v99);
      v35 = v100;
      v36 = v101;
      sub_1CCA04DDC(&v99, v100);
      v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 80))(v35, v36);
      if (*(_QWORD *)(v37 + 16))
      {
        v38 = v85;
        v39 = sub_1CCAC8DD0((uint64_t)v38);
        if ((v40 & 1) != 0)
        {
          v41 = *(id *)(*(_QWORD *)(v37 + 56) + 8 * v39);

          swift_bridgeObjectRelease();
          v42 = objc_msgSend(v41, sel_state);

          if ((unint64_t)v42 + 1 >= 7)
            v43 = 0;
          else
            v43 = (0x3000002000100uLL >> (8 * (v42 + 1)));
          goto LABEL_15;
        }

      }
      swift_bridgeObjectRelease();
      v43 = 0;
LABEL_15:
      v44 = v100;
      v45 = v101;
      sub_1CCA04DDC(&v99, v100);
      v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 80))(v44, v45);
      v47 = *(_QWORD *)(v46 + 16);
      v89 = v16;
      if (v47)
      {
        v48 = v85;
        v49 = sub_1CCAC8DD0((uint64_t)v48);
        v51 = v50;
        if ((v50 & 1) != 0)
          v52 = *(id *)(*(_QWORD *)(v46 + 56) + 8 * v49);
        else
          v52 = 0;

        v53 = v51;
      }
      else
      {
        v53 = 0;
        v52 = 0;
      }
      swift_bridgeObjectRelease();

      v54 = v100;
      v55 = v101;
      sub_1CCA04DDC(&v99, v100);
      v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 168))(v54, v55);
      v56 = v100;
      v57 = v101;
      sub_1CCA04DDC(&v99, v100);
      v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 120))(v56, v57);
      v59 = sub_1CCB3D03C(v58);
      v87 = v14;
      swift_bridgeObjectRelease();
      sub_1CC9EBC94((uint64_t)&v99, (uint64_t)v96);
      swift_bridgeObjectRetain_n();
      v60 = sub_1CCB637D8();
      v61 = sub_1CCB63D48();
      if (os_log_type_enabled(v60, (os_log_type_t)v61))
      {
        v79 = v61;
        v80 = v53;
        v82 = v17;
        v62 = swift_slowAlloc();
        v78 = swift_slowAlloc();
        v95 = v78;
        *(_DWORD *)v62 = v75;
        v63 = v83;
        v64 = v43;
        v66 = v97;
        v65 = v98;
        sub_1CCA04DDC(v96, v97);
        (*(void (**)(uint64_t, uint64_t))(v65 + 16))(v66, v65);
        sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v67 = sub_1CCB64240();
        v69 = v68;
        (*(void (**)(char *, uint64_t))(v86 + 8))(v6, v63);
        v94 = sub_1CCA0CB60(v67, v69, &v95);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        sub_1CCA01CA0((uint64_t)v96);
        *(_WORD *)(v62 + 12) = 2080;
        v81 = v64;
        __asm { BR              X9 }
      }
      sub_1CCA01CA0((uint64_t)v96);

      swift_bridgeObjectRelease_n();
      v18 = v83;
      v19 = v100;
      v20 = v101;
      sub_1CCA04DDC(&v99, v100);
      (*(void (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
      v21 = v91;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v96[0] = v21;
      sub_1CCAEB934(v43, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
      v91 = v96[0];
      swift_bridgeObjectRelease();
      v23 = *(void (**)(char *, uint64_t))(v86 + 8);
      v23(v6, v18);
      v24 = v100;
      v25 = v101;
      sub_1CCA04DDC(&v99, v100);
      (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
      v26 = swift_isUniquelyReferenced_nonNull_native();
      v96[0] = v17;
      sub_1CCAEB7E0(v53 & 1, (uint64_t)v6, v26);
      v17 = v96[0];
      swift_bridgeObjectRelease();
      v23(v6, v18);
      v27 = v100;
      v28 = v101;
      sub_1CCA04DDC(&v99, v100);
      (*(void (**)(uint64_t, uint64_t))(v28 + 16))(v27, v28);
      v29 = v89;
      v30 = swift_isUniquelyReferenced_nonNull_native();
      v96[0] = v29;
      sub_1CCAEB7E0(v93 & 1, (uint64_t)v6, v30);
      v16 = v96[0];
      swift_bridgeObjectRelease();
      v23(v6, v18);
      v31 = v100;
      v32 = v101;
      sub_1CCA04DDC(&v99, v100);
      (*(void (**)(uint64_t, uint64_t))(v32 + 16))(v31, v32);
      v33 = v92;
      v34 = swift_isUniquelyReferenced_nonNull_native();
      v96[0] = v33;
      sub_1CCAEB684(v59, (uint64_t)v6, v34);
      v92 = v96[0];
      swift_bridgeObjectRelease();
      v23(v6, v18);
      sub_1CCA01CA0((uint64_t)&v99);
      v14 = v87;
      v13 = v88 + 40;
      v12 = v90 - 1;
      if (v90 == 1)
      {
        swift_bridgeObjectRelease();
        v2 = v73;
        v70 = v91;
        goto LABEL_25;
      }
    }
  }
  v70 = MEMORY[0x1E0DEE9E0];
  v16 = MEMORY[0x1E0DEE9E0];
  v17 = MEMORY[0x1E0DEE9E0];
  v92 = MEMORY[0x1E0DEE9E0];
LABEL_25:
  if (MEMORY[0x1D17B2218](v2 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_delegate))
  {
    sub_1CC9DD1F8(v70, v17, v16, v92);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1CC9CF9C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;

  v2 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v2);
  if (result)
  {
    v4 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    sub_1CCA14E90(&qword_1ED8A7E80);
    sub_1CCB63D9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 32))(a1, v6, ObjectType, v4);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CC9CFAA0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;

  v1 = sub_1CCB631E4();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260];
  v0[24] = v1;
  v0[25] = sub_1CC9C23B4(&qword_1ED8A8B00, 255, v2, MEMORY[0x1E0D21238]);
  v3 = sub_1CCA01CC0(v0 + 21);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 104))(v3, *MEMORY[0x1E0D21240], v1);
  LOBYTE(v1) = MEMORY[0x1D17B0748](v0 + 21);
  sub_1CCA01CA0((uint64_t)(v0 + 21));
  if ((v1 & 1) != 0)
  {
    if (qword_1ED8A8D88 != -1)
      swift_once();
    v4 = sub_1CCB637FC();
    v0[32] = sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD770);
    v5 = sub_1CCB637D8();
    v6 = sub_1CCB63D48();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPBeaconSharingController: Starting...", v7, 2u);
      MEMORY[0x1D17B214C](v7, -1, -1);
    }
    v8 = v0[31];

    v9 = *(void **)(v8 + 112);
    v0[14] = sub_1CCA2133C;
    v0[15] = v8;
    v10 = MEMORY[0x1E0C809B0];
    v0[10] = MEMORY[0x1E0C809B0];
    v0[11] = 1107296256;
    v0[12] = sub_1CC9C334C;
    v0[13] = &unk_1E88EFA30;
    v11 = _Block_copy(v0 + 10);
    v0[33] = v11;
    swift_retain();
    swift_release();
    v0[7] = (char *)v0 + 292;
    v0[2] = v0;
    v0[3] = sub_1CCA2138C;
    v12 = swift_continuation_init();
    v0[16] = v10;
    v13 = v0 + 16;
    v13[1] = 0x40000000;
    v13[2] = sub_1CCA1FA68;
    v13[3] = &unk_1E88EFA58;
    v13[4] = v12;
    objc_msgSend(v9, sel_startRefreshingSharesWithBlock_completion_, v11, v13);
    return swift_continuation_await();
  }
  else
  {
    if (qword_1ED8A8D88 != -1)
      swift_once();
    v15 = sub_1CCB637FC();
    sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD770);
    v16 = sub_1CCB637D8();
    v17 = sub_1CCB63D48();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1CC9BF000, v16, v17, "FMIPBeaconSharingController: Not starting since FF disabled.", v18, 2u);
      MEMORY[0x1D17B214C](v18, -1, -1);
    }

    return ((uint64_t (*)(void))v0[1])();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for FMIPAddress(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_1CC9CFDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)();
  uint64_t v36;
  int isUniquelyReferenced_nonNull_native;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  __int128 v55;
  unint64_t i;
  int64_t v57;
  unint64_t v58;
  int64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  void *v64;
  double v65;
  uint64_t v66;
  id v67;
  unint64_t v68;
  char v69;
  unsigned __int8 *v70;
  double v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  char *v77;
  id v78;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  char *v91;
  id v92;
  char *v93;
  void (*v94)(char *, uint64_t);
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  id v105;
  char *v106;
  double v107;
  double v108;
  char *v109;
  uint64_t v110;
  id v111;
  char *v112;
  double v113;
  double v114;
  NSObject *v115;
  os_log_type_t v116;
  uint8_t *v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  id v124;
  uint64_t v125;
  char v126;
  char v127;
  unint64_t v128;
  uint64_t v129;
  _BOOL8 v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  char v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  os_log_type_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  unsigned __int8 *v152;
  int v153;
  int v154;
  int v155;
  double v156;
  id v157;
  id v158;
  id v159;
  os_log_type_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char v164;
  int v165;
  unsigned int v166;
  int v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  unsigned __int8 *v171;
  int v172;
  int v173;
  int v174;
  double v175;
  id v176;
  id v177;
  uint64_t v178;
  uint64_t v179;
  NSObject *v180;
  os_log_type_t v181;
  uint8_t *v182;
  uint64_t v183;
  uint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  NSObject *v188;
  os_log_type_t v189;
  const char *v190;
  char v191;
  os_log_type_t v192;
  uint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char v199;
  int v200;
  unsigned int v201;
  int v202;
  uint64_t v203;
  unint64_t v204;
  char v205;
  unsigned __int8 *v206;
  uint64_t v207;
  int v208;
  int v209;
  uint64_t v210;
  void *v211;
  uint64_t (*v212)(uint64_t);
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  id v217;
  id v218;
  char v219;
  void *v220;
  id v221;
  uint64_t v222;
  NSObject *v223;
  os_log_type_t v224;
  uint8_t *v225;
  uint64_t v226;
  uint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  int v233;
  int v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  void (*v257)(char *, uint64_t);
  void (*v258)(char *, uint64_t);
  uint64_t v259;
  uint64_t v260;
  void *v261;
  void *v262;
  uint64_t result;
  uint64_t v264;
  id v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  __int128 v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  __int128 v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  __int128 v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  int v296;
  int v297;
  int v298;
  uint64_t v299;
  char *v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  int v305;
  int v306;
  uint8_t *v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  uint64_t v312;
  _QWORD *aBlock;
  uint64_t v314;
  uint64_t (*v315)(uint64_t);
  void *v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  _QWORD v320[2];

  v295 = a2;
  v277 = sub_1CCB63820();
  v273 = *(_QWORD *)(v277 - 8);
  MEMORY[0x1E0C80A78](v277);
  v276 = (char *)&v264 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v275 = sub_1CCB63868();
  v272 = *(_QWORD *)(v275 - 8);
  MEMORY[0x1E0C80A78](v275);
  v274 = (char *)&v264 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90((uint64_t *)&unk_1EF9DF580);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v264 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v302 = sub_1CCB635B0();
  v292 = *(_QWORD *)(v302 - 8);
  v8 = MEMORY[0x1E0C80A78](v302);
  v301 = (char *)&v264 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v300 = (char *)&v264 - v10;
  v288 = type metadata accessor for FMIPItem();
  v11 = *(_QWORD *)(v288 - 8);
  v12 = MEMORY[0x1E0C80A78](v288);
  v268 = (uint64_t)&v264 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v266 = (uint64_t)&v264 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v267 = (uint64_t)&v264 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v279 = (uint64_t)&v264 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v311 = (char *)&v264 - v21;
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v264 - v22;
  v269 = *(unsigned __int8 *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_locationController)
                            + OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_limitedPrecision);
  v280 = a1;
  v278 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager;
  v24 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
  v25 = *(_QWORD *)(v24 + 192);
  swift_beginAccess();
  v26 = *(_QWORD *)(v24 + 280);
  v27 = *(_QWORD *)(v26 + 16);
  v291 = v7;
  v287 = v11;
  v293 = v25;
  if (v27)
  {
    v28 = v26 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v29 = *(_QWORD *)(v11 + 72);
    swift_bridgeObjectRetain_n();
    v309 = v26;
    swift_bridgeObjectRetain_n();
    v30 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v31 = type metadata accessor for FMIPItem;
    v310 = v23;
    while (1)
    {
      sub_1CCA0BEEC(v28, (uint64_t)v23, (uint64_t (*)(_QWORD))v31);
      v33 = *((_QWORD *)v23 + 44);
      v32 = *((_QWORD *)v23 + 45);
      v34 = (uint64_t)v23;
      v35 = v31;
      sub_1CCA0BEEC(v34, (uint64_t)v311, (uint64_t (*)(_QWORD))v31);
      swift_bridgeObjectRetain();
      v36 = (uint64_t)v30;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock = (_QWORD *)v36;
      v39 = sub_1CCA074F4(v33, v32);
      v40 = *(_QWORD *)(v36 + 16);
      v41 = (v38 & 1) == 0;
      v42 = v40 + v41;
      if (__OFADD__(v40, v41))
      {
        __break(1u);
        goto LABEL_169;
      }
      v43 = v38;
      if (*(_QWORD *)(v36 + 24) >= v42)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v30 = aBlock;
          if ((v38 & 1) == 0)
            goto LABEL_12;
        }
        else
        {
          sub_1CCAECFE8();
          v30 = aBlock;
          if ((v43 & 1) == 0)
            goto LABEL_12;
        }
      }
      else
      {
        sub_1CCAE93FC(v42, isUniquelyReferenced_nonNull_native);
        v44 = sub_1CCA074F4(v33, v32);
        if ((v43 & 1) != (v45 & 1))
          goto LABEL_174;
        v39 = v44;
        v30 = aBlock;
        if ((v43 & 1) == 0)
        {
LABEL_12:
          v30[(v39 >> 6) + 8] |= 1 << v39;
          v46 = (uint64_t *)(v30[6] + 16 * v39);
          *v46 = v33;
          v46[1] = v32;
          v31 = v35;
          sub_1CC9FED60((uint64_t)v311, v30[7] + v39 * v29, (uint64_t (*)(_QWORD))v35);
          v47 = v30[2];
          v48 = __OFADD__(v47, 1);
          v49 = v47 + 1;
          if (v48)
            goto LABEL_170;
          v30[2] = v49;
          swift_bridgeObjectRetain();
          goto LABEL_4;
        }
      }
      sub_1CCAA9EA4((uint64_t)v311, v30[7] + v39 * v29);
      v31 = v35;
LABEL_4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = v310;
      sub_1CCA0BF30((uint64_t)v310, (uint64_t (*)(_QWORD))v31);
      v28 += v29;
      if (!--v27)
      {
        swift_bridgeObjectRelease();
        v7 = v291;
        v25 = v293;
        goto LABEL_18;
      }
    }
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v30 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_18:
  swift_bridgeObjectRelease();
  v50 = *(_QWORD *)(v295 + 64);
  v289 = v295 + 64;
  v51 = 1 << *(_BYTE *)(v295 + 32);
  v52 = -1;
  if (v51 < 64)
    v52 = ~(-1 << v51);
  v53 = v52 & v50;
  v271 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_useRealtimeForItems;
  v290 = (unint64_t)(v51 + 63) >> 6;
  v286 = &v314;
  v283 = v320;
  swift_bridgeObjectRetain();
  v54 = 0;
  *(_QWORD *)&v55 = 136315651;
  v285 = v55;
  v284 = MEMORY[0x1E0DEE9B8] + 8;
  *(_QWORD *)&v55 = 136315394;
  v270 = v55;
  *(_QWORD *)&v55 = 136315138;
  v281 = v55;
  v282 = v25;
  v294 = v30;
  if (v53)
    goto LABEL_24;
LABEL_25:
  v57 = v54 + 1;
  if (!__OFADD__(v54, 1))
  {
    if (v57 < v290)
    {
      v58 = *(_QWORD *)(v289 + 8 * v57);
      ++v54;
      if (v58)
        goto LABEL_38;
      v54 = v57 + 1;
      if (v57 + 1 >= v290)
        goto LABEL_165;
      v58 = *(_QWORD *)(v289 + 8 * v54);
      if (v58)
        goto LABEL_38;
      v54 = v57 + 2;
      if (v57 + 2 >= v290)
        goto LABEL_165;
      v58 = *(_QWORD *)(v289 + 8 * v54);
      if (v58)
      {
LABEL_38:
        v310 = (char *)((v58 - 1) & v58);
        for (i = __clz(__rbit64(v58)) + (v54 << 6); ; i = __clz(__rbit64(v53)) | (v54 << 6))
        {
          v60 = (uint64_t *)(*(_QWORD *)(v295 + 48) + 16 * i);
          v61 = *v60;
          v62 = v60[1];
          v63 = (unsigned __int8 *)(*(_QWORD *)(v295 + 56) + 24 * i);
          LODWORD(v307) = *v63;
          v306 = v63[1];
          v305 = v63[2];
          v304 = v63[3];
          v64 = (void *)*((_QWORD *)v63 + 1);
          v65 = *((double *)v63 + 2);
          v66 = *(_QWORD *)(v25 + 16);
          swift_bridgeObjectRetain();
          if (v66)
          {
            swift_bridgeObjectRetain();
            v67 = v64;
            v68 = sub_1CCA074F4(v61, v62);
            if ((v69 & 1) != 0)
            {
              v308 = v54;
              v70 = (unsigned __int8 *)(*(_QWORD *)(v25 + 56) + 24 * v68);
              v298 = *v70;
              v296 = v70[1];
              v297 = v70[2];
              LODWORD(v309) = v70[3];
              v71 = *((double *)v70 + 2);
              v72 = *((id *)v70 + 1);
              swift_bridgeObjectRelease();
              if (qword_1ED8AA630 != -1)
                swift_once();
              v73 = sub_1CCB637FC();
              v74 = sub_1CCA16C20(v73, (uint64_t)qword_1ED8AD7F8);
              swift_bridgeObjectRetain_n();
              v75 = v67;
              v76 = v72;
              v77 = (char *)v75;
              v78 = v76;
              v299 = v74;
              v79 = sub_1CCB637D8();
              v80 = sub_1CCB63D48();
              v81 = os_log_type_enabled(v79, v80);
              v311 = v77;
              v303 = v61;
              if (v81)
              {
                v82 = swift_slowAlloc();
                v83 = swift_slowAlloc();
                v319 = v83;
                *(_DWORD *)v82 = v285;
                swift_bridgeObjectRetain();
                aBlock = (_QWORD *)sub_1CCA0CB60(v61, v62, &v319);
                sub_1CCB63E44();
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v82 + 12) = 2081;
                LOBYTE(aBlock) = (_BYTE)v307;
                BYTE1(aBlock) = v306;
                BYTE2(aBlock) = v305;
                BYTE3(aBlock) = v304;
                v314 = (uint64_t)v311;
                v315 = *(uint64_t (**)(uint64_t))&v65;
                v84 = FMIPLocation.debugDescription.getter();
                aBlock = (_QWORD *)sub_1CCA0CB60(v84, v85, &v319);
                sub_1CCB63E44();

                swift_bridgeObjectRelease();
                *(_WORD *)(v82 + 22) = 2081;
                LOBYTE(aBlock) = v298;
                BYTE1(aBlock) = v296;
                BYTE2(aBlock) = v297;
                BYTE3(aBlock) = v309;
                v314 = (uint64_t)v78;
                v315 = *(uint64_t (**)(uint64_t))&v71;
                v86 = FMIPLocation.debugDescription.getter();
                aBlock = (_QWORD *)sub_1CCA0CB60(v86, v87, &v319);
                sub_1CCB63E44();

                swift_bridgeObjectRelease();
                _os_log_impl(&dword_1CC9BF000, v79, v80, "FMIPManager: didReceive location for identifier: %s new %{private}s, old: %{private}s", (uint8_t *)v82, 0x20u);
                swift_arrayDestroy();
                v88 = v83;
                v7 = v291;
                MEMORY[0x1D17B214C](v88, -1, -1);
                v89 = v82;
                v77 = v311;
                MEMORY[0x1D17B214C](v89, -1, -1);

              }
              else
              {

                swift_bridgeObjectRelease_n();
              }
              v90 = objc_msgSend(v77, sel_timestamp);
              v91 = v300;
              sub_1CCB63580();

              v92 = objc_msgSend(v78, sel_timestamp);
              v93 = v301;
              sub_1CCB63580();

              LOBYTE(v92) = sub_1CCB63544();
              v94 = *(void (**)(char *, uint64_t))(v292 + 8);
              v95 = v93;
              v96 = v302;
              v94(v95, v302);
              v94(v91, v96);
              v25 = v293;
              if ((v92 & 1) != 0)
              {
                LOBYTE(aBlock) = v309;
                if (FMIPLocationType.rawValue.getter() == 0x656D69746C616572 && v97 == 0xE800000000000000)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_54;
                }
                v104 = sub_1CCB642A0();
                swift_bridgeObjectRelease();
                if ((v104 & 1) != 0)
                {
LABEL_54:
                  v105 = objc_msgSend(v311, sel_timestamp);
                  v106 = v300;
                  sub_1CCB63580();

                  sub_1CCB63568();
                  v108 = v107;
                  v109 = v106;
                  v110 = v302;
                  v94(v109, v302);
                  v111 = objc_msgSend(v78, sel_timestamp);
                  v112 = v301;
                  sub_1CCB63580();

                  sub_1CCB63568();
                  v114 = v113;
                  v94(v112, v110);
                  swift_bridgeObjectRetain();
                  if (v108 - v114 <= 15.0)
                  {
                    v115 = sub_1CCB637D8();
                    v116 = sub_1CCB63D48();
                    if (os_log_type_enabled(v115, v116))
                    {
                      v117 = (uint8_t *)swift_slowAlloc();
                      v118 = swift_slowAlloc();
                      aBlock = (_QWORD *)v118;
                      *(_DWORD *)v117 = v281;
                      swift_bridgeObjectRetain();
                      v319 = sub_1CCA0CB60(v303, v62, (uint64_t *)&aBlock);
                      v7 = v291;
                      sub_1CCB63E44();
                      swift_bridgeObjectRelease_n();
                      _os_log_impl(&dword_1CC9BF000, v115, v116, "FMIPManager: Keeping realtime location for %s ", v117, 0xCu);
                      swift_arrayDestroy();
                      MEMORY[0x1D17B214C](v118, -1, -1);
                      MEMORY[0x1D17B214C](v117, -1, -1);

                    }
                    else
                    {

                      swift_bridgeObjectRelease_n();
                    }
                    goto LABEL_23;
                  }
                  swift_bridgeObjectRetain();
                  v141 = sub_1CCB637D8();
                  v142 = sub_1CCB63D48();
                  if (os_log_type_enabled(v141, v142))
                  {
                    v143 = swift_slowAlloc();
                    v144 = swift_slowAlloc();
                    aBlock = (_QWORD *)v144;
                    *(_DWORD *)v143 = v270;
                    swift_bridgeObjectRetain();
                    v145 = v303;
                    v319 = sub_1CCA0CB60(v303, v62, (uint64_t *)&aBlock);
                    sub_1CCB63E44();
                    swift_bridgeObjectRelease_n();
                    *(_WORD *)(v143 + 12) = 2048;
                    v319 = 0x402E000000000000;
                    sub_1CCB63E44();
                    _os_log_impl(&dword_1CC9BF000, v141, v142, "FMIPManager: Overriding realtime location for %s because %f miliseconds threshold is expired", (uint8_t *)v143, 0x16u);
                    swift_arrayDestroy();
                    v146 = v144;
                    v7 = v291;
                    goto LABEL_90;
                  }
LABEL_91:

                  swift_bridgeObjectRelease_n();
                  v145 = v303;
                }
                else
                {
                  swift_bridgeObjectRetain_n();
                  v141 = sub_1CCB637D8();
                  v160 = sub_1CCB63D48();
                  if (!os_log_type_enabled(v141, v160))
                    goto LABEL_91;
                  v143 = swift_slowAlloc();
                  v161 = swift_slowAlloc();
                  aBlock = (_QWORD *)v161;
                  *(_DWORD *)v143 = v281;
                  swift_bridgeObjectRetain();
                  v145 = v303;
                  v319 = sub_1CCA0CB60(v303, v62, (uint64_t *)&aBlock);
                  v7 = v291;
                  sub_1CCB63E44();
                  swift_bridgeObjectRelease_n();
                  _os_log_impl(&dword_1CC9BF000, v141, v160, "FMIPManager: Overriding location because it's newer: %s ", (uint8_t *)v143, 0xCu);
                  swift_arrayDestroy();
                  v146 = v161;
LABEL_90:
                  MEMORY[0x1D17B214C](v146, -1, -1);
                  MEMORY[0x1D17B214C](v143, -1, -1);

                }
                v162 = v311;
                v163 = v282;
                v164 = swift_isUniquelyReferenced_nonNull_native();
                aBlock = (_QWORD *)v163;
                if (v306)
                  v165 = 256;
                else
                  v165 = 0;
                v166 = v165 | v307;
                if (v305)
                  v167 = 0x10000;
                else
                  v167 = 0;
                sub_1CCA03D9C(v166 | v167 | (v304 << 24), (uint64_t)v162, v145, v62, v164, v65);
                v282 = (uint64_t)aBlock;

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_23:
                v54 = v308;
                v53 = (unint64_t)v310;
                if (!v310)
                  goto LABEL_25;
                goto LABEL_24;
              }
              v98 = v294;
              if (!v294[2])
              {
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v287 + 56))(v7, 1, 1, v288);
                v119 = v311;
LABEL_60:
                swift_bridgeObjectRelease();

                sub_1CC9C3E84((uint64_t)v7, (uint64_t *)&unk_1EF9DF580);
                goto LABEL_23;
              }
              swift_bridgeObjectRetain();
              v99 = sub_1CCA074F4(v303, v62);
              if ((v100 & 1) != 0)
              {
                v101 = v287;
                sub_1CCA0BEEC(v98[7] + *(_QWORD *)(v287 + 72) * v99, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
                v102 = v101;
                v103 = 0;
              }
              else
              {
                v103 = 1;
                v102 = v287;
              }
              v119 = v311;
              v120 = v288;
              v121 = v102;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v102 + 56))(v7, v103, 1, v288);
              swift_bridgeObjectRelease();
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v7, 1, v120) == 1)
                goto LABEL_60;
              v147 = v279;
              sub_1CC9FED60((uint64_t)v7, v279, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
              if (*(_BYTE *)(v280 + v271) == 1)
              {
                v148 = v269;
                if ((*(_BYTE *)(v147 + *(int *)(v288 + 76)) & 0x40) == 0)
                  v148 = 1;
                if (v148 != 1)
                {
                  LOBYTE(aBlock) = v309;
                  if (FMIPLocationType.rawValue.getter() == 0x656D69746C616572 && v178 == 0xE800000000000000)
                  {
                    swift_bridgeObjectRelease();

                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    v191 = sub_1CCB642A0();
                    swift_bridgeObjectRelease();
                    if ((v191 & 1) == 0)
                    {
                      if (*(_QWORD *)(v282 + 16))
                      {
                        swift_bridgeObjectRetain();
                        v203 = v282;
                        v204 = sub_1CCA074F4(v303, v62);
                        if ((v205 & 1) != 0)
                        {
                          v206 = (unsigned __int8 *)(*(_QWORD *)(v203 + 56) + 24 * v204);
                          v207 = *v206;
                          v208 = v206[1];
                          v209 = v206[2];
                          v210 = v206[3];
                          v211 = (void *)*((_QWORD *)v206 + 1);
                          v212 = (uint64_t (*)(uint64_t))*((_QWORD *)v206 + 2);
                          v213 = 256;
                          if (!v208)
                            v213 = 0;
                          v214 = v213 | v207;
                          v215 = 0x10000;
                          if (!v209)
                            v215 = 0;
                          v216 = v214 | v215 | (v210 << 24);
                          v217 = v211;
                          swift_bridgeObjectRelease();
                          aBlock = (_QWORD *)v216;
                          v314 = (uint64_t)v211;
                          v315 = v212;
                          LOBYTE(v319) = v298;
                          BYTE1(v319) = v296;
                          BYTE2(v319) = v297;
                          BYTE3(v319) = v309;
                          v320[0] = v78;
                          *(double *)&v320[1] = v71;
                          v218 = v217;
                          v219 = _s8FMIPCore12FMIPLocationV2eeoiySbAC_ACtFZ_0((double *)&aBlock, (double *)&v319);
                          v220 = (void *)v314;

                          v221 = v311;
                          if ((v219 & 1) != 0)
                          {
                            sub_1CCA0BF30(v279, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);

                            swift_bridgeObjectRelease();
                            goto LABEL_23;
                          }
                        }
                        else
                        {
                          swift_bridgeObjectRelease();
                        }
                      }
                      v265 = v78;
                      v222 = v266;
                      sub_1CCA0BEEC(v279, v266, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
                      v223 = sub_1CCB637D8();
                      v224 = sub_1CCB63D48();
                      if (os_log_type_enabled(v223, v224))
                      {
                        v225 = (uint8_t *)swift_slowAlloc();
                        v226 = swift_slowAlloc();
                        *(_DWORD *)v225 = v281;
                        aBlock = (_QWORD *)v226;
                        v307 = v225 + 4;
                        v227 = (uint64_t *)(v222 + *(int *)(v288 + 56));
                        v229 = *v227;
                        v228 = v227[1];
                        swift_bridgeObjectRetain();
                        v230 = v229;
                        v25 = v293;
                        v319 = sub_1CCA0CB60(v230, v228, (uint64_t *)&aBlock);
                        v7 = v291;
                        sub_1CCB63E44();
                        swift_bridgeObjectRelease();
                        sub_1CCA0BF30(v222, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
                        _os_log_impl(&dword_1CC9BF000, v223, v224, "FMIPManager: overriding location for \"%s\" with realtime location because it's connected", v225, 0xCu);
                        swift_arrayDestroy();
                        MEMORY[0x1D17B214C](v226, -1, -1);
                        MEMORY[0x1D17B214C](v225, -1, -1);
                      }
                      else
                      {
                        sub_1CCA0BF30(v222, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
                      }

                      v231 = v282;
                      v232 = swift_isUniquelyReferenced_nonNull_native();
                      aBlock = (_QWORD *)v231;
                      if (v296)
                        v233 = 256;
                      else
                        v233 = 0;
                      v234 = v233 | v298;
                      if (v297)
                        v235 = 0x10000;
                      else
                        v235 = 0;
                      sub_1CCA03D9C(v234 | v235 | ((_DWORD)v309 << 24), (uint64_t)v265, v303, v62, v232, v71);
                      v282 = (uint64_t)aBlock;

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1CCA0BF30(v279, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
                      goto LABEL_23;
                    }
                    swift_bridgeObjectRelease();

                  }
                  sub_1CCA0BF30(v279, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
                  goto LABEL_23;
                }
                if (!*(_QWORD *)(v282 + 16))
                  goto LABEL_116;
                swift_bridgeObjectRetain();
                v149 = v282;
                v150 = sub_1CCA074F4(v303, v62);
                if ((v151 & 1) == 0)
                {
                  swift_bridgeObjectRelease();
                  v147 = v279;
                  goto LABEL_116;
                }
                v152 = (unsigned __int8 *)(*(_QWORD *)(v149 + 56) + 24 * v150);
                v153 = *v152;
                v154 = v152[1];
                v155 = v152[2];
                LODWORD(v309) = v152[3];
                v156 = *((double *)v152 + 2);
                v157 = *((id *)v152 + 1);
                swift_bridgeObjectRelease();
                sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A7F30);
                v158 = v119;
                v159 = v157;
                if ((sub_1CCB63DF0() & 1) == 0 || v156 != v65 || (_DWORD)v307 != v153)
                {

                  v7 = v291;
                  goto LABEL_87;
                }
                v7 = v291;
                if (v306 != v154)
                {

LABEL_87:
                  v147 = v279;
                  v25 = v293;
LABEL_116:
                  v265 = v78;
                  v179 = v267;
                  sub_1CCA0BEEC(v147, v267, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
                  v180 = sub_1CCB637D8();
                  v192 = sub_1CCB63D48();
                  if (os_log_type_enabled(v180, v192))
                  {
                    v182 = (uint8_t *)swift_slowAlloc();
                    v183 = swift_slowAlloc();
                    *(_DWORD *)v182 = v281;
                    aBlock = (_QWORD *)v183;
                    v309 = (uint64_t)(v182 + 4);
                    v193 = (uint64_t *)(v179 + *(int *)(v288 + 56));
                    v195 = *v193;
                    v194 = v193[1];
                    swift_bridgeObjectRetain();
                    v196 = v195;
                    v25 = v293;
                    v319 = sub_1CCA0CB60(v196, v194, (uint64_t *)&aBlock);
                    v7 = v291;
                    sub_1CCB63E44();
                    swift_bridgeObjectRelease();
                    sub_1CCA0BF30(v179, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
                    v188 = v180;
                    v189 = v192;
                    v190 = "FMIPManager: overriding location for \"%s\" with new BA location because it's not connected";
LABEL_118:
                    _os_log_impl(&dword_1CC9BF000, v188, v189, v190, v182, 0xCu);
                    swift_arrayDestroy();
                    MEMORY[0x1D17B214C](v183, -1, -1);
                    MEMORY[0x1D17B214C](v182, -1, -1);
LABEL_120:

                    v197 = v311;
                    v198 = v282;
                    v199 = swift_isUniquelyReferenced_nonNull_native();
                    aBlock = (_QWORD *)v198;
                    if (v306)
                      v200 = 256;
                    else
                      v200 = 0;
                    v201 = v200 | v307;
                    if (v305)
                      v202 = 0x10000;
                    else
                      v202 = 0;
                    sub_1CCA03D9C(v201 | v202 | (v304 << 24), (uint64_t)v197, v303, v62, v199, v65);
                    v282 = (uint64_t)aBlock;

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_1CCA0BF30(v279, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
                    goto LABEL_23;
                  }
LABEL_119:
                  sub_1CCA0BF30(v179, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
                  goto LABEL_120;
                }
                v25 = v293;
                if (v305 != v155)
                {

                  v147 = v279;
                  goto LABEL_116;
                }
                LOBYTE(aBlock) = v309;
                LOBYTE(v319) = v304;
                v240 = FMIPLocationType.rawValue.getter();
                v242 = v241;
                if (v240 == FMIPLocationType.rawValue.getter() && v242 == v243)
                {

                  swift_bridgeObjectRelease_n();
                  v7 = v291;
                  v147 = v279;
                }
                else
                {
                  v246 = sub_1CCB642A0();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v7 = v291;
                  v147 = v279;
                  if ((v246 & 1) == 0)
                    goto LABEL_116;
                }
                v245 = v147;
LABEL_164:
                sub_1CCA0BF30(v245, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);

                swift_bridgeObjectRelease();
                goto LABEL_23;
              }
              if (*(_QWORD *)(v282 + 16))
              {
                swift_bridgeObjectRetain();
                v168 = v282;
                v169 = sub_1CCA074F4(v303, v62);
                if ((v170 & 1) == 0)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_110;
                }
                v171 = (unsigned __int8 *)(*(_QWORD *)(v168 + 56) + 24 * v169);
                v172 = *v171;
                v173 = v171[1];
                v174 = v171[2];
                LODWORD(v309) = v171[3];
                v175 = *((double *)v171 + 2);
                v176 = *((id *)v171 + 1);
                swift_bridgeObjectRelease();
                sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A7F30);
                v158 = v119;
                v177 = v176;
                if ((sub_1CCB63DF0() & 1) == 0 || v175 != v65 || (_DWORD)v307 != v172)
                {

                  v7 = v291;
                  goto LABEL_105;
                }
                v7 = v291;
                if (v306 == v173)
                {
                  v25 = v293;
                  if (v305 != v174)
                  {

                    goto LABEL_110;
                  }
                  LOBYTE(aBlock) = v309;
                  LOBYTE(v319) = v304;
                  v236 = FMIPLocationType.rawValue.getter();
                  v238 = v237;
                  if (v236 == FMIPLocationType.rawValue.getter() && v238 == v239)
                  {

                    swift_bridgeObjectRelease_n();
                    v7 = v291;
                  }
                  else
                  {
                    v244 = sub_1CCB642A0();

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v7 = v291;
                    if ((v244 & 1) == 0)
                      goto LABEL_110;
                  }
                  v245 = v279;
                  goto LABEL_164;
                }

LABEL_105:
                v25 = v293;
              }
LABEL_110:
              v265 = v78;
              v179 = v268;
              sub_1CCA0BEEC(v279, v268, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
              v180 = sub_1CCB637D8();
              v181 = sub_1CCB63D48();
              if (os_log_type_enabled(v180, v181))
              {
                v182 = (uint8_t *)swift_slowAlloc();
                v183 = swift_slowAlloc();
                *(_DWORD *)v182 = v281;
                aBlock = (_QWORD *)v183;
                v309 = (uint64_t)(v182 + 4);
                v184 = (uint64_t *)(v179 + *(int *)(v288 + 56));
                v186 = *v184;
                v185 = v184[1];
                swift_bridgeObjectRetain();
                v187 = v186;
                v25 = v293;
                v319 = sub_1CCA0CB60(v187, v185, (uint64_t *)&aBlock);
                v7 = v291;
                sub_1CCB63E44();
                swift_bridgeObjectRelease();
                sub_1CCA0BF30(v179, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
                v188 = v180;
                v189 = v181;
                v190 = "FMIPManager: using BA Location for \"%s\" with because BA provides live locations.";
                goto LABEL_118;
              }
              goto LABEL_119;
            }
            v122 = v61;
            swift_bridgeObjectRelease();
          }
          else
          {
            v122 = v61;
            v123 = v64;
          }
          v124 = v64;
          v125 = v282;
          v126 = swift_isUniquelyReferenced_nonNull_native();
          aBlock = (_QWORD *)v125;
          v128 = sub_1CCA074F4(v122, v62);
          v129 = *(_QWORD *)(v125 + 16);
          v130 = (v127 & 1) == 0;
          v131 = v129 + v130;
          if (__OFADD__(v129, v130))
            goto LABEL_172;
          v132 = v127;
          if (*(_QWORD *)(v125 + 24) >= v131)
          {
            if ((v126 & 1) == 0)
              sub_1CCAEC584();
          }
          else
          {
            sub_1CCA03F94(v131, v126);
            v133 = sub_1CCA074F4(v122, v62);
            if ((v132 & 1) != (v134 & 1))
              goto LABEL_174;
            v128 = v133;
          }
          v135 = aBlock;
          v282 = (uint64_t)aBlock;
          if ((v132 & 1) != 0)
          {
            v136 = aBlock[7] + 24 * v128;

            *(_BYTE *)v136 = (_BYTE)v307;
            *(_BYTE *)(v136 + 1) = v306;
            *(_BYTE *)(v136 + 2) = v305;
            *(_BYTE *)(v136 + 3) = v304;
            *(_QWORD *)(v136 + 8) = v124;
            *(double *)(v136 + 16) = v65;
          }
          else
          {
            aBlock[(v128 >> 6) + 8] |= 1 << v128;
            v137 = (uint64_t *)(v135[6] + 16 * v128);
            *v137 = v122;
            v137[1] = v62;
            v138 = v135[7] + 24 * v128;
            *(_BYTE *)v138 = (_BYTE)v307;
            *(_BYTE *)(v138 + 1) = v306;
            *(_BYTE *)(v138 + 2) = v305;
            *(_BYTE *)(v138 + 3) = v304;
            *(_QWORD *)(v138 + 8) = v124;
            *(double *)(v138 + 16) = v65;
            v139 = v135[2];
            v48 = __OFADD__(v139, 1);
            v140 = v139 + 1;
            if (v48)
              goto LABEL_173;
            v135[2] = v140;
            swift_bridgeObjectRetain();
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v53 = (unint64_t)v310;
          v7 = v291;
          if (!v310)
            goto LABEL_25;
LABEL_24:
          v310 = (char *)((v53 - 1) & v53);
        }
      }
      v59 = v57 + 3;
      if (v59 < v290)
      {
        v58 = *(_QWORD *)(v289 + 8 * v59);
        if (v58)
        {
          v54 = v59;
          goto LABEL_38;
        }
        while (1)
        {
          v54 = v59 + 1;
          if (__OFADD__(v59, 1))
            goto LABEL_171;
          if (v54 >= v290)
            break;
          v58 = *(_QWORD *)(v289 + 8 * v54);
          ++v59;
          if (v58)
            goto LABEL_38;
        }
      }
    }
LABEL_165:
    swift_bridgeObjectRelease();
    v247 = v295;
    swift_release();
    swift_bridgeObjectRelease();
    v248 = v280;
    v249 = v278;
    swift_retain();
    v250 = (_QWORD *)swift_bridgeObjectRetain();
    LOBYTE(v247) = sub_1CC9C5064(v250, v247);
    swift_release();
    swift_bridgeObjectRelease();
    if ((v247 & 1) != 0)
    {
      v251 = *(_QWORD *)(v248 + v249);
      swift_beginAccess();
      v252 = *(_QWORD *)(v251 + 280);
      v310 = *(char **)(v248 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue);
      v317 = sub_1CCA242E0;
      v318 = v248;
      aBlock = (_QWORD *)MEMORY[0x1E0C809B0];
      v314 = 1107296256;
      v315 = sub_1CCA00C38;
      v316 = &unk_1E88F79E0;
      v253 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      v254 = v274;
      sub_1CCB63844();
      v312 = MEMORY[0x1E0DEE9D8];
      v309 = sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      v308 = sub_1CCA14E90(&qword_1ED8AA338);
      v311 = (char *)sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
      v255 = v276;
      v256 = v277;
      sub_1CCB63E98();
      MEMORY[0x1D17B1318](0, v254, v255, v253);
      _Block_release(v253);
      v257 = *(void (**)(char *, uint64_t))(v273 + 8);
      v257(v255, v256);
      v258 = *(void (**)(char *, uint64_t))(v272 + 8);
      v259 = v275;
      v258(v254, v275);
      swift_release();
      sub_1CCB63814();
      v260 = swift_allocObject();
      *(_QWORD *)(v260 + 16) = v248;
      *(_QWORD *)(v260 + 24) = v252;
      v317 = sub_1CCAA9E4C;
      v318 = v260;
      aBlock = (_QWORD *)MEMORY[0x1E0C809B0];
      v314 = 1107296256;
      v315 = sub_1CCA00C38;
      v316 = &unk_1E88F7A30;
      v261 = _Block_copy(&aBlock);
      swift_retain();
      sub_1CCB63844();
      MEMORY[0x1D17B1318](0, v254, v255, v261);
      _Block_release(v261);
      v258(v254, v259);
      v257(v255, v256);
      swift_release();
      v317 = sub_1CCA241A4;
      v318 = v248;
      aBlock = (_QWORD *)MEMORY[0x1E0C809B0];
      v314 = 1107296256;
      v315 = sub_1CCA00C38;
      v316 = &unk_1E88F7A58;
      v262 = _Block_copy(&aBlock);
      swift_retain();
      sub_1CCB63844();
      v312 = MEMORY[0x1E0DEE9D8];
      sub_1CCB63E98();
      MEMORY[0x1D17B1318](0, v254, v255, v262);
      _Block_release(v262);
      v257(v255, v256);
      v258(v254, v259);
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  result = sub_1CCB642DC();
  __break(1u);
  return result;
}

uint64_t sub_1CC9D2070(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v4 = sub_1CCB63820();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v19 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63868();
  v17 = *(_QWORD *)(v8 - 8);
  v18 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v11 = a1[35];
  v16 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue);
  aBlock[4] = sub_1CCA242E0;
  aBlock[5] = a2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F7F30;
  v12 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CCB63844();
  v20 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v5, MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v10, v7, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v18);
  swift_release();
  *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemCounts) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1CCA982F0();
  swift_beginAccess();
  v13 = a1[10];
  v14 = a1[36];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCA0953C(v13, v11, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1CC9D22F0()
{
  const void *v0;
  __CFString *v1;
  __CFNotificationCenter *v2;
  void *v3;
  id v4;
  __CFString *v5;
  id v6;

  v1 = (__CFString *)(id)*MEMORY[0x1E0D89A98];
  v2 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v2, v0, (CFNotificationCallback)sub_1CCB48788, v1, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  v3 = (void *)objc_opt_self();
  v4 = objc_msgSend(v3, sel_defaultCenter);
  objc_msgSend(v4, sel_addObserver_selector_name_object_, v0, sel_handleBeaconsChanged, v1, 0);

  v5 = (__CFString *)(id)*MEMORY[0x1E0D89AC0];
  CFNotificationCenterAddObserver(v2, v0, (CFNotificationCallback)sub_1CCB48794, v5, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  v6 = objc_msgSend(v3, sel_defaultCenter);
  objc_msgSend(v6, sel_addObserver_selector_name_object_, v0, sel_handleUnknownBeaconsChanged, v5, 0);

}

uint64_t sub_1CC9D242C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  id v9;

  v1 = v0;
  swift_defaultActor_initialize();
  v2 = MEMORY[0x1E0DEE9E8];
  v3 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = v2;
  *(_QWORD *)(v0 + 136) = v3;
  *(_QWORD *)(v0 + 144) = v2;
  *(_QWORD *)(v0 + 160) = 0;
  swift_unknownObjectWeakInit();
  if (qword_1ED8A8D88 != -1)
    swift_once();
  v4 = sub_1CCB637FC();
  sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD770);
  v5 = sub_1CCB637D8();
  v6 = sub_1CCB63D48();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPBeaconSharingController: init", v7, 2u);
    MEMORY[0x1D17B214C](v7, -1, -1);
  }

  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D89920]), sel_init);
  v9 = objc_msgSend(v8, sel_beaconSharingSession);

  *(_QWORD *)(v1 + 112) = v9;
  return v1;
}

void sub_1CC9D2570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v6;
  void *v7;
  _QWORD v8[6];

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPDeviceConnectionStateProvider: accesoriesConnectionStateChanged notification received", v5, 2u);
    MEMORY[0x1D17B214C](v5, -1, -1);
  }

  v6 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v8[4] = sub_1CCA20AB4;
  v8[5] = v1;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = sub_1CC9C6994;
  v8[3] = &unk_1E88FABE0;
  v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_getConnectedAccessoriesDiscoveryIds_, v7);
  _Block_release(v7);

}

void sub_1CC9D26E4(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t aBlock[6];

  v2 = v1;
  v4 = sub_1CCB63820();
  v23 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1CCB63868();
  v7 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v25 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v10 = sub_1CCB637FC();
  sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
  v11 = sub_1CCB637D8();
  v12 = sub_1CCB63D48();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v22 = v4;
    v15 = v14;
    aBlock[0] = v14;
    v21 = v7;
    *(_DWORD *)v13 = 136446210;
    LOBYTE(v26) = v9;
    v16 = sub_1CCB639AC();
    v26 = sub_1CCA0CB60(v16, v17, aBlock);
    v7 = v21;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPManager: didReceive clientConfiguration: %{public}s", v13, 0xCu);
    swift_arrayDestroy();
    v18 = v15;
    v4 = v22;
    MEMORY[0x1D17B214C](v18, -1, -1);
    MEMORY[0x1D17B214C](v13, -1, -1);
  }

  if (v9)
  {
    aBlock[4] = (uint64_t)sub_1CCAAB334;
    aBlock[5] = v2;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CCA00C38;
    aBlock[3] = (uint64_t)&unk_1E88F88D0;
    v19 = _Block_copy(aBlock);
    swift_retain();
    v20 = v25;
    sub_1CCB63844();
    v26 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v20, v6, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v24);
    swift_release();
  }
}

uint64_t sub_1CC9D2A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 aBlock;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v6 = sub_1CCB63820();
  v35 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCB63868();
  v33 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
  v13 = *(_QWORD *)(v12 + 176);
  swift_retain();
  swift_bridgeObjectRetain();
  v14 = sub_1CCA1FCC4(a2, v13);
  swift_bridgeObjectRelease();
  v32 = a2;
  if ((v14 & 1) == 0)
  {
    *(_QWORD *)(v12 + 176) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v12 + 24) & 1) != 0 && *(_QWORD *)(v12 + 336))
    {
      swift_retain();
      sub_1CCAB302C(a2);
      swift_release();
    }
    swift_release();
    v31[1] = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = a1;
    *(_QWORD *)(v15 + 24) = a2;
    *(_QWORD *)&v38 = sub_1CCAAB264;
    *((_QWORD *)&v38 + 1) = v15;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v37 = sub_1CCA00C38;
    *((_QWORD *)&v37 + 1) = &unk_1E88F8768;
    v16 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1CCB63844();
    v42 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v11, v8, v16);
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
  }
  swift_release();
  v17 = *(_OWORD *)(a3 + 48);
  v38 = *(_OWORD *)(a3 + 32);
  v39 = v17;
  v40 = *(_OWORD *)(a3 + 64);
  v41 = *(_QWORD *)(a3 + 80);
  v18 = *(_OWORD *)(a3 + 16);
  aBlock = *(_OWORD *)a3;
  v37 = v18;
  swift_retain();
  v19 = sub_1CC9DA040((uint64_t)&aBlock);
  swift_release();
  if ((v19 & 1) != 0)
  {
    v20 = swift_allocObject();
    v21 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v20 + 56) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v20 + 72) = v21;
    *(_OWORD *)(v20 + 88) = *(_OWORD *)(a3 + 64);
    v22 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v20 + 24) = *(_OWORD *)a3;
    *(_QWORD *)(v20 + 16) = a1;
    *(_QWORD *)(v20 + 104) = *(_QWORD *)(a3 + 80);
    *(_OWORD *)(v20 + 40) = v22;
    *(_QWORD *)&v38 = sub_1CCAAB30C;
    *((_QWORD *)&v38 + 1) = v20;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v37 = sub_1CCA00C38;
    *((_QWORD *)&v37 + 1) = &unk_1E88F8808;
    v23 = _Block_copy(&aBlock);
    swift_retain();
    sub_1CC9DA35C(a3);
    sub_1CCB63844();
    v42 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v11, v8, v23);
    _Block_release(v23);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
    swift_release();
  }
  v24 = swift_allocObject();
  v25 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v24 + 56) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v24 + 72) = v25;
  *(_OWORD *)(v24 + 88) = *(_OWORD *)(a3 + 64);
  v26 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v24 + 24) = *(_OWORD *)a3;
  *(_QWORD *)(v24 + 16) = a1;
  v27 = *(_QWORD *)(a3 + 80);
  *(_OWORD *)(v24 + 40) = v26;
  v28 = v32;
  *(_QWORD *)(v24 + 104) = v27;
  *(_QWORD *)(v24 + 112) = v28;
  *(_QWORD *)&v38 = sub_1CCA24204;
  *((_QWORD *)&v38 + 1) = v24;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v37 = sub_1CCA00C38;
  *((_QWORD *)&v37 + 1) = &unk_1E88F87B8;
  v29 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CC9DA35C(a3);
  sub_1CCB63844();
  v42 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v11, v8, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
  return swift_release();
}

void sub_1CC9D2FD0(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  switch(a1)
  {
    case 0:
      if (qword_1ED8AA630 != -1)
        swift_once();
      v16 = sub_1CCB637FC();
      sub_1CCA16C20(v16, (uint64_t)qword_1ED8AD7F8);
      v9 = sub_1CCB637D8();
      v17 = sub_1CCB63D48();
      if (!os_log_type_enabled(v9, v17))
        goto LABEL_25;
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      v19 = "FMIPLocationController: location manager didChangeAuthorization: NOT DETERMINED";
      goto LABEL_23;
    case 1:
      if (qword_1ED8AA630 != -1)
        swift_once();
      v20 = sub_1CCB637FC();
      sub_1CCA16C20(v20, (uint64_t)qword_1ED8AD7F8);
      v9 = sub_1CCB637D8();
      v17 = sub_1CCB63D48();
      if (!os_log_type_enabled(v9, v17))
        goto LABEL_25;
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      v19 = "FMIPLocationController: location manager didChangeAuthorization: RESTRICTED";
      goto LABEL_23;
    case 2:
      if (qword_1ED8AA630 != -1)
        swift_once();
      v21 = sub_1CCB637FC();
      sub_1CCA16C20(v21, (uint64_t)qword_1ED8AD7F8);
      v9 = sub_1CCB637D8();
      v17 = sub_1CCB63D48();
      if (!os_log_type_enabled(v9, v17))
        goto LABEL_25;
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      v19 = "FMIPLocationController: location manager didChangeAuthorization: DENIED";
LABEL_23:
      _os_log_impl(&dword_1CC9BF000, v9, v17, v19, v18, 2u);
      v15 = v18;
      break;
    case 3:
    case 4:
      if (qword_1ED8AA630 != -1)
        swift_once();
      v3 = sub_1CCB637FC();
      sub_1CCA16C20(v3, (uint64_t)qword_1ED8AD7F8);
      v4 = sub_1CCB637D8();
      v5 = sub_1CCB63D48();
      if (os_log_type_enabled(v4, v5))
      {
        v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_1CC9BF000, v4, v5, "FMIPLocationController: location manager didChangeAuthorization: AUTHORIZED", v6, 2u);
        MEMORY[0x1D17B214C](v6, -1, -1);
      }

      objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_locationManager), sel_startUpdatingLocation);
      goto LABEL_26;
    default:
      if (qword_1ED8AA630 != -1)
        swift_once();
      v7 = sub_1CCB637FC();
      sub_1CCA16C20(v7, (uint64_t)qword_1ED8AD7F8);
      v8 = sub_1CCB63D30();
      v9 = sub_1CCB637D8();
      v10 = v8;
      if (!os_log_type_enabled(v9, v8))
        goto LABEL_25;
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v27 = v12;
      *(_DWORD *)v11 = 136315138;
      type metadata accessor for CLAuthorizationStatus(0);
      v13 = sub_1CCB639AC();
      v26 = sub_1CCA0CB60(v13, v14, &v27);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v9, v10, "FMIPLocationController: location manager didChangeAuthorization: UNKNOWN - %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v12, -1, -1);
      v15 = v11;
      break;
  }
  MEMORY[0x1D17B214C](v15, -1, -1);
LABEL_25:

LABEL_26:
  v22 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_locationManager), sel_accuracyAuthorization, v26, v27) != 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_limitedPrecision) = v22;
  v23 = (void *)objc_opt_self();
  v24 = (void *)sub_1CCB63964();
  v25 = (void *)sub_1CCB63964();
  objc_msgSend(v23, sel_setBool_forKey_inDomain_, v22, v24, v25);

}

uint64_t sub_1CC9D3498(char a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t ObjectType;
  _QWORD v12[4];

  if (qword_1ED8AA630 != -1)
    swift_once();
  v4 = sub_1CCB637FC();
  sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
  v5 = sub_1CCB637D8();
  v6 = sub_1CCB63D48();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (_DWORD *)swift_slowAlloc();
    v12[1] = swift_slowAlloc();
    *v7 = 136315138;
    __asm { BR              X10 }
  }

  v8 = a2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v8);
  if (result)
  {
    v10 = *(_QWORD *)(v8 + 8);
    ObjectType = swift_getObjectType();
    LOBYTE(v12[0]) = a1;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v10 + 104))(a2, v12, ObjectType, v10);
    return swift_unknownObjectRelease();
  }
  return result;
}

unint64_t sub_1CC9D36EC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t result;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _BYTE v28[32];

  v6 = a3;
  v8 = a1[1];
  v9 = a1[3];
  v25 = a1[2];
  v26 = *a1;
  v23 = *((_BYTE *)a1 + 33);
  v24 = *((_BYTE *)a1 + 32);
  v22 = *((_BYTE *)a1 + 34);
  v10 = *((_BYTE *)a1 + 35);
  v11 = a1[6];
  v12 = a1[8];
  v20 = a1[7];
  v21 = a1[5];
  v13 = a1[10];
  v19 = a1[9];
  if (a2)
  {
    v15 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v15)
    {
      result = sub_1CCA074F4(0x4153487369, 0xE500000000000000);
      if ((v17 & 1) != 0)
      {
        sub_1CCA0CC30(*(_QWORD *)(a2 + 56) + 32 * result, (uint64_t)v28);
        result = swift_dynamicCast();
        if ((result & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v10 = v27;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          result = swift_bridgeObjectRetain();
        }
      }
    }
    v6 = a3;
    if (a4)
      goto LABEL_7;
LABEL_9:
    v6 = v19;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  if (!a4)
    goto LABEL_9;
LABEL_7:
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  v13 = a4;
LABEL_10:
  *(_QWORD *)a5 = v26;
  *(_QWORD *)(a5 + 8) = v8;
  *(_QWORD *)(a5 + 16) = v25;
  *(_QWORD *)(a5 + 24) = v9;
  *(_BYTE *)(a5 + 32) = v24;
  *(_BYTE *)(a5 + 33) = v23;
  *(_BYTE *)(a5 + 34) = v22;
  *(_BYTE *)(a5 + 35) = v10;
  *(_QWORD *)(a5 + 40) = v21;
  *(_QWORD *)(a5 + 48) = v11;
  *(_QWORD *)(a5 + 56) = v20;
  *(_QWORD *)(a5 + 64) = v12;
  *(_QWORD *)(a5 + 72) = v6;
  *(_QWORD *)(a5 + 80) = v13;
  return result;
}

uint64_t sub_1CC9D38E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;

  sub_1CCA14E90(&qword_1ED8A7E80);
  sub_1CCB63D9C();
  sub_1CCA14E90((uint64_t *)&unk_1EF9E2A60);
  sub_1CCB63D9C();
  sub_1CCA14E90(&qword_1EF9E2A30);
  sub_1CCB63D9C();
  sub_1CCA0953C(v7, v7, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  if (MEMORY[0x1D17B2218](v2))
  {
    v3 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    sub_1CCB63D9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 32))(a1, v6, ObjectType, v3);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  sub_1CCB63D9C();
  sub_1CCA23688(v6, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CC9D3AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  __int128 v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  double v48;
  void *v49;
  double v50;
  id v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  __int128 v67;
  id *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int64_t v75;
  char *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  double v87;

  v63 = a2;
  v71 = a1;
  v2 = sub_1CCB63604();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v61 - v7;
  v9 = sub_1CCA14E90(&qword_1EF9E65E8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v61 - v13;
  if (qword_1ED8AA630 != -1)
LABEL_43:
    swift_once();
  v15 = sub_1CCB637FC();
  v72 = sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD7F8);
  v16 = sub_1CCB637D8();
  v17 = sub_1CCB63D48();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1CC9BF000, v16, v17, "FMIPBeaconRefreshingController: refreshing location", v18, 2u);
    MEMORY[0x1D17B214C](v18, -1, -1);
  }

  v19 = *(_QWORD *)(v71 + 64);
  v64 = v71 + 64;
  v20 = 1 << *(_BYTE *)(v71 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v68 = &v86;
  v65 = (unint64_t)(v20 + 63) >> 6;
  v62 = v65 - 1;
  result = swift_bridgeObjectRetain();
  v75 = 0;
  v24 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)&v25 = 136315395;
  v67 = v25;
  v66 = MEMORY[0x1E0DEE9B8] + 8;
  v73 = v14;
  v74 = v3;
  v69 = v12;
  v70 = v8;
  v76 = v6;
  while (1)
  {
    if (v22)
    {
      v79 = (v22 - 1) & v22;
      v36 = __clz(__rbit64(v22)) | (v75 << 6);
LABEL_17:
      v37 = v71;
      (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v12, *(_QWORD *)(v71 + 48) + *(_QWORD *)(v3 + 72) * v36, v2);
      v38 = *(_QWORD *)(v37 + 56);
      v39 = sub_1CCA14E90(&qword_1EF9E65F0);
      v40 = *(void **)(v38 + 8 * v36);
      *(_QWORD *)&v12[*(int *)(v39 + 48)] = v40;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v12, 0, 1, v39);
      v41 = v40;
      goto LABEL_36;
    }
    v42 = v75 + 1;
    if (__OFADD__(v75, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v42 < v65)
    {
      v43 = *(_QWORD *)(v64 + 8 * v42);
      if (v43)
        goto LABEL_21;
      v44 = v75 + 2;
      ++v75;
      if (v42 + 1 < v65)
      {
        v43 = *(_QWORD *)(v64 + 8 * v44);
        if (v43)
          goto LABEL_24;
        v75 = v42 + 1;
        if (v42 + 2 < v65)
        {
          v43 = *(_QWORD *)(v64 + 8 * (v42 + 2));
          if (v43)
          {
            v42 += 2;
            goto LABEL_21;
          }
          v44 = v42 + 3;
          v75 = v42 + 2;
          if (v42 + 3 < v65)
            break;
        }
      }
    }
LABEL_35:
    v45 = sub_1CCA14E90(&qword_1EF9E65F0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v12, 1, 1, v45);
    v79 = 0;
LABEL_36:
    sub_1CC9C3EC0((uint64_t)v12, (uint64_t)v14, &qword_1EF9E65E8);
    v46 = sub_1CCA14E90(&qword_1EF9E65F0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v14, 1, v46) == 1)
    {
      swift_release();
      if (!MEMORY[0x1D17B2218](v63 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_delegate))
        return swift_bridgeObjectRelease();
      sub_1CC9D5AA4(v24);
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    v78 = v24;
    v47 = *(void **)&v14[*(int *)(v46 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v14, v2);
    v77 = v47;
    v48 = FMIPLocation.init(beaconLocation:)(v77, (uint64_t)&v85);
    v80 = BYTE1(v85);
    v81 = BYTE2(v85);
    v82 = v85;
    v83 = BYTE3(v85);
    v49 = v86;
    v50 = v87;
    (*(void (**)(char *, char *, uint64_t, double))(v3 + 16))(v6, v8, v2, v48);
    v51 = v49;
    v52 = sub_1CCB637D8();
    v53 = sub_1CCB63D48();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = swift_slowAlloc();
      v55 = swift_slowAlloc();
      v84 = v55;
      *(_DWORD *)v54 = v67;
      v56 = sub_1CCB635C8();
      v85 = sub_1CCA0CB60(v56, v57, &v84);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      v26 = *(void (**)(char *, uint64_t))(v3 + 8);
      v26(v76, v2);
      *(_WORD *)(v54 + 12) = 2081;
      LOBYTE(v85) = v82;
      BYTE1(v85) = v80;
      BYTE2(v85) = v81;
      BYTE3(v85) = v83;
      v86 = v51;
      v87 = v50;
      v58 = FMIPLocation.debugDescription.getter();
      v85 = sub_1CCA0CB60(v58, v59, &v84);
      v8 = v70;
      sub_1CCB63E44();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v52, v53, "FMIPBeaconRefreshingController: refreshLocations identifier: %s, location: %{private}s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v55, -1, -1);
      v60 = v54;
      v6 = v76;
      v12 = v69;
      MEMORY[0x1D17B214C](v60, -1, -1);

    }
    else
    {
      v26 = *(void (**)(char *, uint64_t))(v3 + 8);
      v26(v6, v2);

    }
    v27 = sub_1CCB635C8();
    v29 = v28;
    v30 = v51;
    v31 = v78;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v85 = v31;
    if (v80)
      v33 = 256;
    else
      v33 = 0;
    v34 = v33 | v82;
    if (v81)
      v35 = 0x10000;
    else
      v35 = 0;
    sub_1CCA03D9C(v34 | v35 | (v83 << 24), (uint64_t)v30, v27, v29, isUniquelyReferenced_nonNull_native, v50);
    v24 = v85;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = ((uint64_t (*)(char *, uint64_t))v26)(v8, v2);
    v14 = v73;
    v3 = v74;
    v22 = v79;
  }
  v43 = *(_QWORD *)(v64 + 8 * v44);
  if (v43)
  {
LABEL_24:
    v42 = v44;
LABEL_21:
    v79 = (v43 - 1) & v43;
    v36 = __clz(__rbit64(v43)) + (v42 << 6);
    v75 = v42;
    goto LABEL_17;
  }
  while (1)
  {
    v42 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v42 >= v65)
    {
      v75 = v62;
      goto LABEL_35;
    }
    v43 = *(_QWORD *)(v64 + 8 * v42);
    ++v44;
    if (v43)
      goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CC9D4204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t ObjectType;
  _QWORD v19[2];
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1CCB63868();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63820();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v10 = sub_1CCB637FC();
  sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
  v11 = sub_1CCB637D8();
  v12 = sub_1CCB63D48();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPManager: didInitialize", v13, 2u);
    MEMORY[0x1D17B214C](v13, -1, -1);
  }

  sub_1CCB63814();
  aBlock[4] = sub_1CCA23680;
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F8A10;
  v14 = _Block_copy(aBlock);
  swift_retain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v5, v9, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  v15 = v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_siriDelegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v15);
  if (result)
  {
    v17 = *(_QWORD *)(v15 + 8);
    ObjectType = swift_getObjectType();
    sub_1CCA14E90(&qword_1ED8A7E80);
    sub_1CCB63D9C();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 8))(v1, v19[1], ObjectType, v17);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1CC9D44A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  id v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD v15[6];

  if (qword_1ED8AA630 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD7F8);
  v7 = sub_1CCB637D8();
  v8 = sub_1CCB63D48();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1CC9BF000, v7, v8, "FMIPBeaconRefreshingController: Calling SPOwnerSession - unknownBeacons", v9, 2u);
    MEMORY[0x1D17B214C](v9, -1, -1);
  }

  v10 = *(void **)(a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession);
  sub_1CCB63604();
  v11 = v10;
  v12 = (void *)sub_1CCB63B20();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  v15[4] = sub_1CCA20CCC;
  v15[5] = v13;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = sub_1CC9C3178;
  v15[3] = &unk_1E89011F0;
  v14 = _Block_copy(v15);
  swift_retain();
  sub_1CC9DF994(a2);
  swift_release();
  objc_msgSend(v11, sel_unknownBeaconsForUUIDs_completion_, v12, v14);
  _Block_release(v14);

}

uint64_t sub_1CC9D4670()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1CCB6376C();
  if (v1 <= 0x3F)
  {
    result = sub_1CCB63790();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CC9D46F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint8_t *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = sub_1CCB63868();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63820();
  v9 = *(_QWORD *)(v8 - 8);
  result = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration)
                 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems) & 2) != 0)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v13 = sub_1CCB637FC();
    sub_1CCA16C20(v13, (uint64_t)qword_1ED8AD7F8);
    v14 = sub_1CCB637D8();
    v15 = sub_1CCB63D48();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v24 = v5;
      v17 = v4;
      v18 = a1;
      v19 = v16;
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1CC9BF000, v14, v15, "FMIPManager: dataManager updated items", v16, 2u);
      v20 = v19;
      a1 = v18;
      v4 = v17;
      v5 = v24;
      MEMORY[0x1D17B214C](v20, -1, -1);
    }

    sub_1CCB63814();
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = a1;
    *(_QWORD *)(v21 + 24) = v2;
    aBlock[4] = sub_1CCA24300;
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA00C38;
    aBlock[3] = &unk_1E88F7F08;
    v22 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    sub_1CCB63844();
    MEMORY[0x1D17B1318](0, v7, v12, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return swift_release();
  }
  return result;
}

uint64_t sub_1CC9D495C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint8_t *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = sub_1CCB63868();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63820();
  v9 = *(_QWORD *)(v8 - 8);
  result = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration)
                 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems) & 1) != 0)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v13 = sub_1CCB637FC();
    sub_1CCA16C20(v13, (uint64_t)qword_1ED8AD7F8);
    v14 = sub_1CCB637D8();
    v15 = sub_1CCB63D48();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v24 = v5;
      v17 = v4;
      v18 = a1;
      v19 = v16;
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1CC9BF000, v14, v15, "FMIPManager: didReceive offline finding device states.", v16, 2u);
      v20 = v19;
      a1 = v18;
      v4 = v17;
      v5 = v24;
      MEMORY[0x1D17B214C](v20, -1, -1);
    }

    sub_1CCB63814();
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = a1;
    *(_QWORD *)(v21 + 24) = v2;
    aBlock[4] = sub_1CCA241C4;
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA00C38;
    aBlock[3] = &unk_1E88F7D78;
    v22 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1CCB63844();
    MEMORY[0x1D17B1318](0, v7, v12, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return swift_release();
  }
  return result;
}

uint64_t sub_1CC9D4BC4()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_publicAPSToken);
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_publicAPSToken + 8))
  {
    swift_bridgeObjectRetain();
    v2 = (void *)sub_1CCB63964();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = 0;
  }
  v3 = (void *)objc_opt_self();
  v4 = (void *)sub_1CCB63964();
  v5 = (void *)sub_1CCB63964();
  objc_msgSend(v3, sel_setString_forKey_inDomain_, v2, v4, v5);

  v6 = v0 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v6);
  if (result)
  {
    v8 = *(_QWORD *)(v6 + 8);
    ObjectType = swift_getObjectType();
    v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_topicAPSToken);
    v11 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_topicAPSToken + 8);
    v12 = *v1;
    v13 = v1[1];
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v0, v10, v11, v12, v13, ObjectType, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CC9D4D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint8_t *v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[6];

  v32 = a2;
  v33 = a3;
  v6 = v4;
  v8 = sub_1CCB63820();
  v34 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB63868();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v15 = sub_1CCB637FC();
  sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD7F8);
  v16 = sub_1CCB637D8();
  v17 = sub_1CCB63D48();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v31 = v10;
    v19 = v6;
    v20 = v8;
    v21 = a1;
    v22 = v12;
    v23 = v11;
    v24 = a4;
    v25 = v18;
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1CC9BF000, v16, v17, "FMDiskIO: save to disk", v18, 2u);
    v26 = v25;
    a4 = v24;
    v11 = v23;
    v12 = v22;
    a1 = v21;
    v8 = v20;
    v6 = v19;
    v10 = v31;
    MEMORY[0x1D17B214C](v26, -1, -1);
  }

  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v6;
  *(_QWORD *)(v27 + 24) = a1;
  aBlock[4] = v33;
  aBlock[5] = v27;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = a4;
  v28 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CCB63844();
  v35 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v14, v10, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void sub_1CC9D5030(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  char v16;
  char v17;
  os_log_type_t v18;
  uint8_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  char v27;
  NSObject *v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  void (*v42)(uint64_t *, _QWORD);
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58[4];
  _QWORD v59[44];
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;

  v56 = a2;
  v5 = sub_1CCB63820();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCB63868();
  v54 = *(_QWORD *)(v9 - 8);
  v55 = v9;
  MEMORY[0x1E0C80A78](v9);
  v53 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v11 = sub_1CCB637FC();
  sub_1CCA16C20(v11, (uint64_t)qword_1ED8AD7F8);
  v12 = sub_1CCB637D8();
  v13 = sub_1CCB63D48();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1CC9BF000, v12, v13, "FMIPSafeLocationRefreshingController: Processing safe locations update", v14, 2u);
    MEMORY[0x1D17B214C](v14, -1, -1);
  }

  if ((a1 & 1) == 0)
  {
    v15 = swift_bridgeObjectRetain();
    sub_1CCA1FA40(v15, a3);
    v17 = v16;
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
    {
      v57 = sub_1CCB637D8();
      v18 = sub_1CCB63D48();
      if (os_log_type_enabled(v57, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_1CC9BF000, v57, v18, "FMIPSafeLocationRefreshingController: No changes detected, bailing.", v19, 2u);
        MEMORY[0x1D17B214C](v19, -1, -1);
      }

      return;
    }
  }
  v50 = v8;
  v51 = v6;
  v52 = v5;
  *(_QWORD *)(v56 + 32) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = a3 & 0xC000000000000001;
  if ((a3 & 0xC000000000000001) != 0)
    v21 = sub_1CCB63EF8();
  else
    v21 = *(_QWORD *)(a3 + 16);
  v22 = MEMORY[0x1E0DEE9D8];
  if (!v21)
  {
    v26 = MEMORY[0x1E0DEE9D8];
    goto LABEL_35;
  }
  v63 = MEMORY[0x1E0DEE9D8];
  sub_1CCA63960(0, v21 & ~(v21 >> 63), 0);
  if (v20)
  {
    v23 = sub_1CCB63EBC();
    v25 = 1;
  }
  else
  {
    v23 = sub_1CCB49314(a3);
    v25 = v27 & 1;
  }
  v60 = v23;
  v61 = v24;
  v62 = v25;
  if (v21 < 0)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    return;
  }
  v28 = (a3 & 0xFFFFFFFFFFFFFF8);
  if (a3 < 0)
    v28 = a3;
  v57 = v28;
  for (i = v21 - 1; ; --i)
  {
    v30 = v60;
    v31 = v61;
    v32 = v62;
    sub_1CCB490A0(v60, v61, v62, a3);
    FMIPSafeLocation.init(safeLocation:)(v33, v59);
    v34 = v63;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1CCA63960(0, *(_QWORD *)(v34 + 16) + 1, 1);
      v34 = v63;
    }
    v36 = *(_QWORD *)(v34 + 16);
    v35 = *(_QWORD *)(v34 + 24);
    if (v36 >= v35 >> 1)
    {
      sub_1CCA63960(v35 > 1, v36 + 1, 1);
      v34 = v63;
    }
    *(_QWORD *)(v34 + 16) = v36 + 1;
    memcpy((void *)(v34 + 352 * v36 + 32), v59, 0x160uLL);
    if (v20)
      break;
    v37 = sub_1CCB48FB8(v30, v31, v32, a3);
    v39 = v38;
    v41 = v40;
    sub_1CCA58DB4(v30, v31, v32);
    v60 = v37;
    v61 = v39;
    v62 = v41 & 1;
    if (!i)
      goto LABEL_34;
LABEL_33:
    ;
  }
  if ((v32 & 1) == 0)
    goto LABEL_37;
  if (sub_1CCB63ED4())
    swift_isUniquelyReferenced_nonNull_native();
  sub_1CCA14E90(&qword_1EF9E0588);
  v42 = (void (*)(uint64_t *, _QWORD))sub_1CCB63C70();
  sub_1CCB63F40();
  v42(v58, 0);
  if (i)
    goto LABEL_33;
LABEL_34:
  sub_1CCA58DB4(v60, v61, v62);
  v26 = v63;
  v22 = MEMORY[0x1E0DEE9D8];
LABEL_35:
  v43 = v56;
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = v43;
  *(_QWORD *)(v44 + 24) = v26;
  v59[4] = sub_1CCA58DEC;
  v59[5] = v44;
  v59[0] = MEMORY[0x1E0C809B0];
  v59[1] = 1107296256;
  v59[2] = sub_1CCA00C38;
  v59[3] = &unk_1E88F4098;
  v45 = _Block_copy(v59);
  swift_retain();
  v46 = v53;
  sub_1CCB63844();
  v58[0] = v22;
  sub_1CCA248D4();
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA1FC64();
  v47 = v50;
  v48 = v52;
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v46, v47, v45);
  _Block_release(v45);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v48);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v46, v55);
  swift_release();
}

uint64_t sub_1CC9D5590(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint8_t *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  void *v31;
  uint64_t v33;
  char *v34;
  _QWORD aBlock[6];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v6 = sub_1CCB63868();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB63820();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v38 = a1[2];
  v39 = v14;
  v40 = a1[4];
  v41 = *((_QWORD *)a1 + 10);
  v15 = a1[1];
  v36 = *a1;
  v37 = v15;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v16 = sub_1CCB637FC();
  sub_1CCA16C20(v16, (uint64_t)qword_1ED8AD7F8);
  v17 = sub_1CCB637D8();
  v18 = sub_1CCB63D48();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v34 = v9;
    v20 = v3;
    v21 = a2;
    v22 = v11;
    v23 = v10;
    v24 = v7;
    v25 = v6;
    v26 = v19;
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1CC9BF000, v17, v18, "FMIPManager: didReceiveUserInfos", v19, 2u);
    v27 = v26;
    v6 = v25;
    v7 = v24;
    v10 = v23;
    v11 = v22;
    a2 = v21;
    v3 = v20;
    v9 = v34;
    MEMORY[0x1D17B214C](v27, -1, -1);
  }

  sub_1CCB63814();
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v3;
  *(_QWORD *)(v28 + 24) = a2;
  v29 = v39;
  *(_OWORD *)(v28 + 64) = v38;
  *(_OWORD *)(v28 + 80) = v29;
  *(_OWORD *)(v28 + 96) = v40;
  *(_QWORD *)(v28 + 112) = v41;
  v30 = v37;
  *(_OWORD *)(v28 + 32) = v36;
  *(_OWORD *)(v28 + 48) = v30;
  aBlock[4] = sub_1CCA24214;
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F8718;
  v31 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1CC9DA35C((uint64_t)&v36);
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v9, v13, v31);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_1CC9D5844(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  _QWORD **v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v2 = v1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v4 = sub_1CCB637FC();
  sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v5 = sub_1CCB637D8();
  v6 = sub_1CCB63D48();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v7 = 138412290;
    v15 = sub_1CCB638C8();
    sub_1CCB63E44();
    *v8 = v15;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPRefreshingController: connectionHandler didReceive message: %@", v7, 0xCu);
    sub_1CCA14E90(&qword_1ED8A8E00);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v8, -1, -1);
    MEMORY[0x1D17B214C](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v9 = (_QWORD **)(v2 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_tapContexts);
  swift_beginAccess();
  v10 = *v9;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v9 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = sub_1CCA1F970(0, v10[2] + 1, 1, v10);
    *v9 = v10;
  }
  v13 = v10[2];
  v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    v10 = sub_1CCA1F970((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    *v9 = v10;
  }
  v10[2] = v13 + 1;
  v10[v13 + 4] = a1;
  swift_endAccess();
  return sub_1CC9DD8B0(0.0);
}

uint64_t sub_1CC9D5AA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v2 = v1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v4 = sub_1CCB637FC();
  sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain_n();
  v5 = sub_1CCB637D8();
  v6 = sub_1CCB63D48();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v14 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = sub_1CCB638F8();
    sub_1CCA0CB60(v9, v10, &v14);
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPManager: didReceive beacon locations %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v8, -1, -1);
    MEMORY[0x1D17B214C](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_retain();
  v11 = sub_1CCA96DBC(a1);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a1;
  v12[3] = sub_1CCA24174;
  v12[4] = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CCA1B400(v11, (uint64_t)sub_1CCA03B14, (uint64_t)v12);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1CC9D5CEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  sub_1CCA14E90((uint64_t *)&unk_1EF9E2A60);
  sub_1CCB63D9C();
  v2 = a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  if (MEMORY[0x1D17B2218](v2))
  {
    v3 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    sub_1CCA14E90(&qword_1ED8A7E80);
    sub_1CCB63D9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 32))(a1, v10, ObjectType, v3);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  if (MEMORY[0x1D17B2218](v2))
  {
    v5 = *(_QWORD *)(v2 + 8);
    v6 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 112))(a1, v11, v6, v5);
    swift_unknownObjectRelease();
  }
  if (MEMORY[0x1D17B2218](v2))
  {
    v7 = *(_QWORD *)(v2 + 8);
    v8 = swift_getObjectType();
    sub_1CCA14E90(&qword_1EF9E2A30);
    sub_1CCB63D9C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 152))(a1, v10, v8, v7);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemCounts) = v11;
  swift_bridgeObjectRelease();
  return sub_1CCA982F0();
}

uint64_t sub_1CC9D5EC8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(_QWORD, uint64_t (*)(uint64_t, void *), uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  int v48;
  char *v49;

  v48 = a2;
  v3 = sub_1CCA14E90(&qword_1ED8A7130);
  v4 = MEMORY[0x1E0C80A78](v3);
  v45 = (_QWORD *)((char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v40 - v6;
  v8 = sub_1CCA14E90(&qword_1ED8A7170);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_1CCB635B0();
  v41 = *(_QWORD *)(v43 - 8);
  v47 = *(_QWORD *)(v41 + 64);
  v11 = MEMORY[0x1E0C80A78](v43);
  v46 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v49 = (char *)&v40 - v13;
  sub_1CCB635A4();
  v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_tapContexts);
  swift_beginAccess();
  v15 = *v14;
  v16 = a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_selectedDevice;
  swift_beginAccess();
  sub_1CC9EAB74(v16, (uint64_t)v10, &qword_1ED8A7170);
  v42 = *(_OWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_itemCounts);
  v40 = *(_OWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_itemCounts + 16);
  v18 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_itemCounts + 32);
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_itemCounts + 40);
  v19 = *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_itemCounts + 48);
  type metadata accessor for FMIPRefreshClientRequest();
  v20 = swift_allocObject();
  sub_1CC9EAB74((uint64_t)v10, v20 + qword_1ED8AD600, &qword_1ED8A7170);
  v44 = v15;
  *(_QWORD *)(v20 + qword_1ED8AD5F8) = v15;
  *(_QWORD *)(v20 + qword_1ED8AD608) = 0;
  v21 = v20 + qword_1EF9FF800;
  v22 = v40;
  *(_OWORD *)v21 = v42;
  *(_OWORD *)(v21 + 16) = v22;
  *(_QWORD *)(v21 + 32) = v18;
  *(_QWORD *)(v21 + 40) = v17;
  *(_BYTE *)(v21 + 48) = v19;
  swift_bridgeObjectRetain_n();
  *(_QWORD *)&v42 = sub_1CCA601C8(0x4368736572666572, 0xED0000746E65696CLL, 0, 0, 1);
  sub_1CC9C3E84((uint64_t)v10, &qword_1ED8A7170);
  v23 = v41;
  v24 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
  v25 = v49;
  v26 = v43;
  v24(v7, v49, v43);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v7, 0, 1, v26);
  v27 = v45;
  sub_1CC9C3EC0((uint64_t)v7, (uint64_t)v45, &qword_1ED8A7130);
  v28 = a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_lastRefreshTime;
  swift_beginAccess();
  sub_1CCA249AC((uint64_t)v27, v28);
  swift_endAccess();
  v29 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_interactionController + 24);
  v30 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_interactionController + 32);
  v45 = sub_1CCA04DDC((_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_interactionController), v29);
  v31 = swift_allocObject();
  swift_weakInit();
  v32 = v46;
  v24(v46, v25, v26);
  v33 = (*(unsigned __int8 *)(v23 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v34 = (v47 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = v31;
  (*(void (**)(unint64_t, char *, uint64_t))(v23 + 32))(v35 + v33, v32, v26);
  v36 = v35 + v34;
  *(_QWORD *)v36 = v44;
  *(_BYTE *)(v36 + 8) = v48;
  v37 = *(void (**)(_QWORD, uint64_t (*)(uint64_t, void *), uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56);
  v38 = type metadata accessor for FMIPRefreshClientResponse();
  v37(v42, sub_1CCB15E08, v35, v38, v29, v30);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v49, v26);
}

uint64_t sub_1CC9D62E8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[6];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _QWORD v46[6];

  if (*(_BYTE *)(v1 + 24) != 1)
    return 0;
  v2 = v1;
  v3 = *a1;
  if ((*a1 & 1) != 0)
  {
    if (!*(_QWORD *)(v1 + 328))
      return 0;
    swift_retain();
    v8 = sub_1CC9CB308();
    swift_release();
    if (!v8)
      return 0;
    LOBYTE(v40) = 16;
    v9 = sub_1CCA08A6C(v8, (char *)&v40);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(_QWORD *)(v2 + 80) = v9;
    swift_bridgeObjectRelease();
    v10 = *(_QWORD *)(v2 + 344);
    if (v10)
    {
      v45 = 0;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v40 = 0u;
      v11 = *(NSObject **)(v10 + 16);
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = v10;
      *(_QWORD *)(v12 + 24) = &v40;
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 16) = sub_1CCA20878;
      *(_QWORD *)(v13 + 24) = v12;
      aBlock[4] = sub_1CC9F4530;
      aBlock[5] = v13;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1CC9F44AC;
      aBlock[3] = &unk_1E88F9340;
      v14 = _Block_copy(aBlock);
      swift_retain_n();
      swift_retain();
      swift_release();
      dispatch_sync(v11, v14);
      _Block_release(v14);
      LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
      result = swift_release();
      if ((v11 & 1) != 0)
      {
        __break(1u);
        return result;
      }
      v16 = v40;
      v17 = v41;
      v18 = v42;
      v35 = *((_QWORD *)&v43 + 1);
      v37 = v43;
      v33 = *((_QWORD *)&v44 + 1);
      v34 = v44;
      v32 = v45;
      swift_release();
      swift_release();
      if (*((_QWORD *)&v16 + 1))
      {
        v19 = *(_QWORD *)(v2 + 88);
        v20 = *(_QWORD *)(v2 + 96);
        *(_OWORD *)(v2 + 88) = v16;
        *(_OWORD *)(v2 + 104) = v17;
        *(_OWORD *)(v2 + 120) = v18;
        *(_QWORD *)(v2 + 136) = v37;
        *(_QWORD *)(v2 + 144) = v35;
        *(_QWORD *)(v2 + 152) = v34;
        *(_QWORD *)(v2 + 160) = v33;
        *(_QWORD *)(v2 + 168) = v32;
        sub_1CCA24588(v19, v20);
      }
    }
    if (*(_QWORD *)(v2 + 336))
    {
      swift_retain();
      v21 = sub_1CC9CB050();
      swift_release();
      if (v21)
      {
        *(_QWORD *)(v2 + 176) = v21;
        swift_bridgeObjectRelease();
      }
    }
  }
  if ((v3 & 2) != 0)
  {
    if (*(_QWORD *)(v2 + 312))
    {
      swift_retain();
      v4 = sub_1CC9CA178();
      swift_release();
      if (v4)
      {
        LOBYTE(v40) = 16;
        v5 = sub_1CCAB7E34(v4, (unsigned __int8 *)&v40);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        *(_QWORD *)(v2 + 280) = v5;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_1CCAADA90(v5);
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    return 0;
  }
LABEL_7:
  if ((v3 & 3) != 0)
  {
    if (*(_QWORD *)(v2 + 320))
    {
      swift_retain();
      v6 = sub_1CCAB5C54();
      if (v6)
      {
        v7 = v6;
      }
      else
      {
        v7 = MEMORY[0x1E0DEE9D8];
        sub_1CC9D4D5C(MEMORY[0x1E0DEE9D8], (uint64_t)&unk_1E88F9170, (uint64_t)sub_1CCABB504, (uint64_t)&unk_1E88F9188);
      }
      swift_release();
      *(_QWORD *)(v2 + 288) = v7;
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v2 + 352))
    {
      v22 = qword_1EF9DEFC0;
      swift_retain();
      if (v22 != -1)
        swift_once();
      v40 = xmmword_1EF9E28F0;
      v41 = *(_OWORD *)&qword_1EF9E2900;
      v23 = qword_1EF9E2910;
      *(_QWORD *)&v42 = qword_1EF9E2910;
      v25 = *((_QWORD *)&xmmword_1EF9E28F0 + 1);
      v24 = xmmword_1EF9E28F0;
      v27 = unk_1EF9E2908;
      v26 = qword_1EF9E2900;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CCAB5AF0((uint64_t)v46);
      v28 = v46[0];
      v29 = v46[1];
      v30 = v46[2];
      v36 = v46[4];
      v38 = v46[3];
      sub_1CC9C3EC0((uint64_t)v46, (uint64_t)aBlock, &qword_1EF9E2AD8);
      if (aBlock[0])
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        v24 = v28;
        v25 = v29;
        v26 = v30;
        v23 = v36;
        v27 = v38;
      }
      else
      {
        sub_1CCAB2D04(&v40);
        swift_release();
      }
      *(_QWORD *)(v2 + 240) = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v2 + 248) = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v2 + 256) = v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v2 + 264) = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v2 + 272) = v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v31 = swift_bridgeObjectRetain();
    sub_1CCAAE6B0(v31);
    swift_bridgeObjectRelease();
  }
  return 1;
}

_QWORD *sub_1CC9D688C(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  void (*v10)(char *, _QWORD, uint64_t);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v3 = v2;
  v21 = a2;
  v22 = a1;
  v20 = sub_1CCB63D84();
  v4 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63D6C();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v7);
  v9 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v9);
  v2[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D898D8]), sel_init);
  v2[5] = 0;
  sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A8E30);
  sub_1CCB63844();
  v23 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, v8, MEMORY[0x1E0DEF828]);
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  v10 = *(void (**)(char *, _QWORD, uint64_t))(v4 + 104);
  v11 = v21;
  v10(v6, *MEMORY[0x1E0DEF8D0], v20);
  v2[6] = sub_1CCB63DB4();
  v2[7] = MEMORY[0x1E0DEE9D8];
  v12 = v22;
  v2[3] = v22;
  v2[4] = v11;
  v13 = qword_1ED8AA630;
  v14 = v12;
  swift_retain();
  if (v13 != -1)
    swift_once();
  v15 = sub_1CCB637FC();
  sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD7F8);
  v16 = sub_1CCB637D8();
  v17 = sub_1CCB63D48();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1CC9BF000, v16, v17, "FMIPItemActionsController: initialized", v18, 2u);
    MEMORY[0x1D17B214C](v18, -1, -1);
  }

  swift_release();
  return v3;
}

uint64_t sub_1CC9D6B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint8_t *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = sub_1CCB63868();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB63820();
  result = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration)
                 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems) & 1) != 0)
  {
    v27 = v12;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v15 = sub_1CCB637FC();
    sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD7F8);
    v16 = sub_1CCB637D8();
    v17 = sub_1CCB63D48();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v26 = v10;
      v19 = v7;
      v20 = v6;
      v21 = a1;
      v22 = v18;
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1CC9BF000, v16, v17, "FMIPManager: dataManager updated device", v18, 2u);
      v23 = v22;
      a1 = v21;
      v6 = v20;
      v7 = v19;
      v10 = v26;
      MEMORY[0x1D17B214C](v23, -1, -1);
    }

    sub_1CCB63814();
    v24 = (_QWORD *)swift_allocObject();
    v24[2] = v3;
    v24[3] = a2;
    v24[4] = a1;
    aBlock[4] = sub_1CCA24308;
    aBlock[5] = v24;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA00C38;
    aBlock[3] = &unk_1E88F7E90;
    v25 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1CCB63844();
    MEMORY[0x1D17B1318](0, v9, v14, v25);
    _Block_release(v25);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v10);
    return swift_release();
  }
  return result;
}

void sub_1CC9D6DE4(uint64_t a1, id a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, _QWORD, _QWORD, id);
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[4];
  char v57;

  v3 = v2;
  if (a2)
  {
    v6 = a2;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v7 = sub_1CCB637FC();
    sub_1CCA16C20(v7, (uint64_t)qword_1ED8AD7F8);
    v8 = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    v10 = sub_1CCB637D8();
    v11 = sub_1CCB63D48();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      *(_DWORD *)v12 = 136446722;
      v56[0] = v13;
      sub_1CCA14E90(&qword_1EF9E2878);
      v14 = sub_1CCB639AC();
      sub_1CCA0CB60(v14, v15, v56);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2048;
      swift_bridgeObjectRelease();
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 22) = 2080;
      swift_getErrorValue();
      v16 = sub_1CCB64300();
      sub_1CCA0CB60(v16, v17, v56);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v10, v11, "%{public}s: received %ld items (error=%s)", (uint8_t *)v12, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v13, -1, -1);
      MEMORY[0x1D17B214C](v12, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();

    }
    v31 = *(_QWORD *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration)
                    + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_snapshotHandlers);
    if (v31)
    {
      v32 = *(void (**)(uint64_t, _QWORD, _QWORD, id))(v31 + 64);
      if (v32)
      {
        v33 = a2;
        sub_1CC9DF994((uint64_t)v32);
        v32(v2, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], a2);

        sub_1CCA203A8((uint64_t)v32);
      }
    }

    return;
  }
  v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration);
  v19 = OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_snapshotHandlers;
  v20 = *(_QWORD *)(v18 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_snapshotHandlers);
  if (v20)
  {
    v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 48);
    if (v21)
    {
      swift_retain();
      v22 = v21(v2, a1);
      v23 = sub_1CCA97564(v22);
      swift_bridgeObjectRelease();
      v24 = sub_1CCA96FB4(v23);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v24 + 16))
      {
        if (qword_1ED8AA630 != -1)
          swift_once();
        v25 = sub_1CCB637FC();
        sub_1CCA16C20(v25, (uint64_t)qword_1ED8AD7F8);
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v26 = sub_1CCB637D8();
        v27 = sub_1CCB63D48();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = swift_slowAlloc();
          v54 = swift_slowAlloc();
          *(_DWORD *)v28 = 136446722;
          v56[0] = v54;
          sub_1CCA14E90(&qword_1EF9E2878);
          v29 = sub_1CCB639AC();
          sub_1CCA0CB60(v29, v30, v56);
          sub_1CCB63E44();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v28 + 12) = 2048;
          swift_bridgeObjectRelease();
          sub_1CCB63E44();
          swift_bridgeObjectRelease();
          *(_WORD *)(v28 + 22) = 2048;
          swift_bridgeObjectRelease();
          sub_1CCB63E44();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1CC9BF000, v26, v27, "🥑 %{public}s: received %ld items but asking for %ld locations…", (uint8_t *)v28, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x1D17B214C](v54, -1, -1);
          MEMORY[0x1D17B214C](v28, -1, -1);

        }
        else
        {

          swift_release_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        swift_retain();
        v52 = sub_1CCA7A88C(v24);
        swift_bridgeObjectRelease();
        v53 = sub_1CCA20394(MEMORY[0x1E0DEE9D8]);
        LOBYTE(v56[0]) = 1;
        v56[1] = 2;
        v56[2] = v52;
        v56[3] = v53;
        v57 = 1;
        sub_1CCB44614((uint64_t)v56);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_34;
      }
      swift_bridgeObjectRelease();
      if (qword_1ED8AA630 != -1)
        swift_once();
      v44 = sub_1CCB637FC();
      sub_1CCA16C20(v44, (uint64_t)qword_1ED8AD7F8);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      v45 = sub_1CCB637D8();
      v46 = sub_1CCB63D48();
      if (os_log_type_enabled(v45, v46))
      {
        v47 = swift_slowAlloc();
        v55 = v18;
        v48 = swift_slowAlloc();
        *(_DWORD *)v47 = 136446466;
        v56[0] = v48;
        sub_1CCA14E90(&qword_1EF9E2878);
        v49 = sub_1CCB639AC();
        sub_1CCA0CB60(v49, v50, v56);
        sub_1CCB63E44();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v47 + 12) = 2048;
        swift_bridgeObjectRelease();
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v45, v46, "%{public}s: received %ld items but no location asked", (uint8_t *)v47, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v48, -1, -1);
        MEMORY[0x1D17B214C](v47, -1, -1);

        v51 = *(_QWORD *)(v55 + v19);
        if (!v51)
          goto LABEL_34;
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
        v51 = *(_QWORD *)(v18 + v19);
        if (!v51)
          goto LABEL_34;
      }
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v51 + 64);
      if (v42)
      {
        swift_retain();
        v42(v3, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0);
        sub_1CCA203A8((uint64_t)v21);
        goto LABEL_26;
      }
LABEL_34:
      v43 = (uint64_t)v21;
      goto LABEL_35;
    }
  }
  if (qword_1ED8AA630 != -1)
    swift_once();
  v34 = sub_1CCB637FC();
  sub_1CCA16C20(v34, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v35 = sub_1CCB637D8();
  v36 = sub_1CCB63D48();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc();
    v38 = swift_slowAlloc();
    *(_DWORD *)v37 = 136446466;
    v56[0] = v38;
    sub_1CCA14E90(&qword_1EF9E2878);
    v39 = sub_1CCB639AC();
    sub_1CCA0CB60(v39, v40, v56);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2048;
    swift_bridgeObjectRelease();
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v35, v36, "%{public}s: received %ld items", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v38, -1, -1);
    MEMORY[0x1D17B214C](v37, -1, -1);

    v41 = *(_QWORD *)(v18 + v19);
    if (!v41)
      return;
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
    v41 = *(_QWORD *)(v18 + v19);
    if (!v41)
      return;
  }
  v42 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v41 + 64);
  if (v42)
  {
    swift_retain();
    v42(v3, a1, a1, 0);
LABEL_26:
    v43 = (uint64_t)v42;
LABEL_35:
    sub_1CCA203A8(v43);
  }
}

uint64_t sub_1CC9D784C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint8_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v28;
  char *v29;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = sub_1CCB63868();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63820();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v12 = sub_1CCB637FC();
  sub_1CCA16C20(v12, (uint64_t)qword_1ED8AD7F8);
  v13 = sub_1CCB637D8();
  v14 = sub_1CCB63D48();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v29 = v7;
    v16 = v9;
    v17 = v8;
    v18 = v5;
    v19 = a1;
    v20 = v4;
    v21 = v15;
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1CC9BF000, v13, v14, "FMIPManager: didReceiveDevices", v15, 2u);
    v22 = v21;
    v4 = v20;
    a1 = v19;
    v5 = v18;
    v8 = v17;
    v9 = v16;
    v7 = v29;
    MEMORY[0x1D17B214C](v22, -1, -1);
  }

  if (*(_QWORD *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_connectionStateProvider) + 16))
    v23 = *(_QWORD **)(*(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_connectionStateProvider) + 16);
  else
    v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v24 = sub_1CCA0B7C0(a1, v23);
  swift_bridgeObjectRelease();
  sub_1CCB63814();
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v2;
  *(_QWORD *)(v25 + 24) = v24;
  aBlock[4] = sub_1CCA241DC;
  aBlock[5] = v25;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F8880;
  v26 = _Block_copy(aBlock);
  swift_retain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v7, v11, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

uint64_t sub_1CC9D7AE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;

  v1 = v0;
  *(_QWORD *)(v0 + 16) = 0xD00000000000001FLL;
  *(_QWORD *)(v0 + 24) = 0x80000001CCB7BF70;
  *(_QWORD *)(v0 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C8F2B8]), sel_init);
  *(_BYTE *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  swift_unknownObjectWeakInit();
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA620);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1CCB677E0;
  if (qword_1ED8A8C48 != -1)
    swift_once();
  v3 = *(_QWORD *)algn_1ED8AD798;
  *(_QWORD *)(v2 + 32) = qword_1ED8AD790;
  *(_QWORD *)(v2 + 40) = v3;
  *(_QWORD *)(v1 + 80) = v2;
  v4 = qword_1ED8AA630;
  swift_bridgeObjectRetain();
  if (v4 != -1)
    swift_once();
  v5 = sub_1CCB637FC();
  sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
  v6 = sub_1CCB637D8();
  v7 = sub_1CCB63D48();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1CC9BF000, v6, v7, "FMIPGarbageCollector: initialized", v8, 2u);
    MEMORY[0x1D17B214C](v8, -1, -1);
  }

  sub_1CC9E6BE8();
  v9 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v9, sel_addObserver_selector_name_object_, v1, sel_scheduleAccountVerificationWithNotification_, *MEMORY[0x1E0C8F010], 0);

  return v1;
}

uint64_t sub_1CC9D7CC4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t result;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t i;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[5];
  _QWORD v76[4];
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;

  v59 = sub_1CCA14E90(&qword_1ED8A7F90);
  v58 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v4 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v5 = sub_1CCB637FC();
  sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
  v6 = sub_1CCB637D8();
  v7 = sub_1CCB63D48();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1CC9BF000, v6, v7, "FMIPUserInfoResponseFragment: initialized with coder", v8, 2u);
    MEMORY[0x1D17B214C](v8, -1, -1);
  }

  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA21030();
  sub_1CCB643B4();
  if (v1)
  {
    v62 = v1;
    type metadata accessor for FMIPUserInfoResponseFragment();
    v9 = v66;
    swift_deallocPartialClassInstance();
LABEL_8:
    sub_1CCA01CA0((uint64_t)a1);
    return v9;
  }
  sub_1CC9EBC94((uint64_t)a1, (uint64_t)v75);
  FMIPPerson.init(from:)(v75, (uint64_t)v76);
  v57 = v76[0];
  v56 = v76[1];
  v55 = v76[2];
  v54 = v76[3];
  v53 = v77;
  v52 = v78;
  v51 = v79;
  v50 = v80;
  v49 = v81;
  v48 = v82;
  v47 = v83;
  v46 = v84;
  v45 = v85;
  v44 = v86;
  v11 = sub_1CCB637D8();
  v12 = sub_1CCB63D48();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPUserInfoResponseFragment: parsing family members", v13, 2u);
    MEMORY[0x1D17B214C](v13, -1, -1);
  }

  sub_1CCA14E90(&qword_1ED8A7E68);
  sub_1CCA1FDF0();
  result = sub_1CCB64180();
  v62 = 0;
  v14 = 0;
  v15 = *(_QWORD *)(v76[0] + 64);
  v60 = v76[0] + 64;
  v65 = v76[0];
  v16 = 1 << *(_BYTE *)(v76[0] + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v61 = (unint64_t)(v16 + 63) >> 6;
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v64 = a1;
  v63 = v4;
  if ((v17 & v15) == 0)
    goto LABEL_15;
LABEL_14:
  v20 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  v87 = v14;
  for (i = v20 | (v14 << 6); ; i = __clz(__rbit64(v23)) + (v24 << 6))
  {
    v26 = *(_QWORD *)(v65 + 56);
    v27 = (uint64_t *)(*(_QWORD *)(v65 + 48) + 16 * i);
    v28 = v27[1];
    v74 = *v27;
    v29 = (uint64_t *)(v26 + 88 * i);
    v30 = *v29;
    v31 = v29[1];
    v32 = v29[3];
    v72 = v29[2];
    LODWORD(v26) = *((unsigned __int8 *)v29 + 32);
    v70 = *((unsigned __int8 *)v29 + 33);
    v71 = v26;
    LODWORD(v26) = *((unsigned __int8 *)v29 + 34);
    v68 = *((unsigned __int8 *)v29 + 35);
    v69 = v26;
    v33 = v29[6];
    v67 = v29[5];
    v34 = v29[10];
    v73 = v29[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1CCACA2B0(0, v19[2] + 1, 1, v19);
      v19 = (_QWORD *)result;
    }
    v36 = v19[2];
    v35 = v19[3];
    v37 = v19;
    if (v36 >= v35 >> 1)
    {
      result = (uint64_t)sub_1CCACA2B0((_QWORD *)(v35 > 1), v36 + 1, 1, v19);
      v37 = (_QWORD *)result;
    }
    v37[2] = v36 + 1;
    v19 = v37;
    v38 = &v37[11 * v36];
    v38[4] = v30;
    v38[5] = v31;
    v38[6] = v72;
    v38[7] = v32;
    *((_BYTE *)v38 + 64) = v71;
    *((_BYTE *)v38 + 65) = v70;
    *((_BYTE *)v38 + 66) = v69;
    *((_BYTE *)v38 + 67) = v68;
    v38[9] = v67;
    v38[10] = v33;
    v38[11] = v74;
    v38[12] = v28;
    v38[13] = v73;
    v38[14] = v34;
    a1 = v64;
    v4 = v63;
    v14 = v87;
    if (v18)
      goto LABEL_14;
LABEL_15:
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v22 >= v61)
    {
      swift_release();
      v9 = v66;
LABEL_37:
      (*(void (**)(char *, uint64_t))(v58 + 8))(v4, v59);
      v39 = v56;
      *(_QWORD *)(v9 + 16) = v57;
      *(_QWORD *)(v9 + 24) = v39;
      v40 = v54;
      *(_QWORD *)(v9 + 32) = v55;
      *(_QWORD *)(v9 + 40) = v40;
      *(_BYTE *)(v9 + 48) = v53;
      *(_BYTE *)(v9 + 49) = v52;
      *(_BYTE *)(v9 + 50) = v51;
      *(_BYTE *)(v9 + 51) = v50;
      v41 = v48;
      *(_QWORD *)(v9 + 56) = v49;
      *(_QWORD *)(v9 + 64) = v41;
      v42 = v46;
      *(_QWORD *)(v9 + 72) = v47;
      *(_QWORD *)(v9 + 80) = v42;
      v43 = v44;
      *(_QWORD *)(v9 + 88) = v45;
      *(_QWORD *)(v9 + 96) = v43;
      *(_QWORD *)(v9 + 104) = v19;
      goto LABEL_8;
    }
    v23 = *(_QWORD *)(v60 + 8 * v22);
    v24 = v14 + 1;
    v9 = v66;
    if (!v23)
    {
      v24 = v22 + 1;
      if (v22 + 1 >= v61)
        goto LABEL_36;
      v23 = *(_QWORD *)(v60 + 8 * v24);
      if (!v23)
      {
        v24 = v22 + 2;
        if (v22 + 2 >= v61)
          goto LABEL_36;
        v23 = *(_QWORD *)(v60 + 8 * v24);
        if (!v23)
          break;
      }
    }
LABEL_28:
    v18 = (v23 - 1) & v23;
    v87 = v24;
  }
  v25 = v22 + 3;
  if (v25 >= v61)
  {
LABEL_36:
    swift_release();
    goto LABEL_37;
  }
  v23 = *(_QWORD *)(v60 + 8 * v25);
  if (v23)
  {
    v24 = v25;
    goto LABEL_28;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v61)
      goto LABEL_36;
    v23 = *(_QWORD *)(v60 + 8 * v24);
    ++v25;
    if (v23)
      goto LABEL_28;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1CC9D8400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v7 = sub_1CCB637D8();
  v8 = sub_1CCB63D48();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315394;
    if (a2)
      v11 = 1702195828;
    else
      v11 = 0x65736C6166;
    if (a2)
      v12 = 0xE400000000000000;
    else
      v12 = 0xE500000000000000;
    sub_1CCA0CB60(v11, v12, &v15);
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    if (a4)
      v13 = 1702195828;
    else
      v13 = 0x65736C6166;
    if (a4)
      v14 = 0xE400000000000000;
    else
      v14 = 0xE500000000000000;
    sub_1CCA0CB60(v13, v14, &v15);
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v7, v8, "FMIPRefreshingController: connectionHandler didReceive topicToken: %s publicToken: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v10, -1, -1);
    MEMORY[0x1D17B214C](v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_1CC9D8644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v6 = sub_1CCB63820();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB63868();
  v21 = *(_QWORD *)(v10 - 8);
  v22 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v13 = sub_1CCB637FC();
  sub_1CCA16C20(v13, (uint64_t)qword_1ED8AD7F8);
  sub_1CC9DF994(a1);
  v14 = sub_1CCB637D8();
  v15 = sub_1CCB63D48();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v16 = 67109120;
    LODWORD(aBlock[0]) = a1 == 0;
    sub_1CCB63E44();
    sub_1CCA203A8(a1);
    _os_log_impl(&dword_1CC9BF000, v14, v15, "FMIPBeaconRefreshingController: Refreshing unknown beacons isCompletionNil? %{BOOL}d", v16, 8u);
    MEMORY[0x1D17B214C](v16, -1, -1);
  }
  else
  {
    sub_1CCA203A8(a1);
  }

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a3;
  v17[3] = a1;
  v17[4] = a2;
  aBlock[4] = sub_1CCA20CD8;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E89011A0;
  v18 = _Block_copy(aBlock);
  sub_1CC9DF994(a1);
  swift_retain();
  sub_1CCB63844();
  v23 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v12, v9, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v22);
  return swift_release();
}

uint64_t sub_1CC9D894C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  _QWORD aBlock[6];

  v4 = sub_1CCB63820();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63868();
  v18[0] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v11 = sub_1CCB637FC();
  sub_1CCA16C20(v11, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v12 = sub_1CCB637D8();
  v13 = sub_1CCB63D48();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v14 = 134217984;
    aBlock[0] = *(_QWORD *)(a1 + 16);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v12, v13, "FMIPBeaconRefreshingController: locations %ld refreshed", v14, 0xCu);
    MEMORY[0x1D17B214C](v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  aBlock[4] = sub_1CCA20CF0;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E8900BB0;
  v16 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CCB63844();
  v18[1] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v10, v7, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v18[0] + 8))(v10, v8);
  return swift_release();
}

uint64_t sub_1CC9D8C44(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint8_t *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)();
  id v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  NSObject *v34;
  uint64_t (*v35)();
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t *v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v43 = a3;
  v44 = a4;
  v45 = a2;
  v5 = type metadata accessor for FMIPUnknownItem();
  v54 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v43 - v10;
  MEMORY[0x1E0C80A78](v9);
  v51 = (char *)&v43 - v12;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v13 = sub_1CCB637FC();
  v14 = sub_1CCA16C20(v13, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v55 = v14;
  v15 = sub_1CCB637D8();
  v16 = sub_1CCB63D48();
  v17 = os_log_type_enabled(v15, v16);
  v50 = v11;
  if (v17)
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v18 = 138412290;
    sub_1CC9C30A8(0, &qword_1EF9E28C0);
    v20 = v8;
    v21 = sub_1CCB63B20();
    v59 = v21;
    sub_1CCB63E44();
    *v19 = v21;
    v8 = v20;
    v11 = v50;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v15, v16, "FMIPBeaconRefreshingController: unknown beacon received %@", v18, 0xCu);
    sub_1CCA14E90(&qword_1ED8A8E00);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v19, -1, -1);
    MEMORY[0x1D17B214C](v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v45 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_unknownBeacons) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_1CCB64090();
    v22 = result;
    v25 = (uint64_t)v51;
    if (result)
      goto LABEL_8;
LABEL_22:
    v27 = MEMORY[0x1E0DEE9D8];
    goto LABEL_23;
  }
  v22 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  v25 = (uint64_t)v51;
  if (!v22)
    goto LABEL_22;
LABEL_8:
  if (v22 < 1)
  {
    __break(1u);
    return result;
  }
  v26 = 0;
  v52 = a1 & 0xC000000000000001;
  v48 = &v59;
  v27 = MEMORY[0x1E0DEE9D8];
  v28 = type metadata accessor for FMIPUnknownItem;
  *(_QWORD *)&v24 = 136315138;
  v47 = v24;
  v46 = MEMORY[0x1E0DEE9B8] + 8;
  v53 = v22;
  v49 = a1;
  do
  {
    if (v52)
      v29 = (id)MEMORY[0x1D17B154C](v26, a1);
    else
      v29 = *(id *)(a1 + 8 * v26 + 32);
    v30 = v29;
    FMIPUnknownItem.init(with:)(v30, v25);
    sub_1CCA0BEEC(v25, (uint64_t)v11, (uint64_t (*)(_QWORD))v28);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v27 = sub_1CCAC9F4C(0, *(_QWORD *)(v27 + 16) + 1, 1, v27);
    v32 = *(_QWORD *)(v27 + 16);
    v31 = *(_QWORD *)(v27 + 24);
    v56 = v30;
    if (v32 >= v31 >> 1)
      v27 = sub_1CCAC9F4C(v31 > 1, v32 + 1, 1, v27);
    *(_QWORD *)(v27 + 16) = v32 + 1;
    v33 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
    v57 = v27;
    sub_1CC9FED60((uint64_t)v11, v27 + v33 + *(_QWORD *)(v54 + 72) * v32, (uint64_t (*)(_QWORD))v28);
    sub_1CCA0BEEC(v25, (uint64_t)v8, (uint64_t (*)(_QWORD))v28);
    v34 = sub_1CCB637D8();
    v35 = v28;
    v36 = sub_1CCB63D48();
    if (os_log_type_enabled(v34, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v59 = v38;
      *(_DWORD *)v37 = v47;
      v39 = FMIPUnknownItem.debugDescription.getter();
      v58 = sub_1CCA0CB60(v39, v40, &v59);
      v25 = (uint64_t)v51;
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))v35);
      _os_log_impl(&dword_1CC9BF000, v34, v36, "FMIPBeaconRefreshingController: FMIPUnknown item created %s", v37, 0xCu);
      swift_arrayDestroy();
      v41 = v38;
      v11 = v50;
      MEMORY[0x1D17B214C](v41, -1, -1);
      v42 = v37;
      a1 = v49;
      MEMORY[0x1D17B214C](v42, -1, -1);

    }
    else
    {

      sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))v35);
    }
    sub_1CCA0BF30(v25, (uint64_t (*)(_QWORD))v35);
    v28 = v35;
    ++v26;
    v27 = v57;
  }
  while (v53 != v26);
LABEL_23:
  swift_bridgeObjectRelease();
  if (!MEMORY[0x1D17B2218](v45 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_delegate))
    return swift_bridgeObjectRelease();
  sub_1CC9DC4C0(v27, v43, v44);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1CC9D91C8(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t aBlock[6];

  v2 = v1;
  v4 = sub_1CCB63820();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63868();
  v9 = *(_QWORD *)(v8 - 8);
  v28 = v8;
  v29 = v9;
  MEMORY[0x1E0C80A78](v8);
  v27 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v12 = sub_1CCB637FC();
  sub_1CCA16C20(v12, (uint64_t)qword_1ED8AD7F8);
  v13 = sub_1CCB637D8();
  v14 = sub_1CCB63D48();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v26 = v5;
    v17 = v16;
    v25 = v7;
    *(_DWORD *)v15 = 136315138;
    aBlock[0] = v16;
    if (v11)
      v18 = 0x64656C6261736964;
    else
      v18 = 0x64656C62616E65;
    if (v11)
      v19 = 0xE800000000000000;
    else
      v19 = 0xE700000000000000;
    v30 = sub_1CCA0CB60(v18, v19, aBlock);
    v7 = v25;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v13, v14, "FMIPManager: didReceive UT alert state: %s", v15, 0xCu);
    swift_arrayDestroy();
    v20 = v17;
    v5 = v26;
    MEMORY[0x1D17B214C](v20, -1, -1);
    MEMORY[0x1D17B214C](v15, -1, -1);
  }

  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v2;
  *(_BYTE *)(v21 + 24) = v11;
  aBlock[4] = (uint64_t)sub_1CCA24134;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA00C38;
  aBlock[3] = (uint64_t)&unk_1E88F8AB0;
  v22 = _Block_copy(aBlock);
  swift_retain();
  v23 = v27;
  sub_1CCB63844();
  v30 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v23, v7, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v23, v28);
  return swift_release();
}

void FMIPLocation.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v4 = sub_1CCA14E90(&qword_1EF9E34E0);
  v15 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(unsigned __int8 *)(v1 + 1);
  v13 = *(unsigned __int8 *)(v1 + 2);
  v14 = v7;
  v12 = *(unsigned __int8 *)(v1 + 3);
  v8 = *(void **)(v1 + 8);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA177BC();
  sub_1CCB643CC();
  v9 = objc_msgSend(v8, sel_timestamp);
  if (v9)
  {
    v10 = v9;
    v27 = 5;
    sub_1CCB641EC();
    if (!v2)
    {
      v26 = 3;
      sub_1CCB641EC();
      v25 = 4;
      sub_1CCB641EC();
      v24 = v12;
      FMIPLocationType.rawValue.getter();
      v23 = 9;
      sub_1CCB641E0();
      swift_bridgeObjectRelease();
      v22 = 1;
      sub_1CCB641F8();
      objc_msgSend(v8, sel_altitude);
      v21 = 0;
      sub_1CCB641F8();
      objc_msgSend(v8, sel_coordinate);
      v20 = 6;
      sub_1CCB641F8();
      objc_msgSend(v8, sel_coordinate);
      v19 = 8;
      sub_1CCB641F8();
      objc_msgSend(v8, sel_horizontalAccuracy);
      v18 = 2;
      sub_1CCB641F8();
      objc_msgSend(v8, sel_verticalAccuracy);
      v17 = 11;
      sub_1CCB641F8();
      objc_msgSend(v10, sel_fm_epoch);
      v16 = 10;
      sub_1CCB6421C();
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v4);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1CC9D98A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[12];
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[288];
  _OWORD v49[18];
  _BYTE v50[288];
  _BYTE v51[296];
  uint64_t v52;

  v7 = type metadata accessor for FMReverseGeocodingRequest();
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = &v43[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v12 = &v43[-v11];
  sub_1CC9EE240(a2, v49);
  sub_1CC9C3EC0((uint64_t)v49, (uint64_t)v50, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)v50, (uint64_t)v51, &qword_1ED8A71C0);
  if (sub_1CCA33738((uint64_t)v51) != 1)
  {
    sub_1CC9C3EC0((uint64_t)v50, (uint64_t)v48, &qword_1ED8A71C0);
    memcpy(a3, v48, 0x120uLL);
    return nullsub_1(a3);
  }
  v47 = (uint64_t)a3;
  v13 = sub_1CC9F0100();
  v15 = v14;
  v16 = a1 + qword_1EF9E4EC8;
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)v16 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  sub_1CCA074F4(v13, v15);
  v18 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
LABEL_10:
    if (qword_1EF9DEF60 != -1)
      swift_once();
    v29 = sub_1CCB637FC();
    sub_1CCA16C20(v29, (uint64_t)qword_1EF9FF480);
    sub_1CCA0BEEC(a2, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    swift_retain_n();
    v30 = sub_1CCB637D8();
    v31 = sub_1CCB63D48();
    v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      v33 = swift_slowAlloc();
      v46 = v3;
      v34 = v33;
      v45 = swift_slowAlloc();
      *(_QWORD *)&v49[0] = v45;
      *(_DWORD *)v34 = 136315394;
      v44 = v32;
      v35 = sub_1CCB643F0();
      v52 = sub_1CCA0CB60(v35, v36, (uint64_t *)v49);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      v37 = FMReverseGeocodingRequest.debugDescription.getter();
      v52 = sub_1CCA0CB60(v37, v38, (uint64_t *)v49);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA0BF30((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      _os_log_impl(&dword_1CC9BF000, v30, (os_log_type_t)v44, "%s: Loading new address for %s", (uint8_t *)v34, 0x16u);
      v39 = v45;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v39, -1, -1);
      MEMORY[0x1D17B214C](v34, -1, -1);
    }
    else
    {
      swift_release_n();
      sub_1CCA0BF30((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    }

    v40 = v47;
    sub_1CC9CB848(a2, 0, 0, 0);
    sub_1CCA30EF4(v49);
    v41 = v40;
    return sub_1CC9C3EC0((uint64_t)v49, v41, &qword_1ED8A71C0);
  }
  v46 = v3;
  if (qword_1EF9DEF60 != -1)
    swift_once();
  v19 = sub_1CCB637FC();
  sub_1CCA16C20(v19, (uint64_t)qword_1EF9FF480);
  sub_1CCA0BEEC(a2, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  swift_retain_n();
  v20 = sub_1CCB637D8();
  v21 = sub_1CCB63D48();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    v45 = swift_slowAlloc();
    *(_QWORD *)&v49[0] = v45;
    *(_DWORD *)v22 = 136315394;
    v23 = sub_1CCB643F0();
    v52 = sub_1CCA0CB60(v23, v24, (uint64_t *)v49);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    v25 = FMReverseGeocodingRequest.debugDescription.getter();
    v52 = sub_1CCA0CB60(v25, v26, (uint64_t *)v49);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA0BF30((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    _os_log_impl(&dword_1CC9BF000, v20, v21, "%s: Already loading address for same geohash as %s, ignoring.", (uint8_t *)v22, 0x16u);
    v27 = v45;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v27, -1, -1);
    MEMORY[0x1D17B214C](v22, -1, -1);
  }
  else
  {
    swift_release_n();
    sub_1CCA0BF30((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  }

  v42 = v47;
  sub_1CCA30EF4(v49);
  v41 = v42;
  return sub_1CC9C3EC0((uint64_t)v49, v41, &qword_1ED8A71C0);
}

void sub_1CC9D9E50(_QWORD *a1)
{
  FMIPAudioChannel.encode(to:)(a1);
}

void FMIPAudioChannel.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _DWORD v10[4];
  id v11;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v3 = sub_1CCA14E90(&qword_1EF9E03F0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[16];
  v13 = v1[17];
  v10[3] = v1[18];
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v7);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CC9ED240();
  sub_1CCB643CC();
  v17 = 0;
  v8 = v12;
  sub_1CCB641E0();
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

  }
  else
  {
    v9 = v11;
    v16 = 1;
    sub_1CCB641EC();
    objc_msgSend(v9, sel_integerValue);
    v15 = 2;
    sub_1CCB64204();
    v14 = 3;
    sub_1CCB641EC();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

  }
}

uint64_t sub_1CC9DA040(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[11];
  _OWORD v74[5];
  uint64_t v75;

  v2 = *(_OWORD *)(a1 + 48);
  v74[2] = *(_OWORD *)(a1 + 32);
  v74[3] = v2;
  v74[4] = *(_OWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v75 = v3;
  v5 = *(_OWORD *)(a1 + 16);
  v74[0] = *(_OWORD *)a1;
  v74[1] = v5;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = 256;
  if (!*(_BYTE *)(a1 + 33))
    v14 = 0;
  v15 = v14 | *(unsigned __int8 *)(a1 + 32);
  v16 = 0x10000;
  if (!*(_BYTE *)(a1 + 34))
    v16 = 0;
  v17 = 0x1000000;
  if (!*(_BYTE *)(a1 + 35))
    v17 = 0;
  v18 = v15 | v16 | v17;
  v20 = *(_QWORD *)(v1 + 88);
  v19 = *(_QWORD *)(v1 + 96);
  v21 = *(_QWORD *)(v1 + 104);
  v22 = *(_QWORD *)(v1 + 112);
  v24 = *(_QWORD *)(v1 + 120);
  v23 = *(_QWORD *)(v1 + 128);
  v26 = *(_QWORD *)(v1 + 136);
  v25 = *(_QWORD *)(v1 + 144);
  v28 = *(_QWORD *)(v1 + 152);
  v27 = *(_QWORD *)(v1 + 160);
  v29 = *(_QWORD *)(v1 + 168);
  v73[0] = v6;
  v73[1] = v7;
  v73[2] = v8;
  v73[3] = v9;
  v73[4] = v18;
  v73[5] = v10;
  v73[6] = v11;
  v73[7] = v12;
  v73[8] = v13;
  v73[9] = v4;
  v49 = v3;
  v50 = v10;
  v73[10] = v3;
  v46 = v6;
  v45 = v9;
  v47 = v4;
  v48 = v12;
  v44 = v18;
  if (v19)
  {
    v51 = v20;
    v52 = v19;
    v53 = v21;
    v54 = v22;
    LOWORD(v55) = v24 & 0x101;
    BYTE2(v55) = BYTE2(v24) & 1;
    BYTE3(v55) = BYTE3(v24) & 1;
    v56 = v23;
    v57 = v26;
    v58 = v25;
    v59 = v28;
    v60 = v27;
    v61 = v29;
    sub_1CC9DA35C((uint64_t)v74);
    sub_1CC9DA35C((uint64_t)v74);
    v30 = _s8FMIPCore10FMIPPersonV2eeoiySbAC_ACtFZ_0((uint64_t)v73, (uint64_t)&v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1CC9C4D44((uint64_t)v74);
    if ((v30 & 1) != 0)
      return 0;
  }
  else
  {
    v42 = v25;
    v43 = v8;
    v32 = v6;
    v40 = v27;
    v41 = v29;
    v38 = v26;
    v39 = v28;
    v36 = v22;
    v37 = v23;
    v35 = v21;
    sub_1CC9DA35C((uint64_t)v74);
    sub_1CC9DA35C((uint64_t)v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v51 = v32;
    v52 = v7;
    v8 = v43;
    v53 = v43;
    v54 = v9;
    v55 = v18;
    v56 = v50;
    v57 = v11;
    v58 = v48;
    v59 = v13;
    v60 = v47;
    v61 = v49;
    v62 = v20;
    v63 = 0;
    v64 = v35;
    v65 = v36;
    v66 = v24;
    v67 = v37;
    v68 = v38;
    v69 = v42;
    v70 = v39;
    v71 = v40;
    v72 = v41;
    sub_1CCABB6E0(&v51);
  }
  v33 = *(_QWORD *)(v1 + 88);
  v34 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 88) = v46;
  *(_QWORD *)(v1 + 96) = v7;
  *(_QWORD *)(v1 + 104) = v8;
  *(_QWORD *)(v1 + 112) = v45;
  *(_QWORD *)(v1 + 120) = v44;
  *(_QWORD *)(v1 + 128) = v50;
  *(_QWORD *)(v1 + 136) = v11;
  *(_QWORD *)(v1 + 144) = v48;
  *(_QWORD *)(v1 + 152) = v13;
  *(_QWORD *)(v1 + 160) = v47;
  *(_QWORD *)(v1 + 168) = v49;
  sub_1CC9DA35C((uint64_t)v74);
  sub_1CCA24588(v33, v34);
  if (*(_BYTE *)(v1 + 24) == 1)
  {
    if (*(_QWORD *)(v1 + 344))
    {
      swift_retain();
      sub_1CCAB3048((uint64_t)v74);
      swift_release();
    }
  }
  return 1;
}

uint64_t sub_1CC9DA35C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1CC9DA3C4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[3];

  v4 = v3;
  v8 = sub_1CCB637FC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v12 = sub_1CCA16C20(v8, (uint64_t)qword_1ED8AD7F8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v13 = sub_1CCB637D8();
  v14 = sub_1CCB63D48();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v25 = (_QWORD *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    v28[0] = v26;
    *(_DWORD *)v15 = 136315394;
    if (!a2)
    {
LABEL_13:
      result = swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_14;
    }
    v23 = v9;
    v24 = v4;
    swift_bridgeObjectRetain();
    v27 = sub_1CCA0CB60(a1, a2, v28);
    sub_1CCB63E44();
    result = swift_bridgeObjectRelease_n();
    *(_WORD *)(v15 + 12) = 2112;
    if (!a3)
    {
LABEL_14:
      __break(1u);
      return result;
    }
    v17 = sub_1CCB638C8();
    v27 = v17;
    sub_1CCB63E44();
    v18 = v25;
    *v25 = v17;
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CC9BF000, v13, v14, "FMAPSConnectionHandler: Received message for topic: %s \n Message: %@", (uint8_t *)v15, 0x16u);
    sub_1CCA14E90(&qword_1ED8A8E00);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v18, -1, -1);
    v19 = v26;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v19, -1, -1);
    MEMORY[0x1D17B214C](v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v8);
    v4 = v24;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v20 = v4 + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v20);
  if (!result)
    return result;
  if (!a3)
  {
    __break(1u);
    goto LABEL_13;
  }
  v21 = *(_QWORD *)(v20 + 8);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 16))(v4, a3, ObjectType, v21);
  return swift_unknownObjectRelease();
}

uint64_t sub_1CC9DA708(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t aBlock[6];

  v2 = v1;
  v4 = sub_1CCB63820();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63868();
  v9 = *(_QWORD *)(v8 - 8);
  v28 = v8;
  v29 = v9;
  MEMORY[0x1E0C80A78](v8);
  v27 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v12 = sub_1CCB637FC();
  sub_1CCA16C20(v12, (uint64_t)qword_1ED8AD7F8);
  v13 = sub_1CCB637D8();
  v14 = sub_1CCB63D48();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v26 = v5;
    v17 = v16;
    aBlock[0] = v16;
    v25 = v7;
    *(_DWORD *)v15 = 136315138;
    LOBYTE(v30) = v11;
    v18 = sub_1CCB639AC();
    v30 = sub_1CCA0CB60(v18, v19, aBlock);
    v7 = v25;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v13, v14, "FMIPManager: didReceive separation monitoring state: %s", v15, 0xCu);
    swift_arrayDestroy();
    v20 = v17;
    v5 = v26;
    MEMORY[0x1D17B214C](v20, -1, -1);
    MEMORY[0x1D17B214C](v15, -1, -1);
  }

  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v2;
  *(_BYTE *)(v21 + 24) = v11;
  aBlock[4] = (uint64_t)sub_1CCA24118;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA00C38;
  aBlock[3] = (uint64_t)&unk_1E88F7AA8;
  v22 = _Block_copy(aBlock);
  swift_retain();
  v23 = v27;
  sub_1CCB63844();
  v30 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v23, v7, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v23, v28);
  return swift_release();
}

char *sub_1CC9DAA68()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  objc_class *v13;
  char *v14;
  void *v15;
  char *v16;
  double v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  objc_super v23;
  uint64_t v24;

  v1 = sub_1CCB63D84();
  v21 = *(_QWORD *)(v1 - 8);
  v22 = v1;
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CCB63D6C();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v4);
  v6 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v6);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v20 = OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_locationUpdatingQueue;
  sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A8E30);
  v7 = v0;
  sub_1CCB63844();
  v24 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, v5, MEMORY[0x1E0DEF828]);
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v3, *MEMORY[0x1E0DEF8D0], v22);
  *(_QWORD *)&v0[v20] = sub_1CCB63DB4();
  v8 = &v7[OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_currentLocation];
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = 0;
  v9 = (void *)objc_opt_self();
  v10 = (void *)sub_1CCB63964();
  v11 = (void *)sub_1CCB63964();
  LOBYTE(v9) = objc_msgSend(v9, sel_BOOLForKey_inDomain_, v10, v11);

  v7[OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_limitedPrecision] = (char)v9;
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9E3C8]), sel_init);
  *(_QWORD *)&v7[OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_locationManager] = v12;
  type metadata accessor for FMLocationShifter();
  swift_allocObject();
  *(_QWORD *)&v7[OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_locationShifter] = FMLocationShifter.init()();

  v13 = (objc_class *)type metadata accessor for FMIPLocationController();
  v23.receiver = v7;
  v23.super_class = v13;
  v14 = (char *)objc_msgSendSuper2(&v23, sel_init);
  v15 = *(void **)&v14[OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_locationManager];
  v16 = v14;
  objc_msgSend(v15, sel_setDelegate_, v16);
  v17 = *MEMORY[0x1E0C9E498];
  v18 = v15;
  objc_msgSend(v18, sel_setDesiredAccuracy_, v17);

  return v16;
}

uint64_t sub_1CC9DADB8(uint64_t isUniquelyReferenced_nonNull_native, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  int v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  void *v78;
  char *v79;
  uint64_t result;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t aBlock[6];

  v89 = a3;
  v109 = a2;
  v107 = type metadata accessor for FMIPUnknownItem();
  v6 = *(_QWORD *)(v107 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x1E0C80A78](v107);
  v106 = (uint64_t)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v105 = (uint64_t)&v81 - v10;
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t)&v81 - v11;
  v88 = sub_1CCB63868();
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88);
  v86 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_1CCB63820();
  v84 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v83 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once();
LABEL_2:
    v15 = sub_1CCB637FC();
    v16 = sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD7F8);
    swift_bridgeObjectRetain();
    v104 = v16;
    v17 = sub_1CCB637D8();
    v18 = sub_1CCB63D48();
    v19 = os_log_type_enabled(v17, v18);
    v112 = v12;
    if (v19)
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v20 = 134217984;
      v12 = v112;
      aBlock[0] = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v17, v18, "FMIPManager: unknownItems processing %ld", v20, 0xCu);
      MEMORY[0x1D17B214C](v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v108 = swift_allocObject();
    *(_QWORD *)(v108 + 16) = MEMORY[0x1E0DEE9D8];
    v103 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
    if (!v103)
    {
LABEL_56:
      v74 = v109;
      v75 = v83;
      sub_1CCB63814();
      v76 = (_QWORD *)swift_allocObject();
      v76[2] = v108;
      v76[3] = v74;
      v77 = v89;
      v76[4] = v89;
      v76[5] = a4;
      aBlock[4] = (uint64_t)sub_1CCA24248;
      aBlock[5] = (uint64_t)v76;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1CCA00C38;
      aBlock[3] = (uint64_t)&unk_1E88F8628;
      v78 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      sub_1CC9DF994(v77);
      v79 = v86;
      sub_1CCB63844();
      MEMORY[0x1D17B1318](0, v79, v75, v78);
      _Block_release(v78);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v79, v88);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v75, v85);
      swift_release();
      return swift_release();
    }
    v82 = a4;
    v99 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_locationShifter;
    v21 = *(unsigned __int8 *)(v6 + 80);
    v102 = isUniquelyReferenced_nonNull_native + ((v21 + 32) & ~v21);
    v101 = *(_QWORD *)(v6 + 72);
    v92 = aBlock;
    v97 = v21 | 7;
    v98 = (v21 + 16) & ~v21;
    v96 = (v7 + v98 + 7) & 0xFFFFFFFFFFFFFFF8;
    v95 = (v96 + 15) & 0xFFFFFFFFFFFFFFF8;
    v94 = (v95 + 15) & 0xFFFFFFFFFFFFFFF8;
    v93 = v94 + 8;
    v81 = isUniquelyReferenced_nonNull_native;
    swift_bridgeObjectRetain();
    v22 = 0;
    v100 = 0x80000001CCB7B270;
    *(_QWORD *)&v23 = 136315394;
    v91 = v23;
    v90 = MEMORY[0x1E0DEE9B8] + 8;
LABEL_8:
    v113 = v22;
    sub_1CCA0BEEC(v102 + v101 * v22, v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v27 = objc_allocWithZone(MEMORY[0x1E0D20218]);
    v28 = (void *)sub_1CCB63964();
    v111 = objc_msgSend(v27, sel_initWithDescription_andTimeout_, v28, 60.0);

    v29 = *(_QWORD *)(v12 + *(int *)(v107 + 32));
    v114 = *(_QWORD *)(v29 + 16);
    if (v114)
      break;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = MEMORY[0x1E0DEE9E0];
LABEL_25:
    swift_bridgeObjectRelease();
    v51 = v105;
    sub_1CCA0BEEC(v12, v105, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    swift_bridgeObjectRetain_n();
    v52 = sub_1CCB637D8();
    v53 = sub_1CCB63D48();
    a4 = isUniquelyReferenced_nonNull_native;
    if (os_log_type_enabled(v52, v53))
    {
      v54 = swift_slowAlloc();
      v117 = swift_slowAlloc();
      aBlock[0] = v117;
      *(_DWORD *)v54 = v91;
      sub_1CCB63604();
      sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v12 = v112;
      v55 = sub_1CCB64240();
      v118 = sub_1CCA0CB60(v55, v56, aBlock);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA0BF30(v51, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
      *(_WORD *)(v54 + 12) = 2048;
      v57 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
      swift_bridgeObjectRelease();
      v118 = v57;
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v52, v53, "FMIPManager: unknownItems shifting location for item %s, locations: %ld", (uint8_t *)v54, 0x16u);
      v58 = v117;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v58, -1, -1);
      MEMORY[0x1D17B214C](v54, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1CCA0BF30(v51, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);

      swift_bridgeObjectRelease();
    }
    ++v113;
    v117 = *(_QWORD *)(v109 + v99);
    v59 = v106;
    sub_1CCA0BEEC(v12, v106, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v12 = swift_allocObject();
    sub_1CC9FED60(v59, v12 + v98, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    *(_QWORD *)(v12 + v96) = isUniquelyReferenced_nonNull_native;
    *(_QWORD *)(v12 + v95) = v108;
    v60 = v111;
    *(_QWORD *)(v12 + v94) = v111;
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    v6 = isUniquelyReferenced_nonNull_native + 64;
    v61 = 1 << *(_BYTE *)(isUniquelyReferenced_nonNull_native + 32);
    if (v61 < 64)
      v62 = ~(-1 << v61);
    else
      v62 = -1;
    v63 = v62 & *(_QWORD *)(isUniquelyReferenced_nonNull_native + 64);
    isUniquelyReferenced_nonNull_native = (unint64_t)(v61 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    swift_retain();
    v116 = v60;
    v7 = 0;
    if (v63)
    {
LABEL_32:
      v64 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      v65 = v64 | (v7 << 6);
      goto LABEL_51;
    }
    while (1)
    {
      v66 = v7 + 1;
      if (__OFADD__(v7, 1))
        break;
      if (v66 >= isUniquelyReferenced_nonNull_native)
        goto LABEL_7;
      v67 = *(_QWORD *)(v6 + 8 * v66);
      ++v7;
      if (!v67)
      {
        v7 = v66 + 1;
        if (v66 + 1 >= isUniquelyReferenced_nonNull_native)
          goto LABEL_7;
        v67 = *(_QWORD *)(v6 + 8 * v7);
        if (!v67)
        {
          v7 = v66 + 2;
          if (v66 + 2 >= isUniquelyReferenced_nonNull_native)
            goto LABEL_7;
          v67 = *(_QWORD *)(v6 + 8 * v7);
          if (!v67)
          {
            v7 = v66 + 3;
            if (v66 + 3 >= isUniquelyReferenced_nonNull_native)
              goto LABEL_7;
            v67 = *(_QWORD *)(v6 + 8 * v7);
            if (!v67)
            {
              v7 = v66 + 4;
              if (v66 + 4 >= isUniquelyReferenced_nonNull_native)
                goto LABEL_7;
              v67 = *(_QWORD *)(v6 + 8 * v7);
              if (!v67)
              {
                v68 = v66 + 5;
                if (v68 >= isUniquelyReferenced_nonNull_native)
                {
LABEL_7:
                  swift_release();
                  v24 = aBlock[0];
                  v25 = (_QWORD *)swift_allocObject();
                  v25[2] = a4;
                  v25[3] = sub_1CCAAB0C8;
                  v25[4] = v12;
                  swift_bridgeObjectRetain();
                  swift_retain();
                  sub_1CCA1B400(v24, (uint64_t)sub_1CCAAB76C, (uint64_t)v25);
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();
                  v26 = v116;
                  objc_msgSend(v116, sel_wait);

                  v12 = v112;
                  sub_1CCA0BF30(v112, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
                  v22 = v113;
                  if (v113 != v103)
                    goto LABEL_8;
                  swift_bridgeObjectRelease();
                  a4 = v82;
                  goto LABEL_56;
                }
                v67 = *(_QWORD *)(v6 + 8 * v68);
                if (!v67)
                {
                  while (1)
                  {
                    v7 = v68 + 1;
                    if (__OFADD__(v68, 1))
                      goto LABEL_60;
                    if (v7 >= isUniquelyReferenced_nonNull_native)
                      goto LABEL_7;
                    v67 = *(_QWORD *)(v6 + 8 * v7);
                    ++v68;
                    if (v67)
                      goto LABEL_50;
                  }
                }
                v7 = v68;
              }
            }
          }
        }
      }
LABEL_50:
      v63 = (v67 - 1) & v67;
      v65 = __clz(__rbit64(v67)) + (v7 << 6);
LABEL_51:
      v69 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v65);
      v71 = *v69;
      v70 = v69[1];
      v72 = *(void **)(*(_QWORD *)(a4 + 56) + 24 * v65 + 8);
      type metadata accessor for FMLocationShiftingRequest();
      v73 = (_QWORD *)swift_allocObject();
      v73[2] = v72;
      v73[3] = v71;
      v73[4] = v70;
      swift_bridgeObjectRetain();
      MEMORY[0x1D17B1078](v72);
      if (*(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1CCB63B68();
      sub_1CCB63BA4();
      sub_1CCB63B50();
      if (v63)
        goto LABEL_32;
    }
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
  }
  v30 = (char *)(v29 + 32);
  v110 = v29;
  swift_bridgeObjectRetain_n();
  v7 = 0;
  isUniquelyReferenced_nonNull_native = MEMORY[0x1E0DEE9E0];
  while (1)
  {
    v32 = *v30;
    v33 = v30[2];
    v115 = v30[1];
    LODWORD(v116) = v33;
    LODWORD(v117) = v30[3];
    v34 = (void *)*((_QWORD *)v30 + 1);
    v35 = *((_QWORD *)v30 + 2);
    aBlock[0] = v7;
    v36 = v34;
    v37 = sub_1CCB64240();
    a4 = v38;
    v39 = isUniquelyReferenced_nonNull_native;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v39;
    v6 = sub_1CCA074F4(v37, a4);
    v41 = *(_QWORD *)(v39 + 16);
    v42 = (v40 & 1) == 0;
    v43 = v41 + v42;
    if (__OFADD__(v41, v42))
    {
      __break(1u);
      goto LABEL_58;
    }
    v12 = v40;
    if (*(_QWORD *)(v39 + 24) < v43)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = aBlock[0];
      if ((v40 & 1) == 0)
        goto LABEL_19;
    }
    else
    {
      sub_1CCAEC584();
      isUniquelyReferenced_nonNull_native = aBlock[0];
      if ((v12 & 1) == 0)
      {
LABEL_19:
        *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * (v6 >> 6) + 64) |= 1 << v6;
        v46 = (uint64_t *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v6);
        *v46 = v37;
        v46[1] = a4;
        v47 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + 24 * v6;
        *(_BYTE *)v47 = v32;
        *(_BYTE *)(v47 + 1) = v115;
        *(_BYTE *)(v47 + 2) = (_BYTE)v116;
        *(_BYTE *)(v47 + 3) = v117;
        *(_QWORD *)(v47 + 8) = v36;
        *(_QWORD *)(v47 + 16) = v35;
        v48 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
        v49 = __OFADD__(v48, 1);
        v50 = v48 + 1;
        if (v49)
          goto LABEL_59;
        *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = v50;
        swift_bridgeObjectRetain();
        goto LABEL_11;
      }
    }
LABEL_10:
    v31 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + 24 * v6;

    *(_BYTE *)v31 = v32;
    *(_BYTE *)(v31 + 1) = v115;
    *(_BYTE *)(v31 + 2) = (_BYTE)v116;
    *(_BYTE *)(v31 + 3) = v117;
    *(_QWORD *)(v31 + 8) = v36;
    *(_QWORD *)(v31 + 16) = v35;
LABEL_11:
    ++v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 += 24;
    if (v114 == v7)
    {
      swift_bridgeObjectRelease();
      v12 = v112;
      goto LABEL_25;
    }
  }
  sub_1CCA03F94(v43, isUniquelyReferenced_nonNull_native);
  v44 = sub_1CCA074F4(v37, a4);
  if ((v12 & 1) == (v45 & 1))
  {
    v6 = v44;
    isUniquelyReferenced_nonNull_native = aBlock[0];
    if ((v12 & 1) == 0)
      goto LABEL_19;
    goto LABEL_10;
  }
  result = sub_1CCB642DC();
  __break(1u);
  return result;
}

uint64_t sub_1CC9DBA3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint8_t *v29;
  uint64_t v30;
  void *v31;
  _QWORD v33[2];
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD aBlock[6];

  v39 = a3;
  v40 = a4;
  v38 = a2;
  v7 = v5;
  v41 = sub_1CCB63868();
  v9 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63820();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v16 = sub_1CCB637FC();
  sub_1CCA16C20(v16, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v17 = sub_1CCB637D8();
  v18 = sub_1CCB63D48();
  if (os_log_type_enabled(v17, v18))
  {
    v37 = v7;
    v19 = swift_slowAlloc();
    v35 = a5;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc();
    v36 = v15;
    v34 = (_QWORD *)v21;
    *(_DWORD *)v20 = 138412290;
    v33[1] = v20 + 4;
    type metadata accessor for FMIPItem();
    v22 = v13;
    v23 = v12;
    v24 = v11;
    v25 = v9;
    v26 = sub_1CCB63B20();
    aBlock[0] = v26;
    sub_1CCB63E44();
    v27 = v34;
    *v34 = v26;
    v9 = v25;
    v11 = v24;
    v12 = v23;
    v13 = v22;
    v7 = v37;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v17, v18, v38, v20, 0xCu);
    sub_1CCA14E90(&qword_1ED8A8E00);
    swift_arrayDestroy();
    v28 = v27;
    v15 = v36;
    MEMORY[0x1D17B214C](v28, -1, -1);
    v29 = v20;
    a5 = v35;
    MEMORY[0x1D17B214C](v29, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  sub_1CCB63814();
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = v7;
  *(_QWORD *)(v30 + 24) = a1;
  aBlock[4] = v40;
  aBlock[5] = v30;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = a5;
  v31 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v11, v15, v31);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v41);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t sub_1CC9DBD54(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char *v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t aBlock[6];

  v4 = sub_1CCB63820();
  v38 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v37 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63868();
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  MEMORY[0x1E0C80A78](v6);
  v34 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB6382C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2 & 1;
  *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_clientConfiguration) = a2;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v13 = sub_1CCB637FC();
  sub_1CCA16C20(v13, (uint64_t)qword_1ED8AD7F8);
  v14 = sub_1CCB637D8();
  v15 = sub_1CCB63D30();
  if (os_log_type_enabled(v14, v15))
  {
    v32 = v8;
    v16 = swift_slowAlloc();
    v33 = v4;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v31 = v9;
    v19 = v18;
    aBlock[0] = v18;
    *(_DWORD *)v17 = 136446210;
    LOBYTE(v39) = v12;
    v20 = sub_1CCB639AC();
    v39 = sub_1CCA0CB60(v20, v21, aBlock);
    v8 = v32;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v14, v15, "FMIPBeaconRefreshingController: Received new client configuration: %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    v22 = v19;
    v9 = v31;
    MEMORY[0x1D17B214C](v22, -1, -1);
    v23 = v17;
    v4 = v33;
    MEMORY[0x1D17B214C](v23, -1, -1);
  }

  sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A8E30);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF548], v8);
  v24 = (void *)sub_1CCB63DC0();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = a1;
  *(_BYTE *)(v25 + 24) = v12;
  aBlock[4] = (uint64_t)sub_1CCA20CAC;
  aBlock[5] = v25;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA00C38;
  aBlock[3] = (uint64_t)&unk_1E8901808;
  v26 = _Block_copy(aBlock);
  swift_retain();
  v27 = v34;
  sub_1CCB63844();
  v39 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  v28 = v37;
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v27, v28, v26);
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v4);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v27, v36);
  return swift_release();
}

uint64_t sub_1CC9DC154(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD v20[2];
  uint8_t *v21;
  uint64_t v22;
  os_log_t v23;
  uint64_t v24[5];
  uint64_t v25;

  v3 = v1;
  v5 = sub_1CCA14E90(&qword_1ED8A7F68);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 56) = 0;
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA2296C();
  swift_retain();
  sub_1CCB643B4();
  if (v2)
  {
    swift_release();
    sub_1CCA01CA0((uint64_t)a1);
    swift_bridgeObjectRelease();
    type metadata accessor for FMIPInitClientResponse();
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_1CCA14E90(&qword_1ED8A7E80);
    LOBYTE(v25) = 4;
    sub_1CCA1FB68();
    sub_1CCB64180();
    *(_QWORD *)(v1 + 56) = v24[0];
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CC9EBC94((uint64_t)a1, (uint64_t)v24);
    v3 = sub_1CC9CA3D0(v24);
    v9 = qword_1ED8AA630;
    swift_retain();
    if (v9 != -1)
      swift_once();
    v10 = sub_1CCB637FC();
    sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
    swift_retain_n();
    v11 = sub_1CCB637D8();
    v12 = sub_1CCB63D48();
    if (os_log_type_enabled(v11, v12))
    {
      v23 = v11;
      v13 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v24[0] = v22;
      v21 = v13;
      *(_DWORD *)v13 = 136315138;
      v20[1] = v13 + 4;
      v14 = sub_1CC9E67E4();
      v25 = sub_1CCA0CB60(v14, v15, v24);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      v11 = v23;
      v16 = v12;
      v17 = v21;
      _os_log_impl(&dword_1CC9BF000, v23, v16, "FMIPInitClientResponse: initialized with coder %s", v21, 0xCu);
      v18 = v22;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v18, -1, -1);
      MEMORY[0x1D17B214C](v17, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1CCA01CA0((uint64_t)a1);
    swift_release();
  }
  return v3;
}

uint64_t sub_1CC9DC4C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint8_t *v22;
  _QWORD *v23;
  void *v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  v4 = v3;
  v8 = sub_1CCB63820();
  v33 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1CCB63868();
  v11 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v32 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v13 = sub_1CCB637FC();
  sub_1CCA16C20(v13, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v14 = sub_1CCB637D8();
  v15 = sub_1CCB63D48();
  if (os_log_type_enabled(v14, v15))
  {
    v28 = a3;
    v16 = swift_slowAlloc();
    v30 = v8;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v27 = a2;
    v19 = (_QWORD *)v18;
    *(_DWORD *)v17 = 138412290;
    v29 = v11;
    type metadata accessor for FMIPUnknownItem();
    v20 = sub_1CCB63B20();
    aBlock[0] = v20;
    v11 = v29;
    sub_1CCB63E44();
    *v19 = v20;
    a3 = v28;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v14, v15, "FMIPManager: didReceive unknownItems %@", v17, 0xCu);
    sub_1CCA14E90(&qword_1ED8A8E00);
    swift_arrayDestroy();
    v21 = v19;
    a2 = v27;
    MEMORY[0x1D17B214C](v21, -1, -1);
    v22 = v17;
    v8 = v30;
    MEMORY[0x1D17B214C](v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = a1;
  v23[3] = v4;
  v23[4] = a2;
  v23[5] = a3;
  aBlock[4] = sub_1CCA24254;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F8560;
  v24 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CC9DF994(a2);
  v25 = v32;
  sub_1CCB63844();
  v34 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v25, v10, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v25, v31);
  return swift_release();
}

uint64_t destroy for FMIPBeaconRefreshingPolicy()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_1CC9DC884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  objc_class *v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t ObjectType;
  void (*v33)(void *, uint64_t, uint64_t);
  id v34;
  uint64_t v35;
  void *v36;
  id v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t aBlock[6];
  objc_super v68;

  v64 = a6;
  v65 = a5;
  v62 = a3;
  v63 = a4;
  v60 = a1;
  v61 = a2;
  v7 = sub_1CCB63820();
  v54 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  MEMORY[0x1E0C80A78](v7);
  v53 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_1CCB63D84();
  v9 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63D6C();
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v12);
  v52 = sub_1CCB63868();
  v51 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = v6;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v58 = OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_connectionQueue;
  v56 = sub_1CC9F0ECC();
  v16 = v6;
  sub_1CCB63844();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, v13, MEMORY[0x1E0DEF828]);
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF8D0], v59);
  v17 = v15;
  *(_QWORD *)&v57[v58] = sub_1CCB63DB4();
  v18 = &v16[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_connection];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v19 = &v16[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_topicAPSToken];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v20 = &v16[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_publicAPSToken];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v21 = &v16[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_topic];
  v22 = v61;
  *(_QWORD *)v21 = v60;
  *((_QWORD *)v21 + 1) = v22;
  v23 = &v16[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_preferenceDomain];
  v24 = v63;
  *(_QWORD *)v23 = v62;
  *((_QWORD *)v23 + 1) = v24;
  v26 = v64;
  v25 = v65;
  *(_QWORD *)v18 = v65;
  *((_QWORD *)v18 + 1) = v26;
  v27 = v25;
  swift_unknownObjectRetain();

  swift_unknownObjectRelease();
  v28 = (objc_class *)type metadata accessor for FMAPSConnectionHandler();
  v68.receiver = v16;
  v68.super_class = v28;
  v29 = (char *)objc_msgSendSuper2(&v68, sel_init);
  v30 = v29;
  if (v27)
  {
    if (*(_QWORD *)&v29[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_connection])
    {
      v31 = *(_QWORD *)&v29[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_connection + 8];
      ObjectType = swift_getObjectType();
      v33 = *(void (**)(void *, uint64_t, uint64_t))(v31 + 16);
      v34 = v30;
      swift_unknownObjectRetain();
      v33(v30, ObjectType, v31);
      swift_unknownObjectRelease();
    }
    else
    {
      v40 = v29;
    }
    if (qword_1ED8AA630 != -1)
      swift_once();
    v41 = sub_1CCB637FC();
    sub_1CCA16C20(v41, (uint64_t)qword_1ED8AD7F8);
    v42 = v30;
    v43 = sub_1CCB637D8();
    v44 = sub_1CCB63D48();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      v46 = swift_slowAlloc();
      *(_DWORD *)v45 = 136315138;
      aBlock[0] = v46;
      v47 = *(_QWORD *)&v42[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_topic];
      v48 = *(_QWORD *)&v42[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_topic + 8];
      swift_bridgeObjectRetain();
      v66 = sub_1CCA0CB60(v47, v48, aBlock);
      sub_1CCB63E44();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v43, v44, "FMAPSConnectionHandler: initialized with topic %s", v45, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v46, -1, -1);
      MEMORY[0x1D17B214C](v45, -1, -1);

      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
    }

  }
  else
  {
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = v30;
    aBlock[4] = (uint64_t)sub_1CCA22244;
    aBlock[5] = v35;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CCA00C38;
    aBlock[3] = (uint64_t)&unk_1E88FAAB8;
    v36 = _Block_copy(aBlock);
    v37 = v30;
    sub_1CCB63844();
    v66 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    v38 = v53;
    v39 = v55;
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v17, v38, v36);

    _Block_release(v36);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v38, v39);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v17, v52);
    swift_release();
  }
  return v30;
}

uint64_t sub_1CC9DCE98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t aBlock[6];

  v2 = sub_1CCB63868();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63820();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v10 = sub_1CCB637FC();
  sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain_n();
  v11 = sub_1CCB637D8();
  v12 = sub_1CCB63D48();
  if (os_log_type_enabled(v11, v12))
  {
    v29 = v2;
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v26 = v7;
    v15 = v14;
    aBlock[0] = v14;
    v27 = v6;
    *(_DWORD *)v13 = 136315138;
    v25[1] = v13 + 4;
    sub_1CCB63604();
    v28 = v3;
    sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    swift_bridgeObjectRetain();
    v16 = sub_1CCB638EC();
    v18 = v17;
    swift_bridgeObjectRelease();
    v19 = v16;
    v2 = v29;
    v31 = sub_1CCA0CB60(v19, v18, aBlock);
    v6 = v27;
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    v3 = v28;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPManager: didReceive beaconTypes: %s", v13, 0xCu);
    swift_arrayDestroy();
    v20 = v15;
    v7 = v26;
    MEMORY[0x1D17B214C](v20, -1, -1);
    MEMORY[0x1D17B214C](v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v21 = v30;
  sub_1CCB63814();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v21;
  *(_QWORD *)(v22 + 24) = a1;
  aBlock[4] = (uint64_t)sub_1CCA241CC;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA00C38;
  aBlock[3] = (uint64_t)&unk_1E88F7D00;
  v23 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v5, v9, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

uint64_t sub_1CC9DD1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];

  v29 = a4;
  v30 = a2;
  v33 = sub_1CCB63868();
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_1CCB63820();
  v28 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v31 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v10 = sub_1CCB637FC();
  sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v11 = sub_1CCB637D8();
  v12 = sub_1CCB63D48();
  if (os_log_type_enabled(v11, v12))
  {
    v25 = a3;
    v13 = swift_slowAlloc();
    v26 = v6;
    v14 = (uint8_t *)v13;
    v15 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v14 = 138412290;
    sub_1CCB63604();
    sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v16 = sub_1CCB638C8();
    aBlock[0] = v16;
    sub_1CCB63E44();
    *v15 = v16;
    a3 = v25;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPManager: didReceive separation states %@", v14, 0xCu);
    sub_1CCA14E90(&qword_1ED8A8E00);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v15, -1, -1);
    v17 = v14;
    v6 = v26;
    MEMORY[0x1D17B214C](v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v18 = v27;
  v19 = v31;
  sub_1CCB63814();
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v18;
  v20[3] = a1;
  v21 = v29;
  v20[4] = v30;
  v20[5] = a3;
  v20[6] = v21;
  aBlock[4] = sub_1CCA24124;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F7BE8;
  v22 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v8, v19, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v33);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v32);
  return swift_release();
}

void sub_1CC9DD54C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  objc_class *v9;
  id v10;
  id v11;
  char *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  char *v22;
  char *v23;
  id v24;
  _QWORD aBlock[6];
  objc_super v26;

  v1 = v0;
  v2 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCB63634();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (objc_class *)type metadata accessor for FMReverseGeocodingOperation();
  v26.receiver = v0;
  v26.super_class = v9;
  objc_msgSendSuper2(&v26, sel_start);
  v24 = (id)objc_opt_self();
  v10 = objc_msgSend(v24, sel_sharedService);
  v11 = objc_msgSend(v10, sel_defaultTraits);

  sub_1CC9C31E4();
  v12 = &v1[OBJC_IVAR____TtC8FMIPCore27FMReverseGeocodingOperation_request];
  sub_1CC9DDEA8(*(id *)&v1[OBJC_IVAR____TtC8FMIPCore27FMReverseGeocodingOperation_request + 16]);
  v14 = v13;
  v15 = type metadata accessor for FMReverseGeocodingRequest();
  sub_1CCA24964((uint64_t)&v12[*(int *)(v15 + 24)], (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1CCAD7AE0((uint64_t)v4);
  }
  else
  {
    v23 = v1;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_1CCB63610();
    sub_1CCB63628();
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_clearDeviceDisplayLanguages);
    if (v11)
    {
      v16 = v11;
      v17 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      objc_msgSend(v16, sel_addDeviceDisplayLanguage_, v17);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
    }
    v1 = v23;
  }
  if (v12[*(int *)(v15 + 32)] == 1 && v14)
    objc_msgSend(v14, sel_setHorizontalAccuracy_, 1100.0);
  v18 = objc_msgSend(v24, sel_sharedService);
  v19 = objc_msgSend(v18, sel_ticketForReverseGeocodeLocation_traits_, v14, v11);

  if (v19)
  {
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = v1;
    aBlock[4] = sub_1CCAD7B44;
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCAD79BC;
    aBlock[3] = &unk_1E88FABB8;
    v21 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    v22 = v1;
    swift_release();
    objc_msgSend(v19, sel_submitWithHandler_timeout_networkActivity_, v21, 25, 0);
    swift_unknownObjectRelease_n();

    _Block_release(v21);
  }
  else
  {

  }
}

uint64_t sub_1CC9DD8B0(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = sub_1CCB63820();
  v22 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63868();
  v20 = *(_QWORD *)(v7 - 8);
  v21 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(double *)(v1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_maxCallbackInterval) < a1)
    a1 = *(double *)(v1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_maxCallbackInterval);
  v10 = swift_allocObject();
  *(double *)(v10 + 16) = a1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v11 = sub_1CCB637FC();
  sub_1CCA16C20(v11, (uint64_t)qword_1ED8AD7F8);
  swift_retain();
  swift_retain();
  v12 = sub_1CCB637D8();
  v13 = sub_1CCB63D48();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    *(_DWORD *)v14 = 134218240;
    swift_beginAccess();
    aBlock[0] = *(_QWORD *)(v10 + 16);
    sub_1CCB63E44();
    swift_release();
    *(_WORD *)(v14 + 12) = 2048;
    aBlock[0] = *(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_callbackInterval);
    sub_1CCB63E44();
    swift_release();
    _os_log_impl(&dword_1CC9BF000, v12, v13, "FMIPRefreshingController: scheduleNextRefresh scheduling next target interval: %f callback: %f", (uint8_t *)v14, 0x16u);
    MEMORY[0x1D17B214C](v14, -1, -1);

  }
  else
  {

    swift_release();
    swift_release();
  }
  v15 = swift_allocObject();
  swift_weakInit();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v10;
  aBlock[4] = sub_1CCA04660;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88FDC48;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_1CCB63844();
  v23 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v9, v6, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v21);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1CC9DDC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CC9DDC90(a1, a2, a3, a4);
}

uint64_t sub_1CC9DDC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v5 = v4;
  v10 = sub_1CCB63820();
  v21 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCB63868();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)(v5 + qword_1ED8AA228);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a4;
  v17[3] = v5;
  v17[4] = a1;
  v17[5] = a2;
  v17[6] = a3;
  aBlock[4] = sub_1CCA042F8;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88FD3F8;
  v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1CCB63844();
  v22 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v16, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release();
}

void sub_1CC9DDEA8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  double v7;
  double v8;
  id v9;
  id v10;
  id v11;
  double v12;
  double v13;
  double v14;
  id v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  v2 = sub_1CCB635B0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a1, sel_coordinate);
  v7 = v6;
  objc_msgSend(a1, sel_coordinate);
  v9 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithGEOCoordinate_, v7, v8);
  if (!v9)
  {
LABEL_14:

    return;
  }
  v10 = v9;
  v11 = objc_msgSend(a1, sel_timestamp);
  sub_1CCB63580();

  sub_1CCB63568();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(v10, sel_setTimestamp_, v13);
  objc_msgSend(a1, sel_horizontalAccuracy);
  objc_msgSend(v10, sel_setHorizontalAccuracy_);
  objc_msgSend(a1, sel_verticalAccuracy);
  objc_msgSend(v10, sel_setVerticalAccuracy_);
  objc_msgSend(a1, sel_course);
  objc_msgSend(v10, sel_setCourse_);
  objc_msgSend(a1, sel_courseAccuracy);
  objc_msgSend(v10, sel_setCourseAccuracy_);
  objc_msgSend(a1, sel_speed);
  objc_msgSend(v10, sel_setSpeed_);
  objc_msgSend(a1, sel_speedAccuracy);
  objc_msgSend(v10, sel_setSpeedAccuracy_);
  objc_msgSend(a1, sel_altitude);
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v14 <= -2147483650.0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v14 >= 2147483650.0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  objc_msgSend(v10, sel_setAltitude_, (int)v14);
  v15 = objc_msgSend(a1, sel_floor);
  if (!v15)
    goto LABEL_9;
  v16 = v15;
  v17 = (uint64_t)objc_msgSend(v15, sel_level);

  if (v17 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (v17 <= 0x7FFFFFFF)
    {
LABEL_10:
      objc_msgSend(v10, sel_setLevelOrdinal_, v17);
      v18 = objc_msgSend(a1, sel_referenceFrame);
      if (v18 > 2)
        v19 = 0;
      else
        v19 = dword_1CCB73FE0[v18];
      objc_msgSend(v10, sel_setReferenceFrame_, v19);

      goto LABEL_14;
    }
    __break(1u);
LABEL_9:
    v17 = 0;
    goto LABEL_10;
  }
LABEL_18:
  __break(1u);
}

_QWORD *sub_1CC9DE1A4(uint64_t a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[4];

  v3 = v2;
  v49 = a2;
  v50 = a1;
  v4 = sub_1CCB63D84();
  v47 = *(uint8_t **)(v4 - 8);
  v48 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63D6C();
  MEMORY[0x1E0C80A78](v7);
  v8 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v8);
  v9 = sub_1CCB63604();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCB635F8();
  v13 = sub_1CCB635C8();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v3[2] = v13;
  v3[3] = v15;
  v3[5] = 0;
  swift_unknownObjectWeakInit();
  v16 = (char *)v3 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_selectedDevice;
  v17 = type metadata accessor for FMIPDevice();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = (char *)v3 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_itemCounts;
  *(_OWORD *)v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  *((_OWORD *)v18 + 2) = 0u;
  v18[48] = 1;
  v19 = OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_refreshQueue;
  sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A8E30);
  sub_1CCB63844();
  v52[1] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  (*((void (**)(char *, _QWORD, uint64_t))v47 + 13))(v6, *MEMORY[0x1E0DEF8D0], v48);
  *(_QWORD *)((char *)v3 + v19) = sub_1CCB63DB4();
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_tapContexts) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_callbackInterval) = 0x40DD4C0000000000;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_minCallbackInterval) = 0x40B3880000000000;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_maxCallbackInterval) = 0x40ED4C0000000000;
  v20 = (char *)v3 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_lastRefreshTime;
  v21 = sub_1CCB635B0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_refreshTimer) = 0;
  *((_BYTE *)v3 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_isInitializing) = 0;
  v22 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_ownerPhoneNumber);
  *v22 = 0;
  v22[1] = 0;
  *((_BYTE *)v3 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_isRefreshing) = 0;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_rangingParameters) = 0x4034000000000000;
  v24 = v49;
  v23 = v50;
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_apsConnectionHandler) = v49;
  sub_1CC9EBC94(v23, (uint64_t)v3 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_interactionController);
  v25 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_apsConnectionHandler)
      + OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_delegate;
  swift_beginAccess();
  *(_QWORD *)(v25 + 8) = &off_1E88FDAA0;
  swift_unknownObjectWeakAssign();
  v26 = qword_1ED8AA630;
  v27 = v24;
  if (v26 != -1)
    swift_once();
  v28 = sub_1CCB637FC();
  sub_1CCA16C20(v28, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v29 = sub_1CCB637D8();
  v30 = sub_1CCB63D48();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    v48 = swift_slowAlloc();
    v52[0] = v48;
    v49 = v27;
    *(_DWORD *)v31 = 136315138;
    v47 = v31 + 4;
    v32 = v3[2];
    v33 = v3[3];
    swift_bridgeObjectRetain();
    v34 = sub_1CC9C6AE4(0xCuLL, v32, v33);
    v36 = v35;
    v38 = v37;
    v40 = v39;
    swift_bridgeObjectRelease();
    v41 = MEMORY[0x1D17B0F34](v34, v36, v38, v40);
    v43 = v42;
    swift_bridgeObjectRelease();
    v51 = sub_1CCA0CB60(v41, v43, v52);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v29, v30, "FMIPRefreshingController<%s>.init", v31, 0xCu);
    v44 = v48;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v44, -1, -1);
    MEMORY[0x1D17B214C](v31, -1, -1);

  }
  else
  {
    swift_release_n();

  }
  sub_1CCA01CA0(v50);
  return v3;
}

uint64_t sub_1CC9DE744()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _OWORD v21[2];
  __int128 v22;
  __int128 v23;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v0 = sub_1CCB637FC();
  sub_1CCA16C20(v0, (uint64_t)qword_1ED8AD7F8);
  v1 = sub_1CCB637D8();
  v2 = sub_1CCB63D48();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1CC9BF000, v1, v2, "fetching owner phone Number", v3, 2u);
    MEMORY[0x1D17B214C](v3, -1, -1);
  }

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C8F2B8]), sel_init);
  v5 = objc_msgSend(v4, sel_aa_primaryAppleAccount);
  if (!v5)
  {
    v22 = 0u;
    v23 = 0u;
LABEL_18:

LABEL_19:
    sub_1CC9C3E84((uint64_t)&v22, &qword_1ED8AA610);
    return 0;
  }
  v6 = v5;
  v7 = (void *)sub_1CCB63964();
  v8 = objc_msgSend(v6, sel_accountPropertyForKey_, v7);

  if (v8)
  {
    sub_1CCB63E80();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v21, 0, sizeof(v21));
  }
  sub_1CC9C3EC0((uint64_t)v21, (uint64_t)&v22, &qword_1ED8AA610);
  if (!*((_QWORD *)&v23 + 1))
  {

    goto LABEL_18;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    return 0;
  }
  v9 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v10 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v9, sel_authKitAccountWithAltDSID_, v10);

  if (!v11)
  {
LABEL_29:

    return 0;
  }
  v12 = objc_msgSend(v9, sel_additionalInfoForAccount_, v11);
  if (!v12)
  {

    goto LABEL_29;
  }
  v13 = v12;
  v14 = sub_1CCB638E0();

  if (*(_QWORD *)(v14 + 16) && (v15 = sub_1CCA074F4(0x6D754E656E6F6870, 0xEC00000073726562), (v16 & 1) != 0))
  {
    sub_1CCA0CC30(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v22);
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v23 + 1))
  {

    goto LABEL_19;
  }
  sub_1CCA14E90(&qword_1EF9E5028);
  if ((swift_dynamicCast() & 1) == 0)
  {

    return 0;
  }
  if (!*(_QWORD *)(*(_QWORD *)&v21[0] + 16))
  {

    swift_bridgeObjectRelease();
    v22 = 0u;
    v23 = 0u;
    goto LABEL_19;
  }
  v17 = *(_QWORD *)(*(_QWORD *)&v21[0] + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v17 + 16) && (v18 = sub_1CCA074F4(0x6D754E656E6F6870, 0xEB00000000726562), (v19 & 1) != 0))
  {
    sub_1CCA0CC30(*(_QWORD *)(v17 + 56) + 32 * v18, (uint64_t)&v22);
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
  }

  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v23 + 1))
    goto LABEL_19;
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  return *(_QWORD *)&v21[0];
}

void sub_1CC9DEB84(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  uint8_t *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  id v35;
  NSObject *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  _QWORD aBlock[6];

  v3 = v2;
  v5 = sub_1CCB63820();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = ((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_1CCB63868();
  v10 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 == 15)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v14 = sub_1CCB637FC();
    sub_1CCA16C20(v14, (uint64_t)qword_1ED8AD7F8);
    v43 = sub_1CCB637D8();
    v15 = sub_1CCB63D30();
    if (os_log_type_enabled(v43, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1CC9BF000, v43, v15, "FMAPSConnectionHandler: Public APS Token was nil.", v16, 2u);
      MEMORY[0x1D17B214C](v16, -1, -1);
    }

  }
  else
  {
    v41 = v11;
    v42 = v10;
    v17 = (void *)sub_1CCB634B4();
    if (qword_1ED8AA630 != -1)
      swift_once();
    v43 = v8;
    v18 = sub_1CCB637FC();
    sub_1CCA16C20(v18, (uint64_t)qword_1ED8AD7F8);
    v19 = v17;
    v20 = sub_1CCB637D8();
    v21 = sub_1CCB63D48();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v39 = v3;
      v23 = (uint8_t *)v22;
      v24 = swift_slowAlloc();
      v40 = v6;
      v38 = (_QWORD *)v24;
      *(_DWORD *)v23 = 138412290;
      aBlock[0] = v19;
      v25 = v19;
      sub_1CCB63E44();
      v26 = v38;
      *v38 = v19;

      _os_log_impl(&dword_1CC9BF000, v20, v21, "FMAPSConnectionHandler: Public APS Token received %@.", v23, 0xCu);
      sub_1CCA14E90(&qword_1ED8A8E00);
      swift_arrayDestroy();
      v6 = v40;
      MEMORY[0x1D17B214C](v26, -1, -1);
      v27 = v23;
      v3 = v39;
      MEMORY[0x1D17B214C](v27, -1, -1);

    }
    else
    {

    }
    v28 = v19;
    v29 = objc_msgSend(v19, sel_fm_hexString);
    v30 = sub_1CCB63988();
    v32 = v31;

    v33 = (_QWORD *)swift_allocObject();
    v33[2] = v3;
    v33[3] = v30;
    v33[4] = v32;
    aBlock[4] = sub_1CCA22270;
    aBlock[5] = v33;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA00C38;
    aBlock[3] = &unk_1E88FAA68;
    v34 = _Block_copy(aBlock);
    v35 = v3;
    sub_1CCB63844();
    v44 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    v36 = v43;
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v13, v36, v34);
    _Block_release(v34);

    (*(void (**)(NSObject *, uint64_t))(v6 + 8))(v36, v5);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v42);
    swift_release();
  }
}

void sub_1CC9DF00C()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char isEscapingClosureAtFileLocation;
  _QWORD v19[6];
  _QWORD aBlock[6];

  if (qword_1ED8AA630 != -1)
    swift_once();
  v0 = sub_1CCB637FC();
  sub_1CCA16C20(v0, (uint64_t)qword_1ED8AD7F8);
  v1 = sub_1CCB637D8();
  v2 = sub_1CCB63D48();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1CC9BF000, v1, v2, "FMIPRefreshingController: refreshTimerFired", v3, 2u);
    MEMORY[0x1D17B214C](v3, -1, -1);
  }

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v5 = Strong;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    *(_BYTE *)(v6 + 24) = 1;
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = sub_1CCA21B00;
    *(_QWORD *)(v7 + 24) = v6;
    aBlock[4] = sub_1CC9F44EC;
    aBlock[5] = v7;
    v8 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CC9F44AC;
    aBlock[3] = &unk_1E88FDB58;
    v9 = _Block_copy(aBlock);
    v10 = _Block_copy(v9);
    v11 = qword_1ED8A8CB8;
    swift_retain();
    swift_retain();
    if (v11 != -1)
      swift_once();
    v12 = qword_1ED8A8CA8;
    swift_unknownObjectRetain();
    v13 = _os_activity_create(&dword_1CC9BF000, "FMIPRefreshingController.refresh", v12, OS_ACTIVITY_FLAG_DEFAULT);
    swift_unknownObjectRelease();
    v14 = _Block_copy(v10);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v14;
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = sub_1CC9F4520;
    *(_QWORD *)(v16 + 24) = v15;
    v19[4] = sub_1CC9F4530;
    v19[5] = v16;
    v19[0] = v8;
    v19[1] = 1107296256;
    v19[2] = sub_1CC9F44AC;
    v19[3] = &unk_1E88FDBD0;
    v17 = _Block_copy(v19);
    swift_retain();
    swift_release();
    os_activity_apply(v13, v17);
    _Block_release(v17);
    LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    _Block_release(v10);
    swift_unknownObjectRelease();
    _Block_release(v9);
    if ((v17 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      swift_release();
      swift_release();
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0)
        return;
    }
    __break(1u);
  }
}

uint64_t sub_1CC9DF370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  char *v29;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t aBlock;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  void *v48;
  uint64_t (*v49)();
  _QWORD *v50;

  v8 = sub_1CCB63820();
  v43 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v42 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_1CCB63868();
  v41 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v40 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v39 = a4;
  v11 = sub_1CCB637FC();
  v12 = sub_1CCA16C20(v11, (uint64_t)qword_1ED8AD7F8);
  swift_retain();
  v37[1] = v12;
  v13 = sub_1CCB637D8();
  v14 = sub_1CCB63D48();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v37[0] = a2;
    *(_DWORD *)v15 = 134217984;
    swift_beginAccess();
    aBlock = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
    a2 = v37[0];
    sub_1CCB63E44();
    v16 = a1;
    swift_release();
    _os_log_impl(&dword_1CC9BF000, v13, v14, "FMIPManager: unknownItems updating model with unknownItems %ld", v15, 0xCu);
    MEMORY[0x1D17B214C](v15, -1, -1);

  }
  else
  {

    v16 = a1;
    swift_release();
  }
  v17 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
  swift_beginAccess();
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(v17 + 296);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = sub_1CCA1FCB0(v18, v19);
  swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    v21 = v39;
    sub_1CC9DF994(a3);
    v22 = sub_1CCB637D8();
    v23 = sub_1CCB63D48();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v24 = 67109120;
      LODWORD(aBlock) = a3 == 0;
      sub_1CCB63E44();
      sub_1CCA203A8(a3);
      _os_log_impl(&dword_1CC9BF000, v22, v23, "FMIPManager: no refresh required, calling completion if needed isCompletionBlockNil %{BOOL}d", v24, 8u);
      MEMORY[0x1D17B214C](v24, -1, -1);
    }
    else
    {
      sub_1CCA203A8(a3);
    }
    v31 = a3;

    sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A8E30);
    v32 = (void *)sub_1CCB63D90();
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = v31;
    *(_QWORD *)(v33 + 24) = v21;
    v49 = sub_1CCA24220;
    v50 = (_QWORD *)v33;
    aBlock = MEMORY[0x1E0C809B0];
    v46 = 1107296256;
    v47 = sub_1CCA00C38;
    v48 = &unk_1E88F86C8;
    v34 = _Block_copy(&aBlock);
    sub_1CC9DF994(v31);
    swift_release();
    v35 = v40;
    sub_1CCB63844();
    aBlock = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    v36 = v42;
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v35, v36, v34);
    _Block_release(v34);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v36, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v35, v38);
  }
  else
  {
    *(_QWORD *)(v17 + 296) = v18;
    swift_release();
    swift_bridgeObjectRelease();
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = a2;
    v25[3] = v16;
    v26 = v39;
    v25[4] = a3;
    v25[5] = v26;
    v49 = sub_1CCAAB1C4;
    v50 = v25;
    aBlock = MEMORY[0x1E0C809B0];
    v46 = 1107296256;
    v47 = sub_1CCA00C38;
    v48 = &unk_1E88F8678;
    v27 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    sub_1CC9DF994(a3);
    v28 = v40;
    sub_1CCB63844();
    v44 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    v29 = v42;
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v28, v29, v27);
    _Block_release(v27);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v29, v8);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v28, v38);
    return swift_release();
  }
}

uint64_t sub_1CC9DF994(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_1CC9DF9A4(uint64_t a1, void *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[4];
  char v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v6 = sub_1CCB637FC();
    sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD7F8);
    v7 = sub_1CCB637D8();
    v8 = sub_1CCB63D48();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1CC9BF000, v7, v8, "FMIPRefreshingController: initClientRequest completed", v9, 2u);
      MEMORY[0x1D17B214C](v9, -1, -1);
    }

    if (a1)
    {
      v10 = *(_QWORD *)(a1 + 24);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 24);
        v12 = *(_QWORD *)(v10 + 32);
        v13 = *(_QWORD *)(v10 + 40);
        v14 = *(_BYTE *)(v10 + 48);
        v15 = *(_BYTE *)(v10 + 49);
        v16 = *(_BYTE *)(v10 + 50);
        v17 = *(_BYTE *)(v10 + 51);
        v18 = *(_QWORD *)(v10 + 56);
        v19 = *(_QWORD *)(v10 + 64);
        v20 = *(_QWORD *)(v10 + 72);
        v21 = *(_QWORD *)(v10 + 80);
        v22 = *(_QWORD *)(v10 + 88);
        v23 = *(_QWORD *)(v10 + 96);
        v43[0] = *(_QWORD *)(v10 + 16);
        v43[1] = v11;
        v43[2] = v12;
        v43[3] = v13;
        v44 = v14;
        v45 = v15;
        v46 = v16;
        v47 = v17;
        v48 = v18;
        v49 = v19;
        v50 = v20;
        v51 = v21;
        v52 = v22;
        v53 = v23;
        v24 = *(_QWORD *)(a1 + 16);
        v25 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_ownerPhoneNumber + 8);
        v41 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_ownerPhoneNumber);
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1CC9D36EC(v43, v24, v41, v25, (uint64_t)&v54);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v26 = v54;
        v40 = v56;
        v42 = *((_QWORD *)&v54 + 1);
        v27 = v58;
        v28 = v59;
        v36 = v60;
        v37 = v57;
        v29 = v62;
        v30 = v64;
        v34 = v63;
        v35 = v61;
        v31 = v65;
        v38 = v55;
        v39 = v66;
        if (MEMORY[0x1D17B2218](v5 + 32))
        {
          *(_QWORD *)&v54 = v26;
          *((_QWORD *)&v54 + 1) = v42;
          v55 = v38;
          v56 = v40;
          v57 = v37;
          v58 = v27;
          v59 = v28;
          v60 = v36;
          v61 = v35;
          v62 = v29;
          v63 = v34;
          v64 = v30;
          v65 = v31;
          v66 = v39;
          v32 = *(_QWORD *)(v10 + 104);
          swift_bridgeObjectRetain();
          sub_1CC9D5590(&v54, v32);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_retain();
      }
      if (MEMORY[0x1D17B2218](v5 + 32))
      {
        if (*(_QWORD *)(a1 + 56))
          v33 = *(_QWORD *)(a1 + 56);
        else
          v33 = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        sub_1CC9D784C(v33);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      if (MEMORY[0x1D17B2218](v5 + 32))
      {
        sub_1CC9D4204();
        swift_unknownObjectRelease();
      }
      if (*(_BYTE *)(a1 + 40) != 1 || !MEMORY[0x1D17B2218](v5 + 32))
      {
        swift_release();
        goto LABEL_27;
      }
      sub_1CCAA90D8();
      swift_release();
    }
    else
    {
      if (!MEMORY[0x1D17B2218](v5 + 32))
      {
LABEL_27:
        *(_BYTE *)(v5 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_isInitializing) = 0;
        return swift_release();
      }
      sub_1CCAA924C(a2);
    }
    swift_unknownObjectRelease();
    goto LABEL_27;
  }
  return result;
}

void sub_1CC9DFDB4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unsigned __int8 v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  os_log_type_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  os_log_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  id v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  os_log_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;

  v79 = a2;
  v77 = sub_1CCB63748();
  v76 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77);
  v78 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_1CCB637A8();
  v75 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81);
  v5 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1EF9E2AE0);
  MEMORY[0x1E0C80A78](v6);
  v83 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_1CCA14E90(&qword_1EF9E2AE8);
  v82 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_1CCB63490();
  v10 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v84 = v5;
  v85 = v9;
  v13 = sub_1CCB637FC();
  v87 = sub_1CCA16C20(v13, (uint64_t)qword_1ED8AD7F8);
  v14 = sub_1CCB637D8();
  v15 = sub_1CCB63D48();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1CC9BF000, v14, v15, "FMDiskIO: read from disk", v16, 2u);
    MEMORY[0x1D17B214C](v16, -1, -1);
  }

  v17 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v18 = a1[3];
  v19 = a1[4];
  v21 = a1[5];
  v20 = a1[6];
  v89 = v18;
  v90 = v19;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  v22 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v23 = objc_msgSend(v17, sel_fileExistsAtPath_, v22);

  if ((v23 & 1) != 0)
  {
    v74 = a1;
    v89 = v18;
    v90 = v19;
    swift_bridgeObjectRetain();
    sub_1CCB63A24();
    sub_1CCB63424();
    swift_bridgeObjectRelease();
    v28 = sub_1CCB6349C();
    v30 = v29;
    v31 = v18;
    v71 = 0;
    v32 = v19;
    (*(void (**)(char *, unint64_t))(v10 + 8))(v12, v86);
    swift_retain();
    sub_1CCA1B164(v28, v30);
    swift_retain();
    sub_1CCA1B164(v28, v30);
    v33 = sub_1CCB637D8();
    v34 = sub_1CCB63D48();
    v35 = os_log_type_enabled(v33, v34);
    v36 = v30;
    v73 = v21;
    v72 = v20;
    v70 = v31;
    if (v35)
    {
      v37 = swift_slowAlloc();
      v86 = swift_slowAlloc();
      v88 = v86;
      v89 = v31;
      *(_DWORD *)v37 = 136315394;
      v69 = v33;
      v38 = v32;
      v90 = v32;
      swift_bridgeObjectRetain();
      v39 = v34;
      sub_1CCB63A24();
      v89 = sub_1CCA0CB60(v89, v90, (uint64_t *)&v88);
      sub_1CCB63E44();
      v40 = v74;
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 12) = 2080;
      v41 = sub_1CCB634A8();
      v89 = sub_1CCA0CB60(v41, v42, (uint64_t *)&v88);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA1B120(v28, v30);
      sub_1CCA1B120(v28, v30);
      v43 = v69;
      _os_log_impl(&dword_1CC9BF000, v69, v39, "FMDiskIO: file: %s data: %s", (uint8_t *)v37, 0x16u);
      v44 = v86;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v44, -1, -1);
      v45 = v37;
      v36 = v30;
      MEMORY[0x1D17B214C](v45, -1, -1);

    }
    else
    {
      v40 = v74;
      swift_release_n();
      sub_1CCA1B120(v28, v30);
      sub_1CCA1B120(v28, v30);

      v38 = v32;
    }
    v47 = v80;
    v46 = v81;
    sub_1CCB63364();
    swift_allocObject();
    sub_1CCB63358();
    v48 = v83;
    sub_1CC9EAB74((uint64_t)v40 + *(_QWORD *)(*v40 + 128), v83, &qword_1EF9E2AE0);
    v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v48, 1, v47);
    v50 = v84;
    v51 = (uint64_t)v85;
    if (v49 == 1)
    {
      sub_1CC9C3E84(v48, &qword_1EF9E2AE0);
      sub_1CCA14E90(&qword_1EF9E2AF0);
      sub_1CCA1552C((unint64_t *)&unk_1EF9E2AF8, &qword_1EF9E2AF0, (uint64_t (*)(void))sub_1CCA245F8, MEMORY[0x1E0DEAF40]);
      v52 = v71;
      sub_1CCB6334C();
      if (!v52)
      {
        sub_1CCA1B120(v28, v36);
        swift_release();
LABEL_16:
        *v79 = v89;
        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      sub_1CC9C3EC0(v48, (uint64_t)v85, &qword_1EF9E2AE8);
      sub_1CC9CAA38(&qword_1EF9E2B08, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21358], MEMORY[0x1E0D21368]);
      v52 = v71;
      sub_1CCB6334C();
      if (!v52)
      {
        v86 = v36;
        v53 = v28;
        v54 = v78;
        sub_1CCB63754();
        v55 = v54;
        v56 = sub_1CCB6379C();
        v58 = v57;
        (*(void (**)(char *, uint64_t))(v76 + 8))(v55, v77);
        sub_1CCA14E90(&qword_1EF9E2AF0);
        sub_1CCA1552C((unint64_t *)&unk_1EF9E2AF8, &qword_1EF9E2AF0, (uint64_t (*)(void))sub_1CCA245F8, MEMORY[0x1E0DEAF40]);
        sub_1CCB6334C();
        swift_release();
        sub_1CCA1B120(v56, v58);
        sub_1CCA1B120(v53, v86);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v50, v46);
        sub_1CC9C3E84((uint64_t)v85, &qword_1EF9E2AE8);
        goto LABEL_16;
      }
      sub_1CC9C3E84(v51, &qword_1EF9E2AE8);
    }
    swift_release();
    swift_retain();
    v59 = v52;
    swift_retain();
    v60 = v52;
    v61 = sub_1CCB637D8();
    v62 = sub_1CCB63D30();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = swift_slowAlloc();
      v87 = v28;
      v64 = v63;
      v65 = v36;
      v66 = swift_slowAlloc();
      v88 = v66;
      *(_DWORD *)v64 = 136315394;
      swift_getErrorValue();
      v67 = sub_1CCB64300();
      v89 = sub_1CCA0CB60(v67, v68, (uint64_t *)&v88);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      *(_WORD *)(v64 + 12) = 2080;
      v89 = v70;
      v90 = v38;
      swift_bridgeObjectRetain();
      sub_1CCB63A24();
      v89 = sub_1CCA0CB60(v89, v90, (uint64_t *)&v88);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v61, v62, "FMDiskIO: Could not decode the disk archive: %s, %s", (uint8_t *)v64, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v66, -1, -1);
      MEMORY[0x1D17B214C](v64, -1, -1);

      sub_1CCA1B120(v87, v65);
      return;
    }
    sub_1CCA1B120(v28, v36);

  }
  else
  {
    v72 = v20;
    v73 = v21;
    swift_retain_n();
    v24 = sub_1CCB637D8();
    v25 = sub_1CCB63D30();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v88 = v27;
      v89 = v18;
      *(_DWORD *)v26 = 136315138;
      v90 = v19;
      swift_bridgeObjectRetain();
      sub_1CCB63A24();
      v89 = sub_1CCA0CB60(v89, v90, (uint64_t *)&v88);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v24, v25, "FMDiskIO: Disk archive does not exist at: %s", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v27, -1, -1);
      MEMORY[0x1D17B214C](v26, -1, -1);

      return;
    }

  }
  swift_release_n();
}

void sub_1CC9E0AFC(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  _UNKNOWN **v13;
  char *v14;
  uint64_t v15;
  uint64_t ObjectType;
  void (*v17)(char *, uint64_t, uint64_t);
  char *v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a1;
  v1 = sub_1CCB63D84();
  v28 = *(_QWORD *)(v1 - 8);
  v29 = v1;
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CCB63D6C();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v4);
  v6 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v6);
  v27[1] = sub_1CCB63988();
  v27[2] = sub_1CCB63988();
  sub_1CC9F0ECC();
  sub_1CCB63844();
  v32 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, v5, MEMORY[0x1E0DEF828]);
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v3, *MEMORY[0x1E0DEF8D0], v29);
  v7 = v30;
  v8 = (void *)sub_1CCB63DB4();
  v9 = objc_allocWithZone(MEMORY[0x1E0CFE148]);
  v10 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v11 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v9, sel_initWithEnvironmentName_namedDelegatePort_queue_, v10, v11, v8);

  v13 = &off_1E88FA910;
  v14 = &v7[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_connection];
  if (!v12)
    v13 = 0;
  *(_QWORD *)v14 = v12;
  *((_QWORD *)v14 + 1) = v13;
  swift_unknownObjectRelease();
  if (*(_QWORD *)v14)
  {
    v15 = *((_QWORD *)v14 + 1);
    ObjectType = swift_getObjectType();
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    swift_unknownObjectRetain();
    v18 = v7;
    v17(v7, ObjectType, v15);
    swift_unknownObjectRelease();
  }
  if (qword_1ED8AA630 != -1)
    swift_once();
  v19 = sub_1CCB637FC();
  sub_1CCA16C20(v19, (uint64_t)qword_1ED8AD7F8);
  v20 = v7;
  v21 = sub_1CCB637D8();
  v22 = sub_1CCB63D48();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v32 = v24;
    *(_DWORD *)v23 = 136315138;
    v25 = *(_QWORD *)&v20[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_topic];
    v26 = *(_QWORD *)&v20[OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_topic + 8];
    swift_bridgeObjectRetain();
    v31 = sub_1CCA0CB60(v25, v26, &v32);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v21, v22, "FMAPSConnectionHandler: initialized with default connection for topic %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v24, -1, -1);
    MEMORY[0x1D17B214C](v23, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1CC9E0F20(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32[3];

  v4 = v3;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v7 = sub_1CCB637FC();
  sub_1CCA16C20(v7, (uint64_t)qword_1ED8AD7F8);
  v8 = sub_1CCB637D8();
  v9 = sub_1CCB63D48();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v32[0] = v11;
    *(_DWORD *)v10 = 136315138;
    v12 = sub_1CCB639AC();
    sub_1CCA0CB60(v12, v13, v32);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v8, v9, "FMIPDataManager: Updating items from source: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v11, -1, -1);
    MEMORY[0x1D17B214C](v10, -1, -1);
  }

  swift_beginAccess();
  v14 = *(_QWORD *)(v4 + 280);
  swift_bridgeObjectRetain();
  v15 = sub_1CC9E12D4(a1, v14);
  swift_bridgeObjectRelease();
  v16 = v15 ^ 1 | a3;
  if ((v16 & 1) != 0)
  {
    *(_QWORD *)(v4 + 280) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v4 + 280);
    v19 = *(_QWORD *)(v4 + 184);
    v18 = *(_QWORD *)(v4 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = sub_1CCABA058(v17, v18, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 280) = v20;
    swift_bridgeObjectRelease();
    swift_retain();
    v21 = swift_bridgeObjectRetain();
    v22 = sub_1CCAB7730(v21, v4);
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v4 + 280) = v22;
    swift_bridgeObjectRelease();
    v23 = (uint64_t (*)())swift_bridgeObjectRetain();
    v24 = sub_1CCAAEB04(v23);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 280) = v24;
    swift_bridgeObjectRelease();
    v25 = swift_bridgeObjectRetain();
    v26 = sub_1CC9CBCCC(v25);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 288) = v26;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v27 = swift_bridgeObjectRetain();
    v28 = sub_1CC9FD538(v27);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 80) = v28;
    swift_bridgeObjectRelease();
    if (MEMORY[0x1D17B2218](v4 + 32))
    {
      v29 = *(_QWORD *)(v4 + 80);
      swift_bridgeObjectRetain();
      sub_1CC9D6B5C(v4, v29);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    if (*(_BYTE *)(v4 + 24) == 1 && *(_QWORD *)(v4 + 312))
    {
      swift_retain();
      v30 = swift_bridgeObjectRetain();
      sub_1CC9D4D5C(v30, (uint64_t)&unk_1E88F91C0, (uint64_t)sub_1CCABB5C0, (uint64_t)&unk_1E88F91D8);
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  return v16 & 1;
}

uint64_t sub_1CC9E12D4(uint64_t a1, uint64_t a2)
{
  return sub_1CCA03290(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem, (uint64_t (*)(char *, char *))_s8FMIPCore8FMIPItemV2eeoiySbAC_ACtFZ_0);
}

uint64_t sub_1CC9E12E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CC9E130C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CC9E130C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x63616542666C6573 && a2 == 0xED0000676E696E6FLL || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6169727564 && a2 == 0xE600000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xE900000000000079 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701602664 && a2 == 0xE400000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E69466C61636F6CLL && a2 == 0xED0000656C626164 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x4D6C617574726976 && a2 == 0xEF65636976654465)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1CC9E1640(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v2 = v1;
  v21 = a1;
  v20 = sub_1CCB63D84();
  v18 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v19 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1CCB63D6C();
  MEMORY[0x1E0C80A78](v17);
  v4 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v4);
  sub_1CCB6358C();
  v5 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v1 + qword_1EF9E4EB8) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v1 + qword_1EF9E4EC0) = v5;
  *(_QWORD *)(v1 + qword_1EF9E4EC8) = v5;
  *(_QWORD *)(v1 + qword_1EF9E4ED0) = 0;
  if (qword_1EF9DEF60 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1EF9FF480);
  swift_retain_n();
  v7 = sub_1CCB637D8();
  v8 = sub_1CCB63D48();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v23 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = sub_1CCB643F0();
    v22 = sub_1CCA0CB60(v11, v12, &v23);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v7, v8, "%s: initialized", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v10, -1, -1);
    MEMORY[0x1D17B214C](v9, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3828]), sel_init);
  v23 = 0;
  v24 = 0xE000000000000000;
  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v14 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  objc_msgSend(v13, sel_setName_, v14);

  objc_msgSend(v13, sel_setMaxConcurrentOperationCount_, 10);
  sub_1CC9F0ECC();
  v23 = 0;
  v24 = 0xE000000000000000;
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  v23 = 0xD000000000000022;
  v24 = 0x80000001CCB7D9F0;
  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB6385C();
  v23 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v19, *MEMORY[0x1E0DEF8D0], v20);
  v15 = sub_1CCB63DB4();
  *(_QWORD *)(v2 + qword_1EF9E4ED8) = v13;
  sub_1CC9C3EC0(v21, v2 + qword_1EF9FF7A8, (uint64_t *)&unk_1ED8A8B10);
  *(_QWORD *)(v2 + qword_1EF9E4EE0) = v15;
  return v2;
}

void _s8FMIPCore13FMIPAnalyticsV31sendNotificationAuthLaunchEvent5eventyAA016FMIPNotificationefG0V_tFZ_0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  char isUniquelyReferenced_nonNull_native;
  id v6;
  char v7;
  void *v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[6];

  v2 = *a1;
  v1 = a1[1];
  v3 = sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v4, 0xD00000000000001CLL, 0x80000001CCB79100, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v1);
  v7 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v6, 0xD000000000000011, 0x80000001CCB79120, v7);
  swift_bridgeObjectRelease();
  v8 = (void *)sub_1CCB63964();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v3;
  v11[4] = sub_1CCA3C490;
  v11[5] = v9;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_1CCA7EAC8;
  v11[3] = &unk_1E88F13E0;
  v10 = _Block_copy(v11);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v10);
  swift_bridgeObjectRelease();

}

void sub_1CC9E1CDC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v7 = v5;
  v12 = *v5;
  v14 = sub_1CCA074F4(a2, a3);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1CCAEC9C0(a5);
LABEL_7:
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a2;
    v24[1] = a3;
    *(_QWORD *)(v20[7] + 8 * v14) = a1;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain();
      return;
    }
    goto LABEL_14;
  }
  sub_1CC9E1E5C(v17, a4 & 1, a5);
  v22 = sub_1CCA074F4(a2, a3);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  sub_1CCB642DC();
  __break(1u);
}

void sub_1CC9E1E50(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1CC9E1CDC(a1, a2, a3, a4, &qword_1EF9E3440);
}

uint64_t sub_1CC9E1E5C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  v4 = v3;
  v6 = *v3;
  sub_1CCA14E90(a3);
  v39 = a2;
  v7 = sub_1CCB640A8();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_33;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          v4 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v37)
              goto LABEL_33;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v34 = v33;
    }
    sub_1CCB6433C();
    sub_1CCB639F4();
    result = sub_1CCB64384();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v36;
  v23 = (_QWORD *)(v6 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_1CC9E2164@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPBeaconType.init(from:)(a1, a2);
}

void sub_1CC9E2178(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void (*a6)(void))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  void *v21;
  unint64_t v22;
  void *v23;
  id v24;
  void *v25;
  unsigned __int8 v26;
  id v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(void);
  void *v32;
  uint64_t v33;
  void (*v34)(void);
  _QWORD *v35;
  uint64_t *v36;
  void *v37;
  uint64_t *v38;
  void *v39;
  unsigned __int8 v40;
  void *v41;
  id v42;
  uint64_t inited;
  void **v44;
  void *v45;
  void *v46;
  uint64_t v47;
  id v48;
  id v49;
  void *v50;
  void *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  void *v67;
  char *v68;
  id v69;
  uint64_t v70;
  id v71;
  id v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t *v83;
  void *v84;
  uint64_t v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  void (*v98)(void);
  void *v99;
  void *v100;
  unint64_t v101;
  char v102;
  uint64_t v103;
  id v104;
  unint64_t v105;
  uint64_t v106[2];

  v98 = a6;
  v97 = a5;
  v106[1] = *MEMORY[0x1E0C80C00];
  v89 = sub_1CCB637A8();
  v88 = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89);
  v90 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = a3;
  v11 = sub_1CCA14E90(a3);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = a4;
  v94 = sub_1CCA14E90(a4);
  v93 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94);
  v91 = (uint64_t)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1CCB63490();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = a2;
  v102 = 0;
  v19 = (void *)objc_opt_self();
  v20 = objc_msgSend(v19, sel_defaultManager);
  v21 = *(void **)(a1 + 24);
  v22 = *(_QWORD *)(a1 + 32);
  v96 = a1;
  v100 = v21;
  v101 = v22;
  v23 = (void *)sub_1CCB63964();
  LOBYTE(a1) = objc_msgSend(v20, sel_fileExistsAtPath_isDirectory_, v23, &v102);

  if ((a1 & 1) != 0)
    goto LABEL_3;
  v24 = objc_msgSend(v19, sel_defaultManager);
  sub_1CCB63424();
  v25 = (void *)sub_1CCB6343C();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v104 = 0;
  v26 = objc_msgSend(v24, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v25, 1, 0, &v104);

  v27 = v104;
  if ((v26 & 1) != 0)
  {
LABEL_3:
    sub_1CCB63388();
    swift_allocObject();
    v28 = (uint64_t *)sub_1CCB6337C();
    sub_1CCA14E90(v97);
    v98();
    v29 = (uint64_t)v99;
    v30 = sub_1CCB63370();
    if (v29)
    {
      swift_release();
      v32 = (void *)v29;
LABEL_21:
      if (qword_1ED8AA630 != -1)
        swift_once();
      v70 = sub_1CCB637FC();
      sub_1CCA16C20(v70, (uint64_t)qword_1ED8AD7F8);
      v71 = v32;
      v72 = v32;
      v73 = sub_1CCB637D8();
      v74 = sub_1CCB63D30();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = (uint8_t *)swift_slowAlloc();
        v76 = (void *)swift_slowAlloc();
        v104 = v76;
        *(_DWORD *)v75 = 136315138;
        swift_getErrorValue();
        v77 = sub_1CCB64300();
        v106[0] = sub_1CCA0CB60(v77, v78, (uint64_t *)&v104);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1CC9BF000, v73, v74, "FMDiskIO: Could not save objects to disk %s", v75, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v76, -1, -1);
        MEMORY[0x1D17B214C](v75, -1, -1);

      }
      else
      {

      }
      return;
    }
    v33 = v30;
    v34 = v31;
    v35 = (_QWORD *)v96;
    v36 = v95;
    sub_1CC9EAB74((uint64_t)v35 + *(_QWORD *)(*v35 + 128), (uint64_t)v13, v95);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v13, 1, v94) == 1)
    {
      sub_1CC9C3E84((uint64_t)v13, v36);
      v99 = (void *)v33;
      v98 = v34;
      v37 = (void *)sub_1CCB634B4();
      v38 = (uint64_t *)v35[5];
      v104 = v100;
      v105 = v101;
      swift_bridgeObjectRetain();
      sub_1CCB63A24();
      v39 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      v40 = objc_msgSend(v37, sel_writeToFile_atomically_, v39, 1);

      if ((v40 & 1) != 0)
      {
        v97 = v38;
        v41 = v19;
LABEL_8:
        v42 = objc_msgSend(v41, sel_defaultManager, v88);
        sub_1CCA14E90(qword_1ED8A7FB8);
        inited = swift_initStackObject();
        v44 = (void **)MEMORY[0x1E0CB2AD8];
        *(_OWORD *)(inited + 16) = xmmword_1CCB677E0;
        v45 = *v44;
        *(_QWORD *)(inited + 32) = *v44;
        v46 = (void *)*MEMORY[0x1E0CB2AC0];
        type metadata accessor for FileProtectionType(0);
        *(_QWORD *)(inited + 64) = v47;
        *(_QWORD *)(inited + 40) = v46;
        v48 = v45;
        v49 = v46;
        sub_1CCAC52B4(inited);
        type metadata accessor for FileAttributeKey(0);
        sub_1CC9CAA38((unint64_t *)&unk_1ED8A7EF0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1CCB66964);
        v50 = (void *)sub_1CCB638C8();
        swift_bridgeObjectRelease();
        v104 = v100;
        v105 = v101;
        swift_bridgeObjectRetain();
        sub_1CCB63A24();
        v51 = (void *)sub_1CCB63964();
        swift_bridgeObjectRelease();
        v104 = 0;
        LOBYTE(inited) = objc_msgSend(v42, sel_setAttributes_ofItemAtPath_error_, v50, v51, &v104);

        if ((inited & 1) == 0)
        {
          v69 = v104;
          v32 = (void *)sub_1CCB63400();

          swift_willThrow();
          sub_1CCA1B120((uint64_t)v99, (unint64_t)v98);
          swift_release();
          goto LABEL_21;
        }
        v52 = qword_1ED8AA630;
        v53 = v104;
        if (v52 != -1)
          swift_once();
        v54 = sub_1CCB637FC();
        sub_1CCA16C20(v54, (uint64_t)qword_1ED8AD7F8);
        swift_retain_n();
        v55 = sub_1CCB637D8();
        v56 = sub_1CCB63D48();
        if (!os_log_type_enabled(v55, v56))
        {
          swift_release();
          sub_1CCA1B120((uint64_t)v99, (unint64_t)v98);

          swift_release_n();
          return;
        }
        v57 = (uint8_t *)swift_slowAlloc();
        v58 = swift_slowAlloc();
        v95 = v28;
        v59 = v58;
        v106[0] = v58;
        *(_DWORD *)v57 = 136315138;
        v104 = v100;
        v105 = v101;
        swift_bridgeObjectRetain();
        sub_1CCB63A24();
        v104 = (id)sub_1CCA0CB60((uint64_t)v104, v105, v106);
        sub_1CCB63E44();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v55, v56, "FMDiskIO: Successfully wrote object to disk @ %s", v57, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v59, -1, -1);
        MEMORY[0x1D17B214C](v57, -1, -1);
LABEL_32:
        swift_release();
        sub_1CCA1B120((uint64_t)v99, (unint64_t)v98);

        return;
      }
    }
    else
    {
      sub_1CC9C3EC0((uint64_t)v13, v91, v92);
      v68 = v90;
      sub_1CCB63778();
      v99 = (void *)v33;
      sub_1CC9CAA38(&qword_1EF9E2A48, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21358], MEMORY[0x1E0D21360]);
      v79 = sub_1CCB63370();
      v81 = v80;
      v41 = v19;
      v98 = v34;
      v82 = (void *)sub_1CCB634B4();
      sub_1CCA1B120(v79, v81);
      v83 = *(uint64_t **)(v96 + 40);
      v104 = v100;
      v105 = v101;
      swift_bridgeObjectRetain();
      v97 = v83;
      sub_1CCB63A24();
      v84 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      LODWORD(v79) = objc_msgSend(v82, sel_writeToFile_atomically_, v84, 1);

      (*(void (**)(char *, uint64_t))(v88 + 8))(v68, v89);
      sub_1CC9C3E84(v91, v92);
      if ((_DWORD)v79)
        goto LABEL_8;
    }
    if (qword_1ED8AA630 != -1)
      swift_once();
    v85 = sub_1CCB637FC();
    sub_1CCA16C20(v85, (uint64_t)qword_1ED8AD7F8);
    v55 = sub_1CCB637D8();
    v86 = sub_1CCB63D48();
    if (os_log_type_enabled(v55, v86))
    {
      v87 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v87 = 0;
      _os_log_impl(&dword_1CC9BF000, v55, v86, "FMDiskIO: Could not save objects to disk", v87, 2u);
      MEMORY[0x1D17B214C](v87, -1, -1);
    }
    goto LABEL_32;
  }
  v60 = v27;
  v61 = sub_1CCB63400();

  swift_willThrow();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v62 = sub_1CCB637FC();
  sub_1CCA16C20(v62, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v63 = sub_1CCB637D8();
  v64 = sub_1CCB63D48();
  if (os_log_type_enabled(v63, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc();
    v66 = swift_slowAlloc();
    v99 = (void *)v61;
    *(_DWORD *)v65 = 136315138;
    v106[0] = v66;
    v104 = v100;
    v105 = v101;
    swift_bridgeObjectRetain();
    sub_1CCB63A24();
    v104 = (id)sub_1CCA0CB60((uint64_t)v104, v105, v106);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v63, v64, "FMDiskIO: Could not create directory for content: %s", v65, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v66, -1, -1);
    MEMORY[0x1D17B214C](v65, -1, -1);
    v67 = v99;
  }
  else
  {
    swift_release_n();
    v67 = (void *)v61;
  }

}

uint64_t sub_1CC9E2E8C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CC9E2E98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t i;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](a1);
  v6 = sub_1CCB63BD4();
  swift_bridgeObjectRetain();
  MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF60], v6);
  v7 = sub_1CCB64024();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v8 = sub_1CCB637FC();
  sub_1CCA16C20(v8, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v9 = sub_1CCB637D8();
  v10 = sub_1CCB63D48();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v17 = v4;
    *(_DWORD *)v11 = 134217984;
    v18 = MEMORY[0x1D17B1120](v7, v2);
    v4 = v17;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v9, v10, "FMImageCache: Preloading data for %ld requests.", v11, 0xCu);
    MEMORY[0x1D17B214C](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  if (!MEMORY[0x1D17B1138](v7, v2))
    return swift_bridgeObjectRelease();
  for (i = 0; ; ++i)
  {
    v13 = sub_1CCB63B98();
    sub_1CCB63B5C();
    if ((v13 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * i, v2);
      v14 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_15;
      goto LABEL_10;
    }
    result = sub_1CCB63FD0();
    if (v4 != 8)
      break;
    v18 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 16))(v5, &v18, v2);
    swift_unknownObjectRelease();
    v14 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_15:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
LABEL_10:
    sub_1CCAC1C48((uint64_t)v5, 0, 0);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v14 == MEMORY[0x1D17B1138](v7, v2))
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1CC9E3174(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD v39[3];
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = v1;
  v46 = a1;
  sub_1CCA14E90(&qword_1ED8AA618);
  MEMORY[0x1E0C80A78]();
  v44 = (uint8_t *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_1CCB63D84();
  v42 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78]();
  v41 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCB63D6C();
  MEMORY[0x1E0C80A78]();
  sub_1CCB63868();
  MEMORY[0x1E0C80A78]();
  v5 = sub_1CCB63604();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78]();
  v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(v2 + qword_1ED8A8D70);
  swift_retain();
  sub_1CCB635F8();
  v10 = sub_1CCB635C8();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *v9 = v10;
  v9[1] = v12;
  v13 = qword_1ED8AA238;
  v43 = qword_1ED8AA238;
  sub_1CCB636D0();
  swift_allocObject();
  *(_QWORD *)(v2 + v13) = sub_1CCB636C4();
  v40 = qword_1ED8AA228;
  sub_1CC9F0ECC();
  sub_1CCB63844();
  v48 = MEMORY[0x1E0DEE9D8];
  v39[2] = sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  v39[1] = sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  v14 = *MEMORY[0x1E0DEF8D0];
  v15 = v41;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 104);
  v16(v41, v14, v45);
  *(_QWORD *)(v2 + v40) = sub_1CCB63DB4();
  v42 = qword_1ED8A8D78;
  sub_1CCB63844();
  v48 = MEMORY[0x1E0DEE9D8];
  sub_1CCB63E98();
  v16(v15, v14, v45);
  *(_QWORD *)(v2 + v42) = sub_1CCB63DB4();
  *(_QWORD *)(v2 + qword_1ED8AA240 + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v2 + qword_1ED8AA230) = 0;
  sub_1CCB635A4();
  *(_BYTE *)(v2 + qword_1ED8AD7C0) = 0;
  *(_QWORD *)(v2 + qword_1ED8AD768) = MEMORY[0x1E0DEE9E0];
  v17 = qword_1ED8A8D80;
  *(_QWORD *)(v2 + v17) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D89948]), sel_init);
  swift_release();
  sub_1CCA2491C(v46, (uint64_t)v44);
  swift_retain();
  v18 = sub_1CCB63724();
  v19 = qword_1ED8AA630;
  swift_retain();
  if (v19 != -1)
    swift_once();
  v20 = sub_1CCB637FC();
  sub_1CCA16C20(v20, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v21 = sub_1CCB637D8();
  v22 = sub_1CCB63D48();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v45 = v24;
    *(_DWORD *)v23 = 136315138;
    v48 = v24;
    v44 = v23 + 4;
    v25 = *(_QWORD *)(v18 + qword_1ED8A8D70);
    v26 = *(_QWORD *)(v18 + qword_1ED8A8D70 + 8);
    swift_bridgeObjectRetain();
    v27 = sub_1CC9C6AE4(0xCuLL, v25, v26);
    v29 = v28;
    v31 = v30;
    v33 = v32;
    swift_bridgeObjectRelease();
    v34 = MEMORY[0x1D17B0F34](v27, v29, v31, v33);
    v36 = v35;
    swift_bridgeObjectRelease();
    v47 = sub_1CCA0CB60(v34, v36, &v48);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v21, v22, "FMIPServerInteractionController<%s>.init", v23, 0xCu);
    v37 = v45;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v37, -1, -1);
    MEMORY[0x1D17B214C](v23, -1, -1);

    swift_release();
  }
  else
  {

    swift_release_n();
  }
  sub_1CC9C3E84(v46, &qword_1ED8AA618);
  return v18;
}

uint64_t initializeWithCopy for FMIPBeaconRefreshingPolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1CC9E37B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1CCB63988();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t FMDiskIO.KeyPair.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;

  v29 = a5;
  v34 = sub_1CCB63790();
  v28 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v33 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1CCB6376C();
  v32 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v35 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FMDiskIO.KeyPair.CodingKeys(255, a2, a3, a4);
  MEMORY[0x1D17B2068](&unk_1CCB76F50, v11);
  v38 = sub_1CCB641A4();
  v31 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v13 = (char *)&v28 - v12;
  v30 = type metadata accessor for FMDiskIO.KeyPair(0, a2, a3, a4);
  v14 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v16 = (char *)&v28 - v15;
  sub_1CCA04DDC(a1, a1[3]);
  v37 = v13;
  v17 = v39;
  sub_1CCB643B4();
  v18 = a1;
  if (v17)
    return sub_1CCA01CA0((uint64_t)a1);
  v20 = v30;
  v19 = v31;
  v39 = v14;
  v21 = (uint64_t)v18;
  v22 = v16;
  v23 = v32;
  v24 = v33;
  v25 = v34;
  v41 = 0;
  sub_1CC9CAA38(&qword_1EF9E6A78, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21300], MEMORY[0x1E0D21318]);
  sub_1CCB64180();
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v22, v35, v36);
  v40 = 1;
  sub_1CC9CAA38(qword_1EF9E6A80, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21330], MEMORY[0x1E0D21348]);
  sub_1CCB64180();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v37, v38);
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(&v22[*(int *)(v20 + 44)], v24, v25);
  v26 = v39;
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 16))(v29, v22, v20);
  sub_1CCA01CA0(v21);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v22, v20);
}

uint64_t sub_1CC9E3B10(uint64_t *a1)
{
  uint64_t result;
  unint64_t v2;

  type metadata accessor for FMDiskIO.KeyPair(255, a1[10], a1[11], a1[12]);
  result = sub_1CCB63E2C();
  if (v2 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1CC9E3BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1D17B1FFC](a1, v6, a5);
}

uint64_t type metadata accessor for FMDiskIO.KeyPair(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CC9E3BAC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FMDiskIO.KeyPair);
}

uint64_t sub_1CC9E3BE4(unint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 80);
  swift_bridgeObjectRetain();
  v6 = sub_1CC9E3F78(a1, v5);
  swift_bridgeObjectRelease();
  v7 = v6 ^ 1 | a2;
  if ((v7 & 1) != 0)
  {
    v8 = swift_bridgeObjectRetain();
    v9 = sub_1CC9CBCCC(v8);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 288) = v9;
    swift_bridgeObjectRelease();
    v10 = sub_1CC9FD538(a1);
    v11 = *(_QWORD *)(v2 + 80);
    swift_bridgeObjectRetain();
    v12 = sub_1CC9FE3E4(v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 80) = v12;
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v2 + 80);
    v14 = *(_QWORD *)(v2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = sub_1CC9FDE28(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 80) = v15;
    swift_bridgeObjectRelease();
    v16 = swift_bridgeObjectRetain();
    v17 = sub_1CC9F9BDC(v16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 80) = v17;
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v2 + 80);
    v19 = *(_QWORD *)(v2 + 200);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = sub_1CC9F2D2C(v18, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 80) = v20;
    swift_bridgeObjectRelease();
    v21 = *(_QWORD *)(v2 + 80);
    v22 = *(_QWORD *)(v2 + 216);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = sub_1CC9F26C4(v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 80) = v23;
    swift_bridgeObjectRelease();
    v24 = *(_QWORD *)(v2 + 80);
    v25 = *(_QWORD *)(v2 + 224);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26 = sub_1CC9FCED0(v24, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 80) = v26;
    swift_bridgeObjectRelease();
    v27 = *(_QWORD *)(v2 + 80);
    v28 = *(_QWORD *)(v2 + 232);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = sub_1CC9F338C(v27, v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 80) = v29;
    swift_bridgeObjectRelease();
    v30 = *(_QWORD *)(v2 + 80);
    v31 = *(_QWORD *)(v2 + 208);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32 = sub_1CCAB8778(v30, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 80) = v32;
    swift_bridgeObjectRelease();
    swift_retain();
    v33 = swift_bridgeObjectRetain();
    v34 = sub_1CCAB73FC(v33, (_QWORD *)v2);
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v2 + 80) = v34;
    swift_bridgeObjectRelease();
    v35 = *(_QWORD *)(v2 + 80);
    v36 = *(_QWORD *)(v2 + 304);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37 = sub_1CCAB8E60(v35, v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 80) = v37;
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v2 + 16) & 1) != 0 && *(_BYTE *)(v2 + 24) == 1 && *(_QWORD *)(v2 + 328))
    {
      swift_retain();
      v38 = swift_bridgeObjectRetain();
      sub_1CC9D4D5C(v38, (uint64_t)&unk_1E88F9260, (uint64_t)sub_1CCA207C4, (uint64_t)&unk_1E88F9278);
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  return v7 & 1;
}

uint64_t sub_1CC9E3F78(uint64_t a1, uint64_t a2)
{
  return sub_1CCA03290(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice, (uint64_t (*)(char *, char *))static FMIPDevice.== infix(_:_:));
}

void sub_1CC9E3F8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char isEscapingClosureAtFileLocation;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  _QWORD v33[6];
  uint64_t aBlock;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;

  v2 = sub_1CCB635B0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD7F8);
  v7 = sub_1CCB637D8();
  v8 = sub_1CCB63D48();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1CC9BF000, v7, v8, "FMIPBeaconRefreshingController: Start Refreshing", v9, 2u);
    MEMORY[0x1D17B214C](v9, -1, -1);
  }

  *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_isRefreshing) = 1;
  sub_1CC9CE4D8();
  *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_currentlyRefreshing) = 0;
  *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_nextRefreshQueued) = 0;
  sub_1CCB63514();
  v10 = a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_lastRefreshTime;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v10, v5, v2);
  swift_endAccess();
  *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_callbackInterval) = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_initialCallbackInterval);
  sub_1CC9D22F0();
  sub_1CCA014E8(0, 0);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = a1;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_1CCB4D608;
  *(_QWORD *)(v12 + 24) = v11;
  v38 = sub_1CC9F4530;
  v39 = v12;
  v13 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v35 = 1107296256;
  v36 = sub_1CC9F44AC;
  v37 = &unk_1E89016A0;
  v14 = _Block_copy(&aBlock);
  v15 = _Block_copy(v14);
  v16 = qword_1ED8A8CB8;
  swift_retain();
  swift_retain();
  if (v16 != -1)
    swift_once();
  v17 = qword_1ED8A8CA8;
  swift_unknownObjectRetain();
  v18 = _os_activity_create(&dword_1CC9BF000, "FMIPBeaconRefreshingController.refreshUnknownBeacons", v17, OS_ACTIVITY_FLAG_DEFAULT);
  swift_unknownObjectRelease();
  v19 = _Block_copy(v15);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v19;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_1CCAAB8D8;
  *(_QWORD *)(v21 + 24) = v20;
  v33[4] = sub_1CC9F4530;
  v33[5] = v21;
  v33[0] = v13;
  v33[1] = 1107296256;
  v33[2] = sub_1CC9F44AC;
  v33[3] = &unk_1E8901718;
  v22 = _Block_copy(v33);
  swift_retain();
  swift_release();
  os_activity_apply(v18, v22);
  _Block_release(v22);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v15);
  swift_unknownObjectRelease();
  _Block_release(v14);
  if ((v22 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    swift_release();
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      sub_1CC9F5D88(0, 0);
      sub_1CCB45D78();
      sub_1CC9F186C();
      v24 = OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession;
      v25 = *(void **)(a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession);
      v38 = sub_1CCA20CC4;
      v39 = a1;
      v26 = MEMORY[0x1E0C809B0];
      aBlock = MEMORY[0x1E0C809B0];
      v35 = 1107296256;
      v36 = sub_1CC9C3F04;
      v37 = &unk_1E8901740;
      v27 = _Block_copy(&aBlock);
      swift_retain();
      v28 = v25;
      swift_release();
      objc_msgSend(v28, sel_clientConfigurationWithCompletion_, v27);
      _Block_release(v27);

      v29 = *(void **)(a1 + v24);
      v30 = swift_allocObject();
      swift_weakInit();
      v38 = sub_1CCA20D34;
      v39 = v30;
      aBlock = v26;
      v35 = 1107296256;
      v36 = sub_1CC9EDB54;
      v37 = &unk_1E8901768;
      v31 = _Block_copy(&aBlock);
      v32 = v29;
      swift_release();
      objc_msgSend(v32, sel_startRefreshingSeparationMonitoringState_, v31);
      _Block_release(v31);

      return;
    }
  }
  __break(1u);
}

uint64_t sub_1CC9E44C4()
{
  return sub_1CC9E44E4();
}

uint64_t sub_1CC9E44E4()
{
  void *v0;
  void *v1;
  unsigned int v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v10[5];

  v10[4] = *(id *)MEMORY[0x1E0C80C00];
  v0 = (void *)objc_opt_self();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v1 = (void *)sub_1CCB638C8();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_isValidJSONObject_, v1);

  if (!v2)
    return 0;
  swift_bridgeObjectRetain();
  v3 = (void *)sub_1CCB638C8();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v4 = objc_msgSend(v0, sel_dataWithJSONObject_options_error_, v3, 0, v10);

  v5 = v10[0];
  if (!v4)
  {
    v7 = v5;
    v8 = (void *)sub_1CCB63400();

    swift_willThrow();
    return 0;
  }
  v6 = sub_1CCB634CC();

  return v6;
}

Swift::Void __swiftcall FMIPManager.startRefreshing(subsystems:)(FMIPCore::FMIPManagerSubsystem subsystems)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(_QWORD, _QWORD);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BOOL4 v16;
  double v17;
  double v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  Class isa;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  char *v54;
  char *v55;
  void (*v56)(_QWORD, _QWORD);
  uint64_t v57;
  dispatch_queue_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t aBlock;
  uint64_t v64;
  uint64_t (*v65)(uint64_t);
  void *v66;
  uint64_t (*v67)();
  uint64_t v68;

  v3 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_1CCB63868();
  v6 = *(void (**)(_QWORD, _QWORD))(v60 - 8);
  MEMORY[0x1E0C80A78](v60);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCB63820();
  v58 = *(dispatch_queue_t *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v61 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB635B0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = *(char **)subsystems.rawValue;
  v57 = v1;
  v15 = v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_stopRefreshTimestamp;
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v15, 1, v11))
  {
    v16 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
    sub_1CCB6355C();
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v16 = v18 > -60.0;
  }
  if (qword_1ED8AA630 != -1)
    swift_once();
  v19 = sub_1CCB637FC();
  sub_1CCA16C20(v19, (uint64_t)qword_1ED8AD7F8);
  v20 = sub_1CCB637D8();
  v21 = sub_1CCB63D48();
  v22 = os_log_type_enabled(v20, v21);
  v55 = v5;
  if (v22)
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v56 = v6;
    v25 = v24;
    *(_DWORD *)v23 = 136315138;
    aBlock = v24;
    if (v16)
      v26 = 0xD000000000000014;
    else
      v26 = 0;
    if (v16)
      v27 = 0x80000001CCB7ADC0;
    else
      v27 = 0xE000000000000000;
    v62 = sub_1CCA0CB60(v26, v27, &aBlock);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v20, v21, "FMIPManager: start refreshing %s", v23, 0xCu);
    swift_arrayDestroy();
    v28 = v25;
    v6 = v56;
    MEMORY[0x1D17B214C](v28, -1, -1);
    MEMORY[0x1D17B214C](v23, -1, -1);
  }

  v29 = v57;
  v30 = *(_QWORD *)(v57 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
  v31 = *(void **)(v30 + 72);
  swift_retain();
  v32 = v31;
  v33 = v61;
  sub_1CCB63814();
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = v30;
  *(_BYTE *)(v34 + 24) = v16;
  v35 = v29;
  v67 = sub_1CCA22CBC;
  v68 = v34;
  aBlock = MEMORY[0x1E0C809B0];
  v64 = 1107296256;
  v65 = sub_1CCA00C38;
  v66 = &unk_1E88F7048;
  v36 = _Block_copy(&aBlock);
  swift_retain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v8, v33, v36);
  _Block_release(v36);

  v37 = v60;
  v56 = (void (*)(_QWORD, _QWORD))*((_QWORD *)v6 + 1);
  v56(v8, v60);
  isa = v58[1].isa;
  ((void (*)(char *, uint64_t))isa)(v33, v9);
  swift_release();
  swift_release();
  v39 = (char)v59;
  if ((v59 & 1) != 0
    && (*(_BYTE *)(v35 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isItemsSnapshotMode) & 1) == 0)
  {
    v40 = *(_QWORD *)(v35 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_refreshingController);
    if (v40)
    {
      v58 = *(dispatch_queue_t *)(v40 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_refreshQueue);
      v41 = swift_allocObject();
      *(_QWORD *)(v41 + 16) = sub_1CCA21B3C;
      *(_QWORD *)(v41 + 24) = v40;
      v67 = sub_1CC9F4530;
      v68 = v41;
      aBlock = MEMORY[0x1E0C809B0];
      v64 = 1107296256;
      v65 = sub_1CC9F44AC;
      v66 = &unk_1E88F7138;
      v42 = v8;
      v43 = _Block_copy(&aBlock);
      swift_retain_n();
      swift_retain();
      swift_release();
      dispatch_sync(v58, v43);
      v44 = v43;
      v8 = v42;
      _Block_release(v44);
      LOBYTE(v42) = swift_isEscapingClosureAtFileLocation();
      swift_release_n();
      swift_release();
      if ((v42 & 1) != 0)
      {
        __break(1u);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v35 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isRefreshingDevices) = 1;
  }
  if ((v39 & 3) == 0
    || (*(_BYTE *)(v35 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isDevicesSnapshotMode) & 1) != 0
    || (*(_BYTE *)(v35 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isItemsSnapshotMode) & 1) != 0)
  {
    goto LABEL_24;
  }
  v59 = v8;
  v45 = *(_QWORD *)(v35 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconRefreshingController);
  v46 = *(NSObject **)(v45 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshQueue);
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = sub_1CCA20D3C;
  *(_QWORD *)(v47 + 24) = v45;
  v67 = sub_1CC9F4530;
  v68 = v47;
  aBlock = MEMORY[0x1E0C809B0];
  v64 = 1107296256;
  v65 = sub_1CC9F44AC;
  v66 = &unk_1E88F70C0;
  v48 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  dispatch_sync(v46, v48);
  _Block_release(v48);
  LOBYTE(v46) = swift_isEscapingClosureAtFileLocation();
  swift_release_n();
  swift_release();
  if ((v46 & 1) == 0)
  {
    v49 = *(_QWORD *)(v35 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconSharingController);
    v50 = sub_1CCB63C04();
    v51 = (uint64_t)v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v55, 1, 1, v50);
    v52 = (_QWORD *)swift_allocObject();
    v52[2] = 0;
    v52[3] = 0;
    v52[4] = v49;
    swift_retain();
    sub_1CCA96BE8(v51, (uint64_t)&unk_1EF9E2830, (uint64_t)v52);
    swift_release();
    *(_BYTE *)(v35 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isRefreshingItems) = 1;
    swift_retain();
    sub_1CC9CD9F0();
    swift_release();
    objc_msgSend(*(id *)(*(_QWORD *)(v35 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_locationController)+ OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_locationManager), sel_startUpdatingLocation);
    v8 = v59;
    v37 = v60;
LABEL_24:
    v67 = sub_1CCA242B0;
    v68 = v35;
    aBlock = MEMORY[0x1E0C809B0];
    v64 = 1107296256;
    v65 = sub_1CCA00C38;
    v66 = &unk_1E88F7070;
    v53 = _Block_copy(&aBlock);
    swift_retain();
    sub_1CCB63844();
    v62 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    v54 = v61;
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v8, v54, v53);
    _Block_release(v53);
    ((void (*)(char *, uint64_t))isa)(v54, v9);
    v56(v8, v37);
    swift_release();
    return;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_1CC9E4ED8(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  id v5;
  char v6;
  _OWORD v8[2];

  if (a3)
  {
    v4 = a1;
    swift_unknownObjectRetain();
    sub_1CCB63E80();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    v5 = a1;
  }
  v6 = CLLocation.isEqual(_:)((uint64_t)v8);

  sub_1CC9E4F4C((uint64_t)v8);
  return v6 & 1;
}

uint64_t sub_1CC9E4F4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CCA14E90(&qword_1ED8AA610);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CLLocation.isEqual(_:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;
  id v30;
  char v31;
  void (*v32)(char *, uint64_t);
  uint64_t v34;
  id v35;
  _BYTE v36[24];
  uint64_t v37;

  v3 = sub_1CCB635B0();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v34 - v8;
  sub_1CC9E51FC(a1, (uint64_t)v36);
  if (!v37)
  {
    sub_1CC9E4F4C((uint64_t)v36);
    goto LABEL_12;
  }
  sub_1CC9C30A8(0, (unint64_t *)&qword_1EF9E2898);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    v31 = 0;
    return v31 & 1;
  }
  v10 = v35;
  objc_msgSend(v35, sel_coordinate);
  v12 = v11;
  objc_msgSend(v1, sel_coordinate);
  if (v12 != v13)
    goto LABEL_11;
  objc_msgSend(v10, sel_coordinate);
  v15 = v14;
  objc_msgSend(v1, sel_coordinate);
  if (v15 != v16)
    goto LABEL_11;
  objc_msgSend(v10, sel_altitude);
  v18 = v17;
  objc_msgSend(v1, sel_altitude);
  if (v18 != v19)
    goto LABEL_11;
  objc_msgSend(v10, sel_course);
  v21 = v20;
  objc_msgSend(v1, sel_course);
  if (v21 != v22
    || (objc_msgSend(v10, sel_horizontalAccuracy), v24 = v23, objc_msgSend(v1, sel_horizontalAccuracy), v24 != v25)
    || (objc_msgSend(v10, sel_verticalAccuracy), v27 = v26, objc_msgSend(v1, sel_verticalAccuracy), v27 != v28))
  {
LABEL_11:

    goto LABEL_12;
  }
  v29 = objc_msgSend(v10, sel_timestamp);
  sub_1CCB63580();

  v30 = objc_msgSend(v1, sel_timestamp);
  sub_1CCB63580();

  v31 = sub_1CCB63574();
  v32 = *(void (**)(char *, uint64_t))(v4 + 8);
  v32(v7, v3);
  v32(v9, v3);
  return v31 & 1;
}

uint64_t sub_1CC9E51FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8AA610);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1CC9E5244(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unsigned __int8 v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  id v63;
  id v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  os_log_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;

  v83 = a2;
  v81 = sub_1CCB63748();
  v80 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81);
  v82 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_1CCB637A8();
  v79 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86);
  v85 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9E2AB8);
  MEMORY[0x1E0C80A78](v5);
  v88 = (uint64_t)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1EF9E2AC0);
  v87 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_1CCB63490();
  v10 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v89 = v7;
  v84 = v9;
  v13 = sub_1CCB637FC();
  v91 = sub_1CCA16C20(v13, (uint64_t)qword_1ED8AD7F8);
  v14 = sub_1CCB637D8();
  v15 = sub_1CCB63D48();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1CC9BF000, v14, v15, "FMDiskIO: read from disk", v16, 2u);
    MEMORY[0x1D17B214C](v16, -1, -1);
  }

  v17 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v18 = a1[3];
  v19 = a1[4];
  v21 = a1[5];
  v20 = a1[6];
  *(_QWORD *)&v92 = v18;
  *((_QWORD *)&v92 + 1) = v19;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  v22 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v23 = objc_msgSend(v17, sel_fileExistsAtPath_, v22);

  if ((v23 & 1) == 0)
  {
    v76 = v20;
    v77 = v21;
    swift_retain_n();
    v24 = sub_1CCB637D8();
    v25 = sub_1CCB63D30();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v98 = v27;
      *(_DWORD *)v26 = 136315138;
      *(_QWORD *)&v92 = v18;
      *((_QWORD *)&v92 + 1) = v19;
      swift_bridgeObjectRetain();
      sub_1CCB63A24();
      *(_QWORD *)&v92 = sub_1CCA0CB60(v92, *((unint64_t *)&v92 + 1), &v98);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v24, v25, "FMDiskIO: Disk archive does not exist at: %s", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v27, -1, -1);
      MEMORY[0x1D17B214C](v26, -1, -1);

      return;
    }

    goto LABEL_25;
  }
  v78 = a1;
  *(_QWORD *)&v92 = v18;
  *((_QWORD *)&v92 + 1) = v19;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  sub_1CCB63424();
  swift_bridgeObjectRelease();
  v28 = sub_1CCB6349C();
  v30 = v29;
  v31 = v18;
  v75 = 0;
  v32 = v19;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v90);
  swift_retain();
  sub_1CCA1B164(v28, v30);
  swift_retain();
  sub_1CCA1B164(v28, v30);
  v33 = sub_1CCB637D8();
  v34 = sub_1CCB63D48();
  v35 = v34;
  v36 = os_log_type_enabled(v33, v34);
  v37 = v30;
  v77 = v21;
  v76 = v20;
  v74 = v31;
  if (v36)
  {
    v38 = swift_slowAlloc();
    LODWORD(v90) = v35;
    v39 = v38;
    v73 = swift_slowAlloc();
    v98 = v73;
    *(_DWORD *)v39 = 136315394;
    v40 = v32;
    v72 = v33;
    *(_QWORD *)&v92 = v31;
    *((_QWORD *)&v92 + 1) = v32;
    swift_bridgeObjectRetain();
    sub_1CCB63A24();
    *(_QWORD *)&v92 = sub_1CCA0CB60(v92, *((unint64_t *)&v92 + 1), &v98);
    sub_1CCB63E44();
    v41 = v78;
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v39 + 12) = 2080;
    v42 = sub_1CCB634A8();
    *(_QWORD *)&v92 = sub_1CCA0CB60(v42, v43, &v98);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA1B120(v28, v30);
    sub_1CCA1B120(v28, v30);
    v44 = v72;
    _os_log_impl(&dword_1CC9BF000, v72, (os_log_type_t)v90, "FMDiskIO: file: %s data: %s", (uint8_t *)v39, 0x16u);
    v45 = v73;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v45, -1, -1);
    v46 = v39;
    v37 = v30;
    MEMORY[0x1D17B214C](v46, -1, -1);

    v47 = v86;
  }
  else
  {
    v41 = v78;
    swift_release_n();
    sub_1CCA1B120(v28, v30);
    sub_1CCA1B120(v28, v30);

    v47 = v86;
    v40 = v32;
  }
  v48 = v85;
  v49 = (uint64_t)v84;
  sub_1CCB63364();
  swift_allocObject();
  sub_1CCB63358();
  v50 = v88;
  sub_1CC9EAB74((uint64_t)v41 + *(_QWORD *)(*v41 + 128), v88, &qword_1EF9E2AB8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v50, 1, v89) == 1)
  {
    sub_1CC9C3E84(v50, &qword_1EF9E2AB8);
    sub_1CCA245F8();
    v51 = v75;
    sub_1CCB6334C();
    if (v51)
    {
      v90 = v28;
      goto LABEL_18;
    }
    sub_1CCA1B120(v28, v37);
    swift_release();
LABEL_20:
    v52 = v97;
    v53 = v83;
    v54 = *v83;
    v55 = v83[1];
    v56 = v93;
    *(_OWORD *)v83 = v92;
    *((_OWORD *)v53 + 1) = v56;
    v57 = v95;
    *((_OWORD *)v53 + 2) = v94;
    *((_OWORD *)v53 + 3) = v57;
    *((_OWORD *)v53 + 4) = v96;
    v53[10] = v52;
    sub_1CCA24588(v54, v55);
    return;
  }
  sub_1CC9C3EC0(v50, v49, &qword_1EF9E2AC0);
  sub_1CC9CAA38(&qword_1EF9E2B08, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21358], MEMORY[0x1E0D21368]);
  v90 = v28;
  v51 = v75;
  sub_1CCB6334C();
  if (!v51)
  {
    v58 = v82;
    sub_1CCB63754();
    v59 = v58;
    v60 = sub_1CCB6379C();
    v62 = v61;
    (*(void (**)(char *, uint64_t))(v80 + 8))(v59, v81);
    sub_1CCA245F8();
    sub_1CCB6334C();
    swift_release();
    sub_1CCA1B120(v60, v62);
    sub_1CCA1B120(v90, v37);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v48, v47);
    sub_1CC9C3E84(v49, &qword_1EF9E2AC0);
    goto LABEL_20;
  }
  sub_1CC9C3E84(v49, &qword_1EF9E2AC0);
LABEL_18:
  swift_release();
  swift_retain();
  v63 = v51;
  swift_retain();
  v64 = v51;
  v65 = sub_1CCB637D8();
  v66 = sub_1CCB63D30();
  if (os_log_type_enabled(v65, v66))
  {
    v67 = swift_slowAlloc();
    v68 = v37;
    v69 = swift_slowAlloc();
    v98 = v69;
    *(_DWORD *)v67 = 136315394;
    swift_getErrorValue();
    v70 = sub_1CCB64300();
    *(_QWORD *)&v92 = sub_1CCA0CB60(v70, v71, &v98);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    *(_WORD *)(v67 + 12) = 2080;
    *(_QWORD *)&v92 = v74;
    *((_QWORD *)&v92 + 1) = v40;
    swift_bridgeObjectRetain();
    sub_1CCB63A24();
    *(_QWORD *)&v92 = sub_1CCA0CB60(v92, *((unint64_t *)&v92 + 1), &v98);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v65, v66, "FMDiskIO: Could not decode the disk archive: %s, %s", (uint8_t *)v67, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v69, -1, -1);
    MEMORY[0x1D17B214C](v67, -1, -1);

    sub_1CCA1B120(v90, v68);
    return;
  }
  sub_1CCA1B120(v90, v37);

LABEL_25:
  swift_release_n();
}

_QWORD *FMImageCache.init(converter:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  v23 = a1;
  v24 = a2;
  v4 = sub_1CCB63D84();
  v21 = *(_QWORD *)(v4 - 8);
  v22 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63D6C();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v7);
  v9 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v9);
  v2[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3828]), sel_init);
  sub_1CC9F0ECC();
  sub_1CCB6385C();
  v25 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, v8, MEMORY[0x1E0DEF828]);
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v6, *MEMORY[0x1E0DEF8D0], v22);
  v2[3] = sub_1CCB63DB4();
  swift_getAssociatedConformanceWitness();
  v2[4] = sub_1CCB638BC();
  sub_1CCA19B38(&qword_1EF9DF470);
  sub_1CCB6439C();
  swift_getFunctionTypeMetadata1();
  sub_1CCB63BD4();
  v2[5] = sub_1CCB638B0();
  v2[6] = sub_1CCB638B0();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v10 = sub_1CCB637FC();
  sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
  v11 = sub_1CCB637D8();
  v12 = sub_1CCB63D48();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1CC9BF000, v11, v12, "FMImageCache: initialized", v13, 2u);
    MEMORY[0x1D17B214C](v13, -1, -1);
  }

  v14 = v24;
  v3[7] = v23;
  v3[8] = v14;
  v15 = (void *)v3[2];
  swift_retain();
  v16 = v15;
  v17 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  objc_msgSend(v16, sel_setName_, v17);

  v18 = (id)v3[2];
  objc_msgSend(v18, sel_setMaxConcurrentOperationCount_, 3);

  swift_release();
  return v3;
}

uint64_t _s8FMIPCore27FMIPDeviceImageCacheRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  char v14;
  uint64_t result;
  char v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unsigned __int8 v23;
  char v24;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 48);
  v7 = *(double *)(a1 + 56);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v12 = *(unsigned __int8 *)(a2 + 48);
  v24 = *(_BYTE *)(a1 + 49);
  v13 = *(double *)(a2 + 56);
  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
  {
    v14 = sub_1CCB642A0();
    result = 0;
    if ((v14 & 1) == 0)
      return result;
  }
  if (v2 != v8 || v4 != v9)
  {
    v16 = sub_1CCB642A0();
    result = 0;
    if ((v16 & 1) == 0)
      return result;
  }
  if (v5)
  {
    if (v10)
    {
      if (v3 != v11 || v5 != v10)
      {
        v17 = sub_1CCB642A0();
        result = 0;
        if ((v17 & 1) == 0)
          return result;
      }
      goto LABEL_15;
    }
    return 0;
  }
  if (v10)
    return 0;
LABEL_15:
  if (v6)
    v18 = 0x786F626F666E69;
  else
    v18 = 0x696C656372756F73;
  if (v6)
    v19 = 0xE700000000000000;
  else
    v19 = 0xEA00000000007473;
  if (v12)
    v20 = 0x786F626F666E69;
  else
    v20 = 0x696C656372756F73;
  if (v12)
    v21 = 0xE700000000000000;
  else
    v21 = 0xEA00000000007473;
  if (v18 == v20 && v19 == v21)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v22 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v22 & 1) == 0)
      return result;
  }
  sub_1CC9E6554(v24);
  return v23 & (v7 == v13);
}

void sub_1CC9E6554(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CC9E659C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CC9E6688 + 4 * byte_1CCB7219F[a2]))(0x656E696C66666FLL);
}

uint64_t sub_1CC9E6688(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656E696C66666FLL && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CC9E67A8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  FMIPLockMetadata.init(from:)(a1, a2);
}

uint64_t sub_1CC9E67BC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FMIPFeatures.init(from:)(a1, a2);
}

uint64_t sub_1CC9E67D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPDevice.init(from:)(a1, a2);
}

uint64_t sub_1CC9E67E4()
{
  uint64_t v0;

  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CC9E6BA4();
  sub_1CCB63A9C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  if (*(_QWORD *)(v0 + 24))
    swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCA14E90(&qword_1EF9E0658);
  sub_1CCB64060();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 60;
}

unint64_t sub_1CC9E6BA4()
{
  unint64_t result;

  result = qword_1ED8A7E60;
  if (!qword_1ED8A7E60)
  {
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEB460], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1ED8A7E60);
  }
  return result;
}

void sub_1CC9E6BE8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  char v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPGarbageCollector: verifyingAccount...", v5, 2u);
    MEMORY[0x1D17B214C](v5, -1, -1);
  }

  v6 = (void *)v1[4];
  v7 = objc_msgSend(v6, sel_aa_primaryAppleAccount);
  if (v7)
  {
    v8 = v7;
    v54 = v6;
    v55 = objc_msgSend(v7, sel_aa_personID);
    if (v55)
    {
      v57 = sub_1CCB63988();
      v58 = v9;
    }
    else
    {
      v57 = 0;
      v58 = 0;
    }
    v13 = (void *)objc_opt_self();
    v14 = (void *)sub_1CCB63964();
    v15 = (void *)sub_1CCB63964();
    v53 = v13;
    v16 = objc_msgSend(v13, sel_stringForKey_inDomain_, v14, v15);

    if (v16)
    {
      v56 = sub_1CCB63988();
      v18 = v17;

    }
    else
    {
      v56 = 0;
      v18 = 0;
    }
    v59 = v8;
    v19 = sub_1CCB637D8();
    v20 = sub_1CCB63D48();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v21 = 138412290;
      v23 = v59;
      sub_1CCB63E44();
      *v22 = v8;

      _os_log_impl(&dword_1CC9BF000, v19, v20, "FMIPGarbageCollector: account %@", v21, 0xCu);
      sub_1CCA14E90(&qword_1ED8A8E00);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v22, -1, -1);
      MEMORY[0x1D17B214C](v21, -1, -1);
    }
    else
    {

      v19 = v59;
    }

    swift_bridgeObjectRetain_n();
    v24 = v58;
    swift_bridgeObjectRetain_n();
    v25 = sub_1CCB637D8();
    v26 = sub_1CCB63D48();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc();
      v28 = swift_slowAlloc();
      v60 = v28;
      *(_DWORD *)v27 = 136315394;
      swift_bridgeObjectRetain();
      sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
      v29 = sub_1CCB639AC();
      sub_1CCA0CB60(v29, v30, &v60);
      v24 = v58;
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      swift_bridgeObjectRetain();
      v31 = sub_1CCB639AC();
      sub_1CCA0CB60(v31, v32, &v60);
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v25, v26, "FMIPGarbageCollector: verifyingAccount new: %s previous: %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v28, -1, -1);
      MEMORY[0x1D17B214C](v27, -1, -1);

      v33 = v54;
      if (v58)
        goto LABEL_20;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v33 = v54;
      if (v58)
      {
LABEL_20:
        if (v18)
        {
          if (v57 == v56 && v24 == v18)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_30:
            v37 = -[NSObject aa_fmipAccount](v59, sel_aa_fmipAccount);
            v38 = objc_msgSend(v33, sel_credentialForAccount_, v37);
            v39 = v38;
            if (v38
              && (v40 = objc_msgSend(v38, sel_credentialItemForKey_, *MEMORY[0x1E0C8F1F0])) != 0)
            {

              if (v37)
              {
                v41 = objc_msgSend(v37, sel_identifier);
                if (v41)
                {
                  v42 = v41;
                  v43 = sub_1CCB63988();
                  v45 = v44;

                }
                else
                {
                  v43 = 0;
                  v45 = 0;
                }
                v50 = v53;
              }
              else
              {
                v43 = 0;
                v45 = 0;
                v50 = v53;
              }
              v1[6] = v43;
              v1[7] = v45;
              swift_bridgeObjectRelease();
              v51 = (void *)sub_1CCB63964();
              v52 = (void *)sub_1CCB63964();
              objc_msgSend(v50, sel_setString_forKey_inDomain_, v55, v51, v52);

            }
            else
            {

              v46 = sub_1CCB637D8();
              v47 = sub_1CCB63D48();
              if (os_log_type_enabled(v46, v47))
              {
                v48 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v48 = 0;
                _os_log_impl(&dword_1CC9BF000, v46, v47, "FMIPGarbageCollector: purging cache because the token is missing", v48, 2u);
                MEMORY[0x1D17B214C](v48, -1, -1);
              }

              v1[6] = 0;
              v1[7] = 0;
              swift_bridgeObjectRelease();
              sub_1CCAD43C4();

            }
            return;
          }
          v49 = sub_1CCB642A0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v49 & 1) != 0)
            goto LABEL_30;
LABEL_27:
          v34 = sub_1CCB637D8();
          v35 = sub_1CCB63D48();
          if (os_log_type_enabled(v34, v35))
          {
            v36 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v36 = 0;
            _os_log_impl(&dword_1CC9BF000, v34, v35, "FMIPGarbageCollector: purging cache because person id are not matching.", v36, 2u);
            MEMORY[0x1D17B214C](v36, -1, -1);
          }

          sub_1CCAD43C4();
          goto LABEL_30;
        }
LABEL_26:
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
    }
    if (!v18)
      goto LABEL_30;
    goto LABEL_26;
  }
  v10 = sub_1CCB637D8();
  v11 = sub_1CCB63D30();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPGarbageCollector: error retrieving primary account", v12, 2u);
    MEMORY[0x1D17B214C](v12, -1, -1);
  }

  sub_1CCAD43C4();
}

void sub_1CC9E7420(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t p_type;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint8_t *v50;
  _QWORD *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  id v56;
  NSObject *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  void *v71;
  id v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  id v81;
  uint64_t v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  char v89;
  id v90;
  id v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _BOOL8 v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void *v107;
  unsigned __int16 v108;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v110;
  void (*v111)(uint64_t, char *);
  id v112;
  char v113;
  uint64_t v114;
  char v115;
  id v116;
  uint64_t v117;
  char v118;
  id v119;
  id v120;
  id v121;
  unint64_t v122;
  char v123;
  char v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  char **v128;
  id v129;
  void *v130;
  id v131;
  id v132;
  void *v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char **v139;
  uint64_t v140;
  void (*v141)(_QWORD, _QWORD, _QWORD);
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t inited;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(char *, uint64_t, uint64_t);
  char *v155;
  char *v156;
  void (*v157)(char *, char *, uint64_t);
  uint64_t v158;
  uint64_t i;
  id v160;
  void *v161;
  id v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  id v167;
  void *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  NSObject *v177;
  os_log_type_t v178;
  uint8_t *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  void (*v183)(char *, uint64_t);
  uint64_t v184;
  char *v185;
  NSObject *v186;
  os_log_type_t v187;
  uint8_t *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  uint8_t *v194;
  char *v195;
  uint8_t *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  uint64_t updated;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  _QWORD *v211;
  void (*v212)(char *, uint64_t, uint64_t);
  unint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t aBlock[3];
  void *v223;
  uint64_t v224;
  void *v225;
  unint64_t v226;

  v215 = a1;
  v2 = sub_1CCA14E90(&qword_1ED8A7130);
  v3 = MEMORY[0x1E0C80A78](v2);
  v205 = (char *)&v193 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v204 = (char *)&v193 - v5;
  updated = type metadata accessor for FMIPItemUpdateType(0);
  MEMORY[0x1E0C80A78](updated);
  v203 = (char *)&v193 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v8 = MEMORY[0x1E0C80A78](v7);
  v211 = (uint64_t *)((char *)&v193 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v8);
  v210 = (uint64_t)&v193 - v10;
  v11 = sub_1CCA14E90(&qword_1EF9E6600);
  v12 = *(_QWORD *)(v11 - 8);
  p_type = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x1E0C80A78](v11);
  v214 = (char *)&v193 - ((p_type + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v193 - v15;
  v216 = sub_1CCB63604();
  v219 = *(_QWORD *)(v216 - 8);
  v17 = MEMORY[0x1E0C80A78](v216);
  v19 = (char *)&v193 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v17);
  v199 = (char *)&v193 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (uint64_t)&v193 - v23;
  v25 = MEMORY[0x1E0C80A78](v22);
  v217 = (char *)&v193 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v218 = (char *)&v193 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (uint64_t)&v193 - v30;
  MEMORY[0x1E0C80A78](v29);
  v209 = (char *)&v193 - v32;
  v207 = sub_1CCB635B0();
  v206 = *(_QWORD *)(v207 - 8);
  v33 = MEMORY[0x1E0C80A78](v207);
  v201 = (char *)&v193 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0C80A78](v33);
  v200 = (char *)&v193 - v36;
  MEMORY[0x1E0C80A78](v35);
  v208 = (char *)&v193 - v37;
  v38 = sub_1CCB631E4();
  v223 = (void *)v38;
  v224 = sub_1CC9CAA38(&qword_1ED8A8B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
  v39 = sub_1CCA01CC0(aBlock);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v39, *MEMORY[0x1E0D21250], v38);
  v40 = MEMORY[0x1D17B0748](aBlock);
  sub_1CCA01CA0((uint64_t)aBlock);
  if ((v40 & 1) == 0
    || v1[OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_shouldUseBeaconsOptimizationSPI] != 1)
  {
    if (qword_1ED8AA630 != -1)
      goto LABEL_56;
    goto LABEL_8;
  }
  v198 = v1;
  v195 = v19;
  sub_1CCB635A4();
  sub_1CCB635F8();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v41 = sub_1CCB637FC();
  v42 = sub_1CCA16C20(v41, (uint64_t)qword_1ED8AD7F8);
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v43(v16, v215, v11);
  v197 = v42;
  v44 = sub_1CCB637D8();
  v45 = sub_1CCB63D24();
  if (os_log_type_enabled(v44, v45))
  {
    v213 = (unint64_t)v44;
    v46 = (uint8_t *)swift_slowAlloc();
    v47 = swift_slowAlloc();
    v212 = v43;
    v48 = (_QWORD *)v47;
    v196 = v46;
    *(_DWORD *)v46 = 138412290;
    v194 = v46 + 4;
    v49 = sub_1CCB640CC();
    aBlock[0] = v49;
    sub_1CCB63E44();
    *v48 = v49;
    v44 = v213;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    v50 = v196;
    _os_log_impl(&dword_1CC9BF000, v44, v45, "FMIPBeaconRefreshingController: beacons diff received %@", v196, 0xCu);
    sub_1CCA14E90(&qword_1ED8A8E00);
    swift_arrayDestroy();
    v51 = v48;
    v43 = v212;
    MEMORY[0x1D17B214C](v51, -1, -1);
    MEMORY[0x1D17B214C](v50, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  }

  v226 = MEMORY[0x1E0DEE9D8];
  v56 = v198;
  v57 = *(NSObject **)&v198[OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshQueue];
  v58 = v214;
  v43(v214, v215, v11);
  v59 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v60 = swift_allocObject();
  *(_QWORD *)(v60 + 16) = &v226;
  *(_QWORD *)(v60 + 24) = v56;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v60 + v59, v58, v11);
  v61 = swift_allocObject();
  *(_QWORD *)(v61 + 16) = sub_1CCA20D00;
  *(_QWORD *)(v61 + 24) = v60;
  v194 = (uint8_t *)v60;
  v224 = (uint64_t)sub_1CC9F4530;
  v225 = (void *)v61;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CC9F44AC;
  v223 = &unk_1E8900F20;
  v62 = _Block_copy(aBlock);
  v63 = v225;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v57, v62);
  _Block_release(v62);
  LOBYTE(v57) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v57 & 1) != 0)
  {
    __break(1u);
    goto LABEL_58;
  }
  v64 = sub_1CCB637D8();
  LODWORD(v56) = sub_1CCB63D48();
  if (!os_log_type_enabled((os_log_t)v64, (os_log_type_t)v56))
    goto LABEL_28;
  v65 = swift_slowAlloc();
  v63 = (void *)swift_slowAlloc();
  aBlock[0] = (uint64_t)v63;
  *(_DWORD *)v65 = 136315138;
  swift_beginAccess();
  p_type = v226;
  v66 = (char *)v216;
  if (v226 >> 62)
    goto LABEL_152;
  v67 = *(_QWORD *)((v226 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    v215 = (uint64_t)v63;
    if (v67)
    {
      LODWORD(v213) = (_DWORD)v56;
      v214 = (char *)v65;
      v221 = (char *)MEMORY[0x1E0DEE9D8];
      sub_1CCA639D4(0, v67 & ~(v67 >> 63), 0);
      if (v67 < 0)
      {
        __break(1u);
LABEL_154:
        sub_1CCB642DC();
        __break(1u);
        return;
      }
      v68 = 0;
      v69 = (uint64_t)v221;
      do
      {
        if ((p_type & 0xC000000000000001) != 0)
          v70 = (id)MEMORY[0x1D17B154C](v68, p_type);
        else
          v70 = *(id *)(p_type + 8 * v68 + 32);
        v71 = v70;
        v72 = objc_msgSend(v70, sel_identifier);
        sub_1CCB635EC();

        v221 = (char *)v69;
        v74 = *(_QWORD *)(v69 + 16);
        v73 = *(_QWORD *)(v69 + 24);
        if (v74 >= v73 >> 1)
        {
          sub_1CCA639D4(v73 > 1, v74 + 1, 1);
          v69 = (uint64_t)v221;
        }
        ++v68;
        *(_QWORD *)(v69 + 16) = v74 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v219 + 32))(v69+ ((*(unsigned __int8 *)(v219 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v219 + 80))+ *(_QWORD *)(v219 + 72) * v74, v31, v216);
      }
      while (v67 != v68);
      swift_bridgeObjectRelease();
      v66 = (char *)v216;
      v65 = (uint64_t)v214;
      LODWORD(v56) = v213;
    }
    else
    {
      swift_bridgeObjectRelease();
      v69 = MEMORY[0x1E0DEE9D8];
    }
    v63 = (void *)MEMORY[0x1D17B10B4](v69, v66);
    v76 = v75;
    swift_bridgeObjectRelease();
    v221 = (char *)sub_1CCA0CB60((uint64_t)v63, v76, aBlock);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, (os_log_t)v64, (os_log_type_t)v56, "FMIPBeaconRefreshingController: beacons received %s", (uint8_t *)v65, 0xCu);
    v77 = v215;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v77, -1, -1);
    MEMORY[0x1D17B214C](v65, -1, -1);
LABEL_28:

    v12 = (uint64_t)v217;
    swift_beginAccess();
    v31 = v226;
    if (v226 >> 62)
      break;
    v78 = *(_QWORD *)((v226 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v78)
      goto LABEL_30;
LABEL_62:
    v215 = MEMORY[0x1E0DEE9E0];
LABEL_63:
    swift_bridgeObjectRelease();
    v105 = v226;
    v66 = (char *)v216;
    if (v226 >> 62)
    {
      if ((v226 & 0x8000000000000000) != 0)
        v64 = v226;
      else
        v64 = v226 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v65 = sub_1CCB64090();
      if (v65)
      {
LABEL_65:
        if (v65 >= 1)
        {
          v106 = 0;
          v212 = (void (*)(char *, uint64_t, uint64_t))(v105 & 0xC000000000000001);
          v31 = MEMORY[0x1E0DEE9E0];
          v217 = (char *)MEMORY[0x1E0DEE9E0];
          v218 = (char *)MEMORY[0x1E0DEE9E0];
          v214 = (char *)v105;
          v213 = v65;
          p_type = (uint64_t)&stru_1E8912FF0.type;
          while (1)
          {
            if (v212)
              v119 = (id)MEMORY[0x1D17B154C](v106, v105);
            else
              v119 = *(id *)(v105 + 8 * v106 + 32);
            v63 = v119;
            v120 = objc_msgSend(v119, sel_identifier);
            sub_1CCB635EC();

            v121 = objc_msgSend(v63, sel_accessoryProductInfo);
            if (v121)
            {
              v107 = v121;
              v108 = (unsigned __int16)objc_msgSend(v121, sel_capabilities);

              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v221 = (char *)v31;
              sub_1CCAEB7E0((v108 & 0x400) != 0, v12, isUniquelyReferenced_nonNull_native);
              v110 = (uint64_t)v221;
            }
            else
            {
              swift_bridgeObjectRetain();
              v122 = sub_1CCAC8D64(v12);
              v124 = v123;
              swift_bridgeObjectRelease();
              if ((v124 & 1) == 0)
              {
                v110 = v31;
                goto LABEL_69;
              }
              v125 = swift_isUniquelyReferenced_nonNull_native();
              v221 = (char *)v31;
              if (!v125)
              {
                sub_1CCAEDA2C();
                v31 = (uint64_t)v221;
              }
              (*(void (**)(unint64_t, char *))(v219 + 8))(*(_QWORD *)(v31 + 48) + *(_QWORD *)(v219 + 72) * v122, v66);
              v110 = (uint64_t)v221;
              sub_1CCB0A9AC(v122, (uint64_t)v221);
            }
            swift_bridgeObjectRelease();
LABEL_69:
            ++v106;
            v111 = *(void (**)(uint64_t, char *))(v219 + 8);
            v111(v12, v66);
            v112 = objc_msgSend(v63, sel_identifier);
            sub_1CCB635EC();

            v113 = objc_msgSend(v63, sel_connected);
            v114 = (uint64_t)v217;
            v115 = swift_isUniquelyReferenced_nonNull_native();
            v221 = (char *)v114;
            sub_1CCAEB7E0(v113, v24, v115);
            v217 = v221;
            swift_bridgeObjectRelease();
            v111(v24, v66);
            v116 = objc_msgSend(v63, sel_identifier);
            sub_1CCB635EC();

            sub_1CCB3F648(objc_msgSend(v63, sel_type), (char *)&v220);
            LODWORD(v56) = v220;
            v117 = (uint64_t)v218;
            v118 = swift_isUniquelyReferenced_nonNull_native();
            v221 = (char *)v117;
            sub_1CCAEB940((int)v56, v24, v118);
            v218 = v221;
            swift_bridgeObjectRelease();
            v111(v24, v66);

            v31 = v110;
            v105 = (unint64_t)v214;
            if (v213 == v106)
              goto LABEL_84;
          }
        }
        __break(1u);
LABEL_150:
        __break(1u);
        goto LABEL_151;
      }
    }
    else
    {
      v65 = *(_QWORD *)((v226 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v65)
        goto LABEL_65;
    }
    v31 = MEMORY[0x1E0DEE9E0];
    v217 = (char *)MEMORY[0x1E0DEE9E0];
    v218 = (char *)MEMORY[0x1E0DEE9E0];
LABEL_84:
    swift_bridgeObjectRelease();
    v64 = v226;
    if (v226 >> 62)
    {
      swift_bridgeObjectRetain();
      v65 = sub_1CCB64090();
    }
    else
    {
      v65 = *(_QWORD *)((v226 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v196 = (uint8_t *)v31;
    if (v65)
    {
      if (v65 < 1)
        goto LABEL_150;
      v126 = 0;
      v127 = v64 & 0xC000000000000001;
      v214 = (char *)MEMORY[0x1E0DEE9E0];
      v128 = &selRef_coordinate;
      v213 = v64 & 0xC000000000000001;
      do
      {
        if (v127)
          v129 = (id)MEMORY[0x1D17B154C](v126, v64);
        else
          v129 = *(id *)(v64 + 8 * v126 + 32);
        v130 = v129;
        v131 = objc_msgSend(v129, v128[49]);

        if (v131)
        {
          v132 = objc_msgSend(v130, v128[49]);
          if (v132)
          {
            v133 = v132;
            v134 = objc_msgSend(v130, sel_identifier);
            sub_1CCB635EC();

            v56 = v133;
            v135 = v210;
            FMIPDeviceLostModeMetadata.init(lostModeInfo:)(v56, v210);
            v136 = v64;
            v137 = v65;
            v138 = v66;
            v139 = v128;
            v140 = v24;
            v141 = (void (*)(_QWORD, _QWORD, _QWORD))v211;
            sub_1CC9FED60(v135, (uint64_t)v211, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
            v142 = (uint64_t)v214;
            v143 = swift_isUniquelyReferenced_nonNull_native();
            v221 = (char *)v142;
            v144 = (uint64_t)v141;
            v24 = v140;
            v128 = v139;
            v66 = v138;
            v65 = v137;
            v64 = v136;
            v127 = v213;
            sub_1CCAEBAB0(v144, v24, v143);
            v214 = v221;
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, char *))(v219 + 8))(v24, v66);

          }
        }
        ++v126;

      }
      while (v65 != v126);
    }
    else
    {
      v214 = (char *)MEMORY[0x1E0DEE9E0];
    }
    swift_bridgeObjectRelease();
    v65 = (uint64_t)v198;
    v213 = (unint64_t)&v198[OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_delegate];
    if (MEMORY[0x1D17B2218]())
    {
      sub_1CCA14E90(&qword_1EF9E6610);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1CCB6D4E0;
      *(_BYTE *)(inited + 32) = 0;
      *(_QWORD *)(inited + 40) = v215;
      *(_BYTE *)(inited + 48) = 2;
      *(_QWORD *)(inited + 56) = v196;
      *(_BYTE *)(inited + 64) = 1;
      *(_QWORD *)(inited + 72) = v217;
      v146 = sub_1CCACCC58(inited);
      swift_setDeallocating();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CCA14E90(&qword_1EF9E6618);
      swift_arrayDestroy();
      sub_1CC9D495C(v146);
      v65 = (uint64_t)v198;
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    v147 = MEMORY[0x1D17B2218](v213);
    v148 = v207;
    v31 = (uint64_t)v209;
    v63 = v205;
    v149 = (uint64_t)v204;
    p_type = (uint64_t)v203;
    if (v147)
    {
      v150 = swift_bridgeObjectRetain();
      sub_1CC9DCE98(v150);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    if (MEMORY[0x1D17B2218](v213))
    {
      v151 = swift_bridgeObjectRetain();
      sub_1CCAA9EE8(v151);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    v152 = p_type + *(int *)(sub_1CCA14E90(&qword_1EF9E42D8) + 48);
    v211 = *(_QWORD **)(v219 + 16);
    ((void (*)(uint64_t, uint64_t, char *))v211)(p_type, v31, v66);
    v153 = v206;
    (*(void (**)(uint64_t, char *, uint64_t))(v206 + 16))(v152, v208, v148);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v153 + 56))(v149, 1, 1, v148);
    type metadata accessor for FMIPItemUpdateContext(0);
    v154 = (void (*)(char *, uint64_t, uint64_t))swift_allocObject();
    sub_1CCA0BEEC(p_type, (uint64_t)v154 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_type, type metadata accessor for FMIPItemUpdateType);
    v155 = v200;
    sub_1CCB635A4();
    v212 = v154;
    v156 = (char *)v154 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_timestamp;
    v157 = *(void (**)(char *, char *, uint64_t))(v153 + 32);
    v157(v156, v155, v148);
    sub_1CC9EAB74(v149, (uint64_t)v63, &qword_1ED8A7130);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v153 + 48))(v63, 1, v148) == 1)
    {
      v66 = v201;
      sub_1CCB635A4();
      sub_1CC9C3E84(v149, &qword_1ED8A7130);
      sub_1CCA0BF30(p_type, type metadata accessor for FMIPItemUpdateType);
      sub_1CC9C3E84((uint64_t)v63, &qword_1ED8A7130);
    }
    else
    {
      sub_1CC9C3E84(v149, &qword_1ED8A7130);
      sub_1CCA0BF30(p_type, type metadata accessor for FMIPItemUpdateType);
      v66 = v201;
      v157(v201, (char *)v63, v148);
    }
    v157((char *)v212 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_creationTimestamp, v66, v148);
    v64 = v226;
    v158 = MEMORY[0x1E0DEE9D8];
    v221 = (char *)MEMORY[0x1E0DEE9D8];
    if (v226 >> 62)
    {
      swift_bridgeObjectRetain();
      v24 = sub_1CCB64090();
      if (!v24)
      {
LABEL_120:
        swift_bridgeObjectRelease();
        v163 = MEMORY[0x1E0DEE9D8];
LABEL_121:
        swift_retain();
        v164 = sub_1CCA1F75C(v163, (uint64_t *)v65);
        v210 = 0;
        swift_release();
        swift_release();
        v221 = (char *)v158;
        if (v164 >> 62)
          goto LABEL_137;
        v165 = *(_QWORD *)((v164 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        for (; v165; v165 = sub_1CCB64090())
        {
          v166 = v65;
          v65 = 0;
          v31 = v166 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy;
          while (1)
          {
            if ((v164 & 0xC000000000000001) != 0)
            {
              v167 = (id)MEMORY[0x1D17B154C](v65, v164);
            }
            else
            {
              if ((unint64_t)v65 >= *(_QWORD *)((v164 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_136;
              v167 = *(id *)(v164 + 8 * v65 + 32);
            }
            v168 = v167;
            v169 = v65 + 1;
            if (__OFADD__(v65, 1))
              break;
            if (*(_BYTE *)(v31 + 32) == 1 && objc_msgSend(v167, sel_isAppleAudioAccessory))
            {

            }
            else
            {
              sub_1CCB64030();
              sub_1CCB64048();
              sub_1CCB64054();
              sub_1CCB6403C();
            }
            ++v65;
            if (v169 == v165)
            {
              v170 = (unint64_t)v221;
              v31 = (uint64_t)v209;
              goto LABEL_139;
            }
          }
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          swift_retain();
        }
        v170 = MEMORY[0x1E0DEE9D8];
LABEL_139:
        swift_bridgeObjectRelease();
        swift_release();
        v171 = (uint64_t)v212;
        swift_retain();
        v172 = sub_1CCB4B3D8(v170, v171);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v173 = swift_bridgeObjectRetain();
        v174 = sub_1CCA1F55C(v173, &qword_1EF9E6608, 0x1E0D898B8, (uint64_t)&protocol witness table for SPApplicationBeacon);
        swift_bridgeObjectRelease();
        sub_1CC9CF05C(v174);
        swift_bridgeObjectRelease();
        v175 = v199;
        v176 = v216;
        ((void (*)(char *, uint64_t, uint64_t))v211)(v199, v31, v216);
        v177 = sub_1CCB637D8();
        v178 = sub_1CCB63D48();
        if (os_log_type_enabled(v177, v178))
        {
          v179 = (uint8_t *)swift_slowAlloc();
          v180 = swift_slowAlloc();
          v221 = (char *)v180;
          *(_DWORD *)v179 = 136315138;
          v181 = sub_1CCB635C8();
          v220 = sub_1CCA0CB60(v181, v182, (uint64_t *)&v221);
          sub_1CCB63E44();
          swift_bridgeObjectRelease();
          v183 = *(void (**)(char *, uint64_t))(v219 + 8);
          v183(v175, v216);
          _os_log_impl(&dword_1CC9BF000, v177, v178, "FMIPBeaconRefreshingController: separation state %s", v179, 0xCu);
          swift_arrayDestroy();
          v184 = v180;
          v31 = (uint64_t)v209;
          MEMORY[0x1D17B214C](v184, -1, -1);
          v176 = v216;
          MEMORY[0x1D17B214C](v179, -1, -1);
        }
        else
        {
          v183 = *(void (**)(char *, uint64_t))(v219 + 8);
          v183(v175, v176);
        }

        v185 = v195;
        if (MEMORY[0x1D17B2218](v213))
        {
          sub_1CCA24148(v172);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        ((void (*)(char *, uint64_t, uint64_t))v211)(v185, v31, v176);
        v186 = sub_1CCB637D8();
        v187 = sub_1CCB63D48();
        if (os_log_type_enabled(v186, v187))
        {
          v188 = (uint8_t *)swift_slowAlloc();
          v189 = swift_slowAlloc();
          v221 = (char *)v189;
          *(_DWORD *)v188 = 136315138;
          v190 = sub_1CCB635C8();
          v220 = sub_1CCA0CB60(v190, v191, (uint64_t *)&v221);
          sub_1CCB63E44();
          swift_bridgeObjectRelease();
          v183(v185, v176);
          _os_log_impl(&dword_1CC9BF000, v186, v187, "FMIPBeaconRefreshingController: items updated %s", v188, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1D17B214C](v189, -1, -1);
          MEMORY[0x1D17B214C](v188, -1, -1);

          swift_release();
          v192 = v209;
        }
        else
        {

          swift_release();
          v183(v185, v176);
          v192 = (char *)v31;
        }
        v183(v192, v176);
        (*(void (**)(char *, uint64_t))(v206 + 8))(v208, v207);
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      v24 = *(_QWORD *)((v226 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v24)
        goto LABEL_120;
    }
    if (v24 >= 1)
    {
      for (i = 0; i != v24; ++i)
      {
        if ((v64 & 0xC000000000000001) != 0)
          v160 = (id)MEMORY[0x1D17B154C](i, v64);
        else
          v160 = *(id *)(v64 + 8 * i + 32);
        v161 = v160;
        v162 = objc_msgSend(v160, sel_role);

        if (v162)
        {
          sub_1CCB64030();
          sub_1CCB64048();
          sub_1CCB64054();
          sub_1CCB6403C();
        }
        else
        {

        }
      }
      swift_bridgeObjectRelease();
      v163 = (unint64_t)v221;
      v65 = (uint64_t)v198;
      goto LABEL_121;
    }
LABEL_151:
    __break(1u);
LABEL_152:
    swift_bridgeObjectRetain();
    v67 = sub_1CCB64090();
  }
LABEL_58:
  if (v31 < 0)
    v64 = v31;
  else
    v64 = v31 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n();
  v78 = sub_1CCB64090();
  swift_bridgeObjectRelease();
  if (!v78)
    goto LABEL_62;
LABEL_30:
  v63 = (void *)(v31 & 0xC000000000000001);
  v215 = MEMORY[0x1E0DEE9E0];
  v79 = 4;
  v212 = (void (*)(char *, uint64_t, uint64_t))*MEMORY[0x1E0D89A28];
  v214 = (char *)v78;
  v213 = v31 & 0xC000000000000001;
  while (1)
  {
    v81 = v63 ? (id)MEMORY[0x1D17B154C](v79 - 4, v31) : *(id *)(v31 + 8 * v79);
    v64 = (uint64_t)v81;
    v82 = v79 - 3;
    if (__OFADD__(v79 - 4, 1))
      break;
    v83 = objc_msgSend(v81, sel_role);

    if (v83)
      goto LABEL_33;
    v84 = objc_msgSend((id)v64, sel_identifier);
    sub_1CCB635EC();

    v85 = objc_msgSend((id)v64, sel_taskInformation);
    type metadata accessor for SPBeaconTaskName(0);
    sub_1CC9C30A8(0, &qword_1EF9E1E58);
    sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D8, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_1CCB65E60);
    v86 = sub_1CCB638E0();

    if (!*(_QWORD *)(v86 + 16))
      goto LABEL_43;
    v87 = v212;
    v88 = sub_1CCAC8DD0((uint64_t)v87);
    if ((v89 & 1) == 0)
    {

LABEL_43:
      swift_bridgeObjectRelease();
      v92 = 0;
      goto LABEL_44;
    }
    v90 = *(id *)(*(_QWORD *)(v86 + 56) + 8 * v88);

    swift_bridgeObjectRelease();
    v91 = objc_msgSend(v90, sel_state);

    v92 = v91 == 0;
LABEL_44:
    v93 = v215;
    LODWORD(v56) = swift_isUniquelyReferenced_nonNull_native();
    v221 = (char *)v93;
    v95 = sub_1CCAC8D64((uint64_t)v218);
    v96 = *(_QWORD *)(v93 + 16);
    v97 = (v94 & 1) == 0;
    v98 = v96 + v97;
    if (__OFADD__(v96, v97))
      goto LABEL_54;
    p_type = v94;
    if (*(_QWORD *)(v93 + 24) >= v98)
    {
      if ((v56 & 1) == 0)
        sub_1CCAEDA2C();
    }
    else
    {
      sub_1CCAEA768(v98, (int)v56);
      v99 = sub_1CCAC8D64((uint64_t)v218);
      if ((p_type & 1) != (v100 & 1))
        goto LABEL_154;
      v95 = v99;
    }
    v215 = (uint64_t)v221;
    if ((p_type & 1) != 0)
    {
      *(_BYTE *)(*((_QWORD *)v221 + 7) + v95) = v92;
    }
    else
    {
      *(_QWORD *)&v221[8 * (v95 >> 6) + 64] |= 1 << v95;
      (*(void (**)(unint64_t, char *, uint64_t))(v219 + 16))(*(_QWORD *)(v215 + 48) + *(_QWORD *)(v219 + 72) * v95, v218, v216);
      v101 = v215;
      *(_BYTE *)(*(_QWORD *)(v215 + 56) + v95) = v92;
      v102 = *(_QWORD *)(v101 + 16);
      v103 = __OFADD__(v102, 1);
      v104 = v102 + 1;
      if (v103)
        goto LABEL_55;
      *(_QWORD *)(v101 + 16) = v104;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v219 + 8))(v218, v216);
    v78 = (uint64_t)v214;
    v63 = (void *)v213;
LABEL_33:

    ++v79;
    v80 = v82 == v78;
    v12 = (uint64_t)v217;
    if (v80)
      goto LABEL_63;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  swift_once();
LABEL_8:
  v52 = sub_1CCB637FC();
  sub_1CCA16C20(v52, (uint64_t)qword_1ED8AD7F8);
  v53 = sub_1CCB637D8();
  v54 = sub_1CCB63D48();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v55 = 0;
    _os_log_impl(&dword_1CC9BF000, v53, v54, "FMIPBeaconRefreshingController: app beacons FF disabled", v55, 2u);
    MEMORY[0x1D17B214C](v55, -1, -1);
  }

}

uint64_t sub_1CC9E911C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1CC9E9150(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void (*a6)(void))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  unsigned __int8 v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  os_log_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  os_log_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  uint64_t *v84;
  void (*v85)(void);
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;

  v85 = a6;
  v84 = a5;
  v82 = a2;
  v80 = sub_1CCB63748();
  v79 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80);
  v81 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB637A8();
  v78 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = a3;
  v13 = sub_1CCA14E90(a3);
  MEMORY[0x1E0C80A78](v13);
  v89 = (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = a4;
  v92 = sub_1CCA14E90(a4);
  v88 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92);
  v16 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_1CCB63490();
  v17 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v90 = v16;
  v83 = v12;
  v91 = v10;
  v20 = sub_1CCB637FC();
  v94 = sub_1CCA16C20(v20, (uint64_t)qword_1ED8AD7F8);
  v21 = sub_1CCB637D8();
  v22 = sub_1CCB63D48();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_1CC9BF000, v21, v22, "FMDiskIO: read from disk", v23, 2u);
    MEMORY[0x1D17B214C](v23, -1, -1);
  }

  v24 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v25 = a1[3];
  v26 = a1[4];
  v27 = a1[5];
  v28 = a1[6];
  v96 = v25;
  v97 = v26;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  v29 = a1;
  v30 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v31 = objc_msgSend(v24, sel_fileExistsAtPath_, v30);

  if ((v31 & 1) != 0)
  {
    v75 = v29;
    v96 = v25;
    v97 = v26;
    swift_bridgeObjectRetain();
    sub_1CCB63A24();
    sub_1CCB63424();
    swift_bridgeObjectRelease();
    v32 = sub_1CCB6349C();
    v38 = v37;
    v39 = v25;
    v73 = v26;
    v40 = *(void (**)(char *, uint64_t))(v17 + 8);
    v41 = v32;
    v40(v19, v93);
    v42 = v75;
    swift_retain();
    sub_1CCA1B164(v41, v38);
    swift_retain();
    v43 = v41;
    sub_1CCA1B164(v41, v38);
    v44 = v38;
    v45 = sub_1CCB637D8();
    v46 = sub_1CCB63D48();
    v47 = v46;
    v48 = os_log_type_enabled(v45, v46);
    v77 = v27;
    v76 = v28;
    v72 = v39;
    v74 = v44;
    if (v48)
    {
      v49 = swift_slowAlloc();
      v93 = swift_slowAlloc();
      v95 = v93;
      *(_DWORD *)v49 = 136315394;
      v96 = v39;
      v97 = v73;
      swift_bridgeObjectRetain();
      v71 = v47;
      v70 = v45;
      sub_1CCB63A24();
      v96 = sub_1CCA0CB60(v96, v97, &v95);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2080;
      v50 = v43;
      v51 = sub_1CCB634A8();
      v96 = sub_1CCA0CB60(v51, v52, &v95);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA1B120(v43, v44);
      sub_1CCA1B120(v43, v44);
      v53 = v70;
      _os_log_impl(&dword_1CC9BF000, v70, (os_log_type_t)v71, "FMDiskIO: file: %s data: %s", (uint8_t *)v49, 0x16u);
      v54 = v93;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v54, -1, -1);
      MEMORY[0x1D17B214C](v49, -1, -1);

    }
    else
    {
      swift_release_n();
      v50 = v43;
      sub_1CCA1B120(v43, v44);
      sub_1CCA1B120(v43, v44);

    }
    v55 = v86;
    v56 = v87;
    sub_1CCB63364();
    swift_allocObject();
    sub_1CCB63358();
    v57 = (uint64_t)v42 + *(_QWORD *)(*v42 + 128);
    v58 = v89;
    sub_1CC9EAB74(v57, v89, v55);
    v59 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v58, 1, v92) == 1;
    v61 = (uint64_t)v90;
    v60 = v91;
    if (v59)
    {
      sub_1CC9C3E84(v58, v55);
      sub_1CCA14E90(v84);
      v85();
      v62 = v74;
      sub_1CCB6334C();
      sub_1CCA1B120(v50, v62);
      swift_release();
    }
    else
    {
      sub_1CC9C3EC0(v58, (uint64_t)v90, v56);
      sub_1CC9CAA38(&qword_1EF9E2B08, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21358], MEMORY[0x1E0D21368]);
      v63 = v83;
      sub_1CCB6334C();
      v64 = v50;
      v65 = v81;
      sub_1CCB63754();
      v66 = v65;
      v67 = sub_1CCB6379C();
      v69 = v68;
      (*(void (**)(char *, uint64_t))(v79 + 8))(v66, v80);
      sub_1CCA14E90(v84);
      v85();
      sub_1CCB6334C();
      swift_release();
      sub_1CCA1B120(v67, v69);
      sub_1CCA1B120(v64, v74);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v63, v60);
      sub_1CC9C3E84(v61, v56);
    }
    *v82 = v96;
    swift_bridgeObjectRelease();
  }
  else
  {
    v76 = v28;
    v77 = v27;
    swift_retain_n();
    v33 = sub_1CCB637D8();
    v34 = sub_1CCB63D30();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      v36 = swift_slowAlloc();
      v95 = v36;
      v96 = v25;
      *(_DWORD *)v35 = 136315138;
      v97 = v26;
      swift_bridgeObjectRetain();
      sub_1CCB63A24();
      v96 = sub_1CCA0CB60(v96, v97, &v95);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v33, v34, "FMDiskIO: Disk archive does not exist at: %s", v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v36, -1, -1);
      MEMORY[0x1D17B214C](v35, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t sub_1CC9E9E44(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned __int8 v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (*(_QWORD *)(a1 + 16))
  {
    v4 = sub_1CCA074F4(0xD000000000000014, 0x80000001CCB77ED0);
    if ((v5 & 1) != 0)
    {
      sub_1CCA0CC30(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v47);
      v6 = MEMORY[0x1E0DEA968];
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (v45 == sub_1CCB062D0(1, 0) && v46 == v7)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v8 = sub_1CCB642A0();
          swift_bridgeObjectRelease();
          if ((v8 & 1) != 0)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            if (qword_1EF9DEFE8 != -1)
              swift_once();
            v49 = v6;
            v47 = v45;
            v48 = v46;
            swift_beginAccess();
            sub_1CC9EA59C((uint64_t)&v47, 1);
            swift_endAccess();
            v9 = MEMORY[0x1D17B2218](a2 + qword_1ED8AA240);
            if (v9)
            {
              v10 = v9;
              swift_retain();
              sub_1CC9D3498(1, v10);
              swift_release();
              swift_unknownObjectRelease();
            }
          }
        }
      }
    }
  }
  if (*(_QWORD *)(a1 + 16)
    && (v11 = sub_1CCA074F4(0x626154736D657469, 0xEF64656C62616E45), (v12 & 1) != 0)
    && (sub_1CCA0CC30(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&v47), swift_dynamicCast()))
  {
    v13 = v45;
  }
  else
  {
    v13 = 0;
  }
  v14 = (void *)objc_opt_self();
  v15 = (void *)sub_1CCB63964();
  v16 = (void *)sub_1CCB63964();
  v17 = objc_msgSend(v14, sel_BOOLForKey_inDomain_, v15, v16);

  if ((v13 & 1) == 0 && (v17 & 1) == 0)
  {
    if (qword_1EF9DEFE8 != -1)
      swift_once();
    v49 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v47) = 0;
    swift_beginAccess();
    sub_1CC9EA59C((uint64_t)&v47, 2);
    swift_endAccess();
    v18 = (void *)sub_1CCB63964();
    v19 = (void *)sub_1CCB63964();
    objc_msgSend(v14, sel_setBool_forKey_inDomain_, 0, v18, v19);

    v20 = MEMORY[0x1D17B2218](a2 + qword_1ED8AA240);
    if (v20)
    {
      v21 = v20;
      swift_retain();
      sub_1CC9D3498(2, v21);
      swift_release();
      swift_unknownObjectRelease();
    }
  }
  if (*(_QWORD *)(a1 + 16) && (v22 = sub_1CCA074F4(0xD000000000000010, 0x80000001CCB77F00), (v23 & 1) != 0))
  {
    sub_1CCA0CC30(*(_QWORD *)(a1 + 56) + 32 * v22, (uint64_t)&v47);
    v24 = swift_dynamicCast();
    if (v24)
      v25 = v45;
    else
      v25 = 0;
    if (v24)
      v26 = v46;
    else
      v26 = 0;
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v27 = (void *)sub_1CCB63964();
  v28 = (void *)sub_1CCB63964();
  v29 = objc_msgSend(v14, sel_stringForKey_inDomain_, v27, v28);

  if (v29)
  {
    v30 = sub_1CCB63988();
    v32 = v31;

    result = sub_1CC9C6254(3, 0);
    v35 = result;
    v36 = v34;
    if (v26)
    {
LABEL_38:
      swift_bridgeObjectRelease();
      if (v36)
        goto LABEL_39;
      goto LABEL_46;
    }
    if (v32)
    {
      v25 = v30;
      v26 = v32;
      if (v34)
      {
LABEL_39:
        if (v25 == v35 && v26 == v36)
        {
          swift_bridgeObjectRelease();
LABEL_51:
          result = swift_bridgeObjectRelease();
          goto LABEL_52;
        }
        v38 = sub_1CCB642A0();
        swift_bridgeObjectRelease();
        if ((v38 & 1) != 0)
          goto LABEL_51;
      }
LABEL_46:
      if (qword_1EF9DEFE8 != -1)
        swift_once();
      v49 = MEMORY[0x1E0DEA968];
      v47 = v25;
      v48 = v26;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_1CC9EA59C((uint64_t)&v47, 3);
      swift_endAccess();
      v39 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      v40 = (void *)sub_1CCB63964();
      v41 = (void *)sub_1CCB63964();
      objc_msgSend(v14, sel_setString_forKey_inDomain_, v39, v40, v41);

      result = MEMORY[0x1D17B2218](a2 + qword_1ED8AA240);
      if (result)
      {
        v42 = result;
        swift_retain();
        sub_1CC9D3498(3, v42);
        swift_release();
        result = swift_unknownObjectRelease();
      }
      goto LABEL_52;
    }
  }
  else
  {
    result = sub_1CC9C6254(3, 0);
    v36 = v37;
    if (v26)
    {
      v35 = result;
      goto LABEL_38;
    }
  }
  if (v36)
    goto LABEL_51;
LABEL_52:
  if (*(_QWORD *)(a1 + 16))
  {
    result = sub_1CCA074F4(0xD000000000000019, 0x80000001CCB77EB0);
    if ((v43 & 1) != 0)
    {
      sub_1CCA0CC30(*(_QWORD *)(a1 + 56) + 32 * result, (uint64_t)&v47);
      v44 = MEMORY[0x1E0DEB418];
      result = swift_dynamicCast();
      if ((result & 1) != 0)
      {
        if (qword_1EF9DEFE8 != -1)
          swift_once();
        v49 = v44;
        v47 = v45;
        swift_beginAccess();
        sub_1CC9EA59C((uint64_t)&v47, 0);
        return swift_endAccess();
      }
    }
  }
  return result;
}

uint64_t sub_1CC9EA59C(uint64_t a1, char a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _OWORD v7[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1CCA0799C((_OWORD *)a1, v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v2;
    *v2 = 0x8000000000000000;
    sub_1CC9EA648(v7, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v6;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1CC9C3E84(a1, &qword_1ED8AA610);
    sub_1CCB0985C(a2, v7);
    return sub_1CC9C3E84((uint64_t)v7, &qword_1ED8AA610);
  }
}

_OWORD *sub_1CC9EA648(_OWORD *a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  _OWORD *v18;
  _OWORD *result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  sub_1CC9EA88C(a2);
  v11 = v10;
  v12 = v8[2];
  v13 = (v9 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v9;
    v16 = v8[3];
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v17 = *v4;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v18 = (_OWORD *)(v17[7] + 32 * v11);
        sub_1CCA01CA0((uint64_t)v18);
        return sub_1CCA0799C(a1, v18);
      }
      return sub_1CCAEBD8C(v11, a2, a1, v17);
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_1CCAED640();
      goto LABEL_7;
    }
    sub_1CCAEA024(v14, a3 & 1);
    sub_1CC9EA88C(a2);
    if ((v15 & 1) == (v21 & 1))
    {
      v11 = v20;
      v17 = *v4;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      return sub_1CCAEBD8C(v11, a2, a1, v17);
    }
  }
  result = (_OWORD *)sub_1CCB642DC();
  __break(1u);
  return result;
}

void sub_1CC9EA760(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13[8];
  __int128 v14;

  if (*(_QWORD *)(a1 + 16)
    && (sub_1CCA14E90(&qword_1EF9E33C0), v2 = sub_1CCB640B4(), v3 = (_QWORD *)v2, (v4 = *(_QWORD *)(a1 + 16)) != 0))
  {
    v5 = v2 + 64;
    v6 = a1 + 32;
    swift_retain();
    while (1)
    {
      sub_1CC9EAB74(v6, (uint64_t)v13, &qword_1EF9E33C8);
      v7 = v13[0];
      sub_1CC9EA88C(v13[0]);
      if ((v9 & 1) != 0)
        break;
      *(_QWORD *)(v5 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
      *(_BYTE *)(v3[6] + v8) = v7;
      sub_1CCA0799C(&v14, (_OWORD *)(v3[7] + 32 * v8));
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      v6 += 40;
      if (!--v4)
      {
        swift_release();
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
  }
}

void sub_1CC9EA88C(char a1)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CC9EA8F0()
{
  uint64_t v0;
  uint64_t v1;

  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  v1 = sub_1CCB64384();
  return sub_1CC9EA97C(v0, v1);
}

uint64_t sub_1CC9EA97C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

uint64_t sub_1CC9EAB74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1CCA14E90(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t FMIPManager.init(configuration:ownerSession:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *);
  uint64_t v19;
  uint64_t v20;
  id v21;
  unsigned __int8 v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  _BOOL4 v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  _QWORD *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint8_t *v63;
  _QWORD *v64;
  id v65;
  void *v66;
  _QWORD *v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD v94[3];
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  void (*v101)(char *);
  char *v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD v106[2];
  uint64_t v107;
  _QWORD v108[5];
  __int128 v109[2];
  __int128 v110;

  v3 = v2;
  v103 = a2;
  v105 = a1;
  v4 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v4);
  v102 = (char *)v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  MEMORY[0x1E0C80A78](v6);
  v100 = (char *)v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63D84();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_1CCB63D6C();
  MEMORY[0x1E0C80A78](v104);
  v12 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v12);
  sub_1CCB635F8();
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_siriDelegate + 8) = 0;
  swift_unknownObjectWeakInit();
  v94[0] = OBJC_IVAR____TtC8FMIPCore11FMIPManager_refreshingController;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_refreshingController) = 0;
  v13 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataQueue;
  v98 = sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A8E30);
  sub_1CCB63850();
  sub_1CCB63D60();
  LODWORD(v97) = *MEMORY[0x1E0DEF8D0];
  v101 = *(void (**)(char *))(v9 + 104);
  v95 = v8;
  v101(v11);
  v14 = sub_1CCB63DB4();
  v99 = v13;
  *(_QWORD *)(v3 + v13) = v14;
  v96 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_unknownItemQueue;
  sub_1CCB63850();
  *(_QWORD *)&v109[0] = MEMORY[0x1E0DEE9D8];
  v94[2] = sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  v94[1] = sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  v15 = v11;
  v16 = v11;
  v17 = v97;
  v18 = v101;
  ((void (*)(char *, _QWORD, uint64_t))v101)(v16, v97, v8);
  *(_QWORD *)(v3 + v96) = sub_1CCB63DB4();
  v96 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegateQueue;
  sub_1CCB63850();
  *(_QWORD *)&v109[0] = MEMORY[0x1E0DEE9D8];
  sub_1CCB63E98();
  ((void (*)(char *, uint64_t, uint64_t))v18)(v15, v17, v95);
  *(_QWORD *)(v3 + v96) = sub_1CCB63DB4();
  v96 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_actionsController;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_actionsController) = 0;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_snapshotDevicesResponseReceived) = 0;
  v101 = (void (*)(char *))OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemActionsController;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemActionsController) = 0;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_snapshotItemsResponseReceived) = 0;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_snapshotItemsLocatedResponseReceived) = 0;
  v19 = v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_stopRefreshTimestamp;
  v20 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isUpdatingSingleDevices) = 0;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isRefreshingItems) = 0;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isRefreshingDevices) = 0;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isUTAppAlertDisabled) = 0;
  v21 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  LOBYTE(v18) = objc_msgSend(v21, sel_isInternalBuild);

  v22 = 0;
  if ((v18 & 1) != 0)
  {
    v23 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    v24 = (void *)sub_1CCB63964();
    v22 = objc_msgSend(v23, sel_BOOLForKey_, v24);

  }
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_useRealtimeForItems) = v22;
  v25 = v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_selectedDevice;
  v26 = type metadata accessor for FMIPDevice();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_itemCounts) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_initializedSubsystems) = 0;
  v27 = v105;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration) = v105;
  v28 = objc_allocWithZone(MEMORY[0x1E0D89928]);
  swift_retain();
  v29 = objc_msgSend(v28, sel_init);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_ownerSession) = v29;
  v30 = *(_QWORD *)(v27 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_snapshotHandlers);
  if (v30)
  {
    v31 = *(_QWORD *)(v30 + 32) != 0;
    v32 = *(_QWORD *)(v30 + 64) != 0;
  }
  else
  {
    v32 = 0;
    v31 = 0;
  }
  LODWORD(v104) = v31 || v32;
  v33 = qword_1EF9DEF88;
  v97 = v29;
  if (v33 != -1)
    swift_once();
  v34 = qword_1EF9E27E8;
  v35 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v36 = objc_msgSend(v35, sel_bundleIdentifier);

  if (v36)
  {
    v37 = sub_1CCB63988();
    v39 = v38;

  }
  else
  {
    v37 = 0;
    v39 = 0xE000000000000000;
  }
  v40 = sub_1CCA9926C(v37, v39, v34);
  swift_bridgeObjectRelease();
  v41 = v104;
  v42 = v40 & (v104 ^ 1);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isDevicesSnapshotMode) = v31;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isItemsSnapshotMode) = v32;
  type metadata accessor for FMIPGarbageCollector();
  swift_allocObject();
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_garbageCollector) = sub_1CC9D7AE0();
  v43 = v105;
  v98 = OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems;
  v44 = *(_QWORD *)(v105 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_cacheDirectory);
  v45 = *(_QWORD *)(v105 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_cacheDirectory + 8);
  *(_QWORD *)&v109[0] = *(_QWORD *)(v105 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems);
  v46 = v105 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_preferredLocale;
  v47 = sub_1CCB63634();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = (uint64_t)v100;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v100, v46, v47);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 56))(v49, 0, 1, v47);
  v50 = *(void **)(v3 + v99);
  type metadata accessor for FMIPDataManager();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v51 = sub_1CCAAC558(v44, v45, (uint64_t *)v109, v49, v42, v41, v50);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager) = v51;
  type metadata accessor for FMIPBeaconSharingController();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconSharingController) = sub_1CC9D242C();
  type metadata accessor for FMLocationShifter();
  swift_allocObject();
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_locationShifter) = FMLocationShifter.init()();
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_locationController) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMIPLocationController()), sel_init);
  v99 = v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_authenticationUIProvider;
  v52 = sub_1CC9EAB74(v43 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_authenticationUIProvider, v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_authenticationUIProvider, &qword_1ED8A9DE8);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(v43
                                                          + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_interactionControllerProvider))(v109, v52);
  v53 = v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_interactionController;
  sub_1CCA21ACC(v109, v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_interactionController);
  v54 = v97;
  sub_1CCA21CA0((uint64_t)&v110);
  type metadata accessor for FMIPBeaconRefreshingController(0);
  swift_allocObject();
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconRefreshingController) = sub_1CC9F0F48(v54, &v110);
  type metadata accessor for FMIPSafeLocationRefreshingController();
  v55 = (_QWORD *)swift_allocObject();
  v56 = v54;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_safeLocationRefreshingController) = sub_1CC9CAB10((uint64_t)v56, v55);
  swift_beginAccess();
  sub_1CC9EBC94(v53, (uint64_t)v109);
  type metadata accessor for FMIPURLHandler();
  v57 = swift_allocObject();
  sub_1CC9EBC94((uint64_t)v109, v57 + 16);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v58 = sub_1CCB637FC();
  v100 = (char *)sub_1CCA16C20(v58, (uint64_t)qword_1ED8AD7F8);
  v59 = sub_1CCB637D8();
  v60 = sub_1CCB63D48();
  if (os_log_type_enabled(v59, v60))
  {
    v61 = v51;
    v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v62 = 0;
    _os_log_impl(&dword_1CC9BF000, v59, v60, "FMIPURLHandler: initialized", v62, 2u);
    v63 = v62;
    v51 = v61;
    MEMORY[0x1D17B214C](v63, -1, -1);
  }

  sub_1CCA01CA0((uint64_t)v109);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_urlHandler) = v57;
  if ((*(_BYTE *)(v105 + v98) & 1) != 0)
  {
    sub_1CC9EBC94(v53, (uint64_t)v109);
    sub_1CC9EAB74(v99, (uint64_t)v108, &qword_1ED8A9DE8);
    type metadata accessor for FMIPDeviceActionsController();
    memset(v106, 0, sizeof(v106));
    v107 = 0;
    swift_allocObject();
    v64 = sub_1CC9FEDA4(v56, (uint64_t)v109, (uint64_t)v108, (uint64_t)v106);
    *(_QWORD *)(v3 + v96) = v64;
    swift_release();
    sub_1CC9EBC94(v53, (uint64_t)v109);
    v65 = objc_allocWithZone((Class)type metadata accessor for FMAPSConnectionHandler());
    v66 = sub_1CC9DC884(0xD00000000000001ELL, 0x80000001CCB7ADA0, 0xD000000000000025, 0x80000001CCB78EB0, 0, 0);
    type metadata accessor for FMIPRefreshingController();
    swift_allocObject();
    v67 = sub_1CC9DE1A4((uint64_t)v109, v66);
    *(_QWORD *)(v3 + v94[0]) = v67;
    swift_release();
  }
  type metadata accessor for FMIPItemActionsController();
  swift_allocObject();
  v68 = (char *)v56;
  swift_retain();
  v69 = sub_1CC9D688C(v68, v51);
  *(_QWORD *)((char *)v101 + v3) = v69;
  swift_release();
  type metadata accessor for FMIPDeviceConnectionStateProvider();
  v70 = swift_allocObject();
  *(_QWORD *)(v70 + 16) = 0;
  *(_QWORD *)(v70 + 32) = 0;
  swift_unknownObjectWeakInit();
  sub_1CC9D2570();
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_connectionStateProvider) = v70;
  *(_QWORD *)(v70 + 32) = &off_1E88F7868;
  swift_unknownObjectWeakAssign();
  if ((v104 & 1) == 0)
  {
    swift_retain();
    sub_1CCAD7B88();
    swift_release();
  }
  *(_QWORD *)(v51 + 40) = &off_1E88F7808;
  swift_unknownObjectWeakAssign();
  swift_retain();
  sub_1CC9CB664();
  swift_release();
  *(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_locationController)
            + OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_delegate
            + 8) = &off_1E88F7830;
  swift_unknownObjectWeakAssign();
  v71 = v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_interactionController;
  swift_beginAccess();
  v72 = *(_QWORD *)(v71 + 24);
  v73 = *(_QWORD *)(v71 + 32);
  sub_1CCA1F500(v71, v72);
  v74 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v73 + 16);
  v75 = swift_retain();
  v74(v75, &off_1E88F77E8, v72, v73);
  swift_endAccess();
  v76 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_refreshingController);
  if (v76)
  {
    *(_QWORD *)(v76 + 40) = &off_1E88F7728;
    swift_unknownObjectWeakAssign();
  }
  *(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconRefreshingController)
            + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_delegate
            + 8) = &off_1E88F7768;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_safeLocationRefreshingController) + 24) = &off_1E88F77D8;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)(*(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_garbageCollector) + 72) = &off_1E88F7840;
  swift_unknownObjectWeakAssign();
  v77 = sub_1CCB63C04();
  v78 = (uint64_t)v102;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v102, 1, 1, v77);
  v79 = (_QWORD *)swift_allocObject();
  v79[2] = 0;
  v79[3] = 0;
  v79[4] = v3;
  v79[5] = v3;
  swift_retain_n();
  sub_1CCA96BE8(v78, (uint64_t)&unk_1EF9E2820, (uint64_t)v79);
  swift_release();
  swift_retain_n();
  v80 = sub_1CCB637D8();
  v81 = sub_1CCB63D48();
  if (os_log_type_enabled(v80, v81))
  {
    v82 = swift_slowAlloc();
    v83 = swift_slowAlloc();
    v102 = v68;
    v84 = v83;
    *(_QWORD *)&v109[0] = v83;
    *(_DWORD *)v82 = 136315394;
    v85 = sub_1CCB635C8();
    v87 = sub_1CC9C6AE4(0xCuLL, v85, v86);
    v101 = (void (*)(char *))v51;
    v88 = MEMORY[0x1D17B0F34](v87);
    v90 = v89;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v108[0] = sub_1CCA0CB60(v88, v90, (uint64_t *)v109);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v82 + 12) = 2080;
    if ((_DWORD)v104)
      v91 = 0x70616E7320736120;
    else
      v91 = 0;
    if ((_DWORD)v104)
      v92 = 0xEC000000746F6873;
    else
      v92 = 0xE000000000000000;
    v108[0] = sub_1CCA0CB60(v91, v92, (uint64_t *)v109);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v80, v81, "FMIPManager<%s>.init%s", (uint8_t *)v82, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v84, -1, -1);
    MEMORY[0x1D17B214C](v82, -1, -1);

    swift_release();
    swift_release();
    swift_release();

  }
  else
  {

    swift_release();
    swift_release_n();

    swift_release();
  }
  return v3;
}

uint64_t sub_1CC9EBC94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1CC9EBCD8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPLocation.init(from:)(a1, a2);
}

uint64_t FMIPPerson.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v51[2];
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68[4];
  char v69;
  char v70;
  char v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  char v81;
  char v82;

  v5 = sub_1CCA14E90(&qword_1ED8A7F48);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CC9EC4A4();
  sub_1CCB643B4();
  if (!v2)
  {
    LOBYTE(v68[0]) = 4;
    v9 = sub_1CCB64150();
    v11 = v10;
    LOBYTE(v68[0]) = 5;
    v62 = sub_1CCB64150();
    v66 = v12;
    LOBYTE(v68[0]) = 6;
    v13 = sub_1CCB64150();
    v61 = v9;
    v63 = v13;
    v65 = v14;
    LOBYTE(v68[0]) = 1;
    sub_1CCB64150();
    v15 = sub_1CCB640F0();
    swift_bridgeObjectRelease();
    LODWORD(v64) = v15 != 0;
    LOBYTE(v68[0]) = 3;
    LODWORD(v58) = sub_1CCB6415C();
    LOBYTE(v68[0]) = 2;
    v16 = sub_1CCB6415C();
    LOBYTE(v68[0]) = 0;
    v54 = sub_1CCB64174();
    LOBYTE(v68[0]) = 7;
    v17 = sub_1CCB64150();
    v55 = v18;
    v56 = v17;
    LOBYTE(v68[0]) = 8;
    v19 = sub_1CCB64150();
    v60 = v11;
    v59 = v20;
    v57 = v19;
    LODWORD(v54) = v54 == 1;
    v81 = v54;
    v82 = (char)v64;
    LODWORD(v53) = v16 & 1;
    v79 = v16 & 1;
    LODWORD(v52) = v58 & 1;
    v80 = v58 & 1;
    if (v65)
    {
      v21 = v60;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22 = v61;
    }
    else
    {
      v23 = (void *)objc_opt_self();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v24 = objc_msgSend(v23, sel_sharedInstance);
      v25 = objc_msgSend(v24, sel_ownerAccount);

      v26 = objc_msgSend(v25, sel_username);
      if (v26)
      {
        v63 = sub_1CCB63988();
        v65 = v27;

      }
      else
      {
        v65 = 0xE700000000000000;
        v63 = 0x6E776F6E6B6E75;
      }
      v21 = v60;
      v22 = v61;
    }
    v28 = 0x72656E776FLL;
    if (v55)
      v28 = v56;
    v58 = v28;
    if (v55)
      v29 = v55;
    else
      v29 = 0xE500000000000000;
    swift_bridgeObjectRetain();
    v30 = v65;
    swift_bridgeObjectRetain();
    v56 = v29;
    swift_bridgeObjectRetain();
    v68[0] = v22;
    v68[1] = v21;
    v68[2] = v62;
    v68[3] = v66;
    v69 = (char)v53;
    v70 = (char)v64;
    v71 = v54;
    v72 = v52;
    v73 = v63;
    v74 = v30;
    v75 = v58;
    v76 = v29;
    v77 = v57;
    v78 = v59;
    v54 = FMIPPerson.debugDescription.getter();
    v55 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1ED8AA630 != -1)
      swift_once();
    v32 = sub_1CCB637FC();
    sub_1CCA16C20(v32, (uint64_t)qword_1ED8AD7F8);
    v33 = v55;
    swift_bridgeObjectRetain();
    v34 = sub_1CCB637D8();
    v35 = sub_1CCB63D18();
    v64 = v34;
    if (os_log_type_enabled(v34, v35))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      v52 = swift_slowAlloc();
      v68[0] = v52;
      v36 = v53;
      *(_DWORD *)v53 = 136315138;
      v51[1] = v36 + 4;
      swift_bridgeObjectRetain();
      v67 = sub_1CCA0CB60(v54, v33, v68);
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      v37 = v64;
      v38 = v35;
      v39 = v53;
      _os_log_impl(&dword_1CC9BF000, v64, v38, "FMIPPerson: Initialized: %s", v53, 0xCu);
      v40 = v52;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v40, -1, -1);
      MEMORY[0x1D17B214C](v39, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();

    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v41 = v79;
    v42 = v82;
    v43 = v81;
    v44 = v80;
    v45 = v60;
    *(_QWORD *)a2 = v61;
    *(_QWORD *)(a2 + 8) = v45;
    v46 = v66;
    *(_QWORD *)(a2 + 16) = v62;
    *(_QWORD *)(a2 + 24) = v46;
    *(_BYTE *)(a2 + 32) = v41;
    *(_BYTE *)(a2 + 33) = v42;
    *(_BYTE *)(a2 + 34) = v43;
    *(_BYTE *)(a2 + 35) = v44;
    v47 = v65;
    *(_QWORD *)(a2 + 40) = v63;
    *(_QWORD *)(a2 + 48) = v47;
    v48 = v56;
    *(_QWORD *)(a2 + 56) = v58;
    *(_QWORD *)(a2 + 64) = v48;
    v49 = v59;
    *(_QWORD *)(a2 + 72) = v57;
    *(_QWORD *)(a2 + 80) = v49;
  }
  return sub_1CCA01CA0((uint64_t)a1);
}

uint64_t sub_1CC9EC47C()
{
  sub_1CC9EC4A4();
  return sub_1CCB643D8();
}

unint64_t sub_1CC9EC4A4()
{
  unint64_t result;

  result = qword_1ED8A7178;
  if (!qword_1ED8A7178)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB743D8, &type metadata for FMIPPerson.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7178);
  }
  return result;
}

unint64_t FMIPPerson.debugDescription.getter()
{
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return 0xD000000000000019;
}

void sub_1CC9EC670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  char v4;
  char v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  id v13;
  unsigned int v14;
  void *v15;
  id v16;
  void *v17;
  unsigned int v18;
  char v19;
  id v20;
  void *v21;
  unsigned int v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  v2 = (uint64_t *)(v0 + qword_1ED8A7250);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v28 = *v2;
  *v2 = 0x8000000000000000;
  sub_1CCA07250(3157553, 0xE300000000000000, 0xD000000000000015, 0x80000001CCB79D60, isUniquelyReferenced_nonNull_native);
  *v2 = v28;
  swift_bridgeObjectRelease();
  v4 = swift_isUniquelyReferenced_nonNull_native();
  v29 = *v2;
  *v2 = 0x8000000000000000;
  sub_1CCA07250(3157555, 0xE300000000000000, 0xD000000000000014, 0x80000001CCB79D80, v4);
  *v2 = v29;
  swift_bridgeObjectRelease();
  v5 = swift_isUniquelyReferenced_nonNull_native();
  v30 = *v2;
  *v2 = 0x8000000000000000;
  sub_1CCA07250(0x72657665726F46, 0xE700000000000000, 0xD000000000000012, 0x80000001CCB79DA0, v5);
  *v2 = v30;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v6 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  if (!v6)
  {
    __break(1u);
    return;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, sel_serverFriendlyDescription);

  if (!v8)
  {
    swift_beginAccess();
    goto LABEL_6;
  }
  v9 = sub_1CCB63988();
  v11 = v10;

  swift_beginAccess();
  if (!v11)
  {
LABEL_6:
    sub_1CCB09214(0xD000000000000011, 0x80000001CCB79DC0);
    goto LABEL_7;
  }
  v12 = swift_isUniquelyReferenced_nonNull_native();
  v30 = *v2;
  *v2 = 0x8000000000000000;
  sub_1CCA07250(v9, v11, 0xD000000000000011, 0x80000001CCB79DC0, v12);
  *v2 = v30;
LABEL_7:
  swift_bridgeObjectRelease();
  swift_endAccess();
  v13 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v14 = objc_msgSend(v13, sel_isInternalBuild);

  if (v14)
  {
    v15 = (void *)objc_opt_self();
    v16 = objc_msgSend(v15, sel_standardUserDefaults);
    v17 = (void *)sub_1CCB63964();
    v18 = objc_msgSend(v16, sel_BOOLForKey_, v17);

    if (v18)
    {
      swift_beginAccess();
      v19 = swift_isUniquelyReferenced_nonNull_native();
      v30 = *v2;
      *v2 = 0x8000000000000000;
      sub_1CCA07250(1702195828, 0xE400000000000000, 0xD000000000000018, 0x80000001CCB79E60, v19);
      *v2 = v30;
      swift_bridgeObjectRelease();
      swift_endAccess();
    }
    v20 = objc_msgSend(v15, sel_standardUserDefaults, v30);
    v21 = (void *)sub_1CCB63964();
    v22 = objc_msgSend(v20, sel_BOOLForKey_, v21);

    if (v22)
    {
      swift_beginAccess();
      v23 = swift_isUniquelyReferenced_nonNull_native();
      v31 = *v2;
      *v2 = 0x8000000000000000;
      sub_1CCA07250(1702195828, 0xE400000000000000, 0xD00000000000001ALL, 0x80000001CCB79E40, v23);
      *v2 = v31;
      swift_bridgeObjectRelease();
      swift_endAccess();
    }
  }
  v24 = (uint64_t *)(v1 + qword_1ED8A7230);
  v25 = *(_QWORD *)(v1 + qword_1ED8A7230 + 8);
  if (v25)
  {
    v26 = *v24;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v27 = swift_isUniquelyReferenced_nonNull_native();
    v32 = *v2;
    *v2 = 0x8000000000000000;
    sub_1CCA07250(v26, v25, 0xD000000000000019, 0x80000001CCB79DE0, v27);
    *v2 = v32;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
}

void sub_1CC9ECB58(_QWORD *a1)
{
  FMIPPlaySoundMetadata.encode(to:)(a1);
}

void FMIPPlaySoundMetadata.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[2];
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v3 = sub_1CCA14E90(&qword_1EF9E6988);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FMIPPlaySoundMetadata();
  v23 = v1;
  v8 = (void *)sub_1CCB63538();
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CC9FC5D0();
  sub_1CCB643CC();
  objc_msgSend(v8, sel_fm_epoch);
  LOBYTE(v25) = 0;
  v9 = v24;
  sub_1CCB6421C();
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

  }
  else
  {
    v10 = v4;
    v11 = v23;
    v25 = qword_1CCB76A68[*v23];
    sub_1CCB64240();
    LOBYTE(v25) = 1;
    sub_1CCB641E0();
    v24 = v8;
    swift_bridgeObjectRelease();
    v22[0] = v7;
    v12 = &v11[*(int *)(v7 + 24)];
    v13 = *((_QWORD *)v12 + 1);
    v25 = *(_QWORD *)v12;
    v26 = v13;
    v27 = 2;
    swift_bridgeObjectRetain();
    v14 = sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
    sub_1CCA008E8();
    v22[1] = v14;
    sub_1CCB64210();
    swift_bridgeObjectRelease();
    v15 = v22[0];
    v16 = &v11[*(int *)(v22[0] + 28)];
    v17 = *((_QWORD *)v16 + 1);
    v25 = *(_QWORD *)v16;
    v26 = v17;
    v27 = 3;
    swift_bridgeObjectRetain();
    sub_1CCB64210();
    swift_bridgeObjectRelease();
    v18 = &v11[*(int *)(v15 + 32)];
    v19 = *((_QWORD *)v18 + 1);
    v25 = *(_QWORD *)v18;
    v26 = v19;
    v27 = 4;
    swift_bridgeObjectRetain();
    sub_1CCB64210();
    swift_bridgeObjectRelease();
    v20 = &v11[*(int *)(v15 + 36)];
    v21 = *((_QWORD *)v20 + 1);
    v25 = *(_QWORD *)v20;
    v26 = v21;
    v27 = 5;
    swift_bridgeObjectRetain();
    sub_1CCB64210();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, _QWORD))(v10 + 8))(v6, 0);
  }
}

uint64_t sub_1CC9ECEAC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPAudioChannel.init(from:)(a1, a2);
}

uint64_t FMIPAudioChannel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  char v25;
  _QWORD v26[2];
  uint64_t v27;
  uint8_t *v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];
  BOOL v35;
  char v36;
  char v37;
  BOOL v38;
  char v39;
  char v40;

  v5 = sub_1CCA14E90(&qword_1EF9E03E0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CC9ED240();
  sub_1CCB643B4();
  if (!v2)
  {
    LOBYTE(v34[0]) = 0;
    v9 = sub_1CCB64150();
    v11 = v10;
    v32 = v9;
    LOBYTE(v34[0]) = 1;
    v12 = sub_1CCB6415C();
    LOBYTE(v34[0]) = 2;
    v31 = sub_1CCB64174();
    LOBYTE(v34[0]) = 3;
    v13 = sub_1CCB6415C();
    v38 = v31 != 0;
    v39 = v13 & 1;
    v40 = v12 & 1;
    v34[0] = v32;
    v34[1] = v11;
    v35 = v31 != 0;
    v36 = v12 & 1;
    v37 = v13 & 1;
    v31 = FMIPAudioChannel.debugDescription.getter();
    v16 = v15;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v17 = sub_1CCB637FC();
    sub_1CCA16C20(v17, (uint64_t)qword_1ED8AD7F8);
    swift_bridgeObjectRetain();
    v18 = sub_1CCB637D8();
    v19 = sub_1CCB63D18();
    v30 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v34[0] = v27;
      v29 = v18;
      v20 = v28;
      *(_DWORD *)v28 = 136315138;
      v26[1] = v20 + 4;
      swift_bridgeObjectRetain();
      v33 = sub_1CCA0CB60(v31, v16, v34);
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      v21 = v28;
      _os_log_impl(&dword_1CC9BF000, v29, (os_log_type_t)v30, "FMIPAudioChannel: Initialized: %s", v28, 0xCu);
      v22 = v27;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v22, -1, -1);
      MEMORY[0x1D17B214C](v21, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();

    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v23 = v38;
    v24 = v40;
    v25 = v39;
    *(_QWORD *)a2 = v32;
    *(_QWORD *)(a2 + 8) = v11;
    *(_BYTE *)(a2 + 16) = v23;
    *(_BYTE *)(a2 + 17) = v24;
    *(_BYTE *)(a2 + 18) = v25;
  }
  return sub_1CCA01CA0((uint64_t)a1);
}

unint64_t sub_1CC9ED240()
{
  unint64_t result;

  result = qword_1EF9E03E8;
  if (!qword_1EF9E03E8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB68B7C, &type metadata for FMIPAudioChannel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E03E8);
  }
  return result;
}

unint64_t FMIPAudioChannel.debugDescription.getter()
{
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return 0xD000000000000018;
}

uint64_t sub_1CC9ED414@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FMIPAddress.init(from:)(a1, a2);
}

uint64_t FMIPAddress.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  char v97;
  uint64_t v98;

  v5 = sub_1CCA14E90(&qword_1ED8A7F50);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CC9EDB10();
  sub_1CCB643B4();
  if (v2)
  {
    v9 = (uint64_t)a1;
  }
  else
  {
    LOBYTE(v98) = 0;
    v10 = sub_1CCB64150();
    v93 = v11;
    v94 = v10;
    sub_1CCA14E90(&qword_1EF9E13B8);
    v97 = 1;
    sub_1CCA1FAE8(&qword_1EF9E19F0, &qword_1EF9E13B8, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    sub_1CCB64180();
    v92 = v98;
    LOBYTE(v98) = 2;
    v12 = sub_1CCB64150();
    v90 = v13;
    v91 = v12;
    LOBYTE(v98) = 3;
    v14 = sub_1CCB64150();
    v88 = v15;
    v89 = v14;
    LOBYTE(v98) = 4;
    v16 = sub_1CCB64150();
    v86 = v17;
    v87 = v16;
    LOBYTE(v98) = 5;
    v18 = sub_1CCB64150();
    v84 = v19;
    v85 = v18;
    LOBYTE(v98) = 6;
    v20 = sub_1CCB64150();
    v82 = v21;
    v83 = v20;
    LOBYTE(v98) = 7;
    v22 = sub_1CCB64150();
    v80 = v23;
    v81 = v22;
    LOBYTE(v98) = 8;
    v24 = sub_1CCB64150();
    v78 = v25;
    v79 = v24;
    LOBYTE(v98) = 9;
    v26 = sub_1CCB64150();
    v76 = v27;
    v77 = v26;
    LOBYTE(v98) = 10;
    v28 = sub_1CCB64150();
    v74 = v29;
    v75 = v28;
    v97 = 11;
    sub_1CCB64180();
    v64 = v98;
    LOBYTE(v98) = 12;
    v30 = sub_1CCB64150();
    v72 = v31;
    v73 = v30;
    LOBYTE(v98) = 13;
    v32 = sub_1CCB64150();
    v70 = v33;
    v71 = v32;
    LOBYTE(v98) = 14;
    v34 = sub_1CCB64150();
    v68 = v35;
    v69 = v34;
    LOBYTE(v98) = 15;
    v36 = sub_1CCB64150();
    v66 = v37;
    v67 = v36;
    LOBYTE(v98) = 16;
    v38 = sub_1CCB64150();
    v95 = v6;
    v96 = a1;
    v40 = v39;
    v65 = v38;
    LOBYTE(v98) = 17;
    v41 = sub_1CCB64150();
    v43 = v42;
    LOBYTE(v98) = 18;
    v44 = sub_1CCB64150();
    v46 = v45;
    (*(void (**)(char *, uint64_t))(v95 + 8))(v8, v5);
    v47 = v93;
    *a2 = v94;
    a2[1] = v47;
    v48 = v91;
    a2[2] = v92;
    a2[3] = v48;
    v49 = v89;
    a2[4] = v90;
    a2[5] = v49;
    v50 = v87;
    a2[6] = v88;
    a2[7] = v50;
    v51 = v85;
    a2[8] = v86;
    a2[9] = v51;
    v52 = v83;
    a2[10] = v84;
    a2[11] = v52;
    v53 = v81;
    a2[12] = v82;
    a2[13] = v53;
    v54 = v79;
    a2[14] = v80;
    a2[15] = v54;
    v55 = v77;
    a2[16] = v78;
    a2[17] = v55;
    v56 = v75;
    a2[18] = v76;
    a2[19] = v56;
    v57 = v64;
    a2[20] = v74;
    a2[21] = v57;
    v58 = v72;
    a2[22] = v73;
    a2[23] = v58;
    v59 = v70;
    a2[24] = v71;
    a2[25] = v59;
    v60 = v68;
    a2[26] = v69;
    a2[27] = v60;
    v61 = v66;
    a2[28] = v67;
    a2[29] = v61;
    a2[30] = v65;
    a2[31] = v40;
    a2[32] = v41;
    a2[33] = v43;
    a2[34] = v44;
    a2[35] = v46;
    v9 = (uint64_t)v96;
  }
  return sub_1CCA01CA0(v9);
}

unint64_t sub_1CC9EDB10()
{
  unint64_t result;

  result = qword_1ED8A7198;
  if (!qword_1ED8A7198)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6A710, &type metadata for FMIPAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7198);
  }
  return result;
}

uint64_t sub_1CC9EDB54(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t sub_1CC9EDB90(char a1)
{
  uint64_t v1;

  return sub_1CC9EDB9C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24));
}

uint64_t sub_1CC9EDB9C(char a1, uint64_t a2, void (*a3)(uint64_t *))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v20;
  char v21;
  uint64_t v22;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v7 = sub_1CCB637FC();
    sub_1CCA16C20(v7, (uint64_t)qword_1ED8AD7F8);
    v8 = sub_1CCB637D8();
    v9 = sub_1CCB63D48();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v22 = v11;
      *(_DWORD *)v10 = 136315138;
      if ((a1 & 1) != 0)
        v12 = 0x64656C6261736964;
      else
        v12 = 0x64656C62616E65;
      if ((a1 & 1) != 0)
        v13 = 0xE800000000000000;
      else
        v13 = 0xE700000000000000;
      sub_1CCA0CB60(v12, v13, &v22);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v8, v9, "FMIPBeaconRefreshingController: refreshUTAlertState: %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v11, -1, -1);
      MEMORY[0x1D17B214C](v10, -1, -1);
    }

    if (a3)
    {
      LOBYTE(v22) = a1 & 1;
      a3(&v22);
    }
    v14 = OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_utAlertState;
    if ((a1 & 1) != 0)
      v15 = 0x64656C6261736964;
    else
      v15 = 0x64656C62616E65;
    if ((a1 & 1) != 0)
      v16 = 0xE800000000000000;
    else
      v16 = 0xE700000000000000;
    if (*(_BYTE *)(v6 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_utAlertState))
      v17 = 0x64656C6261736964;
    else
      v17 = 0x64656C62616E65;
    if (*(_BYTE *)(v6 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_utAlertState))
      v18 = 0xE800000000000000;
    else
      v18 = 0xE700000000000000;
    if (v15 == v17 && v16 == v18)
    {
      swift_release();
      return swift_bridgeObjectRelease_n();
    }
    else
    {
      v20 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
        return swift_release();
      v21 = a1 & 1;
      *(_BYTE *)(v6 + v14) = v21;
      if (!MEMORY[0x1D17B2218](v6 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_delegate))
      {
        return swift_release();
      }
      else
      {
        LOBYTE(v22) = v21;
        sub_1CC9D91C8((unsigned __int8 *)&v22);
        swift_release();
        return swift_unknownObjectRelease();
      }
    }
  }
  return result;
}

uint64_t FMReverseGeocodingRequest.debugDescription.getter()
{
  uint64_t v0;
  void *v1;

  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v1 = *(void **)(v0 + 16);
  sub_1CC9F0100();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  objc_msgSend(v1, sel_coordinate);
  sub_1CCB63C1C();
  sub_1CCB63A24();
  objc_msgSend(v1, sel_coordinate);
  sub_1CCB63C1C();
  sub_1CCB63A24();
  objc_msgSend(v1, sel_horizontalAccuracy);
  sub_1CCB63C1C();
  sub_1CCB63A24();
  objc_msgSend(v1, sel_horizontalAccuracy);
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  type metadata accessor for FMReverseGeocodingRequest();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  objc_msgSend(v1, sel_referenceFrame);
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return 0;
}

uint64_t sub_1CC9EE240@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int *v2;
  int *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  Class v48;
  char v49;
  void (*v50)(char *, uint64_t, uint64_t, int *);
  unsigned int (*v51)(char *, uint64_t, int *);
  uint64_t v52;
  NSObject *v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  const void *v82;
  void *v83;
  id v84;
  char *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  char v89;
  id v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  double v106;
  double v107;
  uint64_t v108;
  uint64_t *v109;
  NSObject *v110;
  os_log_type_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  const void *v134;
  void *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  NSObject *v151;
  uint64_t v152;
  Class isa;
  int *v154;
  _QWORD v155[36];
  uint64_t v156;
  _OWORD v157[18];

  v3 = v2;
  v150 = a2;
  v5 = sub_1CCB635B0();
  v146 = *(_QWORD *)(v5 - 8);
  v147 = v5;
  MEMORY[0x1E0C80A78](v5);
  v145 = (char *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for FMReverseGeocodingRequest();
  v7 = MEMORY[0x1E0C80A78](v144);
  v140 = (uint64_t *)((char *)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = MEMORY[0x1E0C80A78](v7);
  v142 = (uint64_t **)((char *)&v136 - v10);
  v11 = MEMORY[0x1E0C80A78](v9);
  v149 = (uint64_t)&v136 - v12;
  MEMORY[0x1E0C80A78](v11);
  v141 = (uint64_t *)((char *)&v136 - v13);
  v14 = sub_1CCA14E90(&qword_1EF9E2A08);
  v15 = MEMORY[0x1E0C80A78](v14);
  v143 = (uint64_t)&v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v136 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v136 - v20;
  v151 = sub_1CCA14E90((uint64_t *)&unk_1EF9E2A10);
  isa = v151[-1].isa;
  v22 = MEMORY[0x1E0C80A78](v151);
  v137 = (uint64_t)&v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v136 = (uint64_t *)((char *)&v136 - v25);
  v26 = MEMORY[0x1E0C80A78](v24);
  v138 = (uint64_t *)((char *)&v136 - v27);
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (uint64_t **)((char *)&v136 - v29);
  v31 = MEMORY[0x1E0C80A78](v28);
  v139 = (uint64_t)&v136 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v148 = (uint64_t)&v136 - v34;
  MEMORY[0x1E0C80A78](v33);
  v152 = (uint64_t)&v136 - v35;
  v36 = sub_1CCB6388C();
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v39 = (uint64_t **)((char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = *(void **)((char *)v3 + qword_1EF9E4EE0);
  *v39 = v40;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v37 + 104))(v39, *MEMORY[0x1E0DEF740], v36);
  v41 = v40;
  LOBYTE(v40) = sub_1CCB638A4();
  (*(void (**)(_QWORD *, uint64_t))(v37 + 8))(v39, v36);
  if ((v40 & 1) == 0)
  {
    __break(1u);
    goto LABEL_47;
  }
  v42 = sub_1CC9F0100();
  v44 = v43;
  v154 = v3;
  v45 = (uint64_t *)((char *)v3 + qword_1EF9E4EB8);
  swift_beginAccess();
  v46 = *v45;
  if (*(_QWORD *)(v46 + 16))
  {
    swift_bridgeObjectRetain();
    v47 = sub_1CCA074F4(v42, v44);
    v3 = (int *)v151;
    v48 = isa;
    if ((v49 & 1) != 0)
    {
      sub_1CC9EAB74(*(_QWORD *)(v46 + 56) + *((_QWORD *)isa + 9) * v47, (uint64_t)v21, (uint64_t *)&unk_1EF9E2A10);
      v50 = (void (*)(char *, uint64_t, uint64_t, int *))*((_QWORD *)v48 + 7);
      v50(v21, 0, 1, v3);
    }
    else
    {
      v50 = (void (*)(char *, uint64_t, uint64_t, int *))*((_QWORD *)isa + 7);
      v50(v21, 1, 1, (int *)v151);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v48 = isa;
    v50 = (void (*)(char *, uint64_t, uint64_t, int *))*((_QWORD *)isa + 7);
    v3 = (int *)v151;
    v50(v21, 1, 1, (int *)v151);
  }
  swift_bridgeObjectRelease();
  v51 = (unsigned int (*)(char *, uint64_t, int *))*((_QWORD *)v48 + 6);
  if (v51(v21, 1, v3) != 1)
  {
    v37 = v152;
    sub_1CC9C3EC0((uint64_t)v21, v152, (uint64_t *)&unk_1EF9E2A10);
    if (qword_1EF9DEF60 == -1)
    {
LABEL_13:
      v60 = sub_1CCB637FC();
      sub_1CCA16C20(v60, (uint64_t)qword_1EF9FF480);
      v61 = v141;
      sub_1CCA0BEEC(a1, (uint64_t)v141, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      v62 = v149;
      sub_1CCA0BEEC(a1, v149, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      v63 = v148;
      sub_1CC9EAB74(v37, v148, (uint64_t *)&unk_1EF9E2A10);
      swift_retain_n();
      v64 = sub_1CCB637D8();
      v65 = sub_1CCB63D48();
      v151 = v64;
      LODWORD(v140) = v65;
      if (os_log_type_enabled(v64, v65))
      {
        v66 = swift_slowAlloc();
        v139 = swift_slowAlloc();
        *(_QWORD *)&v157[0] = v139;
        *(_DWORD *)v66 = 136315906;
        v67 = sub_1CCB643F0();
        v155[0] = sub_1CCA0CB60(v67, v68, (uint64_t *)v157);
        sub_1CCB63E44();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v66 + 12) = 2080;
        v69 = (uint64_t)v61;
        v70 = *v61;
        v71 = v61[1];
        swift_bridgeObjectRetain();
        v155[0] = sub_1CCA0CB60(v70, v71, (uint64_t *)v157);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        sub_1CCA0BF30(v69, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        *(_WORD *)(v66 + 22) = 2080;
        v72 = v149;
        v73 = sub_1CC9F0100();
        v155[0] = sub_1CCA0CB60(v73, v74, (uint64_t *)v157);
        v37 = v152;
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        sub_1CCA0BF30(v72, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        *(_WORD *)(v66 + 32) = 2080;
        v75 = v148;
        v76 = FMIPAddress.debugDescription.getter();
        v155[0] = sub_1CCA0CB60(v76, v77, (uint64_t *)v157);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        sub_1CC9C3E84(v75, (uint64_t *)&unk_1EF9E2A10);
        v78 = v151;
        _os_log_impl(&dword_1CC9BF000, v151, (os_log_type_t)v140, "%s: Using cached request %s based on geoHash %s -> %s.", (uint8_t *)v66, 0x2Au);
        v79 = v139;
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v79, -1, -1);
        MEMORY[0x1D17B214C](v66, -1, -1);

      }
      else
      {
        swift_release_n();
        sub_1CCA0BF30((uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        sub_1CCA0BF30(v62, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        sub_1CC9C3E84(v63, (uint64_t *)&unk_1EF9E2A10);

      }
      v80 = *(_QWORD *)(a1 + 8);
      v151 = *(NSObject **)a1;
      v81 = v142;
      sub_1CCA0BEEC(a1, (uint64_t)v142, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      v82 = (const void *)(v37 + v3[12]);
      memcpy(v155, v82, sizeof(v155));
      v83 = *(void **)(a1 + 16);
      swift_bridgeObjectRetain();
      sub_1CCA31FF8((uint64_t)v155);
      v84 = objc_msgSend(v83, sel_timestamp);
      v85 = v145;
      sub_1CCB63580();

      v86 = v81[1];
      *v30 = *v81;
      v30[1] = v86;
      v87 = (void *)v81[2];
      swift_bridgeObjectRetain();
      v30[2] = sub_1CC9F0100();
      v30[3] = v88;
      v30[4] = v87;
      v89 = *((_BYTE *)v81 + *(int *)(v144 + 28));
      v90 = v87;
      sub_1CCA0BF30((uint64_t)v81, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      *((_BYTE *)v30 + v3[13]) = v89;
      (*(void (**)(char *, char *, uint64_t))(v146 + 32))((char *)v30 + v3[11], v85, v147);
      memcpy((char *)v30 + v3[12], v155, 0x120uLL);
      v91 = v143;
      sub_1CC9C3EC0((uint64_t)v30, v143, (uint64_t *)&unk_1EF9E2A10);
      (*((void (**)(uint64_t, _QWORD, uint64_t, int *))isa + 7))(v91, 0, 1, v3);
      swift_beginAccess();
      sub_1CCB05C00(v91, (uint64_t)v151, v80);
      swift_endAccess();
      memcpy(v157, v82, sizeof(v157));
      v92 = v150;
      memcpy(v150, v82, 0x120uLL);
      sub_1CCA31FF8((uint64_t)v157);
      sub_1CC9C3E84(v152, (uint64_t *)&unk_1EF9E2A10);
      v93 = v92;
      return nullsub_1(v93);
    }
LABEL_47:
    swift_once();
    goto LABEL_13;
  }
  sub_1CC9C3E84((uint64_t)v21, &qword_1EF9E2A08);
  v53 = *(NSObject **)a1;
  v52 = *(_QWORD *)(a1 + 8);
  v54 = (uint64_t *)((char *)v154 + qword_1EF9E4EC0);
  swift_beginAccess();
  v55 = *v54;
  if (!*(_QWORD *)(v55 + 16))
  {
    v50(v19, 1, 1, v3);
    v57 = v140;
LABEL_21:
    sub_1CC9C3E84((uint64_t)v19, &qword_1EF9E2A08);
    if (qword_1EF9DEF60 != -1)
      swift_once();
    v95 = sub_1CCB637FC();
    sub_1CCA16C20(v95, (uint64_t)qword_1EF9FF480);
    sub_1CCA0BEEC(a1, (uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    swift_retain_n();
    v96 = sub_1CCB637D8();
    v97 = sub_1CCB63D48();
    if (os_log_type_enabled(v96, v97))
    {
      v98 = swift_slowAlloc();
      v99 = swift_slowAlloc();
      *(_QWORD *)&v157[0] = v99;
      *(_DWORD *)v98 = 136315394;
      v100 = sub_1CCB643F0();
      v156 = sub_1CCA0CB60(v100, v101, (uint64_t *)v157);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v98 + 12) = 2080;
      v102 = *v57;
      v103 = v57[1];
      swift_bridgeObjectRetain();
      v156 = sub_1CCA0CB60(v102, v103, (uint64_t *)v157);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA0BF30((uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      _os_log_impl(&dword_1CC9BF000, v96, v97, "%s: No cached request for %s.", (uint8_t *)v98, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v99, -1, -1);
      MEMORY[0x1D17B214C](v98, -1, -1);
    }
    else
    {
      swift_release_n();
      sub_1CCA0BF30((uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    }

    goto LABEL_43;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v56 = sub_1CCA074F4((uint64_t)v53, v52);
  v57 = v140;
  if ((v58 & 1) != 0)
  {
    sub_1CC9EAB74(*(_QWORD *)(v55 + 56) + *((_QWORD *)isa + 9) * v56, (uint64_t)v19, (uint64_t *)&unk_1EF9E2A10);
    v59 = 0;
  }
  else
  {
    v59 = 1;
  }
  v50(v19, v59, 1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v51(v19, 1, v3) == 1)
    goto LABEL_21;
  v104 = v139;
  sub_1CC9C3EC0((uint64_t)v19, v139, (uint64_t *)&unk_1EF9E2A10);
  v105 = v145;
  sub_1CCB6358C();
  sub_1CCB63520();
  v107 = v106;
  (*(void (**)(char *, uint64_t))(v146 + 8))(v105, v147);
  if (v107 > 30.0)
  {
    if (qword_1EF9DEF60 != -1)
      swift_once();
    v108 = sub_1CCB637FC();
    sub_1CCA16C20(v108, (uint64_t)qword_1EF9FF480);
    v109 = v138;
    sub_1CC9EAB74(v104, (uint64_t)v138, (uint64_t *)&unk_1EF9E2A10);
    swift_retain_n();
    v110 = sub_1CCB637D8();
    v111 = sub_1CCB63D48();
    if (os_log_type_enabled(v110, v111))
    {
      v112 = swift_slowAlloc();
      v113 = swift_slowAlloc();
      *(_QWORD *)&v157[0] = v113;
      *(_DWORD *)v112 = 136315394;
      v114 = sub_1CCB643F0();
      v156 = sub_1CCA0CB60(v114, v115, (uint64_t *)v157);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v112 + 12) = 2080;
      v116 = *v109;
      v117 = v109[1];
      swift_bridgeObjectRetain();
      v156 = sub_1CCA0CB60(v116, v117, (uint64_t *)v157);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CC9C3E84((uint64_t)v109, (uint64_t *)&unk_1EF9E2A10);
      _os_log_impl(&dword_1CC9BF000, v110, v111, "%s: Cached request for %s is older than the 30s.", (uint8_t *)v112, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v113, -1, -1);
      MEMORY[0x1D17B214C](v112, -1, -1);

      v118 = v139;
    }
    else
    {

      sub_1CC9C3E84((uint64_t)v109, (uint64_t *)&unk_1EF9E2A10);
      swift_release_n();
      v118 = v104;
    }
    goto LABEL_42;
  }
  objc_msgSend(*(id *)(v104 + 32), sel_distanceFromLocation_, *(_QWORD *)(a1 + 16));
  v120 = *(_QWORD *)&v119;
  if (*(_BYTE *)(a1 + *(int *)(v144 + 28)))
    v121 = 50.0;
  else
    v121 = 250.0;
  if (v119 < v121)
  {
    if (qword_1EF9DEF60 != -1)
      swift_once();
    v122 = sub_1CCB637FC();
    sub_1CCA16C20(v122, (uint64_t)qword_1EF9FF480);
    v123 = v136;
    sub_1CC9EAB74(v104, (uint64_t)v136, (uint64_t *)&unk_1EF9E2A10);
    v124 = v137;
    sub_1CC9EAB74(v104, v137, (uint64_t *)&unk_1EF9E2A10);
    v125 = sub_1CCB637D8();
    v126 = sub_1CCB63D48();
    if (os_log_type_enabled(v125, v126))
    {
      v127 = swift_slowAlloc();
      v128 = swift_slowAlloc();
      *(_QWORD *)&v157[0] = v128;
      *(_DWORD *)v127 = 136315906;
      v129 = *v123;
      v130 = v123[1];
      swift_bridgeObjectRetain();
      v156 = sub_1CCA0CB60(v129, v130, (uint64_t *)v157);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CC9C3E84((uint64_t)v123, (uint64_t *)&unk_1EF9E2A10);
      *(_WORD *)(v127 + 12) = 2048;
      v156 = v120;
      sub_1CCB63E44();
      *(_WORD *)(v127 + 22) = 2048;
      v156 = *(_QWORD *)&v121;
      sub_1CCB63E44();
      *(_WORD *)(v127 + 32) = 2080;
      v131 = v137;
      v132 = FMIPAddress.debugDescription.getter();
      v156 = sub_1CCA0CB60(v132, v133, (uint64_t *)v157);
      v3 = (int *)v151;
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CC9C3E84(v131, (uint64_t *)&unk_1EF9E2A10);
      _os_log_impl(&dword_1CC9BF000, v125, v126, "FMReverseGeocodingCache: Using cached request for %s due to location distance throttling - distance: %f, limit: %f -> %s.", (uint8_t *)v127, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v128, -1, -1);
      MEMORY[0x1D17B214C](v127, -1, -1);
    }
    else
    {
      sub_1CC9C3E84((uint64_t)v123, (uint64_t *)&unk_1EF9E2A10);
      sub_1CC9C3E84(v124, (uint64_t *)&unk_1EF9E2A10);
    }

    v134 = (const void *)(v104 + v3[12]);
    memcpy(v157, v134, sizeof(v157));
    v135 = v150;
    memcpy(v150, v134, 0x120uLL);
    sub_1CCA31FF8((uint64_t)v157);
    sub_1CC9C3E84(v104, (uint64_t *)&unk_1EF9E2A10);
    v93 = v135;
    return nullsub_1(v93);
  }
  v118 = v104;
LABEL_42:
  sub_1CC9C3E84(v118, (uint64_t *)&unk_1EF9E2A10);
LABEL_43:
  sub_1CCA30EF4(v157);
  return sub_1CC9C3EC0((uint64_t)v157, (uint64_t)v150, &qword_1ED8A71C0);
}

uint64_t sub_1CC9EF33C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;

  v6 = sub_1CCB635B0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  if (v8 <= *(_DWORD *)(v10 + 84))
    v11 = *(_DWORD *)(v10 + 84);
  else
    v11 = *(_DWORD *)(v7 + 84);
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  if (!a2)
    return 0;
  v13 = v6;
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = *(_QWORD *)(v7 + 64);
  v16 = *(unsigned __int8 *)(v10 + 80);
  if (a2 <= v12)
    goto LABEL_27;
  v17 = *(_QWORD *)(v10 + 64) + ((v15 + ((v14 + 40) & ~v14) + v16) & ~v16) + 1;
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v21 = ((a2 - v12 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_27:
      if ((v11 & 0x80000000) != 0)
      {
        v25 = (((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v14 + 8) & ~v14;
        if ((_DWORD)v8 == v12)
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v25, v8, v13);
        else
          return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v10 + 48))((v25 + v15 + v16) & ~v16, *(unsigned int *)(v10 + 84), v9);
      }
      else
      {
        v24 = *(_QWORD *)(a1 + 8);
        if (v24 >= 0xFFFFFFFF)
          LODWORD(v24) = -1;
        return (v24 + 1);
      }
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_27;
LABEL_18:
  v22 = (v19 - 1) << v18;
  if (v17 > 3)
    v22 = 0;
  if (*(_DWORD *)(v10 + 64) + (((_DWORD)v15 + (((_DWORD)v14 + 40) & ~(_DWORD)v14) + (_DWORD)v16) & ~(_DWORD)v16) != -1)
  {
    if (v17 <= 3)
      v23 = *(_DWORD *)(v10 + 64) + ((v15 + ((v14 + 40) & ~(_DWORD)v14) + v16) & ~(_DWORD)v16) + 1;
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  return v12 + v22 + 1;
}

void sub_1CC9EF524(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v8 = *(_QWORD *)(sub_1CCB635B0() - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v8 + 84) <= *(_DWORD *)(v9 + 84))
    v10 = *(_DWORD *)(v9 + 84);
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = *(_QWORD *)(v9 + 64) + ((*(_QWORD *)(v8 + 64) + ((v12 + 40) & ~v12) + v13) & ~v13) + 1;
  if (a3 <= v11)
  {
    v15 = 0u;
  }
  else if (v14 <= 3)
  {
    v17 = ((a3 - v11 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v15 = 4u;
    }
    else if (v17 >= 0x100)
    {
      v15 = 2;
    }
    else
    {
      v15 = v17 > 1;
    }
  }
  else
  {
    v15 = 1u;
  }
  if (v11 < a2)
  {
    v16 = ~v11 + a2;
    if (v14 < 4)
    {
      if (*(_DWORD *)(v9 + 64)
         + ((*(_DWORD *)(v8 + 64) + (((_DWORD)v12 + 40) & ~(_DWORD)v12) + (_DWORD)v13) & ~(_DWORD)v13) != -1)
      {
        v18 = v16 & ~(-1 << (8 * v14));
        bzero(a1, *(_QWORD *)(v9 + 64) + ((*(_QWORD *)(v8 + 64) + ((v12 + 40) & ~v12) + v13) & ~v13) + 1);
        if ((_DWORD)v14 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if ((_DWORD)v14 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v9 + 64) + ((*(_QWORD *)(v8 + 64) + ((v12 + 40) & ~v12) + v13) & ~v13) + 1);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X5 }
}

void sub_1CC9EF798(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  objc_class *v59;
  _BYTE *v60;
  uint64_t (**v61)(uint64_t, void *);
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v68;
  uint64_t v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  objc_super v86;
  uint64_t v87;
  uint64_t v88[36];
  _QWORD v89[36];
  uint64_t v90[36];

  v5 = v4;
  v82 = a3;
  v83 = a4;
  v8 = type metadata accessor for FMReverseGeocodingRequest();
  v79 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v79 + 64);
  v10 = MEMORY[0x1E0C80A78](v8);
  v80 = (uint64_t)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v81 = (uint64_t)&v77 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v78 = (uint64_t)&v77 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v77 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v77 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v77 - v21;
  v85 = a1;
  v23 = sub_1CC9F0100();
  v25 = v24;
  v84 = v5;
  v26 = v5 + qword_1EF9E4EC8;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v26 + 16))
  {
    swift_bridgeObjectRetain();
    sub_1CCA074F4(v23, v25);
    v28 = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0)
    {
      v29 = v85;
      if (qword_1EF9DEF60 != -1)
        swift_once();
      v30 = sub_1CCB637FC();
      sub_1CCA16C20(v30, (uint64_t)qword_1EF9FF480);
      sub_1CCA0BEEC(v29, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      swift_retain_n();
      v31 = sub_1CCB637D8();
      v32 = sub_1CCB63D48();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = swift_slowAlloc();
        v34 = swift_slowAlloc();
        v90[0] = v34;
        *(_DWORD *)v33 = 136315394;
        v35 = sub_1CCB643F0();
        v89[0] = sub_1CCA0CB60(v35, v36, v90);
        sub_1CCB63E44();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 2080;
        v37 = FMReverseGeocodingRequest.debugDescription.getter();
        v89[0] = sub_1CCA0CB60(v37, v38, v90);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        _os_log_impl(&dword_1CC9BF000, v31, v32, "%s: Loading declined, we are already processing similar location: %s", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy();
        v39 = v34;
LABEL_21:
        MEMORY[0x1D17B214C](v39, -1, -1);
        MEMORY[0x1D17B214C](v33, -1, -1);
LABEL_25:

        return;
      }
      swift_release_n();
      v76 = (uint64_t)v20;
      goto LABEL_24;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v40 = v85;
  sub_1CCA0BEEC(v85, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  if ((a2 & 1) != 0)
  {
    sub_1CCA0BF30((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    v41 = v84;
  }
  else
  {
    v41 = v84;
    sub_1CC9EE240((uint64_t)v22, v88);
    sub_1CCA0BF30((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    sub_1CC9C3EC0((uint64_t)v88, (uint64_t)v89, &qword_1ED8A71C0);
    sub_1CCA307F0((uint64_t)v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
    sub_1CC9C3EC0((uint64_t)v89, (uint64_t)v90, &qword_1ED8A71C0);
    if (sub_1CCA33738((uint64_t)v90) != 1)
    {
      if (qword_1EF9DEF60 != -1)
        swift_once();
      v68 = sub_1CCB637FC();
      sub_1CCA16C20(v68, (uint64_t)qword_1EF9FF480);
      v69 = v78;
      sub_1CCA0BEEC(v40, v78, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      swift_retain_n();
      v31 = sub_1CCB637D8();
      v70 = sub_1CCB63D48();
      if (os_log_type_enabled(v31, v70))
      {
        v33 = swift_slowAlloc();
        v71 = swift_slowAlloc();
        v88[0] = v71;
        *(_DWORD *)v33 = 136315394;
        v72 = sub_1CCB643F0();
        v87 = sub_1CCA0CB60(v72, v73, v88);
        sub_1CCB63E44();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 2080;
        v74 = FMReverseGeocodingRequest.debugDescription.getter();
        v87 = sub_1CCA0CB60(v74, v75, v88);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        sub_1CCA0BF30(v69, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        _os_log_impl(&dword_1CC9BF000, v31, v70, "%s: Loading declined, we have already processed similar location: %s", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy();
        v39 = v71;
        goto LABEL_21;
      }
      swift_release_n();
      v76 = v69;
LABEL_24:
      sub_1CCA0BF30(v76, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      goto LABEL_25;
    }
  }
  if (qword_1EF9DEF60 != -1)
    swift_once();
  v42 = sub_1CCB637FC();
  sub_1CCA16C20(v42, (uint64_t)qword_1EF9FF480);
  sub_1CCA0BEEC(v40, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  swift_retain_n();
  v43 = sub_1CCB637D8();
  v44 = sub_1CCB63D48();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = swift_slowAlloc();
    v78 = swift_slowAlloc();
    v90[0] = v78;
    *(_DWORD *)v45 = 136315394;
    v46 = sub_1CCB643F0();
    v89[0] = sub_1CCA0CB60(v46, v47, v90);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v45 + 12) = 2080;
    v48 = FMReverseGeocodingRequest.debugDescription.getter();
    v89[0] = sub_1CCA0CB60(v48, v49, v90);
    v40 = v85;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA0BF30((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    _os_log_impl(&dword_1CC9BF000, v43, v44, "%s: Loading new address for %s", (uint8_t *)v45, 0x16u);
    v50 = v78;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v50, -1, -1);
    v51 = v45;
    v41 = v84;
    MEMORY[0x1D17B214C](v51, -1, -1);
  }
  else
  {
    swift_release_n();
    sub_1CCA0BF30((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  }

  v52 = v81;
  sub_1CCA0BEEC(v40, v81, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  v53 = v80;
  sub_1CCA0BEEC(v40, v80, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  v54 = (*(unsigned __int8 *)(v79 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
  v55 = swift_allocObject();
  *(_QWORD *)(v55 + 16) = v41;
  sub_1CC9FED60(v53, v55 + v54, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  v56 = (uint64_t *)(v55 + ((v9 + v54 + 7) & 0xFFFFFFFFFFFFFFF8));
  v58 = v82;
  v57 = v83;
  *v56 = v82;
  v56[1] = v57;
  v59 = (objc_class *)type metadata accessor for FMReverseGeocodingOperation();
  v60 = objc_allocWithZone(v59);
  v60[OBJC_IVAR____TtC8FMIPCore27FMReverseGeocodingOperation__isFinished] = 0;
  sub_1CCA0BEEC(v52, (uint64_t)&v60[OBJC_IVAR____TtC8FMIPCore27FMReverseGeocodingOperation_request], (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  v61 = (uint64_t (**)(uint64_t, void *))&v60[OBJC_IVAR____TtC8FMIPCore27FMReverseGeocodingOperation_completion];
  *v61 = sub_1CCABB274;
  v61[1] = (uint64_t (*)(uint64_t, void *))v55;
  swift_retain();
  sub_1CC9DF994(v58);
  v86.receiver = v60;
  v86.super_class = v59;
  v62 = objc_msgSendSuper2(&v86, sel_init);
  sub_1CCA0BF30(v52, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  objc_msgSend(*(id *)(v41 + qword_1EF9E4ED8), sel_addOperation_, v62);
  v63 = sub_1CC9F0100();
  v65 = v64;
  swift_beginAccess();
  v66 = v62;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v89[0] = *(_QWORD *)v26;
  *(_QWORD *)v26 = 0x8000000000000000;
  sub_1CCA1F550((uint64_t)v66, v63, v65, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)v26 = v89[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();

}

uint64_t sub_1CC9F0100()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  objc_msgSend(v0, sel_coordinate);
  v2 = round(v1 * 10000.0) / 10000.0;
  objc_msgSend(v0, sel_coordinate);
  v4 = round(v3 * 10000.0) / 10000.0;
  sub_1CCA14E90(&qword_1EF9DFD30);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1CCB692B0;
  v6 = MEMORY[0x1E0DEB070];
  v7 = MEMORY[0x1E0DEB100];
  *(_QWORD *)(v5 + 56) = MEMORY[0x1E0DEB070];
  *(_QWORD *)(v5 + 64) = v7;
  *(double *)(v5 + 32) = v2;
  *(_QWORD *)(v5 + 96) = v6;
  *(_QWORD *)(v5 + 104) = v7;
  *(double *)(v5 + 72) = v4;
  v8 = objc_msgSend(v0, sel_referenceFrame);
  v9 = MEMORY[0x1E0DEE168];
  *(_QWORD *)(v5 + 136) = MEMORY[0x1E0DEE0F8];
  *(_QWORD *)(v5 + 144) = v9;
  *(_DWORD *)(v5 + 112) = v8;
  objc_msgSend(v0, sel_horizontalAccuracy);
  if (v10 >= 5.0)
  {
    if (v10 >= 10.0)
    {
      if (v10 >= 25.0)
      {
        v11 = 50;
        v12 = 100;
        v13 = 1000;
        if (v10 < 250.0)
          v13 = 250;
        if (v10 >= 100.0)
          v12 = v13;
        if (v10 >= 50.0)
          v11 = v12;
      }
      else
      {
        v11 = 25;
      }
    }
    else
    {
      v11 = 10;
    }
  }
  else
  {
    v11 = 5;
  }
  v14 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v5 + 176) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v5 + 184) = v14;
  *(_QWORD *)(v5 + 152) = v11;
  return sub_1CCB639A0();
}

uint64_t sub_1CC9F0294@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPItemGroup.init(from:)(a1, a2);
}

uint64_t FMIPItemGroup.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  char v48;
  uint64_t v49;

  v44 = a2;
  v4 = sub_1CCA14E90(&qword_1ED8A8CD0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_1CCA14E90(&qword_1EF9E1D40);
  v7 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FMIPItemGroup();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v47 = a1;
  sub_1CCA04DDC(a1, v13);
  sub_1CC9F08A4();
  v45 = v9;
  sub_1CCB643B4();
  if (!v2)
  {
    v43 = v12;
    v48 = 0;
    sub_1CCA716BC();
    sub_1CCB64180();
    v14 = v49;
    LOBYTE(v49) = 1;
    v15 = sub_1CCB64150();
    v18 = v17;
    v41 = v15;
    v42 = v14;
    sub_1CCA14E90(&qword_1EF9E1438);
    v48 = 2;
    sub_1CCA71700();
    sub_1CCB64180();
    v39 = v49;
    v40 = v18;
    sub_1CCA14E90(&qword_1EF9E1D58);
    v48 = 3;
    sub_1CCA1552C(&qword_1EF9E1D60, &qword_1EF9E1D58, (uint64_t (*)(void))sub_1CCA7177C, MEMORY[0x1E0DEB3D8]);
    sub_1CCB64180();
    v19 = v49;
    sub_1CCA14E90(&qword_1EF9E1D70);
    v48 = 4;
    sub_1CCA717F8();
    sub_1CCB64180();
    v38 = v19;
    v20 = v49;
    sub_1CCA14E90((uint64_t *)&unk_1EF9E2A60);
    v48 = 5;
    sub_1CCA7187C();
    sub_1CCB64180();
    v36 = v49;
    v37 = v20;
    sub_1CCA14E90(&qword_1EF9E1D90);
    v48 = 6;
    sub_1CCA1552C(&qword_1EF9E1D98, &qword_1EF9E1D90, (uint64_t (*)(void))sub_1CCA718F8, MEMORY[0x1E0DEB3D8]);
    sub_1CCB64180();
    v21 = v49;
    LOBYTE(v49) = 7;
    v33 = sub_1CCB64150();
    v34 = v22;
    v35 = v21;
    LOBYTE(v49) = 8;
    v23 = sub_1CCB64174();
    v24 = v43;
    v25 = v41;
    *v43 = v42;
    v24[1] = v25;
    v26 = v39;
    v24[2] = v40;
    *(_QWORD *)((char *)v24 + *(int *)(v10 + 52)) = v26;
    v27 = v35;
    v24[5] = v36;
    v24[6] = v27;
    v28 = v37;
    v24[8] = v23;
    v24[9] = v28;
    v29 = v34;
    v24[3] = v33;
    v24[4] = v29;
    v24[7] = v38;
    v30 = type metadata accessor for FMIPItemLostModeMetadata();
    LOBYTE(v49) = 9;
    sub_1CC9CAA38(&qword_1EF9E1DA8, (uint64_t (*)(uint64_t))type metadata accessor for FMIPItemLostModeMetadata, (uint64_t)&protocol conformance descriptor for FMIPItemLostModeMetadata);
    sub_1CCB64180();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v45, v46);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v6, 0, 1, v30);
    v31 = *(int *)(v10 + 48);
    v32 = (uint64_t)v43;
    sub_1CCA71974((uint64_t)v6, (uint64_t)v43 + v31);
    sub_1CC9FED60(v32, v44, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  }
  return sub_1CCA01CA0((uint64_t)v47);
}

unint64_t sub_1CC9F08A4()
{
  unint64_t result;

  result = qword_1EF9E1D48;
  if (!qword_1EF9E1D48)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6AE0C, &type metadata for FMIPItemGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E1D48);
  }
  return result;
}

uint64_t FMLocationShifter.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v0 = sub_1CCB63D84();
  v1 = *(_QWORD *)(v0 - 8);
  v12[0] = v0;
  MEMORY[0x1E0C80A78](v0);
  v13 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1CCB63D6C();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v3);
  v5 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v5);
  sub_1CC9F0ECC();
  sub_1CCB6385C();
  v15 = MEMORY[0x1E0DEE9D8];
  v12[2] = sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, v4, MEMORY[0x1E0DEF828]);
  v12[1] = sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  v6 = *MEMORY[0x1E0DEF8D0];
  v7 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v8 = v13;
  v7(v13, v6, v0);
  v9 = sub_1CCB63DB4();
  v10 = v14;
  *(_QWORD *)(v14 + 24) = v9;
  sub_1CCB6385C();
  v15 = MEMORY[0x1E0DEE9D8];
  sub_1CCB63E98();
  v7(v8, v6, v12[0]);
  *(_QWORD *)(v10 + 32) = sub_1CCB63DB4();
  *(_QWORD *)(v10 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D27178]), sel_init);
  return v10;
}

uint64_t sub_1CC9F0B60()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *sub_1CC9F0B6C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v29 = a5;
  v30 = a6;
  v7 = v6;
  v25 = a4;
  v26 = a1;
  v27 = a2;
  v28 = a3;
  v8 = sub_1CCB63D84();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63D6C();
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v12);
  v14 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v14);
  v24[1] = sub_1CC9F0ECC();
  sub_1CCB63844();
  v32 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, v13, MEMORY[0x1E0DEF828]);
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF8D0], v8);
  v6[2] = sub_1CCB63DB4();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v15 = sub_1CCB637FC();
  sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD7F8);
  v16 = v25;
  swift_bridgeObjectRetain_n();
  v17 = sub_1CCB637D8();
  v18 = sub_1CCB63D48();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v32 = v20;
    *(_DWORD *)v19 = 136315138;
    swift_bridgeObjectRetain();
    v21 = v28;
    v31 = sub_1CCA0CB60(v28, v16, &v32);
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CC9BF000, v17, v18, "FMDiskIO: init with file name: %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v20, -1, -1);
    MEMORY[0x1D17B214C](v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    v21 = v28;
  }
  v22 = v27;
  v7[3] = v26;
  v7[4] = v22;
  v7[5] = v21;
  v7[6] = v16;
  sub_1CC9C3EC0(v29, (uint64_t)v7 + *(_QWORD *)(*v7 + 128), v30);
  return v7;
}

unint64_t sub_1CC9F0ECC()
{
  unint64_t result;

  result = qword_1ED8A8E30;
  if (!qword_1ED8A8E30)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED8A8E30);
  }
  return result;
}

uint64_t sub_1CC9F0F08(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1CCB63604();
    result = MEMORY[0x1D17B2068](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CC9F0F48(void *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  id v23;
  uint64_t v24;
  uint64_t *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD v53[4];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v57 = a1;
  v58 = a2;
  v54 = sub_1CCB63D84();
  v2 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v4 = (char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCB63D6C();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v5);
  v7 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v7);
  sub_1CCB635F8();
  v55 = OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshQueue;
  v53[1] = sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A8E30);
  sub_1CCB63844();
  *(_QWORD *)&v60 = MEMORY[0x1E0DEE9D8];
  v53[3] = sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, v6, MEMORY[0x1E0DEF828]);
  v53[2] = sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  v8 = *MEMORY[0x1E0DEF8D0];
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 104);
  v10 = v4;
  v11 = v4;
  v12 = v54;
  v9(v11, v8, v54);
  v13 = sub_1CCB63DB4();
  v14 = v56;
  *(_QWORD *)(v56 + v55) = v13;
  v55 = OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_filterQueue;
  sub_1CCB63844();
  *(_QWORD *)&v60 = MEMORY[0x1E0DEE9D8];
  sub_1CCB63E98();
  v9(v10, v8, v12);
  *(_QWORD *)(v14 + v55) = sub_1CCB63DB4();
  v15 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_spBeacons) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_appBeacons) = v15;
  *(_QWORD *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_unknownBeacons) = v15;
  *(_QWORD *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_itemGroups) = v15;
  *(_BYTE *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_currentlyRefreshing) = 0;
  *(_BYTE *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_nextRefreshQueued) = 0;
  sub_1CCB63514();
  *(_QWORD *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_delegate + 8) = 0;
  swift_unknownObjectWeakInit();
  sub_1CCB635A4();
  *(_QWORD *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_callbackInterval) = 0x40CD4C0000000000;
  *(_QWORD *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_defaultCallbackInterval) = 0x40DD4C0000000000;
  *(_QWORD *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_initialCallbackInterval) = 0x40CD4C0000000000;
  *(_QWORD *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshTimer) = 0;
  *(_BYTE *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_utAlertState) = 1;
  *(_BYTE *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_separationMonitoringState) = 7;
  *(_BYTE *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_clientConfiguration) = 2;
  v16 = v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy;
  v17 = sub_1CCA20394(v15);
  *(_BYTE *)v16 = 0;
  v18 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v16 + 8) = 3;
  *(_QWORD *)(v16 + 16) = v18;
  *(_QWORD *)(v16 + 24) = v17;
  *(_BYTE *)(v16 + 32) = 0;
  *(_BYTE *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_isThrottledOverride) = 0;
  *(_BYTE *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_isThrottled) = 0;
  *(_BYTE *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_isRefreshing) = 0;
  v19 = v57;
  v20 = v58;
  *(_QWORD *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession) = v57;
  v21 = *((_QWORD *)v20 + 2);
  v63 = *((_QWORD *)v20 + 3);
  v64 = v21;
  v22 = v20[1];
  *(_OWORD *)v16 = *v20;
  *(_OWORD *)(v16 + 16) = v22;
  *(_BYTE *)(v16 + 32) = *((_BYTE *)v20 + 32);
  v23 = v19;
  sub_1CC9F1844((uint64_t)&v64);
  sub_1CC9F1844((uint64_t)&v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = sub_1CCB631E4();
  *((_QWORD *)&v61 + 1) = v24;
  v62 = sub_1CC9CAA38(&qword_1ED8A8B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
  v25 = sub_1CCA01CC0((uint64_t *)&v60);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v25, *MEMORY[0x1E0D21250], v24);
  LOBYTE(v24) = MEMORY[0x1D17B0748](&v60);
  sub_1CCA01CA0((uint64_t)&v60);
  if ((v24 & 1) == 0)
  {
    *(_BYTE *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_shouldUseBeaconsOptimizationSPI) = 0;
    goto LABEL_15;
  }
  v26 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v27 = objc_msgSend(v26, sel_bundleIdentifier);

  if (!v27)
    goto LABEL_9;
  v28 = sub_1CCB63988();
  v30 = v29;

  if (v28 != 0xD000000000000010 || v30 != 0x80000001CCB77920)
  {
    v32 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v32 & 1) != 0)
    {
      v31 = 1;
      goto LABEL_10;
    }
LABEL_9:
    v31 = 0;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  v31 = 1;
LABEL_10:
  *(_BYTE *)(v14 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_shouldUseBeaconsOptimizationSPI) = v31;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v33 = sub_1CCB637FC();
  sub_1CCA16C20(v33, (uint64_t)qword_1ED8AD7F8);
  swift_retain();
  v34 = sub_1CCB637D8();
  v35 = sub_1CCB63D48();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v36 = 67109120;
    LODWORD(v60) = *(unsigned __int8 *)(v14
                                      + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_shouldUseBeaconsOptimizationSPI);
    sub_1CCB63E44();
    swift_release();
    _os_log_impl(&dword_1CC9BF000, v34, v35, "FMIPBeaconRefreshingController: shouldUseBeaconsOptimizationSPI: %{BOOL}d", v36, 8u);
    MEMORY[0x1D17B214C](v36, -1, -1);

  }
  else
  {

    swift_release();
  }
LABEL_15:
  if (qword_1ED8AA630 != -1)
    swift_once();
  v37 = sub_1CCB637FC();
  sub_1CCA16C20(v37, (uint64_t)qword_1ED8AD7F8);
  swift_retain();
  sub_1CC9F1844((uint64_t)&v64);
  sub_1CC9F1844((uint64_t)&v63);
  swift_retain();
  v38 = sub_1CCB637D8();
  v39 = sub_1CCB63D48();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = swift_slowAlloc();
    v41 = swift_slowAlloc();
    v57 = v23;
    v42 = v41;
    v59 = v41;
    *(_DWORD *)v40 = 136315394;
    v43 = sub_1CCB635C8();
    v45 = sub_1CC9C6AE4(0xCuLL, v43, v44);
    v46 = MEMORY[0x1D17B0F34](v45);
    v48 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v60 = sub_1CCA0CB60(v46, v48, &v59);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2080;
    v49 = v58[1];
    v60 = *v58;
    v61 = v49;
    LOBYTE(v62) = *((_BYTE *)v58 + 32);
    sub_1CC9F1844((uint64_t)&v64);
    sub_1CC9F1844((uint64_t)&v63);
    v50 = sub_1CCB639AC();
    *(_QWORD *)&v60 = sub_1CCA0CB60(v50, v51, &v59);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CC9F1CA4((uint64_t)&v64);
    sub_1CC9F1CA4((uint64_t)&v63);
    sub_1CC9F1CA4((uint64_t)&v64);
    sub_1CC9F1CA4((uint64_t)&v63);
    _os_log_impl(&dword_1CC9BF000, v38, v39, "FMIPBeaconRefreshingController<%s>.init %s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v42, -1, -1);
    MEMORY[0x1D17B214C](v40, -1, -1);

  }
  else
  {
    swift_release_n();
    sub_1CC9F1CA4((uint64_t)&v64);
    sub_1CC9F1CA4((uint64_t)&v63);
    sub_1CC9F1CA4((uint64_t)&v64);
    sub_1CC9F1CA4((uint64_t)&v63);

  }
  return v14;
}

uint64_t sub_1CC9F1844(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

void sub_1CC9F186C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, void *);
  void *v11;
  void *v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  __int128 v27;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, void *);
  void *v34;
  void *v35;
  uint64_t v36;
  _OWORD v37[2];
  char v38;
  __int128 v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy;
  v3 = *(_OWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy + 16);
  v39 = *(_OWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy);
  v40 = v3;
  v41 = *(_BYTE *)(v0 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy + 32);
  v42 = *((_QWORD *)&v3 + 1);
  v43 = v3;
  sub_1CC9F1844((uint64_t)&v43);
  sub_1CC9F1844((uint64_t)&v42);
  v4 = sub_1CC9F1CCC();
  sub_1CC9F1CA4((uint64_t)&v43);
  sub_1CC9F1CA4((uint64_t)&v42);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v5 = sub_1CCB637FC();
  sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v6 = sub_1CCB637D8();
  v7 = sub_1CCB63D48();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    *(_DWORD *)v8 = 136315138;
    *(_QWORD *)&v37[0] = v9;
    v10 = *(void (**)(uint64_t, void *))(v2 + 16);
    v11 = v4;
    v12 = *(void **)(v2 + 24);
    v13 = *(_BYTE *)(v2 + 32);
    v32 = *(_QWORD *)(v2 + 8);
    v33 = v10;
    v34 = v12;
    LOBYTE(v35) = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = sub_1CCB639AC();
    v31 = sub_1CCA0CB60(v14, v15, (uint64_t *)v37);
    sub_1CCB63E44();
    swift_release_n();
    v4 = v11;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v6, v7, "FMIPBeaconRefreshingController: Updating refresh policy to: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v9, -1, -1);
    MEMORY[0x1D17B214C](v8, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v16 = OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession;
  v17 = *(void **)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession);
  v18 = swift_allocObject();
  swift_weakInit();
  v35 = sub_1CCB4BF00;
  v36 = v18;
  v19 = MEMORY[0x1E0C809B0];
  v31 = MEMORY[0x1E0C809B0];
  v32 = 1107296256;
  v33 = (void (*)(uint64_t, void *))sub_1CC9C32FC;
  v34 = &unk_1E8900A20;
  v20 = _Block_copy(&v31);
  v21 = v17;
  swift_release();
  objc_msgSend(v21, sel_setLocationUpdateBlock_, v20);
  _Block_release(v20);

  v22 = *(void **)(v1 + v16);
  v23 = swift_allocObject();
  swift_weakInit();
  v35 = sub_1CCB4BF08;
  v36 = v23;
  v31 = v19;
  v32 = 1107296256;
  v33 = (void (*)(uint64_t, void *))sub_1CC9C32FC;
  v34 = &unk_1E8900A48;
  v24 = _Block_copy(&v31);
  v25 = v22;
  swift_release();
  objc_msgSend(v25, sel_setDeviceEventUpdateBlock_, v24);
  _Block_release(v24);

  v26 = *(void **)(v1 + v16);
  v27 = *(_OWORD *)(v2 + 16);
  v37[0] = *(_OWORD *)v2;
  v37[1] = v27;
  v38 = *(_BYTE *)(v2 + 32);
  v44 = *((_QWORD *)&v27 + 1);
  v45[0] = v27;
  v28 = v26;
  sub_1CC9F1844((uint64_t)v45);
  sub_1CC9F1844((uint64_t)&v44);
  v29 = sub_1CC9F1CCC();
  sub_1CC9F1CA4((uint64_t)v45);
  sub_1CC9F1CA4((uint64_t)&v44);
  v35 = sub_1CCB4BF10;
  v36 = v1;
  v31 = v19;
  v32 = 1107296256;
  v33 = sub_1CCA1F54C;
  v34 = &unk_1E8900A70;
  v30 = _Block_copy(&v31);
  swift_retain();
  swift_release();
  objc_msgSend(v28, sel_subscribeAndFetchLocationForContext_completion_, v29, v30);
  _Block_release(v30);

}

uint64_t sub_1CC9F1CA4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1CC9F1CCC()
{
  uint64_t v0;
  id v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  id v36;
  id v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  void *v42;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50[5];

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D89918]), sel_init);
  objc_msgSend(v1, sel_setSubscribe_, 1);
  objc_msgSend(v1, sel_setReportDeviceEvents_, 1);
  v2 = (_QWORD *)MEMORY[0x1E0D89AA8];
  if (!*(_BYTE *)v0)
    v2 = (_QWORD *)MEMORY[0x1E0D89AB0];
  objc_msgSend(v1, sel_setCachePolicy_, *v2);
  sub_1CC9F23D4(*(void **)(v0 + 8));
  type metadata accessor for SPBeaconType(0);
  v3 = (void *)sub_1CCB63B20();
  swift_bridgeObjectRelease();
  v49 = v1;
  objc_msgSend(v1, sel_setSearchTypes_, v3);

  v4 = swift_bridgeObjectRetain();
  sub_1CC9F22C8(v4);
  swift_bridgeObjectRelease();
  sub_1CCB63604();
  v5 = (void *)sub_1CCB63B20();
  swift_release();
  objc_msgSend(v1, sel_setSearchIdentifiers_, v5);

  sub_1CCA14E90(&qword_1EF9E3388);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1CCB70050;
  v7 = (void *)*MEMORY[0x1E0D89978];
  v8 = (void *)*MEMORY[0x1E0D89980];
  *(_QWORD *)(v6 + 32) = *MEMORY[0x1E0D89978];
  *(_QWORD *)(v6 + 40) = v8;
  v9 = (void *)*MEMORY[0x1E0D899A0];
  v10 = (void *)*MEMORY[0x1E0D899A8];
  *(_QWORD *)(v6 + 48) = *MEMORY[0x1E0D899A0];
  *(_QWORD *)(v6 + 56) = v10;
  v11 = (void *)*MEMORY[0x1E0D899B0];
  v12 = (void *)*MEMORY[0x1E0D899B8];
  *(_QWORD *)(v6 + 64) = *MEMORY[0x1E0D899B0];
  *(_QWORD *)(v6 + 72) = v12;
  v13 = (void *)*MEMORY[0x1E0D899C0];
  v14 = (void *)*MEMORY[0x1E0D899C8];
  *(_QWORD *)(v6 + 80) = *MEMORY[0x1E0D899C0];
  *(_QWORD *)(v6 + 88) = v14;
  v44 = (void *)*MEMORY[0x1E0D899D0];
  v45 = (void *)*MEMORY[0x1E0D899E0];
  v15 = *MEMORY[0x1E0D899E0];
  *(_QWORD *)(v6 + 96) = *MEMORY[0x1E0D899D0];
  *(_QWORD *)(v6 + 104) = v15;
  v16 = (void *)*MEMORY[0x1E0D899E8];
  v47 = (void *)*MEMORY[0x1E0D89988];
  v17 = *MEMORY[0x1E0D89988];
  *(_QWORD *)(v6 + 112) = *MEMORY[0x1E0D899E8];
  *(_QWORD *)(v6 + 120) = v17;
  v46 = (void *)*MEMORY[0x1E0D89990];
  v48 = (void *)*MEMORY[0x1E0D89998];
  v18 = *MEMORY[0x1E0D89998];
  *(_QWORD *)(v6 + 128) = *MEMORY[0x1E0D89990];
  *(_QWORD *)(v6 + 136) = v18;
  type metadata accessor for SPBeaconLocationSource(0);
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v22 = v10;
  v23 = v11;
  v24 = v12;
  v25 = v13;
  v26 = v14;
  v27 = v44;
  v28 = v45;
  v29 = v16;
  v30 = v47;
  v31 = v46;
  v32 = v48;
  v33 = (void *)sub_1CCB63B20();
  swift_bridgeObjectRelease();
  objc_msgSend(v49, sel_setSearchLocationSources_, v33);

  v34 = sub_1CCB631E4();
  v50[3] = v34;
  v50[4] = sub_1CC9CAA38(&qword_1ED8A8B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
  v35 = sub_1CCA01CC0(v50);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v35, *MEMORY[0x1E0D21258], v34);
  LOBYTE(v34) = MEMORY[0x1D17B0748](v50);
  sub_1CCA01CA0((uint64_t)v50);
  if ((v34 & 1) != 0)
  {
    v36 = (id)*MEMORY[0x1E0D899D8];
    v37 = objc_msgSend(v49, sel_searchLocationSources);
    v38 = (_QWORD *)sub_1CCB63B38();

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v38 = sub_1CC9F23C0(0, v38[2] + 1, 1, v38);
    v40 = v38[2];
    v39 = v38[3];
    if (v40 >= v39 >> 1)
      v38 = sub_1CC9F23C0((_QWORD *)(v39 > 1), v40 + 1, 1, v38);
    v38[2] = v40 + 1;
    v38[v40 + 4] = v36;
    v41 = (void *)sub_1CCB63B20();
    swift_bridgeObjectRelease();
    objc_msgSend(v49, sel_setSearchLocationSources_, v41);

  }
  sub_1CC9C30A8(0, &qword_1EF9E43C0);
  sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v42 = (void *)sub_1CCB638C8();
  objc_msgSend(v49, sel_setLastOnlineLocationInfo_, v42);

  return v49;
}

uint64_t sub_1CC9F2158(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      a5(0);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

void sub_1CC9F225C(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void type metadata accessor for SPBeaconType(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF5D8);
}

void type metadata accessor for SPBeaconLocationSource(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF5D0);
}

size_t sub_1CC9F22C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t result;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  sub_1CCA14E90(&qword_1EF9E2AD0);
  v3 = *(_QWORD *)(sub_1CCB63604() - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      swift_bridgeObjectRetain();
      v9 = sub_1CCAA7298(&v10, (uint64_t)v6 + v5, v1, a1);
      sub_1CCA2F54C();
      if (v9 == v1)
        return (size_t)v6;
      __break(1u);
      return MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CC9F23C0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1CCACA198(a1, a2, a3, a4, &qword_1EF9E3388, type metadata accessor for SPBeaconLocationSource);
}

_QWORD *sub_1CC9F23D4(void *a1)
{
  id v1;
  unint64_t v2;
  id v3;
  id *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  void *v25;
  id v26;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  id v31;

  v3 = a1;
  v4 = (id *)MEMORY[0x1E0D89A60];
  if ((a1 & 1) == 0)
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if ((a1 & 2) == 0)
      return v5;
LABEL_13:
    v23 = v5[2];
    v24 = v23 + 2;
    if (__OFADD__(v23, 2))
    {
      __break(1u);
    }
    else
    {
      v25 = (void *)*MEMORY[0x1E0D89A68];
      v26 = *v4;
      v3 = v25;
      isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v24 > v5[3] >> 1)
      {
        if (v23 <= v24)
          v28 = v23 + 2;
        else
          v28 = v23;
        v5 = sub_1CC9F26B0(isUniquelyReferenced_nonNull_native, v28, 1, v5);
      }
      v24 = v5[2];
      v2 = v5[3];
      v23 = v24 + 1;
      v1 = v26;
      if (v24 < v2 >> 1)
        goto LABEL_21;
    }
    v5 = sub_1CC9F26B0((_QWORD *)(v2 > 1), v23, 1, v5);
LABEL_21:
    v5[2] = v23;
    v5[v24 + 4] = v1;
    v29 = v5[3];
    v30 = v24 + 2;
    v31 = v3;
    if (v30 > (uint64_t)(v29 >> 1))
      v5 = sub_1CC9F26B0((_QWORD *)(v29 > 1), v30, 1, v5);
    v5[2] = v30;
    v5[v23 + 4] = v31;

    return v5;
  }
  v6 = (void *)*MEMORY[0x1E0D89A88];
  v7 = (void *)*MEMORY[0x1E0D89A60];
  v8 = (void *)*MEMORY[0x1E0D89A78];
  v9 = (id)*MEMORY[0x1E0D89A70];
  v10 = v6;
  v11 = v7;
  v12 = v8;
  v5 = sub_1CC9F26B0(0, 4, 1, MEMORY[0x1E0DEE9D8]);
  v14 = v5[2];
  v13 = v5[3];
  v15 = v14 + 1;
  v16 = v9;
  if (v14 >= v13 >> 1)
    v5 = sub_1CC9F26B0((_QWORD *)(v13 > 1), v14 + 1, 1, v5);
  v5[2] = v15;
  v5[v14 + 4] = v16;
  v17 = v5[3];
  v18 = v14 + 2;
  v19 = v10;
  if ((uint64_t)(v14 + 2) > (uint64_t)(v17 >> 1))
    v5 = sub_1CC9F26B0((_QWORD *)(v17 > 1), v14 + 2, 1, v5);
  v5[2] = v18;
  v5[v15 + 4] = v19;
  v20 = v5[3];
  v21 = v14 + 3;
  v2 = (unint64_t)v11;
  if ((uint64_t)(v14 + 3) > (uint64_t)(v20 >> 1))
    v5 = sub_1CC9F26B0((_QWORD *)(v20 > 1), v14 + 3, 1, v5);
  v5[2] = v21;
  v5[v18 + 4] = v2;
  v22 = v5[3];
  v1 = v12;
  if ((uint64_t)(v14 + 4) > (uint64_t)(v22 >> 1))
    v5 = sub_1CC9F26B0((_QWORD *)(v22 > 1), v14 + 4, 1, v5);
  v5[2] = v14 + 4;
  v5[v21 + 4] = v1;

  v4 = (id *)MEMORY[0x1E0D89A60];
  if ((v3 & 2) != 0)
    goto LABEL_13;
  return v5;
}

_QWORD *sub_1CC9F26B0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1CCACA198(a1, a2, a3, a4, &qword_1EF9E3390, type metadata accessor for SPBeaconType);
}

uint64_t sub_1CC9F26C4(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  void *v48;
  int v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int8 v66;
  _BYTE v67[24];
  _QWORD v68[3];
  uint64_t v69;
  __int128 v70;
  char v71[288];
  _BYTE v72[296];

  v52 = a2;
  v3 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v3);
  v51 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9E21F8);
  MEMORY[0x1E0C80A78](v5);
  v56 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v7);
  v55 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63604();
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  MEMORY[0x1E0C80A78](v12);
  v57 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FMIPDevice();
  v60 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v54 = (uint64_t)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v53 = (uint64_t)&v47 - v18;
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v47 - v19;
  v21 = sub_1CCA14E90(&qword_1ED8A7EE0);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v59 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1CCA14E90(&qword_1ED8A7EE8);
  v25 = MEMORY[0x1E0C80A78](v24);
  v27 = (unint64_t *)((char *)&v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v25);
  v29 = (unint64_t *)((char *)&v47 - v28);
  v65 = *(_QWORD *)(a1 + 16);
  v50 = v20 + 304;
  result = swift_bridgeObjectRetain_n();
  v31 = 0;
  v61 = a1;
  v58 = a1;
  while (v31 == v65)
  {
    v32 = 1;
    v31 = v65;
LABEL_7:
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v27, v32, 1, v21);
    sub_1CC9C3EC0((uint64_t)v27, (uint64_t)v29, &qword_1ED8A7EE8);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v22 + 48))(v29, 1, v21) == 1)
    {
      swift_bridgeObjectRelease();
      return v58;
    }
    v64 = *v29;
    sub_1CC9FED60((uint64_t)v29 + *(int *)(v21 + 48), (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (*((_QWORD *)v20 + 3))
    {
      v35 = v11;
      swift_bridgeObjectRetain();
      sub_1CCB635BC();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v11, 1, v63) == 1)
      {
        sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        result = sub_1CC9C3E84((uint64_t)v11, &qword_1ED8A8EF8);
      }
      else
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v57, v11, v63);
        v36 = v52;
        if (*(_QWORD *)(v52 + 16) && (v37 = sub_1CCAC8D64(v57), (v38 & 1) != 0))
          v49 = *(unsigned __int8 *)(*(_QWORD *)(v36 + 56) + v37);
        else
          v49 = 0;
        sub_1CCA0BEEC((uint64_t)v20, v54, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v48 = (void *)*((_QWORD *)v20 + 31);
        sub_1CC9C3EC0((uint64_t)v50, (uint64_t)v72, &qword_1ED8A71C0);
        sub_1CC9C3EC0((uint64_t)v72, (uint64_t)v71, &qword_1ED8A71C0);
        v69 = *((_QWORD *)v20 + 35);
        v47 = *((_OWORD *)v20 + 18);
        v70 = v47;
        memset(v68, 0, sizeof(v68));
        v39 = type metadata accessor for FMIPItemGroup();
        memset(v67, 0, sizeof(v67));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v55, 1, 1, v39);
        v66 = 7;
        v40 = type metadata accessor for FMIPDeviceConnectedState(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v56, 1, 1, v40);
        v41 = type metadata accessor for FMIPDeviceLostModeMetadata();
        v42 = (uint64_t)v51;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v51, 1, 1, v41);
        v43 = v48;
        swift_bridgeObjectRetain();
        sub_1CCA307F0((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
        v44 = (id)v47;
        FMIPDevice.init(device:historicalLocations:address:crowdSourcedLocation:location:shiftedLocation:crowdSourcedLocating:itemGroup:deviceWithYou:findingCapable:beaconType:deviceConnectedState:lostModeMetadata:)(v54, v43, v71, &v69, v68, (unsigned int (*)(char *, uint64_t, uint64_t))v67, 2, v55, v53, 2u, v49, &v66, v56, v42);
        v45 = v58;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = sub_1CCAB6EFC(v45);
          v58 = result;
        }
        v46 = v57;
        if ((v64 & 0x8000000000000000) != 0)
          goto LABEL_22;
        if (v64 >= *(_QWORD *)(v58 + 16))
          goto LABEL_23;
        v11 = v35;
        sub_1CCABB698(v53, v58+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v64, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v46, v63);
        result = sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      }
    }
    else
    {
      result = sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    }
  }
  if (v31 < v65)
  {
    v33 = (uint64_t)&v59[*(int *)(v21 + 48)];
    sub_1CCA0BEEC(v61+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v31, v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v34 = (uint64_t)v27 + *(int *)(v21 + 48);
    *v27 = v31;
    sub_1CC9FED60(v33, v34, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v32 = 0;
    ++v31;
    goto LABEL_7;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1CC9F2D2C(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  void *v48;
  int v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int8 v66;
  _BYTE v67[24];
  _QWORD v68[3];
  uint64_t v69;
  __int128 v70;
  char v71[288];
  _BYTE v72[296];

  v52 = a2;
  v3 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v3);
  v51 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9E21F8);
  MEMORY[0x1E0C80A78](v5);
  v56 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v7);
  v55 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63604();
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  MEMORY[0x1E0C80A78](v12);
  v57 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FMIPDevice();
  v60 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v54 = (uint64_t)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v53 = (uint64_t)&v47 - v18;
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v47 - v19;
  v21 = sub_1CCA14E90(&qword_1ED8A7EE0);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v59 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1CCA14E90(&qword_1ED8A7EE8);
  v25 = MEMORY[0x1E0C80A78](v24);
  v27 = (unint64_t *)((char *)&v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v25);
  v29 = (unint64_t *)((char *)&v47 - v28);
  v65 = *(_QWORD *)(a1 + 16);
  v50 = v20 + 304;
  result = swift_bridgeObjectRetain_n();
  v31 = 0;
  v61 = a1;
  v58 = a1;
  while (v31 == v65)
  {
    v32 = 1;
    v31 = v65;
LABEL_7:
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v27, v32, 1, v21);
    sub_1CC9C3EC0((uint64_t)v27, (uint64_t)v29, &qword_1ED8A7EE8);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v22 + 48))(v29, 1, v21) == 1)
    {
      swift_bridgeObjectRelease();
      return v58;
    }
    v64 = *v29;
    sub_1CC9FED60((uint64_t)v29 + *(int *)(v21 + 48), (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (*((_QWORD *)v20 + 3))
    {
      v35 = v11;
      swift_bridgeObjectRetain();
      sub_1CCB635BC();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v11, 1, v63) == 1)
      {
        sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        result = sub_1CC9C3E84((uint64_t)v11, &qword_1ED8A8EF8);
      }
      else
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v57, v11, v63);
        v36 = v52;
        if (*(_QWORD *)(v52 + 16) && (v37 = sub_1CCAC8D64(v57), (v38 & 1) != 0))
          v49 = *(unsigned __int8 *)(*(_QWORD *)(v36 + 56) + v37);
        else
          v49 = 0;
        sub_1CCA0BEEC((uint64_t)v20, v54, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v48 = (void *)*((_QWORD *)v20 + 31);
        sub_1CC9C3EC0((uint64_t)v50, (uint64_t)v72, &qword_1ED8A71C0);
        sub_1CC9C3EC0((uint64_t)v72, (uint64_t)v71, &qword_1ED8A71C0);
        v69 = *((_QWORD *)v20 + 35);
        v47 = *((_OWORD *)v20 + 18);
        v70 = v47;
        memset(v68, 0, sizeof(v68));
        v39 = type metadata accessor for FMIPItemGroup();
        memset(v67, 0, sizeof(v67));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v55, 1, 1, v39);
        v66 = 7;
        v40 = type metadata accessor for FMIPDeviceConnectedState(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v56, 1, 1, v40);
        v41 = type metadata accessor for FMIPDeviceLostModeMetadata();
        v42 = (uint64_t)v51;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v51, 1, 1, v41);
        v43 = v48;
        swift_bridgeObjectRetain();
        sub_1CCA307F0((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
        v44 = (id)v47;
        FMIPDevice.init(device:historicalLocations:address:crowdSourcedLocation:location:shiftedLocation:crowdSourcedLocating:itemGroup:deviceWithYou:findingCapable:beaconType:deviceConnectedState:lostModeMetadata:)(v54, v43, v71, &v69, v68, (unsigned int (*)(char *, uint64_t, uint64_t))v67, v49, v55, v53, 2u, 2, &v66, v56, v42);
        v45 = v58;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = sub_1CCAB6EFC(v45);
          v58 = result;
        }
        v46 = v57;
        if ((v64 & 0x8000000000000000) != 0)
          goto LABEL_22;
        if (v64 >= *(_QWORD *)(v58 + 16))
          goto LABEL_23;
        v11 = v35;
        sub_1CCABB698(v53, v58+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v64, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v46, v63);
        result = sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      }
    }
    else
    {
      result = sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    }
  }
  if (v31 < v65)
  {
    v33 = (uint64_t)&v59[*(int *)(v21 + 48)];
    sub_1CCA0BEEC(v61+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v31, v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v34 = (uint64_t)v27 + *(int *)(v21 + 48);
    *v27 = v31;
    sub_1CC9FED60(v33, v34, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v32 = 0;
    ++v31;
    goto LABEL_7;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1CC9F338C(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  void *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int8 v66;
  _BYTE v67[24];
  _QWORD v68[3];
  uint64_t v69;
  __int128 v70;
  char v71[288];
  _BYTE v72[296];

  v52 = a2;
  v3 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v3);
  v51 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9E21F8);
  MEMORY[0x1E0C80A78](v5);
  v56 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v7);
  v55 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63604();
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  MEMORY[0x1E0C80A78](v12);
  v57 = (uint64_t)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FMIPDevice();
  v60 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v54 = (uint64_t)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v53 = (uint64_t)&v48 - v18;
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v48 - v19;
  v21 = sub_1CCA14E90(&qword_1ED8A7EE0);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v59 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1CCA14E90(&qword_1ED8A7EE8);
  v25 = MEMORY[0x1E0C80A78](v24);
  v27 = (unint64_t *)((char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v25);
  v29 = (unint64_t *)((char *)&v48 - v28);
  v65 = *(_QWORD *)(a1 + 16);
  v50 = v20 + 304;
  result = swift_bridgeObjectRetain_n();
  v31 = 0;
  v61 = a1;
  v58 = a1;
  while (v31 == v65)
  {
    v32 = 1;
    v31 = v65;
LABEL_7:
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v27, v32, 1, v21);
    sub_1CC9C3EC0((uint64_t)v27, (uint64_t)v29, &qword_1ED8A7EE8);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v22 + 48))(v29, 1, v21) == 1)
    {
      swift_bridgeObjectRelease();
      return v58;
    }
    v64 = *v29;
    sub_1CC9FED60((uint64_t)v29 + *(int *)(v21 + 48), (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (*((_QWORD *)v20 + 3))
    {
      v35 = v11;
      swift_bridgeObjectRetain();
      sub_1CCB635BC();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v11, 1, v63) == 1)
      {
        sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        result = sub_1CC9C3E84((uint64_t)v11, &qword_1ED8A8EF8);
      }
      else
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v57, v11, v63);
        v36 = v52;
        if (*(_QWORD *)(v52 + 16) && (v37 = sub_1CCAC8D64(v57), (v38 & 1) != 0))
          v39 = *(_BYTE *)(*(_QWORD *)(v36 + 56) + v37);
        else
          v39 = 7;
        sub_1CCA0BEEC((uint64_t)v20, v54, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v49 = (void *)*((_QWORD *)v20 + 31);
        sub_1CC9C3EC0((uint64_t)v50, (uint64_t)v72, &qword_1ED8A71C0);
        sub_1CC9C3EC0((uint64_t)v72, (uint64_t)v71, &qword_1ED8A71C0);
        v69 = *((_QWORD *)v20 + 35);
        v48 = *((_OWORD *)v20 + 18);
        v70 = v48;
        memset(v68, 0, sizeof(v68));
        v40 = type metadata accessor for FMIPItemGroup();
        memset(v67, 0, sizeof(v67));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v55, 1, 1, v40);
        v66 = v39;
        v41 = type metadata accessor for FMIPDeviceConnectedState(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v56, 1, 1, v41);
        v42 = type metadata accessor for FMIPDeviceLostModeMetadata();
        v43 = (uint64_t)v51;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v51, 1, 1, v42);
        v44 = v49;
        swift_bridgeObjectRetain();
        sub_1CCA307F0((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
        v45 = (id)v48;
        FMIPDevice.init(device:historicalLocations:address:crowdSourcedLocation:location:shiftedLocation:crowdSourcedLocating:itemGroup:deviceWithYou:findingCapable:beaconType:deviceConnectedState:lostModeMetadata:)(v54, v44, v71, &v69, v68, (unsigned int (*)(char *, uint64_t, uint64_t))v67, 2, v55, v53, 2u, 2, &v66, v56, v43);
        v46 = v58;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = sub_1CCAB6EFC(v46);
          v58 = result;
        }
        v11 = v35;
        v47 = v57;
        if ((v64 & 0x8000000000000000) != 0)
          goto LABEL_22;
        if (v64 >= *(_QWORD *)(v58 + 16))
          goto LABEL_23;
        sub_1CCABB698(v53, v58+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v64, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v47, v63);
        result = sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      }
    }
    else
    {
      result = sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    }
  }
  if (v31 < v65)
  {
    v33 = (uint64_t)&v59[*(int *)(v21 + 48)];
    sub_1CCA0BEEC(v61+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v31, v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v34 = (uint64_t)v27 + *(int *)(v21 + 48);
    *v27 = v31;
    sub_1CC9FED60(v33, v34, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v32 = 0;
    ++v31;
    goto LABEL_7;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

id sub_1CC9F3A18()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  objc_class *v14;
  uint64_t (*v15)(uint64_t, void *, void *, void *);
  void *v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  id v37;
  id v38;
  void *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  void (*v52)(char *, uint64_t);
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  void *v55;
  uint64_t v56;
  __int128 aBlock;
  uint64_t (*v58)(uint64_t, void *, void *, void *);
  void *v59;
  __int128 v60;
  char v61;
  char v62;
  uint64_t v63;
  objc_super v64;

  v1 = v0;
  v2 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCB63490();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x1E0C80A78](v5);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v49 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v49 - v12;
  v14 = (objc_class *)type metadata accessor for FMIPDeviceImageCacheOperation();
  v64.receiver = v0;
  v64.super_class = v14;
  objc_msgSendSuper2(&v64, sel_start);
  v15 = *(uint64_t (**)(uint64_t, void *, void *, void *))&v0[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation_request
                                                                     + 16];
  v16 = *(void **)&v0[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation_request + 24];
  v17 = v0[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation_request + 48];
  v18 = v0[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation_request + 49];
  v19 = *(_QWORD *)&v0[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation_request + 56];
  aBlock = *(_OWORD *)&v0[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation_request];
  v58 = v15;
  v59 = v16;
  v60 = *(_OWORD *)&v0[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation_request + 32];
  v61 = v17;
  v62 = v18;
  v63 = v19;
  sub_1CC9F3F6C();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1CCA39410((uint64_t)v4);
    if (qword_1ED8AA630 != -1)
      swift_once();
    v20 = sub_1CCB637FC();
    sub_1CCA16C20(v20, (uint64_t)qword_1ED8AD7F8);
    v21 = sub_1CCB637D8();
    v22 = sub_1CCB63D30();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1CC9BF000, v21, v22, "FMIPDeviceImageDownloadOperation: operation cannot start without URL", v23, 2u);
      MEMORY[0x1D17B214C](v23, -1, -1);
    }

    return objc_msgSend(v1, sel_setFinished_, 1);
  }
  else
  {
    v53 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v53(v13, v4, v5);
    if (qword_1ED8AA630 != -1)
      swift_once();
    v54 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    v55 = v0;
    v25 = sub_1CCB637FC();
    sub_1CCA16C20(v25, (uint64_t)qword_1ED8AD7F8);
    v26 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    v26(v11, v13, v5);
    v27 = sub_1CCB637D8();
    v28 = sub_1CCB63D48();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc();
      v51 = v13;
      v30 = (uint8_t *)v29;
      v31 = swift_slowAlloc();
      v50 = v26;
      v32 = v31;
      *(_QWORD *)&aBlock = v31;
      *(_DWORD *)v30 = 136315138;
      v52 = (void (*)(char *, uint64_t))(v30 + 4);
      v33 = sub_1CCB63418();
      v56 = sub_1CCA0CB60(v33, v34, (uint64_t *)&aBlock);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      v52 = *(void (**)(char *, uint64_t))(v6 + 8);
      v52(v11, v5);
      _os_log_impl(&dword_1CC9BF000, v27, v28, "FMIPDeviceImageDownloadOperation: started for URL: %s", v30, 0xCu);
      swift_arrayDestroy();
      v35 = v32;
      v26 = v50;
      MEMORY[0x1D17B214C](v35, -1, -1);
      v36 = v30;
      v13 = v51;
      MEMORY[0x1D17B214C](v36, -1, -1);
    }
    else
    {
      v52 = *(void (**)(char *, uint64_t))(v6 + 8);
      v52(v11, v5);
    }

    v37 = objc_msgSend((id)objc_opt_self(), sel_defaultSessionConfiguration);
    objc_msgSend(v37, sel_setHTTPShouldUsePipelining_, 1);
    v38 = objc_msgSend((id)objc_opt_self(), sel_sessionWithConfiguration_, v37);
    v39 = (void *)sub_1CCB6343C();
    v40 = v54;
    v26(v54, v13, v5);
    v41 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v42 = (v7 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    v43 = v13;
    v44 = swift_allocObject();
    v53((char *)(v44 + v41), v40, v5);
    v45 = v55;
    *(_QWORD *)(v44 + v42) = v55;
    *(_QWORD *)&v60 = sub_1CCA1AB10;
    *((_QWORD *)&v60 + 1) = v44;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v58 = sub_1CCA1AA60;
    v59 = &unk_1E88F0A98;
    v46 = _Block_copy(&aBlock);
    v47 = v45;
    swift_release();
    v48 = objc_msgSend(v38, sel_dataTaskWithURL_completionHandler_, v39, v46);
    _Block_release(v46);

    objc_msgSend(v48, sel_resume);
    return (id)((uint64_t (*)(char *, uint64_t))v52)(v43, v5);
  }
}

void sub_1CC9F3F6C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v1 = sub_1CCB63298();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  v5 = v0[1];
  v7 = v0[2];
  v8 = v0[3];
  v28 = v0[4];
  v29 = v7;
  v9 = v0[5];
  v32 = *((unsigned __int8 *)v0 + 48);
  v10 = *((unsigned __int8 *)v0 + 49);
  v30 = v9;
  v31 = v10;
  v35 = 0xD000000000000037;
  v36 = 0x80000001CCB7F3C0;
  v33 = v6;
  v34 = v5;
  swift_bridgeObjectRetain();
  sub_1CCB63250();
  sub_1CCA0C964();
  v11 = MEMORY[0x1E0DEA968];
  v12 = sub_1CCB63E74();
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t))(v2 + 8);
  v15(v4, v1);
  swift_bridgeObjectRelease();
  if (v14)
  {
    sub_1CCA14E90(&qword_1EF9DFD30);
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1CCB677E0;
    *(_QWORD *)(v16 + 56) = v11;
    *(_QWORD *)(v16 + 64) = sub_1CCA0C920();
    *(_QWORD *)(v16 + 32) = v12;
    *(_QWORD *)(v16 + 40) = v14;
    sub_1CCB639A0();
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
  }
  v33 = v29;
  v34 = v8;
  swift_bridgeObjectRetain();
  sub_1CCB63250();
  v17 = MEMORY[0x1E0DEA968];
  v18 = sub_1CCB63E74();
  v20 = v19;
  v15(v4, v1);
  swift_bridgeObjectRelease();
  if (v20)
  {
    sub_1CCA14E90(&qword_1EF9DFD30);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1CCB677E0;
    *(_QWORD *)(v21 + 56) = v17;
    *(_QWORD *)(v21 + 64) = sub_1CCA0C920();
    *(_QWORD *)(v21 + 32) = v18;
    *(_QWORD *)(v21 + 40) = v20;
    sub_1CCB639A0();
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
  }
  if (v30)
  {
    v33 = v28;
    v34 = v30;
    swift_bridgeObjectRetain();
    sub_1CCB63250();
    v22 = MEMORY[0x1E0DEA968];
    v23 = sub_1CCB63E74();
    v25 = v24;
    v15(v4, v1);
    swift_bridgeObjectRelease();
    if (v25)
    {
      sub_1CCA14E90(&qword_1EF9DFD30);
      v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_1CCB677E0;
      *(_QWORD *)(v26 + 56) = v22;
      *(_QWORD *)(v26 + 64) = sub_1CCA0C920();
      *(_QWORD *)(v26 + 32) = v23;
      *(_QWORD *)(v26 + 40) = v25;
      sub_1CCB639A0();
      sub_1CCB63A24();
      swift_bridgeObjectRelease();
    }
  }
  sub_1CCB63A24();
  __asm { BR              X10 }
}

uint64_t sub_1CC9F4284()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;

  *(_QWORD *)(v1 - 128) = 0x656E696C66666FLL;
  *(_QWORD *)(v1 - 120) = 0xE700000000000000;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  if (v2 != 1.0)
  {
    sub_1CCA14E90(&qword_1EF9DFD30);
    v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 2016);
    *(_QWORD *)(v3 + 56) = MEMORY[0x1E0DEF040];
    *(_QWORD *)(v3 + 64) = sub_1CCA0C9A8();
    *(double *)(v3 + 32) = v2;
    sub_1CCB639A0();
  }
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63484();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CC9F44AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1CC9F44CC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1CC9F44EC()
{
  uint64_t v0;

  return sub_1CC9F44F4(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1CC9F44F4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1CC9F4514()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1CC9F4520()
{
  uint64_t v0;

  return sub_1CC9F4528(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1CC9F4528(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_1CC9F4534()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_1CCB63604() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1CC9F4590(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1CC9F4590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  char *v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t aBlock[6];

  v39 = a2;
  v9 = sub_1CCB63820();
  v44 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v43 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB63868();
  v41 = *(_QWORD *)(v11 - 8);
  v42 = v11;
  MEMORY[0x1E0C80A78](v11);
  v40 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCB63604();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v17 = sub_1CCB637FC();
  sub_1CCA16C20(v17, (uint64_t)qword_1ED8AD7F8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  v18 = sub_1CCB637D8();
  v19 = sub_1CCB63D48();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v37 = a4;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc();
    v38 = v9;
    v23 = v22;
    aBlock[0] = v22;
    v35 = a5;
    v36 = a3;
    *(_DWORD *)v21 = 136315138;
    v24 = sub_1CCB635C8();
    v45 = sub_1CCA0CB60(v24, v25, aBlock);
    a5 = v35;
    a3 = v36;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    _os_log_impl(&dword_1CC9BF000, v18, v19, "FMIPBeaconRefreshingController: Refreshing beacon groups %s", v21, 0xCu);
    swift_arrayDestroy();
    v26 = v23;
    v9 = v38;
    MEMORY[0x1D17B214C](v26, -1, -1);
    v27 = v21;
    a4 = v37;
    MEMORY[0x1D17B214C](v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }

  v28 = v39;
  v29 = (_QWORD *)swift_allocObject();
  v29[2] = v28;
  v29[3] = a3;
  v29[4] = a4;
  v29[5] = a5;
  aBlock[4] = (uint64_t)sub_1CCA00EDC;
  aBlock[5] = (uint64_t)v29;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA00C38;
  aBlock[3] = (uint64_t)&unk_1E8901088;
  v30 = _Block_copy(aBlock);
  swift_retain();
  sub_1CC9DF994(a3);
  v31 = v40;
  sub_1CCB63844();
  v45 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  v32 = v43;
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v31, v32, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v9);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v42);
  return swift_release();
}

void sub_1CC9F4978()
{
  uint64_t *v0;

  sub_1CC9F4980(v0);
}

void sub_1CC9F4980(uint64_t *a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1D17B1B7C]();
  sub_1CC9F49C4(a1);
  objc_autoreleasePoolPop(v2);
}

void sub_1CC9F49C4(uint64_t *a1)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD *, uint64_t (*)(uint64_t, void *), uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  _OWORD v42[3];
  char v43;
  uint64_t v44;

  v1 = OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_isInitializing;
  if ((*((_BYTE *)a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_isInitializing) & 1) == 0)
  {
    v3 = (char *)a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_itemCounts;
    v40 = *(_OWORD *)((char *)a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_itemCounts);
    v39 = *(_OWORD *)((char *)a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_itemCounts + 16);
    v4 = *(uint64_t *)((char *)a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_itemCounts + 32);
    v5 = *(uint64_t *)((char *)a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_itemCounts + 40);
    v6 = *((_BYTE *)a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_itemCounts + 48);
    type metadata accessor for FMIPInitClientRequest();
    v7 = swift_allocObject() + qword_1EF9FF678;
    *(_OWORD *)v7 = v40;
    *(_OWORD *)(v7 + 16) = v39;
    *(_QWORD *)(v7 + 32) = v4;
    *(_QWORD *)(v7 + 40) = v5;
    *(_BYTE *)(v7 + 48) = v6;
    v41 = sub_1CCA601C8(0x65696C4374696E69, 0xEA0000000000746ELL, 0, 0, 1);
    *((_BYTE *)a1 + v1) = 1;
    v8 = sub_1CC9DE744();
    v9 = (uint64_t *)((char *)a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_ownerPhoneNumber);
    *v9 = v8;
    v9[1] = v10;
    swift_bridgeObjectRelease();
    if (qword_1ED8AA630 != -1)
      swift_once();
    v11 = sub_1CCB637FC();
    sub_1CCA16C20(v11, (uint64_t)qword_1ED8AD7F8);
    swift_retain_n();
    v12 = sub_1CCB637D8();
    v13 = sub_1CCB63D48();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      *(_QWORD *)&v42[0] = v15;
      *(_DWORD *)v14 = 136446210;
      v44 = *a1;
      sub_1CCA14E90(&qword_1EF9E5020);
      v16 = sub_1CCB639AC();
      v44 = sub_1CCA0CB60(v16, v17, (uint64_t *)v42);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v12, v13, "%{public}s: sending initClient request…", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v15, -1, -1);
      MEMORY[0x1D17B214C](v14, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    swift_retain_n();
    v18 = sub_1CCB637D8();
    v19 = sub_1CCB63D48();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc();
      v21 = swift_slowAlloc();
      v44 = v21;
      *(_DWORD *)v20 = 136446466;
      *(_QWORD *)&v42[0] = *a1;
      sub_1CCA14E90(&qword_1EF9E5020);
      v22 = sub_1CCB639AC();
      *(_QWORD *)&v42[0] = sub_1CCA0CB60(v22, v23, &v44);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2080;
      v24 = v3[48];
      v25 = *((_OWORD *)v3 + 1);
      v42[0] = *(_OWORD *)v3;
      v42[1] = v25;
      v42[2] = *((_OWORD *)v3 + 2);
      v43 = v24;
      sub_1CCA14E90(&qword_1EF9E5018);
      v26 = sub_1CCB63E20();
      *(_QWORD *)&v42[0] = sub_1CCA0CB60(v26, v27, &v44);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v18, v19, "%{public}s: initClient request itemCounts: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v21, -1, -1);
      MEMORY[0x1D17B214C](v20, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v28 = *(uint64_t *)((char *)a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_interactionController + 24);
    v29 = *(uint64_t *)((char *)a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_interactionController + 32);
    sub_1CCA04DDC((uint64_t *)((char *)a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_interactionController), v28);
    v30 = swift_allocObject();
    swift_weakInit();
    v31 = *(void (**)(_QWORD *, uint64_t (*)(uint64_t, void *), uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56);
    v32 = type metadata accessor for FMIPInitClientResponse();
    v31(v41, sub_1CCA21BC8, v30, v32, v28, v29);
    swift_release();
    swift_retain_n();
    v33 = sub_1CCB637D8();
    v34 = sub_1CCB63D48();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      v36 = swift_slowAlloc();
      *(_QWORD *)&v42[0] = v36;
      *(_DWORD *)v35 = 136446210;
      v44 = *a1;
      sub_1CCA14E90(&qword_1EF9E5020);
      v37 = sub_1CCB639AC();
      v44 = sub_1CCA0CB60(v37, v38, (uint64_t *)v42);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v33, v34, "%{public}s: received snapshot initClient response", v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v36, -1, -1);
      MEMORY[0x1D17B214C](v35, -1, -1);
      swift_release();

    }
    else
    {

      swift_release();
      swift_release_n();
    }
  }
}

uint64_t sub_1CC9F4FC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPEraseMetadata.init(from:)(a1, a2);
}

uint64_t FMIPEraseMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  unsigned __int8 *v25;
  unint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  uint64_t v33;
  char *v34;
  char v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  NSObject *v56;
  uint8_t *v57;
  uint64_t v58;
  uint8_t *v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76[4];

  v71 = a2;
  v74 = sub_1CCB635B0();
  v72 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74);
  v73 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CCA14E90(&qword_1ED8A7F78);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FMIPEraseMetadata();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CC9F57FC();
  v11 = v75;
  sub_1CCB643B4();
  if (v11)
  {
    v20 = (uint64_t)a1;
    return sub_1CCA01CA0(v20);
  }
  v70 = (int *)v8;
  v75 = v10;
  v12 = v74;
  LOBYTE(v76[0]) = 2;
  v13 = sub_1CCB6418C();
  LOBYTE(v76[0]) = 3;
  v67 = sub_1CCB64150();
  v68 = v5;
  v69 = v14;
  v15 = objc_msgSend((id)objc_opt_self(), sel_fm_dateFromEpoch_, v13);
  sub_1CCB63580();

  LOBYTE(v76[0]) = 0;
  v65 = sub_1CCB64150();
  v66 = v16;
  LOBYTE(v76[0]) = 1;
  v17 = v12;
  v63 = sub_1CCB64150();
  v64 = v18;
  LOBYTE(v76[0]) = 4;
  result = sub_1CCB6415C();
  v21 = HIBYTE(v69) & 0xF;
  v22 = v67 & 0xFFFFFFFFFFFFLL;
  if ((v69 & 0x2000000000000000) != 0)
    v23 = HIBYTE(v69) & 0xF;
  else
    v23 = v67 & 0xFFFFFFFFFFFFLL;
  v62 = v4;
  v61 = result;
  v60 = a1;
  if (!v23)
  {
    swift_bridgeObjectRelease();
    v35 = 1;
    v26 = v72;
    v34 = v75;
    v24 = v70;
LABEL_65:
    v46 = v66;
    v48 = v63;
    v47 = v64;
    v49 = (uint64_t *)&v34[v24[7]];
    *v49 = v65;
    v49[1] = v46;
    v50 = (uint64_t *)&v34[v24[6]];
    *v50 = v48;
    v50[1] = v47;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(&v34[v24[5]], v73, v17);
    *v34 = v35;
    v34[v24[8]] = v61 & 1;
    v72 = FMIPEraseMetadata.debugDescription.getter();
    v52 = v51;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v53 = sub_1CCB637FC();
    sub_1CCA16C20(v53, (uint64_t)qword_1ED8AD7F8);
    swift_bridgeObjectRetain();
    v54 = sub_1CCB637D8();
    v55 = sub_1CCB63D18();
    v56 = v54;
    if (os_log_type_enabled(v54, v55))
    {
      v57 = (uint8_t *)swift_slowAlloc();
      v58 = swift_slowAlloc();
      v76[0] = v58;
      *(_DWORD *)v57 = 136315138;
      v70 = (int *)(v57 + 4);
      v59 = v57;
      swift_bridgeObjectRetain();
      v76[3] = sub_1CCA0CB60(v72, v52, v76);
      v34 = v75;
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1CC9BF000, v56, v55, "FMIPEraseMetadata: initialized %s", v59, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v58, -1, -1);
      MEMORY[0x1D17B214C](v59, -1, -1);

      (*(void (**)(char *, uint64_t))(v26 + 8))(v73, v74);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v26 + 8))(v73, v17);
    }
    (*(void (**)(char *, uint64_t))(v68 + 8))(v7, v62);
    sub_1CCA3EFF0((uint64_t)v34, v71);
    v20 = (uint64_t)v60;
    return sub_1CCA01CA0(v20);
  }
  v24 = v70;
  if ((v69 & 0x1000000000000000) != 0)
  {
    v67 = (uint64_t)sub_1CCA3EF0C(v67, v69, 10);
    v45 = v44;
    swift_bridgeObjectRelease();
    v26 = v72;
    v34 = v75;
    if ((v45 & 1) == 0)
    {
LABEL_40:
      FMIPActionStatus.init(rawValue:)(v67);
      if (LOBYTE(v76[0]) == 18)
        v35 = 1;
      else
        v35 = v76[0];
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if ((v69 & 0x2000000000000000) == 0)
  {
    if ((v67 & 0x1000000000000000) != 0)
      v25 = (unsigned __int8 *)((v69 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v25 = (unsigned __int8 *)sub_1CCB6400C();
    v26 = v72;
    v67 = (uint64_t)sub_1CCA3F034(v25, v22, 10);
    v28 = v27 & 1;
LABEL_39:
    swift_bridgeObjectRelease();
    v34 = v75;
    if ((v28 & 1) == 0)
      goto LABEL_40;
LABEL_64:
    v35 = 1;
    goto LABEL_65;
  }
  v76[0] = v67;
  v76[1] = v69 & 0xFFFFFFFFFFFFFFLL;
  if (v67 == 43)
  {
    if (!v21)
      goto LABEL_73;
    if (v21 == 1 || (BYTE1(v67) - 48) > 9u)
      goto LABEL_35;
    v29 = (BYTE1(v67) - 48);
    if (v21 == 2)
    {
LABEL_37:
      v67 = v29;
      v28 = 0;
      goto LABEL_38;
    }
    if ((BYTE2(v67) - 48) > 9u)
      goto LABEL_35;
    v67 = 10 * (BYTE1(v67) - 48) + (BYTE2(v67) - 48);
    v30 = v21 - 3;
    if (v30)
    {
      v31 = (unsigned __int8 *)v76 + 3;
      while (1)
      {
        v32 = *v31 - 48;
        if (v32 > 9)
          goto LABEL_60;
        v33 = 10 * v67;
        if ((unsigned __int128)(v67 * (__int128)10) >> 64 != (10 * v67) >> 63)
          goto LABEL_60;
        v67 = v33 + v32;
        if (__OFADD__(v33, v32))
          goto LABEL_60;
        v28 = 0;
        ++v31;
        if (!--v30)
          goto LABEL_61;
      }
    }
LABEL_53:
    v28 = 0;
LABEL_61:
    v17 = v12;
    v26 = v72;
    v24 = v70;
    goto LABEL_39;
  }
  if (v67 != 45)
  {
    if (!v21 || (v67 - 48) > 9u)
      goto LABEL_35;
    v29 = (v67 - 48);
    if (v21 == 1)
      goto LABEL_37;
    if ((BYTE1(v67) - 48) > 9u)
      goto LABEL_35;
    v67 = 10 * (v67 - 48) + (BYTE1(v67) - 48);
    v36 = v21 - 2;
    if (v36)
    {
      v37 = (unsigned __int8 *)v76 + 2;
      while (1)
      {
        v38 = *v37 - 48;
        if (v38 > 9)
          goto LABEL_60;
        v39 = 10 * v67;
        if ((unsigned __int128)(v67 * (__int128)10) >> 64 != (10 * v67) >> 63)
          goto LABEL_60;
        v67 = v39 + v38;
        if (__OFADD__(v39, v38))
          goto LABEL_60;
        v28 = 0;
        ++v37;
        if (!--v36)
          goto LABEL_61;
      }
    }
    goto LABEL_53;
  }
  if (v21)
  {
    if (v21 != 1 && (BYTE1(v67) - 48) <= 9u)
    {
      if (v21 == 2)
      {
        v28 = 0;
        v67 = -(uint64_t)(BYTE1(v67) - 48);
LABEL_38:
        v26 = v72;
        goto LABEL_39;
      }
      if ((BYTE2(v67) - 48) <= 9u)
      {
        v67 = -10 * (BYTE1(v67) - 48) - (BYTE2(v67) - 48);
        v40 = v21 - 3;
        if (!v40)
          goto LABEL_53;
        v41 = (unsigned __int8 *)v76 + 3;
        while (1)
        {
          v42 = *v41 - 48;
          if (v42 > 9)
            break;
          v43 = 10 * v67;
          if ((unsigned __int128)(v67 * (__int128)10) >> 64 != (10 * v67) >> 63)
            break;
          v67 = v43 - v42;
          if (__OFSUB__(v43, v42))
            break;
          v28 = 0;
          ++v41;
          if (!--v40)
            goto LABEL_61;
        }
LABEL_60:
        v67 = 0;
        v28 = 1;
        goto LABEL_61;
      }
    }
LABEL_35:
    v67 = 0;
    v28 = 1;
    goto LABEL_38;
  }
  __break(1u);
LABEL_73:
  __break(1u);
  return result;
}

unint64_t sub_1CC9F57FC()
{
  unint64_t result;

  result = qword_1ED8A73D0;
  if (!qword_1ED8A73D0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB684AC, &type metadata for FMIPEraseMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A73D0);
  }
  return result;
}

Swift::Void __swiftcall FMIPManager.initialize()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char isEscapingClosureAtFileLocation;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  void *v34;
  char *v35;
  uint64_t v36;
  _QWORD v37[7];
  uint64_t aBlock;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  void *v41;
  uint64_t (*v42)();
  uint64_t v43;

  v1 = v0;
  v2 = sub_1CCB63820();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63868();
  v36 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration);
  v10 = OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems;
  v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems);
  v35 = v8;
  if ((v11 & 1) == 0)
    goto LABEL_8;
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_refreshingController);
  if (!v12)
    goto LABEL_8;
  v29 = v6;
  v30 = v5;
  v31 = v3;
  v32 = v2;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = sub_1CC9F4978;
  *(_QWORD *)(v13 + 24) = v12;
  v42 = sub_1CC9F44EC;
  v43 = v13;
  v14 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v39 = 1107296256;
  v40 = sub_1CC9F44AC;
  v41 = &unk_1E88F6F58;
  v34 = _Block_copy(&aBlock);
  v15 = _Block_copy(v34);
  v16 = qword_1ED8A8CB8;
  swift_retain_n();
  swift_retain();
  if (v16 != -1)
    swift_once();
  v17 = qword_1ED8A8CA8;
  swift_unknownObjectRetain();
  v18 = _os_activity_create(&dword_1CC9BF000, "FMIPRefreshingController.initialize", v17, OS_ACTIVITY_FLAG_DEFAULT);
  swift_unknownObjectRelease();
  v19 = _Block_copy(v15);
  v33 = v15;
  v20 = v19;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_1CC9F4520;
  *(_QWORD *)(v22 + 24) = v21;
  v37[4] = sub_1CC9F4530;
  v37[5] = v22;
  v37[0] = v14;
  v37[1] = 1107296256;
  v37[2] = sub_1CC9F44AC;
  v37[3] = &unk_1E88F6FD0;
  v23 = _Block_copy(v37);
  swift_retain();
  swift_release();
  os_activity_apply(v18, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v33);
  swift_unknownObjectRelease();
  _Block_release(v34);
  if ((v23 & 1) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  v3 = v31;
  v2 = v32;
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
LABEL_15:
    __break(1u);
    return;
  }
  v11 = *(_QWORD *)(v9 + v10);
  v5 = v30;
  v6 = v29;
LABEL_8:
  if ((v11 & 3) != 0)
  {
    v25 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    swift_retain();
    sub_1CCA0211C((uint64_t)sub_1CC9F8098, v25);
    swift_release();
    swift_release_n();
    swift_retain();
    sub_1CC9F5D88(0, 0);
    swift_release();
  }
  if (*(_BYTE *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager) + 64) == 1)
  {
    v26 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_initializedSubsystems);
    swift_beginAccess();
    if (*v26 != *(_QWORD *)(v9 + v10))
    {
      v42 = sub_1CCAA65CC;
      v43 = v1;
      aBlock = MEMORY[0x1E0C809B0];
      v39 = 1107296256;
      v40 = sub_1CCA00C38;
      v41 = &unk_1E88F6EE0;
      v27 = _Block_copy(&aBlock);
      swift_retain();
      v28 = v35;
      sub_1CCB63844();
      v37[6] = MEMORY[0x1E0DEE9D8];
      sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      sub_1CCA14E90(&qword_1ED8AA338);
      sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
      sub_1CCB63E98();
      MEMORY[0x1D17B1318](0, v28, v5, v27);
      _Block_release(v27);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v6);
      swift_release();
    }
  }
}

uint64_t sub_1CC9F5D88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = sub_1CCB63820();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v19 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB63868();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshQueue);
  v14 = swift_allocObject();
  swift_weakInit();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v14;
  v15[3] = a1;
  v15[4] = a2;
  aBlock[4] = sub_1CCA00CB8;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E8901858;
  v16 = _Block_copy(aBlock);
  swift_retain();
  sub_1CC9DF994(a1);
  sub_1CCB63844();
  v20 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v7, MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v13, v9, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_release();
  return swift_release();
}

uint64_t sub_1CC9F5FCC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPDeviceLostModeMetadata.init(from:)(a1, a2);
}

uint64_t FMIPDeviceLostModeMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  Swift::Int v30;
  char v31;
  char v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unsigned __int8 *v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  char v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81[5];

  v76 = a2;
  v3 = sub_1CCB635B0();
  v77 = *(_QWORD *)(v3 - 8);
  v78 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1ED8A7F88);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FMIPDeviceLostModeMetadata();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v80 = a1;
  sub_1CCA04DDC(a1, v13);
  sub_1CC9F68C0();
  v14 = v79;
  sub_1CCB643B4();
  if (v14)
    return sub_1CCA01CA0((uint64_t)v80);
  v74 = v12;
  v75 = v5;
  v79 = v7;
  v15 = v78;
  LOBYTE(v81[0]) = 8;
  v16 = sub_1CCB6418C();
  LOBYTE(v81[0]) = 4;
  v72 = sub_1CCB64150();
  v73 = v17;
  v18 = objc_msgSend((id)objc_opt_self(), sel_fm_dateFromEpoch_, v16);
  sub_1CCB63580();

  LOBYTE(v81[0]) = 6;
  v70 = sub_1CCB64150();
  v71 = v19;
  LOBYTE(v81[0]) = 1;
  v68 = sub_1CCB64150();
  v69 = v20;
  LOBYTE(v81[0]) = 2;
  v21 = sub_1CCB64120();
  if (v22)
    v24 = v21;
  else
    v24 = 0;
  v67 = v24;
  if (v22)
    v25 = v22;
  else
    v25 = 0xE000000000000000;
  LOBYTE(v81[0]) = 0;
  v65 = sub_1CCB6415C();
  v66 = v25;
  LOBYTE(v81[0]) = 3;
  v64 = sub_1CCB6415C();
  LOBYTE(v81[0]) = 5;
  v63 = sub_1CCB6415C();
  LOBYTE(v81[0]) = 7;
  result = sub_1CCB6415C();
  v60 = v9;
  v61 = v6;
  v62 = result;
  v26 = HIBYTE(v73) & 0xF;
  v27 = v72 & 0xFFFFFFFFFFFFLL;
  if ((v73 & 0x2000000000000000) != 0)
    v28 = HIBYTE(v73) & 0xF;
  else
    v28 = v72 & 0xFFFFFFFFFFFFLL;
  if (!v28)
  {
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }
  if ((v73 & 0x1000000000000000) != 0)
  {
    v30 = (Swift::Int)sub_1CCA3EF0C(v72, v73, 10);
    v47 = v46;
    swift_bridgeObjectRelease();
    if ((v47 & 1) == 0)
    {
LABEL_54:
      FMIPActionStatus.init(rawValue:)(v30);
      if (LOBYTE(v81[0]) == 18)
        v42 = 1;
      else
        v42 = v81[0];
      goto LABEL_66;
    }
LABEL_65:
    v42 = 1;
LABEL_66:
    v48 = v74;
    *v74 = v63 & 1;
    v48[1] = v65 & 1;
    v48[2] = v64 & 1;
    v48[3] = v62 & 1;
    v49 = v71;
    *((_QWORD *)v48 + 5) = v70;
    *((_QWORD *)v48 + 6) = v49;
    v50 = v69;
    *((_QWORD *)v48 + 1) = v68;
    *((_QWORD *)v48 + 2) = v50;
    v51 = v66;
    *((_QWORD *)v48 + 3) = v67;
    *((_QWORD *)v48 + 4) = v51;
    (*(void (**)(_BYTE *, char *, uint64_t))(v77 + 16))(&v48[*(int *)(v10 + 48)], v75, v15);
    v48[56] = v42;
    v52 = FMIPDeviceLostModeMetadata.debugDescription.getter();
    v54 = v53;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v55 = sub_1CCB637FC();
    sub_1CCA16C20(v55, (uint64_t)qword_1ED8AD7F8);
    swift_bridgeObjectRetain();
    v56 = sub_1CCB637D8();
    v57 = sub_1CCB63D18();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc();
      v59 = swift_slowAlloc();
      v81[0] = v59;
      *(_DWORD *)v58 = 136315138;
      v73 = (unint64_t)(v58 + 4);
      swift_bridgeObjectRetain();
      v81[4] = sub_1CCA0CB60(v52, v54, v81);
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1CC9BF000, v56, v57, "FMIPDeviceLostModeMetadata: initialized %s", v58, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v59, -1, -1);
      MEMORY[0x1D17B214C](v58, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(v77 + 8))(v75, v15);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v60, v61);
    sub_1CC9F6904((uint64_t)v74, v76);
    return sub_1CCA01CA0((uint64_t)v80);
  }
  if ((v73 & 0x2000000000000000) == 0)
  {
    if ((v72 & 0x1000000000000000) != 0)
      v29 = (unsigned __int8 *)((v73 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v29 = (unsigned __int8 *)sub_1CCB6400C();
    v30 = (Swift::Int)sub_1CCA3EEF8(v29, v27, 10);
    v32 = v31 & 1;
LABEL_53:
    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0)
      goto LABEL_54;
    goto LABEL_65;
  }
  v81[0] = v72;
  v81[1] = v73 & 0xFFFFFFFFFFFFFFLL;
  if (v72 == 43)
  {
    if (!v26)
      goto LABEL_74;
    if (v26 == 1 || (BYTE1(v72) - 48) > 9u)
      goto LABEL_40;
    v30 = (BYTE1(v72) - 48);
    if (v26 != 2)
    {
      if ((BYTE2(v72) - 48) > 9u)
        goto LABEL_40;
      v30 = 10 * (BYTE1(v72) - 48) + (BYTE2(v72) - 48);
      v33 = v26 - 3;
      if (v33)
      {
        v34 = (unsigned __int8 *)v81 + 3;
        while (1)
        {
          v35 = *v34 - 48;
          if (v35 > 9)
            goto LABEL_40;
          v36 = 10 * v30;
          if ((unsigned __int128)(v30 * (__int128)10) >> 64 != (10 * v30) >> 63)
            goto LABEL_40;
          v30 = v36 + v35;
          if (__OFADD__(v36, v35))
            goto LABEL_40;
          v32 = 0;
          ++v34;
          if (!--v33)
            goto LABEL_53;
        }
      }
    }
LABEL_52:
    v32 = 0;
    goto LABEL_53;
  }
  if (v72 != 45)
  {
    if (!v26 || (v72 - 48) > 9u)
      goto LABEL_40;
    v30 = (v72 - 48);
    if (v26 != 1)
    {
      if ((BYTE1(v72) - 48) > 9u)
        goto LABEL_40;
      v30 = 10 * (v72 - 48) + (BYTE1(v72) - 48);
      v37 = v26 - 2;
      if (v37)
      {
        v38 = (unsigned __int8 *)v81 + 2;
        while (1)
        {
          v39 = *v38 - 48;
          if (v39 > 9)
            goto LABEL_40;
          v40 = 10 * v30;
          if ((unsigned __int128)(v30 * (__int128)10) >> 64 != (10 * v30) >> 63)
            goto LABEL_40;
          v30 = v40 + v39;
          if (__OFADD__(v40, v39))
            goto LABEL_40;
          v32 = 0;
          ++v38;
          if (!--v37)
            goto LABEL_53;
        }
      }
    }
    goto LABEL_52;
  }
  if (v26)
  {
    if (v26 != 1 && (BYTE1(v72) - 48) <= 9u)
    {
      if (v26 == 2)
      {
        v32 = 0;
        v30 = -(uint64_t)(BYTE1(v72) - 48);
        goto LABEL_53;
      }
      if ((BYTE2(v72) - 48) <= 9u)
      {
        v30 = -10 * (BYTE1(v72) - 48) - (BYTE2(v72) - 48);
        v41 = v26 - 3;
        if (!v41)
          goto LABEL_52;
        v43 = (unsigned __int8 *)v81 + 3;
        while (1)
        {
          v44 = *v43 - 48;
          if (v44 > 9)
            break;
          v45 = 10 * v30;
          if ((unsigned __int128)(v30 * (__int128)10) >> 64 != (10 * v30) >> 63)
            break;
          v30 = v45 - v44;
          if (__OFSUB__(v45, v44))
            break;
          v32 = 0;
          ++v43;
          if (!--v41)
            goto LABEL_53;
        }
      }
    }
LABEL_40:
    v30 = 0;
    v32 = 1;
    goto LABEL_53;
  }
  __break(1u);
LABEL_74:
  __break(1u);
  return result;
}

unint64_t sub_1CC9F68C0()
{
  unint64_t result;

  result = qword_1ED8A7A70;
  if (!qword_1ED8A7A70)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB71474, &type metadata for FMIPDeviceLostModeMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7A70);
  }
  return result;
}

uint64_t sub_1CC9F6904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPDeviceLostModeMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t FMIPDeviceLostModeMetadata.debugDescription.getter()
{
  void *v0;
  void *v1;
  id v2;

  v0 = (void *)objc_opt_self();
  type metadata accessor for FMIPDeviceLostModeMetadata();
  v1 = (void *)sub_1CCB63538();
  v2 = objc_msgSend(v0, sel_localizedStringFromDate_dateStyle_timeStyle_, v1, 1, 4);

  sub_1CCB63988();
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  FMIPActionStatus.description.getter();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return 0xD000000000000025;
}

uint64_t sub_1CC9F6A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v7 = type metadata accessor for FMIPDevice();
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x1E0DEE9D8];
  v26 = MEMORY[0x1E0DEE9D8];
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v24 = a2;
    v25 = v3;
    v13 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v14 = *(_QWORD *)(v8 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1CC9F7368(v13, (uint64_t)v10);
      v15 = (void *)v10[33];
      if (v15)
      {
        v17 = *v10;
        v16 = v10[1];
        type metadata accessor for FMLocationShiftingRequest();
        v18 = (_QWORD *)swift_allocObject();
        v18[2] = v15;
        v18[3] = v17;
        v18[4] = v16;
        v19 = v15;
        swift_bridgeObjectRetain();
        v20 = sub_1CC9F73AC((uint64_t)v10);
        MEMORY[0x1D17B1078](v20);
        if (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1CCB63B68();
        sub_1CCB63BA4();
        sub_1CCB63B50();
      }
      else
      {
        sub_1CC9F73AC((uint64_t)v10);
      }
      v13 += v14;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    v11 = v26;
    a2 = v24;
  }
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a1;
  v21[3] = a2;
  v21[4] = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CCA1B400(v11, (uint64_t)sub_1CCA22608, (uint64_t)v21);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1CC9F6C54(unint64_t a1, double *a2, void (*a3)(unint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  double v32;
  void *v33;
  double v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  BOOL v61;
  unint64_t v62;
  uint64_t v64;
  _QWORD v65[2];
  void (*v66)(unint64_t);
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  double *v71;
  char *v72;
  id v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unsigned __int8 v83;
  _QWORD v84[3];
  _QWORD v85[3];
  uint64_t v86[3];
  char v87[288];
  __int128 v88;
  uint64_t v89;

  v8 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v8);
  v70 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCA14E90(&qword_1EF9E21F8);
  MEMORY[0x1E0C80A78](v10);
  v69 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v12);
  v68 = (char *)v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FMIPDevice();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v77 = (uint64_t)v65 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v76 = (uint64_t)v65 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v75 = (uint64_t)v65 - v24;
  MEMORY[0x1E0C80A78](v23);
  v71 = (double *)((char *)v65 - v25);
  v26 = (_QWORD *)*((_QWORD *)a2 + 2);
  if (!v26)
  {
    a3(MEMORY[0x1E0DEE9D8]);
    return swift_bridgeObjectRelease();
  }
  v65[1] = a4;
  v66 = a3;
  if (a1 >> 62)
  {
LABEL_59:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v82 = sub_1CCB64090();
    swift_bridgeObjectRelease();
  }
  else
  {
    v82 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v27 = a1;
  a1 = 0;
  v28 = *(unsigned __int8 *)(v15 + 80);
  v65[0] = a2;
  v80 = (v28 + 32) & ~v28;
  v81 = (char *)a2 + v80;
  v29 = *(_QWORD *)(v15 + 72);
  v30 = MEMORY[0x1E0DEE9D8];
  v78 = v27 & 0xC000000000000001;
  v79 = v29;
  v72 = v18;
  a2 = v71;
  v67 = v27;
  v74 = v26;
  do
  {
    if ((_QWORD *)a1 == v26)
    {
      __break(1u);
      goto LABEL_57;
    }
    sub_1CC9F7368((uint64_t)&v81[v29 * a1], (uint64_t)a2);
    if (v82)
    {
      if (v78)
      {
        swift_bridgeObjectRetain();
        v26 = (_QWORD *)MEMORY[0x1D17B154C](0, v27);
      }
      else
      {
        v26 = *(_QWORD **)(v27 + 32);
        swift_bridgeObjectRetain();
        swift_retain();
      }
      v32 = *a2;
      v31 = *((_QWORD *)a2 + 1);
      if (v26[3] == *(_QWORD *)a2 && v26[4] == v31 || (sub_1CCB642A0() & 1) != 0)
      {
LABEL_14:
        swift_bridgeObjectRelease();
        v29 = v79;
        v33 = (void *)*((_QWORD *)a2 + 33);
        if (v33)
        {
          v34 = a2[34];
          v35 = *((_QWORD *)a2 + 32);
          v36 = v35 & 1;
          v37 = (v35 >> 8) & 1;
          v38 = (v35 >> 16) & 1;
          v39 = (void *)v26[2];
          v87[0] = BYTE3(v35);
          v73 = v33;
          sub_1CC9FB3D4(v39, v87, v36, v37, v38, (uint64_t)&v88, v34);
          v40 = v88;
          LODWORD(v38) = BYTE1(v88);
          v41 = BYTE2(v88);
          v42 = (uint64_t)a2;
          v43 = BYTE3(v88);
          v44 = (void *)*((_QWORD *)&v88 + 1);
          v45 = v89;
          sub_1CC9F7368(v42, v76);
          sub_1CCA30EF4(&v88);
          sub_1CCA30754((uint64_t)&v88, (uint64_t)v87);
          memset(v86, 0, sizeof(v86));
          v46 = 256;
          if (!(_DWORD)v38)
            v46 = 0;
          v47 = v46 | v40;
          v48 = 0x10000;
          if (!v41)
            v48 = 0;
          memset(v85, 0, sizeof(v85));
          v84[0] = v47 | v48 | (v43 << 24);
          v84[1] = v44;
          v84[2] = v45;
          v49 = type metadata accessor for FMIPItemGroup();
          v50 = (uint64_t)v68;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v68, 1, 1, v49);
          v83 = 7;
          v51 = type metadata accessor for FMIPDeviceConnectedState(0);
          v52 = (uint64_t)v69;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v69, 1, 1, v51);
          v53 = type metadata accessor for FMIPDeviceLostModeMetadata();
          v54 = v70;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v70, 1, 1, v53);
          v55 = v44;
          v64 = (uint64_t)v54;
          v56 = v75;
          FMIPDevice.init(device:historicalLocations:address:crowdSourcedLocation:location:shiftedLocation:crowdSourcedLocating:itemGroup:deviceWithYou:findingCapable:beaconType:deviceConnectedState:lostModeMetadata:)(v76, 0, v87, v86, v85, (unsigned int (*)(char *, uint64_t, uint64_t))v84, 2, v50, v75, 2u, 2, &v83, v52, v64);
          sub_1CC9F7368(v56, v77);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v30 = sub_1CCA0C178(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
          v58 = *(_QWORD *)(v30 + 16);
          v57 = *(_QWORD *)(v30 + 24);
          v15 = v58 + 1;
          v27 = v67;
          a2 = v71;
          v29 = v79;
          if (v58 >= v57 >> 1)
            v30 = sub_1CCA0C178(v57 > 1, v58 + 1, 1, v30);
          *(_QWORD *)(v30 + 16) = v15;
          sub_1CC9F73E8(v77, v30 + v80 + v58 * v29);

          swift_release();
          sub_1CC9F73AC(v75);
          sub_1CC9F73AC((uint64_t)a2);
          v18 = v72;
          v26 = v74;
          goto LABEL_6;
        }
        swift_release();
        v18 = v72;
        v26 = v74;
      }
      else
      {
        swift_release();
        if (v82 != 1)
        {
          if (v78)
          {
            v15 = 1;
            while (1)
            {
              v59 = MEMORY[0x1D17B154C](v15, v27);
              v18 = (char *)(v15 + 1);
              if (__OFADD__(v15, 1))
                break;
              v26 = (_QWORD *)v59;
              v60 = *(_QWORD *)(v59 + 24) == *(_QWORD *)&v32 && *(_QWORD *)(v59 + 32) == v31;
              if (v60 || (sub_1CCB642A0() & 1) != 0)
                goto LABEL_14;
              swift_unknownObjectRelease();
              ++v15;
              if (v18 == (char *)v82)
                goto LABEL_45;
            }
LABEL_57:
            __break(1u);
          }
          else
          {
            v15 = 5;
            while (1)
            {
              v18 = (char *)(v15 - 3);
              if (__OFADD__(v15 - 4, 1))
                break;
              v26 = *(_QWORD **)(v27 + 8 * v15);
              v61 = v26[3] == *(_QWORD *)&v32 && v26[4] == v31;
              if (v61 || (sub_1CCB642A0() & 1) != 0)
              {
                swift_retain();
                goto LABEL_14;
              }
              ++v15;
              if (v18 == (char *)v82)
              {
LABEL_45:
                swift_bridgeObjectRelease();
                v18 = v72;
                goto LABEL_46;
              }
            }
          }
          __break(1u);
          goto LABEL_59;
        }
        swift_bridgeObjectRelease();
LABEL_46:
        v26 = v74;
        v29 = v79;
      }
    }
    sub_1CC9F7368((uint64_t)a2, (uint64_t)v18);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v30 = sub_1CCA0C178(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
    v15 = *(_QWORD *)(v30 + 16);
    v62 = *(_QWORD *)(v30 + 24);
    if (v15 >= v62 >> 1)
      v30 = sub_1CCA0C178(v62 > 1, v15 + 1, 1, v30);
    *(_QWORD *)(v30 + 16) = v15 + 1;
    sub_1CC9F73E8((uint64_t)v18, v30 + v80 + v15 * v29);
    sub_1CC9F73AC((uint64_t)a2);
LABEL_6:
    ++a1;
  }
  while ((_QWORD *)a1 != v26);
  swift_bridgeObjectRelease();
  v66(v30);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CC9F7368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPDevice();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CC9F73AC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FMIPDevice();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CC9F73E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPDevice();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CC9F742C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  void (*v7)(uint64_t);
  uint64_t v8;

  v7 = *(void (**)(uint64_t))(a1 + 32);
  sub_1CC9C30A8(0, a3);
  sub_1CC9F74C8(a5, a3);
  v8 = sub_1CCB63C40();
  swift_retain();
  v7(v8);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CC9F74C8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1CC9C30A8(255, a2);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CC9F7508(uint64_t a1)
{
  uint64_t v1;

  return sub_1CC9F7514(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1CC9F7514(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD aBlock[6];

  v34 = a2;
  v6 = sub_1CCB63820();
  v39 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v38 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63868();
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  MEMORY[0x1E0C80A78](v8);
  v35 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FMIPItemGroup();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = swift_bridgeObjectRetain();
  v15 = sub_1CC9F7AC0(v14);
  swift_bridgeObjectRelease();
  if (v15 < 0 || (v15 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v16 = sub_1CCB64090();
    swift_release();
  }
  else
  {
    v16 = *(_QWORD *)(v15 + 16);
  }
  v40 = v6;
  if (v16)
  {
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    result = sub_1CCA63A58(0, v16 & ~(v16 >> 63), 0);
    if (v16 < 0)
    {
      __break(1u);
      return result;
    }
    v32 = a4;
    v33 = a3;
    v18 = 0;
    v19 = aBlock[0];
    do
    {
      if ((v15 & 0xC000000000000001) != 0)
        v20 = (id)MEMORY[0x1D17B154C](v18, v15);
      else
        v20 = *(id *)(v15 + 8 * v18 + 32);
      sub_1CCA6D9B8((int64_t)v20, v13);
      aBlock[0] = v19;
      v22 = *(_QWORD *)(v19 + 16);
      v21 = *(_QWORD *)(v19 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_1CCA63A58(v21 > 1, v22 + 1, 1);
        v19 = aBlock[0];
      }
      ++v18;
      *(_QWORD *)(v19 + 16) = v22 + 1;
      sub_1CC9FED60((uint64_t)v13, v19+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v22, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    }
    while (v16 != v18);
    swift_release();
    a3 = v33;
  }
  else
  {
    swift_release();
    v19 = MEMORY[0x1E0DEE9D8];
  }
  v23 = v34;
  *(_QWORD *)(v34 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_itemGroups) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (MEMORY[0x1D17B2218](v23 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_delegate))
  {
    sub_1CC9F7D4C(v19);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (qword_1ED8AA630 != -1)
    swift_once();
  v24 = sub_1CCB637FC();
  sub_1CCA16C20(v24, (uint64_t)qword_1ED8AD7F8);
  v25 = sub_1CCB637D8();
  v26 = sub_1CCB63D48();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1CC9BF000, v25, v26, "FMIPBeaconRefreshingController: beacon groups updated", v27, 2u);
    MEMORY[0x1D17B214C](v27, -1, -1);
  }

  aBlock[4] = sub_1CCA00ED4;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E8901100;
  v28 = _Block_copy(aBlock);
  swift_retain();
  v29 = v35;
  sub_1CCB63844();
  v41 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  v30 = v38;
  v31 = v40;
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v29, v30, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v29, v37);
  result = swift_release();
  if (a3)
    return a3(result);
  return result;
}

uint64_t sub_1CC9F79A0(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v8 = sub_1CCB63EF8();
    if (v8)
      goto LABEL_3;
    return MEMORY[0x1E0DEE9D8];
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    return MEMORY[0x1E0DEE9D8];
LABEL_3:
  if (v8 <= 0)
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    sub_1CCA14E90(&qword_1EF9E2890);
    v9 = (_QWORD *)swift_allocObject();
    v10 = j__malloc_size(v9);
    v11 = v10 - 32;
    if (v10 < 32)
      v11 = v10 - 25;
    v9[2] = v8;
    v9[3] = (2 * (v11 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  v12 = sub_1CCAA75E8(&v14, v9 + 4, v8, a1, a2, a3, a4);
  result = sub_1CCA2F54C();
  if (v12 == (_QWORD *)v8)
    return (uint64_t)v9;
  __break(1u);
  return result;
}

uint64_t sub_1CC9F7AC0(uint64_t a1)
{
  return sub_1CC9F79A0(a1, &qword_1EF9E28A0, 0x1E0D898C8, &qword_1EF9E28A8);
}

uint64_t sub_1CC9F7ADC()
{
  uint64_t v0;

  return sub_1CC9F7AE8(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_1CC9F7AE8(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;

  result = MEMORY[0x1D17B2218](a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_delegate);
  if (result)
  {
    sub_1CC9F7B40();
    result = swift_unknownObjectRelease();
  }
  if (a2)
    return a2(result);
  return result;
}

uint64_t sub_1CC9F7B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1CCB63868();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63820();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v10 = sub_1CCB637FC();
  sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
  v11 = sub_1CCB637D8();
  v12 = sub_1CCB63D48();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPManager: refreshingControllerDidInitialize didInitialize", v13, 2u);
    MEMORY[0x1D17B214C](v13, -1, -1);
  }

  sub_1CCB63814();
  aBlock[4] = sub_1CCA02414;
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F8AD8;
  v14 = _Block_copy(aBlock);
  swift_retain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v5, v9, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

uint64_t sub_1CC9F7D4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void *v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t aBlock[6];

  v2 = v1;
  v4 = sub_1CCB63868();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63820();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v35 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v11 = sub_1CCB637FC();
  sub_1CCA16C20(v11, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain_n();
  v12 = sub_1CCB637D8();
  v13 = sub_1CCB63D48();
  if (os_log_type_enabled(v12, v13))
  {
    v34 = v4;
    v14 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    aBlock[0] = v31;
    v33 = v9;
    *(_DWORD *)v14 = 136315138;
    v30[1] = v14 + 4;
    v15 = type metadata accessor for FMIPItemGroup();
    v32 = v2;
    v16 = v8;
    v17 = v7;
    v18 = v5;
    v19 = v15;
    v20 = swift_bridgeObjectRetain();
    v21 = MEMORY[0x1D17B10B4](v20, v19);
    v23 = v22;
    swift_bridgeObjectRelease();
    v24 = v21;
    v5 = v18;
    v7 = v17;
    v8 = v16;
    v2 = v32;
    v36 = sub_1CCA0CB60(v24, v23, aBlock);
    v9 = v33;
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    v4 = v34;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v12, v13, "FMIPManager: didReceive itemsGroup: %s", v14, 0xCu);
    v25 = v31;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v25, -1, -1);
    MEMORY[0x1D17B214C](v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v26 = v35;
  sub_1CCB63814();
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = a1;
  *(_QWORD *)(v27 + 24) = v2;
  aBlock[4] = (uint64_t)sub_1CCA02478;
  aBlock[5] = v27;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA00C38;
  aBlock[3] = (uint64_t)&unk_1E88F7DF0;
  v28 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CCB63844();
  MEMORY[0x1D17B1318](0, v7, v26, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v26, v8);
  return swift_release();
}

uint64_t sub_1CC9F8098()
{
  return sub_1CC9F80A0();
}

uint64_t sub_1CC9F80A0()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = result + OBJC_IVAR____TtC8FMIPCore11FMIPManager_siriDelegate;
    swift_beginAccess();
    if (MEMORY[0x1D17B2218](v2))
    {
      v3 = *(_QWORD *)(v2 + 8);
      ObjectType = swift_getObjectType();
      sub_1CCA14E90((uint64_t *)&unk_1EF9E2A60);
      sub_1CCB63D9C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 24))(v1, v5, ObjectType, v3);
      swift_bridgeObjectRelease();
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

void sub_1CC9F81AC(_QWORD *a1)
{
  FMIPBeaconType.encode(to:)(a1);
}

void FMIPBeaconType.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[22];

  v3 = sub_1CCA14E90(&qword_1EF9E5350);
  v17[16] = *(_QWORD *)(v3 - 8);
  v17[17] = v3;
  MEMORY[0x1E0C80A78](v3);
  v17[15] = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9E5358);
  v17[13] = *(_QWORD *)(v5 - 8);
  v17[14] = v5;
  MEMORY[0x1E0C80A78](v5);
  v17[12] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1EF9E5360);
  v17[10] = *(_QWORD *)(v7 - 8);
  v17[11] = v7;
  MEMORY[0x1E0C80A78](v7);
  v17[9] = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCA14E90(&qword_1EF9E5368);
  v17[7] = *(_QWORD *)(v9 - 8);
  v17[8] = v9;
  MEMORY[0x1E0C80A78](v9);
  v17[6] = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCA14E90(&qword_1EF9E5370);
  v17[4] = *(_QWORD *)(v11 - 8);
  v17[5] = v11;
  MEMORY[0x1E0C80A78](v11);
  v17[3] = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCA14E90(&qword_1EF9E5378);
  v17[1] = *(_QWORD *)(v13 - 8);
  v17[2] = v13;
  MEMORY[0x1E0C80A78](v13);
  v14 = sub_1CCA14E90(&qword_1EF9E5380);
  MEMORY[0x1E0C80A78](v14);
  v15 = sub_1CCA14E90(&qword_1EF9E5388);
  v17[19] = *(_QWORD *)(v15 - 8);
  v17[20] = v15;
  MEMORY[0x1E0C80A78](v15);
  v16 = *v1;
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CC9F8D4C();
  sub_1CCB643CC();
  __asm { BR              X9 }
}

uint64_t sub_1CC9F8434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 71) = 0;
  sub_1CC9F8D08();
  v5 = *(_QWORD *)(v4 - 96);
  sub_1CCB641B0();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 104) + 8))(v1, v5);
}

uint64_t FMIPBeaconType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  v50 = a2;
  v43 = sub_1CCA14E90(&qword_1EF9E53D0);
  v41 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v49 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_1CCA14E90(&qword_1EF9E53D8);
  v38 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v45 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9E53E0);
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  MEMORY[0x1E0C80A78](v5);
  v48 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1EF9E53E8);
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  MEMORY[0x1E0C80A78](v7);
  v46 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCA14E90(&qword_1EF9E53F0);
  v34 = *(_QWORD *)(v9 - 8);
  v35 = v9;
  MEMORY[0x1E0C80A78](v9);
  v47 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCA14E90(&qword_1EF9E53F8);
  v32 = *(_QWORD *)(v11 - 8);
  v33 = v11;
  MEMORY[0x1E0C80A78](v11);
  v44 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCA14E90(&qword_1EF9E5400);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1CCA14E90(&qword_1EF9E5408);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[3];
  v51 = a1;
  sub_1CCA04DDC(a1, v21);
  sub_1CC9F8D4C();
  v22 = v52;
  sub_1CCB643B4();
  if (!v22)
  {
    v30[2] = v16;
    v30[0] = v14;
    v30[1] = v13;
    v52 = v18;
    v31 = v17;
    v23 = v20;
    v24 = sub_1CCB64198();
    if (*(_QWORD *)(v24 + 16) == 1)
      __asm { BR              X9 }
    v25 = sub_1CCB64000();
    swift_allocError();
    v27 = v26;
    sub_1CCA14E90(&qword_1EF9E5410);
    *v27 = &type metadata for FMIPBeaconType;
    v28 = v31;
    sub_1CCB64108();
    sub_1CCB63FF4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC450], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v23, v28);
  }
  return sub_1CCA01CA0((uint64_t)v51);
}

void sub_1CC9F8A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 70) = 1;
  sub_1CCB242D4();
  v4 = *(_QWORD *)(v3 - 160);
  v5 = *(_QWORD *)(v3 - 264);
  sub_1CCB640FC();
  if (!v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 256) + 8))(v4, *(_QWORD *)(v3 - 248));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v5);
    JUMPOUT(0x1CC9F8D00);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x1CC9F8A4CLL);
}

unint64_t sub_1CC9F8D08()
{
  unint64_t result;

  result = qword_1EF9E53C8;
  if (!qword_1EF9E53C8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72F34, &type metadata for FMIPBeaconType.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E53C8);
  }
  return result;
}

unint64_t sub_1CC9F8D4C()
{
  unint64_t result;

  result = qword_1EF9E5390;
  if (!qword_1EF9E5390)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB73164, &type metadata for FMIPBeaconType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E5390);
  }
  return result;
}

uint64_t sub_1CC9F8D90()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  _BYTE v7[72];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  char v13;
  uint64_t v14;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_QWORD *)v0 + 3);
  v3 = *((_BYTE *)v0 + 48);
  v4 = *((_BYTE *)v0 + 49);
  v5 = *((_QWORD *)v0 + 7);
  v8 = *v0;
  v9 = v1;
  v10 = v2;
  v11 = v0[2];
  v12 = v3;
  v13 = v4;
  v14 = v5;
  sub_1CCB6433C();
  FMIPDeviceImageCacheRequest.hash(into:)((uint64_t)v7);
  return sub_1CCB64384();
}

uint64_t FMIPDeviceImageCacheRequest.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v5;

  v3 = *(_QWORD *)(v1 + 40);
  v5 = *(_BYTE *)(v1 + 49);
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  sub_1CCB64354();
  if (v3)
  {
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
  }
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  sub_1CC9F8F44(a1, v5);
  return sub_1CCB6436C();
}

void sub_1CC9F8F44(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1CC9F8F80()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CC9F9064(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t);
  unsigned int (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  int v99;
  uint64_t v100;
  uint64_t i;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  void (*v123)(char *, unint64_t, uint64_t);
  void (*v124)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v125;
  uint64_t v126;

  v125 = a2;
  v5 = type metadata accessor for FMIPDevice();
  MEMORY[0x1E0C80A78](v5);
  v108 = (char *)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1ED8A8EF8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v114 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v117 = (char *)&v107 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v107 = (char *)&v107 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v107 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v107 - v17;
  v19 = sub_1CCB63604();
  v122 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v115 = (char *)&v107 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v116 = (char *)&v107 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v121 = (char *)&v107 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v119 = (char *)&v107 - v27;
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v107 - v28;
  v30 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v107 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CC9EAB74(a1 + *(int *)(v5 + 128), (uint64_t)v32, &qword_1ED8A8C30);
  v33 = type metadata accessor for FMIPItemGroup();
  v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v32, 1, v33);
  v110 = a3;
  v111 = a1;
  if (v34 == 1)
  {
    sub_1CC9C3E84((uint64_t)v32, &qword_1ED8A8C30);
    if (!*(_QWORD *)(a1 + 24))
    {
LABEL_5:
      v36 = MEMORY[0x1E0DEE9D8];
      goto LABEL_8;
    }
    sub_1CCB635BC();
    v35 = v122;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v18, 1, v19) == 1)
    {
      sub_1CC9C3E84((uint64_t)v18, &qword_1ED8A8EF8);
      goto LABEL_5;
    }
    v40 = v35;
    v41 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    v41(v29, v18, v19);
    sub_1CCA14E90(&qword_1EF9E2AD0);
    v42 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_1CCB677E0;
    v41((char *)(v36 + v42), v29, v19);
  }
  else
  {
    v37 = *((_QWORD *)v32 + 5);
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v38 = v112;
    v39 = sub_1CCA97564(v37);
    swift_bridgeObjectRelease();
    v36 = sub_1CCA96FB4(v39);
    v112 = v38;
    swift_bridgeObjectRelease();
  }
LABEL_8:
  v43 = (uint64_t)v121;
  v44 = *(_QWORD *)(v36 + 16);
  if (v44)
  {
    v45 = v122;
    v46 = v36 + ((*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80));
    v47 = *(_QWORD *)(v122 + 72);
    v123 = *(void (**)(char *, unint64_t, uint64_t))(v122 + 16);
    swift_retain();
    v113 = v36;
    swift_bridgeObjectRetain();
    v109 = v46;
    v48 = v46;
    v118 = (char *)MEMORY[0x1E0DEE9D8];
    v120 = v47;
    while (1)
    {
      v123(v16, v48, v19);
      v124 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56);
      v124(v16, 0, 1, v19);
      v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
      if (v49(v16, 1, v19) == 1)
        break;
      v50 = v49;
      v51 = (uint64_t)v119;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v119, v16, v19);
      v52 = v45;
      v53 = v125[32];
      if (*(_QWORD *)(v53 + 16))
      {
        swift_bridgeObjectRetain();
        v54 = sub_1CCAC8D64(v51);
        if ((v55 & 1) != 0)
        {
          v56 = *(_BYTE *)(*(_QWORD *)(v53 + 56) + v54);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v51, v19);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v49 = v50;
            v57 = v118;
          }
          else
          {
            v57 = sub_1CCACA08C(0, *((_QWORD *)v118 + 2) + 1, 1, v118);
            v49 = v50;
          }
          v59 = *((_QWORD *)v57 + 2);
          v58 = *((_QWORD *)v57 + 3);
          if (v59 >= v58 >> 1)
            v57 = sub_1CCACA08C((char *)(v58 > 1), v59 + 1, 1, v57);
          *((_QWORD *)v57 + 2) = v59 + 1;
          v118 = v57;
          v57[v59 + 32] = v56;
          v43 = (uint64_t)v121;
          v45 = v122;
          v47 = v120;
          goto LABEL_12;
        }
        swift_bridgeObjectRelease();
        v45 = v122;
        (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v51, v19);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v19);
        v45 = v52;
      }
      v43 = (uint64_t)v121;
      v49 = v50;
LABEL_12:
      v48 += v47;
      if (!--v44)
      {
        v124(v16, 1, 1, v19);
        break;
      }
    }
    v60 = v113;
    swift_bridgeObjectRelease();
    swift_release();
    v61 = v107;
    if (*((_QWORD *)v118 + 2))
      LODWORD(v119) = v118[32];
    else
      LODWORD(v119) = 0;
    swift_bridgeObjectRelease();
    v62 = *(_QWORD *)(v60 + 16);
    if (v62)
    {
      swift_bridgeObjectRetain_n();
      swift_retain();
      v63 = v109;
      v64 = v115;
      while (1)
      {
        v123(v61, v63, v19);
        v124(v61, 0, 1, v19);
        if (v49(v61, 1, v19) == 1)
          break;
        (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v43, v61, v19);
        v65 = v125[33];
        if (!*(_QWORD *)(v65 + 16))
          goto LABEL_40;
        swift_bridgeObjectRetain();
        v66 = sub_1CCAC8D64(v43);
        if ((v67 & 1) == 0)
        {
          swift_bridgeObjectRelease();
LABEL_40:
          v45 = v122;
          (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v43, v19);
LABEL_41:
          swift_release();
          LODWORD(v118) = 0;
          v69 = v117;
          v70 = v113;
          goto LABEL_42;
        }
        v68 = *(_BYTE *)(*(_QWORD *)(v65 + 56) + v66);
        swift_bridgeObjectRelease();
        v45 = v122;
        (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v43, v19);
        if ((v68 & 1) == 0)
          goto LABEL_41;
        v43 = (uint64_t)v121;
        v63 += v120;
        if (!--v62)
          goto LABEL_37;
      }
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_retain();
      v64 = v115;
LABEL_37:
      v124(v61, 1, 1, v19);
    }
    v69 = v117;
    v70 = v113;
    swift_release();
    LODWORD(v118) = 1;
LABEL_42:
    swift_bridgeObjectRelease_n();
    v71 = *(_QWORD *)(v70 + 16);
    if (v71)
    {
      swift_bridgeObjectRetain_n();
      swift_retain();
      v72 = v109;
      v73 = v120;
      while (1)
      {
        v123(v69, v72, v19);
        v124(v69, 0, 1, v19);
        if (v49(v69, 1, v19) == 1)
          break;
        v74 = (uint64_t)v116;
        (*(void (**)(void))(v45 + 32))();
        v75 = v125[34];
        if (!*(_QWORD *)(v75 + 16))
          goto LABEL_54;
        swift_bridgeObjectRetain();
        v76 = sub_1CCAC8D64(v74);
        if ((v77 & 1) == 0)
        {
          swift_bridgeObjectRelease();
LABEL_54:
          v45 = v122;
          (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v74, v19);
LABEL_55:
          swift_release();
          LODWORD(v121) = 0;
          v80 = v113;
          v79 = v114;
          goto LABEL_56;
        }
        v78 = *(_BYTE *)(*(_QWORD *)(v75 + 56) + v76);
        swift_bridgeObjectRelease();
        v45 = v122;
        (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v74, v19);
        if ((v78 & 1) == 0)
          goto LABEL_55;
        v72 += v73;
        --v71;
        v69 = v117;
        if (!v71)
          goto LABEL_51;
      }
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_retain();
LABEL_51:
      v124(v69, 1, 1, v19);
    }
    v80 = v113;
    v79 = v114;
    swift_release();
    LODWORD(v121) = 1;
LABEL_56:
    swift_bridgeObjectRelease_n();
    v81 = *(_QWORD *)(v80 + 16);
    if (v81)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      v82 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v83 = v109;
      while (1)
      {
        v86 = v83;
        ((void (*)(char *))v123)(v79);
        v124(v79, 0, 1, v19);
        if (v49(v79, 1, v19) == 1)
          goto LABEL_71;
        (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v64, v79, v19);
        v87 = (uint64_t)v64;
        v88 = v125[31];
        if (*(_QWORD *)(v88 + 16))
        {
          swift_bridgeObjectRetain();
          v89 = sub_1CCAC8D64(v87);
          if ((v90 & 1) != 0)
          {
            v91 = *(_QWORD *)(*(_QWORD *)(v88 + 56) + 8 * v89);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v87, v19);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v82 = sub_1CCAC9F60(0, v82[2] + 1, 1, v82);
            v84 = v86;
            v93 = v82[2];
            v92 = v82[3];
            if (v93 >= v92 >> 1)
            {
              v94 = sub_1CCAC9F60((_QWORD *)(v92 > 1), v93 + 1, 1, v82);
              v84 = v86;
              v82 = v94;
            }
            v85 = v120;
            v82[2] = v93 + 1;
            v82[v93 + 4] = v91;
            v79 = v114;
            v64 = v115;
            v45 = v122;
            goto LABEL_60;
          }
          swift_bridgeObjectRelease();
          v45 = v122;
        }
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v87, v19);
        v64 = (char *)v87;
        v84 = v86;
        v85 = v120;
LABEL_60:
        v83 = v84 + v85;
        if (!--v81)
          goto LABEL_70;
      }
    }
    swift_retain();
    swift_bridgeObjectRetain();
    v82 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_70:
    v124(v79, 1, 1, v19);
LABEL_71:
    v95 = v110;
    v96 = (uint64_t)v108;
    v97 = MEMORY[0x1E0DEE9D8];
    v98 = (char)v119;
    v99 = (int)v118;
    swift_release();
    swift_bridgeObjectRelease_n();
    v126 = v97;
    v100 = v82[2];
    if (v100)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v100; ++i)
      {
        v102 = swift_bridgeObjectRetain();
        sub_1CCAC8BA8(v102);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v103 = sub_1CCAABF4C(v126);
    swift_bridgeObjectRelease();
    v104 = sub_1CCA7AD3C(v103);
    swift_bridgeObjectRelease();
    v105 = swift_bridgeObjectRetain();
    v106 = sub_1CCAB71B8(v105, v104);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1CCA0BEEC(v111, v96, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    LOBYTE(v126) = v98;
    FMIPDevice.init(device:separationMonitoringState:separationSupported:canBeLeashedByHost:safeLocations:)(v96, (unsigned __int8 *)&v126, v99, (int)v121, v106, v95);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1CCA0BEEC(v111, v110, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  }
}

uint64_t sub_1CC9F9BDC(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  unint64_t v66;
  __int128 v67;
  const char *v68;
  char *v69;
  char *v70;
  const char *v71;
  const char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  __int128 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  _QWORD *v102;
  uint64_t v103;
  unsigned __int8 v104;
  _BYTE v105[24];
  _QWORD v106[3];
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  _OWORD v113[18];
  _BYTE v114[296];

  v2 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v2);
  v78 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CCA14E90(&qword_1EF9E21F8);
  MEMORY[0x1E0C80A78](v4);
  v77 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v6);
  v76 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  v9 = MEMORY[0x1E0C80A78](v8);
  v93 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v67 - v11;
  v13 = sub_1CCA14E90((uint64_t *)&unk_1EF9E29E0);
  MEMORY[0x1E0C80A78](v13);
  v91 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FMReverseGeocodingRequest();
  v89 = *(_QWORD *)(v15 - 8);
  v90 = v15;
  MEMORY[0x1E0C80A78](v15);
  v81 = (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for FMIPDevice();
  v83 = *(_QWORD *)(v88 - 8);
  v17 = MEMORY[0x1E0C80A78](v88);
  v75 = (uint64_t)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v79 = (uint64_t)&v67 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v67 - v22;
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v67 - v24;
  v103 = sub_1CCA14E90(&qword_1ED8A7EE0);
  v97 = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103);
  v82 = (char *)&v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1CCA14E90(&qword_1ED8A7EE8);
  v28 = MEMORY[0x1E0C80A78](v27);
  v30 = (unint64_t *)((char *)&v67 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v28);
  v101 = v23;
  v102 = (_QWORD *)((char *)&v67 - v31);
  v98 = *(_QWORD *)(a1 + 16);
  v95 = OBJC_IVAR____TtC8FMIPCore15FMIPDataManager_geocodingCache;
  v87 = (__int128 *)(v23 + 280);
  result = swift_bridgeObjectRetain_n();
  v33 = 0;
  v86 = 0;
  v73 = "edLocation";
  v74 = "rk";
  v71 = "lastDisconnected";
  v72 = "lastConnectionMaintenance";
  v69 = "lter";
  v70 = "xied";
  v68 = "intentLocationUpdate";
  v84 = a1;
  v80 = a1;
  v99 = v12;
  v92 = v25;
  v94 = v30;
  while (1)
  {
    if (v33 == v98)
    {
      v34 = 1;
      v33 = v98;
      goto LABEL_8;
    }
    if (v33 >= v98)
      break;
    v35 = v103;
    v36 = (uint64_t)&v82[*(int *)(v103 + 48)];
    sub_1CCA0BEEC(v84+ ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80))+ *(_QWORD *)(v83 + 72) * v33, v36, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v37 = (uint64_t)v30 + *(int *)(v35 + 48);
    *v30 = v33;
    sub_1CC9FED60(v36, v37, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v34 = 0;
    ++v33;
LABEL_8:
    v38 = v97;
    v39 = v103;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v97 + 56))(v30, v34, 1, v103);
    v40 = v102;
    sub_1CC9C3EC0((uint64_t)v30, (uint64_t)v102, &qword_1ED8A7EE8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v38 + 48))(v40, 1, v39) == 1)
    {
      swift_bridgeObjectRelease();
      return v80;
    }
    v41 = *v102;
    sub_1CC9FED60((uint64_t)v102 + *(int *)(v103 + 48), (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v42 = *(_QWORD *)(v96 + v95);
    if (v42)
    {
      v85 = v41;
      v100 = v33;
      v43 = (uint64_t)v101;
      sub_1CCA0BEEC((uint64_t)v25, (uint64_t)v101, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      sub_1CC9EAB74(v42 + qword_1EF9FF7A8, (uint64_t)v12, (uint64_t *)&unk_1ED8A8B10);
      v44 = *(_QWORD *)(v43 + 272);
      v111 = *(_OWORD *)(v43 + 256);
      v112 = v44;
      v45 = *(_QWORD *)(v43 + 296);
      v109 = *v87;
      v110 = v45;
      v46 = (*(_QWORD *)(v43 + 216) >> 5) & 1;
      v47 = v43 + *(int *)(v88 + 128);
      LOBYTE(v107) = *(_BYTE *)(v43 + 80);
      sub_1CCA11CFC((uint64_t *)&v111, (uint64_t *)&v109, v46, v47, (unsigned __int8 *)&v107, (double *)v113);
      if (*((_QWORD *)&v113[0] + 1))
      {
        v48 = BYTE3(v113[0]);
        sub_1CC9EAB74((uint64_t)v12, v93, (uint64_t *)&unk_1ED8A8B10);
        __asm { BR              X8 }
      }
      sub_1CC9C3E84((uint64_t)v12, (uint64_t *)&unk_1ED8A8B10);
      sub_1CCA0BF30((uint64_t)v101, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v50 = v90;
      v49 = (uint64_t)v91;
      v51 = v89;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v89 + 56))(v91, 1, 1, v90);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50) == 1)
      {
        sub_1CC9C3E84(v49, (uint64_t *)&unk_1EF9E29E0);
        sub_1CCA30EF4(v113);
        sub_1CC9C3EC0((uint64_t)v113, (uint64_t)v114, &qword_1ED8A71C0);
      }
      else
      {
        v52 = v81;
        v53 = sub_1CC9FED60(v49, v81, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        MEMORY[0x1E0C80A78](v53);
        sub_1CCA14E90(&qword_1ED8A71C0);
        v54 = v86;
        sub_1CCB63D9C();
        v86 = v54;
        sub_1CCA0BF30(v52, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      }
      v12 = v99;
      v33 = v100;
      v25 = v92;
      v30 = v94;
      sub_1CC9C3EC0((uint64_t)v114, (uint64_t)&v111, &qword_1ED8A71C0);
      sub_1CC9C3EC0((uint64_t)&v111, (uint64_t)v113, &qword_1ED8A71C0);
      if (sub_1CCA33738((uint64_t)v113) != 1)
      {
        v55 = (uint64_t)v25;
        v56 = v25;
        v57 = v75;
        sub_1CCA0BEEC(v55, v75, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v58 = (void *)*((_QWORD *)v56 + 31);
        sub_1CC9C3EC0((uint64_t)&v111, (uint64_t)&v109, &qword_1ED8A71C0);
        v107 = *((_QWORD *)v56 + 35);
        v67 = *((_OWORD *)v56 + 18);
        v108 = v67;
        memset(v106, 0, sizeof(v106));
        v59 = type metadata accessor for FMIPItemGroup();
        memset(v105, 0, sizeof(v105));
        v60 = (uint64_t)v76;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v76, 1, 1, v59);
        v104 = 7;
        v61 = type metadata accessor for FMIPDeviceConnectedState(0);
        v62 = (uint64_t)v77;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v77, 1, 1, v61);
        v63 = type metadata accessor for FMIPDeviceLostModeMetadata();
        v64 = (uint64_t)v78;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v78, 1, 1, v63);
        v65 = (id)v67;
        swift_bridgeObjectRetain();
        FMIPDevice.init(device:historicalLocations:address:crowdSourcedLocation:location:shiftedLocation:crowdSourcedLocating:itemGroup:deviceWithYou:findingCapable:beaconType:deviceConnectedState:lostModeMetadata:)(v57, v58, (char *)&v109, &v107, v106, (unsigned int (*)(char *, uint64_t, uint64_t))v105, 2, v60, v79, 2u, 2, &v104, v62, v64);
        v66 = v80;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = sub_1CCAB6EFC(v66);
          v80 = result;
        }
        v12 = v99;
        v33 = v100;
        v25 = v92;
        if ((v85 & 0x8000000000000000) != 0)
          goto LABEL_23;
        if (v85 >= *(_QWORD *)(v80 + 16))
          goto LABEL_24;
        sub_1CCABB698(v79, v80+ ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80))+ *(_QWORD *)(v83 + 72) * v85, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      }
    }
    else
    {
      v30 = v94;
    }
    result = sub_1CCA0BF30((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for FMReverseGeocodingRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FMReverseGeocodingRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CC9FA724(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1CCB6376C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 44);
  v6 = sub_1CCB63790();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_1CC9FA780(_QWORD *a1)
{
  return FMIPFeatures.encode(to:)(a1);
}

uint64_t FMIPFeatures.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char v9;

  v3 = sub_1CCA14E90(&qword_1ED8A7FA8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA16C38();
  sub_1CCB643CC();
  v9 = 0;
  sub_1CCB641EC();
  if (!v1)
  {
    v9 = 1;
    sub_1CCB641EC();
    v9 = 2;
    sub_1CCB641EC();
    v9 = 3;
    sub_1CCB641EC();
    v9 = 4;
    sub_1CCB641EC();
    v9 = 5;
    sub_1CCB641EC();
    v9 = 6;
    sub_1CCB641EC();
    v9 = 7;
    sub_1CCB641EC();
    v9 = 8;
    sub_1CCB641EC();
    v9 = 9;
    sub_1CCB641EC();
    v9 = 10;
    sub_1CCB641EC();
    v9 = 11;
    sub_1CCB641EC();
    v9 = 12;
    sub_1CCB641EC();
    v9 = 13;
    sub_1CCB641EC();
    v9 = 14;
    sub_1CCB641EC();
    v9 = 15;
    sub_1CCB641EC();
    v9 = 16;
    sub_1CCB641EC();
    v9 = 17;
    sub_1CCB641EC();
    v9 = 18;
    sub_1CCB641EC();
    v9 = 19;
    sub_1CCB641EC();
    v9 = 20;
    sub_1CCB641EC();
    v9 = 21;
    sub_1CCB641EC();
    v9 = 22;
    sub_1CCB641EC();
    v9 = 23;
    sub_1CCB641EC();
    v9 = 24;
    sub_1CCB641EC();
    v9 = 25;
    sub_1CCB641EC();
    v9 = 26;
    sub_1CCB641EC();
    v9 = 27;
    sub_1CCB641EC();
    v9 = 28;
    sub_1CCB641EC();
    v9 = 29;
    sub_1CCB641EC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1CC9FAD84(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id i;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  void *v28;
  void *v29;
  unsigned __int8 v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  id v34;
  id v35;
  double v36;
  double v37;
  id v38;
  void *v39;
  id v40;
  double v41;
  char v42;
  char v43;
  char v44;
  char v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t inited;
  id v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD v58[2];
  uint8_t *v59;
  id v60;
  void *v61;
  uint64_t v62[2];
  uint64_t v63;
  void *v64;
  uint64_t v65;

  v3 = sub_1CCB635B0();
  v4 = *(id *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint8_t *)v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v7 = sub_1CCB637FC();
  v8 = sub_1CCA16C20(v7, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain_n();
  v9 = sub_1CCB637D8();
  v10 = sub_1CCB63D48();
  v11 = a1 >> 62;
  if (!os_log_type_enabled(v9, v10))
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  v58[1] = v8;
  v59 = v6;
  v6 = (uint8_t *)swift_slowAlloc();
  v1 = swift_slowAlloc();
  v62[0] = v1;
  *(_DWORD *)v6 = 136315138;
  if (!v11)
  {
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v60 = v4;
    if (v12)
      goto LABEL_6;
LABEL_12:
    v13 = v3;
    swift_bridgeObjectRelease();
    v17 = 0;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  v12 = sub_1CCB64090();
  v60 = v4;
  if (!v12)
    goto LABEL_12;
LABEL_6:
  if ((a1 & 0xC000000000000001) != 0)
    goto LABEL_32;
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = v3;
    for (i = *(id *)(a1 + 32); ; i = (id)MEMORY[0x1D17B154C](0, a1))
    {
      v15 = i;
      swift_bridgeObjectRelease();
      v16 = objc_msgSend(v15, sel_debugDescription);

      v17 = sub_1CCB63988();
      v12 = v18;

LABEL_13:
      v63 = v17;
      v64 = (void *)v12;
      sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
      v19 = sub_1CCB639AC();
      v63 = sub_1CCA0CB60(v19, v20, v62);
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v9, v10, "FMIPLocationController: location manager didUpdateLocations: %s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v1, -1, -1);
      MEMORY[0x1D17B214C](v6, -1, -1);

      v3 = v13;
      v6 = v59;
      v4 = v60;
LABEL_14:
      if (v11)
      {
        swift_bridgeObjectRetain();
        if (!sub_1CCB64090())
        {
LABEL_29:
          swift_bridgeObjectRelease();
          return;
        }
      }
      else
      {
        v21 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v21)
          goto LABEL_29;
      }
      if ((a1 & 0xC000000000000001) != 0)
        break;
      if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v22 = *(id *)(a1 + 32);
        goto LABEL_19;
      }
      __break(1u);
LABEL_32:
      v13 = v3;
    }
    v22 = (id)MEMORY[0x1D17B154C](0, a1);
LABEL_19:
    v23 = v22;
    swift_bridgeObjectRelease();
    objc_msgSend(v23, sel_coordinate);
    v25 = v24;
    objc_msgSend(v23, sel_coordinate);
    v27 = v26;
    v28 = sub_1CC9FBB7C();
    if (v28
      && (v29 = v28,
          v30 = objc_msgSend(v28, sel_containsCoordinate_, v25, v27),
          v29,
          (v30 & 1) != 0))
    {
      v31 = sub_1CCB637D8();
      v32 = sub_1CCB63D48();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v33 = 0;
        _os_log_impl(&dword_1CC9BF000, v31, v32, "FMIPLocationController: not updating location because it's in a denylist region", v33, 2u);
        MEMORY[0x1D17B214C](v33, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      LOBYTE(v62[0]) = 6;
      v34 = v23;
      v35 = objc_msgSend(v34, sel_timestamp);
      sub_1CCB63580();

      sub_1CCB6355C();
      v37 = v36;
      (*((void (**)(uint8_t *, uint64_t))v4 + 1))(v6, v3);
      v38 = objc_msgSend(v34, sel_floor);
      if (v38)
      {
        v39 = v38;
        v40 = objc_msgSend(v38, sel_level);

        v41 = (double)(uint64_t)v40;
      }
      else
      {
        v41 = -1.0;
      }
      sub_1CC9FB3D4(v34, (char *)v62, v37 < -3600.0, 0, 1, (uint64_t)&v63, v41);
      v42 = v63;
      v43 = BYTE1(v63);
      v44 = BYTE2(v63);
      v45 = BYTE3(v63);
      v46 = v64;
      v47 = v65;
      v48 = v61;
      sub_1CCA14E90(&qword_1EF9E4E40);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1CCB677E0;
      strcpy((char *)(inited + 32), "localLocation");
      *(_WORD *)(inited + 46) = -4864;
      *(_BYTE *)(inited + 48) = v42;
      *(_BYTE *)(inited + 49) = v43;
      *(_BYTE *)(inited + 50) = v44;
      *(_BYTE *)(inited + 51) = v45;
      *(_QWORD *)(inited + 56) = v46;
      *(_QWORD *)(inited + 64) = v47;
      v50 = v46;
      v51 = sub_1CC9FBA14(inited);
      v60 = v34;
      v52 = v51;
      v53 = swift_allocObject();
      *(_BYTE *)(v53 + 16) = v42;
      *(_BYTE *)(v53 + 17) = v43;
      *(_BYTE *)(v53 + 18) = v44;
      *(_BYTE *)(v53 + 19) = v45;
      *(_QWORD *)(v53 + 24) = v50;
      *(_QWORD *)(v53 + 32) = v47;
      *(_QWORD *)(v53 + 40) = v48;
      v54 = v50;
      v55 = v48;
      v56 = sub_1CCA96DBC(v52);
      v57 = (_QWORD *)swift_allocObject();
      v57[2] = v52;
      v57[3] = sub_1CCA04F5C;
      v57[4] = v53;
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1CCA1B400(v56, (uint64_t)sub_1CCA03B14, (uint64_t)v57);

      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1CC9FB3D4(void *a1@<X0>, char *a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>, double a7@<D0>)
{
  char v10;
  char v11;
  char v12;
  char v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  id v25;
  uint64_t v26[3];
  char v27;
  char v28;
  char v29;

  v10 = *a2;
  v11 = a3 & 1;
  v29 = a3;
  v12 = a4 & 1;
  v28 = a4;
  v13 = a5 & 1;
  v27 = a5;
  if (qword_1EF9DEFC8 != -1)
    swift_once();
  v14 = (void *)qword_1EF9E34D0;
  if (qword_1EF9E34D0)
  {
    v15 = (id)qword_1EF9E34D0;
  }
  else
  {
    v15 = a1;
    v14 = 0;
  }
  LOBYTE(v26[0]) = v11;
  BYTE1(v26[0]) = v12;
  BYTE2(v26[0]) = v13;
  BYTE3(v26[0]) = v10;
  v25 = v15;
  v26[1] = (uint64_t)v15;
  *(double *)&v26[2] = a7;
  v16 = v14;
  v17 = FMIPLocation.debugDescription.getter();
  v19 = v18;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v20 = sub_1CCB637FC();
  sub_1CCA16C20(v20, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v21 = sub_1CCB637D8();
  v22 = sub_1CCB63D18();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v26[0] = v24;
    *(_DWORD *)v23 = 136380675;
    swift_bridgeObjectRetain();
    sub_1CCA0CB60(v17, v19, v26);
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CC9BF000, v21, v22, "FMIPLocation: initialized %{private}s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v24, -1, -1);
    MEMORY[0x1D17B214C](v23, -1, -1);

    v11 = v29;
    v12 = v28;
    v13 = v27;
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *(_BYTE *)a6 = v11;
  *(_BYTE *)(a6 + 1) = v12;
  *(_BYTE *)(a6 + 2) = v13;
  *(_BYTE *)(a6 + 3) = v10;
  *(_QWORD *)(a6 + 8) = v25;
  *(double *)(a6 + 16) = a7;
}

uint64_t FMIPLocation.debugDescription.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD v12[2];
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;

  v1 = sub_1CCB635B0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78]();
  v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v3) = v0[1];
  v12[0] = *v0;
  v12[1] = v3;
  v13 = v0[3];
  v5 = (void *)*((_QWORD *)v0 + 1);
  v15 = 0;
  v16 = 0xE000000000000000;
  sub_1CCB63A24();
  sub_1CCB63A24();
  sub_1CCB63A24();
  objc_msgSend(v5, sel_coordinate);
  sub_1CCB63C1C();
  sub_1CCB63A24();
  v7 = v15;
  v6 = v16;
  v15 = 0;
  v16 = 0xE000000000000000;
  sub_1CCB63FB8();
  sub_1CCB63A24();
  objc_msgSend(v5, sel_coordinate);
  sub_1CCB63C1C();
  sub_1CCB63A24();
  objc_msgSend(v5, sel_horizontalAccuracy);
  sub_1CCB63C1C();
  sub_1CCB63A24();
  v8 = objc_msgSend(v5, sel_timestamp);
  sub_1CCB63580();

  sub_1CC9FB9CC();
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_1CCB63A24();
  v15 = v7;
  v16 = v6;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v15;
  v9 = v16;
  v15 = 0;
  v16 = 0xE000000000000000;
  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v14 = v13;
  sub_1CCB64060();
  sub_1CCB63A24();
  v15 = v10;
  v16 = v9;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

unint64_t sub_1CC9FB9CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF9E34D8;
  if (!qword_1EF9E34D8)
  {
    v1 = sub_1CCB635B0();
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0CB08F0], v1);
    atomic_store(result, (unint64_t *)&qword_1EF9E34D8);
  }
  return result;
}

unint64_t sub_1CC9FBA14(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  void *v12;
  uint64_t v13;
  id v14;
  unint64_t result;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1CCA14E90(&qword_1EF9E2880);
  v2 = sub_1CCB640B4();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v22 = v2 + 64;
  swift_retain();
  v5 = (_QWORD *)(a1 + 64);
  while (1)
  {
    v6 = *(v5 - 4);
    v7 = *(v5 - 3);
    v8 = *((_BYTE *)v5 - 16);
    v9 = *((_BYTE *)v5 - 15);
    v10 = *((_BYTE *)v5 - 14);
    v11 = *((_BYTE *)v5 - 13);
    v12 = (void *)*(v5 - 1);
    v13 = *v5;
    swift_bridgeObjectRetain();
    v14 = v12;
    result = sub_1CCA074F4(v6, v7);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)(v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = (uint64_t *)(v3[6] + 16 * result);
    *v17 = v6;
    v17[1] = v7;
    v18 = v3[7] + 24 * result;
    *(_BYTE *)v18 = v8;
    *(_BYTE *)(v18 + 1) = v9;
    *(_BYTE *)(v18 + 2) = v10;
    *(_BYTE *)(v18 + 3) = v11;
    *(_QWORD *)(v18 + 8) = v14;
    *(_QWORD *)(v18 + 16) = v13;
    v19 = v3[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v3[2] = v21;
    v5 += 5;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_1CC9FBB7C()
{
  id v0;
  void *v1;
  uint64_t i;
  id v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D27208]), sel_init);
  if (v0)
  {
    v1 = v0;
    for (i = 0; i != 576; i += 16)
    {
      v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D27140]), sel_initWithLatitude_longitude_, *(double *)((char *)&unk_1E88EDDE8 + i + 40), *(double *)((char *)&unk_1E88EDDE8 + i + 32));
      objc_msgSend(v1, sel_addVertex_, v3);

    }
  }
  else
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v4 = sub_1CCB637FC();
    sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
    v5 = sub_1CCB637D8();
    v6 = sub_1CCB63D30();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1CC9BF000, v5, v6, "Unable to instantiate GEOMapRegion for denylist region.", v7, 2u);
      MEMORY[0x1D17B214C](v7, -1, -1);
    }

    return 0;
  }
  return v1;
}

uint64_t type metadata accessor for FMLocationShiftingRequest()
{
  return objc_opt_self();
}

uint64_t sub_1CC9FBD08@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPPlaySoundMetadata.init(from:)(a1, a2);
}

uint64_t FMIPPlaySoundMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  Swift::Int v35;
  char v36;
  char v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unsigned __int8 *v48;
  unsigned int v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  uint64_t v64;
  uint64_t *v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  char *v73;
  uint8_t *v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  _QWORD *v95;
  uint64_t v96[4];

  v91 = a2;
  v3 = sub_1CCB635B0();
  v4 = *(_QWORD *)(v3 - 8);
  v92 = v3;
  v93 = v4;
  MEMORY[0x1E0C80A78](v3);
  v94 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1ED8A7F80);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FMIPPlaySoundMetadata();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CC9FC5D0();
  v13 = v95;
  sub_1CCB643B4();
  if (v13)
  {
    v16 = (uint64_t)a1;
    return sub_1CCA01CA0(v16);
  }
  v90 = v12;
  v14 = v94;
  v95 = a1;
  LOBYTE(v96[0]) = 0;
  v15 = sub_1CCB6418C();
  LOBYTE(v96[0]) = 1;
  v87 = sub_1CCB64150();
  v88 = v17;
  v86 = v7;
  v18 = objc_msgSend((id)objc_opt_self(), sel_fm_dateFromEpoch_, v15);
  v19 = v14;
  sub_1CCB63580();

  LOBYTE(v96[0]) = 2;
  v20 = v6;
  v89 = v9;
  v81 = sub_1CCB64150();
  v85 = v21;
  v22 = (int *)v10;
  LOBYTE(v96[0]) = 3;
  v23 = sub_1CCB64150();
  v24 = v90;
  v26 = v25;
  v84 = v23;
  LOBYTE(v96[0]) = 4;
  v82 = sub_1CCB64150();
  v83 = v27;
  LOBYTE(v96[0]) = 5;
  result = sub_1CCB64150();
  v30 = v29;
  v31 = HIBYTE(v88) & 0xF;
  v32 = v87 & 0xFFFFFFFFFFFFLL;
  if ((v88 & 0x2000000000000000) != 0)
    v33 = HIBYTE(v88) & 0xF;
  else
    v33 = v87 & 0xFFFFFFFFFFFFLL;
  v80 = result;
  if (!v33)
  {
    swift_bridgeObjectRelease();
    goto LABEL_60;
  }
  if ((v88 & 0x1000000000000000) != 0)
  {
    v35 = (Swift::Int)sub_1CCA3EF0C(v87, v88, 10);
    v52 = v51;
    swift_bridgeObjectRelease();
    if ((v52 & 1) == 0)
    {
LABEL_49:
      FMIPActionStatus.init(rawValue:)(v35);
      if (LOBYTE(v96[0]) == 18)
        v47 = 1;
      else
        v47 = v96[0];
LABEL_61:
      (*(void (**)(char *, char *, uint64_t))(v93 + 16))(&v24[v22[5]], v19, v92);
      *v24 = v47;
      v53 = v85;
      if (v85)
      {
        v54 = HIBYTE(v85) & 0xF;
        if ((v85 & 0x2000000000000000) == 0)
          v54 = v81 & 0xFFFFFFFFFFFFLL;
        if (v54)
        {
          v55 = (uint64_t *)&v24[v22[6]];
          *v55 = v81;
          v55[1] = v53;
          goto LABEL_68;
        }
        swift_bridgeObjectRelease();
      }
      v56 = &v24[v22[6]];
      *(_QWORD *)v56 = 0;
      *((_QWORD *)v56 + 1) = 0;
LABEL_68:
      if (v26)
      {
        v57 = HIBYTE(v26) & 0xF;
        if ((v26 & 0x2000000000000000) == 0)
          v57 = v84 & 0xFFFFFFFFFFFFLL;
        if (v57)
        {
          v58 = (uint64_t *)&v24[v22[7]];
          *v58 = v84;
          v58[1] = v26;
          goto LABEL_75;
        }
        swift_bridgeObjectRelease();
      }
      v59 = &v24[v22[7]];
      *(_QWORD *)v59 = 0;
      *((_QWORD *)v59 + 1) = 0;
LABEL_75:
      v60 = v83;
      if (v83)
      {
        v61 = HIBYTE(v83) & 0xF;
        if ((v83 & 0x2000000000000000) == 0)
          v61 = v82 & 0xFFFFFFFFFFFFLL;
        if (v61)
        {
          v62 = (uint64_t *)&v24[v22[8]];
          *v62 = v82;
          v62[1] = v60;
          goto LABEL_82;
        }
        swift_bridgeObjectRelease();
      }
      v63 = &v24[v22[8]];
      *(_QWORD *)v63 = 0;
      *((_QWORD *)v63 + 1) = 0;
LABEL_82:
      if (v30)
      {
        v64 = HIBYTE(v30) & 0xF;
        if ((v30 & 0x2000000000000000) == 0)
          v64 = v80 & 0xFFFFFFFFFFFFLL;
        if (v64)
        {
          v65 = (uint64_t *)&v24[v22[9]];
          *v65 = v80;
          v65[1] = v30;
LABEL_89:
          v67 = FMIPPlaySoundMetadata.debugDescription.getter();
          v69 = v68;
          if (qword_1ED8AA630 != -1)
            swift_once();
          v70 = sub_1CCB637FC();
          sub_1CCA16C20(v70, (uint64_t)qword_1ED8AD7F8);
          swift_bridgeObjectRetain();
          v71 = sub_1CCB637D8();
          v72 = sub_1CCB63D18();
          if (os_log_type_enabled(v71, v72))
          {
            v73 = v24;
            v74 = (uint8_t *)swift_slowAlloc();
            v75 = v71;
            v76 = swift_slowAlloc();
            v96[0] = v76;
            v88 = v20;
            v77 = v93;
            *(_DWORD *)v74 = 136315138;
            v87 = (uint64_t)(v74 + 4);
            swift_bridgeObjectRetain();
            v96[3] = sub_1CCA0CB60(v67, v69, v96);
            sub_1CCB63E44();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1CC9BF000, v75, v72, "FMIPPlaySoundMetadata: initialized %s", v74, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1D17B214C](v76, -1, -1);
            v78 = v74;
            v24 = v73;
            MEMORY[0x1D17B214C](v78, -1, -1);

            (*(void (**)(char *, uint64_t))(v77 + 8))(v94, v92);
            (*(void (**)(char *, unint64_t))(v86 + 8))(v89, v88);
          }
          else
          {
            swift_bridgeObjectRelease_n();

            (*(void (**)(char *, uint64_t))(v93 + 8))(v19, v92);
            (*(void (**)(char *, unint64_t))(v86 + 8))(v89, v20);
          }
          v79 = (uint64_t)v95;
          sub_1CC9FC764((uint64_t)v24, v91);
          v16 = v79;
          return sub_1CCA01CA0(v16);
        }
        swift_bridgeObjectRelease();
      }
      v66 = &v24[v22[9]];
      *(_QWORD *)v66 = 0;
      *((_QWORD *)v66 + 1) = 0;
      goto LABEL_89;
    }
LABEL_60:
    v47 = 1;
    goto LABEL_61;
  }
  if ((v88 & 0x2000000000000000) == 0)
  {
    if ((v87 & 0x1000000000000000) != 0)
      v34 = (unsigned __int8 *)((v88 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v34 = (unsigned __int8 *)sub_1CCB6400C();
    v35 = (Swift::Int)sub_1CCA3EEF8(v34, v32, 10);
    v37 = v36 & 1;
LABEL_48:
    swift_bridgeObjectRelease();
    if ((v37 & 1) == 0)
      goto LABEL_49;
    goto LABEL_60;
  }
  v96[0] = v87;
  v96[1] = v88 & 0xFFFFFFFFFFFFFFLL;
  if (v87 == 43)
  {
    if (!v31)
      goto LABEL_97;
    if (v31 == 1 || (BYTE1(v87) - 48) > 9u)
      goto LABEL_35;
    v35 = (BYTE1(v87) - 48);
    if (v31 != 2)
    {
      if ((BYTE2(v87) - 48) > 9u)
        goto LABEL_35;
      v35 = 10 * (BYTE1(v87) - 48) + (BYTE2(v87) - 48);
      v38 = v31 - 3;
      if (v38)
      {
        v39 = (unsigned __int8 *)v96 + 3;
        while (1)
        {
          v40 = *v39 - 48;
          if (v40 > 9)
            goto LABEL_35;
          v41 = 10 * v35;
          if ((unsigned __int128)(v35 * (__int128)10) >> 64 != (10 * v35) >> 63)
            goto LABEL_35;
          v35 = v41 + v40;
          if (__OFADD__(v41, v40))
            goto LABEL_35;
          v37 = 0;
          ++v39;
          if (!--v38)
            goto LABEL_48;
        }
      }
    }
LABEL_47:
    v37 = 0;
    goto LABEL_48;
  }
  if (v87 != 45)
  {
    if (!v31 || (v87 - 48) > 9u)
      goto LABEL_35;
    v35 = (v87 - 48);
    if (v31 != 1)
    {
      if ((BYTE1(v87) - 48) > 9u)
        goto LABEL_35;
      v35 = 10 * (v87 - 48) + (BYTE1(v87) - 48);
      v42 = v31 - 2;
      if (v42)
      {
        v43 = (unsigned __int8 *)v96 + 2;
        while (1)
        {
          v44 = *v43 - 48;
          if (v44 > 9)
            goto LABEL_35;
          v45 = 10 * v35;
          if ((unsigned __int128)(v35 * (__int128)10) >> 64 != (10 * v35) >> 63)
            goto LABEL_35;
          v35 = v45 + v44;
          if (__OFADD__(v45, v44))
            goto LABEL_35;
          v37 = 0;
          ++v43;
          if (!--v42)
            goto LABEL_48;
        }
      }
    }
    goto LABEL_47;
  }
  if (v31)
  {
    if (v31 != 1 && (BYTE1(v87) - 48) <= 9u)
    {
      if (v31 == 2)
      {
        v37 = 0;
        v35 = -(uint64_t)(BYTE1(v87) - 48);
        goto LABEL_48;
      }
      if ((BYTE2(v87) - 48) <= 9u)
      {
        v35 = -10 * (BYTE1(v87) - 48) - (BYTE2(v87) - 48);
        v46 = v31 - 3;
        if (!v46)
          goto LABEL_47;
        v48 = (unsigned __int8 *)v96 + 3;
        while (1)
        {
          v49 = *v48 - 48;
          if (v49 > 9)
            break;
          v50 = 10 * v35;
          if ((unsigned __int128)(v35 * (__int128)10) >> 64 != (10 * v35) >> 63)
            break;
          v35 = v50 - v49;
          if (__OFSUB__(v50, v49))
            break;
          v37 = 0;
          ++v48;
          if (!--v46)
            goto LABEL_48;
        }
      }
    }
LABEL_35:
    v35 = 0;
    v37 = 1;
    goto LABEL_48;
  }
  __break(1u);
LABEL_97:
  __break(1u);
  return result;
}

unint64_t sub_1CC9FC5D0()
{
  unint64_t result;

  result = qword_1ED8A7438;
  if (!qword_1ED8A7438)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB76A14, &type metadata for FMIPPlaySoundMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7438);
  }
  return result;
}

FMIPCore::FMIPActionStatus_optional __swiftcall FMIPActionStatus.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;

  if (rawValue > 500)
  {
    if (rawValue > 2203)
    {
      switch(rawValue)
      {
        case 2204:
          *v1 = 15;
          return (FMIPCore::FMIPActionStatus_optional)rawValue;
        case 2403:
          *v1 = 16;
          return (FMIPCore::FMIPActionStatus_optional)rawValue;
        case 2406:
          *v1 = 17;
          return (FMIPCore::FMIPActionStatus_optional)rawValue;
      }
    }
    else
    {
      switch(rawValue)
      {
        case 501:
          *v1 = 12;
          return (FMIPCore::FMIPActionStatus_optional)rawValue;
        case 2200:
          *v1 = 13;
          return (FMIPCore::FMIPActionStatus_optional)rawValue;
        case 2201:
          *v1 = 14;
          return (FMIPCore::FMIPActionStatus_optional)rawValue;
      }
    }
LABEL_16:
    *v1 = 18;
    return (FMIPCore::FMIPActionStatus_optional)rawValue;
  }
  switch(rawValue)
  {
    case 200:
      *v1 = 2;
      return (FMIPCore::FMIPActionStatus_optional)rawValue;
    case 201:
    case 202:
    case 204:
    case 210:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
      goto LABEL_16;
    case 203:
      *v1 = 3;
      return (FMIPCore::FMIPActionStatus_optional)rawValue;
    case 205:
      *v1 = 4;
      return (FMIPCore::FMIPActionStatus_optional)rawValue;
    case 206:
      *v1 = 5;
      return (FMIPCore::FMIPActionStatus_optional)rawValue;
    case 207:
      *v1 = 6;
      return (FMIPCore::FMIPActionStatus_optional)rawValue;
    case 208:
      *v1 = 7;
      return (FMIPCore::FMIPActionStatus_optional)rawValue;
    case 209:
      *v1 = 8;
      return (FMIPCore::FMIPActionStatus_optional)rawValue;
    case 211:
      *v1 = 9;
      return (FMIPCore::FMIPActionStatus_optional)rawValue;
    case 220:
      *v1 = 11;
      return (FMIPCore::FMIPActionStatus_optional)rawValue;
    case 230:
      *v1 = 10;
      return (FMIPCore::FMIPActionStatus_optional)rawValue;
    default:
      if (rawValue == -1)
      {
        *v1 = 0;
      }
      else
      {
        if (rawValue)
          goto LABEL_16;
        *v1 = 1;
      }
      break;
  }
  return (FMIPCore::FMIPActionStatus_optional)rawValue;
}

uint64_t sub_1CC9FC764(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPPlaySoundMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t FMIPPlaySoundMetadata.debugDescription.getter()
{
  void *v0;
  void *v1;
  id v2;

  v0 = (void *)objc_opt_self();
  type metadata accessor for FMIPPlaySoundMetadata();
  v1 = (void *)sub_1CCB63538();
  v2 = objc_msgSend(v0, sel_localizedStringFromDate_dateStyle_timeStyle_, v1, 1, 4);

  sub_1CCB63988();
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  FMIPActionStatus.description.getter();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  return 0xD000000000000020;
}

void FMIPActionStatus.description.getter()
{
  __asm { BR              X10 }
}

unint64_t sub_1CC9FC9C4()
{
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return 0xD000000000000011;
}

uint64_t sub_1CC9FCED0(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  void *v48;
  int v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int8 v66;
  _BYTE v67[24];
  _QWORD v68[3];
  uint64_t v69;
  __int128 v70;
  char v71[288];
  _BYTE v72[296];

  v52 = a2;
  v3 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v3);
  v51 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9E21F8);
  MEMORY[0x1E0C80A78](v5);
  v56 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v7);
  v55 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63604();
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  MEMORY[0x1E0C80A78](v12);
  v57 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FMIPDevice();
  v60 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v54 = (uint64_t)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v53 = (uint64_t)&v47 - v18;
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v47 - v19;
  v21 = sub_1CCA14E90(&qword_1ED8A7EE0);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v59 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1CCA14E90(&qword_1ED8A7EE8);
  v25 = MEMORY[0x1E0C80A78](v24);
  v27 = (unint64_t *)((char *)&v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v25);
  v29 = (unint64_t *)((char *)&v47 - v28);
  v65 = *(_QWORD *)(a1 + 16);
  v50 = v20 + 304;
  result = swift_bridgeObjectRetain_n();
  v31 = 0;
  v61 = a1;
  v58 = a1;
  while (v31 == v65)
  {
    v32 = 1;
    v31 = v65;
LABEL_7:
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v27, v32, 1, v21);
    sub_1CC9C3EC0((uint64_t)v27, (uint64_t)v29, &qword_1ED8A7EE8);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v22 + 48))(v29, 1, v21) == 1)
    {
      swift_bridgeObjectRelease();
      return v58;
    }
    v64 = *v29;
    sub_1CC9FED60((uint64_t)v29 + *(int *)(v21 + 48), (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (*((_QWORD *)v20 + 3))
    {
      v35 = v11;
      swift_bridgeObjectRetain();
      sub_1CCB635BC();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v11, 1, v63) == 1)
      {
        sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        result = sub_1CC9C3E84((uint64_t)v11, &qword_1ED8A8EF8);
      }
      else
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v57, v11, v63);
        v36 = v52;
        if (*(_QWORD *)(v52 + 16) && (v37 = sub_1CCAC8D64(v57), (v38 & 1) != 0))
          v49 = *(unsigned __int8 *)(*(_QWORD *)(v36 + 56) + v37);
        else
          v49 = 0;
        sub_1CCA0BEEC((uint64_t)v20, v54, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v48 = (void *)*((_QWORD *)v20 + 31);
        sub_1CC9C3EC0((uint64_t)v50, (uint64_t)v72, &qword_1ED8A71C0);
        sub_1CC9C3EC0((uint64_t)v72, (uint64_t)v71, &qword_1ED8A71C0);
        v69 = *((_QWORD *)v20 + 35);
        v47 = *((_OWORD *)v20 + 18);
        v70 = v47;
        memset(v68, 0, sizeof(v68));
        v39 = type metadata accessor for FMIPItemGroup();
        memset(v67, 0, sizeof(v67));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v55, 1, 1, v39);
        v66 = 7;
        v40 = type metadata accessor for FMIPDeviceConnectedState(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v56, 1, 1, v40);
        v41 = type metadata accessor for FMIPDeviceLostModeMetadata();
        v42 = (uint64_t)v51;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v51, 1, 1, v41);
        v43 = v48;
        swift_bridgeObjectRetain();
        sub_1CCA307F0((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
        v44 = (id)v47;
        FMIPDevice.init(device:historicalLocations:address:crowdSourcedLocation:location:shiftedLocation:crowdSourcedLocating:itemGroup:deviceWithYou:findingCapable:beaconType:deviceConnectedState:lostModeMetadata:)(v54, v43, v71, &v69, v68, (unsigned int (*)(char *, uint64_t, uint64_t))v67, 2, v55, v53, v49, 2, &v66, v56, v42);
        v45 = v58;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = sub_1CCAB6EFC(v45);
          v58 = result;
        }
        v46 = v57;
        if ((v64 & 0x8000000000000000) != 0)
          goto LABEL_22;
        if (v64 >= *(_QWORD *)(v58 + 16))
          goto LABEL_23;
        v11 = v35;
        sub_1CCABB698(v53, v58+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v64, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v46, v63);
        result = sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      }
    }
    else
    {
      result = sub_1CCA0BF30((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    }
  }
  if (v31 < v65)
  {
    v33 = (uint64_t)&v59[*(int *)(v21 + 48)];
    sub_1CCA0BEEC(v61+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v31, v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v34 = (uint64_t)v27 + *(int *)(v21 + 48);
    *v27 = v31;
    sub_1CC9FED60(v33, v34, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v32 = 0;
    ++v31;
    goto LABEL_7;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1CC9FD538(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t result;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __int16 v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  unsigned __int8 v77;
  _BYTE v78[24];
  _QWORD v79[3];
  uint64_t v80[3];
  char v81[288];
  _OWORD v82[19];

  v2 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v2);
  v61 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CCA14E90(&qword_1EF9E21F8);
  MEMORY[0x1E0C80A78](v4);
  v60 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1ED8A8C30);
  v7 = MEMORY[0x1E0C80A78](v6);
  v59 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v57 - v9;
  v70 = type metadata accessor for FMIPItemGroup();
  v11 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70);
  v63 = (uint64_t)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FMIPDevice();
  v66 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v58 = (uint64_t)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v62 = (uint64_t)&v57 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v57 - v18;
  v20 = sub_1CCA14E90(&qword_1ED8A7EE0);
  v73 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v65 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1CCA14E90(&qword_1ED8A7EE8);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v27 = (unint64_t *)((char *)&v57 - v26);
  v74 = *(_QWORD *)(a1 + 16);
  result = swift_bridgeObjectRetain_n();
  v29 = 0;
  v75 = 0;
  v76 = v25;
  v67 = a1;
  v64 = a1;
  v71 = v10;
  v69 = v20;
  while (v29 == v74)
  {
    v30 = 1;
    v29 = v74;
LABEL_7:
    v34 = v73;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v73 + 56))(v25, v30, 1, v20);
    sub_1CC9C3EC0((uint64_t)v25, (uint64_t)v27, &qword_1ED8A7EE8);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v34 + 48))(v27, 1, v20) == 1)
    {
      swift_bridgeObjectRelease();
      return v64;
    }
    v35 = *v27;
    sub_1CC9FED60((uint64_t)v27 + *(int *)(v20 + 48), (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v36 = *((_QWORD *)v19 + 4);
    if (v36 == 0x72656E776FLL && *((_QWORD *)v19 + 5) == 0xE500000000000000
      || (v36 = sub_1CCB642A0(), (v36 & 1) != 0))
    {
      v68 = v35;
      v37 = *(_QWORD *)(v72 + 288);
      MEMORY[0x1E0C80A78](v36);
      v56 = v19;
      swift_bridgeObjectRetain();
      v38 = v75;
      v39 = sub_1CC9FDC10((uint64_t (*)(char *))sub_1CCABAF1C, (uint64_t)&v55, v37);
      v75 = v38;
      if (*(_QWORD *)(v39 + 16))
      {
        v40 = (uint64_t)v71;
        sub_1CCA0BEEC(v39 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), (uint64_t)v71, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
        v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
        v42 = v40;
        v43 = 0;
      }
      else
      {
        v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
        v40 = (uint64_t)v71;
        v42 = (uint64_t)v71;
        v43 = 1;
      }
      v44 = v11;
      v45 = v70;
      v41(v42, v43, 1, v70);
      swift_bridgeObjectRelease();
      v46 = v44;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v40, 1, v45) == 1)
      {
        sub_1CCA0BF30((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        result = sub_1CC9C3E84(v40, &qword_1ED8A8C30);
        v11 = v44;
        v20 = v69;
        v25 = v76;
      }
      else
      {
        v47 = v63;
        sub_1CC9FED60(v40, v63, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
        v48 = v58;
        sub_1CCA0BEEC((uint64_t)v19, v58, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        sub_1CCA30EF4(v82);
        sub_1CC9C3EC0((uint64_t)v82, (uint64_t)v81, &qword_1ED8A71C0);
        memset(v80, 0, sizeof(v80));
        memset(v79, 0, sizeof(v79));
        memset(v78, 0, sizeof(v78));
        v49 = v59;
        sub_1CCA0BEEC(v47, v59, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
        v41(v49, 0, 1, v45);
        v77 = 7;
        v50 = type metadata accessor for FMIPDeviceConnectedState(0);
        v51 = (uint64_t)v60;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v60, 1, 1, v50);
        v52 = type metadata accessor for FMIPDeviceLostModeMetadata();
        v53 = (uint64_t)v61;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v61, 1, 1, v52);
        FMIPDevice.init(device:historicalLocations:address:crowdSourcedLocation:location:shiftedLocation:crowdSourcedLocating:itemGroup:deviceWithYou:findingCapable:beaconType:deviceConnectedState:lostModeMetadata:)(v48, 0, v81, v80, v79, (unsigned int (*)(char *, uint64_t, uint64_t))v78, 2, v49, v62, 2u, 2, &v77, v51, v53);
        v54 = v64;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = sub_1CCAB6EFC(v54);
          v64 = result;
        }
        v11 = v46;
        v20 = v69;
        v25 = v76;
        if ((v68 & 0x8000000000000000) != 0)
          goto LABEL_23;
        if (v68 >= *(_QWORD *)(v64 + 16))
          goto LABEL_24;
        sub_1CCABB698(v62, v64+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v68, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        sub_1CCA0BF30(v63, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
        result = sub_1CCA0BF30((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      }
    }
    else
    {
      result = sub_1CCA0BF30((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    }
  }
  if (v29 < v74)
  {
    v31 = (uint64_t)&v65[*(int *)(v20 + 48)];
    sub_1CCA0BEEC(v67+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v29, v31, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v32 = (uint64_t)&v76[*(int *)(v20 + 48)];
    *(_QWORD *)v76 = v29;
    v33 = v31;
    v25 = v76;
    sub_1CC9FED60(v33, v32, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v30 = 0;
    ++v29;
    goto LABEL_7;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1CC9FDC10(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = type metadata accessor for FMIPItemGroup();
  v24 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v20 - v11;
  v13 = MEMORY[0x1E0DEE9D8];
  v25 = MEMORY[0x1E0DEE9D8];
  v22 = *(_QWORD *)(a3 + 16);
  if (v22)
  {
    v14 = 0;
    v15 = MEMORY[0x1E0DEE9D8];
    v20[1] = a2;
    v21 = a3;
    v20[0] = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v13 = *(_QWORD *)(v24 + 72);
      sub_1CCA0BEEC(a3 + v16 + v13 * v14, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      v17 = a1(v12);
      if (v3)
      {
        sub_1CCA0BF30((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
        swift_release();
        swift_bridgeObjectRelease();
        return v13;
      }
      if ((v17 & 1) != 0)
      {
        sub_1CC9FED60((uint64_t)v12, v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1CCA63A58(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v25;
        v19 = *(_QWORD *)(v25 + 16);
        v18 = *(_QWORD *)(v25 + 24);
        if (v19 >= v18 >> 1)
        {
          sub_1CCA63A58(v18 > 1, v19 + 1, 1);
          v15 = v25;
        }
        *(_QWORD *)(v15 + 16) = v19 + 1;
        result = sub_1CC9FED60(v23, v15 + v16 + v19 * v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        result = sub_1CCA0BF30((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      }
      if (v22 == ++v14)
      {
        v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t sub_1CC9FDE28(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t result;
  unint64_t v28;
  unint64_t i;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unsigned __int8 *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int8 v74;
  _BYTE v75[24];
  _QWORD v76[3];
  uint64_t v77[3];
  char v78[288];
  _BYTE v79[296];

  v4 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v4);
  v63 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1EF9E21F8);
  MEMORY[0x1E0C80A78](v6);
  v62 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v8);
  v66 = (uint64_t)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FMIPDevice();
  v70 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v65 = (uint64_t)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v64 = (uint64_t)&v57 - v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (uint64_t *)((char *)&v57 - v15);
  v17 = sub_1CCA14E90(&qword_1ED8A7EE0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v68 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1CCA14E90(&qword_1ED8A7EE8);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (unint64_t *)((char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v21);
  v25 = (unint64_t *)((char *)&v57 - v24);
  v26 = *(_QWORD *)(a1 + 16);
  v61 = v16 + 38;
  result = swift_bridgeObjectRetain_n();
  v28 = 0;
  v71 = a1;
  v72 = v26;
  v67 = a1;
  i = v26;
  v69 = v18;
  v30 = v26 == 0;
  if (!v26)
    goto LABEL_7;
LABEL_2:
  if (!v30)
  {
    v31 = (uint64_t)&v68[*(int *)(v17 + 48)];
    sub_1CCA0BEEC(v71+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(_QWORD *)(v70 + 72) * v28, v31, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v32 = (uint64_t)v23 + *(int *)(v17 + 48);
    *v23 = v28;
    v18 = v69;
    sub_1CC9FED60(v31, v32, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v33 = 0;
    ++v28;
    for (i = v72; ; v28 = i)
    {
      (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v23, v33, 1, v17);
      sub_1CC9C3EC0((uint64_t)v23, (uint64_t)v25, &qword_1ED8A7EE8);
      if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v18 + 48))(v25, 1, v17) == 1)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        return v67;
      }
      v73 = *v25;
      sub_1CC9FED60((uint64_t)v25 + *(int *)(v17 + 48), (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v35 = v16[3];
      if (!v35 || !*(_QWORD *)(a2 + 16))
        goto LABEL_5;
      v36 = v16[2];
      swift_bridgeObjectRetain();
      v37 = sub_1CCA074F4(v36, v35);
      if ((v38 & 1) == 0)
        break;
      v39 = (unsigned __int8 *)(*(_QWORD *)(a2 + 56) + 24 * v37);
      v40 = *v39;
      v41 = v39[1];
      v42 = v39[2];
      v43 = v39[3];
      v44 = (void *)*((_QWORD *)v39 + 1);
      v58 = *((_QWORD *)v39 + 2);
      v45 = 256;
      if (!v41)
        v45 = 0;
      v46 = v45 | v40;
      v47 = 0x10000;
      if (!v42)
        v47 = 0;
      v57 = v46 | v47 | (v43 << 24);
      v60 = v44;
      swift_bridgeObjectRelease();
      sub_1CCA0BEEC((uint64_t)v16, v65, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v59 = (void *)v16[31];
      sub_1CC9C3EC0((uint64_t)v61, (uint64_t)v79, &qword_1ED8A71C0);
      sub_1CC9C3EC0((uint64_t)v79, (uint64_t)v78, &qword_1ED8A71C0);
      v77[0] = v57;
      v77[1] = (uint64_t)v44;
      v77[2] = v58;
      memset(v76, 0, sizeof(v76));
      v48 = type metadata accessor for FMIPItemGroup();
      memset(v75, 0, sizeof(v75));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v66, 1, 1, v48);
      v74 = 7;
      v49 = type metadata accessor for FMIPDeviceConnectedState(0);
      v50 = (uint64_t)v62;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v62, 1, 1, v49);
      v51 = type metadata accessor for FMIPDeviceLostModeMetadata();
      v52 = (uint64_t)v63;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v63, 1, 1, v51);
      v53 = v59;
      swift_bridgeObjectRetain();
      v60 = v60;
      sub_1CCA307F0((uint64_t)v79, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
      FMIPDevice.init(device:historicalLocations:address:crowdSourcedLocation:location:shiftedLocation:crowdSourcedLocating:itemGroup:deviceWithYou:findingCapable:beaconType:deviceConnectedState:lostModeMetadata:)(v65, v53, v78, v77, v76, (unsigned int (*)(char *, uint64_t, uint64_t))v75, 2, v66, v64, 2u, 2, &v74, v50, v52);
      v54 = v67;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) != 0)
      {
        i = v72;
        v55 = v73;
        if ((v73 & 0x8000000000000000) != 0)
          goto LABEL_21;
      }
      else
      {
        result = sub_1CCAB6EFC(v54);
        v54 = result;
        i = v72;
        v55 = v73;
        if ((v73 & 0x8000000000000000) != 0)
        {
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
      }
      if (v55 >= *(_QWORD *)(v54 + 16))
        goto LABEL_24;
      v56 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
      v67 = v54;
      sub_1CCABB698(v64, v54 + v56 + *(_QWORD *)(v70 + 72) * v55, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);

      v34 = (uint64_t)v16;
      v18 = v69;
LABEL_6:
      result = sub_1CCA0BF30(v34, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v30 = v28 >= i;
      if (v28 != i)
        goto LABEL_2;
LABEL_7:
      v33 = 1;
    }
    swift_bridgeObjectRelease();
    i = v72;
LABEL_5:
    v34 = (uint64_t)v16;
    goto LABEL_6;
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPDevice()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CC9FE3E4(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t result;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t *v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  __int128 v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  char *v110;
  unsigned __int8 v111;
  _BYTE v112[24];
  _QWORD v113[3];
  uint64_t v114[3];
  char v115[288];
  uint64_t v116[37];

  v107 = a2;
  v3 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v3);
  v88 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9E21F8);
  MEMORY[0x1E0C80A78](v5);
  v87 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v7);
  v86 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FMIPDevice();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v85 = (uint64_t)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v89 = (uint64_t)&v83 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v83 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v93 = (uint64_t *)((char *)&v83 - v19);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (uint64_t *)((char *)&v83 - v21);
  v23 = MEMORY[0x1E0C80A78](v20);
  v92 = (uint64_t)&v83 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v101 = (uint64_t)&v83 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v29 = (uint64_t *)((char *)&v83 - v28);
  MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v83 - v30;
  v32 = sub_1CCA14E90(&qword_1ED8A7EE0);
  v105 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v99 = (char *)&v83 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_1CCA14E90(&qword_1ED8A7EE8);
  v35 = MEMORY[0x1E0C80A78](v34);
  v37 = (char *)&v83 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35);
  v104 = (unint64_t *)((char *)&v83 - v38);
  v106 = *(_QWORD *)(a1 + 16);
  v84 = v31 + 304;
  result = swift_bridgeObjectRetain_n();
  v40 = 0;
  *(_QWORD *)&v41 = 136315138;
  v97 = v41;
  v94 = v17;
  v95 = MEMORY[0x1E0DEE9B8] + 8;
  v100 = a1;
  v90 = a1;
  v102 = v32;
  v103 = v10;
  v108 = v29;
  v110 = v37;
  while (v40 == v106)
  {
    v42 = 1;
    v109 = v106;
LABEL_7:
    v47 = v105;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v105 + 56))(v37, v42, 1, v32);
    v48 = v104;
    sub_1CC9C3EC0((uint64_t)v37, (uint64_t)v104, &qword_1ED8A7EE8);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v47 + 48))(v48, 1, v32) == 1)
    {
      swift_bridgeObjectRelease();
      return v90;
    }
    v49 = *v48;
    sub_1CC9FED60((uint64_t)v48 + *(int *)(v32 + 48), (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if ((v31[216] & 2) != 0)
    {
      if (qword_1ED8AA630 != -1)
        swift_once();
      v50 = sub_1CCB637FC();
      sub_1CCA16C20(v50, (uint64_t)qword_1ED8AD7F8);
      sub_1CCA0BEEC((uint64_t)v31, (uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v51 = sub_1CCB637D8();
      v52 = sub_1CCB63D48();
      v53 = os_log_type_enabled(v51, v52);
      v98 = v49;
      if (v53)
      {
        v54 = swift_slowAlloc();
        v55 = swift_slowAlloc();
        v116[0] = v55;
        *(_DWORD *)v54 = v97;
        v56 = *v108;
        v57 = v108[1];
        swift_bridgeObjectRetain();
        *(_QWORD *)(v54 + 4) = sub_1CCA0CB60(v56, v57, v116);
        swift_bridgeObjectRelease();
        sub_1CCA0BF30((uint64_t)v108, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        _os_log_impl(&dword_1CC9BF000, v51, v52, "FMIPDataManager: Trying to preserve historical locations for device %s", (uint8_t *)v54, 0xCu);
        swift_arrayDestroy();
        v58 = v55;
        v29 = v108;
        MEMORY[0x1D17B214C](v58, -1, -1);
        MEMORY[0x1D17B214C](v54, -1, -1);
      }
      else
      {
        sub_1CCA0BF30((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      }

      v59 = *(_QWORD *)(v107 + 16);
      v32 = v102;
      if (v59)
      {
        v60 = v103;
        v96 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
        v61 = v107 + v96;
        swift_bridgeObjectRetain();
        v62 = *(_QWORD *)(v60 + 72);
        while (1)
        {
          sub_1CCA0BEEC(v61, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
          v63 = *v22 == *(_QWORD *)v31 && v22[1] == *((_QWORD *)v31 + 1);
          if (v63 || (sub_1CCB642A0() & 1) != 0)
            break;
          sub_1CCA0BF30((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
          v61 += v62;
          if (!--v59)
          {
            swift_bridgeObjectRelease();
            v29 = v108;
            v32 = v102;
            goto LABEL_30;
          }
        }
        swift_bridgeObjectRelease();
        v64 = v92;
        sub_1CC9FED60((uint64_t)v22, v92, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        sub_1CC9FED60(v64, v101, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v65 = v93;
        sub_1CCA0BEEC((uint64_t)v31, (uint64_t)v93, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v66 = sub_1CCB637D8();
        v67 = sub_1CCB63D48();
        if (os_log_type_enabled(v66, v67))
        {
          v68 = swift_slowAlloc();
          v91 = swift_slowAlloc();
          v116[0] = v91;
          *(_DWORD *)v68 = v97;
          v69 = *v65;
          v70 = v65[1];
          swift_bridgeObjectRetain();
          *(_QWORD *)(v68 + 4) = sub_1CCA0CB60(v69, v70, v116);
          swift_bridgeObjectRelease();
          sub_1CCA0BF30((uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
          _os_log_impl(&dword_1CC9BF000, v66, v67, "FMIPDataManager: Preserving historical locations for device %s", (uint8_t *)v68, 0xCu);
          v71 = v91;
          swift_arrayDestroy();
          MEMORY[0x1D17B214C](v71, -1, -1);
          MEMORY[0x1D17B214C](v68, -1, -1);
        }
        else
        {
          sub_1CCA0BF30((uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        }

        v32 = v102;
        v72 = *((_QWORD *)v31 + 31);
        v73 = (uint64_t)v94;
        sub_1CCA0BEEC(v101, (uint64_t)v94, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        if (v72)
        {
          sub_1CCA0BF30(v73, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_29:
          sub_1CCA0BF30(v101, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
          v29 = v108;
          goto LABEL_30;
        }
        v74 = *(_QWORD *)(v73 + 248);
        sub_1CCA0BF30(v73, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        if (!v74)
          goto LABEL_29;
        v75 = v85;
        sub_1CCA0BEEC((uint64_t)v31, v85, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v76 = *(void **)(v101 + 248);
        sub_1CC9C3EC0((uint64_t)v84, (uint64_t)v116, &qword_1ED8A71C0);
        sub_1CC9C3EC0((uint64_t)v116, (uint64_t)v115, &qword_1ED8A71C0);
        memset(v114, 0, sizeof(v114));
        memset(v113, 0, sizeof(v113));
        v77 = type metadata accessor for FMIPItemGroup();
        memset(v112, 0, sizeof(v112));
        v78 = (uint64_t)v86;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v86, 1, 1, v77);
        v111 = 7;
        v79 = type metadata accessor for FMIPDeviceConnectedState(0);
        v80 = (uint64_t)v87;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v87, 1, 1, v79);
        v81 = type metadata accessor for FMIPDeviceLostModeMetadata();
        v82 = (uint64_t)v88;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v88, 1, 1, v81);
        swift_bridgeObjectRetain();
        sub_1CCA307F0((uint64_t)v116, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
        FMIPDevice.init(device:historicalLocations:address:crowdSourcedLocation:location:shiftedLocation:crowdSourcedLocating:itemGroup:deviceWithYou:findingCapable:beaconType:deviceConnectedState:lostModeMetadata:)(v75, v76, v115, v114, v113, (unsigned int (*)(char *, uint64_t, uint64_t))v112, 2, v78, v89, 2u, 2, &v111, v80, v82);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = sub_1CCAB6EFC(v90);
          v90 = result;
        }
        v32 = v102;
        v37 = v110;
        if ((v98 & 0x8000000000000000) != 0)
          goto LABEL_38;
        if (v98 >= *(_QWORD *)(v90 + 16))
          goto LABEL_39;
        sub_1CCABB698(v89, v90 + v96 + v62 * v98, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        sub_1CCA0BF30(v101, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        result = sub_1CCA0BF30((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v29 = v108;
        v40 = v109;
      }
      else
      {
LABEL_30:
        result = sub_1CCA0BF30((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v40 = v109;
        v37 = v110;
      }
    }
    else
    {
      result = sub_1CCA0BF30((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v40 = v109;
    }
  }
  if (v40 < v106)
  {
    v43 = v40 + 1;
    v44 = v40;
    v45 = (uint64_t)&v99[*(int *)(v32 + 48)];
    sub_1CCA0BEEC(v100+ ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80))+ *(_QWORD *)(v103 + 72) * v40, v45, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v46 = (uint64_t)&v110[*(int *)(v32 + 48)];
    *(_QWORD *)v110 = v44;
    sub_1CC9FED60(v45, v46, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v42 = 0;
    v109 = v43;
    v37 = v110;
    goto LABEL_7;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1CC9FED60(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_QWORD *sub_1CC9FEDA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  const char *v24;
  uint64_t v25;
  _BYTE v28[24];
  uint64_t v29;

  v5 = v4;
  v10 = sub_1CCB63604();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = &v28[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1CCB635F8();
  v14 = sub_1CCB635C8();
  v16 = v15;
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  v5[2] = v14;
  v5[3] = v16;
  v5[5] = 0;
  type metadata accessor for FMIPDeviceActionsController.CommandFutures();
  v17 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v17 + 112) = MEMORY[0x1E0DEE9D8];
  v5[21] = v17;
  v5[4] = a1;
  sub_1CC9EBC94(a2, (uint64_t)(v5 + 6));
  sub_1CC9EAB74(a3, (uint64_t)(v5 + 11), &qword_1ED8A9DE8);
  sub_1CC9EAB74(a4, (uint64_t)(v5 + 16), &qword_1ED8A7AB8);
  sub_1CC9EAB74((uint64_t)(v5 + 16), (uint64_t)v28, &qword_1ED8A7AB8);
  v18 = v29;
  v19 = a1;
  sub_1CC9C3E84((uint64_t)v28, &qword_1ED8A7AB8);
  if (v18)
  {
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v20 = sub_1CCB637FC();
    sub_1CCA16C20(v20, (uint64_t)qword_1EF9FF4C0);
    v21 = sub_1CCB637D8();
    v22 = sub_1CCB63D48();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      v24 = "FMIPDeviceActionsController: initialized for testing";
LABEL_10:
      _os_log_impl(&dword_1CC9BF000, v21, v22, v24, v23, 2u);
      MEMORY[0x1D17B214C](v23, -1, -1);
    }
  }
  else
  {
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v25 = sub_1CCB637FC();
    sub_1CCA16C20(v25, (uint64_t)qword_1EF9FF4C0);
    v21 = sub_1CCB637D8();
    v22 = sub_1CCB63D48();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      v24 = "FMIPDeviceActionsController: initialized";
      goto LABEL_10;
    }
  }

  sub_1CC9C3E84(a4, &qword_1ED8A7AB8);
  sub_1CC9C3E84(a3, &qword_1ED8A9DE8);
  sub_1CCA01CA0(a2);
  return v5;
}

_QWORD *static FMIPDeviceImageCacheRequest.allRequests(for:scale:)(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;

  v4 = type metadata accessor for FMIPDevice();
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(int *)(v4 + 128);
  v54 = a1;
  sub_1CC9EAB74(a1 + v10, (uint64_t)v9, &qword_1ED8A8C30);
  v11 = type metadata accessor for FMIPItemGroup();
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11);
  sub_1CC9C3E84((uint64_t)v9, &qword_1ED8A8C30);
  if ((_DWORD)v4 == 1)
  {
    v12 = 0;
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v14 = byte_1E88EF1C0[v12 + 32];
      v52 = 0;
      v53 = v14;
      sub_1CCA0BEEC(v54, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v15 = v6[13];
      v16 = v6[14];
      v18 = v6[17];
      v17 = v6[18];
      v19 = v6[12];
      v51 = v6[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CCA0BF30((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_1CC9FF50C(0, v13[2] + 1, 1, v13);
      v21 = v13[2];
      v20 = v13[3];
      if (v21 >= v20 >> 1)
        v13 = sub_1CC9FF50C((_QWORD *)(v20 > 1), v21 + 1, 1, v13);
      v13[2] = v21 + 1;
      v22 = &v13[8 * v21];
      v22[4] = v15;
      v22[5] = v16;
      v22[6] = v18;
      v22[7] = v17;
      v22[8] = v51;
      v22[9] = v19;
      *((_BYTE *)v22 + 80) = v52;
      *((_BYTE *)v22 + 81) = v53;
      *((double *)v22 + 11) = a2;
      v52 = 1;
      sub_1CCA0BEEC(v54, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v23 = v6[13];
      v24 = v6[14];
      v26 = v6[17];
      v25 = v6[18];
      v27 = v6[12];
      v51 = v6[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CCA0BF30((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v29 = v13[2];
      v28 = v13[3];
      if (v29 >= v28 >> 1)
        v13 = sub_1CC9FF50C((_QWORD *)(v28 > 1), v29 + 1, 1, v13);
      ++v12;
      v13[2] = v29 + 1;
      v30 = &v13[8 * v29];
      v30[4] = v23;
      v30[5] = v24;
      v30[6] = v26;
      v30[7] = v25;
      v30[8] = v51;
      v30[9] = v27;
      *((_BYTE *)v30 + 80) = v52;
      *((_BYTE *)v30 + 81) = v53;
      *((double *)v30 + 11) = a2;
    }
    while (v12 != 3);
  }
  else
  {
    v31 = 0;
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v32 = byte_1E88EF170[v31 + 32];
      v52 = 0;
      v53 = v32;
      sub_1CCA0BEEC(v54, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v33 = v6[13];
      v34 = v6[14];
      v36 = v6[17];
      v35 = v6[18];
      v37 = v6[12];
      v51 = v6[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CCA0BF30((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_1CC9FF50C(0, v13[2] + 1, 1, v13);
      v39 = v13[2];
      v38 = v13[3];
      if (v39 >= v38 >> 1)
        v13 = sub_1CC9FF50C((_QWORD *)(v38 > 1), v39 + 1, 1, v13);
      v13[2] = v39 + 1;
      v40 = &v13[8 * v39];
      v40[4] = v33;
      v40[5] = v34;
      v40[6] = v36;
      v40[7] = v35;
      v40[8] = v51;
      v40[9] = v37;
      *((_BYTE *)v40 + 80) = v52;
      *((_BYTE *)v40 + 81) = v53;
      *((double *)v40 + 11) = a2;
      v52 = 1;
      sub_1CCA0BEEC(v54, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v41 = v6[13];
      v42 = v6[14];
      v44 = v6[17];
      v43 = v6[18];
      v45 = v6[12];
      v51 = v6[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CCA0BF30((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v47 = v13[2];
      v46 = v13[3];
      if (v47 >= v46 >> 1)
        v13 = sub_1CC9FF50C((_QWORD *)(v46 > 1), v47 + 1, 1, v13);
      ++v31;
      v13[2] = v47 + 1;
      v48 = &v13[8 * v47];
      v48[4] = v41;
      v48[5] = v42;
      v48[6] = v44;
      v48[7] = v43;
      v48[8] = v51;
      v48[9] = v45;
      *((_BYTE *)v48 + 80) = v52;
      *((_BYTE *)v48 + 81) = v53;
      *((double *)v48 + 11) = a2;
    }
    while (v31 != 6);
  }
  return v13;
}

_QWORD *sub_1CC9FF50C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1CCA14E90(&qword_1EF9E3438);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CC9FF618(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CC9FF618(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CC9FF708(_QWORD *a1)
{
  return FMIPDevice.encode(to:)(a1);
}

uint64_t FMIPDevice.encode(to:)(_QWORD *a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v27[12];
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;

  v2 = v1;
  v4 = sub_1CCA14E90(&qword_1ED8A7130);
  v5 = MEMORY[0x1E0C80A78](v4);
  v27[7] = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v27[9] = (char *)v27 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v27[8] = (char *)v27 - v10;
  MEMORY[0x1E0C80A78](v9);
  v27[11] = (char *)v27 - v11;
  v28 = sub_1CCB635B0();
  v27[10] = *(_QWORD *)(v28 - 8);
  v12 = MEMORY[0x1E0C80A78](v28);
  v27[6] = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v27[5] = (char *)v27 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v27[4] = (char *)v27 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v27 - v18;
  v20 = sub_1CCA14E90(&qword_1ED8A7FA0);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA155B8();
  sub_1CCB643CC();
  v29 = v2;
  LOBYTE(v32) = 14;
  v33 = v20;
  v24 = v30;
  sub_1CCB641E0();
  if (!v24)
  {
    v27[3] = v19;
    v30 = v21;
    v32 = v29[1];
    v31 = 4;
    sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
    v25 = sub_1CCA008E8();
    sub_1CCB64210();
    v27[2] = v25;
    LOBYTE(v32) = 39;
    sub_1CCB641E0();
    v32 = v29[3];
    v31 = 12;
    sub_1CCB64210();
    LOBYTE(v32) = 38;
    sub_1CCB641E0();
    LOBYTE(v32) = 46;
    sub_1CCB641E0();
    swift_bridgeObjectRelease();
    v32 = *(_OWORD *)((char *)v29 + 88);
    v31 = 10;
    sub_1CCB64210();
    LOBYTE(v32) = 9;
    sub_1CCB641E0();
    LOBYTE(v32) = 36;
    sub_1CCB641E0();
    LOBYTE(v32) = 41;
    sub_1CCB641E0();
    LOBYTE(v32) = 37;
    v27[1] = v23;
    sub_1CCB641E0();
    LOBYTE(v32) = 11;
    sub_1CCB641E0();
    LOBYTE(v32) = 2;
    sub_1CCB641F8();
    __asm { BR              X10 }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v33);
}

void sub_1CC9FFC54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;

  *(_BYTE *)(v0 + 416) = 3;
  sub_1CCB641E0();
  if (v2)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 8), *(_QWORD *)(v3 - 72));
    JUMPOUT(0x1CC9FFAB8);
  }
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 416) = 40;
  sub_1CCB64204();
  *(_BYTE *)(v0 + 416) = 33;
  sub_1CCB64204();
  v4 = (int *)type metadata accessor for FMIPDevice();
  v5 = *(_QWORD *)(v0 + 88);
  sub_1CC9EAB74(*(_QWORD *)(v0 + 104) + v4[38], v5, &qword_1ED8A7130);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 48);
  if (v6(v5, 1, *(_QWORD *)(v0 + 96)) == 1)
  {
    sub_1CC9C3E84(*(_QWORD *)(v0 + 88), &qword_1ED8A7130);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 32))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
    sub_1CCB63568();
    *(_BYTE *)(v0 + 416) = 32;
    sub_1CCB641F8();
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 96));
  }
  v7 = *(_QWORD *)(v0 + 64);
  sub_1CC9EAB74(*(_QWORD *)(v0 + 104) + v4[39], v7, &qword_1ED8A7130);
  if (v6(v7, 1, *(_QWORD *)(v0 + 96)) == 1)
  {
    sub_1CC9C3E84(*(_QWORD *)(v0 + 64), &qword_1ED8A7130);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 32))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 96));
    sub_1CCB63568();
    *(_BYTE *)(v0 + 416) = 30;
    sub_1CCB641F8();
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 96));
  }
  v8 = *(_QWORD *)(v0 + 72);
  sub_1CC9EAB74(*(_QWORD *)(v0 + 104) + v4[40], v8, &qword_1ED8A7130);
  if (v6(v8, 1, *(_QWORD *)(v0 + 96)) == 1)
  {
    sub_1CC9C3E84(*(_QWORD *)(v0 + 72), &qword_1ED8A7130);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 32))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 96));
    sub_1CCB63568();
    *(_BYTE *)(v0 + 416) = 48;
    sub_1CCB641F8();
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 96));
  }
  v9 = *(_QWORD *)(v0 + 56);
  sub_1CC9EAB74(*(_QWORD *)(v0 + 104) + v4[41], v9, &qword_1ED8A7130);
  if (v6(v9, 1, *(_QWORD *)(v0 + 96)) == 1)
  {
    sub_1CC9C3E84(*(_QWORD *)(v0 + 56), &qword_1ED8A7130);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 32))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 96));
    sub_1CCB63568();
    *(_BYTE *)(v0 + 416) = 53;
    sub_1CCB641F8();
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 96));
  }
  *(_BYTE *)(v0 + 416) = 51;
  sub_1CCB64204();
  *(_BYTE *)(v0 + 416) = 8;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 416) = 5;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 416) = 7;
  sub_1CCB641EC();
  *(_QWORD *)v1 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 232);
  *(_BYTE *)(v0 + 128) = 1;
  sub_1CCA14E90(&qword_1ED8A7E98);
  sub_1CCA1552C(&qword_1ED8A7EA0, &qword_1ED8A7E98, (uint64_t (*)(void))sub_1CCA229F4, MEMORY[0x1E0DEAF10]);
  sub_1CCB64210();
  *(_QWORD *)v1 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 248);
  *(_BYTE *)(v0 + 128) = 47;
  sub_1CCA14E90(&qword_1ED8A7EC8);
  sub_1CCA1552C((unint64_t *)&unk_1ED8A7ED0, &qword_1ED8A7EC8, sub_1CCA1FB44, MEMORY[0x1E0DEE988]);
  sub_1CCB64210();
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v10 + 272);
  *(_OWORD *)v1 = *(_OWORD *)(v10 + 256);
  *(_QWORD *)(v1 + 16) = v11;
  *(_BYTE *)(v0 + 128) = 29;
  sub_1CCA14E90(&qword_1ED8A7220);
  sub_1CCA1552C(&qword_1ED8A7228, &qword_1ED8A7220, (uint64_t (*)(void))sub_1CCA23468, MEMORY[0x1E0DEE988]);
  sub_1CCB64210();
  v12 = *(_QWORD *)(v0 + 104);
  v13 = (_OWORD *)(v12 + 280);
  v14 = *(_QWORD *)(v12 + 296);
  *(_OWORD *)(v1 + 304) = *v13;
  *(_QWORD *)(v1 + 320) = v14;
  *(_BYTE *)(v3 - 129) = 6;
  sub_1CCB64210();
  sub_1CC9C3EC0(*(_QWORD *)(v0 + 104) + 304, v0 + 416, &qword_1ED8A71C0);
  sub_1CC9C3EC0(v0 + 416, v0 + 128, &qword_1ED8A71C0);
  *(_BYTE *)(v0 + 127) = 0;
  sub_1CCA14E90(&qword_1ED8A71C0);
  sub_1CCA1552C((unint64_t *)&qword_1ED8A71C8, &qword_1ED8A71C0, (uint64_t (*)(void))sub_1CCA243E4, MEMORY[0x1E0DEE988]);
  sub_1CCB64210();
  *(_QWORD *)(v0 + 128) = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 240);
  *(_BYTE *)(v0 + 127) = 13;
  sub_1CCA00A80();
  sub_1CCB64210();
  *(_BYTE *)(v0 + 128) = 45;
  sub_1CCA14E90(&qword_1ED8A7460);
  sub_1CCA00944();
  sub_1CCB64210();
  *(_BYTE *)(v0 + 128) = 31;
  sub_1CCA14E90(&qword_1ED8A7AA0);
  sub_1CCA00AC4();
  sub_1CCB64210();
  *(_BYTE *)(v0 + 128) = 42;
  sub_1CCA14E90(&qword_1ED8A73B8);
  sub_1CCA00BBC();
  sub_1CCB64210();
  *(_BYTE *)(v0 + 128) = 43;
  sub_1CCA14E90(&qword_1ED8A73F8);
  sub_1CCA00B40();
  sub_1CCB64210();
  *(_QWORD *)(v0 + 128) = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 224);
  *(_BYTE *)(v0 + 127) = 44;
  sub_1CCA14E90(&qword_1EF9E2930);
  sub_1CCA1552C(&qword_1EF9E29A0, &qword_1EF9E2930, (uint64_t (*)(void))sub_1CCA227BC, MEMORY[0x1E0DEAF10]);
  sub_1CCB64210();
  *(_BYTE *)(v0 + 128) = 28;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = 20;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = 15;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = 52;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = 21;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = 19;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = 23;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = 24;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = 25;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = 26;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = 16;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = 18;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = 22;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = 27;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = 57;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = 49;
  sub_1CCA14E90(&qword_1ED8A8C30);
  sub_1CCA00A04();
  sub_1CCB64210();
  *(_BYTE *)(v0 + 128) = 50;
  sub_1CCB641EC();
  *(_BYTE *)(v0 + 128) = *(_BYTE *)(*(_QWORD *)(v0 + 104) + v4[34]);
  *(_BYTE *)(v0 + 127) = 54;
  sub_1CCA009C0();
  sub_1CCB64210();
  *(_BYTE *)(v0 + 128) = *(_BYTE *)(*(_QWORD *)(v0 + 104) + v4[35]);
  *(_BYTE *)(v0 + 127) = 55;
  sub_1CCB2435C();
  sub_1CCB64210();
  *(_OWORD *)(v0 + 128) = *(_OWORD *)(*(_QWORD *)(v0 + 104) + v4[36]);
  *(_BYTE *)(v0 + 127) = 56;
  sub_1CCB64210();
  JUMPOUT(0x1CC9FFC10);
}

unint64_t sub_1CCA008E8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1ED8A7E78;
  if (!qword_1ED8A7E78)
  {
    v1 = sub_1CCA19B38((uint64_t *)&unk_1ED8AA328);
    v2 = MEMORY[0x1E0DEA970];
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1ED8A7E78);
  }
  return result;
}

unint64_t sub_1CCA00944()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1ED8A7470;
  if (!qword_1ED8A7470)
  {
    v1 = sub_1CCA19B38(&qword_1ED8A7460);
    v2 = sub_1CC9CAA38(&qword_1ED8A7450, (uint64_t (*)(uint64_t))type metadata accessor for FMIPPlaySoundMetadata, (uint64_t)&protocol conformance descriptor for FMIPPlaySoundMetadata);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1ED8A7470);
  }
  return result;
}

unint64_t sub_1CCA009C0()
{
  unint64_t result;

  result = qword_1EF9E5430;
  if (!qword_1EF9E5430)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPBeaconType, &type metadata for FMIPBeaconType);
    atomic_store(result, (unint64_t *)&qword_1EF9E5430);
  }
  return result;
}

unint64_t sub_1CCA00A04()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E5428;
  if (!qword_1EF9E5428)
  {
    v1 = sub_1CCA19B38(&qword_1ED8A8C30);
    v2 = sub_1CC9CAA38(&qword_1EF9E2A40, (uint64_t (*)(uint64_t))type metadata accessor for FMIPItemGroup, (uint64_t)&protocol conformance descriptor for FMIPItemGroup);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E5428);
  }
  return result;
}

unint64_t sub_1CCA00A80()
{
  unint64_t result;

  result = qword_1ED8A71E8;
  if (!qword_1ED8A71E8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPFeatures, &type metadata for FMIPFeatures);
    atomic_store(result, (unint64_t *)&qword_1ED8A71E8);
  }
  return result;
}

unint64_t sub_1CCA00AC4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1ED8A7AB0;
  if (!qword_1ED8A7AB0)
  {
    v1 = sub_1CCA19B38(&qword_1ED8A7AA0);
    v2 = sub_1CC9CAA38(&qword_1ED8A7A88, (uint64_t (*)(uint64_t))type metadata accessor for FMIPDeviceLostModeMetadata, (uint64_t)&protocol conformance descriptor for FMIPDeviceLostModeMetadata);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1ED8A7AB0);
  }
  return result;
}

unint64_t sub_1CCA00B40()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1ED8A7408[0];
  if (!qword_1ED8A7408[0])
  {
    v1 = sub_1CCA19B38(&qword_1ED8A73F8);
    v2 = sub_1CC9CAA38(&qword_1ED8A73E8, (uint64_t (*)(uint64_t))type metadata accessor for FMIPEraseMetadata, (uint64_t)&protocol conformance descriptor for FMIPEraseMetadata);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, qword_1ED8A7408);
  }
  return result;
}

unint64_t sub_1CCA00BBC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1ED8A73C8;
  if (!qword_1ED8A73C8)
  {
    v1 = sub_1CCA19B38(&qword_1ED8A73B8);
    v2 = sub_1CC9CAA38(&qword_1ED8A73A8, (uint64_t (*)(uint64_t))type metadata accessor for FMIPLockMetadata, (uint64_t)&protocol conformance descriptor for FMIPLockMetadata);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1ED8A73C8);
  }
  return result;
}

uint64_t sub_1CCA00C38(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void sub_1CCA00C64()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1CCA19B7C((v0 + v2), *(NSObject **)(v0 + v3), *(NSObject **)(v0 + v3 + 8));
}

void sub_1CCA00CB8()
{
  uint64_t *v0;

  sub_1CCA00CC4(v0[2], v0[3], v0[4]);
}

void sub_1CCA00CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t Strong;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[6];

  if (qword_1ED8AA630 != -1)
    swift_once();
  v5 = sub_1CCB637FC();
  sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
  v6 = sub_1CCB637D8();
  v7 = sub_1CCB63D48();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1CC9BF000, v6, v7, "FMIPBeaconRefreshingController: refreshing UT alert state", v8, 2u);
    MEMORY[0x1D17B214C](v8, -1, -1);
  }

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v10 = *(id *)(Strong + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession);
    swift_release();
    v11 = swift_allocObject();
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v11;
    v12[3] = a2;
    v12[4] = a3;
    v14[4] = sub_1CC9EDB90;
    v14[5] = v12;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1107296256;
    v14[2] = sub_1CC9EDB54;
    v14[3] = &unk_1E89018A8;
    v13 = _Block_copy(v14);
    sub_1CC9DF994(a2);
    swift_release();
    objc_msgSend(v10, sel_isUTAppAlertDisabled_, v13);
    _Block_release(v13);

  }
}

uint64_t sub_1CCA00ED4()
{
  uint64_t v0;

  return sub_1CCB44510(v0);
}

void sub_1CCA00EDC()
{
  uint64_t *v0;

  sub_1CCA00EE8(v0[2], v0[3], v0[4]);
}

void sub_1CCA00EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  double v14;
  void (*v15)(char *, uint64_t);
  int v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint8_t *v27;
  uint8_t *v28;
  uint8_t *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void *v33;
  id v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD aBlock[6];

  v42 = a3;
  v5 = sub_1CCB635B0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v39 - v10;
  sub_1CCB635A4();
  v12 = a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_lastRefreshTime;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v12, v5);
  sub_1CCB63520();
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v9, v5);
  v15(v11, v5);
  v16 = 0;
  if (!a2 && v14 <= 30.0)
    v16 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_currentlyRefreshing);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v17 = sub_1CCB637FC();
  v18 = sub_1CCA16C20(v17, (uint64_t)qword_1ED8AD7F8);
  swift_retain();
  v43 = v18;
  v19 = sub_1CCB637D8();
  v20 = sub_1CCB63D48();
  if (os_log_type_enabled(v19, v20))
  {
    v39 = v5;
    v21 = (_DWORD *)swift_slowAlloc();
    v40 = a2;
    v22 = v21;
    *v21 = 67109632;
    LODWORD(aBlock[0]) = v16;
    v41 = v12;
    sub_1CCB63E44();
    *((_WORD *)v22 + 4) = 1024;
    LODWORD(aBlock[0]) = v14 > 30.0;
    v5 = v39;
    sub_1CCB63E44();
    *((_WORD *)v22 + 7) = 1024;
    LODWORD(aBlock[0]) = *(unsigned __int8 *)(a1
                                            + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_currentlyRefreshing);
    v12 = v41;
    sub_1CCB63E44();
    swift_release();
    _os_log_impl(&dword_1CC9BF000, v19, v20, "FMIPBeaconRefreshingController: Should rate limit? %{BOOL}d, possibly stuck? %{BOOL}d, currentlyRefreshing? %{BOOL}d", (uint8_t *)v22, 0x14u);
    v23 = v22;
    a2 = v40;
    MEMORY[0x1D17B214C](v23, -1, -1);

    if (!v16)
      goto LABEL_14;
  }
  else
  {

    swift_release();
    if (!v16)
    {
LABEL_14:
      *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_currentlyRefreshing) = 1;
      sub_1CCB635A4();
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v12, v11, v5);
      swift_endAccess();
      v30 = sub_1CCB637D8();
      v31 = sub_1CCB63D48();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v32 = 0;
        _os_log_impl(&dword_1CC9BF000, v30, v31, "FMIPBeaconRefreshingController: Will call Refresh Beacon Groups", v32, 2u);
        MEMORY[0x1D17B214C](v32, -1, -1);
      }

      v33 = *(void **)(a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession);
      sub_1CCB63604();
      v34 = v33;
      v35 = (void *)sub_1CCB63B20();
      v36 = (_QWORD *)swift_allocObject();
      v36[2] = a1;
      v36[3] = a2;
      v36[4] = v42;
      aBlock[4] = sub_1CC9F7508;
      aBlock[5] = v36;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1CCA1DE94;
      aBlock[3] = &unk_1E89010D8;
      v37 = _Block_copy(aBlock);
      swift_retain();
      sub_1CC9DF994(a2);
      swift_release();
      objc_msgSend(v34, sel_beaconGroupsForUUIDs_completion_, v35, v37);
      _Block_release(v37);

      return;
    }
  }
  v24 = sub_1CCB637D8();
  v25 = sub_1CCB63D48();
  v26 = os_log_type_enabled(v24, v25);
  if (v14 > 30.0)
  {
    if (v26)
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v41 = v12;
      v28 = v27;
      *(_DWORD *)v27 = 134217984;
      *(double *)aBlock = v14;
      sub_1CCB63E44();
      _os_log_impl(&dword_1CC9BF000, v24, v25, "FMIPBeaconRefreshingController: Refresh queue seemed stuck (for %f sec), allowing refresh.", v28, 0xCu);
      v29 = v28;
      v12 = v41;
      MEMORY[0x1D17B214C](v29, -1, -1);
    }

    goto LABEL_14;
  }
  if (v26)
  {
    v38 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v38 = 134217984;
    *(double *)aBlock = v14;
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v24, v25, "FMIPBeaconRefreshingController: Ignoring refresh, the previous one didn't finish, %fs ago", v38, 0xCu);
    MEMORY[0x1D17B214C](v38, -1, -1);
  }

  *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_nextRefreshQueued) = 1;
}

uint64_t sub_1CCA01464()
{
  uint64_t *v0;

  return sub_1CCA01470(v0[2], v0[3], v0[4]);
}

uint64_t sub_1CCA01470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)swift_allocObject();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  swift_retain();
  sub_1CC9DF994(a2);
  sub_1CCA014E8(sub_1CC9F7ADC, (uint64_t)v6);
  return swift_release();
}

void sub_1CCA014E8(NSObject *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSObject **v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(unint64_t, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char isEscapingClosureAtFileLocation;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  _QWORD v66[6];
  uint64_t aBlock[3];
  void *v68;
  uint64_t v69;
  uint64_t v70;

  v3 = v2;
  v61 = a2;
  v58 = *v2;
  v64 = sub_1CCB63604();
  v5 = *(_QWORD *)(v64 - 8);
  v6 = MEMORY[0x1E0C80A78](v64);
  v65 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = v7;
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v53 - v8;
  v10 = sub_1CCB635B0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x1E0C80A78](v10);
  MEMORY[0x1E0C80A78](v13);
  v63 = (char *)&v53 - v14;
  v15 = sub_1CCB631E4();
  v68 = (void *)v15;
  v69 = sub_1CC9CAA38(&qword_1ED8A8B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
  v16 = sub_1CCA01CC0(aBlock);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v16, *MEMORY[0x1E0D21250], v15);
  LOBYTE(v15) = MEMORY[0x1D17B0748](aBlock);
  sub_1CCA01CA0((uint64_t)aBlock);
  if ((v15 & 1) == 0
    || *((_BYTE *)v3 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_shouldUseBeaconsOptimizationSPI) != 1)
  {
    v56 = a1;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v62 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    v55 = v3;
    v22 = sub_1CCB637FC();
    sub_1CCA16C20(v22, (uint64_t)qword_1ED8AD7F8);
    v23 = sub_1CCB637D8();
    v24 = sub_1CCB63D48();
    v25 = os_log_type_enabled(v23, v24);
    v59 = v11;
    v60 = v5;
    if (v25)
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      aBlock[0] = v27;
      *(_DWORD *)v26 = 136315138;
      v66[0] = sub_1CCA0CB60(0xD00000000000001BLL, 0x80000001CCB7EEC0, aBlock);
      v28 = v64;
      v11 = v59;
      sub_1CCB63E44();
      _os_log_impl(&dword_1CC9BF000, v23, v24, "FMIPBeaconRefreshingController: %s - Legacy SPI", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v27, -1, -1);
      v29 = v26;
      v5 = v60;
      MEMORY[0x1D17B214C](v29, -1, -1);

    }
    else
    {

      v28 = v64;
    }
    v30 = v63;
    sub_1CCB635A4();
    sub_1CCB635F8();
    v31 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v54 = v9;
    v31(v65, v9, v28);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v62, v30, v10);
    v32 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v33 = (v57 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
    v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8;
    v35 = (*(unsigned __int8 *)(v11 + 80) + v34 + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v36 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v36 + v32, v65, v28);
    *(_QWORD *)(v36 + v33) = v55;
    v37 = (NSObject **)(v36 + v34);
    v38 = (uint64_t)v56;
    v40 = v61;
    v39 = v62;
    *v37 = v56;
    v37[1] = v40;
    v41 = *(void (**)(unint64_t, char *, uint64_t))(v11 + 32);
    v65 = (char *)v10;
    v41(v36 + v35, v39, v10);
    *(_QWORD *)(v36 + ((v12 + v35 + 7) & 0xFFFFFFFFFFFFFFF8)) = v58;
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = sub_1CCB4CD6C;
    *(_QWORD *)(v42 + 24) = v36;
    v69 = (uint64_t)sub_1CC9F4530;
    v70 = v42;
    v43 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CC9F44AC;
    v68 = &unk_1E8901268;
    v44 = _Block_copy(aBlock);
    v45 = _Block_copy(v44);
    swift_retain();
    sub_1CC9DF994(v38);
    v46 = qword_1ED8A8CB8;
    swift_retain();
    if (v46 != -1)
      swift_once();
    v47 = qword_1ED8A8CA8;
    swift_unknownObjectRetain();
    a1 = _os_activity_create(&dword_1CC9BF000, "FMIPBeaconRefreshingController.refreshBeacons", v47, OS_ACTIVITY_FLAG_DEFAULT);
    swift_unknownObjectRelease();
    v48 = _Block_copy(v45);
    v49 = swift_allocObject();
    *(_QWORD *)(v49 + 16) = v48;
    v50 = swift_allocObject();
    *(_QWORD *)(v50 + 16) = sub_1CCAAB8D8;
    *(_QWORD *)(v50 + 24) = v49;
    v66[4] = sub_1CC9F4530;
    v66[5] = v50;
    v66[0] = v43;
    v66[1] = 1107296256;
    v66[2] = sub_1CC9F44AC;
    v66[3] = &unk_1E89012E0;
    v51 = _Block_copy(v66);
    swift_retain();
    swift_release();
    os_activity_apply(a1, v51);
    _Block_release(v51);
    LOBYTE(v51) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    _Block_release(v45);
    swift_unknownObjectRelease();
    _Block_release(v44);
    if ((v51 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v60 + 8))(v54, v64);
      (*(void (**)(char *, char *))(v59 + 8))(v63, v65);
      swift_release();
      swift_release();
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0)
        return;
    }
    __break(1u);
    goto LABEL_19;
  }
  if (qword_1ED8AA630 != -1)
LABEL_19:
    swift_once();
  v17 = sub_1CCB637FC();
  sub_1CCA16C20(v17, (uint64_t)qword_1ED8AD7F8);
  v18 = sub_1CCB637D8();
  v19 = sub_1CCB63D48();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    aBlock[0] = v21;
    *(_DWORD *)v20 = 136315138;
    v66[0] = sub_1CCA0CB60(0xD00000000000001BLL, 0x80000001CCB7EEC0, aBlock);
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v18, v19, "FMIPBeaconRefreshingController: %s - Optimized SPI", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v21, -1, -1);
    MEMORY[0x1D17B214C](v20, -1, -1);
  }

  sub_1CCA01CFC((uint64_t)a1, v61);
}

uint64_t sub_1CCA01CA0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t *sub_1CCA01CC0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void sub_1CCA01CFC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char isEscapingClosureAtFileLocation;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[6];
  _QWORD aBlock[6];

  v3 = v2;
  v37 = *v2;
  v38 = a2;
  v39 = sub_1CCB63604();
  v5 = *(_QWORD *)(v39 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = MEMORY[0x1E0C80A78](v39);
  v8 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v36 - v9;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v11 = sub_1CCB637FC();
  sub_1CCA16C20(v11, (uint64_t)qword_1ED8AD7F8);
  v12 = sub_1CCB637D8();
  v13 = sub_1CCB63D48();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1CC9BF000, v12, v13, "FMIPBeaconRefreshingController: Refresh Beacon Groups", v14, 2u);
    MEMORY[0x1D17B214C](v14, -1, -1);
  }

  sub_1CCB635F8();
  v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v36 = v10;
  v16 = v39;
  v15(v8, v10, v39);
  v17 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v18 = (v6 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v20 + v17, v8, v16);
  *(_QWORD *)(v20 + v18) = v3;
  v21 = (uint64_t *)(v20 + v19);
  v22 = v38;
  *v21 = a1;
  v21[1] = v22;
  *(_QWORD *)(v20 + ((v19 + 23) & 0xFFFFFFFFFFFFFFF8)) = v37;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = sub_1CC9F4534;
  *(_QWORD *)(v23 + 24) = v20;
  aBlock[4] = sub_1CC9F4530;
  aBlock[5] = v23;
  v24 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CC9F44AC;
  aBlock[3] = &unk_1E8900FC0;
  v25 = _Block_copy(aBlock);
  v26 = _Block_copy(v25);
  swift_retain();
  sub_1CC9DF994(a1);
  v27 = qword_1ED8A8CB8;
  swift_retain();
  if (v27 != -1)
    swift_once();
  v28 = qword_1ED8A8CA8;
  swift_unknownObjectRetain();
  v29 = _os_activity_create(&dword_1CC9BF000, "FMIPBeaconRefreshingController.refreshBeaconGroups", v28, OS_ACTIVITY_FLAG_DEFAULT);
  swift_unknownObjectRelease();
  v30 = _Block_copy(v26);
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = v30;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = sub_1CCAAB8D8;
  *(_QWORD *)(v32 + 24) = v31;
  v40[4] = sub_1CC9F4530;
  v40[5] = v32;
  v40[0] = v24;
  v40[1] = 1107296256;
  v40[2] = sub_1CC9F44AC;
  v40[3] = &unk_1E8901038;
  v33 = _Block_copy(v40);
  swift_retain();
  swift_release();
  os_activity_apply(v29, v33);
  _Block_release(v33);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v26);
  swift_unknownObjectRelease();
  _Block_release(v25);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v36, v39);
  swift_release();
  swift_release();
  v35 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v35 & 1) != 0)
LABEL_11:
    __break(1u);
}

uint64_t sub_1CCA0211C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = sub_1CCB63820();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v18 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB63868();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(_QWORD *)(v3 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshQueue);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = sub_1CCA01464;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E89018F8;
  v15 = _Block_copy(aBlock);
  swift_retain();
  sub_1CC9DF994(a1);
  sub_1CCB63844();
  v19 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v7, MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_1CCA02330(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1CCA19B38(a2);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CCA02370(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1CCA19B38(a2);
    result = MEMORY[0x1D17B2068](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_1CCA023B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = v0[2];
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1CCA18B84((uint64_t)v0 + v3, *(_QWORD *)((char *)v0 + v4), *(void **)((char *)v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(char *, char *, uint64_t))((char *)v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *((unsigned __int8 *)v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 16), v1, v0[3], v0[4], v0[5]);
}

uint64_t sub_1CCA02414()
{
  uint64_t v0;

  return sub_1CCA0241C(v0);
}

uint64_t sub_1CCA0241C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = (uint64_t *)(a1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_initializedSubsystems);
  swift_beginAccess();
  v2 = *v1;
  *v1 |= 2uLL;
  v4 = v2;
  return sub_1CCA98FE4(&v4);
}

uint64_t sub_1CCA02478()
{
  uint64_t v0;

  return sub_1CCA02480(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCA02480(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  uint64_t v58;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t result;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  _QWORD v106[2];
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  void (*v143)(char *, uint64_t, uint64_t);
  char *v144;
  uint64_t v145;
  _QWORD aBlock[6];

  v112 = sub_1CCB63820();
  v111 = *(_QWORD *)(v112 - 8);
  MEMORY[0x1E0C80A78](v112);
  v110 = (char *)v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_1CCB63868();
  v108 = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109);
  v107 = (char *)v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1ED8A8CD0);
  MEMORY[0x1E0C80A78](v6);
  v121 = (uint64_t)v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1ED8A8EF8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v132 = (char *)v106 - v12;
  v13 = sub_1CCB63604();
  v142 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v140 = (char *)v106 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v144 = (char *)v106 - v16;
  v17 = type metadata accessor for FMIPItem();
  v113 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x1E0C80A78](v17);
  v130 = (uint64_t)v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v133 = (uint64_t)v106 - v20;
  v128 = type metadata accessor for FMIPItemGroup();
  v21 = MEMORY[0x1E0C80A78](v128);
  v126 = (uint64_t)v106 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v120 = (char *)v106 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v127 = (_QWORD *)((char *)v106 - v26);
  MEMORY[0x1E0C80A78](v25);
  v125 = (uint64_t)v106 - v28;
  v29 = MEMORY[0x1E0DEE9D8];
  v119 = *(_QWORD *)(a1 + 16);
  if (!v119)
  {
    v33 = MEMORY[0x1E0DEE9D8];
LABEL_44:
    v97 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager;
    v98 = a2;
    swift_retain();
    v99 = sub_1CCA03120(v33);
    swift_release();
    result = swift_bridgeObjectRelease();
    if (v99)
    {
      v100 = *(_QWORD *)(*(_QWORD *)(a2 + v97) + 288);
      v101 = swift_allocObject();
      *(_QWORD *)(v101 + 16) = v98;
      *(_QWORD *)(v101 + 24) = v100;
      aBlock[4] = sub_1CCAAA164;
      aBlock[5] = v101;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1CCA00C38;
      aBlock[3] = &unk_1E88F7E40;
      v102 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      v103 = v107;
      sub_1CCB63844();
      v145 = v29;
      sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      sub_1CCA14E90(&qword_1ED8AA338);
      sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
      v104 = v110;
      v105 = v112;
      sub_1CCB63E98();
      MEMORY[0x1D17B1318](0, v103, v104, v102);
      _Block_release(v102);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v104, v105);
      (*(void (**)(char *, uint64_t))(v108 + 8))(v103, v109);
      return swift_release();
    }
    return result;
  }
  v118 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager;
  v115 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  v117 = a1 + v115;
  v30 = *(_QWORD *)(v27 + 72);
  v106[1] = a1;
  v31 = v30;
  swift_bridgeObjectRetain();
  v32 = 0;
  v139 = 0;
  v33 = v29;
  v141 = v11;
  v116 = a2;
  v114 = v31;
  while (1)
  {
    v34 = v117 + v31 * v32;
    v35 = v127;
    sub_1CCA0BEEC(v34, (uint64_t)v127, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v36 = *(_QWORD *)(a2 + v118);
    swift_beginAccess();
    v37 = *(_QWORD *)(v36 + 280);
    v38 = v35[7];
    v39 = *(_QWORD *)((char *)v35 + *(int *)(v128 + 52));
    aBlock[0] = v29;
    v40 = *(_QWORD *)(v37 + 16);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v137 = v38;
    swift_bridgeObjectRetain();
    v135 = v39;
    v124 = v33;
    v123 = v32;
    if (v40)
    {
      v41 = 0;
      v42 = (*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
      v138 = *(_QWORD *)(v113 + 72);
      v122 = v37;
      v129 = v42;
      v136 = v37 + v42;
      v43 = (uint64_t)v132;
      v44 = v142;
      v45 = v133;
      v131 = v40;
      while (1)
      {
        sub_1CCA0BEEC(v136 + v138 * v41, v45, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        sub_1CCB635BC();
        v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
        if (v46((char *)v43, 1, v13) == 1)
        {
          sub_1CC9C3E84(v43, &qword_1ED8A8EF8);
        }
        else
        {
          v143 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 32);
          v143(v144, v43, v13);
          v47 = *(_QWORD *)(v39 + 16);
          if (v47)
          {
            v134 = v41;
            v48 = v39 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
            swift_bridgeObjectRetain();
            v49 = *(_QWORD *)(v44 + 72);
            v50 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
            while (1)
            {
              v50(v11, v48, v13);
              v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56);
              v51(v11, 0, 1, v13);
              if (v46(v11, 1, v13) == 1)
              {
                v43 = (uint64_t)v132;
                v45 = v133;
                v39 = v135;
                v40 = v131;
                v41 = v134;
                goto LABEL_18;
              }
              v52 = v13;
              v53 = v140;
              v143(v140, (uint64_t)v11, v52);
              sub_1CC9CAA38(&qword_1EF9E1E28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
              v54 = v44;
              v55 = sub_1CCB63958();
              v56 = *(void (**)(char *, uint64_t))(v54 + 8);
              v57 = v53;
              v13 = v52;
              v56(v57, v52);
              if ((v55 & 1) != 0)
                break;
              v48 += v49;
              --v47;
              v11 = v141;
              v44 = v142;
              if (!v47)
              {
                v43 = (uint64_t)v132;
                v45 = v133;
                v40 = v131;
                v41 = v134;
                goto LABEL_16;
              }
            }
            swift_bridgeObjectRelease();
            v56(v144, v52);
            sub_1CC9FED60(v133, v130, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            v58 = aBlock[0];
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v40 = v131;
            v41 = v134;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1CCA63A2C(0, *(_QWORD *)(v58 + 16) + 1, 1);
              v58 = aBlock[0];
            }
            v11 = v141;
            v43 = (uint64_t)v132;
            v61 = *(_QWORD *)(v58 + 16);
            v60 = *(_QWORD *)(v58 + 24);
            if (v61 >= v60 >> 1)
            {
              sub_1CCA63A2C(v60 > 1, v61 + 1, 1);
              v58 = aBlock[0];
            }
            *(_QWORD *)(v58 + 16) = v61 + 1;
            sub_1CC9FED60(v130, v58 + v129 + v61 * v138, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
            v44 = v142;
            v45 = v133;
            v39 = v135;
            goto LABEL_7;
          }
          swift_bridgeObjectRetain();
          v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56);
LABEL_16:
          v51(v11, 1, 1, v13);
          v39 = v135;
LABEL_18:
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v44 + 8))(v144, v13);
        }
        sub_1CCA0BF30(v45, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_7:
        if (++v41 == v40)
        {
          v62 = aBlock[0];
          goto LABEL_26;
        }
      }
    }
    v62 = v29;
LABEL_26:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v63 = v137;
    v64 = *(_QWORD *)(v137 + 16);
    if (v64)
      break;
    v65 = MEMORY[0x1E0DEE9D8];
LABEL_37:
    v80 = v135;
    v81 = v62;
    v82 = sub_1CCA7AB3C(v65);
    swift_bridgeObjectRelease();
    v83 = v127;
    v85 = v127[2];
    v84 = v127[3];
    v86 = *v127;
    v87 = v120;
    *((_QWORD *)v120 + 1) = v127[1];
    v87[2] = v85;
    v88 = v128;
    *(_QWORD *)((char *)v87 + *(int *)(v128 + 52)) = v80;
    v89 = v83[4];
    v87[3] = v84;
    v87[4] = v89;
    v87[5] = v81;
    v87[6] = v82;
    v90 = v83[9];
    v87[8] = v83[8];
    v87[9] = v90;
    v87[7] = v137;
    *v87 = v86;
    v91 = v121;
    sub_1CC9EAB74((uint64_t)v83 + *(int *)(v88 + 48), v121, &qword_1ED8A8CD0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v83, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CC9C3EC0(v91, (uint64_t)v87 + *(int *)(v88 + 48), &qword_1ED8A8CD0);
    v92 = v125;
    sub_1CC9FED60((uint64_t)v87, v125, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BEEC(v92, v126, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v33 = v124;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v33 = sub_1CCAC9F38(0, *(_QWORD *)(v33 + 16) + 1, 1, v33);
    v93 = v123;
    v95 = *(_QWORD *)(v33 + 16);
    v94 = *(_QWORD *)(v33 + 24);
    v29 = MEMORY[0x1E0DEE9D8];
    if (v95 >= v94 >> 1)
      v33 = sub_1CCAC9F38(v94 > 1, v95 + 1, 1, v33);
    v32 = v93 + 1;
    *(_QWORD *)(v33 + 16) = v95 + 1;
    v96 = v33 + v115 + v95 * v114;
    v31 = v114;
    sub_1CC9FED60(v126, v96, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    sub_1CCA0BF30(v125, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    a2 = v116;
    if (v32 == v119)
    {
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
  }
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  swift_retain();
  sub_1CCA63A00(0, v64, 0);
  v65 = aBlock[0];
  result = sub_1CCAA78E4(v63);
  v67 = result;
  v69 = v68;
  v71 = v70 & 1;
  v143 = (void (*)(char *, uint64_t, uint64_t))(v63 + 56);
  v138 = v62;
  while ((v67 & 0x8000000000000000) == 0 && v67 < 1 << *(_BYTE *)(v63 + 32))
  {
    if (((*(_QWORD *)((char *)v143 + (((unint64_t)v67 >> 3) & 0xFFFFFFFFFFFFF8)) >> v67) & 1) == 0)
      goto LABEL_48;
    if (*(_DWORD *)(v63 + 36) != (_DWORD)v69)
      goto LABEL_49;
    swift_retain();
    v72 = swift_bridgeObjectRetain();
    v73 = v139;
    v74 = sub_1CCAA8128(v72, v62);
    v139 = v73;
    swift_release();
    v75 = sub_1CCA7AC1C(v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    aBlock[0] = v65;
    v77 = *(_QWORD *)(v65 + 16);
    v76 = *(_QWORD *)(v65 + 24);
    if (v77 >= v76 >> 1)
    {
      sub_1CCA63A00(v76 > 1, v77 + 1, 1);
      v65 = aBlock[0];
    }
    *(_QWORD *)(v65 + 16) = v77 + 1;
    *(_QWORD *)(v65 + 8 * v77 + 32) = v75;
    v63 = v137;
    result = sub_1CCB48FB8(v67, v69, v71 & 1, v137);
    v67 = result;
    v69 = v78;
    v71 = v79 & 1;
    --v64;
    v62 = v138;
    if (!v64)
    {
      sub_1CCA58DB4(result, v78, v79 & 1);
      swift_release();
      v11 = v141;
      goto LABEL_37;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

BOOL sub_1CCA03120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 288);
  swift_bridgeObjectRetain();
  v5 = sub_1CCA033CC(a1, v4);
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    *(_QWORD *)(v2 + 288) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v6 = swift_bridgeObjectRetain();
    v7 = sub_1CC9CBCCC(v6);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 288) = v7;
    swift_bridgeObjectRelease();
    if (*(_BYTE *)(v2 + 24) == 1 && *(_QWORD *)(v2 + 320))
    {
      swift_retain();
      v8 = swift_bridgeObjectRetain();
      sub_1CC9D4D5C(v8, (uint64_t)&unk_1E88F9170, (uint64_t)sub_1CCABB504, (uint64_t)&unk_1E88F9188);
      swift_bridgeObjectRelease();
      swift_release();
    }
    swift_beginAccess();
    v9 = swift_bridgeObjectRetain();
    v10 = sub_1CC9FD538(v9);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 80) = v10;
    swift_bridgeObjectRelease();
    if (MEMORY[0x1D17B2218](v2 + 32))
    {
      v11 = *(_QWORD *)(v2 + 80);
      swift_bridgeObjectRetain();
      sub_1CC9D6B5C(v2, v11);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
  }
  return (v5 & 1) == 0;
}

uint64_t sub_1CCA03290(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(char *, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v21;
  uint64_t v23;

  v8 = a3(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v23 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 == *(_QWORD *)(a2 + 16))
  {
    if (!v15 || a1 == a2)
    {
      v19 = 1;
    }
    else
    {
      v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v17 = *(_QWORD *)(v12 + 72);
      v18 = v15 - 1;
      do
      {
        sub_1CCA0BEEC(a1 + v16, (uint64_t)v14, a3);
        sub_1CCA0BEEC(a2 + v16, (uint64_t)v11, a3);
        v19 = a4(v14, v11);
        sub_1CCA0BF30((uint64_t)v11, a3);
        sub_1CCA0BF30((uint64_t)v14, a3);
        v21 = v18-- != 0;
        if ((v19 & 1) == 0)
          break;
        v16 += v17;
      }
      while (v21);
    }
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t sub_1CCA033CC(uint64_t a1, uint64_t a2)
{
  return sub_1CCA03290(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup, (uint64_t (*)(char *, char *))_s8FMIPCore13FMIPItemGroupV2eeoiySbAC_ACtFZ_0);
}

uint64_t sub_1CCA033E0()
{
  uint64_t v0;

  return sub_1CCA033EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1CCA033EC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  SEL *v21;
  char **v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  id v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  double v32;
  double v33;
  id v34;
  void *v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[2];
  void (*v47)(uint64_t);
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t aBlock[7];

  v46[1] = a4;
  v47 = a3;
  v57 = a2;
  v64 = a1;
  v4 = sub_1CCB63820();
  v61 = *(_QWORD *)(v4 - 8);
  v62 = v4;
  MEMORY[0x1E0C80A78](v4);
  v60 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63868();
  v58 = *(_QWORD *)(v6 - 8);
  v59 = v6;
  MEMORY[0x1E0C80A78](v6);
  v56 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v8 = sub_1CCB637FC();
  v11 = (_QWORD *)sub_1CCA16C20(v8, (uint64_t)qword_1ED8AD7F8);
  v9 = v64;
  swift_bridgeObjectRetain_n();
  v55 = v11;
  v10 = sub_1CCB637D8();
  LOBYTE(v11) = sub_1CCB63D48();
  v12 = v9 >> 62;
  if (!os_log_type_enabled(v10, (os_log_type_t)v11))
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  v9 = swift_slowAlloc();
  *(_DWORD *)v9 = 134217984;
  if (v12)
    goto LABEL_30;
  v13 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    aBlock[0] = v13;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v10, (os_log_type_t)v11, "FMLocationShifter: processing %ld shifting request", (uint8_t *)v9, 0xCu);
    MEMORY[0x1D17B214C](v9, -1, -1);

LABEL_8:
    v14 = swift_allocObject();
    v63 = v14;
    *(_QWORD *)(v14 + 16) = MEMORY[0x1E0DEE9D8];
    v11 = (_QWORD *)(v14 + 16);
    if (v12)
    {
      if (v64 < 0)
        v10 = v64;
      else
        v10 = (v64 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain();
      v15 = sub_1CCB64090();
      if (!v15)
        goto LABEL_28;
    }
    else
    {
      v15 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v15)
        goto LABEL_28;
    }
    v16 = objc_opt_self();
    if (v15 >= 1)
      break;
    __break(1u);
LABEL_30:
    swift_bridgeObjectRetain();
    v13 = sub_1CCB64090();
    swift_bridgeObjectRelease();
  }
  v18 = (void *)v16;
  v19 = 0;
  v20 = v64 & 0xC000000000000001;
  v21 = (SEL *)&selRef_coordinate;
  v22 = &selRef_coordinate;
  v50 = 0x80000001CCB7A8B0;
  *(_QWORD *)&v17 = 136315138;
  v49 = v17;
  v48 = MEMORY[0x1E0DEE9B8] + 8;
  v54 = v11;
  v52 = (void *)v16;
  v53 = v15;
  v51 = v64 & 0xC000000000000001;
  do
  {
    if (v20)
    {
      v30 = MEMORY[0x1D17B154C](v19, v64);
    }
    else
    {
      v30 = *(_QWORD *)(v64 + 8 * v19 + 32);
      swift_retain();
    }
    v31 = *(void **)(v30 + 16);
    objc_msgSend(v31, *v21);
    v33 = v32;
    objc_msgSend(v31, *v21);
    if (objc_msgSend(v18, v22[60], v33))
    {
      v34 = objc_allocWithZone(MEMORY[0x1E0D20218]);
      v35 = (void *)sub_1CCB63964();
      v36 = objc_msgSend(v34, sel_initWithDescription_andTimeout_, v35, 60.0);

      swift_retain_n();
      v37 = sub_1CCB637D8();
      v38 = sub_1CCB63D48();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = swift_slowAlloc();
        v40 = swift_slowAlloc();
        v65 = v30;
        aBlock[0] = v40;
        *(_DWORD *)v39 = v49;
        type metadata accessor for FMLocationShiftingRequest();
        swift_retain();
        v41 = sub_1CCB639AC();
        *(_QWORD *)(v39 + 4) = sub_1CCA0CB60(v41, v42, aBlock);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v37, v38, "FMLocationShifter: processing shifting request %s", (uint8_t *)v39, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v40, -1, -1);
        MEMORY[0x1D17B214C](v39, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v23 = v57;
      v24 = (_QWORD *)swift_allocObject();
      v24[2] = v23;
      v24[3] = v30;
      v24[4] = v63;
      v24[5] = v36;
      aBlock[4] = (uint64_t)sub_1CCA8120C;
      aBlock[5] = (uint64_t)v24;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1CCA00C38;
      aBlock[3] = (uint64_t)&unk_1E88F5B10;
      v25 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_retain();
      v26 = v36;
      v27 = v56;
      sub_1CCB63844();
      v65 = MEMORY[0x1E0DEE9D8];
      sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      sub_1CCA14E90(&qword_1ED8AA338);
      sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
      v28 = v60;
      v29 = v62;
      sub_1CCB63E98();
      MEMORY[0x1D17B1318](0, v27, v28, v25);
      _Block_release(v25);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v28, v29);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v27, v59);
      swift_release();
      objc_msgSend(v26, sel_wait);

      v15 = v53;
      v11 = v54;
      v18 = v52;
      v20 = v51;
      v21 = (SEL *)&selRef_coordinate;
      v22 = &selRef_coordinate;
    }
    else
    {
      swift_beginAccess();
      v43 = swift_retain();
      MEMORY[0x1D17B1078](v43);
      if (*(_QWORD *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1CCB63B68();
      sub_1CCB63BA4();
      sub_1CCB63B50();
      swift_endAccess();
    }
    ++v19;
    swift_release();
  }
  while (v15 != v19);
LABEL_28:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v44 = swift_bridgeObjectRetain();
  v47(v44);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA03B14(unint64_t a1)
{
  uint64_t v1;

  return sub_1CCA03B20(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1CCA03B20(unint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  double v22;
  void *v23;
  int v24;
  int v25;
  int v26;
  void *v27;
  double v28;
  int v29;
  uint64_t v30;
  id v31;
  char isUniquelyReferenced_nonNull_native;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  void (*v37)(uint64_t);
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  char v43;
  _QWORD v44[3];

  v5 = a1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_1CCB64090();
    v6 = result;
    v37 = a3;
    if (result)
      goto LABEL_3;
LABEL_22:
    v10 = MEMORY[0x1E0DEE9E0];
LABEL_23:
    swift_bridgeObjectRelease();
    v37(v10);
    return swift_bridgeObjectRelease();
  }
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  v37 = a3;
  if (!v6)
    goto LABEL_22;
LABEL_3:
  if (v6 >= 1)
  {
    v8 = 0;
    v9 = v5 & 0xC000000000000001;
    v10 = MEMORY[0x1E0DEE9E0];
    v39 = a2;
    v40 = v5;
    v38 = v5 & 0xC000000000000001;
    while (1)
    {
      if (v9)
      {
        v11 = (_QWORD *)MEMORY[0x1D17B154C](v8, v5);
        if (*(_QWORD *)(a2 + 16))
          goto LABEL_11;
      }
      else
      {
        v11 = *(_QWORD **)(v5 + 8 * v8 + 32);
        swift_retain();
        if (*(_QWORD *)(a2 + 16))
        {
LABEL_11:
          v13 = v11[3];
          v12 = v11[4];
          swift_bridgeObjectRetain();
          v14 = sub_1CCA074F4(v13, v12);
          if ((v15 & 1) != 0)
          {
            v16 = *(_QWORD *)(a2 + 56) + 24 * v14;
            v17 = *(_BYTE *)v16;
            v18 = *(_BYTE *)(v16 + 1);
            v19 = *(_BYTE *)(v16 + 2);
            v20 = v6;
            v21 = *(_BYTE *)(v16 + 3);
            v22 = *(double *)(v16 + 16);
            v42 = *(id *)(v16 + 8);
            swift_bridgeObjectRelease();
            v23 = (void *)v11[2];
            v43 = v21;
            sub_1CC9FB3D4(v23, &v43, v17, v18, v19, (uint64_t)v44, v22);
            v24 = LOBYTE(v44[0]);
            v25 = BYTE1(v44[0]);
            v26 = BYTE2(v44[0]);
            v27 = (void *)v44[1];
            v28 = *(double *)&v44[2];
            v29 = BYTE3(v44[0]);
            v30 = v11[4];
            v41 = v11[3];
            swift_bridgeObjectRetain();
            v31 = v27;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v44[0] = v10;
            v33 = v25 == 0;
            v6 = v20;
            a2 = v39;
            if (v33)
              v34 = 0;
            else
              v34 = 256;
            v35 = v34 | v24;
            if (v26)
              v36 = 0x10000;
            else
              v36 = 0;
            sub_1CCA03D9C(v35 | v36 | (v29 << 24), (uint64_t)v31, v41, v30, isUniquelyReferenced_nonNull_native, v28);
            v10 = v44[0];
            swift_release();

            v9 = v38;
            v5 = v40;
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_release();
          }
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
      }
      swift_release();
LABEL_6:
      if (v6 == ++v8)
        goto LABEL_23;
    }
  }
  __break(1u);
  return result;
}

void sub_1CCA03D9C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, double a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = sub_1CCA074F4(a3, a4);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a5 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = v22[7] + 24 * v16;

        *(_BYTE *)v23 = a1 & 1;
        *(_BYTE *)(v23 + 1) = BYTE1(a1) & 1;
        *(_BYTE *)(v23 + 2) = BYTE2(a1) & 1;
        *(_BYTE *)(v23 + 3) = HIBYTE(a1);
        *(_QWORD *)(v23 + 8) = a2;
        *(double *)(v23 + 16) = a6;
        return;
      }
      goto LABEL_11;
    }
    if (v21 >= v19 && (a5 & 1) == 0)
    {
      sub_1CCAEC584();
      goto LABEL_7;
    }
    sub_1CCA03F94(v19, a5 & 1);
    v24 = sub_1CCA074F4(a3, a4);
    if ((v20 & 1) == (v25 & 1))
    {
      v16 = v24;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CCA03F20(v16, a3, a4, a1 & 0xFF010101, a2, v22, a6);
      swift_bridgeObjectRetain();
      return;
    }
  }
  sub_1CCB642DC();
  __break(1u);
}

unint64_t sub_1CCA03F20(unint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, _QWORD *a6, double a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a6[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a6[6] + 16 * result);
  *v7 = a2;
  v7[1] = a3;
  v8 = a6[7] + 24 * result;
  *(_BYTE *)v8 = a4 & 1;
  *(_BYTE *)(v8 + 1) = BYTE1(a4) & 1;
  *(_BYTE *)(v8 + 2) = BYTE2(a4) & 1;
  *(_BYTE *)(v8 + 3) = HIBYTE(a4);
  *(_QWORD *)(v8 + 8) = a5;
  *(double *)(v8 + 16) = a7;
  v9 = a6[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a6[2] = v11;
  return result;
}

uint64_t sub_1CCA03F94(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t i;
  char v44;
  char v45;
  char v46;

  v3 = v2;
  v5 = *v2;
  sub_1CCA14E90(&qword_1EF9E2880);
  v44 = a2;
  v6 = sub_1CCB640A8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v42 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v40 = v2;
  v41 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v41)
      break;
    v23 = v42;
    v24 = v42[v22];
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v41)
        goto LABEL_33;
      v24 = v42[v13];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v41)
        {
LABEL_33:
          swift_release();
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = v42[v25];
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v41)
              goto LABEL_33;
            v24 = v42[v13];
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 24 * v21;
    v34 = *(_BYTE *)v33;
    v35 = *(_BYTE *)(v33 + 1);
    v45 = *(_BYTE *)(v33 + 3);
    v46 = *(_BYTE *)(v33 + 2);
    v36 = *(void **)(v33 + 8);
    v37 = *(_QWORD *)(v33 + 16);
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v38 = v36;
    }
    sub_1CCB6433C();
    sub_1CCB639F4();
    result = sub_1CCB64384();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v31;
    v19 = *(_QWORD *)(v7 + 56) + 24 * v17;
    *(_BYTE *)v19 = v34;
    *(_BYTE *)(v19 + 1) = v35;
    *(_BYTE *)(v19 + 2) = v46;
    *(_BYTE *)(v19 + 3) = v45;
    *(_QWORD *)(v19 + 8) = v36;
    *(_QWORD *)(v19 + 16) = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v40;
  v23 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

void sub_1CCA042F8()
{
  uint64_t v0;

  sub_1CCA04308(*(_QWORD *)(v0 + 24), *(_QWORD **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16));
}

void sub_1CCA04308(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  id v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _QWORD v28[5];
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v27 = a3;
  v9 = sub_1CCB635B0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v28[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_allocWithZone(MEMORY[0x1E0D20218]);
  v14 = (void *)sub_1CCB63964();
  v15 = objc_msgSend(v13, sel_initWithDescription_andTimeout_, v14, 120.0);

  v16 = *a2;
  if (v16 != type metadata accessor for FMIPRefreshClientRequest())
  {
    sub_1CCB635A4();
    v17 = a1 + qword_1ED8AD7B8;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 40))(v17, v12, v9);
    swift_endAccess();
  }
  if (*(_QWORD *)(a1 + qword_1ED8AA230))
  {
    v18 = swift_bridgeObjectRetain();
    sub_1CC9C4C9C(v18);
  }
  v19 = a1 + qword_1ED8AD7B8;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v19, v9);
  v20 = (char *)a2 + qword_1ED8AD5D0;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v20, v12, v9);
  swift_endAccess();
  sub_1CCA05474();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v30 = type metadata accessor for FMIPBaseRequest();
  v31 = MEMORY[0x1E0D20AA0];
  v29 = a2;
  v28[3] = v30;
  v28[4] = sub_1CC9CAA38(&qword_1ED8A7260, (uint64_t (*)(uint64_t))type metadata accessor for FMIPBaseRequest, (uint64_t)&unk_1CCB69B60);
  v28[0] = a2;
  v21 = (void *)objc_opt_self();
  swift_retain_n();
  v22 = objc_msgSend(v21, sel_processInfo);
  v23 = objc_msgSend(v22, sel_processName);

  sub_1CCB63988();
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = a5;
  v24[3] = a1;
  v25 = v27;
  v24[4] = a2;
  v24[5] = v25;
  v24[6] = a4;
  v24[7] = v15;
  swift_retain();
  swift_retain();
  swift_retain();
  v26 = v15;
  sub_1CCB63718();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1CCA01CA0((uint64_t)v28);
  sub_1CCA01CA0((uint64_t)&v29);
  objc_msgSend(v26, sel_wait);

}

uint64_t type metadata accessor for FMIPBaseRequest()
{
  uint64_t result;

  result = qword_1ED8A7268;
  if (!qword_1ED8A7268)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1CCA04660()
{
  uint64_t v0;

  sub_1CCA04668(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1CCA04668(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t Strong;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  double v23;
  void (*v24)(char *, uint64_t);
  double v25;
  double v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  double v39;
  id v40;
  id v41;
  void *v42;
  double v43;
  _OWORD v44[2];
  _QWORD v45[4];

  v3 = sub_1CCA14E90(&qword_1ED8A7130);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0) + 64;
  v6 = sub_1CCB635B0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0) + 64;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v44 - v11 + 64;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v14 = Strong;
    if (*(_BYTE *)(Strong + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_isRefreshing) == 1)
    {
      v15 = (double *)(a2 + 16);
      v16 = Strong + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_lastRefreshTime;
      swift_beginAccess();
      sub_1CC9EAB74(v16, (uint64_t)v5, &qword_1ED8A7130);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
      {
        sub_1CC9C3E84((uint64_t)v5, &qword_1ED8A7130);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
        swift_beginAccess();
        v21 = OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_minCallbackInterval;
        if (*v15 >= *(double *)(v14 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_minCallbackInterval))
        {
          (*(void (**)(char *, uint64_t, double))(v7 + 8))(v12, v6, *v15);
        }
        else
        {
          sub_1CCB635A4();
          sub_1CCB63568();
          v23 = v22;
          v24 = *(void (**)(char *, uint64_t))(v7 + 8);
          v24(v10, v6);
          sub_1CCB63568();
          if (qword_1ED8AA630 != -1)
          {
            v43 = v25;
            swift_once();
            v25 = v43;
          }
          v26 = v23 - v25;
          v27 = sub_1CCB637FC();
          sub_1CCA16C20(v27, (uint64_t)qword_1ED8AD7F8);
          v28 = sub_1CCB637D8();
          v29 = sub_1CCB63D48();
          if (os_log_type_enabled(v28, v29))
          {
            v30 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)v30 = 134217984;
            *(double *)v45 = v26;
            sub_1CCB63E44();
            _os_log_impl(&dword_1CC9BF000, v28, v29, "FMIPRefreshingController: last refresh interval %f ms", v30, 0xCu);
            MEMORY[0x1D17B214C](v30, -1, -1);
          }

          v24(v12, v6);
          v31 = *(double *)(v14 + v21);
          if (v26 < v31)
          {
            v32 = v31 + v26 * -1000.0;
            swift_beginAccess();
            v33 = 0.0;
            if (v32 > 0.0)
              v33 = v32;
            *v15 = v33;
          }
        }
      }
      if (qword_1ED8AA630 != -1)
        swift_once();
      v34 = sub_1CCB637FC();
      sub_1CCA16C20(v34, (uint64_t)qword_1ED8AD7F8);
      swift_retain();
      v35 = sub_1CCB637D8();
      v36 = sub_1CCB63D48();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v37 = 134217984;
        swift_beginAccess();
        v45[0] = *(_QWORD *)(a2 + 16);
        sub_1CCB63E44();
        swift_release();
        _os_log_impl(&dword_1CC9BF000, v35, v36, "FMIPRefreshingController: scheduling next refresh in %f ms", v37, 0xCu);
        MEMORY[0x1D17B214C](v37, -1, -1);

      }
      else
      {

        swift_release();
      }
      v38 = OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_refreshTimer;
      objc_msgSend(*(id *)(v14 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_refreshTimer), sel_invalidate);
      sub_1CC9C30A8(0, &qword_1EF9E5010);
      swift_beginAccess();
      v39 = *v15 / 1000.0;
      v45[3] = type metadata accessor for FMIPRefreshingController();
      v45[0] = v14;
      memset(v44, 0, sizeof(v44));
      swift_retain();
      v40 = sub_1CCA04C70(v45, (uint64_t)sel_refreshTimerFired, v44, 0, v39);
      v41 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
      objc_msgSend(v41, sel_addTimer_forMode_, v40, *MEMORY[0x1E0C99748]);

      v42 = *(void **)(v14 + v38);
      *(_QWORD *)(v14 + v38) = v40;
      swift_release();

    }
    else
    {
      if (qword_1ED8AA630 != -1)
        swift_once();
      v17 = sub_1CCB637FC();
      sub_1CCA16C20(v17, (uint64_t)qword_1ED8AD7F8);
      v18 = sub_1CCB637D8();
      v19 = sub_1CCB63D48();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v20 = 0;
        _os_log_impl(&dword_1CC9BF000, v18, v19, "FMIPRefreshingController: Not scheduling another refresh because refreshing is disabled", v20, 2u);
        MEMORY[0x1D17B214C](v20, -1, -1);
        swift_release();

      }
      else
      {

        swift_release();
      }
    }
  }
}

id sub_1CCA04C70(_QWORD *a1, uint64_t a2, _QWORD *a3, char a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  id v20;
  _QWORD v22[2];

  sub_1CCA04DDC(a1, a1[3]);
  v10 = sub_1CCB64294();
  v11 = a3[3];
  if (v11)
  {
    v12 = sub_1CCA04DDC(a3, a3[3]);
    v22[1] = v22;
    v13 = a4;
    v14 = a2;
    v15 = *(_QWORD *)(v11 - 8);
    MEMORY[0x1E0C80A78](v12);
    v17 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v15 + 16))(v17);
    v18 = sub_1CCB64294();
    v19 = *(void (**)(char *, uint64_t))(v15 + 8);
    a2 = v14;
    a4 = v13;
    v19(v17, v11);
    sub_1CCA01CA0((uint64_t)a3);
  }
  else
  {
    v18 = 0;
  }
  v20 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_timerWithTimeInterval_target_selector_userInfo_repeats_, v10, a2, v18, a4 & 1, a5);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1CCA01CA0((uint64_t)a1);
  return v20;
}

_QWORD *sub_1CCA04DDC(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t type metadata accessor for FMIPRefreshingController()
{
  uint64_t result;

  result = qword_1ED8A75B8;
  if (!qword_1ED8A75B8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for FMIPRefreshClientRequest()
{
  uint64_t result;

  result = qword_1ED8A7580;
  if (!qword_1ED8A7580)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA04E78()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;

  if (*(_BYTE *)(v0 + 25))
    v1 = 256;
  else
    v1 = 0;
  v2 = v1 | *(unsigned __int8 *)(v0 + 24);
  if (*(_BYTE *)(v0 + 26))
    v3 = 0x10000;
  else
    v3 = 0;
  return sub_1CCA04EBC(*(char **)(v0 + 16), v2 | v3 | (*(unsigned __int8 *)(v0 + 27) << 24), *(void **)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t sub_1CCA04EBC(char *a1, int a2, void *a3, double a4)
{
  uint64_t result;
  id v9;
  __int16 v10;
  char v11;
  char v12;
  void *v13;
  double v14;

  result = MEMORY[0x1D17B2218](&a1[OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_delegate]);
  if (result)
  {
    v10 = a2 & 0x101;
    v11 = BYTE2(a2) & 1;
    v12 = HIBYTE(a2);
    v13 = a3;
    v14 = a4;
    v9 = a3;
    sub_1CCA05948(a1, (unsigned __int8 *)&v10);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCA04F5C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;

  if (*(_BYTE *)(v1 + 17))
    v2 = 256;
  else
    v2 = 0;
  v3 = v2 | *(unsigned __int8 *)(v1 + 16);
  if (*(_BYTE *)(v1 + 18))
    v4 = 0x10000;
  else
    v4 = 0;
  return sub_1CCA04FA0(*(double *)(v1 + 32), a1, v3 | v4 | (*(unsigned __int8 *)(v1 + 19) << 24), *(void **)(v1 + 24), *(char **)(v1 + 40));
}

uint64_t sub_1CCA04FA0(double a1, uint64_t a2, unsigned int a3, void *a4, char *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  id v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t aBlock;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  void *v44;
  uint64_t (*v45)();
  uint64_t v46;

  v9 = sub_1CCB63820();
  v38 = *(_QWORD *)(v9 - 8);
  v39 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63868();
  v36 = *(_QWORD *)(v12 - 8);
  v37 = v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_bridgeObjectRetain();
  sub_1CCA0526C(v15, (uint64_t)&aBlock);
  swift_bridgeObjectRelease();
  if (v42)
  {
    a1 = *(double *)&v45;
    v16 = v43;
    v17 = v44;
    swift_bridgeObjectRelease();
    v18 = ((unint64_t)v16 >> 8) & 1;
    v19 = v16 & 1;
    v20 = ((unint64_t)v16 >> 16) & 1;
    v21 = (unint64_t)v16 >> 24;
  }
  else
  {
    LODWORD(v20) = HIWORD(a3) & 1;
    LODWORD(v18) = (a3 >> 8) & 1;
    v19 = a3 & 1;
    LODWORD(v21) = HIBYTE(a3);
    v17 = a4;
  }
  v22 = 256;
  if (!(_DWORD)v18)
    v22 = 0;
  v23 = v22 | v19;
  v24 = 0x10000;
  if (!(_DWORD)v20)
    v24 = 0;
  v25 = (v23 | v24) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v21 << 24);
  v26 = &a5[OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_currentLocation];
  v27 = *(void **)&a5[OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_currentLocation + 8];
  *(_QWORD *)v26 = v25;
  *((_QWORD *)v26 + 1) = v17;
  *((double *)v26 + 2) = a1;
  v28 = v17;

  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = a5;
  *(_BYTE *)(v29 + 24) = v19;
  *(_BYTE *)(v29 + 25) = v18;
  *(_BYTE *)(v29 + 26) = v20;
  *(_BYTE *)(v29 + 27) = v21;
  *(_QWORD *)(v29 + 32) = v28;
  *(double *)(v29 + 40) = a1;
  v45 = sub_1CCA04E78;
  v46 = v29;
  aBlock = MEMORY[0x1E0C809B0];
  v42 = 1107296256;
  v43 = sub_1CCA00C38;
  v44 = &unk_1E88FD708;
  v30 = _Block_copy(&aBlock);
  v31 = v28;
  v32 = a5;
  sub_1CCB63844();
  v40 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  v33 = v39;
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v14, v11, v30);
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v33);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v37);
  return swift_release();
}

uint64_t sub_1CCA0526C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;

  result = sub_1CCA053EC(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    result = sub_1CCA0532C((uint64_t)v14, result, v5, 0, a1);
    v7 = v14[0];
    v8 = v14[1];
    v9 = v14[2];
    v10 = v14[3];
    v11 = v15;
    v12 = v16;
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v13;
    *(_BYTE *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 17) = v8;
    *(_BYTE *)(a2 + 18) = v9;
    *(_BYTE *)(a2 + 19) = v10;
    *(_QWORD *)(a2 + 24) = v11;
    *(_QWORD *)(a2 + 32) = v12;
  }
  return result;
}

uint64_t sub_1CCA0532C(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  void *v10;
  uint64_t v11;
  id v12;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    v6 = *(_QWORD *)(a5 + 56) + 24 * a2;
    v7 = *(_BYTE *)(v6 + 1);
    v8 = *(_BYTE *)(v6 + 2);
    v9 = *(_BYTE *)(v6 + 3);
    v10 = *(void **)(v6 + 8);
    v11 = *(_QWORD *)(v6 + 16);
    *(_BYTE *)result = *(_BYTE *)v6;
    *(_BYTE *)(result + 1) = v7;
    *(_BYTE *)(result + 2) = v8;
    *(_BYTE *)(result + 3) = v9;
    *(_QWORD *)(result + 8) = v10;
    *(_QWORD *)(result + 16) = v11;
    swift_bridgeObjectRetain();
    v12 = v10;
    return v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1CCA053EC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void sub_1CCA05474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  double v14;
  double v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;

  v1 = v0;
  v2 = sub_1CCB635B0();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v27 - v7;
  v9 = (uint64_t *)(v0 + qword_1ED8A7248);
  swift_beginAccess();
  v10 = *v9;
  if (!*(_QWORD *)(v10 + 16))
  {
    v30 = 0u;
    v31 = 0u;
LABEL_13:
    sub_1CC9C3E84((uint64_t)&v30, &qword_1ED8AA610);
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  v11 = sub_1CCA074F4(0x6F43746E65696C63, 0xED0000747865746ELL);
  if ((v12 & 1) != 0)
  {
    sub_1CCA0CC30(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v30);
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v31 + 1))
    goto LABEL_13;
  sub_1CCA14E90(&qword_1ED8AA320);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v13 = *(_QWORD *)&v29[0];
    sub_1CCB635A4();
    sub_1CCB63568();
    v15 = v14;
    v16 = *(void (**)(char *, uint64_t))(v3 + 8);
    v16(v8, v2);
    v17 = v1 + qword_1ED8AD5D0;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v17, v2);
    sub_1CCB63568();
    v19 = v18;
    v16(v6, v2);
    v20 = v15 - v19;
    if ((~COERCE__INT64(v15 - v19) & 0x7FF0000000000000) != 0)
    {
      if (v20 > -9.22337204e18)
      {
        if (v20 < 9.22337204e18)
        {
          if ((unsigned __int128)((uint64_t)v20 * (__int128)1000) >> 64 == (1000 * (uint64_t)v20) >> 63)
          {
            *((_QWORD *)&v31 + 1) = MEMORY[0x1E0DEB418];
            *(_QWORD *)&v30 = 1000 * (uint64_t)v20;
            sub_1CCA0799C(&v30, v29);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v28 = v13;
            sub_1CCA073C4(v29, 0x6576697463616E69, 0xEC000000656D6954, isUniquelyReferenced_nonNull_native);
            v22 = v28;
            swift_bridgeObjectRelease();
            sub_1CCA07CD0(v22);
            return;
          }
          goto LABEL_22;
        }
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_21;
  }
LABEL_14:
  if (qword_1ED8AA630 != -1)
    swift_once();
  v23 = sub_1CCB637FC();
  sub_1CCA16C20(v23, (uint64_t)qword_1ED8AD7F8);
  v24 = sub_1CCB637D8();
  v25 = sub_1CCB63D30();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_1CC9BF000, v24, v25, "FMIPBaseRequest: inactive time not set because clientContext doesn't exist", v26, 2u);
    MEMORY[0x1D17B214C](v26, -1, -1);
  }

}

uint64_t sub_1CCA057D0(__n128 a1)
{
  return sub_1CCA05D40((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, __n128))sub_1CCA057DC, a1);
}

uint64_t sub_1CCA057DC(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, double a5)
{
  unsigned int v8;
  char v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  char v18;
  char v19;
  uint64_t v20;
  double v21;

  if ((*(_BYTE *)(result + OBJC_IVAR____TtC8FMIPCore22FMIPLocationController_limitedPrecision) & 1) == 0
    && *(_BYTE *)(a2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_useRealtimeForItems) == 1)
  {
    v8 = HIBYTE(a3);
    v9 = a3 & 1;
    v17 = a3 & 0x101;
    v10 = (a3 >> 8) & 1;
    v11 = HIWORD(a3) & 1;
    v18 = BYTE2(a3) & 1;
    v19 = HIBYTE(a3);
    v20 = a4;
    v21 = a5;
    v12 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager;
    v13 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager);
    swift_beginAccess();
    v14 = *(_QWORD *)(v13 + 280);
    swift_bridgeObjectRetain();
    sub_1CCAA37C8((unsigned __int8 *)&v17, v14, "FMIPManager: appending realtime location %{private}s", (uint64_t)&unk_1E88F7B58, (uint64_t)sub_1CCAAA0A8, (uint64_t)&unk_1E88F7B70);
    swift_bridgeObjectRelease();
    LOBYTE(v17) = v9;
    HIBYTE(v17) = v10;
    v18 = v11;
    v19 = v8;
    v20 = a4;
    v21 = a5;
    v15 = *(_QWORD *)(a2 + v12);
    swift_beginAccess();
    v16 = *(_QWORD *)(v15 + 80);
    swift_bridgeObjectRetain();
    sub_1CCAA37C8((unsigned __int8 *)&v17, v16, "FMIPManager: appending realtime location to devices %{private}s", (uint64_t)&unk_1E88F8148, (uint64_t)sub_1CCAAA264, (uint64_t)&unk_1E88F8160);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1CCA05948(void *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  os_log_type_t v27;
  char v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  _BYTE *v36;
  _BYTE v38[4];
  int v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  void *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t aBlock;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  void *v55;
  uint64_t (*v56)(__n128);
  uint64_t v57;

  v3 = v2;
  v47 = a1;
  v5 = sub_1CCB63820();
  v45 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_1CCB63868();
  v49 = *(_QWORD *)(v8 - 8);
  v50 = v8;
  MEMORY[0x1E0C80A78](v8);
  v48 = &v38[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *a2;
  v44 = a2[1];
  v11 = a2[2];
  v46 = a2[3];
  v12 = (void *)*((_QWORD *)a2 + 1);
  v13 = (uint64_t (*)(uint64_t))*((_QWORD *)a2 + 2);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v14 = sub_1CCB637FC();
  sub_1CCA16C20(v14, (uint64_t)qword_1ED8AD7F8);
  v15 = v12;
  v16 = sub_1CCB637D8();
  v17 = sub_1CCB63D48();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v42 = v3;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc();
    v43 = v5;
    v21 = v20;
    v51 = v20;
    v40 = v7;
    *(_DWORD *)v19 = 136380675;
    LOBYTE(aBlock) = v10;
    v39 = v10;
    v22 = v44;
    BYTE1(aBlock) = v44;
    BYTE2(aBlock) = v11;
    v41 = v11;
    v23 = v46;
    BYTE3(aBlock) = v46;
    v53 = (uint64_t)v15;
    v54 = v13;
    v24 = FMIPLocation.debugDescription.getter();
    aBlock = sub_1CCA0CB60(v24, v25, &v51);
    v7 = v40;
    sub_1CCB63E44();

    v26 = v23;
    LOBYTE(v11) = v41;
    swift_bridgeObjectRelease();
    v27 = v17;
    v28 = v39;
    _os_log_impl(&dword_1CC9BF000, v16, v27, "FMIPManager: didReceive locationControler %{private}s", v19, 0xCu);
    swift_arrayDestroy();
    v29 = v21;
    v5 = v43;
    MEMORY[0x1D17B214C](v29, -1, -1);
    v30 = v19;
    v3 = v42;
    MEMORY[0x1D17B214C](v30, -1, -1);

  }
  else
  {

    v26 = v46;
    v28 = v10;
    v22 = v44;
  }
  v31 = swift_allocObject();
  v32 = v47;
  *(_QWORD *)(v31 + 16) = v47;
  *(_QWORD *)(v31 + 24) = v3;
  *(_BYTE *)(v31 + 32) = v28;
  *(_BYTE *)(v31 + 33) = v22;
  *(_BYTE *)(v31 + 34) = v11;
  *(_BYTE *)(v31 + 35) = v26;
  *(_QWORD *)(v31 + 40) = v15;
  *(_QWORD *)(v31 + 48) = v13;
  v56 = sub_1CCA057D0;
  v57 = v31;
  aBlock = MEMORY[0x1E0C809B0];
  v53 = 1107296256;
  v54 = sub_1CCA00C38;
  v55 = &unk_1E88F8110;
  v33 = _Block_copy(&aBlock);
  v34 = v15;
  v35 = v32;
  swift_retain();
  v36 = v48;
  sub_1CCB63844();
  v51 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v36, v7, v33);
  _Block_release(v33);
  (*(void (**)(_BYTE *, uint64_t))(v45 + 8))(v7, v5);
  (*(void (**)(_BYTE *, uint64_t))(v49 + 8))(v36, v50);
  return swift_release();
}

uint64_t sub_1CCA05D40(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, __n128), __n128 a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  if (*(_BYTE *)(v2 + 33))
    v3 = 256;
  else
    v3 = 0;
  v4 = v3 | *(unsigned __int8 *)(v2 + 32);
  if (*(_BYTE *)(v2 + 34))
    v5 = 0x10000;
  else
    v5 = 0;
  a2.n128_u64[0] = *(_QWORD *)(v2 + 48);
  return a1(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v4 | v5 | (*(unsigned __int8 *)(v2 + 35) << 24), *(_QWORD *)(v2 + 40), a2);
}

uint64_t sub_1CCA05D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v1 = v0;
  v2 = sub_1CCA14E90(&qword_1ED8A7170);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v5 = type metadata accessor for FMIPDevice();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (_QWORD *)((char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0) + 16);
  v9 = *(_QWORD *)(v0 + qword_1ED8AD5F8);
  if (v9)
  {
    v41 = sub_1CCA14E90(&qword_1EF9E5F10);
    v39 = v9;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)&v39, 0x65746E6F43706174, 0xEA00000000007478);
    swift_endAccess();
  }
  sub_1CCA247A8(v0 + qword_1ED8AD600, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1CCA246DC((uint64_t)v4);
    if (!v9 || !*(_QWORD *)(v9 + 16))
    {
      v41 = MEMORY[0x1E0DEA968];
      v39 = 7105633;
      v40 = 0xE300000000000000;
      v10 = (uint64_t *)(v0 + qword_1ED8A7238);
      swift_beginAccess();
      sub_1CCA06650((uint64_t)&v39, 0x64657463656C6573, 0xEE00656369766544);
      swift_endAccess();
      v11 = *v10;
      v38 = sub_1CCA14E90(&qword_1ED8AA320);
      v37[0] = v11;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_1CCA06650((uint64_t)v37, 0x6F43746E65696C63, 0xED0000747865746ELL);
      swift_endAccess();
    }
  }
  else
  {
    sub_1CC9F73E8((uint64_t)v4, (uint64_t)v8);
    v12 = *v8;
    v13 = v8[1];
    v41 = MEMORY[0x1E0DEA968];
    v39 = v12;
    v40 = v13;
    v14 = (uint64_t *)(v1 + qword_1ED8A7238);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)&v39, 0x64657463656C6573, 0xEE00656369766544);
    swift_endAccess();
    v15 = *v14;
    v16 = sub_1CCA14E90(&qword_1ED8AA320);
    v38 = v16;
    v37[0] = v15;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)v37, 0x6F43746E65696C63, 0xED0000747865746ELL);
    swift_endAccess();
    v41 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v39) = 1;
    swift_beginAccess();
    sub_1CCA06650((uint64_t)&v39, 0x6F4C646C756F6873, 0xEC00000065746163);
    swift_endAccess();
    v17 = *v14;
    v38 = v16;
    v37[0] = v17;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)v37, 0x6F43746E65696C63, 0xED0000747865746ELL);
    swift_endAccess();
    sub_1CC9F73AC((uint64_t)v8);
  }
  v18 = *(_QWORD *)(v1 + qword_1ED8AD608);
  v19 = MEMORY[0x1E0DEB418];
  v41 = MEMORY[0x1E0DEB418];
  v39 = v18;
  v20 = (uint64_t *)(v1 + qword_1ED8A7238);
  swift_beginAccess();
  sub_1CCA06650((uint64_t)&v39, 0xD000000000000016, 0x80000001CCB7E840);
  swift_endAccess();
  v21 = *v20;
  v22 = sub_1CCA14E90(&qword_1ED8AA320);
  v38 = v22;
  v37[0] = v21;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)v37, 0x6F43746E65696C63, 0xED0000747865746ELL);
  result = swift_endAccess();
  v24 = (uint64_t *)(v1 + qword_1EF9FF800);
  if ((*(_BYTE *)(v1 + qword_1EF9FF800 + 48) & 1) == 0)
  {
    v25 = v24[4];
    v36 = v24[5];
    v27 = v24[2];
    v26 = v24[3];
    v28 = *v24;
    v29 = *(_QWORD *)(v1 + qword_1EF9FF800 + 8);
    v41 = v19;
    v39 = v28;
    swift_beginAccess();
    sub_1CCA06650((uint64_t)&v39, 0x3156676174726961, 0xE800000000000000);
    swift_endAccess();
    v30 = *v20;
    v38 = v22;
    v37[0] = v30;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)v37, 0x6F43746E65696C63, 0xED0000747865746ELL);
    swift_endAccess();
    v41 = v19;
    v39 = v29;
    swift_beginAccess();
    sub_1CCA06650((uint64_t)&v39, 0x3256676174726961, 0xE800000000000000);
    swift_endAccess();
    v31 = *v20;
    v38 = v22;
    v37[0] = v31;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)v37, 0x6F43746E65696C63, 0xED0000747865746ELL);
    swift_endAccess();
    v41 = v19;
    v39 = v27;
    swift_beginAccess();
    sub_1CCA06650((uint64_t)&v39, 0x3156616E6D66, 0xE600000000000000);
    swift_endAccess();
    v32 = *v20;
    v38 = v22;
    v37[0] = v32;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)v37, 0x6F43746E65696C63, 0xED0000747865746ELL);
    swift_endAccess();
    v41 = v19;
    v39 = v26;
    swift_beginAccess();
    sub_1CCA06650((uint64_t)&v39, 0x3256616E6D66, 0xE600000000000000);
    swift_endAccess();
    v33 = *v20;
    v38 = v22;
    v37[0] = v33;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)v37, 0x6F43746E65696C63, 0xED0000747865746ELL);
    swift_endAccess();
    v41 = v19;
    v39 = v25;
    swift_beginAccess();
    sub_1CCA06650((uint64_t)&v39, 0x6E6D66656C707061, 0xEB00000000315661);
    swift_endAccess();
    v34 = *v20;
    v38 = v22;
    v37[0] = v34;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)v37, 0x6F43746E65696C63, 0xED0000747865746ELL);
    swift_endAccess();
    v41 = v19;
    v39 = v36;
    swift_beginAccess();
    sub_1CCA06650((uint64_t)&v39, 0x6E6D66656C707061, 0xEB00000000325661);
    swift_endAccess();
    v35 = *v20;
    v38 = v22;
    v37[0] = v35;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)v37, 0x6F43746E65696C63, 0xED0000747865746ELL);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1CCA06650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1CCA0799C((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    sub_1CCA073C4(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1CC9C3E84(a1, &qword_1ED8AA610);
    sub_1CCB092F8(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_1CC9C3E84((uint64_t)v9, &qword_1ED8AA610);
  }
}

uint64_t sub_1CCA06724()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  double v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  void *v62;
  void *v63;
  id v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t);
  void *v67;
  void *v68;
  id v69;
  void *v70;
  void *v71;
  unsigned int v72;
  void *v73;
  void *v74;
  char *v75;
  void *v76;
  id v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  _OWORD v93[2];
  __int128 v94;
  uint64_t v95;
  uint64_t v96;

  v0 = sub_1CCA14E90(&qword_1ED8A7130);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v89 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1CCB635B0();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v90 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v89 = (char *)&v89 - v8;
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v89 - v9;
  sub_1CCB635A4();
  v11 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v12 = MEMORY[0x1E0DEAFA0];
  v95 = MEMORY[0x1E0DEAFA0];
  LOBYTE(v94) = 1;
  sub_1CCA0799C(&v94, v93);
  v13 = MEMORY[0x1E0DEE9E0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v96 = v13;
  sub_1CCA073C4(v93, 2037149030, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
  v15 = v96;
  swift_bridgeObjectRelease();
  v95 = v12;
  LOBYTE(v94) = 1;
  sub_1CCA0799C(&v94, v93);
  v16 = swift_isUniquelyReferenced_nonNull_native();
  v96 = v15;
  sub_1CCA073C4(v93, 1752397168, 0xE400000000000000, v16);
  v17 = v96;
  swift_bridgeObjectRelease();
  v95 = MEMORY[0x1E0DEB418];
  *(_QWORD *)&v94 = 1;
  sub_1CCA0799C(&v94, v93);
  v18 = swift_isUniquelyReferenced_nonNull_native();
  v96 = v17;
  sub_1CCA073C4(v93, 0xD000000000000011, 0x80000001CCB79C40, v18);
  v19 = v96;
  swift_bridgeObjectRelease();
  v91 = v10;
  sub_1CCB634F0();
  v95 = MEMORY[0x1E0DEB070];
  *(double *)&v94 = v20 * 1000.0;
  sub_1CCA0799C(&v94, v93);
  v21 = swift_isUniquelyReferenced_nonNull_native();
  v96 = v19;
  sub_1CCA073C4(v93, 0x6954746E65696C63, 0xEF706D617473656DLL, v21);
  v22 = v96;
  swift_bridgeObjectRelease();
  v23 = MEMORY[0x1E0DEA968];
  v95 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v94 = 3157559;
  *((_QWORD *)&v94 + 1) = 0xE300000000000000;
  sub_1CCA0799C(&v94, v93);
  v24 = swift_isUniquelyReferenced_nonNull_native();
  v92 = v22;
  sub_1CCA073C4(v93, 0x6973726556707061, 0xEA00000000006E6FLL, v24);
  v25 = v92;
  v96 = v92;
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(v11, sel_productType);
  if (v26)
  {
    v27 = v26;
    v28 = sub_1CCB63988();
    v30 = v29;

    v95 = v23;
    *(_QWORD *)&v94 = v28;
    *((_QWORD *)&v94 + 1) = v30;
    sub_1CCA0799C(&v94, v93);
    v31 = swift_isUniquelyReferenced_nonNull_native();
    v92 = v25;
    sub_1CCA073C4(v93, 0x54746375646F7270, 0xEB00000000657079, v31);
    v96 = v92;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1CCB092F8(0x54746375646F7270, 0xEB00000000657079, &v94);
    sub_1CC9C3E84((uint64_t)&v94, &qword_1ED8AA610);
  }
  v32 = objc_msgSend(v11, sel_osVersion);
  if (v32)
  {
    v33 = v32;
    v34 = sub_1CCB63988();
    v36 = v35;

    v95 = v23;
    *(_QWORD *)&v94 = v34;
    *((_QWORD *)&v94 + 1) = v36;
    sub_1CCA0799C(&v94, v93);
    v37 = v96;
    v38 = swift_isUniquelyReferenced_nonNull_native();
    v92 = v37;
    sub_1CCA073C4(v93, 0x6F6973726556736FLL, 0xE90000000000006ELL, v38);
    v96 = v92;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1CCB092F8(0x6F6973726556736FLL, 0xE90000000000006ELL, &v94);
    sub_1CC9C3E84((uint64_t)&v94, &qword_1ED8AA610);
  }
  v39 = objc_msgSend(v11, sel_osBuildVersion);
  if (v39)
  {
    v40 = v39;
    v41 = sub_1CCB63988();
    v43 = v42;

    v95 = v23;
    *(_QWORD *)&v94 = v41;
    *((_QWORD *)&v94 + 1) = v43;
    sub_1CCA0799C(&v94, v93);
    v44 = v96;
    v45 = swift_isUniquelyReferenced_nonNull_native();
    v92 = v44;
    sub_1CCA073C4(v93, 0x646C697542736FLL, 0xE700000000000000, v45);
    v96 = v92;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1CCB092F8(0x646C697542736FLL, 0xE700000000000000, &v94);
    sub_1CC9C3E84((uint64_t)&v94, &qword_1ED8AA610);
  }
  v46 = objc_msgSend(v11, sel_deviceUDID);
  if (v46)
  {
    v47 = v46;
    v48 = sub_1CCB63988();
    v50 = v49;

    v95 = v23;
    *(_QWORD *)&v94 = v48;
    *((_QWORD *)&v94 + 1) = v50;
    sub_1CCA0799C(&v94, v93);
    v51 = v96;
    v52 = swift_isUniquelyReferenced_nonNull_native();
    v92 = v51;
    sub_1CCA073C4(v93, 0x4455656369766564, 0xEA00000000004449, v52);
    v96 = v92;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1CCB092F8(0x4455656369766564, 0xEA00000000004449, &v94);
    sub_1CC9C3E84((uint64_t)&v94, &qword_1ED8AA610);
  }
  v53 = (void *)objc_opt_self();
  v54 = (void *)sub_1CCB63964();
  v55 = (void *)sub_1CCB63964();
  v56 = objc_msgSend(v53, sel_stringForKey_inDomain_, v54, v55);

  if (v56)
  {
    v57 = sub_1CCB63988();
    v59 = v58;

    v95 = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v94 = v57;
    *((_QWORD *)&v94 + 1) = v59;
    sub_1CCA0799C(&v94, v93);
    v60 = v96;
    v61 = swift_isUniquelyReferenced_nonNull_native();
    v92 = v60;
    sub_1CCA073C4(v93, 0x6E656B6F54737061, 0xE800000000000000, v61);
    v96 = v92;
    swift_bridgeObjectRelease();
  }
  v62 = (void *)sub_1CCB63964();
  v63 = (void *)sub_1CCB63964();
  v64 = objc_msgSend(v53, sel_dateForKey_inDomain_, v62, v63);

  if (!v64)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    goto LABEL_23;
  }
  v65 = v90;
  sub_1CCB63580();

  v66 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v66(v2, v65, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_23:
    sub_1CC9C3E84((uint64_t)v2, &qword_1ED8A7130);
    goto LABEL_24;
  }
  v66(v89, v2, v3);
  v67 = (void *)sub_1CCB63964();
  v68 = (void *)sub_1CCB63964();
  v69 = objc_msgSend(v53, sel_integerForKey_inDomain_, v67, v68);

  v70 = (void *)sub_1CCB63964();
  v71 = (void *)sub_1CCB63964();
  v72 = objc_msgSend(v53, sel_BOOLForKey_inDomain_, v70, v71);

  v73 = (void *)sub_1CCB63964();
  v74 = (void *)sub_1CCB63964();
  LODWORD(v90) = objc_msgSend(v53, sel_BOOLForKey_inDomain_, v73, v74);

  v75 = v89;
  v76 = (void *)sub_1CCB63538();
  v77 = objc_msgSend(v76, sel_fm_epoch);

  v95 = MEMORY[0x1E0DEB418];
  *(_QWORD *)&v94 = v69;
  sub_1CCA0799C(&v94, v93);
  v78 = v96;
  v79 = swift_isUniquelyReferenced_nonNull_native();
  v92 = v78;
  sub_1CCA073C4(v93, 0x436C6C53776F6873, 0xEC000000746E756FLL, v79);
  v80 = v92;
  v96 = v92;
  swift_bridgeObjectRelease();
  v95 = MEMORY[0x1E0DEDC60];
  *(_QWORD *)&v94 = v77;
  sub_1CCA0799C(&v94, v93);
  v81 = swift_isUniquelyReferenced_nonNull_native();
  v92 = v80;
  sub_1CCA073C4(v93, 0xD000000000000010, 0x80000001CCB79C20, v81);
  v82 = v92;
  swift_bridgeObjectRelease();
  v83 = 0x54554F54504FLL;
  if (v72)
    v83 = 0x4E4954504FLL;
  v84 = 0xE600000000000000;
  v95 = MEMORY[0x1E0DEA968];
  if (v72)
    v84 = 0xE500000000000000;
  *(_QWORD *)&v94 = v83;
  *((_QWORD *)&v94 + 1) = v84;
  sub_1CCA0799C(&v94, v93);
  v85 = swift_isUniquelyReferenced_nonNull_native();
  v92 = v82;
  sub_1CCA073C4(v93, 0x73696365446C6C73, 0xEB000000006E6F69, v85);
  v86 = v92;
  swift_bridgeObjectRelease();
  v95 = MEMORY[0x1E0DEAFA0];
  LOBYTE(v94) = (_BYTE)v90;
  sub_1CCA0799C(&v94, v93);
  v87 = swift_isUniquelyReferenced_nonNull_native();
  v92 = v86;
  sub_1CCA073C4(v93, 0xD000000000000010, 0x80000001CCB79C00, v87);
  v96 = v92;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v75, v3);
LABEL_24:
  sub_1CCA07CD0(v96);

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v91, v3);
}

uint64_t sub_1CCA07250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_1CCA074F4(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1CCAEC3C0();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1CCA079AC(v17, a5 & 1);
  v23 = sub_1CCA074F4(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1CCB642DC();
  __break(1u);
  return result;
}

_OWORD *sub_1CCA073C4(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1CCA074F4(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        sub_1CCA01CA0((uint64_t)v19);
        return sub_1CCA0799C(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1CCA07D98();
      goto LABEL_7;
    }
    sub_1CCA076A0(v15, a4 & 1);
    v21 = sub_1CCA074F4(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CCA07638(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_1CCB642DC();
  __break(1u);
  return result;
}

unint64_t sub_1CCA074F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1CCB6433C();
  sub_1CCB639F4();
  v4 = sub_1CCB64384();
  return sub_1CCA07558(a1, a2, v4);
}

unint64_t sub_1CCA07558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1CCB642A0() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1CCB642A0() & 1) == 0);
    }
  }
  return v6;
}

_OWORD *sub_1CCA07638(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1CCA0799C(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_1CCA076A0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  sub_1CCA14E90(&qword_1ED8A8E40);
  v6 = sub_1CCB640A8();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_1CCA0799C(v24, v35);
      }
      else
      {
        sub_1CCA0CC30((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_1CCB6433C();
      sub_1CCB639F4();
      result = sub_1CCB64384();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_1CCA0799C(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

_OWORD *sub_1CCA0799C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1CCA079AC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  sub_1CCA14E90(&qword_1ED8AA378);
  v42 = a2;
  v6 = sub_1CCB640A8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1CCB6433C();
    sub_1CCB639F4();
    result = sub_1CCB64384();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CCA07CD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _QWORD v6[4];

  v3 = (uint64_t *)(v1 + qword_1ED8A7238);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  v4 = *v3;
  v6[3] = sub_1CCA14E90(&qword_1ED8AA320);
  v6[0] = v4;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)v6, 0x6F43746E65696C63, 0xED0000747865746ELL);
  return swift_endAccess();
}

void *sub_1CCA07D98()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_1CCA14E90(&qword_1ED8A8E40);
  v2 = *v0;
  v3 = sub_1CCB6409C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_1CCA0CC30(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1CCA0799C(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1CCA07F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  unint64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t aBlock[6];

  v65 = sub_1CCB63820();
  v64 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v63 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_1CCB63868();
  v61 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62);
  v60 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 64);
  v70 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v10 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_dataManager;
  v71 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  v13 = (_QWORD *)&unk_1ED8AA000;
  v14 = qword_1ED8AD7F8;
  *(_QWORD *)&v15 = 136315394;
  v67 = v15;
  v66 = MEMORY[0x1E0DEE9B8] + 8;
  v69 = a1;
  v68 = a2;
  while (1)
  {
    if (v9)
    {
      v16 = __clz(__rbit64(v9));
      v17 = (v9 - 1) & v9;
      v73 = v12;
      v18 = v16 | (v12 << 6);
      goto LABEL_22;
    }
    v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v19 >= v71)
      goto LABEL_34;
    v20 = *(_QWORD *)(v70 + 8 * v19);
    v21 = v12 + 1;
    if (!v20)
    {
      v21 = v12 + 2;
      if (v12 + 2 >= v71)
        goto LABEL_34;
      v20 = *(_QWORD *)(v70 + 8 * v21);
      if (!v20)
      {
        v21 = v12 + 3;
        if (v12 + 3 >= v71)
          goto LABEL_34;
        v20 = *(_QWORD *)(v70 + 8 * v21);
        if (!v20)
          break;
      }
    }
LABEL_21:
    v17 = (v20 - 1) & v20;
    v73 = v21;
    v18 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_22:
    v72 = v17;
    v23 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v18);
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v18);
    v25 = v13[198];
    swift_bridgeObjectRetain();
    if (v25 != -1)
      swift_once();
    v26 = sub_1CCB637FC();
    sub_1CCA16C20(v26, (uint64_t)v14);
    swift_bridgeObjectRetain_n();
    v27 = sub_1CCB637D8();
    v28 = sub_1CCB63D48();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc();
      v30 = swift_slowAlloc();
      aBlock[0] = v30;
      *(_DWORD *)v29 = v67;
      LOBYTE(v74) = v23;
      v31 = sub_1CCB639AC();
      *(_QWORD *)(v29 + 4) = sub_1CCA0CB60(v31, v32, aBlock);
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      sub_1CCB63604();
      sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      v33 = v14;
      v34 = v10;
      swift_bridgeObjectRetain();
      v35 = sub_1CCB638EC();
      v37 = v36;
      swift_bridgeObjectRelease();
      v38 = v35;
      v10 = v34;
      v14 = v33;
      *(_QWORD *)(v29 + 14) = sub_1CCA0CB60(v38, v37, aBlock);
      swift_bridgeObjectRelease_n();
      v13 = &unk_1ED8AA000;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v27, v28, "FMIPManager: didReceive updating state: %s: %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      v39 = v30;
      a2 = v68;
      a1 = v69;
      MEMORY[0x1D17B214C](v39, -1, -1);
      MEMORY[0x1D17B214C](v29, -1, -1);

      if (v23)
        goto LABEL_26;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      if (v23)
      {
LABEL_26:
        if (v23 == 1)
        {
          v40 = *(_QWORD *)(a2 + v10);
          v41 = *(_QWORD *)(v40 + 224);
          swift_retain();
          swift_bridgeObjectRetain();
          v42 = sub_1CCA086B8(v24, v41);
          swift_bridgeObjectRelease();
          if ((v42 & 1) == 0)
          {
            swift_beginAccess();
            v43 = swift_bridgeObjectRetain();
            v44 = sub_1CC9FCED0(v43, v24);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v40 + 80) = v44;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v40 + 224) = v24;
          }
        }
        else
        {
          v50 = *(_QWORD *)(a2 + v10);
          v51 = *(_QWORD *)(v50 + 216);
          swift_retain();
          swift_bridgeObjectRetain();
          v52 = sub_1CCA086B8(v24, v51);
          swift_bridgeObjectRelease();
          if ((v52 & 1) == 0)
          {
            swift_beginAccess();
            v53 = swift_bridgeObjectRetain();
            v54 = sub_1CC9F26C4(v53, v24);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v50 + 80) = v54;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v50 + 216) = v24;
          }
        }
LABEL_4:
        swift_release();
        goto LABEL_5;
      }
    }
    v45 = *(_QWORD *)(a2 + v10);
    v46 = *(_QWORD *)(v45 + 200);
    swift_retain();
    swift_bridgeObjectRetain();
    v47 = sub_1CCA086B8(v24, v46);
    swift_bridgeObjectRelease();
    if ((v47 & 1) != 0)
      goto LABEL_4;
    swift_beginAccess();
    v48 = swift_bridgeObjectRetain();
    v49 = sub_1CC9F2D2C(v48, v24);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v45 + 80) = v49;
    swift_release();
    swift_bridgeObjectRelease();
LABEL_5:
    v9 = v72;
    v12 = v73;
    result = swift_bridgeObjectRelease();
  }
  v22 = v12 + 4;
  if (v12 + 4 >= v71)
  {
LABEL_34:
    swift_release();
    aBlock[4] = (uint64_t)sub_1CCA241A4;
    aBlock[5] = a2;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CCA00C38;
    aBlock[3] = (uint64_t)&unk_1E88F7DA0;
    v55 = _Block_copy(aBlock);
    swift_retain();
    v56 = v60;
    sub_1CCB63844();
    v74 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    v57 = v63;
    v58 = v65;
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v56, v57, v55);
    _Block_release(v55);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v57, v58);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v56, v62);
    return swift_release();
  }
  v20 = *(_QWORD *)(v70 + 8 * v22);
  if (v20)
  {
    v21 = v12 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v21 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v21 >= v71)
      goto LABEL_34;
    v20 = *(_QWORD *)(v70 + 8 * v21);
    ++v22;
    if (v20)
      goto LABEL_21;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1CCA086B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  char v38;
  char v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  char *v44;
  int64_t v45;
  _BOOL4 v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v4 = sub_1CCB63604();
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  MEMORY[0x1E0C80A78](v4);
  v44 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1ED8A70D8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v40 - v11;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v45 = 0;
  v43 = a1;
  v15 = *(_QWORD *)(a1 + 64);
  v14 = a1 + 64;
  v13 = v15;
  v16 = 1 << *(_BYTE *)(v14 - 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v13;
  v41 = v14;
  v42 = (unint64_t)(v16 + 63) >> 6;
  v40 = v42 - 1;
  v19 = (uint64_t *)&unk_1EF9E43E8;
  v47 = (char *)&v40 - v11;
  v20 = (uint64_t)v44;
  v21 = v49;
  while (1)
  {
    if (v18)
    {
      v22 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v23 = v22 | (v45 << 6);
LABEL_8:
      v24 = v43;
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v9, *(_QWORD *)(v43 + 48) + *(_QWORD *)(v48 + 72) * v23, v49);
      v25 = *(_QWORD *)(v24 + 56);
      v26 = sub_1CCA14E90(v19);
      v9[*(int *)(v26 + 48)] = *(_BYTE *)(v25 + v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v9, 0, 1, v26);
      v12 = v47;
      goto LABEL_30;
    }
    v27 = v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v27 < v42)
    {
      v28 = *(_QWORD *)(v41 + 8 * v27);
      if (v28)
        goto LABEL_12;
      v29 = v45 + 2;
      ++v45;
      if (v27 + 1 < v42)
      {
        v28 = *(_QWORD *)(v41 + 8 * v29);
        if (v28)
          goto LABEL_15;
        v45 = v27 + 1;
        if (v27 + 2 < v42)
        {
          v28 = *(_QWORD *)(v41 + 8 * (v27 + 2));
          if (v28)
          {
            v27 += 2;
            goto LABEL_12;
          }
          v45 = v27 + 2;
          if (v27 + 3 < v42)
          {
            v28 = *(_QWORD *)(v41 + 8 * (v27 + 3));
            if (v28)
            {
              v27 += 3;
              goto LABEL_12;
            }
            v29 = v27 + 4;
            v45 = v27 + 3;
            if (v27 + 4 < v42)
              break;
          }
        }
      }
    }
LABEL_29:
    v30 = sub_1CCA14E90(v19);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v9, 1, 1, v30);
    v18 = 0;
LABEL_30:
    sub_1CC9C3EC0((uint64_t)v9, (uint64_t)v12, &qword_1ED8A70D8);
    v31 = sub_1CCA14E90(v19);
    v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v12, 1, v31);
    v46 = v32 == 1;
    if (v32 != 1)
    {
      v33 = v19;
      v34 = *(int *)(v31 + 48);
      v35 = v48;
      (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v20, v12, v21);
      v36 = v12[v34];
      v37 = sub_1CCAC8D64(v20);
      v39 = v38;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v20, v21);
      if ((v39 & 1) != 0)
      {
        v12 = v47;
        v19 = v33;
        if (v36 == *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + v37))
          continue;
      }
    }
    return v46;
  }
  v28 = *(_QWORD *)(v41 + 8 * v29);
  if (v28)
  {
LABEL_15:
    v27 = v29;
LABEL_12:
    v18 = (v28 - 1) & v28;
    v23 = __clz(__rbit64(v28)) + (v27 << 6);
    v45 = v27;
    goto LABEL_8;
  }
  while (1)
  {
    v27 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v27 >= v42)
    {
      v45 = v40;
      goto LABEL_29;
    }
    v28 = *(_QWORD *)(v41 + 8 * v27);
    ++v29;
    if (v28)
      goto LABEL_12;
  }
LABEL_38:
  __break(1u);
  return result;
}

unint64_t sub_1CCA08A6C(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  void *v44;
  id v45;
  id v46;
  double v47;
  double v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  double v62;
  double v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  id v90;
  id v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD v98[2];
  __int128 v99;
  char *v100;
  __int128 *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  unsigned __int8 v120;
  _BYTE v121[24];
  unint64_t v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  unint64_t v131;
  __int128 v132;
  _OWORD v133[18];

  v4 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v4);
  v110 = (char *)v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1EF9E21F8);
  MEMORY[0x1E0C80A78](v6);
  v109 = (char *)v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v8);
  v108 = (char *)v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB635B0();
  v112 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v103 = (char *)v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FMIPDevice();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v102 = (char *)v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v107 = (uint64_t)v98 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v117 = (uint64_t)v98 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v111 = (char *)v98 - v21;
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)v98 - v22;
  v24 = *a2;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v25 = sub_1CCB637FC();
  v26 = sub_1CCA16C20(v25, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v106 = v26;
  v27 = sub_1CCB637D8();
  v28 = sub_1CCB63D48();
  v29 = os_log_type_enabled(v27, v28);
  v118 = v23;
  if (v29)
  {
    v30 = swift_slowAlloc();
    v119 = v10;
    v31 = a1;
    v32 = v30;
    v33 = swift_slowAlloc();
    *(_QWORD *)&v133[0] = v33;
    *(_DWORD *)v32 = 134218242;
    v126 = *(_QWORD *)(v31 + 16);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2080;
    LOBYTE(v126) = v24;
    v34 = FMIPLocationType.rawValue.getter();
    v126 = sub_1CCA0CB60(v34, v35, (uint64_t *)v133);
    v23 = v118;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v27, v28, "FMIPDataManager: updateDevicesLocations %ld type %s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v33, -1, -1);
    v36 = v32;
    a1 = v31;
    v10 = v119;
    MEMORY[0x1D17B214C](v36, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v37 = (uint64_t)v111;
  v38 = *(_QWORD *)(a1 + 16);
  v40 = (uint64_t)v102;
  v39 = v103;
  if (!v38)
    return MEMORY[0x1E0DEE9D8];
  v105 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v41 = a1 + v105;
  v98[0] = a1;
  swift_bridgeObjectRetain();
  sub_1CCA30EF4(v133);
  v42 = v41;
  v104 = *(_QWORD *)(v13 + 72);
  v100 = (char *)&v124 + 4;
  v101 = &v125;
  v119 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v43 = 136315650;
  v99 = v43;
  v98[1] = MEMORY[0x1E0DEE9B8] + 8;
  do
  {
    v115 = v42;
    v116 = v38;
    sub_1CCA0BEEC(v42, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v132 = 0uLL;
    v131 = 0;
    v130 = 0uLL;
    v129 = 0;
    v44 = (void *)*((_QWORD *)v23 + 33);
    if (v44)
    {
      LOBYTE(v124) = 16;
      v45 = v44;
      v46 = objc_msgSend(v45, sel_timestamp);
      sub_1CCB63580();

      sub_1CCB6355C();
      v48 = v47;
      (*(void (**)(char *, uint64_t))(v112 + 8))(v39, v10);
      v49 = objc_msgSend(v45, sel_floor);
      if (v49)
      {
        v50 = v49;
        v51 = (uint64_t)objc_msgSend(v49, sel_level);

      }
      else
      {
        v51 = -1;
      }
      sub_1CC9FB3D4(v45, (char *)&v124, v48 < -3600.0, 0, 1, (uint64_t)&v126, (double)v51);
      v52 = v127;
      v53 = v128;
      v54 = 256;
      if (!BYTE1(v126))
        v54 = 0;
      v55 = v54 | v126;
      v56 = 0x10000;
      if (!BYTE2(v126))
        v56 = 0;
      v57 = v55 | v56 | ((unint64_t)BYTE3(v126) << 24);
      swift_beginAccess();
      v58 = (void *)v132;
      v131 = v57;
      *(_QWORD *)&v132 = v52;
      *((_QWORD *)&v132 + 1) = v53;

      v23 = v118;
    }
    v59 = (void *)*((_QWORD *)v23 + 36);
    if (v59)
    {
      LOBYTE(v124) = 16;
      v60 = v59;
      v61 = objc_msgSend(v60, sel_timestamp);
      sub_1CCB63580();

      sub_1CCB6355C();
      v63 = v62;
      (*(void (**)(char *, uint64_t))(v112 + 8))(v39, v10);
      v64 = objc_msgSend(v60, sel_floor);
      if (v64)
      {
        v65 = v64;
        v66 = (uint64_t)objc_msgSend(v64, sel_level);

      }
      else
      {
        v66 = -1;
      }
      sub_1CC9FB3D4(v60, (char *)&v124, v63 < -3600.0, 0, 1, (uint64_t)&v126, (double)v66);
      v67 = v127;
      v68 = v128;
      v69 = 256;
      if (!BYTE1(v126))
        v69 = 0;
      v70 = v69 | v126;
      v71 = 0x10000;
      if (!BYTE2(v126))
        v71 = 0;
      v72 = v70 | v71 | ((unint64_t)BYTE3(v126) << 24);
      swift_beginAccess();
      v73 = (void *)v130;
      v129 = v72;
      *(_QWORD *)&v130 = v67;
      *((_QWORD *)&v130 + 1) = v68;

      v23 = v118;
    }
    sub_1CCA0BEEC((uint64_t)v23, v37, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v74 = sub_1CCB637D8();
    v75 = sub_1CCB63D48();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = v37;
      v77 = swift_slowAlloc();
      v78 = swift_slowAlloc();
      v126 = v78;
      *(_DWORD *)v77 = v99;
      v80 = *(_QWORD *)(v76 + 64);
      v79 = *(_QWORD *)(v76 + 72);
      swift_bridgeObjectRetain();
      v124 = sub_1CCA0CB60(v80, v79, &v126);
      v40 = (uint64_t)v102;
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA0BF30(v76, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      *(_WORD *)(v77 + 12) = 1024;
      swift_beginAccess();
      LODWORD(v124) = (_QWORD)v132 != 0;
      sub_1CCB63E44();
      *(_WORD *)(v77 + 18) = 1024;
      swift_beginAccess();
      LODWORD(v124) = (_QWORD)v130 != 0;
      v23 = v118;
      sub_1CCB63E44();
      _os_log_impl(&dword_1CC9BF000, v74, v75, "FMIPDataManager: updateDevicesLocations device %s location: %{BOOL}d, crowdsourcedLocation: %{BOOL}d", (uint8_t *)v77, 0x18u);
      swift_arrayDestroy();
      v81 = v78;
      v39 = v103;
      MEMORY[0x1D17B214C](v81, -1, -1);
      MEMORY[0x1D17B214C](v77, -1, -1);
    }
    else
    {
      sub_1CCA0BF30(v37, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    }

    v82 = v107;
    sub_1CCA0BEEC((uint64_t)v23, v107, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CC9C3EC0((uint64_t)v133, (uint64_t)&v126, &qword_1ED8A71C0);
    swift_beginAccess();
    v124 = v129;
    v114 = v130;
    v125 = v130;
    swift_beginAccess();
    v122 = v131;
    v113 = v132;
    v123 = v132;
    v83 = type metadata accessor for FMIPItemGroup();
    memset(v121, 0, sizeof(v121));
    v84 = (uint64_t)v108;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v108, 1, 1, v83);
    v120 = 7;
    v85 = type metadata accessor for FMIPDeviceConnectedState(0);
    v86 = (uint64_t)v109;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v109, 1, 1, v85);
    v87 = type metadata accessor for FMIPDeviceLostModeMetadata();
    v88 = (uint64_t)v110;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v110, 1, 1, v87);
    v89 = (void *)v114;
    v90 = (id)v113;
    v91 = v89;
    v92 = v117;
    FMIPDevice.init(device:historicalLocations:address:crowdSourcedLocation:location:shiftedLocation:crowdSourcedLocating:itemGroup:deviceWithYou:findingCapable:beaconType:deviceConnectedState:lostModeMetadata:)(v82, 0, (char *)&v126, &v124, &v122, (unsigned int (*)(char *, uint64_t, uint64_t))v121, 2, v84, v117, 2u, 2, &v120, v86, v88);
    sub_1CCA0BEEC(v92, v40, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v37 = (uint64_t)v111;
      v93 = v119;
    }
    else
    {
      v93 = sub_1CCA0C178(0, *(_QWORD *)(v119 + 16) + 1, 1, v119);
      v37 = (uint64_t)v111;
    }
    v95 = *(_QWORD *)(v93 + 16);
    v94 = *(_QWORD *)(v93 + 24);
    v23 = v118;
    if (v95 >= v94 >> 1)
      v93 = sub_1CCA0C178(v94 > 1, v95 + 1, 1, v93);
    *(_QWORD *)(v93 + 16) = v95 + 1;
    v96 = v104;
    v119 = v93;
    sub_1CC9FED60(v40, v93 + v105 + v95 * v104, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v117, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);

    v42 = v115 + v96;
    v38 = v116 - 1;
  }
  while (v116 != 1);
  swift_bridgeObjectRelease();
  return v119;
}

void sub_1CCA0953C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  double v66;
  id v67;
  char *v68;
  double v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  void *v90;
  double v91;
  uint64_t v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  id v138;
  uint64_t v139;
  char *v140;
  id v141;
  void *v142;
  void *v143;
  id v144;
  void (*v145)(char *, uint64_t);
  char *v146;
  __n128 v147;
  unint64_t v148;
  char v149;
  id v150;
  id v151;
  char *v152;
  double v153;
  double v154;
  char *v155;
  uint64_t v156;
  id v157;
  char *v158;
  double v159;
  double v160;
  void (*v161)(uint64_t, char *, uint64_t, __n128);
  uint64_t v162;
  id v163;
  int isUniquelyReferenced_nonNull_native;
  char v165;
  unint64_t v166;
  uint64_t v167;
  _BOOL8 v168;
  uint64_t v169;
  char v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  char v174;
  char v175;
  int v176;
  uint64_t v177;
  void (*v178)(unint64_t, uint64_t);
  void *v179;
  int64_t v180;
  uint64_t v181;
  uint64_t v182;
  BOOL v183;
  uint64_t v184;
  void (*v185)(uint64_t, uint64_t);
  uint64_t v186;
  void *v187;
  double v188;
  uint64_t v189;
  char v190;
  _QWORD v191[2];
  uint64_t v192;
  __int128 *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  __int128 *v207;
  void (*v208)(char *, uint64_t);
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  id v219;
  unint64_t v220;
  char *v221;
  uint64_t v222;
  __int128 *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  id v229;
  char v230;
  __int128 v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  id v237;
  double v238;
  uint64_t v239;
  uint64_t v240;

  v4 = v3;
  v198 = a2;
  v7 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v191 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB63604();
  v214 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v213 = (uint64_t)v191 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v191 - v13;
  v15 = type metadata accessor for FMIPItem();
  v196 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v209 = (_QWORD *)((char *)v191 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_1CCA14E90(&qword_1ED8A8C30);
  v18 = MEMORY[0x1E0C80A78](v17);
  v202 = (uint64_t)v191 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v211 = (uint64_t)v191 - v20;
  v228 = type metadata accessor for FMIPDevice();
  v200 = *(_QWORD *)(v228 - 8);
  v21 = MEMORY[0x1E0C80A78](v228);
  v23 = (char *)v191 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)v191 - v25;
  v27 = MEMORY[0x1E0C80A78](v24);
  v222 = (uint64_t)v191 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v212 = (uint64_t)v191 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v215 = (uint64_t)v191 - v32;
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)v191 - v33;
  v227 = sub_1CCB635B0();
  v203 = *(_QWORD *)(v227 - 8);
  v35 = MEMORY[0x1E0C80A78](v227);
  v201 = (char *)v191 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x1E0C80A78](v35);
  v205 = (char *)v191 - v38;
  MEMORY[0x1E0C80A78](v37);
  v226 = (char *)v191 - v39;
  v40 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration);
  if ((*(_BYTE *)(v40 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems) & 1) != 0)
  {
    v194 = OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems;
    v195 = v40;
    v192 = a3;
    v217 = v14;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v44 = sub_1CCB637FC();
    sub_1CCA16C20(v44, (uint64_t)qword_1ED8AD7F8);
    swift_bridgeObjectRetain();
    v45 = sub_1CCB637D8();
    v46 = sub_1CCB63D48();
    v47 = os_log_type_enabled(v45, v46);
    v204 = v9;
    if (v47)
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v48 = 134217984;
      v236 = *(_QWORD **)(a1 + 16);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v45, v46, "FMIPManager: updating locating devices lastOnlineLocationInfo: %ld", v48, 0xCu);
      MEMORY[0x1D17B214C](v48, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v49 = sub_1CCB631E4();
    v239 = v49;
    v240 = sub_1CC9CAA38(&qword_1ED8A8B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
    v50 = sub_1CCA01CC0((uint64_t *)&v236);
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v50, *MEMORY[0x1E0D21250], v49);
    LOBYTE(v49) = MEMORY[0x1D17B0748](&v236);
    sub_1CCA01CA0((uint64_t)&v236);
    v197 = v4;
    v199 = a1;
    v210 = v10;
    v218 = v23;
    if ((v49 & 1) != 0)
    {
      v51 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconRefreshingController);
      if (*(_BYTE *)(v51 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_shouldUseBeaconsOptimizationSPI) == 1)
      {
        v225 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconRefreshingController;
        v52 = OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy;
        v53 = *(_QWORD *)(v51 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy + 16);
        swift_bridgeObjectRetain();
        goto LABEL_73;
      }
    }
    v54 = v226;
    sub_1CCB635A4();
    sub_1CCB63568();
    v56 = v55;
    v208 = *(void (**)(char *, uint64_t))(v203 + 8);
    v208(v54, v227);
    v57 = MEMORY[0x1E0DEE9D8];
    v235 = MEMORY[0x1E0DEE9D8];
    v58 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    v225 = v58;
    if (!v58)
      goto LABEL_63;
    v59 = 0;
    v60 = (*(unsigned __int8 *)(v200 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v200 + 80);
    v229 = *(id *)(v200 + 72);
    v220 = v60;
    v224 = a1 + v60;
    v223 = (__int128 *)(v34 + 280);
    v193 = (__int128 *)(v215 + 280);
    v207 = (__int128 *)(v212 + 280);
    v221 = v26;
    while (1)
    {
      sub_1CCA0BEEC(v224 + (_QWORD)v229 * v59, (uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v61 = *((_QWORD *)v34 + 34);
      v233 = *((_OWORD *)v34 + 16);
      v234 = v61;
      v62 = *((_QWORD *)v34 + 37);
      v231 = *v223;
      v232 = v62;
      v63 = (*((_QWORD *)v34 + 27) >> 5) & 1;
      v64 = (uint64_t)&v34[*(int *)(v228 + 128)];
      v230 = v34[80];
      sub_1CCA11CFC((uint64_t *)&v233, (uint64_t *)&v231, v63, v64, (unsigned __int8 *)&v230, (double *)&v236);
      v65 = v237;
      if (!v237)
        goto LABEL_56;
      v66 = v238;
      v216 = (unint64_t)v236;
      v67 = objc_msgSend(v237, sel_timestamp);
      v68 = v226;
      sub_1CCB63580();

      sub_1CCB63568();
      v70 = v69;
      v208(v68, v227);
      v71 = v211;
      sub_1CC9EAB74(v64, v211, &qword_1ED8A8C30);
      v72 = type metadata accessor for FMIPItemGroup();
      v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 48);
      if (v73(v71, 1, v72) == 1)
        break;
      v75 = FMIPItemGroup.shouldDisplaySeparatedLocation.getter();
      sub_1CCA0BF30(v71, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      v74 = v215;
      sub_1CCA0BEEC((uint64_t)v34, v215, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v76 = v202;
      if ((v75 & 1) == 0)
        goto LABEL_25;
      v77 = v74 + *(int *)(v228 + 128);
      sub_1CC9EAB74(v77, v202, &qword_1ED8A8C30);
      if (v73(v76, 1, v72) == 1)
      {
        sub_1CC9C3E84(v76, &qword_1ED8A8C30);
        goto LABEL_25;
      }
      v78 = *(_QWORD *)(v76 + 40);
      swift_bridgeObjectRetain();
      sub_1CCA0BF30(v76, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      v79 = *(_QWORD *)(v74 + 272);
      v233 = *(_OWORD *)(v74 + 256);
      v234 = v79;
      v80 = *(_QWORD *)(v74 + 296);
      v231 = *v193;
      v232 = v80;
      v81 = (*(_QWORD *)(v74 + 216) >> 5) & 1;
      v230 = *(_BYTE *)(v74 + 80);
      sub_1CCA11CFC((uint64_t *)&v233, (uint64_t *)&v231, v81, v77, (unsigned __int8 *)&v230, (double *)&v236);
      v82 = v237;

      if (v82)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      v100 = *(_QWORD *)(v78 + 16);
      if (v100)
      {
        v101 = v78;
        v102 = v196;
        v103 = v101 + ((*(unsigned __int8 *)(v196 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v196 + 80));
        v191[1] = v101;
        swift_bridgeObjectRetain();
        v206 = *(_QWORD *)(v102 + 72);
        v104 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        do
        {
          v105 = v209;
          sub_1CCA0BEEC(v103, (uint64_t)v209, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          v107 = v105[48];
          v106 = (void *)v105[49];
          v108 = v105[50];
          v219 = v106;
          sub_1CCA0BF30((uint64_t)v105, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          if (v106)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v104 = sub_1CCAC9858(0, v104[2] + 1, 1, v104);
            v110 = v104[2];
            v109 = v104[3];
            if (v110 >= v109 >> 1)
              v104 = sub_1CCAC9858((_QWORD *)(v109 > 1), v110 + 1, 1, v104);
            v104[2] = v110 + 1;
            v111 = &v104[3 * v110];
            *((_BYTE *)v111 + 32) = v107 & 1;
            *((_BYTE *)v111 + 33) = BYTE1(v107) & 1;
            *((_BYTE *)v111 + 34) = BYTE2(v107) & 1;
            *((_BYTE *)v111 + 35) = BYTE3(v107);
            v111[5] = v219;
            v111[6] = v108;
          }
          v103 += v206;
          --v100;
        }
        while (v100);
        swift_bridgeObjectRelease_n();
        v10 = v210;
      }
      else
      {
        swift_bridgeObjectRelease();
        v104 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v112 = v104[2];
      swift_bridgeObjectRelease();
      sub_1CCA0BF30(v215, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v83 = v212;
      sub_1CCA0BEEC((uint64_t)v34, v212, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v84 = v222;
      if (v112)
      {
        sub_1CCA0BF30(v83, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        sub_1CCA0BEEC((uint64_t)v34, v84, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v90 = *(void **)(v84 + 264);
        if (!v90)
          goto LABEL_54;
        goto LABEL_28;
      }
LABEL_26:
      v85 = *(_QWORD *)(v83 + 272);
      v233 = *(_OWORD *)(v83 + 256);
      v234 = v85;
      v86 = *(_QWORD *)(v83 + 296);
      v231 = *v207;
      v232 = v86;
      v87 = (*(_QWORD *)(v83 + 216) >> 5) & 1;
      v88 = v83 + *(int *)(v228 + 128);
      v230 = *(_BYTE *)(v83 + 80);
      sub_1CCA11CFC((uint64_t *)&v233, (uint64_t *)&v231, v87, v88, (unsigned __int8 *)&v230, (double *)&v236);
      v89 = v237;

      sub_1CCA0BF30(v83, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      sub_1CCA0BEEC((uint64_t)v34, v84, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      if (!v89 || (v90 = *(void **)(v84 + 264)) == 0)
      {
LABEL_54:

        sub_1CCA0BF30(v84, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        goto LABEL_55;
      }
LABEL_28:
      v91 = *(double *)(v84 + 272);
      v92 = *(_QWORD *)(v84 + 256);
      sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A7F30);
      v93 = v65;
      v94 = v90;
      if ((sub_1CCB63DF0() & 1) == 0
        || v66 != v91
        || ((((v92 & 1) == 0) ^ v216) & 1) == 0
        || ((v92 & 0x100) == 0) == ((v216 >> 8) & 1)
        || ((v92 & 0x10000) == 0) == ((v216 >> 16) & 1))
      {

        sub_1CCA0BF30(v222, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v10 = v210;
LABEL_55:
        v23 = v218;
LABEL_56:
        v113 = (uint64_t)v221;
        sub_1CC9FED60((uint64_t)v34, (uint64_t)v221, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v114 = v235;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1CCA1F730(0, *(_QWORD *)(v114 + 16) + 1, 1);
          v114 = v235;
        }
        v116 = *(_QWORD *)(v114 + 16);
        v115 = *(_QWORD *)(v114 + 24);
        if (v116 >= v115 >> 1)
        {
          sub_1CCA1F730(v115 > 1, v116 + 1, 1);
          v114 = v235;
        }
        *(_QWORD *)(v114 + 16) = v116 + 1;
        sub_1CC9FED60(v113, v114 + v220 + v116 * (_QWORD)v229, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        goto LABEL_61;
      }
      LOBYTE(v236) = BYTE3(v216);
      LOBYTE(v233) = BYTE3(v92);
      v95 = FMIPLocationType.rawValue.getter();
      v97 = v96;
      if (v95 == FMIPLocationType.rawValue.getter() && v97 == v98)
      {

        swift_bridgeObjectRelease_n();
        sub_1CCA0BF30(v222, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v10 = v210;
        v23 = v218;
        if (v56 - v70 >= 180.0)
          goto LABEL_56;
      }
      else
      {
        v99 = sub_1CCB642A0();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1CCA0BF30(v222, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        v10 = v210;
        v23 = v218;
        if ((v99 & 1) == 0 || v56 - v70 >= 180.0)
          goto LABEL_56;
      }
      sub_1CCA0BF30((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_61:
      if (++v59 == v225)
      {
        v57 = v235;
LABEL_63:
        swift_bridgeObjectRelease();
        v117 = sub_1CCA971E4(v57);
        swift_release();
        v118 = sub_1CCA96FB4((uint64_t)v117);
        swift_bridgeObjectRelease();
        v119 = *(_QWORD *)(v195 + v194);
        if ((v119 & 2) != 0)
        {
          v121 = sub_1CCA97564(v198);
          v120 = sub_1CCA96FB4(v121);
          swift_bridgeObjectRelease();
        }
        else
        {
          v120 = MEMORY[0x1E0DEE9D8];
        }
        v122 = MEMORY[0x1E0DEE9D8];
        if ((v119 & 1) != 0)
        {
          v236 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v123 = *(_QWORD *)(v192 + 16);
          if (v123)
          {
            v124 = *(_QWORD *)(type metadata accessor for FMIPItemGroup() - 8);
            v125 = (*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80);
            v126 = *(_QWORD *)(v124 + 72);
            swift_bridgeObjectRetain();
            v127 = v125 + 40;
            do
            {
              v128 = swift_bridgeObjectRetain();
              sub_1CCAC8BBC(v128);
              v127 += v126;
              --v123;
            }
            while (v123);
            swift_bridgeObjectRelease();
            v122 = (unint64_t)v236;
          }
          v129 = sub_1CCA97564(v122);
          swift_bridgeObjectRelease();
          v122 = sub_1CCA96FB4(v129);
          swift_bridgeObjectRelease();
        }
        v236 = (_QWORD *)v118;
        sub_1CCAC8BA8(v120);
        sub_1CCAC8BA8(v122);
        v53 = sub_1CCA7A88C((uint64_t)v236);
        swift_bridgeObjectRelease();
        v4 = v197;
        v225 = OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconRefreshingController;
        v51 = *(_QWORD *)(v197 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_beaconRefreshingController);
        v52 = OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy;
        a1 = v199;
LABEL_73:
        v130 = *(_QWORD **)(v51 + v52 + 24);
        swift_bridgeObjectRetain();
        sub_1CCB635A4();
        v131 = *(_QWORD *)(a1 + 16);
        if (!v131)
        {
LABEL_104:
          v186 = *(_QWORD *)(v4 + v225) + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy;
          v187 = *(void **)(v186 + 8);
          v188 = *(double *)(v186 + 16);
          v189 = *(_QWORD *)(v186 + 24);
          v190 = *(_BYTE *)(v186 + 32);
          LOBYTE(v236) = *(_BYTE *)v186;
          v237 = v187;
          v238 = v188;
          v239 = v189;
          LOBYTE(v240) = v190;
          *(_BYTE *)v186 = (_BYTE)v236;
          *(_QWORD *)(v186 + 16) = v53;
          *(_QWORD *)(v186 + 24) = v130;
          *(_BYTE *)(v186 + 32) = 0;
          swift_bridgeObjectRetain_n();
          swift_retain();
          swift_bridgeObjectRelease();
          sub_1CCA0ABD8((unsigned __int8 *)&v236);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v203 + 8))(v205, v227);
          swift_bridgeObjectRelease();
          return;
        }
        v224 = v53;
        v132 = a1 + ((*(unsigned __int8 *)(v200 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v200 + 80));
        v133 = *(_QWORD *)(v200 + 72);
        swift_bridgeObjectRetain();
        v134 = (uint64_t)v204;
        v135 = v214;
        v136 = (uint64_t)v217;
        v228 = v133;
        while (2)
        {
          sub_1CCA0BEEC(v132, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
          if (!*((_QWORD *)v23 + 3))
          {
            sub_1CCA0BF30((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
            goto LABEL_76;
          }
          sub_1CCB635BC();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v134, 1, v10) == 1)
          {
            sub_1CCA0BF30((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
            sub_1CC9C3E84(v134, &qword_1ED8A8EF8);
            goto LABEL_76;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v135 + 32))(v136, v134, v10);
          v137 = (void *)*((_QWORD *)v23 + 33);
          if (v137)
          {
            v229 = v137;
            v138 = objc_msgSend(v229, sel_timestamp);
            v139 = v10;
            v140 = v226;
            sub_1CCB63580();

            v141 = objc_allocWithZone(MEMORY[0x1E0D89910]);
            v142 = (void *)sub_1CCB63538();
            v143 = (void *)sub_1CCB63538();
            v144 = objc_msgSend(v141, sel_initWithDate_updatedOn_, v142, v143);

            v145 = *(void (**)(char *, uint64_t))(v203 + 8);
            v146 = v140;
            v10 = v139;
            v145(v146, v227);
            if (v130[2])
            {
              v148 = sub_1CCAC8D64((uint64_t)v217);
              if ((v149 & 1) != 0)
              {
                v150 = *(id *)(v130[7] + 8 * v148);
                v151 = objc_msgSend(v144, sel_timestamp);
                v152 = v226;
                sub_1CCB63580();

                sub_1CCB63568();
                v154 = v153;
                v155 = v152;
                v156 = v227;
                v145(v155, v227);
                v157 = objc_msgSend(v150, sel_timestamp);
                v158 = v201;
                sub_1CCB63580();

                sub_1CCB63568();
                v160 = v159;

                v10 = v210;
                v145(v158, v156);
                v147.n128_f64[0] = v154 - v160;
                if (v154 - v160 < 180.0)
                {
                  v135 = v214;
                  v136 = (uint64_t)v217;
                  (*(void (**)(char *, uint64_t, double))(v214 + 8))(v217, v10, v147.n128_f64[0]);

                  v23 = v218;
                  sub_1CCA0BF30((uint64_t)v218, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
                  v134 = (uint64_t)v204;
                  v133 = v228;
                  goto LABEL_76;
                }
              }
            }
            v161 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v214 + 16);
            v162 = v213;
            v161(v213, v217, v10, v147);
            v163 = v144;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v236 = v130;
            v166 = sub_1CCAC8D64(v162);
            v167 = v130[2];
            v168 = (v165 & 1) == 0;
            v169 = v167 + v168;
            v133 = v228;
            if (__OFADD__(v167, v168))
            {
              __break(1u);
LABEL_106:
              __break(1u);
              goto LABEL_107;
            }
            v170 = v165;
            if (v130[3] >= v169)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                sub_1CCAECDC0();
            }
            else
            {
              sub_1CCAE9068(v169, isUniquelyReferenced_nonNull_native);
              v171 = sub_1CCAC8D64(v213);
              if ((v170 & 1) != (v172 & 1))
              {
                sub_1CCB642DC();
                __break(1u);
                return;
              }
              v166 = v171;
            }
            v130 = v236;
            if ((v170 & 1) != 0)
            {
              v181 = v236[7];

              *(_QWORD *)(v181 + 8 * v166) = v163;
              v135 = v214;
            }
            else
            {
              v236[(v166 >> 6) + 8] |= 1 << v166;
              v135 = v214;
              ((void (*)(unint64_t, uint64_t, uint64_t))v161)(v130[6] + *(_QWORD *)(v214 + 72) * v166, v213, v210);
              *(_QWORD *)(v130[7] + 8 * v166) = v163;
              v182 = v130[2];
              v183 = __OFADD__(v182, 1);
              v184 = v182 + 1;
              if (v183)
                goto LABEL_106;
              v130[2] = v184;
            }
            swift_bridgeObjectRelease();
            v185 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
            v10 = v210;
            v185(v213, v210);

            v136 = (uint64_t)v217;
            v185((uint64_t)v217, v10);
            v23 = v218;
          }
          else
          {
            swift_bridgeObjectRetain();
            v173 = sub_1CCAC8D64(v136);
            v175 = v174;
            swift_bridgeObjectRelease();
            if ((v175 & 1) != 0)
            {
              v176 = swift_isUniquelyReferenced_nonNull_native();
              v236 = v130;
              if (!v176)
              {
                sub_1CCAECDC0();
                v130 = v236;
              }
              v177 = v214;
              v178 = *(void (**)(unint64_t, uint64_t))(v214 + 8);
              v178(v130[6] + *(_QWORD *)(v214 + 72) * v173, v10);
              v130 = v236;
              v179 = *(void **)(v236[7] + 8 * v173);
              v180 = v173;
              v135 = v177;
              sub_1CCB0A2A4(v180, (uint64_t)v236);

              swift_bridgeObjectRelease();
            }
            else
            {
              v135 = v214;
              v178 = *(void (**)(unint64_t, uint64_t))(v214 + 8);
            }
            v136 = (uint64_t)v217;
            v178((unint64_t)v217, v10);
          }
          sub_1CCA0BF30((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
          v134 = (uint64_t)v204;
LABEL_76:
          v132 += v133;
          if (!--v131)
          {
            swift_bridgeObjectRelease();
            v4 = v197;
            v53 = v224;
            goto LABEL_104;
          }
          continue;
        }
      }
    }
    sub_1CC9C3E84(v71, &qword_1ED8A8C30);
    v74 = v215;
    sub_1CCA0BEEC((uint64_t)v34, v215, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_25:
    sub_1CCA0BF30(v74, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v83 = v212;
    sub_1CCA0BEEC((uint64_t)v34, v212, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v84 = v222;
    goto LABEL_26;
  }
  if (qword_1ED8AA630 != -1)
LABEL_107:
    swift_once();
  v41 = sub_1CCB637FC();
  sub_1CCA16C20(v41, (uint64_t)qword_1ED8AD7F8);
  v229 = (id)sub_1CCB637D8();
  v42 = sub_1CCB63D24();
  if (os_log_type_enabled((os_log_t)v229, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v43 = 0;
    _os_log_impl(&dword_1CC9BF000, (os_log_t)v229, v42, "FMIPManager: not calling updating locating devices", v43, 2u);
    MEMORY[0x1D17B214C](v43, -1, -1);
  }

}

void sub_1CCA0ABD8(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  char v20;
  char v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t aBlock[6];
  uint64_t v33;

  v2 = v1;
  v4 = sub_1CCB63820();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63868();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v2 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy;
  v13 = (_QWORD *)&unk_1ED8AD000;
  if (*(unsigned __int8 *)(v2 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy) == *a1
    && *((_QWORD *)a1 + 1) == *(_QWORD *)(v12 + 8))
  {
    v31 = v5;
    v14 = *(_QWORD *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 24);
    v16 = *(unsigned __int8 *)(v12 + 32);
    v29 = a1[32];
    v30 = v16;
    v19 = a1 + 16;
    v17 = *((_QWORD *)a1 + 2);
    v18 = *((_QWORD *)v19 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((sub_1CCA0B01C(v17, v14) & 1) != 0)
    {
      sub_1CCA0B3F0(v18, v15);
      v21 = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = v31;
      v13 = &unk_1ED8AD000;
      if ((v21 & 1) != 0 && v30 == (v29 & 1))
        goto LABEL_10;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = v31;
      v13 = &unk_1ED8AD000;
    }
  }
  if (*(_BYTE *)(v2 + v13[245]) == 1)
  {
    v31 = v5;
    aBlock[4] = (uint64_t)sub_1CCB4CC80;
    aBlock[5] = v2;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CCA00C38;
    aBlock[3] = (uint64_t)&unk_1E8900F48;
    v22 = _Block_copy(aBlock);
    swift_retain();
    sub_1CCB63844();
    v33 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v11, v7, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_release();
    return;
  }
LABEL_10:
  if (qword_1ED8AA630 != -1)
    swift_once();
  v23 = sub_1CCB637FC();
  sub_1CCA16C20(v23, (uint64_t)qword_1ED8AD7F8);
  swift_retain();
  v24 = sub_1CCB637D8();
  v25 = sub_1CCB63D24();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc();
    v27 = swift_slowAlloc();
    aBlock[0] = v27;
    *(_DWORD *)v26 = 136315394;
    v33 = sub_1CCA0CB60(0xD000000000000010, 0x80000001CCB7ECD0, aBlock);
    sub_1CCB63E44();
    *(_WORD *)(v26 + 12) = 1024;
    LODWORD(v33) = *(unsigned __int8 *)(v2 + v13[245]);
    sub_1CCB63E44();
    swift_release();
    _os_log_impl(&dword_1CC9BF000, v24, v25, "FMIPBeaconRefreshingController: %s - Won't update: isRefreshing: %{BOOL}d", (uint8_t *)v26, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v27, -1, -1);
    MEMORY[0x1D17B214C](v26, -1, -1);

  }
  else
  {

    swift_release();
  }
}

uint64_t sub_1CCA0B01C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;

  v4 = sub_1CCB63604();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v40 = (char *)&v33 - v9;
  v10 = sub_1CCA14E90(&qword_1ED8A8EF8);
  result = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 56);
    v34 = a1;
    v35 = a1 + 56;
    v16 = 1 << *(_BYTE *)(a1 + 32);
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v18 = v17 & v15;
    v36 = (unint64_t)(v16 + 63) >> 6;
    v39 = a2 + 56;
    v33 = v13;
    if (!v18)
      goto LABEL_8;
LABEL_7:
    v38 = (v18 - 1) & v18;
    for (i = __clz(__rbit64(v18)) | (v14 << 6); ; i = __clz(__rbit64(v21)) + (v14 << 6))
    {
      v23 = *(_QWORD *)(v5 + 72);
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      v24(v13, *(_QWORD *)(a1 + 48) + v23 * i, v4);
      v25 = 1;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
        return v25;
      v37 = v14;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v40, v13, v4);
      sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      v26 = sub_1CCB63934();
      v27 = -1 << *(_BYTE *)(a2 + 32);
      v28 = v26 & ~v27;
      if (((*(_QWORD *)(v39 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
        break;
      v29 = a2;
      v30 = ~v27;
      while (1)
      {
        v24(v8, *(_QWORD *)(v29 + 48) + v28 * v23, v4);
        sub_1CC9CAA38(&qword_1EF9E1E28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
        v31 = sub_1CCB63958();
        v32 = *(void (**)(char *, uint64_t))(v5 + 8);
        v32(v8, v4);
        if ((v31 & 1) != 0)
          break;
        v28 = (v28 + 1) & v30;
        if (((*(_QWORD *)(v39 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
          goto LABEL_32;
      }
      result = ((uint64_t (*)(char *, uint64_t))v32)(v40, v4);
      a2 = v29;
      v13 = v33;
      a1 = v34;
      v14 = v37;
      v18 = v38;
      if (v38)
        goto LABEL_7;
LABEL_8:
      v20 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
LABEL_37:
        __break(1u);
        return result;
      }
      if (v20 >= v36)
        goto LABEL_35;
      v21 = *(_QWORD *)(v35 + 8 * v20);
      ++v14;
      if (!v21)
      {
        v14 = v20 + 1;
        if (v20 + 1 >= v36)
          goto LABEL_35;
        v21 = *(_QWORD *)(v35 + 8 * v14);
        if (!v21)
        {
          v14 = v20 + 2;
          if (v20 + 2 >= v36)
            goto LABEL_35;
          v21 = *(_QWORD *)(v35 + 8 * v14);
          if (!v21)
          {
            v22 = v20 + 3;
            if (v22 >= v36)
            {
LABEL_35:
              v25 = 1;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v13, 1, 1, v4);
              return v25;
            }
            v21 = *(_QWORD *)(v35 + 8 * v22);
            if (!v21)
            {
              while (1)
              {
                v14 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_37;
                if (v14 >= v36)
                  goto LABEL_35;
                v21 = *(_QWORD *)(v35 + 8 * v14);
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v14 = v22;
          }
        }
      }
LABEL_21:
      v38 = (v21 - 1) & v21;
    }
    v32 = *(void (**)(char *, uint64_t))(v5 + 8);
LABEL_32:
    v32(v40, v4);
  }
  return 0;
}

void sub_1CCA0B3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  unint64_t v38;
  char v39;
  char v40;
  id v41;
  char v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  _BOOL4 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = sub_1CCB63604();
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  MEMORY[0x1E0C80A78](v4);
  v49 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1EF9E43B0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v43 - v10;
  if (a1 == a2)
  {
    v51 = 1;
    return;
  }
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
  {
LABEL_33:
    v51 = 0;
    return;
  }
  v47 = a1;
  v48 = a2;
  v50 = 0;
  v14 = *(_QWORD *)(a1 + 64);
  v13 = a1 + 64;
  v12 = v14;
  v15 = 1 << *(_BYTE *)(v13 - 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v12;
  v45 = v13;
  v46 = (unint64_t)(v15 + 63) >> 6;
  v44 = v46 - 1;
  v18 = v53;
  v19 = (uint64_t)v49;
  while (1)
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v21 = (v17 - 1) & v17;
      v22 = v20 | (v50 << 6);
      v23 = v48;
LABEL_8:
      v24 = v47;
      (*(void (**)(char *, unint64_t, uint64_t))(v53 + 16))(v9, *(_QWORD *)(v47 + 48) + *(_QWORD *)(v53 + 72) * v22, v54);
      v25 = *(void **)(*(_QWORD *)(v24 + 56) + 8 * v22);
      v26 = sub_1CCA14E90(&qword_1EF9E43B8);
      *(_QWORD *)&v9[*(int *)(v26 + 48)] = v25;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v9, 0, 1, v26);
      v27 = v25;
      goto LABEL_27;
    }
    v28 = v50 + 1;
    v23 = v48;
    if (__OFADD__(v50, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v28 < v46)
    {
      v29 = *(_QWORD *)(v45 + 8 * v28);
      if (v29)
        goto LABEL_12;
      v30 = v50 + 2;
      ++v50;
      if (v28 + 1 < v46)
      {
        v29 = *(_QWORD *)(v45 + 8 * v30);
        if (v29)
          goto LABEL_15;
        v50 = v28 + 1;
        if (v28 + 2 < v46)
        {
          v29 = *(_QWORD *)(v45 + 8 * (v28 + 2));
          if (v29)
          {
            v28 += 2;
            goto LABEL_12;
          }
          v30 = v28 + 3;
          v50 = v28 + 2;
          if (v28 + 3 < v46)
            break;
        }
      }
    }
LABEL_26:
    v31 = sub_1CCA14E90(&qword_1EF9E43B8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v9, 1, 1, v31);
    v21 = 0;
LABEL_27:
    sub_1CC9C3EC0((uint64_t)v9, (uint64_t)v11, &qword_1EF9E43B0);
    v32 = sub_1CCA14E90(&qword_1EF9E43B8);
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v11, 1, v32);
    v51 = v33 == 1;
    if (v33 == 1)
      return;
    v52 = v21;
    v34 = *(int *)(v32 + 48);
    v35 = v54;
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v19, v11, v54);
    v36 = v11;
    v37 = *(void **)&v11[v34];
    v38 = sub_1CCAC8D64(v19);
    v40 = v39;
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v35);
    if ((v40 & 1) == 0)
    {

      goto LABEL_33;
    }
    sub_1CC9C30A8(0, &qword_1EF9E43C0);
    v41 = *(id *)(*(_QWORD *)(v23 + 56) + 8 * v38);
    v42 = sub_1CCB63DF0();

    v11 = v36;
    v17 = v52;
    if ((v42 & 1) == 0)
      return;
  }
  v29 = *(_QWORD *)(v45 + 8 * v30);
  if (v29)
  {
LABEL_15:
    v28 = v30;
LABEL_12:
    v21 = (v29 - 1) & v29;
    v22 = __clz(__rbit64(v29)) + (v28 << 6);
    v50 = v28;
    goto LABEL_8;
  }
  while (1)
  {
    v28 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v28 >= v46)
    {
      v50 = v44;
      goto LABEL_26;
    }
    v29 = *(_QWORD *)(v45 + 8 * v28);
    ++v30;
    if (v29)
      goto LABEL_12;
  }
LABEL_36:
  __break(1u);
}

uint64_t sub_1CCA0B7C0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  _DWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unsigned __int8 v81;
  _BYTE v82[24];
  _QWORD v83[3];
  uint64_t v84[3];
  _QWORD v85[36];
  _OWORD v86[18];

  v4 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v4);
  v72 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1EF9E21F8);
  MEMORY[0x1E0C80A78](v6);
  v71 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v8);
  v70 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FMIPDevice();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v74 = (uint64_t)&v64 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v69 = (uint64_t)&v64 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v64 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v64 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v64 - v25;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v27 = sub_1CCB637FC();
  sub_1CCA16C20(v27, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain_n();
  v28 = sub_1CCB637D8();
  v29 = sub_1CCB63D48();
  v30 = v29;
  v31 = os_log_type_enabled(v28, v29);
  v75 = a2;
  v76 = v14;
  v80 = v21;
  if (v31)
  {
    v32 = swift_slowAlloc();
    v79 = v11;
    v33 = a1;
    v34 = (uint8_t *)v32;
    v78 = swift_slowAlloc();
    *(_QWORD *)&v86[0] = v78;
    LODWORD(v77) = v30;
    v35 = v34;
    *(_DWORD *)v34 = 136315138;
    v73 = v34 + 4;
    v36 = swift_bridgeObjectRetain();
    v37 = MEMORY[0x1D17B10B4](v36, MEMORY[0x1E0DEA968]);
    v39 = v38;
    swift_bridgeObjectRelease();
    v40 = v37;
    v14 = v76;
    v85[0] = sub_1CCA0CB60(v40, v39, (uint64_t *)v86);
    a1 = v33;
    v11 = v79;
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    v21 = v80;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v28, (os_log_type_t)v77, "FMIPRefreshingController: updating devices with discoverIds :%s", v35, 0xCu);
    v41 = v78;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v41, -1, -1);
    MEMORY[0x1D17B214C](v35, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v79 = *(_QWORD *)(a1 + 16);
  if (!v79)
    return MEMORY[0x1E0DEE9D8];
  v77 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v78 = a1 + v77;
  v42 = *(_QWORD *)(v11 + 72);
  v66 = a1;
  swift_bridgeObjectRetain();
  v43 = 0;
  v44 = MEMORY[0x1E0DEE9D8];
  v65 = v75 + 9;
  while (1)
  {
    sub_1CCA0BEEC(v78 + v42 * v43, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC((uint64_t)v26, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v45 = *((_QWORD *)v26 + 30);
    sub_1CCA0BEEC((uint64_t)v26, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if ((v45 & 0x2000000) != 0)
      break;
    sub_1CCA0BF30((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_22:
    sub_1CCA0BEEC((uint64_t)v24, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v44 = sub_1CCA0C178(0, *(_QWORD *)(v44 + 16) + 1, 1, v44);
    v59 = *(_QWORD *)(v44 + 16);
    v58 = *(_QWORD *)(v44 + 24);
    if (v59 >= v58 >> 1)
      v44 = sub_1CCA0C178(v58 > 1, v59 + 1, 1, v44);
    ++v43;
    *(_QWORD *)(v44 + 16) = v59 + 1;
    sub_1CC9FED60((uint64_t)v14, v44 + v77 + v59 * v42, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v21 = v80;
    if (v43 == v79)
    {
      swift_bridgeObjectRelease();
      return v44;
    }
  }
  v46 = *((_QWORD *)v21 + 7);
  result = sub_1CCA0BF30((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if (!v46)
    goto LABEL_22;
  v48 = *((_QWORD *)v26 + 7);
  if (!v48)
    goto LABEL_44;
  v49 = v75[2];
  if (!v49)
    goto LABEL_19;
  v50 = *((_QWORD *)v26 + 6);
  if (v75[4] == v50 && v48 == v75[5] || (sub_1CCB642A0() & 1) != 0)
    goto LABEL_16;
  if (v49 == 1)
    goto LABEL_19;
  if (v75[6] == v50 && v48 == v75[7] || (result = sub_1CCB642A0(), (result & 1) != 0))
  {
LABEL_16:
    v14 = v76;
    if (v26[217] < 0)
      goto LABEL_22;
    LODWORD(v73) = 1;
LABEL_21:
    sub_1CCA0BEEC((uint64_t)v26, v74, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA30EF4(v86);
    sub_1CC9C3EC0((uint64_t)v86, (uint64_t)v85, &qword_1ED8A71C0);
    memset(v84, 0, sizeof(v84));
    memset(v83, 0, sizeof(v83));
    v51 = type metadata accessor for FMIPItemGroup();
    memset(v82, 0, sizeof(v82));
    v52 = (uint64_t)v70;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v70, 1, 1, v51);
    v81 = 7;
    v53 = type metadata accessor for FMIPDeviceConnectedState(0);
    v54 = (uint64_t)v71;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v71, 1, 1, v53);
    v55 = type metadata accessor for FMIPDeviceLostModeMetadata();
    v56 = v72;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v72, 1, 1, v55);
    v63 = (uint64_t)v56;
    v57 = v69;
    FMIPDevice.init(device:historicalLocations:address:crowdSourcedLocation:location:shiftedLocation:crowdSourcedLocating:itemGroup:deviceWithYou:findingCapable:beaconType:deviceConnectedState:lostModeMetadata:)(v74, 0, (char *)v85, v84, v83, (unsigned int (*)(char *, uint64_t, uint64_t))v82, 2, v52, v69, v73, 2, &v81, v54, v63);
    sub_1CCA0BF30((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CC9FED60(v57, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v14 = v76;
    goto LABEL_22;
  }
  if (v49 == 2)
  {
LABEL_19:
    v14 = v76;
    if ((v26[217] & 0x80) == 0)
      goto LABEL_22;
    LODWORD(v73) = 0;
    goto LABEL_21;
  }
  v60 = v65;
  v61 = 2;
  while (!__OFADD__(v61, 1))
  {
    if (*(v60 - 1) == v50 && v48 == *v60)
      goto LABEL_16;
    v73 = v60;
    v67 = v61 + 1;
    v68 = v61;
    result = sub_1CCB642A0();
    if ((result & 1) != 0)
      goto LABEL_16;
    v60 = v73 + 4;
    v61 = v68 + 1;
    if (v67 == v49)
      goto LABEL_19;
  }
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_1CCA0BEEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1CCA0BF30(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1CCA0BF6C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1CCA14E90(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = j__malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_1CCB64078();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1CCA0C18C(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_1CCA0C178(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1CCA0BF6C(a1, a2, a3, a4, &qword_1ED8A7FB0, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
}

uint64_t sub_1CCA0C18C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

BOOL sub_1CCA0C2A4()
{
  return (sub_1CCA0C2D0() & 1) == 0;
}

id sub_1CCA0C2D0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  void (*v12)(char *, uint64_t);
  id v13;
  void *v14;
  id v15;
  uint64_t v17;

  v1 = *v0;
  v2 = sub_1CCB63490();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v17 - v8;
  (*(void (**)(uint64_t))(v1 + 160))(v7);
  v10 = *(_QWORD *)(v1 + 80);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v10, AssociatedConformanceWitness);
  sub_1CCB63454();
  swift_bridgeObjectRelease();
  v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v6, v2);
  v13 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_1CCB63478();
  v14 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v13, sel_fileExistsAtPath_, v14);

  v12(v9, v2);
  return v15;
}

void FMIPDeviceImageCacheRequest.fileName.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v1 = sub_1CCB63298();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  v5 = v0[1];
  v8 = v0[2];
  v7 = v0[3];
  v10 = v0[4];
  v9 = v0[5];
  v28 = *((unsigned __int8 *)v0 + 48);
  v27 = *((unsigned __int8 *)v0 + 49);
  v32 = 0;
  v33 = 0xE000000000000000;
  v30 = v6;
  v31 = v5;
  swift_bridgeObjectRetain();
  sub_1CCB63250();
  sub_1CCA0C964();
  v11 = sub_1CCB63E74();
  v13 = v12;
  v29 = *(void (**)(char *, uint64_t))(v2 + 8);
  v29(v4, v1);
  swift_bridgeObjectRelease();
  if (v13)
  {
    sub_1CCA14E90(&qword_1EF9DFD30);
    v14 = swift_allocObject();
    v26 = v8;
    v15 = v14;
    *(_OWORD *)(v14 + 16) = xmmword_1CCB677E0;
    *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v14 + 64) = sub_1CCA0C920();
    *(_QWORD *)(v15 + 32) = v11;
    *(_QWORD *)(v15 + 40) = v13;
    sub_1CCB639A0();
    sub_1CCB63A24();
    v8 = v26;
    swift_bridgeObjectRelease();
  }
  v30 = v8;
  v31 = v7;
  swift_bridgeObjectRetain();
  sub_1CCB63250();
  v16 = MEMORY[0x1E0DEA968];
  v17 = sub_1CCB63E74();
  v19 = v18;
  v29(v4, v1);
  swift_bridgeObjectRelease();
  if (v19)
  {
    sub_1CCA14E90(&qword_1EF9DFD30);
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1CCB677E0;
    *(_QWORD *)(v20 + 56) = v16;
    *(_QWORD *)(v20 + 64) = sub_1CCA0C920();
    *(_QWORD *)(v20 + 32) = v17;
    *(_QWORD *)(v20 + 40) = v19;
    sub_1CCB639A0();
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
  }
  if (v9)
  {
    v30 = v10;
    v31 = v9;
    swift_bridgeObjectRetain();
    sub_1CCB63250();
    v21 = MEMORY[0x1E0DEA968];
    v22 = sub_1CCB63E74();
    v24 = v23;
    v29(v4, v1);
    swift_bridgeObjectRelease();
    if (v24)
    {
      sub_1CCA14E90(&qword_1EF9DFD30);
      v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_1CCB677E0;
      *(_QWORD *)(v25 + 56) = v21;
      *(_QWORD *)(v25 + 64) = sub_1CCA0C920();
      *(_QWORD *)(v25 + 32) = v22;
      *(_QWORD *)(v25 + 40) = v24;
      sub_1CCB639A0();
      sub_1CCB63A24();
      swift_bridgeObjectRelease();
    }
  }
  sub_1CCB63A24();
  __asm { BR              X10 }
}

uint64_t sub_1CCA0C72C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 - 128) = 0x656E696C66666FLL;
  *(_QWORD *)(v1 - 120) = 0xE700000000000000;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCA14E90(&qword_1EF9DFD30);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 2016);
  *(_QWORD *)(v3 + 56) = MEMORY[0x1E0DEF040];
  *(_QWORD *)(v3 + 64) = sub_1CCA0C9A8();
  *(_QWORD *)(v3 + 32) = v2;
  sub_1CCB639A0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return *(_QWORD *)(v1 - 112);
}

unint64_t sub_1CCA0C920()
{
  unint64_t result;

  result = qword_1EF9DFD38;
  if (!qword_1EF9DFD38)
  {
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EF9DFD38);
  }
  return result;
}

unint64_t sub_1CCA0C964()
{
  unint64_t result;

  result = qword_1EF9E62B8;
  if (!qword_1EF9E62B8)
  {
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EF9E62B8);
  }
  return result;
}

unint64_t sub_1CCA0C9A8()
{
  unint64_t result;

  result = qword_1EF9E6838;
  if (!qword_1EF9E6838)
  {
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEF098], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1EF9E6838);
  }
  return result;
}

uint64_t sub_1CCA0C9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = sub_1CCB63490();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA0CA90();
  sub_1CCB63448();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1CCA0CA90()
{
  if (qword_1ED8A8D00 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63424();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA0CB60(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1CCA0CC6C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1CCA0CC30((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1CCA0CC30((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1CCA01CA0((uint64_t)v12);
  return v7;
}

uint64_t sub_1CCA0CC30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1CCA0CC6C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1CCB63E50();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1CCA0CE24(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1CCB6400C();
  if (!v8)
  {
    sub_1CCB64078();
    __break(1u);
LABEL_17:
    result = sub_1CCB640C0();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1CCA0CE24(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1CCA0CEB8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1CCA1B2B4(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1CCA1B2B4(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1CCA0CEB8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1CCA0D02C(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1CCB63FC4();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1CCB64078();
      __break(1u);
LABEL_10:
      v2 = sub_1CCB63A3C();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1CCB640C0();
    __break(1u);
LABEL_14:
    result = sub_1CCB64078();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1CCA0D02C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1CCA14E90(&qword_1ED8A8E08);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t type metadata accessor for FMIPItem()
{
  uint64_t result;

  result = qword_1ED8A8DB0;
  if (!qword_1ED8A8DB0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t static FMIPDevice.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _BYTE *v205;
  uint64_t v206;
  _BYTE *v207;
  uint64_t v208;
  uint64_t v209;
  BOOL v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  _BYTE *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _BYTE *v225;
  _BYTE *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _BYTE *v231;
  _BYTE *v232;
  _BYTE *v233;
  uint64_t v234;
  _BYTE *v235;
  uint64_t v236;
  _BYTE *v237;
  _BYTE *v238;
  _BYTE *v239;
  uint64_t v240;
  _BYTE *v241;
  _BYTE *v242;
  _BYTE *v243;
  _BYTE *v244;
  _BYTE *v245;
  uint64_t v246;
  _BYTE *v247;
  double *v248;
  double *v249;
  uint64_t v250;
  _BYTE *v251;
  _BYTE *v252;
  uint64_t v253;
  _BYTE *v254;
  _BYTE *v255;
  _BYTE *v256;
  uint64_t v257;
  uint64_t v258;
  _BYTE *v259;
  _BYTE *v260;
  _BYTE *v261;
  _BYTE *v262;
  uint64_t v263;
  _BYTE *v264;
  uint64_t v265;
  _BYTE *v266;
  uint64_t v267;
  uint64_t v268;
  _BYTE *v269;
  _BYTE *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _BYTE *v274;
  _BYTE *v275;
  _QWORD *v276;
  _BYTE *v277;
  _BYTE *v278;
  _BYTE *v279;
  _BYTE *v280;
  _BYTE *v281;
  _BYTE *v282;
  _BYTE *v283;
  _BYTE *v284;
  _BYTE *v285;
  _BYTE *v286;
  _BYTE *v287;
  _BYTE *v288;
  _BYTE *v289;
  _BYTE *v290;
  _BYTE *v291;
  _BYTE *v292;
  _BYTE *v293;
  _BYTE *v294;
  uint64_t v295;
  _BYTE *v296;
  _BYTE *v297;
  _BYTE *v298;
  uint64_t v299;
  uint64_t v300;
  _BYTE *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _BYTE *v305;
  uint64_t v306;
  _BYTE *v307;
  _BYTE *v308;
  char v309;
  char v311;
  uint64_t v312;
  uint64_t v313;
  _BYTE *v314;
  uint64_t v315;
  char v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char v321;
  char v322;
  char v323;
  char v324;
  char v325;
  char v326;
  char v327;
  double v328;
  double v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _BYTE *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _BYTE *v337;
  uint64_t v338;
  int v339;
  int v340;
  uint64_t v341;
  _BYTE *v342;
  uint64_t v343;
  int v344;
  _BYTE *v345;
  _BYTE *v346;
  void (*v347)(_BYTE *, uint64_t);
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  _BYTE *v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int (*v354)(uint64_t, uint64_t, uint64_t);
  int v355;
  uint64_t v356;
  _BYTE *v357;
  _BYTE *v358;
  void (*v359)(_BYTE *, uint64_t);
  uint64_t v360;
  uint64_t v361;
  _BYTE *v362;
  uint64_t v363;
  _BYTE *v364;
  uint64_t v365;
  unsigned int (*v366)(uint64_t, uint64_t, uint64_t);
  uint64_t v367;
  _BYTE *v368;
  uint64_t v369;
  _BYTE *v370;
  char v371;
  void (*v372)(_BYTE *, uint64_t);
  int *v373;
  uint64_t v374;
  uint64_t v375;
  int *v376;
  int v377;
  int *v378;
  int v379;
  int *v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  void *v384;
  void *v385;
  uint64_t v386;
  uint64_t v387;
  double v388;
  id v389;
  id v390;
  id v391;
  void *v392;
  void *v393;
  uint64_t v394;
  uint64_t v395;
  double v396;
  id v397;
  id v398;
  id v399;
  uint64_t v400;
  double v401;
  uint64_t v402;
  int *v403;
  uint64_t v404;
  double v405;
  double v406;
  double v407;
  double v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  void *v412;
  id v413;
  id v414;
  char v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  _BYTE *v419;
  uint64_t v420;
  uint64_t v421;
  _BYTE *v422;
  uint64_t v423;
  unsigned int (*v424)(uint64_t, uint64_t, uint64_t);
  _BYTE *v425;
  _BYTE *v426;
  char v427;
  uint64_t v428;
  uint64_t v429;
  _BYTE *v430;
  uint64_t v431;
  unsigned int (*v432)(uint64_t, uint64_t, uint64_t);
  _BYTE *v433;
  _BYTE *v434;
  char v435;
  uint64_t v436;
  uint64_t v437;
  _BYTE *v438;
  uint64_t v439;
  unsigned int (*v440)(uint64_t, uint64_t, uint64_t);
  uint64_t *v441;
  _BYTE *v442;
  _BYTE *v443;
  char v444;
  char *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  _BYTE *v450;
  uint64_t v451;
  unsigned int (*v452)(uint64_t, uint64_t, uint64_t);
  _BYTE *v453;
  _BYTE *v454;
  char v455;
  char v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  _BYTE *v461;
  uint64_t v462;
  unsigned int (*v463)(uint64_t, uint64_t, uint64_t);
  uint64_t *v464;
  uint64_t *v465;
  char v466;
  int *v467;
  int v468;
  char v469;
  int *v470;
  int v471;
  int *v472;
  int v473;
  uint64_t v474;
  _QWORD *v475;
  uint64_t v476;
  _QWORD *v477;
  uint64_t v478;
  char v479;
  uint64_t v480;
  uint64_t v481;
  _BYTE *v482;
  uint64_t v483;
  uint64_t v484;
  _BYTE *v485;
  uint64_t v486;
  _BYTE *v487;
  void (*v488)(_BYTE *, uint64_t);
  _BYTE v489[12];
  int v490;
  uint64_t v491;
  uint64_t v492;
  _BYTE *v493;
  uint64_t v494;
  _BYTE *v495;
  _BYTE *v496;
  uint64_t v497;
  uint64_t v498;
  _BYTE *v499;
  uint64_t v500;
  _BYTE *v501;
  _BYTE *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  char *v506;
  char *v507;
  _BYTE *v508;
  _BYTE *v509;
  _BYTE *v510;
  uint64_t v511;
  uint64_t v512;
  _BYTE *v513;
  uint64_t v514;
  _BYTE *v515;
  _BYTE *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t *v519;
  uint64_t v520;
  uint64_t *v521;
  _BYTE *v522;
  _BYTE *v523;
  _BYTE *v524;
  _BYTE *v525;
  _BYTE *v526;
  _BYTE *v527;
  _BYTE *v528;
  _BYTE *v529;
  _BYTE *v530;
  uint64_t v531;
  uint64_t v532;
  int *v533;
  _BYTE *v534;
  uint64_t v535;
  _BYTE *v536;
  _BYTE *v537;
  _BYTE *v538;
  _BYTE *v539;
  _BYTE *v540;
  _BYTE *v541;
  _BYTE *v542;
  _BYTE *v543;
  _BYTE *v544;
  _BYTE *v545;
  _BYTE *v546;
  _BYTE *v547;
  _BYTE *v548;
  _BYTE *v549;
  _BYTE *v550;
  _BYTE *v551;
  _BYTE *v552;
  double *v553;
  double *v554;
  _BYTE *v555;
  _BYTE *v556;
  _BYTE *v557;
  _BYTE *v558;
  _BYTE *v559;
  _BYTE *v560;
  _BYTE *v561;
  _BYTE *v562;
  _BYTE *v563;
  uint64_t v564;
  _BYTE *v565;
  uint64_t v566;
  uint64_t v567;
  _BYTE *v568;
  _BYTE *v569;
  _BYTE *v570;
  _BYTE *v571;
  _BYTE *v572;
  _BYTE *v573;
  _BYTE *v574;
  _BYTE *v575;
  _BYTE *v576;
  _BYTE *v577;
  _BYTE *v578;
  _BYTE *v579;
  _BYTE *v580;
  _BYTE *v581;
  _BYTE *v582;
  _BYTE *v583;
  _BYTE *v584;
  uint64_t v585;
  uint64_t v586;
  _BYTE *v587;
  uint64_t v588;
  _BYTE *v589;
  uint64_t v590;
  _BYTE *v591;
  _BYTE *v592;
  _BYTE *v593;
  _BYTE *v594;
  _BYTE *v595;
  _BYTE *v596;
  _BYTE *v597;
  _BYTE *v598;
  _BYTE *v599;
  _BYTE *v600;
  _QWORD *v601;
  _BYTE *v602;
  _BYTE *v603;
  _BYTE *v604;
  _BYTE *v605;
  _QWORD *v606;
  _BYTE *v607;
  _BYTE *v608;
  _BYTE *v609;
  _BYTE *v610;
  _BYTE *v611;
  _BYTE *v612;
  _BYTE *v613;
  uint64_t v614;
  _BYTE *v615;
  uint64_t v616;
  _BYTE v617[288];
  _BYTE v618[288];
  _QWORD v619[36];
  _OWORD v620[36];
  _QWORD v621[36];
  double v622[72];
  unsigned __int8 v623[288];
  __int128 v624;
  uint64_t v625;
  __int128 v626;
  double v627;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v4 = (_QWORD *)v1;
  v520 = type metadata accessor for FMIPItemGroup();
  v518 = *(_QWORD *)(v520 - 8);
  MEMORY[0x1E0C80A78](v520);
  v519 = (uint64_t *)&v489[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v6);
  v521 = (uint64_t *)&v489[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v517 = sub_1CCA14E90(&qword_1EF9E5340);
  MEMORY[0x1E0C80A78](v517);
  v522 = &v489[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v514 = type metadata accessor for FMIPEraseMetadata();
  v512 = *(_QWORD *)(v514 - 8);
  MEMORY[0x1E0C80A78](v514);
  v513 = &v489[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_1CCA14E90(&qword_1ED8A73F8);
  MEMORY[0x1E0C80A78](v10);
  v515 = &v489[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v511 = sub_1CCA14E90(&qword_1ED8A7400);
  MEMORY[0x1E0C80A78](v511);
  v516 = &v489[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for FMIPLockMetadata();
  v504 = *(_QWORD *)(v13 - 8);
  v505 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v506 = &v489[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x1E0C80A78](v14);
  v507 = &v489[-v17];
  MEMORY[0x1E0C80A78](v16);
  v508 = &v489[-v18];
  v19 = sub_1CCA14E90(&qword_1ED8A73B8);
  MEMORY[0x1E0C80A78](v19);
  v509 = &v489[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v503 = sub_1CCA14E90(&qword_1ED8A73C0);
  MEMORY[0x1E0C80A78](v503);
  v510 = &v489[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v500 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v498 = *(_QWORD *)(v500 - 8);
  MEMORY[0x1E0C80A78](v500);
  v499 = &v489[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v23);
  v501 = &v489[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v497 = sub_1CCA14E90(&qword_1ED8A7AA8);
  MEMORY[0x1E0C80A78](v497);
  v502 = &v489[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v494 = type metadata accessor for FMIPPlaySoundMetadata();
  v492 = *(_QWORD *)(v494 - 8);
  MEMORY[0x1E0C80A78](v494);
  v493 = &v489[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = sub_1CCA14E90(&qword_1ED8A7460);
  MEMORY[0x1E0C80A78](v27);
  v495 = &v489[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v491 = sub_1CCA14E90(&qword_1ED8A7468);
  MEMORY[0x1E0C80A78](v491);
  v496 = &v489[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v532 = sub_1CCB635B0();
  v535 = *(_QWORD *)(v532 - 8);
  MEMORY[0x1E0C80A78](v532);
  v528 = &v489[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v31 = sub_1CCA14E90(&qword_1ED8A7130);
  v32 = MEMORY[0x1E0C80A78](v31);
  v523 = &v489[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v34 = MEMORY[0x1E0C80A78](v32);
  v525 = &v489[-v35];
  v36 = MEMORY[0x1E0C80A78](v34);
  v526 = &v489[-v37];
  MEMORY[0x1E0C80A78](v36);
  v529 = &v489[-v38];
  v531 = sub_1CCA14E90(&qword_1ED8A7138);
  v39 = MEMORY[0x1E0C80A78](v531);
  v524 = &v489[-((v40 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v41 = MEMORY[0x1E0C80A78](v39);
  v527 = &v489[-v42];
  v43 = MEMORY[0x1E0C80A78](v41);
  v530 = &v489[-v44];
  MEMORY[0x1E0C80A78](v43);
  v534 = &v489[-v45];
  v533 = (int *)type metadata accessor for FMIPDevice();
  v46 = MEMORY[0x1E0C80A78](v533);
  v594 = &v489[-((v47 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v48 = MEMORY[0x1E0C80A78](v46);
  v595 = &v489[-v49];
  v50 = MEMORY[0x1E0C80A78](v48);
  v592 = &v489[-v51];
  v52 = MEMORY[0x1E0C80A78](v50);
  v593 = &v489[-v53];
  v54 = MEMORY[0x1E0C80A78](v52);
  v591 = &v489[-v55];
  v56 = MEMORY[0x1E0C80A78](v54);
  v57 = MEMORY[0x1E0C80A78](v56);
  v589 = &v489[-v58];
  v59 = MEMORY[0x1E0C80A78](v57);
  v60 = MEMORY[0x1E0C80A78](v59);
  v587 = &v489[-v61];
  v62 = MEMORY[0x1E0C80A78](v60);
  v63 = MEMORY[0x1E0C80A78](v62);
  v65 = &v489[-v64];
  v66 = MEMORY[0x1E0C80A78](v63);
  v67 = MEMORY[0x1E0C80A78](v66);
  v583 = &v489[-v68];
  v69 = MEMORY[0x1E0C80A78](v67);
  v584 = &v489[-v70];
  v71 = MEMORY[0x1E0C80A78](v69);
  v581 = &v489[-v72];
  v73 = MEMORY[0x1E0C80A78](v71);
  v582 = &v489[-v74];
  v75 = MEMORY[0x1E0C80A78](v73);
  v580 = &v489[-v76];
  v77 = MEMORY[0x1E0C80A78](v75);
  v579 = &v489[-v78];
  v79 = MEMORY[0x1E0C80A78](v77);
  v577 = &v489[-v80];
  v81 = MEMORY[0x1E0C80A78](v79);
  v578 = &v489[-v82];
  v83 = MEMORY[0x1E0C80A78](v81);
  v576 = &v489[-v84];
  v85 = MEMORY[0x1E0C80A78](v83);
  v596 = &v489[-v86];
  v87 = MEMORY[0x1E0C80A78](v85);
  v574 = &v489[-v88];
  v89 = MEMORY[0x1E0C80A78](v87);
  v575 = &v489[-v90];
  v91 = MEMORY[0x1E0C80A78](v89);
  v599 = &v489[-v92];
  v93 = MEMORY[0x1E0C80A78](v91);
  v573 = &v489[-v94];
  v95 = MEMORY[0x1E0C80A78](v93);
  v572 = &v489[-v96];
  v97 = MEMORY[0x1E0C80A78](v95);
  v602 = &v489[-v98];
  v99 = MEMORY[0x1E0C80A78](v97);
  v570 = &v489[-v100];
  v101 = MEMORY[0x1E0C80A78](v99);
  v571 = &v489[-v102];
  v103 = MEMORY[0x1E0C80A78](v101);
  v568 = &v489[-v104];
  v105 = MEMORY[0x1E0C80A78](v103);
  v569 = &v489[-v106];
  v107 = MEMORY[0x1E0C80A78](v105);
  v597 = &v489[-v108];
  v109 = MEMORY[0x1E0C80A78](v107);
  v598 = &v489[-v110];
  v111 = MEMORY[0x1E0C80A78](v109);
  v601 = &v489[-v112];
  v113 = MEMORY[0x1E0C80A78](v111);
  v600 = &v489[-v114];
  v115 = MEMORY[0x1E0C80A78](v113);
  v116 = MEMORY[0x1E0C80A78](v115);
  v117 = MEMORY[0x1E0C80A78](v116);
  v119 = &v489[-v118];
  v120 = MEMORY[0x1E0C80A78](v117);
  v565 = &v489[-v121];
  v122 = MEMORY[0x1E0C80A78](v120);
  v123 = MEMORY[0x1E0C80A78](v122);
  v550 = &v489[-v124];
  v125 = MEMORY[0x1E0C80A78](v123);
  v563 = &v489[-v126];
  v127 = MEMORY[0x1E0C80A78](v125);
  v129 = &v489[-v128];
  v130 = MEMORY[0x1E0C80A78](v127);
  v561 = &v489[-v131];
  v132 = MEMORY[0x1E0C80A78](v130);
  v134 = &v489[-v133];
  v135 = MEMORY[0x1E0C80A78](v132);
  v604 = &v489[-v136];
  v137 = MEMORY[0x1E0C80A78](v135);
  v605 = &v489[-v138];
  v139 = MEMORY[0x1E0C80A78](v137);
  v560 = &v489[-v140];
  v141 = MEMORY[0x1E0C80A78](v139);
  v607 = &v489[-v142];
  v143 = MEMORY[0x1E0C80A78](v141);
  v608 = &v489[-v144];
  v145 = MEMORY[0x1E0C80A78](v143);
  v559 = &v489[-v146];
  v147 = MEMORY[0x1E0C80A78](v145);
  v558 = &v489[-v148];
  v149 = MEMORY[0x1E0C80A78](v147);
  v557 = &v489[-v150];
  v151 = MEMORY[0x1E0C80A78](v149);
  v556 = &v489[-v152];
  v153 = MEMORY[0x1E0C80A78](v151);
  v555 = &v489[-v154];
  v155 = MEMORY[0x1E0C80A78](v153);
  v554 = (double *)&v489[-v156];
  v157 = MEMORY[0x1E0C80A78](v155);
  v553 = (double *)&v489[-v158];
  v159 = MEMORY[0x1E0C80A78](v157);
  v549 = &v489[-v160];
  v161 = MEMORY[0x1E0C80A78](v159);
  v551 = &v489[-v162];
  v163 = MEMORY[0x1E0C80A78](v161);
  v548 = &v489[-v164];
  v165 = MEMORY[0x1E0C80A78](v163);
  v547 = &v489[-v166];
  v167 = MEMORY[0x1E0C80A78](v165);
  v536 = &v489[-v168];
  v169 = MEMORY[0x1E0C80A78](v167);
  v611 = &v489[-v170];
  v171 = MEMORY[0x1E0C80A78](v169);
  v610 = &v489[-v172];
  v173 = MEMORY[0x1E0C80A78](v171);
  v546 = &v489[-v174];
  v175 = MEMORY[0x1E0C80A78](v173);
  v545 = &v489[-v176];
  v177 = MEMORY[0x1E0C80A78](v175);
  v613 = &v489[-v178];
  v179 = MEMORY[0x1E0C80A78](v177);
  v612 = &v489[-v180];
  v181 = MEMORY[0x1E0C80A78](v179);
  v544 = &v489[-v182];
  v183 = MEMORY[0x1E0C80A78](v181);
  v614 = (uint64_t)&v489[-v184];
  v185 = MEMORY[0x1E0C80A78](v183);
  v543 = &v489[-v186];
  v187 = MEMORY[0x1E0C80A78](v185);
  v541 = &v489[-v188];
  v189 = MEMORY[0x1E0C80A78](v187);
  v542 = &v489[-v190];
  v191 = MEMORY[0x1E0C80A78](v189);
  v540 = &v489[-v192];
  v193 = MEMORY[0x1E0C80A78](v191);
  v539 = &v489[-v194];
  v195 = MEMORY[0x1E0C80A78](v193);
  v615 = &v489[-v196];
  v197 = MEMORY[0x1E0C80A78](v195);
  v538 = &v489[-v198];
  v199 = MEMORY[0x1E0C80A78](v197);
  v616 = (uint64_t)&v489[-v200];
  v201 = MEMORY[0x1E0C80A78](v199);
  v537 = &v489[-v202];
  v203 = MEMORY[0x1E0C80A78](v201);
  v205 = &v489[-v204];
  MEMORY[0x1E0C80A78](v203);
  v207 = &v489[-v206];
  v208 = v4[1];
  v209 = v3[1];
  v210 = *v4 == *v3;
  v606 = v3;
  v590 = v211;
  v588 = v212;
  v586 = v213;
  v603 = v65;
  v585 = v214;
  v567 = v215;
  v566 = v216;
  v564 = v217;
  v562 = v129;
  v609 = v134;
  v552 = v119;
  if (v210 && v208 == v209)
  {
    sub_1CCA0BEEC((uint64_t)v4, (uint64_t)&v489[-v206], (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC((uint64_t)v3, (uint64_t)v205, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  }
  else
  {
    v218 = sub_1CCB642A0();
    sub_1CCA0BEEC((uint64_t)v4, (uint64_t)v207, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC((uint64_t)v3, (uint64_t)v205, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if ((v218 & 1) == 0)
    {
      sub_1CCA0BF30((uint64_t)v205, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      sub_1CCA0BF30((uint64_t)v207, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_16:
      v222 = (uint64_t)v606;
      v221 = v537;
      sub_1CCA0BEEC((uint64_t)v4, (uint64_t)v537, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v223 = (uint64_t)v4;
      v224 = v616;
      sub_1CCA0BEEC(v222, v616, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      goto LABEL_17;
    }
  }
  v219 = *((_QWORD *)v207 + 3);
  v220 = *((_QWORD *)v205 + 3);
  if (!v219)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v205, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v207, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (!v220)
      goto LABEL_12;
    goto LABEL_15;
  }
  if (!v220)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v205, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v207, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if (*((_QWORD *)v207 + 2) != *((_QWORD *)v205 + 2) || v219 != v220)
  {
    v490 = sub_1CCB642A0();
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v205, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v207, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    swift_bridgeObjectRelease();
    v221 = v537;
    sub_1CCA0BEEC((uint64_t)v4, (uint64_t)v537, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v222 = (uint64_t)v606;
    v223 = (uint64_t)v4;
    v224 = v616;
    sub_1CCA0BEEC((uint64_t)v606, v616, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if ((v490 & 1) != 0)
      goto LABEL_76;
LABEL_17:
    sub_1CCA0BF30((uint64_t)v221, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v224, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v225 = v538;
    sub_1CCA0BEEC(v223, (uint64_t)v538, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v226 = v615;
    sub_1CCA0BEEC(v222, (uint64_t)v615, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v227 = v223;
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  sub_1CCA0BF30((uint64_t)v205, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v207, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  swift_bridgeObjectRelease();
LABEL_12:
  v221 = v537;
  sub_1CCA0BEEC((uint64_t)v4, (uint64_t)v537, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v222 = (uint64_t)v606;
  v223 = (uint64_t)v4;
  v224 = v616;
  sub_1CCA0BEEC((uint64_t)v606, v616, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_76:
  if (*((_QWORD *)v221 + 4) == *(_QWORD *)(v224 + 32) && *((_QWORD *)v221 + 5) == *(_QWORD *)(v224 + 40))
  {
    sub_1CCA0BF30((uint64_t)v221, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v616, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v227 = v223;
    v225 = v538;
    sub_1CCA0BEEC(v223, (uint64_t)v538, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v226 = v615;
    sub_1CCA0BEEC(v222, (uint64_t)v615, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    goto LABEL_80;
  }
  v311 = sub_1CCB642A0();
  sub_1CCA0BF30((uint64_t)v221, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30(v616, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v227 = v223;
  v225 = v538;
  sub_1CCA0BEEC(v223, (uint64_t)v538, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v226 = v615;
  sub_1CCA0BEEC(v222, (uint64_t)v615, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if ((v311 & 1) == 0)
  {
LABEL_18:
    sub_1CCA0BF30((uint64_t)v226, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v225, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v228 = (uint64_t)v613;
    v229 = (uint64_t)v542;
    v230 = (uint64_t)v543;
LABEL_19:
    v231 = v539;
    sub_1CCA0BEEC(v227, (uint64_t)v539, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v232 = v540;
    sub_1CCA0BEEC(v222, (uint64_t)v540, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    goto LABEL_20;
  }
LABEL_80:
  v312 = *((_QWORD *)v225 + 7);
  v313 = *((_QWORD *)v226 + 7);
  v314 = v613;
  v229 = (uint64_t)v542;
  if (!v312)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v226, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v225, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v228 = (uint64_t)v314;
    v230 = (uint64_t)v543;
    if (!v313)
      goto LABEL_87;
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (!v313)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v615, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v225, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    swift_bridgeObjectRelease();
    v228 = (uint64_t)v314;
    v230 = (uint64_t)v543;
    goto LABEL_19;
  }
  if (*((_QWORD *)v225 + 6) != *((_QWORD *)v615 + 6) || v312 != v313)
  {
    LODWORD(v616) = sub_1CCB642A0();
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v615, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v225, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    swift_bridgeObjectRelease();
    v231 = v539;
    sub_1CCA0BEEC(v227, (uint64_t)v539, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v232 = v540;
    v228 = (uint64_t)v613;
    sub_1CCA0BEEC(v222, (uint64_t)v540, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v230 = (uint64_t)v543;
    if ((v616 & 1) != 0)
      goto LABEL_90;
LABEL_20:
    sub_1CCA0BF30((uint64_t)v231, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v232, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v227, v229, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v233 = v541;
    sub_1CCA0BEEC(v222, (uint64_t)v541, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    goto LABEL_21;
  }
  v228 = (uint64_t)v613;
  swift_bridgeObjectRetain();
  sub_1CCA0BF30((uint64_t)v615, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v225, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  swift_bridgeObjectRelease();
  v230 = (uint64_t)v543;
LABEL_87:
  v231 = v539;
  sub_1CCA0BEEC(v227, (uint64_t)v539, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v232 = v540;
  sub_1CCA0BEEC(v222, (uint64_t)v540, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_90:
  if (*((_QWORD *)v231 + 8) == *((_QWORD *)v232 + 8) && *((_QWORD *)v231 + 9) == *((_QWORD *)v232 + 9))
  {
    sub_1CCA0BF30((uint64_t)v231, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v232, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v227, v229, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v233 = v541;
    sub_1CCA0BEEC(v222, (uint64_t)v541, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    goto LABEL_94;
  }
  LODWORD(v616) = sub_1CCB642A0();
  sub_1CCA0BF30((uint64_t)v231, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v232, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v227, v229, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v233 = v541;
  sub_1CCA0BEEC(v222, (uint64_t)v541, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if ((v616 & 1) == 0)
  {
LABEL_21:
    sub_1CCA0BF30((uint64_t)v233, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v229, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v227, v230, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v234 = v614;
    sub_1CCA0BEEC(v222, v614, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    goto LABEL_22;
  }
LABEL_94:
  if (qword_1CCB73248[*(char *)(v229 + 80)] == qword_1CCB73248[(char)v233[80]])
  {
    swift_bridgeObjectRelease_n();
    sub_1CCA0BF30((uint64_t)v233, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v229, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v227, v230, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v315 = v614;
    sub_1CCA0BEEC(v222, v614, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v234 = v315;
    goto LABEL_97;
  }
  v316 = sub_1CCB642A0();
  swift_bridgeObjectRelease_n();
  sub_1CCA0BF30((uint64_t)v233, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30(v229, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v227, v230, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v317 = v614;
  sub_1CCA0BEEC(v222, v614, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v234 = v317;
  if ((v316 & 1) == 0)
  {
LABEL_22:
    v235 = v536;
    sub_1CCA0BF30(v234, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v230, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v236 = (uint64_t)v549;
LABEL_23:
    v237 = v544;
    sub_1CCA0BEEC(v227, (uint64_t)v544, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v238 = v612;
    sub_1CCA0BEEC(v222, (uint64_t)v612, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    goto LABEL_24;
  }
LABEL_97:
  v318 = *(_QWORD *)(v230 + 96);
  v319 = *(_QWORD *)(v234 + 96);
  v320 = v234;
  v236 = (uint64_t)v549;
  if (!v318)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30(v320, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v230, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (!v319)
      goto LABEL_104;
    v235 = v536;
    goto LABEL_106;
  }
  if (!v319)
  {
    v235 = v536;
    swift_bridgeObjectRetain();
    sub_1CCA0BF30(v614, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v230, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_106:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  if (*(_QWORD *)(v230 + 88) != *(_QWORD *)(v614 + 88) || v318 != v319)
  {
    v235 = v536;
    LODWORD(v616) = sub_1CCB642A0();
    swift_bridgeObjectRetain();
    sub_1CCA0BF30(v614, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v230, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    swift_bridgeObjectRelease();
    v237 = v544;
    sub_1CCA0BEEC(v227, (uint64_t)v544, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v238 = v612;
    sub_1CCA0BEEC(v222, (uint64_t)v612, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if ((v616 & 1) != 0)
      goto LABEL_108;
LABEL_24:
    sub_1CCA0BF30((uint64_t)v237, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v238, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v227, v228, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v239 = v545;
    sub_1CCA0BEEC(v222, (uint64_t)v545, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v240 = (uint64_t)v235;
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  sub_1CCA0BF30(v614, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30(v230, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  swift_bridgeObjectRelease();
LABEL_104:
  v235 = v536;
  v237 = v544;
  sub_1CCA0BEEC(v227, (uint64_t)v544, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v238 = v612;
  sub_1CCA0BEEC(v222, (uint64_t)v612, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_108:
  if (*((_QWORD *)v237 + 13) != *((_QWORD *)v238 + 13) || *((_QWORD *)v237 + 14) != *((_QWORD *)v238 + 14))
  {
    v321 = sub_1CCB642A0();
    sub_1CCA0BF30((uint64_t)v237, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v612, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v227, v228, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v239 = v545;
    sub_1CCA0BEEC(v222, (uint64_t)v545, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v240 = (uint64_t)v235;
    if ((v321 & 1) != 0)
      goto LABEL_112;
LABEL_25:
    sub_1CCA0BF30(v228, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v239, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v241 = v546;
    sub_1CCA0BEEC(v227, (uint64_t)v546, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v242 = v610;
    sub_1CCA0BEEC(v222, (uint64_t)v610, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v243 = v611;
    goto LABEL_26;
  }
  sub_1CCA0BF30((uint64_t)v237, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v612, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v227, v228, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v239 = v545;
  sub_1CCA0BEEC(v222, (uint64_t)v545, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v240 = (uint64_t)v235;
LABEL_112:
  if (*(_QWORD *)(v228 + 120) != *((_QWORD *)v239 + 15) || *(_QWORD *)(v228 + 128) != *((_QWORD *)v239 + 16))
  {
    v322 = sub_1CCB642A0();
    sub_1CCA0BF30(v228, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v239, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v241 = v546;
    sub_1CCA0BEEC(v227, (uint64_t)v546, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v242 = v610;
    v243 = v611;
    sub_1CCA0BEEC(v222, (uint64_t)v610, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if ((v322 & 1) != 0)
      goto LABEL_116;
LABEL_26:
    sub_1CCA0BF30((uint64_t)v241, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v242, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v227, (uint64_t)v243, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v222, v240, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    goto LABEL_27;
  }
  sub_1CCA0BF30(v228, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v239, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v241 = v546;
  sub_1CCA0BEEC(v227, (uint64_t)v546, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v242 = v610;
  sub_1CCA0BEEC(v222, (uint64_t)v610, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v243 = v611;
LABEL_116:
  if (*((_QWORD *)v241 + 17) != *((_QWORD *)v242 + 17) || *((_QWORD *)v241 + 18) != *((_QWORD *)v242 + 18))
  {
    v323 = sub_1CCB642A0();
    sub_1CCA0BF30((uint64_t)v241, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v610, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v227, (uint64_t)v611, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v243 = v611;
    sub_1CCA0BEEC(v222, v240, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if ((v323 & 1) != 0)
      goto LABEL_120;
LABEL_27:
    sub_1CCA0BF30((uint64_t)v243, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v240, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v244 = v547;
    sub_1CCA0BEEC(v227, (uint64_t)v547, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v245 = v548;
    sub_1CCA0BEEC(v222, (uint64_t)v548, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    goto LABEL_28;
  }
  sub_1CCA0BF30((uint64_t)v241, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v610, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v227, (uint64_t)v243, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v222, v240, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_120:
  if (*((_QWORD *)v243 + 21) != *(_QWORD *)(v240 + 168) || *((_QWORD *)v243 + 22) != *(_QWORD *)(v240 + 176))
  {
    v324 = sub_1CCB642A0();
    sub_1CCA0BF30((uint64_t)v243, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v240, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v244 = v547;
    sub_1CCA0BEEC(v227, (uint64_t)v547, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v245 = v548;
    sub_1CCA0BEEC(v222, (uint64_t)v548, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if ((v324 & 1) != 0)
      goto LABEL_124;
LABEL_28:
    v246 = (uint64_t)v609;
    sub_1CCA0BF30((uint64_t)v244, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v245, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v247 = v551;
    sub_1CCA0BEEC(v227, (uint64_t)v551, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v222, v236, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    goto LABEL_29;
  }
  sub_1CCA0BF30((uint64_t)v243, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30(v240, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v244 = v547;
  sub_1CCA0BEEC(v227, (uint64_t)v547, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v245 = v548;
  sub_1CCA0BEEC(v222, (uint64_t)v548, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_124:
  v246 = (uint64_t)v609;
  if (*((_QWORD *)v244 + 19) == *((_QWORD *)v245 + 19) && *((_QWORD *)v244 + 20) == *((_QWORD *)v245 + 20))
  {
    sub_1CCA0BF30((uint64_t)v244, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v245, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v247 = v551;
    sub_1CCA0BEEC(v227, (uint64_t)v551, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v222, v236, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    goto LABEL_128;
  }
  v325 = sub_1CCB642A0();
  sub_1CCA0BF30((uint64_t)v244, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v245, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v247 = v551;
  sub_1CCA0BEEC(v227, (uint64_t)v551, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v222, v236, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if ((v325 & 1) == 0)
  {
LABEL_29:
    sub_1CCA0BF30(v236, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v247, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v248 = v553;
    sub_1CCA0BEEC(v227, (uint64_t)v553, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v249 = v554;
    sub_1CCA0BEEC(v222, (uint64_t)v554, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_30:
    v250 = (uint64_t)v552;
    sub_1CCA0BF30((uint64_t)v249, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v248, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v251 = v555;
    sub_1CCA0BEEC(v227, (uint64_t)v555, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v252 = v556;
    sub_1CCA0BEEC(v222, (uint64_t)v556, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v253 = (uint64_t)v558;
LABEL_31:
    sub_1CCA0BF30((uint64_t)v252, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v251, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v254 = v557;
    sub_1CCA0BEEC(v227, (uint64_t)v557, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v222, v253, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_32:
    sub_1CCA0BF30(v253, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v254, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v255 = v559;
    sub_1CCA0BEEC(v227, (uint64_t)v559, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v256 = v608;
    sub_1CCA0BEEC(v222, (uint64_t)v608, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_33:
    sub_1CCA0BF30((uint64_t)v256, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v255, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v257 = v250;
    v258 = (uint64_t)v550;
LABEL_34:
    v259 = v607;
    sub_1CCA0BEEC(v227, (uint64_t)v607, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v260 = v560;
    sub_1CCA0BEEC(v222, (uint64_t)v560, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_35:
    sub_1CCA0BF30((uint64_t)v260, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v259, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_36:
    v261 = v605;
    sub_1CCA0BEEC(v227, (uint64_t)v605, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v262 = v604;
    sub_1CCA0BEEC(v222, (uint64_t)v604, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v263 = (uint64_t)v603;
LABEL_37:
    sub_1CCA0BF30((uint64_t)v262, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v261, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_38:
    sub_1CCA0BEEC(v227, v246, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v264 = v561;
    sub_1CCA0BEEC(v222, (uint64_t)v561, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_39:
    sub_1CCA0BF30((uint64_t)v264, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v246, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v265 = (uint64_t)v562;
    sub_1CCA0BEEC(v227, (uint64_t)v562, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v266 = v563;
    sub_1CCA0BEEC(v222, (uint64_t)v563, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_40:
    sub_1CCA0BF30((uint64_t)v266, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v265, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v227, v258, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v267 = v258;
    v268 = v564;
    sub_1CCA0BEEC(v222, v564, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v269 = v602;
LABEL_41:
    sub_1CCA0BF30(v268, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v267, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v270 = v565;
    sub_1CCA0BEEC(v227, (uint64_t)v565, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v222, v257, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_42:
    sub_1CCA0BF30(v257, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v270, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v271 = v567;
    sub_1CCA0BEEC(v227, v567, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v272 = v566;
    sub_1CCA0BEEC(v222, v566, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v273 = v263;
    v274 = v599;
LABEL_43:
    sub_1CCA0BF30(v272, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v271, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v275 = v600;
    sub_1CCA0BEEC(v227, (uint64_t)v600, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v276 = v601;
    sub_1CCA0BEEC(v222, (uint64_t)v601, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_44:
    sub_1CCA0BF30((uint64_t)v276, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v275, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v277 = v596;
LABEL_45:
    v278 = v598;
    sub_1CCA0BEEC(v227, (uint64_t)v598, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v279 = v597;
    sub_1CCA0BEEC(v222, (uint64_t)v597, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_46:
    sub_1CCA0BF30((uint64_t)v279, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v278, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_47:
    v280 = v569;
    sub_1CCA0BEEC(v227, (uint64_t)v569, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v281 = v568;
    sub_1CCA0BEEC(v222, (uint64_t)v568, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_48:
    sub_1CCA0BF30((uint64_t)v281, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v280, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_49:
    v282 = v571;
    sub_1CCA0BEEC(v227, (uint64_t)v571, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v283 = v570;
    sub_1CCA0BEEC(v222, (uint64_t)v570, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_50:
    sub_1CCA0BF30((uint64_t)v283, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v282, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_51:
    sub_1CCA0BEEC(v227, (uint64_t)v269, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v284 = v572;
    sub_1CCA0BEEC(v222, (uint64_t)v572, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v285 = v592;
LABEL_52:
    sub_1CCA0BF30((uint64_t)v284, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v269, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v286 = v573;
    sub_1CCA0BEEC(v227, (uint64_t)v573, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v222, (uint64_t)v274, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_53:
    sub_1CCA0BF30((uint64_t)v274, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v286, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v287 = v583;
LABEL_54:
    v288 = v575;
    sub_1CCA0BEEC(v227, (uint64_t)v575, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v289 = v574;
    sub_1CCA0BEEC(v222, (uint64_t)v574, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_55:
    sub_1CCA0BF30((uint64_t)v289, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v288, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_56:
    sub_1CCA0BEEC(v227, (uint64_t)v277, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v290 = v576;
    sub_1CCA0BEEC(v222, (uint64_t)v576, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v291 = v580;
LABEL_57:
    sub_1CCA0BF30((uint64_t)v290, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v277, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_58:
    v292 = v578;
    sub_1CCA0BEEC(v227, (uint64_t)v578, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v293 = v577;
    sub_1CCA0BEEC(v222, (uint64_t)v577, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_59:
    sub_1CCA0BF30((uint64_t)v293, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v292, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_60:
    v294 = v579;
    sub_1CCA0BEEC(v227, (uint64_t)v579, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v222, (uint64_t)v291, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v295 = (uint64_t)v587;
LABEL_61:
    sub_1CCA0BF30((uint64_t)v294, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v291, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v296 = v582;
    sub_1CCA0BEEC(v227, (uint64_t)v582, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v297 = v581;
    sub_1CCA0BEEC(v222, (uint64_t)v581, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_62:
    sub_1CCA0BF30((uint64_t)v297, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v296, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_63:
    v298 = v584;
    sub_1CCA0BEEC(v227, (uint64_t)v584, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v222, (uint64_t)v287, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v299 = (uint64_t)v589;
LABEL_64:
    sub_1CCA0BF30((uint64_t)v287, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v298, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_65:
    v300 = v585;
    sub_1CCA0BEEC(v227, v585, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v222, v273, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v301 = v593;
LABEL_66:
    sub_1CCA0BF30(v273, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v300, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v302 = v586;
    sub_1CCA0BEEC(v227, v586, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v222, v295, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_67:
    sub_1CCA0BF30(v302, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v295, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v303 = v588;
    sub_1CCA0BEEC(v227, v588, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v222, v299, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_68:
    sub_1CCA0BF30(v299, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v303, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v304 = v590;
    sub_1CCA0BEEC(v227, v590, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v305 = v591;
    sub_1CCA0BEEC(v222, (uint64_t)v591, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_69:
    sub_1CCA0BF30((uint64_t)v305, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v304, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v227, (uint64_t)v301, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v222, (uint64_t)v285, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_70:
    sub_1CCA0BF30((uint64_t)v285, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v301, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_71:
    v306 = v227;
    v307 = v595;
    sub_1CCA0BEEC(v306, (uint64_t)v595, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v308 = v594;
    sub_1CCA0BEEC(v222, (uint64_t)v594, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_72:
    sub_1CCA0BF30((uint64_t)v308, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v307, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    goto LABEL_73;
  }
LABEL_128:
  sub_1CCA17FC8(v247[192]);
  v327 = v326;
  sub_1CCA0BF30(v236, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v247, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v248 = v553;
  sub_1CCA0BEEC(v227, (uint64_t)v553, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v249 = v554;
  sub_1CCA0BEEC(v222, (uint64_t)v554, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if ((v327 & 1) == 0)
    goto LABEL_30;
  v250 = (uint64_t)v552;
  v328 = v248[23];
  sub_1CCA0BF30((uint64_t)v248, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v329 = v249[23];
  sub_1CCA0BF30((uint64_t)v249, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v251 = v555;
  sub_1CCA0BEEC(v227, (uint64_t)v555, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v252 = v556;
  sub_1CCA0BEEC(v222, (uint64_t)v556, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v253 = (uint64_t)v558;
  if (v328 != v329)
    goto LABEL_31;
  v616 = *((_QWORD *)v251 + 25);
  sub_1CCA0BF30((uint64_t)v251, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v330 = *((_QWORD *)v252 + 25);
  sub_1CCA0BF30((uint64_t)v252, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v254 = v557;
  sub_1CCA0BEEC(v227, (uint64_t)v557, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v222, v253, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v246 = (uint64_t)v609;
  if (v616 != v330)
    goto LABEL_32;
  v331 = *((_QWORD *)v254 + 26);
  sub_1CCA0BF30((uint64_t)v254, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v332 = *(_QWORD *)(v253 + 208);
  sub_1CCA0BF30(v253, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v255 = v559;
  sub_1CCA0BEEC(v227, (uint64_t)v559, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v256 = v608;
  sub_1CCA0BEEC(v222, (uint64_t)v608, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v246 = (uint64_t)v609;
  if (v331 != v332)
    goto LABEL_33;
  v333 = v534;
  v334 = v533[38];
  v335 = (uint64_t)&v256[v334];
  v336 = (uint64_t)&v534[*(int *)(v531 + 48)];
  sub_1CC9EAB74((uint64_t)&v255[v334], (uint64_t)v534, &qword_1ED8A7130);
  v616 = v336;
  sub_1CC9EAB74(v335, v336, &qword_1ED8A7130);
  v337 = *(_BYTE **)(v535 + 48);
  v338 = v532;
  v339 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v337)(v333, 1, v532);
  v615 = v337;
  v257 = v250;
  if (v339 == 1)
  {
    sub_1CCA0BF30((uint64_t)v256, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v255, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v340 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v337)(v616, 1, v338);
    v258 = (uint64_t)v550;
    if (v340 == 1)
    {
      sub_1CC9C3E84((uint64_t)v534, &qword_1ED8A7130);
      v259 = v607;
      sub_1CCA0BEEC(v227, (uint64_t)v607, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v260 = v560;
      sub_1CCA0BEEC(v222, (uint64_t)v560, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      goto LABEL_139;
    }
    goto LABEL_137;
  }
  v341 = (uint64_t)v333;
  v342 = v529;
  sub_1CC9EAB74(v341, (uint64_t)v529, &qword_1ED8A7130);
  v343 = v616;
  v344 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v337)(v616, 1, v338);
  v258 = (uint64_t)v550;
  if (v344 == 1)
  {
    sub_1CCA0BF30((uint64_t)v608, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v255, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    (*(void (**)(_BYTE *, uint64_t))(v535 + 8))(v342, v338);
LABEL_137:
    sub_1CC9C3E84((uint64_t)v534, &qword_1ED8A7138);
    v246 = (uint64_t)v609;
    goto LABEL_34;
  }
  v345 = v528;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v535 + 32))(v528, v343, v338);
  sub_1CC9CAA38(&qword_1EF9E5348, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  v346 = v342;
  LODWORD(v616) = sub_1CCB63958();
  v347 = *(void (**)(_BYTE *, uint64_t))(v535 + 8);
  v347(v345, v338);
  sub_1CCA0BF30((uint64_t)v608, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v255, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v347(v346, v338);
  sub_1CC9C3E84((uint64_t)v534, &qword_1ED8A7130);
  v259 = v607;
  sub_1CCA0BEEC(v227, (uint64_t)v607, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v260 = v560;
  sub_1CCA0BEEC(v222, (uint64_t)v560, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v246 = (uint64_t)v609;
  if ((v616 & 1) == 0)
    goto LABEL_35;
LABEL_139:
  v348 = v533[39];
  v349 = (uint64_t)&v259[v348];
  v350 = (uint64_t)&v260[v348];
  v351 = v530;
  v352 = (uint64_t)&v530[*(int *)(v531 + 48)];
  sub_1CC9EAB74(v349, (uint64_t)v530, &qword_1ED8A7130);
  sub_1CC9EAB74(v350, v352, &qword_1ED8A7130);
  v353 = v532;
  v354 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v615;
  v355 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v615)(v351, 1, v532);
  v356 = (uint64_t)v260;
  if (v355 == 1)
  {
    sub_1CCA0BF30((uint64_t)v260, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v607, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (v354(v352, 1, v353) == 1)
    {
      sub_1CC9C3E84((uint64_t)v530, &qword_1ED8A7130);
      v261 = v605;
      sub_1CCA0BEEC(v227, (uint64_t)v605, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v262 = v604;
      sub_1CCA0BEEC(v222, (uint64_t)v604, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      goto LABEL_146;
    }
    goto LABEL_144;
  }
  v357 = v526;
  sub_1CC9EAB74((uint64_t)v530, (uint64_t)v526, &qword_1ED8A7130);
  if (v354(v352, 1, v353) == 1)
  {
    sub_1CCA0BF30(v356, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v607, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    (*(void (**)(_BYTE *, uint64_t))(v535 + 8))(v357, v353);
LABEL_144:
    sub_1CC9C3E84((uint64_t)v530, &qword_1ED8A7138);
    v246 = (uint64_t)v609;
    goto LABEL_36;
  }
  v358 = v528;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v535 + 32))(v528, v352, v353);
  sub_1CC9CAA38(&qword_1EF9E5348, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  LODWORD(v616) = sub_1CCB63958();
  v359 = *(void (**)(_BYTE *, uint64_t))(v535 + 8);
  v359(v358, v353);
  sub_1CCA0BF30(v356, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v607, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v359(v357, v353);
  sub_1CC9C3E84((uint64_t)v530, &qword_1ED8A7130);
  v261 = v605;
  sub_1CCA0BEEC(v227, (uint64_t)v605, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v262 = v604;
  sub_1CCA0BEEC(v222, (uint64_t)v604, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v246 = (uint64_t)v609;
  v263 = (uint64_t)v603;
  if ((v616 & 1) == 0)
    goto LABEL_37;
LABEL_146:
  v616 = v227;
  v360 = v533[40];
  v361 = (uint64_t)&v262[v360];
  v362 = v527;
  v363 = (uint64_t)&v527[*(int *)(v531 + 48)];
  sub_1CC9EAB74((uint64_t)&v261[v360], (uint64_t)v527, &qword_1ED8A7130);
  sub_1CC9EAB74(v361, v363, &qword_1ED8A7130);
  v364 = v362;
  v365 = v532;
  v366 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v615;
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v615)(v364, 1, v532) == 1)
  {
    sub_1CCA0BF30((uint64_t)v604, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v605, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (v366(v363, 1, v365) == 1)
    {
      sub_1CC9C3E84((uint64_t)v527, &qword_1ED8A7130);
      v227 = v616;
      v246 = (uint64_t)v609;
      sub_1CCA0BEEC(v616, (uint64_t)v609, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v222 = (uint64_t)v606;
      v264 = v561;
      sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v561, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v263 = (uint64_t)v603;
      goto LABEL_153;
    }
    goto LABEL_151;
  }
  sub_1CC9EAB74((uint64_t)v527, (uint64_t)v525, &qword_1ED8A7130);
  if (v366(v363, 1, v365) == 1)
  {
    sub_1CCA0BF30((uint64_t)v604, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v605, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    (*(void (**)(_BYTE *, uint64_t))(v535 + 8))(v525, v532);
LABEL_151:
    sub_1CC9C3E84((uint64_t)v527, &qword_1ED8A7138);
    v222 = (uint64_t)v606;
    v227 = v616;
    v263 = (uint64_t)v603;
    v246 = (uint64_t)v609;
    goto LABEL_38;
  }
  v367 = v535;
  v368 = v528;
  v369 = v532;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v535 + 32))(v528, v363, v532);
  sub_1CC9CAA38(&qword_1EF9E5348, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  v370 = v525;
  v371 = sub_1CCB63958();
  v372 = *(void (**)(_BYTE *, uint64_t))(v367 + 8);
  v372(v368, v369);
  sub_1CCA0BF30((uint64_t)v604, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v605, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v372(v370, v369);
  sub_1CC9C3E84((uint64_t)v527, &qword_1ED8A7130);
  v227 = v616;
  v246 = (uint64_t)v609;
  sub_1CCA0BEEC(v616, (uint64_t)v609, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v222 = (uint64_t)v606;
  v264 = v561;
  sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v561, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v263 = (uint64_t)v603;
  if ((v371 & 1) == 0)
    goto LABEL_39;
LABEL_153:
  v373 = v533;
  v614 = *(_QWORD *)(v246 + v533[37]);
  sub_1CCA0BF30(v246, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v374 = *(_QWORD *)&v264[v373[37]];
  sub_1CCA0BF30((uint64_t)v264, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v265 = (uint64_t)v562;
  sub_1CCA0BEEC(v227, (uint64_t)v562, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v266 = v563;
  sub_1CCA0BEEC(v222, (uint64_t)v563, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if (v614 != v374)
    goto LABEL_40;
  v375 = (uint64_t)v266;
  v376 = v533;
  LODWORD(v614) = *(unsigned __int8 *)(v265 + v533[42]);
  sub_1CCA0BF30(v265, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v377 = *(unsigned __int8 *)(v375 + v376[42]);
  sub_1CCA0BF30(v375, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v227, v258, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v267 = v258;
  v268 = v564;
  sub_1CCA0BEEC(v222, v564, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v269 = v602;
  if ((_DWORD)v614 != v377)
    goto LABEL_41;
  v378 = v533;
  v379 = *(unsigned __int8 *)(v267 + v533[43]);
  sub_1CCA0BF30(v267, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  LODWORD(v378) = *(unsigned __int8 *)(v268 + v378[43]);
  sub_1CCA0BF30(v268, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v270 = v565;
  sub_1CCA0BEEC(v227, (uint64_t)v565, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v222, v257, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v210 = v379 == (_DWORD)v378;
  v269 = v602;
  if (!v210)
    goto LABEL_42;
  v380 = v533;
  v381 = v270[v533[44]];
  sub_1CCA0BF30((uint64_t)v270, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  LODWORD(v380) = *(unsigned __int8 *)(v257 + v380[44]);
  sub_1CCA0BF30(v257, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v271 = v567;
  sub_1CCA0BEEC(v227, v567, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v272 = v566;
  sub_1CCA0BEEC(v222, v566, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v210 = v381 == (_DWORD)v380;
  v269 = v602;
  v273 = v263;
  v274 = v599;
  if (!v210)
    goto LABEL_43;
  v382 = *(_QWORD *)(v271 + 216);
  v383 = *(_QWORD *)(v272 + 216);
  sub_1CCA0BF30(v272, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30(v271, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v275 = v600;
  sub_1CCA0BEEC(v227, (uint64_t)v600, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v222, (uint64_t)v601, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v210 = v382 == v383;
  v276 = v601;
  v269 = v602;
  if (!v210)
    goto LABEL_44;
  v384 = (void *)*((_QWORD *)v275 + 33);
  v385 = (void *)v601[33];
  if (!v384)
  {
    v390 = v385;
    sub_1CCA0BF30((uint64_t)v601, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v600, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (!v385)
    {
      v278 = v598;
      sub_1CCA0BEEC(v616, (uint64_t)v598, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v279 = v597;
      sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v597, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      goto LABEL_170;
    }
    v391 = 0;
LABEL_168:

    v222 = (uint64_t)v606;
    v227 = v616;
    v273 = (uint64_t)v603;
    v277 = v596;
    v274 = v599;
    v269 = v602;
    goto LABEL_45;
  }
  v386 = v601[32];
  v387 = v601[34];
  v388 = *((double *)v600 + 34);
  v622[0] = *((double *)v600 + 32);
  *(_QWORD *)&v622[1] = v384;
  v622[2] = v388;
  if (!v385)
  {
    v391 = v384;
    sub_1CCA0BF30((uint64_t)v601, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v600, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);

    v390 = 0;
    goto LABEL_168;
  }
  LOWORD(v620[0]) = v386 & 0x101;
  BYTE2(v620[0]) = BYTE2(v386) & 1;
  BYTE3(v620[0]) = BYTE3(v386);
  *((_QWORD *)&v620[0] + 1) = v385;
  *(_QWORD *)&v620[1] = v387;
  v389 = v384;
  LODWORD(v614) = _s8FMIPCore12FMIPLocationV2eeoiySbAC_ACtFZ_0(v622, (double *)v620);
  sub_1CCA0BF30((uint64_t)v601, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v600, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);

  v227 = v616;
  v278 = v598;
  sub_1CCA0BEEC(v616, (uint64_t)v598, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v222 = (uint64_t)v606;
  v279 = v597;
  sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v597, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v273 = (uint64_t)v603;
  v277 = v596;
  v274 = v599;
  v269 = v602;
  if ((v614 & 1) == 0)
    goto LABEL_46;
LABEL_170:
  v392 = (void *)*((_QWORD *)v278 + 36);
  v393 = (void *)*((_QWORD *)v279 + 36);
  if (!v392)
  {
    v398 = v393;
    sub_1CCA0BF30((uint64_t)v597, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v598, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (!v393)
    {
      v280 = v569;
      sub_1CCA0BEEC(v616, (uint64_t)v569, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v281 = v568;
      sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v568, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      goto LABEL_179;
    }
    v399 = 0;
LABEL_177:

    v222 = (uint64_t)v606;
    v227 = v616;
    v273 = (uint64_t)v603;
    v277 = v596;
    v274 = v599;
    v269 = v602;
    goto LABEL_47;
  }
  v394 = *((_QWORD *)v597 + 35);
  v395 = *((_QWORD *)v597 + 37);
  v396 = *((double *)v598 + 37);
  v622[0] = *((double *)v598 + 35);
  *(_QWORD *)&v622[1] = v392;
  v622[2] = v396;
  if (!v393)
  {
    v399 = v392;
    sub_1CCA0BF30((uint64_t)v597, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v598, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);

    v398 = 0;
    goto LABEL_177;
  }
  LOWORD(v620[0]) = v394 & 0x101;
  BYTE2(v620[0]) = BYTE2(v394) & 1;
  BYTE3(v620[0]) = BYTE3(v394);
  *((_QWORD *)&v620[0] + 1) = v393;
  *(_QWORD *)&v620[1] = v395;
  v397 = v392;
  LODWORD(v614) = _s8FMIPCore12FMIPLocationV2eeoiySbAC_ACtFZ_0(v622, (double *)v620);
  sub_1CCA0BF30((uint64_t)v597, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v598, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);

  v227 = v616;
  v280 = v569;
  sub_1CCA0BEEC(v616, (uint64_t)v569, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v222 = (uint64_t)v606;
  v281 = v568;
  sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v568, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v273 = (uint64_t)v603;
  v277 = v596;
  v274 = v599;
  v269 = v602;
  if ((v614 & 1) == 0)
    goto LABEL_48;
LABEL_179:
  v400 = *((_QWORD *)v280 + 34);
  v620[0] = *((_OWORD *)v280 + 16);
  *(_QWORD *)&v620[1] = v400;
  v401 = *((double *)v280 + 37);
  v626 = *(_OWORD *)(v280 + 280);
  v627 = v401;
  v402 = (*((_QWORD *)v280 + 27) >> 5) & 1;
  v403 = v533;
  v404 = (uint64_t)&v280[v533[32]];
  LOBYTE(v624) = v280[80];
  sub_1CCA11CFC((uint64_t *)v620, (uint64_t *)&v626, v402, v404, (unsigned __int8 *)&v624, v622);
  v405 = v622[0];
  v406 = v622[1];
  v407 = v622[2];
  v408 = *((double *)v281 + 34);
  v626 = *((_OWORD *)v281 + 16);
  v627 = v408;
  v409 = *((_QWORD *)v281 + 37);
  v624 = *(_OWORD *)(v281 + 280);
  v625 = v409;
  v410 = (*((_QWORD *)v281 + 27) >> 5) & 1;
  v411 = (uint64_t)&v281[v403[32]];
  v623[0] = v281[80];
  sub_1CCA11CFC((uint64_t *)&v626, (uint64_t *)&v624, v410, v411, v623, (double *)v620);
  v412 = (void *)*((_QWORD *)&v620[0] + 1);
  if (v406 == 0.0)
  {
    sub_1CCA0BF30((uint64_t)v568, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v569, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (!v412)
    {
      v282 = v571;
      sub_1CCA0BEEC(v616, (uint64_t)v571, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v283 = v570;
      sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v570, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      goto LABEL_188;
    }
    v414 = 0;
LABEL_186:

    v222 = (uint64_t)v606;
    v227 = v616;
    v273 = (uint64_t)v603;
    v277 = v596;
    v274 = v599;
    v269 = v602;
    goto LABEL_49;
  }
  *(double *)&v626 = v405;
  *((double *)&v626 + 1) = v406;
  v627 = v407;
  if (!*((_QWORD *)&v620[0] + 1))
  {
    v414 = *(id *)&v406;
    sub_1CCA0BF30((uint64_t)v568, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v569, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);

    goto LABEL_186;
  }
  LODWORD(v624) = v620[0] & 0xFF010101;
  *((_QWORD *)&v624 + 1) = *((_QWORD *)&v620[0] + 1);
  v625 = *(_QWORD *)&v620[1];
  v413 = *(id *)&v406;
  LODWORD(v614) = _s8FMIPCore12FMIPLocationV2eeoiySbAC_ACtFZ_0((double *)&v626, (double *)&v624);

  sub_1CCA0BF30((uint64_t)v568, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v569, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);

  v227 = v616;
  v282 = v571;
  sub_1CCA0BEEC(v616, (uint64_t)v571, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v222 = (uint64_t)v606;
  v283 = v570;
  sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v570, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v273 = (uint64_t)v603;
  v277 = v596;
  v274 = v599;
  v269 = v602;
  if ((v614 & 1) == 0)
    goto LABEL_50;
LABEL_188:
  sub_1CC9C3EC0((uint64_t)(v282 + 304), (uint64_t)v623, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)(v283 + 304), (uint64_t)&v624, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)v623, (uint64_t)v622, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)&v624, (uint64_t)&v622[36], &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)v623, (uint64_t)&v626, &qword_1ED8A71C0);
  if (sub_1CCA33738((uint64_t)&v626) == 1)
  {
    sub_1CCA307F0((uint64_t)&v624, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
    sub_1CCA0BF30((uint64_t)v570, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v571, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CC9C3EC0((uint64_t)&v622[36], (uint64_t)v621, &qword_1ED8A71C0);
    sub_1CC9C3EC0((uint64_t)v621, (uint64_t)v620, &qword_1ED8A71C0);
    if (sub_1CCA33738((uint64_t)v620) == 1)
    {
      sub_1CC9C3EC0((uint64_t)v622, (uint64_t)v619, &qword_1ED8A71C0);
      sub_1CCA307F0((uint64_t)v619, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
      v227 = v616;
      v269 = v602;
      sub_1CCA0BEEC(v616, (uint64_t)v602, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v222 = (uint64_t)v606;
      v284 = v572;
      sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v572, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v273 = (uint64_t)v603;
      v277 = v596;
      v274 = v599;
      goto LABEL_195;
    }
LABEL_193:
    memcpy(v620, v622, sizeof(v620));
    sub_1CCA33750((uint64_t)v620);
    v222 = (uint64_t)v606;
    v227 = v616;
    v273 = (uint64_t)v603;
    v277 = v596;
    v274 = v599;
    v269 = v602;
    goto LABEL_51;
  }
  sub_1CC9C3EC0((uint64_t)v623, (uint64_t)v621, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)&v624, (uint64_t)v620, &qword_1ED8A71C0);
  if (sub_1CCA33738((uint64_t)v620) == 1)
  {
    sub_1CC9C3EC0((uint64_t)v623, (uint64_t)v617, &qword_1ED8A71C0);
    sub_1CC9C3EC0((uint64_t)v623, (uint64_t)v618, &qword_1ED8A71C0);
    sub_1CCA31FF8((uint64_t)v618);
    sub_1CCA31FF8((uint64_t)v617);
    sub_1CCA0BF30((uint64_t)v570, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v571, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    memcpy(v619, v621, sizeof(v619));
    sub_1CCA32130((uint64_t)v619);
    goto LABEL_193;
  }
  sub_1CC9C3EC0((uint64_t)&v624, (uint64_t)v617, &qword_1ED8A71C0);
  memcpy(v619, v617, sizeof(v619));
  v415 = _s8FMIPCore11FMIPAddressV2eeoiySbAC_ACtFZ_0(v621, v619);
  sub_1CCA307F0((uint64_t)v623, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
  sub_1CCA307F0((uint64_t)v623, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
  sub_1CCA0BF30((uint64_t)v570, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v571, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  memcpy(v618, v621, sizeof(v618));
  sub_1CCA32130((uint64_t)v618);
  sub_1CC9C3EC0((uint64_t)v622, (uint64_t)v619, &qword_1ED8A71C0);
  sub_1CCA307F0((uint64_t)v619, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
  v227 = v616;
  v269 = v602;
  sub_1CCA0BEEC(v616, (uint64_t)v602, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v222 = (uint64_t)v606;
  v284 = v572;
  sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v572, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v285 = v592;
  v273 = (uint64_t)v603;
  v277 = v596;
  v274 = v599;
  if ((v415 & 1) == 0)
    goto LABEL_52;
LABEL_195:
  v416 = *((_QWORD *)v269 + 30);
  sub_1CCA0BF30((uint64_t)v269, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v417 = *((_QWORD *)v284 + 30);
  sub_1CCA0BF30((uint64_t)v284, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v418 = (uint64_t)v274;
  v419 = v573;
  sub_1CCA0BEEC(v227, (uint64_t)v573, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v222, v418, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v210 = v416 == v417;
  v286 = v419;
  v274 = (_BYTE *)v418;
  v285 = v592;
  if (!v210)
    goto LABEL_53;
  v420 = v533[28];
  v421 = v418 + v420;
  v422 = v496;
  v423 = (uint64_t)&v496[*(int *)(v491 + 48)];
  sub_1CC9EAB74((uint64_t)&v286[v420], (uint64_t)v496, &qword_1ED8A7460);
  sub_1CC9EAB74(v421, v423, &qword_1ED8A7460);
  v424 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v492 + 48);
  if (v424((uint64_t)v422, 1, v494) == 1)
  {
    sub_1CCA0BF30((uint64_t)v599, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v573, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (v424(v423, 1, v494) == 1)
    {
      sub_1CC9C3E84((uint64_t)v496, &qword_1ED8A7460);
      v288 = v575;
      sub_1CCA0BEEC(v616, (uint64_t)v575, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v289 = v574;
      sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v574, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      goto LABEL_204;
    }
LABEL_202:
    sub_1CC9C3E84((uint64_t)v496, &qword_1ED8A7468);
    v222 = (uint64_t)v606;
    v227 = v616;
    v285 = v592;
    v273 = (uint64_t)v603;
    v287 = v583;
    v277 = v596;
    goto LABEL_54;
  }
  sub_1CC9EAB74((uint64_t)v496, (uint64_t)v495, &qword_1ED8A7460);
  if (v424(v423, 1, v494) == 1)
  {
    sub_1CCA0BF30((uint64_t)v599, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v573, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v495, (uint64_t (*)(_QWORD))type metadata accessor for FMIPPlaySoundMetadata);
    goto LABEL_202;
  }
  v425 = v493;
  sub_1CC9FED60(v423, (uint64_t)v493, (uint64_t (*)(_QWORD))type metadata accessor for FMIPPlaySoundMetadata);
  v426 = v495;
  v427 = _s8FMIPCore21FMIPPlaySoundMetadataV2eeoiySbAC_ACtFZ_0((uint64_t)v495, (uint64_t)v425);
  sub_1CCA0BF30((uint64_t)v425, (uint64_t (*)(_QWORD))type metadata accessor for FMIPPlaySoundMetadata);
  sub_1CCA0BF30((uint64_t)v599, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v573, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v426, (uint64_t (*)(_QWORD))type metadata accessor for FMIPPlaySoundMetadata);
  sub_1CC9C3E84((uint64_t)v496, &qword_1ED8A7460);
  v227 = v616;
  v288 = v575;
  sub_1CCA0BEEC(v616, (uint64_t)v575, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v222 = (uint64_t)v606;
  v289 = v574;
  sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v574, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v285 = v592;
  v273 = (uint64_t)v603;
  v287 = v583;
  v277 = v596;
  if ((v427 & 1) == 0)
    goto LABEL_55;
LABEL_204:
  v428 = v533[29];
  v429 = (uint64_t)&v289[v428];
  v430 = v502;
  v431 = (uint64_t)&v502[*(int *)(v497 + 48)];
  sub_1CC9EAB74((uint64_t)&v288[v428], (uint64_t)v502, &qword_1ED8A7AA0);
  sub_1CC9EAB74(v429, v431, &qword_1ED8A7AA0);
  v432 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v498 + 48);
  if (v432((uint64_t)v430, 1, v500) == 1)
  {
    sub_1CCA0BF30((uint64_t)v574, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v575, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (v432(v431, 1, v500) == 1)
    {
      sub_1CC9C3E84((uint64_t)v502, &qword_1ED8A7AA0);
      v277 = v596;
      sub_1CCA0BEEC(v616, (uint64_t)v596, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v290 = v576;
      sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v576, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      goto LABEL_211;
    }
LABEL_209:
    sub_1CC9C3E84((uint64_t)v502, &qword_1ED8A7AA8);
    v222 = (uint64_t)v606;
    v227 = v616;
    v285 = v592;
    v273 = (uint64_t)v603;
    v287 = v583;
    v277 = v596;
    goto LABEL_56;
  }
  sub_1CC9EAB74((uint64_t)v502, (uint64_t)v501, &qword_1ED8A7AA0);
  if (v432(v431, 1, v500) == 1)
  {
    sub_1CCA0BF30((uint64_t)v574, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v575, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v501, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
    goto LABEL_209;
  }
  v433 = v499;
  sub_1CC9FED60(v431, (uint64_t)v499, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
  v434 = v501;
  v435 = _s8FMIPCore26FMIPDeviceLostModeMetadataV2eeoiySbAC_ACtFZ_0((uint64_t)v501, (uint64_t)v433);
  sub_1CCA0BF30((uint64_t)v433, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
  sub_1CCA0BF30((uint64_t)v574, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v575, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v434, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
  sub_1CC9C3E84((uint64_t)v502, &qword_1ED8A7AA0);
  v227 = v616;
  v277 = v596;
  sub_1CCA0BEEC(v616, (uint64_t)v596, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v222 = (uint64_t)v606;
  v290 = v576;
  sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v576, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v285 = v592;
  v273 = (uint64_t)v603;
  v287 = v583;
  v291 = v580;
  if ((v435 & 1) == 0)
    goto LABEL_57;
LABEL_211:
  v436 = v533[30];
  v437 = (uint64_t)&v290[v436];
  v438 = v510;
  v439 = (uint64_t)&v510[*(int *)(v503 + 48)];
  sub_1CC9EAB74((uint64_t)&v277[v436], (uint64_t)v510, &qword_1ED8A73B8);
  sub_1CC9EAB74(v437, v439, &qword_1ED8A73B8);
  v440 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v504 + 48);
  if (v440((uint64_t)v438, 1, v505) == 1)
  {
    sub_1CCA0BF30((uint64_t)v576, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v596, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (v440(v439, 1, v505) == 1)
    {
      sub_1CC9C3E84((uint64_t)v510, &qword_1ED8A73B8);
      v292 = v578;
      sub_1CCA0BEEC(v616, (uint64_t)v578, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v293 = v577;
      sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v577, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      goto LABEL_221;
    }
    goto LABEL_216;
  }
  sub_1CC9EAB74((uint64_t)v510, (uint64_t)v509, &qword_1ED8A73B8);
  if (v440(v439, 1, v505) == 1)
  {
    sub_1CCA0BF30((uint64_t)v576, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v596, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v509, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
LABEL_216:
    v441 = &qword_1ED8A73C0;
LABEL_217:
    sub_1CC9C3E84((uint64_t)v510, v441);
    v222 = (uint64_t)v606;
    v227 = v616;
    v285 = v592;
    v273 = (uint64_t)v603;
    v287 = v583;
    v291 = v580;
    goto LABEL_58;
  }
  v442 = v508;
  sub_1CC9FED60(v439, (uint64_t)v508, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
  v443 = v509;
  v444 = sub_1CCB63574();
  sub_1CCA0BEEC((uint64_t)v443, (uint64_t)v507, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
  sub_1CCA0BEEC((uint64_t)v442, (uint64_t)v506, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
  if ((v444 & 1) == 0)
  {
    sub_1CCA0BF30((uint64_t)v506, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
    sub_1CCA0BF30((uint64_t)v507, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
    sub_1CCA0BF30((uint64_t)v508, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
    sub_1CCA0BF30((uint64_t)v576, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v596, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v509, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
    v441 = &qword_1ED8A73B8;
    goto LABEL_217;
  }
  v445 = v507;
  v446 = qword_1CCB731B8[*v507];
  v447 = qword_1CCB731B8[*v506];
  sub_1CCA0BF30((uint64_t)v506, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
  sub_1CCA0BF30((uint64_t)v445, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
  sub_1CCA0BF30((uint64_t)v508, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
  sub_1CCA0BF30((uint64_t)v576, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v596, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v509, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
  sub_1CC9C3E84((uint64_t)v510, &qword_1ED8A73B8);
  v227 = v616;
  v292 = v578;
  sub_1CCA0BEEC(v616, (uint64_t)v578, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v222 = (uint64_t)v606;
  v293 = v577;
  sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v577, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v210 = v446 == v447;
  v285 = v592;
  v273 = (uint64_t)v603;
  v287 = v583;
  v291 = v580;
  if (!v210)
    goto LABEL_59;
LABEL_221:
  v448 = v533[31];
  v449 = (uint64_t)&v293[v448];
  v450 = v516;
  v451 = (uint64_t)&v516[*(int *)(v511 + 48)];
  sub_1CC9EAB74((uint64_t)&v292[v448], (uint64_t)v516, &qword_1ED8A73F8);
  sub_1CC9EAB74(v449, v451, &qword_1ED8A73F8);
  v452 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v512 + 48);
  if (v452((uint64_t)v450, 1, v514) == 1)
  {
    sub_1CCA0BF30((uint64_t)v577, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v578, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (v452(v451, 1, v514) == 1)
    {
      sub_1CC9C3E84((uint64_t)v516, &qword_1ED8A73F8);
      v227 = v616;
      v294 = v579;
      sub_1CCA0BEEC(v616, (uint64_t)v579, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v222 = (uint64_t)v606;
      v291 = v580;
      sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v580, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v295 = (uint64_t)v587;
      v273 = (uint64_t)v603;
      v287 = v583;
      goto LABEL_229;
    }
LABEL_226:
    sub_1CC9C3E84((uint64_t)v516, &qword_1ED8A7400);
    v222 = (uint64_t)v606;
    v227 = v616;
    v285 = v592;
    v273 = (uint64_t)v603;
    v287 = v583;
    v291 = v580;
    goto LABEL_60;
  }
  sub_1CC9EAB74((uint64_t)v516, (uint64_t)v515, &qword_1ED8A73F8);
  if (v452(v451, 1, v514) == 1)
  {
    sub_1CCA0BF30((uint64_t)v577, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v578, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v515, (uint64_t (*)(_QWORD))type metadata accessor for FMIPEraseMetadata);
    goto LABEL_226;
  }
  v453 = v513;
  sub_1CC9FED60(v451, (uint64_t)v513, (uint64_t (*)(_QWORD))type metadata accessor for FMIPEraseMetadata);
  v454 = v515;
  v455 = _s8FMIPCore17FMIPEraseMetadataV2eeoiySbAC_ACtFZ_0((uint64_t)v515, (uint64_t)v453);
  sub_1CCA0BF30((uint64_t)v453, (uint64_t (*)(_QWORD))type metadata accessor for FMIPEraseMetadata);
  sub_1CCA0BF30((uint64_t)v577, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v578, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v454, (uint64_t (*)(_QWORD))type metadata accessor for FMIPEraseMetadata);
  sub_1CC9C3E84((uint64_t)v516, &qword_1ED8A73F8);
  v227 = v616;
  v294 = v579;
  sub_1CCA0BEEC(v616, (uint64_t)v579, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v222 = (uint64_t)v606;
  v291 = v580;
  sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v580, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v285 = v592;
  v295 = (uint64_t)v587;
  v273 = (uint64_t)v603;
  v287 = v583;
  if ((v455 & 1) == 0)
    goto LABEL_61;
LABEL_229:
  v456 = sub_1CCA181D4(*((_QWORD *)v294 + 29), *((_QWORD *)v291 + 29));
  sub_1CCA0BF30((uint64_t)v294, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v291, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v296 = v582;
  sub_1CCA0BEEC(v227, (uint64_t)v582, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v297 = v581;
  v285 = v592;
  sub_1CCA0BEEC(v222, (uint64_t)v581, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if ((v456 & 1) == 0)
    goto LABEL_62;
  v457 = *((_QWORD *)v297 + 31);
  if (!*((_QWORD *)v296 + 31))
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v581, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v582, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (!v457)
    {
      v298 = v584;
      sub_1CCA0BEEC(v616, (uint64_t)v584, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v287 = v583;
      sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v583, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      goto LABEL_239;
    }
LABEL_237:
    swift_bridgeObjectRelease();
    v222 = (uint64_t)v606;
    v227 = v616;
    v285 = v592;
    v295 = (uint64_t)v587;
    v273 = (uint64_t)v603;
    v287 = v583;
    goto LABEL_63;
  }
  if (!v457)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v581, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v582, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    goto LABEL_237;
  }
  swift_bridgeObjectRetain();
  v458 = swift_bridgeObjectRetain();
  LODWORD(v614) = sub_1CCB1EA5C(v458, v457);
  swift_bridgeObjectRelease();
  sub_1CCA0BF30((uint64_t)v581, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v582, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  swift_bridgeObjectRelease();
  v227 = v616;
  v298 = v584;
  sub_1CCA0BEEC(v616, (uint64_t)v584, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v222 = (uint64_t)v606;
  v287 = v583;
  sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v583, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v285 = v592;
  v299 = (uint64_t)v589;
  v295 = (uint64_t)v587;
  v273 = (uint64_t)v603;
  if ((v614 & 1) == 0)
    goto LABEL_64;
LABEL_239:
  v459 = v533[32];
  v460 = (uint64_t)&v287[v459];
  v461 = v522;
  v462 = (uint64_t)&v522[*(int *)(v517 + 48)];
  sub_1CC9EAB74((uint64_t)&v298[v459], (uint64_t)v522, &qword_1ED8A8C30);
  sub_1CC9EAB74(v460, v462, &qword_1ED8A8C30);
  v463 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v518 + 48);
  if (v463((uint64_t)v461, 1, v520) == 1)
  {
    sub_1CCA0BF30((uint64_t)v583, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v584, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (v463(v462, 1, v520) == 1)
    {
      sub_1CC9C3E84((uint64_t)v522, &qword_1ED8A8C30);
      v227 = v616;
      v300 = v585;
      sub_1CCA0BEEC(v616, v585, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v222 = (uint64_t)v606;
      v273 = (uint64_t)v603;
      sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v603, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v299 = (uint64_t)v589;
      v295 = (uint64_t)v587;
      goto LABEL_246;
    }
LABEL_244:
    sub_1CC9C3E84((uint64_t)v522, &qword_1EF9E5340);
    v222 = (uint64_t)v606;
    v227 = v616;
    v285 = v592;
    v299 = (uint64_t)v589;
    v295 = (uint64_t)v587;
    v273 = (uint64_t)v603;
    goto LABEL_65;
  }
  sub_1CC9EAB74((uint64_t)v522, (uint64_t)v521, &qword_1ED8A8C30);
  if (v463(v462, 1, v520) == 1)
  {
    sub_1CCA0BF30((uint64_t)v583, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v584, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v521, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    goto LABEL_244;
  }
  v464 = v519;
  sub_1CC9FED60(v462, (uint64_t)v519, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  v465 = v521;
  v466 = _s8FMIPCore13FMIPItemGroupV2eeoiySbAC_ACtFZ_0(v521, v464);
  sub_1CCA0BF30((uint64_t)v464, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  sub_1CCA0BF30((uint64_t)v583, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v584, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v465, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  sub_1CC9C3E84((uint64_t)v522, &qword_1ED8A8C30);
  v227 = v616;
  v300 = v585;
  sub_1CCA0BEEC(v616, v585, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v222 = (uint64_t)v606;
  v273 = (uint64_t)v603;
  sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v603, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v301 = v593;
  v285 = v592;
  v299 = (uint64_t)v589;
  v295 = (uint64_t)v587;
  if ((v466 & 1) == 0)
    goto LABEL_66;
LABEL_246:
  v467 = v533;
  v468 = *(unsigned __int8 *)(v300 + v533[33]);
  sub_1CCA0BF30(v300, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  LODWORD(v467) = *(unsigned __int8 *)(v273 + v467[33]);
  sub_1CCA0BF30(v273, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v302 = v586;
  sub_1CCA0BEEC(v227, v586, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v222, v295, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v210 = v468 == (_DWORD)v467;
  v285 = v592;
  v301 = v593;
  if (!v210)
    goto LABEL_67;
  v469 = sub_1CCA1812C(*(_QWORD *)(v302 + 224), *(_QWORD *)(v295 + 224));
  sub_1CCA0BF30(v302, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30(v295, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v303 = v588;
  sub_1CCA0BEEC(v227, v588, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v285 = v592;
  sub_1CCA0BEEC(v222, v299, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if ((v469 & 1) == 0)
    goto LABEL_68;
  v470 = v533;
  v471 = *(unsigned __int8 *)(v303 + v533[34]);
  sub_1CCA0BF30(v303, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  LODWORD(v470) = *(unsigned __int8 *)(v299 + v470[34]);
  sub_1CCA0BF30(v299, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v304 = v590;
  sub_1CCA0BEEC(v227, v590, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v305 = v591;
  sub_1CCA0BEEC(v222, (uint64_t)v591, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v210 = v471 == (_DWORD)v470;
  v285 = v592;
  v301 = v593;
  if (!v210)
    goto LABEL_69;
  v472 = v533;
  v473 = *(unsigned __int8 *)(v304 + v533[35]);
  sub_1CCA0BF30(v304, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  LODWORD(v472) = v305[v472[35]];
  sub_1CCA0BF30((uint64_t)v305, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v227, (uint64_t)v593, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v222, (uint64_t)v592, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v210 = v473 == (_DWORD)v472;
  v285 = v592;
  v301 = v593;
  if (!v210)
    goto LABEL_70;
  v474 = v533[36];
  v475 = &v593[v474];
  v476 = *(_QWORD *)&v593[v474 + 8];
  v477 = &v592[v474];
  v478 = v477[1];
  if (!v476)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v592, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v593, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (!v478)
      goto LABEL_259;
LABEL_261:
    swift_bridgeObjectRelease();
    v222 = (uint64_t)v606;
    v227 = v616;
    goto LABEL_71;
  }
  if (!v478)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v592, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v593, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    goto LABEL_261;
  }
  if (*v475 == *v477 && v476 == v478)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30((uint64_t)v592, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v593, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    swift_bridgeObjectRelease();
LABEL_259:
    v307 = v595;
    sub_1CCA0BEEC(v616, (uint64_t)v595, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v308 = v594;
    sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v594, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    goto LABEL_263;
  }
  v479 = sub_1CCB642A0();
  swift_bridgeObjectRetain();
  sub_1CCA0BF30((uint64_t)v592, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v593, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  swift_bridgeObjectRelease();
  v307 = v595;
  sub_1CCA0BEEC(v616, (uint64_t)v595, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v308 = v594;
  sub_1CCA0BEEC((uint64_t)v606, (uint64_t)v594, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if ((v479 & 1) == 0)
    goto LABEL_72;
LABEL_263:
  v480 = v533[41];
  v481 = (uint64_t)&v308[v480];
  v482 = v524;
  v483 = (uint64_t)&v524[*(int *)(v531 + 48)];
  sub_1CC9EAB74((uint64_t)&v307[v480], (uint64_t)v524, &qword_1ED8A7130);
  sub_1CC9EAB74(v481, v483, &qword_1ED8A7130);
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v615)(v482, 1, v532) == 1)
  {
    sub_1CCA0BF30((uint64_t)v594, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v595, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v615)(v483, 1, v532) == 1)
    {
      sub_1CC9C3E84((uint64_t)v524, &qword_1ED8A7130);
      v309 = 1;
      return v309 & 1;
    }
  }
  else
  {
    sub_1CC9EAB74((uint64_t)v524, (uint64_t)v523, &qword_1ED8A7130);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v615)(v483, 1, v532) != 1)
    {
      v484 = v535;
      v485 = v528;
      v486 = v532;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v535 + 32))(v528, v483, v532);
      sub_1CC9CAA38(&qword_1EF9E5348, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
      v487 = v523;
      v309 = sub_1CCB63958();
      v488 = *(void (**)(_BYTE *, uint64_t))(v484 + 8);
      v488(v485, v486);
      sub_1CCA0BF30((uint64_t)v594, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      sub_1CCA0BF30((uint64_t)v595, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v488(v487, v486);
      sub_1CC9C3E84((uint64_t)v524, &qword_1ED8A7130);
      return v309 & 1;
    }
    sub_1CCA0BF30((uint64_t)v594, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30((uint64_t)v595, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    (*(void (**)(_BYTE *, uint64_t))(v535 + 8))(v523, v532);
  }
  sub_1CC9C3E84((uint64_t)v524, &qword_1ED8A7138);
LABEL_73:
  v309 = 0;
  return v309 & 1;
}

uint64_t type metadata accessor for FMIPDevice()
{
  uint64_t result;

  result = qword_1ED8A8F08;
  if (!qword_1ED8A8F08)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1CCA11CFC(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, double *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char *v28;
  char v29;
  char *v30;
  id v31;
  uint64_t v32;
  char *v33;
  id v34;
  char *v35;
  id v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  void *v56;
  double v57;
  char *v58;
  id v59;
  unsigned __int8 *v60;
  id v61;
  int v62;
  double v63;
  id v64;
  id v65;
  char *v66;
  id v67;
  char *v68;
  char v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  id v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  BOOL v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  id v86;
  uint64_t v87;
  char v88;
  char *v89;
  id v90;
  _QWORD v91[2];
  double *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  id v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  char *v104;
  double *v105;

  v12 = sub_1CCB635B0();
  v97 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v96 = (char *)v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v95 = (char *)v91 - v15;
  v16 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for FMIPItemGroup();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v94 = (uint64_t)v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) == 0)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v38 = sub_1CCB637FC();
    sub_1CCA16C20(v38, (uint64_t)qword_1ED8AD7F8);
    v39 = sub_1CCB637D8();
    v40 = sub_1CCB63D24();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v41 = 67109120;
      LODWORD(v105) = 0;
      sub_1CCB63E44();
      _os_log_impl(&dword_1CC9BF000, v39, v40, "FMIPDevice: isLocationEnabled: %{BOOL}d", v41, 8u);
      MEMORY[0x1D17B214C](v41, -1, -1);
    }

    *a6 = 0.0;
    a6[1] = 0.0;
    a6[2] = 0.0;
    return;
  }
  v22 = (void *)a1[1];
  v23 = a1[2];
  v101 = *a1;
  v102 = v23;
  v25 = *a2;
  v24 = (char *)a2[1];
  v103 = v22;
  v104 = v24;
  v26 = a2[2];
  v27 = *a5;
  sub_1CC9EAB74(a4, (uint64_t)v18, &qword_1ED8A8C30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) != 1)
  {
    v42 = v94;
    sub_1CC9FED60((uint64_t)v18, v94, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    if ((FMIPItemGroup.shouldDisplaySeparatedLocation.getter() & 1) != 0)
    {
      sub_1CCA0BF30(v42, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      a6[1] = 0.0;
      a6[2] = 0.0;
      *a6 = 0.0;
    }
    else
    {
      v43 = swift_bridgeObjectRetain();
      v44 = (double *)sub_1CCB1A650(v43);
      swift_bridgeObjectRelease();
      v45 = v104;
      if (v104)
      {
        sub_1CCA14E90(&qword_1EF9E1460);
        v46 = swift_allocObject();
        v45 = v104;
        *(_OWORD *)(v46 + 16) = xmmword_1CCB677E0;
        *(_BYTE *)(v46 + 32) = v25 & 1;
        *(_BYTE *)(v46 + 33) = BYTE1(v25) & 1;
        *(_BYTE *)(v46 + 34) = BYTE2(v25) & 1;
        *(_BYTE *)(v46 + 35) = BYTE3(v25);
        *(_QWORD *)(v46 + 40) = v45;
        *(_QWORD *)(v46 + 48) = v26;
      }
      else
      {
        v46 = MEMORY[0x1E0DEE9D8];
      }
      v105 = v44;
      v48 = v45;
      sub_1CCAC87B4(v46);
      v49 = v105;
      v50 = *((_QWORD *)v105 + 2);
      if (v50)
      {
        v51 = v12;
        v52 = *((unsigned __int8 *)v105 + 32);
        v53 = *((unsigned __int8 *)v105 + 33);
        v54 = *((unsigned __int8 *)v105 + 34);
        v55 = *((unsigned __int8 *)v105 + 35);
        v56 = (void *)*((_QWORD *)v105 + 5);
        v57 = v105[6];
        v58 = (char *)(v50 - 1);
        if (v50 == 1)
        {
          v59 = v56;
        }
        else
        {
          v92 = a6;
          swift_bridgeObjectRetain();
          v59 = v56;
          v91[1] = v49;
          v60 = (unsigned __int8 *)(v49 + 7);
          v61 = v59;
          v93 = v51;
          do
          {
            v103 = v61;
            v104 = v58;
            LODWORD(v102) = *v60;
            v62 = v60[1];
            v100 = v60[2];
            LODWORD(v101) = v62;
            v99 = v60[3];
            v63 = *((double *)v60 + 2);
            v64 = *((id *)v60 + 1);
            v98 = v64;
            v65 = objc_msgSend(v61, sel_timestamp);
            v66 = v95;
            sub_1CCB63580();

            v67 = objc_msgSend(v64, sel_timestamp);
            v68 = v96;
            sub_1CCB63580();

            v69 = sub_1CCB63550();
            v70 = *(void (**)(char *, uint64_t))(v97 + 8);
            v71 = v68;
            v72 = v59;
            v73 = v55;
            v74 = v52;
            v75 = v54;
            v76 = v53;
            v77 = v93;
            v70(v71, v93);
            v78 = v77;
            v53 = v76;
            v54 = v75;
            v70(v66, v78);
            if ((v69 & 1) != 0)
              v79 = v72;
            else
              v79 = v98;
            if ((v69 & 1) != 0)
              v52 = v102;
            else
              v52 = v74;
            if ((v69 & 1) != 0)
            {
              v53 = v101;
              v54 = v100;
              v55 = v99;
            }
            else
            {
              v55 = v73;
            }
            v80 = (v69 & 1) == 0;
            v61 = v103;
            v81 = v104;
            if (v80)
              v59 = v72;
            else
              v59 = v98;
            if (!v80)
            {
              v57 = v63;
              v61 = v98;
            }

            v60 += 24;
            v58 = v81 - 1;
          }
          while (v58);
          swift_bridgeObjectRelease();
          a6 = v92;
        }
        v82 = 256;
        if ((v53 & 1) == 0)
          v82 = 0;
        v83 = v82 & 0xFFFFFFFFFFFFFFFELL | v52 & 1;
        v84 = 0x10000;
        if ((v54 & 1) == 0)
          v84 = 0;
        *(_QWORD *)a6 = (v83 | v84) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v55 << 24);
        *((_QWORD *)a6 + 1) = v59;
        a6[2] = v57;
        v42 = v94;
      }
      else
      {
        *a6 = 0.0;
        a6[1] = 0.0;
        a6[2] = 0.0;
      }
      sub_1CCA0BF30(v42, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      swift_bridgeObjectRelease();
    }
    return;
  }
  sub_1CC9C3E84((uint64_t)v18, &qword_1ED8A8C30);
  v28 = v104;
  if (!v104)
  {
    v28 = (char *)v103;
    *(_QWORD *)a6 = v101;
    *((_QWORD *)a6 + 1) = v28;
    *((_QWORD *)a6 + 2) = v102;
LABEL_20:
    v47 = v28;
    return;
  }
  if (!v103)
  {
    *(_QWORD *)a6 = v25 & 0xFF010101;
    *((_QWORD *)a6 + 1) = v28;
    *((_QWORD *)a6 + 2) = v26;
    goto LABEL_20;
  }
  if (v27)
  {
    v29 = sub_1CCB642A0();
    v30 = v104;
    v31 = v103;
    swift_bridgeObjectRelease();
    v33 = v96;
    v32 = v97;
    if ((v29 & 1) == 0)
    {
      v34 = objc_msgSend(v31, sel_timestamp);
      v35 = v95;
      sub_1CCB63580();

      v36 = objc_msgSend(v30, sel_timestamp);
      sub_1CCB63580();

      LOBYTE(v36) = sub_1CCB63550();
      v37 = *(void (**)(char *, uint64_t))(v32 + 8);
      v37(v33, v12);
      v37(v35, v12);
      if ((v36 & 1) != 0)
      {

LABEL_55:
        v89 = v104;
        *(_QWORD *)a6 = v25 & 0xFF010101;
        *((_QWORD *)a6 + 1) = v89;
        *((_QWORD *)a6 + 2) = v26;
        return;
      }
    }
  }
  else
  {
    v85 = v104;
    v86 = v103;
    swift_bridgeObjectRelease();
  }
  LOBYTE(v105) = BYTE3(v25);
  if (FMIPLocationType.rawValue.getter() == 0x656D69746C616572 && v87 == 0xE800000000000000)
  {

    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  v88 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  if ((v88 & 1) != 0)
  {

    goto LABEL_55;
  }

  v90 = v103;
  *(_QWORD *)a6 = v101 & 0xFF010101;
  *((_QWORD *)a6 + 1) = v90;
  *((_QWORD *)a6 + 2) = v102;
}

uint64_t FMIPDevice.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::String v70;
  int v71;
  char v72;
  char v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t ObjCClassFromMetadata;
  id v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  int *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  id v133;
  id v134;
  _QWORD *v135;
  uint64_t countAndFlagsBits;
  int *v137;
  uint64_t v138;
  char v139;
  char v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  _QWORD *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  NSObject *v153;
  os_log_type_t v154;
  uint8_t *v155;
  os_log_type_t v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  Swift::String v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  int *v213;
  uint8_t *v214;
  uint8_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD v226[36];
  char v227;
  uint64_t v228[36];
  _QWORD v229[36];
  char v230;
  unsigned __int8 v231;
  char v232;
  char v233;
  unsigned __int8 v234;
  void *v235;
  uint64_t v236;

  v218 = a2;
  v3 = sub_1CCA14E90(&qword_1ED8A7130);
  v4 = MEMORY[0x1E0C80A78](v3);
  v217 = (uint64_t)&v159 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v216 = (uint64_t)&v159 - v7;
  v8 = MEMORY[0x1E0C80A78](v6);
  v215 = (uint8_t *)&v159 - v9;
  MEMORY[0x1E0C80A78](v8);
  v214 = (uint8_t *)&v159 - v10;
  v11 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v11);
  v219 = (uint64_t)&v159 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCA14E90(&qword_1ED8A73F8);
  MEMORY[0x1E0C80A78](v13);
  v220 = (uint64_t)&v159 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1CCA14E90(&qword_1ED8A73B8);
  MEMORY[0x1E0C80A78](v15);
  v221 = (uint64_t)&v159 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v17);
  v222 = (uint64_t)&v159 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1CCA14E90(&qword_1ED8A7460);
  MEMORY[0x1E0C80A78](v19);
  v223 = (uint64_t)&v159 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1CCA14E90(&qword_1ED8A7F40);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v159 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for FMIPDevice();
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v159 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a1[3];
  v225 = a1;
  sub_1CCA04DDC(a1, v28);
  sub_1CCA155B8();
  v29 = v224;
  sub_1CCB643B4();
  if (v29)
    return sub_1CCA01CA0((uint64_t)v225);
  v213 = (int *)v25;
  v224 = v27;
  LOBYTE(v229[0]) = 14;
  v30 = v24;
  v31 = sub_1CCB64150();
  v33 = v32;
  LOBYTE(v229[0]) = 4;
  v34 = sub_1CCB64150();
  v211 = v31;
  v210 = v34;
  v212 = v35;
  LOBYTE(v229[0]) = 39;
  v36 = sub_1CCB64150();
  v38 = v37;
  v209 = v36;
  LOBYTE(v229[0]) = 12;
  v208 = sub_1CCB64150();
  v40 = v39;
  LOBYTE(v229[0]) = 38;
  v206 = sub_1CCB64150();
  v207 = v41;
  LOBYTE(v229[0]) = 46;
  v204._countAndFlagsBits = sub_1CCB64150();
  v204._object = v43;
  LOBYTE(v229[0]) = 10;
  v203 = sub_1CCB64150();
  v205 = v44;
  LOBYTE(v229[0]) = 9;
  v201 = sub_1CCB64150();
  v202 = v45;
  LOBYTE(v229[0]) = 36;
  v194 = sub_1CCB64150();
  v196 = v46;
  LOBYTE(v229[0]) = 41;
  v193 = sub_1CCB64150();
  v197 = v47;
  LOBYTE(v229[0]) = 37;
  v192 = sub_1CCB64150();
  v198 = v48;
  LOBYTE(v229[0]) = 11;
  v191 = sub_1CCB64150();
  v199 = v49;
  LOBYTE(v229[0]) = 2;
  sub_1CCB64168();
  v51 = v50;
  LOBYTE(v229[0]) = 3;
  v195 = sub_1CCB64150();
  v200 = v52;
  LOBYTE(v229[0]) = 40;
  v190 = sub_1CCB64174();
  LOBYTE(v229[0]) = 33;
  v185 = sub_1CCB64174();
  LOBYTE(v229[0]) = 32;
  v53 = sub_1CCB6418C();
  v184 = 0;
  v180 = v53;
  LOBYTE(v229[0]) = 30;
  v54 = sub_1CCB6418C();
  v186 = 0;
  v181 = v54;
  LOBYTE(v229[0]) = 48;
  v55 = sub_1CCB6418C();
  v187 = 0;
  v182 = v55;
  LOBYTE(v229[0]) = 53;
  v56 = sub_1CCB6418C();
  v188 = 0;
  v183 = v56;
  LOBYTE(v229[0]) = 51;
  v189 = sub_1CCB64174();
  LOBYTE(v229[0]) = 8;
  v179 = sub_1CCB6415C();
  LOBYTE(v229[0]) = 5;
  v178 = sub_1CCB6415C();
  v176 = v33;
  v177 = v38;
  LOBYTE(v229[0]) = 7;
  v57 = v30;
  v175 = sub_1CCB6415C();
  sub_1CCA14E90(&qword_1ED8A7E98);
  LOBYTE(v228[0]) = 1;
  sub_1CCA1552C(&qword_1ED8A7EA8, &qword_1ED8A7E98, (uint64_t (*)(void))sub_1CCA229B0, MEMORY[0x1E0DEAF40]);
  sub_1CCB64180();
  v228[0] = v229[0];
  swift_bridgeObjectRetain();
  sub_1CCA158D4(v228);
  swift_bridgeObjectRelease();
  v170 = v228[0];
  sub_1CCA14E90(&qword_1ED8A7EB0);
  LOBYTE(v228[0]) = 47;
  sub_1CCA1552C(&qword_1ED8A7EC0, &qword_1ED8A7EB0, (uint64_t (*)(void))sub_1CCA221BC, MEMORY[0x1E0DEAF40]);
  sub_1CCB64180();
  v169 = v229[0];
  LOBYTE(v228[0]) = 29;
  sub_1CCA162BC();
  sub_1CCB64180();
  v172 = (id)v229[1];
  v58 = 256;
  if (!BYTE1(v229[0]))
    v58 = 0;
  v59 = v58 | LOBYTE(v229[0]);
  v60 = 0x10000;
  if (!BYTE2(v229[0]))
    v60 = 0;
  v163 = v59 | v60 | ((unint64_t)BYTE3(v229[0]) << 24);
  v164 = v229[2];
  v230 = 6;
  sub_1CCB64180();
  v171 = v235;
  v61 = 256;
  if (!v232)
    v61 = 0;
  v62 = v61 | v231;
  v63 = 0x10000;
  if (!v233)
    v63 = 0;
  v165 = v62 | v63 | ((unint64_t)v234 << 24);
  v166 = v236;
  v227 = 0;
  sub_1CCA178E4();
  sub_1CCB64180();
  memcpy(v226, v228, sizeof(v226));
  nullsub_1(v226);
  sub_1CC9C3EC0((uint64_t)v226, (uint64_t)v229, &qword_1ED8A71C0);
  LOBYTE(v226[0]) = 13;
  sub_1CCA16300();
  sub_1CCB64180();
  v173 = 0;
  v162 = v228[0];
  v64 = type metadata accessor for FMIPPlaySoundMetadata();
  LOBYTE(v228[0]) = 45;
  sub_1CC9CAA38(&qword_1ED8A7458, (uint64_t (*)(uint64_t))type metadata accessor for FMIPPlaySoundMetadata, (uint64_t)&protocol conformance descriptor for FMIPPlaySoundMetadata);
  sub_1CCB64180();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v223, 0, 1, v64);
  v65 = type metadata accessor for FMIPDeviceLostModeMetadata();
  LOBYTE(v228[0]) = 31;
  sub_1CC9CAA38((unint64_t *)&unk_1ED8A7A90, (uint64_t (*)(uint64_t))type metadata accessor for FMIPDeviceLostModeMetadata, (uint64_t)&protocol conformance descriptor for FMIPDeviceLostModeMetadata);
  sub_1CCB64180();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v222, 0, 1, v65);
  v66 = type metadata accessor for FMIPLockMetadata();
  LOBYTE(v228[0]) = 42;
  sub_1CC9CAA38(&qword_1ED8A73B0, (uint64_t (*)(uint64_t))type metadata accessor for FMIPLockMetadata, (uint64_t)&protocol conformance descriptor for FMIPLockMetadata);
  sub_1CCB64180();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v221, 0, 1, v66);
  v67 = type metadata accessor for FMIPEraseMetadata();
  LOBYTE(v228[0]) = 43;
  sub_1CC9CAA38(&qword_1ED8A73F0, (uint64_t (*)(uint64_t))type metadata accessor for FMIPEraseMetadata, (uint64_t)&protocol conformance descriptor for FMIPEraseMetadata);
  sub_1CCB64180();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v220, 0, 1, v67);
  sub_1CCA14E90(&qword_1EF9E2930);
  LOBYTE(v226[0]) = 44;
  sub_1CCA1552C(&qword_1EF9E2938, &qword_1EF9E2930, (uint64_t (*)(void))sub_1CCA22778, MEMORY[0x1E0DEAF40]);
  sub_1CCB64180();
  v168 = v228[0];
  LOBYTE(v226[0]) = 54;
  sub_1CCA16278();
  sub_1CCB64180();
  v161 = LOBYTE(v228[0]);
  LOBYTE(v226[0]) = 55;
  sub_1CCB24318();
  sub_1CCB64180();
  v160 = LOBYTE(v228[0]);
  LOBYTE(v228[0]) = 56;
  v167 = sub_1CCB64150();
  v174 = v68;
  v69 = type metadata accessor for FMIPItemGroup();
  LOBYTE(v228[0]) = 49;
  sub_1CC9CAA38(&qword_1EF9E2B30, (uint64_t (*)(uint64_t))type metadata accessor for FMIPItemGroup, (uint64_t)&protocol conformance descriptor for FMIPItemGroup);
  sub_1CCB64180();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v219, 0, 1, v69);
  if (v200)
  {
    v70._countAndFlagsBits = v195;
    v70._object = v200;
    FMIPBatteryStatus.init(rawValue:)(v70);
    v71 = LOBYTE(v228[0]);
    if (LOBYTE(v228[0]) == 4)
      v71 = 0;
    LODWORD(v200) = v71;
  }
  else
  {
    LODWORD(v200) = 0;
  }
  FMIPDeviceStatus.init(rawValue:)(v204);
  if (LOBYTE(v228[0]) == 3)
    v72 = 1;
  else
    v72 = v228[0];
  LOBYTE(v228[0]) = 28;
  v73 = sub_1CCB6415C();
  LOBYTE(v228[0]) = 20;
  LODWORD(v204._object) = sub_1CCB6415C();
  LOBYTE(v228[0]) = 15;
  LODWORD(v204._countAndFlagsBits) = sub_1CCB6415C();
  LOBYTE(v228[0]) = 21;
  LODWORD(v195) = sub_1CCB6415C();
  LOBYTE(v228[0]) = 19;
  v74 = sub_1CCB6415C();
  v75 = v73 & 1;
  if (((uint64_t)v204._object & 1) != 0)
    v75 = v73 & 1 | 2;
  if ((v204._countAndFlagsBits & 1) != 0)
    v75 |= 4uLL;
  if ((v195 & 1) != 0)
    v75 |= 8uLL;
  if ((v74 & 1) != 0)
    v76 = v75 | 0x20;
  else
    v76 = v75;
  LOBYTE(v228[0]) = 52;
  if ((sub_1CCB6415C() & 1) != 0)
    v76 |= 0x20000uLL;
  LOBYTE(v228[0]) = 57;
  if ((sub_1CCB6415C() & 1) != 0)
    v76 |= 0x40000uLL;
  LOBYTE(v228[0]) = 17;
  if ((sub_1CCB6415C() & ((v76 & 0x10) == 0)) != 0)
    v76 |= 0x10uLL;
  LOBYTE(v228[0]) = 23;
  if ((sub_1CCB6415C() & ((v76 & 0x40) == 0)) != 0)
    v76 |= 0x40uLL;
  LOBYTE(v228[0]) = 24;
  v77 = sub_1CCB6412C();
  if (v77 != 2)
  {
    v78 = (v76 >> 13) & 1;
    if ((v77 & 1) == 0)
      LODWORD(v78) = 1;
    if (!(_DWORD)v78)
      v76 |= 0x2000uLL;
  }
  LOBYTE(v228[0]) = 25;
  v79 = sub_1CCB6412C();
  if (v79 != 2)
  {
    v80 = (v76 >> 14) & 1;
    if ((v79 & 1) == 0)
      LODWORD(v80) = 1;
    if (!(_DWORD)v80)
      v76 |= 0x4000uLL;
  }
  LOBYTE(v228[0]) = 26;
  v81 = sub_1CCB6412C();
  if (v81 != 2)
  {
    v82 = (v76 >> 15) & 1;
    if ((v81 & 1) == 0)
      LODWORD(v82) = 1;
    if (!(_DWORD)v82)
      v76 |= 0x8000uLL;
  }
  if (v177 && (v209 != 0x72656E776FLL || v177 != 0xE500000000000000) && !(sub_1CCB642A0() & 1 | (v76 >> 7) & 1))
    v76 |= 0x80uLL;
  LOBYTE(v228[0]) = 18;
  LODWORD(v204._object) = sub_1CCB6415C();
  LOBYTE(v228[0]) = 22;
  LODWORD(v204._countAndFlagsBits) = sub_1CCB6415C();
  LOBYTE(v228[0]) = 27;
  v83 = sub_1CCB6415C();
  if (((uint64_t)v204._object & ((v76 & 0x100) == 0)) != 0)
    v84 = v76 | 0x100;
  else
    v84 = v76;
  if ((((v84 & 0x200) == 0) & v204._countAndFlagsBits) != 0)
    v84 |= 0x200uLL;
  if ((((v84 & 0x400) == 0) & v83) != 0)
    v84 |= 0x400uLL;
  v204._object = (void *)v84;
  if ((v84 & 0x20000) != 0)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v85 = sub_1CCB637FC();
    sub_1CCA16C20(v85, (uint64_t)qword_1ED8AD7F8);
    v86 = sub_1CCB637D8();
    v87 = sub_1CCB63D48();
    v204._countAndFlagsBits = (uint64_t)v86;
    if (os_log_type_enabled(v86, v87))
    {
      v88 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v88 = 0;
      _os_log_impl(&dword_1CC9BF000, (os_log_t)v204._countAndFlagsBits, v87, "FMIPDevice: Device in pending remove, remove should not be enabled", v88, 2u);
      MEMORY[0x1D17B214C](v88, -1, -1);
    }

    v204._countAndFlagsBits = 0;
  }
  else
  {
    v204._countAndFlagsBits = 64;
  }
  v89 = HIBYTE(v207) & 0xF;
  if ((v207 & 0x2000000000000000) == 0)
    v89 = v206 & 0xFFFFFFFFFFFFLL;
  if (!v89 && ((uint64_t)v204._object & 0x200) != 0)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for FMLocalize();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v91 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v206 = sub_1CCB63340();
    v207 = v92;

  }
  if (v212)
  {
    v93 = HIBYTE(v212) & 0xF;
    if ((v212 & 0x2000000000000000) == 0)
      v93 = v210 & 0xFFFFFFFFFFFFLL;
    if (v93)
      goto LABEL_82;
    swift_bridgeObjectRelease();
    v210 = 0;
  }
  v212 = 0;
LABEL_82:
  v94 = v224;
  v95 = v176;
  v96 = v177;
  *v224 = v211;
  v94[1] = v95;
  v97 = v209;
  v94[2] = v210;
  v94[3] = v212;
  v98 = 0x72656E776FLL;
  if (v96)
    v98 = v97;
  v99 = 0xE500000000000000;
  if (v96)
    v99 = v96;
  v94[4] = v98;
  v94[5] = v99;
  v94[6] = v208;
  v94[7] = v40;
  v100 = v207;
  v94[8] = v206;
  v94[9] = v100;
  *((_BYTE *)v94 + 80) = v72;
  v101 = v205;
  v94[11] = v203;
  v94[12] = v101;
  v102 = v202;
  v94[13] = v201;
  v94[14] = v102;
  v103 = v196;
  v94[15] = v194;
  v94[16] = v103;
  v104 = v199;
  v105 = v191;
  if (!v199)
    v105 = 0;
  v106 = 0xE000000000000000;
  if (!v199)
    v104 = 0xE000000000000000;
  v94[21] = v105;
  v94[22] = v104;
  v107 = v197;
  v108 = v193;
  if (!v197)
  {
    v108 = 0;
    v107 = 0xE000000000000000;
  }
  v94[17] = v108;
  v94[18] = v107;
  v109 = v192;
  if (v198)
    v106 = v198;
  else
    v109 = 0;
  v94[19] = v109;
  v94[20] = v106;
  v94[23] = v51;
  *((_BYTE *)v94 + 192) = (_BYTE)v200;
  v110 = v185;
  v94[25] = v190;
  v94[26] = v110;
  if (v184)
  {
    v111 = sub_1CCB635B0();
    (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 56))(v214, 1, 1, v111);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v112 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v113 = objc_msgSend(v112, sel_fm_dateFromEpoch_, v180);
    v114 = (uint64_t)v214;
    sub_1CCB63580();

    v115 = sub_1CCB635B0();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v115 - 8) + 56))(v114, 0, 1, v115);
  }
  sub_1CC9C3EC0((uint64_t)v214, (uint64_t)v224 + v213[38], &qword_1ED8A7130);
  if (v186)
  {
    v116 = sub_1CCB635B0();
    (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 56))(v215, 1, 1, v116);
  }
  else
  {
    v117 = objc_msgSend((id)objc_opt_self(), sel_fm_dateFromEpoch_, v181);
    v118 = v215;
    sub_1CCB63580();

    v119 = sub_1CCB635B0();
    (*(void (**)(uint8_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 56))(v118, 0, 1, v119);
  }
  sub_1CC9C3EC0((uint64_t)v215, (uint64_t)v224 + v213[39], &qword_1ED8A7130);
  if (v187)
  {
    v120 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 56))(v216, 1, 1, v120);
  }
  else
  {
    v121 = objc_msgSend((id)objc_opt_self(), sel_fm_dateFromEpoch_, v182);
    v122 = v216;
    sub_1CCB63580();

    v123 = sub_1CCB635B0();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v123 - 8) + 56))(v122, 0, 1, v123);
  }
  sub_1CC9C3EC0(v216, (uint64_t)v224 + v213[40], &qword_1ED8A7130);
  swift_bridgeObjectRelease();
  if (v188)
  {
    v124 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v124 - 8) + 56))(v217, 1, 1, v124);
  }
  else
  {
    v125 = objc_msgSend((id)objc_opt_self(), sel_fm_dateFromEpoch_, v183);
    v126 = v217;
    sub_1CCB63580();

    v127 = sub_1CCB635B0();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 56))(v126, 0, 1, v127);
  }
  v128 = v213;
  v129 = v224;
  sub_1CC9C3EC0(v217, (uint64_t)v224 + v213[41], &qword_1ED8A7130);
  *(_QWORD *)((char *)v129 + v128[37]) = v189;
  *((_BYTE *)v129 + v128[42]) = v179 & 1;
  *((_BYTE *)v129 + v128[43]) = v178 & 1;
  *((_BYTE *)v129 + v128[44]) = v175 & 1;
  v129[27] = v204._object;
  v130 = MEMORY[0x1E0DEE9D8];
  v131 = v170;
  if (!v170)
    v131 = MEMORY[0x1E0DEE9D8];
  v129[29] = v131;
  v129[31] = v169;
  if (qword_1EF9DEF98 != -1)
    swift_once();
  if ((byte_1EF9E27F1 & 1) != 0)
  {
    v163 = 0;
    v164 = 0;
    v132 = 0;
  }
  else
  {
    v133 = v172;
    v134 = v172;
    v132 = v133;
  }
  v135 = v224;
  v224[32] = v163;
  v135[33] = v132;
  v135[34] = v164;
  sub_1CC9C3EC0((uint64_t)v229, (uint64_t)(v135 + 38), &qword_1ED8A71C0);
  countAndFlagsBits = v162;
  if (v173)
    countAndFlagsBits = v204._countAndFlagsBits;
  v135[30] = countAndFlagsBits;
  v137 = v213;
  sub_1CC9EAB74(v223, (uint64_t)v135 + v213[28], &qword_1ED8A7460);
  sub_1CC9EAB74(v222, (uint64_t)v135 + v137[29], &qword_1ED8A7AA0);
  sub_1CC9EAB74(v221, (uint64_t)v135 + v137[30], &qword_1ED8A73B8);
  sub_1CC9EAB74(v220, (uint64_t)v135 + v137[31], &qword_1ED8A73F8);
  v138 = v168;
  if (!v168)
    v138 = v130;
  v135[28] = v138;
  v139 = v161;
  if (v161 == 7)
    v139 = 0;
  *((_BYTE *)v135 + v137[34]) = v139;
  v140 = v160;
  if (v160 == 5)
    v140 = 0;
  *((_BYTE *)v135 + v137[35]) = v140;
  v141 = (_QWORD *)((char *)v135 + v137[36]);
  v142 = v174;
  *v141 = v167;
  v141[1] = v142;
  if (qword_1EF9DEFA0 != -1)
    swift_once();
  if (byte_1EF9E27F2 == 1)
  {
    sub_1CCB23054(v211, v176, v228);
    swift_bridgeObjectRelease();
    v143 = v228[1];
    v144 = 256;
    if (!BYTE1(v228[0]))
      v144 = 0;
    v145 = v144 | LOBYTE(v228[0]);
    v146 = 0x10000;
    if (!BYTE2(v228[0]))
      v146 = 0;
    v165 = v145 | v146 | ((unint64_t)BYTE3(v228[0]) << 24);
    v166 = v228[2];
  }
  else
  {
    swift_bridgeObjectRelease();
    v147 = (uint64_t)v171;
    v148 = v171;
    v143 = v147;
  }
  v149 = v224;
  v224[35] = v165;
  v149[36] = v143;
  v149[37] = v166;
  sub_1CC9EAB74(v219, (uint64_t)v149 + v213[32], &qword_1ED8A8C30);
  LOBYTE(v228[0]) = 50;
  *((_BYTE *)v224 + v213[33]) = sub_1CCB6415C() & 1;
  v217 = FMIPDevice.debugDescription.getter();
  v151 = v150;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v152 = sub_1CCB637FC();
  sub_1CCA16C20(v152, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v153 = sub_1CCB637D8();
  v154 = sub_1CCB63D18();
  if (os_log_type_enabled(v153, v154))
  {
    v155 = (uint8_t *)swift_slowAlloc();
    v216 = swift_slowAlloc();
    v228[0] = v216;
    v215 = v155;
    *(_DWORD *)v155 = 136315138;
    v214 = v155 + 4;
    swift_bridgeObjectRetain();
    v226[0] = sub_1CCA0CB60(v217, v151, v228);
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    v156 = v154;
    v157 = v215;
    _os_log_impl(&dword_1CC9BF000, v153, v156, "FMIPDevice: initialized %s", v215, 0xCu);
    v158 = v216;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v158, -1, -1);
    MEMORY[0x1D17B214C](v157, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  sub_1CC9C3E84(v219, &qword_1ED8A8C30);
  sub_1CC9C3E84(v220, &qword_1ED8A73F8);
  sub_1CC9C3E84(v221, &qword_1ED8A73B8);
  sub_1CC9C3E84(v222, &qword_1ED8A7AA0);
  sub_1CC9C3E84(v223, &qword_1ED8A7460);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v57, v21);
  sub_1CC9FED60((uint64_t)v224, v218, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  return sub_1CCA01CA0((uint64_t)v225);
}

uint64_t initializeWithCopy for FMIPDevice(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v65;
  _DWORD *v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  void (*v106)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  void (*v128)(_QWORD *, _QWORD, uint64_t, uint64_t);
  void (*v129)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  const void *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int (*v140)(const void *, uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  const void *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v156;
  unsigned int (*v157)(_QWORD *, uint64_t, uint64_t);
  void (*v158)(char *, char *, uint64_t);
  char *v159;
  uint64_t v160;
  char *v161;
  char *__dsta;
  _QWORD *__dst;
  char *v164;
  uint64_t v165;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v12;
  v13 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v13;
  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v14;
  v15 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v15;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  v16 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v16;
  v17 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v17;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  v19 = *(void **)(a2 + 264);
  v18 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = v19;
  *(_QWORD *)(a1 + 272) = v18;
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  v21 = *(void **)(a2 + 288);
  v20 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v21;
  *(_QWORD *)(a1 + 296) = v20;
  v22 = *(_QWORD *)(a2 + 472);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = v19;
  v24 = v21;
  if (v22)
  {
    v25 = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 312) = v25;
    v26 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 328) = v26;
    v27 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = v27;
    v28 = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 360) = v28;
    v29 = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(a1 + 376) = v29;
    v30 = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 392) = v30;
    v31 = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(a1 + 408) = v31;
    v32 = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 424) = v32;
    v33 = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 440) = v33;
    v34 = *(_QWORD *)(a2 + 456);
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 456) = v34;
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a1 + 472) = v22;
    v35 = *(_QWORD *)(a2 + 488);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    *(_QWORD *)(a1 + 488) = v35;
    v36 = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 504) = v36;
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy((void *)(a1 + 304), (const void *)(a2 + 304), 0x120uLL);
  }
  v37 = a3;
  v38 = a3[28];
  v39 = (_BYTE *)(a1 + v38);
  v40 = (_BYTE *)(a2 + v38);
  v41 = (int *)type metadata accessor for FMIPPlaySoundMetadata();
  v42 = *((_QWORD *)v41 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v42 + 48))(v40, 1, v41))
  {
    v43 = sub_1CCA14E90(&qword_1ED8A7460);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    *v39 = *v40;
    v44 = v41[5];
    v45 = &v39[v44];
    v46 = &v40[v44];
    v47 = sub_1CCB635B0();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
    v48 = v41[6];
    v49 = &v39[v48];
    v50 = &v40[v48];
    v51 = v50[1];
    *v49 = *v50;
    v49[1] = v51;
    v52 = v41[7];
    v53 = &v39[v52];
    v54 = &v40[v52];
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    v56 = v41[8];
    v57 = &v39[v56];
    v58 = &v40[v56];
    v59 = v58[1];
    *v57 = *v58;
    v57[1] = v59;
    v60 = v41[9];
    v61 = &v39[v60];
    v62 = &v40[v60];
    v63 = v62[1];
    *v61 = *v62;
    v61[1] = v63;
    v64 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v42 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v64(v39, 0, 1, v41);
  }
  v65 = a3[29];
  v66 = (_DWORD *)(a1 + v65);
  v67 = (_DWORD *)(a2 + v65);
  v68 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v69 = *(_QWORD *)(v68 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
  {
    v70 = sub_1CCA14E90(&qword_1ED8A7AA0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    *v66 = *v67;
    v71 = *((_QWORD *)v67 + 2);
    *((_QWORD *)v66 + 1) = *((_QWORD *)v67 + 1);
    *((_QWORD *)v66 + 2) = v71;
    v72 = *((_QWORD *)v67 + 4);
    *((_QWORD *)v66 + 3) = *((_QWORD *)v67 + 3);
    *((_QWORD *)v66 + 4) = v72;
    v73 = *((_QWORD *)v67 + 6);
    *((_QWORD *)v66 + 5) = *((_QWORD *)v67 + 5);
    *((_QWORD *)v66 + 6) = v73;
    *((_BYTE *)v66 + 56) = *((_BYTE *)v67 + 56);
    v74 = *(int *)(v68 + 48);
    __dsta = (char *)v67 + v74;
    v164 = (char *)v66 + v74;
    v75 = sub_1CCB635B0();
    v76 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v77 = v75;
    v37 = a3;
    v76(v164, __dsta, v77);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
  }
  v78 = v37[30];
  v79 = (_BYTE *)(a1 + v78);
  v80 = (_BYTE *)(a2 + v78);
  v81 = type metadata accessor for FMIPLockMetadata();
  v82 = *(_QWORD *)(v81 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
  {
    v83 = sub_1CCA14E90(&qword_1ED8A73B8);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    *v79 = *v80;
    v84 = *(int *)(v81 + 20);
    v85 = &v79[v84];
    v86 = &v80[v84];
    v87 = sub_1CCB635B0();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v85, v86, v87);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
  }
  v88 = v37[31];
  v89 = (_BYTE *)(a1 + v88);
  v90 = (_BYTE *)(a2 + v88);
  v91 = (int *)type metadata accessor for FMIPEraseMetadata();
  v92 = *((_QWORD *)v91 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v92 + 48))(v90, 1, v91))
  {
    v93 = sub_1CCA14E90(&qword_1ED8A73F8);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
  }
  else
  {
    *v89 = *v90;
    v94 = v91[5];
    v95 = &v89[v94];
    v96 = &v90[v94];
    v97 = sub_1CCB635B0();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v95, v96, v97);
    v98 = v91[6];
    v99 = &v89[v98];
    v100 = &v90[v98];
    v101 = v100[1];
    *v99 = *v100;
    v99[1] = v101;
    v102 = v91[7];
    v103 = &v89[v102];
    v104 = &v90[v102];
    v105 = v104[1];
    *v103 = *v104;
    v103[1] = v105;
    v89[v91[8]] = v90[v91[8]];
    v106 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v92 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v106(v89, 0, 1, v91);
  }
  v107 = v37[32];
  v108 = (_QWORD *)(a1 + v107);
  v109 = (_QWORD *)(a2 + v107);
  v110 = type metadata accessor for FMIPItemGroup();
  v111 = *(_QWORD *)(v110 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
  {
    v112 = sub_1CCA14E90(&qword_1ED8A8C30);
    memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
  }
  else
  {
    v165 = v111;
    *(_OWORD *)v108 = *(_OWORD *)v109;
    v113 = v109[3];
    v108[2] = v109[2];
    v108[3] = v113;
    v114 = v109[5];
    v108[4] = v109[4];
    v108[5] = v114;
    v160 = v109[7];
    v108[6] = v109[6];
    v108[7] = v160;
    v115 = v109[9];
    v108[8] = v109[8];
    v108[9] = v115;
    v116 = *(int *)(v110 + 48);
    __dst = (_QWORD *)((char *)v108 + v116);
    v117 = (_QWORD *)((char *)v109 + v116);
    v118 = type metadata accessor for FMIPItemLostModeMetadata();
    v156 = *(_QWORD *)(v118 - 8);
    v157 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v156 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v157(v117, 1, v118))
    {
      v119 = sub_1CCA14E90(&qword_1ED8A8CD0);
      memcpy(__dst, v117, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
    }
    else
    {
      v120 = v117[1];
      *__dst = *v117;
      __dst[1] = v120;
      v121 = v117[3];
      __dst[2] = v117[2];
      __dst[3] = v121;
      v122 = *(int *)(v118 + 24);
      v159 = (char *)v117 + v122;
      v161 = (char *)__dst + v122;
      v123 = sub_1CCB635B0();
      v158 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v123 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v158(v161, v159, v123);
      v124 = *(int *)(v118 + 28);
      v125 = (_QWORD *)((char *)__dst + v124);
      v126 = (_QWORD *)((char *)v117 + v124);
      v127 = v126[1];
      *v125 = *v126;
      v125[1] = v127;
      v128 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v156 + 56);
      swift_bridgeObjectRetain();
      v128(__dst, 0, 1, v118);
    }
    *(_QWORD *)((char *)v108 + *(int *)(v110 + 52)) = *(_QWORD *)((char *)v109 + *(int *)(v110 + 52));
    v129 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v165 + 56);
    swift_bridgeObjectRetain();
    v129(v108, 0, 1, v110);
    v37 = a3;
  }
  v130 = v37[34];
  *(_BYTE *)(a1 + v37[33]) = *(_BYTE *)(a2 + v37[33]);
  *(_BYTE *)(a1 + v130) = *(_BYTE *)(a2 + v130);
  v131 = v37[36];
  *(_BYTE *)(a1 + v37[35]) = *(_BYTE *)(a2 + v37[35]);
  v132 = (_QWORD *)(a1 + v131);
  v133 = (_QWORD *)(a2 + v131);
  v134 = v133[1];
  *v132 = *v133;
  v132[1] = v134;
  v135 = v37[38];
  *(_QWORD *)(a1 + v37[37]) = *(_QWORD *)(a2 + v37[37]);
  v136 = (void *)(a1 + v135);
  v137 = (const void *)(a2 + v135);
  v138 = sub_1CCB635B0();
  v139 = *(_QWORD *)(v138 - 8);
  v140 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v139 + 48);
  swift_bridgeObjectRetain();
  if (v140(v137, 1, v138))
  {
    v141 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v139 + 16))(v136, v137, v138);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v136, 0, 1, v138);
  }
  v142 = v37[39];
  v143 = (void *)(a1 + v142);
  v144 = (const void *)(a2 + v142);
  if (v140((const void *)(a2 + v142), 1, v138))
  {
    v145 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v139 + 16))(v143, v144, v138);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v143, 0, 1, v138);
  }
  v146 = v37[40];
  v147 = (void *)(a1 + v146);
  v148 = (const void *)(a2 + v146);
  if (v140((const void *)(a2 + v146), 1, v138))
  {
    v149 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v139 + 16))(v147, v148, v138);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v147, 0, 1, v138);
  }
  v150 = v37[41];
  v151 = (void *)(a1 + v150);
  v152 = (const void *)(a2 + v150);
  if (v140((const void *)(a2 + v150), 1, v138))
  {
    v153 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v139 + 16))(v151, v152, v138);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v151, 0, 1, v138);
  }
  v154 = v37[43];
  *(_BYTE *)(a1 + v37[42]) = *(_BYTE *)(a2 + v37[42]);
  *(_BYTE *)(a1 + v154) = *(_BYTE *)(a2 + v154);
  *(_BYTE *)(a1 + v37[44]) = *(_BYTE *)(a2 + v37[44]);
  return a1;
}

uint64_t sub_1CCA14E90(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1D17B2050]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t destroy for FMIPDevice(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(a1 + 472))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + a2[28];
  v5 = type metadata accessor for FMIPPlaySoundMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = v4 + *(int *)(v5 + 20);
    v7 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v8 = a1 + a2[29];
  v9 = type metadata accessor for FMIPDeviceLostModeMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = v8 + *(int *)(v9 + 48);
    v11 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  v12 = a1 + a2[30];
  v13 = type metadata accessor for FMIPLockMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {
    v14 = v12 + *(int *)(v13 + 20);
    v15 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  }
  v16 = a1 + a2[31];
  v17 = type metadata accessor for FMIPEraseMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v18 = v16 + *(int *)(v17 + 20);
    v19 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v20 = a1 + a2[32];
  v21 = type metadata accessor for FMIPItemGroup();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v20 + *(int *)(v21 + 48);
    v23 = type metadata accessor for FMIPItemLostModeMetadata();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = v22 + *(int *)(v23 + 24);
      v25 = sub_1CCB635B0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v26 = a1 + a2[38];
  v27 = sub_1CCB635B0();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (!v29(v26, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  v30 = a1 + a2[39];
  if (!v29(v30, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v27);
  v31 = a1 + a2[40];
  if (!v29(v31, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v31, v27);
  v32 = a1 + a2[41];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v29)(v32, 1, v27);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v32, v27);
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPItemGroup()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for FMIPItemGroup()
{
  uint64_t result;

  result = qword_1ED8A8C18;
  if (!qword_1ED8A8C18)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPPlaySoundMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for FMIPDeviceLostModeMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for FMIPPlaySoundMetadata()
{
  uint64_t result;

  result = qword_1ED8A9BC0;
  if (!qword_1ED8A9BC0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPEraseMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for FMIPDeviceLostModeMetadata()
{
  uint64_t result;

  result = qword_1ED8A9C68;
  if (!qword_1ED8A9C68)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for FMIPEraseMetadata()
{
  uint64_t result;

  result = qword_1ED8A9928;
  if (!qword_1ED8A9928)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for FMIPLockMetadata()
{
  uint64_t result;

  result = qword_1ED8A9890;
  if (!qword_1ED8A9890)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPLockMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FMIPPlaySoundMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCA1552C(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = sub_1CCA19B38(a2);
    v9 = a3();
    result = MEMORY[0x1D17B2068](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CCA15590()
{
  sub_1CCA155B8();
  return sub_1CCB643D8();
}

unint64_t sub_1CCA155B8()
{
  unint64_t result;

  result = qword_1ED8A7148;
  if (!qword_1ED8A7148)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72EE4, &type metadata for FMIPDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7148);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPDeviceLostModeMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCA15608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t result;

  if (a22)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1CCA15768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t result;

  result = a22;
  if (a22)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPItemGroup()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCA158D4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1CCA1593C(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1CCA15AC8(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1CCA1593C(uint64_t a1)
{
  return sub_1CCA15950(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1CCA15950(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1CCA14E90(&qword_1EF9E1458);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA15AC8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *__dst;
  uint64_t v116;

  v3 = a1[1];
  result = sub_1CCB64234();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_1CCA1B988(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v112 = result;
  v116 = v1;
  v109 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_118:
      v100 = v11;
      v111 = v8;
      if (v12 >= 2)
      {
        v101 = *v109;
        do
        {
          v102 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v101)
            goto LABEL_159;
          v103 = v100;
          v104 = *(_QWORD *)&v100[16 * v102 + 32];
          v105 = *(_QWORD *)&v100[16 * v12 + 24];
          sub_1CCB23B40((char *)(v101 + 24 * v104), (char *)(v101 + 24 * *(_QWORD *)&v100[16 * v12 + 16]), v101 + 24 * v105, __dst);
          if (v116)
            break;
          if (v105 < v104)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v103 = sub_1CCB24078((uint64_t)v103);
          if (v102 >= *((_QWORD *)v103 + 2))
            goto LABEL_149;
          v106 = &v103[16 * v102 + 32];
          *(_QWORD *)v106 = v104;
          *((_QWORD *)v106 + 1) = v105;
          v107 = *((_QWORD *)v103 + 2);
          if (v12 > v107)
            goto LABEL_150;
          memmove(&v103[16 * v12 + 16], &v103[16 * v12 + 32], 16 * (v107 - v12));
          v100 = v103;
          *((_QWORD *)v103 + 2) = v107 - 1;
          v12 = v107 - 1;
        }
        while (v107 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v111 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v111 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_1CCB63B8C();
    *(_QWORD *)(v7 + 16) = v6;
    v111 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v110 = *a1 + 8;
  v108 = *a1 - 24;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v113 = v3;
  v114 = *a1;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 24 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 24 * v13);
    if (*v17 == v15 && v17[1] == v16)
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_1CCB642A0();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v110 + 24 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 24 * v9);
      if (*v23 == *(v21 - 1) && v23[1] == *v21)
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_1CCB642A0()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 3;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 24 * v20;
        v26 = 24 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v26;
            v30 = v10 + v25;
            v31 = *(_QWORD *)(v10 + v26);
            v32 = *(_QWORD *)(v10 + v26 + 8);
            v33 = *(_BYTE *)(v10 + v26 + 16);
            v34 = *(_BYTE *)(v10 + v26 + 17);
            v35 = *(_BYTE *)(v10 + v26 + 18);
            v36 = *(_QWORD *)(v10 + v25 - 8);
            *(_OWORD *)v29 = *(_OWORD *)(v10 + v25 - 24);
            *(_QWORD *)(v29 + 16) = v36;
            *(_QWORD *)(v30 - 24) = v31;
            *(_QWORD *)(v30 - 16) = v32;
            *(_BYTE *)(v30 - 8) = v33;
            *(_BYTE *)(v30 - 7) = v34;
            *(_BYTE *)(v30 - 6) = v35;
          }
          ++v28;
          v25 -= 24;
          v26 += 24;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v112)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1CCB23E0C(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v50 = *((_QWORD *)v11 + 2);
    v49 = *((_QWORD *)v11 + 3);
    v12 = v50 + 1;
    if (v50 >= v49 >> 1)
      v11 = sub_1CCB23E0C((char *)(v49 > 1), v50 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v51 = v11 + 32;
    v52 = &v11[16 * v50 + 32];
    *(_QWORD *)v52 = v13;
    *((_QWORD *)v52 + 1) = v9;
    if (v50)
    {
      v10 = v114;
      while (1)
      {
        v53 = v12 - 1;
        if (v12 >= 4)
        {
          v58 = &v51[16 * v12];
          v59 = *((_QWORD *)v58 - 8);
          v60 = *((_QWORD *)v58 - 7);
          v64 = __OFSUB__(v60, v59);
          v61 = v60 - v59;
          if (v64)
            goto LABEL_135;
          v63 = *((_QWORD *)v58 - 6);
          v62 = *((_QWORD *)v58 - 5);
          v64 = __OFSUB__(v62, v63);
          v56 = v62 - v63;
          v57 = v64;
          if (v64)
            goto LABEL_136;
          v65 = v12 - 2;
          v66 = &v51[16 * v12 - 32];
          v68 = *(_QWORD *)v66;
          v67 = *((_QWORD *)v66 + 1);
          v64 = __OFSUB__(v67, v68);
          v69 = v67 - v68;
          if (v64)
            goto LABEL_138;
          v64 = __OFADD__(v56, v69);
          v70 = v56 + v69;
          if (v64)
            goto LABEL_141;
          if (v70 >= v61)
          {
            v88 = &v51[16 * v53];
            v90 = *(_QWORD *)v88;
            v89 = *((_QWORD *)v88 + 1);
            v64 = __OFSUB__(v89, v90);
            v91 = v89 - v90;
            if (v64)
              goto LABEL_145;
            v81 = v56 < v91;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v82 = *((_QWORD *)v11 + 4);
            v83 = *((_QWORD *)v11 + 5);
            v64 = __OFSUB__(v83, v82);
            v75 = v83 - v82;
            v76 = v64;
            goto LABEL_99;
          }
          v55 = *((_QWORD *)v11 + 4);
          v54 = *((_QWORD *)v11 + 5);
          v64 = __OFSUB__(v54, v55);
          v56 = v54 - v55;
          v57 = v64;
        }
        if ((v57 & 1) != 0)
          goto LABEL_137;
        v65 = v12 - 2;
        v71 = &v51[16 * v12 - 32];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v74 = __OFSUB__(v72, v73);
        v75 = v72 - v73;
        v76 = v74;
        if (v74)
          goto LABEL_140;
        v77 = &v51[16 * v53];
        v79 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        v64 = __OFSUB__(v78, v79);
        v80 = v78 - v79;
        if (v64)
          goto LABEL_143;
        if (__OFADD__(v75, v80))
          goto LABEL_144;
        if (v75 + v80 >= v56)
        {
          v81 = v56 < v80;
LABEL_105:
          if (v81)
            v53 = v65;
          goto LABEL_107;
        }
LABEL_99:
        if ((v76 & 1) != 0)
          goto LABEL_139;
        v84 = &v51[16 * v53];
        v86 = *(_QWORD *)v84;
        v85 = *((_QWORD *)v84 + 1);
        v64 = __OFSUB__(v85, v86);
        v87 = v85 - v86;
        if (v64)
          goto LABEL_142;
        if (v87 < v75)
          goto LABEL_15;
LABEL_107:
        v92 = v53 - 1;
        if (v53 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v10)
          goto LABEL_157;
        v93 = v11;
        v94 = v10;
        v95 = &v51[16 * v92];
        v96 = *(_QWORD *)v95;
        v97 = &v51[16 * v53];
        v98 = *((_QWORD *)v97 + 1);
        sub_1CCB23B40((char *)(v94 + 24 * *(_QWORD *)v95), (char *)(v94 + 24 * *(_QWORD *)v97), v94 + 24 * v98, __dst);
        if (v116)
          goto LABEL_115;
        if (v98 < v96)
          goto LABEL_132;
        if (v53 > *((_QWORD *)v93 + 2))
          goto LABEL_133;
        *(_QWORD *)v95 = v96;
        *(_QWORD *)&v51[16 * v92 + 8] = v98;
        v99 = *((_QWORD *)v93 + 2);
        if (v53 >= v99)
          goto LABEL_134;
        v11 = v93;
        v12 = v99 - 1;
        memmove(&v51[16 * v53], v97 + 16, 16 * (v99 - 1 - v53));
        *((_QWORD *)v93 + 2) = v99 - 1;
        v81 = v99 > 2;
        v10 = v114;
        if (!v81)
          goto LABEL_15;
      }
    }
    v12 = 1;
    v10 = v114;
LABEL_15:
    v3 = v113;
    if (v9 >= v113)
    {
      v8 = v111;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v112))
    goto LABEL_153;
  if (v13 + v112 >= v3)
    v37 = v3;
  else
    v37 = v13 + v112;
  if (v37 >= v13)
  {
    if (v9 != v37)
    {
      v38 = v108 + 24 * v9;
      do
      {
        v39 = v13;
        v40 = v38;
        do
        {
          v41 = v40 + 24;
          v42 = *(_QWORD *)v40 == *(_QWORD *)(v40 + 24) && *(_QWORD *)(v40 + 8) == *(_QWORD *)(v40 + 32);
          if (v42 || (sub_1CCB642A0() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v44 = *(_QWORD *)(v40 + 24);
          v43 = *(_QWORD *)(v40 + 32);
          v45 = *(_BYTE *)(v40 + 40);
          v46 = *(_BYTE *)(v40 + 41);
          v47 = *(_BYTE *)(v40 + 42);
          v48 = *(_QWORD *)(v40 + 16);
          *(_OWORD *)v41 = *(_OWORD *)v40;
          *(_QWORD *)v40 = v44;
          *(_QWORD *)(v40 + 8) = v43;
          *(_BYTE *)(v40 + 16) = v45;
          *(_BYTE *)(v40 + 17) = v46;
          *(_BYTE *)(v40 + 18) = v47;
          v40 -= 24;
          ++v39;
          *(_QWORD *)(v41 + 16) = v48;
        }
        while (v9 != v39);
        ++v9;
        v38 += 24;
      }
      while (v9 != v37);
      v9 = v37;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_1CCB64078();
  __break(1u);
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPEraseMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for FMIPLockMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

FMIPCore::FMIPDeviceStatus_optional __swiftcall FMIPDeviceStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  FMIPCore::FMIPDeviceStatus_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

unint64_t sub_1CCA16278()
{
  unint64_t result;

  result = qword_1EF9E5418;
  if (!qword_1EF9E5418)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPBeaconType, &type metadata for FMIPBeaconType);
    atomic_store(result, (unint64_t *)&qword_1EF9E5418);
  }
  return result;
}

unint64_t sub_1CCA162BC()
{
  unint64_t result;

  result = qword_1ED8A7218;
  if (!qword_1ED8A7218)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPLocation, &type metadata for FMIPLocation);
    atomic_store(result, (unint64_t *)&qword_1ED8A7218);
  }
  return result;
}

unint64_t sub_1CCA16300()
{
  unint64_t result;

  result = qword_1ED8A71F0;
  if (!qword_1ED8A71F0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPFeatures, &type metadata for FMIPFeatures);
    atomic_store(result, (unint64_t *)&qword_1ED8A71F0);
  }
  return result;
}

uint64_t FMIPFeatures.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  NSObject *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint8_t *v47;
  uint8_t *v48;
  uint64_t v49;
  unint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v5 = sub_1CCA14E90(&qword_1ED8A7F58);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA16C38();
  sub_1CCB643B4();
  if (!v2)
  {
    LOBYTE(v54) = 0;
    v9 = sub_1CCB6415C();
    LOBYTE(v54) = 1;
    v10 = sub_1CCB6415C();
    LOBYTE(v54) = 2;
    LODWORD(v52) = sub_1CCB6415C();
    LOBYTE(v54) = 3;
    LODWORD(v51) = sub_1CCB6415C();
    LOBYTE(v54) = 4;
    LODWORD(v50) = sub_1CCB6415C();
    LOBYTE(v54) = 5;
    LODWORD(v49) = sub_1CCB6415C();
    LOBYTE(v54) = 6;
    LODWORD(v48) = sub_1CCB6415C();
    LOBYTE(v54) = 7;
    LODWORD(v47) = sub_1CCB6415C();
    LOBYTE(v54) = 8;
    v46 = sub_1CCB6415C();
    LOBYTE(v54) = 9;
    v45 = sub_1CCB6415C();
    LOBYTE(v54) = 10;
    v44 = sub_1CCB6415C();
    LOBYTE(v54) = 11;
    v43 = sub_1CCB6415C();
    LOBYTE(v54) = 12;
    v42 = sub_1CCB6415C();
    LOBYTE(v54) = 13;
    v41 = sub_1CCB6415C();
    LOBYTE(v54) = 14;
    v40 = sub_1CCB6415C();
    LOBYTE(v54) = 15;
    v39 = sub_1CCB6412C();
    LOBYTE(v54) = 16;
    v38 = sub_1CCB6412C();
    LOBYTE(v54) = 17;
    v37 = sub_1CCB6412C();
    LOBYTE(v54) = 18;
    v36 = sub_1CCB6412C();
    LOBYTE(v54) = 19;
    v35 = sub_1CCB6412C();
    LOBYTE(v54) = 20;
    v34 = sub_1CCB6412C();
    LOBYTE(v54) = 21;
    v33 = sub_1CCB6412C();
    LOBYTE(v54) = 22;
    v32 = sub_1CCB6412C();
    LOBYTE(v54) = 23;
    v31 = sub_1CCB6412C();
    LOBYTE(v54) = 24;
    v30 = sub_1CCB6412C();
    v11 = v9 & 1;
    if ((v10 & 1) != 0)
      v11 = v9 & 1 | 2;
    if ((v52 & 1) != 0)
      v11 |= 4uLL;
    if ((v51 & 1) != 0)
      v11 |= 8uLL;
    if ((v50 & 1) != 0)
      v11 |= 0x10uLL;
    if ((v49 & 1) != 0)
      v11 |= 0x20uLL;
    if ((v48 & 1) != 0)
      v11 |= 0x40uLL;
    if ((v47 & 1) != 0)
      v11 |= 0x80uLL;
    if ((v46 & 1) != 0)
      v11 |= 0x100uLL;
    if ((v45 & 1) != 0)
      v11 |= 0x200uLL;
    if ((v44 & 1) != 0)
      v11 |= 0x400uLL;
    if ((v43 & 1) != 0)
      v11 |= 0x800uLL;
    if ((v42 & 1) != 0)
      v11 |= 0x1000uLL;
    if ((v41 & 1) != 0)
      v11 |= 0x2000uLL;
    if ((v40 & 1) != 0)
      v12 = v11 | 0x4000;
    else
      v12 = v11;
    LOBYTE(v54) = 25;
    v13 = sub_1CCB6412C();
    v14 = ((unint64_t)(v38 & 1) << 16) & 0xFFFFFFFFFFFD7FFFLL | ((unint64_t)(v37 & 1) << 17) | ((unint64_t)(v39 & 1) << 15) | ((unint64_t)(v36 & 1) << 18) & 0xFFFFFFFFFFF7FFFFLL | ((unint64_t)(v35 & 1) << 19) | ((unint64_t)(v34 & 1) << 20) & 0xFFFFFFFFFFDFFFFFLL | ((unint64_t)(v33 & 1) << 21) | ((v32 & 1) << 25) & 0xFBFFFFFF | ((unint64_t)(v31 & 1) << 26) | v12;
    v15 = v14 | ((unint64_t)(v30 & 1) << 22);
    if (v13 != 2)
    {
      v16 = (v14 >> 23) & 1;
      if ((v13 & 1) == 0)
        LODWORD(v16) = 1;
      if (!(_DWORD)v16)
        v15 |= 0x800000uLL;
    }
    LOBYTE(v54) = 26;
    v17 = sub_1CCB6412C();
    if (v17 != 2)
    {
      v18 = (v15 >> 24) & 1;
      if ((v17 & 1) == 0)
        LODWORD(v18) = 1;
      if (!(_DWORD)v18)
        v15 |= 0x1000000uLL;
    }
    LOBYTE(v54) = 27;
    v19 = sub_1CCB6412C();
    LOBYTE(v54) = 28;
    v52 = sub_1CCB6412C();
    LOBYTE(v54) = 29;
    v52 = v15 | ((unint64_t)(v19 & 1) << 27) | ((unint64_t)(v52 & 1) << 28) | ((sub_1CCB6412C() & 1) << 29);
    v54 = v52;
    v50 = FMIPFeatures.debugDescription.getter();
    v22 = v21;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v23 = sub_1CCB637FC();
    sub_1CCA16C20(v23, (uint64_t)qword_1ED8AD7F8);
    swift_bridgeObjectRetain();
    v24 = sub_1CCB637D8();
    v25 = sub_1CCB63D18();
    v51 = v24;
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      v54 = v49;
      v48 = v26;
      *(_DWORD *)v26 = 136315138;
      v47 = v26 + 4;
      swift_bridgeObjectRetain();
      v53 = sub_1CCA0CB60(v50, v22, &v54);
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      v27 = v51;
      v28 = v48;
      _os_log_impl(&dword_1CC9BF000, v51, v25, "FMIPFeature: initialized %s", v48, 0xCu);
      v29 = v49;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v29, -1, -1);
      MEMORY[0x1D17B214C](v28, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();

    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v52;
  }
  return sub_1CCA01CA0((uint64_t)a1);
}

uint64_t sub_1CCA16C20(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_1CCA16C38()
{
  unint64_t result;

  result = qword_1ED8A71D0;
  if (!qword_1ED8A71D0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB70A48, &type metadata for FMIPFeatures.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A71D0);
  }
  return result;
}

void FMIPLockMetadata.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned __int8 *v27;
  Swift::Int v28;
  char v29;
  char v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  char v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  unint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70[4];

  v65 = a2;
  v68 = sub_1CCB635B0();
  v66 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68);
  v67 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CCA14E90(&qword_1ED8A7F70);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FMIPLockMetadata();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA17800();
  v11 = v69;
  sub_1CCB643B4();
  if (v11)
  {
    v17 = (uint64_t)a1;
LABEL_4:
    sub_1CCA01CA0(v17);
    return;
  }
  v63 = v8;
  v64 = v10;
  v12 = v66;
  v13 = v67;
  v69 = a1;
  v14 = v68;
  LOBYTE(v70[0]) = 0;
  v15 = sub_1CCB6418C();
  LOBYTE(v70[0]) = 1;
  v16 = sub_1CCB64150();
  v62 = v5;
  v18 = v16;
  v61 = v7;
  v20 = v19;
  v21 = objc_msgSend((id)objc_opt_self(), sel_fm_dateFromEpoch_, v15);
  v22 = v13;
  sub_1CCB63580();

  v23 = HIBYTE(v20) & 0xF;
  v24 = v18 & 0xFFFFFFFFFFFFLL;
  if ((v20 & 0x2000000000000000) != 0)
    v25 = HIBYTE(v20) & 0xF;
  else
    v25 = v18 & 0xFFFFFFFFFFFFLL;
  v60 = v4;
  if (!v25)
  {
    swift_bridgeObjectRelease();
    v38 = 1;
    v31 = v14;
    v47 = v63;
    v26 = v64;
    v37 = v13;
LABEL_63:
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(&v26[*(int *)(v47 + 20)], v37, v31);
    *v26 = v38;
    v66 = FMIPLockMetadata.debugDescription.getter();
    v52 = v51;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v53 = sub_1CCB637FC();
    sub_1CCA16C20(v53, (uint64_t)qword_1ED8AD7F8);
    swift_bridgeObjectRetain();
    v54 = sub_1CCB637D8();
    v55 = sub_1CCB63D18();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = v12;
      v57 = (uint8_t *)swift_slowAlloc();
      v58 = swift_slowAlloc();
      v70[0] = v58;
      *(_DWORD *)v57 = 136315138;
      swift_bridgeObjectRetain();
      v70[3] = sub_1CCA0CB60(v66, v52, v70);
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1CC9BF000, v54, v55, "FMIPLockMetadata: initialized %s", v57, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v58, -1, -1);
      MEMORY[0x1D17B214C](v57, -1, -1);

      (*(void (**)(char *, uint64_t))(v56 + 8))(v67, v68);
      v26 = v64;
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v12 + 8))(v37, v31);
    }
    (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v60);
    v59 = (uint64_t)v69;
    sub_1CCA6A728((uint64_t)v26, v65);
    v17 = v59;
    goto LABEL_4;
  }
  if ((v20 & 0x1000000000000000) != 0)
  {
    v48 = sub_1CCA3EF0C(v18, v20, 10);
    v50 = v49;
    v28 = (Swift::Int)v48;
    swift_bridgeObjectRelease();
    v26 = v64;
    v31 = v14;
    v37 = v22;
    if ((v50 & 1) == 0)
    {
LABEL_37:
      FMIPActionStatus.init(rawValue:)(v28);
      if (LOBYTE(v70[0]) == 18)
        v38 = 1;
      else
        v38 = v70[0];
      goto LABEL_62;
    }
LABEL_61:
    v38 = 1;
LABEL_62:
    v47 = v63;
    goto LABEL_63;
  }
  v26 = v64;
  if ((v20 & 0x2000000000000000) == 0)
  {
    if ((v18 & 0x1000000000000000) != 0)
      v27 = (unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v27 = (unsigned __int8 *)sub_1CCB6400C();
    v28 = (Swift::Int)sub_1CCA3EEF8(v27, v24, 10);
    v30 = v29 & 1;
    v31 = v14;
LABEL_36:
    swift_bridgeObjectRelease();
    v37 = v22;
    if ((v30 & 1) == 0)
      goto LABEL_37;
    goto LABEL_61;
  }
  v70[0] = v18;
  v70[1] = v20 & 0xFFFFFFFFFFFFFFLL;
  if (v18 == 43)
  {
    if (!v23)
      goto LABEL_71;
    v31 = v14;
    if (v23 == 1 || (BYTE1(v18) - 48) > 9u)
      goto LABEL_35;
    v32 = (BYTE1(v18) - 48);
    if (v23 == 2)
    {
LABEL_41:
      v30 = 0;
      v28 = v32;
      goto LABEL_36;
    }
    if ((BYTE2(v18) - 48) > 9u)
      goto LABEL_35;
    v28 = 10 * (BYTE1(v18) - 48) + (BYTE2(v18) - 48);
    v33 = v23 - 3;
    if (v33)
    {
      v34 = (unsigned __int8 *)v70 + 3;
      while (1)
      {
        v35 = *v34 - 48;
        if (v35 > 9)
          goto LABEL_35;
        v36 = 10 * v28;
        if ((unsigned __int128)(v28 * (__int128)10) >> 64 != (10 * v28) >> 63)
          goto LABEL_35;
        v28 = v36 + v35;
        if (__OFADD__(v36, v35))
          goto LABEL_35;
        v30 = 0;
        ++v34;
        if (!--v33)
          goto LABEL_36;
      }
    }
LABEL_52:
    v30 = 0;
    goto LABEL_36;
  }
  v31 = v14;
  if (v18 != 45)
  {
    if (!v23 || (v18 - 48) > 9u)
      goto LABEL_35;
    v32 = (v18 - 48);
    if (v23 == 1)
      goto LABEL_41;
    if ((BYTE1(v18) - 48) > 9u)
      goto LABEL_35;
    v28 = 10 * (v18 - 48) + (BYTE1(v18) - 48);
    v39 = v23 - 2;
    if (v39)
    {
      v40 = (unsigned __int8 *)v70 + 2;
      while (1)
      {
        v41 = *v40 - 48;
        if (v41 > 9)
          goto LABEL_35;
        v42 = 10 * v28;
        if ((unsigned __int128)(v28 * (__int128)10) >> 64 != (10 * v28) >> 63)
          goto LABEL_35;
        v28 = v42 + v41;
        if (__OFADD__(v42, v41))
          goto LABEL_35;
        v30 = 0;
        ++v40;
        if (!--v39)
          goto LABEL_36;
      }
    }
    goto LABEL_52;
  }
  if (v23)
  {
    if (v23 != 1 && (BYTE1(v18) - 48) <= 9u)
    {
      if (v23 == 2)
      {
        v30 = 0;
        v28 = -(uint64_t)(BYTE1(v18) - 48);
        goto LABEL_36;
      }
      if ((BYTE2(v18) - 48) <= 9u)
      {
        v28 = -10 * (BYTE1(v18) - 48) - (BYTE2(v18) - 48);
        v43 = v23 - 3;
        if (!v43)
          goto LABEL_52;
        v44 = (unsigned __int8 *)v70 + 3;
        while (1)
        {
          v45 = *v44 - 48;
          if (v45 > 9)
            break;
          v46 = 10 * v28;
          if ((unsigned __int128)(v28 * (__int128)10) >> 64 != (10 * v28) >> 63)
            break;
          v28 = v46 - v45;
          if (__OFSUB__(v46, v45))
            break;
          v30 = 0;
          ++v44;
          if (!--v43)
            goto LABEL_36;
        }
      }
    }
LABEL_35:
    v28 = 0;
    v30 = 1;
    goto LABEL_36;
  }
  __break(1u);
LABEL_71:
  __break(1u);
}

uint64_t FMIPLocation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  void *v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  Swift::String v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  char v55;
  _BYTE v56[8];
  uint64_t v57;
  uint64_t v58;

  v51 = a2;
  v4 = sub_1CCB635B0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_1CCA14E90(&qword_1ED8A7F60);
  v8 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v54 = a1;
  sub_1CCA04DDC(a1, v11);
  sub_1CCA177BC();
  v52 = v10;
  sub_1CCB643B4();
  if (!v2)
  {
    v12 = v7;
    v49 = v5;
    v50 = v4;
    v13 = v8;
    v14 = v51;
    v56[0] = 5;
    v15 = sub_1CCB6415C();
    v56[0] = 3;
    v16 = sub_1CCB6415C();
    v56[0] = 4;
    v47 = sub_1CCB6415C();
    v48 = v16;
    v56[0] = 9;
    v17 = sub_1CCB64150();
    v20 = v19;
    v46 = v17;
    v56[0] = 1;
    sub_1CCB64168();
    v22 = v21;
    v56[0] = 0;
    sub_1CCB64168();
    v24 = v23;
    v56[0] = 6;
    sub_1CCB64168();
    v26 = v25;
    v56[0] = 8;
    sub_1CCB64168();
    v45 = v27;
    v56[0] = 2;
    sub_1CCB64168();
    v29 = v28;
    v56[0] = 11;
    sub_1CCB64168();
    v31 = v30;
    v56[0] = 10;
    v32 = sub_1CCB6418C();
    v33 = objc_msgSend((id)objc_opt_self(), sel_fm_dateFromEpoch_, v32);
    sub_1CCB63580();

    v34 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
    v35 = (void *)sub_1CCB63538();
    v36 = objc_msgSend(v34, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_speed_timestamp_, v35, v26, v45, v24, v29, v31, -1.0, -1.0);

    v37._countAndFlagsBits = v46;
    v37._object = v20;
    FMIPLocationType.init(rawValue:)(v37);
    v38 = v56[0];
    if (v56[0] == 20)
      v38 = 0;
    v55 = v38;
    sub_1CC9FB3D4(v36, &v55, v15 & 1, v48 & 1, v47 & 1, (uint64_t)v56, v22);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v12, v50);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v52, v53);
    v39 = v56[1];
    v40 = v56[2];
    v41 = v56[3];
    v42 = v57;
    v43 = v58;
    *(_BYTE *)v14 = v56[0];
    *(_BYTE *)(v14 + 1) = v39;
    *(_BYTE *)(v14 + 2) = v40;
    *(_BYTE *)(v14 + 3) = v41;
    *(_QWORD *)(v14 + 8) = v42;
    *(_QWORD *)(v14 + 16) = v43;
  }
  return sub_1CCA01CA0((uint64_t)v54);
}

unint64_t sub_1CCA177BC()
{
  unint64_t result;

  result = qword_1ED8A71F8;
  if (!qword_1ED8A71F8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6D8CC, &type metadata for FMIPLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A71F8);
  }
  return result;
}

unint64_t sub_1CCA17800()
{
  unint64_t result;

  result = qword_1ED8A7390;
  if (!qword_1ED8A7390)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6AA2C, &type metadata for FMIPLockMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7390);
  }
  return result;
}

unint64_t FMIPFeatures.debugDescription.getter()
{
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return 0xD000000000000019;
}

unint64_t sub_1CCA178E4()
{
  unint64_t result;

  result = qword_1ED8A71B8;
  if (!qword_1ED8A71B8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPAddress, &type metadata for FMIPAddress);
    atomic_store(result, (unint64_t *)&qword_1ED8A71B8);
  }
  return result;
}

uint64_t FMIPDevice.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v18;
  uint64_t v19;
  __int128 v20;
  _BYTE v21[24];
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v1 = v0;
  *(_QWORD *)&v22 = 0;
  *((_QWORD *)&v22 + 1) = 0xE000000000000000;
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  v24 = 0xD000000000000019;
  v25 = 0x80000001CCB7E100;
  swift_bridgeObjectRetain();
  v2 = sub_1CCA17EE8(10);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  MEMORY[0x1D17B0F34](v2, v4, v6, v8);
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  *(_QWORD *)v21 = *(_QWORD *)(v1 + 256);
  *(_OWORD *)&v21[8] = *(_OWORD *)(v1 + 264);
  v19 = *(_QWORD *)(v1 + 280);
  v20 = *(_OWORD *)(v1 + 288);
  v9 = (*(_QWORD *)(v1 + 216) >> 5) & 1;
  v10 = v1 + *(int *)(type metadata accessor for FMIPDevice() + 128);
  v18 = *(_BYTE *)(v1 + 80);
  sub_1CCA11CFC((uint64_t *)v21, &v19, v9, v10, &v18, (double *)&v22);
  *(_OWORD *)v21 = v22;
  *(_QWORD *)&v21[16] = v23;
  sub_1CCA14E90(&qword_1ED8A7220);
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  v12 = v24;
  v11 = v25;
  *(_QWORD *)&v22 = 0;
  *((_QWORD *)&v22 + 1) = 0xE000000000000000;
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v22 = 0x3A6C65646F6DLL;
  *((_QWORD *)&v22 + 1) = 0xE600000000000000;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  *(_QWORD *)&v22 = v12;
  *((_QWORD *)&v22 + 1) = v11;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = v22;
  *(_QWORD *)&v22 = 0;
  *((_QWORD *)&v22 + 1) = 0xE000000000000000;
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  strcpy((char *)&v22, "hasLocation: ");
  HIWORD(v22) = -4864;
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v22 = v13;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = v22;
  *(_QWORD *)&v22 = 0;
  *((_QWORD *)&v22 + 1) = 0xE000000000000000;
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v22 = 0x676E697461636F6CLL;
  *((_QWORD *)&v22 + 1) = 0xEA0000000000203ALL;
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v22 = v14;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = v22;
  *(_QWORD *)&v22 = 0;
  *((_QWORD *)&v22 + 1) = 0xE000000000000000;
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v22 = 0xD000000000000015;
  *((_QWORD *)&v22 + 1) = 0x80000001CCB7E180;
  v16 = *(_QWORD *)(v1 + 248);
  if (v16)
    v16 = *(_QWORD *)(v16 + 16);
  *(_QWORD *)v21 = v16;
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v22 = v15;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_1CCA17EE8(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1CCB63A18();
    return sub_1CCB63AC0();
  }
  return result;
}

FMIPCore::FMIPBatteryStatus_optional __swiftcall FMIPBatteryStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  FMIPCore::FMIPBatteryStatus_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

void sub_1CCA17FC8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCA18018(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCA18080 + 4 * byte_1CCB721EC[a2]))(0x64656772616843);
}

uint64_t sub_1CCA18080(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x64656772616843 && v1 == v2)
    v3 = 1;
  else
    v3 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1CCA1812C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9[44];
  uint64_t __dst[44];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v7 = 1;
    }
    else
    {
      v3 = (char *)(a1 + 32);
      v4 = (char *)(a2 + 32);
      v5 = v2 - 1;
      do
      {
        v6 = v5;
        memcpy(__dst, v3, sizeof(__dst));
        memcpy(v9, v4, sizeof(v9));
        v7 = _s8FMIPCore16FMIPSafeLocationV2eeoiySbAC_ACtFZ_0(__dst, v9);
        if ((v7 & 1) == 0)
          break;
        v5 = v6 - 1;
        v4 += 352;
        v3 += 352;
      }
      while (v6);
    }
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

uint64_t sub_1CCA181D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (unsigned __int8 *)(a2 + 50);
    v4 = (unsigned __int8 *)(a1 + 50);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      v7 = *(v3 - 1);
      v8 = *v3;
      v9 = *(v4 - 2) ^ *(v3 - 2);
      if (*(_QWORD *)(v4 - 18) == *(_QWORD *)(v3 - 18) && *(_QWORD *)(v4 - 10) == *(_QWORD *)(v3 - 10))
      {
        if (((v6 ^ v8 | v5 ^ v7 | v9) & 1) != 0)
          return 0;
      }
      else if ((v6 ^ v8) & 1 | ((sub_1CCB642A0() & 1) == 0) | ((v5 ^ v7) | v9) & 1)
      {
        return 0;
      }
      v3 += 24;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t type metadata accessor for FMReverseGeocodingRequest()
{
  uint64_t result;

  result = qword_1EF9E06D0;
  if (!qword_1EF9E06D0)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1CCA182F0(id a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    sub_1CCA1B120((uint64_t)a1, a2);
}

uint64_t _s8FMIPCore21FMIPPlaySoundMetadataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;

  v4 = type metadata accessor for FMIPPlaySoundMetadata();
  v5 = MEMORY[0x1E0C80A78](v4);
  v67 = (uint64_t)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v66 = (uint64_t)&v62 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v65 = (char *)&v62 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v62 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v64 = (uint64_t)&v62 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v62 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v62 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v62 - v23;
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = (char *)&v62 - v26;
  MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v62 - v28;
  v30 = sub_1CCB63574();
  sub_1CCA18A70(a1, (uint64_t)v29);
  sub_1CCA18A70(a2, (uint64_t)v27);
  if ((v30 & 1) == 0)
  {
    sub_1CCA189AC((uint64_t)v27);
    sub_1CCA189AC((uint64_t)v29);
    sub_1CCA18A70(a1, (uint64_t)v24);
    sub_1CCA18A70(a2, (uint64_t)v21);
    goto LABEL_12;
  }
  v63 = v4;
  v31 = qword_1CCB76A68[*v29];
  v32 = qword_1CCB76A68[*v27];
  sub_1CCA189AC((uint64_t)v27);
  sub_1CCA189AC((uint64_t)v29);
  sub_1CCA18A70(a1, (uint64_t)v24);
  sub_1CCA18A70(a2, (uint64_t)v21);
  if (v31 != v32)
  {
LABEL_12:
    sub_1CCA189AC((uint64_t)v21);
    sub_1CCA189AC((uint64_t)v24);
LABEL_13:
    v40 = (uint64_t)v18;
    v41 = v64;
    v42 = (uint64_t)v65;
    sub_1CCA18A70(a1, v40);
    sub_1CCA18A70(a2, v41);
    goto LABEL_14;
  }
  v33 = *(int *)(v63 + 24);
  v34 = &v24[v33];
  v35 = *(_QWORD *)&v24[v33 + 8];
  v36 = &v21[v33];
  v37 = *((_QWORD *)v36 + 1);
  if (!v35)
  {
    swift_bridgeObjectRetain();
    sub_1CCA189AC((uint64_t)v21);
    sub_1CCA189AC((uint64_t)v24);
    if (!v37)
    {
LABEL_26:
      v40 = (uint64_t)v18;
      sub_1CCA18A70(a1, (uint64_t)v18);
      v41 = v64;
      sub_1CCA18A70(a2, v64);
      v42 = (uint64_t)v65;
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  if (!v37)
  {
    swift_bridgeObjectRetain();
    sub_1CCA189AC((uint64_t)v21);
    sub_1CCA189AC((uint64_t)v24);
LABEL_24:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (*(_QWORD *)v34 == *(_QWORD *)v36 && v35 == v37)
  {
    swift_bridgeObjectRetain();
    sub_1CCA189AC((uint64_t)v21);
    sub_1CCA189AC((uint64_t)v24);
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  v39 = sub_1CCB642A0();
  swift_bridgeObjectRetain();
  sub_1CCA189AC((uint64_t)v21);
  sub_1CCA189AC((uint64_t)v24);
  swift_bridgeObjectRelease();
  v40 = (uint64_t)v18;
  sub_1CCA18A70(a1, (uint64_t)v18);
  v41 = v64;
  sub_1CCA18A70(a2, v64);
  v42 = (uint64_t)v65;
  if ((v39 & 1) == 0)
  {
LABEL_14:
    sub_1CCA189AC(v41);
    sub_1CCA189AC(v40);
LABEL_15:
    sub_1CCA18A70(a1, (uint64_t)v13);
    sub_1CCA18A70(a2, v42);
    goto LABEL_16;
  }
LABEL_27:
  v45 = v63;
  v46 = *(int *)(v63 + 28);
  v47 = (_QWORD *)(v40 + v46);
  v48 = *(_QWORD *)(v40 + v46 + 8);
  v49 = (_QWORD *)(v41 + v46);
  v50 = v49[1];
  if (!v48)
  {
    swift_bridgeObjectRetain();
    sub_1CCA189AC(v41);
    sub_1CCA189AC(v40);
    if (!v50)
      goto LABEL_33;
    goto LABEL_35;
  }
  if (!v50)
  {
    swift_bridgeObjectRetain();
    sub_1CCA189AC(v41);
    sub_1CCA189AC(v40);
LABEL_35:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (*v47 == *v49 && v48 == v50)
  {
    swift_bridgeObjectRetain();
    sub_1CCA189AC(v41);
    sub_1CCA189AC(v40);
    swift_bridgeObjectRelease();
LABEL_33:
    sub_1CCA18A70(a1, (uint64_t)v13);
    sub_1CCA18A70(a2, v42);
    goto LABEL_37;
  }
  v51 = sub_1CCB642A0();
  swift_bridgeObjectRetain();
  sub_1CCA189AC(v41);
  sub_1CCA189AC(v40);
  swift_bridgeObjectRelease();
  sub_1CCA18A70(a1, (uint64_t)v13);
  sub_1CCA18A70(a2, v42);
  if ((v51 & 1) == 0)
  {
LABEL_16:
    sub_1CCA189AC(v42);
    sub_1CCA189AC((uint64_t)v13);
LABEL_17:
    sub_1CCA18A70(a1, v66);
    sub_1CCA18A70(a2, v67);
    goto LABEL_18;
  }
LABEL_37:
  v52 = *(int *)(v45 + 32);
  v53 = &v13[v52];
  v54 = *(_QWORD *)&v13[v52 + 8];
  v55 = (_QWORD *)(v42 + v52);
  v56 = v55[1];
  if (!v54)
  {
    swift_bridgeObjectRetain();
    sub_1CCA189AC(v42);
    sub_1CCA189AC((uint64_t)v13);
    if (!v56)
      goto LABEL_43;
    goto LABEL_45;
  }
  if (!v56)
  {
    swift_bridgeObjectRetain();
    sub_1CCA189AC(v42);
    sub_1CCA189AC((uint64_t)v13);
LABEL_45:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)v53 == *v55 && v54 == v56)
  {
    swift_bridgeObjectRetain();
    sub_1CCA189AC(v42);
    sub_1CCA189AC((uint64_t)v13);
    swift_bridgeObjectRelease();
LABEL_43:
    sub_1CCA18A70(a1, v66);
    sub_1CCA18A70(a2, v67);
    goto LABEL_47;
  }
  v57 = sub_1CCB642A0();
  swift_bridgeObjectRetain();
  sub_1CCA189AC(v42);
  sub_1CCA189AC((uint64_t)v13);
  swift_bridgeObjectRelease();
  sub_1CCA18A70(a1, v66);
  sub_1CCA18A70(a2, v67);
  if ((v57 & 1) == 0)
  {
LABEL_18:
    sub_1CCA189AC(v67);
    sub_1CCA189AC(v66);
LABEL_19:
    LOBYTE(v43) = 0;
    return v43 & 1;
  }
LABEL_47:
  v58 = *(int *)(v45 + 36);
  v59 = (_QWORD *)(v66 + v58);
  v60 = *(_QWORD *)(v66 + v58 + 8);
  v61 = (_QWORD *)(v67 + v58);
  v43 = v61[1];
  if (!v60)
  {
    swift_bridgeObjectRetain();
    sub_1CCA189AC(v67);
    sub_1CCA189AC(v66);
    if (!v43)
    {
      LOBYTE(v43) = 1;
      return v43 & 1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (v43)
  {
    if (*v59 == *v61 && v60 == v43)
      LOBYTE(v43) = 1;
    else
      LOBYTE(v43) = sub_1CCB642A0();
  }
  swift_bridgeObjectRetain();
  sub_1CCA189AC(v67);
  sub_1CCA189AC(v66);
  swift_bridgeObjectRelease();
  return v43 & 1;
}

uint64_t sub_1CCA189AC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FMIPPlaySoundMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for FMIPPlaySoundMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA18A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPPlaySoundMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_BYTE *initializeWithCopy for FMIPPlaySoundMetadata(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = &a1[v11];
  v16 = &a2[v11];
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = a3[8];
  v19 = a3[9];
  v20 = &a1[v18];
  v21 = &a2[v18];
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = &a1[v19];
  v24 = &a2[v19];
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1CCA18B84(uint64_t a1, uint64_t a2, void *a3, void (*a4)(char *, char *, uint64_t), int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(char *, uint64_t);
  _QWORD *result;
  uint64_t v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  uint64_t *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  NSObject *v57;
  os_log_type_t v58;
  int v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t (*v66)(_QWORD, _QWORD, _QWORD);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  void (*v76)(_QWORD, _QWORD, _QWORD);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  void (*v103)(uint64_t, _QWORD *);
  id v104;
  char *v105;
  _QWORD v106[2];
  char *v107;
  uint64_t v108;
  uint64_t *v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  void *v115;
  void (*v116)(char *, char *, uint64_t);
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t (*v123)(_QWORD, _QWORD, _QWORD);
  char *v124;
  char *AssociatedConformanceWitness;
  void (*v126)(char *, uint64_t, uint64_t);
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(_QWORD, _QWORD, _QWORD);

  v131 = a7;
  v114 = a5;
  v116 = a4;
  v115 = a3;
  v13 = sub_1CCB63E2C();
  v118 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v117 = (char *)v106 - v14;
  sub_1CCA19B38(&qword_1EF9DF470);
  v15 = sub_1CCB6439C();
  v112 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v111 = (_QWORD *)((char *)v106 - v16);
  v17 = sub_1CCB63E2C();
  MEMORY[0x1E0C80A78](v17);
  v107 = (char *)v106 - v18;
  v132 = a8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v108 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v20 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v109 = (_QWORD *)((char *)v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v20);
  v110 = (char *)v106 - v22;
  v119 = v23;
  v24 = sub_1CCB6439C();
  v128 = *(_QWORD *)(v24 - 8);
  v129 = v24;
  v25 = MEMORY[0x1E0C80A78](v24);
  v124 = (char *)v106 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v127 = (_QWORD *)((char *)v106 - v28);
  v29 = *(_QWORD *)(a6 - 8);
  v30 = MEMORY[0x1E0C80A78](v27);
  AssociatedConformanceWitness = (char *)v106 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0C80A78](v30);
  v121 = (char *)v106 - v33;
  MEMORY[0x1E0C80A78](v32);
  v35 = (char *)v106 - v34;
  v123 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))(a2 + 16);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v36 = sub_1CCB637FC();
  v37 = sub_1CCA16C20(v36, (uint64_t)qword_1ED8AD7F8);
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v130 = a1;
  v126 = v38;
  v38(v35, a1, a6);
  v106[1] = v37;
  v39 = sub_1CCB637D8();
  v40 = sub_1CCB63D48();
  v41 = os_log_type_enabled(v39, v40);
  v113 = v13;
  v120 = v15;
  v122 = a9;
  if (v41)
  {
    v42 = (uint8_t *)swift_slowAlloc();
    v43 = swift_slowAlloc();
    v136 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v43;
    *(_DWORD *)v42 = 136315138;
    swift_getAssociatedConformanceWitness();
    v44 = sub_1CCB64240();
    v135 = sub_1CCA0CB60(v44, v45, (uint64_t *)&v136);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    v46 = *(void (**)(char *, uint64_t))(v29 + 8);
    v46(v35, a6);
    _os_log_impl(&dword_1CC9BF000, v39, v40, "FMImageCache: Finished loading request: %s", v42, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v43, -1, -1);
    MEMORY[0x1D17B214C](v42, -1, -1);
  }
  else
  {
    v46 = *(void (**)(char *, uint64_t))(v29 + 8);
    v46(v35, a6);
  }

  swift_beginAccess();
  result = (_QWORD *)swift_weakLoadStrong();
  v48 = v132;
  v49 = AssociatedConformanceWitness;
  v50 = v124;
  if (result)
  {
    v51 = result;
    v52 = v127;
    sub_1CCA1A5D8(v115, (unint64_t)v116, v114 & 1, result, v127);
    (*(void (**)(char *, uint64_t *, uint64_t))(v128 + 16))(v50, v52, v129);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v53 = *(char **)v50;
      v54 = v130;
      v126(v49, v130, a6);
      v55 = v53;
      v56 = v53;
      v57 = sub_1CCB637D8();
      v58 = sub_1CCB63D48();
      v59 = v58;
      v60 = os_log_type_enabled(v57, v58);
      v124 = v53;
      if (v60)
      {
        v61 = swift_slowAlloc();
        v123 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))swift_slowAlloc();
        v136 = v123;
        *(_DWORD *)v61 = 136315394;
        swift_getAssociatedConformanceWitness();
        LODWORD(v119) = v59;
        v62 = sub_1CCB64240();
        v133 = sub_1CCA0CB60(v62, v63, (uint64_t *)&v136);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        v46(v49, a6);
        *(_WORD *)(v61 + 12) = 2080;
        swift_getErrorValue();
        v64 = sub_1CCB64300();
        v133 = sub_1CCA0CB60(v64, v65, (uint64_t *)&v136);
        v54 = v130;
        sub_1CCB63E44();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1CC9BF000, v57, (os_log_type_t)v119, "FMImageCache: Failed to fetch image for request: %s due to: %s", (uint8_t *)v61, 0x16u);
        v66 = v123;
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v66, -1, -1);
        MEMORY[0x1D17B214C](v61, -1, -1);
      }
      else
      {
        v46(v49, a6);

      }
      v94 = v120;
      swift_beginAccess();
      v95 = v51[5];
      swift_getFunctionTypeMetadata1();
      v96 = sub_1CCB63BD4();
      AssociatedConformanceWitness = (char *)swift_getAssociatedConformanceWitness();
      v97 = *((_QWORD *)AssociatedConformanceWitness + 2);
      swift_bridgeObjectRetain();
      MEMORY[0x1D17B0E8C](&v133, v54, v95, a6, v96, v97);
      v98 = swift_bridgeObjectRelease();
      v99 = v124;
      if (v133)
      {
        v134 = v133;
        MEMORY[0x1E0C80A78](v98);
        v106[-6] = a6;
        v106[-5] = v100;
        v106[-4] = v132;
        v106[-3] = v101;
        v106[-2] = v99;
        MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF38], v96);
        sub_1CCB63ACC();
        swift_bridgeObjectRelease();
      }
      v102 = v111;
      *v111 = v99;
      swift_storeEnumTagMultiPayload();
      v103 = *(void (**)(uint64_t, _QWORD *))(*v51 + 288);
      v104 = v99;
      v103(v54, v102);

      (*(void (**)(_QWORD *, uint64_t))(v112 + 8))(v102, v94);
      v93 = v113;
    }
    else
    {
      v67 = *(int *)(v119 + 48);
      v68 = v119;
      v69 = v110;
      v70 = &v110[v67];
      v72 = *(_QWORD *)v50;
      v71 = *((_QWORD *)v50 + 1);
      *(_QWORD *)v110 = *(_QWORD *)v50;
      *((_QWORD *)v69 + 1) = v71;
      v73 = *(_QWORD *)(v48 - 8);
      v74 = *(void (**)(char *, char *, uint64_t))(v73 + 32);
      v74(&v69[v67], &v50[v67], v48);
      v126(v121, v130, a6);
      v75 = (char *)v109 + *(int *)(v68 + 48);
      v76 = *(void (**)(_QWORD, _QWORD, _QWORD))(v73 + 16);
      v124 = v70;
      v123 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v76;
      v76(v75, v70, v132);
      v77 = v107;
      v116 = v74;
      v74(v107, v75, v132);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v77, 0, 1, v132);
      swift_beginAccess();
      sub_1CCA1B164(v72, v71);
      AssociatedConformanceWitness = (char *)swift_getAssociatedConformanceWitness();
      v78 = *((_QWORD *)AssociatedConformanceWitness + 2);
      sub_1CCB63910();
      sub_1CCB63928();
      swift_endAccess();
      v79 = v130;
      sub_1CCAC1EDC(v72, v71, v130);
      swift_beginAccess();
      v80 = v51[5];
      swift_getFunctionTypeMetadata1();
      v81 = sub_1CCB63BD4();
      swift_bridgeObjectRetain();
      v82 = v132;
      MEMORY[0x1D17B0E8C](&v133, v79, v80, a6, v81, v78);
      v83 = v119;
      v84 = v109;
      swift_bridgeObjectRelease();
      if (v133)
      {
        v134 = v133;
        v85 = (char *)v84 + *(int *)(v83 + 48);
        *v84 = v72;
        v84[1] = v71;
        v86 = v123(v85, v124, v82);
        MEMORY[0x1E0C80A78](v86);
        v87 = v131;
        v106[-6] = a6;
        v106[-5] = v87;
        v88 = v122;
        v106[-4] = v82;
        v106[-3] = v88;
        v106[-2] = v84;
        sub_1CCA1B164(v72, v71);
        MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF38], v81);
        v83 = v119;
        sub_1CCB63ACC();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t *, uint64_t))(v108 + 8))(v84, v83);
      }
      v89 = v83;
      v90 = (char *)v84 + *(int *)(v83 + 48);
      *v84 = v72;
      v84[1] = v71;
      v123(v90, v124, v82);
      sub_1CCA1B120(v72, v71);
      v91 = v111;
      v116((char *)v111, v90, v82);
      v92 = v120;
      swift_storeEnumTagMultiPayload();
      v54 = v130;
      (*(void (**)(uint64_t, _QWORD *))(*v51 + 288))(v130, v91);
      (*(void (**)(_QWORD *, uint64_t))(v112 + 8))(v91, v92);
      (*(void (**)(char *, uint64_t))(v108 + 8))(v110, v89);
      v93 = v113;
    }
    swift_beginAccess();
    sub_1CCB63CAC();
    v105 = v117;
    sub_1CCB63C88();
    (*(void (**)(char *, uint64_t))(v118 + 8))(v105, v93);
    swift_endAccess();
    v126(v121, v54, a6);
    v134 = 0;
    swift_beginAccess();
    swift_getFunctionTypeMetadata1();
    sub_1CCB63BD4();
    sub_1CCB63910();
    sub_1CCB63928();
    swift_endAccess();
    swift_release();
    return (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t))(v128 + 8))(v127, v129);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for FMIPBeaconShareDirection(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t FMIPDeviceImageCacheRequest.debugDescription.getter()
{
  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB64060();
  sub_1CCB63A24();
  sub_1CCB64060();
  sub_1CCB63A24();
  return 0;
}

uint64_t sub_1CCA19B38(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1D17B205C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void sub_1CCA19B7C(NSObject *a1, NSObject *a2, NSObject *a3)
{
  NSObject *v3;
  _QWORD *isa;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  Class v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, NSObject *, uint64_t);
  NSObject *v30;
  NSObject *v31;
  char v32;
  NSObject *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject **v52;
  NSObject *v53;
  void *v54;
  uint64_t v55;
  char *v56;
  NSObject *v57;
  NSObject *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  NSObject *v66;
  void (*v67)(char *, NSObject *, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  NSObject *v77;
  char *v78;
  char *v79;
  NSObject *v80;
  uint64_t AssociatedConformanceWitness;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  NSObject *v89;
  NSObject *v90;
  NSObject *v91;
  uint64_t v92;
  void (*v93)(char *, NSObject *, uint64_t);
  uint64_t v94;
  uint64_t aBlock[6];

  v80 = a3;
  v89 = a2;
  v91 = a1;
  isa = v3->isa;
  v5 = *((_QWORD *)v3->isa + 10);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v87 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v79 = (char *)&v76 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v86 = (char *)&v76 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v78 = (char *)&v76 - v14;
  v85 = v15;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v76 - v16;
  v18 = isa[12];
  v19 = sub_1CCB63E2C();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v76 - v21;
  swift_beginAccess();
  v90 = v3;
  v23 = v3[6].isa;
  v24 = v17;
  v25 = isa[11];
  v83 = isa[13];
  v82 = v25;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v26 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  swift_bridgeObjectRetain();
  v27 = v91;
  v88 = v26;
  MEMORY[0x1D17B0E8C](v91, v23, v5, v18, v26);
  swift_bridgeObjectRelease();
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48);
  v84 = v18;
  LODWORD(v23) = v28(v22, 1, v18);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  v29 = *(void (**)(char *, NSObject *, uint64_t))(v6 + 16);
  v30 = v27;
  v92 = v6;
  v93 = v29;
  v29(v24, v27, v5);
  if ((_DWORD)v23 == 1)
  {
    v31 = v90 + 4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v32 = sub_1CCB63CA0();
    swift_bridgeObjectRelease();
    v33 = *(NSObject **)(v92 + 8);
    v34 = v5;
    ((void (*)(char *, uint64_t))v33)(v24, v5);
    if ((v32 & 1) == 0)
    {
LABEL_13:
      v89 = v31;
      if (qword_1ED8AA630 != -1)
        swift_once();
      v55 = sub_1CCB637FC();
      sub_1CCA16C20(v55, (uint64_t)qword_1ED8AD7F8);
      v56 = v78;
      v57 = v30;
      v93(v78, v30, v34);
      v58 = sub_1CCB637D8();
      v59 = sub_1CCB63D48();
      v60 = os_log_type_enabled(v58, v59);
      v77 = v33;
      if (v60)
      {
        v61 = (uint8_t *)swift_slowAlloc();
        v62 = swift_slowAlloc();
        aBlock[0] = v62;
        *(_DWORD *)v61 = 136315138;
        v87 = (char *)(v61 + 4);
        v63 = sub_1CCB64240();
        v94 = sub_1CCA0CB60(v63, v64, aBlock);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v33)(v56, v34);
        _os_log_impl(&dword_1CC9BF000, v58, v59, "FMImageCache: Attempting to load request: %s", v61, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v62, -1, -1);
        MEMORY[0x1D17B214C](v61, -1, -1);
      }
      else
      {
        ((void (*)(char *, uint64_t))v33)(v56, v34);
      }

      v65 = v86;
      v66 = v30;
      v67 = v93;
      v93(v86, v30, v34);
      v68 = swift_allocObject();
      swift_weakInit();
      v69 = v79;
      v67(v79, v57, v34);
      v70 = v92;
      v71 = (*(unsigned __int8 *)(v92 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
      v72 = (char *)swift_allocObject();
      v73 = v82;
      *((_QWORD *)v72 + 2) = v34;
      *((_QWORD *)v72 + 3) = v73;
      v74 = v83;
      *((_QWORD *)v72 + 4) = v84;
      *((_QWORD *)v72 + 5) = v74;
      *((_QWORD *)v72 + 6) = v68;
      (*(void (**)(char *, char *, uint64_t))(v70 + 32))(&v72[v71], v69, v34);
      v75 = (void *)(*(uint64_t (**)(char *, uint64_t (*)(void *, unint64_t, char), char *, uint64_t, uint64_t))(v74 + 24))(v65, sub_1CCA1B270, v72, v73, v74);
      -[objc_class addOperation:](v90[2].isa, sel_addOperation_, v75);
      v93(v69, v66, v34);
      swift_beginAccess();
      sub_1CCB63CAC();
      sub_1CCB63C7C();
      ((void (*)(char *, uint64_t))v77)(v65, v34);
      swift_endAccess();

      return;
    }
  }
  else
  {
    v33 = *(NSObject **)(v92 + 8);
    ((void (*)(char *, uint64_t))v33)(v24, v5);
  }
  v35 = v87;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v36 = sub_1CCB637FC();
  sub_1CCA16C20(v36, (uint64_t)qword_1ED8AD7F8);
  v93(v35, v27, v5);
  v37 = sub_1CCB637D8();
  v38 = sub_1CCB63D48();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc();
    v40 = v33;
    v41 = swift_slowAlloc();
    aBlock[0] = v41;
    *(_DWORD *)v39 = 136315138;
    v42 = sub_1CCB64240();
    v94 = sub_1CCA0CB60(v42, v43, aBlock);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v40)(v35, v5);
    _os_log_impl(&dword_1CC9BF000, v37, v38, "FMImageCache: Loading declined, we are already processing similar location: %s", v39, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v41, -1, -1);
    MEMORY[0x1D17B214C](v39, -1, -1);
  }
  else
  {
    ((void (*)(char *, uint64_t))v33)(v35, v5);
  }

  v33 = v89;
  if (v89)
  {
    v30 = v90;
    v31 = v90[3].isa;
    v44 = v86;
    v93(v86, v91, v5);
    v45 = v5;
    v46 = v92;
    v47 = (*(unsigned __int8 *)(v92 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
    v48 = (v85 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
    v49 = (char *)swift_allocObject();
    v50 = v82;
    *((_QWORD *)v49 + 2) = v45;
    *((_QWORD *)v49 + 3) = v50;
    v51 = v83;
    *((_QWORD *)v49 + 4) = v84;
    *((_QWORD *)v49 + 5) = v51;
    *((_QWORD *)v49 + 6) = v30;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(&v49[v47], v44, v45);
    v52 = (NSObject **)&v49[v48];
    v53 = v80;
    *v52 = v33;
    v52[1] = v53;
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = sub_1CCAC42FC;
    *(_QWORD *)(v34 + 24) = v49;
    aBlock[4] = (uint64_t)sub_1CC9F4530;
    aBlock[5] = v34;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CC9F44AC;
    aBlock[3] = (uint64_t)&unk_1E88F9F38;
    v54 = _Block_copy(aBlock);
    sub_1CC9DF994((uint64_t)v33);
    sub_1CC9DF994((uint64_t)v33);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v31, v54);
    sub_1CCA203A8((uint64_t)v33);
    _Block_release(v54);
    LOBYTE(v54) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((v54 & 1) != 0)
    {
      __break(1u);
      goto LABEL_13;
    }
  }
}

uint64_t initializeWithCopy for FMIPDeviceImageCacheRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for FMIPDeviceImageCacheRequest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

__n128 initializeWithTake for FMIPDeviceImageCacheRequest(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

id sub_1CCA1A50C(__int128 *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  objc_super v17;

  v6 = (objc_class *)type metadata accessor for FMIPDeviceImageCacheOperation();
  v7 = objc_allocWithZone(v6);
  v8 = *a1;
  v9 = *((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 3);
  v11 = *((_BYTE *)a1 + 48);
  v12 = *((_BYTE *)a1 + 49);
  v13 = *((_QWORD *)a1 + 7);
  v7[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation__isFinished] = 0;
  v14 = &v7[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation_request];
  *(_OWORD *)v14 = v8;
  *((_QWORD *)v14 + 2) = v9;
  *((_QWORD *)v14 + 3) = v10;
  *((_OWORD *)v14 + 2) = a1[2];
  v14[48] = v11;
  v14[49] = v12;
  *((_QWORD *)v14 + 7) = v13;
  v15 = &v7[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation_completion];
  *v15 = a2;
  v15[1] = a3;
  v17.receiver = v7;
  v17.super_class = v6;
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t type metadata accessor for FMIPDeviceImageCacheOperation()
{
  return objc_opt_self();
}

id sub_1CCA1A5D8@<X0>(void *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(void *, unint64_t);
  uint64_t v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  void (*v25)(char *, char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t *v27;
  char *v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;

  v31 = a2;
  v9 = *(_QWORD *)(*a4 + 96);
  v10 = sub_1CCB63E2C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v30 - v13;
  v15 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    *a5 = (uint64_t)a1;
    swift_getTupleTypeMetadata2();
    sub_1CCA19B38(&qword_1EF9DF470);
    sub_1CCB6439C();
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  else
  {
    v30 = a5;
    v18 = (void (*)(void *, unint64_t))a4[7];
    v19 = (uint64_t)a1;
    v20 = a1;
    v21 = v31;
    sub_1CCA1B164(v19, v31);
    v18(v20, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v9) == 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      sub_1CCA1A89C();
      v22 = swift_allocError();
      *v23 = 1;
      sub_1CCA182F0(v20, v31, 0);
      *v30 = v22;
      swift_getTupleTypeMetadata2();
    }
    else
    {
      v25 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      v25(v17, v14, v9);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v27 = v30;
      v28 = (char *)v30 + *(int *)(TupleTypeMetadata2 + 48);
      v29 = v31;
      *v30 = (uint64_t)v20;
      v27[1] = v29;
      v25(v28, v17, v9);
    }
    sub_1CCA19B38(&qword_1EF9DF470);
    sub_1CCB6439C();
    return (id)swift_storeEnumTagMultiPayload();
  }
}

unint64_t sub_1CCA1A89C()
{
  unint64_t result;

  result = qword_1EF9DFCB0;
  if (!qword_1EF9DFCB0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMImageCacheError, &type metadata for FMImageCacheError);
    atomic_store(result, (unint64_t *)&qword_1EF9DFCB0);
  }
  return result;
}

_QWORD *initializeWithCopy for FMReverseGeocodingRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (void *)a2[2];
  a1[2] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1CCB63634();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  v14 = v7;
  if (v13(v10, 1, v11))
  {
    v15 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v16 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
  return a1;
}

uint64_t destroy for FMReverseGeocodingRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();

  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1CCB63634();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t sub_1CCA1AA60(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v6;
  void (*v7)(void *, unint64_t, void *, void *);
  id v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  id v12;

  v6 = a2;
  v7 = *(void (**)(void *, unint64_t, void *, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    v8 = v6;
    v6 = (void *)sub_1CCB634CC();
    v10 = v9;

  }
  else
  {
    swift_retain();
    v10 = 0xF000000000000000;
  }
  v11 = a3;
  v12 = a4;
  v7(v6, v10, a3, a4);

  sub_1CCA1B1A8((uint64_t)v6, v10);
  return swift_release();
}

id sub_1CCA1AB10(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;

  v9 = *(_QWORD *)(sub_1CCB63490() - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return sub_1CCA1AB88(a1, a2, a3, a4, v4 + v10, *(char **)(v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFF8)));
}

id sub_1CCA1AB88(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, char *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, unint64_t, _QWORD);
  void (*v44)(void *, _QWORD, uint64_t);
  void *v45;
  _BYTE *v46;
  id v47;
  uint64_t v48;
  os_log_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  v11 = sub_1CCB63490();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v48 - v16;
  if (a2 >> 60 == 15 || a4)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v28 = sub_1CCB637FC();
    sub_1CCA16C20(v28, (uint64_t)qword_1ED8AD7F8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a5, v11);
    v29 = a4;
    v30 = a4;
    v31 = sub_1CCB637D8();
    v32 = sub_1CCB63D48();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc();
      v34 = swift_slowAlloc();
      v51 = a6;
      v35 = v34;
      v53 = v34;
      *(_DWORD *)v33 = 136315394;
      v36 = sub_1CCB63418();
      v52 = sub_1CCA0CB60(v36, v37, &v53);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      *(_WORD *)(v33 + 12) = 2080;
      v52 = (uint64_t)a4;
      v38 = a4;
      sub_1CCA14E90(&qword_1EF9DFCB8);
      v39 = sub_1CCB639AC();
      v52 = sub_1CCA0CB60(v39, v40, &v53);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v31, v32, "FMDeviceImageDownloadOperation: error received for URL: %s, error: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      v41 = v35;
      a6 = v51;
      MEMORY[0x1D17B214C](v41, -1, -1);
      MEMORY[0x1D17B214C](v33, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);

    }
    v44 = *(void (**)(void *, _QWORD, uint64_t))&a6[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation_completion];
    v45 = a4;
    if (!a4)
    {
      sub_1CCA1A89C();
      v45 = (void *)swift_allocError();
      *v46 = 0;
    }
    v47 = a4;
    v44(v45, 0, 1);

    return objc_msgSend(a6, sel_setFinished_, 1);
  }
  else
  {
    sub_1CCA1B164(a1, a2);
    if (qword_1ED8AA630 != -1)
      swift_once();
    v18 = sub_1CCB637FC();
    sub_1CCA16C20(v18, (uint64_t)qword_1ED8AD7F8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v17, a5, v11);
    sub_1CCA1B164(a1, a2);
    sub_1CCA1B164(a1, a2);
    v19 = sub_1CCB637D8();
    v20 = sub_1CCB63D48();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc();
      v50 = swift_slowAlloc();
      v53 = v50;
      *(_DWORD *)v21 = 136315394;
      v49 = v19;
      v22 = sub_1CCB63418();
      v24 = sub_1CCA0CB60(v22, v23, &v53);
      v51 = a6;
      v52 = v24;
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      *(_WORD *)(v21 + 12) = 2080;
      v25 = sub_1CCB634A8();
      v52 = sub_1CCA0CB60(v25, v26, &v53);
      a6 = v51;
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA1B1A8(a1, a2);
      sub_1CCA1B1A8(a1, a2);
      v19 = v49;
      _os_log_impl(&dword_1CC9BF000, v49, v20, "FMDeviceImageDownloadOperation: response received for URL: %s, data: %s", (uint8_t *)v21, 0x16u);
      v27 = v50;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v27, -1, -1);
      MEMORY[0x1D17B214C](v21, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      sub_1CCA1B1A8(a1, a2);
      sub_1CCA1B1A8(a1, a2);
    }

    v42 = *(void (**)(uint64_t, unint64_t, _QWORD))&a6[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation_completion];
    sub_1CCA1B164(a1, a2);
    v42(a1, a2, 0);
    sub_1CCA1B1A8(a1, a2);
    objc_msgSend(a6, sel_setFinished_, 1);
    return (id)sub_1CCA1B1A8(a1, a2);
  }
}

uint64_t sub_1CCA1B120(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1CCA1B164(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1CCA1B1A8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1CCA1B120(a1, a2);
  return a1;
}

uint64_t sub_1CCA1B270(void *a1, unint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v3[2];
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  return sub_1CCA1B60C(a1, a2, a3 & 1, v3[6], (uint64_t)v3 + ((v5 + 56) & ~v5), v4, v3[3], v3[4], v3[5]);
}

uint64_t sub_1CCA1B2B4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1CCA14E90(&qword_1ED8A8E08);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA1B400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v4 = v3;
  v8 = sub_1CCB63820();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v20 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63868();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(_QWORD *)(v4 + 24);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a1;
  v16[3] = v4;
  v16[4] = a2;
  v16[5] = a3;
  aBlock[4] = sub_1CCA033E0;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88F5A98;
  v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1CCB63844();
  v21 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v9, MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t sub_1CCA1B60C(void *a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  void *v31;
  void *v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD aBlock[6];

  v40 = a7;
  v41 = a8;
  v39 = a5;
  v42 = a3;
  v43 = a1;
  v44 = a2;
  v10 = sub_1CCB63820();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CCB63868();
  v45 = *(_QWORD *)(v14 - 8);
  v46 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a6 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v36 = a9;
    v38 = *(id *)(result + 24);
    swift_release();
    v22 = swift_allocObject();
    v37 = v13;
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v39, a6);
    v23 = (*(unsigned __int8 *)(v18 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    v24 = (v19 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    v39 = v11;
    v25 = v10;
    v26 = (char *)swift_allocObject();
    v27 = v40;
    *((_QWORD *)v26 + 2) = a6;
    *((_QWORD *)v26 + 3) = v27;
    v28 = v36;
    *((_QWORD *)v26 + 4) = v41;
    *((_QWORD *)v26 + 5) = v28;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v26[v23], v20, a6);
    *(_QWORD *)&v26[v24] = v22;
    v29 = &v26[(v24 + 15) & 0xFFFFFFFFFFFFFFF8];
    v31 = v43;
    v30 = v44;
    *(_QWORD *)v29 = v43;
    *((_QWORD *)v29 + 1) = v30;
    LOBYTE(v24) = v42 & 1;
    v29[16] = v42 & 1;
    aBlock[4] = sub_1CCA023B0;
    aBlock[5] = v26;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA00C38;
    aBlock[3] = &unk_1E88F9FD8;
    v32 = _Block_copy(aBlock);
    swift_retain();
    sub_1CCA1B97C(v31, v30, v24);
    sub_1CCB63844();
    v47 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    v33 = v37;
    sub_1CCB63E98();
    v34 = v38;
    MEMORY[0x1D17B1318](0, v17, v33, v32);
    _Block_release(v32);

    (*(void (**)(char *, uint64_t))(v39 + 8))(v33, v25);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v46);
    swift_release();
    return swift_release();
  }
  return result;
}

id sub_1CCA1B97C(id a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return a1;
  else
    return (id)sub_1CCA1B164((uint64_t)a1, a2);
}

uint64_t sub_1CCA1B988(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 24 * a3 - 24;
LABEL_5:
    v9 = v6;
    v10 = v8;
    while (1)
    {
      v11 = v10 + 24;
      result = *(_QWORD *)v10;
      v12 = *(_QWORD *)v10 == *(_QWORD *)(v10 + 24) && *(_QWORD *)(v10 + 8) == *(_QWORD *)(v10 + 32);
      if (v12 || (result = sub_1CCB642A0(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 24;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v14 = *(_QWORD *)(v10 + 24);
      v13 = *(_QWORD *)(v10 + 32);
      v15 = *(_BYTE *)(v10 + 40);
      v16 = *(_BYTE *)(v10 + 41);
      v17 = *(_BYTE *)(v10 + 42);
      v18 = *(_QWORD *)(v10 + 16);
      *(_OWORD *)v11 = *(_OWORD *)v10;
      *(_QWORD *)v10 = v14;
      *(_QWORD *)(v10 + 8) = v13;
      *(_BYTE *)(v10 + 16) = v15;
      *(_BYTE *)(v10 + 17) = v16;
      *(_BYTE *)(v10 + 18) = v17;
      v10 -= 24;
      ++v9;
      *(_QWORD *)(v11 + 16) = v18;
      if (v4 == v9)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

FMIPCore::FMIPLocationType_optional __swiftcall FMIPLocationType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  FMIPCore::FMIPLocationType_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = sub_1CCB642C4();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 2;
  switch(v3)
  {
    case 0:
      goto LABEL_3;
    case 1:
      v5 = 1;
LABEL_3:
      v6 = v5;
      break;
    case 2:
      break;
    case 3:
      v6 = 3;
      break;
    case 4:
      v6 = 4;
      break;
    case 5:
      v6 = 5;
      break;
    case 6:
      v6 = 6;
      break;
    case 7:
      v6 = 7;
      break;
    case 8:
      v6 = 8;
      break;
    case 9:
      v6 = 9;
      break;
    case 10:
      v6 = 10;
      break;
    case 11:
      v6 = 11;
      break;
    case 12:
      v6 = 12;
      break;
    case 13:
      v6 = 13;
      break;
    case 14:
      v6 = 14;
      break;
    case 15:
      v6 = 15;
      break;
    case 16:
      v6 = 16;
      break;
    case 17:
      v6 = 17;
      break;
    case 18:
      v6 = 18;
      break;
    case 19:
      v6 = 19;
      break;
    default:
      v6 = 20;
      break;
  }
  *v2 = v6;
  return result;
}

uint64_t _s8FMIPCore12FMIPLocationV2eeoiySbAC_ACtFZ_0(double *a1, double *a2)
{
  int v2;
  int v3;
  int v4;
  double v5;
  int v6;
  int v7;
  int v8;
  double v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(unsigned __int8 *)a1;
  v3 = *((unsigned __int8 *)a1 + 1);
  v4 = *((unsigned __int8 *)a1 + 2);
  v5 = a1[2];
  v6 = *(unsigned __int8 *)a2;
  v7 = *((unsigned __int8 *)a2 + 1);
  v8 = *((unsigned __int8 *)a2 + 2);
  v9 = a2[2];
  sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A7F30);
  v10 = 0;
  if ((sub_1CCB63DF0() & 1) != 0 && v5 == v9 && ((v2 ^ v6) & 1) == 0 && ((v3 ^ v7) & 1) == 0 && ((v4 ^ v8) & 1) == 0)
  {
    v11 = FMIPLocationType.rawValue.getter();
    v13 = v12;
    if (v11 == FMIPLocationType.rawValue.getter() && v13 == v14)
      v10 = 1;
    else
      v10 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v10 & 1;
}

uint64_t FMIPLocationType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA1BCFC + 4 * byte_1CCB6D560[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1CCA1BCFC()
{
  return 0x756F7364776F7263;
}

uint64_t sub_1CCA1BD1C()
{
  return 5460039;
}

uint64_t sub_1CCA1BD2C()
{
  return 1768319319;
}

uint64_t sub_1CCA1BD3C()
{
  return 0x61636F4C65666173;
}

unint64_t sub_1CCA1BD5C()
{
  return 0xD000000000000012;
}

uint64_t type metadata accessor for FMLocalize()
{
  return objc_opt_self();
}

uint64_t _s8FMIPCore26FMIPDeviceLostModeMetadataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  char v71;
  char v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;

  v4 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v79 = (uint64_t)&v73 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v78 = (char *)&v73 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v77 = (char *)&v73 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v76 = (char *)&v73 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v75 = (char *)&v73 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v81 = (char *)&v73 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v80 = (char *)&v73 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v74 = (uint64_t)&v73 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v82 = (uint64_t)&v73 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v73 - v27;
  v29 = MEMORY[0x1E0C80A78](v26);
  v31 = (char *)&v73 - v30;
  v32 = MEMORY[0x1E0C80A78](v29);
  v34 = (char *)&v73 - v33;
  v35 = MEMORY[0x1E0C80A78](v32);
  v37 = (char *)&v73 - v36;
  v38 = MEMORY[0x1E0C80A78](v35);
  v40 = (char *)&v73 - v39;
  MEMORY[0x1E0C80A78](v38);
  v42 = (char *)&v73 - v41;
  v43 = sub_1CCB63574();
  sub_1CCA1C644(a1, (uint64_t)v42);
  sub_1CCA1C644(a2, (uint64_t)v40);
  if ((v43 & 1) == 0)
  {
    sub_1CCA1C5B0((uint64_t)v40);
    sub_1CCA1C5B0((uint64_t)v42);
    sub_1CCA1C644(a1, (uint64_t)v37);
    sub_1CCA1C644(a2, (uint64_t)v34);
LABEL_8:
    sub_1CCA1C5B0((uint64_t)v37);
    sub_1CCA1C5B0((uint64_t)v34);
    sub_1CCA1C644(a1, (uint64_t)v31);
    sub_1CCA1C644(a2, (uint64_t)v28);
    v51 = (uint64_t)v75;
    v50 = (uint64_t)v76;
    v49 = (unsigned __int8 *)v80;
    v48 = (unsigned __int8 *)v81;
LABEL_9:
    sub_1CCA1C5B0((uint64_t)v31);
    sub_1CCA1C5B0((uint64_t)v28);
    v52 = v82;
    sub_1CCA1C644(a1, v82);
    v53 = v74;
    sub_1CCA1C644(a2, v74);
    v54 = v52;
    v56 = (uint64_t)v77;
    v55 = (uint64_t)v78;
LABEL_10:
    sub_1CCA1C5B0(v54);
    sub_1CCA1C5B0(v53);
    sub_1CCA1C644(a1, (uint64_t)v49);
    sub_1CCA1C644(a2, (uint64_t)v48);
LABEL_11:
    sub_1CCA1C5B0((uint64_t)v48);
    sub_1CCA1C5B0((uint64_t)v49);
    sub_1CCA1C644(a1, v51);
    sub_1CCA1C644(a2, v50);
LABEL_12:
    sub_1CCA1C5B0(v50);
    sub_1CCA1C5B0(v51);
    sub_1CCA1C644(a1, v56);
    sub_1CCA1C644(a2, v55);
LABEL_13:
    sub_1CCA1C5B0(v55);
    sub_1CCA1C5B0(v56);
    v57 = a1;
    v58 = v79;
    sub_1CCA1C644(v57, v79);
    sub_1CCA1C644(a2, (uint64_t)v7);
    goto LABEL_14;
  }
  v44 = v40[56];
  v45 = qword_1CCB714C8[v42[56]];
  v73 = v7;
  v46 = qword_1CCB714C8[v44];
  sub_1CCA1C5B0((uint64_t)v40);
  sub_1CCA1C5B0((uint64_t)v42);
  sub_1CCA1C644(a1, (uint64_t)v37);
  sub_1CCA1C644(a2, (uint64_t)v34);
  v47 = v45 == v46;
  v7 = v73;
  if (!v47)
    goto LABEL_8;
  v49 = (unsigned __int8 *)v80;
  v48 = (unsigned __int8 *)v81;
  if (*((_QWORD *)v37 + 5) == *((_QWORD *)v34 + 5) && *((_QWORD *)v37 + 6) == *((_QWORD *)v34 + 6))
  {
    sub_1CCA1C5B0((uint64_t)v37);
    sub_1CCA1C5B0((uint64_t)v34);
    sub_1CCA1C644(a1, (uint64_t)v31);
    sub_1CCA1C644(a2, (uint64_t)v28);
    v51 = (uint64_t)v75;
    v50 = (uint64_t)v76;
  }
  else
  {
    v61 = sub_1CCB642A0();
    sub_1CCA1C5B0((uint64_t)v37);
    sub_1CCA1C5B0((uint64_t)v34);
    sub_1CCA1C644(a1, (uint64_t)v31);
    sub_1CCA1C644(a2, (uint64_t)v28);
    v51 = (uint64_t)v75;
    v50 = (uint64_t)v76;
    if ((v61 & 1) == 0)
      goto LABEL_9;
  }
  if (*((_QWORD *)v31 + 1) == *((_QWORD *)v28 + 1) && *((_QWORD *)v31 + 2) == *((_QWORD *)v28 + 2))
  {
    sub_1CCA1C5B0((uint64_t)v31);
    sub_1CCA1C5B0((uint64_t)v28);
    v62 = v82;
    sub_1CCA1C644(a1, v82);
    v53 = v74;
    sub_1CCA1C644(a2, v74);
    v54 = v62;
    v56 = (uint64_t)v77;
    v55 = (uint64_t)v78;
  }
  else
  {
    LODWORD(v76) = sub_1CCB642A0();
    sub_1CCA1C5B0((uint64_t)v31);
    sub_1CCA1C5B0((uint64_t)v28);
    v63 = v82;
    sub_1CCA1C644(a1, v82);
    v53 = v74;
    sub_1CCA1C644(a2, v74);
    v54 = v63;
    v56 = (uint64_t)v77;
    v55 = (uint64_t)v78;
    if ((v76 & 1) == 0)
      goto LABEL_10;
  }
  if (*(_QWORD *)(v54 + 24) == *(_QWORD *)(v53 + 24) && *(_QWORD *)(v54 + 32) == *(_QWORD *)(v53 + 32))
  {
    sub_1CCA1C5B0(v54);
    sub_1CCA1C5B0(v53);
    sub_1CCA1C644(a1, (uint64_t)v49);
    sub_1CCA1C644(a2, (uint64_t)v48);
  }
  else
  {
    LODWORD(v78) = sub_1CCB642A0();
    sub_1CCA1C5B0(v82);
    sub_1CCA1C5B0(v53);
    sub_1CCA1C644(a1, (uint64_t)v49);
    sub_1CCA1C644(a2, (uint64_t)v48);
    if ((v78 & 1) == 0)
      goto LABEL_11;
  }
  v64 = *v49;
  sub_1CCA1C5B0((uint64_t)v49);
  v65 = *v48;
  sub_1CCA1C5B0((uint64_t)v48);
  sub_1CCA1C644(a1, v51);
  sub_1CCA1C644(a2, v50);
  v47 = v64 == v65;
  v7 = v73;
  if (!v47)
    goto LABEL_12;
  v66 = *(unsigned __int8 *)(v51 + 1);
  sub_1CCA1C5B0(v51);
  v67 = *(unsigned __int8 *)(v50 + 1);
  sub_1CCA1C5B0(v50);
  sub_1CCA1C644(a1, v56);
  sub_1CCA1C644(a2, v55);
  v47 = v66 == v67;
  v7 = v73;
  if (!v47)
    goto LABEL_13;
  v68 = *(unsigned __int8 *)(v56 + 2);
  sub_1CCA1C5B0(v56);
  v69 = *(unsigned __int8 *)(v55 + 2);
  sub_1CCA1C5B0(v55);
  v70 = a1;
  v58 = v79;
  sub_1CCA1C644(v70, v79);
  sub_1CCA1C644(a2, (uint64_t)v73);
  v47 = v68 == v69;
  v7 = v73;
  if (v47)
  {
    v71 = *(_BYTE *)(v58 + 3);
    sub_1CCA1C5B0(v58);
    v72 = v7[3];
    sub_1CCA1C5B0((uint64_t)v7);
    v59 = v71 ^ v72 ^ 1;
    return v59 & 1;
  }
LABEL_14:
  sub_1CCA1C5B0((uint64_t)v7);
  sub_1CCA1C5B0(v58);
  v59 = 0;
  return v59 & 1;
}

uint64_t sub_1CCA1C5B0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FMIPDeviceLostModeMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for FMIPDeviceLostModeMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 48);
  v5 = sub_1CCB635B0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_1CCA1C644(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPDeviceLostModeMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for FMIPDeviceLostModeMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(int *)(a3 + 48);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = sub_1CCB635B0();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

uint64_t sub_1CCA1C730()
{
  unsigned __int8 *v0;

  return sub_1CCA1C738(*v0);
}

uint64_t sub_1CCA1C738(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA1C76C + 4 * word_1CCB722FA[a1]))(0x73736572646461, 0xE700000000000000);
}

uint64_t sub_1CCA1C76C()
{
  return 0x6168436F69647561;
}

uint64_t sub_1CCA1C790()
{
  return 0x4C79726574746162;
}

uint64_t sub_1CCA1C7B0()
{
  return 0x5379726574746162;
}

uint64_t sub_1CCA1C7D4()
{
  return 0x444955556162;
}

uint64_t sub_1CCA1C7E8()
{
  return 0x65646F4D74736F6CLL;
}

uint64_t sub_1CCA1C938()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1CCA1C9B8()
{
  return 6584174;
}

uint64_t sub_1CCA1C9C8()
{
  return 6579059;
}

uint64_t sub_1CCA1C9D8()
{
  return 0x6957656369766564;
}

uint64_t sub_1CCA1C9FC()
{
  return 0x6976654473696874;
}

uint64_t sub_1CCA1CA84()
{
  return 0x656D695474736F6CLL;
}

uint64_t sub_1CCA1CAA8()
{
  return 0x684367734D78616DLL;
}

uint64_t sub_1CCA1CAC8()
{
  return 6779757;
}

uint64_t sub_1CCA1CAD8()
{
  return 1735615853;
}

uint64_t sub_1CCA1CAE8()
{
  return 0x6F4D656369766564;
}

uint64_t sub_1CCA1CB24()
{
  return 1701667182;
}

uint64_t sub_1CCA1CB34()
{
  return 0x6449737270;
}

uint64_t sub_1CCA1CB48()
{
  return 0x65646F6373736170;
}

uint64_t sub_1CCA1CB6C()
{
  return 0x6369766544776172;
}

uint64_t sub_1CCA1CB90()
{
  return 0x6F4C65746F6D6572;
}

uint64_t sub_1CCA1CBB0()
{
  return 0x695765746F6D6572;
}

uint64_t sub_1CCA1CBD0()
{
  return 0x61636F4C65666173;
}

uint64_t sub_1CCA1CBF4()
{
  return 6581875;
}

uint64_t sub_1CCA1CC08()
{
  return 0x7453656369766564;
}

uint64_t sub_1CCA1CC28()
{
  return 0x676E696B63617274;
}

uint64_t sub_1CCA1CC48()
{
  return 0x6D69546465706977;
}

uint64_t sub_1CCA1CC6C()
{
  return 0x756F72476D657469;
}

unint64_t sub_1CCA1CC8C()
{
  return 0xD000000000000015;
}

uint64_t sub_1CCA1CCA8()
{
  return 0x6574617453326D72;
}

uint64_t sub_1CCA1CCC0()
{
  return 0x52676E69646E6570;
}

unint64_t sub_1CCA1CCE4()
{
  return 0xD000000000000014;
}

uint64_t sub_1CCA1CCFC()
{
  return 0x79546E6F63616562;
}

unint64_t sub_1CCA1CD1C()
{
  return 0xD000000000000014;
}

void sub_1CCA1CD34()
{
  JUMPOUT(0x1CCA1CD4CLL);
}

uint64_t sub_1CCA1CD58()
{
  return 0x6552726961706572;
}

uint64_t sub_1CCA1CD78()
{
  char *v0;

  return sub_1CCA1CD94(*v0);
}

uint64_t sub_1CCA1CD94(char a1)
{
  return qword_1CCB70A98[a1];
}

uint64_t getEnumTagSinglePayload for FMIPLocation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPDevice.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 57 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 57) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xC7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xC6)
    return ((uint64_t (*)(void))((char *)&loc_1CCA1CE40 + 4 * byte_1CCB7238B[v4]))();
  *a1 = a2 + 57;
  return ((uint64_t (*)(void))((char *)sub_1CCA1CE74 + 4 * byte_1CCB72386[v4]))();
}

uint64_t sub_1CCA1CE74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1CE7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA1CE84);
  return result;
}

uint64_t sub_1CCA1CE90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA1CE98);
  *(_BYTE *)result = a2 + 57;
  return result;
}

uint64_t sub_1CCA1CE9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1CEA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPDevice.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xC7)
    goto LABEL_17;
  if (a2 + 57 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 57) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 57;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 57;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 57;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x3A;
  v8 = v6 - 58;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_1CCA1CF40()
{
  return 0;
}

uint64_t sub_1CCA1CF4C()
{
  return swift_release();
}

uint64_t sub_1CCA1CF54()
{
  return swift_release();
}

uint64_t sub_1CCA1CF5C()
{
  return swift_release();
}

uint64_t sub_1CCA1CF64()
{
  return swift_release();
}

uint64_t sub_1CCA1CF6C()
{
  return swift_release();
}

uint64_t sub_1CCA1CF74()
{
  return swift_release();
}

uint64_t sub_1CCA1CF7C()
{
  return swift_release();
}

uint64_t sub_1CCA1CF84()
{
  return swift_release();
}

uint64_t sub_1CCA1CF8C()
{
  return swift_release();
}

uint64_t sub_1CCA1CF94()
{
  return swift_release();
}

uint64_t sub_1CCA1CF9C()
{
  return swift_release();
}

uint64_t sub_1CCA1CFA4()
{
  return swift_release();
}

uint64_t sub_1CCA1CFAC()
{
  return swift_release();
}

uint64_t sub_1CCA1CFB4()
{
  return swift_release();
}

uint64_t sub_1CCA1CFBC()
{
  return swift_release();
}

uint64_t sub_1CCA1CFC4()
{
  return swift_release();
}

uint64_t sub_1CCA1CFCC()
{
  return swift_release();
}

uint64_t sub_1CCA1CFD4()
{
  return swift_release();
}

uint64_t sub_1CCA1CFDC()
{
  return swift_release();
}

uint64_t sub_1CCA1CFE4()
{
  return swift_release();
}

uint64_t sub_1CCA1CFEC()
{
  return swift_release();
}

uint64_t sub_1CCA1CFF4()
{
  return swift_release();
}

uint64_t sub_1CCA1CFFC()
{
  return swift_release();
}

uint64_t sub_1CCA1D004()
{
  return swift_release();
}

uint64_t sub_1CCA1D00C()
{
  return swift_release();
}

uint64_t sub_1CCA1D014()
{
  return swift_release();
}

uint64_t sub_1CCA1D01C()
{
  return swift_release();
}

uint64_t sub_1CCA1D024()
{
  return swift_release();
}

uint64_t sub_1CCA1D02C()
{
  return swift_release();
}

uint64_t sub_1CCA1D034()
{
  return swift_release();
}

uint64_t sub_1CCA1D03C()
{
  return swift_release();
}

uint64_t sub_1CCA1D044()
{
  return swift_release();
}

uint64_t sub_1CCA1D04C()
{
  return swift_release();
}

uint64_t sub_1CCA1D054()
{
  return swift_release();
}

uint64_t sub_1CCA1D05C()
{
  return swift_release();
}

uint64_t sub_1CCA1D064()
{
  return swift_release();
}

uint64_t sub_1CCA1D06C()
{
  return swift_release();
}

uint64_t sub_1CCA1D074(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D084(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D094(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D104(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D134(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D184(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D194(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D204(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D214(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D224(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D244(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D254(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D264(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D284(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D294(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1CCA1D2C4()
{
  unsigned __int8 *v0;

  return sub_1CCA1D2CC(*v0);
}

uint64_t sub_1CCA1D2CC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA1D30C + 4 * byte_1CCB767D6[a1]))(0x6954657461657263, 0xEF706D617473656DLL);
}

uint64_t sub_1CCA1D30C()
{
  return 0x6F43737574617473;
}

uint64_t sub_1CCA1D328()
{
  return 0x7469547472656C61;
}

uint64_t sub_1CCA1D348()
{
  return 0x7865547472656C61;
}

unint64_t sub_1CCA1D364()
{
  return 0xD000000000000013;
}

unint64_t sub_1CCA1D384()
{
  return 0xD000000000000011;
}

uint64_t storeEnumTagSinglePayload for FMIPDeviceImageCacheRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPDeviceImageCacheRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for FMIPAddress(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 288))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 168);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1CCA1D484(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t getEnumTagSinglePayload for FMIPItemBatteryStatus(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_1CCA1D51C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA1D544 + 4 * byte_1CCB722E4[*v0]))(1701736302, 0xE400000000000000);
}

uint64_t sub_1CCA1D544()
{
  return 0x63616542666C6573;
}

uint64_t sub_1CCA1D568()
{
  return 0x6E6169727564;
}

uint64_t sub_1CCA1D57C()
{
  return 0x726F737365636361;
}

uint64_t sub_1CCA1D598()
{
  return 1701602664;
}

uint64_t sub_1CCA1D5A4()
{
  return 0x6E69466C61636F6CLL;
}

uint64_t sub_1CCA1D5C8()
{
  return 0x4D6C617574726976;
}

ValueMetadata *type metadata accessor for FMIPDeviceImageCacheRequest()
{
  return &type metadata for FMIPDeviceImageCacheRequest;
}

uint64_t storeEnumTagSinglePayload for FMIPPlaySoundMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CCA1D648 + 4 * byte_1CCB767E1[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CCA1D67C + 4 * byte_1CCB767DC[v4]))();
}

uint64_t sub_1CCA1D67C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1D684(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA1D68CLL);
  return result;
}

uint64_t sub_1CCA1D698(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA1D6A0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CCA1D6A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1D6AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void destroy for FMIPLocation(uint64_t a1)
{

}

uint64_t _s8FMIPCore14FMIPBeaconTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1CCA1D70C + 4 * byte_1CCB72395[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1CCA1D740 + 4 * byte_1CCB72390[v4]))();
}

uint64_t sub_1CCA1D740(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1D748(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA1D750);
  return result;
}

uint64_t sub_1CCA1D75C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA1D764);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1CCA1D768(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1D770(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPDevice()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCA1D794()
{
  unsigned __int8 *v0;

  return sub_1CCA1D79C(*v0);
}

uint64_t sub_1CCA1D79C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA1D7D8 + 4 * byte_1CCB71219[a1]))(0x6470556C69616D65, 0xEC00000073657461);
}

uint64_t sub_1CCA1D7D8()
{
  return 0x72624E72656E776FLL;
}

uint64_t sub_1CCA1D7F0()
{
  return 0x6C69616D65;
}

uint64_t sub_1CCA1D804()
{
  return 0x646E756F73;
}

uint64_t sub_1CCA1D818()
{
  return 0x6F43737574617473;
}

uint64_t sub_1CCA1D834()
{
  return 0x74736F4C706F7473;
}

uint64_t sub_1CCA1D854()
{
  return 1954047348;
}

uint64_t sub_1CCA1D864()
{
  return 0x7478655472657375;
}

uint64_t sub_1CCA1D87C()
{
  return 0x6954657461657263;
}

uint64_t sub_1CCA1D8A0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA1D8C8 + 4 * byte_1CCB689A0[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1CCA1D8C8()
{
  return 0x676E6979616C70;
}

uint64_t sub_1CCA1D8E0()
{
  return 0x6C62616C69617661;
}

uint64_t sub_1CCA1D8FC()
{
  return 0x646574756DLL;
}

uint64_t sub_1CCA1D914()
{
  unsigned __int8 *v0;

  return sub_1CCA1D91C(*v0);
}

uint64_t sub_1CCA1D91C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA1D954 + 4 * byte_1CCB6D594[a1]))(0x6564757469746C61, 0xE800000000000000);
}

uint64_t sub_1CCA1D954()
{
  return 0x76654C726F6F6C66;
}

unint64_t sub_1CCA1D970()
{
  return 0xD000000000000012;
}

uint64_t sub_1CCA1D990()
{
  return 0x756363616E497369;
}

unint64_t sub_1CCA1D9B0()
{
  return 0xD000000000000010;
}

uint64_t sub_1CCA1DA68()
{
  unsigned __int8 *v0;

  return sub_1CCA1DA70(*v0);
}

uint64_t sub_1CCA1DA70(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CCA1DAA8 + 4 * byte_1CCB74049[a1]))(0xD000000000000010, 0x80000001CCB78370);
}

uint64_t sub_1CCA1DAA8(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_1CCA1DAC0()
{
  return 0x65626D654D736168;
}

uint64_t sub_1CCA1DAE0()
{
  return 0x4153487369;
}

uint64_t sub_1CCA1DAF4()
{
  return 0x6D614E7473726966;
}

uint64_t sub_1CCA1DB10()
{
  return 0x656D614E7473616CLL;
}

uint64_t sub_1CCA1DB28()
{
  return 0x6449656C707061;
}

uint64_t sub_1CCA1DB40()
{
  return 0x696669746E656469;
}

uint64_t sub_1CCA1DB5C()
{
  return 0x6D754E656E6F6870;
}

__n128 initializeWithTake for FMIPLocation(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPLocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1CCA1DBE8(uint64_t a1, uint64_t a2)
{
  return sub_1CC9E37B8(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

__n128 initializeWithTake for FMIPAudioChannel(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1CCA1DC1C()
{
  unsigned __int8 *v0;

  return sub_1CCA1DC24(*v0);
}

uint64_t sub_1CCA1DC24(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA1DC54 + 4 * byte_1CCB6A4F3[a1]))(0x6C6562616CLL, 0xE500000000000000);
}

unint64_t sub_1CCA1DC54()
{
  return 0xD000000000000015;
}

uint64_t sub_1CCA1DE94(uint64_t a1, uint64_t a2)
{
  return sub_1CC9F742C(a1, a2, &qword_1EF9E28A0, 0x1E0D898C8, &qword_1EF9E28A8);
}

uint64_t destroy for FMIPAudioChannel()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for FMDiskIO(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CC9E3BAC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FMDiskIO);
}

uint64_t sub_1CCA1DED8()
{
  return swift_allocateGenericValueMetadata();
}

ValueMetadata *type metadata accessor for FMIPSeparationMonitoringState.Reason()
{
  return &type metadata for FMIPSeparationMonitoringState.Reason;
}

uint64_t initializeBufferWithCopyOfBuffer for FMIPLocation(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(void **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = v3;
  return a1;
}

uint64_t storeEnumTagSinglePayload for FMIPLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1CCA1DF74 + 4 * byte_1CCB6D5AF[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1CCA1DFA8 + 4 * byte_1CCB6D5AA[v4]))();
}

uint64_t sub_1CCA1DFA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1DFB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA1DFB8);
  return result;
}

uint64_t sub_1CCA1DFC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA1DFCCLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1CCA1DFD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1DFD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPPerson()
{
  return &type metadata for FMIPPerson;
}

uint64_t sub_1CCA1DFF4(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 6)
    return v1 - 5;
  else
    return 0;
}

uint64_t type metadata accessor for FMIPUnknownItem()
{
  uint64_t result;

  result = qword_1EF9E32E8;
  if (!qword_1EF9E32E8)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for FMIPBeaconTypeRefreshFilter()
{
  return &type metadata for FMIPBeaconTypeRefreshFilter;
}

ValueMetadata *type metadata accessor for FMIPBeaconRefreshingContext()
{
  return &type metadata for FMIPBeaconRefreshingContext;
}

uint64_t storeEnumTagSinglePayload for FMIPDeviceLostModeMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1CCA1E0B4 + 4 * byte_1CCB71227[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1CCA1E0E8 + 4 * byte_1CCB71222[v4]))();
}

uint64_t sub_1CCA1E0E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1E0F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA1E0F8);
  return result;
}

uint64_t sub_1CCA1E104(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA1E10CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1CCA1E110(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1E118(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPItemImageCacheRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for FMIPBeaconRefreshFilter()
{
  return &type metadata for FMIPBeaconRefreshFilter;
}

uint64_t getEnumTagSinglePayload for FMIPPartType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPAudioChannel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CCA1E258 + 4 * byte_1CCB689A9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CCA1E28C + 4 * byte_1CCB689A4[v4]))();
}

uint64_t sub_1CCA1E28C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1E294(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA1E29CLL);
  return result;
}

uint64_t sub_1CCA1E2A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA1E2B0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CCA1E2B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1E2BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1E2C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FMIPConfigValue.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t FMIPConfigValue.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CCA1E328 + 4 * byte_1CCB71050[*v0]))(0xD000000000000019, 0x80000001CCB77EB0);
}

uint64_t sub_1CCA1E328@<X0>(uint64_t a1@<X8>)
{
  return a1 + 4;
}

uint64_t sub_1CCA1E340()
{
  return 0x626154736D657469;
}

unint64_t sub_1CCA1E364()
{
  return 0xD000000000000010;
}

uint64_t sub_1CCA1E380()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))(qword_1ED8AD5D8 + **v0 + 136))() & 1;
}

uint64_t sub_1CCA1E3B8()
{
  return 0;
}

ValueMetadata *type metadata accessor for FMIPLocation()
{
  return &type metadata for FMIPLocation;
}

ValueMetadata *type metadata accessor for FMIPAddress()
{
  return &type metadata for FMIPAddress;
}

uint64_t sub_1CCA1E3FC()
{
  char *v0;

  return sub_1CCA1E410(*v0);
}

uint64_t sub_1CCA1E410(char a1)
{
  if ((a1 & 1) != 0)
    return 0x697274656D6D7973;
  else
    return 0x4B65746176697270;
}

ValueMetadata *type metadata accessor for OfflineFindingDeviceStateType()
{
  return &type metadata for OfflineFindingDeviceStateType;
}

ValueMetadata *type metadata accessor for FMIPDeviceLostModeMetadata.CodingKeys()
{
  return &type metadata for FMIPDeviceLostModeMetadata.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FMIPItemImageCacheRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPItemImageCacheRequest()
{
  return &type metadata for FMIPItemImageCacheRequest;
}

void sub_1CCA1E4D4()
{
  unint64_t v0;
  unint64_t v1;

  sub_1CC9C36F4(319, (unint64_t *)&qword_1ED8A8FE0, (void (*)(uint64_t))type metadata accessor for FMIPDevice);
  if (v0 <= 0x3F)
  {
    sub_1CC9C36F4(319, (unint64_t *)&qword_1ED8A8EF0, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for FMReverseGeocodingCache.FMReverseGeocodingCacheContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CC9E3BAC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FMReverseGeocodingCache.FMReverseGeocodingCacheContext);
}

ValueMetadata *type metadata accessor for FMIPHistoricalLocation()
{
  return &type metadata for FMIPHistoricalLocation;
}

ValueMetadata *type metadata accessor for FMIPPlaySoundMetadata.CodingKeys()
{
  return &type metadata for FMIPPlaySoundMetadata.CodingKeys;
}

void sub_1CCA1E61C()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;

  sub_1CCA14E90(&qword_1EF9E4D70);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CCB692B0;
  *(_BYTE *)(inited + 32) = 1;
  v1 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 64) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 40) = 0xD000000000000036;
  *(_QWORD *)(inited + 48) = 0x80000001CCB7D5E0;
  *(_BYTE *)(inited + 72) = 3;
  *(_QWORD *)(inited + 104) = v1;
  *(_QWORD *)(inited + 80) = 0xD000000000000025;
  *(_QWORD *)(inited + 88) = 0x80000001CCB7D620;
  *(_BYTE *)(inited + 112) = 2;
  *(_QWORD *)(inited + 144) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 120) = 0;
  *(_BYTE *)(inited + 152) = 0;
  *(_QWORD *)(inited + 184) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 160) = 200;
  sub_1CC9EA760(inited);
  qword_1EF9FF778 = v2;
}

uint64_t storeEnumTagSinglePayload for FMIPBaseResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CCA1E730 + 4 * byte_1CCB756DE[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CCA1E764 + 4 * byte_1CCB756D9[v4]))();
}

uint64_t sub_1CCA1E764(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1E76C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA1E774);
  return result;
}

uint64_t sub_1CCA1E780(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA1E788);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CCA1E78C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1E794(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1E7A0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA1E7CC + 4 * byte_1CCB756CA[*v0]))(0x7472656C61, 0xE500000000000000);
}

uint64_t sub_1CCA1E7CC()
{
  return 0x6F43726576726573;
}

uint64_t sub_1CCA1E7F0()
{
  return 0x6F666E4972657375;
}

uint64_t sub_1CCA1E808()
{
  return 0x6F43737574617473;
}

uint64_t sub_1CCA1E824()
{
  return 0x746E65746E6F63;
}

uint64_t storeEnumTagSinglePayload for FMIPAudioChannel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 19) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 19) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPAudioChannel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 19))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for FMIPAudioChannel()
{
  return &type metadata for FMIPAudioChannel;
}

ValueMetadata *type metadata accessor for FMIPAudioChannel.CodingKeys()
{
  return &type metadata for FMIPAudioChannel.CodingKeys;
}

ValueMetadata *type metadata accessor for FMIPDataManager.SeparationMonitoringCache()
{
  return &type metadata for FMIPDataManager.SeparationMonitoringCache;
}

ValueMetadata *type metadata accessor for FMIPConfigValue()
{
  return &type metadata for FMIPConfigValue;
}

uint64_t sub_1CCA1E90C()
{
  return 1;
}

ValueMetadata *type metadata accessor for FMIPBeaconType.VirtualMeDeviceCodingKeys()
{
  return &type metadata for FMIPBeaconType.VirtualMeDeviceCodingKeys;
}

ValueMetadata *type metadata accessor for FMIPBeaconType.SelfBeaconingCodingKeys()
{
  return &type metadata for FMIPBeaconType.SelfBeaconingCodingKeys;
}

ValueMetadata *type metadata accessor for FMIPBeaconType.LocalFindableCodingKeys()
{
  return &type metadata for FMIPBeaconType.LocalFindableCodingKeys;
}

ValueMetadata *type metadata accessor for FMIPBeaconType.AccessoryCodingKeys()
{
  return &type metadata for FMIPBeaconType.AccessoryCodingKeys;
}

ValueMetadata *type metadata accessor for FMIPBeaconType.DurianCodingKeys()
{
  return &type metadata for FMIPBeaconType.DurianCodingKeys;
}

ValueMetadata *type metadata accessor for FMIPBeaconType.NoneCodingKeys()
{
  return &type metadata for FMIPBeaconType.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for FMIPBeaconType.HeleCodingKeys()
{
  return &type metadata for FMIPBeaconType.HeleCodingKeys;
}

ValueMetadata *type metadata accessor for FMIPBeaconType.CodingKeys()
{
  return &type metadata for FMIPBeaconType.CodingKeys;
}

void type metadata accessor for FMImageCache()
{
  JUMPOUT(0x1D17B1FFCLL);
}

uint64_t dispatch thunk of FMImageCache.preload(requests:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

ValueMetadata *type metadata accessor for FMIPLocation.CodingKeys()
{
  return &type metadata for FMIPLocation.CodingKeys;
}

ValueMetadata *type metadata accessor for FMIPFeatures.CodingKeys()
{
  return &type metadata for FMIPFeatures.CodingKeys;
}

uint64_t _s8FMIPCore11FMIPAddressV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v3 = a1[1];
  v4 = (_QWORD *)a1[2];
  v115 = a1[3];
  v111 = a1[5];
  v117 = a1[6];
  v118 = a1[4];
  v107 = a1[7];
  v113 = a1[8];
  v103 = a1[9];
  v109 = a1[10];
  v99 = a1[11];
  v105 = a1[12];
  v95 = a1[13];
  v101 = a1[14];
  v91 = a1[15];
  v96 = a1[16];
  v87 = a1[17];
  v93 = a1[18];
  v85 = a1[19];
  v89 = a1[20];
  v83 = (_QWORD *)a1[21];
  v78 = a1[22];
  v5 = a1[24];
  v81 = a1[23];
  v6 = a1[25];
  v7 = a1[28];
  v8 = a1[29];
  v9 = a2[1];
  v10 = (_QWORD *)a2[2];
  v11 = a2[4];
  v114 = a2[3];
  v110 = a2[5];
  v116 = a2[6];
  v106 = a2[7];
  v112 = a2[8];
  v102 = a2[9];
  v108 = a2[10];
  v98 = a2[11];
  v104 = a2[12];
  v94 = a2[13];
  v100 = a2[14];
  v90 = a2[15];
  v97 = a2[16];
  v86 = a2[17];
  v92 = a2[18];
  v84 = a2[19];
  v88 = a2[20];
  v82 = (_QWORD *)a2[21];
  v77 = a2[22];
  v80 = a2[23];
  v76 = a2[24];
  v79 = a2[25];
  v12 = a2[27];
  v13 = a2[30];
  v14 = a2[31];
  if (v3)
  {
    if (!v9)
      return 0;
    v72 = a2[26];
    v73 = a1[26];
    v70 = a2[28];
    v71 = a1[31];
    v74 = a2[29];
    v75 = a1[27];
    v64 = a2[32];
    v65 = a1[32];
    v67 = a1[30];
    v68 = a2[33];
    v69 = a1[33];
    v66 = a2[35];
    v61 = a2[34];
    v62 = a1[34];
    v63 = a1[35];
    if (*a1 != *a2 || v3 != v9)
    {
      v15 = a2[30];
      v16 = a2[31];
      v17 = a1[29];
      v18 = a1[28];
      v19 = sub_1CCB642A0();
      v7 = v18;
      v8 = v17;
      v14 = v16;
      v13 = v15;
      v20 = v19;
      result = 0;
      if ((v20 & 1) == 0)
        return result;
    }
  }
  else
  {
    v72 = a2[26];
    v73 = a1[26];
    v70 = a2[28];
    v71 = a1[31];
    v74 = a2[29];
    v75 = a1[27];
    v64 = a2[32];
    v65 = a1[32];
    v67 = a1[30];
    v68 = a2[33];
    v69 = a1[33];
    v66 = a2[35];
    v61 = a2[34];
    v62 = a1[34];
    v63 = a1[35];
    if (v9)
      return 0;
  }
  if (v4)
  {
    if (!v10)
      return 0;
    v22 = v4;
    v23 = v7;
    v24 = sub_1CCA1F25C(v22, v10);
    v7 = v23;
    if ((v24 & 1) == 0)
      return 0;
  }
  else if (v10)
  {
    return 0;
  }
  if (v118)
  {
    if (!v11)
      return 0;
    if (v115 != v114 || v118 != v11)
    {
      v25 = v7;
      v26 = sub_1CCB642A0();
      v7 = v25;
      v27 = v26;
      result = 0;
      if ((v27 & 1) == 0)
        return result;
    }
  }
  else if (v11)
  {
    return 0;
  }
  if (v117)
  {
    if (!v116)
      return 0;
    if (v111 != v110 || v117 != v116)
    {
      v28 = v7;
      v29 = sub_1CCB642A0();
      v7 = v28;
      v30 = v29;
      result = 0;
      if ((v30 & 1) == 0)
        return result;
    }
  }
  else if (v116)
  {
    return 0;
  }
  if (v113)
  {
    if (!v112)
      return 0;
    if (v107 != v106 || v113 != v112)
    {
      v31 = v7;
      v32 = sub_1CCB642A0();
      v7 = v31;
      v33 = v32;
      result = 0;
      if ((v33 & 1) == 0)
        return result;
    }
  }
  else if (v112)
  {
    return 0;
  }
  if (v109)
  {
    if (!v108)
      return 0;
    if (v103 != v102 || v109 != v108)
    {
      v34 = v7;
      v35 = sub_1CCB642A0();
      v7 = v34;
      v36 = v35;
      result = 0;
      if ((v36 & 1) == 0)
        return result;
    }
  }
  else if (v108)
  {
    return 0;
  }
  if (v105)
  {
    if (!v104)
      return 0;
    if (v99 != v98 || v105 != v104)
    {
      v37 = v7;
      v38 = sub_1CCB642A0();
      v7 = v37;
      v39 = v38;
      result = 0;
      if ((v39 & 1) == 0)
        return result;
    }
  }
  else if (v104)
  {
    return 0;
  }
  if (v101)
  {
    if (!v100)
      return 0;
    if (v95 != v94 || v101 != v100)
    {
      v40 = v7;
      v41 = sub_1CCB642A0();
      v7 = v40;
      v42 = v41;
      result = 0;
      if ((v42 & 1) == 0)
        return result;
    }
  }
  else if (v100)
  {
    return 0;
  }
  if (v96)
  {
    if (!v97)
      return 0;
    if (v91 != v90 || v96 != v97)
    {
      v43 = v7;
      v44 = sub_1CCB642A0();
      v7 = v43;
      v45 = v44;
      result = 0;
      if ((v45 & 1) == 0)
        return result;
    }
  }
  else if (v97)
  {
    return 0;
  }
  if (v93)
  {
    if (!v92)
      return 0;
    if (v87 != v86 || v93 != v92)
    {
      v46 = v7;
      v47 = sub_1CCB642A0();
      v7 = v46;
      v48 = v47;
      result = 0;
      if ((v48 & 1) == 0)
        return result;
    }
  }
  else if (v92)
  {
    return 0;
  }
  if (v89)
  {
    if (!v88)
      return 0;
    if (v85 != v84 || v89 != v88)
    {
      v49 = v7;
      v50 = sub_1CCB642A0();
      v7 = v49;
      v51 = v50;
      result = 0;
      if ((v51 & 1) == 0)
        return result;
    }
  }
  else if (v88)
  {
    return 0;
  }
  v52 = v7;
  if ((sub_1CCA1F25C(v83, v82) & 1) == 0)
    return 0;
  if (v81)
  {
    if (!v80)
      return 0;
    v53 = v6;
    if (v78 != v77 || v81 != v80)
    {
      v54 = sub_1CCB642A0();
      result = 0;
      if ((v54 & 1) == 0)
        return result;
    }
  }
  else
  {
    v53 = v6;
    if (v80)
      return 0;
  }
  if (v53)
  {
    if (!v79)
      return 0;
    if (v5 != v76 || v6 != v79)
    {
      v55 = sub_1CCB642A0();
      result = 0;
      if ((v55 & 1) == 0)
        return result;
    }
  }
  else if (v79)
  {
    return 0;
  }
  if (v75)
  {
    if (!v12)
      return 0;
    v56 = v8;
    if (v73 != v72 || v75 != v12)
    {
      v57 = sub_1CCB642A0();
      result = 0;
      if ((v57 & 1) == 0)
        return result;
    }
  }
  else
  {
    v56 = v8;
    if (v12)
      return 0;
  }
  if (v56)
  {
    if (!v74)
      return 0;
    if (v52 != v70 || v8 != v74)
    {
      v58 = sub_1CCB642A0();
      result = 0;
      if ((v58 & 1) == 0)
        return result;
    }
  }
  else if (v74)
  {
    return 0;
  }
  if (v71)
  {
    if (!v14)
      return 0;
    if (v67 != v13 || v71 != v14)
    {
      v59 = sub_1CCB642A0();
      result = 0;
      if ((v59 & 1) == 0)
        return result;
    }
  }
  else if (v14)
  {
    return 0;
  }
  if (v69)
  {
    if (v68)
    {
      if (v65 != v64 || v69 != v68)
      {
        v60 = sub_1CCB642A0();
        result = 0;
        if ((v60 & 1) == 0)
          return result;
      }
      goto LABEL_121;
    }
    return 0;
  }
  if (v68)
    return 0;
LABEL_121:
  result = (v63 | v66) == 0;
  if (v63 && v66)
  {
    if (v62 == v61 && v63 == v66)
      return 1;
    else
      return sub_1CCB642A0();
  }
  return result;
}

uint64_t sub_1CCA1F25C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_1CCB642A0(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_1CCB642A0() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPPerson.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1CCA1F36C + 4 * byte_1CCB74061[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1CCA1F3A0 + 4 * byte_1CCB7405C[v4]))();
}

uint64_t sub_1CCA1F3A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1F3A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA1F3B0);
  return result;
}

uint64_t sub_1CCA1F3BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA1F3C4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1CCA1F3C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA1F3D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPDevice.CodingKeys()
{
  return &type metadata for FMIPDevice.CodingKeys;
}

uint64_t sub_1CCA1F500(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

__n128 initializeWithTake for FMIPPerson(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

void sub_1CCA1F550(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1CC9E1CDC(a1, a2, a3, a4, &qword_1EF9E3ED0);
}

uint64_t sub_1CCA1F55C(unint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1CCB64090();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v8 = MEMORY[0x1E0DEE9D8];
  if (!v7)
    return v8;
  v22 = MEMORY[0x1E0DEE9D8];
  result = sub_1CCA63AF4(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v8 = v22;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v10 = 0;
      do
      {
        v11 = MEMORY[0x1D17B154C](v10, a1);
        v22 = v8;
        v13 = *(_QWORD *)(v8 + 16);
        v12 = *(_QWORD *)(v8 + 24);
        if (v13 >= v12 >> 1)
        {
          sub_1CCA63AF4(v12 > 1, v13 + 1, 1);
          v8 = v22;
        }
        ++v10;
        v20 = sub_1CC9C30A8(0, a2);
        v21 = a4;
        *(_QWORD *)&v19 = v11;
        *(_QWORD *)(v8 + 16) = v13 + 1;
        sub_1CCA21ACC(&v19, v8 + 40 * v13 + 32);
      }
      while (v7 != v10);
    }
    else
    {
      v14 = (void **)(a1 + 32);
      do
      {
        v15 = *v14;
        v22 = v8;
        v17 = *(_QWORD *)(v8 + 16);
        v16 = *(_QWORD *)(v8 + 24);
        v18 = v15;
        if (v17 >= v16 >> 1)
        {
          sub_1CCA63AF4(v16 > 1, v17 + 1, 1);
          v8 = v22;
        }
        v20 = sub_1CC9C30A8(0, a2);
        v21 = a4;
        *(_QWORD *)&v19 = v18;
        *(_QWORD *)(v8 + 16) = v17 + 1;
        sub_1CCA21ACC(&v19, v8 + 40 * v17 + 32);
        ++v14;
        --v7;
      }
      while (v7);
    }
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CCA1F730(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CC9C647C(a1, a2, a3, (_QWORD *)*v3, &qword_1ED8A7FB0, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  *v3 = result;
  return result;
}

uint64_t sub_1CCA1F75C(unint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  id v13;
  id v14;
  char v15;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v17 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      v6 = (char *)a2 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v7 = (id)MEMORY[0x1D17B154C](v5, a1);
LABEL_9:
        v8 = v7;
        v9 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_15;
        v10 = v4;
        v11 = *((_OWORD *)v6 + 1);
        v18 = *(_OWORD *)v6;
        v19 = v11;
        v20 = v6[32];
        v21 = *((_QWORD *)&v11 + 1);
        v22 = v11;
        sub_1CC9F1844((uint64_t)&v22);
        sub_1CC9F1844((uint64_t)&v21);
        v12 = sub_1CC9F1CCC();
        sub_1CC9F1CA4((uint64_t)&v22);
        sub_1CC9F1CA4((uint64_t)&v21);
        v13 = objc_msgSend(v12, sel_searchTypes);

        type metadata accessor for SPBeaconType(0);
        a2 = (uint64_t *)sub_1CCB63B38();

        v14 = objc_msgSend(v8, sel_type);
        v15 = sub_1CCB3D4F4((uint64_t)v14, (uint64_t)a2);
        swift_bridgeObjectRelease();

        if ((v15 & 1) != 0)
        {
          sub_1CCB64030();
          sub_1CCB64048();
          sub_1CCB64054();
          a2 = &v17;
          sub_1CCB6403C();
        }
        else
        {

        }
        v4 = v10;
        ++v5;
        if (v9 == v10)
          return v17;
      }
      if (v5 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      v4 = sub_1CCB64090();
      if (!v4)
        return MEMORY[0x1E0DEE9D8];
    }
    v7 = *(id *)(a1 + 8 * v5 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x1E0DEE9D8];
}

_QWORD *sub_1CCA1F970(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1CCAC9F74(a1, a2, a3, a4, &qword_1EF9E3378, &qword_1EF9E3380);
}

uint64_t sub_1CCA1F984(uint64_t a1, void *a2)
{
  id v2;

  **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
  v2 = a2;
  return swift_continuation_resume();
}

unint64_t sub_1CCA1F9B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF9E26E0;
  if (!qword_1EF9E26E0)
  {
    v1 = sub_1CC9C30A8(255, &qword_1EF9E26D8);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EF9E26E0);
  }
  return result;
}

uint64_t sub_1CCA1FA0C(uint64_t a1)
{
  void *v1;

  objc_msgSend(v1, sel_setDelegate_, a1);
  return swift_unknownObjectRelease();
}

void sub_1CCA1FA40(uint64_t a1, uint64_t a2)
{
  sub_1CC9C1864(a1, a2, &qword_1EF9E26D8);
}

void sub_1CCA1FA54(uint64_t a1, uint64_t a2)
{
  sub_1CC9C1864(a1, a2, &qword_1EF9DF450);
}

uint64_t sub_1CCA1FA68(uint64_t a1, char a2, void *a3)
{
  _QWORD *v4;
  id v5;

  if (a3)
  {
    sub_1CCA14E90(&qword_1EF9DF470);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1CCA1FAE8(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = sub_1CCA19B38(a2);
    v9 = a3;
    result = MEMORY[0x1D17B2068](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CCA1FB44()
{
  return sub_1CCA1552C(&qword_1ED8A7EB8, &qword_1ED8A7EB0, (uint64_t (*)(void))sub_1CCA22200, MEMORY[0x1E0DEAF10]);
}

unint64_t sub_1CCA1FB68()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1ED8A7E90;
  if (!qword_1ED8A7E90)
  {
    v1 = sub_1CCA19B38(&qword_1ED8A7E80);
    v2 = sub_1CC9C23B4(&qword_1ED8A7168, 255, (uint64_t (*)(uint64_t))type metadata accessor for FMIPDevice, (uint64_t)&protocol conformance descriptor for FMIPDevice);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF40], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1ED8A7E90);
  }
  return result;
}

unint64_t sub_1CCA1FBE8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1ED8A7E88;
  if (!qword_1ED8A7E88)
  {
    v1 = sub_1CCA19B38(&qword_1ED8A7E80);
    v2 = sub_1CC9CAA38(&qword_1ED8A7160, (uint64_t (*)(uint64_t))type metadata accessor for FMIPDevice, (uint64_t)&protocol conformance descriptor for FMIPDevice);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF10], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1ED8A7E88);
  }
  return result;
}

unint64_t sub_1CCA1FC64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED8AA340;
  if (!qword_1ED8AA340)
  {
    v1 = sub_1CCA19B38(&qword_1ED8AA338);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED8AA340);
  }
  return result;
}

uint64_t sub_1CCA1FCB0(uint64_t a1, uint64_t a2)
{
  return sub_1CCA03290(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem, (uint64_t (*)(char *, char *))_s8FMIPCore15FMIPUnknownItemV2eeoiySbAC_ACtFZ_0);
}

uint64_t sub_1CCA1FCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  BOOL v27;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v25 = 1;
    }
    else
    {
      v5 = 0;
      v6 = v2 - 1;
      do
      {
        v7 = *(_QWORD *)(a1 + v5 + 48);
        v8 = *(_QWORD *)(a1 + v5 + 56);
        v9 = *(_BYTE *)(a1 + v5 + 64);
        v10 = *(_BYTE *)(a1 + v5 + 65);
        v11 = *(_BYTE *)(a1 + v5 + 66);
        v12 = *(_BYTE *)(a1 + v5 + 67);
        v13 = *(_OWORD *)(a1 + v5 + 72);
        v14 = *(_QWORD *)(a1 + v5 + 88);
        v15 = *(_QWORD *)(a1 + v5 + 96);
        v40 = *(_OWORD *)(a1 + v5 + 32);
        v41 = v7;
        v42 = v8;
        v43 = v9;
        v44 = v10;
        v45 = v11;
        v46 = v12;
        v47 = v13;
        v48 = v14;
        v49 = v15;
        v50 = *(_OWORD *)(a1 + v5 + 104);
        v16 = *(_QWORD *)(a2 + v5 + 48);
        v17 = *(_QWORD *)(a2 + v5 + 56);
        v18 = *(_BYTE *)(a2 + v5 + 64);
        v19 = *(_BYTE *)(a2 + v5 + 65);
        v20 = *(_BYTE *)(a2 + v5 + 66);
        v21 = *(_BYTE *)(a2 + v5 + 67);
        v22 = *(_OWORD *)(a2 + v5 + 72);
        v23 = *(_QWORD *)(a2 + v5 + 88);
        v24 = *(_QWORD *)(a2 + v5 + 96);
        v29 = *(_OWORD *)(a2 + v5 + 32);
        v30 = v16;
        v31 = v17;
        v32 = v18;
        v33 = v19;
        v34 = v20;
        v35 = v21;
        v36 = v22;
        v37 = v23;
        v38 = v24;
        v39 = *(_OWORD *)(a2 + v5 + 104);
        v25 = _s8FMIPCore10FMIPPersonV2eeoiySbAC_ACtFZ_0((uint64_t)&v40, (uint64_t)&v29);
        v27 = v6-- != 0;
        if ((v25 & 1) == 0)
          break;
        v5 += 88;
      }
      while (v27);
    }
  }
  else
  {
    v25 = 0;
  }
  return v25 & 1;
}

unint64_t sub_1CCA1FDF0()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_1ED8A7E70;
  if (!qword_1ED8A7E70)
  {
    v1 = sub_1CCA19B38(&qword_1ED8A7E68);
    v2 = sub_1CCA245F8();
    v3[0] = MEMORY[0x1E0DEA9A0];
    v3[1] = v2;
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEA0D8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1ED8A7E70);
  }
  return result;
}

uint64_t sub_1CCA1FE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t (*v44)(char *, unint64_t, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  char v48;
  int64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  char *v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;

  v64 = sub_1CCB63604();
  v4 = *(_QWORD *)(v64 - 8);
  v5 = MEMORY[0x1E0C80A78](v64);
  v62 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v63 = (char *)&v49 - v8;
  MEMORY[0x1E0C80A78](v7);
  v59 = (char *)&v49 - v9;
  v10 = sub_1CCA14E90(&qword_1EF9E43F0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v49 - v15;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v57 = 0;
  v17 = *(_QWORD *)(a1 + 64);
  v53 = a2;
  v54 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v55 = (unint64_t)(v18 + 63) >> 6;
  v56 = (char *)&v49 - v15;
  v49 = v55 - 1;
  v50 = v13;
  v51 = v4;
  v52 = a1;
  if ((v19 & v17) == 0)
    goto LABEL_8;
LABEL_6:
  v21 = __clz(__rbit64(v20));
  v22 = (v20 - 1) & v20;
  v23 = v21 | (v57 << 6);
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v13, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v4 + 72) * v23, v64);
  v24 = *(_QWORD *)(a1 + 56);
  v25 = sub_1CCA14E90(&qword_1EF9E43F8);
  *(_QWORD *)&v13[*(int *)(v25 + 48)] = *(_QWORD *)(v24 + 8 * v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v13, 0, 1, v25);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1CC9C3EC0((uint64_t)v13, (uint64_t)v16, &qword_1EF9E43F0);
    v30 = sub_1CCA14E90(&qword_1EF9E43F8);
    v31 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v16, 1, v30) == 1)
      return v31;
    v58 = v22;
    v32 = *(int *)(v30 + 48);
    v33 = (uint64_t)v59;
    v34 = v64;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v59, v16, v64);
    v35 = *(_QWORD *)&v16[v32];
    v36 = sub_1CCAC8D64(v33);
    v38 = v37;
    v39 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v39(v33, v34);
    if ((v38 & 1) == 0
      || (v40 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v36), v41 = *(_QWORD *)(v40 + 16), v41 != *(_QWORD *)(v35 + 16)))
    {
LABEL_44:
      swift_bridgeObjectRelease();
      return 0;
    }
    if (v41 && v40 != v35)
      break;
    result = swift_bridgeObjectRelease();
LABEL_40:
    v16 = v56;
    v20 = v58;
    if (v58)
      goto LABEL_6;
LABEL_8:
    v26 = v57 + 1;
    if (__OFADD__(v57, 1))
      goto LABEL_49;
    if (v26 < v55)
    {
      v27 = *(_QWORD *)(v54 + 8 * v26);
      if (v27)
        goto LABEL_11;
      v28 = v57 + 2;
      ++v57;
      if (v26 + 1 < v55)
      {
        v27 = *(_QWORD *)(v54 + 8 * v28);
        if (v27)
          goto LABEL_14;
        v57 = v26 + 1;
        if (v26 + 2 < v55)
        {
          v27 = *(_QWORD *)(v54 + 8 * (v26 + 2));
          if (v27)
          {
            v26 += 2;
            goto LABEL_11;
          }
          v57 = v26 + 2;
          if (v26 + 3 < v55)
          {
            v27 = *(_QWORD *)(v54 + 8 * (v26 + 3));
            if (v27)
            {
              v26 += 3;
              goto LABEL_11;
            }
            v28 = v26 + 4;
            v57 = v26 + 3;
            if (v26 + 4 < v55)
            {
              v27 = *(_QWORD *)(v54 + 8 * v28);
              if (!v27)
              {
                while (1)
                {
                  v26 = v28 + 1;
                  if (__OFADD__(v28, 1))
                    goto LABEL_50;
                  if (v26 >= v55)
                  {
                    v57 = v49;
                    goto LABEL_28;
                  }
                  v27 = *(_QWORD *)(v54 + 8 * v26);
                  ++v28;
                  if (v27)
                    goto LABEL_11;
                }
              }
LABEL_14:
              v26 = v28;
LABEL_11:
              v22 = (v27 - 1) & v27;
              v23 = __clz(__rbit64(v27)) + (v26 << 6);
              v57 = v26;
              goto LABEL_7;
            }
          }
        }
      }
    }
LABEL_28:
    v29 = sub_1CCA14E90(&qword_1EF9E43F8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v13, 1, 1, v29);
    v22 = 0;
  }
  v61 = v35;
  v42 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  swift_bridgeObjectRetain();
  v43 = 0;
  v60 = *(_QWORD *)(v4 + 72);
  v44 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v4 + 16);
  while (1)
  {
    v45 = v63;
    result = v44(v63, v40 + v42, v64);
    if (v43 >= *(_QWORD *)(v61 + 16))
      break;
    v46 = v62;
    v47 = v64;
    v44(v62, v61 + v42, v64);
    sub_1CC9CAA38(&qword_1EF9E1E28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
    v48 = sub_1CCB63958();
    v39((uint64_t)v46, v47);
    v39((uint64_t)v45, v47);
    if ((v48 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
    ++v43;
    v42 += v60;
    if (v41 == v43)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      a1 = v52;
      a2 = v53;
      v13 = v50;
      v4 = v51;
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_1CCA2036C(uint64_t a1, uint64_t a2)
{
  return sub_1CC9C5C78(a1, a2, &qword_1EF9E4400, &qword_1EF9E4408);
}

uint64_t sub_1CCA20380(uint64_t a1, uint64_t a2)
{
  return sub_1CC9C5C78(a1, a2, &qword_1EF9E43D8, &qword_1EF9E43E0);
}

unint64_t sub_1CCA20394(uint64_t a1)
{
  return sub_1CC9C6088(a1, &qword_1ED8A8B08, &qword_1EF9E33A8);
}

uint64_t sub_1CCA203A8(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

_QWORD *sub_1CCA203B8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *result;

  type metadata accessor for FMIPAlert();
  v5 = swift_allocObject();
  result = FMIPAlert.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

void sub_1CCA20410()
{
  unint64_t v0;

  sub_1CC9C3220();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for FMIPAlert()
{
  uint64_t result;

  result = qword_1ED8A7D70;
  if (!qword_1ED8A7D70)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for FMIPAlert.CodingKeys()
{
  return &type metadata for FMIPAlert.CodingKeys;
}

unint64_t sub_1CCA204EC()
{
  unint64_t result;

  result = qword_1ED8A7D60;
  if (!qword_1ED8A7D60)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB77354, &type metadata for FMIPAlert.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7D60);
  }
  return result;
}

unint64_t sub_1CCA20530()
{
  unint64_t result;

  result = qword_1ED8A7D58;
  if (!qword_1ED8A7D58)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7737C, &type metadata for FMIPAlert.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7D58);
  }
  return result;
}

unint64_t sub_1CCA20574()
{
  unint64_t result;

  result = qword_1ED8A7D50;
  if (!qword_1ED8A7D50)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB77444, &type metadata for FMIPAlert.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7D50);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPItem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for FMIPItem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1CCA205D0()
{
  unint64_t v0;
  unint64_t v1;

  sub_1CCA21E0C();
  if (v0 <= 0x3F)
  {
    type metadata accessor for FMIPProductType();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_1CCA206E8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return FMDiskIO.KeyPair.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

void sub_1CCA20708()
{
  JUMPOUT(0x1D17B2068);
}

void sub_1CCA20718()
{
  JUMPOUT(0x1D17B2068);
}

uint64_t sub_1CCA20728()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for FMDiskIO.KeyPair.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CC9E3BAC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FMDiskIO.KeyPair.CodingKeys);
}

void sub_1CCA2073C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void (*a6)(void))
{
  uint64_t v11;
  void *v12;

  v11 = *a2;
  v12 = (void *)MEMORY[0x1D17B1B7C]();
  sub_1CC9E2178(a1, v11, a3, a4, a5, a6);
  objc_autoreleasePoolPop(v12);
}

void sub_1CCA207B8()
{
  uint64_t v0;

  sub_1CCAB70BC(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24));
}

void sub_1CCA207C4()
{
  uint64_t v0;

  sub_1CCA2073C(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24), &qword_1EF9E2AA0, (uint64_t *)&unk_1EF9E2AA8, &qword_1ED8A7E80, (void (*)(void))sub_1CCA1FBE8);
}

void sub_1CCA20800()
{
  uint64_t v0;

  sub_1CC9E9150(*(_QWORD **)(v0 + 16), *(_QWORD **)(v0 + 24), &qword_1EF9E2A50, &qword_1EF9E2A58, (uint64_t *)&unk_1EF9E2A60, (void (*)(void))sub_1CCA7187C);
}

void sub_1CCA20838()
{
  uint64_t v0;

  sub_1CC9DFDB4(*(_QWORD **)(v0 + 16), *(_QWORD **)(v0 + 24));
}

void sub_1CCA20840()
{
  uint64_t v0;

  sub_1CC9E9150(*(_QWORD **)(v0 + 16), *(_QWORD **)(v0 + 24), &qword_1EF9E2AA0, (uint64_t *)&unk_1EF9E2AA8, &qword_1ED8A7E80, (void (*)(void))sub_1CCA1FB68);
}

void sub_1CCA20878()
{
  uint64_t v0;

  sub_1CC9E5244(*(_QWORD **)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_1CCA20880(uint64_t a1)
{
  return sub_1CC9C2A34(a1, qword_1EF9FF480);
}

uint64_t sub_1CCA208A4(uint64_t a1)
{
  return sub_1CC9C2A34(a1, qword_1ED8AD770);
}

uint64_t sub_1CCA208D0(uint64_t a1)
{
  return sub_1CC9C2A34(a1, qword_1EF9FF4C0);
}

uint64_t sub_1CCA208F8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FMIPBeaconRefreshingControllerClientConfiguration.init(from:)(a1, a2);
}

unint64_t sub_1CCA2090C()
{
  unint64_t result;

  result = qword_1EF9E6638;
  if (!qword_1EF9E6638)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPBeaconRefreshingControllerClientConfiguration, &type metadata for FMIPBeaconRefreshingControllerClientConfiguration);
    atomic_store(result, (unint64_t *)&qword_1EF9E6638);
  }
  return result;
}

unint64_t sub_1CCA20950()
{
  return 0xD000000000000015;
}

ValueMetadata *type metadata accessor for FMIPBeaconRefreshingControllerClientConfiguration.CodingKeys()
{
  return &type metadata for FMIPBeaconRefreshingControllerClientConfiguration.CodingKeys;
}

unint64_t sub_1CCA20984()
{
  unint64_t result;

  result = qword_1EF9E65C0;
  if (!qword_1EF9E65C0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74CBC, &type metadata for FMIPBeaconRefreshingControllerClientConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E65C0);
  }
  return result;
}

unint64_t sub_1CCA209C8()
{
  unint64_t result;

  result = qword_1EF9E65C8;
  if (!qword_1EF9E65C8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74CE4, &type metadata for FMIPBeaconRefreshingControllerClientConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E65C8);
  }
  return result;
}

unint64_t sub_1CCA20A0C()
{
  unint64_t result;

  result = qword_1EF9E6308;
  if (!qword_1EF9E6308)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7562C, &type metadata for FMIPBeaconRefreshingControllerClientConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6308);
  }
  return result;
}

uint64_t type metadata accessor for FMIPSafeLocationRefreshingController()
{
  return objc_opt_self();
}

void sub_1CCA20A70()
{
  uint64_t v0;

  sub_1CC9D5030(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1CCA20A7C(uint64_t a1)
{
  return sub_1CC9C3760(a1);
}

ValueMetadata *type metadata accessor for FMIPBeaconSeparationMonitoringState()
{
  return &type metadata for FMIPBeaconSeparationMonitoringState;
}

uint64_t type metadata accessor for FMIPDeviceConnectionStateProvider()
{
  return objc_opt_self();
}

void sub_1CCA20AB4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1CC9C4EE4(a1, a2, v2);
}

void sub_1CCA20ABC(uint64_t a1)
{
  sub_1CC9CD0CC(a1, 0xD000000000000018, 0x80000001CCB7B340, &byte_1EF9E27F1);
}

uint64_t type metadata accessor for FMIPServerInteractionController(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1ED8AA248);
}

uint64_t sub_1CCA20AF4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(*v2 + qword_1ED8AA240 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t sub_1CCA20B30()
{
  uint64_t v0;

  return sub_1CC9E9E44(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id sub_1CCA20B38(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_1CC9C8ED4(a1, a2, a3, *(_QWORD *)(v3 + 24), *(uint64_t **)(v3 + 32), *(void (**)(_QWORD, _QWORD))(v3 + 40), *(_QWORD *)(v3 + 48), *(void **)(v3 + 56));
}

ValueMetadata *type metadata accessor for FMIPNotificationAuthLaunchEvent()
{
  return &type metadata for FMIPNotificationAuthLaunchEvent;
}

uint64_t FMIPNotificationAuthLaunchEvent.init(findMyNotificationAuthStatus:utAlertAuthStatus:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void sub_1CCA20B7C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF9E0CD8[0])
  {
    type metadata accessor for FMIPUnknownItemProductMetadata();
    v0 = sub_1CCB63E2C();
    if (!v1)
      atomic_store(v0, qword_1EF9E0CD8);
  }
}

void sub_1CCA20BD0()
{
  unint64_t v0;

  sub_1CC9C3220();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t type metadata accessor for FMIPUnknownItemProductMetadata()
{
  uint64_t result;

  result = qword_1EF9E4268;
  if (!qword_1EF9E4268)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for FMIPBeaconRefreshingController(uint64_t a1)
{
  return sub_1CC9E911C(a1, (uint64_t *)&unk_1ED8A9DF0);
}

uint64_t sub_1CCA20CAC()
{
  uint64_t v0;

  return sub_1CC9C3DE8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1CCA20CB8()
{
  uint64_t v0;

  return sub_1CC9DBD54(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_1CCA20CC4(NSObject *a1, unint64_t a2)
{
  uint64_t v2;

  sub_1CC9CDB58(a1, a2, v2);
}

uint64_t sub_1CCA20CCC(unint64_t a1)
{
  uint64_t *v1;

  return sub_1CC9D8C44(a1, v1[2], v1[3], v1[4]);
}

void sub_1CCA20CD8()
{
  uint64_t *v0;

  sub_1CC9D44A4(v0[2], v0[3], v0[4]);
}

uint64_t sub_1CCA20CE4()
{
  uint64_t *v0;

  return sub_1CC9D8644(v0[2], v0[3], v0[4]);
}

uint64_t sub_1CCA20CF0()
{
  uint64_t v0;

  return sub_1CC9D3AA0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCA20CF8()
{
  uint64_t v0;

  return sub_1CC9D894C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCA20D00()
{
  uint64_t v0;

  sub_1CCA14E90(&qword_1EF9E6600);
  return sub_1CC9C2BE8(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCA20D34(uint64_t a1)
{
  return sub_1CC9C252C(a1);
}

void sub_1CCA20D3C()
{
  uint64_t v0;

  sub_1CC9E3F8C(v0);
}

unint64_t sub_1CCA20D48()
{
  unint64_t result;

  result = qword_1EF9E28D0;
  if (!qword_1EF9E28D0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6BD30, &type metadata for OfflineFindingDeviceStateType);
    atomic_store(result, (unint64_t *)&qword_1EF9E28D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPSeparationMonitoringState()
{
  return &type metadata for FMIPSeparationMonitoringState;
}

void sub_1CCA20D9C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED8A8D18)
  {
    type metadata accessor for FMIPHawkeyeProductInformation();
    v0 = sub_1CCB63E2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED8A8D18);
  }
}

uint64_t type metadata accessor for FMIPHawkeyeProductInformation()
{
  uint64_t result;

  result = qword_1ED8A8D08;
  if (!qword_1ED8A8D08)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for FMIPHawkeyeProductInformation.AssetType()
{
  return &type metadata for FMIPHawkeyeProductInformation.AssetType;
}

uint64_t sub_1CCA20E40@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for FMIPUserInfoResponseFragment();
  v5 = swift_allocObject();
  result = sub_1CC9D7CC4(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPUserInfoResponseFragment.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CCA20ED4 + 4 * byte_1CCB73280[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CCA20EF4 + 4 * byte_1CCB73285[v4]))();
}

_BYTE *sub_1CCA20ED4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CCA20EF4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCA20EFC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCA20F04(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCA20F0C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCA20F14(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPRangingParameters.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t sub_1CCA20F70()
{
  return 0x49737265626D656DLL;
}

ValueMetadata *type metadata accessor for FMIPUserInfoResponseFragment.CodingKeys()
{
  return &type metadata for FMIPUserInfoResponseFragment.CodingKeys;
}

unint64_t sub_1CCA20FA8()
{
  unint64_t result;

  result = qword_1ED8A7C90;
  if (!qword_1ED8A7C90)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB73304, &type metadata for FMIPUserInfoResponseFragment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7C90);
  }
  return result;
}

unint64_t sub_1CCA20FEC()
{
  unint64_t result;

  result = qword_1ED8A7C88;
  if (!qword_1ED8A7C88)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7332C, &type metadata for FMIPUserInfoResponseFragment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7C88);
  }
  return result;
}

unint64_t sub_1CCA21030()
{
  unint64_t result;

  result = qword_1ED8A7C80;
  if (!qword_1ED8A7C80)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB733F4, &type metadata for FMIPUserInfoResponseFragment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7C80);
  }
  return result;
}

uint64_t sub_1CCA21074()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FMReverseGeocodingRequest();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for FMReverseGeocodingOperation()
{
  uint64_t result;

  result = qword_1EF9E39E0;
  if (!qword_1EF9E39E0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for FMIPItemImageCacheOperation()
{
  return objc_opt_self();
}

unint64_t sub_1CCA211A0()
{
  unint64_t result;

  result = qword_1EF9DFC60;
  if (!qword_1EF9DFC60)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDeviceImageCacheRequest, &type metadata for FMIPDeviceImageCacheRequest);
    atomic_store(result, (unint64_t *)&qword_1EF9DFC60);
  }
  return result;
}

unint64_t sub_1CCA211E4()
{
  unint64_t result;

  result = qword_1EF9E6870;
  if (!qword_1EF9E6870)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDeviceImageCacheRequest, &type metadata for FMIPDeviceImageCacheRequest);
    atomic_store(result, (unint64_t *)&qword_1EF9E6870);
  }
  return result;
}

unint64_t sub_1CCA21228()
{
  unint64_t result;

  result = qword_1EF9E6880;
  if (!qword_1EF9E6880)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDeviceImageCacheRequest, &type metadata for FMIPDeviceImageCacheRequest);
    atomic_store(result, (unint64_t *)&qword_1EF9E6880);
  }
  return result;
}

unint64_t sub_1CCA2126C()
{
  unint64_t result;

  result = qword_1EF9E6878;
  if (!qword_1EF9E6878)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDeviceImageCacheRequest, &type metadata for FMIPDeviceImageCacheRequest);
    atomic_store(result, (unint64_t *)&qword_1EF9E6878);
  }
  return result;
}

unint64_t sub_1CCA212B0(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1CCA211E4();
  result = sub_1CCA2126C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for FMIPDeviceActionsController()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for FMIPDeviceActionsController.CommandFutures()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for FMIPBeaconSharingController()
{
  return objc_opt_self();
}

uint64_t sub_1CCA2133C(uint64_t a1)
{
  uint64_t v1;

  return sub_1CC9C73CC(a1, v1);
}

uint64_t sub_1CCA21344()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CCA2138C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 272) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1CCA213EC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 248) = v0;
  return swift_task_switch();
}

uint64_t sub_1CCA21404(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v3 = swift_bridgeObjectRetain();
  sub_1CCA1FA54(v3, a1);
  v5 = v4;
  result = swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    *(_QWORD *)(v1 + 128) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (qword_1ED8A8D88 != -1)
      swift_once();
    v7 = sub_1CCB637FC();
    sub_1CCA16C20(v7, (uint64_t)qword_1ED8AD770);
    swift_bridgeObjectRetain_n();
    v8 = sub_1CCB637D8();
    v9 = sub_1CCB63D48();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v15 = v11;
      *(_DWORD *)v10 = 136315138;
      sub_1CC9C30A8(0, &qword_1EF9DF450);
      sub_1CC9F74C8((unint64_t *)&unk_1EF9DF458, &qword_1EF9DF450);
      swift_bridgeObjectRetain();
      v12 = sub_1CCB63C4C();
      v14 = v13;
      swift_bridgeObjectRelease();
      sub_1CCA0CB60(v12, v14, &v15);
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v8, v9, "FMIPBeaconSharingController: Did receive shares update: %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v11, -1, -1);
      MEMORY[0x1D17B214C](v10, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return sub_1CCA26C3C();
  }
  return result;
}

uint64_t sub_1CCA21650()
{
  return swift_task_switch();
}

uint64_t type metadata accessor for FMSystemDirectoryUtilities()
{
  return objc_opt_self();
}

void sub_1CCA216BC(_QWORD *a1)
{
  FMIPDeviceLostModeMetadata.encode(to:)(a1);
}

unint64_t sub_1CCA216D8()
{
  unint64_t result;

  result = qword_1ED8A7A80;
  if (!qword_1ED8A7A80)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB71384, &type metadata for FMIPDeviceLostModeMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7A80);
  }
  return result;
}

unint64_t sub_1CCA2171C()
{
  unint64_t result;

  result = qword_1ED8A7A78;
  if (!qword_1ED8A7A78)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB713AC, &type metadata for FMIPDeviceLostModeMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7A78);
  }
  return result;
}

void sub_1CCA21760()
{
  unint64_t v0;

  sub_1CC9C3D94();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1CCA217EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF9E32F8[0])
  {
    type metadata accessor for FMIPUnknownItemUTMetadata();
    v0 = sub_1CCB63E2C();
    if (!v1)
      atomic_store(v0, qword_1EF9E32F8);
  }
}

void sub_1CCA21840()
{
  unint64_t v0;

  sub_1CCA20B7C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t type metadata accessor for FMIPUnknownItemUTMetadata()
{
  uint64_t result;

  result = qword_1EF9E0CC8;
  if (!qword_1EF9E0CC8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA218F0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FMIPReverseGeocodingCache()
{
  uint64_t result;

  result = qword_1EF9E62F0;
  if (!qword_1EF9E62F0)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1CCA21970()
{
  unint64_t result;

  result = qword_1EF9E5D90;
  if (!qword_1EF9E5D90)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemImageCacheRequest, &type metadata for FMIPItemImageCacheRequest);
    atomic_store(result, (unint64_t *)&qword_1EF9E5D90);
  }
  return result;
}

unint64_t sub_1CCA219B4()
{
  unint64_t result;

  result = qword_1EF9E13D8;
  if (!qword_1EF9E13D8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemImageCacheRequest, &type metadata for FMIPItemImageCacheRequest);
    atomic_store(result, (unint64_t *)&qword_1EF9E13D8);
  }
  return result;
}

unint64_t sub_1CCA219F8()
{
  unint64_t result;

  result = qword_1EF9E13E8;
  if (!qword_1EF9E13E8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemImageCacheRequest, &type metadata for FMIPItemImageCacheRequest);
    atomic_store(result, (unint64_t *)&qword_1EF9E13E8);
  }
  return result;
}

unint64_t sub_1CCA21A3C()
{
  unint64_t result;

  result = qword_1EF9E13E0;
  if (!qword_1EF9E13E0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemImageCacheRequest, &type metadata for FMIPItemImageCacheRequest);
    atomic_store(result, (unint64_t *)&qword_1EF9E13E0);
  }
  return result;
}

unint64_t sub_1CCA21A80(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1CCA219B4();
  result = sub_1CCA21A3C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for FMIPItemActionsController()
{
  return objc_opt_self();
}

uint64_t sub_1CCA21ACC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1CCA21AE4(uint64_t a1, uint64_t a2)
{
  return sub_1CC9D5844(a2);
}

void sub_1CCA21AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1CC9D8400(a2, a3, a4, a5);
}

void sub_1CCA21B00()
{
  uint64_t v0;

  sub_1CC9C874C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_1CCA21B0C()
{
  sub_1CC9DF00C();
}

uint64_t sub_1CCA21B3C()
{
  uint64_t v0;

  return sub_1CCA21B44(v0);
}

uint64_t sub_1CCA21B44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_isRefreshing) = 1;
  sub_1CC9CEE94();
  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_interactionController + 24);
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_interactionController + 32);
  sub_1CCA04DDC((_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_interactionController), v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(v2, v3);
  sub_1CCA22254();
  return sub_1CC9DD8B0(0.0);
}

uint64_t sub_1CCA21BC8(uint64_t a1, void *a2)
{
  return sub_1CC9DF9A4(a1, a2);
}

void sub_1CCA21BD0()
{
  unint64_t v0;

  sub_1CCA247F0();
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t type metadata accessor for FMIPManagerConfiguration()
{
  uint64_t result;

  result = qword_1ED8A8010;
  if (!qword_1ED8A8010)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1CCA21CA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_snapshotHandlers);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 64);
    v5 = *(_QWORD *)(v3 + 32);
    result = sub_1CCA20394(MEMORY[0x1E0DEE9D8]);
    v7 = 3;
    if (v5)
      v7 = 1;
    v8 = 2;
    if (v5)
      v8 = 3;
    if (v4)
      v7 = v8;
  }
  else
  {
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems);
    if (qword_1ED8A8C98 != -1)
      swift_once();
    if (qword_1ED8A8C90 == v9)
      goto LABEL_15;
    if (v9 == 2)
    {
      result = sub_1CCA20394(MEMORY[0x1E0DEE9D8]);
      v7 = 2;
      goto LABEL_17;
    }
    if (v9 != 1)
    {
LABEL_15:
      result = sub_1CCA20394(MEMORY[0x1E0DEE9D8]);
      v7 = 3;
    }
    else
    {
      result = sub_1CCA20394(MEMORY[0x1E0DEE9D8]);
      v7 = 1;
    }
  }
LABEL_17:
  *(_BYTE *)a1 = v3 != 0;
  v10 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 32) = v3 != 0;
  return result;
}

void FMIPManagerConfiguration.enabledSubsystems.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems);
}

uint64_t FMIPManagerConfiguration.preferredLocale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_preferredLocale;
  v4 = sub_1CCB63634();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void sub_1CCA21E0C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED8A8CD8)
  {
    type metadata accessor for FMIPItemLostModeMetadata();
    v0 = sub_1CCB63E2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED8A8CD8);
  }
}

uint64_t type metadata accessor for FMIPItemLostModeMetadata()
{
  uint64_t result;

  result = qword_1ED8A8CC0;
  if (!qword_1ED8A8CC0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for FMReverseGeocodingCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CC9E3BAC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FMReverseGeocodingCache);
}

uint64_t sub_1CCA21EA8@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return sub_1CC9D98A8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_1CCA21EC0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for FMReverseGeocodingRequest() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_1CC9EF798(v0 + v2, *(_BYTE *)(v0 + v2 + *(_QWORD *)(v1 + 64)), *(_QWORD *)(((v2 + *(_QWORD *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + v0 + 8), *(_QWORD *)(((v2 + *(_QWORD *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + v0 + 16));
}

uint64_t sub_1CCA21F18()
{
  return swift_allocateGenericValueMetadata();
}

void sub_1CCA21F20()
{
  unint64_t v0;

  sub_1CCA20D9C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t type metadata accessor for FMIPDiscoveredAccessory()
{
  uint64_t result;

  result = qword_1EF9E2050;
  if (!qword_1EF9E2050)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for FMIPBeaconSharingLimits()
{
  return &type metadata for FMIPBeaconSharingLimits;
}

void static FMIPBeaconSharingLimits.default.getter(_QWORD *a1@<X8>)
{
  *a1 = 6;
}

uint64_t FMIPBeaconSharingLimits.maxCircleMembers.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1CCA22000()
{
  qword_1ED8A8CA8 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain();
}

uint64_t storeEnumTagSinglePayload for FMIPSeparationLocation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1CCA22034()
{
  unint64_t v0;

  sub_1CCA249F4();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t type metadata accessor for FMIPSeparationLocation()
{
  uint64_t result;

  result = qword_1EF9E6A10;
  if (!qword_1EF9E6A10)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA2210C()
{
  return sub_1CC9E67E4();
}

uint64_t sub_1CCA2212C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1CC9C23B4(&qword_1EF9E0650, a2, (uint64_t (*)(uint64_t))type metadata accessor for FMIPInitClientResponse, (uint64_t)&unk_1CCB69268);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1CCA22168()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CCA22174(_QWORD *a1)
{
  swift_allocObject();
  return sub_1CC9DC154(a1);
}

unint64_t sub_1CCA221BC()
{
  unint64_t result;

  result = qword_1ED8A7480;
  if (!qword_1ED8A7480)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPHistoricalLocation, &type metadata for FMIPHistoricalLocation);
    atomic_store(result, (unint64_t *)&qword_1ED8A7480);
  }
  return result;
}

unint64_t sub_1CCA22200()
{
  unint64_t result;

  result = qword_1ED8A7478;
  if (!qword_1ED8A7478)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPHistoricalLocation, &type metadata for FMIPHistoricalLocation);
    atomic_store(result, (unint64_t *)&qword_1ED8A7478);
  }
  return result;
}

void sub_1CCA22244()
{
  uint64_t v0;

  sub_1CC9E0AFC(*(char **)(v0 + 16));
}

uint64_t sub_1CCA2224C()
{
  uint64_t v0;

  return sub_1CC9C6A14(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1CCA22254()
{
  return sub_1CC9CADA8((uint64_t)&unk_1E88FA9B0, (uint64_t)sub_1CCA2224C, (uint64_t)&unk_1E88FA9C8);
}

uint64_t sub_1CCA22270()
{
  uint64_t *v0;

  return sub_1CC9C2178(v0[2], v0[3], v0[4], &OBJC_IVAR____TtC8FMIPCore22FMAPSConnectionHandler_publicAPSToken, (uint64_t (*)(uint64_t))sub_1CC9D4BC4);
}

unint64_t sub_1CCA222A4()
{
  unint64_t result;

  result = qword_1ED8A7448;
  if (!qword_1ED8A7448)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB76924, &type metadata for FMIPPlaySoundMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7448);
  }
  return result;
}

unint64_t sub_1CCA222E8()
{
  unint64_t result;

  result = qword_1ED8A7440;
  if (!qword_1ED8A7440)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7694C, &type metadata for FMIPPlaySoundMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7440);
  }
  return result;
}

uint64_t FMIPItemUpdateContext.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  sub_1CCA22540(v0 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_type);
  v1 = v0 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_timestamp;
  v2 = sub_1CCB635B0();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_creationTimestamp, v2);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FMIPItemUpdateContext(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E4308);
}

uint64_t sub_1CCA223C0()
{
  sub_1CC9C785C();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA223E0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FMIPInitClientRequest()
{
  uint64_t result;

  result = qword_1ED8A70E0;
  if (!qword_1ED8A70E0)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for FMIPManagerSubsystem()
{
  return &type metadata for FMIPManagerSubsystem;
}

void sub_1CCA22474()
{
  qword_1ED8A8C90 = 3;
}

uint64_t type metadata accessor for FMIPGarbageCollector()
{
  return objc_opt_self();
}

uint64_t sub_1CCA224B8()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for FMIPDeviceImageCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CC9E3BAC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FMIPDeviceImageCache);
}

uint64_t FMIPItemsTabEnabled.getter()
{
  return 1;
}

ValueMetadata *type metadata accessor for FMIPDeviceImageSize()
{
  return &type metadata for FMIPDeviceImageSize;
}

void sub_1CCA22514(uint64_t a1)
{
  sub_1CC9CD0CC(a1, 0x65646F4D6F6D6544, 0xEF64656C62616E45, &byte_1EF9E27F2);
}

uint64_t sub_1CCA22540(uint64_t a1)
{
  uint64_t updated;

  updated = type metadata accessor for FMIPItemUpdateType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 8))(a1, updated);
  return a1;
}

uint64_t type metadata accessor for FMIPItemUpdateType(uint64_t a1)
{
  return sub_1CC9E911C(a1, (uint64_t *)&unk_1ED8A8C80);
}

uint64_t type metadata accessor for FMIPItemImageCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CC9E3BAC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FMIPItemImageCache);
}

id sub_1CCA2259C()
{
  id result;

  result = sub_1CC9C6DB0();
  qword_1EF9E34D0 = (uint64_t)result;
  return result;
}

ValueMetadata *type metadata accessor for FMIPAccessoryError()
{
  return &type metadata for FMIPAccessoryError;
}

uint64_t sub_1CCA225C8()
{
  sub_1CCA14E90(&qword_1EF9E21F0);
  return sub_1CC9C3820();
}

uint64_t sub_1CCA22608(unint64_t a1)
{
  uint64_t v1;

  return sub_1CC9F6C54(a1, *(double **)(v1 + 16), *(void (**)(unint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

ValueMetadata *type metadata accessor for FMIPEraseMetadata.CodingKeys()
{
  return &type metadata for FMIPEraseMetadata.CodingKeys;
}

unint64_t sub_1CCA2262C()
{
  unint64_t result;

  result = qword_1ED8A73E0;
  if (!qword_1ED8A73E0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB683BC, &type metadata for FMIPEraseMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A73E0);
  }
  return result;
}

unint64_t sub_1CCA22670()
{
  unint64_t result;

  result = qword_1ED8A73D8;
  if (!qword_1ED8A73D8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB683E4, &type metadata for FMIPEraseMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A73D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPUTAlertState()
{
  return &type metadata for FMIPUTAlertState;
}

uint64_t FMIPUTAlertState.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x64656C6261736964;
  else
    return 0x64656C62616E65;
}

uint64_t storeEnumTagSinglePayload for FMIPUTAlertEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 50) = 0;
    *(_WORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 51) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 51) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPUTAlertEvent()
{
  return &type metadata for FMIPUTAlertEvent;
}

ValueMetadata *type metadata accessor for FMIPSafeLocation()
{
  return &type metadata for FMIPSafeLocation;
}

unint64_t sub_1CCA22778()
{
  unint64_t result;

  result = qword_1EF9E2940;
  if (!qword_1EF9E2940)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPSafeLocation, &type metadata for FMIPSafeLocation);
    atomic_store(result, (unint64_t *)&qword_1EF9E2940);
  }
  return result;
}

unint64_t sub_1CCA227BC()
{
  unint64_t result;

  result = qword_1EF9E29A8;
  if (!qword_1EF9E29A8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPSafeLocation, &type metadata for FMIPSafeLocation);
    atomic_store(result, (unint64_t *)&qword_1EF9E29A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPLockMetadata.CodingKeys()
{
  return &type metadata for FMIPLockMetadata.CodingKeys;
}

unint64_t sub_1CCA22818()
{
  unint64_t result;

  result = qword_1ED8A73A0;
  if (!qword_1ED8A73A0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6A93C, &type metadata for FMIPLockMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A73A0);
  }
  return result;
}

unint64_t sub_1CCA2285C()
{
  unint64_t result;

  result = qword_1ED8A7398;
  if (!qword_1ED8A7398)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6A964, &type metadata for FMIPLockMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7398);
  }
  return result;
}

uint64_t sub_1CCA228A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 120))();
  if (!v2)
    *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for FMIPBaseResponse.CodingKeys()
{
  return &type metadata for FMIPBaseResponse.CodingKeys;
}

unint64_t sub_1CCA228E4()
{
  unint64_t result;

  result = qword_1ED8A72C0;
  if (!qword_1ED8A72C0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75784, &type metadata for FMIPBaseResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A72C0);
  }
  return result;
}

unint64_t sub_1CCA22928()
{
  unint64_t result;

  result = qword_1ED8A72B8;
  if (!qword_1ED8A72B8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB757AC, &type metadata for FMIPBaseResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A72B8);
  }
  return result;
}

unint64_t sub_1CCA2296C()
{
  unint64_t result;

  result = qword_1ED8A72B0;
  if (!qword_1ED8A72B0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7591C, &type metadata for FMIPBaseResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A72B0);
  }
  return result;
}

unint64_t sub_1CCA229B0()
{
  unint64_t result;

  result = qword_1ED8A72A8;
  if (!qword_1ED8A72A8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPAudioChannel, &type metadata for FMIPAudioChannel);
    atomic_store(result, (unint64_t *)&qword_1ED8A72A8);
  }
  return result;
}

unint64_t sub_1CCA229F4()
{
  unint64_t result;

  result = qword_1ED8A72A0;
  if (!qword_1ED8A72A0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPAudioChannel, &type metadata for FMIPAudioChannel);
    atomic_store(result, (unint64_t *)&qword_1ED8A72A0);
  }
  return result;
}

unint64_t sub_1CCA22A40()
{
  unint64_t result;

  result = qword_1EF9E0400;
  if (!qword_1EF9E0400)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB68A8C, &type metadata for FMIPAudioChannel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E0400);
  }
  return result;
}

unint64_t sub_1CCA22A84()
{
  unint64_t result;

  result = qword_1EF9E0408;
  if (!qword_1EF9E0408)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB68AB4, &type metadata for FMIPAudioChannel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E0408);
  }
  return result;
}

void sub_1CCA22AC8()
{
  unint64_t v0;

  sub_1CCA20D9C();
  if (v0 <= 0x3F)
    swift_initEnumMetadataMultiPayload();
}

uint64_t type metadata accessor for FMIPProductType()
{
  uint64_t result;

  result = qword_1ED8A8C70;
  if (!qword_1ED8A8C70)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1CCA22B7C()
{
  unint64_t v0;

  sub_1CC9C3D94();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for FMIPDataManager()
{
  uint64_t result;

  result = qword_1ED8A8C60;
  if (!qword_1ED8A8C60)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA22CB4()
{
  uint64_t v0;

  return sub_1CC9CAF8C(v0);
}

uint64_t sub_1CCA22CBC()
{
  uint64_t v0;

  return sub_1CC9C75D8(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

_BYTE *sub_1CCA22CC8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

unint64_t sub_1CCA22CD4()
{
  unint64_t result;

  result = qword_1EF9E4CB0;
  if (!qword_1EF9E4CB0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPConfigValue, &type metadata for FMIPConfigValue);
    atomic_store(result, (unint64_t *)&qword_1EF9E4CB0);
  }
  return result;
}

uint64_t type metadata accessor for FMIPBeaconShare(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9DF100);
}

uint64_t type metadata accessor for FMIPURLHandler()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for FMIPBeaconType()
{
  return &type metadata for FMIPBeaconType;
}

unint64_t sub_1CCA22D64()
{
  unint64_t result;

  result = qword_1EF9E54E8;
  if (!qword_1EF9E54E8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72B0C, &type metadata for FMIPBeaconType.VirtualMeDeviceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E54E8);
  }
  return result;
}

unint64_t sub_1CCA22DA8()
{
  unint64_t result;

  result = qword_1EF9E54F0;
  if (!qword_1EF9E54F0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72B34, &type metadata for FMIPBeaconType.VirtualMeDeviceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E54F0);
  }
  return result;
}

unint64_t sub_1CCA22DF4()
{
  unint64_t result;

  result = qword_1EF9E5498;
  if (!qword_1EF9E5498)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72C9C, &type metadata for FMIPBeaconType.SelfBeaconingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E5498);
  }
  return result;
}

unint64_t sub_1CCA22E38()
{
  unint64_t result;

  result = qword_1EF9E54A0;
  if (!qword_1EF9E54A0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72CC4, &type metadata for FMIPBeaconType.SelfBeaconingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E54A0);
  }
  return result;
}

unint64_t sub_1CCA22E84()
{
  unint64_t result;

  result = qword_1EF9E54D8;
  if (!qword_1EF9E54D8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72B5C, &type metadata for FMIPBeaconType.LocalFindableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E54D8);
  }
  return result;
}

unint64_t sub_1CCA22EC8()
{
  unint64_t result;

  result = qword_1EF9E54E0;
  if (!qword_1EF9E54E0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72B84, &type metadata for FMIPBeaconType.LocalFindableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E54E0);
  }
  return result;
}

unint64_t sub_1CCA22F14()
{
  unint64_t result;

  result = qword_1EF9E54B8;
  if (!qword_1EF9E54B8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72BFC, &type metadata for FMIPBeaconType.AccessoryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E54B8);
  }
  return result;
}

unint64_t sub_1CCA22F58()
{
  unint64_t result;

  result = qword_1EF9E54C0;
  if (!qword_1EF9E54C0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72C24, &type metadata for FMIPBeaconType.AccessoryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E54C0);
  }
  return result;
}

unint64_t sub_1CCA22FA4()
{
  unint64_t result;

  result = qword_1EF9E54A8;
  if (!qword_1EF9E54A8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72C4C, &type metadata for FMIPBeaconType.DurianCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E54A8);
  }
  return result;
}

unint64_t sub_1CCA22FE8()
{
  unint64_t result;

  result = qword_1EF9E54B0;
  if (!qword_1EF9E54B0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72C74, &type metadata for FMIPBeaconType.DurianCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E54B0);
  }
  return result;
}

unint64_t sub_1CCA23034()
{
  unint64_t result;

  result = qword_1EF9E5488;
  if (!qword_1EF9E5488)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72CEC, &type metadata for FMIPBeaconType.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E5488);
  }
  return result;
}

unint64_t sub_1CCA23078()
{
  unint64_t result;

  result = qword_1EF9E5490;
  if (!qword_1EF9E5490)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72D14, &type metadata for FMIPBeaconType.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E5490);
  }
  return result;
}

unint64_t sub_1CCA230C4()
{
  unint64_t result;

  result = qword_1EF9E54C8;
  if (!qword_1EF9E54C8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72BAC, &type metadata for FMIPBeaconType.HeleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E54C8);
  }
  return result;
}

unint64_t sub_1CCA23108()
{
  unint64_t result;

  result = qword_1EF9E54D0;
  if (!qword_1EF9E54D0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72BD4, &type metadata for FMIPBeaconType.HeleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E54D0);
  }
  return result;
}

unint64_t sub_1CCA23154()
{
  unint64_t result;

  result = qword_1EF9E54F8;
  if (!qword_1EF9E54F8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72D3C, &type metadata for FMIPBeaconType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E54F8);
  }
  return result;
}

unint64_t sub_1CCA23198()
{
  unint64_t result;

  result = qword_1EF9E5500;
  if (!qword_1EF9E5500)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72D64, &type metadata for FMIPBeaconType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E5500);
  }
  return result;
}

void sub_1CCA231DC()
{
  unint64_t v0;

  sub_1CCA21E0C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

ValueMetadata *type metadata accessor for FMIPItemGroup.CodingKeys()
{
  return &type metadata for FMIPItemGroup.CodingKeys;
}

unint64_t sub_1CCA2328C()
{
  unint64_t result;

  result = qword_1EF9E1E18;
  if (!qword_1EF9E1E18)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6AD1C, &type metadata for FMIPItemGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E1E18);
  }
  return result;
}

unint64_t sub_1CCA232D0()
{
  unint64_t result;

  result = qword_1EF9E1E20;
  if (!qword_1EF9E1E20)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6AD44, &type metadata for FMIPItemGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E1E20);
  }
  return result;
}

void sub_1CCA23314(uint64_t a1)
{
  sub_1CCA23358(a1, 1, 0xD00000000000001CLL, 0x80000001CCB7B3C0, (unsigned __int8 *)&byte_1ED8A70D1);
}

uint64_t static FMDemoManager.devicesDemoEnabled.getter()
{
  return sub_1CCA2341C(&qword_1ED8A8C10, (unsigned __int8 *)&byte_1ED8A70D1);
}

void sub_1CCA23358(uint64_t a1, char a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  char v11;

  type metadata accessor for FMDemoManager();
  v11 = a2;
  if ((static FMDemoManager.hasDemoModeAsset(for:)(&v11) & 1) != 0)
  {
    v7 = (void *)objc_opt_self();
    v8 = (void *)sub_1CCB63964();
    v9 = (void *)sub_1CCB63964();
    v10 = objc_msgSend(v7, sel_BOOLForKey_inDomain_, v8, v9);

  }
  else
  {
    v10 = 0;
  }
  *a5 = v10;
}

uint64_t sub_1CCA2341C(_QWORD *a1, unsigned __int8 *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

void sub_1CCA23454(_QWORD *a1)
{
  FMIPLocation.encode(to:)(a1);
}

unint64_t sub_1CCA23468()
{
  unint64_t result;

  result = qword_1ED8A7210;
  if (!qword_1ED8A7210)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPLocation, &type metadata for FMIPLocation);
    atomic_store(result, (unint64_t *)&qword_1ED8A7210);
  }
  return result;
}

unint64_t sub_1CCA234B4()
{
  unint64_t result;

  result = qword_1ED8A7208;
  if (!qword_1ED8A7208)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6D7DC, &type metadata for FMIPLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7208);
  }
  return result;
}

unint64_t sub_1CCA234F8()
{
  unint64_t result;

  result = qword_1ED8A7200;
  if (!qword_1ED8A7200)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6D804, &type metadata for FMIPLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7200);
  }
  return result;
}

unint64_t sub_1CCA23544()
{
  unint64_t result;

  result = qword_1ED8A71E0;
  if (!qword_1ED8A71E0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB70958, &type metadata for FMIPFeatures.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A71E0);
  }
  return result;
}

unint64_t sub_1CCA23588()
{
  unint64_t result;

  result = qword_1ED8A71D8;
  if (!qword_1ED8A71D8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB70980, &type metadata for FMIPFeatures.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A71D8);
  }
  return result;
}

uint64_t type metadata accessor for FMIPManager()
{
  uint64_t result;

  result = qword_1ED8A8E18;
  if (!qword_1ED8A8E18)
    return swift_getSingletonMetadata();
  return result;
}

void FMIPManager.enqueue(notificationLaunchEvent:)(__int128 *a1)
{
  __int128 v1;

  v1 = *a1;
  _s8FMIPCore13FMIPAnalyticsV31sendNotificationAuthLaunchEvent5eventyAA016FMIPNotificationefG0V_tFZ_0((uint64_t *)&v1);
}

uint64_t sub_1CCA23630@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC9CEE34(a1);
}

uint64_t FMIPManager.devices.getter()
{
  return sub_1CC9C602C(&qword_1ED8A7E80);
}

uint64_t sub_1CCA23658@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CC9C8E74(a1);
}

uint64_t FMIPManager.items.getter()
{
  return sub_1CC9C602C((uint64_t *)&unk_1EF9E2A60);
}

uint64_t sub_1CCA23680()
{
  uint64_t v0;

  return sub_1CC9CB440(v0);
}

void sub_1CCA23688(uint64_t a1, id a2)
{
  uint64_t v2;
  uint64_t v3;
  void **p_vtable;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, _QWORD, _QWORD, id);
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_isDevicesSnapshotMode) != 1)
    return;
  v3 = v2;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_snapshotDevicesResponseReceived) & 1) != 0)
    return;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_snapshotDevicesResponseReceived) = 1;
  p_vtable = &OBJC_METACLASS____TtC8FMIPCore20FMIPSnapshotHandlers.vtable;
  if (a2)
  {
    v7 = a2;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v8 = sub_1CCB637FC();
    sub_1CCA16C20(v8, (uint64_t)qword_1ED8AD7F8);
    v9 = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    v10 = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    v11 = sub_1CCB637D8();
    v12 = sub_1CCB63D48();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      v14 = swift_slowAlloc();
      *(_DWORD *)v13 = 136446722;
      v59 = v14;
      sub_1CCA14E90(&qword_1EF9E2878);
      v15 = sub_1CCB639AC();
      sub_1CCA0CB60(v15, v16, &v59);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2048;
      swift_bridgeObjectRelease();
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 22) = 2080;
      swift_getErrorValue();
      v17 = sub_1CCB64300();
      sub_1CCA0CB60(v17, v18, &v59);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v11, v12, "%{public}s: received %ld devices (error=%s)", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy();
      v19 = v14;
      p_vtable = (void **)(&OBJC_METACLASS____TtC8FMIPCore20FMIPSnapshotHandlers + 24);
      MEMORY[0x1D17B214C](v19, -1, -1);
      MEMORY[0x1D17B214C](v13, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();

    }
    v31 = *(_QWORD *)(*(_QWORD *)((char *)p_vtable[360] + v2)
                    + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_snapshotHandlers);
    if (v31)
    {
      v32 = *(void (**)(uint64_t, _QWORD, _QWORD, id))(v31 + 32);
      if (v32)
      {
        v33 = a2;
        sub_1CC9DF994((uint64_t)v32);
        v32(v2, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], a2);

        sub_1CCA203A8((uint64_t)v32);
      }
    }

    return;
  }
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration);
  v21 = OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_snapshotHandlers;
  v22 = *(_QWORD *)(v20 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_snapshotHandlers);
  if (v22)
  {
    v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 16);
    if (v23)
    {
      swift_retain();
      v24 = v23(v2, a1);
      if (*(_QWORD *)(v24 + 16))
      {
        if (qword_1ED8AA630 != -1)
          swift_once();
        v25 = sub_1CCB637FC();
        sub_1CCA16C20(v25, (uint64_t)qword_1ED8AD7F8);
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v26 = sub_1CCB637D8();
        v27 = sub_1CCB63D48();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = swift_slowAlloc();
          v56 = swift_slowAlloc();
          *(_DWORD *)v28 = 136446722;
          v59 = v56;
          sub_1CCA14E90(&qword_1EF9E2878);
          v29 = sub_1CCB639AC();
          sub_1CCA0CB60(v29, v30, &v59);
          sub_1CCB63E44();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v28 + 12) = 2048;
          swift_bridgeObjectRelease();
          sub_1CCB63E44();
          swift_bridgeObjectRelease();
          *(_WORD *)(v28 + 22) = 2048;
          swift_bridgeObjectRelease();
          sub_1CCB63E44();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1CC9BF000, v26, v27, "%{public}s: received %ld devices incl. %ld locations asked", (uint8_t *)v28, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x1D17B214C](v56, -1, -1);
          MEMORY[0x1D17B214C](v28, -1, -1);

        }
        else
        {

          swift_release_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        v51 = *(_QWORD *)(v20 + v21);
        if (v51 && (v52 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v51 + 32)) != 0)
        {
          swift_retain();
          v52(v3, v24, v24, 0);
          sub_1CCA203A8((uint64_t)v23);
          v53 = (uint64_t)v52;
        }
        else
        {
          v53 = (uint64_t)v23;
        }
        sub_1CCA203A8(v53);
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRelease();
      if (qword_1ED8AA630 != -1)
        swift_once();
      v45 = sub_1CCB637FC();
      sub_1CCA16C20(v45, (uint64_t)qword_1ED8AD7F8);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      v46 = sub_1CCB637D8();
      v47 = sub_1CCB63D48();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = swift_slowAlloc();
        v57 = swift_slowAlloc();
        *(_DWORD *)v48 = 136446466;
        v59 = v57;
        sub_1CCA14E90(&qword_1EF9E2878);
        v49 = sub_1CCB639AC();
        sub_1CCA0CB60(v49, v50, &v59);
        sub_1CCB63E44();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v48 + 12) = 2048;
        swift_bridgeObjectRelease();
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v46, v47, "%{public}s: received %ld devices but no location asked", (uint8_t *)v48, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v57, -1, -1);
        MEMORY[0x1D17B214C](v48, -1, -1);

      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
      }
      v54 = *(_QWORD *)(v20 + v21);
      if (v54 && (v55 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v54 + 32)) != 0)
      {
        swift_retain();
        v55(v3, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0);
        sub_1CCA203A8((uint64_t)v23);
        v44 = (uint64_t)v55;
      }
      else
      {
        v44 = (uint64_t)v23;
      }
LABEL_44:
      sub_1CCA203A8(v44);
      return;
    }
  }
  if (qword_1ED8AA630 != -1)
    swift_once();
  v34 = sub_1CCB637FC();
  sub_1CCA16C20(v34, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v35 = sub_1CCB637D8();
  v36 = sub_1CCB63D48();
  if (os_log_type_enabled(v35, v36))
  {
    v58 = v21;
    v37 = swift_slowAlloc();
    v38 = swift_slowAlloc();
    *(_DWORD *)v37 = 136446466;
    v59 = v38;
    sub_1CCA14E90(&qword_1EF9E2878);
    v39 = sub_1CCB639AC();
    sub_1CCA0CB60(v39, v40, &v59);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2048;
    swift_bridgeObjectRelease();
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v35, v36, "%{public}s: received %ld devices", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v38, -1, -1);
    v41 = v37;
    v21 = v58;
    MEMORY[0x1D17B214C](v41, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  v42 = *(_QWORD *)(v20 + v21);
  if (v42)
  {
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v42 + 32);
    if (v43)
    {
      swift_retain();
      v43(v3, a1, a1, 0);
      v44 = (uint64_t)v43;
      goto LABEL_44;
    }
  }
}

uint64_t sub_1CCA240F0()
{
  uint64_t v0;

  return sub_1CCAA63B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t)sub_1CCA241A4, (uint64_t)&unk_1E88F89E8);
}

uint64_t sub_1CCA24118()
{
  uint64_t v0;

  return sub_1CC9C4DAC(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1CCA24124()
{
  uint64_t *v0;

  return sub_1CC9C4630(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1CCA24134()
{
  uint64_t v0;

  return sub_1CC9C4C0C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1CCA24140()
{
  uint64_t v0;

  return sub_1CC9C7A68(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCA24148(uint64_t a1)
{
  return sub_1CC9DBA3C(a1, "FMIPManager: didReceive items %@", (uint64_t)&unk_1E88F7AE0, (uint64_t)sub_1CCA24140, (uint64_t)&unk_1E88F7AF8);
}

uint64_t sub_1CCA2416C()
{
  uint64_t v0;

  return sub_1CC9CFDBC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCA24174(uint64_t a1)
{
  uint64_t v1;

  return sub_1CC9CB188(a1, v1, (uint64_t)&unk_1E88F79A0, (uint64_t)sub_1CCA2416C, (uint64_t)&unk_1E88F79B8);
}

uint64_t sub_1CCA241A4()
{
  uint64_t v0;

  return sub_1CC9CF9C4(v0);
}

uint64_t sub_1CCA241C4()
{
  uint64_t v0;

  return sub_1CCA07F7C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCA241CC()
{
  uint64_t v0;

  return sub_1CC9C4398(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCA241D4()
{
  uint64_t v0;

  return sub_1CC9D38E0(v0);
}

uint64_t sub_1CCA241DC()
{
  uint64_t v0;

  return sub_1CCAA63B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t)sub_1CCA241D4, (uint64_t)&unk_1E88F88A8);
}

uint64_t sub_1CCA24204()
{
  uint64_t v0;

  return sub_1CC9C2754(*(_QWORD *)(v0 + 16), v0 + 24, *(_QWORD *)(v0 + 112));
}

uint64_t sub_1CCA24214()
{
  uint64_t v0;

  return sub_1CC9D2A24(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + 32);
}

uint64_t sub_1CCA24220()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_1CCA24248()
{
  uint64_t *v0;

  return sub_1CC9DF370(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1CCA24254()
{
  uint64_t *v0;

  return sub_1CC9DADB8(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1CCA24260(uint64_t (*a1)(uint64_t *))
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_configuration)
                 + OBJC_IVAR____TtC8FMIPCore24FMIPManagerConfiguration_enabledSubsystems);
  return a1(&v3);
}

Swift::Void __swiftcall FMIPManager.startRefreshing()()
{
  sub_1CCA24260((uint64_t (*)(uint64_t *))FMIPManager.startRefreshing(subsystems:));
}

uint64_t sub_1CCA242B0()
{
  uint64_t v0;

  return sub_1CC9D5CEC(v0);
}

uint64_t sub_1CCA242E0()
{
  uint64_t v0;

  return sub_1CCAA262C(v0);
}

uint64_t sub_1CCA24300()
{
  uint64_t v0;

  return sub_1CC9D2070(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCA24308()
{
  uint64_t *v0;

  return sub_1CC9CD7C0(v0[2], v0[3], v0[4]);
}

uint64_t storeEnumTagSinglePayload for FMIPAddress(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 288) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 168) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 288) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

unint64_t sub_1CCA243A0()
{
  unint64_t result;

  result = qword_1EF9E62E8;
  if (!qword_1EF9E62E8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPAddress, &type metadata for FMIPAddress);
    atomic_store(result, (unint64_t *)&qword_1EF9E62E8);
  }
  return result;
}

unint64_t sub_1CCA243E4()
{
  unint64_t result;

  result = qword_1ED8A71B0;
  if (!qword_1ED8A71B0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPAddress, &type metadata for FMIPAddress);
    atomic_store(result, (unint64_t *)&qword_1ED8A71B0);
  }
  return result;
}

unint64_t sub_1CCA24428(uint64_t a1)
{
  unint64_t result;

  result = sub_1CCA243A0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for FMIPAddress.CodingKeys()
{
  return &type metadata for FMIPAddress.CodingKeys;
}

unint64_t sub_1CCA24464()
{
  unint64_t result;

  result = qword_1ED8A71A8;
  if (!qword_1ED8A71A8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6A620, &type metadata for FMIPAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A71A8);
  }
  return result;
}

unint64_t sub_1CCA244A8()
{
  unint64_t result;

  result = qword_1ED8A71A0;
  if (!qword_1ED8A71A0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6A648, &type metadata for FMIPAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A71A0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPPerson(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPPerson(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1CCA24588(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1CCA245E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPPerson.init(from:)(a1, a2);
}

unint64_t sub_1CCA245F8()
{
  unint64_t result;

  result = qword_1ED8A7190;
  if (!qword_1ED8A7190)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPPerson, &type metadata for FMIPPerson);
    atomic_store(result, (unint64_t *)&qword_1ED8A7190);
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPPerson.CodingKeys()
{
  return &type metadata for FMIPPerson.CodingKeys;
}

unint64_t sub_1CCA24654()
{
  unint64_t result;

  result = qword_1ED8A7188;
  if (!qword_1ED8A7188)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB742E8, &type metadata for FMIPPerson.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7188);
  }
  return result;
}

unint64_t sub_1CCA24698()
{
  unint64_t result;

  result = qword_1ED8A7180;
  if (!qword_1ED8A7180)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74310, &type metadata for FMIPPerson.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7180);
  }
  return result;
}

uint64_t sub_1CCA246DC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CCA14E90(&qword_1ED8A7170);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CCA2471C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A7170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCA24764(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1CCA14E90(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1CCA247A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A7170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1CCA247F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED8A8FE0)
  {
    type metadata accessor for FMIPDevice();
    v0 = sub_1CCB63E2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED8A8FE0);
  }
}

unint64_t sub_1CCA2484C()
{
  unint64_t result;

  result = qword_1ED8A7158;
  if (!qword_1ED8A7158)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72DF4, &type metadata for FMIPDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7158);
  }
  return result;
}

unint64_t sub_1CCA24890()
{
  unint64_t result;

  result = qword_1ED8A7150;
  if (!qword_1ED8A7150)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72E1C, &type metadata for FMIPDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8A7150);
  }
  return result;
}

unint64_t sub_1CCA248D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED8A8F00;
  if (!qword_1ED8A8F00)
  {
    v1 = sub_1CCB63820();
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&qword_1ED8A8F00);
  }
  return result;
}

uint64_t sub_1CCA2491C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8AA618);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCA24964(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCA249AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A7130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1CCA249F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED8A8EF0)
  {
    sub_1CCB635B0();
    v0 = sub_1CCB63E2C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED8A8EF0);
  }
}

uint64_t sub_1CCA24A48(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1CCA1B164(a1, a2);
  return a1;
}

uint64_t sub_1CCA24A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A8EE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCA24AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A8EE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL static FMIPBeaconShareDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FMIPBeaconShareDirection.hash(into:)()
{
  return sub_1CCB64348();
}

uint64_t FMIPBeaconShareDirection.hashValue.getter()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

BOOL sub_1CCA24B6C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t _s8FMIPCore28FMIPDeviceConnectedStateTypeO9hashValueSivg_0()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

uint64_t sub_1CCA24BC4()
{
  return sub_1CCB64348();
}

uint64_t sub_1CCA24BEC()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

BOOL FMIPBeaconShareState.isActive.getter()
{
  _QWORD *v0;

  return ((*v0 + 0x7FFFFFFFFFFFFFD8) & 0xFFFFFFFFFFFFFFF7) == 0 && *v0 >> 62 == 2;
}

unint64_t FMIPBeaconShareState.baseState.getter@<X0>(unint64_t *a1@<X8>)
{
  unint64_t *v1;
  unint64_t v2;

  v2 = *v1;
  if ((*v1 >> 62) <= 1)
    return FMIPBeaconShareState.baseState.getter();
  *a1 = v2;
  return sub_1CCA24CA8(v2);
}

unint64_t sub_1CCA24CA8(unint64_t result)
{
  if ((result >> 62) <= 1)
    return swift_retain();
  return result;
}

uint64_t FMIPBeaconShareState.hash(into:)(uint64_t a1)
{
  _QWORD *v1;

  if ((*v1 >> 62) > 1)
    __asm { BR              X10 }
  sub_1CCB64348();
  return FMIPBeaconShareState.hash(into:)(a1);
}

uint64_t static FMIPBeaconShareState.== infix(_:_:)(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  v4 = *a1 >> 62;
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 != 1)
      __asm { BR              X10 }
    if (v3 >> 62 != 1)
      goto LABEL_8;
  }
  else if (v3 >> 62)
  {
LABEL_8:
    sub_1CCA24CA8(*a2);
    sub_1CCA24CA8(v2);
    sub_1CCA25030(v2);
    sub_1CCA25030(v3);
    v6 = 0;
    return v6 & 1;
  }
  v5 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(v3 + 16);
  v9 = v5;
  sub_1CCA24CA8(v3);
  sub_1CCA24CA8(v2);
  v6 = static FMIPBeaconShareState.== infix(_:_:)(&v9, &v8);
  sub_1CCA25030(v2);
  sub_1CCA25030(v3);
  return v6 & 1;
}

uint64_t FMIPBeaconShareState.hashValue.getter()
{
  _QWORD *v0;
  _QWORD v2[10];

  v2[9] = *v0;
  sub_1CCB6433C();
  FMIPBeaconShareState.hash(into:)((uint64_t)v2);
  return sub_1CCB64384();
}

uint64_t sub_1CCA24FE4()
{
  _QWORD *v0;
  _QWORD v2[10];

  v2[9] = *v0;
  sub_1CCB6433C();
  FMIPBeaconShareState.hash(into:)((uint64_t)v2);
  return sub_1CCB64384();
}

unint64_t sub_1CCA25030(unint64_t result)
{
  if ((result >> 62) <= 1)
    return swift_release();
  return result;
}

uint64_t sub_1CCA2504C()
{
  _QWORD *v0;
  _QWORD v2[10];

  v2[9] = *v0;
  sub_1CCB6433C();
  FMIPBeaconShareState.hash(into:)((uint64_t)v2);
  return sub_1CCB64384();
}

uint64_t FMIPBeaconShare.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1CCB63604();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t FMIPBeaconShare.beaconIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FMIPBeaconShare(0) + 20);
  v4 = sub_1CCB63604();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FMIPBeaconShare.ownerHandle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPBeaconShare(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPBeaconShare.shareeHandle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPBeaconShare(0) + 28));
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t FMIPBeaconShare.state.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for FMIPBeaconShare(0) + 32));
  *a1 = v3;
  return sub_1CCA24CA8(v3);
}

uint64_t FMIPBeaconShare.creationDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FMIPBeaconShare(0) + 36);
  v4 = sub_1CCB635B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t static FMIPBeaconShare.directionSort(lhs:rhs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v14;

  v4 = type metadata accessor for FMIPBeaconShare(0);
  v5 = *(int *)(v4 + 28);
  v6 = (_QWORD *)(a1 + *(int *)(v4 + 24));
  v7 = *v6 == *(_QWORD *)(a1 + v5) && v6[1] == *(_QWORD *)(a1 + v5 + 8);
  if (v7 || (sub_1CCB642A0() & 1) != 0)
    return 1;
  v9 = (uint64_t *)(a2 + *(int *)(v4 + 24));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)(a2 + *(int *)(v4 + 28));
  if (v10 == *v12 && v11 == v12[1])
    return 0;
  v14 = sub_1CCB642A0();
  result = 0;
  if ((v14 & 1) == 0)
    return sub_1CCB63550();
  return result;
}

uint64_t FMIPBeaconShare.isDefaultOwnedShare.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  char v8;
  char *v9;
  char v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for FMIPBeaconShare(0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)(v1 + *(int *)(v3 + 28));
  if (*v6 == 0x6F6C4072656E776FLL && v6[1] == 0xEF74736F686C6163)
  {
    sub_1CCA0BEEC(v1, (uint64_t)v5, type metadata accessor for FMIPBeaconShare);
  }
  else
  {
    v8 = sub_1CCB642A0();
    sub_1CCA0BEEC(v1, (uint64_t)v5, type metadata accessor for FMIPBeaconShare);
    if ((v8 & 1) == 0)
    {
      sub_1CCA0BF30((uint64_t)v5, type metadata accessor for FMIPBeaconShare);
      return 0;
    }
  }
  v9 = &v5[*(int *)(v2 + 24)];
  if (*(_QWORD *)v9 == 0x6F6C4072656E776FLL && *((_QWORD *)v9 + 1) == 0xEF74736F686C6163)
  {
    sub_1CCA0BF30((uint64_t)v5, type metadata accessor for FMIPBeaconShare);
  }
  else
  {
    v11 = sub_1CCB642A0();
    sub_1CCA0BF30((uint64_t)v5, type metadata accessor for FMIPBeaconShare);
    if ((v11 & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t FMIPBeaconShare.direction.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char v9;
  char *v10;
  char v12;
  uint64_t result;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;

  v3 = type metadata accessor for FMIPBeaconShare(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)(v1 + *(int *)(v4 + 28));
  if (*v7 == 0x6F6C4072656E776FLL && v7[1] == 0xEF74736F686C6163)
  {
    sub_1CCA0BEEC(v1, (uint64_t)v6, type metadata accessor for FMIPBeaconShare);
LABEL_13:
    sub_1CCA0BF30((uint64_t)v6, type metadata accessor for FMIPBeaconShare);
    goto LABEL_14;
  }
  v9 = sub_1CCB642A0();
  sub_1CCA0BEEC(v1, (uint64_t)v6, type metadata accessor for FMIPBeaconShare);
  if ((v9 & 1) != 0)
    goto LABEL_13;
  v10 = &v6[*(int *)(v3 + 24)];
  if (*(_QWORD *)v10 == 0x6F6C4072656E776FLL && *((_QWORD *)v10 + 1) == 0xEF74736F686C6163)
    goto LABEL_13;
  v12 = sub_1CCB642A0();
  result = sub_1CCA0BF30((uint64_t)v6, type metadata accessor for FMIPBeaconShare);
  if ((v12 & 1) == 0)
  {
    v14 = 2;
    goto LABEL_20;
  }
LABEL_14:
  v15 = (uint64_t *)(v1 + *(int *)(v3 + 24));
  v17 = *v15;
  v16 = v15[1];
  v18 = objc_msgSend((id)objc_opt_self(), sel_SPOwner);
  v19 = objc_msgSend(v18, sel_destination);

  v20 = sub_1CCB63988();
  v22 = v21;

  if (v17 == v20 && v16 == v22)
  {
    result = swift_bridgeObjectRelease();
    v14 = 1;
  }
  else
  {
    v24 = sub_1CCB642A0();
    result = swift_bridgeObjectRelease();
    v14 = v24 & 1;
  }
LABEL_20:
  *a1 = v14;
  return result;
}

uint64_t FMIPBeaconShare.shareIncludesMe.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  char v7;
  char *v8;
  char v10;
  uint64_t v12;

  v1 = type metadata accessor for FMIPBeaconShare(0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)(v0 + *(int *)(v2 + 28));
  if (*v5 == 0x6F6C4072656E776FLL && v5[1] == 0xEF74736F686C6163)
  {
    sub_1CCA0BEEC(v0, (uint64_t)v4, type metadata accessor for FMIPBeaconShare);
LABEL_12:
    v10 = 1;
    goto LABEL_13;
  }
  v7 = sub_1CCB642A0();
  sub_1CCA0BEEC(v0, (uint64_t)v4, type metadata accessor for FMIPBeaconShare);
  if ((v7 & 1) != 0)
    goto LABEL_12;
  v8 = &v4[*(int *)(v1 + 24)];
  if (*(_QWORD *)v8 == 0x6F6C4072656E776FLL && *((_QWORD *)v8 + 1) == 0xEF74736F686C6163)
    goto LABEL_12;
  v10 = sub_1CCB642A0();
LABEL_13:
  sub_1CCA0BF30((uint64_t)v4, type metadata accessor for FMIPBeaconShare);
  return v10 & 1;
}

uint64_t FMIPBeaconShare.amOwner.getter()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPBeaconShare(0) + 24));
  if (*v1 == 0x6F6C4072656E776FLL && v1[1] == 0xEF74736F686C6163)
    return 1;
  else
    return sub_1CCB642A0();
}

uint64_t FMIPBeaconShare.amSharee.getter()
{
  uint64_t v0;
  _QWORD *v1;
  char v3;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPBeaconShare(0) + 24));
  if (*v1 == 0x6F6C4072656E776FLL && v1[1] == 0xEF74736F686C6163)
    v3 = 0;
  else
    v3 = sub_1CCB642A0() ^ 1;
  return v3 & 1;
}

uint64_t FMIPBeaconShare.otherPartyHandle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;

  FMIPBeaconShare.direction.getter(&v4);
  v1 = qword_1CCB669C8[v4];
  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPBeaconShare(0) + 4 * v1));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t FMIPBeaconShare.requiresResponse.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  char v8;
  char *v9;
  char v11;
  uint64_t v13;

  v1 = type metadata accessor for FMIPBeaconShare(0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + *(int *)(v2 + 32));
  if ((v5 & 0x8000000000000000) == 0 || (v11 = 0, ((1 << __ROR8__(v5, 3)) & 0x1EB) == 0))
  {
    v6 = (_QWORD *)(v0 + *(int *)(v1 + 28));
    if (*v6 == 0x6F6C4072656E776FLL && v6[1] == 0xEF74736F686C6163)
    {
      sub_1CCA0BEEC(v0, (uint64_t)v4, type metadata accessor for FMIPBeaconShare);
    }
    else
    {
      v8 = sub_1CCB642A0();
      sub_1CCA0BEEC(v0, (uint64_t)v4, type metadata accessor for FMIPBeaconShare);
      if ((v8 & 1) == 0)
      {
        v9 = &v4[*(int *)(v1 + 24)];
        if (*(_QWORD *)v9 != 0x6F6C4072656E776FLL || *((_QWORD *)v9 + 1) != 0xEF74736F686C6163)
        {
          v11 = sub_1CCB642A0();
LABEL_16:
          sub_1CCA0BF30((uint64_t)v4, type metadata accessor for FMIPBeaconShare);
          return v11 & 1;
        }
      }
    }
    v11 = 1;
    goto LABEL_16;
  }
  return v11 & 1;
}

uint64_t FMIPBeaconShare.otherShareeShouldBeHidden.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  char v8;
  char *v9;
  char v11;
  char v12;
  uint64_t v14;

  v1 = type metadata accessor for FMIPBeaconShare(0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v0 + *(int *)(v2 + 32));
  if ((v5 & 0x8000000000000000) == 0 || (v12 = 0, ((1 << __ROR8__(v5, 3)) & 0x1EB) == 0))
  {
    v6 = (_QWORD *)(v0 + *(int *)(v1 + 28));
    if (*v6 == 0x6F6C4072656E776FLL && v6[1] == 0xEF74736F686C6163)
    {
      sub_1CCA0BEEC(v0, (uint64_t)v4, type metadata accessor for FMIPBeaconShare);
    }
    else
    {
      v8 = sub_1CCB642A0();
      sub_1CCA0BEEC(v0, (uint64_t)v4, type metadata accessor for FMIPBeaconShare);
      if ((v8 & 1) == 0)
      {
        v9 = &v4[*(int *)(v1 + 24)];
        if (*(_QWORD *)v9 != 0x6F6C4072656E776FLL || *((_QWORD *)v9 + 1) != 0xEF74736F686C6163)
        {
          v11 = sub_1CCB642A0();
          sub_1CCA0BF30((uint64_t)v4, type metadata accessor for FMIPBeaconShare);
          v12 = v11 ^ 1;
          return v12 & 1;
        }
      }
    }
    sub_1CCA0BF30((uint64_t)v4, type metadata accessor for FMIPBeaconShare);
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t FMIPBeaconShare.hash(into:)(uint64_t a1)
{
  sub_1CCB63604();
  sub_1CC9C23B4(&qword_1ED8A7140, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CCB63940();
  type metadata accessor for FMIPBeaconShare(0);
  sub_1CCB63940();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  FMIPBeaconShareState.hash(into:)(a1);
  sub_1CCB635B0();
  sub_1CC9C23B4(&qword_1EF9DF088, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  return sub_1CCB63940();
}

uint64_t FMIPBeaconShare.hashValue.getter()
{
  _BYTE v1[72];

  sub_1CCB6433C();
  sub_1CCB63604();
  sub_1CC9C23B4(&qword_1ED8A7140, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CCB63940();
  type metadata accessor for FMIPBeaconShare(0);
  sub_1CCB63940();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  FMIPBeaconShareState.hash(into:)((uint64_t)v1);
  sub_1CCB635B0();
  sub_1CC9C23B4(&qword_1EF9DF088, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  sub_1CCB63940();
  return sub_1CCB64384();
}

uint64_t sub_1CCA25F0C(uint64_t a1)
{
  sub_1CCB63604();
  sub_1CC9C23B4(&qword_1ED8A7140, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CCB63940();
  sub_1CCB63940();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  FMIPBeaconShareState.hash(into:)(a1);
  sub_1CCB635B0();
  sub_1CC9C23B4(&qword_1EF9DF088, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  return sub_1CCB63940();
}

uint64_t sub_1CCA26054()
{
  _BYTE v1[72];

  sub_1CCB6433C();
  sub_1CCB63604();
  sub_1CC9C23B4(&qword_1ED8A7140, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CCB63940();
  sub_1CCB63940();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  FMIPBeaconShareState.hash(into:)((uint64_t)v1);
  sub_1CCB635B0();
  sub_1CC9C23B4(&qword_1EF9DF088, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  sub_1CCB63940();
  return sub_1CCB64384();
}

uint64_t sub_1CCA261AC()
{
  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCB63604();
  sub_1CC9C23B4((unint64_t *)&qword_1EF9DF3D0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  type metadata accessor for FMIPBeaconShareStateOverride(0);
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB64060();
  sub_1CCB63A24();
  return 0;
}

uint64_t sub_1CCA26328()
{
  _BYTE v1[72];

  sub_1CCB6433C();
  sub_1CCB63604();
  sub_1CC9C23B4(&qword_1ED8A7140, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CCB63940();
  sub_1CCB63940();
  FMIPBeaconShareState.hash(into:)((uint64_t)v1);
  return sub_1CCB64384();
}

uint64_t sub_1CCA263E4(uint64_t a1)
{
  sub_1CCB63604();
  sub_1CC9C23B4(&qword_1ED8A7140, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CCB63940();
  sub_1CCB63940();
  return FMIPBeaconShareState.hash(into:)(a1);
}

uint64_t sub_1CCA26490()
{
  _BYTE v1[72];

  sub_1CCB6433C();
  sub_1CCB63604();
  sub_1CC9C23B4(&qword_1ED8A7140, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_1CCB63940();
  sub_1CCB63940();
  FMIPBeaconShareState.hash(into:)((uint64_t)v1);
  return sub_1CCB64384();
}

uint64_t sub_1CCA26548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v10;
  unint64_t v11;

  if ((sub_1CCB635E0() & 1) != 0 && (sub_1CCB635E0() & 1) != 0)
  {
    v6 = *(int *)(a3 + 24);
    v7 = *(_QWORD *)(a1 + v6);
    v10 = *(_QWORD *)(a2 + v6);
    v11 = v7;
    v8 = static FMIPBeaconShareState.== infix(_:_:)(&v11, &v10);
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_1CCA265C4()
{
  _QWORD *v0;
  const void *v1;
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v15;

  v1 = (const void *)v0[33];
  v2 = (void *)v0[34];
  swift_willThrow();
  _Block_release(v1);
  v3 = v2;
  v4 = v2;
  v5 = sub_1CCB637D8();
  v6 = sub_1CCB63D30();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (void *)v0[34];
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v15 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue();
    v10 = sub_1CCB64300();
    v0[30] = sub_1CCA0CB60(v10, v11, &v15);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPBeaconSharingController: Failed to start sharing controller: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v9, -1, -1);
    MEMORY[0x1D17B214C](v8, -1, -1);

  }
  else
  {
    v12 = (void *)v0[34];

  }
  *(_BYTE *)(v0[31] + 120) = 0;
  v13 = (_QWORD *)swift_task_alloc();
  v0[35] = v13;
  *v13 = v0;
  v13[1] = sub_1CCA21344;
  v13[16] = v0[31];
  return swift_task_switch();
}

uint64_t sub_1CCA267C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_1CCA267D8()
{
  uint64_t v0;

  sub_1CCA21404(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CCA26808()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 152) = v0;
  return swift_task_switch();
}

uint64_t sub_1CCA26820()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  if (qword_1ED8A8D88 != -1)
    swift_once();
  v1 = sub_1CCB637FC();
  v0[20] = sub_1CCA16C20(v1, (uint64_t)qword_1ED8AD770);
  v2 = sub_1CCB637D8();
  v3 = sub_1CCB63D48();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1CC9BF000, v2, v3, "FMIPBeaconSharingController: Stoppping...", v4, 2u);
    MEMORY[0x1D17B214C](v4, -1, -1);
  }
  v5 = v0[19];

  v6 = *(void **)(v5 + 112);
  v0[7] = v0 + 22;
  v0[2] = v0;
  v0[3] = sub_1CCA26970;
  v7 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v8 = v0 + 10;
  v8[1] = 0x40000000;
  v8[2] = sub_1CCA1FA68;
  v8[3] = &unk_1E88EFA18;
  v8[4] = v7;
  objc_msgSend(v6, sel_stopRefreshingSharesWithCompletion_, v8);
  return swift_continuation_await();
}

uint64_t sub_1CCA26970()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 168) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1CCA269D0()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  v1 = sub_1CCB637D8();
  v2 = sub_1CCB63D48();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1CC9BF000, v1, v2, "FMIPBeaconSharingController: Successfully stopped sharing controller", v3, 2u);
    MEMORY[0x1D17B214C](v3, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CCA26A70()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v13;

  v1 = *(void **)(v0 + 168);
  swift_willThrow();
  v2 = v1;
  v3 = v1;
  v4 = sub_1CCB637D8();
  v5 = sub_1CCB63D30();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 168);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue();
    v9 = sub_1CCB64300();
    *(_QWORD *)(v0 + 80) = sub_1CCA0CB60(v9, v10, &v13);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v4, v5, "FMIPBeaconSharingController: Failed to stop sharing controller: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v8, -1, -1);
    MEMORY[0x1D17B214C](v7, -1, -1);

  }
  else
  {
    v11 = *(void **)(v0 + 168);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CCA26C24()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return swift_task_switch();
}

uint64_t sub_1CCA26C3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  id v51;
  int *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  int64_t v74;
  unint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t ObjectType;
  uint64_t v107;
  size_t v108;
  NSObject *v109;
  os_log_type_t v110;
  _BOOL4 v111;
  uint8_t *v112;
  uint64_t result;
  _QWORD v114[2];
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t i;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130[5];
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;

  v123 = type metadata accessor for FMIPBeaconShare(0);
  v1 = MEMORY[0x1E0C80A78](v123);
  v122 = (uint64_t)v114 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = MEMORY[0x1E0C80A78](v1);
  v121 = (uint64_t)v114 - v4;
  MEMORY[0x1E0C80A78](v3);
  v120 = (char *)v114 - v5;
  v6 = sub_1CCB63604();
  v126 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v119 = (char *)v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v114 - v9;
  i = type metadata accessor for FMIPBeaconShareStateOverride(0);
  v11 = *(_QWORD *)(i - 8);
  MEMORY[0x1E0C80A78](i);
  v13 = (char *)v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = MEMORY[0x1E0DEE9E8];
  swift_beginAccess();
  v14 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRetain();
  v128 = (_QWORD *)sub_1CCAC4AC4(MEMORY[0x1E0DEE9D8]);
  v15 = *(_QWORD *)(v14 + 16);
  v127 = v6;
  v115 = v0;
  if (!v15)
    goto LABEL_16;
  v16 = v14 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  v124 = *(_QWORD *)(v11 + 72);
  v118 = v14;
  swift_bridgeObjectRetain();
  v17 = v126;
  while (1)
  {
    sub_1CCA0BEEC(v16, (uint64_t)v13, type metadata accessor for FMIPBeaconShareStateOverride);
    v20 = i;
    v21 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    v21(v10, &v13[*(int *)(i + 20)], v6);
    v22 = (uint64_t)v13;
    v23 = *(_QWORD *)&v13[*(int *)(v20 + 24)];
    sub_1CCA24CA8(v23);
    v24 = v128;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v132 = v24;
    v26 = (uint64_t)v10;
    v28 = sub_1CCAC8D64((uint64_t)v10);
    v29 = v24[2];
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      break;
    v32 = v27;
    if (v24[3] >= v31)
    {
      v17 = v126;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1CCAEBFE8();
        v17 = v126;
      }
      v6 = v127;
    }
    else
    {
      sub_1CCAE7E68(v31, isUniquelyReferenced_nonNull_native);
      v33 = sub_1CCAC8D64(v26);
      if ((v32 & 1) != (v34 & 1))
      {
        result = sub_1CCB642DC();
        __break(1u);
        return result;
      }
      v28 = v33;
      v6 = v127;
      v17 = v126;
    }
    v128 = v132;
    if ((v32 & 1) != 0)
    {
      v18 = v132[7];
      v19 = *(_QWORD *)(v18 + 8 * v28);
      *(_QWORD *)(v18 + 8 * v28) = v23;
      sub_1CCA25030(v19);
      v10 = (char *)v26;
    }
    else
    {
      v132[(v28 >> 6) + 8] |= 1 << v28;
      v10 = (char *)v26;
      v21((char *)(v128[6] + *(_QWORD *)(v17 + 72) * v28), (char *)v26, v6);
      v35 = v128;
      *(_QWORD *)(v128[7] + 8 * v28) = v23;
      v36 = v35[2];
      v37 = __OFADD__(v36, 1);
      v38 = v36 + 1;
      if (v37)
        goto LABEL_71;
      v35[2] = v38;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v6);
    v13 = (char *)v22;
    sub_1CCA0BF30(v22, type metadata accessor for FMIPBeaconShareStateOverride);
    v16 += v124;
    if (!--v15)
    {
      swift_bridgeObjectRelease();
      v0 = v115;
LABEL_16:
      swift_bridgeObjectRelease();
      v39 = *(_QWORD *)(v0 + 128);
      if ((v39 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        sub_1CCB63EC8();
        sub_1CC9C30A8(0, &qword_1EF9DF450);
        sub_1CC9F74C8((unint64_t *)&unk_1EF9DF458, &qword_1EF9DF450);
        sub_1CCB63C94();
        v39 = (uint64_t)v132;
        v124 = v133;
        v40 = v134;
        v41 = v135;
        v42 = v136;
      }
      else
      {
        v43 = -1 << *(_BYTE *)(v39 + 32);
        v44 = *(_QWORD *)(v39 + 56);
        v124 = v39 + 56;
        v40 = ~v43;
        v45 = -v43;
        if (v45 < 64)
          v46 = ~(-1 << v45);
        else
          v46 = -1;
        v42 = v46 & v44;
        swift_bridgeObjectRetain();
        v41 = 0;
      }
      v117 = v39 & 0x7FFFFFFFFFFFFFFFLL;
      v114[1] = v40;
      v118 = (unint64_t)(v40 + 64) >> 6;
      v116 = MEMORY[0x1E0DEE9B0] + 8;
      for (i = v39; ; v39 = i)
      {
        if (v39 < 0)
        {
          v72 = sub_1CCB63F28();
          v68 = v127;
          if (!v72)
            goto LABEL_51;
          v129 = v72;
          sub_1CC9C30A8(0, &qword_1EF9DF450);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          v73 = (id)v130[0];
          swift_unknownObjectRelease();
          v71 = v41;
          v69 = v42;
          if (!v73)
            goto LABEL_51;
        }
        else
        {
          v68 = v127;
          if (v42)
          {
            v69 = (v42 - 1) & v42;
            v70 = __clz(__rbit64(v42)) | (v41 << 6);
            v71 = v41;
          }
          else
          {
            v74 = v41 + 1;
            if (__OFADD__(v41, 1))
              goto LABEL_72;
            if (v74 >= v118)
              goto LABEL_51;
            v75 = *(_QWORD *)(v124 + 8 * v74);
            v71 = v41 + 1;
            if (!v75)
            {
              v71 = v41 + 2;
              if (v41 + 2 >= v118)
                goto LABEL_51;
              v75 = *(_QWORD *)(v124 + 8 * v71);
              if (!v75)
              {
                v71 = v41 + 3;
                if (v41 + 3 >= v118)
                  goto LABEL_51;
                v75 = *(_QWORD *)(v124 + 8 * v71);
                if (!v75)
                {
                  v71 = v41 + 4;
                  if (v41 + 4 >= v118)
                    goto LABEL_51;
                  v75 = *(_QWORD *)(v124 + 8 * v71);
                  if (!v75)
                  {
                    v76 = v41 + 5;
                    while (v118 != v76)
                    {
                      v75 = *(_QWORD *)(v124 + 8 * v76++);
                      if (v75)
                      {
                        v71 = v76 - 1;
                        goto LABEL_44;
                      }
                    }
LABEL_51:
                    sub_1CCA2F54C();
                    swift_bridgeObjectRelease();
                    v82 = v131;
                    v83 = *(_QWORD *)(v115 + 144);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    v84 = sub_1CCAFEC90(v82, v83);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v84 & 1) == 0)
                    {
                      if (qword_1ED8A8D88 == -1)
                        goto LABEL_53;
                      goto LABEL_73;
                    }
                    return swift_bridgeObjectRelease();
                  }
                }
              }
            }
LABEL_44:
            v69 = (v75 - 1) & v75;
            v70 = __clz(__rbit64(v75)) + (v71 << 6);
          }
          v73 = *(id *)(*(_QWORD *)(v39 + 48) + 8 * v70);
          if (!v73)
            goto LABEL_51;
        }
        v77 = objc_msgSend(v73, sel_identifier);
        v78 = (uint64_t)v119;
        sub_1CCB635EC();

        if (v128[2] && (v79 = sub_1CCAC8D64(v78), (v80 & 1) != 0))
        {
          v47 = *(_QWORD *)(v128[7] + 8 * v79);
          sub_1CCA24CA8(v47);
          (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v78, v68);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v78, v68);
          v81 = (char *)objc_msgSend(v73, sel_state);
          if ((unint64_t)(v81 - 1) <= 6)
            v47 = qword_1CCB669E0[(_QWORD)(v81 - 1)];
          else
            v47 = 0x8000000000000000;
        }
        v48 = v73;
        sub_1CCA24CA8(v47);
        v49 = objc_msgSend(v48, sel_identifier);
        v50 = (uint64_t)v120;
        sub_1CCB635EC();

        v51 = objc_msgSend(v48, sel_beaconIdentifier);
        v52 = (int *)v123;
        sub_1CCB635EC();

        v53 = objc_msgSend(v48, sel_owner);
        v54 = objc_msgSend(v53, sel_destination);

        v55 = sub_1CCB63988();
        v57 = v56;

        v58 = (uint64_t *)(v50 + v52[6]);
        *v58 = v55;
        v58[1] = v57;
        v59 = objc_msgSend(v48, sel_sharee);
        v60 = objc_msgSend(v59, sel_destination);

        v61 = sub_1CCB63988();
        v63 = v62;

        v64 = (uint64_t *)(v50 + v52[7]);
        *v64 = v61;
        v64[1] = v63;
        *(_QWORD *)(v50 + v52[8]) = v47;
        v65 = objc_msgSend(v48, sel_creationDate);
        sub_1CCB63580();

        v66 = v122;
        sub_1CCA0BEEC(v50, v122, type metadata accessor for FMIPBeaconShare);
        v67 = v121;
        sub_1CCA719BC(v121, v66);
        sub_1CCA25030(v47);

        sub_1CCA0BF30(v67, type metadata accessor for FMIPBeaconShare);
        sub_1CCA0BF30(v50, type metadata accessor for FMIPBeaconShare);
        v41 = v71;
        v42 = v69;
      }
    }
  }
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  swift_once();
LABEL_53:
  v85 = sub_1CCB637FC();
  v128 = (_QWORD *)sub_1CCA16C20(v85, (uint64_t)qword_1ED8AD770);
  v86 = sub_1CCB637D8();
  v87 = sub_1CCB63D48();
  if (os_log_type_enabled(v86, v87))
  {
    v88 = swift_slowAlloc();
    v127 = v85;
    v89 = (uint8_t *)v88;
    v90 = swift_slowAlloc();
    v130[0] = v90;
    *(_DWORD *)v89 = 136315138;
    swift_beginAccess();
    sub_1CC9C23B4(&qword_1EF9DF468, 255, type metadata accessor for FMIPBeaconShare, (uint64_t)&protocol conformance descriptor for FMIPBeaconShare);
    swift_bridgeObjectRetain();
    v91 = sub_1CCB63C4C();
    v93 = v92;
    swift_bridgeObjectRelease();
    v129 = sub_1CCA0CB60(v91, v93, v130);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v86, v87, "FMIPBeaconSharingController: Did calculate shares update: %s", v89, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v90, -1, -1);
    v94 = v89;
    v85 = v127;
    MEMORY[0x1D17B214C](v94, -1, -1);
  }

  v95 = sub_1CCB631E4();
  v130[3] = v95;
  v130[4] = sub_1CC9C23B4(&qword_1ED8A8B00, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
  v96 = sub_1CCA01CC0(v130);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v95 - 8) + 104))(v96, *MEMORY[0x1E0D21240], v95);
  LOBYTE(v95) = MEMORY[0x1D17B0748](v130);
  sub_1CCA01CA0((uint64_t)v130);
  if ((v95 & 1) != 0)
  {
    v97 = v115;
    v98 = MEMORY[0x1D17B2218](v115 + 152);
    if (v98)
    {
      v99 = v98;
      swift_beginAccess();
      v100 = qword_1ED8AA630;
      swift_bridgeObjectRetain();
      if (v100 != -1)
        swift_once();
      sub_1CCA16C20(v85, (uint64_t)qword_1ED8AD7F8);
      v101 = sub_1CCB637D8();
      v102 = sub_1CCB63D48();
      if (os_log_type_enabled(v101, v102))
      {
        v103 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v103 = 0;
        _os_log_impl(&dword_1CC9BF000, v101, v102, "FMIPManager: beaconSharingController didUpdateShares", v103, 2u);
        MEMORY[0x1D17B214C](v103, -1, -1);
      }

      v104 = v99 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
      swift_beginAccess();
      if (MEMORY[0x1D17B2218](v104))
      {
        v105 = *(_QWORD *)(v104 + 8);
        ObjectType = swift_getObjectType();
        v107 = swift_bridgeObjectRetain();
        v108 = sub_1CCAA6CE0(v107);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, size_t, uint64_t, uint64_t))(v105 + 184))(v99, v108, ObjectType, v105);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_unknownObjectRelease();
    }
  }
  else
  {
    v109 = sub_1CCB637D8();
    v110 = sub_1CCB63D48();
    v111 = os_log_type_enabled(v109, v110);
    v97 = v115;
    if (v111)
    {
      v112 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v112 = 0;
      _os_log_impl(&dword_1CC9BF000, v109, v110, "FMIPBeaconSharingController: Not forwarding share updates due to FF disabled.", v112, 2u);
      MEMORY[0x1D17B214C](v112, -1, -1);
    }

  }
  swift_beginAccess();
  *(_QWORD *)(v97 + 144) = v131;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA27A38@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33[3];

  v4 = v3;
  v8 = type metadata accessor for FMIPBeaconShareStateOverride(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v33[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v33[-1] - v14;
  v16 = *a2;
  v17 = a3 + *(int *)(v13 + 20);
  v18 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v17, a1, v18);
  sub_1CCA24CA8(v16);
  sub_1CCB635F8();
  *(_QWORD *)(a3 + *(int *)(v8 + 24)) = v16;
  sub_1CCA0BEEC(a3, (uint64_t)v15, type metadata accessor for FMIPBeaconShareStateOverride);
  v19 = (unint64_t *)(v4 + 136);
  swift_beginAccess();
  v20 = *(_QWORD *)(v4 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 136) = v20;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v20 = sub_1CCAC997C(0, *(_QWORD *)(v20 + 16) + 1, 1, v20);
    *v19 = v20;
  }
  v23 = *(_QWORD *)(v20 + 16);
  v22 = *(_QWORD *)(v20 + 24);
  if (v23 >= v22 >> 1)
  {
    v20 = sub_1CCAC997C(v22 > 1, v23 + 1, 1, v20);
    *v19 = v20;
  }
  *(_QWORD *)(v20 + 16) = v23 + 1;
  sub_1CC9FED60((uint64_t)v15, v20+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v23, type metadata accessor for FMIPBeaconShareStateOverride);
  swift_endAccess();
  if (qword_1ED8A8D88 != -1)
    swift_once();
  v24 = sub_1CCB637FC();
  sub_1CCA16C20(v24, (uint64_t)qword_1ED8AD770);
  sub_1CCA0BEEC(a3, (uint64_t)v12, type metadata accessor for FMIPBeaconShareStateOverride);
  v25 = sub_1CCB637D8();
  v26 = sub_1CCB63D48();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    v33[0] = v28;
    *(_DWORD *)v27 = 136315138;
    v29 = sub_1CCA261AC();
    v32 = sub_1CCA0CB60(v29, v30, v33);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA0BF30((uint64_t)v12, type metadata accessor for FMIPBeaconShareStateOverride);
    _os_log_impl(&dword_1CC9BF000, v25, v26, "FMIPBeaconSharingController: Added beacon share state override: %s", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v28, -1, -1);
    MEMORY[0x1D17B214C](v27, -1, -1);
  }
  else
  {
    sub_1CCA0BF30((uint64_t)v12, type metadata accessor for FMIPBeaconShareStateOverride);
  }

  return sub_1CCA26C3C();
}

uint64_t sub_1CCA27D68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  _QWORD v16[3];
  uint64_t v17[3];

  v3 = type metadata accessor for FMIPBeaconShareStateOverride(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8A8D88 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD770);
  sub_1CCA0BEEC(a1, (uint64_t)v5, type metadata accessor for FMIPBeaconShareStateOverride);
  v7 = sub_1CCB637D8();
  v8 = sub_1CCB63D48();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v17[0] = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = sub_1CCA261AC();
    v16[1] = sub_1CCA0CB60(v11, v12, v17);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA0BF30((uint64_t)v5, type metadata accessor for FMIPBeaconShareStateOverride);
    _os_log_impl(&dword_1CC9BF000, v7, v8, "FMIPBeaconSharingController: Removing beacon share state override: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v10, -1, -1);
    MEMORY[0x1D17B214C](v9, -1, -1);
  }
  else
  {
    sub_1CCA0BF30((uint64_t)v5, type metadata accessor for FMIPBeaconShareStateOverride);
  }

  MEMORY[0x1E0C80A78](v13);
  v16[-2] = a1;
  swift_beginAccess();
  result = sub_1CCA2CF08((uint64_t (*)(unint64_t))sub_1CCA2F344);
  v15 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 16);
  if (v15 < result)
  {
    __break(1u);
  }
  else
  {
    sub_1CCA2F360(result, v15);
    swift_endAccess();
    return sub_1CCA26C3C();
  }
  return result;
}

uint64_t sub_1CCA27FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v9;
  unint64_t v10;

  if ((sub_1CCB635E0() & 1) != 0
    && (v4 = type metadata accessor for FMIPBeaconShareStateOverride(0), (sub_1CCB635E0() & 1) != 0))
  {
    v5 = *(int *)(v4 + 24);
    v6 = *(_QWORD *)(a1 + v5);
    v9 = *(_QWORD *)(a2 + v5);
    v10 = v6;
    v7 = static FMIPBeaconShareState.== infix(_:_:)(&v10, &v9);
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

uint64_t sub_1CCA28054(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1CCA28070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  char *v6;
  unint64_t v7;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 128);
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v1;
  swift_bridgeObjectRetain();
  sub_1CCAE08A8(sub_1CCA2F328, v3, v2);
  v5 = v4;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v5 && (v6 = (char *)objc_msgSend(v5, sel_state), v5, (unint64_t)(v6 - 1) <= 6))
    v7 = qword_1CCB669E0[(_QWORD)(v6 - 1)];
  else
    v7 = 0x8000000000000000;
  **(_QWORD **)(v0 + 16) = v7;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CCA28138(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  char v7;
  uint64_t v9;

  v2 = sub_1CCB63604();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(*a1, sel_identifier);
  sub_1CCB635EC();

  v7 = sub_1CCB635E0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7 & 1;
}

uint64_t sub_1CCA281F8(uint64_t a1, uint64_t (*a2)(uint64_t *, _QWORD), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  type metadata accessor for FMIPAcceptShareAction(0);
  v5 = swift_dynamicCastClass();
  if (v5)
  {
    v6 = v5;
    swift_retain();
    sub_1CCA29658(v6, (uint64_t)a2, a3);
    return swift_release();
  }
  type metadata accessor for FMIPDeclineShareAction(0);
  v7 = swift_dynamicCastClass();
  if (v7)
  {
    v8 = v7;
    swift_retain();
    sub_1CCA29A14(v8, (uint64_t)a2, a3);
    return swift_release();
  }
  type metadata accessor for FMIPWithdrawShareAction(0);
  v9 = swift_dynamicCastClass();
  if (v9)
  {
    v10 = v9;
    swift_retain();
    sub_1CCA293C8(v10, (uint64_t)a2, a3);
    return swift_release();
  }
  if (qword_1ED8A8D88 != -1)
    swift_once();
  v12 = sub_1CCB637FC();
  sub_1CCA16C20(v12, (uint64_t)qword_1ED8AD770);
  swift_retain_n();
  v13 = sub_1CCB637D8();
  v14 = sub_1CCB63D30();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v20 = v16;
    *(_DWORD *)v15 = 136315138;
    swift_retain();
    v17 = sub_1CCB2892C();
    v19 = v18;
    swift_release();
    sub_1CCA0CB60(v17, v19, &v20);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1CC9BF000, v13, v14, "FMIPBeaconSharingController: Unknown action received: %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v16, -1, -1);
    MEMORY[0x1D17B214C](v15, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  LOBYTE(v20) = 4;
  return a2(&v20, 0);
}

uint64_t sub_1CCA28498(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  void *v55;
  void *v56;
  void *v57;
  _QWORD *v58;
  void (*v59)(_QWORD, _QWORD, _QWORD);
  void *v60;
  _QWORD v61[2];
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(_QWORD, _QWORD, _QWORD);
  uint64_t v66;
  uint64_t aBlock[6];
  uint64_t v68;

  v6 = sub_1CCA14E90((uint64_t *)&unk_1EF9DF580);
  MEMORY[0x1E0C80A78](v6);
  v63 = (uint64_t)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB63604();
  v66 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v62 = (char *)v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore19FMIPShareItemAction_handles);
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  v15 = *(_QWORD *)(v14 + 16);
  v64 = v12;
  v65 = a2;
  if (v15)
  {
    v61[0] = a1;
    v16 = a3;
    v17 = (void *)objc_opt_self();
    swift_bridgeObjectRetain_n();
    v18 = v14 + 40;
    do
    {
      swift_bridgeObjectRetain();
      v19 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      v20 = objc_msgSend(v17, sel_handleWithString_, v19);

      if (v20)
      {
        MEMORY[0x1D17B1078]();
        if (*(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8)
                                                                                + 0x18) >> 1)
          sub_1CCB63B68();
        sub_1CCB63BA4();
        sub_1CCB63B50();
      }
      v18 += 16;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    v21 = aBlock[0];
    a3 = v16;
    v11 = v64;
    a2 = v65;
    a1 = v61[0];
  }
  else
  {
    swift_bridgeObjectRetain();
    v21 = MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  v22 = sub_1CCA7A718(v21);
  swift_bridgeObjectRelease();
  v23 = v66;
  if ((v22 & 0xC000000000000001) != 0)
    v24 = sub_1CCB63EF8();
  else
    v24 = *(_QWORD *)(v22 + 16);
  if (!v24)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v25 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item + 352);
  v26 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item + 360);
  sub_1CCB635BC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v11) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1CC9C3E84((uint64_t)v10, &qword_1ED8A8EF8);
LABEL_17:
    if (qword_1ED8A8D88 != -1)
      swift_once();
    v27 = sub_1CCB637FC();
    sub_1CCA16C20(v27, (uint64_t)qword_1ED8AD770);
    swift_retain_n();
    v28 = sub_1CCB637D8();
    v29 = sub_1CCB63D48();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc();
      v66 = swift_slowAlloc();
      aBlock[0] = v66;
      *(_DWORD *)v30 = 136315394;
      v31 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item + 352);
      v32 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item + 360);
      swift_bridgeObjectRetain();
      v68 = sub_1CCA0CB60(v31, v32, aBlock);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2080;
      v33 = swift_bridgeObjectRetain();
      v34 = MEMORY[0x1D17B10B4](v33, MEMORY[0x1E0DEA968]);
      v36 = v35;
      swift_bridgeObjectRelease();
      v68 = sub_1CCA0CB60(v34, v36, aBlock);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v28, v29, "FMIPBeaconSharingController: Failed to run a share action for item: %s to %s", (uint8_t *)v30, 0x16u);
      v37 = v66;
      swift_arrayDestroy();
      a2 = v65;
      MEMORY[0x1D17B214C](v37, -1, -1);
      MEMORY[0x1D17B214C](v30, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v38 = v63;
    LOBYTE(aBlock[0]) = 4;
    sub_1CCA0BEEC(a1 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, v63, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v39 = type metadata accessor for FMIPItem();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 0, 1, v39);
    v40 = sub_1CCAC4C58(MEMORY[0x1E0DEE9D8]);
    a2(aBlock, v38, v40);
    swift_bridgeObjectRelease();
    return sub_1CC9C3E84(v38, (uint64_t *)&unk_1EF9DF580);
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v62, v10, v11);
  if (qword_1ED8A8D88 != -1)
    swift_once();
  v63 = a3;
  v42 = sub_1CCB637FC();
  sub_1CCA16C20(v42, (uint64_t)qword_1ED8AD770);
  swift_retain_n();
  v43 = sub_1CCB637D8();
  v44 = sub_1CCB63D48();
  v45 = v44;
  if (os_log_type_enabled(v43, v44))
  {
    v46 = swift_slowAlloc();
    LODWORD(v61[0]) = v45;
    v47 = v46;
    v48 = swift_slowAlloc();
    aBlock[0] = v48;
    *(_DWORD *)v47 = 136315394;
    swift_bridgeObjectRetain();
    v68 = sub_1CCA0CB60(v25, v26, aBlock);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    *(_WORD *)(v47 + 12) = 2080;
    v49 = swift_bridgeObjectRetain();
    v50 = MEMORY[0x1D17B10B4](v49, MEMORY[0x1E0DEA968]);
    v51 = a1;
    v53 = v52;
    swift_bridgeObjectRelease();
    v68 = sub_1CCA0CB60(v50, v53, aBlock);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v43, v61[0], "FMIPBeaconSharingController: Sending share action for item: %s to %s", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v48, -1, -1);
    MEMORY[0x1D17B214C](v47, -1, -1);

  }
  else
  {

    swift_release_n();
    v51 = a1;
  }
  v54 = v62;
  v55 = *(void **)(v61[1] + 112);
  v56 = (void *)sub_1CCB635D4();
  sub_1CC9C30A8(0, &qword_1EF9DF590);
  sub_1CC9F74C8((unint64_t *)&qword_1EF9DF598, &qword_1EF9DF590);
  v57 = (void *)sub_1CCB63C34();
  swift_bridgeObjectRelease();
  v58 = (_QWORD *)swift_allocObject();
  v59 = v65;
  v58[2] = v51;
  v58[3] = v59;
  v58[4] = v63;
  aBlock[4] = (uint64_t)sub_1CCA2F8EC;
  aBlock[5] = (uint64_t)v58;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA29308;
  aBlock[3] = (uint64_t)&unk_1E88EFC28;
  v60 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v55, sel_share_recipients_completion_, v56, v57, v60);
  _Block_release(v60);

  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v54, v64);
}

uint64_t sub_1CCA28CE0(int a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  void (*v36)(_QWORD, _QWORD, _QWORD);
  uint64_t v37;
  uint64_t v38;

  v8 = sub_1CCA14E90((uint64_t *)&unk_1EF9DF580);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8A8D88 != -1)
    swift_once();
  v11 = sub_1CCB637FC();
  sub_1CCA16C20(v11, (uint64_t)qword_1ED8AD770);
  swift_retain_n();
  v12 = sub_1CCB637D8();
  v13 = sub_1CCB63D48();
  v14 = v13;
  if (os_log_type_enabled(v12, v13))
  {
    v15 = swift_slowAlloc();
    v33 = v14;
    v16 = v15;
    v32 = swift_slowAlloc();
    v38 = v32;
    *(_DWORD *)v16 = 136315650;
    v35 = a1;
    v36 = a4;
    v34 = a2;
    v18 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item + 352);
    v17 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item + 360);
    swift_bridgeObjectRetain();
    v37 = sub_1CCA0CB60(v18, v17, &v38);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    v19 = swift_bridgeObjectRetain();
    v20 = MEMORY[0x1D17B10B4](v19, MEMORY[0x1E0DEA968]);
    v22 = v21;
    a2 = v34;
    swift_bridgeObjectRelease();
    v37 = sub_1CCA0CB60(v20, v22, &v38);
    a4 = v36;
    LOBYTE(a1) = v35;
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 1024;
    LODWORD(v37) = a1 & 1;
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v12, (os_log_type_t)v33, "FMIPBeaconSharingController: Share action for item: %s sent to %s: %{BOOL}d", (uint8_t *)v16, 0x1Cu);
    v23 = v32;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v23, -1, -1);
    MEMORY[0x1D17B214C](v16, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  sub_1CCA290B8(a2);
  if (*(_QWORD *)(v24 + 16))
  {
    sub_1CCA14E90(&qword_1EF9DF5A0);
    v25 = sub_1CCB640B4();
  }
  else
  {
    v25 = MEMORY[0x1E0DEE9E0];
  }
  v38 = v25;
  v26 = (_QWORD *)swift_bridgeObjectRetain();
  sub_1CCA2D210(v26, 1, &v38);
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
    v27 = 2;
  else
    v27 = 4;
  v28 = v38;
  LOBYTE(v38) = v27;
  sub_1CCA0BEEC(a3 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v29 = type metadata accessor for FMIPItem();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v10, 0, 1, v29);
  a4(&v38, v10, v28);
  swift_release();
  return sub_1CC9C3E84((uint64_t)v10, (uint64_t *)&unk_1EF9DF580);
}

void sub_1CCA290B8(uint64_t a1)
{
  int64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v29 = MEMORY[0x1E0DEE9D8];
    sub_1CCA63870(0, v1, 0);
    v4 = sub_1CCB121A0(a1);
    v5 = 0;
    v6 = a1 + 64;
    v24 = v1;
    v25 = v3;
    v26 = a1 + 64;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
    {
      v9 = (unint64_t)v4 >> 6;
      if ((*(_QWORD *)(v6 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
        goto LABEL_23;
      if (*(_DWORD *)(a1 + 36) != v3)
        goto LABEL_24;
      v27 = v5;
      v10 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v4);
      v11 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v4);
      v12 = v10;
      v13 = objc_msgSend(v11, sel_destination);
      v28 = sub_1CCB63988();
      v15 = v14;

      v17 = *(_QWORD *)(v29 + 16);
      v16 = *(_QWORD *)(v29 + 24);
      if (v17 >= v16 >> 1)
        sub_1CCA63870(v16 > 1, v17 + 1, 1);
      *(_QWORD *)(v29 + 16) = v17 + 1;
      v18 = (_QWORD *)(v29 + 24 * v17);
      v18[4] = v28;
      v18[5] = v15;
      v18[6] = v10;
      v7 = 1 << *(_BYTE *)(a1 + 32);
      if (v4 >= v7)
        goto LABEL_25;
      v6 = a1 + 64;
      v19 = *(_QWORD *)(v26 + 8 * v9);
      if ((v19 & (1 << v4)) == 0)
        goto LABEL_26;
      v3 = v25;
      if (*(_DWORD *)(a1 + 36) != v25)
        goto LABEL_27;
      v20 = v19 & (-2 << (v4 & 0x3F));
      if (v20)
      {
        v7 = __clz(__rbit64(v20)) | v4 & 0xFFFFFFFFFFFFFFC0;
        v8 = v24;
      }
      else
      {
        v21 = v9 + 1;
        v22 = (unint64_t)(v7 + 63) >> 6;
        v8 = v24;
        if (v9 + 1 < v22)
        {
          v23 = *(_QWORD *)(v26 + 8 * v21);
          if (v23)
          {
LABEL_20:
            v7 = __clz(__rbit64(v23)) + (v21 << 6);
          }
          else
          {
            while (v22 - 2 != v9)
            {
              v23 = *(_QWORD *)(a1 + 80 + 8 * v9++);
              if (v23)
              {
                v21 = v9 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
      v5 = v27 + 1;
      v4 = v7;
      if (v27 + 1 == v8)
        return;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
}

uint64_t sub_1CCA29308(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v3 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  sub_1CC9C30A8(0, &qword_1EF9DF590);
  sub_1CCA14E90(&qword_1EF9DF470);
  sub_1CC9F74C8((unint64_t *)&qword_1EF9DF598, &qword_1EF9DF590);
  v4 = sub_1CCB638E0();
  swift_retain();
  v3(a2, v4);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA293C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CCA29A30(a1, a2, a3, "FMIPBeaconSharingController: Withdrawing share: %s", (uint64_t)&unk_1E88EF970, (uint64_t)&unk_1EF9DF438);
}

uint64_t sub_1CCA293E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[11] = a6;
  v7[12] = a7;
  v7[9] = a4;
  v7[10] = a5;
  v8 = *(_QWORD *)(type metadata accessor for FMIPBeaconShareStateOverride(0) - 8);
  v7[13] = v8;
  v7[14] = *(_QWORD *)(v8 + 64);
  v7[15] = swift_task_alloc();
  v9 = swift_task_alloc();
  v10 = OBJC_IVAR____TtC8FMIPCore21FMIPItemSharingAction_shareIdentifier;
  v7[16] = v9;
  v7[17] = v10;
  v7[8] = 0x8000000000000038;
  return swift_task_switch();
}

uint64_t sub_1CCA29474()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[9];
  sub_1CCA27A38(v0[10] + v0[17], v0 + 8, v0[16]);
  v0[18] = *(_QWORD *)(v1 + 112);
  return swift_task_switch();
}

uint64_t sub_1CCA294C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  id v12;

  v12 = *(id *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 72);
  v11 = *(_OWORD *)(v0 + 80);
  v6 = (void *)sub_1CCB635D4();
  sub_1CCA0BEEC(v1, v2, type metadata accessor for FMIPBeaconShareStateOverride);
  v7 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = v11;
  *(_QWORD *)(v8 + 32) = v3;
  *(_QWORD *)(v8 + 40) = v5;
  sub_1CC9FED60(v2, v8 + v7, type metadata accessor for FMIPBeaconShareStateOverride);
  *(_QWORD *)(v0 + 48) = sub_1CCA2F28C;
  *(_QWORD *)(v0 + 56) = v8;
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_1CC9C37C0;
  *(_QWORD *)(v0 + 40) = &unk_1E88EF9B0;
  v9 = _Block_copy((const void *)(v0 + 16));
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_removeShare_completion_, v6, v9);
  _Block_release(v9);

  sub_1CCA0BF30(v1, type metadata accessor for FMIPBeaconShareStateOverride);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CCA29640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_1CCA29658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CCA29A30(a1, a2, a3, "FMIPBeaconSharingController: Accepting share: %s", (uint64_t)&unk_1E88EF8D0, (uint64_t)&unk_1EF9DF418);
}

uint64_t sub_1CCA29674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  v10 = *(_QWORD *)(type metadata accessor for FMIPBeaconShareStateOverride(0) - 8);
  v7[14] = v10;
  v7[15] = *(_QWORD *)(v10 + 64);
  v7[16] = swift_task_alloc();
  v11 = swift_task_alloc();
  v12 = OBJC_IVAR____TtC8FMIPCore21FMIPItemSharingAction_shareIdentifier;
  v7[17] = v11;
  v7[18] = v12;
  v13 = a5 + v12;
  v14 = (_QWORD *)swift_task_alloc();
  v7[19] = v14;
  *v14 = v7;
  v14[1] = sub_1CCA29738;
  v14[3] = v13;
  v14[4] = a4;
  v14[2] = v7 + 8;
  return swift_task_switch();
}

uint64_t sub_1CCA29738()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CCA2978C()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;

  v1 = v0[8];
  v0[20] = v1;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  v0[9] = v2;
  sub_1CCA24CA8(v1);
  return swift_task_switch();
}

uint64_t sub_1CCA297F0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[10];
  sub_1CCA27A38(v0[11] + v0[18], v0 + 9, v0[17]);
  sub_1CCA25030(v0[9]);
  v0[21] = *(_QWORD *)(v1 + 112);
  return swift_task_switch();
}

uint64_t sub_1CCA29848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  void *v11;
  void *v12;
  unint64_t v13;

  v12 = *(void **)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 80);
  v10 = *(_OWORD *)(v0 + 88);
  v11 = (void *)sub_1CCB635D4();
  sub_1CCA0BEEC(v1, v2, type metadata accessor for FMIPBeaconShareStateOverride);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = v10;
  *(_QWORD *)(v7 + 32) = v4;
  *(_QWORD *)(v7 + 40) = v5;
  sub_1CC9FED60(v2, v7 + v6, type metadata accessor for FMIPBeaconShareStateOverride);
  *(_QWORD *)(v0 + 48) = sub_1CCA2F02C;
  *(_QWORD *)(v0 + 56) = v7;
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_1CC9C37C0;
  *(_QWORD *)(v0 + 40) = &unk_1E88EF910;
  v8 = _Block_copy((const void *)(v0 + 16));
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_acceptShare_completion_, v11, v8);
  _Block_release(v8);

  sub_1CCA25030(v13);
  sub_1CCA0BF30(v1, type metadata accessor for FMIPBeaconShareStateOverride);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CCA299CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_1CCA299E4()
{
  uint64_t v0;

  sub_1CCA27D68(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CCA29A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CCA29A30(a1, a2, a3, "FMIPBeaconSharingController: Declining share: %s", (uint64_t)&unk_1E88EF808, (uint64_t)&unk_1EF9DF3F8);
}

uint64_t sub_1CCA29A30(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a4;
  v9 = v6;
  v13 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8A8D88 != -1)
    swift_once();
  v16 = sub_1CCB637FC();
  sub_1CCA16C20(v16, (uint64_t)qword_1ED8AD770);
  swift_retain_n();
  v17 = sub_1CCB637D8();
  v18 = sub_1CCB63D48();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v31 = a2;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc();
    v32 = v6;
    v22 = v21;
    v30[1] = a5;
    *(_DWORD *)v20 = 136315138;
    v36 = v21;
    v33 = a6;
    v30[0] = v20 + 4;
    sub_1CCB63604();
    sub_1CC9C23B4((unint64_t *)&qword_1EF9DF3D0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v23 = sub_1CCB64240();
    v35 = sub_1CCA0CB60(v23, v24, &v36);
    a6 = v33;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1CC9BF000, v17, v18, v34, v20, 0xCu);
    swift_arrayDestroy();
    v25 = v22;
    v9 = v32;
    MEMORY[0x1D17B214C](v25, -1, -1);
    v26 = v20;
    a2 = v31;
    MEMORY[0x1D17B214C](v26, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v27 = sub_1CCB63C04();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v15, 1, 1, v27);
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = 0;
  v28[3] = 0;
  v28[4] = v9;
  v28[5] = a1;
  v28[6] = a2;
  v28[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1CCA96BE8((uint64_t)v15, a6, (uint64_t)v28);
  return swift_release();
}

uint64_t sub_1CCA29CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  v10 = *(_QWORD *)(type metadata accessor for FMIPBeaconShareStateOverride(0) - 8);
  v7[14] = v10;
  v7[15] = *(_QWORD *)(v10 + 64);
  v7[16] = swift_task_alloc();
  v11 = swift_task_alloc();
  v12 = OBJC_IVAR____TtC8FMIPCore21FMIPItemSharingAction_shareIdentifier;
  v7[17] = v11;
  v7[18] = v12;
  v13 = a5 + v12;
  v14 = (_QWORD *)swift_task_alloc();
  v7[19] = v14;
  *v14 = v7;
  v14[1] = sub_1CCA29DB8;
  v14[3] = v13;
  v14[4] = a4;
  v14[2] = v7 + 8;
  return swift_task_switch();
}

uint64_t sub_1CCA29DB8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CCA29E0C()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;

  v1 = v0[8];
  v0[20] = v1;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  v0[9] = v2 | 0x4000000000000000;
  sub_1CCA24CA8(v1);
  return swift_task_switch();
}

uint64_t sub_1CCA29E74()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[10];
  sub_1CCA27A38(v0[11] + v0[18], v0 + 9, v0[17]);
  sub_1CCA25030(v0[9]);
  v0[21] = *(_QWORD *)(v1 + 112);
  return swift_task_switch();
}

uint64_t sub_1CCA29ECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  void *v11;
  void *v12;
  unint64_t v13;

  v12 = *(void **)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 80);
  v10 = *(_OWORD *)(v0 + 88);
  v11 = (void *)sub_1CCB635D4();
  sub_1CCA0BEEC(v1, v2, type metadata accessor for FMIPBeaconShareStateOverride);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = v10;
  *(_QWORD *)(v7 + 32) = v4;
  *(_QWORD *)(v7 + 40) = v5;
  sub_1CC9FED60(v2, v7 + v6, type metadata accessor for FMIPBeaconShareStateOverride);
  *(_QWORD *)(v0 + 48) = sub_1CCA2EE40;
  *(_QWORD *)(v0 + 56) = v7;
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_1CC9C37C0;
  *(_QWORD *)(v0 + 40) = &unk_1E88EF870;
  v8 = _Block_copy((const void *)(v0 + 16));
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_declineShare_completion_, v11, v8);
  _Block_release(v8);

  sub_1CCA25030(v13);
  sub_1CCA0BF30(v1, type metadata accessor for FMIPBeaconShareStateOverride);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CCA2A050(int a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, const char *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  void (*v38)(_QWORD, _QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v42 = a8;
  v48 = a7;
  v44 = a2;
  v45 = a5;
  v43 = a1;
  v12 = a10;
  v13 = type metadata accessor for FMIPBeaconShareStateOverride(0);
  v46 = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(v46 + 64);
  MEMORY[0x1E0C80A78](v13);
  v47 = (uint64_t)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8A8D88 != -1)
    swift_once();
  v18 = sub_1CCB637FC();
  sub_1CCA16C20(v18, (uint64_t)qword_1ED8AD770);
  swift_retain_n();
  v19 = sub_1CCB637D8();
  v20 = sub_1CCB63D48();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v39 = a9;
    v22 = v21;
    v23 = swift_slowAlloc();
    v38 = a4;
    v24 = v23;
    v50 = v23;
    *(_DWORD *)v22 = 136315394;
    v41 = a6;
    sub_1CCB63604();
    v40 = a10;
    sub_1CC9C23B4((unint64_t *)&qword_1EF9DF3D0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v25 = sub_1CCB64240();
    v49 = sub_1CCA0CB60(v25, v26, &v50);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v22 + 12) = 2080;
    v27 = v43;
    if ((v43 & 1) != 0)
      v28 = 0x73736563637573;
    else
      v28 = 0x64656C696166;
    if ((v43 & 1) != 0)
      v29 = 0xE700000000000000;
    else
      v29 = 0xE600000000000000;
    v49 = sub_1CCA0CB60(v28, v29, &v50);
    v12 = v40;
    a6 = v41;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v19, v20, v42, (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    v30 = v24;
    a4 = v38;
    MEMORY[0x1D17B214C](v30, -1, -1);
    MEMORY[0x1D17B214C](v22, -1, -1);

  }
  else
  {
    swift_release_n();

    v27 = v43;
  }
  if ((v27 & 1) != 0)
    v31 = 2;
  else
    v31 = 4;
  LOBYTE(v50) = v31;
  a4(&v50, v44);
  v32 = sub_1CCB63C04();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v17, 1, 1, v32);
  v33 = v47;
  sub_1CCA0BEEC(v48, v47, type metadata accessor for FMIPBeaconShareStateOverride);
  v34 = (*(unsigned __int8 *)(v46 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  v35 = (_QWORD *)swift_allocObject();
  v35[2] = 0;
  v35[3] = 0;
  v35[4] = a6;
  sub_1CC9FED60(v33, (uint64_t)v35 + v34, type metadata accessor for FMIPBeaconShareStateOverride);
  swift_retain();
  sub_1CCA96BE8((uint64_t)v17, v12, (uint64_t)v35);
  return swift_release();
}

void sub_1CCA2A3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t aBlock[6];

  if (qword_1ED8A8D88 != -1)
    swift_once();
  v7 = sub_1CCB637FC();
  sub_1CCA16C20(v7, (uint64_t)qword_1ED8AD770);
  swift_retain_n();
  v8 = sub_1CCB637D8();
  v9 = sub_1CCB63D48();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    aBlock[0] = v17;
    *(_DWORD *)v10 = 136315138;
    sub_1CCB63604();
    sub_1CC9C23B4((unint64_t *)&qword_1EF9DF3D0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v11 = sub_1CCB64240();
    sub_1CCA0CB60(v11, v12, aBlock);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v8, v9, "FMIPBeaconSharingController: Requesting share of beacon: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v17, -1, -1);
    MEMORY[0x1D17B214C](v10, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v13 = *(void **)(v3 + 112);
  v14 = (void *)sub_1CCB635D4();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  aBlock[4] = (uint64_t)sub_1CCA2F8B0;
  aBlock[5] = (uint64_t)v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CC9C37C0;
  aBlock[3] = (uint64_t)&unk_1E88EFBD8;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v13, sel_requestShare_completion_, v14, v16);
  _Block_release(v16);

}

uint64_t sub_1CCA2A6C8(char a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t (*v18)(_QWORD, _QWORD);
  uint64_t v19;

  if (qword_1ED8A8D88 != -1)
    swift_once();
  v7 = sub_1CCB637FC();
  sub_1CCA16C20(v7, (uint64_t)qword_1ED8AD770);
  swift_retain_n();
  v8 = sub_1CCB637D8();
  v9 = sub_1CCB63D48();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    v19 = v11;
    *(_DWORD *)v10 = 136315394;
    v18 = a4;
    sub_1CCB63604();
    sub_1CC9C23B4((unint64_t *)&qword_1EF9DF3D0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v12 = sub_1CCB64240();
    sub_1CCA0CB60(v12, v13, &v19);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    if ((a1 & 1) != 0)
      v14 = 0x73736563637573;
    else
      v14 = 0x64656C696166;
    if ((a1 & 1) != 0)
      v15 = 0xE700000000000000;
    else
      v15 = 0xE600000000000000;
    sub_1CCA0CB60(v14, v15, &v19);
    sub_1CCB63E44();
    a4 = v18;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v8, v9, "FMIPBeaconSharingController: Share request for beacon action completed: %s, status: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v11, -1, -1);
    MEMORY[0x1D17B214C](v10, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  if ((a1 & 1) != 0)
    v16 = 2;
  else
    v16 = 4;
  LOBYTE(v19) = v16;
  return a4(&v19, a2);
}

uint64_t sub_1CCA2A95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = v3;
  v8 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8A8D88 != -1)
    swift_once();
  v11 = sub_1CCB637FC();
  sub_1CCA16C20(v11, (uint64_t)qword_1ED8AD770);
  swift_retain_n();
  v12 = sub_1CCB637D8();
  v13 = sub_1CCB63D48();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v24 = a2;
    v15 = v14;
    v16 = swift_slowAlloc();
    v27 = v16;
    *(_DWORD *)v15 = 136315394;
    v25 = v3;
    sub_1CCB63604();
    sub_1CC9C23B4((unint64_t *)&qword_1EF9DF3D0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v17 = sub_1CCB64240();
    v26 = sub_1CCA0CB60(v17, v18, &v27);
    v4 = v25;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v15 + 12) = 1024;
    v19 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore21FMIPStopSharingAction_force);
    swift_release();
    LODWORD(v26) = v19;
    sub_1CCB63E44();
    swift_release();
    _os_log_impl(&dword_1CC9BF000, v12, v13, "FMIPBeaconSharingController: Stopping sharing of beacon: %s, forced? %{BOOL}d", (uint8_t *)v15, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v16, -1, -1);
    v20 = v15;
    a2 = v24;
    MEMORY[0x1D17B214C](v20, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v21 = sub_1CCB63C04();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v10, 1, 1, v21);
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = 0;
  v22[3] = 0;
  v22[4] = v4;
  v22[5] = a1;
  v22[6] = a2;
  v22[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1CCA96BE8((uint64_t)v10, (uint64_t)&unk_1EF9DF558, (uint64_t)v22);
  return swift_release();
}

uint64_t sub_1CCA2AC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[17] = a6;
  v7[18] = a7;
  v7[15] = a4;
  v7[16] = a5;
  v8 = sub_1CCB63604();
  v7[19] = v8;
  v7[20] = *(_QWORD *)(v8 - 8);
  v7[21] = swift_task_alloc();
  v7[22] = *(_QWORD *)(type metadata accessor for FMIPBeaconShareStateOverride(0) - 8);
  v7[23] = swift_task_alloc();
  v7[24] = swift_task_alloc();
  v9 = type metadata accessor for FMIPBeaconShare(0);
  v7[25] = v9;
  v7[26] = *(_QWORD *)(v9 - 8);
  v7[27] = swift_task_alloc();
  v7[28] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CCA2AD1C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 232) = *(_QWORD *)(*(_QWORD *)(v0 + 120) + 144);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

void sub_1CCA2AD60()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = 0;
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_BYTE *)(v2 + 32);
  *(_BYTE *)(v0 + 288) = v3;
  v4 = 1 << v3;
  v5 = *(_QWORD *)(v2 + 56);
  v6 = v4 < 64;
  v7 = -1 << v4;
  if (v6)
    v8 = ~v7;
  else
    v8 = -1;
  v9 = v8 & v5;
  v10 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 240) = OBJC_IVAR____TtC8FMIPCore21FMIPStopSharingAction_beaconIdentifier;
  *(_QWORD *)(v0 + 248) = v10;
  if (!v9)
    goto LABEL_6;
LABEL_5:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v12 = v11 | (v1 << 6);
  v13 = *(_QWORD *)(v0 + 232);
  while (1)
  {
    *(_QWORD *)(v0 + 256) = v1;
    *(_QWORD *)(v0 + 264) = v9;
    v20 = *(_QWORD *)(v0 + 216);
    v19 = *(_QWORD *)(v0 + 224);
    sub_1CCA0BEEC(*(_QWORD *)(v13 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 208) + 72) * v12, v19, type metadata accessor for FMIPBeaconShare);
    sub_1CC9FED60(v19, v20, type metadata accessor for FMIPBeaconShare);
    if ((sub_1CCB635E0() & 1) != 0)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 16))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 152));
      *(_QWORD *)(v0 + 112) = 0x8000000000000038;
LABEL_25:
      swift_task_switch();
      return;
    }
    sub_1CCA0BF30(*(_QWORD *)(v0 + 216), type metadata accessor for FMIPBeaconShare);
    if (v9)
      goto LABEL_5;
LABEL_6:
    v14 = v1 + 1;
    if (__OFADD__(v1, 1))
      break;
    v15 = (unint64_t)((1 << *(_BYTE *)(v0 + 288)) + 63) >> 6;
    v13 = *(_QWORD *)(v0 + 232);
    if (v14 >= v15)
      goto LABEL_24;
    v16 = v13 + 56;
    v17 = *(_QWORD *)(v13 + 56 + 8 * v14);
    ++v1;
    if (v17)
      goto LABEL_19;
    v1 = v14 + 1;
    if (v14 + 1 >= v15)
      goto LABEL_24;
    v17 = *(_QWORD *)(v16 + 8 * v1);
    if (v17)
      goto LABEL_19;
    v1 = v14 + 2;
    if (v14 + 2 >= v15)
      goto LABEL_24;
    v17 = *(_QWORD *)(v16 + 8 * v1);
    if (v17)
      goto LABEL_19;
    v18 = v14 + 3;
    if (v18 >= v15)
    {
LABEL_24:
      swift_release();
      goto LABEL_25;
    }
    v17 = *(_QWORD *)(v16 + 8 * v18);
    if (!v17)
    {
      while (1)
      {
        v1 = v18 + 1;
        if (__OFADD__(v18, 1))
          goto LABEL_27;
        if (v1 >= v15)
          goto LABEL_24;
        v17 = *(_QWORD *)(v16 + 8 * v1);
        ++v18;
        if (v17)
          goto LABEL_19;
      }
    }
    v1 = v18;
LABEL_19:
    v9 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v1 << 6);
  }
  __break(1u);
LABEL_27:
  __break(1u);
}

uint64_t sub_1CCA2AF90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v0[20];
  v1 = v0[21];
  v3 = v0[19];
  sub_1CCA27A38(v1, v0 + 14, v0[24]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

uint64_t sub_1CCA2AFF8()
{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;

  sub_1CCA0BEEC(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 184), type metadata accessor for FMIPBeaconShareStateOverride);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v2 = *(_QWORD *)(v0 + 248);
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    goto LABEL_2;
LABEL_28:
  v2 = sub_1CCAC997C(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
LABEL_2:
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1CCAC997C(v3 > 1, v4 + 1, 1, v2);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  sub_1CC9FED60(v6, v2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v4, type metadata accessor for FMIPBeaconShareStateOverride);
  sub_1CCA0BF30(v7, type metadata accessor for FMIPBeaconShareStateOverride);
  sub_1CCA0BF30(v5, type metadata accessor for FMIPBeaconShare);
  v9 = *(_QWORD *)(v0 + 256);
  v10 = *(_QWORD *)(v0 + 264);
  *(_QWORD *)(v0 + 248) = v2;
  if (v10)
  {
LABEL_5:
    v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v12 = v11 | (v9 << 6);
    v13 = *(_QWORD *)(v0 + 232);
    goto LABEL_20;
  }
  while (1)
  {
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v15 = (unint64_t)((1 << *(_BYTE *)(v0 + 288)) + 63) >> 6;
    v13 = *(_QWORD *)(v0 + 232);
    if (v14 >= v15)
      goto LABEL_24;
    v16 = v13 + 56;
    v17 = *(_QWORD *)(v13 + 56 + 8 * v14);
    ++v9;
    if (!v17)
    {
      v9 = v14 + 1;
      if (v14 + 1 >= v15)
        goto LABEL_24;
      v17 = *(_QWORD *)(v16 + 8 * v9);
      if (!v17)
      {
        v9 = v14 + 2;
        if (v14 + 2 >= v15)
          goto LABEL_24;
        v17 = *(_QWORD *)(v16 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_19:
    v10 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_20:
    *(_QWORD *)(v0 + 256) = v9;
    *(_QWORD *)(v0 + 264) = v10;
    v19 = *(_QWORD *)(v0 + 216);
    v2 = *(_QWORD *)(v0 + 224);
    sub_1CCA0BEEC(*(_QWORD *)(v13 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 208) + 72) * v12, v2, type metadata accessor for FMIPBeaconShare);
    sub_1CC9FED60(v2, v19, type metadata accessor for FMIPBeaconShare);
    if ((sub_1CCB635E0() & 1) != 0)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 16))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 152));
      *(_QWORD *)(v0 + 112) = 0x8000000000000038;
      return swift_task_switch();
    }
    sub_1CCA0BF30(*(_QWORD *)(v0 + 216), type metadata accessor for FMIPBeaconShare);
    if (v10)
      goto LABEL_5;
  }
  v18 = v14 + 3;
  if (v18 < v15)
  {
    v17 = *(_QWORD *)(v16 + 8 * v18);
    if (!v17)
    {
      while (1)
      {
        v9 = v18 + 1;
        if (__OFADD__(v18, 1))
          goto LABEL_27;
        if (v9 >= v15)
          goto LABEL_24;
        v17 = *(_QWORD *)(v16 + 8 * v9);
        ++v18;
        if (v17)
          goto LABEL_19;
      }
    }
    v9 = v18;
    goto LABEL_19;
  }
LABEL_24:
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1CCA2B2B0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 272) = *(_QWORD *)(*(_QWORD *)(v0 + 120) + 112);
  return swift_task_switch();
}

uint64_t sub_1CCA2B2D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 120);
  v8 = *(_OWORD *)(v0 + 128);
  v4 = (void *)sub_1CCB635D4();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = v8;
  *(_QWORD *)(v5 + 32) = v2;
  *(_QWORD *)(v5 + 40) = v1;
  *(_QWORD *)(v5 + 48) = v3;
  *(_QWORD *)(v0 + 96) = sub_1CCA2F724;
  *(_QWORD *)(v0 + 104) = v5;
  *(_QWORD *)(v0 + 64) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v0 + 72) = 1107296256;
  *(_QWORD *)(v0 + 80) = sub_1CC9C37C0;
  *(_QWORD *)(v0 + 88) = &unk_1E88EFB38;
  v6 = _Block_copy((const void *)(v0 + 64));
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(*(id *)(v0 + 272), sel_forceStopSharing_completion_, v4, v6);
  _Block_release(v6);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CCA2B418()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 280) = *(_QWORD *)(*(_QWORD *)(v0 + 120) + 112);
  return swift_task_switch();
}

uint64_t sub_1CCA2B438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 120);
  v8 = *(_OWORD *)(v0 + 128);
  v4 = (void *)sub_1CCB635D4();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = v8;
  *(_QWORD *)(v5 + 32) = v2;
  *(_QWORD *)(v5 + 40) = v1;
  *(_QWORD *)(v5 + 48) = v3;
  *(_QWORD *)(v0 + 48) = sub_1CCA2F6C8;
  *(_QWORD *)(v0 + 56) = v5;
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_1CC9C37C0;
  *(_QWORD *)(v0 + 40) = &unk_1E88EFAE8;
  v6 = _Block_copy((const void *)(v0 + 16));
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(*(id *)(v0 + 280), sel_stopSharing_completion_, v4, v6);
  _Block_release(v6);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CCA2B580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_1CCA2B598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
  *(_QWORD *)(v0 + 32) = v1;
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = *(_QWORD *)(type metadata accessor for FMIPBeaconShareStateOverride(0) - 8);
  *(_DWORD *)(v0 + 56) = *(_DWORD *)(v2 + 80);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v0 + 48) = 0;
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t sub_1CCA2B618()
{
  uint64_t v0;

  sub_1CCA27D68(*(_QWORD *)(v0 + 16)+ ((*(unsigned __int8 *)(v0 + 56) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 56))+ *(_QWORD *)(v0 + 40) * *(_QWORD *)(v0 + 48));
  return swift_task_switch();
}

uint64_t sub_1CCA2B66C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48) + 1;
  if (v1 == *(_QWORD *)(v0 + 32))
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 48) = v1;
    return swift_task_switch();
  }
}

uint64_t sub_1CCA2B6D4(int a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, const char *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v38 = a8;
  v40 = a2;
  v41 = a5;
  v39 = a1;
  v13 = a10;
  v14 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8A8D88 != -1)
    swift_once();
  v17 = sub_1CCB637FC();
  sub_1CCA16C20(v17, (uint64_t)qword_1ED8AD770);
  swift_retain_n();
  v18 = sub_1CCB637D8();
  v19 = sub_1CCB63D48();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v37 = a7;
    v21 = v20;
    v22 = swift_slowAlloc();
    v36 = a10;
    v23 = v22;
    v43 = v22;
    *(_DWORD *)v21 = 136315394;
    v35[1] = a9;
    sub_1CCB63604();
    v35[0] = a6;
    sub_1CC9C23B4((unint64_t *)&qword_1EF9DF3D0, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v24 = sub_1CCB64240();
    v42 = sub_1CCA0CB60(v24, v25, &v43);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v21 + 12) = 2080;
    v26 = v39;
    if ((v39 & 1) != 0)
      v27 = 0x73736563637573;
    else
      v27 = 0x64656C696166;
    if ((v39 & 1) != 0)
      v28 = 0xE700000000000000;
    else
      v28 = 0xE600000000000000;
    v42 = sub_1CCA0CB60(v27, v28, &v43);
    a6 = v35[0];
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v18, v19, v38, (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    v29 = v23;
    v13 = v36;
    MEMORY[0x1D17B214C](v29, -1, -1);
    v30 = v21;
    a7 = v37;
    MEMORY[0x1D17B214C](v30, -1, -1);

  }
  else
  {
    swift_release_n();

    v26 = v39;
  }
  if ((v26 & 1) != 0)
    v31 = 2;
  else
    v31 = 4;
  LOBYTE(v43) = v31;
  a4(&v43, v40);
  v32 = sub_1CCB63C04();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v16, 1, 1, v32);
  v33 = (_QWORD *)swift_allocObject();
  v33[2] = 0;
  v33[3] = 0;
  v33[4] = a6;
  v33[5] = a7;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CCA96BE8((uint64_t)v16, v13, (uint64_t)v33);
  return swift_release();
}

uint64_t sub_1CCA2BA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_1CCA2BA38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
  *(_QWORD *)(v0 + 32) = v1;
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = *(_QWORD *)(type metadata accessor for FMIPBeaconShareStateOverride(0) - 8);
  *(_DWORD *)(v0 + 56) = *(_DWORD *)(v2 + 80);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v0 + 48) = 0;
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t sub_1CCA2BAB8()
{
  uint64_t v0;

  sub_1CCA27D68(*(_QWORD *)(v0 + 16)+ ((*(unsigned __int8 *)(v0 + 56) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 56))+ *(_QWORD *)(v0 + 40) * *(_QWORD *)(v0 + 48));
  return swift_task_switch();
}

uint64_t sub_1CCA2BB0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48) + 1;
  if (v1 == *(_QWORD *)(v0 + 32))
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 48) = v1;
    return swift_task_switch();
  }
}

uint64_t sub_1CCA2BB74()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCA2F610(v0 + 152);
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t sub_1CCA2BBB8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1CCA2BBD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1CCB63988();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id sub_1CCA2BC00()
{
  id *v0;

  return *v0;
}

uint64_t sub_1CCA2BC08@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

_DWORD *sub_1CCA2BC10@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_1CCA2BC20(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_QWORD *sub_1CCA2BC2C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1CCA2BC40(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1CCA2BC48@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1CCA2BC5C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

BOOL sub_1CCA2BC70(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1CCA2BC84(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1CCA2BC98(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

uint64_t sub_1CCA2BCC8(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1CCB63970();
  *a2 = 0;
  return result;
}

uint64_t sub_1CCA2BD3C(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1CCB6397C();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1CCA2BDB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1CCB63988();
  v2 = sub_1CCB63964();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1CCA2BDF8()
{
  sub_1CC9C23B4(&qword_1EF9DF308, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1CCB659FC);
  return sub_1CCB642F4();
}

uint64_t sub_1CCA2BE3C()
{
  sub_1CC9C23B4(&qword_1EF9DF308, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1CCB659FC);
  return sub_1CCB642E8();
}

uint64_t sub_1CCA2BE80()
{
  sub_1CC9C23B4(&qword_1EF9DF340, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1CCB65A40);
  return sub_1CCB63394();
}

uint64_t sub_1CCA2BEC4()
{
  sub_1CC9C23B4(&qword_1EF9DF388, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_1CCB658D0);
  return sub_1CCB642F4();
}

uint64_t sub_1CCA2BF08()
{
  sub_1CC9C23B4(&qword_1EF9DF388, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_1CCB658D0);
  return sub_1CCB642E8();
}

uint64_t sub_1CCA2BF4C()
{
  sub_1CC9C23B4(&qword_1EF9DF3B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_1CCB65D50);
  return sub_1CCB63394();
}

uint64_t sub_1CCA2BF90()
{
  sub_1CC9C23B4(&qword_1EF9DF350, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_1CCB657A4);
  return sub_1CCB642F4();
}

uint64_t sub_1CCA2BFD4()
{
  sub_1CC9C23B4(&qword_1EF9DF350, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_1CCB657A4);
  return sub_1CCB642E8();
}

uint64_t sub_1CCA2C018()
{
  sub_1CC9C23B4(&qword_1EF9DF380, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_1CCB65C40);
  return sub_1CCB63394();
}

uint64_t sub_1CCA2C05C(uint64_t a1)
{
  MEMORY[0x1D17B2068](&unk_1CCB667E4, a1);
  return sub_1CCB637CC();
}

uint64_t sub_1CCA2C098()
{
  MEMORY[0x1D17B2068](&unk_1CCB667E4);
  return sub_1CCB637C0();
}

uint64_t sub_1CCA2C0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CCA2C324(a1, a2, a3, (uint64_t)&unk_1CCB667E4);
}

uint64_t sub_1CCA2C0EC()
{
  return sub_1CCB63988();
}

uint64_t sub_1CCA2C0FC()
{
  sub_1CC9C23B4((unint64_t *)&unk_1EF9DF6A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB66854);
  return sub_1CCB633DC();
}

uint64_t sub_1CCA2C140()
{
  sub_1CC9C23B4((unint64_t *)&unk_1EF9DF6A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB66854);
  return sub_1CCB633AC();
}

uint64_t sub_1CCA2C184(void *a1)
{
  id v2;

  sub_1CC9C23B4((unint64_t *)&unk_1EF9DF6A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB66854);
  v2 = a1;
  return sub_1CCB633A0();
}

uint64_t sub_1CCA2C1EC()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_1CCB63E08();

  return v2;
}

uint64_t sub_1CCA2C220()
{
  sub_1CC9C23B4((unint64_t *)&unk_1EF9DF6A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB66854);
  return sub_1CCB633D0();
}

_QWORD *sub_1CCA2C278@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1CCA2C288(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1CCA2C294(uint64_t a1)
{
  MEMORY[0x1D17B2068](&unk_1CCB65EA4, a1);
  return sub_1CCB637CC();
}

uint64_t sub_1CCA2C2D0()
{
  MEMORY[0x1D17B2068](&unk_1CCB65EA4);
  return sub_1CCB637C0();
}

uint64_t sub_1CCA2C318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CCA2C324(a1, a2, a3, (uint64_t)&unk_1CCB65EA4);
}

uint64_t sub_1CCA2C324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CCB6433C();
  MEMORY[0x1D17B2068](a4, a2);
  sub_1CCB637C0();
  return sub_1CCB64384();
}

uint64_t sub_1CCA2C384()
{
  return sub_1CCB63988();
}

uint64_t sub_1CCA2C394()
{
  sub_1CC9C23B4(&qword_1EF9DF380, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_1CCB65C40);
  return sub_1CCB633DC();
}

uint64_t sub_1CCA2C3D8()
{
  sub_1CC9C23B4(&qword_1EF9DF380, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_1CCB65C40);
  return sub_1CCB633AC();
}

uint64_t sub_1CCA2C41C(void *a1)
{
  id v2;

  sub_1CC9C23B4(&qword_1EF9DF380, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_1CCB65C40);
  v2 = a1;
  return sub_1CCB633A0();
}

uint64_t sub_1CCA2C484()
{
  sub_1CC9C23B4(&qword_1EF9DF380, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_1CCB65C40);
  return sub_1CCB633D0();
}

uint64_t sub_1CCA2C4D8()
{
  return sub_1CCB63988();
}

uint64_t sub_1CCA2C4E8()
{
  sub_1CC9C23B4(&qword_1EF9DF3B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_1CCB65D50);
  return sub_1CCB633DC();
}

uint64_t sub_1CCA2C52C()
{
  sub_1CC9C23B4(&qword_1EF9DF3B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_1CCB65D50);
  return sub_1CCB633AC();
}

uint64_t sub_1CCA2C570(void *a1)
{
  id v2;

  sub_1CC9C23B4(&qword_1EF9DF3B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_1CCB65D50);
  v2 = a1;
  return sub_1CCB633A0();
}

uint64_t sub_1CCA2C5D8()
{
  sub_1CC9C23B4(&qword_1EF9DF3B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_1CCB65D50);
  return sub_1CCB633D0();
}

uint64_t sub_1CCA2C62C()
{
  return sub_1CCB63988();
}

uint64_t sub_1CCA2C63C()
{
  sub_1CC9C23B4(&qword_1EF9DF340, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1CCB65A40);
  return sub_1CCB633DC();
}

uint64_t sub_1CCA2C680()
{
  sub_1CC9C23B4(&qword_1EF9DF340, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1CCB65A40);
  return sub_1CCB633AC();
}

uint64_t sub_1CCA2C6C4(void *a1)
{
  id v2;

  sub_1CC9C23B4(&qword_1EF9DF340, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1CCB65A40);
  v2 = a1;
  return sub_1CCB633A0();
}

uint64_t sub_1CCA2C72C()
{
  sub_1CC9C23B4(&qword_1EF9DF340, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1CCB65A40);
  return sub_1CCB633D0();
}

uint64_t sub_1CCA2C780()
{
  sub_1CCB6433C();
  sub_1CCB63940();
  return sub_1CCB64384();
}

uint64_t sub_1CCA2C7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1D17B2068](&unk_1CCB667E4, a3);
  return sub_1CCB637B4();
}

uint64_t sub_1CCA2C828()
{
  sub_1CC9C23B4(&qword_1EF9DF6C8, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType, (uint64_t)&unk_1CCB6642C);
  sub_1CC9C23B4(&qword_1EF9DF6D0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType, (uint64_t)&unk_1CCB663CC);
  return sub_1CCB640E4();
}

uint64_t sub_1CCA2C8B4()
{
  sub_1CC9C23B4(&qword_1EF9DF678, 255, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB66764);
  return sub_1CCB642F4();
}

uint64_t sub_1CCA2C8F8()
{
  sub_1CC9C23B4(&qword_1EF9DF678, 255, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB66764);
  return sub_1CCB642E8();
}

uint64_t sub_1CCA2C93C()
{
  sub_1CC9C23B4((unint64_t *)&unk_1EF9DF6A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB66854);
  return sub_1CCB63394();
}

uint64_t sub_1CCA2C980()
{
  sub_1CC9C23B4((unint64_t *)&unk_1EF9DF6A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB66854);
  return sub_1CCB633B8();
}

BOOL sub_1CCA2C9DC(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1CCA2C9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1D17B2068](&unk_1CCB65EA4, a3);
  return sub_1CCB637B4();
}

uint64_t sub_1CCA2CA3C()
{
  sub_1CC9C23B4((unint64_t *)&qword_1EF9DF3D8, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_1CCB65E60);
  sub_1CC9C23B4((unint64_t *)&unk_1EF9DF3E0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_1CCB655A8);
  return sub_1CCB640E4();
}

uint64_t sub_1CCA2CAC8()
{
  sub_1CC9C23B4((unint64_t *)&unk_1ED8A7EF0, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1CCB66964);
  sub_1CC9C23B4(&qword_1EF9DF6F0, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1CCB66160);
  return sub_1CCB640E4();
}

uint64_t sub_1CCA2CB54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CCB63964();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1CCA2CB98()
{
  sub_1CC9C23B4(&qword_1EF9DF6D8, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_1CCB662D4);
  sub_1CC9C23B4((unint64_t *)&unk_1EF9DF6E0, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_1CCB66274);
  return sub_1CCB640E4();
}

uint64_t sub_1CCA2CC24()
{
  sub_1CC9C23B4(&qword_1EF9DF6B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconLocationSource, (uint64_t)&unk_1CCB66584);
  sub_1CC9C23B4(&qword_1EF9DF6C0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconLocationSource, (uint64_t)&unk_1CCB66524);
  return sub_1CCB640E4();
}

uint64_t sub_1CCA2CCB0()
{
  sub_1CC9C23B4(&qword_1EF9DF380, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_1CCB65C40);
  return sub_1CCB633B8();
}

uint64_t sub_1CCA2CD0C()
{
  sub_1CC9C23B4(&qword_1EF9DF3B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_1CCB65D50);
  return sub_1CCB633B8();
}

uint64_t sub_1CCA2CD68()
{
  sub_1CC9C23B4(&qword_1EF9DF340, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1CCB65A40);
  return sub_1CCB633B8();
}

uint64_t sub_1CCA2CDC4(uint64_t a1, uint64_t a2)
{
  return sub_1CC9E37B8(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_1CCA2CDD0()
{
  sub_1CCB63988();
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA2CE10()
{
  uint64_t v0;

  sub_1CCB63988();
  sub_1CCB6433C();
  sub_1CCB639F4();
  v0 = sub_1CCB64384();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1CCA2CE80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1CCB63988();
  v2 = v1;
  if (v0 == sub_1CCB63988() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1CCA2CF08(uint64_t (*a1)(unint64_t))
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v1;
  v5 = type metadata accessor for FMIPBeaconShareStateOverride(0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v34 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v33 = (uint64_t)&v30 - v9;
  MEMORY[0x1E0C80A78](v8);
  v35 = (uint64_t)&v30 - v11;
  v12 = *v1;
  v13 = *(_QWORD *)(*v1 + 16);
  if (!v13)
    return 0;
  v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = *(_QWORD *)(v10 + 72);
  swift_bridgeObjectRetain();
  v16 = 0;
  v31 = v14;
  while (1)
  {
    v17 = a1(v12 + v14);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v16;
    }
    if ((v17 & 1) != 0)
      break;
    ++v16;
    v14 += v15;
    if (v13 == v16)
    {
      swift_bridgeObjectRelease();
      return *(_QWORD *)(v12 + 16);
    }
  }
  result = swift_bridgeObjectRelease();
  if (!__OFADD__(v16, 1))
  {
    v19 = *(_QWORD *)(v12 + 16);
    if (v16 + 1 == v19)
      return v16;
    v20 = v15 + v14;
    v21 = v16 + 1;
    v30 = v1;
    v32 = v15;
    while (v21 < v19)
    {
      v22 = v3;
      v36 = v20;
      v23 = v35;
      sub_1CCA0BEEC(v12 + v20, v35, type metadata accessor for FMIPBeaconShareStateOverride);
      v24 = a1(v23);
      result = sub_1CCA0BF30(v23, type metadata accessor for FMIPBeaconShareStateOverride);
      if ((v24 & 1) != 0)
      {
        v3 = v22;
        v25 = v32;
      }
      else
      {
        v3 = v22;
        v25 = v32;
        if (v21 != v16)
        {
          if ((v16 & 0x8000000000000000) != 0)
            goto LABEL_32;
          v26 = *v3;
          v27 = *(_QWORD *)(*v3 + 16);
          if (v16 >= v27)
            goto LABEL_33;
          result = sub_1CCA0BEEC(v26 + v31 + v16 * v32, v33, type metadata accessor for FMIPBeaconShareStateOverride);
          if (v21 >= v27)
            goto LABEL_34;
          sub_1CCA0BEEC(v26 + v36, v34, type metadata accessor for FMIPBeaconShareStateOverride);
          result = swift_isUniquelyReferenced_nonNull_native();
          v3 = v30;
          *v30 = v26;
          if ((result & 1) == 0)
          {
            result = sub_1CCAB6E6C(v26);
            v26 = result;
            *v3 = result;
          }
          if (v16 >= *(_QWORD *)(v26 + 16))
            goto LABEL_35;
          result = sub_1CCA2F508(v34, v26 + v31 + v16 * v25);
          if (v21 >= *(_QWORD *)(*v3 + 16))
            goto LABEL_36;
          result = sub_1CCA2F508(v33, *v3 + v36);
        }
        if (__OFADD__(v16++, 1))
          goto LABEL_31;
      }
      v29 = v21 + 1;
      if (__OFADD__(v21, 1))
        goto LABEL_30;
      v12 = *v3;
      v19 = *(_QWORD *)(*v3 + 16);
      ++v21;
      v20 = v36 + v25;
      if (v29 == v19)
        return v16;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1CCA2D210(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (!a1[2])
  {
    swift_bridgeObjectRelease();
    return;
  }
  v43 = a1[2];
  v7 = a1[4];
  v6 = a1[5];
  v8 = (void *)a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  v10 = v8;
  v12 = sub_1CCA074F4(v7, v6);
  v13 = v9[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_23;
  v16 = v11;
  if (v9[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1CCAEC20C();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v22 = (uint64_t *)(v21[6] + 16 * v12);
    *v22 = v7;
    v22[1] = v6;
    *(_QWORD *)(v21[7] + 8 * v12) = v8;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v43 - 1;
    if (v43 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v27 = (void **)(a1 + 9);
    while (1)
    {
      v29 = (uint64_t)*(v27 - 2);
      v28 = (uint64_t)*(v27 - 1);
      v8 = *v27;
      v30 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      v31 = v8;
      v32 = sub_1CCA074F4(v29, v28);
      v34 = v30[2];
      v35 = (v33 & 1) == 0;
      v24 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v24)
        break;
      v37 = v33;
      if (v30[3] < v36)
      {
        sub_1CCAE81E4(v36, 1);
        v32 = sub_1CCA074F4(v29, v28);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v29;
      v40[1] = v28;
      *(_QWORD *)(v39[7] + 8 * v32) = v8;
      v41 = v39[2];
      v24 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v24)
        goto LABEL_24;
      v39[2] = v42;
      v27 += 3;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1CCAE81E4(v15, a2 & 1);
  v17 = sub_1CCA074F4(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    sub_1CCA14E90(&qword_1EF9DF470);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_1CCB642DC();
  __break(1u);
LABEL_26:
  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCB64060();
  sub_1CCB63A24();
  sub_1CCB64084();
  __break(1u);
}

uint64_t _s8FMIPCore15FMIPBeaconShareV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;

  if ((sub_1CCB635E0() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for FMIPBeaconShare(0);
  if ((sub_1CCB635E0() & 1) == 0)
    return 0;
  v5 = v4[6];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v6 == *v8 && v7 == v8[1];
  if (!v9 && (sub_1CCB642A0() & 1) == 0)
    return 0;
  v10 = v4[7];
  v11 = *(_QWORD *)(a1 + v10);
  v12 = *(_QWORD *)(a1 + v10 + 8);
  v13 = (_QWORD *)(a2 + v10);
  v14 = v11 == *v13 && v12 == v13[1];
  if ((v14 || (sub_1CCB642A0() & 1) != 0)
    && (v15 = v4[8],
        v16 = *(_QWORD *)(a1 + v15),
        v18 = *(_QWORD *)(a2 + v15),
        v19 = v16,
        (static FMIPBeaconShareState.== infix(_:_:)(&v19, &v18) & 1) != 0))
  {
    return sub_1CCB63574();
  }
  else
  {
    return 0;
  }
}

unint64_t sub_1CCA2D69C()
{
  unint64_t result;

  result = qword_1EF9DF090;
  if (!qword_1EF9DF090)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPBeaconShareDirection, &type metadata for FMIPBeaconShareDirection);
    atomic_store(result, (unint64_t *)&qword_1EF9DF090);
  }
  return result;
}

unint64_t sub_1CCA2D6E4()
{
  unint64_t result;

  result = qword_1EF9DF098;
  if (!qword_1EF9DF098)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPBeaconShareState, &type metadata for FMIPBeaconShareState);
    atomic_store(result, (unint64_t *)&qword_1EF9DF098);
  }
  return result;
}

uint64_t sub_1CCA2D728()
{
  return sub_1CC9C23B4(&qword_1EF9DF0A0, 255, type metadata accessor for FMIPBeaconShare, (uint64_t)&protocol conformance descriptor for FMIPBeaconShare);
}

uint64_t sub_1CCA2D758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t sub_1CCA2D760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t getEnumTagSinglePayload for FMIPBeaconShareDirection(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPBeaconShareDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCA2D844 + 4 * byte_1CCB64FF7[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CCA2D878 + 4 * byte_1CCB64FF2[v4]))();
}

uint64_t sub_1CCA2D878(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA2D880(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA2D888);
  return result;
}

uint64_t sub_1CCA2D894(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA2D89CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCA2D8A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA2D8A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPBeaconShareDirection()
{
  return &type metadata for FMIPBeaconShareDirection;
}

unint64_t *initializeBufferWithCopyOfBuffer for FMIPBeaconShareState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_1CCA24CA8(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for FMIPBeaconShareState(unint64_t *a1)
{
  return sub_1CCA25030(*a1);
}

unint64_t *assignWithCopy for FMIPBeaconShareState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_1CCA24CA8(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_1CCA25030(v4);
  return a1;
}

_QWORD *initializeWithTake for FMIPBeaconShareState(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for FMIPBeaconShareState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_1CCA25030(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPBeaconShareState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for FMIPBeaconShareState(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1CCA2DA1C(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *sub_1CCA2DA38(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1CCA2DA48(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for FMIPBeaconShareState()
{
  return &type metadata for FMIPBeaconShareState;
}

uint64_t *initializeBufferWithCopyOfBuffer for FMIPBeaconShare(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1CCB63604();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = (uint64_t *)((char *)a1 + v9);
    v12 = (uint64_t *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = (uint64_t *)((char *)a1 + v10);
    v15 = (uint64_t *)((char *)a2 + v10);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = a3[8];
    v18 = *(uint64_t *)((char *)a2 + v17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CCA24CA8(v18);
    *(uint64_t *)((char *)a1 + v17) = v18;
    v19 = a3[9];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = sub_1CCB635B0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  }
  return a1;
}

uint64_t destroy for FMIPBeaconShare(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v4 = sub_1CCB63604();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCA25030(*(_QWORD *)(a1 + a2[8]));
  v6 = a1 + a2[9];
  v7 = sub_1CCB635B0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t initializeWithCopy for FMIPBeaconShare(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_1CCB63604();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (_QWORD *)(a1 + v9);
  v14 = (_QWORD *)(a2 + v9);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a3[8];
  v17 = *(_QWORD *)(a2 + v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCA24CA8(v17);
  *(_QWORD *)(a1 + v16) = v17;
  v18 = a3[9];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  return a1;
}

uint64_t assignWithCopy for FMIPBeaconShare(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = sub_1CCB63604();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[8];
  v15 = *(_QWORD *)(a2 + v14);
  sub_1CCA24CA8(v15);
  v16 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  sub_1CCA25030(v16);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  return a1;
}

uint64_t initializeWithTake for FMIPBeaconShare(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_1CCB63604();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for FMIPBeaconShare(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = sub_1CCB63604();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = a3[8];
  v19 = *(_QWORD *)(a1 + v18);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  sub_1CCA25030(v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPBeaconShare()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCA2DFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_1CCB63604();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_1CCB635B0();
    v10 = a1 + *(int *)(a3 + 36);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPBeaconShare()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCA2E088(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_1CCB63604();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_1CCB635B0();
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata accessor for PlaySoundContext(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF1D8);
}

void type metadata accessor for IgnoreTrackingUntil(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF1E0);
}

void type metadata accessor for UNAuthorizationStatus(uint64_t a1)
{
  sub_1CC9F225C(a1, qword_1EF9DF1E8);
}

uint64_t *sub_1CCA2E16C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1CCB63604();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    v9 = *(int *)(a3 + 24);
    v10 = *(uint64_t *)((char *)a2 + v9);
    sub_1CCA24CA8(v10);
    *(uint64_t *)((char *)a1 + v9) = v10;
  }
  return a1;
}

unint64_t sub_1CCA2E21C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = sub_1CCB63604();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  return sub_1CCA25030(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_1CCA2E27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  unint64_t v9;

  v6 = sub_1CCB63604();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v8);
  sub_1CCA24CA8(v9);
  *(_QWORD *)(a1 + v8) = v9;
  return a1;
}

uint64_t sub_1CCA2E300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v6 = sub_1CCB63604();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v8);
  sub_1CCA24CA8(v9);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  sub_1CCA25030(v10);
  return a1;
}

uint64_t sub_1CCA2E38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1CCB63604();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1CCA2E408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  unint64_t v9;

  v6 = sub_1CCB63604();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  sub_1CCA25030(v9);
  return a1;
}

uint64_t sub_1CCA2E48C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCA2E498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;

  v6 = sub_1CCB63604();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  LODWORD(v9) = ((v9 >> 57) >> 5) | (4 * ((v9 >> 57) & 0x18 | v9 & 7));
  v10 = v9 ^ 0x7F;
  v11 = 128 - v9;
  if (v10 >= 0x7D)
    return 0;
  else
    return v11;
}

uint64_t sub_1CCA2E52C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCA2E538(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = sub_1CCB63604();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (-(int)a2 >> 2) & 0x1F | (32 * (-(int)a2 & 0x7F));
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (v10 | (v10 << 57)) & 0xF000000000000007;
  return result;
}

uint64_t type metadata accessor for FMIPBeaconShareStateOverride(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9DF248);
}

uint64_t sub_1CCA2E5D4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CCB63604();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for CLClientLocationReferenceFrame(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF288);
}

void type metadata accessor for SPPairingSessionError(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF290);
}

void type metadata accessor for SPUnknownDiscoverySessionError(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF298);
}

void type metadata accessor for SPAccessoryDiscoverySessionError(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF2A0);
}

void type metadata accessor for BeaconTaskState(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF2A8);
}

void type metadata accessor for SPBeaconTaskName(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF2B0);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF2B8);
}

uint64_t sub_1CCA2E6D4()
{
  return sub_1CC9C23B4(&qword_1EF9DF2C0, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGColor, (uint64_t)&unk_1CCB654C8);
}

uint64_t sub_1CCA2E704()
{
  return sub_1CC9C23B4(&qword_1EF9DF2C8, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_1CCB6556C);
}

uint64_t sub_1CCA2E734()
{
  return sub_1CC9C23B4(&qword_1EF9DF2D0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_1CCB65540);
}

uint64_t sub_1CCA2E764()
{
  return sub_1CC9C23B4(&qword_1EF9DF2D8, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_1CCB656BC);
}

uint64_t sub_1CCA2E794()
{
  return sub_1CC9C23B4(&qword_1EF9DF2E0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_1CCB656E8);
}

uint64_t sub_1CCA2E7C4()
{
  return sub_1CC9C23B4(&qword_1EF9DF2E8, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_1CCB657E8);
}

uint64_t sub_1CCA2E7F4()
{
  return sub_1CC9C23B4(&qword_1EF9DF2F0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_1CCB65814);
}

uint64_t sub_1CCA2E824()
{
  return sub_1CC9C23B4(&qword_1EF9DF2F8, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1CCB65914);
}

uint64_t sub_1CCA2E854()
{
  return sub_1CC9C23B4(&qword_1EF9DF300, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1CCB65940);
}

uint64_t sub_1CCA2E884()
{
  return sub_1CC9C23B4(&qword_1EF9DF308, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1CCB659FC);
}

uint64_t sub_1CCA2E8B4()
{
  return sub_1CC9C23B4(&qword_1EF9DF310, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1CCB659C8);
}

uint64_t sub_1CCA2E8E4()
{
  return sub_1CC9C23B4(&qword_1EF9DF318, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1CCB65984);
}

uint64_t sub_1CCA2E914()
{
  return sub_1CC9C23B4(&qword_1EF9DF320, 255, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_1CCB65AE8);
}

void _s3__C4CodeOMa_1(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF5F8);
}

uint64_t sub_1CCA2E958()
{
  return sub_1CC9C23B4(&qword_1EF9DF328, 255, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_1CCB65AAC);
}

unint64_t sub_1CCA2E98C()
{
  unint64_t result;

  result = qword_1EF9DF330;
  if (!qword_1EF9DF330)
  {
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EF9DF330);
  }
  return result;
}

uint64_t sub_1CCA2E9D0()
{
  return sub_1CC9C23B4(&qword_1EF9DF338, 255, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_1CCB65B24);
}

uint64_t sub_1CCA2EA00()
{
  return sub_1CC9C23B4(&qword_1EF9DF340, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1CCB65A40);
}

uint64_t sub_1CCA2EA30()
{
  return sub_1CC9C23B4(&qword_1EF9DF348, 255, type metadata accessor for FMIPBeaconShareStateOverride, (uint64_t)&unk_1CCB65BB0);
}

uint64_t sub_1CCA2EA60()
{
  return sub_1CC9C23B4(&qword_1EF9DF350, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_1CCB657A4);
}

uint64_t sub_1CCA2EA90()
{
  return sub_1CC9C23B4(&qword_1EF9DF358, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_1CCB65770);
}

uint64_t sub_1CCA2EAC0()
{
  return sub_1CC9C23B4(&qword_1EF9DF360, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_1CCB6572C);
}

uint64_t sub_1CCA2EAF0()
{
  return sub_1CC9C23B4(&qword_1EF9DF368, 255, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1CCB65CE8);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF5F0);
}

uint64_t sub_1CCA2EB34()
{
  return sub_1CC9C23B4(&qword_1EF9DF370, 255, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1CCB65CAC);
}

uint64_t sub_1CCA2EB64()
{
  return sub_1CC9C23B4(&qword_1EF9DF378, 255, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1CCB65D24);
}

uint64_t sub_1CCA2EB94()
{
  return sub_1CC9C23B4(&qword_1EF9DF380, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_1CCB65C40);
}

uint64_t sub_1CCA2EBC4()
{
  return sub_1CC9C23B4(&qword_1EF9DF388, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_1CCB658D0);
}

uint64_t sub_1CCA2EBF4()
{
  return sub_1CC9C23B4(&qword_1EF9DF390, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_1CCB6589C);
}

uint64_t sub_1CCA2EC24()
{
  return sub_1CC9C23B4(&qword_1EF9DF398, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_1CCB65858);
}

uint64_t sub_1CCA2EC54()
{
  return sub_1CC9C23B4(&qword_1EF9DF3A0, 255, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1CCB65DF8);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF5E8);
}

uint64_t sub_1CCA2EC98()
{
  return sub_1CC9C23B4(&qword_1EF9DF3A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1CCB65DBC);
}

uint64_t sub_1CCA2ECC8()
{
  return sub_1CC9C23B4(&qword_1EF9DF3B0, 255, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1CCB65E34);
}

uint64_t sub_1CCA2ECF8()
{
  return sub_1CC9C23B4(&qword_1EF9DF3B8, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_1CCB65D50);
}

uint64_t sub_1CCA2ED28()
{
  return sub_1CC9C23B4(&qword_1EF9DF3C0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_1CCB655DC);
}

uint64_t sub_1CCA2ED58()
{
  return sub_1CC9C23B4(&qword_1EF9DF3C8, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGColor, (uint64_t)&unk_1CCB654F4);
}

uint64_t sub_1CCA2ED8C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1CCA2FE0C;
  return sub_1CCA29CF4(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1CCA2EE18()
{
  uint64_t v0;

  sub_1CCA25030(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1CCA2EE40(int a1, uint64_t a2)
{
  return sub_1CCA2F048(a1, a2, "FMIPBeaconSharingController: Share: %s declined: %s", (uint64_t)&unk_1E88EF8A8, (uint64_t)&unk_1EF9DF408);
}

uint64_t sub_1CCA2EE60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPBeaconShareStateOverride(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1CCA2FE0C;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch();
}

uint64_t sub_1CCA2EEE0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1CCA2FE0C;
  return sub_1CCA29674(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1CCA2EF70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = type metadata accessor for FMIPBeaconShareStateOverride(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 48) & ~v2;
  swift_release();
  swift_release();
  swift_release();
  v4 = v0 + v3;
  v5 = sub_1CCB63604();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v4 + *(int *)(v1 + 20), v5);
  sub_1CCA25030(*(_QWORD *)(v4 + *(int *)(v1 + 24)));
  return swift_deallocObject();
}

uint64_t sub_1CCA2F02C(int a1, uint64_t a2)
{
  return sub_1CCA2F048(a1, a2, "FMIPBeaconSharingController: Share: %s accepted: %s", (uint64_t)&unk_1E88EF948, (uint64_t)&unk_1EF9DF428);
}

uint64_t sub_1CCA2F048(int a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;

  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPBeaconShareStateOverride(0) - 8) + 80);
  return sub_1CCA2A050(a1, a2, *(_QWORD *)(v5 + 16), *(void (**)(_QWORD, _QWORD))(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), v5 + ((v11 + 48) & ~v11), a3, a4, a5);
}

uint64_t sub_1CCA2F0C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = type metadata accessor for FMIPBeaconShareStateOverride(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 40) & ~v2;
  swift_unknownObjectRelease();
  swift_release();
  v4 = v0 + v3;
  v5 = sub_1CCB63604();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v4 + *(int *)(v1 + 20), v5);
  sub_1CCA25030(*(_QWORD *)(v4 + *(int *)(v1 + 24)));
  return swift_deallocObject();
}

uint64_t sub_1CCA2F17C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPBeaconShareStateOverride(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1CCA2FE0C;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch();
}

uint64_t sub_1CCA2F1FC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1CCA2FE0C;
  return sub_1CCA293E4(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1CCA2F28C(int a1, uint64_t a2)
{
  return sub_1CCA2F048(a1, a2, "FMIPBeaconSharingController: Share: %s withdrawn: %s", (uint64_t)&unk_1E88EF9E8, (uint64_t)&unk_1EF9DF448);
}

uint64_t sub_1CCA2F2AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPBeaconShareStateOverride(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1CCA2FE0C;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch();
}

uint64_t sub_1CCA2F328(id *a1)
{
  return sub_1CCA28138(a1) & 1;
}

uint64_t sub_1CCA2F344(uint64_t a1)
{
  uint64_t v1;

  return sub_1CCA27FCC(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1CCA2F360(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1CCAC997C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = *(_QWORD *)(type metadata accessor for FMIPBeaconShareStateOverride(0) - 8);
  v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v14 * a1;
  v16 = v13 + v14 * a1;
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_25;
  v18 = *(_QWORD *)(v4 + 16);
  v19 = v18 - a2;
  if (__OFSUB__(v18, a2))
    goto LABEL_31;
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront();
    }
    v21 = *(_QWORD *)(v4 + 16);
    v22 = __OFADD__(v21, v8);
    v23 = v21 - v7;
    if (!v22)
    {
      *(_QWORD *)(v4 + 16) = v23;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

uint64_t sub_1CCA2F508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPBeaconShareStateOverride(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCA2F54C()
{
  return swift_release();
}

uint64_t sub_1CCA2F554()
{
  return sub_1CCA2F800((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCA2F568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1CCA2F5C8;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t sub_1CCA2F5C8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CCA2F610(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_1CCA2F638(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1CCA2FE0C;
  return sub_1CCA2AC48(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1CCA2F6C8(int a1, uint64_t a2)
{
  return sub_1CCA2F740(a1, a2, "FMIPBeaconSharingController: Stopped sharing for beacon: %s actionStatus: %s", (uint64_t)&unk_1E88EFB98, (uint64_t)&unk_1EF9DF578);
}

uint64_t sub_1CCA2F6E8()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA2F724(int a1, uint64_t a2)
{
  return sub_1CCA2F740(a1, a2, "FMIPBeaconSharingController: Force Stopped sharing for beacon: %s actionStatus: %s", (uint64_t)&unk_1E88EFB70, (uint64_t)&unk_1EF9DF568);
}

uint64_t sub_1CCA2F740(int a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return sub_1CCA2B6D4(a1, a2, *(_QWORD *)(v5 + 16), *(void (**)(uint64_t *, uint64_t))(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), a3, a4, a5);
}

uint64_t sub_1CCA2F778()
{
  return sub_1CCA2F800((void (*)(_QWORD))MEMORY[0x1E0DEEB08], (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1CCA2F78C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1CCA2FE0C;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t sub_1CCA2F7EC()
{
  return sub_1CCA2F800((void (*)(_QWORD))MEMORY[0x1E0DEEB08], (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1CCA2F800(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  swift_unknownObjectRelease();
  a1(*(_QWORD *)(v2 + 32));
  a2(*(_QWORD *)(v2 + 40));
  return swift_deallocObject();
}

uint64_t sub_1CCA2F84C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1CCA2FE0C;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t sub_1CCA2F8B0(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CCA2A6C8(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t (**)(_QWORD, _QWORD))(v2 + 24));
}

uint64_t sub_1CCA2F8C0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCA2F8EC(int a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CCA28CE0(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD, _QWORD, _QWORD))(v2 + 24));
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF5A8);
}

void type metadata accessor for CTFont(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF5B0);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF5B8);
}

void type metadata accessor for CommandError(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF5C0);
}

void type metadata accessor for SecureLocationsStewieServiceState(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF5C8);
}

void type metadata accessor for SPDeviceEventSource(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF5E0);
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1ED8A7F28);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1ED8A7F10);
}

uint64_t sub_1CCA2F998()
{
  return sub_1CC9C23B4(&qword_1EF9DF600, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1CCB66124);
}

uint64_t sub_1CCA2F9C8()
{
  return sub_1CC9C23B4(&qword_1EF9DF608, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1CCB660F8);
}

uint64_t sub_1CCA2F9F8()
{
  return sub_1CC9C23B4(&qword_1EF9DF610, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_1CCB66238);
}

uint64_t sub_1CCA2FA28()
{
  return sub_1CC9C23B4(&qword_1EF9DF618, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_1CCB6620C);
}

uint64_t sub_1CCA2FA58()
{
  return sub_1CC9C23B4(&qword_1EF9DF620, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_1CCB662A8);
}

uint64_t sub_1CCA2FA88()
{
  return sub_1CC9C23B4(&qword_1EF9DF628, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType, (uint64_t)&unk_1CCB66390);
}

uint64_t sub_1CCA2FAB8()
{
  return sub_1CC9C23B4(&qword_1EF9DF630, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType, (uint64_t)&unk_1CCB66364);
}

uint64_t sub_1CCA2FAE8()
{
  return sub_1CC9C23B4(&qword_1EF9DF638, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType, (uint64_t)&unk_1CCB66400);
}

uint64_t sub_1CCA2FB18()
{
  return sub_1CC9C23B4(&qword_1EF9DF640, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconLocationSource, (uint64_t)&unk_1CCB664E8);
}

uint64_t sub_1CCA2FB48()
{
  return sub_1CC9C23B4(&qword_1EF9DF648, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconLocationSource, (uint64_t)&unk_1CCB664BC);
}

uint64_t sub_1CCA2FB78()
{
  return sub_1CC9C23B4(&qword_1EF9DF650, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconLocationSource, (uint64_t)&unk_1CCB66558);
}

uint64_t sub_1CCA2FBA8()
{
  return sub_1CC9C23B4(&qword_1EF9DF658, 255, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB6667C);
}

uint64_t sub_1CCA2FBD8()
{
  return sub_1CC9C23B4(&qword_1EF9DF660, 255, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB666A8);
}

uint64_t sub_1CCA2FC08()
{
  return sub_1CC9C23B4(&qword_1EF9DF668, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1CCB66810);
}

uint64_t sub_1CCA2FC38()
{
  return sub_1CC9C23B4(&qword_1EF9DF670, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1CCB667B8);
}

uint64_t sub_1CCA2FC68()
{
  return sub_1CC9C23B4(&qword_1EF9DF678, 255, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB66764);
}

uint64_t sub_1CCA2FC98()
{
  return sub_1CC9C23B4(&qword_1EF9DF680, 255, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB66730);
}

uint64_t sub_1CCA2FCC8()
{
  return sub_1CC9C23B4(&qword_1EF9DF688, 255, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB666EC);
}

uint64_t sub_1CCA2FCF8()
{
  return sub_1CC9C23B4(&qword_1EF9DF690, 255, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_1CCB668FC);
}

void _s3__C4CodeOMa_2(uint64_t a1)
{
  sub_1CC9F225C(a1, &qword_1EF9DF6F8);
}

uint64_t sub_1CCA2FD3C()
{
  return sub_1CC9C23B4(&qword_1EF9DF698, 255, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_1CCB668C0);
}

uint64_t sub_1CCA2FD6C()
{
  return sub_1CC9C23B4(&qword_1EF9DF6A0, 255, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_1CCB66938);
}

uint64_t sub_1CCA2FD9C()
{
  return sub_1CC9C23B4((unint64_t *)&unk_1EF9DF6A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB66854);
}

uint64_t sub_1CCA2FDCC()
{
  return sub_1CC9C23B4((unint64_t *)&unk_1ED8A7F00, 255, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1CCB66194);
}

uint64_t FMIPConnectAction.enabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore17FMIPConnectAction_enabled);
}

uint64_t FMIPConnectAction.__allocating_init(device:enabled:)(uint64_t a1, char a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  FMIPConnectAction.init(device:enabled:)(a1, a2);
  return v4;
}

uint64_t FMIPConnectAction.init(device:enabled:)(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  *(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore17FMIPConnectAction_enabled) = a2;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext) = 0;
  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_username);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
  *v7 = 0;
  v7[1] = 0;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession) = xmmword_1CCB66A50;
  sub_1CC9F73E8(a1, v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  return v2;
}

uint64_t static FMIPConnectAction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore17FMIPConnectAction_enabled) == *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC8FMIPCore17FMIPConnectAction_enabled))
    return static FMIPDevice.== infix(_:_:)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  else
    return 0;
}

uint64_t sub_1CCA2FFAC()
{
  uint64_t v0;

  v0 = sub_1CCA65078();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

void FMIPConnectAction.__allocating_init(device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPConnectAction.init(device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t FMIPConnectAction.__deallocating_deinit()
{
  FMIPDeviceAction.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA300FC(_QWORD *a1, _QWORD *a2)
{
  if (*(unsigned __int8 *)(*a1 + OBJC_IVAR____TtC8FMIPCore17FMIPConnectAction_enabled) == *(unsigned __int8 *)(*a2 + OBJC_IVAR____TtC8FMIPCore17FMIPConnectAction_enabled))
    return static FMIPDevice.== infix(_:_:)(*a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  else
    return 0;
}

uint64_t sub_1CCA3013C()
{
  return type metadata accessor for FMIPConnectAction();
}

uint64_t type metadata accessor for FMIPConnectAction()
{
  uint64_t result;

  result = qword_1EF9DF788;
  if (!qword_1EF9DF788)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA30180()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for FMIPConnectAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPConnectAction.__allocating_init(device:enabled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 360))();
}

uint64_t FMIPItemAction.item.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1CCA301E8(v1 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, a1);
}

uint64_t sub_1CCA301E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t FMIPItemAction.__allocating_init(item:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1CCA30298(a1, v2 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item);
  return v2;
}

uint64_t FMIPItemAction.init(item:)(uint64_t a1)
{
  uint64_t v1;

  sub_1CCA30298(a1, v1 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item);
  return v1;
}

uint64_t sub_1CCA30298(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t FMIPItemAction.deinit()
{
  uint64_t v0;

  sub_1CCA30300(v0 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item);
  return v0;
}

uint64_t sub_1CCA30300(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FMIPItem();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t FMIPItemAction.__deallocating_deinit()
{
  uint64_t v0;

  sub_1CCA30300(v0 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item);
  return swift_deallocClassInstance();
}

uint64_t FMIPItemAction.debugDescription.getter()
{
  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CC9E6BA4();
  sub_1CCB63A9C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  type metadata accessor for FMIPItem();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 60;
}

uint64_t sub_1CCA30524()
{
  return FMIPItemAction.debugDescription.getter();
}

uint64_t sub_1CCA30544()
{
  return type metadata accessor for FMIPItemAction();
}

uint64_t type metadata accessor for FMIPItemAction()
{
  uint64_t result;

  result = qword_1EF9DF948;
  if (!qword_1EF9DF948)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA30588()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FMIPItem();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for FMIPItemAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPItemAction.__allocating_init(item:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t FMIPSafeLocationType.sortOrder.getter()
{
  _BYTE *v0;

  if (*v0)
    return 1;
  else
    return 100;
}

FMIPCore::FMIPSafeLocationType_optional __swiftcall FMIPSafeLocationType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (FMIPCore::FMIPSafeLocationType_optional)rawValue;
}

uint64_t FMIPSafeLocationType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

BOOL sub_1CCA30640(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

_QWORD *sub_1CCA30658@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_1CCA30678(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

FMIPCore::FMIPSafeLocationApprovalState_optional __swiftcall FMIPSafeLocationApprovalState.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 4;
  if ((unint64_t)rawValue < 4)
    v2 = rawValue;
  *v1 = v2;
  return (FMIPCore::FMIPSafeLocationApprovalState_optional)rawValue;
}

uint64_t FMIPSafeLocationApprovalState.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

FMIPCore::FMIPSafeLocationApprovalState_optional sub_1CCA306A0(Swift::Int *a1)
{
  return FMIPSafeLocationApprovalState.init(rawValue:)(*a1);
}

uint64_t FMIPSafeLocation.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

id FMIPSafeLocation.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v5;
  uint64_t v6;

  v2 = *(_BYTE *)(v1 + 17);
  v3 = *(_BYTE *)(v1 + 18);
  v4 = *(_BYTE *)(v1 + 19);
  v5 = *(void **)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_BYTE *)(a1 + 3) = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  return v5;
}

uint64_t FMIPSafeLocation.address.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[296];

  sub_1CCA30754(v1 + 40, (uint64_t)v4);
  sub_1CCA30754((uint64_t)v4, a1);
  return sub_1CCA307F0((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
}

uint64_t sub_1CCA30754(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A71C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t FMIPSafeLocation.address.setter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[288];
  _BYTE v4[296];

  sub_1CCA30754(a1, (uint64_t)v3);
  sub_1CCA30754(v1 + 40, (uint64_t)v4);
  sub_1CCA307F0((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
  return sub_1CCA30754((uint64_t)v3, v1 + 40);
}

uint64_t sub_1CCA307F0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v5 = *(_OWORD *)(a1 + 240);
  v6 = *(_OWORD *)(a1 + 256);
  v4 = *(_OWORD *)(a1 + 208);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    *(_QWORD *)(a1 + 272),
    *(_QWORD *)(a1 + 280));
  return a1;
}

uint64_t (*FMIPSafeLocation.address.modify())()
{
  return nullsub_1;
}

void FMIPSafeLocation.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 328);
}

void FMIPSafeLocation.approvalState.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 329);
}

uint64_t FMIPSafeLocation.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 336);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1CCA308C8(char *a1)
{
  sub_1CCB1D27C(*a1);
}

void sub_1CCA308D4()
{
  char *v0;

  sub_1CCB02848(*v0);
}

void sub_1CCA308DC()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCA30918()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCA309A4(uint64_t a1)
{
  char *v1;

  sub_1CCB032A8(a1, *v1);
}

uint64_t sub_1CCA309AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCA336F0();
  *a1 = result;
  return result;
}

uint64_t sub_1CCA309D8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCA30A08 + 4 * byte_1CCB66B46[*v0]))();
}

void sub_1CCA30A08(_QWORD *a1@<X8>)
{
  *a1 = 0x696669746E656469;
  a1[1] = 0xEA00000000007265;
}

void sub_1CCA30A28(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6F697461636F6CLL;
  a1[1] = 0xE800000000000000;
}

void sub_1CCA30A44(_QWORD *a1@<X8>)
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
}

void sub_1CCA30A58(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "approvalState");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_1CCA30A80(_QWORD *a1@<X8>)
{
  *a1 = 1701667182;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1CCA30A94()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA30AC4 + 4 * byte_1CCB66B4C[*v0]))(0x73736572646461, 0xE700000000000000);
}

uint64_t sub_1CCA30AC4()
{
  return 0x696669746E656469;
}

uint64_t sub_1CCA30AE0()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1CCA30AF8()
{
  return 1701869940;
}

uint64_t sub_1CCA30B08()
{
  return 0x6C61766F72707061;
}

uint64_t sub_1CCA30B2C()
{
  return 1701667182;
}

uint64_t sub_1CCA30B3C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCA336F0();
  *a1 = result;
  return result;
}

void sub_1CCA30B60(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1CCA30B6C()
{
  sub_1CCA32264();
  return sub_1CCB643D8();
}

uint64_t sub_1CCA30B94()
{
  sub_1CCA32264();
  return sub_1CCB643E4();
}

uint64_t FMIPSafeLocation.init(safeLocation:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  double v12;
  char v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  BOOL v27;
  void *v28;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  id v34;
  void *v35;
  _QWORD v36[44];
  _QWORD v37[2];
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  char v41;
  id v42;
  uint64_t v43;
  _BYTE v44[296];
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[295];
  char v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  char v52;
  id v53;
  uint64_t v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  char v58;
  id v59;
  uint64_t v60;
  _BYTE v61[312];
  _OWORD v62[18];

  v35 = a2;
  v3 = sub_1CCB63604();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA30EF4(v62);
  sub_1CCA30754((uint64_t)v62, (uint64_t)v61);
  v7 = a1;
  v8 = objc_msgSend(v7, sel_location);
  v48 = 4;
  v9 = objc_msgSend(v7, sel_location);
  v10 = objc_msgSend(v9, sel_floor);

  if (v10)
  {
    v11 = objc_msgSend(v10, sel_level);

    v12 = (double)(uint64_t)v11;
  }
  else
  {
    v12 = -1.0;
  }
  sub_1CC9FB3D4(v8, &v48, 1, 0, 1, (uint64_t)&v49, v12);

  v13 = v52;
  v14 = v54;
  v32 = v50;
  v33 = v49;
  v55 = v49;
  v56 = v50;
  v31 = v51;
  v57 = v51;
  v58 = v52;
  v59 = v53;
  v60 = v54;
  v34 = v53;
  v15 = objc_msgSend(v7, sel_identifier);
  sub_1CCB635EC();

  v16 = sub_1CCB635C8();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_1CCA30754((uint64_t)v61, (uint64_t)v47);
  swift_bridgeObjectRetain();
  sub_1CCA307F0((uint64_t)v47, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
  v19 = objc_msgSend(v7, sel_type);
  v20 = objc_msgSend(v7, sel_approvalState);
  v21 = objc_msgSend(v7, sel_name);
  if (v21)
  {
    v22 = v21;
    v23 = sub_1CCB63988();
    v25 = v24;

  }
  else
  {

    v23 = 0;
    v25 = 0;
  }
  if ((unint64_t)v20 >= 4)
    v26 = 0;
  else
    v26 = (char)v20;
  v36[0] = v16;
  v36[1] = v18;
  v27 = v19 == (id)1;
  LOBYTE(v36[2]) = v33;
  BYTE1(v36[2]) = v32;
  BYTE2(v36[2]) = v31;
  BYTE3(v36[2]) = v13;
  v28 = v34;
  v36[3] = v34;
  v36[4] = v14;
  sub_1CCA30754((uint64_t)v62, (uint64_t)&v36[5]);
  LOBYTE(v36[41]) = v27;
  BYTE1(v36[41]) = v26;
  v36[42] = v23;
  v36[43] = v25;
  sub_1CCA31D3C((uint64_t)v36);
  swift_bridgeObjectRelease();

  memcpy(v35, v36, 0x160uLL);
  v37[0] = v16;
  v37[1] = v18;
  v38 = v55;
  v39 = v56;
  v40 = v57;
  v41 = v58;
  v42 = v59;
  v43 = v60;
  sub_1CCA30754((uint64_t)v62, (uint64_t)v44);
  v44[288] = v27;
  v44[289] = v26;
  v45 = v23;
  v46 = v25;
  return sub_1CCA31E98((uint64_t)v37);
}

double sub_1CCA30EF4(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void *FMIPSafeLocation.init(location:identifier:address:type:approvalState:)@<X0>(void *__src@<X3>, char *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, _BYTE *a5@<X4>, _BYTE *a6@<X5>, void *a7@<X8>)
{
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE __dst[288];
  _QWORD __srca[45];

  v12 = *a2;
  v13 = a2[1];
  v14 = a2[2];
  v15 = a2[3];
  v16 = *((_QWORD *)a2 + 1);
  v17 = *((_QWORD *)a2 + 2);
  memcpy(__dst, __src, sizeof(__dst));
  LOBYTE(a5) = *a5;
  LOBYTE(a6) = *a6;
  nullsub_1(__dst);
  __srca[0] = a3;
  __srca[1] = a4;
  LOBYTE(__srca[2]) = v12;
  BYTE1(__srca[2]) = v13;
  BYTE2(__srca[2]) = v14;
  BYTE3(__srca[2]) = v15;
  __srca[3] = v16;
  __srca[4] = v17;
  sub_1CCA30754((uint64_t)__dst, (uint64_t)&__srca[5]);
  LOBYTE(__srca[41]) = (_BYTE)a5;
  BYTE1(__srca[41]) = (_BYTE)a6;
  __srca[43] = 0;
  __srca[42] = 0;
  return memcpy(a7, __srca, 0x160uLL);
}

void *FMIPSafeLocation.init(safeLocation:newLocation:)@<X0>(void *__src@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  char v4;
  char v5;
  char v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;
  char v16;
  char v17;
  _QWORD __dst[44];
  _QWORD __srca[45];

  memcpy(__dst, __src, sizeof(__dst));
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = (void *)*((_QWORD *)a2 + 1);
  v9 = *((_QWORD *)a2 + 2);
  v10 = __dst[0];
  v11 = __dst[1];
  v16 = BYTE1(__dst[41]);
  v17 = __dst[41];
  v12 = __dst[43];
  v15 = __dst[42];
  swift_bridgeObjectRetain();
  sub_1CCA307F0((uint64_t)&__dst[5], (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCA307F0((uint64_t)&__dst[5], (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
  swift_bridgeObjectRetain();
  v13 = v8;
  sub_1CCA31E98((uint64_t)__dst);
  __srca[0] = v10;
  __srca[1] = v11;
  LOBYTE(__srca[2]) = v4;
  BYTE1(__srca[2]) = v5;
  BYTE2(__srca[2]) = v6;
  BYTE3(__srca[2]) = v7;
  __srca[3] = v13;
  __srca[4] = v9;
  sub_1CCA30754((uint64_t)&__dst[5], (uint64_t)&__srca[5]);
  LOBYTE(__srca[41]) = v17;
  BYTE1(__srca[41]) = v16;
  __srca[42] = v15;
  __srca[43] = v12;
  sub_1CCA31D3C((uint64_t)__srca);
  swift_bridgeObjectRelease();
  sub_1CCA307F0((uint64_t)&__dst[5], (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
  swift_bridgeObjectRelease();

  sub_1CCA31E98((uint64_t)__srca);
  return memcpy(a3, __srca, 0x160uLL);
}

void *FMIPSafeLocation.init(identifier:label:location:placemark:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  double v15;
  double v16;
  id v17;
  void *v18;
  id v19;
  double v20;
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _BYTE v35[288];
  _BYTE v36[288];
  _BYTE v37[288];
  _QWORD v38[44];
  char v39;
  _BYTE v40[8];
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[312];
  _OWORD v44[18];

  v30 = a6;
  v31 = a1;
  v32 = a2;
  v33 = a3;
  v34 = a7;
  v9 = sub_1CCB635B0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA30EF4(v44);
  sub_1CCA30754((uint64_t)v44, (uint64_t)v43);
  v39 = 4;
  v13 = a5;
  v14 = objc_msgSend(v13, sel_timestamp);
  sub_1CCB63580();

  sub_1CCB6355C();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v17 = objc_msgSend(v13, sel_floor);
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, sel_level);

    v20 = (double)(uint64_t)v19;
  }
  else
  {
    v20 = -1.0;
  }
  sub_1CC9FB3D4(v13, &v39, v16 < -3600.0, 0, 1, (uint64_t)v40, v20);
  v21 = v40[0];
  v22 = v40[1];
  v23 = v40[2];
  v24 = v40[3];
  v25 = v41;
  v26 = v42;
  swift_bridgeObjectRetain();
  v27 = v33;
  FMIPAddress.init(label:placemark:)(v30, v33, a4, v38);

  memcpy(v35, v38, sizeof(v35));
  memcpy(v36, v35, sizeof(v36));
  nullsub_1(v36);
  sub_1CCA30754((uint64_t)v43, (uint64_t)v37);
  v28 = v32;
  swift_bridgeObjectRetain();
  sub_1CCA31FF8((uint64_t)v35);
  sub_1CCA307F0((uint64_t)v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
  v38[0] = v31;
  v38[1] = v28;
  LOBYTE(v38[2]) = v21;
  BYTE1(v38[2]) = v22;
  BYTE2(v38[2]) = v23;
  BYTE3(v38[2]) = v24;
  v38[3] = v25;
  v38[4] = v26;
  sub_1CCA30754((uint64_t)v36, (uint64_t)&v38[5]);
  LOWORD(v38[41]) = 256;
  v38[42] = v27;
  v38[43] = a4;
  sub_1CCA31D3C((uint64_t)v38);
  sub_1CCA32130((uint64_t)v35);
  swift_bridgeObjectRelease();
  sub_1CCA31E98((uint64_t)v38);
  return memcpy(v34, v38, 0x160uLL);
}

uint64_t FMIPSafeLocation.init(from:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  BOOL v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  id v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD v34[44];
  id v35[44];
  _BYTE v36[296];
  uint64_t v37;
  _QWORD v38[44];
  _OWORD v39[18];

  v32 = sub_1CCA14E90(&qword_1EF9DF9D0);
  v5 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA30EF4(v39);
  v33 = &v38[5];
  sub_1CCA30754((uint64_t)v39, (uint64_t)&v38[5]);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA32264();
  sub_1CCB643B4();
  if (v2)
  {
    v9 = v33;
    sub_1CCA01CA0((uint64_t)a1);
    sub_1CCA30754((uint64_t)v9, (uint64_t)v35);
    return sub_1CCA307F0((uint64_t)v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
  }
  else
  {
    v8 = v5;
    v31 = a2;
    LOBYTE(v35[0]) = 1;
    v11 = sub_1CCB64150();
    v13 = v12;
    v38[0] = v11;
    v38[1] = v12;
    v36[295] = 0;
    sub_1CCA178E4();
    swift_bridgeObjectRetain();
    sub_1CCB64144();
    sub_1CCA30754((uint64_t)&v37, (uint64_t)v36);
    sub_1CCA30754((uint64_t)v36, (uint64_t)v33);
    LOBYTE(v34[0]) = 2;
    sub_1CCA307F0((uint64_t)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
    sub_1CCA162BC();
    sub_1CCB64180();
    v14 = BYTE3(v35[0]);
    v15 = v35[2];
    v28 = BYTE1(v35[0]);
    v29 = LOBYTE(v35[0]);
    LODWORD(v38[2]) = v35[0];
    v27 = BYTE2(v35[0]);
    v38[3] = v35[1];
    v38[4] = v35[2];
    LOBYTE(v35[0]) = 5;
    v30 = v35[1];
    v16 = sub_1CCB64120();
    v26 = v14;
    v38[42] = v16;
    v38[43] = v17;
    LOBYTE(v35[0]) = 3;
    v25 = v16;
    v18 = v17;
    swift_bridgeObjectRetain();
    v19 = sub_1CCB64174();
    v24 = v18;
    v20 = v19 == 1;
    LOBYTE(v38[41]) = v19 == 1;
    LOBYTE(v35[0]) = 4;
    v21 = sub_1CCB64174();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v32);
    if (v21 >= 4)
      LOBYTE(v21) = 0;
    BYTE1(v38[41]) = v21;
    v34[0] = v11;
    v34[1] = v13;
    LOBYTE(v34[2]) = v29;
    BYTE1(v34[2]) = v28;
    BYTE2(v34[2]) = v27;
    BYTE3(v34[2]) = v26;
    v22 = v20;
    v23 = v30;
    v34[3] = v30;
    v34[4] = v15;
    sub_1CCA30754((uint64_t)v36, (uint64_t)&v34[5]);
    LOBYTE(v34[41]) = v22;
    BYTE1(v34[41]) = v21;
    v34[42] = v25;
    v34[43] = v24;
    sub_1CCA31D3C((uint64_t)v34);
    swift_bridgeObjectRelease();
    sub_1CCA307F0((uint64_t)v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
    swift_bridgeObjectRelease();

    memcpy(v31, v34, 0x160uLL);
    sub_1CCA01CA0((uint64_t)a1);
    memcpy(v35, v38, sizeof(v35));
    return sub_1CCA31E98((uint64_t)v35);
  }
}

uint64_t FMIPSafeLocation.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[296];

  v3 = sub_1CCA14E90(&qword_1EF9DF9E0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *v1;
  v7 = *((unsigned __int8 *)v1 + 16);
  v25 = *((unsigned __int8 *)v1 + 17);
  v26 = v7;
  v8 = *((unsigned __int8 *)v1 + 18);
  v23 = *((unsigned __int8 *)v1 + 19);
  v24 = v8;
  v22 = v1[3];
  v9 = v1[4];
  sub_1CCA30754((uint64_t)(v1 + 5), (uint64_t)v33);
  v21 = *((unsigned __int8 *)v1 + 328);
  v20 = *((unsigned __int8 *)v1 + 329);
  v10 = v1[43];
  v18 = v1[42];
  v19 = v10;
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA32264();
  v11 = v6;
  sub_1CCB643CC();
  LOBYTE(v30) = 1;
  v12 = v28;
  sub_1CCB641E0();
  if (!v12)
  {
    v14 = v24;
    v13 = v25;
    v15 = v26;
    sub_1CCA30754((uint64_t)v33, (uint64_t)&v30);
    v29 = 0;
    sub_1CCA14E90(&qword_1ED8A71C0);
    sub_1CCA322A8();
    sub_1CCB64210();
    LOBYTE(v30) = v15;
    BYTE1(v30) = v13;
    BYTE2(v30) = v14;
    BYTE3(v30) = v23;
    v31 = v22;
    v32 = v9;
    v29 = 2;
    sub_1CCA23468();
    sub_1CCB64210();
    LOBYTE(v30) = 3;
    sub_1CCB64204();
    LOBYTE(v30) = 4;
    sub_1CCB64204();
    v30 = v18;
    v31 = v19;
    v29 = 5;
    sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
    sub_1CCA008E8();
    sub_1CCB64210();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
}

uint64_t FMIPSafeLocation.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t FMIPSafeLocation.hashValue.getter()
{
  sub_1CCB6433C();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA31C20@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  return FMIPSafeLocation.init(from:)(a1, a2);
}

uint64_t sub_1CCA31C34(_QWORD *a1)
{
  return FMIPSafeLocation.encode(to:)(a1);
}

uint64_t sub_1CCA31C4C()
{
  sub_1CCB6433C();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA31CA4()
{
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA31CE8()
{
  sub_1CCB6433C();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA31D3C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(void **)(a1 + 24);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 120);
  v16 = *(_OWORD *)(a1 + 104);
  v13 = *(_OWORD *)(a1 + 152);
  v14 = *(_OWORD *)(a1 + 136);
  v11 = *(_OWORD *)(a1 + 184);
  v12 = *(_OWORD *)(a1 + 168);
  v10 = *(_OWORD *)(a1 + 200);
  swift_bridgeObjectRetain();
  v8 = v2;
  sub_1CCA15608(v19, v18, v17, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1CCA31E98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v13 = *(_OWORD *)(a1 + 120);
  v14 = *(_OWORD *)(a1 + 104);
  v11 = *(_OWORD *)(a1 + 152);
  v12 = *(_OWORD *)(a1 + 136);
  v9 = *(_OWORD *)(a1 + 184);
  v10 = *(_OWORD *)(a1 + 168);
  v8 = *(_OWORD *)(a1 + 200);

  swift_bridgeObjectRelease();
  sub_1CCA15768(v17, v16, v15, v2, v3, v4, v5, v6, v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v9,
    *((uint64_t *)&v9 + 1),
    v8,
    *((uint64_t *)&v8 + 1));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1CCA31FF8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1CCA32130(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1CCA32264()
{
  unint64_t result;

  result = qword_1EF9DF9D8;
  if (!qword_1EF9DF9D8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB66EEC, &type metadata for FMIPSafeLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DF9D8);
  }
  return result;
}

unint64_t sub_1CCA322A8()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1ED8A71C8;
  if (!qword_1ED8A71C8)
  {
    v1 = sub_1CCA19B38(&qword_1ED8A71C0);
    v2 = sub_1CCA243E4();
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1ED8A71C8);
  }
  return result;
}

uint64_t _s8FMIPCore16FMIPSafeLocationV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  double v27;
  char v28;
  char v29;
  char v30;
  char v31;
  _QWORD v32[36];
  _BYTE v33[288];
  _BYTE __dst[288];
  _BYTE v35[288];
  _QWORD __src[36];
  double v37[36];
  uint64_t v38;
  double v39[36];
  _BYTE v40[288];
  _BYTE v41[296];

  v4 = *a1;
  v5 = a1[1];
  v30 = *((_BYTE *)a1 + 17);
  v31 = *((_BYTE *)a1 + 16);
  v28 = *((_BYTE *)a1 + 19);
  v29 = *((_BYTE *)a1 + 18);
  v27 = *((double *)a1 + 3);
  v6 = *((double *)a1 + 4);
  sub_1CCA30754((uint64_t)(a1 + 5), (uint64_t)v40);
  v26 = *((unsigned __int8 *)a1 + 328);
  v24 = *((unsigned __int8 *)a1 + 329);
  v21 = a1[42];
  v22 = a1[43];
  v7 = *a2;
  v8 = a2[1];
  v9 = *((_BYTE *)a2 + 16);
  v10 = *((_BYTE *)a2 + 17);
  v11 = *((_BYTE *)a2 + 18);
  v12 = *((_BYTE *)a2 + 19);
  v13 = *((double *)a2 + 3);
  v14 = *((double *)a2 + 4);
  sub_1CCA30754((uint64_t)(a2 + 5), (uint64_t)v41);
  v25 = *((unsigned __int8 *)a2 + 328);
  v23 = *((unsigned __int8 *)a2 + 329);
  v15 = a2[42];
  v16 = a2[43];
  v20 = v15;
  if (v4 == v7 && v5 == v8 || (v17 = sub_1CCB642A0(), result = 0, (v17 & 1) != 0))
  {
    LOBYTE(v37[0]) = v31;
    BYTE1(v37[0]) = v30;
    BYTE2(v37[0]) = v29;
    BYTE3(v37[0]) = v28;
    v37[1] = v27;
    v37[2] = v6;
    LOBYTE(v39[0]) = v9;
    BYTE1(v39[0]) = v10;
    BYTE2(v39[0]) = v11;
    BYTE3(v39[0]) = v12;
    v39[1] = v13;
    v39[2] = v14;
    if ((_s8FMIPCore12FMIPLocationV2eeoiySbAC_ACtFZ_0(v37, v39) & 1) != 0)
    {
      sub_1CCA30754((uint64_t)v40, (uint64_t)v39);
      if (sub_1CCA33738((uint64_t)v39) == 1)
      {
        sub_1CCA30754((uint64_t)v41, (uint64_t)v37);
        if (sub_1CCA33738((uint64_t)v37) == 1)
          goto LABEL_12;
        goto LABEL_10;
      }
      sub_1CCA30754((uint64_t)v40, (uint64_t)__src);
      sub_1CCA30754((uint64_t)v41, (uint64_t)v37);
      if (sub_1CCA33738((uint64_t)v37) == 1)
      {
        memcpy(__dst, __src, sizeof(__dst));
        sub_1CCA30754((uint64_t)v40, (uint64_t)v35);
        sub_1CCA31FF8((uint64_t)v35);
        sub_1CCA31FF8((uint64_t)v35);
        sub_1CCA32130((uint64_t)__dst);
LABEL_10:
        sub_1CCA30754((uint64_t)v40, (uint64_t)v37);
        sub_1CCA30754((uint64_t)v41, (uint64_t)&v38);
        sub_1CCA307F0((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
        sub_1CCA33750((uint64_t)v37);
        return 0;
      }
      sub_1CCA30754((uint64_t)v41, (uint64_t)v33);
      memcpy(v32, v33, sizeof(v32));
      v19 = _s8FMIPCore11FMIPAddressV2eeoiySbAC_ACtFZ_0(__src, v32);
      memcpy(__dst, __src, sizeof(__dst));
      sub_1CCA30754((uint64_t)v40, (uint64_t)v35);
      sub_1CCA31FF8((uint64_t)v35);
      sub_1CCA32130((uint64_t)__dst);
      if ((v19 & 1) != 0)
      {
LABEL_12:
        if (v26 == v25 && v24 == v23)
        {
          if (v22)
          {
            if (v16 && (v21 == v20 && v22 == v16 || (sub_1CCB642A0() & 1) != 0))
              return 1;
          }
          else if (!v16)
          {
            return 1;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_1CCA32600()
{
  unint64_t result;

  result = qword_1EF9DF9E8;
  if (!qword_1EF9DF9E8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPSafeLocationType, &type metadata for FMIPSafeLocationType);
    atomic_store(result, (unint64_t *)&qword_1EF9DF9E8);
  }
  return result;
}

unint64_t sub_1CCA32648()
{
  unint64_t result;

  result = qword_1EF9DF9F0;
  if (!qword_1EF9DF9F0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPSafeLocationApprovalState, &type metadata for FMIPSafeLocationApprovalState);
    atomic_store(result, (unint64_t *)&qword_1EF9DF9F0);
  }
  return result;
}

unint64_t sub_1CCA32690()
{
  unint64_t result;

  result = qword_1EF9DF9F8;
  if (!qword_1EF9DF9F8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPSafeLocation, &type metadata for FMIPSafeLocation);
    atomic_store(result, (unint64_t *)&qword_1EF9DF9F8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPSafeLocationType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPSafeLocationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCA327B0 + 4 * byte_1CCB66B57[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCA327E4 + 4 * byte_1CCB66B52[v4]))();
}

uint64_t sub_1CCA327E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA327EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA327F4);
  return result;
}

uint64_t sub_1CCA32800(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA32808);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCA3280C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA32814(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1CCA32820(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPSafeLocationType()
{
  return &type metadata for FMIPSafeLocationType;
}

uint64_t getEnumTagSinglePayload for FMIPBatteryStatus(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPSafeLocationApprovalState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CCA32918 + 4 * byte_1CCB66B61[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CCA3294C + 4 * byte_1CCB66B5C[v4]))();
}

uint64_t sub_1CCA3294C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA32954(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA3295CLL);
  return result;
}

uint64_t sub_1CCA32968(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA32970);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CCA32974(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA3297C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPSafeLocationApprovalState()
{
  return &type metadata for FMIPSafeLocationApprovalState;
}

uint64_t destroy for FMIPSafeLocation(uint64_t a1)
{
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(a1 + 208))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FMIPSafeLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v5;
  v7 = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  v8 = v6;
  if (v7)
  {
    v9 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v9;
    v10 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v10;
    v11 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v11;
    v12 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v12;
    v13 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v13;
    v14 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v14;
    v15 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v15;
    v16 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v16;
    v17 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v17;
    v18 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v18;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v7;
    v19 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = v19;
    v20 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = v20;
    v21 = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = v21;
    v22 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = v22;
    v23 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = v23;
    v24 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 304) = v24;
    v25 = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 320) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x120uLL);
  }
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  v26 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v26;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FMIPSafeLocation(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  v4 = *(void **)(a2 + 24);
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 208);
  if (!*(_QWORD *)(a1 + 208))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x120uLL);
    goto LABEL_8;
  }
  if (!v7)
  {
    sub_1CCA331A4(a1 + 40);
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1CCA331A4(uint64_t a1)
{
  destroy for FMIPAddress();
  return a1;
}

void *initializeWithTake for FMIPSafeLocation(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x160uLL);
}

uint64_t assignWithTake for FMIPSafeLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 208))
    goto LABEL_5;
  if (!*(_QWORD *)(a2 + 208))
  {
    sub_1CCA331A4(a1 + 40);
LABEL_5:
    memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x120uLL);
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v15;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v17;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v18;
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v19;
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v20;
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = v21;
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = v22;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  v23 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPSafeLocation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 352))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPSafeLocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 344) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 352) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 352) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPSafeLocation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPSafeLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CCA33598 + 4 * byte_1CCB66B6B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CCA335CC + 4 * byte_1CCB66B66[v4]))();
}

uint64_t sub_1CCA335CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA335D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA335DCLL);
  return result;
}

uint64_t sub_1CCA335E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA335F0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CCA335F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA335FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPSafeLocation.CodingKeys()
{
  return &type metadata for FMIPSafeLocation.CodingKeys;
}

unint64_t sub_1CCA3361C()
{
  unint64_t result;

  result = qword_1EF9DFA00;
  if (!qword_1EF9DFA00)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB66EC4, &type metadata for FMIPSafeLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFA00);
  }
  return result;
}

unint64_t sub_1CCA33664()
{
  unint64_t result;

  result = qword_1EF9DFA08;
  if (!qword_1EF9DFA08)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB66DFC, &type metadata for FMIPSafeLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFA08);
  }
  return result;
}

unint64_t sub_1CCA336AC()
{
  unint64_t result;

  result = qword_1EF9DFA10;
  if (!qword_1EF9DFA10)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB66E24, &type metadata for FMIPSafeLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFA10);
  }
  return result;
}

uint64_t sub_1CCA336F0()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

uint64_t sub_1CCA33738(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 168);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1CCA33750(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 296);
  v17 = *(_QWORD *)(a1 + 288);
  v3 = *(_QWORD *)(a1 + 304);
  v4 = *(_QWORD *)(a1 + 312);
  v5 = *(_QWORD *)(a1 + 320);
  v6 = *(_QWORD *)(a1 + 328);
  v7 = *(_QWORD *)(a1 + 336);
  v8 = *(_QWORD *)(a1 + 344);
  v15 = *(_OWORD *)(a1 + 368);
  v16 = *(_OWORD *)(a1 + 352);
  v13 = *(_OWORD *)(a1 + 400);
  v14 = *(_OWORD *)(a1 + 384);
  v11 = *(_OWORD *)(a1 + 432);
  v12 = *(_OWORD *)(a1 + 416);
  v10 = *(_OWORD *)(a1 + 448);
  sub_1CCA15768(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168));
  sub_1CCA15768(v17, v2, v3, v4, v5, v6, v7, v8, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1));
  return a1;
}

uint64_t FMIPItemGroupAction.itemGroup.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1CCA33904(v1 + OBJC_IVAR____TtC8FMIPCore19FMIPItemGroupAction_itemGroup, a1);
}

uint64_t sub_1CCA33904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPItemGroup();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t FMIPItemGroupAction.__allocating_init(itemGroup:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1CCA339B4(a1, v2 + OBJC_IVAR____TtC8FMIPCore19FMIPItemGroupAction_itemGroup);
  return v2;
}

uint64_t FMIPItemGroupAction.init(itemGroup:)(uint64_t a1)
{
  uint64_t v1;

  sub_1CCA339B4(a1, v1 + OBJC_IVAR____TtC8FMIPCore19FMIPItemGroupAction_itemGroup);
  return v1;
}

uint64_t sub_1CCA339B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPItemGroup();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t FMIPItemGroupAction.deinit()
{
  uint64_t v0;

  sub_1CCA33A1C(v0 + OBJC_IVAR____TtC8FMIPCore19FMIPItemGroupAction_itemGroup);
  return v0;
}

uint64_t sub_1CCA33A1C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FMIPItemGroup();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t FMIPItemGroupAction.__deallocating_deinit()
{
  uint64_t v0;

  sub_1CCA33A1C(v0 + OBJC_IVAR____TtC8FMIPCore19FMIPItemGroupAction_itemGroup);
  return swift_deallocClassInstance();
}

uint64_t FMIPItemGroupAction.description.getter()
{
  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CC9E6BA4();
  sub_1CCB63A9C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 60;
}

uint64_t sub_1CCA33C34()
{
  return FMIPItemGroupAction.description.getter();
}

uint64_t sub_1CCA33C54()
{
  return type metadata accessor for FMIPItemGroupAction();
}

uint64_t type metadata accessor for FMIPItemGroupAction()
{
  uint64_t result;

  result = qword_1EF9DFA40;
  if (!qword_1EF9DFA40)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA33C98()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FMIPItemGroup();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for FMIPItemGroupAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPItemGroupAction.__allocating_init(itemGroup:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t FMIPItemRole.identifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t FMIPItemRole.emoji.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPItemRole.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1CCA33D78(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CCB1DEF0(*a1, *a2);
}

uint64_t sub_1CCA33D84()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA33E1C()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA33E90()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA33F24@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCA34B30();
  *a1 = result;
  return result;
}

void sub_1CCA33F50(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEA00000000007265;
  v4 = 0xE500000000000000;
  v5 = 0x696A6F6D65;
  if (v2 != 1)
  {
    v5 = 1701667182;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x696669746E656469;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1CCA33FA8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x696A6F6D65;
  if (*v0 != 1)
    v1 = 1701667182;
  if (*v0)
    return v1;
  else
    return 0x696669746E656469;
}

uint64_t sub_1CCA33FFC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCA34B30();
  *a1 = result;
  return result;
}

void sub_1CCA34020(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1CCA3402C()
{
  sub_1CCA34220();
  return sub_1CCB643D8();
}

uint64_t sub_1CCA34054()
{
  sub_1CCA34220();
  return sub_1CCB643E4();
}

uint64_t FMIPItemRole.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v5 = sub_1CCA14E90(&qword_1EF9DFAC8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA34220();
  sub_1CCB643B4();
  if (!v2)
  {
    v21 = 1;
    v9 = sub_1CCB64150();
    v11 = v10;
    v20 = 0;
    v18 = sub_1CCB64174();
    v19 = 2;
    v13 = sub_1CCB64150();
    v14 = v8;
    v16 = v15;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
    *a2 = v18;
    a2[1] = v9;
    a2[2] = v11;
    a2[3] = v13;
    a2[4] = v16;
  }
  return sub_1CCA01CA0((uint64_t)a1);
}

unint64_t sub_1CCA34220()
{
  unint64_t result;

  result = qword_1EF9DFAD0;
  if (!qword_1EF9DFAD0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB671B0, &type metadata for FMIPItemRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFAD0);
  }
  return result;
}

uint64_t FMIPItemRole.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  char v12;
  char v13;
  char v14;

  v4 = sub_1CCA14E90(&qword_1EF9DFAD8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v11[0] = v1[2];
  v11[1] = v8;
  v9 = v1[3];
  v11[2] = v1[4];
  v11[3] = v9;
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA34220();
  sub_1CCB643CC();
  v14 = 0;
  sub_1CCB64204();
  if (!v2)
  {
    v13 = 2;
    sub_1CCB641E0();
    v12 = 1;
    sub_1CCB641E0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t FMIPItemRole.hash(into:)()
{
  sub_1CCB64348();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t FMIPItemRole.hashValue.getter()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA344E0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FMIPItemRole.init(from:)(a1, a2);
}

uint64_t sub_1CCA344F4(_QWORD *a1)
{
  return FMIPItemRole.encode(to:)(a1);
}

uint64_t sub_1CCA3450C()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA345A8()
{
  sub_1CCB64348();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA34624()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t _s8FMIPCore12FMIPItemRoleV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  if (*a1 != *a2)
    return 0;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  v6 = a1[3] == a2[3] && a1[4] == a2[4];
  if (v6 || (v7 = sub_1CCB642A0(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return sub_1CCB642A0();
  }
  return result;
}

unint64_t sub_1CCA34768()
{
  unint64_t result;

  result = qword_1EF9DFAE0;
  if (!qword_1EF9DFAE0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemRole, &type metadata for FMIPItemRole);
    atomic_store(result, (unint64_t *)&qword_1EF9DFAE0);
  }
  return result;
}

uint64_t destroy for FMIPItemRole()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FMIPItemRole(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FMIPItemRole(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for FMIPItemRole(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FMIPItemRole(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPItemRole(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPItemRole(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPItemRole()
{
  return &type metadata for FMIPItemRole;
}

uint64_t storeEnumTagSinglePayload for FMIPItemRole.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCA349D8 + 4 * byte_1CCB66FCD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CCA34A0C + 4 * byte_1CCB66FC8[v4]))();
}

uint64_t sub_1CCA34A0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA34A14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA34A1CLL);
  return result;
}

uint64_t sub_1CCA34A28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA34A30);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCA34A34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA34A3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPItemRole.CodingKeys()
{
  return &type metadata for FMIPItemRole.CodingKeys;
}

unint64_t sub_1CCA34A5C()
{
  unint64_t result;

  result = qword_1EF9DFAE8;
  if (!qword_1EF9DFAE8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67188, &type metadata for FMIPItemRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFAE8);
  }
  return result;
}

unint64_t sub_1CCA34AA4()
{
  unint64_t result;

  result = qword_1EF9DFAF0;
  if (!qword_1EF9DFAF0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB670C0, &type metadata for FMIPItemRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFAF0);
  }
  return result;
}

unint64_t sub_1CCA34AEC()
{
  unint64_t result;

  result = qword_1EF9DFAF8;
  if (!qword_1EF9DFAF8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB670E8, &type metadata for FMIPItemRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFAF8);
  }
  return result;
}

uint64_t sub_1CCA34B30()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManagerDidInitialize(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManagerDidLoadCache(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:initializationDidFail:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:devicesDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:deviceDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:deviceRemoved:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:ownerDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:familyMembersDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:didReceive:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManagerDidRefresh(_:startDate:endDate:tapContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 80))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManagerRequestLastLocation(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:imageVersionChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 96))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:serverConfigurationChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:itemsDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 112))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:itemDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:itemRemoved:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:unknownItemsDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 136))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:utAlertStateDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 144))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:itemGroupsDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 152))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:rangingParametersDidUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 160))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:safeLocationsDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 168))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:separationMonitoringStateDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 176))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:sharesDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 184))();
}

uint64_t dispatch thunk of FMIPManagerDelegate.fmipManager(_:sharingLimitsDidUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 192))();
}

uint64_t sub_1CCA34C98()
{
  qword_1EF9DFB00 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_none");
  return swift_unknownObjectRetain();
}

uint64_t static FMOSActivity.current.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CCA34D68(&qword_1ED8A8CB8, &qword_1ED8A8CA8, a1);
}

const char *FMOSActivity.init(_:parent:options:)@<X0>(const char *description@<X0>, char a2@<W2>, os_activity_t *a3@<X3>, os_activity_flag_t *a4@<X4>, os_activity_t *a5@<X8>)
{
  os_activity_t v6;

  if ((a2 & 1) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (!description)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (*a3)
  {
    v6 = _os_activity_create(&dword_1CC9BF000, description, *a3, *a4);
    description = (const char *)swift_unknownObjectRelease();
    *a5 = v6;
    return description;
  }
LABEL_7:
  __break(1u);
  return description;
}

uint64_t FMOSActivity.Options.flags.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t static FMOSActivity.none.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CCA34D68(&qword_1EF9DEF50, &qword_1EF9DFB00, a1);
}

uint64_t sub_1CCA34D68@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  *a3 = *a2;
  return swift_unknownObjectRetain();
}

uint64_t FMOSActivity.apply(execute:)(const void *a1)
{
  NSObject **v1;
  uint64_t result;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char isEscapingClosureAtFileLocation;
  _QWORD v9[6];

  result = (uint64_t)_Block_copy(a1);
  v3 = *v1;
  if (v3)
  {
    v4 = result;
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v4;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = sub_1CC9F4514;
    *(_QWORD *)(v6 + 24) = v5;
    v9[4] = sub_1CC9F44CC;
    v9[5] = v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 1107296256;
    v9[2] = sub_1CC9F44AC;
    v9[3] = &unk_1E88F05D0;
    v7 = _Block_copy(v9);
    swift_retain();
    swift_release();
    os_activity_apply(v3, v7);
    _Block_release(v7);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      return result;
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1CCA34ED4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1CCA34EF8()
{
  return swift_deallocObject();
}

const void *static FMOSActivity.start(_:execute:)(const char *a1, int a2, char a3, void *aBlock)
{
  const void *result;
  const void *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[6];

  result = _Block_copy(aBlock);
  v7 = result;
  if (qword_1ED8A8CB8 == -1)
  {
    if ((a3 & 1) == 0)
      goto LABEL_3;
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  result = (const void *)swift_once();
  if ((a3 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if (!a1)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v8 = qword_1ED8A8CA8;
  swift_unknownObjectRetain();
  v9 = _os_activity_create(&dword_1CC9BF000, a1, v8, OS_ACTIVITY_FLAG_DEFAULT);
  swift_unknownObjectRelease();
  v10 = _Block_copy(v7);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v10;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_1CCA35534;
  *(_QWORD *)(v12 + 24) = v11;
  v14[4] = sub_1CCA35538;
  v14[5] = v12;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1107296256;
  v14[2] = sub_1CC9F44AC;
  v14[3] = &unk_1E88F0648;
  v13 = _Block_copy(v14);
  swift_retain();
  swift_release();
  os_activity_apply(v9, v13);
  _Block_release(v13);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v7);
  result = (const void *)swift_unknownObjectRelease();
  if ((v13 & 1) != 0)
LABEL_9:
    __break(1u);
  return result;
}

uint64_t FMOSActivity.Options.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t FMOSActivity.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static FMOSActivity.Options.default.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void static FMOSActivity.Options.detached.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static FMOSActivity.Options.ifNonePresent.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

_DWORD *sub_1CCA350EC@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1CCA350F8(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1CCA35100()
{
  return swift_deallocObject();
}

unint64_t sub_1CCA35114()
{
  unint64_t result;

  result = qword_1EF9DFB10;
  if (!qword_1EF9DFB10)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMOSActivity.Options, &type metadata for FMOSActivity.Options);
    atomic_store(result, (unint64_t *)&qword_1EF9DFB10);
  }
  return result;
}

unint64_t sub_1CCA3515C()
{
  unint64_t result;

  result = qword_1EF9DFB18;
  if (!qword_1EF9DFB18)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMOSActivity.Options, &type metadata for FMOSActivity.Options);
    atomic_store(result, (unint64_t *)&qword_1EF9DFB18);
  }
  return result;
}

unint64_t sub_1CCA351A4()
{
  unint64_t result;

  result = qword_1EF9DFB20;
  if (!qword_1EF9DFB20)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMOSActivity.Options, &type metadata for FMOSActivity.Options);
    atomic_store(result, (unint64_t *)&qword_1EF9DFB20);
  }
  return result;
}

unint64_t sub_1CCA351EC()
{
  unint64_t result;

  result = qword_1EF9DFB28;
  if (!qword_1EF9DFB28)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMOSActivity.Options, &type metadata for FMOSActivity.Options);
    atomic_store(result, (unint64_t *)&qword_1EF9DFB28);
  }
  return result;
}

_DWORD *sub_1CCA35230@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1CCA35244@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_1CCA35258@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1CCA3526C(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1CCA3529C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1CCA352C8@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1CCA352EC(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_1CCA35300(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *sub_1CCA35314(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *sub_1CCA35328@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1CCA3533C(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1CCA35350(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1CCA35364(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1CCA35378()
{
  _DWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1CCA35388()
{
  return sub_1CCB63E8C();
}

_DWORD *sub_1CCA353A0(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

BOOL sub_1CCA353B4(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for FMOSActivity(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for FMOSActivity()
{
  return swift_unknownObjectRelease();
}

_QWORD *assignWithCopy for FMOSActivity(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_QWORD *assignWithTake for FMOSActivity(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMOSActivity(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FMOSActivity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMOSActivity()
{
  return &type metadata for FMOSActivity;
}

ValueMetadata *type metadata accessor for FMOSActivity.Options()
{
  return &type metadata for FMOSActivity.Options;
}

uint64_t FMIPProductType.productInformation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v2 = v1;
  v4 = sub_1CCA14E90(&qword_1EF9DFB90);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v25 - v8;
  v10 = type metadata accessor for FMIPProductType();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA357C8(v2, (uint64_t)v12);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      v14 = *(_OWORD *)v12;
      v26 = *((_OWORD *)v12 + 1);
      v27 = v14;
      v25 = *((_OWORD *)v12 + 2);
      v15 = *((_QWORD *)v12 + 6);
      v16 = *((_QWORD *)v12 + 7);
      v17 = *((_QWORD *)v12 + 8);
      *(_QWORD *)(a1 + 24) = &type metadata for FMIPZeusProductInformation;
      *(_QWORD *)(a1 + 32) = &protocol witness table for FMIPZeusProductInformation;
      result = swift_allocObject();
      *(_QWORD *)a1 = result;
      v18 = v26;
      *(_OWORD *)(result + 16) = v27;
      *(_OWORD *)(result + 32) = v18;
      *(_OWORD *)(result + 48) = v25;
      *(_QWORD *)(result + 64) = v15;
LABEL_6:
      *(_QWORD *)(result + 72) = v16;
      *(_QWORD *)(result + 80) = v17;
      return result;
    }
    sub_1CCA3580C((uint64_t)v12, (uint64_t)v9);
    sub_1CCA35854((uint64_t)v9, (uint64_t)v7);
    v23 = type metadata accessor for FMIPHawkeyeProductInformation();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v7, 1, v23) == 1)
    {
      sub_1CC9C3E84((uint64_t)v9, &qword_1EF9DFB90);
      result = sub_1CC9C3E84((uint64_t)v7, &qword_1EF9DFB90);
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v23;
      *(_QWORD *)(a1 + 32) = &protocol witness table for FMIPHawkeyeProductInformation;
      v24 = sub_1CCA01CC0((uint64_t *)a1);
      sub_1CC9FED60((uint64_t)v7, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
      return sub_1CC9C3E84((uint64_t)v9, &qword_1EF9DFB90);
    }
  }
  else
  {
    v19 = *((_QWORD *)v12 + 3);
    if (v19)
    {
      v17 = *((_QWORD *)v12 + 8);
      v20 = *((_QWORD *)v12 + 6);
      v16 = *((_QWORD *)v12 + 7);
      v21 = *((_OWORD *)v12 + 2);
      v22 = *((_QWORD *)v12 + 2);
      v26 = *(_OWORD *)v12;
      v27 = v21;
      *(_QWORD *)(a1 + 24) = &type metadata for FMIPB389ProductInformation;
      *(_QWORD *)(a1 + 32) = &protocol witness table for FMIPB389ProductInformation;
      result = swift_allocObject();
      *(_QWORD *)a1 = result;
      *(_OWORD *)(result + 16) = v26;
      *(_QWORD *)(result + 32) = v22;
      *(_QWORD *)(result + 40) = v19;
      *(_OWORD *)(result + 48) = v27;
      *(_QWORD *)(result + 64) = v20;
      goto LABEL_6;
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1CCA357C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPProductType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCA3580C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1EF9DFB90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCA35854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1EF9DFB90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCA358A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v67[3];
  uint64_t v68;
  uint64_t v69;

  v4 = type metadata accessor for FMIPProductType();
  MEMORY[0x1E0C80A78](v4);
  v6 = (_QWORD *)((char *)&v67[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = a1[3];
  v8 = a1[4];
  sub_1CCA04DDC(a1, v7);
  v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  v10 = sub_1CCB63988();
  v12 = v11;
  if (v10 == sub_1CCB63988() && v12 == v13)
    goto LABEL_14;
  v15 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
  {
LABEL_15:

    sub_1CC9EBC94((uint64_t)a1, (uint64_t)v67);
    FMIPHawkeyeProductInformation.init(beacon:)(v67, (uint64_t)v6);
    goto LABEL_16;
  }
  v16 = sub_1CCB63988();
  v18 = v17;
  if (v16 == sub_1CCB63988() && v18 == v19)
  {
LABEL_14:
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  v21 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
    goto LABEL_15;
  v22 = sub_1CCB63988();
  v24 = v23;
  if (v22 == sub_1CCB63988() && v24 == v25)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v27 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      v52 = sub_1CCB63988();
      v54 = v53;
      if (v52 == sub_1CCB63988() && v54 == v55)
      {
        while (1)
        {
          swift_bridgeObjectRelease_n();
LABEL_26:
          while (1)
          {
            sub_1CCB64084();
            __break(1u);
LABEL_27:
            v57 = sub_1CCB63988();
            v59 = v58;
            if (v57 == sub_1CCB63988() && v59 == v60)
              break;
            v61 = sub_1CCB642A0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v61 & 1) == 0)
            {
              v62 = sub_1CCB63988();
              v64 = v63;
              if (v62 == sub_1CCB63988() && v64 == v65)
              {

                swift_bridgeObjectRelease_n();
              }
              else
              {
                sub_1CCB642A0();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
            }
          }
        }
      }
      v56 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v56 & 1) == 0)
        goto LABEL_27;
      goto LABEL_26;
    }
  }

  v28 = a1[3];
  v29 = a1[4];
  sub_1CCA04DDC(a1, v28);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v29 + 160))(v28, v29) & 1) != 0)
  {
    sub_1CC9EBC94((uint64_t)a1, (uint64_t)v67);
    v30 = v68;
    v31 = v69;
    sub_1CCA04DDC(v67, v68);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 136))(v30, v31);
    v33 = v68;
    v34 = v69;
    sub_1CCA04DDC(v67, v68);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 144))(v33, v34);
    v36 = v68;
    v37 = v69;
    sub_1CCA04DDC(v67, v68);
    v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 56))(v36, v37);
    v40 = v39;
    sub_1CCA01CA0((uint64_t)v67);
    *v6 = v32;
    v6[1] = v35;
    v6[2] = v38;
    v6[3] = v40;
    v6[4] = 0x656C707041;
    v6[5] = 0xE500000000000000;
  }
  else
  {
    sub_1CC9EBC94((uint64_t)a1, (uint64_t)v67);
    v41 = v68;
    v42 = v69;
    sub_1CCA04DDC(v67, v68);
    v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 136))(v41, v42);
    v44 = v68;
    v45 = v69;
    sub_1CCA04DDC(v67, v68);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 144))(v44, v45);
    v47 = v68;
    v48 = v69;
    sub_1CCA04DDC(v67, v68);
    v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 56))(v47, v48);
    v51 = v50;
    sub_1CCA01CA0((uint64_t)v67);
    *v6 = v43;
    v6[1] = v46;
    v6[2] = v49;
    v6[3] = v51;
    *((_OWORD *)v6 + 2) = xmmword_1CCB673F0;
  }
  v6[6] = 0;
  v6[7] = 0;
  v6[8] = 0x4010000000000000;
LABEL_16:
  swift_storeEnumTagMultiPayload();
  sub_1CC9FED60((uint64_t)v6, a2, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
  return sub_1CCA01CA0((uint64_t)a1);
}

uint64_t sub_1CCA35EB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  unsigned int v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;

  if (objc_msgSend(a1, sel_isPosh))
  {
    v4 = objc_msgSend(a1, sel_productInformation);
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend(v4, sel_isAirTag);

      if (v6)
        goto LABEL_16;
    }
  }
  else
  {
    v7 = objc_msgSend(a1, sel_type);
    v8 = sub_1CCB63988();
    v10 = v9;
    if (v8 == sub_1CCB63988() && v10 == v11)
      goto LABEL_12;
    v13 = sub_1CCB642A0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
      goto LABEL_13;
    v7 = objc_msgSend(a1, sel_type);
    v14 = sub_1CCB63988();
    v16 = v15;
    if (v14 == sub_1CCB63988() && v16 == v17)
    {
LABEL_12:

      swift_bridgeObjectRelease_n();
      goto LABEL_13;
    }
    v19 = sub_1CCB642A0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
LABEL_16:

      type metadata accessor for FMIPProductType();
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_QWORD *)(a2 + 64) = 0;
      return swift_storeEnumTagMultiPayload();
    }
  }
LABEL_13:
  FMIPHawkeyeProductInformation.init(beacon:)(a1, a2);
  type metadata accessor for FMIPProductType();
  return swift_storeEnumTagMultiPayload();
}

uint64_t FMIPProductType.supportBTFinding.getter()
{
  return 1;
}

BOOL FMIPProductType.isZeus.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _BOOL8 v4;
  uint64_t v6;

  v1 = type metadata accessor for FMIPProductType();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA357C8(v0, (uint64_t)v3);
  v4 = swift_getEnumCaseMultiPayload() == 1;
  sub_1CCA0BF30((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
  return v4;
}

BOOL _s8FMIPCore15FMIPProductTypeO10supportsR1Sbvg_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unsigned int EnumCaseMultiPayload;
  uint64_t v6;

  v1 = type metadata accessor for FMIPProductType();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA357C8(v0, (uint64_t)v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload > 1)
    sub_1CC9C3E84((uint64_t)v3, &qword_1EF9DFB90);
  else
    sub_1CCA0BF30((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
  return EnumCaseMultiPayload < 2;
}

BOOL FMIPProductType.isAccessory.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int EnumCaseMultiPayload;
  uint64_t v6;

  v1 = type metadata accessor for FMIPProductType();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA357C8(v0, (uint64_t)v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
    sub_1CC9C3E84((uint64_t)v3, &qword_1EF9DFB90);
  else
    sub_1CCA0BF30((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
  return EnumCaseMultiPayload == 2;
}

uint64_t FMIPProductType.coreLocationBeaconType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v1 = type metadata accessor for FMIPProductType();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA357C8(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    sub_1CC9C3E84((uint64_t)v3, &qword_1EF9DFB90);
    return 3;
  }
  else
  {
    sub_1CCA0BF30((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
    return 1;
  }
}

uint64_t FMIPProductType.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = type metadata accessor for FMIPHawkeyeProductInformation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9DFB90);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v31 - v9;
  v11 = type metadata accessor for FMIPProductType();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA357C8(v0, (uint64_t)v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v31 = *(_OWORD *)v13;
      v16 = *((_QWORD *)v13 + 2);
      v15 = *((_QWORD *)v13 + 3);
      v18 = *((_QWORD *)v13 + 4);
      v17 = *((_QWORD *)v13 + 5);
      v20 = *((_QWORD *)v13 + 6);
      v19 = *((_QWORD *)v13 + 7);
      v21 = *((_QWORD *)v13 + 8);
      sub_1CCB64348();
      v32 = v31;
      v33 = v16;
      v34 = v15;
      v35 = v18;
      v36 = v17;
      v37 = v20;
      v38 = v19;
      v39 = v21;
      FMIPZeusProductInformation.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      sub_1CCA3580C((uint64_t)v13, (uint64_t)v10);
      sub_1CCB64348();
      sub_1CCA35854((uint64_t)v10, (uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
      {
        sub_1CCB64354();
      }
      else
      {
        sub_1CC9FED60((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
        sub_1CCB64354();
        FMIPHawkeyeProductInformation.hash(into:)();
        sub_1CCA0BF30((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
      }
      return sub_1CC9C3E84((uint64_t)v10, &qword_1EF9DFB90);
    }
  }
  else
  {
    v23 = *(_QWORD *)v13;
    v24 = *((_QWORD *)v13 + 1);
    v26 = *((_QWORD *)v13 + 2);
    v25 = *((_QWORD *)v13 + 3);
    v27 = *((_QWORD *)v13 + 4);
    v28 = *((_QWORD *)v13 + 5);
    v29 = *((_QWORD *)v13 + 7);
    *(_QWORD *)&v31 = *((_QWORD *)v13 + 6);
    v30 = *((_QWORD *)v13 + 8);
    sub_1CCB64348();
    if (v25)
    {
      *(_QWORD *)&v32 = v23;
      *((_QWORD *)&v32 + 1) = v24;
      v33 = v26;
      v34 = v25;
      v35 = v27;
      v36 = v28;
      v37 = v31;
      v38 = v29;
      v39 = v30;
      sub_1CCB64354();
      FMIPB389ProductInformation.hash(into:)();
      return sub_1CCA37448(v23, v24, v26, v25);
    }
    else
    {
      return sub_1CCB64354();
    }
  }
}

uint64_t FMIPProductType.hashValue.getter()
{
  sub_1CCB6433C();
  FMIPProductType.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCA36640()
{
  sub_1CCB6433C();
  FMIPProductType.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCA36680()
{
  sub_1CCB6433C();
  FMIPProductType.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCA366BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CCB1D88C(*a1, *a2);
}

uint64_t sub_1CCA366C8()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA36758()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA367C4()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA36850@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCA38F1C();
  *a1 = result;
  return result;
}

void sub_1CCA3687C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE400000000000000;
  v5 = 1937073530;
  if (v2 != 1)
  {
    v5 = 0x6579656B776168;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 959984482;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1CCA368CC()
{
  sub_1CCA38ED8();
  return sub_1CCB63AF0();
}

uint64_t sub_1CCA36928()
{
  sub_1CCA38ED8();
  return sub_1CCB63AD8();
}

uint64_t sub_1CCA36974(char *a1, char *a2)
{
  return sub_1CCB1D7EC(*a1, *a2);
}

uint64_t sub_1CCA36980()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA369FC()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA36A54()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA36ACC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1CCA36B28(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 1701869940;
  if (*v1)
    v2 = 0xD000000000000012;
  v3 = 0x80000001CCB77500;
  if (!*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1CCA36B64()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 1701869940;
}

uint64_t sub_1CCA36B9C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1CCA36BFC(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1CCA36C08()
{
  sub_1CCA37C34();
  return sub_1CCB643D8();
}

uint64_t sub_1CCA36C30()
{
  sub_1CCA37C34();
  return sub_1CCB643E4();
}

uint64_t FMIPProductType.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;

  v2 = v1;
  v43 = sub_1CCA14E90(&qword_1EF9DFB90);
  MEMORY[0x1E0C80A78](v43);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMIPProductType();
  MEMORY[0x1E0C80A78](v6);
  v8 = (uint64_t *)((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_1CCA14E90(&qword_1EF9DFB98);
  v45 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA37C34();
  sub_1CCB643CC();
  sub_1CCA357C8(v2, (uint64_t)v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v14 = *v8;
      v13 = v8[1];
      v15 = v8[3];
      v42 = v8[2];
      v43 = v13;
      v16 = v8[4];
      v17 = v8[5];
      v18 = v8[7];
      v40 = v8[6];
      v41 = v16;
      v19 = v8[8];
      LOBYTE(v46) = 1;
      v55 = 0;
      sub_1CCA37C78();
      v20 = v44;
      sub_1CCB64210();
      if (!v20)
      {
        v46 = v14;
        v47 = v43;
        v48 = v42;
        v49 = v15;
        v50 = v41;
        v51 = v17;
        v52 = v40;
        v53 = v18;
        v54 = v19;
        v55 = 1;
        sub_1CCA37D38();
        sub_1CCB64210();
      }
      (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      sub_1CCA3580C((uint64_t)v8, (uint64_t)v5);
      LOBYTE(v46) = 2;
      v55 = 0;
      sub_1CCA37C78();
      v35 = v44;
      sub_1CCB64210();
      if (!v35)
      {
        LOBYTE(v46) = 1;
        sub_1CCA37CBC();
        sub_1CCB64210();
      }
      sub_1CC9C3E84((uint64_t)v5, &qword_1EF9DFB90);
      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v11, v9);
    }
  }
  else
  {
    v23 = *v8;
    v22 = v8[1];
    v24 = v8[2];
    v25 = v8[3];
    v26 = v8[5];
    v40 = v8[4];
    v41 = v26;
    v27 = v8[6];
    v28 = v8[7];
    v29 = v8[8];
    v42 = v27;
    v43 = v28;
    LOBYTE(v46) = 0;
    v55 = 0;
    sub_1CCA37C78();
    v30 = v44;
    sub_1CCB64210();
    if (v30)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v9);
      v31 = v23;
      v32 = v22;
      v33 = v24;
      v34 = v25;
    }
    else
    {
      v36 = v23;
      v37 = v22;
      v46 = v23;
      v47 = v22;
      v38 = v24;
      v39 = v25;
      v48 = v24;
      v49 = v25;
      v50 = v40;
      v51 = v41;
      v52 = v42;
      v53 = v43;
      v54 = v29;
      v55 = 1;
      sub_1CCA14E90(&qword_1EF9DFBC8);
      sub_1CCA37D7C();
      sub_1CCB64210();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v9);
      v31 = v36;
      v32 = v37;
      v33 = v38;
      v34 = v39;
    }
    return sub_1CCA37448(v31, v32, v33, v34);
  }
}

uint64_t FMIPProductType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  _OWORD *v31;
  __int128 v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char v47;

  v39 = a2;
  v40 = sub_1CCA14E90(&qword_1EF9DFBE0);
  v38 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for FMIPProductType();
  v5 = MEMORY[0x1E0C80A78](v37);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v34 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v34 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v34 - v14;
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA37C34();
  v16 = v41;
  sub_1CCB643B4();
  if (!v16)
  {
    v34 = v13;
    v35 = v10;
    v17 = v7;
    v41 = a1;
    v36 = v15;
    v18 = v38;
    v19 = v39;
    v47 = 0;
    sub_1CCA37E24();
    v20 = v40;
    sub_1CCB64180();
    if ((_BYTE)v42)
    {
      if (v42 == 1)
      {
        v47 = 1;
        sub_1CCA37E68();
        sub_1CCB64180();
        (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v20);
        v23 = v19;
        v24 = v44;
        v25 = v46;
        v26 = v43;
        v27 = (uint64_t)v35;
        *v35 = v42;
        *(_OWORD *)(v27 + 16) = v26;
        *(_OWORD *)(v27 + 32) = v24;
        *(_OWORD *)(v27 + 48) = v45;
        *(_QWORD *)(v27 + 64) = v25;
        swift_storeEnumTagMultiPayload();
        v28 = (uint64_t)v36;
        sub_1CC9FED60(v27, (uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
LABEL_11:
        sub_1CC9FED60(v28, v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
        v21 = (uint64_t)v41;
        return sub_1CCA01CA0(v21);
      }
      type metadata accessor for FMIPHawkeyeProductInformation();
      LOBYTE(v42) = 1;
      sub_1CC9CAA38(&qword_1EF9DFBF0, (uint64_t (*)(uint64_t))type metadata accessor for FMIPHawkeyeProductInformation, (uint64_t)&protocol conformance descriptor for FMIPHawkeyeProductInformation);
      sub_1CCB64144();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v20);
      v28 = (uint64_t)v36;
      swift_storeEnumTagMultiPayload();
      v33 = (uint64_t)v17;
    }
    else
    {
      v47 = 1;
      sub_1CCA37EAC();
      sub_1CCB64144();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v20);
      v29 = v46;
      v30 = v43;
      v31 = v34;
      *v34 = v42;
      v31[1] = v30;
      v32 = v45;
      v31[2] = v44;
      v31[3] = v32;
      *((_QWORD *)v31 + 8) = v29;
      swift_storeEnumTagMultiPayload();
      v33 = (uint64_t)v31;
      v28 = (uint64_t)v36;
    }
    sub_1CC9FED60(v33, v28, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
    v23 = v19;
    goto LABEL_11;
  }
  v21 = (uint64_t)a1;
  return sub_1CCA01CA0(v21);
}

uint64_t sub_1CCA37420@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPProductType.init(from:)(a1, a2);
}

uint64_t sub_1CCA37434(_QWORD *a1)
{
  return FMIPProductType.encode(to:)(a1);
}

uint64_t sub_1CCA37448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL _s8FMIPCore15FMIPProductTypeO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v81 = (char *)type metadata accessor for FMIPHawkeyeProductInformation();
  v80 = *((_QWORD *)v81 - 1);
  MEMORY[0x1E0C80A78](v81);
  v78 = (uint64_t)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9DFC38);
  MEMORY[0x1E0C80A78](v5);
  v82 = (uint64_t)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1EF9DFB90);
  v8 = MEMORY[0x1E0C80A78](v7);
  v79 = (uint64_t)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v71 - v10;
  v12 = type metadata accessor for FMIPProductType();
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v71 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (uint64_t *)((char *)&v71 - v19);
  v21 = sub_1CCA14E90(&qword_1EF9DFC40);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (uint64_t *)&v24[*(int *)(v22 + 48)];
  sub_1CCA357C8(a1, (uint64_t)v24);
  sub_1CCA357C8(a2, (uint64_t)v25);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v81 = v24;
    sub_1CCA357C8((uint64_t)v24, (uint64_t)v20);
    v42 = *v20;
    v43 = v20[1];
    v44 = v20[2];
    v82 = v20[3];
    v46 = v20[4];
    v45 = v20[5];
    v48 = v20[6];
    v47 = v20[7];
    v49 = v20[8];
    if (swift_getEnumCaseMultiPayload())
    {
      sub_1CCA37448(v42, v43, v44, v82);
      v24 = v81;
LABEL_13:
      sub_1CC9C3E84((uint64_t)v24, &qword_1EF9DFC40);
      return 0;
    }
    v57 = *v25;
    v56 = v25[1];
    v58 = v25[2];
    v59 = v25[3];
    v61 = v25[4];
    v60 = v25[5];
    v63 = v25[6];
    v62 = v25[7];
    v64 = v25[8];
    if (v82)
    {
      *(_QWORD *)&v83 = v42;
      *((_QWORD *)&v83 + 1) = v43;
      v84 = v44;
      v85 = v82;
      v86 = v46;
      v87 = v45;
      v88 = v48;
      v89 = v47;
      v90 = v49;
      if (v59)
      {
        *(_QWORD *)&v100 = v57;
        *((_QWORD *)&v100 + 1) = v56;
        v101 = v58;
        v102 = v59;
        v103 = v61;
        v104 = v60;
        v105 = v63;
        v106 = v62;
        v107 = v64;
        v74 = v57;
        v79 = v43;
        v75 = v56;
        v65 = v44;
        v66 = v82;
        v78 = v62;
        v77 = v63;
        v76 = v60;
        v73 = v61;
        v72 = v58;
        v71 = v64;
        LODWORD(v80) = _s8FMIPCore26FMIPB389ProductInformationV2eeoiySbAC_ACtFZ_0((uint64_t)&v83, (uint64_t)&v100);
        sub_1CCA39004(v42, v43, v65, v66);
        sub_1CCA37448(v74, v75, v72, v59);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1CCA37448(v42, v79, v65, v66);
        if ((v80 & 1) != 0)
          goto LABEL_29;
LABEL_25:
        sub_1CCA0BF30((uint64_t)v81, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
        return 0;
      }
    }
    else if (!v59)
    {
LABEL_29:
      v70 = (uint64_t)v81;
      goto LABEL_30;
    }
    *(_QWORD *)&v83 = v42;
    *((_QWORD *)&v83 + 1) = v43;
    v84 = v44;
    v85 = v82;
    v86 = v46;
    v87 = v45;
    v88 = v48;
    v89 = v47;
    v90 = v49;
    v91 = v57;
    v92 = v56;
    v93 = v58;
    v94 = v59;
    v95 = v61;
    v96 = v60;
    v97 = v63;
    v98 = v62;
    v99 = v64;
    sub_1CCA38F64((uint64_t *)&v83);
    goto LABEL_25;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_1CCA357C8((uint64_t)v24, (uint64_t)v15);
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      sub_1CC9C3E84((uint64_t)v15, &qword_1EF9DFB90);
      goto LABEL_13;
    }
    sub_1CCA3580C((uint64_t)v25, (uint64_t)v11);
    v50 = *(int *)(v5 + 48);
    v51 = v82;
    v52 = v82 + v50;
    sub_1CCA3580C((uint64_t)v15, v82);
    sub_1CCA35854((uint64_t)v11, v52);
    v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
    v54 = (uint64_t)v81;
    if (v53(v51, 1, (uint64_t)v81) == 1)
    {
      sub_1CC9C3E84((uint64_t)v11, &qword_1EF9DFB90);
      if (v53(v52, 1, v54) == 1)
      {
        sub_1CC9C3E84(v51, &qword_1EF9DFB90);
LABEL_27:
        v70 = (uint64_t)v24;
LABEL_30:
        sub_1CCA0BF30(v70, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
        return 1;
      }
    }
    else
    {
      v67 = v79;
      sub_1CCA35854(v51, v79);
      if (v53(v52, 1, v54) != 1)
      {
        v68 = v78;
        sub_1CC9FED60(v52, v78, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
        v69 = _s8FMIPCore29FMIPHawkeyeProductInformationV2eeoiySbAC_ACtFZ_0(v67, v68);
        sub_1CCA0BF30(v68, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
        sub_1CC9C3E84((uint64_t)v11, &qword_1EF9DFB90);
        sub_1CCA0BF30(v67, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
        sub_1CC9C3E84(v51, &qword_1EF9DFB90);
        if ((v69 & 1) != 0)
          goto LABEL_27;
LABEL_28:
        sub_1CCA0BF30((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
        return 0;
      }
      sub_1CC9C3E84((uint64_t)v11, &qword_1EF9DFB90);
      sub_1CCA0BF30(v67, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
    }
    sub_1CC9C3E84(v51, &qword_1EF9DFC38);
    goto LABEL_28;
  }
  sub_1CCA357C8((uint64_t)v24, (uint64_t)v18);
  v27 = *((_QWORD *)v18 + 3);
  v28 = *((_QWORD *)v18 + 5);
  v29 = *((_QWORD *)v18 + 7);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v30 = *((_QWORD *)v18 + 8);
  v31 = *((_QWORD *)v18 + 6);
  v32 = *((_QWORD *)v18 + 4);
  v33 = *((_QWORD *)v18 + 2);
  v34 = v25[2];
  v35 = v25[3];
  v36 = v25[4];
  v37 = v25[5];
  v38 = v25[6];
  v39 = v25[7];
  v40 = v25[8];
  v83 = *(_OWORD *)v18;
  v84 = v33;
  v85 = v27;
  v86 = v32;
  v87 = v28;
  v88 = v31;
  v89 = v29;
  v90 = v30;
  v100 = *(_OWORD *)v25;
  v101 = v34;
  v102 = v35;
  v103 = v36;
  v104 = v37;
  v105 = v38;
  v106 = v39;
  v107 = v40;
  v41 = _s8FMIPCore26FMIPB389ProductInformationV2eeoiySbAC_ACtFZ_0((uint64_t)&v83, (uint64_t)&v100);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCA0BF30((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
  return v41;
}

unint64_t sub_1CCA37C34()
{
  unint64_t result;

  result = qword_1EF9DFBA0;
  if (!qword_1EF9DFBA0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67720, &type metadata for FMIPProductType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFBA0);
  }
  return result;
}

unint64_t sub_1CCA37C78()
{
  unint64_t result;

  result = qword_1EF9DFBA8;
  if (!qword_1EF9DFBA8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB676F8, &type metadata for FMIPProductType.RawType);
    atomic_store(result, (unint64_t *)&qword_1EF9DFBA8);
  }
  return result;
}

unint64_t sub_1CCA37CBC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9DFBB0;
  if (!qword_1EF9DFBB0)
  {
    v1 = sub_1CCA19B38(&qword_1EF9DFB90);
    v2 = sub_1CC9CAA38(&qword_1EF9DFBB8, (uint64_t (*)(uint64_t))type metadata accessor for FMIPHawkeyeProductInformation, (uint64_t)&protocol conformance descriptor for FMIPHawkeyeProductInformation);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9DFBB0);
  }
  return result;
}

unint64_t sub_1CCA37D38()
{
  unint64_t result;

  result = qword_1EF9DFBC0;
  if (!qword_1EF9DFBC0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPZeusProductInformation, &type metadata for FMIPZeusProductInformation);
    atomic_store(result, (unint64_t *)&qword_1EF9DFBC0);
  }
  return result;
}

unint64_t sub_1CCA37D7C()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EF9DFBD0;
  if (!qword_1EF9DFBD0)
  {
    v1 = sub_1CCA19B38(&qword_1EF9DFBC8);
    v2 = sub_1CCA37DE0();
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9DFBD0);
  }
  return result;
}

unint64_t sub_1CCA37DE0()
{
  unint64_t result;

  result = qword_1EF9DFBD8;
  if (!qword_1EF9DFBD8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPB389ProductInformation, &type metadata for FMIPB389ProductInformation);
    atomic_store(result, (unint64_t *)&qword_1EF9DFBD8);
  }
  return result;
}

unint64_t sub_1CCA37E24()
{
  unint64_t result;

  result = qword_1EF9DFBE8;
  if (!qword_1EF9DFBE8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB676D0, &type metadata for FMIPProductType.RawType);
    atomic_store(result, (unint64_t *)&qword_1EF9DFBE8);
  }
  return result;
}

unint64_t sub_1CCA37E68()
{
  unint64_t result;

  result = qword_1EF9DFBF8;
  if (!qword_1EF9DFBF8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPZeusProductInformation, &type metadata for FMIPZeusProductInformation);
    atomic_store(result, (unint64_t *)&qword_1EF9DFBF8);
  }
  return result;
}

unint64_t sub_1CCA37EAC()
{
  unint64_t result;

  result = qword_1EF9DFC00;
  if (!qword_1EF9DFC00)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPB389ProductInformation, &type metadata for FMIPB389ProductInformation);
    atomic_store(result, (unint64_t *)&qword_1EF9DFC00);
  }
  return result;
}

uint64_t sub_1CCA37EF0()
{
  return sub_1CC9CAA38(&qword_1EF9DFC08, (uint64_t (*)(uint64_t))type metadata accessor for FMIPProductType, (uint64_t)&protocol conformance descriptor for FMIPProductType);
}

uint64_t *initializeBufferWithCopyOfBuffer for FMIPProductType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  __int128 v23;
  __int128 v24;
  char *v26;
  char *v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
      v12 = *((_QWORD *)v11 - 1);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v12 + 48))(a2, 1, v11))
      {
        v13 = sub_1CCA14E90(&qword_1EF9DFB90);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v17 = a2[3];
        a1[2] = a2[2];
        a1[3] = v17;
        v18 = a2[5];
        a1[4] = a2[4];
        a1[5] = v18;
        v19 = a2[7];
        a1[6] = a2[6];
        a1[7] = v19;
        a1[8] = a2[8];
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
        *((_BYTE *)a1 + 73) = *((_BYTE *)a2 + 73);
        v20 = v11[12];
        v26 = (char *)a2 + v20;
        v27 = (char *)a1 + v20;
        v21 = sub_1CCB63490();
        v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v22(v27, v26, v21);
        v22((char *)a1 + v11[13], (char *)a2 + v11[13], v21);
        v22((char *)a1 + v11[14], (char *)a2 + v11[14], v21);
        v22((char *)a1 + v11[15], (char *)a2 + v11[15], v21);
        v22((char *)a1 + v11[16], (char *)a2 + v11[16], v21);
        v22((char *)a1 + v11[17], (char *)a2 + v11[17], v21);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v12 + 56))(a1, 0, 1, v11);
      }
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v7 = a2[3];
      a1[2] = a2[2];
      a1[3] = v7;
      v8 = a2[5];
      a1[4] = a2[4];
      a1[5] = v8;
      v9 = a2[7];
      a1[6] = a2[6];
      a1[7] = v9;
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = a2[3];
      if (v14)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = a2[2];
        a1[3] = v14;
        v15 = a2[5];
        a1[4] = a2[4];
        a1[5] = v15;
        v16 = a2[7];
        a1[6] = a2[6];
        a1[7] = v16;
        a1[8] = a2[8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v23 = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v23;
        a1[8] = a2[8];
        v24 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v24;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for FMIPProductType(uint64_t a1)
{
  uint64_t result;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    v3 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
    result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v3 - 1) + 48))(a1, 1, v3);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = a1 + v3[12];
      v5 = sub_1CCB63490();
      v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
      v6(v4, v5);
      v6(a1 + v3[13], v5);
      v6(a1 + v3[14], v5);
      v6(a1 + v3[15], v5);
      v6(a1 + v3[16], v5);
      return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + v3[17], v5);
    }
  }
  else if ((_DWORD)result == 1 || !(_DWORD)result && (result = *(_QWORD *)(a1 + 24)) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_OWORD *initializeWithCopy for FMIPProductType(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  __int128 v20;
  __int128 v21;
  char *v23;
  char *v24;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v8 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
    v9 = *((_QWORD *)v8 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v9 + 48))(a2, 1, v8))
    {
      v10 = sub_1CCA14E90(&qword_1EF9DFB90);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v14 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v14;
      v15 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v15;
      v16 = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = v16;
      *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
      *((_BYTE *)a1 + 73) = *((_BYTE *)a2 + 73);
      v17 = v8[12];
      v23 = (char *)a2 + v17;
      v24 = (char *)a1 + v17;
      v18 = sub_1CCB63490();
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19(v24, v23, v18);
      v19((char *)a1 + v8[13], (char *)a2 + v8[13], v18);
      v19((char *)a1 + v8[14], (char *)a2 + v8[14], v18);
      v19((char *)a1 + v8[15], (char *)a2 + v8[15], v18);
      v19((char *)a1 + v8[16], (char *)a2 + v8[16], v18);
      v19((char *)a1 + v8[17], (char *)a2 + v8[17], v18);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v9 + 56))(a1, 0, 1, v8);
    }
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v5 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a1 + 3) = v5;
    v6 = *((_QWORD *)a2 + 5);
    *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a1 + 5) = v6;
    v7 = *((_QWORD *)a2 + 7);
    *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
    *((_QWORD *)a1 + 7) = v7;
    *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *((_QWORD *)a2 + 3);
    if (v11)
    {
      *a1 = *a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v11;
      v12 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a1 + 5) = v12;
      v13 = *((_QWORD *)a2 + 7);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 7) = v13;
      *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v20 = a2[3];
      a1[2] = a2[2];
      a1[3] = v20;
      *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for FMIPProductType(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v15;
  char *v16;

  if (a1 != a2)
  {
    sub_1CCA0BF30((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v5 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
      v6 = *((_QWORD *)v5 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v6 + 48))(a2, 1, v5))
      {
        v7 = sub_1CCA14E90(&qword_1EF9DFB90);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        a1[8] = a2[8];
        *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
        *((_BYTE *)a1 + 73) = *((_BYTE *)a2 + 73);
        v8 = v5[12];
        v15 = (char *)a2 + v8;
        v16 = (char *)a1 + v8;
        v9 = sub_1CCB63490();
        v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v10(v16, v15, v9);
        v10((char *)a1 + v5[13], (char *)a2 + v5[13], v9);
        v10((char *)a1 + v5[14], (char *)a2 + v5[14], v9);
        v10((char *)a1 + v5[15], (char *)a2 + v5[15], v9);
        v10((char *)a1 + v5[16], (char *)a2 + v5[16], v9);
        v10((char *)a1 + v5[17], (char *)a2 + v5[17], v9);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v6 + 56))(a1, 0, 1, v5);
      }
    }
    else if (EnumCaseMultiPayload == 1 || a2[3])
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v11 = *((_OWORD *)a2 + 1);
      v12 = *((_OWORD *)a2 + 2);
      v13 = *((_OWORD *)a2 + 3);
      a1[8] = a2[8];
      *((_OWORD *)a1 + 2) = v12;
      *((_OWORD *)a1 + 3) = v13;
      *((_OWORD *)a1 + 1) = v11;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for FMIPProductType(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);

  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v6 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
    v7 = *((_QWORD *)v6 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
    {
      v8 = sub_1CCA14E90(&qword_1EF9DFB90);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      v10 = a2[3];
      a1[2] = a2[2];
      a1[3] = v10;
      *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
      *((_WORD *)a1 + 36) = *((_WORD *)a2 + 36);
      v11 = v6[12];
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = sub_1CCB63490();
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
      v15(v12, v13, v14);
      v15((char *)a1 + v6[13], (char *)a2 + v6[13], v14);
      v15((char *)a1 + v6[14], (char *)a2 + v6[14], v14);
      v15((char *)a1 + v6[15], (char *)a2 + v6[15], v14);
      v15((char *)a1 + v6[16], (char *)a2 + v6[16], v14);
      v15((char *)a1 + v6[17], (char *)a2 + v6[17], v14);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for FMIPProductType(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    sub_1CCA0BF30((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
      v7 = *((_QWORD *)v6 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
      {
        v8 = sub_1CCA14E90(&qword_1EF9DFB90);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        v9 = a2[1];
        *a1 = *a2;
        a1[1] = v9;
        v10 = a2[3];
        a1[2] = a2[2];
        a1[3] = v10;
        *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
        *((_WORD *)a1 + 36) = *((_WORD *)a2 + 36);
        v11 = v6[12];
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = sub_1CCB63490();
        v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
        v15(v12, v13, v14);
        v15((char *)a1 + v6[13], (char *)a2 + v6[13], v14);
        v15((char *)a1 + v6[14], (char *)a2 + v6[14], v14);
        v15((char *)a1 + v6[15], (char *)a2 + v6[15], v14);
        v15((char *)a1 + v6[16], (char *)a2 + v6[16], v14);
        v15((char *)a1 + v6[17], (char *)a2 + v6[17], v14);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPItemUpdateType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for FMIPItemUpdateType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1CCA38C10()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t storeEnumTagSinglePayload for FMIPProductType.RawType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCA38C6C + 4 * byte_1CCB67405[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CCA38CA0 + 4 * byte_1CCB67400[v4]))();
}

uint64_t sub_1CCA38CA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA38CA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA38CB0);
  return result;
}

uint64_t sub_1CCA38CBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA38CC4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCA38CC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA38CD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPProductType.RawType()
{
  return &type metadata for FMIPProductType.RawType;
}

uint64_t storeEnumTagSinglePayload for FMIPProductType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCA38D38 + 4 * byte_1CCB6740F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCA38D6C + 4 * byte_1CCB6740A[v4]))();
}

uint64_t sub_1CCA38D6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA38D74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA38D7CLL);
  return result;
}

uint64_t sub_1CCA38D88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA38D90);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCA38D94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA38D9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPProductType.CodingKeys()
{
  return &type metadata for FMIPProductType.CodingKeys;
}

unint64_t sub_1CCA38DBC()
{
  unint64_t result;

  result = qword_1EF9DFC10;
  if (!qword_1EF9DFC10)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67608, &type metadata for FMIPProductType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFC10);
  }
  return result;
}

unint64_t sub_1CCA38E04()
{
  unint64_t result;

  result = qword_1EF9DFC18;
  if (!qword_1EF9DFC18)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB676A8, &type metadata for FMIPProductType.RawType);
    atomic_store(result, (unint64_t *)&qword_1EF9DFC18);
  }
  return result;
}

unint64_t sub_1CCA38E4C()
{
  unint64_t result;

  result = qword_1EF9DFC20;
  if (!qword_1EF9DFC20)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67540, &type metadata for FMIPProductType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFC20);
  }
  return result;
}

unint64_t sub_1CCA38E94()
{
  unint64_t result;

  result = qword_1EF9DFC28;
  if (!qword_1EF9DFC28)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67568, &type metadata for FMIPProductType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFC28);
  }
  return result;
}

unint64_t sub_1CCA38ED8()
{
  unint64_t result;

  result = qword_1EF9DFC30;
  if (!qword_1EF9DFC30)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67630, &type metadata for FMIPProductType.RawType);
    atomic_store(result, (unint64_t *)&qword_1EF9DFC30);
  }
  return result;
}

uint64_t sub_1CCA38F1C()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t *sub_1CCA38F64(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[9];
  v3 = a1[10];
  v4 = a1[11];
  v5 = a1[12];
  sub_1CCA37448(*a1, a1[1], a1[2], a1[3]);
  sub_1CCA37448(v2, v3, v4, v5);
  return a1;
}

uint64_t sub_1CCA39004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1CCA39040(uint64_t a1)
{
  return sub_1CC9C2A34(a1, qword_1EF9FF468);
}

uint64_t sub_1CCA39064()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation__isFinished);
}

void sub_1CCA39074(char a1)
{
  void *v1;
  void *v3;
  id v4;

  v3 = (void *)sub_1CCB63964();
  objc_msgSend(v1, sel_willChangeValueForKey_, v3);

  *((_BYTE *)v1 + OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation__isFinished) = a1;
  v4 = (id)sub_1CCB63964();
  objc_msgSend(v1, sel_didChangeValueForKey_, v4);

}

id FMIPDeviceImageCacheOperation.__allocating_init(request:completion:)(__int128 *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  objc_super v17;

  v7 = objc_allocWithZone(v3);
  v8 = *a1;
  v9 = *((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 3);
  v11 = *((_BYTE *)a1 + 48);
  v12 = *((_BYTE *)a1 + 49);
  v13 = *((_QWORD *)a1 + 7);
  v7[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation__isFinished] = 0;
  v14 = &v7[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation_request];
  *(_OWORD *)v14 = v8;
  *((_QWORD *)v14 + 2) = v9;
  *((_QWORD *)v14 + 3) = v10;
  *((_OWORD *)v14 + 2) = a1[2];
  v14[48] = v11;
  v14[49] = v12;
  *((_QWORD *)v14 + 7) = v13;
  v15 = &v7[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation_completion];
  *v15 = a2;
  v15[1] = a3;
  v17.receiver = v7;
  v17.super_class = v3;
  return objc_msgSendSuper2(&v17, sel_init);
}

id FMIPDeviceImageCacheOperation.init(request:completion:)(__int128 *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  objc_super v13;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 3);
  v7 = *((_BYTE *)a1 + 48);
  v8 = *((_BYTE *)a1 + 49);
  v9 = *((_QWORD *)a1 + 7);
  v3[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation__isFinished] = 0;
  v10 = &v3[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation_request];
  *(_OWORD *)v10 = v4;
  *((_QWORD *)v10 + 2) = v5;
  *((_QWORD *)v10 + 3) = v6;
  *((_OWORD *)v10 + 2) = a1[2];
  v10[48] = v7;
  v10[49] = v8;
  *((_QWORD *)v10 + 7) = v9;
  v11 = &v3[OBJC_IVAR____TtC8FMIPCore29FMIPDeviceImageCacheOperation_completion];
  *v11 = a2;
  v11[1] = a3;
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for FMIPDeviceImageCacheOperation();
  return objc_msgSendSuper2(&v13, sel_init);
}

void sub_1CCA39254()
{
  void *v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (objc_msgSend(v0, sel_isCancelled))
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v1 = sub_1CCB637FC();
    sub_1CCA16C20(v1, (uint64_t)qword_1ED8AD7F8);
    oslog = sub_1CCB637D8();
    v2 = sub_1CCB63D48();
    if (os_log_type_enabled(oslog, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1CC9BF000, oslog, v2, "FMIPDeviceImageCreationOperation: operation cancelled", v3, 2u);
      MEMORY[0x1D17B214C](v3, -1, -1);
    }

  }
}

id FMIPDeviceImageCacheOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void FMIPDeviceImageCacheOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id FMIPDeviceImageCacheOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMIPDeviceImageCacheOperation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1CCA393EC()
{
  return swift_slowAlloc();
}

void sub_1CCA393F4()
{
  JUMPOUT(0x1D17B214CLL);
}

uint64_t sub_1CCA39400(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1CCA39410(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CCA14E90(&qword_1ED8A8EE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CCA39450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_1CCB63490();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1CCA394C4(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

_BYTE **sub_1CCA394F8(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_1CCA39508(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  sub_1CCA0CB60(v6, v7, a3);
  v8 = *a1 + 8;
  sub_1CCB63E44();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t method lookup function for FMIPDeviceImageCacheOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPDeviceImageCacheOperation.__allocating_init(request:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

void sub_1CCA3958C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  void *v5;
  void *v6;
  _QWORD v7[6];

  v5 = *v3;
  if (a2)
  {
    v7[4] = a2;
    v7[5] = a3;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 1107296256;
    v7[2] = sub_1CCA39644;
    v7[3] = &unk_1E88F0AD8;
    v6 = _Block_copy(v7);
    swift_retain();
    swift_release();
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(v5, sel_authenticateWithContext_completion_, a1, v6);
  _Block_release(v6);
}

uint64_t sub_1CCA39644(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1CCA14E90(&qword_1EF9DFD10);
    v4 = sub_1CCB638E0();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

id sub_1CCA396D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t *v12;
  char *v13;
  id v14;
  id v15;
  char *v16;
  id v17;
  void *v18;
  id result;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  objc_super v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  _UNKNOWN **v33;

  *(_QWORD *)&v6[OBJC_IVAR____TtC8FMIPCore37FMIPEphemeralAuthenticationController_authenticationResults] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8FMIPCore37FMIPEphemeralAuthenticationController_action] = a1;
  v12 = (uint64_t *)&v6[OBJC_IVAR____TtC8FMIPCore37FMIPEphemeralAuthenticationController_username];
  *v12 = a2;
  v12[1] = a3;
  if (a4)
  {
    v13 = v6;
    swift_retain();
    swift_bridgeObjectRetain();
    v14 = a4;
  }
  else
  {
    v15 = objc_allocWithZone(MEMORY[0x1E0D00128]);
    v16 = v6;
    swift_retain();
    swift_bridgeObjectRetain();
    v14 = objc_msgSend(v15, sel_init);
  }
  v17 = a4;
  v18 = sub_1CCA3A7E8(v14, a2, a3);

  swift_bridgeObjectRelease();
  *(_QWORD *)&v6[OBJC_IVAR____TtC8FMIPCore37FMIPEphemeralAuthenticationController_authenticationContext] = v18;
  sub_1CCA3AA78(a6, (uint64_t)&v29);
  if (v30)
  {
    sub_1CCA21ACC(&v29, (uint64_t)&v31);
  }
  else
  {
    result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D00130]), sel_init);
    if (!result)
    {
      __break(1u);
      return result;
    }
    v20 = result;
    v32 = sub_1CCA3AAC0();
    v33 = &off_1E88F0AC8;
    *(_QWORD *)&v31 = v20;
    sub_1CC9C3E84((uint64_t)&v29, &qword_1ED8A7AB8);
  }
  sub_1CCA21ACC(&v31, (uint64_t)&v6[OBJC_IVAR____TtC8FMIPCore37FMIPEphemeralAuthenticationController_authenticationController]);

  v28.receiver = v6;
  v28.super_class = (Class)type metadata accessor for FMIPEphemeralAuthenticationController();
  v21 = objc_msgSendSuper2(&v28, sel_init);
  v22 = qword_1ED8AA630;
  v23 = v21;
  if (v22 != -1)
    swift_once();
  v24 = sub_1CCB637FC();
  sub_1CCA16C20(v24, (uint64_t)qword_1ED8AD7F8);
  v25 = sub_1CCB637D8();
  v26 = sub_1CCB63D48();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1CC9BF000, v25, v26, "FMIPAuthKitAuthenticationController: initialized", v27, 2u);
    MEMORY[0x1D17B214C](v27, -1, -1);
  }

  swift_release();
  sub_1CC9C3E84(a6, &qword_1ED8A7AB8);
  sub_1CC9C3E84(a5, &qword_1ED8A9DE8);
  return v23;
}

void sub_1CCA3996C(uint64_t a1, void *a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  _QWORD *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  char *v38;
  void *v39;
  char v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;

  if (a2)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v7 = sub_1CCB637FC();
    sub_1CCA16C20(v7, (uint64_t)qword_1ED8AD7F8);
    v8 = a2;
    v9 = a2;
    v10 = sub_1CCB637D8();
    v11 = sub_1CCB63D48();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v53 = v13;
      *(_DWORD *)v12 = 136315138;
      v54 = (uint64_t)a2;
      v14 = a2;
      sub_1CCA14E90(&qword_1EF9DFCB8);
      v15 = sub_1CCB639AC();
      v54 = sub_1CCA0CB60(v15, v16, &v53);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPAuthKitAuthenticationController: failed to authenticate %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v13, -1, -1);
      MEMORY[0x1D17B214C](v12, -1, -1);
    }
    else
    {

    }
    ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, void *))a3)(0, 0, 0, 0, a2);
    return;
  }
  if (a1)
  {
    v19 = sub_1CCB63988();
    if (*(_QWORD *)(a1 + 16) && (v21 = sub_1CCA074F4(v19, v20), (v22 & 1) != 0))
    {
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v21);
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      v54 = v23;
      sub_1CCA14E90(&qword_1EF9DFD10);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v24 = sub_1CCB63988();
        if (*(_QWORD *)(a1 + 16) && (v26 = sub_1CCA074F4(v24, v25), (v27 & 1) != 0))
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v26);
          swift_unknownObjectRetain();
          swift_bridgeObjectRelease();
          v53 = v28;
          if ((swift_dynamicCast() & 1) != 0)
          {
            if (qword_1ED8AA630 != -1)
              swift_once();
            v29 = sub_1CCB637FC();
            sub_1CCA16C20(v29, (uint64_t)qword_1ED8AD7F8);
            swift_bridgeObjectRetain();
            v30 = sub_1CCB637D8();
            v31 = sub_1CCB63D48();
            if (os_log_type_enabled(v30, v31))
            {
              v32 = (uint8_t *)swift_slowAlloc();
              v52 = v30;
              v33 = (_QWORD *)swift_slowAlloc();
              *(_DWORD *)v32 = 138412290;
              v53 = sub_1CCB638C8();
              sub_1CCB63E44();
              *v33 = v53;
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1CC9BF000, v52, v31, "FMIPAuthKitAuthenticationController: authentication results %@", v32, 0xCu);
              sub_1CCA14E90(&qword_1ED8A8E00);
              swift_arrayDestroy();
              MEMORY[0x1D17B214C](v33, -1, -1);
              MEMORY[0x1D17B214C](v32, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease();
            }
            *(_QWORD *)(a5 + OBJC_IVAR____TtC8FMIPCore37FMIPEphemeralAuthenticationController_authenticationResults) = sub_1CCA3A12C(a1);
            swift_bridgeObjectRelease();
            v51 = sub_1CCB64240();
            a3(v51);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        if (qword_1ED8AA630 != -1)
          swift_once();
        v47 = sub_1CCB637FC();
        sub_1CCA16C20(v47, (uint64_t)qword_1ED8AD7F8);
        v48 = sub_1CCB637D8();
        v49 = sub_1CCB63D48();
        if (os_log_type_enabled(v48, v49))
        {
          v50 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v50 = 0;
          _os_log_impl(&dword_1CC9BF000, v48, v49, "FMIPAuthKitAuthenticationController: empty dsid", v50, 2u);
          MEMORY[0x1D17B214C](v50, -1, -1);
        }

        sub_1CCA3A5DC();
        v39 = (void *)swift_allocError();
        v40 = 1;
LABEL_25:
        *v38 = v40;
        ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, void *))a3)(0, 0, 0, 0, v39);

        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (qword_1ED8AA630 != -1)
      swift_once();
    v34 = sub_1CCB637FC();
    sub_1CCA16C20(v34, (uint64_t)qword_1ED8AD7F8);
    v35 = sub_1CCB637D8();
    v36 = sub_1CCB63D48();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_1CC9BF000, v35, v36, "FMIPAuthKitAuthenticationController: empty password", v37, 2u);
      MEMORY[0x1D17B214C](v37, -1, -1);
    }

    sub_1CCA3A5DC();
    v39 = (void *)swift_allocError();
    v40 = 2;
    goto LABEL_25;
  }
  if (qword_1ED8AA630 != -1)
    swift_once();
  v41 = sub_1CCB637FC();
  sub_1CCA16C20(v41, (uint64_t)qword_1ED8AD7F8);
  v42 = sub_1CCB637D8();
  v43 = sub_1CCB63D48();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v44 = 0;
    _os_log_impl(&dword_1CC9BF000, v42, v43, "FMIPAuthKitAuthenticationController: empty authentication result", v44, 2u);
    MEMORY[0x1D17B214C](v44, -1, -1);
  }

  sub_1CCA3A5DC();
  v45 = (void *)swift_allocError();
  *v46 = 0;
  ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, void *))a3)(0, 0, 0, 0, v45);

}

unint64_t sub_1CCA3A12C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1CCA14E90(&qword_1ED8A8E40);
    v2 = (_QWORD *)sub_1CCB640B4();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = &qword_1EF9DFD10;
  v11 = MEMORY[0x1E0DEE9B8] + 8;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v31)
    goto LABEL_32;
  v21 = *(_QWORD *)(v32 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v31)
      goto LABEL_32;
    v21 = *(_QWORD *)(v32 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v31)
        goto LABEL_32;
      v21 = *(_QWORD *)(v32 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v31)
          goto LABEL_32;
        v21 = *(_QWORD *)(v32 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(_QWORD *)(v32 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v31)
                break;
              v21 = *(_QWORD *)(v32 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_1CCA2F54C();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v34 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v35 = *v24;
    v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_1CCA14E90(v10);
    swift_dynamicCast();
    sub_1CCA0799C(v6, v7);
    sub_1CCA0799C(v7, v40);
    sub_1CCA0799C(v40, &v38);
    result = sub_1CCA074F4(v35, v36);
    v25 = result;
    if ((v26 & 1) != 0)
    {
      v33 = i;
      v12 = v7;
      v13 = v6;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v17 = v35;
      v17[1] = v36;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v6 = v13;
      v7 = v12;
      i = v33;
      v18 = (_OWORD *)(v2[7] + 32 * v25);
      sub_1CCA01CA0((uint64_t)v18);
      result = (unint64_t)sub_1CCA0799C(&v38, v18);
      v5 = v34;
      if (!v34)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)sub_1CCA0799C(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_34;
    v2[2] = v30;
    v5 = v34;
    if (!v34)
      goto LABEL_11;
LABEL_10:
    v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

id FMIPEphemeralAuthenticationController.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void FMIPEphemeralAuthenticationController.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id FMIPEphemeralAuthenticationController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMIPEphemeralAuthenticationController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMIPEphemeralAuthenticationController()
{
  return objc_opt_self();
}

uint64_t sub_1CCA3A55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t method lookup function for FMIPEphemeralAuthenticationController()
{
  return swift_lookUpClassMethod();
}

unint64_t sub_1CCA3A5DC()
{
  unint64_t result;

  result = qword_1EF9DFD18;
  if (!qword_1EF9DFD18)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6793C, &type metadata for FMIPEphemeralAuthenticationError);
    atomic_store(result, (unint64_t *)&qword_1EF9DFD18);
  }
  return result;
}

uint64_t sub_1CCA3A620()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  uint64_t v2;

  type metadata accessor for FMIPLostModeAction(0);
  if (!swift_dynamicCastClass())
  {
    type metadata accessor for FMIPLockAction();
    if (!swift_dynamicCastClass())
    {
      type metadata accessor for FMIPEraseAction();
      swift_dynamicCastClass();
    }
  }
  type metadata accessor for FMLocalize();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = sub_1CCB63340();

  return v2;
}

void *sub_1CCA3A7E8(void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t ObjCClassFromMetadata;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;

  objc_msgSend(a1, sel_setIsEphemeral_, 1);
  objc_msgSend(a1, sel_setShouldPromptForPasswordOnly_, 1);
  v6 = (void *)sub_1CCB63964();
  objc_msgSend(a1, sel_setUsername_, v6);

  objc_msgSend(a1, sel_setIsUsernameEditable_, 0);
  type metadata accessor for FMLocalize();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v8 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  sub_1CCB63340();

  sub_1CCA14E90(&qword_1EF9DFD30);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1CCB677E0;
  *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v9 + 64) = sub_1CCA0C920();
  *(_QWORD *)(v9 + 32) = a2;
  *(_QWORD *)(v9 + 40) = a3;
  swift_bridgeObjectRetain();
  sub_1CCB639A0();
  swift_bridgeObjectRelease();
  v10 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setReason_, v10, 0xE000000000000000);

  sub_1CCA3A620();
  v11 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setDefaultButtonString_, v11);

  v12 = objc_opt_self();
  v13 = (void *)sub_1CCB63964();
  v14 = (void *)sub_1CCB63964();
  LOBYTE(v12) = objc_msgSend((id)v12, sel_BOOLForKey_inDomain_, v13, v14);

  if ((v12 & 1) == 0)
    objc_msgSend(a1, sel_setAuthenticationType_, 2);
  return a1;
}

uint64_t sub_1CCA3AA78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A7AB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1CCA3AAC0()
{
  unint64_t result;

  result = qword_1EF9DFD20;
  if (!qword_1EF9DFD20)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF9DFD20);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPEphemeralAuthenticationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCA3AB48 + 4 * byte_1CCB677F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CCA3AB7C + 4 * byte_1CCB677F0[v4]))();
}

uint64_t sub_1CCA3AB7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA3AB84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA3AB8CLL);
  return result;
}

uint64_t sub_1CCA3AB98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA3ABA0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCA3ABA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA3ABAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPEphemeralAuthenticationError()
{
  return &type metadata for FMIPEphemeralAuthenticationError;
}

unint64_t sub_1CCA3ABCC()
{
  unint64_t result;

  result = qword_1EF9DFD40;
  if (!qword_1EF9DFD40)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67914, &type metadata for FMIPEphemeralAuthenticationError);
    atomic_store(result, (unint64_t *)&qword_1EF9DFD40);
  }
  return result;
}

uint64_t type metadata accessor for FMIPCancelEraseRequest()
{
  uint64_t result;

  result = qword_1EF9DFD50;
  if (!qword_1EF9DFD50)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA3AC4C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1CCA3AC98()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v1 = (uint64_t *)(*(_QWORD *)(v0 + qword_1EF9FF498) + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  v2 = *v1;
  v3 = v1[1];
  v5[3] = MEMORY[0x1E0DEA968];
  v5[0] = v2;
  v5[1] = v3;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)v5, 0x656369766564, 0xE600000000000000);
  return swift_endAccess();
}

uint64_t sub_1CCA3AD34()
{
  return swift_release();
}

uint64_t sub_1CCA3AD44()
{
  sub_1CC9C785C();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA3AD84()
{
  return type metadata accessor for FMIPCancelEraseRequest();
}

uint64_t sub_1CCA3AD8C(char *a1, char *a2)
{
  return sub_1CCB1B290(*a1, *a2);
}

uint64_t sub_1CCA3AD98()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA3AE28()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA3AE94()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA3AF20@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1CCA3AF7C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7263734570696D66;
  if (*v1)
    v2 = 0x656B6F5468747561;
  v3 = 0xEE0044495555776FLL;
  if (*v1)
    v3 = 0xE90000000000006ELL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1CCA3AFCC()
{
  _BYTE *v0;

  if (*v0)
    return 0x656B6F5468747561;
  else
    return 0x7263734570696D66;
}

uint64_t sub_1CCA3B018@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1CCA3B078()
{
  sub_1CCA3B6F0();
  return sub_1CCB643D8();
}

uint64_t sub_1CCA3B0A0()
{
  sub_1CCA3B6F0();
  return sub_1CCB643E4();
}

uint64_t sub_1CCA3B0C8(_QWORD *a1)
{
  swift_allocObject();
  return sub_1CCA3B110(a1);
}

uint64_t sub_1CCA3B110(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  _QWORD v25[2];
  uint8_t *v26;
  uint64_t v27;
  os_log_t v28;
  uint64_t v29[7];

  v3 = (uint64_t)v1;
  v5 = sub_1CCA14E90(&qword_1EF9DFE80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA3B6F0();
  swift_retain();
  sub_1CCB643B4();
  if (v2)
  {
    swift_release();
    sub_1CCA01CA0((uint64_t)a1);
    type metadata accessor for FMIPValidatePasswordResponse();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v29[0]) = 1;
    v9 = sub_1CCB64150();
    v11 = v10;
    LOBYTE(v29[0]) = 0;
    v12 = sub_1CCB64150();
    v1[9] = v9;
    v1[10] = v11;
    v1[7] = v12;
    v1[8] = v13;
    swift_release();
    sub_1CC9EBC94((uint64_t)a1, (uint64_t)v29);
    v3 = sub_1CC9CA3D0(v29);
    v14 = qword_1ED8AA630;
    swift_retain();
    if (v14 != -1)
      swift_once();
    v15 = sub_1CCB637FC();
    sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD7F8);
    swift_retain_n();
    v16 = sub_1CCB637D8();
    v17 = sub_1CCB63D48();
    if (os_log_type_enabled(v16, v17))
    {
      v28 = v16;
      v18 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v29[0] = v27;
      v26 = v18;
      *(_DWORD *)v18 = 136315138;
      v25[1] = v18 + 4;
      v19 = sub_1CCA3B478();
      v29[6] = sub_1CCA0CB60(v19, v20, v29);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      v16 = v28;
      v21 = v17;
      v22 = v26;
      _os_log_impl(&dword_1CC9BF000, v28, v21, "FMIPValidatePasswordResponse: initialized with coder %s", v26, 0xCu);
      v23 = v27;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v23, -1, -1);
      MEMORY[0x1D17B214C](v22, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1CCA01CA0((uint64_t)a1);
    swift_release();
  }
  return v3;
}

uint64_t sub_1CCA3B478()
{
  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CC9E6BA4();
  sub_1CCB63A9C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 60;
}

uint64_t sub_1CCA3B650()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA3B66C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FMIPValidatePasswordResponse()
{
  return objc_opt_self();
}

uint64_t sub_1CCA3B6D0()
{
  return sub_1CCA3B478();
}

unint64_t sub_1CCA3B6F0()
{
  unint64_t result;

  result = qword_1EF9DFE88;
  if (!qword_1EF9DFE88)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67B4C, &type metadata for FMIPValidatePasswordResponse.ValidatePasswordCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFE88);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPValidatePasswordResponse.ValidatePasswordCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCA3B780 + 4 * byte_1CCB679C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCA3B7B4 + 4 * byte_1CCB679C0[v4]))();
}

uint64_t sub_1CCA3B7B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA3B7BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA3B7C4);
  return result;
}

uint64_t sub_1CCA3B7D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA3B7D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCA3B7DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA3B7E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPValidatePasswordResponse.ValidatePasswordCodingKeys()
{
  return &type metadata for FMIPValidatePasswordResponse.ValidatePasswordCodingKeys;
}

unint64_t sub_1CCA3B804()
{
  unint64_t result;

  result = qword_1EF9DFE90;
  if (!qword_1EF9DFE90)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67B24, &type metadata for FMIPValidatePasswordResponse.ValidatePasswordCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFE90);
  }
  return result;
}

unint64_t sub_1CCA3B84C()
{
  unint64_t result;

  result = qword_1EF9DFE98;
  if (!qword_1EF9DFE98)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67A5C, &type metadata for FMIPValidatePasswordResponse.ValidatePasswordCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFE98);
  }
  return result;
}

unint64_t sub_1CCA3B894()
{
  unint64_t result;

  result = qword_1EF9DFEA0;
  if (!qword_1EF9DFEA0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67A84, &type metadata for FMIPValidatePasswordResponse.ValidatePasswordCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFEA0);
  }
  return result;
}

double FMIPRangingParameters.inBTRangeDistanceInMeters.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t sub_1CCA3B8E0()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  return sub_1CCB64384();
}

uint64_t sub_1CCA3B934()
{
  return sub_1CCB639F4();
}

uint64_t sub_1CCA3B950()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  return sub_1CCB64384();
}

uint64_t sub_1CCA3B9A0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1CCA3B9F0(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000019;
  a1[1] = 0x80000001CCB77530;
}

unint64_t sub_1CCA3BA10()
{
  return 0xD000000000000019;
}

uint64_t sub_1CCA3BA2C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1CCA3BA80(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1CCA3BA8C()
{
  sub_1CCA3BBF4();
  return sub_1CCB643D8();
}

uint64_t sub_1CCA3BAB4()
{
  sub_1CCA3BBF4();
  return sub_1CCB643E4();
}

FMIPCore::FMIPRangingParameters __swiftcall FMIPRangingParameters.init()()
{
  _QWORD *v0;
  FMIPCore::FMIPRangingParameters result;

  *v0 = 0x4034000000000000;
  return result;
}

uint64_t FMIPRangingParameters.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = sub_1CCA14E90(&qword_1EF9DFEA8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA3BBF4();
  sub_1CCB643B4();
  if (!v2)
  {
    sub_1CCB64168();
    v10 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return sub_1CCA01CA0((uint64_t)a1);
}

unint64_t sub_1CCA3BBF4()
{
  unint64_t result;

  result = qword_1EF9DFEB0;
  if (!qword_1EF9DFEB0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67D54, &type metadata for FMIPRangingParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFEB0);
  }
  return result;
}

uint64_t FMIPRangingParameters.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_1CCA14E90(&qword_1EF9DFEB8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA3BBF4();
  sub_1CCB643CC();
  sub_1CCB641F8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

BOOL static FMIPRangingParameters.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1CCA3BD34@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return FMIPRangingParameters.init(from:)(a1, a2);
}

uint64_t sub_1CCA3BD48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_1CCA14E90(&qword_1EF9DFEB8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA3BBF4();
  sub_1CCB643CC();
  sub_1CCB641F8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

BOOL sub_1CCA3BE30(double *a1, double *a2)
{
  return *a1 == *a2;
}

ValueMetadata *type metadata accessor for FMIPRangingParameters()
{
  return &type metadata for FMIPRangingParameters;
}

uint64_t storeEnumTagSinglePayload for FMIPRangingParameters.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CCA3BE94 + 4 * byte_1CCB67BA0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CCA3BEB4 + 4 * byte_1CCB67BA5[v4]))();
}

_BYTE *sub_1CCA3BE94(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CCA3BEB4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCA3BEBC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCA3BEC4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCA3BECC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCA3BED4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FMIPRangingParameters.CodingKeys()
{
  return &type metadata for FMIPRangingParameters.CodingKeys;
}

unint64_t sub_1CCA3BEF4()
{
  unint64_t result;

  result = qword_1EF9DFEC0;
  if (!qword_1EF9DFEC0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67D2C, &type metadata for FMIPRangingParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFEC0);
  }
  return result;
}

unint64_t sub_1CCA3BF3C()
{
  unint64_t result;

  result = qword_1EF9DFEC8;
  if (!qword_1EF9DFEC8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67C64, &type metadata for FMIPRangingParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFEC8);
  }
  return result;
}

unint64_t sub_1CCA3BF84()
{
  unint64_t result;

  result = qword_1EF9DFED0;
  if (!qword_1EF9DFED0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67C8C, &type metadata for FMIPRangingParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFED0);
  }
  return result;
}

uint64_t sub_1CCA3BFC8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CCA3C004 + 4 * byte_1CCB67DB0[a1]))(0xD000000000000011, 0x80000001CCB78FE0);
}

uint64_t sub_1CCA3C004()
{
  uint64_t v0;

  return v0 + 5;
}

uint64_t sub_1CCA3C01C()
{
  return 0x6C6C416F54646461;
}

unint64_t sub_1CCA3C040()
{
  return 0xD000000000000010;
}

uint64_t FMIPSeparationEvent.itemOrDeviceCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t FMIPSeparationEvent.itemOrDeviceCount.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*FMIPSeparationEvent.itemOrDeviceCount.modify())()
{
  return nullsub_1;
}

uint64_t FMIPSeparationEvent.addSafeLocationTapped.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t FMIPSeparationEvent.addSafeLocationTapped.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*FMIPSeparationEvent.addSafeLocationTapped.modify())()
{
  return nullsub_1;
}

uint64_t FMIPSeparationEvent.addToAllTapped.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t FMIPSeparationEvent.addToAllTapped.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result;
  return result;
}

uint64_t (*FMIPSeparationEvent.addToAllTapped.modify())()
{
  return nullsub_1;
}

uint64_t FMIPSeparationEvent.homeRemoved.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 10);
}

uint64_t FMIPSeparationEvent.homeRemoved.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 10) = result;
  return result;
}

uint64_t (*FMIPSeparationEvent.homeRemoved.modify())()
{
  return nullsub_1;
}

FMIPCore::FMIPSeparationEvent __swiftcall FMIPSeparationEvent.init(itemOrDeviceCount:addSafeLocationTapped:addToAllTapped:homeRemoved:)(Swift::Int itemOrDeviceCount, Swift::Bool addSafeLocationTapped, Swift::Bool addToAllTapped, Swift::Bool homeRemoved)
{
  uint64_t v4;
  FMIPCore::FMIPSeparationEvent result;

  *(_QWORD *)v4 = itemOrDeviceCount;
  *(_BYTE *)(v4 + 8) = addSafeLocationTapped;
  *(_BYTE *)(v4 + 9) = addToAllTapped;
  *(_BYTE *)(v4 + 10) = homeRemoved;
  result.itemOrDeviceCount = itemOrDeviceCount;
  result.addSafeLocationTapped = addSafeLocationTapped;
  return result;
}

Swift::Void __swiftcall FMIPManager.enqueue(separationEvent:)(FMIPCore::FMIPSeparationEvent separationEvent)
{
  char v1;
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;

  v1 = *(_BYTE *)(separationEvent.itemOrDeviceCount + 8);
  v2 = *(_BYTE *)(separationEvent.itemOrDeviceCount + 9);
  v3 = *(_BYTE *)(separationEvent.itemOrDeviceCount + 10);
  v4 = *(_QWORD *)separationEvent.itemOrDeviceCount;
  v5 = v1;
  v6 = v2;
  v7 = v3;
  sub_1CCA3C130(&v4);
}

void sub_1CCA3C130(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  char isUniquelyReferenced_nonNull_native;
  id v8;
  char v9;
  id v10;
  char v11;
  id v12;
  char v13;
  void *v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[6];

  v1 = *a1;
  v2 = *((unsigned __int8 *)a1 + 8);
  v3 = *((unsigned __int8 *)a1 + 9);
  v4 = *((unsigned __int8 *)a1 + 10);
  v5 = sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v6, 0xD000000000000011, 0x80000001CCB78FE0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v2);
  v9 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v8, 0xD000000000000015, 0x80000001CCB79000, v9);
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v3);
  v11 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v10, 0x6C6C416F54646461, 0xEE00646570706154, v11);
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v4);
  v13 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v12, 0xD000000000000010, 0x80000001CCB79020, v13);
  swift_bridgeObjectRelease();
  v14 = (void *)sub_1CCB63964();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v5;
  v17[4] = sub_1CCA3C490;
  v17[5] = v15;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 1107296256;
  v17[2] = sub_1CCA7EAC8;
  v17[3] = &unk_1E88F0F98;
  v16 = _Block_copy(v17);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v16);
  swift_bridgeObjectRelease();

}

uint64_t initializeBufferWithCopyOfBuffer for FMIPSeparationEvent(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPSeparationEvent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 11))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPSeparationEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 11) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 11) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPSeparationEvent()
{
  return &type metadata for FMIPSeparationEvent;
}

uint64_t sub_1CCA3C46C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCA3C490()
{
  return swift_bridgeObjectRetain();
}

uint64_t FMIPB389ProductInformation.init(beacon:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1[3];
  v5 = a1[4];
  sub_1CCA04DDC(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 136))(v4, v5);
  v7 = a1[3];
  v8 = a1[4];
  sub_1CCA04DDC(a1, v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 144))(v7, v8);
  v10 = a1[3];
  v11 = a1[4];
  sub_1CCA04DDC(a1, v10);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 56))(v10, v11);
  *a2 = v6;
  a2[1] = v9;
  a2[2] = v12;
  a2[3] = v13;
  a2[4] = 0x656C707041;
  a2[5] = 0xE500000000000000;
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0x4010000000000000;
  return sub_1CCA01CA0((uint64_t)a1);
}

uint64_t FMIPB389ProductInformation.vendorIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t FMIPB389ProductInformation.productIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t FMIPB389ProductInformation.modelName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPB389ProductInformation.manufacturerName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPB389ProductInformation.appBundleIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

double FMIPB389ProductInformation.antennaPower.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

uint64_t FMIPB389ProductInformation.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  sub_1CCB64348();
  sub_1CCB64348();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  sub_1CCB64354();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
  }
  return sub_1CCB6436C();
}

uint64_t sub_1CCA3C6F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CCA3C728
                                                                     + 4 * asc_1CCB67DF0[a1]))(0xD000000000000010, 0x80000001CCB79090);
}

uint64_t sub_1CCA3C728(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_1CCA3C778()
{
  return 0x50616E6E65746E61;
}

uint64_t sub_1CCA3C798()
{
  unsigned __int8 *v0;

  return sub_1CCA3C6F0(*v0);
}

uint64_t sub_1CCA3C7A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCA3D59C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCA3C7C4()
{
  sub_1CCA3D08C();
  return sub_1CCB643D8();
}

uint64_t sub_1CCA3C7EC()
{
  sub_1CCA3D08C();
  return sub_1CCB643E4();
}

uint64_t FMIPB389ProductInformation.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[7];
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v4 = sub_1CCA14E90(&qword_1EF9DFED8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v12[5] = v1[2];
  v12[6] = v8;
  v9 = v1[3];
  v12[3] = v1[4];
  v12[4] = v9;
  v10 = v1[5];
  v12[1] = v1[6];
  v12[2] = v10;
  v12[0] = v1[7];
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA3D08C();
  sub_1CCB643CC();
  v18 = 0;
  sub_1CCB64204();
  if (!v2)
  {
    v17 = 1;
    sub_1CCB64204();
    v16 = 2;
    sub_1CCB641E0();
    v15 = 3;
    sub_1CCB641E0();
    v14 = 4;
    sub_1CCB641BC();
    v13 = 5;
    sub_1CCB641F8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t FMIPB389ProductInformation.hashValue.getter()
{
  sub_1CCB6433C();
  FMIPB389ProductInformation.hash(into:)();
  return sub_1CCB64384();
}

uint64_t FMIPB389ProductInformation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v5 = sub_1CCA14E90(&qword_1EF9DFEE8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCA3D08C();
  sub_1CCB643B4();
  if (v2)
    return sub_1CCA01CA0((uint64_t)a1);
  v34 = 0;
  v9 = sub_1CCB64174();
  v33 = 1;
  v10 = sub_1CCB64174();
  v32 = 2;
  v11 = sub_1CCB64150();
  v13 = v12;
  v27 = v11;
  v31 = 3;
  swift_bridgeObjectRetain();
  v28 = v13;
  v24 = sub_1CCB64150();
  v30 = 4;
  v26 = v14;
  swift_bridgeObjectRetain();
  v25 = 0;
  v23 = sub_1CCB64120();
  v29 = 5;
  v25 = v15;
  swift_bridgeObjectRetain();
  sub_1CCB64168();
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *a2 = v9;
  a2[1] = v10;
  v18 = v28;
  a2[2] = v27;
  a2[3] = v18;
  v19 = v25;
  v20 = v26;
  a2[4] = v24;
  a2[5] = v20;
  a2[6] = v23;
  a2[7] = v19;
  a2[8] = v17;
  sub_1CCA01CA0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

double sub_1CCA3CD88@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  FMIPB389ProductInformation.init(beacon:)(a1, (uint64_t *)v8);
  v3 = v9;
  v4 = v10;
  v5 = v12;
  v6 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = v4;
  result = *(double *)&v11;
  *(_OWORD *)(a2 + 48) = v11;
  *(_QWORD *)(a2 + 64) = v5;
  return result;
}

uint64_t sub_1CCA3CDD4()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1CCA3CDDC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1CCA3CDE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1CCA3CE10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1CCA3CE3C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

double sub_1CCA3CE68()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

uint64_t sub_1CCA3CE70@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FMIPB389ProductInformation.init(from:)(a1, a2);
}

uint64_t sub_1CCA3CE84(_QWORD *a1)
{
  return FMIPB389ProductInformation.encode(to:)(a1);
}

uint64_t sub_1CCA3CE98()
{
  sub_1CCB6433C();
  FMIPB389ProductInformation.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCA3CEFC()
{
  sub_1CCB6433C();
  FMIPB389ProductInformation.hash(into:)();
  return sub_1CCB64384();
}

BOOL _s8FMIPCore26FMIPB389ProductInformationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  char v14;
  char v15;
  char v16;

  result = 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v6 = *(_QWORD *)(a1 + 56);
    v8 = *(double *)(a1 + 64);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    v11 = *(_QWORD *)(a2 + 56);
    v13 = *(double *)(a2 + 64);
    if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
      goto LABEL_20;
    v14 = sub_1CCB642A0();
    result = 0;
    if ((v14 & 1) != 0)
    {
LABEL_20:
      if (v4 == v9 && v5 == v10 || (v15 = sub_1CCB642A0(), result = 0, (v15 & 1) != 0))
      {
        if (v6)
        {
          if (v11)
          {
            if (v7 != v12 || v6 != v11)
            {
              v16 = sub_1CCB642A0();
              result = 0;
              if ((v16 & 1) == 0)
                return result;
            }
            return v8 == v13;
          }
        }
        else if (!v11)
        {
          return v8 == v13;
        }
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_1CCA3D08C()
{
  unint64_t result;

  result = qword_1EF9DFEE0;
  if (!qword_1EF9DFEE0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67FF0, &type metadata for FMIPB389ProductInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFEE0);
  }
  return result;
}

unint64_t sub_1CCA3D0D0(_QWORD *a1)
{
  unint64_t result;

  a1[2] = sub_1CCA37EAC();
  a1[3] = sub_1CCA37DE0();
  result = sub_1CCA3D104();
  a1[4] = result;
  return result;
}

unint64_t sub_1CCA3D104()
{
  unint64_t result;

  result = qword_1EF9DFEF0;
  if (!qword_1EF9DFEF0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPB389ProductInformation, &type metadata for FMIPB389ProductInformation);
    atomic_store(result, (unint64_t *)&qword_1EF9DFEF0);
  }
  return result;
}

unint64_t sub_1CCA3D14C()
{
  unint64_t result;

  result = qword_1EF9DFEF8;
  if (!qword_1EF9DFEF8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPB389ProductInformation, &type metadata for FMIPB389ProductInformation);
    atomic_store(result, (unint64_t *)&qword_1EF9DFEF8);
  }
  return result;
}

uint64_t destroy for FMIPB389ProductInformation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FMIPB389ProductInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FMIPB389ProductInformation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  return a1;
}

__n128 initializeWithTake for FMIPB389ProductInformation(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for FMIPB389ProductInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPB389ProductInformation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPB389ProductInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPB389ProductInformation()
{
  return &type metadata for FMIPB389ProductInformation;
}

uint64_t storeEnumTagSinglePayload for FMIPB389ProductInformation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CCA3D444 + 4 * byte_1CCB67DFB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CCA3D478 + 4 * byte_1CCB67DF6[v4]))();
}

uint64_t sub_1CCA3D478(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA3D480(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA3D488);
  return result;
}

uint64_t sub_1CCA3D494(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA3D49CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CCA3D4A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA3D4A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPB389ProductInformation.CodingKeys()
{
  return &type metadata for FMIPB389ProductInformation.CodingKeys;
}

unint64_t sub_1CCA3D4C8()
{
  unint64_t result;

  result = qword_1EF9DFF00;
  if (!qword_1EF9DFF00)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67FC8, &type metadata for FMIPB389ProductInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFF00);
  }
  return result;
}

unint64_t sub_1CCA3D510()
{
  unint64_t result;

  result = qword_1EF9DFF08;
  if (!qword_1EF9DFF08)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67F38, &type metadata for FMIPB389ProductInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFF08);
  }
  return result;
}

unint64_t sub_1CCA3D558()
{
  unint64_t result;

  result = qword_1EF9DFF10;
  if (!qword_1EF9DFF10)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB67F60, &type metadata for FMIPB389ProductInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9DFF10);
  }
  return result;
}

uint64_t sub_1CCA3D59C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001CCB79090 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CCB77C60 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CCB775D0 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001CCB790B0 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x50616E6E65746E61 && a2 == 0xEC0000007265776FLL)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

FMIPCore::FMIPActionStatus_optional sub_1CCA3D81C@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  FMIPCore::FMIPActionStatus_optional result;
  char v4;
  char v5;

  result.value = FMIPActionStatus.init(rawValue:)(*(_QWORD *)(v1 + 48)).value;
  v4 = v5;
  if (v5 == 18)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1CCA3D85C(uint64_t a1)
{
  swift_allocObject();
  return sub_1CCA3D8A4(a1);
}

uint64_t sub_1CCA3D8A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13[7];

  sub_1CC9EBC94(a1, (uint64_t)v13);
  v3 = sub_1CCA5B658(v13);
  if (!v1)
  {
    v4 = qword_1ED8AA630;
    swift_retain();
    if (v4 != -1)
      swift_once();
    v5 = sub_1CCB637FC();
    sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
    swift_retain();
    v6 = sub_1CCB637D8();
    v7 = sub_1CCB63D48();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      *(_DWORD *)v8 = 136315138;
      v13[0] = v9;
      v10 = sub_1CCA5B9C4();
      v13[6] = sub_1CCA0CB60(v10, v11, v13);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v6, v7, "FMIPRemoveResponse: initialized with coder %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v9, -1, -1);
      MEMORY[0x1D17B214C](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }

  }
  sub_1CCA01CA0(a1);
  return v3;
}

uint64_t type metadata accessor for FMIPRemoveResponse()
{
  return objc_opt_self();
}

FMIPCore::FMIPAuthEventResponse_optional __swiftcall FMIPAuthEventResponse.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  FMIPCore::FMIPAuthEventResponse_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t FMIPAuthEventResponse.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6465696E6564;
  if (*v0 != 1)
    v1 = 0x776F4E746F6ELL;
  if (*v0)
    return v1;
  else
    return 0x6465746E617267;
}

unint64_t sub_1CCA3DB48(char a1)
{
  unint64_t result;

  result = 0xD000000000000011;
  if (a1 == 1)
    return 0xD00000000000001CLL;
  return result;
}

uint64_t sub_1CCA3DBA4(char *a1, unsigned __int8 *a2)
{
  return sub_1CCB1CC08(*a1, *a2);
}

uint64_t sub_1CCA3DBB0()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA3DC48()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA3DCBC()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPAuthEventResponse_optional sub_1CCA3DD50(Swift::String *a1)
{
  return FMIPAuthEventResponse.init(rawValue:)(*a1);
}

void sub_1CCA3DD5C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0x6465696E6564;
  if (v2 != 1)
    v4 = 0x776F4E746F6ELL;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x6465746E617267;
  if (!v5)
    v3 = 0xE600000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t FMIPNotificationAuthLaunchEvent.findMyNotificationAuthStatus.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t FMIPNotificationAuthLaunchEvent.findMyNotificationAuthStatus.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*FMIPNotificationAuthLaunchEvent.findMyNotificationAuthStatus.modify())()
{
  return nullsub_1;
}

uint64_t FMIPNotificationAuthLaunchEvent.utAlertAuthStatus.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t FMIPNotificationAuthLaunchEvent.utAlertAuthStatus.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*FMIPNotificationAuthLaunchEvent.utAlertAuthStatus.modify())()
{
  return nullsub_1;
}

void FMIPNotificationAuthPromptEvent.authEventResponse.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *FMIPNotificationAuthPromptEvent.authEventResponse.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*FMIPNotificationAuthPromptEvent.authEventResponse.modify())()
{
  return nullsub_1;
}

FMIPCore::FMIPNotificationAuthPromptEvent __swiftcall FMIPNotificationAuthPromptEvent.init(authEventResponse:)(FMIPCore::FMIPNotificationAuthPromptEvent authEventResponse)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)authEventResponse.authEventResponse;
  return authEventResponse;
}

Swift::Void __swiftcall FMIPManager.enqueue(notificationPromptEvent:)(FMIPCore::FMIPNotificationAuthPromptEvent notificationPromptEvent)
{
  _s8FMIPCore13FMIPAnalyticsV31sendNotificationAuthPromptEvent5eventyAA016FMIPNotificationefG0V_tFZ_0();
}

void _s8FMIPCore13FMIPAnalyticsV31sendNotificationAuthPromptEvent5eventyAA016FMIPNotificationefG0V_tFZ_0()
{
  unint64_t v0;
  id v1;
  void *v2;
  id v3;
  char isUniquelyReferenced_nonNull_native;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[6];

  v0 = sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
  v1 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v2 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithString_, v2);

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v3, 0xD000000000000011, 0x80000001CCB79170, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v5 = (void *)sub_1CCB63964();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v0;
  v8[4] = sub_1CCA3E1C0;
  v8[5] = v6;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = sub_1CCA7EAC8;
  v8[3] = &unk_1E88F1430;
  v7 = _Block_copy(v8);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v7);
  swift_bridgeObjectRelease();

}

unint64_t sub_1CCA3E01C()
{
  unint64_t result;

  result = qword_1EF9E0018;
  if (!qword_1EF9E0018)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPAuthEventResponse, &type metadata for FMIPAuthEventResponse);
    atomic_store(result, (unint64_t *)&qword_1EF9E0018);
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPAuthEventResponse()
{
  return &type metadata for FMIPAuthEventResponse;
}

__n128 initializeBufferWithCopyOfBuffer for FMIPNotificationAuthLaunchEvent(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPNotificationAuthLaunchEvent(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FMIPNotificationAuthLaunchEvent(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

uint64_t _s8FMIPCore21FMIPAuthEventResponseOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCA3E118 + 4 * byte_1CCB68075[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CCA3E14C + 4 * asc_1CCB68070[v4]))();
}

uint64_t sub_1CCA3E14C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA3E154(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA3E15CLL);
  return result;
}

uint64_t sub_1CCA3E168(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA3E170);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCA3E174(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA3E17C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPNotificationAuthPromptEvent()
{
  return &type metadata for FMIPNotificationAuthPromptEvent;
}

uint64_t sub_1CCA3E198()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t FMIPShowContactDetailsAction.phoneNumber.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore28FMIPShowContactDetailsAction_phoneNumber);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPShowContactDetailsAction.enabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore28FMIPShowContactDetailsAction_enabled);
}

uint64_t FMIPShowContactDetailsAction.__allocating_init(device:phoneNumber:enabled:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  FMIPShowContactDetailsAction.init(device:phoneNumber:enabled:)(a1, a2, a3, a4);
  return v8;
}

uint64_t FMIPShowContactDetailsAction.init(device:phoneNumber:enabled:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_QWORD *)(v4 + OBJC_IVAR____TtC8FMIPCore28FMIPShowContactDetailsAction_phoneNumber);
  *v5 = a2;
  v5[1] = a3;
  *(_BYTE *)(v4 + OBJC_IVAR____TtC8FMIPCore28FMIPShowContactDetailsAction_enabled) = a4;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext) = 0;
  v6 = (_QWORD *)(v4 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(v4 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
  *v7 = 0;
  v7[1] = 0;
  v8 = (_QWORD *)(v4 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_username);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(v4 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(v4 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
  *v10 = 0;
  v10[1] = 0;
  *(_OWORD *)(v4 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession) = xmmword_1CCB66A50;
  sub_1CC9F73E8(a1, v4 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  return v4;
}

uint64_t sub_1CCA3E340()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8FMIPCore28FMIPShowContactDetailsAction_enabled))
    return 0x64656C62616E65;
  else
    return 0x64656C6261736964;
}

uint64_t static FMIPShowContactDetailsAction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore28FMIPShowContactDetailsAction_enabled) == *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC8FMIPCore28FMIPShowContactDetailsAction_enabled))
    return static FMIPDevice.== infix(_:_:)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  else
    return 0;
}

void FMIPShowContactDetailsAction.__allocating_init(device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPShowContactDetailsAction.init(device:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CCA3E414()
{
  return swift_bridgeObjectRelease();
}

uint64_t FMIPShowContactDetailsAction.deinit()
{
  uint64_t v0;

  v0 = FMIPDeviceAction.deinit();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FMIPShowContactDetailsAction.__deallocating_deinit()
{
  FMIPDeviceAction.deinit();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA3E4A4(_QWORD *a1, _QWORD *a2)
{
  if (*(unsigned __int8 *)(*a1 + OBJC_IVAR____TtC8FMIPCore28FMIPShowContactDetailsAction_enabled) == *(unsigned __int8 *)(*a2 + OBJC_IVAR____TtC8FMIPCore28FMIPShowContactDetailsAction_enabled))
    return static FMIPDevice.== infix(_:_:)(*a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  else
    return 0;
}

uint64_t sub_1CCA3E4E4()
{
  return type metadata accessor for FMIPShowContactDetailsAction();
}

uint64_t type metadata accessor for FMIPShowContactDetailsAction()
{
  uint64_t result;

  result = qword_1EF9E0048;
  if (!qword_1EF9E0048)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCA3E528()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for FMIPShowContactDetailsAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPShowContactDetailsAction.__allocating_init(device:phoneNumber:enabled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t dispatch thunk of FMIPShowContactDetailsAction.debugState()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

void FMIPEraseMetadata.status.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t FMIPEraseMetadata.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FMIPEraseMetadata() + 20);
  v4 = sub_1CCB635B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FMIPEraseMetadata.phoneNumber.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPEraseMetadata() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPEraseMetadata.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPEraseMetadata() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPEraseMetadata.isTextCustomized.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FMIPEraseMetadata() + 32));
}

void sub_1CCA3E67C(char *a1)
{
  sub_1CCB1D038(*a1);
}

void sub_1CCA3E688()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCA3E6CC()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCA3E764()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCA3E798()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCA3E81C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCA3E85C()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCA3E8F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCA40124();
  *a1 = result;
  return result;
}

uint64_t sub_1CCA3E920()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCA3E948 + 4 * byte_1CCB6825F[*v0]))();
}

void sub_1CCA3E948(_QWORD *a1@<X8>)
{
  *a1 = 0x72624E72656E776FLL;
  a1[1] = 0xE800000000000000;
}

void sub_1CCA3E964(_QWORD *a1@<X8>)
{
  *a1 = 0x6954657461657263;
  a1[1] = 0xEF706D617473656DLL;
}

void sub_1CCA3E98C(_QWORD *a1@<X8>)
{
  *a1 = 0x6F43737574617473;
  a1[1] = 0xEA00000000006564;
}

void sub_1CCA3E9AC(_QWORD *a1@<X8>)
{
  *a1 = 0x7478655472657375;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1CCA3E9C8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCA3E9F0 + 4 * byte_1CCB68264[*v0]))(1954047348, 0xE400000000000000);
}

uint64_t sub_1CCA3E9F0()
{
  return 0x72624E72656E776FLL;
}

uint64_t sub_1CCA3EA08()
{
  return 0x6954657461657263;
}

uint64_t sub_1CCA3EA2C()
{
  return 0x6F43737574617473;
}

uint64_t sub_1CCA3EA48()
{
  return 0x7478655472657375;
}

uint64_t sub_1CCA3EA60@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCA40124();
  *a1 = result;
  return result;
}

void sub_1CCA3EA84(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1CCA3EA90()
{
  sub_1CC9F57FC();
  return sub_1CCB643D8();
}

uint64_t sub_1CCA3EAB8()
{
  sub_1CC9F57FC();
  return sub_1CCB643E4();
}

unint64_t FMIPEraseMetadata.debugDescription.getter()
{
  void *v0;
  void *v1;
  id v2;

  v0 = (void *)objc_opt_self();
  type metadata accessor for FMIPEraseMetadata();
  v1 = (void *)sub_1CCB63538();
  v2 = objc_msgSend(v0, sel_localizedStringFromDate_dateStyle_timeStyle_, v1, 1, 4);

  sub_1CCB63988();
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  FMIPActionStatus.description.getter();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return 0xD00000000000001CLL;
}

void FMIPEraseMetadata.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v3 = sub_1CCA14E90(&qword_1EF9E01F0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMIPEraseMetadata();
  v10 = v1;
  v7 = (void *)sub_1CCB63538();
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CC9F57FC();
  sub_1CCB643CC();
  objc_msgSend(v7, sel_fm_epoch);
  v17 = 2;
  v8 = v11;
  sub_1CCB6421C();
  if (!v8)
  {
    v12 = qword_1CCB68500[*v10];
    sub_1CCB64240();
    v16 = 3;
    sub_1CCB641E0();
    swift_bridgeObjectRelease();
    v15 = 0;
    sub_1CCB641E0();
    v14 = 1;
    sub_1CCB641E0();
    v13 = 4;
    sub_1CCB641EC();
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

}

void sub_1CCA3EE64(_QWORD *a1)
{
  FMIPEraseMetadata.encode(to:)(a1);
}

uint64_t sub_1CCA3EE80(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_1CCB63A84();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x1D17B0FC4](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

unsigned __int8 *sub_1CCA3EEF8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1CCA3F034(a1, a2, a3);
}

unsigned __int8 *sub_1CCA3EF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_1CCB63AB4();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_1CCA3F2B0();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_1CCB6400C();
  }
LABEL_7:
  v11 = sub_1CCA3F034(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1CCA3EFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPEraseMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned __int8 *sub_1CCA3F034(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1CCA3F2B0()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_1CCB63AC0();
  v4 = sub_1CCA3F32C(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1CCA3F32C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_1CCA3F470(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_1CCA0D02C(v9, 0);
      v12 = sub_1CCA3F55C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v13 = MEMORY[0x1D17B0F58](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x1D17B0F58);
LABEL_9:
      sub_1CCB6400C();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1D17B0F58]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_1CCA3F470(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1CCA3EE80(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1CCA3EE80(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_1CCB63A60();
  }
  __break(1u);
  return result;
}

unint64_t sub_1CCA3F55C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1CCA3EE80(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_1CCB63A6C();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_1CCB6400C();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1CCA3EE80(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_1CCB63A48();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t _s8FMIPCore17FMIPEraseMetadataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  BOOL v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;

  v4 = type metadata accessor for FMIPEraseMetadata();
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v49 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v52 = (char *)&v49 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v51 = (uint64_t)&v49 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v49 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v49 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v49 - v22;
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v49 - v24;
  v26 = sub_1CCB63574();
  sub_1CCA4016C(a1, (uint64_t)v25);
  sub_1CCA4016C(a2, (uint64_t)v23);
  if ((v26 & 1) == 0)
  {
    sub_1CCA401B0((uint64_t)v23);
    sub_1CCA401B0((uint64_t)v25);
    sub_1CCA4016C(a1, (uint64_t)v20);
    sub_1CCA4016C(a2, (uint64_t)v17);
    v31 = (uint64_t)v52;
LABEL_11:
    sub_1CCA401B0((uint64_t)v20);
    sub_1CCA401B0((uint64_t)v17);
    v39 = v51;
    sub_1CCA4016C(a1, v51);
    sub_1CCA4016C(a2, v31);
    goto LABEL_12;
  }
  v50 = v4;
  v27 = qword_1CCB68500[*v25];
  v28 = v10;
  v29 = v7;
  v30 = qword_1CCB68500[*v23];
  sub_1CCA401B0((uint64_t)v23);
  sub_1CCA401B0((uint64_t)v25);
  sub_1CCA4016C(a1, (uint64_t)v20);
  sub_1CCA4016C(a2, (uint64_t)v17);
  v37 = v27 == v30;
  v7 = v29;
  v10 = v28;
  v31 = (uint64_t)v52;
  if (!v37)
    goto LABEL_11;
  v32 = v50;
  v33 = *(int *)(v50 + 28);
  v34 = *(_QWORD *)&v20[v33];
  v35 = *(_QWORD *)&v20[v33 + 8];
  v36 = &v17[v33];
  v37 = v34 == *(_QWORD *)v36 && v35 == *((_QWORD *)v36 + 1);
  if (v37)
  {
    sub_1CCA401B0((uint64_t)v20);
    sub_1CCA401B0((uint64_t)v17);
    v39 = v51;
    sub_1CCA4016C(a1, v51);
    sub_1CCA4016C(a2, v31);
LABEL_16:
    v42 = *(int *)(v32 + 24);
    v43 = *(_QWORD *)(v39 + v42);
    v44 = *(_QWORD *)(v39 + v42 + 8);
    v45 = (_QWORD *)(v31 + v42);
    if (v43 == *v45 && v44 == v45[1])
    {
      sub_1CCA401B0(v39);
      sub_1CCA401B0(v31);
      sub_1CCA4016C(a1, (uint64_t)v10);
      sub_1CCA4016C(a2, (uint64_t)v7);
    }
    else
    {
      v46 = sub_1CCB642A0();
      sub_1CCA401B0(v39);
      sub_1CCA401B0(v31);
      sub_1CCA4016C(a1, (uint64_t)v10);
      sub_1CCA4016C(a2, (uint64_t)v7);
      if ((v46 & 1) == 0)
        goto LABEL_13;
    }
    v47 = v10[*(int *)(v32 + 32)];
    sub_1CCA401B0((uint64_t)v10);
    v48 = v7[*(int *)(v32 + 32)];
    sub_1CCA401B0((uint64_t)v7);
    v40 = v47 ^ v48 ^ 1;
    return v40 & 1;
  }
  v38 = sub_1CCB642A0();
  sub_1CCA401B0((uint64_t)v20);
  sub_1CCA401B0((uint64_t)v17);
  v39 = v51;
  sub_1CCA4016C(a1, v51);
  sub_1CCA4016C(a2, v31);
  if ((v38 & 1) != 0)
    goto LABEL_16;
LABEL_12:
  sub_1CCA401B0(v39);
  sub_1CCA401B0(v31);
  sub_1CCA4016C(a1, (uint64_t)v10);
  sub_1CCA4016C(a2, (uint64_t)v7);
LABEL_13:
  sub_1CCA401B0((uint64_t)v7);
  sub_1CCA401B0((uint64_t)v10);
  v40 = 0;
  return v40 & 1;
}

_QWORD *initializeBufferWithCopyOfBuffer for FMIPEraseMetadata(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = sub_1CCB635B0();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = a3[7];
    v13 = (_QWORD *)((char *)v4 + v11);
    v14 = (_QWORD *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (_QWORD *)((char *)v4 + v12);
    v17 = (_QWORD *)((char *)a2 + v12);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for FMIPEraseMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for FMIPEraseMetadata(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = &a1[v11];
  v16 = &a2[v11];
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  a1[a3[8]] = a2[a3[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for FMIPEraseMetadata(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

_BYTE *initializeWithTake for FMIPEraseMetadata(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

_BYTE *assignWithTake for FMIPEraseMetadata(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = (uint64_t *)&a2[v10];
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

uint64_t sub_1CCA3FF1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1CCB635B0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1CCA3FFA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1CCB635B0();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPEraseMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CCA4006C + 4 * byte_1CCB6826E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CCA400A0 + 4 * byte_1CCB68269[v4]))();
}

uint64_t sub_1CCA400A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA400A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA400B0);
  return result;
}

uint64_t sub_1CCA400BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA400C4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CCA400C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA400D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t sub_1CCA400E0()
{
  unint64_t result;

  result = qword_1EF9E01F8;
  if (!qword_1EF9E01F8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB68484, &type metadata for FMIPEraseMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E01F8);
  }
  return result;
}

uint64_t sub_1CCA40124()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_1CCA4016C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPEraseMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCA401B0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FMIPEraseMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CCA401EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = type metadata accessor for FMIPItem();
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v11 = (char *)v23 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v24 = v9;
    v25 = a2;
    v26 = v2;
    v13 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v14 = *(_QWORD *)(v9 + 72);
    v23[1] = a1;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1CCA0BEEC(v13, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v15 = &v11[*(int *)(v5 + 64)];
      v16 = *((_QWORD *)v15 + 1);
      v17 = v15[32];
      sub_1CCA0BEEC((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if (v16)
      {
        sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        __asm { BR              X8 }
      }
      v18 = &v8[*(int *)(v5 + 56)];
      if (*(_QWORD *)v18 != 1702060355 || *((_QWORD *)v18 + 1) != 0xE400000000000000)
        sub_1CCB642A0();
      sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v20 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
        break;
      sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v13 += v14;
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        v21 = 1;
        v9 = v24;
        a2 = v25;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v21, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    a2 = v25;
    sub_1CC9FED60((uint64_t)v11, v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v21 = 0;
    v9 = v24;
  }
  else
  {
    v21 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v21, 1, v5);
}

void sub_1CCA40470()
{
  swift_bridgeObjectRelease();
  JUMPOUT(0x1CCA40410);
}

uint64_t sub_1CCA40480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = type metadata accessor for FMIPItem();
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v11 = (char *)v23 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v24 = v9;
    v25 = a2;
    v26 = v2;
    v13 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v14 = *(_QWORD *)(v9 + 72);
    v23[1] = a1;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1CCA0BEEC(v13, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v15 = &v11[*(int *)(v5 + 64)];
      v16 = *((_QWORD *)v15 + 1);
      v17 = v15[32];
      sub_1CCA0BEEC((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if (v16)
      {
        sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        __asm { BR              X8 }
      }
      v18 = &v8[*(int *)(v5 + 56)];
      if (*(_QWORD *)v18 != 1702060355 || *((_QWORD *)v18 + 1) != 0xE400000000000000)
        sub_1CCB642A0();
      sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v20 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
        break;
      sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v13 += v14;
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        v21 = 1;
        v9 = v24;
        a2 = v25;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v21, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    a2 = v25;
    sub_1CC9FED60((uint64_t)v11, v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v21 = 0;
    v9 = v24;
  }
  else
  {
    v21 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v21, 1, v5);
}

void sub_1CCA4071C()
{
  swift_bridgeObjectRelease();
  JUMPOUT(0x1CCA406BCLL);
}

uint64_t sub_1CCA4072C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = type metadata accessor for FMIPItem();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v23 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v24 = v6;
    v25 = a2;
    v26 = v2;
    v13 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v14 = *(_QWORD *)(v6 + 72);
    v23[1] = a1;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1CCA0BEEC(v13, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v15 = &v11[*(int *)(v5 + 64)];
      v16 = *((_QWORD *)v15 + 1);
      v17 = v15[32];
      sub_1CCA0BEEC((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if (v16)
      {
        sub_1CCA0BF30((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        __asm { BR              X8 }
      }
      v18 = &v9[*(int *)(v5 + 56)];
      v19 = *(_QWORD *)v18 == 1702060355 && *((_QWORD *)v18 + 1) == 0xE400000000000000;
      if (v19 || (sub_1CCB642A0() & 1) != 0)
        break;
      sub_1CCA0BF30((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v20 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
        goto LABEL_16;
      sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v13 += v14;
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        v21 = 1;
        v6 = v24;
        a2 = v25;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v21, 1, v5);
      }
    }
    sub_1CCA0BF30((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    swift_bridgeObjectRelease();
LABEL_16:
    swift_bridgeObjectRelease();
    v6 = v24;
    a2 = v25;
    sub_1CC9FED60((uint64_t)v11, v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v21 = 0;
  }
  else
  {
    v21 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v21, 1, v5);
}

uint64_t FMIPActionStatus.rawValue.getter()
{
  char *v0;

  return qword_1CCB688B8[*v0];
}

uint64_t sub_1CCA409D4()
{
  return sub_1CCA40A38(&qword_1EF9DEF70, (uint64_t)qword_1EF9FF4C0);
}

uint64_t sub_1CCA409F0(uint64_t a1)
{
  return sub_1CC9C2A34(a1, qword_1EF9FF4D8);
}

uint64_t sub_1CCA40A1C()
{
  return sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
}

uint64_t sub_1CCA40A38(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = sub_1CCB637FC();
  return sub_1CCA16C20(v3, a2);
}

uint64_t FMIPActionStatus.isActionSuccessful.getter()
{
  _BYTE *v0;

  return (0x3E004u >> *v0) & 1;
}

uint64_t FMIPActionStatus.isSafetyWarning.getter()
{
  _BYTE *v0;

  return (0xBC8u >> *v0) & 1;
}

BOOL sub_1CCA40AA4(char *a1, char *a2)
{
  return qword_1CCB688B8[*a1] == qword_1CCB688B8[*a2];
}

uint64_t sub_1CCA40AC8()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

uint64_t sub_1CCA40B14()
{
  return sub_1CCB64348();
}

uint64_t sub_1CCA40B48()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

FMIPCore::FMIPActionStatus_optional sub_1CCA40B90(Swift::Int *a1)
{
  return FMIPActionStatus.init(rawValue:)(*a1);
}

void sub_1CCA40B98(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1CCB688B8[*v1];
}

unint64_t sub_1CCA40BB4()
{
  unint64_t result;

  result = qword_1EF9E0200;
  if (!qword_1EF9E0200)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPActionStatus, &type metadata for FMIPActionStatus);
    atomic_store(result, (unint64_t *)&qword_1EF9E0200);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPActionStatus(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPActionStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_1CCA40CD8 + 4 * byte_1CCB685E7[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1CCA40D0C + 4 * byte_1CCB685E2[v4]))();
}

uint64_t sub_1CCA40D0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA40D14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCA40D1CLL);
  return result;
}

uint64_t sub_1CCA40D28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCA40D30);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_1CCA40D34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCA40D3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPActionStatus()
{
  return &type metadata for FMIPActionStatus;
}

id sub_1CCA40D58()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 40);
  if (v1)
  {
    v2 = *(id *)(v0 + 40);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D89930]), sel_init);
    v4 = *(void **)(v0 + 40);
    *(_QWORD *)(v0 + 40) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

uint64_t sub_1CCA40DC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v20 = v19;
    *(_DWORD *)v5 = 136315138;
    v6 = *(_QWORD *)(v1 + 16);
    v7 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain();
    v8 = sub_1CC9C6AE4(0xCuLL, v6, v7);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x1D17B0F34](v8, v10, v12, v14);
    v17 = v16;
    swift_bridgeObjectRelease();
    sub_1CCA0CB60(v15, v17, &v20);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPDeviceActionsController<%s>.deinit", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v19, -1, -1);
    MEMORY[0x1D17B214C](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_bridgeObjectRelease();

  sub_1CCA01CA0(v1 + 48);
  sub_1CC9C3E84(v1 + 88, &qword_1ED8A9DE8);
  sub_1CC9C3E84(v1 + 128, &qword_1ED8A7AB8);
  swift_release();
  return v1;
}

uint64_t sub_1CCA4100C()
{
  sub_1CCA40DC0();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCA4102C(uint64_t a1, _QWORD *a2, uint64_t a3, void (*a4)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, void *, uint64_t), uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, void *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _OWORD v39[5];
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v9 = a1;
  if (qword_1ED8A8C10 != -1)
    a1 = swift_once();
  v10 = *(_QWORD *)(v9 + 48);
  v37 = a3;
  v38 = a2;
  v35 = a4;
  v36 = a5;
  if (byte_1ED8A70D1 != 1)
    goto LABEL_6;
  if ((v10 & 0x2000000000000000) != 0)
  {
    v11 = HIBYTE(v10) & 0xF;
    if (v11)
      goto LABEL_6;
LABEL_9:
    v21 = 0;
    v24 = 0;
    v14 = 0;
    v27 = 0;
    v23 = 0xEE006D6F632E656CLL;
    v12 = 0x707061406F6D6564;
    v22 = 1;
    v20 = 0xE000000000000000;
    v17 = 0xE000000000000000;
    v15 = 1;
    v13 = 1;
    v25 = 0x707061406F6D6564;
    v26 = 0xEE006D6F632E656CLL;
    goto LABEL_7;
  }
  v11 = *(_QWORD *)(v9 + 40) & 0xFFFFFFFFFFFFLL;
  if (!v11)
    goto LABEL_9;
LABEL_6:
  v32 = *(_QWORD *)(v9 + 80);
  v33 = *(_QWORD *)(v9 + 72);
  v34 = *(_QWORD *)(v9 + 48);
  v30 = *(_QWORD *)(v9 + 56);
  v31 = *(_QWORD *)(v9 + 64);
  v12 = *(_QWORD *)(v9 + 40);
  v13 = *(_BYTE *)(v9 + 35);
  v14 = *(_BYTE *)(v9 + 34);
  v15 = *(_BYTE *)(v9 + 33);
  v16 = *(_BYTE *)(v9 + 32);
  v18 = *(_QWORD *)(v9 + 16);
  v17 = *(_QWORD *)(v9 + 24);
  v19 = *(_QWORD *)v9;
  v20 = *(_QWORD *)(v9 + 8);
  a1 = sub_1CC9DA35C(v9);
  v21 = v19;
  v22 = v16;
  v11 = v33;
  v23 = v34;
  v24 = v18;
  v25 = v30;
  v26 = v31;
  v27 = v32;
LABEL_7:
  *(_QWORD *)&v41 = v21;
  *((_QWORD *)&v41 + 1) = v20;
  *(_QWORD *)&v42 = v24;
  *((_QWORD *)&v42 + 1) = v17;
  LOBYTE(v43) = v22;
  BYTE1(v43) = v15;
  BYTE2(v43) = v14;
  BYTE3(v43) = v13;
  *((_QWORD *)&v43 + 1) = v12;
  *(_QWORD *)&v44 = v23;
  *((_QWORD *)&v44 + 1) = v25;
  *(_QWORD *)&v45 = v26;
  *((_QWORD *)&v45 + 1) = v11;
  v46 = v27;
  v28 = (void *)MEMORY[0x1D17B1B7C](a1);
  v39[2] = v43;
  v39[3] = v44;
  v39[4] = v45;
  v40 = v27;
  v39[0] = v41;
  v39[1] = v42;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCA56DCC(v37, (uint64_t)v39, v38, v35, v36, v37, v38, (uint64_t)&v41);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  objc_autoreleasePoolPop(v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA412CC(uint64_t a1, void *a2, void (*a3)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, void *, uint64_t), uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  void *v31;
  id v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void (*v38)(uint64_t, void (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t);
  char *v39;
  uint64_t v41;
  _QWORD v42[5];
  uint64_t v43[5];

  if (a2)
  {
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v11 = sub_1CCB637FC();
    sub_1CCA16C20(v11, (uint64_t)qword_1EF9FF4C0);
    v12 = a2;
    v13 = a2;
    v14 = sub_1CCB637D8();
    v15 = sub_1CCB63D48();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v43[0] = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = a2;
      sub_1CCA14E90(&qword_1EF9DFCB8);
      v19 = sub_1CCB639AC();
      v42[0] = sub_1CCA0CB60(v19, v20, v43);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v14, v15, "FMIPDeviceActionsController: error verifing trusted status action:\n%s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v17, -1, -1);
      MEMORY[0x1D17B214C](v16, -1, -1);
    }
    else
    {

    }
    LOBYTE(v43[0]) = 0;
    return ((uint64_t (*)(uint64_t *, _QWORD, void *, uint64_t))a3)(v43, 0, a2, a5);
  }
  else
  {
    v24 = (_QWORD *)swift_allocObject();
    v24[2] = a3;
    v24[3] = a4;
    v24[4] = a5;
    v24[5] = a6;
    v25 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144);
    swift_retain_n();
    swift_retain_n();
    v26 = swift_retain_n();
    if ((v25(v26) & 1) != 0)
    {
      v27 = *(_QWORD *)(a7 + 40);
      v28 = *(_QWORD *)(a7 + 48);
      v29 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152);
      swift_retain();
      v30 = swift_bridgeObjectRetain();
      v31 = (void *)v29(v30);
      sub_1CC9EAB74((uint64_t)(a6 + 11), (uint64_t)v43, &qword_1ED8A9DE8);
      sub_1CC9EAB74((uint64_t)(a6 + 16), (uint64_t)v42, &qword_1ED8A7AB8);
      v32 = objc_allocWithZone((Class)type metadata accessor for FMIPEphemeralAuthenticationController());
      v33 = (char *)sub_1CCA396D4(a1, v27, v28, v31, (uint64_t)v43, (uint64_t)v42);
      v34 = (_QWORD *)swift_allocObject();
      v34[2] = sub_1CCA57234;
      v34[3] = v24;
      v34[4] = a1;
      v34[5] = a6;
      v35 = *(_QWORD *)&v33[OBJC_IVAR____TtC8FMIPCore37FMIPEphemeralAuthenticationController_authenticationController
                          + 24];
      v36 = *(_QWORD *)&v33[OBJC_IVAR____TtC8FMIPCore37FMIPEphemeralAuthenticationController_authenticationController
                          + 32];
      sub_1CCA04DDC(&v33[OBJC_IVAR____TtC8FMIPCore37FMIPEphemeralAuthenticationController_authenticationController], v35);
      v41 = *(_QWORD *)&v33[OBJC_IVAR____TtC8FMIPCore37FMIPEphemeralAuthenticationController_authenticationContext];
      v37 = (_QWORD *)swift_allocObject();
      v37[2] = sub_1CCA5728C;
      v37[3] = v34;
      v37[4] = v33;
      v38 = *(void (**)(uint64_t, void (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t))(v36 + 8);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v39 = v33;
      v38(v41, sub_1CCA572E0, v37, v35, v36);
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      sub_1CCA416E8(a1, 0, a3, a4, a5, a6);
      swift_release();
    }
    swift_release();
    swift_release();
    return swift_release();
  }
}

void sub_1CCA416E8(uint64_t a1, void *a2, void (*a3)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, void *, uint64_t), uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void (*v38)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t (*v40)(uint64_t, void *);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  void *v66;
  _BYTE *v67;
  uint64_t v68;

  if (a2)
  {
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v10 = sub_1CCB637FC();
    sub_1CCA16C20(v10, (uint64_t)qword_1EF9FF4C0);
    v11 = a2;
    v12 = a2;
    v13 = sub_1CCB637D8();
    v14 = sub_1CCB63D48();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v68 = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = a2;
      sub_1CCA14E90(&qword_1EF9DFCB8);
      v18 = sub_1CCB639AC();
      sub_1CCA0CB60(v18, v19, &v68);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v13, v14, "FMIPDeviceActionsController: error authenticating action: %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v16, -1, -1);
      MEMORY[0x1D17B214C](v15, -1, -1);
    }
    else
    {

    }
    LOBYTE(v68) = 0;
    a3((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v68, 0, a2, a5);
    return;
  }
  type metadata accessor for FMIPShowContactDetailsAction();
  v21 = swift_dynamicCastClass();
  if (v21)
  {
    v22 = v21;
    swift_retain();
    sub_1CCA4EC84(v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))a3, a4);
LABEL_14:
    swift_release();
    return;
  }
  type metadata accessor for FMIPPlaySoundDeviceAction(0);
  v23 = swift_dynamicCastClass();
  if (v23)
  {
    v24 = v23;
    swift_retain();
    sub_1CCA41F30(v24, a3, a4);
    goto LABEL_14;
  }
  type metadata accessor for FMIPLostModeAction(0);
  v25 = swift_dynamicCastClass();
  if (v25)
  {
    v26 = v25;
    swift_retain();
    sub_1CCA4E6F8(v26, (void (*)(char *, uint64_t, void *, uint64_t))a3, a4);
    goto LABEL_14;
  }
  type metadata accessor for FMIPLockAction();
  v27 = swift_dynamicCastClass();
  if (v27)
  {
    v28 = v27;
    type metadata accessor for FMIPLockRequest();
    *(_QWORD *)(swift_allocObject() + qword_1EF9FF708) = v28;
    if ((*(_QWORD *)(v28 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 216) & 0x80) != 0)
      v29 = 0xD00000000000001CLL;
    else
      v29 = 0x4D646E416B636F6CLL;
    if ((*(_QWORD *)(v28 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 216) & 0x80) != 0)
      v30 = 0x80000001CCB79790;
    else
      v30 = 0xEE00656761737365;
    v31 = *(_QWORD *)(v28 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
    v32 = *(_QWORD *)(v28 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken + 8);
    swift_bridgeObjectRetain();
    swift_retain_n();
    v33 = sub_1CCA601C8(v29, v30, v31, v32, 1);
    v34 = a6 + 6;
    v36 = a6[9];
    v35 = a6[10];
    sub_1CCA04DDC(v34, v36);
    v37 = (_QWORD *)swift_allocObject();
    v37[2] = a3;
    v37[3] = a4;
    v37[4] = v28;
    v38 = *(void (**)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t))(v35 + 56);
    v39 = type metadata accessor for FMIPLockResponse();
    swift_retain();
    swift_retain();
    v40 = sub_1CCA57398;
LABEL_39:
    v38(v33, v40, v37, v39, v36, v35);
    swift_release();
    swift_release();
    goto LABEL_14;
  }
  type metadata accessor for FMIPEraseAction();
  v41 = swift_dynamicCastClass();
  if (v41)
  {
    v42 = v41;
    type metadata accessor for FMIPEraseRequest();
    *(_QWORD *)(swift_allocObject() + qword_1EF9FF5B8) = v42;
    v43 = *(_QWORD *)(v42 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 216);
    if ((v43 & 0x80) != 0)
      v44 = 0xD000000000000018;
    else
      v44 = 0xD000000000000016;
    if ((v43 & 0x80) != 0)
      v45 = 0x80000001CCB79770;
    else
      v45 = 0x80000001CCB79750;
    v46 = *(_QWORD *)(v42 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
    v47 = *(_QWORD *)(v42 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken + 8);
    swift_bridgeObjectRetain();
    swift_retain_n();
    v33 = sub_1CCA601C8(v44, v45, v46, v47, 1);
    v48 = a6 + 6;
    v36 = a6[9];
    v35 = a6[10];
    sub_1CCA04DDC(v48, v36);
    v37 = (_QWORD *)swift_allocObject();
    v37[2] = a3;
    v37[3] = a4;
    v37[4] = v42;
    v38 = *(void (**)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t))(v35 + 56);
    v39 = type metadata accessor for FMIPEraseResponse();
    swift_retain();
    swift_retain();
    v40 = sub_1CCA5734C;
    goto LABEL_39;
  }
  type metadata accessor for FMIPCancelEraseAction();
  v49 = swift_dynamicCastClass();
  if (v49)
  {
    v50 = v49;
    type metadata accessor for FMIPCancelEraseRequest();
    *(_QWORD *)(swift_allocObject() + qword_1EF9FF498) = v50;
    if ((*(_QWORD *)(v50 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 216) & 0x80) != 0)
      v51 = 0xD000000000000018;
    else
      v51 = 0x69576C65636E6163;
    if ((*(_QWORD *)(v50 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 216) & 0x80) != 0)
      v52 = 0x80000001CCB79730;
    else
      v52 = 0xEA00000000006570;
    v53 = *(_QWORD *)(v50 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
    v54 = *(_QWORD *)(v50 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken + 8);
    swift_bridgeObjectRetain();
    swift_retain_n();
    v33 = sub_1CCA601C8(v51, v52, v53, v54, 1);
    v55 = a6 + 6;
    v36 = a6[9];
    v35 = a6[10];
    sub_1CCA04DDC(v55, v36);
    v37 = (_QWORD *)swift_allocObject();
    v37[2] = a3;
    v37[3] = a4;
    v37[4] = v50;
    v38 = *(void (**)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t))(v35 + 56);
    v39 = type metadata accessor for FMIPCancelEraseResponse();
    swift_retain();
    swift_retain();
    v40 = sub_1CCA57300;
    goto LABEL_39;
  }
  type metadata accessor for FMIPNotifyAction(0);
  v56 = swift_dynamicCastClass();
  if (v56)
  {
    v57 = v56;
    swift_retain();
    sub_1CCA4F63C(v57, (void (*)(uint64_t *, uint64_t, void *, uint64_t))a3, a4);
    goto LABEL_14;
  }
  type metadata accessor for FMIPRemoveDeviceAction(0);
  v58 = swift_dynamicCastClass();
  if (v58)
  {
    v59 = v58;
    swift_retain();
    sub_1CCA52B7C(v59, (uint64_t)a3, a4);
    goto LABEL_14;
  }
  type metadata accessor for FMIPRepairDeviceAction();
  v60 = swift_dynamicCastClass();
  if (v60)
  {
    v61 = v60;
    swift_retain();
    sub_1CCA53AC4(v61, (uint64_t)a3, a4);
    goto LABEL_14;
  }
  if (qword_1EF9DEF70 != -1)
    swift_once();
  v62 = sub_1CCB637FC();
  sub_1CCA16C20(v62, (uint64_t)qword_1EF9FF4C0);
  v63 = sub_1CCB637D8();
  v64 = sub_1CCB63D48();
  if (os_log_type_enabled(v63, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v65 = 0;
    _os_log_impl(&dword_1CC9BF000, v63, v64, "FMIPDeviceActionsController: cannot map action to request", v65, 2u);
    MEMORY[0x1D17B214C](v65, -1, -1);
  }

  LOBYTE(v68) = 0;
  sub_1CCA5589C();
  v66 = (void *)swift_allocError();
  *v67 = 0;
  a3((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v68, 0, v66, a5);

}

void sub_1CCA41F30(uint64_t a1, void (*a2)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, void *, uint64_t), uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v32;
  uint64_t v33;
  void (*v34)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, void *, uint64_t);
  uint64_t v35;

  if (qword_1EF9DEF70 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1EF9FF4C0);
  swift_retain_n();
  v7 = sub_1CCB637D8();
  v8 = sub_1CCB63D48();
  if (os_log_type_enabled(v7, v8))
  {
    v34 = a2;
    v9 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v35 = v33;
    *(_DWORD *)v9 = 136446979;
    swift_retain();
    v10 = sub_1CCA61E9C();
    v12 = v11;
    swift_release();
    sub_1CCA0CB60(v10, v12, &v35);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 12) = 2160;
    sub_1CCB63E44();
    *(_WORD *)(v9 + 22) = 2081;
    v13 = a3;
    v14 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
    v15 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 8);
    swift_bridgeObjectRetain();
    sub_1CCA0CB60(v14, v15, &v35);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 32) = 2082;
    v16 = swift_bridgeObjectRetain();
    v17 = MEMORY[0x1D17B10B4](v16, &type metadata for FMIPPlaySoundChannels);
    v19 = v18;
    swift_bridgeObjectRelease();
    v20 = v17;
    a3 = v13;
    sub_1CCA0CB60(v20, v19, &v35);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1CC9BF000, v7, v8, "FMIPDeviceActionsController: perform %{public}s for %{private,mask.hash}s. Channels: %{public}s", (uint8_t *)v9, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v33, -1, -1);
    v21 = v9;
    a2 = v34;
    MEMORY[0x1D17B214C](v21, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v22 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_soundMethod);
  if (v22 >= 2)
  {
    if (v22 == 2)
    {
      v26 = sub_1CCB637D8();
      v27 = sub_1CCB63D48();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v28 = 0;
        _os_log_impl(&dword_1CC9BF000, v26, v27, "FMIPDeviceActionsController: ble sound method", v28, 2u);
        MEMORY[0x1D17B214C](v28, -1, -1);
      }

      sub_1CCA423C4(a1, a2, a3);
    }
    else
    {
      v29 = sub_1CCB637D8();
      v30 = sub_1CCB63D48();
      if (os_log_type_enabled(v29, v30))
      {
        v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v32 = 0;
        _os_log_impl(&dword_1CC9BF000, v29, v30, "FMIPDeviceActionsController: siri sound method", v32, 2u);
        MEMORY[0x1D17B214C](v32, -1, -1);
      }

      sub_1CCA4DDF0(a1, a2, a3);
    }
  }
  else
  {
    v23 = sub_1CCB637D8();
    v24 = sub_1CCB63D48();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1CC9BF000, v23, v24, "FMIPDeviceActionsController: classic sound method", v25, 2u);
      MEMORY[0x1D17B214C](v25, -1, -1);
    }

    sub_1CCA4AC70(a1, (uint64_t)a2, a3);
  }
}

void sub_1CCA423C4(uint64_t a1, void (*a2)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, void *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  NSObject *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t inited;
  _QWORD *v157;
  uint8_t *v158;
  uint64_t v159;
  uint8_t *v160;
  unsigned int (*v161)(char *, uint64_t, uint64_t);
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  NSObject *v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  os_log_type_t v175;
  NSObject *v176;
  uint8_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  _BYTE *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  os_log_type_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  NSObject *v197;
  uint64_t v198;
  _BOOL4 v199;
  uint8_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  _BYTE *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t (*v218)(uint64_t, uint64_t, uint64_t);
  int v219;
  uint8_t *v220;
  uint64_t v221;
  int v222;
  os_log_t v223;
  uint64_t v224;
  uint64_t v225;
  os_log_t v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  os_log_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  NSObject *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint8_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _WORD *v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  os_log_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  NSObject *v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  uint8_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _WORD *v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  os_log_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  NSObject *v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  uint8_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _WORD *v321;
  uint64_t v322;
  uint64_t v323;
  char v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unsigned int (*v329)(uint64_t, uint64_t, uint64_t);
  char *v330;
  uint64_t v331;
  void (*v332)(unint64_t, os_log_t, uint64_t);
  uint64_t v333;
  os_log_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _QWORD *v348;
  NSObject *v349;
  uint8_t *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  _BYTE *v354;
  uint64_t v355;
  uint64_t v356;
  char v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  os_log_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  NSObject *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  _QWORD *v375;
  uint8_t *v376;
  uint64_t v377;
  unsigned int (*v378)(uint64_t, uint64_t, uint64_t);
  char *v379;
  uint64_t v380;
  void (*v381)(unint64_t, os_log_t, uint64_t);
  uint64_t v382;
  os_log_t v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  _QWORD *v397;
  NSObject *v398;
  uint8_t *v399;
  uint64_t v400;
  uint64_t v401;
  os_log_t v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  _QWORD *v412;
  uint8_t *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  void (*v419)(uint64_t, uint64_t);
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  os_log_t v426;
  uint64_t v427;
  uint64_t v428;
  NSObject *v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  _QWORD *v436;
  uint8_t *v437;
  uint64_t v438;
  uint64_t *v439;
  char *v440;
  void (*v441)(unint64_t, os_log_t, uint64_t);
  uint64_t v442;
  char *v443;
  os_log_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  _QWORD *v457;
  NSObject *v458;
  uint8_t *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  _BYTE *v463;
  uint64_t v464;
  uint64_t v465;
  char v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unsigned int (*v473)(uint64_t, uint64_t, uint64_t);
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t *v479;
  char *v480;
  uint64_t v481;
  int v482;
  void (*v483)(char *, uint64_t);
  uint64_t v484;
  unsigned int (*v485)(uint64_t, uint64_t, uint64_t);
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  os_log_t v490;
  uint64_t v491;
  uint64_t v492;
  NSObject *v493;
  int v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  _QWORD *v500;
  uint8_t *v501;
  uint64_t v502;
  uint64_t v503;
  char *v504;
  void (*v505)(unint64_t, os_log_t, uint64_t);
  uint64_t v506;
  char *v507;
  os_log_t v508;
  uint64_t v509;
  uint64_t v510;
  int v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  _QWORD *v521;
  NSObject *v522;
  uint8_t *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  _BYTE *v527;
  uint64_t v528;
  uint64_t v529;
  char v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  unsigned int (*v535)(uint64_t, uint64_t, uint64_t);
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  char *v539;
  void (*v540)(unint64_t, os_log_t, uint64_t);
  uint64_t v541;
  uint64_t v542;
  os_log_t v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  _QWORD *v556;
  NSObject *v557;
  uint8_t *v558;
  uint64_t v559;
  unsigned int (*v560)(uint64_t, uint64_t, uint64_t);
  uint64_t v561;
  void (*v562)(unint64_t, os_log_t, uint64_t);
  uint64_t v563;
  uint64_t v564;
  os_log_t v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  _QWORD *v578;
  NSObject *v579;
  uint8_t *v580;
  uint64_t v581;
  uint64_t v582;
  char v583;
  uint64_t v584;
  char *v585;
  uint64_t v586;
  os_log_t v587;
  unint64_t v588;
  uint64_t v589;
  unint64_t v590;
  char *v591;
  uint64_t v592;
  NSObject *v593;
  os_log_type_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  _QWORD *v600;
  uint64_t v601;
  os_log_type_t v602;
  uint8_t *v603;
  uint64_t v604;
  unsigned int (*v605)(uint64_t, uint64_t, uint64_t);
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  char *v611;
  void (*v612)(unint64_t, os_log_t, uint64_t);
  uint64_t v613;
  char *v614;
  uint64_t v615;
  os_log_t v616;
  unint64_t v617;
  uint64_t v618;
  uint64_t v619;
  int v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  _QWORD *v630;
  NSObject *v631;
  uint8_t *v632;
  uint64_t v633;
  char *v634;
  uint64_t v635;
  os_log_t v636;
  unint64_t v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  os_log_type_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  _QWORD *v647;
  os_log_type_t v648;
  uint8_t *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  char *v653;
  void (*v654)(unint64_t, os_log_t, uint64_t);
  uint64_t v655;
  os_log_t v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  _QWORD *v669;
  NSObject *v670;
  uint8_t *v671;
  uint64_t v672;
  char *v673;
  void (*v674)(unint64_t, os_log_t, uint64_t);
  uint64_t v675;
  os_log_t v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  int v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  _QWORD *v691;
  NSObject *v692;
  uint8_t *v693;
  uint64_t v694;
  uint64_t v695;
  void (*v696)(unint64_t, os_log_t, uint64_t);
  uint64_t v697;
  uint64_t v698;
  os_log_t v699;
  unint64_t v700;
  uint64_t v701;
  uint64_t v702;
  NSObject *v703;
  int v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  _QWORD *v714;
  uint8_t *v715;
  uint64_t v716;
  uint64_t v717;
  void (*v718)(unint64_t, os_log_t, uint64_t);
  uint64_t v719;
  uint64_t v720;
  os_log_t v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t v724;
  NSObject *v725;
  int v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  _QWORD *v736;
  uint8_t *v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  void (*v741)(uint64_t, uint64_t);
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  unsigned int (*v745)(uint64_t, uint64_t, uint64_t);
  void (*v746)(char *, uint64_t, uint64_t);
  void (*v747)(uint64_t, char *, uint64_t);
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  char *v752;
  char *v753;
  uint64_t v754;
  uint64_t v755;
  char *v756;
  char *v757;
  char *v758;
  char *v759;
  char *v760;
  char *v761;
  char *v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  char *v766;
  char *v767;
  char *v768;
  char *v769;
  uint64_t v770;
  char *v771;
  char *v772;
  char *v773;
  uint64_t v774;
  uint64_t v775;
  char *v776;
  char *v777;
  char *v778;
  uint64_t v779;
  uint64_t v780;
  char *v781;
  char *v782;
  uint64_t v783;
  char *v784;
  char *v785;
  char *v786;
  uint64_t v787;
  char *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  char *v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  char *v796;
  uint64_t v797;
  uint8_t *v798;
  os_log_t v799;
  NSObject *v800;
  uint8_t *v801;
  os_log_t v802;
  char *v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint8_t *v810;
  uint64_t v811;
  uint64_t v812;
  char *v813;
  void (*v814)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, void *, uint64_t);
  uint64_t v815;
  char *v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  char v820;
  uint64_t (*v821)(uint64_t, uint64_t, uint64_t);
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint8_t *v825;

  v815 = a3;
  v814 = a2;
  v810 = 0;
  v4 = sub_1CCA14E90((uint64_t *)&unk_1EF9DF580);
  v5 = MEMORY[0x1E0C80A78](v4);
  v789 = (uint64_t)&v745 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v794 = (uint64_t)&v745 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v791 = (uint64_t)&v745 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v795 = (uint64_t)&v745 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v790 = (uint64_t)&v745 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v800 = ((char *)&v745 - v16);
  v17 = MEMORY[0x1E0C80A78](v15);
  v799 = (os_log_t)((char *)&v745 - v18);
  v19 = MEMORY[0x1E0C80A78](v17);
  v798 = (uint8_t *)&v745 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v797 = (uint64_t)&v745 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v805 = (uint64_t)&v745 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v804 = (uint64_t)&v745 - v26;
  MEMORY[0x1E0C80A78](v25);
  v806 = (uint64_t)&v745 - v27;
  v28 = sub_1CCB637FC();
  v818 = *(_QWORD *)(v28 - 8);
  v819 = v28;
  v29 = MEMORY[0x1E0C80A78](v28);
  v816 = (char *)&v745 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v803 = (char *)&v745 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v761 = (char *)&v745 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v760 = (char *)&v745 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v753 = (char *)&v745 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v752 = (char *)&v745 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v759 = (char *)&v745 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v758 = (char *)&v745 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v773 = (char *)&v745 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v768 = (char *)&v745 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v771 = (char *)&v745 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v762 = (char *)&v745 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v767 = (char *)&v745 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v785 = (char *)&v745 - v56;
  v57 = MEMORY[0x1E0C80A78](v55);
  v772 = (char *)&v745 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v781 = (char *)&v745 - v60;
  v61 = MEMORY[0x1E0C80A78](v59);
  v776 = (char *)&v745 - v62;
  v63 = MEMORY[0x1E0C80A78](v61);
  v788 = (char *)&v745 - v64;
  v65 = MEMORY[0x1E0C80A78](v63);
  v778 = (char *)&v745 - v66;
  v67 = MEMORY[0x1E0C80A78](v65);
  v786 = (char *)&v745 - v68;
  v69 = MEMORY[0x1E0C80A78](v67);
  v782 = (char *)&v745 - v70;
  v71 = MEMORY[0x1E0C80A78](v69);
  v792 = (char *)&v745 - v72;
  MEMORY[0x1E0C80A78](v71);
  v796 = (char *)&v745 - v73;
  v74 = sub_1CCA14E90(&qword_1ED8A8EF8);
  v75 = MEMORY[0x1E0C80A78](v74);
  v749 = (uint64_t)&v745 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = MEMORY[0x1E0C80A78](v75);
  v748 = (uint64_t)&v745 - v78;
  v79 = MEMORY[0x1E0C80A78](v77);
  v755 = (uint64_t)&v745 - v80;
  v81 = MEMORY[0x1E0C80A78](v79);
  v754 = (uint64_t)&v745 - v82;
  v83 = MEMORY[0x1E0C80A78](v81);
  v764 = (uint64_t)&v745 - v84;
  v85 = MEMORY[0x1E0C80A78](v83);
  v770 = (uint64_t)&v745 - v86;
  v87 = MEMORY[0x1E0C80A78](v85);
  v763 = (uint64_t)&v745 - v88;
  v89 = MEMORY[0x1E0C80A78](v87);
  v783 = (uint64_t)&v745 - v90;
  v91 = MEMORY[0x1E0C80A78](v89);
  v774 = (uint64_t)&v745 - v92;
  v93 = MEMORY[0x1E0C80A78](v91);
  v787 = (uint64_t)&v745 - v94;
  v95 = MEMORY[0x1E0C80A78](v93);
  v779 = (uint64_t)&v745 - v96;
  v97 = MEMORY[0x1E0C80A78](v95);
  v809 = (uint64_t)&v745 - v98;
  v99 = MEMORY[0x1E0C80A78](v97);
  v807 = (uint64_t)&v745 - v100;
  v101 = MEMORY[0x1E0C80A78](v99);
  v808 = (uint64_t)&v745 - v102;
  MEMORY[0x1E0C80A78](v101);
  v104 = (char *)&v745 - v103;
  v105 = sub_1CCB63604();
  v106 = *(_QWORD *)(v105 - 8);
  v107 = MEMORY[0x1E0C80A78](v105);
  v751 = (uint64_t)&v745 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = MEMORY[0x1E0C80A78](v107);
  v750 = (uint64_t)&v745 - v110;
  v111 = MEMORY[0x1E0C80A78](v109);
  v757 = (char *)&v745 - v112;
  v113 = MEMORY[0x1E0C80A78](v111);
  v756 = (char *)&v745 - v114;
  v115 = MEMORY[0x1E0C80A78](v113);
  v766 = (char *)&v745 - v116;
  v117 = MEMORY[0x1E0C80A78](v115);
  v769 = (char *)&v745 - v118;
  v119 = MEMORY[0x1E0C80A78](v117);
  v765 = (uint64_t)&v745 - v120;
  v121 = MEMORY[0x1E0C80A78](v119);
  v777 = (char *)&v745 - v122;
  v123 = MEMORY[0x1E0C80A78](v121);
  v775 = (uint64_t)&v745 - v124;
  v125 = MEMORY[0x1E0C80A78](v123);
  v784 = (char *)&v745 - v126;
  v127 = MEMORY[0x1E0C80A78](v125);
  v780 = (uint64_t)&v745 - v128;
  v129 = MEMORY[0x1E0C80A78](v127);
  v802 = (os_log_t)((char *)&v745 - v130);
  v801 = v131;
  MEMORY[0x1E0C80A78](v129);
  v813 = (char *)&v745 - v132;
  v133 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v133);
  v135 = (char *)&v745 - ((v134 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for FMIPItemGroup();
  v137 = *(_QWORD *)(v136 - 8);
  MEMORY[0x1E0C80A78](v136);
  v139 = (char *)&v745 - ((v138 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device;
  v811 = type metadata accessor for FMIPDevice();
  v141 = *(int *)(v811 + 128);
  v812 = v140;
  sub_1CC9EAB74(v140 + v141, (uint64_t)v135, &qword_1ED8A8C30);
  v142 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v137 + 48))(v135, 1, v136);
  v143 = v819;
  v817 = a1;
  if (v142 == 1)
  {
    v144 = a1;
    sub_1CC9C3E84((uint64_t)v135, &qword_1ED8A8C30);
    v145 = sub_1CCA40A38(&qword_1EF9DEF70, (uint64_t)qword_1EF9FF4C0);
    v146 = v818;
    v147 = v143;
    (*(void (**)(char *, uint64_t, uint64_t))(v818 + 16))(v816, v145, v143);
    v148 = swift_allocObject();
    *(_QWORD *)(v148 + 16) = sub_1CCA573E0;
    *(_QWORD *)(v148 + 24) = v144;
    v149 = v144;
    swift_retain();
    v150 = sub_1CCB637D8();
    v151 = sub_1CCB63D30();
    v152 = swift_allocObject();
    *(_BYTE *)(v152 + 16) = 34;
    v153 = swift_allocObject();
    *(_BYTE *)(v153 + 16) = 8;
    v154 = swift_allocObject();
    *(_QWORD *)(v154 + 16) = sub_1CCA566B8;
    *(_QWORD *)(v154 + 24) = v148;
    v155 = swift_allocObject();
    *(_QWORD *)(v155 + 16) = sub_1CC9F44EC;
    *(_QWORD *)(v155 + 24) = v154;
    sub_1CCA14E90(&qword_1ED8A8E10);
    inited = swift_initStackObject();
    sub_1CCAAB9E4(inited, 3);
    *v157 = sub_1CCA566D0;
    v157[1] = v152;
    v157[2] = sub_1CCA573F4;
    v157[3] = v153;
    v157[4] = sub_1CCA566E8;
    v157[5] = v155;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v813) = v151;
    if (!os_log_type_enabled(v150, (os_log_type_t)v151))
    {
      swift_release();
      swift_release();
      swift_release();

      (*(void (**)(char *, uint64_t))(v146 + 8))(v816, v147);
      LOBYTE(v821) = 0;
      sub_1CCA14E90(&qword_1ED8A7FB0);
      v179 = swift_allocObject();
      v180 = sub_1CCAA66A8(v179, 1);
      sub_1CCA0BEEC(v812, v181, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v182 = nullsub_1(v180);
      sub_1CCA5589C();
      v183 = (void *)swift_allocError();
      *v184 = 7;
      v814(&v821, v182, v183, v149);

      swift_bridgeObjectRelease();
      return;
    }
    v158 = (uint8_t *)sub_1CCA393EC();
    v159 = swift_slowAlloc();
    v823 = v159;
    v824 = 0;
    *(_WORD *)v158 = 258;
    v825 = v158 + 2;
    v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA566D0;
    v822 = v152;
    v160 = v810;
    sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
    if (!v160)
    {
      swift_release();
      v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
      v822 = v153;
      sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
      swift_release();
      v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA566E8;
      v822 = v155;
      sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
      swift_release();
      _os_log_impl(&dword_1CC9BF000, v150, (os_log_type_t)v813, "Unable to perform %{public}s offline for device with no item group.", v158, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v159, -1, -1);
      sub_1CCA393F4();
    }
    goto LABEL_271;
  }
  sub_1CC9FED60((uint64_t)v135, (uint64_t)v139, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  v816 = v139;
  swift_bridgeObjectRetain();
  sub_1CCB635BC();
  swift_bridgeObjectRelease();
  v161 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48);
  if (v161(v104, 1, v105) == 1)
  {
    sub_1CC9C3E84((uint64_t)v104, &qword_1ED8A8EF8);
    v162 = sub_1CCA40A38(&qword_1EF9DEF70, (uint64_t)qword_1EF9FF4C0);
    v163 = v819;
    v164 = v803;
    (*(void (**)(char *, uint64_t, uint64_t))(v818 + 16))(v803, v162, v819);
    v165 = swift_allocObject();
    v166 = v817;
    *(_QWORD *)(v165 + 16) = sub_1CCA566F0;
    *(_QWORD *)(v165 + 24) = v166;
    swift_retain();
    v167 = sub_1CCB637D8();
    v168 = sub_1CCB63D30();
    v169 = swift_allocObject();
    *(_BYTE *)(v169 + 16) = 34;
    v170 = swift_allocObject();
    *(_BYTE *)(v170 + 16) = 8;
    v171 = swift_allocObject();
    *(_QWORD *)(v171 + 16) = sub_1CCA573E4;
    *(_QWORD *)(v171 + 24) = v165;
    v172 = swift_allocObject();
    *(_QWORD *)(v172 + 16) = sub_1CC9F4530;
    *(_QWORD *)(v172 + 24) = v171;
    sub_1CCA14E90(&qword_1ED8A8E10);
    v173 = swift_allocObject();
    sub_1CCAAB9E4(v173, 3);
    *v174 = sub_1CCA573F4;
    v174[1] = v169;
    v174[2] = sub_1CCA573F4;
    v174[3] = v170;
    v174[4] = sub_1CCA573EC;
    v174[5] = v172;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v813) = v168;
    v175 = v168;
    v176 = v167;
    if (os_log_type_enabled(v167, v175))
    {
      v177 = (uint8_t *)sub_1CCA393EC();
      v178 = swift_slowAlloc();
      v823 = v178;
      v824 = 0;
      *(_WORD *)v177 = 258;
      v825 = v177 + 2;
      v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
      v822 = v169;
      v160 = v810;
      sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
      if (!v160)
      {
        swift_release();
        v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
        v822 = v170;
        sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
        swift_release();
        v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
        v822 = v172;
        sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
        swift_release();
        _os_log_impl(&dword_1CC9BF000, v176, (os_log_type_t)v813, "FMIPDeviceActionsController: cannot perform %{public}s for item with an invalid group identifier.", v177, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v178, -1, -1);
        sub_1CCA393F4();
      }
      goto LABEL_271;
    }
    swift_release();
    swift_release();
    swift_release();

    (*(void (**)(char *, uint64_t))(v818 + 8))(v164, v163);
    v202 = (uint64_t)v816;
    LOBYTE(v821) = 0;
    sub_1CCA14E90(&qword_1ED8A7FB0);
    v203 = swift_allocObject();
    v204 = sub_1CCAA66A8(v203, 1);
    sub_1CCA0BEEC(v812, v205, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v206 = nullsub_1(v204);
    sub_1CCA5589C();
    v207 = (void *)swift_allocError();
    *v208 = 6;
    v814(&v821, v206, v207, v166);

    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v745 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v161;
  v812 = v106;
  v747 = *(void (**)(uint64_t, char *, uint64_t))(v106 + 32);
  v747((uint64_t)v813, v104, v105);
  v185 = sub_1CCA40A38(&qword_1EF9DEF70, (uint64_t)qword_1EF9FF4C0);
  v186 = v796;
  v746 = *(void (**)(char *, uint64_t, uint64_t))(v818 + 16);
  v746(v796, v185, v819);
  v187 = swift_allocObject();
  *(_QWORD *)(v187 + 16) = sub_1CCA573E0;
  *(_QWORD *)(v187 + 24) = v817;
  swift_retain();
  v188 = v105;
  v189 = sub_1CCB637D8();
  v190 = sub_1CCB63D48();
  v191 = swift_allocObject();
  *(_BYTE *)(v191 + 16) = 34;
  v192 = swift_allocObject();
  *(_BYTE *)(v192 + 16) = 8;
  v193 = swift_allocObject();
  *(_QWORD *)(v193 + 16) = sub_1CCA573E4;
  *(_QWORD *)(v193 + 24) = v187;
  v194 = swift_allocObject();
  *(_QWORD *)(v194 + 16) = sub_1CC9F4530;
  *(_QWORD *)(v194 + 24) = v193;
  v803 = (char *)sub_1CCA14E90(&qword_1ED8A8E10);
  v195 = swift_allocObject();
  sub_1CCAAB9E4(v195, 3);
  *v196 = sub_1CCA573F4;
  v196[1] = v191;
  v196[2] = sub_1CCA573F4;
  v196[3] = v192;
  v196[4] = sub_1CCA573EC;
  v196[5] = v194;
  swift_retain();
  swift_retain();
  swift_retain();
  v197 = v189;
  v198 = v188;
  swift_bridgeObjectRelease();
  v199 = os_log_type_enabled(v197, v190);
  v811 = v188;
  if (v199)
  {
    v200 = (uint8_t *)sub_1CCA393EC();
    v201 = swift_slowAlloc();
    v823 = v201;
    v824 = 0;
    *(_WORD *)v200 = 258;
    v825 = v200 + 2;
    v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
    v822 = v191;
    v160 = v810;
    sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
    if (!v160)
    {
      swift_release();
      v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
      v822 = v192;
      sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
      swift_release();
      v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
      v822 = v194;
      sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
      swift_release();
      _os_log_impl(&dword_1CC9BF000, v197, v190, "FMIPDeviceActionsController: performing offline %{public}s.", v200, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v201, -1, -1);
      sub_1CCA393F4();
    }
    goto LABEL_271;
  }
  swift_release();
  swift_release();
  swift_release();

  v818 = *(_QWORD *)(v818 + 8);
  ((void (*)(char *, uint64_t))v818)(v186, v819);
  v210 = v804;
  v211 = v805;
  v160 = v810;
  v212 = swift_bridgeObjectRetain();
  v213 = v806;
  sub_1CCA401EC(v212, v806);
  swift_bridgeObjectRelease();
  v214 = swift_bridgeObjectRetain();
  sub_1CCA40480(v214, v210);
  swift_bridgeObjectRelease();
  v215 = swift_bridgeObjectRetain();
  sub_1CCA4072C(v215, v211);
  swift_bridgeObjectRelease();
  v216 = v797;
  sub_1CC9EAB74(v213, v797, (uint64_t *)&unk_1EF9DF580);
  v217 = type metadata accessor for FMIPItem();
  v218 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v217 - 8) + 48);
  v219 = v218(v216, 1, v217);
  v220 = v798;
  if (v219 == 1)
  {
    sub_1CC9C3E84(v216, (uint64_t *)&unk_1EF9DF580);
    v221 = 1;
  }
  else
  {
    v221 = *(_QWORD *)(v216 + *(int *)(v217 + 76));
    sub_1CCA0BF30(v216, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  }
  LODWORD(v797) = sub_1CCB1E334(2, v221) || sub_1CCB1E334(4, v221) || sub_1CCB1E334(2048, v221);
  sub_1CC9EAB74(v210, (uint64_t)v220, (uint64_t *)&unk_1EF9DF580);
  v222 = v218((uint64_t)v220, 1, v217);
  v223 = v799;
  if (v222 == 1)
  {
    sub_1CC9C3E84((uint64_t)v220, (uint64_t *)&unk_1EF9DF580);
    v224 = 1;
  }
  else
  {
    v224 = *(_QWORD *)&v220[*(int *)(v217 + 76)];
    sub_1CCA0BF30((uint64_t)v220, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  }
  LODWORD(v798) = sub_1CCB1E334(2, v224) || sub_1CCB1E334(4, v224) || sub_1CCB1E334(2048, v224);
  sub_1CC9EAB74(v211, (uint64_t)v223, (uint64_t *)&unk_1EF9DF580);
  if (v218((uint64_t)v223, 1, v217) == 1)
  {
    sub_1CC9C3E84((uint64_t)v223, (uint64_t *)&unk_1EF9DF580);
    v225 = 1;
  }
  else
  {
    v225 = *(uint64_t *)((char *)&v223->isa + *(int *)(v217 + 76));
    sub_1CCA0BF30((uint64_t)v223, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  }
  LODWORD(v799) = sub_1CCB1E334(2, v225) || sub_1CCB1E334(4, v225) || sub_1CCB1E334(2048, v225);
  v226 = v800;
  sub_1CC9EAB74(v213, (uint64_t)v800, (uint64_t *)&unk_1EF9DF580);
  v227 = v218((uint64_t)v226, 1, v217);
  sub_1CC9C3E84((uint64_t)v226, (uint64_t *)&unk_1EF9DF580);
  if (v227 == 1)
  {
    v228 = v812;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v812 + 56))(v808, 1, 1, v198);
  }
  else
  {
    v229 = v790;
    sub_1CC9EAB74(v213, v790, (uint64_t *)&unk_1EF9DF580);
    if (v218(v229, 1, v217) == 1)
    {
      __break(1u);
      goto LABEL_269;
    }
    swift_bridgeObjectRetain();
    sub_1CCA0BF30(v229, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCB635BC();
    swift_bridgeObjectRelease();
    v228 = v812;
  }
  v230 = v795;
  sub_1CC9EAB74(v210, v795, (uint64_t *)&unk_1EF9DF580);
  v231 = v218(v230, 1, v217);
  sub_1CC9C3E84(v230, (uint64_t *)&unk_1EF9DF580);
  if (v231 == 1)
  {
    v232 = v210;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v228 + 56))(v807, 1, 1, v198);
    goto LABEL_50;
  }
  v233 = v791;
  sub_1CC9EAB74(v210, v791, (uint64_t *)&unk_1EF9DF580);
  if (v218(v233, 1, v217) == 1)
  {
LABEL_269:
    __break(1u);
    goto LABEL_270;
  }
  v232 = v210;
  swift_bridgeObjectRetain();
  sub_1CCA0BF30(v233, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCB635BC();
  swift_bridgeObjectRelease();
LABEL_50:
  v234 = v794;
  sub_1CC9EAB74(v211, v794, (uint64_t *)&unk_1EF9DF580);
  v235 = v218(v234, 1, v217);
  sub_1CC9C3E84(v234, (uint64_t *)&unk_1EF9DF580);
  if (v235 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v228 + 56))(v809, 1, 1, v198);
    goto LABEL_54;
  }
  v236 = v789;
  sub_1CC9EAB74(v211, v789, (uint64_t *)&unk_1EF9DF580);
  if (v218(v236, 1, v217) == 1)
  {
LABEL_270:
    __break(1u);
LABEL_271:

    __break(1u);
    return;
  }
  swift_bridgeObjectRetain();
  sub_1CCA0BF30(v236, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCB635BC();
  swift_bridgeObjectRelease();
LABEL_54:
  v237 = v232;
  v238 = *(_QWORD *)(v817 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_channels);
  swift_bridgeObjectRetain();
  v239 = sub_1CCB3D32C(4, v238);
  swift_bridgeObjectRelease();
  v240 = swift_bridgeObjectRetain();
  v241 = sub_1CCA55EBC(v240);
  swift_bridgeObjectRelease();
  v242 = sub_1CCA7A870(v241);
  swift_bridgeObjectRelease();
  sub_1CCA14E90(&qword_1EF9E03B8);
  v243 = swift_allocObject();
  v244 = sub_1CCAA66EC(v243, 3);
  *(_WORD *)v245 = 258;
  *(_BYTE *)(v245 + 2) = 0;
  v246 = nullsub_1(v244);
  v247 = sub_1CCA7A870(v246);
  swift_bridgeObjectRelease();
  v248 = sub_1CCAFF17C(v247, v242);
  swift_bridgeObjectRelease();
  v810 = v160;
  if ((v248 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v249 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
    v250 = v792;
    v251 = v819;
    v746(v792, v249, v819);
    v252 = v812;
    v253 = v802;
    (*(void (**)(os_log_t, char *, uint64_t))(v812 + 16))(v802, v813, v198);
    v254 = (*(unsigned __int8 *)(v252 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v252 + 80);
    v255 = swift_allocObject();
    v747(v255 + v254, (char *)v253, v198);
    v256 = swift_allocObject();
    *(_QWORD *)(v256 + 16) = sub_1CCA56740;
    *(_QWORD *)(v256 + 24) = v255;
    v257 = sub_1CCB637D8();
    LODWORD(v254) = sub_1CCB63D48();
    v258 = swift_allocObject();
    *(_BYTE *)(v258 + 16) = 34;
    v259 = swift_allocObject();
    *(_BYTE *)(v259 + 16) = 8;
    v260 = swift_allocObject();
    *(_QWORD *)(v260 + 16) = sub_1CCA573E8;
    *(_QWORD *)(v260 + 24) = v256;
    v261 = swift_allocObject();
    *(_QWORD *)(v261 + 16) = sub_1CC9F4530;
    *(_QWORD *)(v261 + 24) = v260;
    v262 = swift_allocObject();
    sub_1CCAAB9E4(v262, 3);
    *v263 = sub_1CCA573F4;
    v263[1] = v258;
    v263[2] = sub_1CCA573F4;
    v263[3] = v259;
    v263[4] = sub_1CCA573EC;
    v263[5] = v261;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v803) = v254;
    if (os_log_type_enabled(v257, (os_log_type_t)v254))
    {
      v264 = (uint8_t *)sub_1CCA393EC();
      v265 = swift_slowAlloc();
      v823 = v265;
      v824 = 0;
      *(_WORD *)v264 = 258;
      v825 = v264 + 2;
      v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
      v822 = v258;
      v160 = v810;
      sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
      if (!v160)
      {
        swift_release();
        v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
        v822 = v259;
        sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
        swift_release();
        v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
        v822 = v261;
        sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
        swift_release();
        _os_log_impl(&dword_1CC9BF000, v257, (os_log_type_t)v803, "Playing groupID offline for %{public}s.", v264, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v265, -1, -1);
        sub_1CCA393F4();
      }
      goto LABEL_271;
    }
    goto LABEL_114;
  }
  v266 = swift_allocObject();
  v267 = sub_1CCAA66EC(v266, 2);
  *v268 = 258;
  v269 = nullsub_1(v267);
  v270 = sub_1CCA7A870(v269);
  swift_bridgeObjectRelease();
  v271 = sub_1CCAFF17C(v270, v242);
  swift_bridgeObjectRelease();
  if ((v271 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v272 = v811;
    v273 = (uint64_t)v813;
    v274 = v819;
    v275 = v812;
    v276 = v786;
    if ((v799 & 1) == 0)
    {
      v277 = v779;
      sub_1CC9EAB74(v809, v779, &qword_1ED8A8EF8);
      if (v745(v277, 1, v272) != 1)
      {
        v331 = v780;
        v332 = (void (*)(unint64_t, os_log_t, uint64_t))v747;
        v747(v780, (char *)v277, v272);
        v333 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
        v746(v782, v333, v274);
        v334 = v802;
        v800 = *(NSObject **)(v275 + 16);
        ((void (*)(os_log_t, uint64_t, uint64_t))v800)(v802, v331, v272);
        v335 = (*(unsigned __int8 *)(v275 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v275 + 80);
        v798 = (uint8_t *)*(unsigned __int8 *)(v275 + 80);
        v336 = swift_allocObject();
        v332(v336 + v335, v334, v272);
        v337 = swift_allocObject();
        *(_QWORD *)(v337 + 16) = sub_1CCA56740;
        *(_QWORD *)(v337 + 24) = v336;
        v799 = (os_log_t)sub_1CCB637D8();
        v338 = sub_1CCB63D48();
        v339 = swift_allocObject();
        *(_BYTE *)(v339 + 16) = 112;
        v340 = swift_allocObject();
        *(_BYTE *)(v340 + 16) = 8;
        v341 = swift_allocObject();
        *(_QWORD *)(v341 + 16) = 1752392040;
        v342 = swift_allocObject();
        *(_QWORD *)(v342 + 16) = sub_1CCA57538;
        *(_QWORD *)(v342 + 24) = v341;
        v343 = swift_allocObject();
        *(_BYTE *)(v343 + 16) = 33;
        v344 = swift_allocObject();
        *(_BYTE *)(v344 + 16) = 8;
        v345 = swift_allocObject();
        *(_QWORD *)(v345 + 16) = sub_1CCA573E8;
        *(_QWORD *)(v345 + 24) = v337;
        v346 = swift_allocObject();
        *(_QWORD *)(v346 + 16) = sub_1CC9F4530;
        *(_QWORD *)(v346 + 24) = v345;
        v347 = swift_allocObject();
        sub_1CCAAB9E4(v347, 6);
        *v348 = sub_1CCA573F4;
        v348[1] = v339;
        v348[2] = sub_1CCA573F4;
        v348[3] = v340;
        v348[4] = sub_1CCA573F0;
        v348[5] = v342;
        v348[6] = sub_1CCA573F4;
        v348[7] = v343;
        v348[8] = sub_1CCA573F4;
        v348[9] = v344;
        v348[10] = sub_1CCA573EC;
        v348[11] = v346;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v349 = v799;
        swift_bridgeObjectRelease();
        LODWORD(v796) = v338;
        if (os_log_type_enabled(v349, (os_log_type_t)v338))
        {
          v350 = (uint8_t *)sub_1CCA393EC();
          v351 = swift_slowAlloc();
          v823 = v351;
          v824 = 0;
          *(_WORD *)v350 = 515;
          v825 = v350 + 2;
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
          v822 = v339;
          v160 = v810;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          if (!v160)
          {
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v340;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F0;
            v822 = v342;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v343;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v344;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
            v822 = v346;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            v810 = 0;
            swift_release();
            _os_log_impl(&dword_1CC9BF000, v799, (os_log_type_t)v796, "Playing case offline for %{private,mask.hash}s.", v350, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1D17B214C](v351, -1, -1);
            sub_1CCA393F4();
          }
          goto LABEL_271;
        }
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(char *, uint64_t))v818)(v782, v274);
        v272 = v811;
        v421 = v812;
        v330 = v788;
        v422 = v780;
        sub_1CCA4A404(v780, 1, v817, v793, (uint64_t)v814, v815);
        (*(void (**)(uint64_t, uint64_t))(v421 + 8))(v422, v272);
        LODWORD(v280) = (_DWORD)v798;
        v329 = v745;
LABEL_117:
        v423 = v787;
        if ((v797 & 1) != 0)
        {
LABEL_120:
          v424 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
          v425 = v819;
          v746(v330, v424, v819);
          v426 = v802;
          ((void (*)(os_log_t, char *, uint64_t))v800)(v802, v813, v272);
          v427 = swift_allocObject();
          v747(v427 + ((v280 + 16) & ~(unint64_t)v280), (char *)v426, v272);
          v428 = swift_allocObject();
          *(_QWORD *)(v428 + 16) = sub_1CCA56740;
          *(_QWORD *)(v428 + 24) = v427;
          v429 = sub_1CCB637D8();
          v430 = sub_1CCB63D48();
          v431 = swift_allocObject();
          *(_BYTE *)(v431 + 16) = 34;
          v432 = swift_allocObject();
          *(_BYTE *)(v432 + 16) = 8;
          v433 = swift_allocObject();
          *(_QWORD *)(v433 + 16) = sub_1CCA573E8;
          *(_QWORD *)(v433 + 24) = v428;
          v434 = swift_allocObject();
          *(_QWORD *)(v434 + 16) = sub_1CC9F4530;
          *(_QWORD *)(v434 + 24) = v433;
          v435 = swift_allocObject();
          sub_1CCAAB9E4(v435, 3);
          v358 = v272;
          *v436 = sub_1CCA573F4;
          v436[1] = v431;
          v436[2] = sub_1CCA573F4;
          v436[3] = v432;
          v436[4] = sub_1CCA573EC;
          v436[5] = v434;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          LODWORD(v817) = v430;
          if (os_log_type_enabled(v429, (os_log_type_t)v430))
          {
            v437 = (uint8_t *)sub_1CCA393EC();
            v438 = swift_slowAlloc();
            v823 = v438;
            v824 = 0;
            *(_WORD *)v437 = 258;
            v825 = v437 + 2;
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v431;
            v160 = v810;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            if (!v160)
            {
              swift_release();
              v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
              v822 = v432;
              sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
              swift_release();
              v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
              v822 = v434;
              sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
              swift_release();
              _os_log_impl(&dword_1CC9BF000, v429, (os_log_type_t)v817, "Error playing right sound %{public}s.", v437, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1D17B214C](v438, -1, -1);
              sub_1CCA393F4();
            }
            goto LABEL_271;
          }

          swift_release();
          swift_release();
          swift_release();
          v439 = (uint64_t *)&v820;
          goto LABEL_159;
        }
        sub_1CC9EAB74(v808, v787, &qword_1ED8A8EF8);
        if (v329(v423, 1, v272) == 1)
        {
          sub_1CC9C3E84(v423, &qword_1ED8A8EF8);
          goto LABEL_120;
        }
        v440 = v784;
        v441 = (void (*)(unint64_t, os_log_t, uint64_t))v747;
        v747((uint64_t)v784, (char *)v423, v272);
        v442 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
        v443 = v778;
        v746(v778, v442, v819);
        v444 = v802;
        ((void (*)(os_log_t, char *, uint64_t))v800)(v802, v440, v272);
        v445 = swift_allocObject();
        v441(v445 + ((v280 + 16) & ~(unint64_t)v280), v444, v272);
        v446 = swift_allocObject();
        *(_QWORD *)(v446 + 16) = sub_1CCA56740;
        *(_QWORD *)(v446 + 24) = v445;
        v802 = (os_log_t)sub_1CCB637D8();
        v447 = sub_1CCB63D48();
        v448 = swift_allocObject();
        *(_BYTE *)(v448 + 16) = 112;
        v449 = swift_allocObject();
        *(_BYTE *)(v449 + 16) = 8;
        v450 = swift_allocObject();
        *(_QWORD *)(v450 + 16) = 1752392040;
        v451 = swift_allocObject();
        *(_QWORD *)(v451 + 16) = sub_1CCA57538;
        *(_QWORD *)(v451 + 24) = v450;
        v452 = swift_allocObject();
        *(_BYTE *)(v452 + 16) = 33;
        v453 = swift_allocObject();
        *(_BYTE *)(v453 + 16) = 8;
        v454 = swift_allocObject();
        *(_QWORD *)(v454 + 16) = sub_1CCA573E8;
        *(_QWORD *)(v454 + 24) = v446;
        v455 = swift_allocObject();
        *(_QWORD *)(v455 + 16) = sub_1CC9F4530;
        *(_QWORD *)(v455 + 24) = v454;
        v456 = swift_allocObject();
        sub_1CCAAB9E4(v456, 6);
        *v457 = sub_1CCA573F4;
        v457[1] = v448;
        v457[2] = sub_1CCA573F4;
        v457[3] = v449;
        v457[4] = sub_1CCA573F0;
        v457[5] = v451;
        v457[6] = sub_1CCA573F4;
        v457[7] = v452;
        v457[8] = sub_1CCA573F4;
        v457[9] = v453;
        v457[10] = sub_1CCA573EC;
        v457[11] = v455;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v458 = v802;
        swift_bridgeObjectRelease();
        LODWORD(v803) = v447;
        if (os_log_type_enabled(v458, (os_log_type_t)v447))
        {
          v459 = (uint8_t *)sub_1CCA393EC();
          v460 = swift_slowAlloc();
          v823 = v460;
          v824 = 0;
          *(_WORD *)v459 = 515;
          v825 = v459 + 2;
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
          v822 = v448;
          v160 = v810;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          if (!v160)
          {
            v810 = v459;
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v449;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F0;
            v822 = v451;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v452;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v453;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
            v822 = v455;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            _os_log_impl(&dword_1CC9BF000, v802, (os_log_type_t)v803, "Playing right offline for %{private,mask.hash}s.", v810, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1D17B214C](v460, -1, -1);
            sub_1CCA393F4();
          }
          goto LABEL_271;
        }
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(char *, uint64_t))v818)(v443, v819);
        v326 = (uint64_t)v816;
        v476 = v806;
        v477 = v811;
        v478 = v805;
        v479 = (uint64_t *)&v816;
        goto LABEL_140;
      }
      sub_1CC9C3E84(v277, &qword_1ED8A8EF8);
    }
    v278 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
    v746(v276, v278, v274);
    v279 = v802;
    v800 = *(NSObject **)(v275 + 16);
    ((void (*)(os_log_t, uint64_t, uint64_t))v800)(v802, v273, v272);
    v280 = *(unsigned __int8 *)(v275 + 80);
    v281 = swift_allocObject();
    v747(v281 + ((v280 + 16) & ~v280), (char *)v279, v272);
    v282 = swift_allocObject();
    *(_QWORD *)(v282 + 16) = sub_1CCA56740;
    *(_QWORD *)(v282 + 24) = v281;
    v283 = sub_1CCB637D8();
    v284 = sub_1CCB63D48();
    v285 = swift_allocObject();
    *(_BYTE *)(v285 + 16) = 34;
    v286 = swift_allocObject();
    *(_BYTE *)(v286 + 16) = 8;
    v287 = swift_allocObject();
    *(_QWORD *)(v287 + 16) = sub_1CCA573E8;
    *(_QWORD *)(v287 + 24) = v282;
    v288 = swift_allocObject();
    *(_QWORD *)(v288 + 16) = sub_1CC9F4530;
    *(_QWORD *)(v288 + 24) = v287;
    v289 = swift_allocObject();
    sub_1CCAAB9E4(v289, 3);
    *v290 = sub_1CCA573F4;
    v290[1] = v285;
    v290[2] = sub_1CCA573F4;
    v290[3] = v286;
    v290[4] = sub_1CCA573EC;
    v290[5] = v288;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v799) = v284;
    if (os_log_type_enabled(v283, (os_log_type_t)v284))
    {
      v291 = (uint8_t *)sub_1CCA393EC();
      v292 = swift_slowAlloc();
      v823 = v292;
      v824 = 0;
      *(_WORD *)v291 = 258;
      v825 = v291 + 2;
      v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
      v822 = v285;
      v160 = v810;
      sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
      if (!v160)
      {
        swift_release();
        v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
        v822 = v286;
        sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
        swift_release();
        v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
        v822 = v288;
        sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
        v810 = 0;
        swift_release();
        _os_log_impl(&dword_1CC9BF000, v283, (os_log_type_t)v799, "Error playing case sound %{public}s.", v291, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v292, -1, -1);
        sub_1CCA393F4();
      }
      goto LABEL_271;
    }
    swift_release();
    swift_release();
    swift_release();

    ((void (*)(char *, uint64_t))v818)(v276, v819);
    v329 = v745;
    v330 = v788;
    goto LABEL_117;
  }
  v293 = swift_allocObject();
  v294 = sub_1CCAA66EC(v293, 2);
  *v295 = 2;
  v296 = nullsub_1(v294);
  v297 = sub_1CCA7A870(v296);
  swift_bridgeObjectRelease();
  v298 = sub_1CCAFF17C(v297, v242);
  swift_bridgeObjectRelease();
  v251 = v819;
  if ((v298 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v299 = v811;
    v300 = (uint64_t)v813;
    v301 = v812;
    v302 = v781;
    if ((v799 & 1) == 0)
    {
      v303 = v774;
      sub_1CC9EAB74(v809, v774, &qword_1ED8A8EF8);
      if (v745(v303, 1, v299) != 1)
      {
        v380 = v775;
        v381 = (void (*)(unint64_t, os_log_t, uint64_t))v747;
        v747(v775, (char *)v303, v299);
        v382 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
        v746(v776, v382, v251);
        v383 = v802;
        v800 = *(NSObject **)(v301 + 16);
        ((void (*)(os_log_t, uint64_t, uint64_t))v800)(v802, v380, v299);
        v384 = (*(unsigned __int8 *)(v301 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v301 + 80);
        v797 = *(unsigned __int8 *)(v301 + 80);
        v385 = swift_allocObject();
        v381(v385 + v384, v383, v299);
        v386 = swift_allocObject();
        *(_QWORD *)(v386 + 16) = sub_1CCA56740;
        *(_QWORD *)(v386 + 24) = v385;
        v799 = (os_log_t)sub_1CCB637D8();
        v387 = sub_1CCB63D48();
        v388 = swift_allocObject();
        *(_BYTE *)(v388 + 16) = 112;
        v389 = swift_allocObject();
        *(_BYTE *)(v389 + 16) = 8;
        v390 = swift_allocObject();
        *(_QWORD *)(v390 + 16) = 1752392040;
        v391 = swift_allocObject();
        *(_QWORD *)(v391 + 16) = sub_1CCA57538;
        *(_QWORD *)(v391 + 24) = v390;
        v392 = swift_allocObject();
        *(_BYTE *)(v392 + 16) = 33;
        v393 = swift_allocObject();
        *(_BYTE *)(v393 + 16) = 8;
        v394 = swift_allocObject();
        *(_QWORD *)(v394 + 16) = sub_1CCA573E8;
        *(_QWORD *)(v394 + 24) = v386;
        v395 = swift_allocObject();
        *(_QWORD *)(v395 + 16) = sub_1CC9F4530;
        *(_QWORD *)(v395 + 24) = v394;
        v396 = swift_allocObject();
        sub_1CCAAB9E4(v396, 6);
        *v397 = sub_1CCA573F4;
        v397[1] = v388;
        v397[2] = sub_1CCA573F4;
        v397[3] = v389;
        v397[4] = sub_1CCA573F0;
        v397[5] = v391;
        v397[6] = sub_1CCA573F4;
        v397[7] = v392;
        v397[8] = sub_1CCA573F4;
        v397[9] = v393;
        v397[10] = sub_1CCA573EC;
        v397[11] = v395;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v398 = v799;
        swift_bridgeObjectRelease();
        LODWORD(v796) = v387;
        if (os_log_type_enabled(v398, (os_log_type_t)v387))
        {
          v399 = (uint8_t *)sub_1CCA393EC();
          v400 = swift_slowAlloc();
          v823 = v400;
          v824 = 0;
          *(_WORD *)v399 = 515;
          v825 = v399 + 2;
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
          v822 = v388;
          v160 = v810;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          if (!v160)
          {
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v389;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F0;
            v822 = v391;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v392;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v393;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
            v822 = v395;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            v810 = 0;
            swift_release();
            _os_log_impl(&dword_1CC9BF000, v799, (os_log_type_t)v796, "Playing case offline for %{private,mask.hash}s.", v399, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1D17B214C](v400, -1, -1);
            sub_1CCA393F4();
          }
          goto LABEL_271;
        }
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(char *, uint64_t))v818)(v776, v251);
        v299 = v811;
        v486 = v812;
        v379 = v785;
        v487 = v775;
        sub_1CCA4A404(v775, 1, v817, v793, (uint64_t)v814, v815);
        (*(void (**)(uint64_t, uint64_t))(v486 + 8))(v487, v299);
        LODWORD(v306) = v797;
        v378 = v745;
LABEL_146:
        v488 = v783;
        if ((v798 & 1) != 0)
        {
LABEL_149:
          v489 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
          v425 = v819;
          v746(v379, v489, v819);
          v490 = v802;
          ((void (*)(os_log_t, char *, uint64_t))v800)(v802, v813, v299);
          v491 = swift_allocObject();
          v747(v491 + ((v306 + 16) & ~(unint64_t)v306), (char *)v490, v299);
          v492 = swift_allocObject();
          *(_QWORD *)(v492 + 16) = sub_1CCA56740;
          *(_QWORD *)(v492 + 24) = v491;
          v493 = sub_1CCB637D8();
          v494 = sub_1CCB63D48();
          v495 = swift_allocObject();
          *(_BYTE *)(v495 + 16) = 34;
          v496 = swift_allocObject();
          *(_BYTE *)(v496 + 16) = 8;
          v497 = swift_allocObject();
          *(_QWORD *)(v497 + 16) = sub_1CCA573E8;
          *(_QWORD *)(v497 + 24) = v492;
          v498 = swift_allocObject();
          *(_QWORD *)(v498 + 16) = sub_1CC9F4530;
          *(_QWORD *)(v498 + 24) = v497;
          v499 = swift_allocObject();
          sub_1CCAAB9E4(v499, 3);
          v358 = v299;
          *v500 = sub_1CCA573F4;
          v500[1] = v495;
          v500[2] = sub_1CCA573F4;
          v500[3] = v496;
          v500[4] = sub_1CCA573EC;
          v500[5] = v498;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          LODWORD(v817) = v494;
          if (os_log_type_enabled(v493, (os_log_type_t)v494))
          {
            v501 = (uint8_t *)sub_1CCA393EC();
            v502 = swift_slowAlloc();
            v823 = v502;
            v824 = 0;
            *(_WORD *)v501 = 258;
            v825 = v501 + 2;
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v495;
            v160 = v810;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            if (!v160)
            {
              swift_release();
              v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
              v822 = v496;
              sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
              swift_release();
              v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
              v822 = v498;
              sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
              swift_release();
              _os_log_impl(&dword_1CC9BF000, v493, (os_log_type_t)v817, "Error playing left sound %{public}s.", v501, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1D17B214C](v502, -1, -1);
              sub_1CCA393F4();
            }
            goto LABEL_271;
          }

          swift_release();
          swift_release();
          swift_release();
          v439 = &v817;
LABEL_159:
          ((void (*)(_QWORD, uint64_t))v818)(*(v439 - 32), v425);
          sub_1CC9C3E84(v809, &qword_1ED8A8EF8);
          sub_1CC9C3E84(v807, &qword_1ED8A8EF8);
          sub_1CC9C3E84(v808, &qword_1ED8A8EF8);
          sub_1CC9C3E84(v805, (uint64_t *)&unk_1EF9DF580);
          sub_1CC9C3E84(v804, (uint64_t *)&unk_1EF9DF580);
          sub_1CC9C3E84(v806, (uint64_t *)&unk_1EF9DF580);
          v419 = *(void (**)(uint64_t, uint64_t))(v812 + 8);
LABEL_160:
          v420 = (uint64_t)v813;
          v503 = v358;
          goto LABEL_154;
        }
        sub_1CC9EAB74(v807, v783, &qword_1ED8A8EF8);
        if (v378(v488, 1, v299) == 1)
        {
          sub_1CC9C3E84(v488, &qword_1ED8A8EF8);
          goto LABEL_149;
        }
        v504 = v777;
        v505 = (void (*)(unint64_t, os_log_t, uint64_t))v747;
        v747((uint64_t)v777, (char *)v488, v299);
        v506 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
        v507 = v772;
        v746(v772, v506, v819);
        v508 = v802;
        ((void (*)(os_log_t, char *, uint64_t))v800)(v802, v504, v299);
        v509 = swift_allocObject();
        v505(v509 + ((v306 + 16) & ~(unint64_t)v306), v508, v299);
        v510 = swift_allocObject();
        *(_QWORD *)(v510 + 16) = sub_1CCA56740;
        *(_QWORD *)(v510 + 24) = v509;
        v802 = (os_log_t)sub_1CCB637D8();
        v511 = sub_1CCB63D48();
        v512 = swift_allocObject();
        *(_BYTE *)(v512 + 16) = 112;
        v513 = swift_allocObject();
        *(_BYTE *)(v513 + 16) = 8;
        v514 = swift_allocObject();
        *(_QWORD *)(v514 + 16) = 1752392040;
        v515 = swift_allocObject();
        *(_QWORD *)(v515 + 16) = sub_1CCA57538;
        *(_QWORD *)(v515 + 24) = v514;
        v516 = swift_allocObject();
        *(_BYTE *)(v516 + 16) = 33;
        v517 = swift_allocObject();
        *(_BYTE *)(v517 + 16) = 8;
        v518 = swift_allocObject();
        *(_QWORD *)(v518 + 16) = sub_1CCA573E8;
        *(_QWORD *)(v518 + 24) = v510;
        v519 = swift_allocObject();
        *(_QWORD *)(v519 + 16) = sub_1CC9F4530;
        *(_QWORD *)(v519 + 24) = v518;
        v520 = swift_allocObject();
        sub_1CCAAB9E4(v520, 6);
        *v521 = sub_1CCA573F4;
        v521[1] = v512;
        v521[2] = sub_1CCA573F4;
        v521[3] = v513;
        v521[4] = sub_1CCA573F0;
        v521[5] = v515;
        v521[6] = sub_1CCA573F4;
        v521[7] = v516;
        v521[8] = sub_1CCA573F4;
        v521[9] = v517;
        v521[10] = sub_1CCA573EC;
        v521[11] = v519;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v522 = v802;
        swift_bridgeObjectRelease();
        LODWORD(v803) = v511;
        if (os_log_type_enabled(v522, (os_log_type_t)v511))
        {
          v523 = (uint8_t *)sub_1CCA393EC();
          v524 = swift_slowAlloc();
          v823 = v524;
          v824 = 0;
          *(_WORD *)v523 = 515;
          v825 = v523 + 2;
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
          v822 = v512;
          v160 = v810;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          if (!v160)
          {
            v810 = v523;
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v513;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F0;
            v822 = v515;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v516;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v517;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
            v822 = v519;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            _os_log_impl(&dword_1CC9BF000, v802, (os_log_type_t)v803, "Playing left offline for %{private,mask.hash}s.", v810, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1D17B214C](v524, -1, -1);
            sub_1CCA393F4();
          }
          goto LABEL_271;
        }
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(char *, uint64_t))v818)(v507, v819);
        v326 = (uint64_t)v816;
        v476 = v806;
        v477 = v811;
        v478 = v805;
        v479 = &v809;
LABEL_140:
        v480 = (char *)*(v479 - 32);
        v481 = (uint64_t)v480;
        v482 = 1;
LABEL_141:
        sub_1CCA4A404(v481, v482, v817, v793, (uint64_t)v814, v815);
        v483 = *(void (**)(char *, uint64_t))(v812 + 8);
        v483(v480, v477);
        sub_1CC9C3E84(v809, &qword_1ED8A8EF8);
        sub_1CC9C3E84(v807, &qword_1ED8A8EF8);
        sub_1CC9C3E84(v808, &qword_1ED8A8EF8);
        sub_1CC9C3E84(v478, (uint64_t *)&unk_1EF9DF580);
        sub_1CC9C3E84(v804, (uint64_t *)&unk_1EF9DF580);
        sub_1CC9C3E84(v476, (uint64_t *)&unk_1EF9DF580);
        v483(v813, v477);
LABEL_142:
        v209 = v326;
        goto LABEL_156;
      }
      sub_1CC9C3E84(v303, &qword_1ED8A8EF8);
    }
    v304 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
    v746(v302, v304, v251);
    v305 = v802;
    v800 = *(NSObject **)(v301 + 16);
    ((void (*)(os_log_t, uint64_t, uint64_t))v800)(v802, v300, v299);
    v306 = *(unsigned __int8 *)(v301 + 80);
    v307 = swift_allocObject();
    v747(v307 + ((v306 + 16) & ~v306), (char *)v305, v299);
    v308 = swift_allocObject();
    *(_QWORD *)(v308 + 16) = sub_1CCA56740;
    *(_QWORD *)(v308 + 24) = v307;
    v309 = sub_1CCB637D8();
    v310 = sub_1CCB63D48();
    v311 = swift_allocObject();
    *(_BYTE *)(v311 + 16) = 34;
    v312 = swift_allocObject();
    *(_BYTE *)(v312 + 16) = 8;
    v313 = swift_allocObject();
    *(_QWORD *)(v313 + 16) = sub_1CCA573E8;
    *(_QWORD *)(v313 + 24) = v308;
    v314 = swift_allocObject();
    *(_QWORD *)(v314 + 16) = sub_1CC9F4530;
    *(_QWORD *)(v314 + 24) = v313;
    v315 = swift_allocObject();
    sub_1CCAAB9E4(v315, 3);
    *v316 = sub_1CCA573F4;
    v316[1] = v311;
    v316[2] = sub_1CCA573F4;
    v316[3] = v312;
    v316[4] = sub_1CCA573EC;
    v316[5] = v314;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v799) = v310;
    if (os_log_type_enabled(v309, (os_log_type_t)v310))
    {
      v317 = (uint8_t *)sub_1CCA393EC();
      v318 = swift_slowAlloc();
      v823 = v318;
      v824 = 0;
      *(_WORD *)v317 = 258;
      v825 = v317 + 2;
      v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
      v822 = v311;
      v160 = v810;
      sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
      if (!v160)
      {
        swift_release();
        v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
        v822 = v312;
        sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
        swift_release();
        v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
        v822 = v314;
        sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
        v810 = 0;
        swift_release();
        _os_log_impl(&dword_1CC9BF000, v309, (os_log_type_t)v799, "Error playing case sound %{public}s.", v317, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v318, -1, -1);
        sub_1CCA393F4();
      }
      goto LABEL_271;
    }
    swift_release();
    swift_release();
    swift_release();

    ((void (*)(char *, uint64_t))v818)(v302, v819);
    v378 = v745;
    v379 = v785;
    goto LABEL_146;
  }
  v319 = swift_allocObject();
  v320 = sub_1CCAA66EC(v319, 2);
  *v321 = 1;
  v322 = nullsub_1(v320);
  v323 = sub_1CCA7A870(v322);
  swift_bridgeObjectRelease();
  v324 = sub_1CCAFF17C(v323, v242);
  swift_bridgeObjectRelease();
  if ((v324 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if ((v239 & 1) == 0)
    {
      v401 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
      v250 = v771;
      v746(v771, v401, v251);
      v252 = v812;
      v402 = v802;
      v403 = v811;
      (*(void (**)(os_log_t, char *, uint64_t))(v812 + 16))(v802, v813, v811);
      v404 = (*(unsigned __int8 *)(v252 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v252 + 80);
      v405 = swift_allocObject();
      v747(v405 + v404, (char *)v402, v403);
      v406 = swift_allocObject();
      *(_QWORD *)(v406 + 16) = sub_1CCA56740;
      *(_QWORD *)(v406 + 24) = v405;
      v257 = sub_1CCB637D8();
      LODWORD(v404) = sub_1CCB63D48();
      v407 = swift_allocObject();
      *(_BYTE *)(v407 + 16) = 34;
      v408 = swift_allocObject();
      *(_BYTE *)(v408 + 16) = 8;
      v409 = swift_allocObject();
      *(_QWORD *)(v409 + 16) = sub_1CCA573E8;
      *(_QWORD *)(v409 + 24) = v406;
      v410 = swift_allocObject();
      *(_QWORD *)(v410 + 16) = sub_1CC9F4530;
      *(_QWORD *)(v410 + 24) = v409;
      v411 = swift_allocObject();
      sub_1CCAAB9E4(v411, 3);
      *v412 = sub_1CCA573F4;
      v412[1] = v407;
      v412[2] = sub_1CCA573F4;
      v412[3] = v408;
      v412[4] = sub_1CCA573EC;
      v412[5] = v410;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v803) = v404;
      if (os_log_type_enabled(v257, (os_log_type_t)v404))
      {
        v413 = (uint8_t *)sub_1CCA393EC();
        v414 = swift_slowAlloc();
        v823 = v414;
        v824 = 0;
        *(_WORD *)v413 = 258;
        v825 = v413 + 2;
        v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
        v822 = v407;
        v160 = v810;
        sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
        if (!v160)
        {
          swift_release();
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
          v822 = v408;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          swift_release();
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
          v822 = v410;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          swift_release();
          _os_log_impl(&dword_1CC9BF000, v257, (os_log_type_t)v803, "Playing groupID offline for %{public}s.", v413, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1D17B214C](v414, -1, -1);
          sub_1CCA393F4();
        }
        goto LABEL_271;
      }
LABEL_114:
      swift_release();
      swift_release();
      swift_release();

      ((void (*)(char *, uint64_t))v818)(v250, v251);
      v415 = v806;
      v416 = v811;
      v417 = v805;
      v418 = (uint64_t)v813;
      sub_1CCA4A404((uint64_t)v813, 1, v817, v793, (uint64_t)v814, v815);
      sub_1CC9C3E84(v809, &qword_1ED8A8EF8);
      sub_1CC9C3E84(v807, &qword_1ED8A8EF8);
      sub_1CC9C3E84(v808, &qword_1ED8A8EF8);
      sub_1CC9C3E84(v417, (uint64_t *)&unk_1EF9DF580);
      sub_1CC9C3E84(v804, (uint64_t *)&unk_1EF9DF580);
      sub_1CC9C3E84(v415, (uint64_t *)&unk_1EF9DF580);
      v419 = *(void (**)(uint64_t, uint64_t))(v252 + 8);
LABEL_115:
      v420 = v418;
      v503 = v416;
LABEL_154:
      v419(v420, v503);
LABEL_155:
      v209 = (uint64_t)v816;
      goto LABEL_156;
    }
    v325 = v811;
    if ((v798 & 1) != 0)
    {
      v326 = (uint64_t)v816;
      v327 = v806;
      v328 = v805;
    }
    else
    {
      v484 = v763;
      sub_1CC9EAB74(v807, v763, &qword_1ED8A8EF8);
      v485 = v745;
      if (v745(v484, 1, v325) == 1)
      {
        sub_1CC9C3E84(v484, &qword_1ED8A8EF8);
        v326 = (uint64_t)v816;
        v327 = v806;
        v328 = v805;
LABEL_207:
        v609 = v770;
        if ((v797 & 1) != 0)
        {
          sub_1CC9C3E84(v809, &qword_1ED8A8EF8);
          sub_1CC9C3E84(v807, &qword_1ED8A8EF8);
          sub_1CC9C3E84(v808, &qword_1ED8A8EF8);
          sub_1CC9C3E84(v328, (uint64_t *)&unk_1EF9DF580);
          sub_1CC9C3E84(v237, (uint64_t *)&unk_1EF9DF580);
          sub_1CC9C3E84(v327, (uint64_t *)&unk_1EF9DF580);
          (*(void (**)(char *, uint64_t))(v812 + 8))(v813, v325);
          goto LABEL_142;
        }
        v610 = v808;
        sub_1CC9EAB74(v808, v770, &qword_1ED8A8EF8);
        if (v485(v609, 1, v325) != 1)
        {
          v611 = v769;
          v612 = (void (*)(unint64_t, os_log_t, uint64_t))v747;
          v747((uint64_t)v769, (char *)v609, v325);
          v613 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
          v614 = v762;
          v746(v762, v613, v819);
          v615 = v812;
          v616 = v802;
          (*(void (**)(os_log_t, char *, uint64_t))(v812 + 16))(v802, v611, v325);
          v617 = (*(unsigned __int8 *)(v615 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v615 + 80);
          v618 = swift_allocObject();
          v612(v618 + v617, v616, v325);
          v619 = swift_allocObject();
          *(_QWORD *)(v619 + 16) = sub_1CCA56740;
          *(_QWORD *)(v619 + 24) = v618;
          v802 = (os_log_t)sub_1CCB637D8();
          v620 = sub_1CCB63D48();
          v621 = swift_allocObject();
          *(_BYTE *)(v621 + 16) = 112;
          v622 = swift_allocObject();
          *(_BYTE *)(v622 + 16) = 8;
          v623 = swift_allocObject();
          *(_QWORD *)(v623 + 16) = 1752392040;
          v624 = swift_allocObject();
          *(_QWORD *)(v624 + 16) = sub_1CCA57538;
          *(_QWORD *)(v624 + 24) = v623;
          v625 = swift_allocObject();
          *(_BYTE *)(v625 + 16) = 33;
          v626 = swift_allocObject();
          *(_BYTE *)(v626 + 16) = 8;
          v627 = swift_allocObject();
          *(_QWORD *)(v627 + 16) = sub_1CCA573E8;
          *(_QWORD *)(v627 + 24) = v619;
          v628 = swift_allocObject();
          *(_QWORD *)(v628 + 16) = sub_1CC9F4530;
          *(_QWORD *)(v628 + 24) = v627;
          v629 = swift_allocObject();
          sub_1CCAAB9E4(v629, 6);
          *v630 = sub_1CCA573F4;
          v630[1] = v621;
          v630[2] = sub_1CCA573F4;
          v630[3] = v622;
          v630[4] = sub_1CCA573F0;
          v630[5] = v624;
          v630[6] = sub_1CCA573F4;
          v630[7] = v625;
          v630[8] = sub_1CCA573F4;
          v630[9] = v626;
          v630[10] = sub_1CCA573EC;
          v630[11] = v628;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          v631 = v802;
          swift_bridgeObjectRelease();
          LODWORD(v803) = v620;
          if (os_log_type_enabled(v631, (os_log_type_t)v620))
          {
            v632 = (uint8_t *)sub_1CCA393EC();
            v633 = swift_slowAlloc();
            v823 = v633;
            v824 = 0;
            v801 = v632;
            *(_WORD *)v632 = 515;
            v825 = v632 + 2;
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v621;
            v160 = v810;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            if (!v160)
            {
              swift_release();
              v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
              v822 = v622;
              sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
              swift_release();
              v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F0;
              v822 = v624;
              sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
              swift_release();
              v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
              v822 = v625;
              sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
              swift_release();
              v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
              v822 = v626;
              sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
              swift_release();
              v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
              v822 = v628;
              sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
              swift_release();
              _os_log_impl(&dword_1CC9BF000, v802, (os_log_type_t)v803, "Playing right offline for %{private,mask.hash}s.", v801, 0x16u);
              swift_arrayDestroy();
              MEMORY[0x1D17B214C](v633, -1, -1);
              sub_1CCA393F4();
            }
            goto LABEL_271;
          }
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();

          ((void (*)(char *, uint64_t))v818)(v614, v819);
          v326 = (uint64_t)v816;
          v476 = v806;
          v477 = v811;
          v478 = v805;
          v479 = (uint64_t *)&v801;
          goto LABEL_140;
        }
        sub_1CC9C3E84(v809, &qword_1ED8A8EF8);
        sub_1CC9C3E84(v807, &qword_1ED8A8EF8);
        sub_1CC9C3E84(v610, &qword_1ED8A8EF8);
        sub_1CC9C3E84(v328, (uint64_t *)&unk_1EF9DF580);
        sub_1CC9C3E84(v237, (uint64_t *)&unk_1EF9DF580);
        sub_1CC9C3E84(v327, (uint64_t *)&unk_1EF9DF580);
        (*(void (**)(char *, uint64_t))(v812 + 8))(v813, v325);
        sub_1CCA0BF30(v326, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
        v475 = v609;
        goto LABEL_212;
      }
      v561 = v765;
      v562 = (void (*)(unint64_t, os_log_t, uint64_t))v747;
      v747(v765, (char *)v484, v325);
      v563 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
      v746(v767, v563, v251);
      v564 = v812;
      v565 = v802;
      (*(void (**)(os_log_t, uint64_t, uint64_t))(v812 + 16))(v802, v561, v325);
      v566 = (*(unsigned __int8 *)(v564 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v564 + 80);
      v567 = swift_allocObject();
      v562(v567 + v566, v565, v325);
      v568 = swift_allocObject();
      *(_QWORD *)(v568 + 16) = sub_1CCA56740;
      *(_QWORD *)(v568 + 24) = v567;
      v800 = sub_1CCB637D8();
      LODWORD(v799) = sub_1CCB63D48();
      v569 = swift_allocObject();
      *(_BYTE *)(v569 + 16) = 112;
      v570 = swift_allocObject();
      *(_BYTE *)(v570 + 16) = 8;
      v571 = swift_allocObject();
      *(_QWORD *)(v571 + 16) = 1752392040;
      v572 = swift_allocObject();
      *(_QWORD *)(v572 + 16) = sub_1CCA57538;
      *(_QWORD *)(v572 + 24) = v571;
      v573 = swift_allocObject();
      *(_BYTE *)(v573 + 16) = 33;
      v574 = swift_allocObject();
      *(_BYTE *)(v574 + 16) = 8;
      v575 = swift_allocObject();
      *(_QWORD *)(v575 + 16) = sub_1CCA573E8;
      *(_QWORD *)(v575 + 24) = v568;
      v576 = swift_allocObject();
      *(_QWORD *)(v576 + 16) = sub_1CC9F4530;
      *(_QWORD *)(v576 + 24) = v575;
      v577 = swift_allocObject();
      sub_1CCAAB9E4(v577, 6);
      *v578 = sub_1CCA573F4;
      v578[1] = v569;
      v578[2] = sub_1CCA573F4;
      v578[3] = v570;
      v578[4] = sub_1CCA573F0;
      v578[5] = v572;
      v578[6] = sub_1CCA573F4;
      v578[7] = v573;
      v578[8] = sub_1CCA573F4;
      v578[9] = v574;
      v578[10] = sub_1CCA573EC;
      v578[11] = v576;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v579 = v800;
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v579, (os_log_type_t)v799))
      {
        v580 = (uint8_t *)sub_1CCA393EC();
        v581 = swift_slowAlloc();
        v823 = v581;
        v824 = 0;
        v798 = v580;
        *(_WORD *)v580 = 515;
        v825 = v580 + 2;
        v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
        v822 = v569;
        v160 = v810;
        sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
        if (!v160)
        {
          swift_release();
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
          v822 = v570;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          swift_release();
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F0;
          v822 = v572;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          swift_release();
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
          v822 = v573;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          swift_release();
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
          v822 = v574;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          swift_release();
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
          v822 = v576;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          v810 = 0;
          swift_release();
          _os_log_impl(&dword_1CC9BF000, v800, (os_log_type_t)v799, "Playing left offline for %{private,mask.hash}s.", v798, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1D17B214C](v581, -1, -1);
          sub_1CCA393F4();
        }
        goto LABEL_271;
      }
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      ((void (*)(char *, uint64_t))v818)(v767, v251);
      v326 = (uint64_t)v816;
      v327 = v806;
      v325 = v811;
      v328 = v805;
      v608 = v765;
      sub_1CCA4A404(v765, 1, v817, v793, (uint64_t)v814, v815);
      (*(void (**)(uint64_t, uint64_t))(v812 + 8))(v608, v325);
    }
    v485 = v745;
    goto LABEL_207;
  }
  v352 = swift_allocObject();
  v353 = sub_1CCAA66EC(v352, 1);
  *v354 = 2;
  v355 = nullsub_1(v353);
  v356 = sub_1CCA7A870(v355);
  swift_bridgeObjectRelease();
  v357 = sub_1CCAFF17C(v356, v242);
  swift_bridgeObjectRelease();
  if ((v357 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v358 = v811;
    v359 = (uint64_t)v813;
    v360 = v819;
    v361 = v773;
    if ((v799 & 1) == 0)
    {
      v362 = v764;
      sub_1CC9EAB74(v809, v764, &qword_1ED8A8EF8);
      if (v745(v362, 1, v358) != 1)
      {
        v539 = v766;
        v540 = (void (*)(unint64_t, os_log_t, uint64_t))v747;
        v747((uint64_t)v766, (char *)v362, v358);
        v541 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
        v746(v768, v541, v360);
        v542 = v812;
        v543 = v802;
        (*(void (**)(os_log_t, char *, uint64_t))(v812 + 16))(v802, v539, v358);
        v544 = (*(unsigned __int8 *)(v542 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v542 + 80);
        v545 = swift_allocObject();
        v540(v545 + v544, v543, v358);
        v546 = swift_allocObject();
        *(_QWORD *)(v546 + 16) = sub_1CCA56740;
        *(_QWORD *)(v546 + 24) = v545;
        v802 = (os_log_t)sub_1CCB637D8();
        LODWORD(v543) = sub_1CCB63D48();
        v547 = swift_allocObject();
        *(_BYTE *)(v547 + 16) = 112;
        v548 = swift_allocObject();
        *(_BYTE *)(v548 + 16) = 8;
        v549 = swift_allocObject();
        *(_QWORD *)(v549 + 16) = 1752392040;
        v550 = swift_allocObject();
        *(_QWORD *)(v550 + 16) = sub_1CCA57538;
        *(_QWORD *)(v550 + 24) = v549;
        v551 = swift_allocObject();
        *(_BYTE *)(v551 + 16) = 33;
        v552 = swift_allocObject();
        *(_BYTE *)(v552 + 16) = 8;
        v553 = swift_allocObject();
        *(_QWORD *)(v553 + 16) = sub_1CCA573E8;
        *(_QWORD *)(v553 + 24) = v546;
        v554 = swift_allocObject();
        *(_QWORD *)(v554 + 16) = sub_1CC9F4530;
        *(_QWORD *)(v554 + 24) = v553;
        v555 = swift_allocObject();
        sub_1CCAAB9E4(v555, 6);
        *v556 = sub_1CCA573F4;
        v556[1] = v547;
        v556[2] = sub_1CCA573F4;
        v556[3] = v548;
        v556[4] = sub_1CCA573F0;
        v556[5] = v550;
        v556[6] = sub_1CCA573F4;
        v556[7] = v551;
        v556[8] = sub_1CCA573F4;
        v556[9] = v552;
        v556[10] = sub_1CCA573EC;
        v556[11] = v554;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v557 = v802;
        swift_bridgeObjectRelease();
        LODWORD(v803) = (_DWORD)v543;
        if (os_log_type_enabled(v557, (os_log_type_t)v543))
        {
          v558 = (uint8_t *)sub_1CCA393EC();
          v559 = swift_slowAlloc();
          v823 = v559;
          v824 = 0;
          *(_WORD *)v558 = 515;
          v825 = v558 + 2;
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
          v822 = v547;
          v160 = v810;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          if (!v160)
          {
            v810 = v558;
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v548;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F0;
            v822 = v550;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v551;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v552;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
            v822 = v554;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            _os_log_impl(&dword_1CC9BF000, v802, (os_log_type_t)v803, "Playing case offline for %{private,mask.hash}s.", v810, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1D17B214C](v559, -1, -1);
            sub_1CCA393F4();
          }
          goto LABEL_271;
        }
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(char *, uint64_t))v818)(v768, v360);
        v326 = (uint64_t)v816;
        v476 = v806;
        v477 = v811;
        v478 = v805;
        v479 = (uint64_t *)&v798;
        goto LABEL_140;
      }
      sub_1CC9C3E84(v362, &qword_1ED8A8EF8);
    }
    v363 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
    v746(v361, v363, v360);
    v364 = v812;
    v365 = v802;
    (*(void (**)(os_log_t, uint64_t, uint64_t))(v812 + 16))(v802, v359, v358);
    v366 = (*(unsigned __int8 *)(v364 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v364 + 80);
    v367 = swift_allocObject();
    v747(v367 + v366, (char *)v365, v358);
    v368 = swift_allocObject();
    *(_QWORD *)(v368 + 16) = sub_1CCA56740;
    *(_QWORD *)(v368 + 24) = v367;
    v369 = sub_1CCB637D8();
    LODWORD(v366) = sub_1CCB63D48();
    v370 = swift_allocObject();
    *(_BYTE *)(v370 + 16) = 34;
    v371 = swift_allocObject();
    *(_BYTE *)(v371 + 16) = 8;
    v372 = swift_allocObject();
    *(_QWORD *)(v372 + 16) = sub_1CCA573E8;
    *(_QWORD *)(v372 + 24) = v368;
    v373 = swift_allocObject();
    *(_QWORD *)(v373 + 16) = sub_1CC9F4530;
    *(_QWORD *)(v373 + 24) = v372;
    v374 = swift_allocObject();
    sub_1CCAAB9E4(v374, 3);
    *v375 = sub_1CCA573F4;
    v375[1] = v370;
    v375[2] = sub_1CCA573F4;
    v375[3] = v371;
    v375[4] = sub_1CCA573EC;
    v375[5] = v373;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v817) = v366;
    if (os_log_type_enabled(v369, (os_log_type_t)v366))
    {
      v376 = (uint8_t *)sub_1CCA393EC();
      v377 = swift_slowAlloc();
      v823 = v377;
      v824 = 0;
      *(_WORD *)v376 = 258;
      v825 = v376 + 2;
      v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
      v822 = v370;
      v160 = v810;
      sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
      if (!v160)
      {
        swift_release();
        v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
        v822 = v371;
        sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
        swift_release();
        v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
        v822 = v373;
        sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
        swift_release();
        _os_log_impl(&dword_1CC9BF000, v369, (os_log_type_t)v817, "Error playing case sound %{public}s.", v376, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v377, -1, -1);
        sub_1CCA393F4();
      }
      goto LABEL_271;
    }

    swift_release();
    swift_release();
    swift_release();
    ((void (*)(char *, uint64_t))v818)(v773, v360);
    sub_1CC9C3E84(v809, &qword_1ED8A8EF8);
    sub_1CC9C3E84(v807, &qword_1ED8A8EF8);
    sub_1CC9C3E84(v808, &qword_1ED8A8EF8);
    sub_1CC9C3E84(v805, (uint64_t *)&unk_1EF9DF580);
    sub_1CC9C3E84(v804, (uint64_t *)&unk_1EF9DF580);
    sub_1CC9C3E84(v806, (uint64_t *)&unk_1EF9DF580);
    v419 = *(void (**)(uint64_t, uint64_t))(v364 + 8);
    goto LABEL_160;
  }
  v461 = swift_allocObject();
  v462 = sub_1CCAA66EC(v461, 1);
  *v463 = 1;
  v464 = nullsub_1(v462);
  v465 = sub_1CCA7A870(v464);
  swift_bridgeObjectRelease();
  v466 = sub_1CCAFF17C(v465, v242);
  swift_bridgeObjectRelease();
  v467 = v807;
  if ((v466 & 1) == 0)
  {
    v525 = swift_allocObject();
    v526 = sub_1CCAA66EC(v525, 1);
    *v527 = 0;
    v528 = nullsub_1(v526);
    v529 = sub_1CCA7A870(v528);
    swift_bridgeObjectRelease();
    v530 = sub_1CCAFF17C(v529, v242);
    swift_bridgeObjectRelease();
    v326 = (uint64_t)v816;
    v531 = v806;
    v532 = v811;
    v533 = v805;
    v534 = v819;
    if ((v530 & 1) == 0)
    {
      v582 = sub_1CCA7A870(MEMORY[0x1E0DEE9D8]);
      swift_bridgeObjectRelease();
      v583 = sub_1CCAFF17C(v582, v242);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v584 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
      if ((v583 & 1) != 0)
      {
        v585 = v760;
        v746(v760, v584, v534);
        v586 = v812;
        v587 = v802;
        (*(void (**)(os_log_t, char *, uint64_t))(v812 + 16))(v802, v813, v532);
        v588 = (*(unsigned __int8 *)(v586 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v586 + 80);
        v589 = swift_allocObject();
        v590 = v589 + v588;
        v591 = v585;
        v747(v590, (char *)v587, v532);
        v592 = swift_allocObject();
        *(_QWORD *)(v592 + 16) = sub_1CCA56740;
        *(_QWORD *)(v592 + 24) = v589;
        v593 = sub_1CCB637D8();
        v594 = sub_1CCB63D48();
        v595 = swift_allocObject();
        *(_BYTE *)(v595 + 16) = 34;
        v596 = swift_allocObject();
        *(_BYTE *)(v596 + 16) = 8;
        v597 = swift_allocObject();
        *(_QWORD *)(v597 + 16) = sub_1CCA573E8;
        *(_QWORD *)(v597 + 24) = v592;
        v598 = swift_allocObject();
        *(_QWORD *)(v598 + 16) = sub_1CC9F4530;
        *(_QWORD *)(v598 + 24) = v597;
        v599 = swift_allocObject();
        sub_1CCAAB9E4(v599, 3);
        *v600 = sub_1CCA573F4;
        v600[1] = v595;
        v601 = v534;
        v600[2] = sub_1CCA573F4;
        v600[3] = v596;
        v600[4] = sub_1CCA573EC;
        v600[5] = v598;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v593, v594))
        {
          v602 = v594;
          v603 = (uint8_t *)sub_1CCA393EC();
          v604 = swift_slowAlloc();
          v823 = v604;
          v824 = 0;
          *(_WORD *)v603 = 258;
          v825 = v603 + 2;
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
          v822 = v595;
          v160 = v810;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          if (!v160)
          {
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v596;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
            v822 = v598;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            _os_log_impl(&dword_1CC9BF000, v593, v602, "Stopping groupID offline for %{public}s.", v603, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1D17B214C](v604, -1, -1);
            sub_1CCA393F4();
          }
          goto LABEL_271;
        }
      }
      else
      {
        v634 = v761;
        v746(v761, v584, v534);
        v635 = v812;
        v636 = v802;
        (*(void (**)(os_log_t, char *, uint64_t))(v812 + 16))(v802, v813, v532);
        v637 = (*(unsigned __int8 *)(v635 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v635 + 80);
        v638 = swift_allocObject();
        v639 = v638 + v637;
        v591 = v634;
        v747(v639, (char *)v636, v532);
        v640 = swift_allocObject();
        *(_QWORD *)(v640 + 16) = sub_1CCA56740;
        *(_QWORD *)(v640 + 24) = v638;
        v593 = sub_1CCB637D8();
        v641 = sub_1CCB63D30();
        v642 = swift_allocObject();
        *(_BYTE *)(v642 + 16) = 34;
        v643 = swift_allocObject();
        *(_BYTE *)(v643 + 16) = 8;
        v644 = swift_allocObject();
        *(_QWORD *)(v644 + 16) = sub_1CCA56744;
        *(_QWORD *)(v644 + 24) = v640;
        v645 = swift_allocObject();
        *(_QWORD *)(v645 + 16) = sub_1CC9F4530;
        *(_QWORD *)(v645 + 24) = v644;
        v646 = swift_allocObject();
        sub_1CCAAB9E4(v646, 3);
        *v647 = sub_1CCA573F4;
        v647[1] = v642;
        v601 = v534;
        v647[2] = sub_1CCA573F4;
        v647[3] = v643;
        v647[4] = sub_1CCA573EC;
        v647[5] = v645;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v593, v641))
        {
          v648 = v641;
          v649 = (uint8_t *)sub_1CCA393EC();
          v650 = swift_slowAlloc();
          v823 = v650;
          v824 = 0;
          *(_WORD *)v649 = 258;
          v825 = v649 + 2;
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
          v822 = v642;
          v160 = v810;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          if (!v160)
          {
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v643;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
            v822 = v645;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            _os_log_impl(&dword_1CC9BF000, v593, v648, "Error: Unhandled case - Stopping groupID offline for %{public}s.", v649, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1D17B214C](v650, -1, -1);
            sub_1CCA393F4();
          }
          goto LABEL_271;
        }
      }
      swift_release();
      swift_release();
      swift_release();

      ((void (*)(char *, uint64_t))v818)(v591, v601);
      v651 = v806;
      v416 = v811;
      v652 = v805;
      v418 = (uint64_t)v813;
      sub_1CCA4A404((uint64_t)v813, 0, v817, v793, (uint64_t)v814, v815);
      sub_1CC9C3E84(v809, &qword_1ED8A8EF8);
      sub_1CC9C3E84(v807, &qword_1ED8A8EF8);
      sub_1CC9C3E84(v808, &qword_1ED8A8EF8);
      sub_1CC9C3E84(v652, (uint64_t *)&unk_1EF9DF580);
      sub_1CC9C3E84(v804, (uint64_t *)&unk_1EF9DF580);
      sub_1CC9C3E84(v651, (uint64_t *)&unk_1EF9DF580);
      v419 = *(void (**)(uint64_t, uint64_t))(v812 + 8);
      goto LABEL_115;
    }
    swift_bridgeObjectRelease();
    if ((v239 & 1) != 0)
    {
      v535 = v745;
      if ((v797 & 1) != 0)
      {
        v536 = v808;
        v537 = v748;
        sub_1CC9EAB74(v808, v748, &qword_1ED8A8EF8);
        if (v535(v537, 1, v532) == 1)
        {
          sub_1CC9C3E84(v809, &qword_1ED8A8EF8);
          sub_1CC9C3E84(v467, &qword_1ED8A8EF8);
          v538 = v536;
LABEL_238:
          sub_1CC9C3E84(v538, &qword_1ED8A8EF8);
          sub_1CC9C3E84(v533, (uint64_t *)&unk_1EF9DF580);
          sub_1CC9C3E84(v237, (uint64_t *)&unk_1EF9DF580);
          sub_1CC9C3E84(v531, (uint64_t *)&unk_1EF9DF580);
          (*(void (**)(char *, uint64_t))(v812 + 8))(v813, v532);
          sub_1CCA0BF30(v326, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
          v475 = v537;
          goto LABEL_212;
        }
        v695 = v750;
        v696 = (void (*)(unint64_t, os_log_t, uint64_t))v747;
        v747(v750, (char *)v537, v532);
        v697 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
        v746(v752, v697, v534);
        v698 = v812;
        v699 = v802;
        (*(void (**)(os_log_t, uint64_t, uint64_t))(v812 + 16))(v802, v695, v532);
        v700 = (*(unsigned __int8 *)(v698 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v698 + 80);
        v701 = swift_allocObject();
        v696(v701 + v700, v699, v532);
        v702 = swift_allocObject();
        *(_QWORD *)(v702 + 16) = sub_1CCA56740;
        *(_QWORD *)(v702 + 24) = v701;
        v703 = sub_1CCB637D8();
        v704 = sub_1CCB63D48();
        v705 = swift_allocObject();
        *(_BYTE *)(v705 + 16) = 112;
        v706 = swift_allocObject();
        *(_BYTE *)(v706 + 16) = 8;
        v707 = swift_allocObject();
        *(_QWORD *)(v707 + 16) = 1752392040;
        v708 = swift_allocObject();
        *(_QWORD *)(v708 + 16) = sub_1CCA57538;
        *(_QWORD *)(v708 + 24) = v707;
        v709 = swift_allocObject();
        *(_BYTE *)(v709 + 16) = 33;
        v710 = swift_allocObject();
        *(_BYTE *)(v710 + 16) = 8;
        v711 = swift_allocObject();
        *(_QWORD *)(v711 + 16) = sub_1CCA573E8;
        *(_QWORD *)(v711 + 24) = v702;
        v712 = swift_allocObject();
        *(_QWORD *)(v712 + 16) = sub_1CC9F4530;
        *(_QWORD *)(v712 + 24) = v711;
        v713 = swift_allocObject();
        sub_1CCAAB9E4(v713, 6);
        *v714 = sub_1CCA573F4;
        v714[1] = v705;
        v714[2] = sub_1CCA573F4;
        v714[3] = v706;
        v714[4] = sub_1CCA573F0;
        v714[5] = v708;
        v714[6] = sub_1CCA573F4;
        v714[7] = v709;
        v714[8] = sub_1CCA573F4;
        v714[9] = v710;
        v714[10] = sub_1CCA573EC;
        v714[11] = v712;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        LODWORD(v803) = v704;
        if (os_log_type_enabled(v703, (os_log_type_t)v704))
        {
          v802 = v703;
          v715 = (uint8_t *)sub_1CCA393EC();
          v716 = swift_slowAlloc();
          v823 = v716;
          v824 = 0;
          *(_WORD *)v715 = 515;
          v825 = v715 + 2;
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
          v822 = v705;
          v160 = v810;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          if (!v160)
          {
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v706;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F0;
            v822 = v708;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v709;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v710;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
            v822 = v712;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            _os_log_impl(&dword_1CC9BF000, v802, (os_log_type_t)v803, "Muting right offline for %{private,mask.hash}s.", v715, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1D17B214C](v716, -1, -1);
            sub_1CCA393F4();
          }
          goto LABEL_271;
        }
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(char *, uint64_t))v818)(v752, v819);
        v739 = v808;
        v740 = v750;
        sub_1CCA4A404(v750, 0, v817, v793, (uint64_t)v814, v815);
        v741 = *(void (**)(uint64_t, uint64_t))(v812 + 8);
        v742 = v811;
        v741(v740, v811);
        sub_1CC9C3E84(v809, &qword_1ED8A8EF8);
        sub_1CC9C3E84(v807, &qword_1ED8A8EF8);
        v743 = v739;
        goto LABEL_267;
      }
    }
    else
    {
      v605 = v745;
      if ((v798 & 1) == 0)
      {
        v537 = v749;
        sub_1CC9EAB74(v467, v749, &qword_1ED8A8EF8);
        if (v605(v537, 1, v532) == 1)
        {
          sub_1CC9C3E84(v809, &qword_1ED8A8EF8);
          sub_1CC9C3E84(v467, &qword_1ED8A8EF8);
          v538 = v808;
          goto LABEL_238;
        }
        v717 = v751;
        v718 = (void (*)(unint64_t, os_log_t, uint64_t))v747;
        v747(v751, (char *)v537, v532);
        v719 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
        v746(v753, v719, v534);
        v720 = v812;
        v721 = v802;
        (*(void (**)(os_log_t, uint64_t, uint64_t))(v812 + 16))(v802, v717, v532);
        v722 = (*(unsigned __int8 *)(v720 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v720 + 80);
        v723 = swift_allocObject();
        v718(v723 + v722, v721, v532);
        v724 = swift_allocObject();
        *(_QWORD *)(v724 + 16) = sub_1CCA56740;
        *(_QWORD *)(v724 + 24) = v723;
        v725 = sub_1CCB637D8();
        v726 = sub_1CCB63D48();
        v727 = swift_allocObject();
        *(_BYTE *)(v727 + 16) = 112;
        v728 = swift_allocObject();
        *(_BYTE *)(v728 + 16) = 8;
        v729 = swift_allocObject();
        *(_QWORD *)(v729 + 16) = 1752392040;
        v730 = swift_allocObject();
        *(_QWORD *)(v730 + 16) = sub_1CCA567C4;
        *(_QWORD *)(v730 + 24) = v729;
        v731 = swift_allocObject();
        *(_BYTE *)(v731 + 16) = 33;
        v732 = swift_allocObject();
        *(_BYTE *)(v732 + 16) = 8;
        v733 = swift_allocObject();
        *(_QWORD *)(v733 + 16) = sub_1CCA573E8;
        *(_QWORD *)(v733 + 24) = v724;
        v734 = swift_allocObject();
        *(_QWORD *)(v734 + 16) = sub_1CC9F4530;
        *(_QWORD *)(v734 + 24) = v733;
        v735 = swift_allocObject();
        sub_1CCAAB9E4(v735, 6);
        *v736 = sub_1CCA573F4;
        v736[1] = v727;
        v736[2] = sub_1CCA573F4;
        v736[3] = v728;
        v736[4] = sub_1CCA567D0;
        v736[5] = v730;
        v736[6] = sub_1CCA573F4;
        v736[7] = v731;
        v736[8] = sub_1CCA573F4;
        v736[9] = v732;
        v736[10] = sub_1CCA573EC;
        v736[11] = v734;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        LODWORD(v803) = v726;
        if (os_log_type_enabled(v725, (os_log_type_t)v726))
        {
          v802 = v725;
          v737 = (uint8_t *)sub_1CCA393EC();
          v738 = swift_slowAlloc();
          v823 = v738;
          v824 = 0;
          *(_WORD *)v737 = 515;
          v825 = v737 + 2;
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
          v822 = v727;
          v160 = v810;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          if (!v160)
          {
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v728;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA567D0;
            v822 = v730;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v731;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v732;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
            v822 = v734;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            _os_log_impl(&dword_1CC9BF000, v802, (os_log_type_t)v803, "Playing left offline for %{private,mask.hash}s.", v737, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1D17B214C](v738, -1, -1);
            sub_1CCA393F4();
          }
          goto LABEL_271;
        }
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(char *, uint64_t))v818)(v753, v819);
        v744 = v751;
        sub_1CCA4A404(v751, 1, v817, v793, (uint64_t)v814, v815);
        v741 = *(void (**)(uint64_t, uint64_t))(v812 + 8);
        v742 = v811;
        v741(v744, v811);
        sub_1CC9C3E84(v809, &qword_1ED8A8EF8);
        sub_1CC9C3E84(v807, &qword_1ED8A8EF8);
        v743 = v808;
LABEL_267:
        sub_1CC9C3E84(v743, &qword_1ED8A8EF8);
        sub_1CC9C3E84(v805, (uint64_t *)&unk_1EF9DF580);
        sub_1CC9C3E84(v804, (uint64_t *)&unk_1EF9DF580);
        sub_1CC9C3E84(v806, (uint64_t *)&unk_1EF9DF580);
        v741((uint64_t)v813, v742);
        goto LABEL_155;
      }
    }
    sub_1CC9C3E84(v809, &qword_1ED8A8EF8);
    sub_1CC9C3E84(v467, &qword_1ED8A8EF8);
    sub_1CC9C3E84(v808, &qword_1ED8A8EF8);
    sub_1CC9C3E84(v533, (uint64_t *)&unk_1EF9DF580);
    sub_1CC9C3E84(v237, (uint64_t *)&unk_1EF9DF580);
    sub_1CC9C3E84(v531, (uint64_t *)&unk_1EF9DF580);
    (*(void (**)(char *, uint64_t))(v812 + 8))(v813, v532);
    goto LABEL_142;
  }
  swift_bridgeObjectRelease();
  v202 = (uint64_t)v816;
  v468 = v806;
  v469 = v811;
  v470 = v805;
  if ((v239 & 1) != 0)
  {
    v471 = v819;
    v472 = v812;
    v473 = v745;
    if ((v798 & 1) != 0)
    {
      v474 = v754;
      sub_1CC9EAB74(v467, v754, &qword_1ED8A8EF8);
      if (v473(v474, 1, v469) != 1)
      {
        v653 = v756;
        v654 = (void (*)(unint64_t, os_log_t, uint64_t))v747;
        v747((uint64_t)v756, (char *)v474, v469);
        v655 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
        v746(v758, v655, v471);
        v656 = v802;
        (*(void (**)(os_log_t, char *, uint64_t))(v472 + 16))(v802, v653, v469);
        v657 = (*(unsigned __int8 *)(v472 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v472 + 80);
        v658 = swift_allocObject();
        v654(v658 + v657, v656, v469);
        v659 = swift_allocObject();
        *(_QWORD *)(v659 + 16) = sub_1CCA56740;
        *(_QWORD *)(v659 + 24) = v658;
        v802 = (os_log_t)sub_1CCB637D8();
        LODWORD(v656) = sub_1CCB63D48();
        v660 = swift_allocObject();
        *(_BYTE *)(v660 + 16) = 112;
        v661 = swift_allocObject();
        *(_BYTE *)(v661 + 16) = 8;
        v662 = swift_allocObject();
        *(_QWORD *)(v662 + 16) = 1752392040;
        v663 = swift_allocObject();
        *(_QWORD *)(v663 + 16) = sub_1CCA57538;
        *(_QWORD *)(v663 + 24) = v662;
        v664 = swift_allocObject();
        *(_BYTE *)(v664 + 16) = 33;
        v665 = swift_allocObject();
        *(_BYTE *)(v665 + 16) = 8;
        v666 = swift_allocObject();
        *(_QWORD *)(v666 + 16) = sub_1CCA573E8;
        *(_QWORD *)(v666 + 24) = v659;
        v667 = swift_allocObject();
        *(_QWORD *)(v667 + 16) = sub_1CC9F4530;
        *(_QWORD *)(v667 + 24) = v666;
        v668 = swift_allocObject();
        sub_1CCAAB9E4(v668, 6);
        *v669 = sub_1CCA573F4;
        v669[1] = v660;
        v669[2] = sub_1CCA573F4;
        v669[3] = v661;
        v669[4] = sub_1CCA573F0;
        v669[5] = v663;
        v669[6] = sub_1CCA573F4;
        v669[7] = v664;
        v669[8] = sub_1CCA573F4;
        v669[9] = v665;
        v669[10] = sub_1CCA573EC;
        v669[11] = v667;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v670 = v802;
        swift_bridgeObjectRelease();
        LODWORD(v803) = (_DWORD)v656;
        if (os_log_type_enabled(v670, (os_log_type_t)v656))
        {
          v671 = (uint8_t *)sub_1CCA393EC();
          v672 = swift_slowAlloc();
          v823 = v672;
          v824 = 0;
          v801 = v671;
          *(_WORD *)v671 = 515;
          v825 = v671 + 2;
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
          v822 = v660;
          v160 = v810;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          if (!v160)
          {
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v661;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F0;
            v822 = v663;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v664;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v665;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
            v822 = v667;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            _os_log_impl(&dword_1CC9BF000, v802, (os_log_type_t)v803, "Muting left offline for %{private,mask.hash}s.", v801, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1D17B214C](v672, -1, -1);
            sub_1CCA393F4();
          }
          goto LABEL_271;
        }
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(char *, uint64_t))v818)(v758, v471);
        v326 = (uint64_t)v816;
        v476 = v806;
        v477 = v811;
        v478 = v805;
        v480 = v756;
        v481 = (uint64_t)v756;
        v482 = 0;
        goto LABEL_141;
      }
      sub_1CC9C3E84(v809, &qword_1ED8A8EF8);
      sub_1CC9C3E84(v467, &qword_1ED8A8EF8);
      sub_1CC9C3E84(v808, &qword_1ED8A8EF8);
      sub_1CC9C3E84(v470, (uint64_t *)&unk_1EF9DF580);
      sub_1CC9C3E84(v237, (uint64_t *)&unk_1EF9DF580);
      sub_1CC9C3E84(v468, (uint64_t *)&unk_1EF9DF580);
      (*(void (**)(char *, uint64_t))(v472 + 8))(v813, v469);
      sub_1CCA0BF30(v202, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      v475 = v474;
      goto LABEL_212;
    }
  }
  else
  {
    v472 = v812;
    v560 = v745;
    if ((v797 & 1) == 0)
    {
      v606 = v808;
      v607 = v755;
      sub_1CC9EAB74(v808, v755, &qword_1ED8A8EF8);
      if (v560(v607, 1, v469) != 1)
      {
        v673 = v757;
        v674 = (void (*)(unint64_t, os_log_t, uint64_t))v747;
        v747((uint64_t)v757, (char *)v607, v469);
        v675 = sub_1CCA40A38(&qword_1EF9DEF78, (uint64_t)qword_1EF9FF4D8);
        v746(v759, v675, v819);
        v676 = v802;
        (*(void (**)(os_log_t, char *, uint64_t))(v472 + 16))(v802, v673, v469);
        v677 = (*(unsigned __int8 *)(v472 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v472 + 80);
        v678 = swift_allocObject();
        v674(v678 + v677, v676, v469);
        v679 = swift_allocObject();
        *(_QWORD *)(v679 + 16) = sub_1CCA56740;
        *(_QWORD *)(v679 + 24) = v678;
        v802 = (os_log_t)sub_1CCB637D8();
        v680 = sub_1CCB63D48();
        v681 = swift_allocObject();
        *(_BYTE *)(v681 + 16) = 112;
        v682 = swift_allocObject();
        *(_BYTE *)(v682 + 16) = 8;
        v683 = swift_allocObject();
        *(_QWORD *)(v683 + 16) = 1752392040;
        v684 = swift_allocObject();
        *(_QWORD *)(v684 + 16) = sub_1CCA57538;
        *(_QWORD *)(v684 + 24) = v683;
        v685 = swift_allocObject();
        *(_BYTE *)(v685 + 16) = 33;
        v686 = swift_allocObject();
        *(_BYTE *)(v686 + 16) = 8;
        v687 = swift_allocObject();
        *(_QWORD *)(v687 + 16) = sub_1CCA573E8;
        *(_QWORD *)(v687 + 24) = v679;
        v688 = swift_allocObject();
        *(_QWORD *)(v688 + 16) = sub_1CC9F4530;
        *(_QWORD *)(v688 + 24) = v687;
        v689 = swift_allocObject();
        sub_1CCAAB9E4(v689, 6);
        v690 = v819;
        *v691 = sub_1CCA573F4;
        v691[1] = v681;
        v691[2] = sub_1CCA573F4;
        v691[3] = v682;
        v691[4] = sub_1CCA573F0;
        v691[5] = v684;
        v691[6] = sub_1CCA573F4;
        v691[7] = v685;
        v691[8] = sub_1CCA573F4;
        v691[9] = v686;
        v691[10] = sub_1CCA573EC;
        v691[11] = v688;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v692 = v802;
        swift_bridgeObjectRelease();
        LODWORD(v803) = v680;
        if (os_log_type_enabled(v692, (os_log_type_t)v680))
        {
          v693 = (uint8_t *)sub_1CCA393EC();
          v694 = swift_slowAlloc();
          v823 = v694;
          v824 = 0;
          v801 = v693;
          *(_WORD *)v693 = 515;
          v825 = v693 + 2;
          v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
          v822 = v681;
          v160 = v810;
          sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
          if (!v160)
          {
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v682;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F0;
            v822 = v684;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v685;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573F4;
            v822 = v686;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            v821 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CCA573EC;
            v822 = v688;
            sub_1CCA394C4(&v821, (uint64_t)&v825, (uint64_t)&v824, (uint64_t)&v823);
            swift_release();
            _os_log_impl(&dword_1CC9BF000, v802, (os_log_type_t)v803, "Playing right offline for %{private,mask.hash}s.", v801, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1D17B214C](v694, -1, -1);
            sub_1CCA393F4();
          }
          goto LABEL_271;
        }
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(char *, uint64_t))v818)(v759, v690);
        v326 = (uint64_t)v816;
        v476 = v806;
        v477 = v811;
        v478 = v805;
        v479 = &v789;
        goto LABEL_140;
      }
      sub_1CC9C3E84(v809, &qword_1ED8A8EF8);
      sub_1CC9C3E84(v467, &qword_1ED8A8EF8);
      sub_1CC9C3E84(v606, &qword_1ED8A8EF8);
      sub_1CC9C3E84(v470, (uint64_t *)&unk_1EF9DF580);
      sub_1CC9C3E84(v237, (uint64_t *)&unk_1EF9DF580);
      sub_1CC9C3E84(v468, (uint64_t *)&unk_1EF9DF580);
      (*(void (**)(char *, uint64_t))(v472 + 8))(v813, v469);
      sub_1CCA0BF30(v202, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      v475 = v607;
LABEL_212:
      sub_1CC9C3E84(v475, &qword_1ED8A8EF8);
      return;
    }
  }
  sub_1CC9C3E84(v809, &qword_1ED8A8EF8);
  sub_1CC9C3E84(v467, &qword_1ED8A8EF8);
  sub_1CC9C3E84(v808, &qword_1ED8A8EF8);
  sub_1CC9C3E84(v470, (uint64_t *)&unk_1EF9DF580);
  sub_1CC9C3E84(v237, (uint64_t *)&unk_1EF9DF580);
  sub_1CC9C3E84(v468, (uint64_t *)&unk_1EF9DF580);
  (*(void (**)(char *, uint64_t))(v472 + 8))(v813, v469);
LABEL_20:
  v209 = v202;
LABEL_156:
  sub_1CCA0BF30(v209, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
}

uint64_t sub_1CCA4A404(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  os_log_t v27;
  uint64_t v28;
  int v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  os_log_t v37;
  int v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  v44 = a5;
  v45 = a6;
  v46 = a2;
  v9 = sub_1CCB63604();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x1E0C80A78](v9);
  v43 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v37 - v13;
  if (qword_1EF9DEF70 != -1)
    swift_once();
  v15 = sub_1CCB637FC();
  sub_1CCA16C20(v15, (uint64_t)qword_1EF9FF4C0);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16(v14, a1, v9);
  swift_retain_n();
  v17 = sub_1CCB637D8();
  v18 = sub_1CCB63D48();
  v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    v20 = swift_slowAlloc();
    v42 = a4;
    v21 = v20;
    v39 = swift_slowAlloc();
    v48 = v39;
    *(_DWORD *)v21 = 136446723;
    v38 = v19;
    swift_retain();
    v37 = v17;
    v22 = sub_1CCA61E9C();
    v40 = v16;
    v24 = v23;
    swift_release();
    v47 = sub_1CCA0CB60(v22, v24, &v48);
    v41 = v11;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v21 + 12) = 2160;
    v47 = 1752392040;
    sub_1CCB63E44();
    *(_WORD *)(v21 + 22) = 2081;
    sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v25 = sub_1CCB64240();
    v47 = sub_1CCA0CB60(v25, v26, &v48);
    v16 = v40;
    v11 = v41;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    v27 = v37;
    _os_log_impl(&dword_1CC9BF000, v37, (os_log_type_t)v38, "performOffline %{public}s for %{private,mask.hash}s.", (uint8_t *)v21, 0x20u);
    v28 = v39;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v28, -1, -1);
    MEMORY[0x1D17B214C](v21, -1, -1);

  }
  else
  {
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);

  }
  v29 = *(unsigned __int8 *)(a3 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_soundQueueingConfirmed);
  v30 = v43;
  v16(v43, a1, v9);
  v31 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v32 = (v11 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v33 + v31, v30, v9);
  v34 = (_QWORD *)(v33 + v32);
  v35 = v45;
  *v34 = v44;
  v34[1] = v35;
  swift_retain();
  swift_retain();
  sub_1CCA4C880(a1, v46 & 1, v29, (uint64_t)sub_1CCA56D74, v33);
  return swift_release();
}

uint64_t sub_1CCA4A7C8(char *a1, uint64_t a2, uint64_t a3, void (*a4)(char **, uint64_t, id, uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  id v25;
  char *v26;
  void *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;

  v41 = a1;
  v9 = sub_1CCB63604();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF9DEF70 != -1)
    swift_once();
  v13 = sub_1CCB637FC();
  sub_1CCA16C20(v13, (uint64_t)qword_1EF9FF4C0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  swift_retain_n();
  v14 = sub_1CCB637D8();
  v15 = sub_1CCB63D48();
  v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    v17 = swift_slowAlloc();
    v40 = a5;
    v18 = v17;
    v39 = (char *)swift_slowAlloc();
    v43 = v39;
    *(_DWORD *)v18 = 136446723;
    swift_retain();
    v19 = sub_1CCA61E9C();
    HIDWORD(v38) = v16;
    v21 = v20;
    swift_release();
    v42 = sub_1CCA0CB60(v19, v21, (uint64_t *)&v43);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2160;
    v42 = 1752392040;
    sub_1CCB63E44();
    *(_WORD *)(v18 + 22) = 2081;
    sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v22 = sub_1CCB64240();
    v42 = sub_1CCA0CB60(v22, v23, (uint64_t *)&v43);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    _os_log_impl(&dword_1CC9BF000, v14, BYTE4(v38), "FMIPDeviceActionsController: %{public}s sound performed for %{private,mask.hash}s.", (uint8_t *)v18, 0x20u);
    v24 = v39;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v24, -1, -1);
    MEMORY[0x1D17B214C](v18, -1, -1);
  }
  else
  {
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  v25 = v41;
  if (v41)
  {
    v43 = v41;
    v26 = v41;
    sub_1CCA14E90(&qword_1EF9DF470);
    type metadata accessor for CommandError(0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v27 = (void *)v42;
      sub_1CC9CAA38((unint64_t *)&unk_1EF9DF6A8, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_1CCB66854);
      sub_1CCB633C4();

      if ((unint64_t)(v43 - 5) >= 6)
        v28 = 0;
      else
        v28 = 0xA0008070703uLL >> (8 * (v43 - 5));
    }
    else
    {
      v28 = 0;
    }
    LOBYTE(v43) = v28;
    sub_1CCA14E90(&qword_1ED8A7FB0);
    v34 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPDevice() - 8) + 80);
    v35 = (v34 + 32) & ~v34;
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(a2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, v36 + v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v32 = v36;
    v33 = v25;
  }
  else
  {
    LOBYTE(v43) = 4;
    sub_1CCA14E90(&qword_1ED8A7FB0);
    v29 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPDevice() - 8) + 80);
    v30 = (v29 + 32) & ~v29;
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(a2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, v31 + v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v32 = v31;
    v33 = 0;
  }
  a4(&v43, v32, v33, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA4AC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = v3;
  v33 = a2;
  v34 = a3;
  v6 = type metadata accessor for FMIPDevice();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF9DEF70 != -1)
    swift_once();
  v9 = sub_1CCB637FC();
  sub_1CCA16C20(v9, (uint64_t)qword_1EF9FF4C0);
  swift_retain_n();
  v10 = sub_1CCB637D8();
  v11 = sub_1CCB63D48();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v32 = v3;
    v14 = v13;
    v36 = v13;
    *(_DWORD *)v12 = 136446210;
    swift_retain();
    v15 = sub_1CCA61E9C();
    v17 = v16;
    swift_release();
    v35 = sub_1CCA0CB60(v15, v17, &v36);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPDeviceActionsController: performing online %{public}s sound.", v12, 0xCu);
    swift_arrayDestroy();
    v18 = v14;
    v4 = v32;
    MEMORY[0x1D17B214C](v18, -1, -1);
    MEMORY[0x1D17B214C](v12, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  sub_1CCA0BEEC(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v19 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_channels);
  v20 = *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_safetyWarningConfirmed);
  type metadata accessor for FMIPPlaySoundRequest();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + qword_1EF9FF788) = v19;
  sub_1CCA0BEEC((uint64_t)v8, v21 + qword_1EF9FF780, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  *(_BYTE *)(v21 + qword_1EF9FF790) = v20;
  swift_bridgeObjectRetain();
  v22 = sub_1CCA601C8(0x6E756F5379616C70, 0xE900000000000064, 0, 0, 1);
  sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v23 = v4[9];
  v24 = v4[10];
  sub_1CCA04DDC(v4 + 6, v23);
  v25 = (_QWORD *)swift_allocObject();
  v26 = v33;
  v27 = v34;
  v25[2] = a1;
  v25[3] = v26;
  v25[4] = v27;
  v25[5] = v4;
  v28 = *(void (**)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  v29 = type metadata accessor for FMIPPlaySoundResponse();
  swift_retain();
  swift_retain();
  swift_retain();
  v28(v22, sub_1CCA56620, v25, v29, v23, v24);
  swift_release();
  return swift_release();
}

uint64_t sub_1CCA4AFD8(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t *, uint64_t, _QWORD, uint64_t), uint64_t a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  id v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  void (*v76)(_QWORD, _QWORD, _QWORD, _QWORD);
  void (*v77)(uint64_t, void (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t);
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  uint64_t v85;
  void (*v86)(uint64_t *, uint64_t, _QWORD, uint64_t);
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;

  v84 = a6;
  v86 = a4;
  v10 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v10);
  v85 = (uint64_t)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCA14E90(&qword_1ED8A7460);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF9DEF70 != -1)
    swift_once();
  v15 = sub_1CCB637FC();
  v16 = sub_1CCA16C20(v15, (uint64_t)qword_1EF9FF4C0);
  swift_retain_n();
  swift_retain_n();
  v17 = sub_1CCB637D8();
  v18 = sub_1CCB63D48();
  v19 = os_log_type_enabled(v17, v18);
  v87 = v16;
  v88 = a2;
  v83 = v14;
  if (v19)
  {
    v20 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    v90 = v21;
    *(_DWORD *)v20 = 136446466;
    swift_retain();
    v22 = sub_1CCA61E9C();
    v24 = v23;
    swift_release();
    v89 = sub_1CCA0CB60(v22, v24, &v90);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v20 + 12) = 2080;
    v89 = a1;
    sub_1CCA14E90(&qword_1EF9E03B0);
    v25 = sub_1CCB63E20();
    v89 = sub_1CCA0CB60(v25, v26, &v90);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1CC9BF000, v17, v18, "FMIPDeviceActionsController: %{public}s sound action response received: %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v21, -1, -1);
    MEMORY[0x1D17B214C](v20, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_release_n();
  }

  swift_retain_n();
  swift_retain_n();
  v27 = sub_1CCB637D8();
  v28 = sub_1CCB63D48();
  if (!os_log_type_enabled(v27, v28))
  {
    swift_release_n();
    swift_release_n();
    goto LABEL_18;
  }
  v29 = a5;
  v30 = swift_slowAlloc();
  v82 = swift_slowAlloc();
  v90 = v82;
  *(_DWORD *)v30 = 136446466;
  swift_retain();
  v31 = sub_1CCA61E9C();
  v33 = v32;
  swift_release();
  v89 = sub_1CCA0CB60(v31, v33, &v90);
  sub_1CCB63E44();
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_WORD *)(v30 + 12) = 2080;
  if (a1)
  {
    v34 = *(_QWORD *)(a1 + 56);
    a5 = v29;
    if (v34)
    {
      if (*(_QWORD *)(v34 + 16))
      {
        v35 = type metadata accessor for FMIPDevice();
        v36 = *(unsigned __int8 *)(*(_QWORD *)(v35 - 8) + 80);
        v37 = (uint64_t)v83;
        sub_1CC9EAB74(v34 + *(int *)(v35 + 112) + ((v36 + 32) & ~v36), (uint64_t)v83, &qword_1ED8A7460);
        v38 = type metadata accessor for FMIPPlaySoundMetadata();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v37, 1, v38) != 1)
        {
          v81 = FMIPPlaySoundMetadata.debugDescription.getter();
          v39 = v80;
          sub_1CCA0BF30(v37, (uint64_t (*)(_QWORD))type metadata accessor for FMIPPlaySoundMetadata);
          v40 = v81;
          goto LABEL_17;
        }
        sub_1CC9C3E84(v37, &qword_1ED8A7460);
      }
      v39 = 0xE300000000000000;
    }
    else
    {
      v39 = 0xE300000000000000;
    }
  }
  else
  {
    v39 = 0xE300000000000000;
    a5 = v29;
  }
  v40 = 7104878;
LABEL_17:
  v89 = sub_1CCA0CB60(v40, v39, &v90);
  sub_1CCB63E44();
  swift_bridgeObjectRelease();
  swift_release_n();
  _os_log_impl(&dword_1CC9BF000, v27, v28, "FMIPDeviceActionsController: %{public}s sound metadata:\n%s", (uint8_t *)v30, 0x16u);
  v41 = v82;
  swift_arrayDestroy();
  MEMORY[0x1D17B214C](v41, -1, -1);
  MEMORY[0x1D17B214C](v30, -1, -1);
LABEL_18:

  swift_retain_n();
  swift_retain_n();
  v42 = sub_1CCB637D8();
  v43 = sub_1CCB63D48();
  if (os_log_type_enabled(v42, v43))
  {
    v83 = (char *)a5;
    v44 = 7104878;
    v45 = swift_slowAlloc();
    v46 = swift_slowAlloc();
    v90 = v46;
    *(_DWORD *)v45 = 136446466;
    swift_retain();
    v47 = sub_1CCA61E9C();
    v49 = v48;
    swift_release();
    v89 = sub_1CCA0CB60(v47, v49, &v90);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v45 + 12) = 2080;
    if (a1 && (v50 = *(_QWORD *)(a1 + 56)) != 0 && *(_QWORD *)(v50 + 16))
    {
      type metadata accessor for FMIPDevice();
      v51 = swift_bridgeObjectRetain();
      v44 = MEMORY[0x1D17B10E4](v51, &type metadata for FMIPAudioChannel);
      v53 = v52;
      swift_bridgeObjectRelease();
    }
    else
    {
      v53 = 0xE300000000000000;
    }
    v89 = sub_1CCA0CB60(v44, v53, &v90);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1CC9BF000, v42, v43, "FMIPDeviceActionsController: %{public}s sound channels:\n%s", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v46, -1, -1);
    MEMORY[0x1D17B214C](v45, -1, -1);

    a5 = (uint64_t)v83;
    v54 = v88;
    if (v88)
      goto LABEL_30;
  }
  else
  {
    swift_release_n();
    swift_release_n();

    v54 = v88;
    if (v88)
      goto LABEL_30;
  }
  if (a1)
  {
    if ((*(_BYTE *)(a3 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_safetyWarningConfirmed) & 1) != 0)
    {
      v55 = OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device;
      v56 = type metadata accessor for FMIPDevice();
      v57 = v85;
      sub_1CC9EAB74(a3 + *(int *)(v56 + 128) + v55, v85, &qword_1ED8A8C30);
      v58 = type metadata accessor for FMIPItemGroup();
      v59 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48))(v57, 1, v58) == 1;
      swift_retain();
      sub_1CC9C3E84(v57, &qword_1ED8A8C30);
    }
    else
    {
      swift_retain();
      v59 = 0;
    }
    sub_1CCAD4768(&v90);
    if (((1 << v90) & 0x1FFB) == 0 || v59)
    {
      sub_1CCAD4768(&v90);
      v79 = *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain();
      v86(&v90, v79, 0, a3);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      v71 = v84[9];
      v72 = v84[10];
      sub_1CCA04DDC(v84 + 6, v71);
      v73 = a3 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device;
      v74 = swift_allocObject();
      swift_weakInit();
      v75 = (_QWORD *)swift_allocObject();
      v76 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v86;
      v75[2] = v74;
      v75[3] = v76;
      v75[4] = a5;
      v75[5] = a3;
      v77 = *(void (**)(uint64_t, void (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t))(v72 + 72);
      swift_retain();
      swift_retain();
      swift_retain();
      v77(v73, sub_1CCA56688, v75, v71, v72);
      swift_release();
      swift_release();
      return swift_release();
    }
  }
LABEL_30:
  swift_retain();
  v60 = v54;
  swift_retain();
  v61 = v54;
  v62 = sub_1CCB637D8();
  v63 = sub_1CCB63D48();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = swift_slowAlloc();
    v65 = swift_slowAlloc();
    v90 = v65;
    *(_DWORD *)v64 = 136446466;
    swift_retain();
    v66 = sub_1CCA61E9C();
    v68 = v67;
    swift_release();
    v89 = sub_1CCA0CB60(v66, v68, &v90);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v64 + 12) = 2082;
    v89 = (uint64_t)v88;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v69 = sub_1CCB63E20();
    v89 = sub_1CCA0CB60(v69, v70, &v90);
    v54 = v88;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v62, v63, "FMIPDeviceActionsController: error received for %{public}s sound request: %{public}s", (uint8_t *)v64, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v65, -1, -1);
    MEMORY[0x1D17B214C](v64, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  LOBYTE(v90) = 0;
  return ((uint64_t (*)(uint64_t *, _QWORD, void *, uint64_t))v86)(&v90, 0, v54, a3);
}

void sub_1CCA4BAF0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, uint64_t, _QWORD, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t Strong;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  NSObject *v93;
  os_log_type_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t *, uint64_t, _QWORD, uint64_t);
  uint64_t *v114;
  uint64_t *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  unsigned __int8 *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v10 = sub_1CCA14E90(&qword_1ED8A7460);
  v11 = MEMORY[0x1E0C80A78](v10);
  v120 = (unsigned __int8 *)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v117 = (uint64_t)&v108 - v13;
  v122 = type metadata accessor for FMIPDevice();
  v14 = *(_QWORD *)(v122 - 8);
  v15 = MEMORY[0x1E0C80A78](v122);
  v17 = (uint64_t *)((char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x1E0C80A78](v15);
  v115 = (uint64_t *)((char *)&v108 - v19);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (uint64_t *)((char *)&v108 - v21);
  v23 = MEMORY[0x1E0C80A78](v20);
  v121 = (uint64_t *)((char *)&v108 - v24);
  v25 = MEMORY[0x1E0C80A78](v23);
  v118 = (uint64_t *)((char *)&v108 - v26);
  v27 = MEMORY[0x1E0C80A78](v25);
  v123 = (uint64_t)&v108 - v28;
  MEMORY[0x1E0C80A78](v27);
  v30 = (uint64_t *)((char *)&v108 - v29);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v32 = Strong;
    v109 = v17;
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v33 = sub_1CCB637FC();
    v34 = sub_1CCA16C20(v33, (uint64_t)qword_1EF9FF4C0);
    sub_1CCA0BEEC(a1, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v119 = v34;
    v35 = sub_1CCB637D8();
    v36 = sub_1CCB63D48();
    v37 = os_log_type_enabled(v35, v36);
    v116 = (_QWORD *)v32;
    v112 = a5;
    v113 = a4;
    v110 = v14;
    v111 = a6;
    v114 = v22;
    if (v37)
    {
      v38 = (uint8_t *)swift_slowAlloc();
      v39 = swift_slowAlloc();
      v125 = v39;
      *(_DWORD *)v38 = 136315138;
      v40 = a1;
      v41 = *v30;
      v42 = v30[1];
      swift_bridgeObjectRetain();
      v124 = sub_1CCA0CB60(v41, v42, &v125);
      sub_1CCB63E44();
      a1 = v40;
      swift_bridgeObjectRelease();
      sub_1CCA0BF30((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      _os_log_impl(&dword_1CC9BF000, v35, v36, "FMIPDeviceActionsController: received callback for monitored device: %s", v38, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v39, -1, -1);
      MEMORY[0x1D17B214C](v38, -1, -1);
    }
    else
    {
      sub_1CCA0BF30((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    }

    v43 = v123;
    sub_1CCA0BEEC(a1, v123, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v44 = sub_1CCB637D8();
    v45 = sub_1CCB63D48();
    v46 = os_log_type_enabled(v44, v45);
    v47 = v121;
    if (v46)
    {
      v48 = (uint8_t *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      v125 = v49;
      *(_DWORD *)v48 = 136315138;
      v50 = v43 + *(int *)(v122 + 112);
      v51 = v117;
      sub_1CC9EAB74(v50, v117, &qword_1ED8A7460);
      v52 = type metadata accessor for FMIPPlaySoundMetadata();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48))(v51, 1, v52) == 1)
      {
        sub_1CC9C3E84(v51, &qword_1ED8A7460);
        v53 = 0xE300000000000000;
        v54 = 7104878;
      }
      else
      {
        v54 = FMIPPlaySoundMetadata.debugDescription.getter();
        v53 = v55;
        sub_1CCA0BF30(v51, (uint64_t (*)(_QWORD))type metadata accessor for FMIPPlaySoundMetadata);
      }
      v124 = sub_1CCA0CB60(v54, v53, &v125);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA0BF30(v123, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      _os_log_impl(&dword_1CC9BF000, v44, v45, "FMIPDeviceActionsController: sound metadata %s", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v49, -1, -1);
      MEMORY[0x1D17B214C](v48, -1, -1);
    }
    else
    {
      sub_1CCA0BF30(v43, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    }

    v56 = v120;
    sub_1CC9EAB74(a1 + *(int *)(v122 + 112), (uint64_t)v120, &qword_1ED8A7460);
    v57 = type metadata accessor for FMIPPlaySoundMetadata();
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 48))(v56, 1, v57) == 1)
    {
      sub_1CC9C3E84((uint64_t)v56, &qword_1ED8A7460);
      v58 = v118;
      sub_1CCA0BEEC(a1, (uint64_t)v118, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v59 = sub_1CCB637D8();
      v60 = sub_1CCB63D48();
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc();
        v62 = swift_slowAlloc();
        v125 = v62;
        *(_DWORD *)v61 = 136315138;
        v63 = *v58;
        v64 = v58[1];
        swift_bridgeObjectRetain();
        v124 = sub_1CCA0CB60(v63, v64, &v125);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        sub_1CCA0BF30((uint64_t)v58, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        _os_log_impl(&dword_1CC9BF000, v59, v60, "FMIPDeviceActionsController: keeping monitored device alive: %s", v61, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v62, -1, -1);
        MEMORY[0x1D17B214C](v61, -1, -1);
      }
      else
      {
        sub_1CCA0BF30((uint64_t)v58, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      }

      goto LABEL_35;
    }
    LODWORD(v123) = *v56;
    sub_1CCA0BF30((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for FMIPPlaySoundMetadata);
    sub_1CCA0BEEC(a1, (uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v65 = sub_1CCB637D8();
    v66 = sub_1CCB63D48();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = swift_slowAlloc();
      v68 = swift_slowAlloc();
      v125 = v68;
      *(_DWORD *)v67 = 136315394;
      LOBYTE(v124) = v123;
      FMIPActionStatus.description.getter();
      v124 = sub_1CCA0CB60(v69, v70, &v125);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 12) = 2080;
      v71 = (uint64_t)v47;
      v72 = *v47;
      v73 = v47[1];
      swift_bridgeObjectRetain();
      v124 = sub_1CCA0CB60(v72, v73, &v125);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA0BF30(v71, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      _os_log_impl(&dword_1CC9BF000, v65, v66, "FMIPDeviceActionsController: evaluating status: %s\ndevice: %s", (uint8_t *)v67, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v68, -1, -1);
      MEMORY[0x1D17B214C](v67, -1, -1);
    }
    else
    {
      sub_1CCA0BF30((uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    }

    v74 = v114;
    if (((1 << v123) & 0xBE8) != 0)
    {
      sub_1CCA0BEEC(a1, (uint64_t)v114, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v84 = sub_1CCB637D8();
      v85 = sub_1CCB63D48();
      if (os_log_type_enabled(v84, v85))
      {
        v86 = swift_slowAlloc();
        v87 = swift_slowAlloc();
        v125 = v87;
        *(_DWORD *)v86 = 136315394;
        LOBYTE(v124) = v123;
        v122 = a1;
        FMIPActionStatus.description.getter();
        v124 = sub_1CCA0CB60(v88, v89, &v125);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        *(_WORD *)(v86 + 12) = 2080;
        v90 = *v74;
        v91 = v74[1];
        swift_bridgeObjectRetain();
        v124 = sub_1CCA0CB60(v90, v91, &v125);
        a1 = v122;
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        sub_1CCA0BF30((uint64_t)v74, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        _os_log_impl(&dword_1CC9BF000, v84, v85, "FMIPDeviceActionsController: monitoring condition met for status:\n%s device: %s", (uint8_t *)v86, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v87, -1, -1);
        MEMORY[0x1D17B214C](v86, -1, -1);
      }
      else
      {
        sub_1CCA0BF30((uint64_t)v74, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      }

      v102 = v110;
      v101 = v111;
      v103 = v116;
      goto LABEL_34;
    }
    if (((1 << v123) & 0x3E004) != 0)
    {
      v75 = v115;
      sub_1CCA0BEEC(a1, (uint64_t)v115, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v76 = sub_1CCB637D8();
      v77 = sub_1CCB63D48();
      if (os_log_type_enabled(v76, v77))
      {
        v78 = (uint8_t *)swift_slowAlloc();
        v79 = swift_slowAlloc();
        v125 = v79;
        *(_DWORD *)v78 = 136315138;
        v80 = a1;
        v81 = *v75;
        v82 = v75[1];
        swift_bridgeObjectRetain();
        v83 = v81;
        a1 = v80;
        v124 = sub_1CCA0CB60(v83, v82, &v125);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        sub_1CCA0BF30((uint64_t)v75, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        _os_log_impl(&dword_1CC9BF000, v76, v77, "FMIPDeviceActionsController: monitoring complete, action successful for device:\n%s", v78, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v79, -1, -1);
        MEMORY[0x1D17B214C](v78, -1, -1);
      }
      else
      {
        sub_1CCA0BF30((uint64_t)v75, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      }

      v103 = v116;
      v102 = v110;
      v101 = v111;
LABEL_34:
      v104 = v103[9];
      v105 = v103[10];
      sub_1CCA04DDC(v103 + 6, v104);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 80))(a1, v104, v105);
      LOBYTE(v125) = v123;
      sub_1CCA14E90(&qword_1ED8A7FB0);
      v106 = (*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
      v107 = swift_allocObject();
      *(_OWORD *)(v107 + 16) = xmmword_1CCB677E0;
      sub_1CCA0BEEC(a1, v107 + v106, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v113(&v125, v107, 0, v101);
      swift_bridgeObjectRelease();
LABEL_35:
      swift_release();
      return;
    }
    v92 = v109;
    sub_1CCA0BEEC(a1, (uint64_t)v109, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v93 = sub_1CCB637D8();
    v94 = sub_1CCB63D48();
    if (os_log_type_enabled(v93, v94))
    {
      v95 = swift_slowAlloc();
      v96 = swift_slowAlloc();
      v125 = v96;
      *(_DWORD *)v95 = 136446466;
      LOBYTE(v124) = v123;
      FMIPActionStatus.description.getter();
      v124 = sub_1CCA0CB60(v97, v98, &v125);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      *(_WORD *)(v95 + 12) = 2080;
      v99 = *v92;
      v100 = v92[1];
      swift_bridgeObjectRetain();
      v124 = sub_1CCA0CB60(v99, v100, &v125);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCA0BF30((uint64_t)v92, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      _os_log_impl(&dword_1CC9BF000, v93, v94, "FMIPDeviceActionsController: keeping monitored device status is not met %{public}s for:\n%s", (uint8_t *)v95, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v96, -1, -1);
      MEMORY[0x1D17B214C](v95, -1, -1);
      swift_release();
    }
    else
    {
      swift_release();
      sub_1CCA0BF30((uint64_t)v92, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    }

  }
}

uint64_t sub_1CCA4C880(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  os_log_t v38;
  os_log_t v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  id v56;
  _QWORD *v57;
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  id v72;
  id v73;
  uint64_t v75;
  os_log_t v76;
  os_log_t v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  void (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v6 = v5;
  v85 = a4;
  v86 = a5;
  v10 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCB63604();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x1E0C80A78](v13);
  v83 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v75 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v75 - v20;
  v84 = a1;
  if ((a2 & 1) != 0)
  {
    LODWORD(v79) = a3;
    if ((a3 & 1) != 0)
      v22 = 4;
    else
      v22 = 0;
    v23 = (void *)objc_opt_self();
    v24 = (void *)sub_1CCB635D4();
    v25 = objc_msgSend(v23, sel_playSoundWithBeaconUUID_withContext_, v24, v22);

    v26 = qword_1EF9DEF70;
    v27 = v25;
    if (v26 != -1)
      swift_once();
    v28 = sub_1CCB637FC();
    sub_1CCA16C20(v28, (uint64_t)qword_1EF9FF4C0);
    v81 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v81(v21, a1, v13);
    v29 = v27;
    v30 = sub_1CCB637D8();
    v31 = sub_1CCB63D48();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc();
      v80 = v12;
      v33 = v32;
      v77 = (os_log_t)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v78 = (_QWORD *)v34;
      *(_DWORD *)v33 = 141558787;
      v87 = 1752392040;
      v88 = v34;
      v82 = v6;
      sub_1CCB63E44();
      *(_WORD *)(v33 + 12) = 2081;
      v76 = v30;
      sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v35 = sub_1CCB64240();
      v87 = sub_1CCA0CB60(v35, v36, &v88);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
      *(_WORD *)(v33 + 22) = 1024;
      LODWORD(v87) = v79 & 1;
      sub_1CCB63E44();
      *(_WORD *)(v33 + 28) = 2112;
      v87 = (uint64_t)v29;
      v37 = v29;
      v6 = v82;
      sub_1CCB63E44();
      v38 = v77;
      v77->isa = (Class)v29;

      v39 = v76;
      _os_log_impl(&dword_1CC9BF000, v76, v31, "FMIPDeviceActionsController: Offline play sound %{private,mask.hash}s queueConfirmed: %{BOOL}d command %@.", (uint8_t *)v33, 0x26u);
      sub_1CCA14E90(&qword_1ED8A8E00);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v38, -1, -1);
      v40 = v78;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v40, -1, -1);
      v41 = v33;
      v12 = v80;
      MEMORY[0x1D17B214C](v41, -1, -1);

      v29 = v37;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);

    }
    v61 = v14;
    v48 = v81;
  }
  else
  {
    v82 = v6;
    v42 = (void *)objc_opt_self();
    v43 = (void *)sub_1CCB635D4();
    v44 = objc_msgSend(v42, sel_stopSoundWithBeaconUUID_, v43);

    v45 = qword_1EF9DEF70;
    v46 = v44;
    if (v45 != -1)
      swift_once();
    v47 = sub_1CCB637FC();
    sub_1CCA16C20(v47, (uint64_t)qword_1EF9FF4C0);
    v48 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v48(v19, a1, v13);
    v29 = v46;
    v49 = sub_1CCB637D8();
    v50 = sub_1CCB63D48();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = swift_slowAlloc();
      v81 = v48;
      v52 = v51;
      v78 = (_QWORD *)swift_slowAlloc();
      v53 = swift_slowAlloc();
      v79 = v53;
      *(_DWORD *)v52 = 141558531;
      v87 = 1752392040;
      v88 = v53;
      v77 = v49;
      sub_1CCB63E44();
      *(_WORD *)(v52 + 12) = 2081;
      v80 = v12;
      sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v54 = sub_1CCB64240();
      v87 = sub_1CCA0CB60(v54, v55, &v88);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
      *(_WORD *)(v52 + 22) = 2112;
      v87 = (uint64_t)v29;
      v56 = v29;
      v12 = v80;
      sub_1CCB63E44();
      v57 = v78;
      *v78 = v29;

      v58 = v77;
      _os_log_impl(&dword_1CC9BF000, v77, v50, "FMIPDeviceActionsController: Offline stop sound %{private,mask.hash}s command %@.", (uint8_t *)v52, 0x20u);
      sub_1CCA14E90(&qword_1ED8A8E00);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v57, -1, -1);
      v59 = v79;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v59, -1, -1);
      v60 = v52;
      v48 = v81;
      MEMORY[0x1D17B214C](v60, -1, -1);

      v29 = v56;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);

    }
    v6 = v82;
    v61 = v14;
  }
  v62 = *(_QWORD *)(v6 + 168);
  v63 = sub_1CCB63C04();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v12, 1, 1, v63);
  v64 = *(void **)(v6 + 32);
  v65 = v83;
  v48(v83, v84, v13);
  v66 = (*(unsigned __int8 *)(v61 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
  v67 = (char *)swift_allocObject();
  v68 = v61;
  v69 = (uint64_t)v67;
  *((_QWORD *)v67 + 2) = 0;
  *((_QWORD *)v67 + 3) = 0;
  *((_QWORD *)v67 + 4) = v64;
  *((_QWORD *)v67 + 5) = v29;
  *((_QWORD *)v67 + 6) = v62;
  (*(void (**)(char *, char *, uint64_t))(v68 + 32))(&v67[v66], v65, v13);
  v70 = (_QWORD *)(v69 + ((v15 + v66 + 7) & 0xFFFFFFFFFFFFFFF8));
  v71 = v86;
  *v70 = v85;
  v70[1] = v71;
  v72 = v64;
  v73 = v29;
  swift_retain();
  swift_retain();
  sub_1CCA4D8AC((uint64_t)v12, (uint64_t)&unk_1EF9E0388, v69);
  swift_release();

  return sub_1CC9C3E84((uint64_t)v12, (uint64_t *)&unk_1ED8A8DC8);
}

uint64_t sub_1CCA4D01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v8[21] = a8;
  v8[22] = v12;
  v8[19] = a6;
  v8[20] = a7;
  v8[17] = a4;
  v8[18] = a5;
  v9 = sub_1CCB63604();
  v8[23] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[24] = v10;
  v8[25] = *(_QWORD *)(v10 + 64);
  v8[26] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CCA4D08C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 216) = objc_msgSend(*(id *)(v0 + 136), sel_executeCommand_, *(_QWORD *)(v0 + 144));
  return swift_task_switch();
}

uint64_t sub_1CCA4D0E0()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;

  v1 = *(void **)(v0 + 216);
  v2 = (_QWORD *)(*(_QWORD *)(v0 + 152) + 112);
  swift_beginAccess();
  MEMORY[0x1D17B1078](v1);
  if (*(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1CCB63B68();
  sub_1CCB63BA4();
  sub_1CCB63B50();
  swift_endAccess();
  return swift_task_switch();
}

uint64_t sub_1CCA4D18C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void (*v25)(unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;

  v1 = v0[26];
  v3 = v0[24];
  v2 = v0[25];
  v4 = v0[23];
  v23 = v0[22];
  v24 = (void *)v0[27];
  v28 = v0[20];
  v29 = v0[21];
  v5 = (void *)v0[18];
  v22 = v0[19];
  v27 = *(void (**)(uint64_t))(v3 + 16);
  v27(v1);
  v26 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = (v2 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v5;
  v25 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  v9 = v1;
  v25(v8 + v26, v1, v4);
  v10 = (_QWORD *)(v8 + v6);
  *v10 = v29;
  v10[1] = v23;
  *(_QWORD *)(v8 + v7) = v22;
  *(_QWORD *)(v8 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)) = v24;
  v0[6] = sub_1CCA563C8;
  v0[7] = v8;
  v0[2] = MEMORY[0x1E0C809B0];
  v0[3] = 1107296256;
  v0[4] = sub_1CC9C32FC;
  v0[5] = &unk_1E88F1D50;
  v11 = _Block_copy(v0 + 2);
  v12 = v24;
  v13 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  v14 = objc_msgSend(v12, sel_addFailureBlock_, v11);
  _Block_release(v11);

  ((void (*)(uint64_t, uint64_t, uint64_t))v27)(v9, v28, v4);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v13;
  v25(v15 + v26, v9, v4);
  v16 = (_QWORD *)(v15 + v6);
  *v16 = v29;
  v16[1] = v23;
  *(_QWORD *)(v15 + v7) = v22;
  *(_QWORD *)(v15 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)) = v12;
  v0[12] = sub_1CCA56494;
  v0[13] = v15;
  v0[8] = MEMORY[0x1E0C809B0];
  v0[9] = 1107296256;
  v0[10] = sub_1CC9C32FC;
  v0[11] = &unk_1E88F1DA0;
  v17 = _Block_copy(v0 + 8);
  v18 = v12;
  v19 = v13;
  swift_retain();
  swift_retain();
  swift_release();
  v20 = objc_msgSend(v18, sel_addSuccessBlock_, v17);
  _Block_release(v17);

  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1CCA4D444(void *a1, void *a2, uint64_t a3, void (*a4)(void *), uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  uint64_t v45;
  os_log_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void (*v52)(void *);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v52 = a4;
  v53 = a6;
  v51 = a5;
  v11 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v11);
  v54 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCB63604();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = qword_1EF9DEF70;
  v18 = a2;
  if (v17 != -1)
    swift_once();
  v19 = sub_1CCB637FC();
  sub_1CCA16C20(v19, (uint64_t)qword_1EF9FF4C0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a3, v13);
  v20 = a1;
  v21 = v18;
  v22 = a1;
  v23 = sub_1CCB637D8();
  v24 = sub_1CCB63D48();
  v25 = v24;
  if (os_log_type_enabled(v23, v24))
  {
    v26 = swift_slowAlloc();
    v50 = a7;
    v27 = v26;
    v28 = swift_slowAlloc();
    v48 = v14;
    v29 = (_QWORD *)v28;
    v49 = swift_slowAlloc();
    v55 = (uint64_t)v21;
    v56 = v49;
    *(_DWORD *)v27 = 138413059;
    v47 = v25;
    v30 = v21;
    v46 = v23;
    v31 = v30;
    sub_1CCB63E44();
    *v29 = v21;

    *(_WORD *)(v27 + 12) = 2082;
    v55 = (uint64_t)a1;
    v32 = a1;
    sub_1CCA14E90(&qword_1EF9DF470);
    v33 = sub_1CCB639AC();
    v55 = sub_1CCA0CB60(v33, v34, &v56);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    *(_WORD *)(v27 + 22) = 2160;
    v55 = 1752392040;
    sub_1CCB63E44();
    *(_WORD *)(v27 + 32) = 2081;
    sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v35 = sub_1CCB64240();
    v55 = sub_1CCA0CB60(v35, v36, &v56);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v16, v13);
    v37 = v46;
    _os_log_impl(&dword_1CC9BF000, v46, (os_log_type_t)v47, "FMIPDeviceActionsController: Offline sound command %@ failed %{public}s %{private,mask.hash}s.", (uint8_t *)v27, 0x2Au);
    sub_1CCA14E90(&qword_1ED8A8E00);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v29, -1, -1);
    v38 = v49;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v38, -1, -1);
    v39 = v27;
    a7 = v50;
    MEMORY[0x1D17B214C](v39, -1, -1);

  }
  else
  {

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  v52(a1);
  v40 = sub_1CCB63C04();
  v41 = (uint64_t)v54;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v54, 1, 1, v40);
  v42 = (_QWORD *)swift_allocObject();
  v42[2] = 0;
  v42[3] = 0;
  v42[4] = v53;
  v42[5] = a7;
  swift_retain();
  v43 = a7;
  sub_1CCA4D8AC(v41, (uint64_t)&unk_1EF9E03A8, (uint64_t)v42);
  swift_release();
  return sub_1CC9C3E84(v41, (uint64_t *)&unk_1ED8A8DC8);
}

uint64_t sub_1CCA4D894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 64) = a4;
  *(_QWORD *)(v5 + 72) = a5;
  return swift_task_switch();
}

uint64_t sub_1CCA4D8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v6 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CC9EAB74(a1, (uint64_t)v8, (uint64_t *)&unk_1ED8A8DC8);
  v9 = sub_1CCB63C04();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1CC9C3E84((uint64_t)v8, (uint64_t *)&unk_1ED8A8DC8);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v11 = sub_1CCB63BE0();
      v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_1CCB63BF8();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v11 = 0;
  v13 = 0;
LABEL_6:
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t sub_1CCA4DA44(uint64_t a1, void *a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  os_log_t v36;
  int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void (*v41)(_QWORD);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v41 = a4;
  v42 = a6;
  v40 = a5;
  v10 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v10);
  v43 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63604();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = qword_1EF9DEF70;
  v17 = a2;
  if (v16 != -1)
    swift_once();
  v18 = sub_1CCB637FC();
  sub_1CCA16C20(v18, (uint64_t)qword_1EF9FF4C0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  v19 = v17;
  v20 = sub_1CCB637D8();
  v21 = sub_1CCB63D48();
  v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    v23 = swift_slowAlloc();
    v39 = a7;
    v24 = v23;
    v25 = (_QWORD *)swift_slowAlloc();
    v38 = swift_slowAlloc();
    v44 = (uint64_t)v19;
    v45 = v38;
    *(_DWORD *)v24 = 138412803;
    v37 = v22;
    v36 = v20;
    v26 = v19;
    sub_1CCB63E44();
    *v25 = v19;

    *(_WORD *)(v24 + 12) = 2160;
    v44 = 1752392040;
    sub_1CCB63E44();
    *(_WORD *)(v24 + 22) = 2081;
    sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v27 = sub_1CCB64240();
    v44 = sub_1CCA0CB60(v27, v28, &v45);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v20 = v36;
    _os_log_impl(&dword_1CC9BF000, v36, (os_log_type_t)v37, "FMIPDeviceActionsController: Offline sound command %@ succeeded for %{private,mask.hash}s", (uint8_t *)v24, 0x20u);
    sub_1CCA14E90(&qword_1ED8A8E00);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v25, -1, -1);
    v29 = v38;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v29, -1, -1);
    v30 = v24;
    a7 = v39;
    MEMORY[0x1D17B214C](v30, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }

  v41(0);
  v31 = sub_1CCB63C04();
  v32 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v43, 1, 1, v31);
  v33 = (_QWORD *)swift_allocObject();
  v33[2] = 0;
  v33[3] = 0;
  v33[4] = v42;
  v33[5] = a7;
  swift_retain();
  v34 = a7;
  sub_1CCA4D8AC(v32, (uint64_t)&unk_1EF9E0398, (uint64_t)v33);
  swift_release();
  return sub_1CC9C3E84(v32, (uint64_t *)&unk_1ED8A8DC8);
}

uint64_t sub_1CCA4DDF0(uint64_t a1, void (*a2)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, void *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  char v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  BOOL v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  BOOL v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t, void *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char v75;

  v73 = a3;
  v72 = a2;
  v4 = type metadata accessor for FMIPDevice();
  MEMORY[0x1E0C80A78](v4);
  v67 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMIPItem();
  v70 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v74 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v65 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v65 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v65 - v15;
  v17 = sub_1CCA14E90((uint64_t *)&unk_1EF9DF580);
  MEMORY[0x1E0C80A78](v17);
  v68 = (uint64_t)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1CCA14E90(&qword_1ED8A8C30);
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v65 - v23;
  v71 = a1;
  v25 = *(int *)(v4 + 128);
  v66 = a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device;
  v26 = a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + v25;
  sub_1CC9EAB74(v26, (uint64_t)&v65 - v23, &qword_1ED8A8C30);
  v27 = type metadata accessor for FMIPItemGroup();
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48);
  if (v28(v24, 1, v27) == 1)
  {
    sub_1CC9C3E84((uint64_t)v24, &qword_1ED8A8C30);
  }
  else
  {
    v29 = FMIPItemGroup.shouldDisplaySeparatedLocation.getter();
    sub_1CCA0BF30((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    if ((v29 & 1) != 0)
    {
      if (qword_1EF9DEF70 != -1)
        swift_once();
      v30 = sub_1CCB637FC();
      sub_1CCA16C20(v30, (uint64_t)qword_1EF9FF4C0);
      v31 = sub_1CCB637D8();
      v32 = sub_1CCB63D48();
      if (!os_log_type_enabled(v31, v32))
        goto LABEL_41;
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      v34 = "FMIPDeviceActionsController: Perform Siri play sound-- classic sound on buds";
      goto LABEL_40;
    }
  }
  sub_1CC9EAB74(v26, (uint64_t)v22, &qword_1ED8A8C30);
  if (v28(v22, 1, v27) == 1)
  {
    sub_1CC9C3E84((uint64_t)v22, &qword_1ED8A8C30);
    v35 = v68;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v68, 1, 1, v6);
LABEL_36:
    sub_1CC9C3E84(v35, (uint64_t *)&unk_1EF9DF580);
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v54 = sub_1CCB637FC();
    sub_1CCA16C20(v54, (uint64_t)qword_1EF9FF4C0);
    v31 = sub_1CCB637D8();
    v32 = sub_1CCB63D48();
    if (!os_log_type_enabled(v31, v32))
      goto LABEL_41;
    v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v33 = 0;
    v34 = "FMIPDeviceActionsController: Perform Siri play sound no primary part-- play classic sound on buds";
LABEL_40:
    _os_log_impl(&dword_1CC9BF000, v31, v32, v34, v33, 2u);
    MEMORY[0x1D17B214C](v33, -1, -1);
LABEL_41:

    return sub_1CCA4AC70(v71, (uint64_t)v72, v73);
  }
  v36 = *((_QWORD *)v22 + 5);
  swift_bridgeObjectRetain();
  sub_1CCA0BF30((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  v37 = *(_QWORD *)(v36 + 16);
  if (v37)
  {
    v38 = v36 + ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80));
    v69 = *(_QWORD *)(v70 + 72);
    v65 = v36;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1CCA0BEEC(v38, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v39 = &v16[*(int *)(v6 + 64)];
      v40 = *((_QWORD *)v39 + 1);
      v41 = v39[32];
      sub_1CCA0BEEC((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if (v40)
      {
        sub_1CCA0BF30((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        __asm { BR              X8 }
      }
      v42 = &v14[*(int *)(v6 + 56)];
      v43 = *(_QWORD *)v42 == 1702060355 && *((_QWORD *)v42 + 1) == 0xE400000000000000;
      if (v43 || (sub_1CCB642A0() & 1) != 0)
      {
        sub_1CCA0BF30((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        swift_bridgeObjectRelease();
        sub_1CCA0BEEC((uint64_t)v16, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        goto LABEL_33;
      }
      sub_1CCA0BF30((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v44 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      sub_1CCA0BEEC((uint64_t)v16, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if ((v44 & 1) != 0)
        goto LABEL_33;
      v45 = &v11[*(int *)(v6 + 64)];
      v46 = *((_QWORD *)v45 + 1);
      v47 = v45[32];
      v48 = v74;
      sub_1CCA0BEEC((uint64_t)v11, v74, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if (v46)
      {
        sub_1CCA0BF30(v48, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        __asm { BR              X8 }
      }
      v49 = (_QWORD *)(v48 + *(int *)(v6 + 56));
      v50 = *v49 == 1702060355 && v49[1] == 0xE400000000000000;
      if (!v50 && (sub_1CCB642A0() & 1) == 0)
        break;
      sub_1CCA0BF30(v48, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v51 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if ((v51 & 1) != 0)
        goto LABEL_34;
      sub_1CCA0BF30((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v38 += v69;
      if (!--v37)
      {
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
    }
    sub_1CCA0BF30(v48, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    swift_bridgeObjectRelease();
LABEL_33:
    sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_34:
    swift_bridgeObjectRelease();
    v35 = v68;
    sub_1CC9FED60((uint64_t)v16, v68, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v52 = 0;
  }
  else
  {
LABEL_30:
    v52 = 1;
    v35 = v68;
  }
  v53 = v70;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v35, v52, 1, v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v35, 1, v6) == 1)
    goto LABEL_36;
  sub_1CC9C3E84(v35, (uint64_t *)&unk_1EF9DF580);
  v56 = v67;
  sub_1CCA0BEEC(v66, v67, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v57 = *(_BYTE *)(v71 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_safetyWarningConfirmed);
  v58 = *(_BYTE *)(v71 + OBJC_IVAR____TtC8FMIPCore25FMIPPlaySoundDeviceAction_soundQueueingConfirmed);
  v75 = 2;
  type metadata accessor for FMIPPlaySoundDeviceAction(0);
  v59 = swift_allocObject();
  v60 = sub_1CCA62998(v56, (uint64_t)&unk_1E88EC4B0, v57, v58, &v75, v59);
  swift_release();
  if (qword_1EF9DEF70 != -1)
    swift_once();
  v61 = sub_1CCB637FC();
  sub_1CCA16C20(v61, (uint64_t)qword_1EF9FF4C0);
  v62 = sub_1CCB637D8();
  v63 = sub_1CCB63D48();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v64 = 0;
    _os_log_impl(&dword_1CC9BF000, v62, v63, "FMIPDeviceActionsController: Perform Siri play sound-- ble sound method to primary part", v64, 2u);
    MEMORY[0x1D17B214C](v64, -1, -1);
  }

  sub_1CCA423C4(v60, v72, v73);
  return swift_release();
}

uint64_t sub_1CCA4E6F8(uint64_t a1, void (*a2)(char *, uint64_t, void *, uint64_t), uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void (*v22)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;

  v4 = v3;
  v8 = a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device;
  v9 = sub_1CCA560A0(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  if (v10)
  {
    sub_1CCA50D98(a1, v9, v10, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for FMIPLostModeRequest();
    *(_QWORD *)(swift_allocObject() + qword_1EF9FF760) = a1;
    v12 = (*(_QWORD *)(v8 + 216) & 0x80) == 0;
    if ((*(_QWORD *)(v8 + 216) & 0x80) != 0)
      v13 = 0xD000000000000018;
    else
      v13 = 0x6976654474736F6CLL;
    if (v12)
      v14 = 0xEA00000000006563;
    else
      v14 = 0x80000001CCB796F0;
    v15 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
    v16 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    v17 = sub_1CCA601C8(v13, v14, v15, v16, 1);
    v18 = v4 + 6;
    v20 = v4[9];
    v19 = v4[10];
    sub_1CCA04DDC(v18, v20);
    v21 = (_QWORD *)swift_allocObject();
    v21[2] = a2;
    v21[3] = a3;
    v21[4] = a1;
    v22 = *(void (**)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v23 = type metadata accessor for FMIPLostModeResponse();
    swift_retain();
    swift_retain();
    v22(v17, sub_1CCA56200, v21, v23, v20, v19);
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1CCA4E8CC(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t *, uint64_t, void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t *a6, const char *a7, void (*a8)(uint64_t *__return_ptr, uint64_t), const char *a9)
{
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8_t *v35;
  void *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (qword_1EF9DEF70 != -1)
    swift_once();
  v15 = sub_1CCB637FC();
  sub_1CCA16C20(v15, (uint64_t)qword_1EF9FF4C0);
  swift_retain_n();
  v16 = sub_1CCB637D8();
  v17 = sub_1CCB63D48();
  if (os_log_type_enabled(v16, v17))
  {
    v36 = a2;
    v18 = (uint8_t *)swift_slowAlloc();
    v38 = a5;
    v19 = swift_slowAlloc();
    v40 = v19;
    *(_DWORD *)v18 = 136315138;
    sub_1CCA14E90(a6);
    v20 = sub_1CCB63E20();
    sub_1CCA0CB60(v20, v21, &v40);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v16, v17, a7, v18, 0xCu);
    swift_arrayDestroy();
    v22 = v19;
    a5 = v38;
    MEMORY[0x1D17B214C](v22, -1, -1);
    v23 = v18;
    a2 = v36;
    MEMORY[0x1D17B214C](v23, -1, -1);

    if (v36)
      goto LABEL_9;
  }
  else
  {

    swift_release_n();
    if (a2)
      goto LABEL_9;
  }
  if (a1)
  {
    v24 = swift_retain();
    a8(&v40, v24);
    v25 = *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    a3(&v40, v25, 0, a5);
    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_9:
  v27 = a2;
  v28 = a2;
  v29 = sub_1CCB637D8();
  v30 = sub_1CCB63D48();
  if (os_log_type_enabled(v29, v30))
  {
    v39 = a5;
    v31 = (uint8_t *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    v40 = v32;
    *(_DWORD *)v31 = 136315138;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v33 = sub_1CCB63E20();
    sub_1CCA0CB60(v33, v34, &v40);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v29, v30, a9, v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v32, -1, -1);
    v35 = v31;
    a5 = v39;
    MEMORY[0x1D17B214C](v35, -1, -1);
  }
  else
  {

  }
  LOBYTE(v40) = 0;
  return a3(&v40, 0, a2, a5);
}

void sub_1CCA4EC84(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  void (*v16)(_QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  uint64_t aBlock[7];

  v7 = (_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 56);
  if (v8)
  {
    v9 = v7[6];
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore28FMIPShowContactDetailsAction_enabled) == 1)
    {
      v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore28FMIPShowContactDetailsAction_phoneNumber + 8);
      swift_bridgeObjectRetain();
    }
    else
    {
      v10 = 0;
    }
    v20 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v21 = objc_msgSend(v20, sel_sharedInstance);
    if (v10)
    {
      v22 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = 0;
    }
    v23 = (void *)sub_1CCB63964();
    v24 = (_QWORD *)swift_allocObject();
    v24[2] = a2;
    v24[3] = a3;
    v24[4] = a1;
    v24[5] = v3;
    v24[6] = v9;
    v24[7] = v8;
    aBlock[4] = (uint64_t)sub_1CCA55E08;
    aBlock[5] = (uint64_t)v24;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CCA1F54C;
    aBlock[3] = (uint64_t)&unk_1E88F1C38;
    v25 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v21, sel_setPhoneNumber_toAccessoryWithDiscoveryId_completion_, v22, v23, v25);
    _Block_release(v25);

  }
  else
  {
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v11 = sub_1CCB637FC();
    sub_1CCA16C20(v11, (uint64_t)qword_1EF9FF4C0);
    swift_retain();
    v12 = sub_1CCB637D8();
    v13 = sub_1CCB63D48();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      *(_DWORD *)v14 = 136315138;
      aBlock[0] = v15;
      v16 = a2;
      v18 = v7[8];
      v17 = v7[9];
      swift_bridgeObjectRetain();
      v19 = v18;
      a2 = v16;
      aBlock[6] = sub_1CCA0CB60(v19, v17, aBlock);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1CC9BF000, v12, v13, "unable to get discover id for device %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v15, -1, -1);
      MEMORY[0x1D17B214C](v14, -1, -1);
    }
    else
    {
      swift_release();
    }

    LOBYTE(aBlock[0]) = 0;
    a2(aBlock, 0, 0, a1);
  }
}

uint64_t sub_1CCA4EFD4(uint64_t a1, uint64_t (*a2)(char *, _QWORD, uint64_t, uint64_t), uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void (*v29)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;

  if (a1)
  {
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v11 = sub_1CCB637FC();
    sub_1CCA16C20(v11, (uint64_t)qword_1EF9FF4C0);
    v12 = sub_1CCB637D8();
    v13 = sub_1CCB63D48();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1CC9BF000, v12, v13, "unable to set contact details in accessory", v14, 2u);
      MEMORY[0x1D17B214C](v14, -1, -1);
    }

    v31 = 0;
    return a2(&v31, 0, a1, a4);
  }
  else
  {
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v19 = sub_1CCB637FC();
    sub_1CCA16C20(v19, (uint64_t)qword_1EF9FF4C0);
    v20 = sub_1CCB637D8();
    v21 = sub_1CCB63D48();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1CC9BF000, v20, v21, "added contact detlail to accessory", v22, 2u);
      MEMORY[0x1D17B214C](v22, -1, -1);
    }

    v23 = (_QWORD *)swift_allocObject();
    v23[2] = a4;
    v23[3] = a6;
    v23[4] = a7;
    v23[5] = a2;
    v23[6] = a3;
    type metadata accessor for FMIPSavePreferencesRequest();
    *(_QWORD *)(swift_allocObject() + qword_1EF9FF600) = a4;
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    v24 = sub_1CCA601C8(0x6665725065766173, 0xE800000000000000, 0, 0, 1);
    v25 = a5 + 6;
    v26 = a5[9];
    v27 = a5[10];
    sub_1CCA04DDC(v25, v26);
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = sub_1CCA55E5C;
    v28[3] = v23;
    v28[4] = a4;
    v29 = *(void (**)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t))(v27 + 56);
    v30 = type metadata accessor for FMIPSavePreferencesResponse();
    swift_retain();
    swift_retain();
    v29(v24, sub_1CCA55E8C, v28, v30, v26, v27);
    swift_release();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1CCA4F2E0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  int v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t (*v18)(_QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD aBlock[6];

  v11 = *a1;
  if (v11 != 2)
  {
    v18 = a8;
    if ((*(_BYTE *)(a5 + OBJC_IVAR____TtC8FMIPCore28FMIPShowContactDetailsAction_enabled) & 1) != 0)
    {
      v12 = 0;
    }
    else
    {
      v12 = *(_QWORD *)(a5 + OBJC_IVAR____TtC8FMIPCore28FMIPShowContactDetailsAction_phoneNumber + 8);
      swift_bridgeObjectRetain();
    }
    v13 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    if (v12)
    {
      v14 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
    }
    else
    {
      v14 = 0;
    }
    v15 = (void *)sub_1CCB63964();
    aBlock[4] = sub_1CCA4F46C;
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA1F54C;
    aBlock[3] = &unk_1E88F1CB0;
    v16 = _Block_copy(aBlock);
    objc_msgSend(v13, sel_setPhoneNumber_toAccessoryWithDiscoveryId_completion_, v14, v15, v16);
    _Block_release(v16);

    a8 = v18;
  }
  LOBYTE(aBlock[0]) = v11;
  return a8(aBlock, a2, a3, a5);
}

void sub_1CCA4F46C(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *oslog;
  uint64_t v11;

  if (qword_1EF9DEF70 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1EF9FF4C0);
  v3 = a1;
  v4 = a1;
  oslog = sub_1CCB637D8();
  v5 = sub_1CCB63D48();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v11 = v7;
    *(_DWORD *)v6 = 136315138;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v8 = sub_1CCB63E20();
    sub_1CCA0CB60(v8, v9, &v11);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, oslog, v5, "reset device completed with error %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v7, -1, -1);
    MEMORY[0x1D17B214C](v6, -1, -1);

  }
  else
  {

  }
}

void sub_1CCA4F63C(uint64_t a1, void (*a2)(uint64_t *, uint64_t, void *, uint64_t), uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_type))
  {
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_type) == 1)
    {
      type metadata accessor for FMIPSavePreferencesRequest();
      *(_QWORD *)(swift_allocObject() + qword_1EF9FF600) = a1;
      swift_retain();
      v7 = sub_1CCA601C8(0x6665725065766173, 0xE800000000000000, 0, 0, 1);
      v9 = v3[9];
      v8 = v3[10];
      sub_1CCA04DDC(v3 + 6, v9);
      v10 = (_QWORD *)swift_allocObject();
      v10[2] = a2;
      v10[3] = a3;
      v10[4] = a1;
      v11 = *(void (**)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v12 = type metadata accessor for FMIPSavePreferencesResponse();
      swift_retain();
      swift_retain();
      v11(v7, sub_1CCA55D9C, v10, v12, v9, v8);
      swift_release();
      swift_release();
    }
    else
    {
      sub_1CCA51AAC(a1, (uint64_t)a2, a3);
    }
  }
  else
  {
    sub_1CCA4FC48(a1, a2, a3);
  }
}

uint64_t sub_1CCA4F7C8(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t *, uint64_t, void *, uint64_t), uint64_t a4, uint64_t a5, const char *a6, const char *a7, char a8)
{
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  char v23;
  uint64_t v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v40;

  if (qword_1EF9DEF70 != -1)
    swift_once();
  v12 = sub_1CCB637FC();
  sub_1CCA16C20(v12, (uint64_t)qword_1EF9FF4C0);
  swift_retain_n();
  v13 = sub_1CCB637D8();
  v14 = sub_1CCB63D48();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v36 = a2;
    v16 = swift_slowAlloc();
    v40 = v16;
    *(_DWORD *)v15 = 136315138;
    sub_1CCA14E90(&qword_1EF9E0370);
    v17 = sub_1CCB63E20();
    sub_1CCA0CB60(v17, v18, &v40);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v13, v14, a6, v15, 0xCu);
    swift_arrayDestroy();
    v19 = v16;
    a2 = v36;
    MEMORY[0x1D17B214C](v19, -1, -1);
    MEMORY[0x1D17B214C](v15, -1, -1);

    if (v36)
      goto LABEL_14;
  }
  else
  {

    swift_release_n();
    if (a2)
    {
LABEL_14:
      v25 = a2;
      v26 = a2;
      v27 = sub_1CCB637D8();
      v28 = sub_1CCB63D48();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        v30 = swift_slowAlloc();
        v40 = v30;
        *(_DWORD *)v29 = 136315138;
        sub_1CCA14E90(&qword_1EF9DFCB8);
        v31 = sub_1CCB63E20();
        sub_1CCA0CB60(v31, v32, &v40);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1CC9BF000, v27, v28, a7, v29, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v30, -1, -1);
        MEMORY[0x1D17B214C](v29, -1, -1);
      }
      else
      {

      }
      LOBYTE(v40) = a8;
      return a3(&v40, 0, a2, a5);
    }
  }
  if (!a1)
    goto LABEL_14;
  swift_retain();
  v20 = sub_1CCB637D8();
  v21 = sub_1CCB63D48();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1CC9BF000, v20, v21, "FMIPDeviceActionsController: response success", v22, 2u);
    MEMORY[0x1D17B214C](v22, -1, -1);
  }

  FMIPActionStatus.init(rawValue:)(*(_QWORD *)(a1 + 48));
  v23 = v40;
  if (v40 == 18)
    v23 = 0;
  LOBYTE(v40) = v23;
  if (*(_QWORD *)(a1 + 56))
  {
    v24 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    sub_1CCA14E90(&qword_1ED8A7FB0);
    v34 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPDevice() - 8) + 80);
    v35 = (v34 + 32) & ~v34;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(a5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, v24 + v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  }
  swift_bridgeObjectRetain();
  a3(&v40, v24, 0, a5);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1CCA4FC48(uint64_t a1, void (*a2)(uint64_t *, uint64_t, void *, uint64_t), uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v4 = v3;
  v8 = a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device;
  if (*(_BYTE *)(v8 + *(int *)(type metadata accessor for FMIPDevice() + 132)) == 1)
    return sub_1CCA501A8(a1, 0, a2, a3);
  type metadata accessor for FMIPNotifyRequest();
  *(_QWORD *)(swift_allocObject() + qword_1EF9FF828) = a1;
  swift_retain();
  v10 = sub_1CCA601C8(0xD000000000000010, 0x80000001CCB796D0, 0, 0, 1);
  v11 = v4[9];
  v12 = v4[10];
  sub_1CCA04DDC(v4 + 6, v11);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a1;
  v13[5] = v4;
  v14 = *(void (**)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v15 = type metadata accessor for FMIPNotifyResponse();
  swift_retain();
  swift_retain();
  swift_retain();
  v14(v10, sub_1CCA55D8C, v13, v15, v11, v12);
  swift_release();
  return swift_release();
}

uint64_t sub_1CCA4FDC8(uint64_t a1, void *a2, void (*a3)(uint64_t *, uint64_t, void *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v30;

  if (qword_1EF9DEF70 != -1)
    swift_once();
  v8 = sub_1CCB637FC();
  sub_1CCA16C20(v8, (uint64_t)qword_1EF9FF4C0);
  swift_retain_n();
  v9 = sub_1CCB637D8();
  v10 = sub_1CCB63D48();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v27 = a5;
    v12 = swift_slowAlloc();
    v30 = v12;
    *(_DWORD *)v11 = 136315138;
    sub_1CCA14E90(&qword_1EF9E0368);
    v13 = sub_1CCB63E20();
    sub_1CCA0CB60(v13, v14, &v30);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1CC9BF000, v9, v10, "FMIPDeviceActionsController: notify action response received: %s", v11, 0xCu);
    swift_arrayDestroy();
    v15 = v12;
    a5 = v27;
    MEMORY[0x1D17B214C](v15, -1, -1);
    MEMORY[0x1D17B214C](v11, -1, -1);

    if (a2)
      goto LABEL_11;
  }
  else
  {
    swift_release_n();

    if (a2)
    {
LABEL_11:
      v17 = a2;
      v18 = a2;
      v19 = sub_1CCB637D8();
      v20 = sub_1CCB63D48();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc();
        v22 = swift_slowAlloc();
        v30 = v22;
        *(_DWORD *)v21 = 136315138;
        sub_1CCA14E90(&qword_1EF9DFCB8);
        v23 = sub_1CCB63E20();
        sub_1CCA0CB60(v23, v24, &v30);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1CC9BF000, v19, v20, "FMIPDeviceActionsController: error received for notify request: %s", v21, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v22, -1, -1);
        MEMORY[0x1D17B214C](v21, -1, -1);
      }
      else
      {

      }
      LOBYTE(v30) = 0;
      return ((uint64_t (*)(uint64_t *, _QWORD, void *, uint64_t))a3)(&v30, 0, a2, a5);
    }
  }
  if (!a1)
    goto LABEL_11;
  if (!*(_QWORD *)(a5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 24)
    || (*(_BYTE *)(a5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 216) & 0x80) != 0)
  {
    FMIPActionStatus.init(rawValue:)(*(_QWORD *)(a1 + 48));
    v25 = v30;
    if (v30 == 18)
      v25 = 0;
    LOBYTE(v30) = v25;
    v26 = *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    swift_retain();
    a3(&v30, v26, 0, a5);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    sub_1CCA501A8(a5, a1, a3, a4);
    return swift_release();
  }
}

uint64_t sub_1CCA501A8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *, uint64_t, void *, uint64_t), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  void *v42;
  void *v43;
  char **v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  void (*v51)(uint64_t *, uint64_t, void *, uint64_t);
  id v52;
  id v53;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  _BYTE *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(uint64_t *, uint64_t, void *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v66 = a4;
  v63 = a2;
  v64 = a3;
  v5 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v5);
  v62 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1ED8A8EF8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v59 - v11;
  v13 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for FMIPItemGroup();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1CCB63604();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v60 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = a1;
  v23 = a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device;
  v59 = type metadata accessor for FMIPDevice();
  sub_1CC9EAB74(v23 + *(int *)(v59 + 128), (uint64_t)v15, &qword_1ED8A8C30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    v24 = &qword_1ED8A8C30;
    v25 = (uint64_t)v15;
  }
  else
  {
    sub_1CC9FED60((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    swift_bridgeObjectRetain();
    sub_1CCB635BC();
    swift_bridgeObjectRelease();
    sub_1CCA0BF30((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v12, 1, v20) != 1)
      goto LABEL_19;
    v24 = &qword_1ED8A8EF8;
    v25 = (uint64_t)v12;
  }
  sub_1CC9C3E84(v25, v24);
  if (!*(_QWORD *)(v23 + 24))
    goto LABEL_8;
  sub_1CCB635BC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v10, 1, v20) == 1)
  {
    sub_1CC9C3E84((uint64_t)v10, &qword_1ED8A8EF8);
LABEL_8:
    v26 = v23;
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v27 = sub_1CCB637FC();
    sub_1CCA16C20(v27, (uint64_t)qword_1EF9FF4C0);
    v28 = v65;
    swift_retain_n();
    v29 = sub_1CCB637D8();
    v30 = sub_1CCB63D30();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      v68 = v32;
      *(_DWORD *)v31 = 136315138;
      swift_retain();
      v33 = sub_1CCA5AEA8();
      v35 = v34;
      swift_release();
      v67 = sub_1CCA0CB60(v33, v35, &v68);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1CC9BF000, v29, v30, "Missing baUUID for %s", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v32, -1, -1);
      MEMORY[0x1D17B214C](v31, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v36 = v63;
    if (v63)
    {
      FMIPActionStatus.init(rawValue:)(*(_QWORD *)(v63 + 48));
      v37 = v68;
      if (v68 == 18)
        v37 = 0;
      LOBYTE(v68) = v37;
      v38 = *(_QWORD *)(v36 + 56);
      if (v38)
      {
        swift_bridgeObjectRetain();
LABEL_24:
        sub_1CCA5589C();
        v57 = (void *)swift_allocError();
        *v58 = 6;
        v64(&v68, v38, v57, v28);

        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      LOBYTE(v68) = 0;
    }
    sub_1CCA14E90(&qword_1ED8A7FB0);
    v55 = *(unsigned __int8 *)(*(_QWORD *)(v59 - 8) + 80);
    v56 = (v55 + 32) & ~v55;
    v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(v26, v38 + v56, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  v12 = v10;
LABEL_19:
  v39 = v60;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v60, v12, v20);
  v40 = v65;
  v41 = *(unsigned __int8 *)(v65 + OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_enabled);
  v42 = (void *)objc_opt_self();
  v43 = (void *)sub_1CCB635D4();
  v44 = &selRef_enableNotifyWhenFound_;
  if (!v41)
    v44 = &selRef_disableNotifyWhenFound_;
  v45 = objc_msgSend(v42, *v44, v43);

  v46 = sub_1CCB63C04();
  v47 = (uint64_t)v62;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v62, 1, 1, v46);
  v48 = *(_QWORD *)(v61 + 168);
  v49 = *(void **)(v61 + 32);
  v50 = (_QWORD *)swift_allocObject();
  v50[2] = 0;
  v50[3] = 0;
  v50[4] = v49;
  v50[5] = v45;
  v51 = v64;
  v50[6] = v48;
  v50[7] = v51;
  v50[8] = v66;
  v50[9] = v40;
  v50[10] = v63;
  swift_retain();
  swift_retain();
  swift_retain();
  v52 = v49;
  v53 = v45;
  swift_retain();
  sub_1CCA4D8AC(v47, (uint64_t)&unk_1EF9E0340, (uint64_t)v50);
  swift_release();

  sub_1CC9C3E84(v47, (uint64_t *)&unk_1ED8A8DC8);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v39, v20);
}

uint64_t sub_1CCA50810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v8[13] = v10;
  v8[14] = v11;
  v8[11] = a7;
  v8[12] = a8;
  v8[9] = a5;
  v8[10] = a6;
  v8[8] = a4;
  return swift_task_switch();
}

uint64_t sub_1CCA5083C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = objc_msgSend(*(id *)(v0 + 64), sel_executeCommand_, *(_QWORD *)(v0 + 72));
  return swift_task_switch();
}

uint64_t sub_1CCA50890()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;

  v1 = *(void **)(v0 + 120);
  v2 = (_QWORD *)(*(_QWORD *)(v0 + 80) + 112);
  swift_beginAccess();
  MEMORY[0x1D17B1078](v1);
  if (*(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1CCB63B68();
  sub_1CCB63BA4();
  sub_1CCB63B50();
  swift_endAccess();
  return swift_task_switch();
}

uint64_t sub_1CCA5093C()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  id v10;
  _QWORD *v11;
  void *v12;
  id v13;
  id v14;

  v1 = v0[14];
  v2 = (void *)v0[15];
  v4 = v0[12];
  v3 = v0[13];
  v5 = v0[10];
  v6 = v0[11];
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v6;
  v7[3] = v4;
  v7[4] = v3;
  v7[5] = v5;
  v7[6] = v2;
  v0[6] = sub_1CCA55C14;
  v0[7] = v7;
  v0[2] = MEMORY[0x1E0C809B0];
  v0[3] = 1107296256;
  v0[4] = sub_1CC9C32FC;
  v0[5] = &unk_1E88F1AF8;
  v8 = _Block_copy(v0 + 2);
  v9 = v2;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  v10 = objc_msgSend(v9, sel_addFailureBlock_, v8);
  _Block_release(v8);

  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v6;
  v11[3] = v4;
  v11[4] = v1;
  v11[5] = v3;
  v11[6] = v5;
  v11[7] = v9;
  v0[6] = sub_1CCA55CAC;
  v0[7] = v11;
  v0[2] = MEMORY[0x1E0C809B0];
  v0[3] = 1107296256;
  v0[4] = sub_1CC9C32FC;
  v0[5] = &unk_1E88F1B48;
  v12 = _Block_copy(v0 + 2);
  swift_retain();
  v13 = v9;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  v14 = objc_msgSend(v13, sel_addSuccessBlock_, v12);
  _Block_release(v12);

  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1CCA50B10(uint64_t a1, void (*a2)(char *, uint64_t, _QWORD, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  uint64_t v27;
  char v28;
  char v29;

  v12 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF9DEF70 != -1)
    swift_once();
  v15 = sub_1CCB637FC();
  sub_1CCA16C20(v15, (uint64_t)qword_1EF9FF4C0);
  v16 = sub_1CCB637D8();
  v17 = sub_1CCB63D48();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1CC9BF000, v16, v17, "FMIPDeviceActionsController: notify subscription succeeded", v18, 2u);
    MEMORY[0x1D17B214C](v18, -1, -1);
  }

  if (!a4)
  {
    v29 = 2;
LABEL_11:
    sub_1CCA14E90(&qword_1ED8A7FB0);
    v21 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPDevice() - 8) + 80);
    v22 = (v21 + 32) & ~v21;
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(a5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, v20 + v22, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  FMIPActionStatus.init(rawValue:)(*(_QWORD *)(a4 + 48));
  v19 = v28;
  if (v28 == 18)
    v19 = 0;
  v29 = v19;
  v20 = *(_QWORD *)(a4 + 56);
  if (!v20)
    goto LABEL_11;
  swift_bridgeObjectRetain();
LABEL_12:
  a2(&v29, v20, 0, a5);
  swift_bridgeObjectRelease();
  v23 = sub_1CCB63C04();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v14, 1, 1, v23);
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = 0;
  v24[3] = 0;
  v24[4] = a6;
  v24[5] = a7;
  swift_retain();
  v25 = a7;
  sub_1CCA4D8AC((uint64_t)v14, (uint64_t)&unk_1EF9E0350, (uint64_t)v24);
  swift_release();
  return sub_1CC9C3E84((uint64_t)v14, (uint64_t *)&unk_1ED8A8DC8);
}

uint64_t sub_1CCA50D98(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t, void *, uint64_t), uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _BYTE *v22;
  int v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  void (*v29)(char *, uint64_t, void *, uint64_t);
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, void *, uint64_t);
  char v46;

  v45 = a4;
  v8 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CCB63604();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCB635BC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1CC9C3E84((uint64_t)v13, &qword_1ED8A8EF8);
    v46 = 0;
    sub_1CCA14E90(&qword_1ED8A7FB0);
    v18 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPDevice() - 8) + 80);
    v19 = (v18 + 32) & ~v18;
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, v20 + v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA5589C();
    v21 = (void *)swift_allocError();
    *v22 = 6;
    v45(&v46, v20, v21, a1);

    return swift_bridgeObjectRelease();
  }
  else
  {
    v42 = v10;
    v43 = v5;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    v24 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isTrackingEnabled);
    v44 = a5;
    v41 = a1;
    if (v24 == 1)
    {
      v25 = sub_1CCB635D4();
      v30 = (uint64_t)v42;
      swift_bridgeObjectRetain();
      v31 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_phoneNumber + 8))
        v32 = (void *)sub_1CCB63964();
      else
        v32 = 0;
      if (*(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_email + 8))
        v27 = (void *)sub_1CCB63964();
      else
        v27 = 0;
      v33 = (void *)v25;
      v28 = objc_msgSend((id)objc_opt_self(), sel_enableLostModeForBeaconUUID_message_phoneNumber_email_, v25, v31, v32, v27);

      v29 = v45;
    }
    else
    {
      v26 = (void *)objc_opt_self();
      v27 = (void *)sub_1CCB635D4();
      v28 = objc_msgSend(v26, sel_disableLostModeForBeaconUUID_, v27);
      v29 = v45;
      v30 = (uint64_t)v42;
    }

    v34 = sub_1CCB63C04();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v30, 1, 1, v34);
    v35 = *(_QWORD *)(v43 + 168);
    v36 = *(void **)(v43 + 32);
    v37 = (_QWORD *)swift_allocObject();
    v37[2] = 0;
    v37[3] = 0;
    v37[4] = v36;
    v37[5] = v28;
    v37[6] = v35;
    v37[7] = v29;
    v38 = v41;
    v37[8] = v44;
    v37[9] = v38;
    swift_retain();
    v39 = v36;
    v40 = v28;
    swift_retain();
    swift_retain();
    sub_1CCA4D8AC(v30, (uint64_t)&unk_1EF9E0300, (uint64_t)v37);
    swift_release();

    sub_1CC9C3E84(v30, (uint64_t *)&unk_1ED8A8DC8);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
}

uint64_t sub_1CCA511D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[12] = a8;
  v8[13] = v10;
  v8[10] = a6;
  v8[11] = a7;
  v8[8] = a4;
  v8[9] = a5;
  return swift_task_switch();
}

uint64_t sub_1CCA51200()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = objc_msgSend(*(id *)(v0 + 64), sel_executeCommand_, *(_QWORD *)(v0 + 72));
  return swift_task_switch();
}

uint64_t sub_1CCA51254()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;

  v1 = *(void **)(v0 + 112);
  v2 = (_QWORD *)(*(_QWORD *)(v0 + 80) + 112);
  swift_beginAccess();
  MEMORY[0x1D17B1078](v1);
  if (*(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1CCB63B68();
  sub_1CCB63BA4();
  sub_1CCB63B50();
  swift_endAccess();
  return swift_task_switch();
}

uint64_t sub_1CCA51300()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  _QWORD *v11;
  void *v12;
  id v13;
  id v14;

  v1 = v0[13];
  v2 = (void *)v0[14];
  v4 = v0[11];
  v3 = v0[12];
  v5 = v0[10];
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v4;
  v6[3] = v3;
  v6[4] = v1;
  v6[5] = v5;
  v6[6] = v2;
  v0[6] = sub_1CCA55A08;
  v0[7] = v6;
  v7 = MEMORY[0x1E0C809B0];
  v0[2] = MEMORY[0x1E0C809B0];
  v0[3] = 1107296256;
  v0[4] = sub_1CC9C32FC;
  v0[5] = &unk_1E88F19E0;
  v8 = _Block_copy(v0 + 2);
  v9 = v2;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  v10 = objc_msgSend(v9, sel_addFailureBlock_, v8);
  _Block_release(v8);

  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v4;
  v11[3] = v3;
  v11[4] = v1;
  v11[5] = v5;
  v11[6] = v9;
  v0[6] = sub_1CCA55A28;
  v0[7] = v11;
  v0[2] = v7;
  v0[3] = 1107296256;
  v0[4] = sub_1CC9C32FC;
  v0[5] = &unk_1E88F1A30;
  v12 = _Block_copy(v0 + 2);
  v13 = v9;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  v14 = objc_msgSend(v13, sel_addSuccessBlock_, v12);
  _Block_release(v12);

  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1CCA514C4(void *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5, void *a6, const char *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  _QWORD v34[2];
  void (*v35)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v39 = a7;
  v40 = a4;
  v15 = a9;
  v16 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF9DEF70 != -1)
    swift_once();
  v19 = sub_1CCB637FC();
  sub_1CCA16C20(v19, (uint64_t)qword_1EF9FF4C0);
  v20 = a1;
  v21 = a1;
  v22 = sub_1CCB637D8();
  v23 = sub_1CCB63D48();
  if (os_log_type_enabled(v22, v23))
  {
    v36 = a8;
    v24 = swift_slowAlloc();
    v35 = a2;
    v25 = (uint8_t *)v24;
    v26 = swift_slowAlloc();
    v37 = a5;
    v27 = v26;
    v38 = a9;
    *(_DWORD *)v25 = 136315138;
    v34[1] = a3;
    v41 = a1;
    v42 = 0;
    v43 = 0xE000000000000000;
    v44 = v26;
    sub_1CCA14E90(&qword_1EF9DF470);
    sub_1CCB64060();
    v42 = sub_1CCA0CB60(v42, v43, &v44);
    v15 = v38;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v22, v23, v39, v25, 0xCu);
    swift_arrayDestroy();
    v28 = v27;
    a5 = v37;
    MEMORY[0x1D17B214C](v28, -1, -1);
    v29 = v25;
    a2 = v35;
    MEMORY[0x1D17B214C](v29, -1, -1);
  }
  else
  {

  }
  LOBYTE(v42) = 0;
  a2(&v42, 0, a1, v40);
  v30 = sub_1CCB63C04();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v18, 1, 1, v30);
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = 0;
  v31[3] = 0;
  v31[4] = a5;
  v31[5] = a6;
  swift_retain();
  v32 = a6;
  sub_1CCA4D8AC((uint64_t)v18, v15, (uint64_t)v31);
  swift_release();
  return sub_1CC9C3E84((uint64_t)v18, (uint64_t *)&unk_1ED8A8DC8);
}

uint64_t sub_1CCA517A4(uint64_t a1, void (*a2)(char *, uint64_t, _QWORD, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t v24;
  char v25;

  v10 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8DC8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF9DEF70 != -1)
    swift_once();
  v13 = sub_1CCB637FC();
  sub_1CCA16C20(v13, (uint64_t)qword_1EF9FF4C0);
  v14 = sub_1CCB637D8();
  v15 = sub_1CCB63D48();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1CC9BF000, v14, v15, "FMIPDeviceActionsController: lost mode action succeeded", v16, 2u);
    MEMORY[0x1D17B214C](v16, -1, -1);
  }

  v25 = 2;
  sub_1CCA14E90(&qword_1ED8A7FB0);
  v17 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPDevice() - 8) + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1CCB677E0;
  sub_1CCA0BEEC(a4 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, v19 + v18, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  a2(&v25, v19, 0, a4);
  swift_bridgeObjectRelease();
  v20 = sub_1CCB63C04();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v12, 1, 1, v20);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = a5;
  v21[5] = a6;
  swift_retain();
  v22 = a6;
  sub_1CCA4D8AC((uint64_t)v12, (uint64_t)&unk_1EF9E0320, (uint64_t)v21);
  swift_release();
  return sub_1CC9C3E84((uint64_t)v12, (uint64_t *)&unk_1ED8A8DC8);
}

uint64_t sub_1CCA519EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 64) = a4;
  *(_QWORD *)(v5 + 72) = a5;
  return swift_task_switch();
}

uint64_t sub_1CCA51A04()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  void *v8;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = (unint64_t *)(*(_QWORD *)(v0 + 64) + 112);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  sub_1CCA832C8(v1, v3);
  v5 = v4;
  v7 = v6;
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
    swift_beginAccess();
    v8 = (void *)sub_1CCA83454(v5);
    swift_endAccess();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1CCA51AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint8_t *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  int v58;
  void *v59;
  void *v60;
  char **v61;
  id v62;
  _QWORD *v63;
  char *v64;
  void *v65;
  char *v66;
  int v67;
  void *v68;
  void *v69;
  char **v70;
  id v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  char *v87;
  uint64_t v88;
  uint64_t aBlock;
  uint64_t v90;
  void (*v91)(uint64_t, void *);
  void *v92;
  uint64_t (*v93)(void *);
  _QWORD *v94;

  v77 = a3;
  v82 = a2;
  v4 = sub_1CCA14E90(&qword_1ED8A8EF8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v87 = (char *)&v76 - v8;
  v85 = sub_1CCB63604();
  v88 = *(_QWORD *)(v85 - 8);
  v9 = MEMORY[0x1E0C80A78](v85);
  v80 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v83 = (char *)&v76 - v11;
  v12 = type metadata accessor for FMIPItem();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for FMIPItemGroup();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v78 = (uint64_t)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF9DEF70 != -1)
    swift_once();
  v22 = sub_1CCB637FC();
  v86 = (id)sub_1CCA16C20(v22, (uint64_t)qword_1EF9FF4C0);
  v23 = sub_1CCB637D8();
  v24 = sub_1CCB63D48();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = v20;
    v26 = v19;
    v27 = v7;
    v28 = v13;
    v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v29 = 0;
    _os_log_impl(&dword_1CC9BF000, v23, v24, "FMIPDeviceActionsController: Perform Separation Action.", v29, 2u);
    v30 = v29;
    v13 = v28;
    v7 = v27;
    v19 = v26;
    v20 = v25;
    MEMORY[0x1D17B214C](v30, -1, -1);
  }

  v31 = a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device;
  v32 = type metadata accessor for FMIPDevice();
  sub_1CC9EAB74(v31 + *(int *)(v32 + 128), (uint64_t)v18, &qword_1ED8A8C30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_1CC9C3E84((uint64_t)v18, &qword_1ED8A8C30);
    v33 = v85;
    if (!*(_QWORD *)(v31 + 24))
    {
LABEL_9:
      v35 = sub_1CCB637D8();
      v36 = sub_1CCB63D48();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v37 = 0;
        _os_log_impl(&dword_1CC9BF000, v35, v36, "FMIPDeviceActionsController: Separation action could not be completed. No identifier for the device.", v37, 2u);
        MEMORY[0x1D17B214C](v37, -1, -1);
      }

      return;
    }
    sub_1CCB635BC();
    v34 = v88;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v7, 1, v33) == 1)
    {
      sub_1CC9C3E84((uint64_t)v7, &qword_1ED8A8EF8);
      goto LABEL_9;
    }
    v66 = v80;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v80, v7, v33);
    v67 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_enabled);
    v68 = (void *)objc_opt_self();
    v69 = (void *)sub_1CCB635D4();
    v70 = &selRef_beginLeashingWithBeaconUUID_;
    if (!v67)
      v70 = &selRef_endLeashingWithBeaconUUID_;
    v71 = objc_msgSend(v68, *v70, v69);

    v72 = *(void **)(v84 + 32);
    v73 = (_QWORD *)swift_allocObject();
    v74 = v77;
    v73[2] = v82;
    v73[3] = v74;
    v73[4] = a1;
    v93 = sub_1CCA55858;
    v94 = v73;
    aBlock = MEMORY[0x1E0C809B0];
    v90 = 1107296256;
    v91 = sub_1CCA1F54C;
    v92 = &unk_1E88F18A0;
    v75 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v72, sel_executeCommand_completion_, v71, v75);
    _Block_release(v75);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v66, v33);
  }
  else
  {
    v38 = v78;
    sub_1CC9FED60((uint64_t)v18, v78, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v39 = *(char **)(v38 + 40);
    v40 = *((_QWORD *)v39 + 2);
    v41 = MEMORY[0x1E0DEE9D8];
    v81 = a1;
    if (v40)
    {
      aBlock = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1CCA6388C(0, v40, 0);
      v42 = *(unsigned __int8 *)(v13 + 80);
      v80 = v39;
      v43 = (uint64_t)&v39[(v42 + 32) & ~v42];
      v44 = *(id *)(v13 + 72);
      v41 = aBlock;
      v86 = v44;
      do
      {
        sub_1CCA0BEEC(v43, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v46 = *((_QWORD *)v15 + 44);
        v45 = *((_QWORD *)v15 + 45);
        swift_bridgeObjectRetain();
        sub_1CCA0BF30((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1CCA6388C(0, *(_QWORD *)(v41 + 16) + 1, 1);
          v44 = v86;
          v41 = aBlock;
        }
        v48 = *(_QWORD *)(v41 + 16);
        v47 = *(_QWORD *)(v41 + 24);
        if (v48 >= v47 >> 1)
        {
          sub_1CCA6388C(v47 > 1, v48 + 1, 1);
          v44 = v86;
          v41 = aBlock;
        }
        *(_QWORD *)(v41 + 16) = v48 + 1;
        v49 = v41 + 16 * v48;
        *(_QWORD *)(v49 + 32) = v46;
        *(_QWORD *)(v49 + 40) = v45;
        v43 += (uint64_t)v44;
        --v40;
      }
      while (v40);
      swift_bridgeObjectRelease();
      a1 = v81;
    }
    v50 = v85;
    v51 = (char *)swift_allocObject();
    v52 = v77;
    *((_QWORD *)v51 + 2) = v82;
    *((_QWORD *)v51 + 3) = v52;
    *((_QWORD *)v51 + 4) = a1;
    *((_QWORD *)v51 + 5) = v41;
    v82 = swift_allocObject();
    *(_QWORD *)(v82 + 16) = 0;
    v53 = *(_QWORD *)(v41 + 16);
    if (v53)
    {
      v80 = v51;
      v79 = OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_enabled;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v54 = v41 + 40;
      v55 = v88;
      v56 = v83;
      do
      {
        swift_bridgeObjectRetain();
        v57 = (uint64_t)v87;
        sub_1CCB635BC();
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v57, 1, v50) == 1)
        {
          sub_1CC9C3E84(v57, &qword_1ED8A8EF8);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v56, v57, v50);
          v58 = *(unsigned __int8 *)(a1 + v79);
          v59 = (void *)objc_opt_self();
          v60 = (void *)sub_1CCB635D4();
          v61 = &selRef_beginLeashingWithBeaconUUID_;
          if (!v58)
            v61 = &selRef_endLeashingWithBeaconUUID_;
          v62 = objc_msgSend(v59, *v61, v60);

          v86 = *(id *)(v84 + 32);
          v63 = (_QWORD *)swift_allocObject();
          v64 = v80;
          v63[2] = sub_1CCA55870;
          v63[3] = v64;
          v63[4] = v82;
          v93 = sub_1CCA55890;
          v94 = v63;
          aBlock = MEMORY[0x1E0C809B0];
          v90 = 1107296256;
          v91 = sub_1CCA1F54C;
          v92 = &unk_1E88F1940;
          v65 = _Block_copy(&aBlock);
          swift_retain();
          a1 = v81;
          swift_retain();
          v50 = v85;
          swift_release();
          objc_msgSend(v86, sel_executeCommand_completion_, v62, v65);
          _Block_release(v65);

          (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v50);
        }
        v54 += 16;
        --v53;
      }
      while (v53);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      swift_retain();
    }
    swift_release();
    sub_1CCA0BF30(v78, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    swift_release();
  }
}

uint64_t sub_1CCA5232C(uint64_t result, id a2, void (*a3)(char *, uint64_t, id, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;

  if (a2)
  {
    v9 = a2;
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v10 = sub_1CCB637FC();
    sub_1CCA16C20(v10, (uint64_t)qword_1EF9FF4C0);
    v11 = sub_1CCB637D8();
    v12 = sub_1CCB63D48();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPDeviceActionsController: Complete Separation with error.", v13, 2u);
      MEMORY[0x1D17B214C](v13, -1, -1);
    }

    v25 = 0;
    sub_1CCA14E90(&qword_1ED8A7FB0);
    v14 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPDevice() - 8) + 80);
    v15 = (v14 + 32) & ~v14;
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(a5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, v16 + v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v17 = a2;
    a3(&v25, v16, a2, a5);

  }
  else
  {
    if (*(_QWORD *)(a6 + 16) != result)
      return result;
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v18 = sub_1CCB637FC();
    sub_1CCA16C20(v18, (uint64_t)qword_1EF9FF4C0);
    v19 = sub_1CCB637D8();
    v20 = sub_1CCB63D48();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1CC9BF000, v19, v20, "FMIPDeviceActionsController: Separation Complete Success!", v21, 2u);
      MEMORY[0x1D17B214C](v21, -1, -1);
    }

    v26 = 2;
    sub_1CCA14E90(&qword_1ED8A7FB0);
    v22 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPDevice() - 8) + 80);
    v23 = (v22 + 32) & ~v22;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(a5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, v24 + v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    a3(&v26, v24, 0, a5);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA52628(void *a1, uint64_t (*a2)(uint64_t, void *), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t result;
  void *v19;
  uint64_t v20[3];

  if (qword_1EF9DEF70 != -1)
    swift_once();
  v7 = sub_1CCB637FC();
  sub_1CCA16C20(v7, (uint64_t)qword_1EF9FF4C0);
  v8 = a1;
  v9 = a1;
  v10 = sub_1CCB637D8();
  v11 = sub_1CCB63D48();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v20[0] = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = a1;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v15 = sub_1CCB639AC();
    sub_1CCA0CB60(v15, v16, v20);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPDeviceActionsController: Separation action completed with error %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v13, -1, -1);
    MEMORY[0x1D17B214C](v12, -1, -1);
  }
  else
  {

  }
  v17 = (uint64_t *)(a4 + 16);
  if (a1)
  {
    swift_beginAccess();
    result = *v17;
    v19 = a1;
    return a2(result, v19);
  }
  swift_beginAccess();
  result = *v17 + 1;
  if (!__OFADD__(*v17, 1))
  {
    *v17 = result;
    v19 = 0;
    return a2(result, v19);
  }
  __break(1u);
  return result;
}

uint64_t sub_1CCA52854(void *a1, void (*a2)(uint64_t *, uint64_t, _QWORD, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(uint64_t *, uint64_t, _QWORD, uint64_t);
  uint64_t v27;

  if (qword_1EF9DEF70 != -1)
    swift_once();
  v7 = sub_1CCB637FC();
  sub_1CCA16C20(v7, (uint64_t)qword_1EF9FF4C0);
  v8 = a1;
  v9 = a1;
  v10 = sub_1CCB637D8();
  v11 = sub_1CCB63D48();
  if (!os_log_type_enabled(v10, v11))
  {

    if (a1)
      goto LABEL_5;
LABEL_7:
    LOBYTE(v27) = 2;
    sub_1CCA14E90(&qword_1ED8A7FB0);
    v22 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPDevice() - 8) + 80);
    v23 = (v22 + 32) & ~v22;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1CCB677E0;
    sub_1CCA0BEEC(a4 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, v24 + v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    a2(&v27, v24, 0, a4);
    return swift_bridgeObjectRelease();
  }
  v26 = a2;
  v12 = (uint8_t *)swift_slowAlloc();
  v13 = swift_slowAlloc();
  v27 = v13;
  *(_DWORD *)v12 = 136315138;
  v14 = a1;
  sub_1CCA14E90(&qword_1EF9DFCB8);
  v15 = sub_1CCB639AC();
  sub_1CCA0CB60(v15, v16, &v27);
  sub_1CCB63E44();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPDeviceActionsController: Separation action completed with error %s", v12, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17B214C](v13, -1, -1);
  v17 = v12;
  a2 = v26;
  MEMORY[0x1D17B214C](v17, -1, -1);

  if (!a1)
    goto LABEL_7;
LABEL_5:
  LOBYTE(v27) = 0;
  sub_1CCA14E90(&qword_1ED8A7FB0);
  v18 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPDevice() - 8) + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1CCB677E0;
  sub_1CCA0BEEC(a4 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, v20 + v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v21 = a1;
  a2(&v27, v20, a1, a4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA52B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  _QWORD v14[6];

  v7 = a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device;
  if ((*(_BYTE *)(v7 + *(int *)(type metadata accessor for FMIPDevice() + 148)) & 1) == 0)
    return sub_1CCA52FD8(a1, a2, a3);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a1;
  v9[5] = v3;
  if (*(_QWORD *)(v7 + 56))
  {
    v10 = (void *)objc_opt_self();
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    v11 = objc_msgSend(v10, sel_sharedInstance);
    v12 = (void *)sub_1CCB63964();
    v14[4] = sub_1CCA55848;
    v14[5] = v9;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1107296256;
    v14[2] = sub_1CCA1F54C;
    v14[3] = &unk_1E88F1850;
    v13 = _Block_copy(v14);
    swift_retain();
    swift_release();
    objc_msgSend(v11, sel_removeAccessoryWithDiscoveryId_completion_, v12, v13);
    _Block_release(v13);

    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    sub_1CCA52FD8(a1, a2, a3);
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
}

void sub_1CCA52DA4(void *a1, void (*a2)(_QWORD *, _QWORD, void *, uint64_t), uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  if (a1)
  {
    v7 = a1;
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v8 = sub_1CCB637FC();
    sub_1CCA16C20(v8, (uint64_t)qword_1EF9FF4C0);
    v9 = a1;
    v10 = a1;
    v11 = sub_1CCB637D8();
    v12 = sub_1CCB63D48();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      *(_DWORD *)v13 = 136315138;
      v15[1] = 0xE000000000000000;
      v16 = v14;
      sub_1CCA14E90(&qword_1EF9DF470);
      sub_1CCB64060();
      v15[0] = sub_1CCA0CB60(0, 0xE000000000000000, &v16);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPDeviceActionsController: remove device failed %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v14, -1, -1);
      MEMORY[0x1D17B214C](v13, -1, -1);
    }
    else
    {

    }
    LOBYTE(v15[0]) = 0;
    a2(v15, 0, a1, a4);

  }
  else
  {
    sub_1CCA52FD8(a4, (uint64_t)a2, a3);
  }
}

uint64_t sub_1CCA52FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;

  v4 = v3;
  if (qword_1EF9DEF70 != -1)
    swift_once();
  v8 = sub_1CCB637FC();
  sub_1CCA16C20(v8, (uint64_t)qword_1EF9FF4C0);
  v9 = sub_1CCB637D8();
  v10 = sub_1CCB63D48();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1CC9BF000, v9, v10, "FMIPDeviceActionsController: Starting remove device request", v11, 2u);
    MEMORY[0x1D17B214C](v11, -1, -1);
  }

  type metadata accessor for FMIPRemoveRequest();
  *(_QWORD *)(swift_allocObject() + qword_1EF9FF7E8) = a1;
  if ((*(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 216) & 0x80) != 0)
    v12 = 0xD000000000000014;
  else
    v12 = 0x65766F6D6572;
  if ((*(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 216) & 0x80) != 0)
    v13 = 0x80000001CCB79670;
  else
    v13 = 0xE600000000000000;
  v14 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  v15 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  v16 = sub_1CCA601C8(v12, v13, v14, v15, 1);
  v17 = v4[9];
  v18 = v4[10];
  sub_1CCA04DDC(v4 + 6, v17);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a1;
  v19[5] = v4;
  v20 = *(void (**)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  v21 = type metadata accessor for FMIPRemoveResponse();
  swift_retain();
  swift_retain();
  swift_retain();
  v20(v16, sub_1CCA557E8, v19, v21, v17, v18);
  swift_release();
  return swift_release();
}

uint64_t sub_1CCA53204(uint64_t a1, void *a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  id v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  char *v52;
  void *v53;
  uint64_t v54;
  uint64_t (*v55)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t aBlock[6];
  uint64_t v61;

  v58 = a4;
  v59 = a5;
  v8 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v8);
  v56 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB63604();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF9DEF70 != -1)
    swift_once();
  v14 = sub_1CCB637FC();
  v15 = sub_1CCA16C20(v14, (uint64_t)qword_1EF9FF4C0);
  swift_retain_n();
  v57 = v15;
  v16 = sub_1CCB637D8();
  v17 = sub_1CCB63D48();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v55 = a3;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc();
    v53 = a2;
    v21 = v20;
    aBlock[0] = v20;
    v54 = v11;
    *(_DWORD *)v19 = 136315138;
    v52 = v13;
    v61 = a1;
    sub_1CCA14E90(&qword_1EF9E02E8);
    v22 = sub_1CCB63E20();
    v61 = sub_1CCA0CB60(v22, v23, aBlock);
    v13 = v52;
    v11 = v54;
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v16, v17, "FMIPDeviceActionsController: remove response received: %s", v19, 0xCu);
    swift_arrayDestroy();
    v24 = v21;
    a2 = v53;
    MEMORY[0x1D17B214C](v24, -1, -1);
    v25 = v19;
    a3 = v55;
    MEMORY[0x1D17B214C](v25, -1, -1);

    if (a2)
      goto LABEL_11;
  }
  else
  {

    swift_release_n();
    if (a2)
    {
LABEL_11:
      v27 = a2;
      v28 = a2;
      v29 = sub_1CCB637D8();
      v30 = sub_1CCB63D48();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        v32 = swift_slowAlloc();
        aBlock[0] = v32;
        *(_DWORD *)v31 = 136315138;
        v61 = (uint64_t)a2;
        sub_1CCA14E90(&qword_1EF9DFCB8);
        v33 = sub_1CCB63E20();
        v61 = sub_1CCA0CB60(v33, v34, aBlock);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1CC9BF000, v29, v30, "FMIPDeviceActionsController: error received for remove request: %s", v31, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v32, -1, -1);
        MEMORY[0x1D17B214C](v31, -1, -1);
      }
      else
      {

      }
      LOBYTE(aBlock[0]) = 0;
      return a3(aBlock, 0, a2, v59);
    }
  }
  if (!a1)
    goto LABEL_11;
  if (!*(_QWORD *)(v59 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 24))
  {
    swift_retain();
    goto LABEL_16;
  }
  swift_retain();
  v26 = (uint64_t)v56;
  sub_1CCB635BC();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v26, 1, v10) == 1)
  {
    sub_1CC9C3E84(v26, &qword_1ED8A8EF8);
LABEL_16:
    v36 = sub_1CCB637D8();
    v37 = sub_1CCB63D48();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1CC9BF000, v36, v37, "FMIPDeviceActionsController: Not calling unpair for local findable beacons", v38, 2u);
      MEMORY[0x1D17B214C](v38, -1, -1);
    }

    FMIPActionStatus.init(rawValue:)(*(_QWORD *)(a1 + 48));
    v39 = aBlock[0];
    if (LOBYTE(aBlock[0]) == 18)
      v39 = 0;
    LOBYTE(aBlock[0]) = v39;
    v40 = *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    a3(aBlock, v40, 0, v59);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v41 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v13, v26, v10);
  v42 = sub_1CCB637D8();
  v43 = sub_1CCB63D48();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v44 = 0;
    _os_log_impl(&dword_1CC9BF000, v42, v43, "FMIPDeviceActionsController: Calling unpair for local findable beacons", v44, 2u);
    MEMORY[0x1D17B214C](v44, -1, -1);
  }

  v45 = sub_1CCA40D58();
  v46 = (void *)sub_1CCB635D4();
  v47 = (_QWORD *)swift_allocObject();
  v48 = v58;
  v49 = v59;
  v47[2] = a3;
  v47[3] = v48;
  v47[4] = v41;
  v47[5] = 0;
  v47[6] = v49;
  aBlock[4] = (uint64_t)sub_1CCA55830;
  aBlock[5] = (uint64_t)v47;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA1F54C;
  aBlock[3] = (uint64_t)&unk_1E88F1800;
  v50 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v45, sel_unpairUUID_force_completion_, v46, 0, v50);
  _Block_release(v50);
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_1CCA53880(void *a1, void (*a2)(uint64_t *, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint8_t *v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v26;

  if (qword_1EF9DEF70 != -1)
    swift_once();
  v10 = sub_1CCB637FC();
  sub_1CCA16C20(v10, (uint64_t)qword_1EF9FF4C0);
  v11 = a1;
  v12 = a1;
  v13 = sub_1CCB637D8();
  v14 = sub_1CCB63D48();
  if (os_log_type_enabled(v13, v14))
  {
    v24 = a4;
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v26 = v16;
    *(_DWORD *)v15 = 136315138;
    v17 = a1;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v18 = sub_1CCB639AC();
    sub_1CCA0CB60(v18, v19, &v26);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v13, v14, "FMIPDeviceActionsController: Unpair finished. With error? %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v16, -1, -1);
    v20 = v15;
    a4 = v24;
    MEMORY[0x1D17B214C](v20, -1, -1);
  }
  else
  {

  }
  FMIPActionStatus.init(rawValue:)(*(_QWORD *)(a4 + 48));
  v21 = v26;
  if (v26 == 18)
    v21 = 0;
  LOBYTE(v26) = v21;
  v22 = *(_QWORD *)(a4 + 56);
  swift_bridgeObjectRetain();
  a2(&v26, v22, a5, a6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCA53AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void (*v19)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;

  v4 = v3;
  if (qword_1EF9DEF70 != -1)
    swift_once();
  v8 = sub_1CCB637FC();
  sub_1CCA16C20(v8, (uint64_t)qword_1EF9FF4C0);
  v9 = sub_1CCB637D8();
  v10 = sub_1CCB63D48();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1CC9BF000, v9, v10, "FMIPDeviceActionsController: Starting repair device request", v11, 2u);
    MEMORY[0x1D17B214C](v11, -1, -1);
  }

  type metadata accessor for FMIPRepairRequest();
  *(_QWORD *)(swift_allocObject() + qword_1EF9FF660) = a1;
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  v14 = sub_1CCA601C8(0x6544726961706572, 0xEC00000065636976, v12, v13, 0);
  v15 = v4 + 6;
  v17 = v4[9];
  v16 = v4[10];
  sub_1CCA04DDC(v15, v17);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = a1;
  v19 = *(void (**)(_QWORD *, uint64_t (*)(uint64_t, void *), _QWORD *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v20 = type metadata accessor for FMIPRepairResponse();
  swift_retain();
  swift_retain();
  v19(v14, sub_1CCA557D0, v18, v20, v17, v16);
  swift_release();
  return swift_release();
}

uint64_t sub_1CCA53CB4(uint64_t a1, void *a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v28;

  if (a2 || !a1)
  {
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v17 = sub_1CCB637FC();
    sub_1CCA16C20(v17, (uint64_t)qword_1EF9FF4C0);
    v18 = a2;
    v19 = a2;
    v20 = sub_1CCB637D8();
    v21 = sub_1CCB63D48();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v27 = a3;
      v23 = swift_slowAlloc();
      v28 = v23;
      *(_DWORD *)v22 = 136315138;
      sub_1CCA14E90(&qword_1EF9DFCB8);
      v24 = sub_1CCB63E20();
      sub_1CCA0CB60(v24, v25, &v28);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v20, v21, "FMIPDeviceActionsController: error received for repair request: %s", v22, 0xCu);
      swift_arrayDestroy();
      v26 = v23;
      a3 = v27;
      MEMORY[0x1D17B214C](v26, -1, -1);
      MEMORY[0x1D17B214C](v22, -1, -1);
    }
    else
    {

    }
    LOBYTE(v28) = 0;
    return a3(&v28, 0, a2, a5);
  }
  else
  {
    v9 = qword_1EF9DEF70;
    swift_retain();
    if (v9 != -1)
      swift_once();
    v10 = sub_1CCB637FC();
    sub_1CCA16C20(v10, (uint64_t)qword_1EF9FF4C0);
    v11 = sub_1CCB637D8();
    v12 = sub_1CCB63D48();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1CC9BF000, v11, v12, "FMIPDeviceActionsController: repair device action completed successfully", v13, 2u);
      MEMORY[0x1D17B214C](v13, -1, -1);
    }

    FMIPActionStatus.init(rawValue:)(*(_QWORD *)(a1 + 48));
    v14 = v28;
    if (v28 == 18)
      v14 = 0;
    LOBYTE(v28) = v14;
    v15 = *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    a3(&v28, v15, 0, a5);
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

void sub_1CCA53FB0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, id a5, void (*a6)(uint64_t, id), uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  id v33;
  void *v34;
  _BYTE *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  if (a5)
  {
    v13 = a5;
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v14 = sub_1CCB637FC();
    sub_1CCA16C20(v14, (uint64_t)qword_1EF9FF4C0);
    v15 = a5;
    v16 = a5;
    v17 = sub_1CCB637D8();
    v18 = sub_1CCB63D48();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v39 = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = a5;
      sub_1CCA14E90(&qword_1EF9DF470);
      v22 = sub_1CCB639AC();
      sub_1CCA0CB60(v22, v23, &v39);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v17, v18, "FMIPDeviceActionsController: Authentication error %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v20, -1, -1);
      MEMORY[0x1D17B214C](v19, -1, -1);
    }
    else
    {

    }
    v33 = a5;
    a6(a8, a5);

  }
  else if (a4 && a2)
  {
    v28 = qword_1EF9DEF70;
    swift_bridgeObjectRetain();
    if (v28 != -1)
      swift_once();
    v29 = sub_1CCB637FC();
    sub_1CCA16C20(v29, (uint64_t)qword_1EF9FF4C0);
    swift_bridgeObjectRetain_n();
    v30 = sub_1CCB637D8();
    v31 = sub_1CCB63D48();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v39 = v38;
      *(_DWORD *)v32 = 136315138;
      swift_bridgeObjectRetain();
      sub_1CCA0CB60(a3, a4, &v39);
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1CC9BF000, v30, v31, "FMIPDeviceActionsController: Authentication received %s", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v38, -1, -1);
      MEMORY[0x1D17B214C](v32, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v36 = (_QWORD *)(a8 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
    *v36 = a1;
    v36[1] = a2;
    swift_bridgeObjectRelease();
    v37 = (_QWORD *)swift_allocObject();
    v37[2] = a6;
    v37[3] = a7;
    v37[4] = a8;
    swift_retain();
    swift_retain();
    sub_1CCA547DC(a3, a4, a8, (uint64_t)sub_1CCA572F0, (uint64_t)v37);
    swift_release();
  }
  else
  {
    sub_1CCA5589C();
    v34 = (void *)swift_allocError();
    *v35 = 1;
    a6(a8, v34);

  }
}

void sub_1CCA54424(int a1, uint64_t a2, id a3, void (*a4)(uint64_t, id), uint64_t a5, uint64_t a6)
{
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;

  if (a3)
  {
    v9 = a3;
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v10 = sub_1CCB637FC();
    sub_1CCA16C20(v10, (uint64_t)qword_1EF9FF4C0);
    v11 = a3;
    v12 = a3;
    v13 = sub_1CCB637D8();
    v14 = sub_1CCB63D48();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v32 = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = a3;
      sub_1CCA14E90(&qword_1EF9DF470);
      v18 = sub_1CCB639AC();
      sub_1CCA0CB60(v18, v19, &v32);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v13, v14, "FMIPDeviceActionsController: Error validating password %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v16, -1, -1);
      MEMORY[0x1D17B214C](v15, -1, -1);
    }
    else
    {

    }
    v31 = a3;
    a4(a6, a3);

  }
  else
  {
    if (qword_1EF9DEF70 != -1)
      swift_once();
    v21 = sub_1CCB637FC();
    sub_1CCA16C20(v21, (uint64_t)qword_1EF9FF4C0);
    swift_retain_n();
    v22 = sub_1CCB637D8();
    v23 = sub_1CCB63D48();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v32 = v25;
      *(_DWORD *)v24 = 136315138;
      v26 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 344);
      v27 = swift_retain();
      v28 = v26(v27);
      v30 = v29;
      swift_release();
      sub_1CCA0CB60(v28, v30, &v32);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v22, v23, "FMIPDeviceActionsController: Password validated %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v25, -1, -1);
      MEMORY[0x1D17B214C](v24, -1, -1);

      a4(a2, 0);
    }
    else
    {

      swift_release_n();
      a4(a2, 0);
    }
  }
}

uint64_t sub_1CCA547DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void (*v26)(_QWORD *, uint64_t (*)(_QWORD *, void *), _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v29;

  v6 = v5;
  v12 = type metadata accessor for FMIPDevice();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMIPLostModeAction(0);
  if (swift_dynamicCastClass())
  {
    v15 = 3;
  }
  else
  {
    type metadata accessor for FMIPLockAction();
    if (swift_dynamicCastClass())
    {
      v15 = 2;
    }
    else
    {
      type metadata accessor for FMIPEraseAction();
      if (swift_dynamicCastClass())
      {
        v15 = 0;
      }
      else
      {
        type metadata accessor for FMIPCancelEraseAction();
        if (swift_dynamicCastClass())
        {
          v15 = 1;
        }
        else
        {
          type metadata accessor for FMIPRemoveDeviceAction(0);
          if (swift_dynamicCastClass())
            v15 = 4;
          else
            v15 = 5;
        }
      }
    }
  }
  sub_1CCA0BEEC(a3 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  type metadata accessor for FMIPValidatePasswordRequest();
  v16 = swift_allocObject();
  v17 = (_QWORD *)(v16 + qword_1EF9FF738);
  *v17 = a1;
  v17[1] = a2;
  *(_BYTE *)(v16 + qword_1EF9FF740) = v15;
  sub_1CCA0BEEC((uint64_t)v14, v16 + qword_1EF9FF748, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v18 = *((_QWORD *)v14 + 27);
  if ((v18 & 0x80) != 0)
    v19 = 0xD000000000000013;
  else
    v19 = 0xD000000000000011;
  if ((v18 & 0x80) != 0)
    v20 = 0x80000001CCB79650;
  else
    v20 = 0x80000001CCB79630;
  swift_bridgeObjectRetain();
  v21 = sub_1CCA601C8(v19, v20, 0, 0, 1);
  sub_1CCA0BF30((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v22 = v6 + 6;
  v24 = v6[9];
  v23 = v6[10];
  sub_1CCA04DDC(v22, v24);
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = a4;
  v25[3] = a5;
  v25[4] = a3;
  v26 = *(void (**)(_QWORD *, uint64_t (*)(_QWORD *, void *), _QWORD *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v27 = type metadata accessor for FMIPValidatePasswordResponse();
  swift_retain();
  swift_retain();
  v26(v21, sub_1CCA55710, v25, v27, v24, v23);
  swift_release();
  return swift_release();
}

uint64_t sub_1CCA54A64(_QWORD *a1, void *a2, void (*a3)(_QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  void (*v32)(_QWORD, _QWORD, _QWORD);
  uint64_t v33;

  if (qword_1EF9DEF70 != -1)
    swift_once();
  v9 = sub_1CCB637FC();
  sub_1CCA16C20(v9, (uint64_t)qword_1EF9FF4C0);
  swift_retain_n();
  v10 = sub_1CCB637D8();
  v11 = sub_1CCB63D48();
  if (os_log_type_enabled(v10, v11))
  {
    v32 = a3;
    v12 = (uint8_t *)swift_slowAlloc();
    v31 = a2;
    v13 = swift_slowAlloc();
    v33 = v13;
    *(_DWORD *)v12 = 136315138;
    sub_1CCA14E90(&qword_1EF9E02E0);
    v14 = sub_1CCB63E20();
    sub_1CCA0CB60(v14, v15, &v33);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPDeviceActionsController: validate password response received: %s", v12, 0xCu);
    swift_arrayDestroy();
    v16 = v13;
    a2 = v31;
    MEMORY[0x1D17B214C](v16, -1, -1);
    v17 = v12;
    a3 = v32;
    MEMORY[0x1D17B214C](v17, -1, -1);

    if (v31)
      goto LABEL_9;
  }
  else
  {

    swift_release_n();
    if (a2)
      goto LABEL_9;
  }
  if (a1)
  {
    v18 = a1[8];
    v19 = (_QWORD *)(a5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
    *v19 = a1[7];
    v19[1] = v18;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v20 = a1[10];
    v21 = (_QWORD *)(a5 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
    *v21 = a1[9];
    v21[1] = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    LOBYTE(v33) = 2 * (a1[6] == 200);
    a3(&v33, a5, 0);
    return swift_release();
  }
LABEL_9:
  v23 = a2;
  v24 = a2;
  v25 = sub_1CCB637D8();
  v26 = sub_1CCB63D48();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    *(_DWORD *)v27 = 136315138;
    v33 = v28;
    sub_1CCA14E90(&qword_1EF9DFCB8);
    v29 = sub_1CCB63E20();
    sub_1CCA0CB60(v29, v30, &v33);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, v25, v26, "FMIPDeviceActionsController: error received validate password: %s", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v28, -1, -1);
    MEMORY[0x1D17B214C](v27, -1, -1);
  }
  else
  {

  }
  LOBYTE(v33) = 0;
  return ((uint64_t (*)(uint64_t *, uint64_t, void *))a3)(&v33, a5, a2);
}

void sub_1CCA54E44(uint64_t a1, void *a2, void (*a3)(uint64_t, void *), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint8_t *v16;
  void (**v17)(uint64_t, uint64_t, void (*)(char), _QWORD *);
  void (*v18)(uint64_t, uint64_t, void (*)(char), _QWORD *);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  void *v34;
  _BYTE *v35;
  void *v36;
  uint64_t v38[3];
  uint64_t v39;

  if (qword_1EF9DEF70 != -1)
    swift_once();
  v9 = sub_1CCB637FC();
  sub_1CCA16C20(v9, (uint64_t)qword_1EF9FF4C0);
  swift_retain_n();
  v10 = sub_1CCB637D8();
  v11 = sub_1CCB63D48();
  if (os_log_type_enabled(v10, v11))
  {
    v36 = a2;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v38[0] = v13;
    *(_DWORD *)v12 = 136315138;
    v39 = a1;
    sub_1CCA14E90(&qword_1EF9E03C0);
    v14 = sub_1CCB63E20();
    v39 = sub_1CCA0CB60(v14, v15, v38);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPDeviceActionsController: verify trusted state response received: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v13, -1, -1);
    v16 = v12;
    a2 = v36;
    MEMORY[0x1D17B214C](v16, -1, -1);

    if (v36)
      goto LABEL_10;
  }
  else
  {

    swift_release_n();
    if (a2)
    {
LABEL_10:
      v22 = a2;
      v23 = a2;
      v24 = sub_1CCB637D8();
      v25 = sub_1CCB63D48();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc();
        v27 = swift_slowAlloc();
        v38[0] = v27;
        *(_DWORD *)v26 = 136315138;
        v39 = (uint64_t)a2;
        sub_1CCA14E90(&qword_1EF9DFCB8);
        v28 = sub_1CCB63E20();
        v39 = sub_1CCA0CB60(v28, v29, v38);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1CC9BF000, v24, v25, "FMIPDeviceActionsController: error received verifying trusted state password: %s", v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v27, -1, -1);
        MEMORY[0x1D17B214C](v26, -1, -1);
      }
      else
      {

      }
      a3(a5, a2);
      return;
    }
  }
  if (!a1)
    goto LABEL_10;
  v17 = (void (**)(uint64_t, uint64_t, void (*)(char), _QWORD *))(a5
                                                                                    + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  swift_beginAccess();
  v18 = *v17;
  if (*v17)
  {
    v19 = *(unsigned __int8 *)(a1 + 57);
    v20 = *(unsigned __int8 *)(a1 + 56);
    v21 = (_QWORD *)swift_allocObject();
    v21[2] = a3;
    v21[3] = a4;
    v21[4] = a5;
    swift_retain();
    sub_1CC9DF994((uint64_t)v18);
    swift_retain();
    swift_retain();
    v18(v19, v20, sub_1CCA5721C, v21);
    swift_release();
    swift_release();
    sub_1CCA203A8((uint64_t)v18);
  }
  else
  {
    v30 = qword_1ED8AA630;
    swift_retain();
    if (v30 != -1)
      swift_once();
    sub_1CCA16C20(v9, (uint64_t)qword_1ED8AD7F8);
    v31 = sub_1CCB637D8();
    v32 = sub_1CCB63D30();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_1CC9BF000, v31, v32, "FMIPDeviceActionsController: trusted device confirmation callback missing", v33, 2u);
      MEMORY[0x1D17B214C](v33, -1, -1);
    }

    sub_1CCA5589C();
    v34 = (void *)swift_allocError();
    *v35 = 3;
    a3(a5, v34);
    swift_release();

  }
}

